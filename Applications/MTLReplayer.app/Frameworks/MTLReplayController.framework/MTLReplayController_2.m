void sub_C393C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  _WORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _WORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _QWORD *v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  _QWORD *v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  unint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  _QWORD *v188;
  uint64_t v189;
  char *v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  _QWORD *v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  char *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  _QWORD *v232;
  uint64_t v233;
  char *v234;
  unint64_t v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  _QWORD *v254;
  uint64_t v255;
  char *v256;
  unint64_t v257;
  char *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  unint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  _QWORD *v276;
  uint64_t v277;
  char *v278;
  unint64_t v279;
  char *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  char *v292;
  char *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  _QWORD *v298;
  uint64_t v299;
  char *v300;
  unint64_t v301;
  char *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  unint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  char *v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  _QWORD *v320;
  uint64_t v321;
  char *v322;
  unint64_t v323;
  char *v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  char *v329;
  unint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  char *v336;
  char *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  _QWORD *v342;
  uint64_t v343;
  char *v344;
  unint64_t v345;
  char *v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  char *v351;
  unint64_t v352;
  _QWORD *v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  char *v358;
  char *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  _QWORD *v364;
  uint64_t v365;
  char *v366;
  unint64_t v367;
  char *v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  char *v373;
  unint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  char *v380;
  char *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  _QWORD *v386;
  uint64_t v387;
  char *v388;
  unint64_t v389;
  char *v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  char *v395;
  unint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  char *v402;
  char *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  _QWORD *v408;
  uint64_t v409;
  char *v410;
  unint64_t v411;
  char *v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  char *v417;
  unint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  char *v424;
  char *v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  char *v433;
  unint64_t v434;
  char *v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  char *v440;
  uint64_t v441;
  unint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  char *v448;
  char *v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
      v8 = (char *)v6[98];
      v22 = v6[99];
      if ((unint64_t)v8 >= v22)
      {
        v10 = (char *)v6[97];
        v24 = (v8 - v10) >> 3;
        if ((unint64_t)(v24 + 1) >> 61)
          goto LABEL_648;
        v25 = v22 - (_QWORD)v10;
        v26 = (uint64_t)(v22 - (_QWORD)v10) >> 2;
        if (v26 <= v24 + 1)
          v26 = v24 + 1;
        if (v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (char *)sub_40FC((uint64_t)(v6 + 99), v27);
          v8 = (char *)v6[98];
          v10 = (char *)v6[97];
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[8 * v24];
        v30 = &v28[8 * v27];
        *(_QWORD *)v29 = v7;
        v23 = v29 + 8;
        while (v8 != v10)
        {
          v32 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v29 - 1) = v32;
          v29 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
      v8 = (char *)v6[98];
      v9 = v6[99];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[97];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_648;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 99), v14);
          v8 = (char *)v6[98];
          v10 = (char *)v6[97];
        }
        else
        {
          v15 = 0;
        }
        v29 = &v15[8 * v11];
        v30 = &v15[8 * v14];
        *(_QWORD *)v29 = v7;
        v23 = v29 + 8;
        while (v8 != v10)
        {
          v31 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v29 - 1) = v31;
          v29 -= 8;
        }
LABEL_35:
        v6[97] = v29;
        v6[98] = v23;
        v6[99] = v30;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v23 = v8 + 8;
LABEL_37:
    v6[98] = v23;
LABEL_38:
    v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      v34 = *(_QWORD **)a1[1];
      v35 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
      v36 = (char *)v34[101];
      v44 = v34[102];
      if ((unint64_t)v36 >= v44)
      {
        v38 = (char *)v34[100];
        v46 = (v36 - v38) >> 3;
        if ((unint64_t)(v46 + 1) >> 61)
          goto LABEL_648;
        v47 = v44 - (_QWORD)v38;
        v48 = (uint64_t)(v44 - (_QWORD)v38) >> 2;
        if (v48 <= v46 + 1)
          v48 = v46 + 1;
        if (v47 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          v50 = (char *)sub_40FC((uint64_t)(v34 + 102), v49);
          v36 = (char *)v34[101];
          v38 = (char *)v34[100];
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[8 * v46];
        v52 = &v50[8 * v49];
        *(_QWORD *)v51 = v35;
        v45 = v51 + 8;
        while (v36 != v38)
        {
          v54 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v51 - 1) = v54;
          v51 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1)
        goto LABEL_70;
      v34 = *(_QWORD **)a1[1];
      v35 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
      v36 = (char *)v34[101];
      v37 = v34[102];
      if ((unint64_t)v36 >= v37)
      {
        v38 = (char *)v34[100];
        v39 = (v36 - v38) >> 3;
        if ((unint64_t)(v39 + 1) >> 61)
          goto LABEL_648;
        v40 = v37 - (_QWORD)v38;
        v41 = (uint64_t)(v37 - (_QWORD)v38) >> 2;
        if (v41 <= v39 + 1)
          v41 = v39 + 1;
        if (v40 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          v43 = (char *)sub_40FC((uint64_t)(v34 + 102), v42);
          v36 = (char *)v34[101];
          v38 = (char *)v34[100];
        }
        else
        {
          v43 = 0;
        }
        v51 = &v43[8 * v39];
        v52 = &v43[8 * v42];
        *(_QWORD *)v51 = v35;
        v45 = v51 + 8;
        while (v36 != v38)
        {
          v53 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v51 - 1) = v53;
          v51 -= 8;
        }
LABEL_67:
        v34[100] = v51;
        v34[101] = v45;
        v34[102] = v52;
        if (v38)
          operator delete(v38);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v36 = v35;
    v45 = v36 + 8;
LABEL_69:
    v34[101] = v45;
LABEL_70:
    v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      v56 = *(_QWORD **)a1[1];
      v57 = *(_WORD *)(a1[2] + 58) & 0x7FFF;
      v58 = (char *)v56[104];
      v66 = v56[105];
      if ((unint64_t)v58 >= v66)
      {
        v60 = (char *)v56[103];
        v68 = (v58 - v60) >> 3;
        if ((unint64_t)(v68 + 1) >> 61)
          goto LABEL_648;
        v69 = v66 - (_QWORD)v60;
        v70 = (uint64_t)(v66 - (_QWORD)v60) >> 2;
        if (v70 <= v68 + 1)
          v70 = v68 + 1;
        if (v69 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        if (v71)
        {
          v72 = (char *)sub_40FC((uint64_t)(v56 + 105), v71);
          v58 = (char *)v56[104];
          v60 = (char *)v56[103];
        }
        else
        {
          v72 = 0;
        }
        v73 = &v72[8 * v68];
        v74 = &v72[8 * v71];
        *(_QWORD *)v73 = v57;
        v67 = v73 + 8;
        while (v58 != v60)
        {
          v76 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v73 - 1) = v76;
          v73 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1)
        goto LABEL_102;
      v56 = *(_QWORD **)a1[1];
      v57 = *(_WORD *)(a1[2] + 58) & 0x7FFF;
      v58 = (char *)v56[104];
      v59 = v56[105];
      if ((unint64_t)v58 >= v59)
      {
        v60 = (char *)v56[103];
        v61 = (v58 - v60) >> 3;
        if ((unint64_t)(v61 + 1) >> 61)
          goto LABEL_648;
        v62 = v59 - (_QWORD)v60;
        v63 = (uint64_t)(v59 - (_QWORD)v60) >> 2;
        if (v63 <= v61 + 1)
          v63 = v61 + 1;
        if (v62 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v64 = v63;
        if (v64)
        {
          v65 = (char *)sub_40FC((uint64_t)(v56 + 105), v64);
          v58 = (char *)v56[104];
          v60 = (char *)v56[103];
        }
        else
        {
          v65 = 0;
        }
        v73 = &v65[8 * v61];
        v74 = &v65[8 * v64];
        *(_QWORD *)v73 = v57;
        v67 = v73 + 8;
        while (v58 != v60)
        {
          v75 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v73 - 1) = v75;
          v73 -= 8;
        }
LABEL_99:
        v56[103] = v73;
        v56[104] = v67;
        v56[105] = v74;
        if (v60)
          operator delete(v60);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v58 = v57;
    v67 = v58 + 8;
LABEL_101:
    v56[104] = v67;
LABEL_102:
    v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      v78 = *(_QWORD **)a1[1];
      v79 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
      v80 = (char *)v78[107];
      v88 = v78[108];
      if ((unint64_t)v80 >= v88)
      {
        v82 = (char *)v78[106];
        v90 = (v80 - v82) >> 3;
        if ((unint64_t)(v90 + 1) >> 61)
          goto LABEL_648;
        v91 = v88 - (_QWORD)v82;
        v92 = (uint64_t)(v88 - (_QWORD)v82) >> 2;
        if (v92 <= v90 + 1)
          v92 = v90 + 1;
        if (v91 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        if (v93)
        {
          v94 = (char *)sub_40FC((uint64_t)(v78 + 108), v93);
          v80 = (char *)v78[107];
          v82 = (char *)v78[106];
        }
        else
        {
          v94 = 0;
        }
        v95 = &v94[8 * v90];
        v96 = &v94[8 * v93];
        *(_QWORD *)v95 = v79;
        v89 = v95 + 8;
        while (v80 != v82)
        {
          v98 = *((_QWORD *)v80 - 1);
          v80 -= 8;
          *((_QWORD *)v95 - 1) = v98;
          v95 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1)
        goto LABEL_134;
      v78 = *(_QWORD **)a1[1];
      v79 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
      v80 = (char *)v78[107];
      v81 = v78[108];
      if ((unint64_t)v80 >= v81)
      {
        v82 = (char *)v78[106];
        v83 = (v80 - v82) >> 3;
        if ((unint64_t)(v83 + 1) >> 61)
          goto LABEL_648;
        v84 = v81 - (_QWORD)v82;
        v85 = (uint64_t)(v81 - (_QWORD)v82) >> 2;
        if (v85 <= v83 + 1)
          v85 = v83 + 1;
        if (v84 >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v85;
        if (v86)
        {
          v87 = (char *)sub_40FC((uint64_t)(v78 + 108), v86);
          v80 = (char *)v78[107];
          v82 = (char *)v78[106];
        }
        else
        {
          v87 = 0;
        }
        v95 = &v87[8 * v83];
        v96 = &v87[8 * v86];
        *(_QWORD *)v95 = v79;
        v89 = v95 + 8;
        while (v80 != v82)
        {
          v97 = *((_QWORD *)v80 - 1);
          v80 -= 8;
          *((_QWORD *)v95 - 1) = v97;
          v95 -= 8;
        }
LABEL_131:
        v78[106] = v95;
        v78[107] = v89;
        v78[108] = v96;
        if (v82)
          operator delete(v82);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v80 = v79;
    v89 = v80 + 8;
LABEL_133:
    v78[107] = v89;
LABEL_134:
    v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      v100 = *(_QWORD **)a1[1];
      v101 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      v102 = (char *)v100[110];
      v110 = v100[111];
      if ((unint64_t)v102 >= v110)
      {
        v104 = (char *)v100[109];
        v112 = (v102 - v104) >> 3;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_648;
        v113 = v110 - (_QWORD)v104;
        v114 = (uint64_t)(v110 - (_QWORD)v104) >> 2;
        if (v114 <= v112 + 1)
          v114 = v112 + 1;
        if (v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
        {
          v116 = (char *)sub_40FC((uint64_t)(v100 + 111), v115);
          v102 = (char *)v100[110];
          v104 = (char *)v100[109];
        }
        else
        {
          v116 = 0;
        }
        v117 = &v116[8 * v112];
        v118 = &v116[8 * v115];
        *(_QWORD *)v117 = v101;
        v111 = v117 + 8;
        while (v102 != v104)
        {
          v120 = *((_QWORD *)v102 - 1);
          v102 -= 8;
          *((_QWORD *)v117 - 1) = v120;
          v117 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1)
        goto LABEL_166;
      v100 = *(_QWORD **)a1[1];
      v101 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      v102 = (char *)v100[110];
      v103 = v100[111];
      if ((unint64_t)v102 >= v103)
      {
        v104 = (char *)v100[109];
        v105 = (v102 - v104) >> 3;
        if ((unint64_t)(v105 + 1) >> 61)
          goto LABEL_648;
        v106 = v103 - (_QWORD)v104;
        v107 = (uint64_t)(v103 - (_QWORD)v104) >> 2;
        if (v107 <= v105 + 1)
          v107 = v105 + 1;
        if (v106 >= 0x7FFFFFFFFFFFFFF8)
          v108 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v108 = v107;
        if (v108)
        {
          v109 = (char *)sub_40FC((uint64_t)(v100 + 111), v108);
          v102 = (char *)v100[110];
          v104 = (char *)v100[109];
        }
        else
        {
          v109 = 0;
        }
        v117 = &v109[8 * v105];
        v118 = &v109[8 * v108];
        *(_QWORD *)v117 = v101;
        v111 = v117 + 8;
        while (v102 != v104)
        {
          v119 = *((_QWORD *)v102 - 1);
          v102 -= 8;
          *((_QWORD *)v117 - 1) = v119;
          v117 -= 8;
        }
LABEL_163:
        v100[109] = v117;
        v100[110] = v111;
        v100[111] = v118;
        if (v104)
          operator delete(v104);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v102 = v101;
    v111 = v102 + 8;
LABEL_165:
    v100[110] = v111;
LABEL_166:
    v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      v122 = *(_QWORD **)a1[1];
      v123 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      v124 = (char *)v122[113];
      v132 = v122[114];
      if ((unint64_t)v124 >= v132)
      {
        v126 = (char *)v122[112];
        v134 = (v124 - v126) >> 3;
        if ((unint64_t)(v134 + 1) >> 61)
          goto LABEL_648;
        v135 = v132 - (_QWORD)v126;
        v136 = (uint64_t)(v132 - (_QWORD)v126) >> 2;
        if (v136 <= v134 + 1)
          v136 = v134 + 1;
        if (v135 >= 0x7FFFFFFFFFFFFFF8)
          v137 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137)
        {
          v138 = (char *)sub_40FC((uint64_t)(v122 + 114), v137);
          v124 = (char *)v122[113];
          v126 = (char *)v122[112];
        }
        else
        {
          v138 = 0;
        }
        v139 = &v138[8 * v134];
        v140 = &v138[8 * v137];
        *(_QWORD *)v139 = v123;
        v133 = v139 + 8;
        while (v124 != v126)
        {
          v142 = *((_QWORD *)v124 - 1);
          v124 -= 8;
          *((_QWORD *)v139 - 1) = v142;
          v139 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1)
        goto LABEL_198;
      v122 = *(_QWORD **)a1[1];
      v123 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      v124 = (char *)v122[113];
      v125 = v122[114];
      if ((unint64_t)v124 >= v125)
      {
        v126 = (char *)v122[112];
        v127 = (v124 - v126) >> 3;
        if ((unint64_t)(v127 + 1) >> 61)
          goto LABEL_648;
        v128 = v125 - (_QWORD)v126;
        v129 = (uint64_t)(v125 - (_QWORD)v126) >> 2;
        if (v129 <= v127 + 1)
          v129 = v127 + 1;
        if (v128 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
        {
          v131 = (char *)sub_40FC((uint64_t)(v122 + 114), v130);
          v124 = (char *)v122[113];
          v126 = (char *)v122[112];
        }
        else
        {
          v131 = 0;
        }
        v139 = &v131[8 * v127];
        v140 = &v131[8 * v130];
        *(_QWORD *)v139 = v123;
        v133 = v139 + 8;
        while (v124 != v126)
        {
          v141 = *((_QWORD *)v124 - 1);
          v124 -= 8;
          *((_QWORD *)v139 - 1) = v141;
          v139 -= 8;
        }
LABEL_195:
        v122[112] = v139;
        v122[113] = v133;
        v122[114] = v140;
        if (v126)
          operator delete(v126);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v124 = v123;
    v133 = v124 + 8;
LABEL_197:
    v122[113] = v133;
LABEL_198:
    v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      v144 = *(_QWORD **)a1[1];
      v145 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      v146 = (char *)v144[116];
      v154 = v144[117];
      if ((unint64_t)v146 >= v154)
      {
        v148 = (char *)v144[115];
        v156 = (v146 - v148) >> 3;
        if ((unint64_t)(v156 + 1) >> 61)
          goto LABEL_648;
        v157 = v154 - (_QWORD)v148;
        v158 = (uint64_t)(v154 - (_QWORD)v148) >> 2;
        if (v158 <= v156 + 1)
          v158 = v156 + 1;
        if (v157 >= 0x7FFFFFFFFFFFFFF8)
          v159 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v159 = v158;
        if (v159)
        {
          v160 = (char *)sub_40FC((uint64_t)(v144 + 117), v159);
          v146 = (char *)v144[116];
          v148 = (char *)v144[115];
        }
        else
        {
          v160 = 0;
        }
        v161 = &v160[8 * v156];
        v162 = &v160[8 * v159];
        *(_QWORD *)v161 = v145;
        v155 = v161 + 8;
        while (v146 != v148)
        {
          v164 = *((_QWORD *)v146 - 1);
          v146 -= 8;
          *((_QWORD *)v161 - 1) = v164;
          v161 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1)
        goto LABEL_230;
      v144 = *(_QWORD **)a1[1];
      v145 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      v146 = (char *)v144[116];
      v147 = v144[117];
      if ((unint64_t)v146 >= v147)
      {
        v148 = (char *)v144[115];
        v149 = (v146 - v148) >> 3;
        if ((unint64_t)(v149 + 1) >> 61)
          goto LABEL_648;
        v150 = v147 - (_QWORD)v148;
        v151 = (uint64_t)(v147 - (_QWORD)v148) >> 2;
        if (v151 <= v149 + 1)
          v151 = v149 + 1;
        if (v150 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v152 = v151;
        if (v152)
        {
          v153 = (char *)sub_40FC((uint64_t)(v144 + 117), v152);
          v146 = (char *)v144[116];
          v148 = (char *)v144[115];
        }
        else
        {
          v153 = 0;
        }
        v161 = &v153[8 * v149];
        v162 = &v153[8 * v152];
        *(_QWORD *)v161 = v145;
        v155 = v161 + 8;
        while (v146 != v148)
        {
          v163 = *((_QWORD *)v146 - 1);
          v146 -= 8;
          *((_QWORD *)v161 - 1) = v163;
          v161 -= 8;
        }
LABEL_227:
        v144[115] = v161;
        v144[116] = v155;
        v144[117] = v162;
        if (v148)
          operator delete(v148);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v146 = v145;
    v155 = v146 + 8;
LABEL_229:
    v144[116] = v155;
LABEL_230:
    v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      v166 = *(_QWORD **)a1[1];
      v167 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      v168 = (char *)v166[119];
      v176 = v166[120];
      if ((unint64_t)v168 >= v176)
      {
        v170 = (char *)v166[118];
        v178 = (v168 - v170) >> 3;
        if ((unint64_t)(v178 + 1) >> 61)
          goto LABEL_648;
        v179 = v176 - (_QWORD)v170;
        v180 = (uint64_t)(v176 - (_QWORD)v170) >> 2;
        if (v180 <= v178 + 1)
          v180 = v178 + 1;
        if (v179 >= 0x7FFFFFFFFFFFFFF8)
          v181 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v181 = v180;
        if (v181)
        {
          v182 = (char *)sub_40FC((uint64_t)(v166 + 120), v181);
          v168 = (char *)v166[119];
          v170 = (char *)v166[118];
        }
        else
        {
          v182 = 0;
        }
        v183 = &v182[8 * v178];
        v184 = &v182[8 * v181];
        *(_QWORD *)v183 = v167;
        v177 = v183 + 8;
        while (v168 != v170)
        {
          v186 = *((_QWORD *)v168 - 1);
          v168 -= 8;
          *((_QWORD *)v183 - 1) = v186;
          v183 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1)
        goto LABEL_262;
      v166 = *(_QWORD **)a1[1];
      v167 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      v168 = (char *)v166[119];
      v169 = v166[120];
      if ((unint64_t)v168 >= v169)
      {
        v170 = (char *)v166[118];
        v171 = (v168 - v170) >> 3;
        if ((unint64_t)(v171 + 1) >> 61)
          goto LABEL_648;
        v172 = v169 - (_QWORD)v170;
        v173 = (uint64_t)(v169 - (_QWORD)v170) >> 2;
        if (v173 <= v171 + 1)
          v173 = v171 + 1;
        if (v172 >= 0x7FFFFFFFFFFFFFF8)
          v174 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v174 = v173;
        if (v174)
        {
          v175 = (char *)sub_40FC((uint64_t)(v166 + 120), v174);
          v168 = (char *)v166[119];
          v170 = (char *)v166[118];
        }
        else
        {
          v175 = 0;
        }
        v183 = &v175[8 * v171];
        v184 = &v175[8 * v174];
        *(_QWORD *)v183 = v167;
        v177 = v183 + 8;
        while (v168 != v170)
        {
          v185 = *((_QWORD *)v168 - 1);
          v168 -= 8;
          *((_QWORD *)v183 - 1) = v185;
          v183 -= 8;
        }
LABEL_259:
        v166[118] = v183;
        v166[119] = v177;
        v166[120] = v184;
        if (v170)
          operator delete(v170);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v168 = v167;
    v177 = v168 + 8;
LABEL_261:
    v166[119] = v177;
LABEL_262:
    v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      v188 = *(_QWORD **)a1[1];
      v189 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v190 = (char *)v188[122];
      v198 = v188[123];
      if ((unint64_t)v190 >= v198)
      {
        v192 = (char *)v188[121];
        v200 = (v190 - v192) >> 3;
        if ((unint64_t)(v200 + 1) >> 61)
          goto LABEL_648;
        v201 = v198 - (_QWORD)v192;
        v202 = (uint64_t)(v198 - (_QWORD)v192) >> 2;
        if (v202 <= v200 + 1)
          v202 = v200 + 1;
        if (v201 >= 0x7FFFFFFFFFFFFFF8)
          v203 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v203 = v202;
        if (v203)
        {
          v204 = (char *)sub_40FC((uint64_t)(v188 + 123), v203);
          v190 = (char *)v188[122];
          v192 = (char *)v188[121];
        }
        else
        {
          v204 = 0;
        }
        v205 = &v204[8 * v200];
        v206 = &v204[8 * v203];
        *(_QWORD *)v205 = v189;
        v199 = v205 + 8;
        while (v190 != v192)
        {
          v208 = *((_QWORD *)v190 - 1);
          v190 -= 8;
          *((_QWORD *)v205 - 1) = v208;
          v205 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1)
        goto LABEL_294;
      v188 = *(_QWORD **)a1[1];
      v189 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v190 = (char *)v188[122];
      v191 = v188[123];
      if ((unint64_t)v190 >= v191)
      {
        v192 = (char *)v188[121];
        v193 = (v190 - v192) >> 3;
        if ((unint64_t)(v193 + 1) >> 61)
          goto LABEL_648;
        v194 = v191 - (_QWORD)v192;
        v195 = (uint64_t)(v191 - (_QWORD)v192) >> 2;
        if (v195 <= v193 + 1)
          v195 = v193 + 1;
        if (v194 >= 0x7FFFFFFFFFFFFFF8)
          v196 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v196 = v195;
        if (v196)
        {
          v197 = (char *)sub_40FC((uint64_t)(v188 + 123), v196);
          v190 = (char *)v188[122];
          v192 = (char *)v188[121];
        }
        else
        {
          v197 = 0;
        }
        v205 = &v197[8 * v193];
        v206 = &v197[8 * v196];
        *(_QWORD *)v205 = v189;
        v199 = v205 + 8;
        while (v190 != v192)
        {
          v207 = *((_QWORD *)v190 - 1);
          v190 -= 8;
          *((_QWORD *)v205 - 1) = v207;
          v205 -= 8;
        }
LABEL_291:
        v188[121] = v205;
        v188[122] = v199;
        v188[123] = v206;
        if (v192)
          operator delete(v192);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v190 = v189;
    v199 = v190 + 8;
LABEL_293:
    v188[122] = v199;
LABEL_294:
    v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      v210 = *(_QWORD **)a1[1];
      v211 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v212 = (char *)v210[125];
      v220 = v210[126];
      if ((unint64_t)v212 >= v220)
      {
        v214 = (char *)v210[124];
        v222 = (v212 - v214) >> 3;
        if ((unint64_t)(v222 + 1) >> 61)
          goto LABEL_648;
        v223 = v220 - (_QWORD)v214;
        v224 = (uint64_t)(v220 - (_QWORD)v214) >> 2;
        if (v224 <= v222 + 1)
          v224 = v222 + 1;
        if (v223 >= 0x7FFFFFFFFFFFFFF8)
          v225 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v225 = v224;
        if (v225)
        {
          v226 = (char *)sub_40FC((uint64_t)(v210 + 126), v225);
          v212 = (char *)v210[125];
          v214 = (char *)v210[124];
        }
        else
        {
          v226 = 0;
        }
        v227 = &v226[8 * v222];
        v228 = &v226[8 * v225];
        *(_QWORD *)v227 = v211;
        v221 = v227 + 8;
        while (v212 != v214)
        {
          v230 = *((_QWORD *)v212 - 1);
          v212 -= 8;
          *((_QWORD *)v227 - 1) = v230;
          v227 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1)
        goto LABEL_326;
      v210 = *(_QWORD **)a1[1];
      v211 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v212 = (char *)v210[125];
      v213 = v210[126];
      if ((unint64_t)v212 >= v213)
      {
        v214 = (char *)v210[124];
        v215 = (v212 - v214) >> 3;
        if ((unint64_t)(v215 + 1) >> 61)
          goto LABEL_648;
        v216 = v213 - (_QWORD)v214;
        v217 = (uint64_t)(v213 - (_QWORD)v214) >> 2;
        if (v217 <= v215 + 1)
          v217 = v215 + 1;
        if (v216 >= 0x7FFFFFFFFFFFFFF8)
          v218 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v218 = v217;
        if (v218)
        {
          v219 = (char *)sub_40FC((uint64_t)(v210 + 126), v218);
          v212 = (char *)v210[125];
          v214 = (char *)v210[124];
        }
        else
        {
          v219 = 0;
        }
        v227 = &v219[8 * v215];
        v228 = &v219[8 * v218];
        *(_QWORD *)v227 = v211;
        v221 = v227 + 8;
        while (v212 != v214)
        {
          v229 = *((_QWORD *)v212 - 1);
          v212 -= 8;
          *((_QWORD *)v227 - 1) = v229;
          v227 -= 8;
        }
LABEL_323:
        v210[124] = v227;
        v210[125] = v221;
        v210[126] = v228;
        if (v214)
          operator delete(v214);
        goto LABEL_325;
      }
    }
    *(_QWORD *)v212 = v211;
    v221 = v212 + 8;
LABEL_325:
    v210[125] = v221;
LABEL_326:
    v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      v232 = *(_QWORD **)a1[1];
      v233 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      v234 = (char *)v232[128];
      v242 = v232[129];
      if ((unint64_t)v234 >= v242)
      {
        v236 = (char *)v232[127];
        v244 = (v234 - v236) >> 3;
        if ((unint64_t)(v244 + 1) >> 61)
          goto LABEL_648;
        v245 = v242 - (_QWORD)v236;
        v246 = (uint64_t)(v242 - (_QWORD)v236) >> 2;
        if (v246 <= v244 + 1)
          v246 = v244 + 1;
        if (v245 >= 0x7FFFFFFFFFFFFFF8)
          v247 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v247 = v246;
        if (v247)
        {
          v248 = (char *)sub_40FC((uint64_t)(v232 + 129), v247);
          v234 = (char *)v232[128];
          v236 = (char *)v232[127];
        }
        else
        {
          v248 = 0;
        }
        v249 = &v248[8 * v244];
        v250 = &v248[8 * v247];
        *(_QWORD *)v249 = v233;
        v243 = v249 + 8;
        while (v234 != v236)
        {
          v252 = *((_QWORD *)v234 - 1);
          v234 -= 8;
          *((_QWORD *)v249 - 1) = v252;
          v249 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1)
        goto LABEL_358;
      v232 = *(_QWORD **)a1[1];
      v233 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      v234 = (char *)v232[128];
      v235 = v232[129];
      if ((unint64_t)v234 >= v235)
      {
        v236 = (char *)v232[127];
        v237 = (v234 - v236) >> 3;
        if ((unint64_t)(v237 + 1) >> 61)
          goto LABEL_648;
        v238 = v235 - (_QWORD)v236;
        v239 = (uint64_t)(v235 - (_QWORD)v236) >> 2;
        if (v239 <= v237 + 1)
          v239 = v237 + 1;
        if (v238 >= 0x7FFFFFFFFFFFFFF8)
          v240 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v240 = v239;
        if (v240)
        {
          v241 = (char *)sub_40FC((uint64_t)(v232 + 129), v240);
          v234 = (char *)v232[128];
          v236 = (char *)v232[127];
        }
        else
        {
          v241 = 0;
        }
        v249 = &v241[8 * v237];
        v250 = &v241[8 * v240];
        *(_QWORD *)v249 = v233;
        v243 = v249 + 8;
        while (v234 != v236)
        {
          v251 = *((_QWORD *)v234 - 1);
          v234 -= 8;
          *((_QWORD *)v249 - 1) = v251;
          v249 -= 8;
        }
LABEL_355:
        v232[127] = v249;
        v232[128] = v243;
        v232[129] = v250;
        if (v236)
          operator delete(v236);
        goto LABEL_357;
      }
    }
    *(_QWORD *)v234 = v233;
    v243 = v234 + 8;
LABEL_357:
    v232[128] = v243;
LABEL_358:
    v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      v254 = *(_QWORD **)a1[1];
      v255 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v256 = (char *)v254[131];
      v264 = v254[132];
      if ((unint64_t)v256 >= v264)
      {
        v258 = (char *)v254[130];
        v266 = (v256 - v258) >> 3;
        if ((unint64_t)(v266 + 1) >> 61)
          goto LABEL_648;
        v267 = v264 - (_QWORD)v258;
        v268 = (uint64_t)(v264 - (_QWORD)v258) >> 2;
        if (v268 <= v266 + 1)
          v268 = v266 + 1;
        if (v267 >= 0x7FFFFFFFFFFFFFF8)
          v269 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v269 = v268;
        if (v269)
        {
          v270 = (char *)sub_40FC((uint64_t)(v254 + 132), v269);
          v256 = (char *)v254[131];
          v258 = (char *)v254[130];
        }
        else
        {
          v270 = 0;
        }
        v271 = &v270[8 * v266];
        v272 = &v270[8 * v269];
        *(_QWORD *)v271 = v255;
        v265 = v271 + 8;
        while (v256 != v258)
        {
          v274 = *((_QWORD *)v256 - 1);
          v256 -= 8;
          *((_QWORD *)v271 - 1) = v274;
          v271 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1)
        goto LABEL_390;
      v254 = *(_QWORD **)a1[1];
      v255 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v256 = (char *)v254[131];
      v257 = v254[132];
      if ((unint64_t)v256 >= v257)
      {
        v258 = (char *)v254[130];
        v259 = (v256 - v258) >> 3;
        if ((unint64_t)(v259 + 1) >> 61)
          goto LABEL_648;
        v260 = v257 - (_QWORD)v258;
        v261 = (uint64_t)(v257 - (_QWORD)v258) >> 2;
        if (v261 <= v259 + 1)
          v261 = v259 + 1;
        if (v260 >= 0x7FFFFFFFFFFFFFF8)
          v262 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v262 = v261;
        if (v262)
        {
          v263 = (char *)sub_40FC((uint64_t)(v254 + 132), v262);
          v256 = (char *)v254[131];
          v258 = (char *)v254[130];
        }
        else
        {
          v263 = 0;
        }
        v271 = &v263[8 * v259];
        v272 = &v263[8 * v262];
        *(_QWORD *)v271 = v255;
        v265 = v271 + 8;
        while (v256 != v258)
        {
          v273 = *((_QWORD *)v256 - 1);
          v256 -= 8;
          *((_QWORD *)v271 - 1) = v273;
          v271 -= 8;
        }
LABEL_387:
        v254[130] = v271;
        v254[131] = v265;
        v254[132] = v272;
        if (v258)
          operator delete(v258);
        goto LABEL_389;
      }
    }
    *(_QWORD *)v256 = v255;
    v265 = v256 + 8;
LABEL_389:
    v254[131] = v265;
LABEL_390:
    v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      v276 = *(_QWORD **)a1[1];
      v277 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      v278 = (char *)v276[134];
      v286 = v276[135];
      if ((unint64_t)v278 >= v286)
      {
        v280 = (char *)v276[133];
        v288 = (v278 - v280) >> 3;
        if ((unint64_t)(v288 + 1) >> 61)
          goto LABEL_648;
        v289 = v286 - (_QWORD)v280;
        v290 = (uint64_t)(v286 - (_QWORD)v280) >> 2;
        if (v290 <= v288 + 1)
          v290 = v288 + 1;
        if (v289 >= 0x7FFFFFFFFFFFFFF8)
          v291 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v291 = v290;
        if (v291)
        {
          v292 = (char *)sub_40FC((uint64_t)(v276 + 135), v291);
          v278 = (char *)v276[134];
          v280 = (char *)v276[133];
        }
        else
        {
          v292 = 0;
        }
        v293 = &v292[8 * v288];
        v294 = &v292[8 * v291];
        *(_QWORD *)v293 = v277;
        v287 = v293 + 8;
        while (v278 != v280)
        {
          v296 = *((_QWORD *)v278 - 1);
          v278 -= 8;
          *((_QWORD *)v293 - 1) = v296;
          v293 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1)
        goto LABEL_422;
      v276 = *(_QWORD **)a1[1];
      v277 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      v278 = (char *)v276[134];
      v279 = v276[135];
      if ((unint64_t)v278 >= v279)
      {
        v280 = (char *)v276[133];
        v281 = (v278 - v280) >> 3;
        if ((unint64_t)(v281 + 1) >> 61)
          goto LABEL_648;
        v282 = v279 - (_QWORD)v280;
        v283 = (uint64_t)(v279 - (_QWORD)v280) >> 2;
        if (v283 <= v281 + 1)
          v283 = v281 + 1;
        if (v282 >= 0x7FFFFFFFFFFFFFF8)
          v284 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v284 = v283;
        if (v284)
        {
          v285 = (char *)sub_40FC((uint64_t)(v276 + 135), v284);
          v278 = (char *)v276[134];
          v280 = (char *)v276[133];
        }
        else
        {
          v285 = 0;
        }
        v293 = &v285[8 * v281];
        v294 = &v285[8 * v284];
        *(_QWORD *)v293 = v277;
        v287 = v293 + 8;
        while (v278 != v280)
        {
          v295 = *((_QWORD *)v278 - 1);
          v278 -= 8;
          *((_QWORD *)v293 - 1) = v295;
          v293 -= 8;
        }
LABEL_419:
        v276[133] = v293;
        v276[134] = v287;
        v276[135] = v294;
        if (v280)
          operator delete(v280);
        goto LABEL_421;
      }
    }
    *(_QWORD *)v278 = v277;
    v287 = v278 + 8;
LABEL_421:
    v276[134] = v287;
LABEL_422:
    v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      v298 = *(_QWORD **)a1[1];
      v299 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v300 = (char *)v298[137];
      v308 = v298[138];
      if ((unint64_t)v300 >= v308)
      {
        v302 = (char *)v298[136];
        v310 = (v300 - v302) >> 3;
        if ((unint64_t)(v310 + 1) >> 61)
          goto LABEL_648;
        v311 = v308 - (_QWORD)v302;
        v312 = (uint64_t)(v308 - (_QWORD)v302) >> 2;
        if (v312 <= v310 + 1)
          v312 = v310 + 1;
        if (v311 >= 0x7FFFFFFFFFFFFFF8)
          v313 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v313 = v312;
        if (v313)
        {
          v314 = (char *)sub_40FC((uint64_t)(v298 + 138), v313);
          v300 = (char *)v298[137];
          v302 = (char *)v298[136];
        }
        else
        {
          v314 = 0;
        }
        v315 = &v314[8 * v310];
        v316 = &v314[8 * v313];
        *(_QWORD *)v315 = v299;
        v309 = v315 + 8;
        while (v300 != v302)
        {
          v318 = *((_QWORD *)v300 - 1);
          v300 -= 8;
          *((_QWORD *)v315 - 1) = v318;
          v315 -= 8;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v297 != 1)
        goto LABEL_454;
      v298 = *(_QWORD **)a1[1];
      v299 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v300 = (char *)v298[137];
      v301 = v298[138];
      if ((unint64_t)v300 >= v301)
      {
        v302 = (char *)v298[136];
        v303 = (v300 - v302) >> 3;
        if ((unint64_t)(v303 + 1) >> 61)
          goto LABEL_648;
        v304 = v301 - (_QWORD)v302;
        v305 = (uint64_t)(v301 - (_QWORD)v302) >> 2;
        if (v305 <= v303 + 1)
          v305 = v303 + 1;
        if (v304 >= 0x7FFFFFFFFFFFFFF8)
          v306 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v306 = v305;
        if (v306)
        {
          v307 = (char *)sub_40FC((uint64_t)(v298 + 138), v306);
          v300 = (char *)v298[137];
          v302 = (char *)v298[136];
        }
        else
        {
          v307 = 0;
        }
        v315 = &v307[8 * v303];
        v316 = &v307[8 * v306];
        *(_QWORD *)v315 = v299;
        v309 = v315 + 8;
        while (v300 != v302)
        {
          v317 = *((_QWORD *)v300 - 1);
          v300 -= 8;
          *((_QWORD *)v315 - 1) = v317;
          v315 -= 8;
        }
LABEL_451:
        v298[136] = v315;
        v298[137] = v309;
        v298[138] = v316;
        if (v302)
          operator delete(v302);
        goto LABEL_453;
      }
    }
    *(_QWORD *)v300 = v299;
    v309 = v300 + 8;
LABEL_453:
    v298[137] = v309;
LABEL_454:
    v319 = 1 << *(_DWORD *)(v3 + 48);
    if (v319 == 2)
    {
      v320 = *(_QWORD **)a1[1];
      v321 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
      v322 = (char *)v320[140];
      v330 = v320[141];
      if ((unint64_t)v322 >= v330)
      {
        v324 = (char *)v320[139];
        v332 = (v322 - v324) >> 3;
        if ((unint64_t)(v332 + 1) >> 61)
          goto LABEL_648;
        v333 = v330 - (_QWORD)v324;
        v334 = (uint64_t)(v330 - (_QWORD)v324) >> 2;
        if (v334 <= v332 + 1)
          v334 = v332 + 1;
        if (v333 >= 0x7FFFFFFFFFFFFFF8)
          v335 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v335 = v334;
        if (v335)
        {
          v336 = (char *)sub_40FC((uint64_t)(v320 + 141), v335);
          v322 = (char *)v320[140];
          v324 = (char *)v320[139];
        }
        else
        {
          v336 = 0;
        }
        v337 = &v336[8 * v332];
        v338 = &v336[8 * v335];
        *(_QWORD *)v337 = v321;
        v331 = v337 + 8;
        while (v322 != v324)
        {
          v340 = *((_QWORD *)v322 - 1);
          v322 -= 8;
          *((_QWORD *)v337 - 1) = v340;
          v337 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v319 != 1)
        goto LABEL_486;
      v320 = *(_QWORD **)a1[1];
      v321 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
      v322 = (char *)v320[140];
      v323 = v320[141];
      if ((unint64_t)v322 >= v323)
      {
        v324 = (char *)v320[139];
        v325 = (v322 - v324) >> 3;
        if ((unint64_t)(v325 + 1) >> 61)
          goto LABEL_648;
        v326 = v323 - (_QWORD)v324;
        v327 = (uint64_t)(v323 - (_QWORD)v324) >> 2;
        if (v327 <= v325 + 1)
          v327 = v325 + 1;
        if (v326 >= 0x7FFFFFFFFFFFFFF8)
          v328 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v328 = v327;
        if (v328)
        {
          v329 = (char *)sub_40FC((uint64_t)(v320 + 141), v328);
          v322 = (char *)v320[140];
          v324 = (char *)v320[139];
        }
        else
        {
          v329 = 0;
        }
        v337 = &v329[8 * v325];
        v338 = &v329[8 * v328];
        *(_QWORD *)v337 = v321;
        v331 = v337 + 8;
        while (v322 != v324)
        {
          v339 = *((_QWORD *)v322 - 1);
          v322 -= 8;
          *((_QWORD *)v337 - 1) = v339;
          v337 -= 8;
        }
LABEL_483:
        v320[139] = v337;
        v320[140] = v331;
        v320[141] = v338;
        if (v324)
          operator delete(v324);
        goto LABEL_485;
      }
    }
    *(_QWORD *)v322 = v321;
    v331 = v322 + 8;
LABEL_485:
    v320[140] = v331;
LABEL_486:
    v341 = 1 << *(_DWORD *)(v3 + 48);
    if (v341 == 2)
    {
      v342 = *(_QWORD **)a1[1];
      v343 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v344 = (char *)v342[143];
      v352 = v342[144];
      if ((unint64_t)v344 >= v352)
      {
        v346 = (char *)v342[142];
        v354 = (v344 - v346) >> 3;
        if ((unint64_t)(v354 + 1) >> 61)
          goto LABEL_648;
        v355 = v352 - (_QWORD)v346;
        v356 = (uint64_t)(v352 - (_QWORD)v346) >> 2;
        if (v356 <= v354 + 1)
          v356 = v354 + 1;
        if (v355 >= 0x7FFFFFFFFFFFFFF8)
          v357 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v357 = v356;
        if (v357)
        {
          v358 = (char *)sub_40FC((uint64_t)(v342 + 144), v357);
          v344 = (char *)v342[143];
          v346 = (char *)v342[142];
        }
        else
        {
          v358 = 0;
        }
        v359 = &v358[8 * v354];
        v360 = &v358[8 * v357];
        *(_QWORD *)v359 = v343;
        v353 = v359 + 8;
        while (v344 != v346)
        {
          v362 = *((_QWORD *)v344 - 1);
          v344 -= 8;
          *((_QWORD *)v359 - 1) = v362;
          v359 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v341 != 1)
        goto LABEL_518;
      v342 = *(_QWORD **)a1[1];
      v343 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v344 = (char *)v342[143];
      v345 = v342[144];
      if ((unint64_t)v344 >= v345)
      {
        v346 = (char *)v342[142];
        v347 = (v344 - v346) >> 3;
        if ((unint64_t)(v347 + 1) >> 61)
          goto LABEL_648;
        v348 = v345 - (_QWORD)v346;
        v349 = (uint64_t)(v345 - (_QWORD)v346) >> 2;
        if (v349 <= v347 + 1)
          v349 = v347 + 1;
        if (v348 >= 0x7FFFFFFFFFFFFFF8)
          v350 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v350 = v349;
        if (v350)
        {
          v351 = (char *)sub_40FC((uint64_t)(v342 + 144), v350);
          v344 = (char *)v342[143];
          v346 = (char *)v342[142];
        }
        else
        {
          v351 = 0;
        }
        v359 = &v351[8 * v347];
        v360 = &v351[8 * v350];
        *(_QWORD *)v359 = v343;
        v353 = v359 + 8;
        while (v344 != v346)
        {
          v361 = *((_QWORD *)v344 - 1);
          v344 -= 8;
          *((_QWORD *)v359 - 1) = v361;
          v359 -= 8;
        }
LABEL_515:
        v342[142] = v359;
        v342[143] = v353;
        v342[144] = v360;
        if (v346)
          operator delete(v346);
        goto LABEL_517;
      }
    }
    *(_QWORD *)v344 = v343;
    v353 = v344 + 8;
LABEL_517:
    v342[143] = v353;
LABEL_518:
    v363 = 1 << *(_DWORD *)(v3 + 48);
    if (v363 == 2)
    {
      v364 = *(_QWORD **)a1[1];
      v365 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      v366 = (char *)v364[146];
      v374 = v364[147];
      if ((unint64_t)v366 >= v374)
      {
        v368 = (char *)v364[145];
        v376 = (v366 - v368) >> 3;
        if ((unint64_t)(v376 + 1) >> 61)
          goto LABEL_648;
        v377 = v374 - (_QWORD)v368;
        v378 = (uint64_t)(v374 - (_QWORD)v368) >> 2;
        if (v378 <= v376 + 1)
          v378 = v376 + 1;
        if (v377 >= 0x7FFFFFFFFFFFFFF8)
          v379 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v379 = v378;
        if (v379)
        {
          v380 = (char *)sub_40FC((uint64_t)(v364 + 147), v379);
          v366 = (char *)v364[146];
          v368 = (char *)v364[145];
        }
        else
        {
          v380 = 0;
        }
        v381 = &v380[8 * v376];
        v382 = &v380[8 * v379];
        *(_QWORD *)v381 = v365;
        v375 = v381 + 8;
        while (v366 != v368)
        {
          v384 = *((_QWORD *)v366 - 1);
          v366 -= 8;
          *((_QWORD *)v381 - 1) = v384;
          v381 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v363 != 1)
        goto LABEL_550;
      v364 = *(_QWORD **)a1[1];
      v365 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      v366 = (char *)v364[146];
      v367 = v364[147];
      if ((unint64_t)v366 >= v367)
      {
        v368 = (char *)v364[145];
        v369 = (v366 - v368) >> 3;
        if ((unint64_t)(v369 + 1) >> 61)
          goto LABEL_648;
        v370 = v367 - (_QWORD)v368;
        v371 = (uint64_t)(v367 - (_QWORD)v368) >> 2;
        if (v371 <= v369 + 1)
          v371 = v369 + 1;
        if (v370 >= 0x7FFFFFFFFFFFFFF8)
          v372 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v372 = v371;
        if (v372)
        {
          v373 = (char *)sub_40FC((uint64_t)(v364 + 147), v372);
          v366 = (char *)v364[146];
          v368 = (char *)v364[145];
        }
        else
        {
          v373 = 0;
        }
        v381 = &v373[8 * v369];
        v382 = &v373[8 * v372];
        *(_QWORD *)v381 = v365;
        v375 = v381 + 8;
        while (v366 != v368)
        {
          v383 = *((_QWORD *)v366 - 1);
          v366 -= 8;
          *((_QWORD *)v381 - 1) = v383;
          v381 -= 8;
        }
LABEL_547:
        v364[145] = v381;
        v364[146] = v375;
        v364[147] = v382;
        if (v368)
          operator delete(v368);
        goto LABEL_549;
      }
    }
    *(_QWORD *)v366 = v365;
    v375 = v366 + 8;
LABEL_549:
    v364[146] = v375;
LABEL_550:
    v385 = 1 << *(_DWORD *)(v3 + 48);
    if (v385 == 2)
    {
      v386 = *(_QWORD **)a1[1];
      v387 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      v388 = (char *)v386[149];
      v396 = v386[150];
      if ((unint64_t)v388 >= v396)
      {
        v390 = (char *)v386[148];
        v398 = (v388 - v390) >> 3;
        if ((unint64_t)(v398 + 1) >> 61)
          goto LABEL_648;
        v399 = v396 - (_QWORD)v390;
        v400 = (uint64_t)(v396 - (_QWORD)v390) >> 2;
        if (v400 <= v398 + 1)
          v400 = v398 + 1;
        if (v399 >= 0x7FFFFFFFFFFFFFF8)
          v401 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v401 = v400;
        if (v401)
        {
          v402 = (char *)sub_40FC((uint64_t)(v386 + 150), v401);
          v388 = (char *)v386[149];
          v390 = (char *)v386[148];
        }
        else
        {
          v402 = 0;
        }
        v403 = &v402[8 * v398];
        v404 = &v402[8 * v401];
        *(_QWORD *)v403 = v387;
        v397 = v403 + 8;
        while (v388 != v390)
        {
          v406 = *((_QWORD *)v388 - 1);
          v388 -= 8;
          *((_QWORD *)v403 - 1) = v406;
          v403 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v385 != 1)
        goto LABEL_582;
      v386 = *(_QWORD **)a1[1];
      v387 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      v388 = (char *)v386[149];
      v389 = v386[150];
      if ((unint64_t)v388 >= v389)
      {
        v390 = (char *)v386[148];
        v391 = (v388 - v390) >> 3;
        if ((unint64_t)(v391 + 1) >> 61)
          goto LABEL_648;
        v392 = v389 - (_QWORD)v390;
        v393 = (uint64_t)(v389 - (_QWORD)v390) >> 2;
        if (v393 <= v391 + 1)
          v393 = v391 + 1;
        if (v392 >= 0x7FFFFFFFFFFFFFF8)
          v394 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v394 = v393;
        if (v394)
        {
          v395 = (char *)sub_40FC((uint64_t)(v386 + 150), v394);
          v388 = (char *)v386[149];
          v390 = (char *)v386[148];
        }
        else
        {
          v395 = 0;
        }
        v403 = &v395[8 * v391];
        v404 = &v395[8 * v394];
        *(_QWORD *)v403 = v387;
        v397 = v403 + 8;
        while (v388 != v390)
        {
          v405 = *((_QWORD *)v388 - 1);
          v388 -= 8;
          *((_QWORD *)v403 - 1) = v405;
          v403 -= 8;
        }
LABEL_579:
        v386[148] = v403;
        v386[149] = v397;
        v386[150] = v404;
        if (v390)
          operator delete(v390);
        goto LABEL_581;
      }
    }
    *(_QWORD *)v388 = v387;
    v397 = v388 + 8;
LABEL_581:
    v386[149] = v397;
LABEL_582:
    v407 = 1 << *(_DWORD *)(v3 + 48);
    if (v407 == 2)
    {
      v408 = *(_QWORD **)a1[1];
      v409 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
      v410 = (char *)v408[152];
      v418 = v408[153];
      if ((unint64_t)v410 >= v418)
      {
        v412 = (char *)v408[151];
        v420 = (v410 - v412) >> 3;
        if ((unint64_t)(v420 + 1) >> 61)
          goto LABEL_648;
        v421 = v418 - (_QWORD)v412;
        v422 = (uint64_t)(v418 - (_QWORD)v412) >> 2;
        if (v422 <= v420 + 1)
          v422 = v420 + 1;
        if (v421 >= 0x7FFFFFFFFFFFFFF8)
          v423 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v423 = v422;
        if (v423)
        {
          v424 = (char *)sub_40FC((uint64_t)(v408 + 153), v423);
          v410 = (char *)v408[152];
          v412 = (char *)v408[151];
        }
        else
        {
          v424 = 0;
        }
        v425 = &v424[8 * v420];
        v426 = &v424[8 * v423];
        *(_QWORD *)v425 = v409;
        v419 = v425 + 8;
        while (v410 != v412)
        {
          v428 = *((_QWORD *)v410 - 1);
          v410 -= 8;
          *((_QWORD *)v425 - 1) = v428;
          v425 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v407 != 1)
        goto LABEL_614;
      v408 = *(_QWORD **)a1[1];
      v409 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
      v410 = (char *)v408[152];
      v411 = v408[153];
      if ((unint64_t)v410 >= v411)
      {
        v412 = (char *)v408[151];
        v413 = (v410 - v412) >> 3;
        if ((unint64_t)(v413 + 1) >> 61)
          goto LABEL_648;
        v414 = v411 - (_QWORD)v412;
        v415 = (uint64_t)(v411 - (_QWORD)v412) >> 2;
        if (v415 <= v413 + 1)
          v415 = v413 + 1;
        if (v414 >= 0x7FFFFFFFFFFFFFF8)
          v416 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v416 = v415;
        if (v416)
        {
          v417 = (char *)sub_40FC((uint64_t)(v408 + 153), v416);
          v410 = (char *)v408[152];
          v412 = (char *)v408[151];
        }
        else
        {
          v417 = 0;
        }
        v425 = &v417[8 * v413];
        v426 = &v417[8 * v416];
        *(_QWORD *)v425 = v409;
        v419 = v425 + 8;
        while (v410 != v412)
        {
          v427 = *((_QWORD *)v410 - 1);
          v410 -= 8;
          *((_QWORD *)v425 - 1) = v427;
          v425 -= 8;
        }
LABEL_611:
        v408[151] = v425;
        v408[152] = v419;
        v408[153] = v426;
        if (v412)
          operator delete(v412);
        goto LABEL_613;
      }
    }
    *(_QWORD *)v410 = v409;
    v419 = v410 + 8;
LABEL_613:
    v408[152] = v419;
LABEL_614:
    v429 = 1 << *(_DWORD *)(v3 + 48);
    if (v429 == 2)
    {
      v441 = a1[2];
      v431 = *(_QWORD **)a1[1];
      v432 = *(_WORD *)(v441 + 34) & 0x7FFF;
      v433 = (char *)v431[155];
      v442 = v431[156];
      if ((unint64_t)v433 >= v442)
      {
        v435 = (char *)v431[154];
        v444 = (v433 - v435) >> 3;
        if (!((unint64_t)(v444 + 1) >> 61))
        {
          v445 = v442 - (_QWORD)v435;
          v446 = (uint64_t)(v442 - (_QWORD)v435) >> 2;
          if (v446 <= v444 + 1)
            v446 = v444 + 1;
          if (v445 >= 0x7FFFFFFFFFFFFFF8)
            v447 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v447 = v446;
          if (v447)
          {
            v448 = (char *)sub_40FC((uint64_t)(v431 + 156), v447);
            v433 = (char *)v431[155];
            v435 = (char *)v431[154];
          }
          else
          {
            v448 = 0;
          }
          v449 = &v448[8 * v444];
          v450 = &v448[8 * v447];
          *(_QWORD *)v449 = v432;
          v443 = v449 + 8;
          while (v433 != v435)
          {
            v452 = *((_QWORD *)v433 - 1);
            v433 -= 8;
            *((_QWORD *)v449 - 1) = v452;
            v449 -= 8;
          }
          goto LABEL_643;
        }
LABEL_648:
        sub_4074();
      }
    }
    else
    {
      if (v429 != 1)
      {
LABEL_646:
        *a2 = 1;
        return;
      }
      v430 = a1[2];
      v431 = *(_QWORD **)a1[1];
      v432 = *(_WORD *)(v430 + 34) & 0x7FFF;
      v433 = (char *)v431[155];
      v434 = v431[156];
      if ((unint64_t)v433 >= v434)
      {
        v435 = (char *)v431[154];
        v436 = (v433 - v435) >> 3;
        if (!((unint64_t)(v436 + 1) >> 61))
        {
          v437 = v434 - (_QWORD)v435;
          v438 = (uint64_t)(v434 - (_QWORD)v435) >> 2;
          if (v438 <= v436 + 1)
            v438 = v436 + 1;
          if (v437 >= 0x7FFFFFFFFFFFFFF8)
            v439 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v439 = v438;
          if (v439)
          {
            v440 = (char *)sub_40FC((uint64_t)(v431 + 156), v439);
            v433 = (char *)v431[155];
            v435 = (char *)v431[154];
          }
          else
          {
            v440 = 0;
          }
          v449 = &v440[8 * v436];
          v450 = &v440[8 * v439];
          *(_QWORD *)v449 = v432;
          v443 = v449 + 8;
          while (v433 != v435)
          {
            v451 = *((_QWORD *)v433 - 1);
            v433 -= 8;
            *((_QWORD *)v449 - 1) = v451;
            v449 -= 8;
          }
LABEL_643:
          v431[154] = v449;
          v431[155] = v443;
          v431[156] = v450;
          if (v435)
            operator delete(v435);
          goto LABEL_645;
        }
        goto LABEL_648;
      }
    }
    *(_QWORD *)v433 = v432;
    v443 = v433 + 8;
LABEL_645:
    v431[155] = v443;
    goto LABEL_646;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = (_WORD *)a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[98] - 8) += v17[28] & 0x7FFF;
    *(_QWORD *)(v19[101] - 8) += v17[26] & 0x7FFF;
    *(_QWORD *)(v19[104] - 8) += v17[29] & 0x7FFF;
    *(_QWORD *)(v19[107] - 8) += v17[27] & 0x7FFF;
    *(_QWORD *)(v19[110] - 8) += v17[18] & 0x7FFF;
    *(_QWORD *)(v19[113] - 8) += v17[10] & 0x7FFF;
    *(_QWORD *)(v19[116] - 8) += v17[19] & 0x7FFF;
    *(_QWORD *)(v19[119] - 8) += v17[11] & 0x7FFF;
    *(_QWORD *)(v19[122] - 8) += v17[20] & 0x7FFF;
    *(_QWORD *)(v19[125] - 8) += v17[12] & 0x7FFF;
    v20 = (_WORD *)a1[2];
    v21 = (_QWORD *)*v18;
    *(_QWORD *)(v21[128] - 8) += v20[21] & 0x7FFF;
    *(_QWORD *)(v21[131] - 8) += v20[13] & 0x7FFF;
    *(_QWORD *)(v21[134] - 8) += v20[22] & 0x7FFF;
    *(_QWORD *)(v21[137] - 8) += v20[14] & 0x7FFF;
    *(_QWORD *)(v21[140] - 8) += v20[23] & 0x7FFF;
    *(_QWORD *)(v21[143] - 8) += v20[15] & 0x7FFF;
    *(_QWORD *)(v21[146] - 8) += v20[24] & 0x7FFF;
    *(_QWORD *)(v21[149] - 8) += v20[16] & 0x7FFF;
    *(_QWORD *)(v21[152] - 8) += v20[25] & 0x7FFF;
    *(_QWORD *)(v21[155] - 8) += v20[17] & 0x7FFF;
  }
}

void sub_C59A4(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _QWORD *v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t *v156;
  unint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t *v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  unint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char *v192;
  uint64_t *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t *v200;
  unint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  char *v214;
  uint64_t *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t *v222;
  unint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  unint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  char *v236;
  uint64_t *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  char *v245;
  unint64_t v246;
  char *v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  char *v252;
  uint64_t v253;
  unint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  char *v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  char *v269;
  unint64_t v270;
  char *v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  char *v276;
  uint64_t v277;
  unint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  char *v284;
  char *v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  char *v293;
  unint64_t v294;
  char *v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  char *v300;
  uint64_t v301;
  unint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  char *v308;
  char *v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t *v316;
  unint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  char *v323;
  unint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  char *v330;
  uint64_t *v331;
  char *v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  char *v339;
  unint64_t v340;
  char *v341;
  uint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  char *v346;
  uint64_t v347;
  unint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  char *v354;
  char *v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t *v362;
  unint64_t v363;
  uint64_t *v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  char *v369;
  unint64_t v370;
  _QWORD *v371;
  uint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  char *v376;
  uint64_t *v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  _QWORD *v383;
  uint64_t v384;
  char *v385;
  unint64_t v386;
  char *v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  char *v392;
  uint64_t v393;
  unint64_t v394;
  _QWORD *v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  char *v400;
  char *v401;
  char *v402;
  uint64_t v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  _QWORD *v407;
  uint64_t v408;
  char *v409;
  unint64_t v410;
  char *v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  char *v416;
  uint64_t v417;
  unint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  char *v424;
  char *v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  char *v433;
  unint64_t v434;
  char *v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  char *v440;
  uint64_t v441;
  unint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  char *v448;
  char *v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  uint64_t v454;
  _QWORD *v455;
  uint64_t v456;
  char *v457;
  unint64_t v458;
  char *v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t v463;
  char *v464;
  uint64_t v465;
  unint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  char *v472;
  char *v473;
  char *v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  _QWORD *v478;
  uint64_t v479;
  uint64_t *v480;
  unint64_t v481;
  uint64_t *v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  char *v487;
  unint64_t v488;
  _QWORD *v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  char *v494;
  uint64_t *v495;
  char *v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  _QWORD *v500;
  unint64_t v501;
  unint64_t *v502;
  unint64_t v503;
  unint64_t *v504;
  uint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t v508;
  char *v509;
  unint64_t v510;
  _QWORD *v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  char *v516;
  unint64_t *v517;
  char *v518;
  unint64_t v519;
  unint64_t v520;
  int v521;
  _QWORD *v522;
  uint64_t v523;
  uint64_t *v524;
  unint64_t v525;
  uint64_t *v526;
  uint64_t v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  char *v531;
  unint64_t v532;
  _QWORD *v533;
  uint64_t v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  char *v538;
  uint64_t *v539;
  char *v540;
  uint64_t v541;
  uint64_t v542;
  int v543;
  uint64_t v544;
  _QWORD *v545;
  uint64_t v546;
  uint64_t *v547;
  unint64_t v548;
  uint64_t *v549;
  uint64_t v550;
  unint64_t v551;
  unint64_t v552;
  unint64_t v553;
  char *v554;
  uint64_t v555;
  unint64_t v556;
  _QWORD *v557;
  uint64_t v558;
  unint64_t v559;
  unint64_t v560;
  unint64_t v561;
  char *v562;
  uint64_t *v563;
  char *v564;
  uint64_t v565;
  uint64_t v566;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v25 = a1[1];
      v7 = *(_QWORD **)v25;
      v8 = *(unsigned __int16 *)(a1[2] + 60);
      v9 = *(char **)(*(_QWORD *)v25 + 1936);
      v26 = *(_QWORD *)(*(_QWORD *)v25 + 1944);
      if ((unint64_t)v9 >= v26)
      {
        v11 = (char *)v7[241];
        v28 = (v9 - v11) >> 3;
        if ((unint64_t)(v28 + 1) >> 61)
          goto LABEL_776;
        v29 = v26 - (_QWORD)v11;
        v30 = (uint64_t)(v26 - (_QWORD)v11) >> 2;
        if (v30 <= v28 + 1)
          v30 = v28 + 1;
        if (v29 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
        {
          v32 = (char *)sub_40FC((uint64_t)(v7 + 243), v31);
          v9 = (char *)v7[242];
          v11 = (char *)v7[241];
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[8 * v28];
        v34 = &v32[8 * v31];
        *(_QWORD *)v33 = v8;
        v27 = v33 + 8;
        while (v9 != v11)
        {
          v36 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *((_QWORD *)v33 - 1) = v36;
          v33 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = a1[1];
      v7 = *(_QWORD **)v6;
      v8 = *(unsigned __int16 *)(a1[2] + 60);
      v9 = *(char **)(*(_QWORD *)v6 + 1936);
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 1944);
      if ((unint64_t)v9 >= v10)
      {
        v11 = (char *)v7[241];
        v12 = (v9 - v11) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          goto LABEL_776;
        v13 = v10 - (_QWORD)v11;
        v14 = (uint64_t)(v10 - (_QWORD)v11) >> 2;
        if (v14 <= v12 + 1)
          v14 = v12 + 1;
        if (v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)sub_40FC((uint64_t)(v7 + 243), v15);
          v9 = (char *)v7[242];
          v11 = (char *)v7[241];
        }
        else
        {
          v16 = 0;
        }
        v33 = &v16[8 * v12];
        v34 = &v16[8 * v15];
        *(_QWORD *)v33 = v8;
        v27 = v33 + 8;
        while (v9 != v11)
        {
          v35 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *((_QWORD *)v33 - 1) = v35;
          v33 -= 8;
        }
LABEL_35:
        v7[241] = v33;
        v7[242] = v27;
        v7[243] = v34;
        if (v11)
          operator delete(v11);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v9 = v8;
    v27 = v9 + 8;
LABEL_37:
    v7[242] = v27;
LABEL_38:
    v37 = 1 << *(_DWORD *)(v3 + 48);
    if (v37 == 2)
    {
      v49 = a1[1];
      v39 = *(_QWORD **)v49;
      v40 = *(unsigned __int16 *)(a1[2] + 22);
      v41 = *(char **)(*(_QWORD *)v49 + 1960);
      v50 = *(_QWORD *)(*(_QWORD *)v49 + 1968);
      if ((unint64_t)v41 >= v50)
      {
        v43 = (char *)v39[244];
        v52 = (v41 - v43) >> 3;
        if ((unint64_t)(v52 + 1) >> 61)
          goto LABEL_776;
        v53 = v50 - (_QWORD)v43;
        v54 = (uint64_t)(v50 - (_QWORD)v43) >> 2;
        if (v54 <= v52 + 1)
          v54 = v52 + 1;
        if (v53 >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        if (v55)
        {
          v56 = (char *)sub_40FC((uint64_t)(v39 + 246), v55);
          v41 = (char *)v39[245];
          v43 = (char *)v39[244];
        }
        else
        {
          v56 = 0;
        }
        v57 = &v56[8 * v52];
        v58 = &v56[8 * v55];
        *(_QWORD *)v57 = v40;
        v51 = v57 + 8;
        while (v41 != v43)
        {
          v60 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *((_QWORD *)v57 - 1) = v60;
          v57 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v37 != 1)
        goto LABEL_70;
      v38 = a1[1];
      v39 = *(_QWORD **)v38;
      v40 = *(unsigned __int16 *)(a1[2] + 22);
      v41 = *(char **)(*(_QWORD *)v38 + 1960);
      v42 = *(_QWORD *)(*(_QWORD *)v38 + 1968);
      if ((unint64_t)v41 >= v42)
      {
        v43 = (char *)v39[244];
        v44 = (v41 - v43) >> 3;
        if ((unint64_t)(v44 + 1) >> 61)
          goto LABEL_776;
        v45 = v42 - (_QWORD)v43;
        v46 = (uint64_t)(v42 - (_QWORD)v43) >> 2;
        if (v46 <= v44 + 1)
          v46 = v44 + 1;
        if (v45 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47)
        {
          v48 = (char *)sub_40FC((uint64_t)(v39 + 246), v47);
          v41 = (char *)v39[245];
          v43 = (char *)v39[244];
        }
        else
        {
          v48 = 0;
        }
        v57 = &v48[8 * v44];
        v58 = &v48[8 * v47];
        *(_QWORD *)v57 = v40;
        v51 = v57 + 8;
        while (v41 != v43)
        {
          v59 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *((_QWORD *)v57 - 1) = v59;
          v57 -= 8;
        }
LABEL_67:
        v39[244] = v57;
        v39[245] = v51;
        v39[246] = v58;
        if (v43)
          operator delete(v43);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v41 = v40;
    v51 = v41 + 8;
LABEL_69:
    v39[245] = v51;
LABEL_70:
    v61 = 1 << *(_DWORD *)(v3 + 48);
    if (v61 == 2)
    {
      v62 = *(_QWORD **)a1[1];
      v63 = *(_DWORD *)(a1[2] + 88) & 0x7FFFLL;
      v64 = (uint64_t *)v62[248];
      v72 = v62[249];
      if ((unint64_t)v64 >= v72)
      {
        v66 = (uint64_t *)v62[247];
        v74 = v64 - v66;
        if ((unint64_t)(v74 + 1) >> 61)
          goto LABEL_776;
        v75 = v72 - (_QWORD)v66;
        v76 = (uint64_t)(v72 - (_QWORD)v66) >> 2;
        if (v76 <= v74 + 1)
          v76 = v74 + 1;
        if (v75 >= 0x7FFFFFFFFFFFFFF8)
          v77 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v77 = v76;
        if (v77)
        {
          v78 = (char *)sub_40FC((uint64_t)(v62 + 249), v77);
          v64 = (uint64_t *)v62[248];
          v66 = (uint64_t *)v62[247];
        }
        else
        {
          v78 = 0;
        }
        v79 = (uint64_t *)&v78[8 * v74];
        v80 = &v78[8 * v77];
        *v79 = v63;
        v73 = v79 + 1;
        while (v64 != v66)
        {
          v82 = *--v64;
          *--v79 = v82;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v61 != 1)
        goto LABEL_102;
      v62 = *(_QWORD **)a1[1];
      v63 = *(_DWORD *)(a1[2] + 88) & 0x7FFFLL;
      v64 = (uint64_t *)v62[248];
      v65 = v62[249];
      if ((unint64_t)v64 >= v65)
      {
        v66 = (uint64_t *)v62[247];
        v67 = v64 - v66;
        if ((unint64_t)(v67 + 1) >> 61)
          goto LABEL_776;
        v68 = v65 - (_QWORD)v66;
        v69 = (uint64_t)(v65 - (_QWORD)v66) >> 2;
        if (v69 <= v67 + 1)
          v69 = v67 + 1;
        if (v68 >= 0x7FFFFFFFFFFFFFF8)
          v70 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v70 = v69;
        if (v70)
        {
          v71 = (char *)sub_40FC((uint64_t)(v62 + 249), v70);
          v64 = (uint64_t *)v62[248];
          v66 = (uint64_t *)v62[247];
        }
        else
        {
          v71 = 0;
        }
        v79 = (uint64_t *)&v71[8 * v67];
        v80 = &v71[8 * v70];
        *v79 = v63;
        v73 = v79 + 1;
        while (v64 != v66)
        {
          v81 = *--v64;
          *--v79 = v81;
        }
LABEL_99:
        v62[247] = v79;
        v62[248] = v73;
        v62[249] = v80;
        if (v66)
          operator delete(v66);
        goto LABEL_101;
      }
    }
    *v64 = v63;
    v73 = v64 + 1;
LABEL_101:
    v62[248] = v73;
LABEL_102:
    v83 = 1 << *(_DWORD *)(v3 + 48);
    if (v83 == 2)
    {
      v84 = *(_QWORD **)a1[1];
      v85 = *(_QWORD *)(a1[2] + 56) >> 17;
      v86 = (char *)v84[251];
      v94 = v84[252];
      if ((unint64_t)v86 >= v94)
      {
        v88 = (char *)v84[250];
        v96 = (v86 - v88) >> 3;
        if ((unint64_t)(v96 + 1) >> 61)
          goto LABEL_776;
        v97 = v94 - (_QWORD)v88;
        v98 = (uint64_t)(v94 - (_QWORD)v88) >> 2;
        if (v98 <= v96 + 1)
          v98 = v96 + 1;
        if (v97 >= 0x7FFFFFFFFFFFFFF8)
          v99 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v99 = v98;
        if (v99)
        {
          v100 = (char *)sub_40FC((uint64_t)(v84 + 252), v99);
          v86 = (char *)v84[251];
          v88 = (char *)v84[250];
        }
        else
        {
          v100 = 0;
        }
        v101 = &v100[8 * v96];
        v102 = &v100[8 * v99];
        *(_QWORD *)v101 = v85;
        v95 = v101 + 8;
        while (v86 != v88)
        {
          v104 = *((_QWORD *)v86 - 1);
          v86 -= 8;
          *((_QWORD *)v101 - 1) = v104;
          v101 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v83 != 1)
        goto LABEL_134;
      v84 = *(_QWORD **)a1[1];
      v85 = *(_QWORD *)(a1[2] + 56) >> 17;
      v86 = (char *)v84[251];
      v87 = v84[252];
      if ((unint64_t)v86 >= v87)
      {
        v88 = (char *)v84[250];
        v89 = (v86 - v88) >> 3;
        if ((unint64_t)(v89 + 1) >> 61)
          goto LABEL_776;
        v90 = v87 - (_QWORD)v88;
        v91 = (uint64_t)(v87 - (_QWORD)v88) >> 2;
        if (v91 <= v89 + 1)
          v91 = v89 + 1;
        if (v90 >= 0x7FFFFFFFFFFFFFF8)
          v92 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v92 = v91;
        if (v92)
        {
          v93 = (char *)sub_40FC((uint64_t)(v84 + 252), v92);
          v86 = (char *)v84[251];
          v88 = (char *)v84[250];
        }
        else
        {
          v93 = 0;
        }
        v101 = &v93[8 * v89];
        v102 = &v93[8 * v92];
        *(_QWORD *)v101 = v85;
        v95 = v101 + 8;
        while (v86 != v88)
        {
          v103 = *((_QWORD *)v86 - 1);
          v86 -= 8;
          *((_QWORD *)v101 - 1) = v103;
          v101 -= 8;
        }
LABEL_131:
        v84[250] = v101;
        v84[251] = v95;
        v84[252] = v102;
        if (v88)
          operator delete(v88);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v86 = v85;
    v95 = v86 + 8;
LABEL_133:
    v84[251] = v95;
LABEL_134:
    v105 = 1 << *(_DWORD *)(v3 + 48);
    if (v105 == 2)
    {
      v117 = a1[1];
      v107 = *(_QWORD **)v117;
      v108 = *(unsigned __int16 *)(a1[2] + 80);
      v109 = *(char **)(*(_QWORD *)v117 + 2032);
      v118 = *(_QWORD *)(*(_QWORD *)v117 + 2040);
      if ((unint64_t)v109 >= v118)
      {
        v111 = (char *)v107[253];
        v120 = (v109 - v111) >> 3;
        if ((unint64_t)(v120 + 1) >> 61)
          goto LABEL_776;
        v121 = v118 - (_QWORD)v111;
        v122 = (uint64_t)(v118 - (_QWORD)v111) >> 2;
        if (v122 <= v120 + 1)
          v122 = v120 + 1;
        if (v121 >= 0x7FFFFFFFFFFFFFF8)
          v123 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v123 = v122;
        if (v123)
        {
          v124 = (char *)sub_40FC((uint64_t)(v107 + 255), v123);
          v109 = (char *)v107[254];
          v111 = (char *)v107[253];
        }
        else
        {
          v124 = 0;
        }
        v125 = &v124[8 * v120];
        v126 = &v124[8 * v123];
        *(_QWORD *)v125 = v108;
        v119 = v125 + 8;
        while (v109 != v111)
        {
          v128 = *((_QWORD *)v109 - 1);
          v109 -= 8;
          *((_QWORD *)v125 - 1) = v128;
          v125 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v105 != 1)
        goto LABEL_166;
      v106 = a1[1];
      v107 = *(_QWORD **)v106;
      v108 = *(unsigned __int16 *)(a1[2] + 80);
      v109 = *(char **)(*(_QWORD *)v106 + 2032);
      v110 = *(_QWORD *)(*(_QWORD *)v106 + 2040);
      if ((unint64_t)v109 >= v110)
      {
        v111 = (char *)v107[253];
        v112 = (v109 - v111) >> 3;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_776;
        v113 = v110 - (_QWORD)v111;
        v114 = (uint64_t)(v110 - (_QWORD)v111) >> 2;
        if (v114 <= v112 + 1)
          v114 = v112 + 1;
        if (v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
        {
          v116 = (char *)sub_40FC((uint64_t)(v107 + 255), v115);
          v109 = (char *)v107[254];
          v111 = (char *)v107[253];
        }
        else
        {
          v116 = 0;
        }
        v125 = &v116[8 * v112];
        v126 = &v116[8 * v115];
        *(_QWORD *)v125 = v108;
        v119 = v125 + 8;
        while (v109 != v111)
        {
          v127 = *((_QWORD *)v109 - 1);
          v109 -= 8;
          *((_QWORD *)v125 - 1) = v127;
          v125 -= 8;
        }
LABEL_163:
        v107[253] = v125;
        v107[254] = v119;
        v107[255] = v126;
        if (v111)
          operator delete(v111);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v109 = v108;
    v119 = v109 + 8;
LABEL_165:
    v107[254] = v119;
LABEL_166:
    v129 = 1 << *(_DWORD *)(v3 + 48);
    if (v129 == 2)
    {
      v141 = a1[1];
      v131 = *(_QWORD **)v141;
      v132 = *(unsigned __int16 *)(a1[2] + 40);
      v133 = *(char **)(*(_QWORD *)v141 + 2056);
      v142 = *(_QWORD *)(*(_QWORD *)v141 + 2064);
      if ((unint64_t)v133 >= v142)
      {
        v135 = (char *)v131[256];
        v144 = (v133 - v135) >> 3;
        if ((unint64_t)(v144 + 1) >> 61)
          goto LABEL_776;
        v145 = v142 - (_QWORD)v135;
        v146 = (uint64_t)(v142 - (_QWORD)v135) >> 2;
        if (v146 <= v144 + 1)
          v146 = v144 + 1;
        if (v145 >= 0x7FFFFFFFFFFFFFF8)
          v147 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v147 = v146;
        if (v147)
        {
          v148 = (char *)sub_40FC((uint64_t)(v131 + 258), v147);
          v133 = (char *)v131[257];
          v135 = (char *)v131[256];
        }
        else
        {
          v148 = 0;
        }
        v149 = &v148[8 * v144];
        v150 = &v148[8 * v147];
        *(_QWORD *)v149 = v132;
        v143 = v149 + 8;
        while (v133 != v135)
        {
          v152 = *((_QWORD *)v133 - 1);
          v133 -= 8;
          *((_QWORD *)v149 - 1) = v152;
          v149 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v129 != 1)
        goto LABEL_198;
      v130 = a1[1];
      v131 = *(_QWORD **)v130;
      v132 = *(unsigned __int16 *)(a1[2] + 40);
      v133 = *(char **)(*(_QWORD *)v130 + 2056);
      v134 = *(_QWORD *)(*(_QWORD *)v130 + 2064);
      if ((unint64_t)v133 >= v134)
      {
        v135 = (char *)v131[256];
        v136 = (v133 - v135) >> 3;
        if ((unint64_t)(v136 + 1) >> 61)
          goto LABEL_776;
        v137 = v134 - (_QWORD)v135;
        v138 = (uint64_t)(v134 - (_QWORD)v135) >> 2;
        if (v138 <= v136 + 1)
          v138 = v136 + 1;
        if (v137 >= 0x7FFFFFFFFFFFFFF8)
          v139 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v139 = v138;
        if (v139)
        {
          v140 = (char *)sub_40FC((uint64_t)(v131 + 258), v139);
          v133 = (char *)v131[257];
          v135 = (char *)v131[256];
        }
        else
        {
          v140 = 0;
        }
        v149 = &v140[8 * v136];
        v150 = &v140[8 * v139];
        *(_QWORD *)v149 = v132;
        v143 = v149 + 8;
        while (v133 != v135)
        {
          v151 = *((_QWORD *)v133 - 1);
          v133 -= 8;
          *((_QWORD *)v149 - 1) = v151;
          v149 -= 8;
        }
LABEL_195:
        v131[256] = v149;
        v131[257] = v143;
        v131[258] = v150;
        if (v135)
          operator delete(v135);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v133 = v132;
    v143 = v133 + 8;
LABEL_197:
    v131[257] = v143;
LABEL_198:
    v153 = 1 << *(_DWORD *)(v3 + 48);
    if (v153 == 2)
    {
      v154 = *(_QWORD **)a1[1];
      v155 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      v156 = (uint64_t *)v154[260];
      v164 = v154[261];
      if ((unint64_t)v156 >= v164)
      {
        v158 = (uint64_t *)v154[259];
        v166 = v156 - v158;
        if ((unint64_t)(v166 + 1) >> 61)
          goto LABEL_776;
        v167 = v164 - (_QWORD)v158;
        v168 = (uint64_t)(v164 - (_QWORD)v158) >> 2;
        if (v168 <= v166 + 1)
          v168 = v166 + 1;
        if (v167 >= 0x7FFFFFFFFFFFFFF8)
          v169 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v169 = v168;
        if (v169)
        {
          v170 = (char *)sub_40FC((uint64_t)(v154 + 261), v169);
          v156 = (uint64_t *)v154[260];
          v158 = (uint64_t *)v154[259];
        }
        else
        {
          v170 = 0;
        }
        v171 = (uint64_t *)&v170[8 * v166];
        v172 = &v170[8 * v169];
        *v171 = v155;
        v165 = v171 + 1;
        while (v156 != v158)
        {
          v174 = *--v156;
          *--v171 = v174;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v153 != 1)
        goto LABEL_230;
      v154 = *(_QWORD **)a1[1];
      v155 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      v156 = (uint64_t *)v154[260];
      v157 = v154[261];
      if ((unint64_t)v156 >= v157)
      {
        v158 = (uint64_t *)v154[259];
        v159 = v156 - v158;
        if ((unint64_t)(v159 + 1) >> 61)
          goto LABEL_776;
        v160 = v157 - (_QWORD)v158;
        v161 = (uint64_t)(v157 - (_QWORD)v158) >> 2;
        if (v161 <= v159 + 1)
          v161 = v159 + 1;
        if (v160 >= 0x7FFFFFFFFFFFFFF8)
          v162 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v162 = v161;
        if (v162)
        {
          v163 = (char *)sub_40FC((uint64_t)(v154 + 261), v162);
          v156 = (uint64_t *)v154[260];
          v158 = (uint64_t *)v154[259];
        }
        else
        {
          v163 = 0;
        }
        v171 = (uint64_t *)&v163[8 * v159];
        v172 = &v163[8 * v162];
        *v171 = v155;
        v165 = v171 + 1;
        while (v156 != v158)
        {
          v173 = *--v156;
          *--v171 = v173;
        }
LABEL_227:
        v154[259] = v171;
        v154[260] = v165;
        v154[261] = v172;
        if (v158)
          operator delete(v158);
        goto LABEL_229;
      }
    }
    *v156 = v155;
    v165 = v156 + 1;
LABEL_229:
    v154[260] = v165;
LABEL_230:
    v175 = 1 << *(_DWORD *)(v3 + 48);
    if (v175 == 2)
    {
      v176 = *(_QWORD **)a1[1];
      v177 = *(_QWORD *)(a1[2] + 56) & 0x1FFFFLL;
      v178 = (uint64_t *)v176[263];
      v186 = v176[264];
      if ((unint64_t)v178 >= v186)
      {
        v180 = (uint64_t *)v176[262];
        v188 = v178 - v180;
        if ((unint64_t)(v188 + 1) >> 61)
          goto LABEL_776;
        v189 = v186 - (_QWORD)v180;
        v190 = (uint64_t)(v186 - (_QWORD)v180) >> 2;
        if (v190 <= v188 + 1)
          v190 = v188 + 1;
        if (v189 >= 0x7FFFFFFFFFFFFFF8)
          v191 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v191 = v190;
        if (v191)
        {
          v192 = (char *)sub_40FC((uint64_t)(v176 + 264), v191);
          v178 = (uint64_t *)v176[263];
          v180 = (uint64_t *)v176[262];
        }
        else
        {
          v192 = 0;
        }
        v193 = (uint64_t *)&v192[8 * v188];
        v194 = &v192[8 * v191];
        *v193 = v177;
        v187 = v193 + 1;
        while (v178 != v180)
        {
          v196 = *--v178;
          *--v193 = v196;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v175 != 1)
        goto LABEL_262;
      v176 = *(_QWORD **)a1[1];
      v177 = *(_QWORD *)(a1[2] + 56) & 0x1FFFFLL;
      v178 = (uint64_t *)v176[263];
      v179 = v176[264];
      if ((unint64_t)v178 >= v179)
      {
        v180 = (uint64_t *)v176[262];
        v181 = v178 - v180;
        if ((unint64_t)(v181 + 1) >> 61)
          goto LABEL_776;
        v182 = v179 - (_QWORD)v180;
        v183 = (uint64_t)(v179 - (_QWORD)v180) >> 2;
        if (v183 <= v181 + 1)
          v183 = v181 + 1;
        if (v182 >= 0x7FFFFFFFFFFFFFF8)
          v184 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v184 = v183;
        if (v184)
        {
          v185 = (char *)sub_40FC((uint64_t)(v176 + 264), v184);
          v178 = (uint64_t *)v176[263];
          v180 = (uint64_t *)v176[262];
        }
        else
        {
          v185 = 0;
        }
        v193 = (uint64_t *)&v185[8 * v181];
        v194 = &v185[8 * v184];
        *v193 = v177;
        v187 = v193 + 1;
        while (v178 != v180)
        {
          v195 = *--v178;
          *--v193 = v195;
        }
LABEL_259:
        v176[262] = v193;
        v176[263] = v187;
        v176[264] = v194;
        if (v180)
          operator delete(v180);
        goto LABEL_261;
      }
    }
    *v178 = v177;
    v187 = v178 + 1;
LABEL_261:
    v176[263] = v187;
LABEL_262:
    v197 = 1 << *(_DWORD *)(v3 + 48);
    if (v197 == 2)
    {
      v198 = *(_QWORD **)a1[1];
      v199 = *(_DWORD *)(a1[2] + 72) & 0x1FFFFLL;
      v200 = (uint64_t *)v198[266];
      v208 = v198[267];
      if ((unint64_t)v200 >= v208)
      {
        v202 = (uint64_t *)v198[265];
        v210 = v200 - v202;
        if ((unint64_t)(v210 + 1) >> 61)
          goto LABEL_776;
        v211 = v208 - (_QWORD)v202;
        v212 = (uint64_t)(v208 - (_QWORD)v202) >> 2;
        if (v212 <= v210 + 1)
          v212 = v210 + 1;
        if (v211 >= 0x7FFFFFFFFFFFFFF8)
          v213 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v213 = v212;
        if (v213)
        {
          v214 = (char *)sub_40FC((uint64_t)(v198 + 267), v213);
          v200 = (uint64_t *)v198[266];
          v202 = (uint64_t *)v198[265];
        }
        else
        {
          v214 = 0;
        }
        v215 = (uint64_t *)&v214[8 * v210];
        v216 = &v214[8 * v213];
        *v215 = v199;
        v209 = v215 + 1;
        while (v200 != v202)
        {
          v218 = *--v200;
          *--v215 = v218;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v197 != 1)
        goto LABEL_294;
      v198 = *(_QWORD **)a1[1];
      v199 = *(_DWORD *)(a1[2] + 72) & 0x1FFFFLL;
      v200 = (uint64_t *)v198[266];
      v201 = v198[267];
      if ((unint64_t)v200 >= v201)
      {
        v202 = (uint64_t *)v198[265];
        v203 = v200 - v202;
        if ((unint64_t)(v203 + 1) >> 61)
          goto LABEL_776;
        v204 = v201 - (_QWORD)v202;
        v205 = (uint64_t)(v201 - (_QWORD)v202) >> 2;
        if (v205 <= v203 + 1)
          v205 = v203 + 1;
        if (v204 >= 0x7FFFFFFFFFFFFFF8)
          v206 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v206 = v205;
        if (v206)
        {
          v207 = (char *)sub_40FC((uint64_t)(v198 + 267), v206);
          v200 = (uint64_t *)v198[266];
          v202 = (uint64_t *)v198[265];
        }
        else
        {
          v207 = 0;
        }
        v215 = (uint64_t *)&v207[8 * v203];
        v216 = &v207[8 * v206];
        *v215 = v199;
        v209 = v215 + 1;
        while (v200 != v202)
        {
          v217 = *--v200;
          *--v215 = v217;
        }
LABEL_291:
        v198[265] = v215;
        v198[266] = v209;
        v198[267] = v216;
        if (v202)
          operator delete(v202);
        goto LABEL_293;
      }
    }
    *v200 = v199;
    v209 = v200 + 1;
LABEL_293:
    v198[266] = v209;
LABEL_294:
    v219 = 1 << *(_DWORD *)(v3 + 48);
    if (v219 == 2)
    {
      v220 = *(_QWORD **)a1[1];
      v221 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      v222 = (uint64_t *)v220[269];
      v230 = v220[270];
      if ((unint64_t)v222 >= v230)
      {
        v224 = (uint64_t *)v220[268];
        v232 = v222 - v224;
        if ((unint64_t)(v232 + 1) >> 61)
          goto LABEL_776;
        v233 = v230 - (_QWORD)v224;
        v234 = (uint64_t)(v230 - (_QWORD)v224) >> 2;
        if (v234 <= v232 + 1)
          v234 = v232 + 1;
        if (v233 >= 0x7FFFFFFFFFFFFFF8)
          v235 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v235 = v234;
        if (v235)
        {
          v236 = (char *)sub_40FC((uint64_t)(v220 + 270), v235);
          v222 = (uint64_t *)v220[269];
          v224 = (uint64_t *)v220[268];
        }
        else
        {
          v236 = 0;
        }
        v237 = (uint64_t *)&v236[8 * v232];
        v238 = &v236[8 * v235];
        *v237 = v221;
        v231 = v237 + 1;
        while (v222 != v224)
        {
          v240 = *--v222;
          *--v237 = v240;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v219 != 1)
        goto LABEL_326;
      v220 = *(_QWORD **)a1[1];
      v221 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      v222 = (uint64_t *)v220[269];
      v223 = v220[270];
      if ((unint64_t)v222 >= v223)
      {
        v224 = (uint64_t *)v220[268];
        v225 = v222 - v224;
        if ((unint64_t)(v225 + 1) >> 61)
          goto LABEL_776;
        v226 = v223 - (_QWORD)v224;
        v227 = (uint64_t)(v223 - (_QWORD)v224) >> 2;
        if (v227 <= v225 + 1)
          v227 = v225 + 1;
        if (v226 >= 0x7FFFFFFFFFFFFFF8)
          v228 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v228 = v227;
        if (v228)
        {
          v229 = (char *)sub_40FC((uint64_t)(v220 + 270), v228);
          v222 = (uint64_t *)v220[269];
          v224 = (uint64_t *)v220[268];
        }
        else
        {
          v229 = 0;
        }
        v237 = (uint64_t *)&v229[8 * v225];
        v238 = &v229[8 * v228];
        *v237 = v221;
        v231 = v237 + 1;
        while (v222 != v224)
        {
          v239 = *--v222;
          *--v237 = v239;
        }
LABEL_323:
        v220[268] = v237;
        v220[269] = v231;
        v220[270] = v238;
        if (v224)
          operator delete(v224);
        goto LABEL_325;
      }
    }
    *v222 = v221;
    v231 = v222 + 1;
LABEL_325:
    v220[269] = v231;
LABEL_326:
    v241 = 1 << *(_DWORD *)(v3 + 48);
    if (v241 == 2)
    {
      v253 = a1[1];
      v243 = *(_QWORD **)v253;
      v244 = *(unsigned __int16 *)(a1[2] + 76);
      v245 = *(char **)(*(_QWORD *)v253 + 2176);
      v254 = *(_QWORD *)(*(_QWORD *)v253 + 2184);
      if ((unint64_t)v245 >= v254)
      {
        v247 = (char *)v243[271];
        v256 = (v245 - v247) >> 3;
        if ((unint64_t)(v256 + 1) >> 61)
          goto LABEL_776;
        v257 = v254 - (_QWORD)v247;
        v258 = (uint64_t)(v254 - (_QWORD)v247) >> 2;
        if (v258 <= v256 + 1)
          v258 = v256 + 1;
        if (v257 >= 0x7FFFFFFFFFFFFFF8)
          v259 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v259 = v258;
        if (v259)
        {
          v260 = (char *)sub_40FC((uint64_t)(v243 + 273), v259);
          v245 = (char *)v243[272];
          v247 = (char *)v243[271];
        }
        else
        {
          v260 = 0;
        }
        v261 = &v260[8 * v256];
        v262 = &v260[8 * v259];
        *(_QWORD *)v261 = v244;
        v255 = v261 + 8;
        while (v245 != v247)
        {
          v264 = *((_QWORD *)v245 - 1);
          v245 -= 8;
          *((_QWORD *)v261 - 1) = v264;
          v261 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v241 != 1)
        goto LABEL_358;
      v242 = a1[1];
      v243 = *(_QWORD **)v242;
      v244 = *(unsigned __int16 *)(a1[2] + 76);
      v245 = *(char **)(*(_QWORD *)v242 + 2176);
      v246 = *(_QWORD *)(*(_QWORD *)v242 + 2184);
      if ((unint64_t)v245 >= v246)
      {
        v247 = (char *)v243[271];
        v248 = (v245 - v247) >> 3;
        if ((unint64_t)(v248 + 1) >> 61)
          goto LABEL_776;
        v249 = v246 - (_QWORD)v247;
        v250 = (uint64_t)(v246 - (_QWORD)v247) >> 2;
        if (v250 <= v248 + 1)
          v250 = v248 + 1;
        if (v249 >= 0x7FFFFFFFFFFFFFF8)
          v251 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v251 = v250;
        if (v251)
        {
          v252 = (char *)sub_40FC((uint64_t)(v243 + 273), v251);
          v245 = (char *)v243[272];
          v247 = (char *)v243[271];
        }
        else
        {
          v252 = 0;
        }
        v261 = &v252[8 * v248];
        v262 = &v252[8 * v251];
        *(_QWORD *)v261 = v244;
        v255 = v261 + 8;
        while (v245 != v247)
        {
          v263 = *((_QWORD *)v245 - 1);
          v245 -= 8;
          *((_QWORD *)v261 - 1) = v263;
          v261 -= 8;
        }
LABEL_355:
        v243[271] = v261;
        v243[272] = v255;
        v243[273] = v262;
        if (v247)
          operator delete(v247);
        goto LABEL_357;
      }
    }
    *(_QWORD *)v245 = v244;
    v255 = v245 + 8;
LABEL_357:
    v243[272] = v255;
LABEL_358:
    v265 = 1 << *(_DWORD *)(v3 + 48);
    if (v265 == 2)
    {
      v277 = a1[1];
      v267 = *(_QWORD **)v277;
      v268 = *(unsigned __int16 *)(a1[2] + 36);
      v269 = *(char **)(*(_QWORD *)v277 + 2200);
      v278 = *(_QWORD *)(*(_QWORD *)v277 + 2208);
      if ((unint64_t)v269 >= v278)
      {
        v271 = (char *)v267[274];
        v280 = (v269 - v271) >> 3;
        if ((unint64_t)(v280 + 1) >> 61)
          goto LABEL_776;
        v281 = v278 - (_QWORD)v271;
        v282 = (uint64_t)(v278 - (_QWORD)v271) >> 2;
        if (v282 <= v280 + 1)
          v282 = v280 + 1;
        if (v281 >= 0x7FFFFFFFFFFFFFF8)
          v283 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v283 = v282;
        if (v283)
        {
          v284 = (char *)sub_40FC((uint64_t)(v267 + 276), v283);
          v269 = (char *)v267[275];
          v271 = (char *)v267[274];
        }
        else
        {
          v284 = 0;
        }
        v285 = &v284[8 * v280];
        v286 = &v284[8 * v283];
        *(_QWORD *)v285 = v268;
        v279 = v285 + 8;
        while (v269 != v271)
        {
          v288 = *((_QWORD *)v269 - 1);
          v269 -= 8;
          *((_QWORD *)v285 - 1) = v288;
          v285 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v265 != 1)
        goto LABEL_390;
      v266 = a1[1];
      v267 = *(_QWORD **)v266;
      v268 = *(unsigned __int16 *)(a1[2] + 36);
      v269 = *(char **)(*(_QWORD *)v266 + 2200);
      v270 = *(_QWORD *)(*(_QWORD *)v266 + 2208);
      if ((unint64_t)v269 >= v270)
      {
        v271 = (char *)v267[274];
        v272 = (v269 - v271) >> 3;
        if ((unint64_t)(v272 + 1) >> 61)
          goto LABEL_776;
        v273 = v270 - (_QWORD)v271;
        v274 = (uint64_t)(v270 - (_QWORD)v271) >> 2;
        if (v274 <= v272 + 1)
          v274 = v272 + 1;
        if (v273 >= 0x7FFFFFFFFFFFFFF8)
          v275 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v275 = v274;
        if (v275)
        {
          v276 = (char *)sub_40FC((uint64_t)(v267 + 276), v275);
          v269 = (char *)v267[275];
          v271 = (char *)v267[274];
        }
        else
        {
          v276 = 0;
        }
        v285 = &v276[8 * v272];
        v286 = &v276[8 * v275];
        *(_QWORD *)v285 = v268;
        v279 = v285 + 8;
        while (v269 != v271)
        {
          v287 = *((_QWORD *)v269 - 1);
          v269 -= 8;
          *((_QWORD *)v285 - 1) = v287;
          v285 -= 8;
        }
LABEL_387:
        v267[274] = v285;
        v267[275] = v279;
        v267[276] = v286;
        if (v271)
          operator delete(v271);
        goto LABEL_389;
      }
    }
    *(_QWORD *)v269 = v268;
    v279 = v269 + 8;
LABEL_389:
    v267[275] = v279;
LABEL_390:
    v289 = 1 << *(_DWORD *)(v3 + 48);
    if (v289 == 2)
    {
      v301 = a1[1];
      v291 = *(_QWORD **)v301;
      v292 = *(unsigned __int16 *)(a1[2] + 84);
      v293 = *(char **)(*(_QWORD *)v301 + 2224);
      v302 = *(_QWORD *)(*(_QWORD *)v301 + 2232);
      if ((unint64_t)v293 >= v302)
      {
        v295 = (char *)v291[277];
        v304 = (v293 - v295) >> 3;
        if ((unint64_t)(v304 + 1) >> 61)
          goto LABEL_776;
        v305 = v302 - (_QWORD)v295;
        v306 = (uint64_t)(v302 - (_QWORD)v295) >> 2;
        if (v306 <= v304 + 1)
          v306 = v304 + 1;
        if (v305 >= 0x7FFFFFFFFFFFFFF8)
          v307 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v307 = v306;
        if (v307)
        {
          v308 = (char *)sub_40FC((uint64_t)(v291 + 279), v307);
          v293 = (char *)v291[278];
          v295 = (char *)v291[277];
        }
        else
        {
          v308 = 0;
        }
        v309 = &v308[8 * v304];
        v310 = &v308[8 * v307];
        *(_QWORD *)v309 = v292;
        v303 = v309 + 8;
        while (v293 != v295)
        {
          v312 = *((_QWORD *)v293 - 1);
          v293 -= 8;
          *((_QWORD *)v309 - 1) = v312;
          v309 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v289 != 1)
        goto LABEL_422;
      v290 = a1[1];
      v291 = *(_QWORD **)v290;
      v292 = *(unsigned __int16 *)(a1[2] + 84);
      v293 = *(char **)(*(_QWORD *)v290 + 2224);
      v294 = *(_QWORD *)(*(_QWORD *)v290 + 2232);
      if ((unint64_t)v293 >= v294)
      {
        v295 = (char *)v291[277];
        v296 = (v293 - v295) >> 3;
        if ((unint64_t)(v296 + 1) >> 61)
          goto LABEL_776;
        v297 = v294 - (_QWORD)v295;
        v298 = (uint64_t)(v294 - (_QWORD)v295) >> 2;
        if (v298 <= v296 + 1)
          v298 = v296 + 1;
        if (v297 >= 0x7FFFFFFFFFFFFFF8)
          v299 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v299 = v298;
        if (v299)
        {
          v300 = (char *)sub_40FC((uint64_t)(v291 + 279), v299);
          v293 = (char *)v291[278];
          v295 = (char *)v291[277];
        }
        else
        {
          v300 = 0;
        }
        v309 = &v300[8 * v296];
        v310 = &v300[8 * v299];
        *(_QWORD *)v309 = v292;
        v303 = v309 + 8;
        while (v293 != v295)
        {
          v311 = *((_QWORD *)v293 - 1);
          v293 -= 8;
          *((_QWORD *)v309 - 1) = v311;
          v309 -= 8;
        }
LABEL_419:
        v291[277] = v309;
        v291[278] = v303;
        v291[279] = v310;
        if (v295)
          operator delete(v295);
        goto LABEL_421;
      }
    }
    *(_QWORD *)v293 = v292;
    v303 = v293 + 8;
LABEL_421:
    v291[278] = v303;
LABEL_422:
    v313 = 1 << *(_DWORD *)(v3 + 48);
    if (v313 == 2)
    {
      v314 = *(_QWORD **)a1[1];
      v315 = (*(unsigned __int16 *)(a1[2] + 44) | (*(unsigned __int8 *)(a1[2] + 46) << 16)) & 0x1FFFFLL;
      v316 = (uint64_t *)v314[281];
      v324 = v314[282];
      if ((unint64_t)v316 >= v324)
      {
        v318 = (uint64_t *)v314[280];
        v326 = v316 - v318;
        if ((unint64_t)(v326 + 1) >> 61)
          goto LABEL_776;
        v327 = v324 - (_QWORD)v318;
        v328 = (uint64_t)(v324 - (_QWORD)v318) >> 2;
        if (v328 <= v326 + 1)
          v328 = v326 + 1;
        if (v327 >= 0x7FFFFFFFFFFFFFF8)
          v329 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v329 = v328;
        if (v329)
        {
          v330 = (char *)sub_40FC((uint64_t)(v314 + 282), v329);
          v316 = (uint64_t *)v314[281];
          v318 = (uint64_t *)v314[280];
        }
        else
        {
          v330 = 0;
        }
        v331 = (uint64_t *)&v330[8 * v326];
        v332 = &v330[8 * v329];
        *v331 = v315;
        v325 = v331 + 1;
        while (v316 != v318)
        {
          v334 = *--v316;
          *--v331 = v334;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v313 != 1)
        goto LABEL_454;
      v314 = *(_QWORD **)a1[1];
      v315 = (*(unsigned __int16 *)(a1[2] + 44) | (*(unsigned __int8 *)(a1[2] + 46) << 16)) & 0x1FFFFLL;
      v316 = (uint64_t *)v314[281];
      v317 = v314[282];
      if ((unint64_t)v316 >= v317)
      {
        v318 = (uint64_t *)v314[280];
        v319 = v316 - v318;
        if ((unint64_t)(v319 + 1) >> 61)
          goto LABEL_776;
        v320 = v317 - (_QWORD)v318;
        v321 = (uint64_t)(v317 - (_QWORD)v318) >> 2;
        if (v321 <= v319 + 1)
          v321 = v319 + 1;
        if (v320 >= 0x7FFFFFFFFFFFFFF8)
          v322 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v322 = v321;
        if (v322)
        {
          v323 = (char *)sub_40FC((uint64_t)(v314 + 282), v322);
          v316 = (uint64_t *)v314[281];
          v318 = (uint64_t *)v314[280];
        }
        else
        {
          v323 = 0;
        }
        v331 = (uint64_t *)&v323[8 * v319];
        v332 = &v323[8 * v322];
        *v331 = v315;
        v325 = v331 + 1;
        while (v316 != v318)
        {
          v333 = *--v316;
          *--v331 = v333;
        }
LABEL_451:
        v314[280] = v331;
        v314[281] = v325;
        v314[282] = v332;
        if (v318)
          operator delete(v318);
        goto LABEL_453;
      }
    }
    *v316 = v315;
    v325 = v316 + 1;
LABEL_453:
    v314[281] = v325;
LABEL_454:
    v335 = 1 << *(_DWORD *)(v3 + 48);
    if (v335 == 2)
    {
      v347 = a1[1];
      v337 = *(_QWORD **)v347;
      v338 = *(unsigned __int16 *)(a1[2] + 86);
      v339 = *(char **)(*(_QWORD *)v347 + 2272);
      v348 = *(_QWORD *)(*(_QWORD *)v347 + 2280);
      if ((unint64_t)v339 >= v348)
      {
        v341 = (char *)v337[283];
        v350 = (v339 - v341) >> 3;
        if ((unint64_t)(v350 + 1) >> 61)
          goto LABEL_776;
        v351 = v348 - (_QWORD)v341;
        v352 = (uint64_t)(v348 - (_QWORD)v341) >> 2;
        if (v352 <= v350 + 1)
          v352 = v350 + 1;
        if (v351 >= 0x7FFFFFFFFFFFFFF8)
          v353 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v353 = v352;
        if (v353)
        {
          v354 = (char *)sub_40FC((uint64_t)(v337 + 285), v353);
          v339 = (char *)v337[284];
          v341 = (char *)v337[283];
        }
        else
        {
          v354 = 0;
        }
        v355 = &v354[8 * v350];
        v356 = &v354[8 * v353];
        *(_QWORD *)v355 = v338;
        v349 = v355 + 8;
        while (v339 != v341)
        {
          v358 = *((_QWORD *)v339 - 1);
          v339 -= 8;
          *((_QWORD *)v355 - 1) = v358;
          v355 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v335 != 1)
        goto LABEL_486;
      v336 = a1[1];
      v337 = *(_QWORD **)v336;
      v338 = *(unsigned __int16 *)(a1[2] + 86);
      v339 = *(char **)(*(_QWORD *)v336 + 2272);
      v340 = *(_QWORD *)(*(_QWORD *)v336 + 2280);
      if ((unint64_t)v339 >= v340)
      {
        v341 = (char *)v337[283];
        v342 = (v339 - v341) >> 3;
        if ((unint64_t)(v342 + 1) >> 61)
          goto LABEL_776;
        v343 = v340 - (_QWORD)v341;
        v344 = (uint64_t)(v340 - (_QWORD)v341) >> 2;
        if (v344 <= v342 + 1)
          v344 = v342 + 1;
        if (v343 >= 0x7FFFFFFFFFFFFFF8)
          v345 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v345 = v344;
        if (v345)
        {
          v346 = (char *)sub_40FC((uint64_t)(v337 + 285), v345);
          v339 = (char *)v337[284];
          v341 = (char *)v337[283];
        }
        else
        {
          v346 = 0;
        }
        v355 = &v346[8 * v342];
        v356 = &v346[8 * v345];
        *(_QWORD *)v355 = v338;
        v349 = v355 + 8;
        while (v339 != v341)
        {
          v357 = *((_QWORD *)v339 - 1);
          v339 -= 8;
          *((_QWORD *)v355 - 1) = v357;
          v355 -= 8;
        }
LABEL_483:
        v337[283] = v355;
        v337[284] = v349;
        v337[285] = v356;
        if (v341)
          operator delete(v341);
        goto LABEL_485;
      }
    }
    *(_QWORD *)v339 = v338;
    v349 = v339 + 8;
LABEL_485:
    v337[284] = v349;
LABEL_486:
    v359 = 1 << *(_DWORD *)(v3 + 48);
    if (v359 == 2)
    {
      v360 = *(_QWORD **)a1[1];
      v361 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      v362 = (uint64_t *)v360[287];
      v370 = v360[288];
      if ((unint64_t)v362 >= v370)
      {
        v364 = (uint64_t *)v360[286];
        v372 = v362 - v364;
        if ((unint64_t)(v372 + 1) >> 61)
          goto LABEL_776;
        v373 = v370 - (_QWORD)v364;
        v374 = (uint64_t)(v370 - (_QWORD)v364) >> 2;
        if (v374 <= v372 + 1)
          v374 = v372 + 1;
        if (v373 >= 0x7FFFFFFFFFFFFFF8)
          v375 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v375 = v374;
        if (v375)
        {
          v376 = (char *)sub_40FC((uint64_t)(v360 + 288), v375);
          v362 = (uint64_t *)v360[287];
          v364 = (uint64_t *)v360[286];
        }
        else
        {
          v376 = 0;
        }
        v377 = (uint64_t *)&v376[8 * v372];
        v378 = &v376[8 * v375];
        *v377 = v361;
        v371 = v377 + 1;
        while (v362 != v364)
        {
          v380 = *--v362;
          *--v377 = v380;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v359 != 1)
        goto LABEL_518;
      v360 = *(_QWORD **)a1[1];
      v361 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      v362 = (uint64_t *)v360[287];
      v363 = v360[288];
      if ((unint64_t)v362 >= v363)
      {
        v364 = (uint64_t *)v360[286];
        v365 = v362 - v364;
        if ((unint64_t)(v365 + 1) >> 61)
          goto LABEL_776;
        v366 = v363 - (_QWORD)v364;
        v367 = (uint64_t)(v363 - (_QWORD)v364) >> 2;
        if (v367 <= v365 + 1)
          v367 = v365 + 1;
        if (v366 >= 0x7FFFFFFFFFFFFFF8)
          v368 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v368 = v367;
        if (v368)
        {
          v369 = (char *)sub_40FC((uint64_t)(v360 + 288), v368);
          v362 = (uint64_t *)v360[287];
          v364 = (uint64_t *)v360[286];
        }
        else
        {
          v369 = 0;
        }
        v377 = (uint64_t *)&v369[8 * v365];
        v378 = &v369[8 * v368];
        *v377 = v361;
        v371 = v377 + 1;
        while (v362 != v364)
        {
          v379 = *--v362;
          *--v377 = v379;
        }
LABEL_515:
        v360[286] = v377;
        v360[287] = v371;
        v360[288] = v378;
        if (v364)
          operator delete(v364);
        goto LABEL_517;
      }
    }
    *v362 = v361;
    v371 = v362 + 1;
LABEL_517:
    v360[287] = v371;
LABEL_518:
    v381 = 1 << *(_DWORD *)(v3 + 48);
    if (v381 == 2)
    {
      v393 = a1[1];
      v383 = *(_QWORD **)v393;
      v384 = *(unsigned __int16 *)(a1[2] + 82);
      v385 = *(char **)(*(_QWORD *)v393 + 2320);
      v394 = *(_QWORD *)(*(_QWORD *)v393 + 2328);
      if ((unint64_t)v385 >= v394)
      {
        v387 = (char *)v383[289];
        v396 = (v385 - v387) >> 3;
        if ((unint64_t)(v396 + 1) >> 61)
          goto LABEL_776;
        v397 = v394 - (_QWORD)v387;
        v398 = (uint64_t)(v394 - (_QWORD)v387) >> 2;
        if (v398 <= v396 + 1)
          v398 = v396 + 1;
        if (v397 >= 0x7FFFFFFFFFFFFFF8)
          v399 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v399 = v398;
        if (v399)
        {
          v400 = (char *)sub_40FC((uint64_t)(v383 + 291), v399);
          v385 = (char *)v383[290];
          v387 = (char *)v383[289];
        }
        else
        {
          v400 = 0;
        }
        v401 = &v400[8 * v396];
        v402 = &v400[8 * v399];
        *(_QWORD *)v401 = v384;
        v395 = v401 + 8;
        while (v385 != v387)
        {
          v404 = *((_QWORD *)v385 - 1);
          v385 -= 8;
          *((_QWORD *)v401 - 1) = v404;
          v401 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v381 != 1)
        goto LABEL_550;
      v382 = a1[1];
      v383 = *(_QWORD **)v382;
      v384 = *(unsigned __int16 *)(a1[2] + 82);
      v385 = *(char **)(*(_QWORD *)v382 + 2320);
      v386 = *(_QWORD *)(*(_QWORD *)v382 + 2328);
      if ((unint64_t)v385 >= v386)
      {
        v387 = (char *)v383[289];
        v388 = (v385 - v387) >> 3;
        if ((unint64_t)(v388 + 1) >> 61)
          goto LABEL_776;
        v389 = v386 - (_QWORD)v387;
        v390 = (uint64_t)(v386 - (_QWORD)v387) >> 2;
        if (v390 <= v388 + 1)
          v390 = v388 + 1;
        if (v389 >= 0x7FFFFFFFFFFFFFF8)
          v391 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v391 = v390;
        if (v391)
        {
          v392 = (char *)sub_40FC((uint64_t)(v383 + 291), v391);
          v385 = (char *)v383[290];
          v387 = (char *)v383[289];
        }
        else
        {
          v392 = 0;
        }
        v401 = &v392[8 * v388];
        v402 = &v392[8 * v391];
        *(_QWORD *)v401 = v384;
        v395 = v401 + 8;
        while (v385 != v387)
        {
          v403 = *((_QWORD *)v385 - 1);
          v385 -= 8;
          *((_QWORD *)v401 - 1) = v403;
          v401 -= 8;
        }
LABEL_547:
        v383[289] = v401;
        v383[290] = v395;
        v383[291] = v402;
        if (v387)
          operator delete(v387);
        goto LABEL_549;
      }
    }
    *(_QWORD *)v385 = v384;
    v395 = v385 + 8;
LABEL_549:
    v383[290] = v395;
LABEL_550:
    v405 = 1 << *(_DWORD *)(v3 + 48);
    if (v405 == 2)
    {
      v417 = a1[1];
      v407 = *(_QWORD **)v417;
      v408 = *(unsigned __int16 *)(a1[2] + 42);
      v409 = *(char **)(*(_QWORD *)v417 + 2344);
      v418 = *(_QWORD *)(*(_QWORD *)v417 + 2352);
      if ((unint64_t)v409 >= v418)
      {
        v411 = (char *)v407[292];
        v420 = (v409 - v411) >> 3;
        if ((unint64_t)(v420 + 1) >> 61)
          goto LABEL_776;
        v421 = v418 - (_QWORD)v411;
        v422 = (uint64_t)(v418 - (_QWORD)v411) >> 2;
        if (v422 <= v420 + 1)
          v422 = v420 + 1;
        if (v421 >= 0x7FFFFFFFFFFFFFF8)
          v423 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v423 = v422;
        if (v423)
        {
          v424 = (char *)sub_40FC((uint64_t)(v407 + 294), v423);
          v409 = (char *)v407[293];
          v411 = (char *)v407[292];
        }
        else
        {
          v424 = 0;
        }
        v425 = &v424[8 * v420];
        v426 = &v424[8 * v423];
        *(_QWORD *)v425 = v408;
        v419 = v425 + 8;
        while (v409 != v411)
        {
          v428 = *((_QWORD *)v409 - 1);
          v409 -= 8;
          *((_QWORD *)v425 - 1) = v428;
          v425 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v405 != 1)
        goto LABEL_582;
      v406 = a1[1];
      v407 = *(_QWORD **)v406;
      v408 = *(unsigned __int16 *)(a1[2] + 42);
      v409 = *(char **)(*(_QWORD *)v406 + 2344);
      v410 = *(_QWORD *)(*(_QWORD *)v406 + 2352);
      if ((unint64_t)v409 >= v410)
      {
        v411 = (char *)v407[292];
        v412 = (v409 - v411) >> 3;
        if ((unint64_t)(v412 + 1) >> 61)
          goto LABEL_776;
        v413 = v410 - (_QWORD)v411;
        v414 = (uint64_t)(v410 - (_QWORD)v411) >> 2;
        if (v414 <= v412 + 1)
          v414 = v412 + 1;
        if (v413 >= 0x7FFFFFFFFFFFFFF8)
          v415 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v415 = v414;
        if (v415)
        {
          v416 = (char *)sub_40FC((uint64_t)(v407 + 294), v415);
          v409 = (char *)v407[293];
          v411 = (char *)v407[292];
        }
        else
        {
          v416 = 0;
        }
        v425 = &v416[8 * v412];
        v426 = &v416[8 * v415];
        *(_QWORD *)v425 = v408;
        v419 = v425 + 8;
        while (v409 != v411)
        {
          v427 = *((_QWORD *)v409 - 1);
          v409 -= 8;
          *((_QWORD *)v425 - 1) = v427;
          v425 -= 8;
        }
LABEL_579:
        v407[292] = v425;
        v407[293] = v419;
        v407[294] = v426;
        if (v411)
          operator delete(v411);
        goto LABEL_581;
      }
    }
    *(_QWORD *)v409 = v408;
    v419 = v409 + 8;
LABEL_581:
    v407[293] = v419;
LABEL_582:
    v429 = 1 << *(_DWORD *)(v3 + 48);
    if (v429 == 2)
    {
      v441 = a1[1];
      v431 = *(_QWORD **)v441;
      v432 = *(unsigned __int16 *)(a1[2] + 78);
      v433 = *(char **)(*(_QWORD *)v441 + 2368);
      v442 = *(_QWORD *)(*(_QWORD *)v441 + 2376);
      if ((unint64_t)v433 >= v442)
      {
        v435 = (char *)v431[295];
        v444 = (v433 - v435) >> 3;
        if ((unint64_t)(v444 + 1) >> 61)
          goto LABEL_776;
        v445 = v442 - (_QWORD)v435;
        v446 = (uint64_t)(v442 - (_QWORD)v435) >> 2;
        if (v446 <= v444 + 1)
          v446 = v444 + 1;
        if (v445 >= 0x7FFFFFFFFFFFFFF8)
          v447 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v447 = v446;
        if (v447)
        {
          v448 = (char *)sub_40FC((uint64_t)(v431 + 297), v447);
          v433 = (char *)v431[296];
          v435 = (char *)v431[295];
        }
        else
        {
          v448 = 0;
        }
        v449 = &v448[8 * v444];
        v450 = &v448[8 * v447];
        *(_QWORD *)v449 = v432;
        v443 = v449 + 8;
        while (v433 != v435)
        {
          v452 = *((_QWORD *)v433 - 1);
          v433 -= 8;
          *((_QWORD *)v449 - 1) = v452;
          v449 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v429 != 1)
        goto LABEL_614;
      v430 = a1[1];
      v431 = *(_QWORD **)v430;
      v432 = *(unsigned __int16 *)(a1[2] + 78);
      v433 = *(char **)(*(_QWORD *)v430 + 2368);
      v434 = *(_QWORD *)(*(_QWORD *)v430 + 2376);
      if ((unint64_t)v433 >= v434)
      {
        v435 = (char *)v431[295];
        v436 = (v433 - v435) >> 3;
        if ((unint64_t)(v436 + 1) >> 61)
          goto LABEL_776;
        v437 = v434 - (_QWORD)v435;
        v438 = (uint64_t)(v434 - (_QWORD)v435) >> 2;
        if (v438 <= v436 + 1)
          v438 = v436 + 1;
        if (v437 >= 0x7FFFFFFFFFFFFFF8)
          v439 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v439 = v438;
        if (v439)
        {
          v440 = (char *)sub_40FC((uint64_t)(v431 + 297), v439);
          v433 = (char *)v431[296];
          v435 = (char *)v431[295];
        }
        else
        {
          v440 = 0;
        }
        v449 = &v440[8 * v436];
        v450 = &v440[8 * v439];
        *(_QWORD *)v449 = v432;
        v443 = v449 + 8;
        while (v433 != v435)
        {
          v451 = *((_QWORD *)v433 - 1);
          v433 -= 8;
          *((_QWORD *)v449 - 1) = v451;
          v449 -= 8;
        }
LABEL_611:
        v431[295] = v449;
        v431[296] = v443;
        v431[297] = v450;
        if (v435)
          operator delete(v435);
        goto LABEL_613;
      }
    }
    *(_QWORD *)v433 = v432;
    v443 = v433 + 8;
LABEL_613:
    v431[296] = v443;
LABEL_614:
    v453 = 1 << *(_DWORD *)(v3 + 48);
    if (v453 == 2)
    {
      v465 = a1[1];
      v455 = *(_QWORD **)v465;
      v456 = *(unsigned __int16 *)(a1[2] + 38);
      v457 = *(char **)(*(_QWORD *)v465 + 2392);
      v466 = *(_QWORD *)(*(_QWORD *)v465 + 2400);
      if ((unint64_t)v457 >= v466)
      {
        v459 = (char *)v455[298];
        v468 = (v457 - v459) >> 3;
        if ((unint64_t)(v468 + 1) >> 61)
          goto LABEL_776;
        v469 = v466 - (_QWORD)v459;
        v470 = (uint64_t)(v466 - (_QWORD)v459) >> 2;
        if (v470 <= v468 + 1)
          v470 = v468 + 1;
        if (v469 >= 0x7FFFFFFFFFFFFFF8)
          v471 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v471 = v470;
        if (v471)
        {
          v472 = (char *)sub_40FC((uint64_t)(v455 + 300), v471);
          v457 = (char *)v455[299];
          v459 = (char *)v455[298];
        }
        else
        {
          v472 = 0;
        }
        v473 = &v472[8 * v468];
        v474 = &v472[8 * v471];
        *(_QWORD *)v473 = v456;
        v467 = v473 + 8;
        while (v457 != v459)
        {
          v476 = *((_QWORD *)v457 - 1);
          v457 -= 8;
          *((_QWORD *)v473 - 1) = v476;
          v473 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v453 != 1)
        goto LABEL_646;
      v454 = a1[1];
      v455 = *(_QWORD **)v454;
      v456 = *(unsigned __int16 *)(a1[2] + 38);
      v457 = *(char **)(*(_QWORD *)v454 + 2392);
      v458 = *(_QWORD *)(*(_QWORD *)v454 + 2400);
      if ((unint64_t)v457 >= v458)
      {
        v459 = (char *)v455[298];
        v460 = (v457 - v459) >> 3;
        if ((unint64_t)(v460 + 1) >> 61)
          goto LABEL_776;
        v461 = v458 - (_QWORD)v459;
        v462 = (uint64_t)(v458 - (_QWORD)v459) >> 2;
        if (v462 <= v460 + 1)
          v462 = v460 + 1;
        if (v461 >= 0x7FFFFFFFFFFFFFF8)
          v463 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v463 = v462;
        if (v463)
        {
          v464 = (char *)sub_40FC((uint64_t)(v455 + 300), v463);
          v457 = (char *)v455[299];
          v459 = (char *)v455[298];
        }
        else
        {
          v464 = 0;
        }
        v473 = &v464[8 * v460];
        v474 = &v464[8 * v463];
        *(_QWORD *)v473 = v456;
        v467 = v473 + 8;
        while (v457 != v459)
        {
          v475 = *((_QWORD *)v457 - 1);
          v457 -= 8;
          *((_QWORD *)v473 - 1) = v475;
          v473 -= 8;
        }
LABEL_643:
        v455[298] = v473;
        v455[299] = v467;
        v455[300] = v474;
        if (v459)
          operator delete(v459);
        goto LABEL_645;
      }
    }
    *(_QWORD *)v457 = v456;
    v467 = v457 + 8;
LABEL_645:
    v455[299] = v467;
LABEL_646:
    v477 = 1 << *(_DWORD *)(v3 + 48);
    if (v477 == 2)
    {
      v478 = *(_QWORD **)a1[1];
      v479 = *(_DWORD *)(a1[2] + 64) & 0x3FFFFLL;
      v480 = (uint64_t *)v478[302];
      v488 = v478[303];
      if ((unint64_t)v480 >= v488)
      {
        v482 = (uint64_t *)v478[301];
        v490 = v480 - v482;
        if ((unint64_t)(v490 + 1) >> 61)
          goto LABEL_776;
        v491 = v488 - (_QWORD)v482;
        v492 = (uint64_t)(v488 - (_QWORD)v482) >> 2;
        if (v492 <= v490 + 1)
          v492 = v490 + 1;
        if (v491 >= 0x7FFFFFFFFFFFFFF8)
          v493 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v493 = v492;
        if (v493)
        {
          v494 = (char *)sub_40FC((uint64_t)(v478 + 303), v493);
          v480 = (uint64_t *)v478[302];
          v482 = (uint64_t *)v478[301];
        }
        else
        {
          v494 = 0;
        }
        v495 = (uint64_t *)&v494[8 * v490];
        v496 = &v494[8 * v493];
        *v495 = v479;
        v489 = v495 + 1;
        while (v480 != v482)
        {
          v498 = *--v480;
          *--v495 = v498;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v477 != 1)
        goto LABEL_678;
      v478 = *(_QWORD **)a1[1];
      v479 = *(_DWORD *)(a1[2] + 64) & 0x3FFFFLL;
      v480 = (uint64_t *)v478[302];
      v481 = v478[303];
      if ((unint64_t)v480 >= v481)
      {
        v482 = (uint64_t *)v478[301];
        v483 = v480 - v482;
        if ((unint64_t)(v483 + 1) >> 61)
          goto LABEL_776;
        v484 = v481 - (_QWORD)v482;
        v485 = (uint64_t)(v481 - (_QWORD)v482) >> 2;
        if (v485 <= v483 + 1)
          v485 = v483 + 1;
        if (v484 >= 0x7FFFFFFFFFFFFFF8)
          v486 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v486 = v485;
        if (v486)
        {
          v487 = (char *)sub_40FC((uint64_t)(v478 + 303), v486);
          v480 = (uint64_t *)v478[302];
          v482 = (uint64_t *)v478[301];
        }
        else
        {
          v487 = 0;
        }
        v495 = (uint64_t *)&v487[8 * v483];
        v496 = &v487[8 * v486];
        *v495 = v479;
        v489 = v495 + 1;
        while (v480 != v482)
        {
          v497 = *--v480;
          *--v495 = v497;
        }
LABEL_675:
        v478[301] = v495;
        v478[302] = v489;
        v478[303] = v496;
        if (v482)
          operator delete(v482);
        goto LABEL_677;
      }
    }
    *v480 = v479;
    v489 = v480 + 1;
LABEL_677:
    v478[302] = v489;
LABEL_678:
    v499 = 1 << *(_DWORD *)(v3 + 48);
    if (v499 == 2)
    {
      v500 = *(_QWORD **)a1[1];
      v501 = ((*(unsigned int *)(a1[2] + 22) | ((unint64_t)*(unsigned __int8 *)(a1[2] + 26) << 32)) >> 16) & 0x3FFFF;
      v502 = (unint64_t *)v500[305];
      v510 = v500[306];
      if ((unint64_t)v502 >= v510)
      {
        v504 = (unint64_t *)v500[304];
        v512 = v502 - v504;
        if ((unint64_t)(v512 + 1) >> 61)
          goto LABEL_776;
        v513 = v510 - (_QWORD)v504;
        v514 = (uint64_t)(v510 - (_QWORD)v504) >> 2;
        if (v514 <= v512 + 1)
          v514 = v512 + 1;
        if (v513 >= 0x7FFFFFFFFFFFFFF8)
          v515 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v515 = v514;
        if (v515)
        {
          v516 = (char *)sub_40FC((uint64_t)(v500 + 306), v515);
          v502 = (unint64_t *)v500[305];
          v504 = (unint64_t *)v500[304];
        }
        else
        {
          v516 = 0;
        }
        v517 = (unint64_t *)&v516[8 * v512];
        v518 = &v516[8 * v515];
        *v517 = v501;
        v511 = v517 + 1;
        while (v502 != v504)
        {
          v520 = *--v502;
          *--v517 = v520;
        }
        goto LABEL_707;
      }
    }
    else
    {
      if (v499 != 1)
        goto LABEL_710;
      v500 = *(_QWORD **)a1[1];
      v501 = ((*(unsigned int *)(a1[2] + 22) | ((unint64_t)*(unsigned __int8 *)(a1[2] + 26) << 32)) >> 16) & 0x3FFFF;
      v502 = (unint64_t *)v500[305];
      v503 = v500[306];
      if ((unint64_t)v502 >= v503)
      {
        v504 = (unint64_t *)v500[304];
        v505 = v502 - v504;
        if ((unint64_t)(v505 + 1) >> 61)
          goto LABEL_776;
        v506 = v503 - (_QWORD)v504;
        v507 = (uint64_t)(v503 - (_QWORD)v504) >> 2;
        if (v507 <= v505 + 1)
          v507 = v505 + 1;
        if (v506 >= 0x7FFFFFFFFFFFFFF8)
          v508 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v508 = v507;
        if (v508)
        {
          v509 = (char *)sub_40FC((uint64_t)(v500 + 306), v508);
          v502 = (unint64_t *)v500[305];
          v504 = (unint64_t *)v500[304];
        }
        else
        {
          v509 = 0;
        }
        v517 = (unint64_t *)&v509[8 * v505];
        v518 = &v509[8 * v508];
        *v517 = v501;
        v511 = v517 + 1;
        while (v502 != v504)
        {
          v519 = *--v502;
          *--v517 = v519;
        }
LABEL_707:
        v500[304] = v517;
        v500[305] = v511;
        v500[306] = v518;
        if (v504)
          operator delete(v504);
        goto LABEL_709;
      }
    }
    *v502 = v501;
    v511 = v502 + 1;
LABEL_709:
    v500[305] = v511;
LABEL_710:
    v521 = 1 << *(_DWORD *)(v3 + 48);
    if (v521 == 2)
    {
      v522 = *(_QWORD **)a1[1];
      v523 = *(_DWORD *)(a1[2] + 68) & 0x3FFFFLL;
      v524 = (uint64_t *)v522[308];
      v532 = v522[309];
      if ((unint64_t)v524 >= v532)
      {
        v526 = (uint64_t *)v522[307];
        v534 = v524 - v526;
        if ((unint64_t)(v534 + 1) >> 61)
          goto LABEL_776;
        v535 = v532 - (_QWORD)v526;
        v536 = (uint64_t)(v532 - (_QWORD)v526) >> 2;
        if (v536 <= v534 + 1)
          v536 = v534 + 1;
        if (v535 >= 0x7FFFFFFFFFFFFFF8)
          v537 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v537 = v536;
        if (v537)
        {
          v538 = (char *)sub_40FC((uint64_t)(v522 + 309), v537);
          v524 = (uint64_t *)v522[308];
          v526 = (uint64_t *)v522[307];
        }
        else
        {
          v538 = 0;
        }
        v539 = (uint64_t *)&v538[8 * v534];
        v540 = &v538[8 * v537];
        *v539 = v523;
        v533 = v539 + 1;
        while (v524 != v526)
        {
          v542 = *--v524;
          *--v539 = v542;
        }
        goto LABEL_739;
      }
    }
    else
    {
      if (v521 != 1)
        goto LABEL_742;
      v522 = *(_QWORD **)a1[1];
      v523 = *(_DWORD *)(a1[2] + 68) & 0x3FFFFLL;
      v524 = (uint64_t *)v522[308];
      v525 = v522[309];
      if ((unint64_t)v524 >= v525)
      {
        v526 = (uint64_t *)v522[307];
        v527 = v524 - v526;
        if ((unint64_t)(v527 + 1) >> 61)
          goto LABEL_776;
        v528 = v525 - (_QWORD)v526;
        v529 = (uint64_t)(v525 - (_QWORD)v526) >> 2;
        if (v529 <= v527 + 1)
          v529 = v527 + 1;
        if (v528 >= 0x7FFFFFFFFFFFFFF8)
          v530 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v530 = v529;
        if (v530)
        {
          v531 = (char *)sub_40FC((uint64_t)(v522 + 309), v530);
          v524 = (uint64_t *)v522[308];
          v526 = (uint64_t *)v522[307];
        }
        else
        {
          v531 = 0;
        }
        v539 = (uint64_t *)&v531[8 * v527];
        v540 = &v531[8 * v530];
        *v539 = v523;
        v533 = v539 + 1;
        while (v524 != v526)
        {
          v541 = *--v524;
          *--v539 = v541;
        }
LABEL_739:
        v522[307] = v539;
        v522[308] = v533;
        v522[309] = v540;
        if (v526)
          operator delete(v526);
        goto LABEL_741;
      }
    }
    *v524 = v523;
    v533 = v524 + 1;
LABEL_741:
    v522[308] = v533;
LABEL_742:
    v543 = 1 << *(_DWORD *)(v3 + 48);
    if (v543 == 2)
    {
      v555 = a1[2];
      v545 = *(_QWORD **)a1[1];
      v546 = *(_DWORD *)(v555 + 28) & 0x3FFFFLL;
      v547 = (uint64_t *)v545[311];
      v556 = v545[312];
      if ((unint64_t)v547 >= v556)
      {
        v549 = (uint64_t *)v545[310];
        v558 = v547 - v549;
        if (!((unint64_t)(v558 + 1) >> 61))
        {
          v559 = v556 - (_QWORD)v549;
          v560 = (uint64_t)(v556 - (_QWORD)v549) >> 2;
          if (v560 <= v558 + 1)
            v560 = v558 + 1;
          if (v559 >= 0x7FFFFFFFFFFFFFF8)
            v561 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v561 = v560;
          if (v561)
          {
            v562 = (char *)sub_40FC((uint64_t)(v545 + 312), v561);
            v547 = (uint64_t *)v545[311];
            v549 = (uint64_t *)v545[310];
          }
          else
          {
            v562 = 0;
          }
          v563 = (uint64_t *)&v562[8 * v558];
          v564 = &v562[8 * v561];
          *v563 = v546;
          v557 = v563 + 1;
          while (v547 != v549)
          {
            v566 = *--v547;
            *--v563 = v566;
          }
          goto LABEL_771;
        }
LABEL_776:
        sub_4074();
      }
    }
    else
    {
      if (v543 != 1)
      {
LABEL_774:
        *a2 = 1;
        return;
      }
      v544 = a1[2];
      v545 = *(_QWORD **)a1[1];
      v546 = *(_DWORD *)(v544 + 28) & 0x3FFFFLL;
      v547 = (uint64_t *)v545[311];
      v548 = v545[312];
      if ((unint64_t)v547 >= v548)
      {
        v549 = (uint64_t *)v545[310];
        v550 = v547 - v549;
        if (!((unint64_t)(v550 + 1) >> 61))
        {
          v551 = v548 - (_QWORD)v549;
          v552 = (uint64_t)(v548 - (_QWORD)v549) >> 2;
          if (v552 <= v550 + 1)
            v552 = v550 + 1;
          if (v551 >= 0x7FFFFFFFFFFFFFF8)
            v553 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v553 = v552;
          if (v553)
          {
            v554 = (char *)sub_40FC((uint64_t)(v545 + 312), v553);
            v547 = (uint64_t *)v545[311];
            v549 = (uint64_t *)v545[310];
          }
          else
          {
            v554 = 0;
          }
          v563 = (uint64_t *)&v554[8 * v550];
          v564 = &v554[8 * v553];
          *v563 = v546;
          v557 = v563 + 1;
          while (v547 != v549)
          {
            v565 = *--v547;
            *--v563 = v565;
          }
LABEL_771:
          v545[310] = v563;
          v545[311] = v557;
          v545[312] = v564;
          if (v549)
            operator delete(v549);
          goto LABEL_773;
        }
        goto LABEL_776;
      }
    }
    *v547 = v546;
    v557 = v547 + 1;
LABEL_773:
    v545[311] = v557;
    goto LABEL_774;
  }
  v17 = 1 << *(_DWORD *)(v3 + 48);
  if (v17 == 2 || v17 == 1)
  {
    v19 = (_QWORD *)a1[1];
    v18 = a1[2];
    v20 = (_QWORD *)*v19;
    *(_QWORD *)(v20[242] - 8) += *(unsigned __int16 *)(v18 + 60);
    *(_QWORD *)(v20[245] - 8) += *(unsigned __int16 *)(v18 + 22);
    *(_QWORD *)(v20[248] - 8) += *(_DWORD *)(v18 + 88) & 0x7FFF;
    *(_QWORD *)(v20[251] - 8) += *(_QWORD *)(v18 + 56) >> 17;
    *(_QWORD *)(v20[254] - 8) += *(unsigned __int16 *)(v18 + 80);
    *(_QWORD *)(v20[257] - 8) += *(unsigned __int16 *)(v18 + 40);
    *(_QWORD *)(v20[260] - 8) += *(_DWORD *)(v18 + 48) & 0x1FFFF;
    *(_QWORD *)(v20[263] - 8) += *(_QWORD *)(v18 + 56) & 0x1FFFFLL;
    *(_QWORD *)(v20[266] - 8) += *(_DWORD *)(v18 + 72) & 0x1FFFF;
    *(_QWORD *)(v20[269] - 8) += *(_DWORD *)(v18 + 32) & 0x1FFFF;
    v21 = a1[2];
    v22 = *(_QWORD **)a1[1];
    *(_QWORD *)(v22[272] - 8) += *(unsigned __int16 *)(v21 + 76);
    *(_QWORD *)(v22[275] - 8) += *(unsigned __int16 *)(v21 + 36);
    *(_QWORD *)(v22[278] - 8) += *(unsigned __int16 *)(v21 + 84);
    *(_QWORD *)(v22[281] - 8) += (*(unsigned __int16 *)(v21 + 44) | (*(unsigned __int8 *)(v21 + 46) << 16)) & 0x1FFFF;
    *(_QWORD *)(v22[284] - 8) += *(unsigned __int16 *)(v21 + 86);
    *(_QWORD *)(v22[287] - 8) += *(_DWORD *)(v21 + 52) & 0x1FFFF;
    *(_QWORD *)(v22[290] - 8) += *(unsigned __int16 *)(v21 + 82);
    *(_QWORD *)(v22[293] - 8) += *(unsigned __int16 *)(v21 + 42);
    *(_QWORD *)(v22[296] - 8) += *(unsigned __int16 *)(v21 + 78);
    *(_QWORD *)(v22[299] - 8) += *(unsigned __int16 *)(v21 + 38);
    v23 = a1[2];
    v24 = (_QWORD *)*v19;
    *(_QWORD *)(v24[302] - 8) += *(_DWORD *)(v23 + 64) & 0x3FFFF;
    *(_QWORD *)(v24[305] - 8) += ((*(unsigned int *)(v23 + 22) | ((unint64_t)*(unsigned __int8 *)(v23 + 26) << 32)) >> 16) & 0x3FFFF;
    *(_QWORD *)(v24[308] - 8) += *(_DWORD *)(v23 + 68) & 0x3FFFF;
    *(_QWORD *)(v24[311] - 8) += *(_DWORD *)(v23 + 28) & 0x3FFFF;
  }
}

void sub_C8014(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t *v68;
  char *v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  unint64_t *v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t *v126;
  char *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t *v140;
  char *v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  char *v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  _QWORD *v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  unint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  char *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  _QWORD *v190;
  uint64_t v191;
  char *v192;
  unint64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  _QWORD *v212;
  uint64_t v213;
  char *v214;
  unint64_t v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  unint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  _QWORD *v234;
  uint64_t v235;
  char *v236;
  unint64_t v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  unint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t *v258;
  unint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  unint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  char *v272;
  uint64_t *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t *v280;
  unint64_t v281;
  uint64_t *v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  char *v287;
  unint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  char *v294;
  uint64_t *v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t *v302;
  unint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  char *v309;
  unint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  char *v316;
  uint64_t *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  _QWORD *v322;
  uint64_t v323;
  uint64_t *v324;
  unint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  char *v331;
  unint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  char *v338;
  uint64_t *v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t *v346;
  unint64_t v347;
  uint64_t *v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  char *v353;
  unint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  char *v360;
  uint64_t *v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t *v368;
  unint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  char *v375;
  unint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  char *v382;
  uint64_t *v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  uint64_t *v391;
  unint64_t v392;
  uint64_t *v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  char *v398;
  uint64_t v399;
  unint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  char *v406;
  uint64_t *v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;

  v3 = *a1;
  if (*a2 == 1)
  {
    v17 = *(_DWORD *)(v3 + 48);
    if (v17 <= 1)
    {
      v18 = *(_QWORD *)(*(_QWORD *)a1[1] + 1480);
      *(_QWORD *)(v18 - 8) += *(unsigned __int16 *)(a1[2] + 64);
    }
    if (v17)
    {
      v19 = 1 << v17;
      if (1 << v17 == 4)
      {
        v32 = (_DWORD *)a1[2];
        v33 = *(_QWORD **)a1[1];
        *(_QWORD *)(v33[221] - 8) += v32[10] & 0x3FFFF;
        *(_QWORD *)(v33[224] - 8) += v32[9] & 0x3FFFF;
        *(_QWORD *)(v33[227] - 8) += v32[8] & 0x3FFFF;
        v34 = v32[7] & 0x3FFFF;
        v35 = v33[230];
LABEL_38:
        *(_QWORD *)(v35 - 8) += v34;
        return;
      }
      if (v19 == 2)
      {
        v37 = (_QWORD *)a1[1];
        v36 = a1[2];
        v38 = (_QWORD *)*v37;
        *(_QWORD *)(v38[194] - 8) += *(_DWORD *)(v36 + 24) & 0x3FFFF;
        *(_QWORD *)(v38[197] - 8) += ((unint64_t)*(unsigned int *)(v36 + 20) >> 1) & 0x3FFFF;
        *(_QWORD *)(v38[206] - 8) += *(unsigned __int16 *)(v36 + 66);
        *(_QWORD *)(v38[209] - 8) += *(_WORD *)(v36 + 48) & 0x7FFF;
        *(_QWORD *)(v38[212] - 8) += *(_WORD *)(v36 + 44) & 0x7FFF;
        *(_QWORD *)(v38[215] - 8) += *(_WORD *)(v36 + 50) & 0x7FFF;
        *(_QWORD *)(v38[218] - 8) += *(_WORD *)(v36 + 46) & 0x7FFF;
        *(_QWORD *)(v38[221] - 8) += *(_DWORD *)(v36 + 40) & 0x3FFFF;
        *(_QWORD *)(v38[224] - 8) += *(_DWORD *)(v36 + 36) & 0x3FFFF;
        *(_QWORD *)(v38[227] - 8) += *(_DWORD *)(v36 + 32) & 0x3FFFF;
        v20 = a1[2];
        v22 = *(_DWORD *)(v20 + 28) & 0x3FFFF;
        v21 = (_QWORD *)*v37;
        v23 = v21[230];
LABEL_37:
        *(_QWORD *)(v23 - 8) += v22;
        *(_QWORD *)(v21[233] - 8) += *(_DWORD *)(v20 + 52) & 0xFFFFF;
        *(_QWORD *)(v21[236] - 8) += *(_DWORD *)(v20 + 60) & 0x3FFFF;
        v34 = *(_DWORD *)(v20 + 56) & 0xFFFFF;
        v35 = v21[239];
        goto LABEL_38;
      }
      if (v19 != 1)
        return;
      v20 = a1[2];
      v21 = *(_QWORD **)a1[1];
    }
    else
    {
      v20 = a1[2];
      v21 = *(_QWORD **)a1[1];
      *(_QWORD *)(v21[188] - 8) += *(_DWORD *)(v20 + 32) & 0x3FFFF;
      *(_QWORD *)(v21[191] - 8) += *(_DWORD *)(v20 + 28) & 0x3FFFF;
    }
    *(_QWORD *)(v21[194] - 8) += *(_DWORD *)(v20 + 24) & 0x3FFFF;
    *(_QWORD *)(v21[197] - 8) += ((unint64_t)*(unsigned int *)(v20 + 20) >> 1) & 0x3FFFF;
    if (!v17)
    {
      *(_QWORD *)(v21[200] - 8) += *(_DWORD *)(v20 + 40) & 0x3FFFF;
      *(_QWORD *)(v21[203] - 8) += *(_DWORD *)(v20 + 36) & 0x3FFFF;
    }
    *(_QWORD *)(v21[206] - 8) += *(unsigned __int16 *)(v20 + 66);
    *(_QWORD *)(v21[209] - 8) += *(_WORD *)(v20 + 48) & 0x7FFF;
    *(_QWORD *)(v21[212] - 8) += *(_WORD *)(v20 + 44) & 0x7FFF;
    *(_QWORD *)(v21[215] - 8) += *(_WORD *)(v20 + 50) & 0x7FFF;
    v22 = *(_WORD *)(v20 + 46) & 0x7FFF;
    v23 = v21[218];
    goto LABEL_37;
  }
  if (*a2)
    return;
  v5 = *(_DWORD *)(v3 + 48);
  if (1 << v5 == 2)
  {
    v24 = a1[1];
    v7 = *(_QWORD **)v24;
    v8 = *(unsigned __int16 *)(a1[2] + 64);
    v9 = *(char **)(*(_QWORD *)v24 + 1480);
    v25 = *(_QWORD *)(*(_QWORD *)v24 + 1488);
    if ((unint64_t)v9 >= v25)
    {
      v11 = (char *)v7[184];
      v27 = (v9 - v11) >> 3;
      if ((unint64_t)(v27 + 1) >> 61)
        goto LABEL_570;
      v28 = v25 - (_QWORD)v11;
      v29 = (uint64_t)(v25 - (_QWORD)v11) >> 2;
      if (v29 <= v27 + 1)
        v29 = v27 + 1;
      if (v28 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
      {
        v31 = (char *)sub_40FC((uint64_t)(v7 + 186), v30);
        v9 = (char *)v7[185];
        v11 = (char *)v7[184];
      }
      else
      {
        v31 = 0;
      }
      v39 = &v31[8 * v27];
      v40 = &v31[8 * v30];
      *(_QWORD *)v39 = v8;
      v26 = v39 + 8;
      while (v9 != v11)
      {
        v42 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v39 - 1) = v42;
        v39 -= 8;
      }
      goto LABEL_47;
    }
LABEL_26:
    *(_QWORD *)v9 = v8;
    v26 = v9 + 8;
LABEL_49:
    v7[185] = v26;
    v5 = *(_DWORD *)(v3 + 48);
    goto LABEL_50;
  }
  if (1 << v5 == 1)
  {
    v6 = a1[1];
    v7 = *(_QWORD **)v6;
    v8 = *(unsigned __int16 *)(a1[2] + 64);
    v9 = *(char **)(*(_QWORD *)v6 + 1480);
    v10 = *(_QWORD *)(*(_QWORD *)v6 + 1488);
    if ((unint64_t)v9 >= v10)
    {
      v11 = (char *)v7[184];
      v12 = (v9 - v11) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        goto LABEL_570;
      v13 = v10 - (_QWORD)v11;
      v14 = (uint64_t)(v10 - (_QWORD)v11) >> 2;
      if (v14 <= v12 + 1)
        v14 = v12 + 1;
      if (v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        v16 = (char *)sub_40FC((uint64_t)(v7 + 186), v15);
        v9 = (char *)v7[185];
        v11 = (char *)v7[184];
      }
      else
      {
        v16 = 0;
      }
      v39 = &v16[8 * v12];
      v40 = &v16[8 * v15];
      *(_QWORD *)v39 = v8;
      v26 = v39 + 8;
      while (v9 != v11)
      {
        v41 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v39 - 1) = v41;
        v39 -= 8;
      }
LABEL_47:
      v7[184] = v39;
      v7[185] = v26;
      v7[186] = v40;
      if (v11)
        operator delete(v11);
      goto LABEL_49;
    }
    goto LABEL_26;
  }
LABEL_50:
  if (!v5)
  {
    v43 = *(_QWORD **)a1[1];
    v44 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
    v45 = (uint64_t *)v43[188];
    v46 = v43[189];
    if ((unint64_t)v45 >= v46)
    {
      v48 = (uint64_t *)v43[187];
      v49 = v45 - v48;
      if ((unint64_t)(v49 + 1) >> 61)
        goto LABEL_570;
      v50 = v46 - (_QWORD)v48;
      v51 = (uint64_t)(v46 - (_QWORD)v48) >> 2;
      if (v51 <= v49 + 1)
        v51 = v49 + 1;
      if (v50 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      if (v52)
      {
        v53 = (char *)sub_40FC((uint64_t)(v43 + 189), v52);
        v45 = (uint64_t *)v43[188];
        v48 = (uint64_t *)v43[187];
      }
      else
      {
        v53 = 0;
      }
      v54 = (uint64_t *)&v53[8 * v49];
      v55 = &v53[8 * v52];
      *v54 = v44;
      v47 = v54 + 1;
      while (v45 != v48)
      {
        v56 = *--v45;
        *--v54 = v56;
      }
      v43[187] = v54;
      v43[188] = v47;
      v43[189] = v55;
      if (v48)
        operator delete(v48);
    }
    else
    {
      *v45 = v44;
      v47 = v45 + 1;
    }
    v43[188] = v47;
    v5 = *(_DWORD *)(v3 + 48);
    if (!v5)
    {
      v57 = *(_QWORD **)a1[1];
      v58 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      v59 = (uint64_t *)v57[191];
      v60 = v57[192];
      if ((unint64_t)v59 >= v60)
      {
        v62 = (uint64_t *)v57[190];
        v63 = v59 - v62;
        if ((unint64_t)(v63 + 1) >> 61)
          goto LABEL_570;
        v64 = v60 - (_QWORD)v62;
        v65 = (uint64_t)(v60 - (_QWORD)v62) >> 2;
        if (v65 <= v63 + 1)
          v65 = v63 + 1;
        if (v64 >= 0x7FFFFFFFFFFFFFF8)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v65;
        if (v66)
        {
          v67 = (char *)sub_40FC((uint64_t)(v57 + 192), v66);
          v59 = (uint64_t *)v57[191];
          v62 = (uint64_t *)v57[190];
        }
        else
        {
          v67 = 0;
        }
        v68 = (uint64_t *)&v67[8 * v63];
        v69 = &v67[8 * v66];
        *v68 = v58;
        v61 = v68 + 1;
        while (v59 != v62)
        {
          v70 = *--v59;
          *--v68 = v70;
        }
        v57[190] = v68;
        v57[191] = v61;
        v57[192] = v69;
        if (v62)
          operator delete(v62);
      }
      else
      {
        *v59 = v58;
        v61 = v59 + 1;
      }
      v57[191] = v61;
      v5 = *(_DWORD *)(v3 + 48);
    }
  }
  v71 = 1 << v5;
  if (v71 == 2)
  {
    v72 = *(_QWORD **)a1[1];
    v73 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
    v74 = (uint64_t *)v72[194];
    v82 = v72[195];
    if ((unint64_t)v74 >= v82)
    {
      v76 = (uint64_t *)v72[193];
      v84 = v74 - v76;
      if ((unint64_t)(v84 + 1) >> 61)
        goto LABEL_570;
      v85 = v82 - (_QWORD)v76;
      v86 = (uint64_t)(v82 - (_QWORD)v76) >> 2;
      if (v86 <= v84 + 1)
        v86 = v84 + 1;
      if (v85 >= 0x7FFFFFFFFFFFFFF8)
        v87 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v87 = v86;
      if (v87)
      {
        v88 = (char *)sub_40FC((uint64_t)(v72 + 195), v87);
        v74 = (uint64_t *)v72[194];
        v76 = (uint64_t *)v72[193];
      }
      else
      {
        v88 = 0;
      }
      v89 = (uint64_t *)&v88[8 * v84];
      v90 = &v88[8 * v87];
      *v89 = v73;
      v83 = v89 + 1;
      while (v74 != v76)
      {
        v92 = *--v74;
        *--v89 = v92;
      }
      goto LABEL_114;
    }
  }
  else
  {
    if (v71 != 1)
      goto LABEL_117;
    v72 = *(_QWORD **)a1[1];
    v73 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
    v74 = (uint64_t *)v72[194];
    v75 = v72[195];
    if ((unint64_t)v74 >= v75)
    {
      v76 = (uint64_t *)v72[193];
      v77 = v74 - v76;
      if ((unint64_t)(v77 + 1) >> 61)
        goto LABEL_570;
      v78 = v75 - (_QWORD)v76;
      v79 = (uint64_t)(v75 - (_QWORD)v76) >> 2;
      if (v79 <= v77 + 1)
        v79 = v77 + 1;
      if (v78 >= 0x7FFFFFFFFFFFFFF8)
        v80 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v80 = v79;
      if (v80)
      {
        v81 = (char *)sub_40FC((uint64_t)(v72 + 195), v80);
        v74 = (uint64_t *)v72[194];
        v76 = (uint64_t *)v72[193];
      }
      else
      {
        v81 = 0;
      }
      v89 = (uint64_t *)&v81[8 * v77];
      v90 = &v81[8 * v80];
      *v89 = v73;
      v83 = v89 + 1;
      while (v74 != v76)
      {
        v91 = *--v74;
        *--v89 = v91;
      }
LABEL_114:
      v72[193] = v89;
      v72[194] = v83;
      v72[195] = v90;
      if (v76)
        operator delete(v76);
      goto LABEL_116;
    }
  }
  *v74 = v73;
  v83 = v74 + 1;
LABEL_116:
  v72[194] = v83;
LABEL_117:
  v93 = *(_DWORD *)(v3 + 48);
  if (1 << v93 == 2)
  {
    v94 = *(_QWORD **)a1[1];
    v95 = ((unint64_t)*(unsigned int *)(a1[2] + 20) >> 1) & 0x3FFFF;
    v96 = (unint64_t *)v94[197];
    v104 = v94[198];
    if ((unint64_t)v96 >= v104)
    {
      v98 = (unint64_t *)v94[196];
      v106 = v96 - v98;
      if ((unint64_t)(v106 + 1) >> 61)
        goto LABEL_570;
      v107 = v104 - (_QWORD)v98;
      v108 = (uint64_t)(v104 - (_QWORD)v98) >> 2;
      if (v108 <= v106 + 1)
        v108 = v106 + 1;
      if (v107 >= 0x7FFFFFFFFFFFFFF8)
        v109 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v109 = v108;
      if (v109)
      {
        v110 = (char *)sub_40FC((uint64_t)(v94 + 198), v109);
        v96 = (unint64_t *)v94[197];
        v98 = (unint64_t *)v94[196];
      }
      else
      {
        v110 = 0;
      }
      v111 = (unint64_t *)&v110[8 * v106];
      v112 = &v110[8 * v109];
      *v111 = v95;
      v105 = v111 + 1;
      while (v96 != v98)
      {
        v114 = *--v96;
        *--v111 = v114;
      }
      goto LABEL_146;
    }
LABEL_129:
    *v96 = v95;
    v105 = v96 + 1;
LABEL_148:
    v94[197] = v105;
    v93 = *(_DWORD *)(v3 + 48);
    goto LABEL_149;
  }
  if (1 << v93 == 1)
  {
    v94 = *(_QWORD **)a1[1];
    v95 = ((unint64_t)*(unsigned int *)(a1[2] + 20) >> 1) & 0x3FFFF;
    v96 = (unint64_t *)v94[197];
    v97 = v94[198];
    if ((unint64_t)v96 >= v97)
    {
      v98 = (unint64_t *)v94[196];
      v99 = v96 - v98;
      if ((unint64_t)(v99 + 1) >> 61)
        goto LABEL_570;
      v100 = v97 - (_QWORD)v98;
      v101 = (uint64_t)(v97 - (_QWORD)v98) >> 2;
      if (v101 <= v99 + 1)
        v101 = v99 + 1;
      if (v100 >= 0x7FFFFFFFFFFFFFF8)
        v102 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v102 = v101;
      if (v102)
      {
        v103 = (char *)sub_40FC((uint64_t)(v94 + 198), v102);
        v96 = (unint64_t *)v94[197];
        v98 = (unint64_t *)v94[196];
      }
      else
      {
        v103 = 0;
      }
      v111 = (unint64_t *)&v103[8 * v99];
      v112 = &v103[8 * v102];
      *v111 = v95;
      v105 = v111 + 1;
      while (v96 != v98)
      {
        v113 = *--v96;
        *--v111 = v113;
      }
LABEL_146:
      v94[196] = v111;
      v94[197] = v105;
      v94[198] = v112;
      if (v98)
        operator delete(v98);
      goto LABEL_148;
    }
    goto LABEL_129;
  }
LABEL_149:
  if (!v93)
  {
    v115 = *(_QWORD **)a1[1];
    v116 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
    v117 = (uint64_t *)v115[200];
    v118 = v115[201];
    if ((unint64_t)v117 >= v118)
    {
      v120 = (uint64_t *)v115[199];
      v121 = v117 - v120;
      if ((unint64_t)(v121 + 1) >> 61)
        goto LABEL_570;
      v122 = v118 - (_QWORD)v120;
      v123 = (uint64_t)(v118 - (_QWORD)v120) >> 2;
      if (v123 <= v121 + 1)
        v123 = v121 + 1;
      if (v122 >= 0x7FFFFFFFFFFFFFF8)
        v124 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v124 = v123;
      if (v124)
      {
        v125 = (char *)sub_40FC((uint64_t)(v115 + 201), v124);
        v117 = (uint64_t *)v115[200];
        v120 = (uint64_t *)v115[199];
      }
      else
      {
        v125 = 0;
      }
      v126 = (uint64_t *)&v125[8 * v121];
      v127 = &v125[8 * v124];
      *v126 = v116;
      v119 = v126 + 1;
      while (v117 != v120)
      {
        v128 = *--v117;
        *--v126 = v128;
      }
      v115[199] = v126;
      v115[200] = v119;
      v115[201] = v127;
      if (v120)
        operator delete(v120);
    }
    else
    {
      *v117 = v116;
      v119 = v117 + 1;
    }
    v115[200] = v119;
    v93 = *(_DWORD *)(v3 + 48);
    if (!v93)
    {
      v129 = *(_QWORD **)a1[1];
      v130 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      v131 = (uint64_t *)v129[203];
      v132 = v129[204];
      if ((unint64_t)v131 >= v132)
      {
        v134 = (uint64_t *)v129[202];
        v135 = v131 - v134;
        if ((unint64_t)(v135 + 1) >> 61)
          goto LABEL_570;
        v136 = v132 - (_QWORD)v134;
        v137 = (uint64_t)(v132 - (_QWORD)v134) >> 2;
        if (v137 <= v135 + 1)
          v137 = v135 + 1;
        if (v136 >= 0x7FFFFFFFFFFFFFF8)
          v138 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v138 = v137;
        if (v138)
        {
          v139 = (char *)sub_40FC((uint64_t)(v129 + 204), v138);
          v131 = (uint64_t *)v129[203];
          v134 = (uint64_t *)v129[202];
        }
        else
        {
          v139 = 0;
        }
        v140 = (uint64_t *)&v139[8 * v135];
        v141 = &v139[8 * v138];
        *v140 = v130;
        v133 = v140 + 1;
        while (v131 != v134)
        {
          v142 = *--v131;
          *--v140 = v142;
        }
        v129[202] = v140;
        v129[203] = v133;
        v129[204] = v141;
        if (v134)
          operator delete(v134);
      }
      else
      {
        *v131 = v130;
        v133 = v131 + 1;
      }
      v129[203] = v133;
      v93 = *(_DWORD *)(v3 + 48);
    }
  }
  v143 = 1 << v93;
  if (v143 == 2)
  {
    v155 = a1[1];
    v145 = *(_QWORD **)v155;
    v146 = *(unsigned __int16 *)(a1[2] + 66);
    v147 = *(char **)(*(_QWORD *)v155 + 1648);
    v156 = *(_QWORD *)(*(_QWORD *)v155 + 1656);
    if ((unint64_t)v147 >= v156)
    {
      v149 = (char *)v145[205];
      v158 = (v147 - v149) >> 3;
      if ((unint64_t)(v158 + 1) >> 61)
        goto LABEL_570;
      v159 = v156 - (_QWORD)v149;
      v160 = (uint64_t)(v156 - (_QWORD)v149) >> 2;
      if (v160 <= v158 + 1)
        v160 = v158 + 1;
      if (v159 >= 0x7FFFFFFFFFFFFFF8)
        v161 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v161 = v160;
      if (v161)
      {
        v162 = (char *)sub_40FC((uint64_t)(v145 + 207), v161);
        v147 = (char *)v145[206];
        v149 = (char *)v145[205];
      }
      else
      {
        v162 = 0;
      }
      v163 = &v162[8 * v158];
      v164 = &v162[8 * v161];
      *(_QWORD *)v163 = v146;
      v157 = v163 + 8;
      while (v147 != v149)
      {
        v166 = *((_QWORD *)v147 - 1);
        v147 -= 8;
        *((_QWORD *)v163 - 1) = v166;
        v163 -= 8;
      }
      goto LABEL_213;
    }
  }
  else
  {
    if (v143 != 1)
      goto LABEL_216;
    v144 = a1[1];
    v145 = *(_QWORD **)v144;
    v146 = *(unsigned __int16 *)(a1[2] + 66);
    v147 = *(char **)(*(_QWORD *)v144 + 1648);
    v148 = *(_QWORD *)(*(_QWORD *)v144 + 1656);
    if ((unint64_t)v147 >= v148)
    {
      v149 = (char *)v145[205];
      v150 = (v147 - v149) >> 3;
      if ((unint64_t)(v150 + 1) >> 61)
        goto LABEL_570;
      v151 = v148 - (_QWORD)v149;
      v152 = (uint64_t)(v148 - (_QWORD)v149) >> 2;
      if (v152 <= v150 + 1)
        v152 = v150 + 1;
      if (v151 >= 0x7FFFFFFFFFFFFFF8)
        v153 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v153 = v152;
      if (v153)
      {
        v154 = (char *)sub_40FC((uint64_t)(v145 + 207), v153);
        v147 = (char *)v145[206];
        v149 = (char *)v145[205];
      }
      else
      {
        v154 = 0;
      }
      v163 = &v154[8 * v150];
      v164 = &v154[8 * v153];
      *(_QWORD *)v163 = v146;
      v157 = v163 + 8;
      while (v147 != v149)
      {
        v165 = *((_QWORD *)v147 - 1);
        v147 -= 8;
        *((_QWORD *)v163 - 1) = v165;
        v163 -= 8;
      }
LABEL_213:
      v145[205] = v163;
      v145[206] = v157;
      v145[207] = v164;
      if (v149)
        operator delete(v149);
      goto LABEL_215;
    }
  }
  *(_QWORD *)v147 = v146;
  v157 = v147 + 8;
LABEL_215:
  v145[206] = v157;
LABEL_216:
  v167 = 1 << *(_DWORD *)(v3 + 48);
  if (v167 == 2)
  {
    v168 = *(_QWORD **)a1[1];
    v169 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
    v170 = (char *)v168[209];
    v178 = v168[210];
    if ((unint64_t)v170 >= v178)
    {
      v172 = (char *)v168[208];
      v180 = (v170 - v172) >> 3;
      if ((unint64_t)(v180 + 1) >> 61)
        goto LABEL_570;
      v181 = v178 - (_QWORD)v172;
      v182 = (uint64_t)(v178 - (_QWORD)v172) >> 2;
      if (v182 <= v180 + 1)
        v182 = v180 + 1;
      if (v181 >= 0x7FFFFFFFFFFFFFF8)
        v183 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v183 = v182;
      if (v183)
      {
        v184 = (char *)sub_40FC((uint64_t)(v168 + 210), v183);
        v170 = (char *)v168[209];
        v172 = (char *)v168[208];
      }
      else
      {
        v184 = 0;
      }
      v185 = &v184[8 * v180];
      v186 = &v184[8 * v183];
      *(_QWORD *)v185 = v169;
      v179 = v185 + 8;
      while (v170 != v172)
      {
        v188 = *((_QWORD *)v170 - 1);
        v170 -= 8;
        *((_QWORD *)v185 - 1) = v188;
        v185 -= 8;
      }
      goto LABEL_245;
    }
  }
  else
  {
    if (v167 != 1)
      goto LABEL_248;
    v168 = *(_QWORD **)a1[1];
    v169 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
    v170 = (char *)v168[209];
    v171 = v168[210];
    if ((unint64_t)v170 >= v171)
    {
      v172 = (char *)v168[208];
      v173 = (v170 - v172) >> 3;
      if ((unint64_t)(v173 + 1) >> 61)
        goto LABEL_570;
      v174 = v171 - (_QWORD)v172;
      v175 = (uint64_t)(v171 - (_QWORD)v172) >> 2;
      if (v175 <= v173 + 1)
        v175 = v173 + 1;
      if (v174 >= 0x7FFFFFFFFFFFFFF8)
        v176 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v176 = v175;
      if (v176)
      {
        v177 = (char *)sub_40FC((uint64_t)(v168 + 210), v176);
        v170 = (char *)v168[209];
        v172 = (char *)v168[208];
      }
      else
      {
        v177 = 0;
      }
      v185 = &v177[8 * v173];
      v186 = &v177[8 * v176];
      *(_QWORD *)v185 = v169;
      v179 = v185 + 8;
      while (v170 != v172)
      {
        v187 = *((_QWORD *)v170 - 1);
        v170 -= 8;
        *((_QWORD *)v185 - 1) = v187;
        v185 -= 8;
      }
LABEL_245:
      v168[208] = v185;
      v168[209] = v179;
      v168[210] = v186;
      if (v172)
        operator delete(v172);
      goto LABEL_247;
    }
  }
  *(_QWORD *)v170 = v169;
  v179 = v170 + 8;
LABEL_247:
  v168[209] = v179;
LABEL_248:
  v189 = 1 << *(_DWORD *)(v3 + 48);
  if (v189 == 2)
  {
    v190 = *(_QWORD **)a1[1];
    v191 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
    v192 = (char *)v190[212];
    v200 = v190[213];
    if ((unint64_t)v192 >= v200)
    {
      v194 = (char *)v190[211];
      v202 = (v192 - v194) >> 3;
      if ((unint64_t)(v202 + 1) >> 61)
        goto LABEL_570;
      v203 = v200 - (_QWORD)v194;
      v204 = (uint64_t)(v200 - (_QWORD)v194) >> 2;
      if (v204 <= v202 + 1)
        v204 = v202 + 1;
      if (v203 >= 0x7FFFFFFFFFFFFFF8)
        v205 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v205 = v204;
      if (v205)
      {
        v206 = (char *)sub_40FC((uint64_t)(v190 + 213), v205);
        v192 = (char *)v190[212];
        v194 = (char *)v190[211];
      }
      else
      {
        v206 = 0;
      }
      v207 = &v206[8 * v202];
      v208 = &v206[8 * v205];
      *(_QWORD *)v207 = v191;
      v201 = v207 + 8;
      while (v192 != v194)
      {
        v210 = *((_QWORD *)v192 - 1);
        v192 -= 8;
        *((_QWORD *)v207 - 1) = v210;
        v207 -= 8;
      }
      goto LABEL_277;
    }
  }
  else
  {
    if (v189 != 1)
      goto LABEL_280;
    v190 = *(_QWORD **)a1[1];
    v191 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
    v192 = (char *)v190[212];
    v193 = v190[213];
    if ((unint64_t)v192 >= v193)
    {
      v194 = (char *)v190[211];
      v195 = (v192 - v194) >> 3;
      if ((unint64_t)(v195 + 1) >> 61)
        goto LABEL_570;
      v196 = v193 - (_QWORD)v194;
      v197 = (uint64_t)(v193 - (_QWORD)v194) >> 2;
      if (v197 <= v195 + 1)
        v197 = v195 + 1;
      if (v196 >= 0x7FFFFFFFFFFFFFF8)
        v198 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v198 = v197;
      if (v198)
      {
        v199 = (char *)sub_40FC((uint64_t)(v190 + 213), v198);
        v192 = (char *)v190[212];
        v194 = (char *)v190[211];
      }
      else
      {
        v199 = 0;
      }
      v207 = &v199[8 * v195];
      v208 = &v199[8 * v198];
      *(_QWORD *)v207 = v191;
      v201 = v207 + 8;
      while (v192 != v194)
      {
        v209 = *((_QWORD *)v192 - 1);
        v192 -= 8;
        *((_QWORD *)v207 - 1) = v209;
        v207 -= 8;
      }
LABEL_277:
      v190[211] = v207;
      v190[212] = v201;
      v190[213] = v208;
      if (v194)
        operator delete(v194);
      goto LABEL_279;
    }
  }
  *(_QWORD *)v192 = v191;
  v201 = v192 + 8;
LABEL_279:
  v190[212] = v201;
LABEL_280:
  v211 = 1 << *(_DWORD *)(v3 + 48);
  if (v211 == 2)
  {
    v212 = *(_QWORD **)a1[1];
    v213 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
    v214 = (char *)v212[215];
    v222 = v212[216];
    if ((unint64_t)v214 >= v222)
    {
      v216 = (char *)v212[214];
      v224 = (v214 - v216) >> 3;
      if ((unint64_t)(v224 + 1) >> 61)
        goto LABEL_570;
      v225 = v222 - (_QWORD)v216;
      v226 = (uint64_t)(v222 - (_QWORD)v216) >> 2;
      if (v226 <= v224 + 1)
        v226 = v224 + 1;
      if (v225 >= 0x7FFFFFFFFFFFFFF8)
        v227 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v227 = v226;
      if (v227)
      {
        v228 = (char *)sub_40FC((uint64_t)(v212 + 216), v227);
        v214 = (char *)v212[215];
        v216 = (char *)v212[214];
      }
      else
      {
        v228 = 0;
      }
      v229 = &v228[8 * v224];
      v230 = &v228[8 * v227];
      *(_QWORD *)v229 = v213;
      v223 = v229 + 8;
      while (v214 != v216)
      {
        v232 = *((_QWORD *)v214 - 1);
        v214 -= 8;
        *((_QWORD *)v229 - 1) = v232;
        v229 -= 8;
      }
      goto LABEL_309;
    }
  }
  else
  {
    if (v211 != 1)
      goto LABEL_312;
    v212 = *(_QWORD **)a1[1];
    v213 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
    v214 = (char *)v212[215];
    v215 = v212[216];
    if ((unint64_t)v214 >= v215)
    {
      v216 = (char *)v212[214];
      v217 = (v214 - v216) >> 3;
      if ((unint64_t)(v217 + 1) >> 61)
        goto LABEL_570;
      v218 = v215 - (_QWORD)v216;
      v219 = (uint64_t)(v215 - (_QWORD)v216) >> 2;
      if (v219 <= v217 + 1)
        v219 = v217 + 1;
      if (v218 >= 0x7FFFFFFFFFFFFFF8)
        v220 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v220 = v219;
      if (v220)
      {
        v221 = (char *)sub_40FC((uint64_t)(v212 + 216), v220);
        v214 = (char *)v212[215];
        v216 = (char *)v212[214];
      }
      else
      {
        v221 = 0;
      }
      v229 = &v221[8 * v217];
      v230 = &v221[8 * v220];
      *(_QWORD *)v229 = v213;
      v223 = v229 + 8;
      while (v214 != v216)
      {
        v231 = *((_QWORD *)v214 - 1);
        v214 -= 8;
        *((_QWORD *)v229 - 1) = v231;
        v229 -= 8;
      }
LABEL_309:
      v212[214] = v229;
      v212[215] = v223;
      v212[216] = v230;
      if (v216)
        operator delete(v216);
      goto LABEL_311;
    }
  }
  *(_QWORD *)v214 = v213;
  v223 = v214 + 8;
LABEL_311:
  v212[215] = v223;
LABEL_312:
  v233 = 1 << *(_DWORD *)(v3 + 48);
  if (v233 == 2)
  {
    v234 = *(_QWORD **)a1[1];
    v235 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
    v236 = (char *)v234[218];
    v244 = v234[219];
    if ((unint64_t)v236 >= v244)
    {
      v238 = (char *)v234[217];
      v246 = (v236 - v238) >> 3;
      if ((unint64_t)(v246 + 1) >> 61)
        goto LABEL_570;
      v247 = v244 - (_QWORD)v238;
      v248 = (uint64_t)(v244 - (_QWORD)v238) >> 2;
      if (v248 <= v246 + 1)
        v248 = v246 + 1;
      if (v247 >= 0x7FFFFFFFFFFFFFF8)
        v249 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v249 = v248;
      if (v249)
      {
        v250 = (char *)sub_40FC((uint64_t)(v234 + 219), v249);
        v236 = (char *)v234[218];
        v238 = (char *)v234[217];
      }
      else
      {
        v250 = 0;
      }
      v251 = &v250[8 * v246];
      v252 = &v250[8 * v249];
      *(_QWORD *)v251 = v235;
      v245 = v251 + 8;
      while (v236 != v238)
      {
        v254 = *((_QWORD *)v236 - 1);
        v236 -= 8;
        *((_QWORD *)v251 - 1) = v254;
        v251 -= 8;
      }
      goto LABEL_341;
    }
  }
  else
  {
    if (v233 != 1)
      goto LABEL_344;
    v234 = *(_QWORD **)a1[1];
    v235 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
    v236 = (char *)v234[218];
    v237 = v234[219];
    if ((unint64_t)v236 >= v237)
    {
      v238 = (char *)v234[217];
      v239 = (v236 - v238) >> 3;
      if ((unint64_t)(v239 + 1) >> 61)
        goto LABEL_570;
      v240 = v237 - (_QWORD)v238;
      v241 = (uint64_t)(v237 - (_QWORD)v238) >> 2;
      if (v241 <= v239 + 1)
        v241 = v239 + 1;
      if (v240 >= 0x7FFFFFFFFFFFFFF8)
        v242 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v242 = v241;
      if (v242)
      {
        v243 = (char *)sub_40FC((uint64_t)(v234 + 219), v242);
        v236 = (char *)v234[218];
        v238 = (char *)v234[217];
      }
      else
      {
        v243 = 0;
      }
      v251 = &v243[8 * v239];
      v252 = &v243[8 * v242];
      *(_QWORD *)v251 = v235;
      v245 = v251 + 8;
      while (v236 != v238)
      {
        v253 = *((_QWORD *)v236 - 1);
        v236 -= 8;
        *((_QWORD *)v251 - 1) = v253;
        v251 -= 8;
      }
LABEL_341:
      v234[217] = v251;
      v234[218] = v245;
      v234[219] = v252;
      if (v238)
        operator delete(v238);
      goto LABEL_343;
    }
  }
  *(_QWORD *)v236 = v235;
  v245 = v236 + 8;
LABEL_343:
  v234[218] = v245;
LABEL_344:
  v255 = 1 << *(_DWORD *)(v3 + 48);
  if (v255 == 4)
  {
    v256 = *(_QWORD **)a1[1];
    v257 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
    v258 = (uint64_t *)v256[221];
    v266 = v256[222];
    if ((unint64_t)v258 >= v266)
    {
      v260 = (uint64_t *)v256[220];
      v268 = v258 - v260;
      if ((unint64_t)(v268 + 1) >> 61)
        goto LABEL_570;
      v269 = v266 - (_QWORD)v260;
      v270 = (uint64_t)(v266 - (_QWORD)v260) >> 2;
      if (v270 <= v268 + 1)
        v270 = v268 + 1;
      if (v269 >= 0x7FFFFFFFFFFFFFF8)
        v271 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v271 = v270;
      if (v271)
      {
        v272 = (char *)sub_40FC((uint64_t)(v256 + 222), v271);
        v258 = (uint64_t *)v256[221];
        v260 = (uint64_t *)v256[220];
      }
      else
      {
        v272 = 0;
      }
      v273 = (uint64_t *)&v272[8 * v268];
      v274 = &v272[8 * v271];
      *v273 = v257;
      v267 = v273 + 1;
      while (v258 != v260)
      {
        v276 = *--v258;
        *--v273 = v276;
      }
      goto LABEL_373;
    }
  }
  else
  {
    if (v255 != 2)
      goto LABEL_376;
    v256 = *(_QWORD **)a1[1];
    v257 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
    v258 = (uint64_t *)v256[221];
    v259 = v256[222];
    if ((unint64_t)v258 >= v259)
    {
      v260 = (uint64_t *)v256[220];
      v261 = v258 - v260;
      if ((unint64_t)(v261 + 1) >> 61)
        goto LABEL_570;
      v262 = v259 - (_QWORD)v260;
      v263 = (uint64_t)(v259 - (_QWORD)v260) >> 2;
      if (v263 <= v261 + 1)
        v263 = v261 + 1;
      if (v262 >= 0x7FFFFFFFFFFFFFF8)
        v264 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v264 = v263;
      if (v264)
      {
        v265 = (char *)sub_40FC((uint64_t)(v256 + 222), v264);
        v258 = (uint64_t *)v256[221];
        v260 = (uint64_t *)v256[220];
      }
      else
      {
        v265 = 0;
      }
      v273 = (uint64_t *)&v265[8 * v261];
      v274 = &v265[8 * v264];
      *v273 = v257;
      v267 = v273 + 1;
      while (v258 != v260)
      {
        v275 = *--v258;
        *--v273 = v275;
      }
LABEL_373:
      v256[220] = v273;
      v256[221] = v267;
      v256[222] = v274;
      if (v260)
        operator delete(v260);
      goto LABEL_375;
    }
  }
  *v258 = v257;
  v267 = v258 + 1;
LABEL_375:
  v256[221] = v267;
LABEL_376:
  v277 = 1 << *(_DWORD *)(v3 + 48);
  if (v277 == 4)
  {
    v278 = *(_QWORD **)a1[1];
    v279 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
    v280 = (uint64_t *)v278[224];
    v288 = v278[225];
    if ((unint64_t)v280 >= v288)
    {
      v282 = (uint64_t *)v278[223];
      v290 = v280 - v282;
      if ((unint64_t)(v290 + 1) >> 61)
        goto LABEL_570;
      v291 = v288 - (_QWORD)v282;
      v292 = (uint64_t)(v288 - (_QWORD)v282) >> 2;
      if (v292 <= v290 + 1)
        v292 = v290 + 1;
      if (v291 >= 0x7FFFFFFFFFFFFFF8)
        v293 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v293 = v292;
      if (v293)
      {
        v294 = (char *)sub_40FC((uint64_t)(v278 + 225), v293);
        v280 = (uint64_t *)v278[224];
        v282 = (uint64_t *)v278[223];
      }
      else
      {
        v294 = 0;
      }
      v295 = (uint64_t *)&v294[8 * v290];
      v296 = &v294[8 * v293];
      *v295 = v279;
      v289 = v295 + 1;
      while (v280 != v282)
      {
        v298 = *--v280;
        *--v295 = v298;
      }
      goto LABEL_405;
    }
  }
  else
  {
    if (v277 != 2)
      goto LABEL_408;
    v278 = *(_QWORD **)a1[1];
    v279 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
    v280 = (uint64_t *)v278[224];
    v281 = v278[225];
    if ((unint64_t)v280 >= v281)
    {
      v282 = (uint64_t *)v278[223];
      v283 = v280 - v282;
      if ((unint64_t)(v283 + 1) >> 61)
        goto LABEL_570;
      v284 = v281 - (_QWORD)v282;
      v285 = (uint64_t)(v281 - (_QWORD)v282) >> 2;
      if (v285 <= v283 + 1)
        v285 = v283 + 1;
      if (v284 >= 0x7FFFFFFFFFFFFFF8)
        v286 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v286 = v285;
      if (v286)
      {
        v287 = (char *)sub_40FC((uint64_t)(v278 + 225), v286);
        v280 = (uint64_t *)v278[224];
        v282 = (uint64_t *)v278[223];
      }
      else
      {
        v287 = 0;
      }
      v295 = (uint64_t *)&v287[8 * v283];
      v296 = &v287[8 * v286];
      *v295 = v279;
      v289 = v295 + 1;
      while (v280 != v282)
      {
        v297 = *--v280;
        *--v295 = v297;
      }
LABEL_405:
      v278[223] = v295;
      v278[224] = v289;
      v278[225] = v296;
      if (v282)
        operator delete(v282);
      goto LABEL_407;
    }
  }
  *v280 = v279;
  v289 = v280 + 1;
LABEL_407:
  v278[224] = v289;
LABEL_408:
  v299 = 1 << *(_DWORD *)(v3 + 48);
  if (v299 == 4)
  {
    v300 = *(_QWORD **)a1[1];
    v301 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
    v302 = (uint64_t *)v300[227];
    v310 = v300[228];
    if ((unint64_t)v302 >= v310)
    {
      v304 = (uint64_t *)v300[226];
      v312 = v302 - v304;
      if ((unint64_t)(v312 + 1) >> 61)
        goto LABEL_570;
      v313 = v310 - (_QWORD)v304;
      v314 = (uint64_t)(v310 - (_QWORD)v304) >> 2;
      if (v314 <= v312 + 1)
        v314 = v312 + 1;
      if (v313 >= 0x7FFFFFFFFFFFFFF8)
        v315 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v315 = v314;
      if (v315)
      {
        v316 = (char *)sub_40FC((uint64_t)(v300 + 228), v315);
        v302 = (uint64_t *)v300[227];
        v304 = (uint64_t *)v300[226];
      }
      else
      {
        v316 = 0;
      }
      v317 = (uint64_t *)&v316[8 * v312];
      v318 = &v316[8 * v315];
      *v317 = v301;
      v311 = v317 + 1;
      while (v302 != v304)
      {
        v320 = *--v302;
        *--v317 = v320;
      }
      goto LABEL_437;
    }
  }
  else
  {
    if (v299 != 2)
      goto LABEL_440;
    v300 = *(_QWORD **)a1[1];
    v301 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
    v302 = (uint64_t *)v300[227];
    v303 = v300[228];
    if ((unint64_t)v302 >= v303)
    {
      v304 = (uint64_t *)v300[226];
      v305 = v302 - v304;
      if ((unint64_t)(v305 + 1) >> 61)
        goto LABEL_570;
      v306 = v303 - (_QWORD)v304;
      v307 = (uint64_t)(v303 - (_QWORD)v304) >> 2;
      if (v307 <= v305 + 1)
        v307 = v305 + 1;
      if (v306 >= 0x7FFFFFFFFFFFFFF8)
        v308 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v308 = v307;
      if (v308)
      {
        v309 = (char *)sub_40FC((uint64_t)(v300 + 228), v308);
        v302 = (uint64_t *)v300[227];
        v304 = (uint64_t *)v300[226];
      }
      else
      {
        v309 = 0;
      }
      v317 = (uint64_t *)&v309[8 * v305];
      v318 = &v309[8 * v308];
      *v317 = v301;
      v311 = v317 + 1;
      while (v302 != v304)
      {
        v319 = *--v302;
        *--v317 = v319;
      }
LABEL_437:
      v300[226] = v317;
      v300[227] = v311;
      v300[228] = v318;
      if (v304)
        operator delete(v304);
      goto LABEL_439;
    }
  }
  *v302 = v301;
  v311 = v302 + 1;
LABEL_439:
  v300[227] = v311;
LABEL_440:
  v321 = 1 << *(_DWORD *)(v3 + 48);
  if (v321 == 4)
  {
    v322 = *(_QWORD **)a1[1];
    v323 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
    v324 = (uint64_t *)v322[230];
    v332 = v322[231];
    if ((unint64_t)v324 >= v332)
    {
      v326 = (uint64_t *)v322[229];
      v334 = v324 - v326;
      if ((unint64_t)(v334 + 1) >> 61)
        goto LABEL_570;
      v335 = v332 - (_QWORD)v326;
      v336 = (uint64_t)(v332 - (_QWORD)v326) >> 2;
      if (v336 <= v334 + 1)
        v336 = v334 + 1;
      if (v335 >= 0x7FFFFFFFFFFFFFF8)
        v337 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v337 = v336;
      if (v337)
      {
        v338 = (char *)sub_40FC((uint64_t)(v322 + 231), v337);
        v324 = (uint64_t *)v322[230];
        v326 = (uint64_t *)v322[229];
      }
      else
      {
        v338 = 0;
      }
      v339 = (uint64_t *)&v338[8 * v334];
      v340 = &v338[8 * v337];
      *v339 = v323;
      v333 = v339 + 1;
      while (v324 != v326)
      {
        v342 = *--v324;
        *--v339 = v342;
      }
      goto LABEL_469;
    }
  }
  else
  {
    if (v321 != 2)
      goto LABEL_472;
    v322 = *(_QWORD **)a1[1];
    v323 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
    v324 = (uint64_t *)v322[230];
    v325 = v322[231];
    if ((unint64_t)v324 >= v325)
    {
      v326 = (uint64_t *)v322[229];
      v327 = v324 - v326;
      if ((unint64_t)(v327 + 1) >> 61)
        goto LABEL_570;
      v328 = v325 - (_QWORD)v326;
      v329 = (uint64_t)(v325 - (_QWORD)v326) >> 2;
      if (v329 <= v327 + 1)
        v329 = v327 + 1;
      if (v328 >= 0x7FFFFFFFFFFFFFF8)
        v330 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v330 = v329;
      if (v330)
      {
        v331 = (char *)sub_40FC((uint64_t)(v322 + 231), v330);
        v324 = (uint64_t *)v322[230];
        v326 = (uint64_t *)v322[229];
      }
      else
      {
        v331 = 0;
      }
      v339 = (uint64_t *)&v331[8 * v327];
      v340 = &v331[8 * v330];
      *v339 = v323;
      v333 = v339 + 1;
      while (v324 != v326)
      {
        v341 = *--v324;
        *--v339 = v341;
      }
LABEL_469:
      v322[229] = v339;
      v322[230] = v333;
      v322[231] = v340;
      if (v326)
        operator delete(v326);
      goto LABEL_471;
    }
  }
  *v324 = v323;
  v333 = v324 + 1;
LABEL_471:
  v322[230] = v333;
LABEL_472:
  v343 = 1 << *(_DWORD *)(v3 + 48);
  if (v343 == 2)
  {
    v344 = *(_QWORD **)a1[1];
    v345 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
    v346 = (uint64_t *)v344[233];
    v354 = v344[234];
    if ((unint64_t)v346 >= v354)
    {
      v348 = (uint64_t *)v344[232];
      v356 = v346 - v348;
      if ((unint64_t)(v356 + 1) >> 61)
        goto LABEL_570;
      v357 = v354 - (_QWORD)v348;
      v358 = (uint64_t)(v354 - (_QWORD)v348) >> 2;
      if (v358 <= v356 + 1)
        v358 = v356 + 1;
      if (v357 >= 0x7FFFFFFFFFFFFFF8)
        v359 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v359 = v358;
      if (v359)
      {
        v360 = (char *)sub_40FC((uint64_t)(v344 + 234), v359);
        v346 = (uint64_t *)v344[233];
        v348 = (uint64_t *)v344[232];
      }
      else
      {
        v360 = 0;
      }
      v361 = (uint64_t *)&v360[8 * v356];
      v362 = &v360[8 * v359];
      *v361 = v345;
      v355 = v361 + 1;
      while (v346 != v348)
      {
        v364 = *--v346;
        *--v361 = v364;
      }
      goto LABEL_501;
    }
  }
  else
  {
    if (v343 != 1)
      goto LABEL_504;
    v344 = *(_QWORD **)a1[1];
    v345 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
    v346 = (uint64_t *)v344[233];
    v347 = v344[234];
    if ((unint64_t)v346 >= v347)
    {
      v348 = (uint64_t *)v344[232];
      v349 = v346 - v348;
      if ((unint64_t)(v349 + 1) >> 61)
        goto LABEL_570;
      v350 = v347 - (_QWORD)v348;
      v351 = (uint64_t)(v347 - (_QWORD)v348) >> 2;
      if (v351 <= v349 + 1)
        v351 = v349 + 1;
      if (v350 >= 0x7FFFFFFFFFFFFFF8)
        v352 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v352 = v351;
      if (v352)
      {
        v353 = (char *)sub_40FC((uint64_t)(v344 + 234), v352);
        v346 = (uint64_t *)v344[233];
        v348 = (uint64_t *)v344[232];
      }
      else
      {
        v353 = 0;
      }
      v361 = (uint64_t *)&v353[8 * v349];
      v362 = &v353[8 * v352];
      *v361 = v345;
      v355 = v361 + 1;
      while (v346 != v348)
      {
        v363 = *--v346;
        *--v361 = v363;
      }
LABEL_501:
      v344[232] = v361;
      v344[233] = v355;
      v344[234] = v362;
      if (v348)
        operator delete(v348);
      goto LABEL_503;
    }
  }
  *v346 = v345;
  v355 = v346 + 1;
LABEL_503:
  v344[233] = v355;
LABEL_504:
  v365 = 1 << *(_DWORD *)(v3 + 48);
  if (v365 == 2)
  {
    v366 = *(_QWORD **)a1[1];
    v367 = *(_DWORD *)(a1[2] + 60) & 0x3FFFFLL;
    v368 = (uint64_t *)v366[236];
    v376 = v366[237];
    if ((unint64_t)v368 >= v376)
    {
      v370 = (uint64_t *)v366[235];
      v378 = v368 - v370;
      if ((unint64_t)(v378 + 1) >> 61)
        goto LABEL_570;
      v379 = v376 - (_QWORD)v370;
      v380 = (uint64_t)(v376 - (_QWORD)v370) >> 2;
      if (v380 <= v378 + 1)
        v380 = v378 + 1;
      if (v379 >= 0x7FFFFFFFFFFFFFF8)
        v381 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v381 = v380;
      if (v381)
      {
        v382 = (char *)sub_40FC((uint64_t)(v366 + 237), v381);
        v368 = (uint64_t *)v366[236];
        v370 = (uint64_t *)v366[235];
      }
      else
      {
        v382 = 0;
      }
      v383 = (uint64_t *)&v382[8 * v378];
      v384 = &v382[8 * v381];
      *v383 = v367;
      v377 = v383 + 1;
      while (v368 != v370)
      {
        v386 = *--v368;
        *--v383 = v386;
      }
      goto LABEL_533;
    }
  }
  else
  {
    if (v365 != 1)
      goto LABEL_536;
    v366 = *(_QWORD **)a1[1];
    v367 = *(_DWORD *)(a1[2] + 60) & 0x3FFFFLL;
    v368 = (uint64_t *)v366[236];
    v369 = v366[237];
    if ((unint64_t)v368 >= v369)
    {
      v370 = (uint64_t *)v366[235];
      v371 = v368 - v370;
      if ((unint64_t)(v371 + 1) >> 61)
        goto LABEL_570;
      v372 = v369 - (_QWORD)v370;
      v373 = (uint64_t)(v369 - (_QWORD)v370) >> 2;
      if (v373 <= v371 + 1)
        v373 = v371 + 1;
      if (v372 >= 0x7FFFFFFFFFFFFFF8)
        v374 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v374 = v373;
      if (v374)
      {
        v375 = (char *)sub_40FC((uint64_t)(v366 + 237), v374);
        v368 = (uint64_t *)v366[236];
        v370 = (uint64_t *)v366[235];
      }
      else
      {
        v375 = 0;
      }
      v383 = (uint64_t *)&v375[8 * v371];
      v384 = &v375[8 * v374];
      *v383 = v367;
      v377 = v383 + 1;
      while (v368 != v370)
      {
        v385 = *--v368;
        *--v383 = v385;
      }
LABEL_533:
      v366[235] = v383;
      v366[236] = v377;
      v366[237] = v384;
      if (v370)
        operator delete(v370);
      goto LABEL_535;
    }
  }
  *v368 = v367;
  v377 = v368 + 1;
LABEL_535:
  v366[236] = v377;
LABEL_536:
  v387 = 1 << *(_DWORD *)(v3 + 48);
  if (v387 == 2)
  {
    v399 = a1[2];
    v389 = *(_QWORD **)a1[1];
    v390 = *(_DWORD *)(v399 + 56) & 0xFFFFFLL;
    v391 = (uint64_t *)v389[239];
    v400 = v389[240];
    if ((unint64_t)v391 >= v400)
    {
      v393 = (uint64_t *)v389[238];
      v402 = v391 - v393;
      if (!((unint64_t)(v402 + 1) >> 61))
      {
        v403 = v400 - (_QWORD)v393;
        v404 = (uint64_t)(v400 - (_QWORD)v393) >> 2;
        if (v404 <= v402 + 1)
          v404 = v402 + 1;
        if (v403 >= 0x7FFFFFFFFFFFFFF8)
          v405 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v405 = v404;
        if (v405)
        {
          v406 = (char *)sub_40FC((uint64_t)(v389 + 240), v405);
          v391 = (uint64_t *)v389[239];
          v393 = (uint64_t *)v389[238];
        }
        else
        {
          v406 = 0;
        }
        v407 = (uint64_t *)&v406[8 * v402];
        v408 = &v406[8 * v405];
        *v407 = v390;
        v401 = v407 + 1;
        while (v391 != v393)
        {
          v410 = *--v391;
          *--v407 = v410;
        }
        goto LABEL_565;
      }
LABEL_570:
      sub_4074();
    }
LABEL_548:
    *v391 = v390;
    v401 = v391 + 1;
LABEL_567:
    v389[239] = v401;
    goto LABEL_568;
  }
  if (v387 == 1)
  {
    v388 = a1[2];
    v389 = *(_QWORD **)a1[1];
    v390 = *(_DWORD *)(v388 + 56) & 0xFFFFFLL;
    v391 = (uint64_t *)v389[239];
    v392 = v389[240];
    if ((unint64_t)v391 >= v392)
    {
      v393 = (uint64_t *)v389[238];
      v394 = v391 - v393;
      if (!((unint64_t)(v394 + 1) >> 61))
      {
        v395 = v392 - (_QWORD)v393;
        v396 = (uint64_t)(v392 - (_QWORD)v393) >> 2;
        if (v396 <= v394 + 1)
          v396 = v394 + 1;
        if (v395 >= 0x7FFFFFFFFFFFFFF8)
          v397 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v397 = v396;
        if (v397)
        {
          v398 = (char *)sub_40FC((uint64_t)(v389 + 240), v397);
          v391 = (uint64_t *)v389[239];
          v393 = (uint64_t *)v389[238];
        }
        else
        {
          v398 = 0;
        }
        v407 = (uint64_t *)&v398[8 * v394];
        v408 = &v398[8 * v397];
        *v407 = v390;
        v401 = v407 + 1;
        while (v391 != v393)
        {
          v409 = *--v391;
          *--v407 = v409;
        }
LABEL_565:
        v389[238] = v407;
        v389[239] = v401;
        v389[240] = v408;
        if (v393)
          operator delete(v393);
        goto LABEL_567;
      }
      goto LABEL_570;
    }
    goto LABEL_548;
  }
LABEL_568:
  *a2 = 1;
}

void sub_C9D2C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  unsigned int *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  unint64_t *v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t *v143;
  unint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  unint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t *v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char *v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  uint64_t *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t *v188;
  unint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  uint64_t *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      v8 = (uint64_t *)v6[158];
      v19 = v6[159];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (uint64_t *)v6[157];
        v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_296;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 159), v24);
          v8 = (uint64_t *)v6[158];
          v10 = (uint64_t *)v6[157];
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v29 = *--v8;
          *--v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      v8 = (uint64_t *)v6[158];
      v9 = v6[159];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[157];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_296;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 159), v14);
          v8 = (uint64_t *)v6[158];
          v10 = (uint64_t *)v6[157];
        }
        else
        {
          v15 = 0;
        }
        v26 = (uint64_t *)&v15[8 * v11];
        v27 = &v15[8 * v14];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v28 = *--v8;
          *--v26 = v28;
        }
LABEL_35:
        v6[157] = v26;
        v6[158] = v20;
        v6[159] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v20 = v8 + 1;
LABEL_37:
    v6[158] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      v33 = (uint64_t *)v31[161];
      v41 = v31[162];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[160];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_296;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 162), v46);
          v33 = (uint64_t *)v31[161];
          v35 = (uint64_t *)v31[160];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      v33 = (uint64_t *)v31[161];
      v34 = v31[162];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[160];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_296;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 162), v39);
          v33 = (uint64_t *)v31[161];
          v35 = (uint64_t *)v31[160];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[160] = v48;
        v31[161] = v42;
        v31[162] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[161] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = ((unint64_t)*(unsigned int *)(a1[2] + 20) >> 1) & 0x3FFFF;
      v55 = (unint64_t *)v53[164];
      v63 = v53[165];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (unint64_t *)v53[163];
        v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_296;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 165), v68);
          v55 = (unint64_t *)v53[164];
          v57 = (unint64_t *)v53[163];
        }
        else
        {
          v69 = 0;
        }
        v70 = (unint64_t *)&v69[8 * v65];
        v71 = &v69[8 * v68];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v73 = *--v55;
          *--v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = ((unint64_t)*(unsigned int *)(a1[2] + 20) >> 1) & 0x3FFFF;
      v55 = (unint64_t *)v53[164];
      v56 = v53[165];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (unint64_t *)v53[163];
        v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_296;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 165), v61);
          v55 = (unint64_t *)v53[164];
          v57 = (unint64_t *)v53[163];
        }
        else
        {
          v62 = 0;
        }
        v70 = (unint64_t *)&v62[8 * v58];
        v71 = &v62[8 * v61];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v72 = *--v55;
          *--v70 = v72;
        }
LABEL_99:
        v53[163] = v70;
        v53[164] = v64;
        v53[165] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *v55 = v54;
    v64 = v55 + 1;
LABEL_101:
    v53[164] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v75 = *(_QWORD **)a1[1];
      v76 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      v77 = (uint64_t *)v75[167];
      v85 = v75[168];
      if ((unint64_t)v77 >= v85)
      {
        v79 = (uint64_t *)v75[166];
        v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61)
          goto LABEL_296;
        v88 = v85 - (_QWORD)v79;
        v89 = (uint64_t)(v85 - (_QWORD)v79) >> 2;
        if (v89 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v91 = (char *)sub_40FC((uint64_t)(v75 + 168), v90);
          v77 = (uint64_t *)v75[167];
          v79 = (uint64_t *)v75[166];
        }
        else
        {
          v91 = 0;
        }
        v92 = (uint64_t *)&v91[8 * v87];
        v93 = &v91[8 * v90];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v95 = *--v77;
          *--v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1)
        goto LABEL_134;
      v75 = *(_QWORD **)a1[1];
      v76 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      v77 = (uint64_t *)v75[167];
      v78 = v75[168];
      if ((unint64_t)v77 >= v78)
      {
        v79 = (uint64_t *)v75[166];
        v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61)
          goto LABEL_296;
        v81 = v78 - (_QWORD)v79;
        v82 = (uint64_t)(v78 - (_QWORD)v79) >> 2;
        if (v82 <= v80 + 1)
          v82 = v80 + 1;
        if (v81 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
        {
          v84 = (char *)sub_40FC((uint64_t)(v75 + 168), v83);
          v77 = (uint64_t *)v75[167];
          v79 = (uint64_t *)v75[166];
        }
        else
        {
          v84 = 0;
        }
        v92 = (uint64_t *)&v84[8 * v80];
        v93 = &v84[8 * v83];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v94 = *--v77;
          *--v92 = v94;
        }
LABEL_131:
        v75[166] = v92;
        v75[167] = v86;
        v75[168] = v93;
        if (v79)
          operator delete(v79);
        goto LABEL_133;
      }
    }
    *v77 = v76;
    v86 = v77 + 1;
LABEL_133:
    v75[167] = v86;
LABEL_134:
    v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      v97 = *(_QWORD **)a1[1];
      v98 = *(_DWORD *)(a1[2] + 52) & 0x3FFFFLL;
      v99 = (uint64_t *)v97[170];
      v107 = v97[171];
      if ((unint64_t)v99 >= v107)
      {
        v101 = (uint64_t *)v97[169];
        v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61)
          goto LABEL_296;
        v110 = v107 - (_QWORD)v101;
        v111 = (uint64_t)(v107 - (_QWORD)v101) >> 2;
        if (v111 <= v109 + 1)
          v111 = v109 + 1;
        if (v110 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v111;
        if (v112)
        {
          v113 = (char *)sub_40FC((uint64_t)(v97 + 171), v112);
          v99 = (uint64_t *)v97[170];
          v101 = (uint64_t *)v97[169];
        }
        else
        {
          v113 = 0;
        }
        v114 = (uint64_t *)&v113[8 * v109];
        v115 = &v113[8 * v112];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v117 = *--v99;
          *--v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1)
        goto LABEL_166;
      v97 = *(_QWORD **)a1[1];
      v98 = *(_DWORD *)(a1[2] + 52) & 0x3FFFFLL;
      v99 = (uint64_t *)v97[170];
      v100 = v97[171];
      if ((unint64_t)v99 >= v100)
      {
        v101 = (uint64_t *)v97[169];
        v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61)
          goto LABEL_296;
        v103 = v100 - (_QWORD)v101;
        v104 = (uint64_t)(v100 - (_QWORD)v101) >> 2;
        if (v104 <= v102 + 1)
          v104 = v102 + 1;
        if (v103 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v104;
        if (v105)
        {
          v106 = (char *)sub_40FC((uint64_t)(v97 + 171), v105);
          v99 = (uint64_t *)v97[170];
          v101 = (uint64_t *)v97[169];
        }
        else
        {
          v106 = 0;
        }
        v114 = (uint64_t *)&v106[8 * v102];
        v115 = &v106[8 * v105];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v116 = *--v99;
          *--v114 = v116;
        }
LABEL_163:
        v97[169] = v114;
        v97[170] = v108;
        v97[171] = v115;
        if (v101)
          operator delete(v101);
        goto LABEL_165;
      }
    }
    *v99 = v98;
    v108 = v99 + 1;
LABEL_165:
    v97[170] = v108;
LABEL_166:
    v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      v119 = *(_QWORD **)a1[1];
      v120 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      v121 = (uint64_t *)v119[173];
      v129 = v119[174];
      if ((unint64_t)v121 >= v129)
      {
        v123 = (uint64_t *)v119[172];
        v131 = v121 - v123;
        if ((unint64_t)(v131 + 1) >> 61)
          goto LABEL_296;
        v132 = v129 - (_QWORD)v123;
        v133 = (uint64_t)(v129 - (_QWORD)v123) >> 2;
        if (v133 <= v131 + 1)
          v133 = v131 + 1;
        if (v132 >= 0x7FFFFFFFFFFFFFF8)
          v134 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v134 = v133;
        if (v134)
        {
          v135 = (char *)sub_40FC((uint64_t)(v119 + 174), v134);
          v121 = (uint64_t *)v119[173];
          v123 = (uint64_t *)v119[172];
        }
        else
        {
          v135 = 0;
        }
        v136 = (uint64_t *)&v135[8 * v131];
        v137 = &v135[8 * v134];
        *v136 = v120;
        v130 = v136 + 1;
        while (v121 != v123)
        {
          v139 = *--v121;
          *--v136 = v139;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1)
        goto LABEL_198;
      v119 = *(_QWORD **)a1[1];
      v120 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      v121 = (uint64_t *)v119[173];
      v122 = v119[174];
      if ((unint64_t)v121 >= v122)
      {
        v123 = (uint64_t *)v119[172];
        v124 = v121 - v123;
        if ((unint64_t)(v124 + 1) >> 61)
          goto LABEL_296;
        v125 = v122 - (_QWORD)v123;
        v126 = (uint64_t)(v122 - (_QWORD)v123) >> 2;
        if (v126 <= v124 + 1)
          v126 = v124 + 1;
        if (v125 >= 0x7FFFFFFFFFFFFFF8)
          v127 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v127 = v126;
        if (v127)
        {
          v128 = (char *)sub_40FC((uint64_t)(v119 + 174), v127);
          v121 = (uint64_t *)v119[173];
          v123 = (uint64_t *)v119[172];
        }
        else
        {
          v128 = 0;
        }
        v136 = (uint64_t *)&v128[8 * v124];
        v137 = &v128[8 * v127];
        *v136 = v120;
        v130 = v136 + 1;
        while (v121 != v123)
        {
          v138 = *--v121;
          *--v136 = v138;
        }
LABEL_195:
        v119[172] = v136;
        v119[173] = v130;
        v119[174] = v137;
        if (v123)
          operator delete(v123);
        goto LABEL_197;
      }
    }
    *v121 = v120;
    v130 = v121 + 1;
LABEL_197:
    v119[173] = v130;
LABEL_198:
    v140 = 1 << *(_DWORD *)(v3 + 48);
    if (v140 == 2)
    {
      v141 = *(_QWORD **)a1[1];
      v142 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
      v143 = (uint64_t *)v141[176];
      v151 = v141[177];
      if ((unint64_t)v143 >= v151)
      {
        v145 = (uint64_t *)v141[175];
        v153 = v143 - v145;
        if ((unint64_t)(v153 + 1) >> 61)
          goto LABEL_296;
        v154 = v151 - (_QWORD)v145;
        v155 = (uint64_t)(v151 - (_QWORD)v145) >> 2;
        if (v155 <= v153 + 1)
          v155 = v153 + 1;
        if (v154 >= 0x7FFFFFFFFFFFFFF8)
          v156 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v156 = v155;
        if (v156)
        {
          v157 = (char *)sub_40FC((uint64_t)(v141 + 177), v156);
          v143 = (uint64_t *)v141[176];
          v145 = (uint64_t *)v141[175];
        }
        else
        {
          v157 = 0;
        }
        v158 = (uint64_t *)&v157[8 * v153];
        v159 = &v157[8 * v156];
        *v158 = v142;
        v152 = v158 + 1;
        while (v143 != v145)
        {
          v161 = *--v143;
          *--v158 = v161;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v140 != 1)
        goto LABEL_230;
      v141 = *(_QWORD **)a1[1];
      v142 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFLL;
      v143 = (uint64_t *)v141[176];
      v144 = v141[177];
      if ((unint64_t)v143 >= v144)
      {
        v145 = (uint64_t *)v141[175];
        v146 = v143 - v145;
        if ((unint64_t)(v146 + 1) >> 61)
          goto LABEL_296;
        v147 = v144 - (_QWORD)v145;
        v148 = (uint64_t)(v144 - (_QWORD)v145) >> 2;
        if (v148 <= v146 + 1)
          v148 = v146 + 1;
        if (v147 >= 0x7FFFFFFFFFFFFFF8)
          v149 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v149 = v148;
        if (v149)
        {
          v150 = (char *)sub_40FC((uint64_t)(v141 + 177), v149);
          v143 = (uint64_t *)v141[176];
          v145 = (uint64_t *)v141[175];
        }
        else
        {
          v150 = 0;
        }
        v158 = (uint64_t *)&v150[8 * v146];
        v159 = &v150[8 * v149];
        *v158 = v142;
        v152 = v158 + 1;
        while (v143 != v145)
        {
          v160 = *--v143;
          *--v158 = v160;
        }
LABEL_227:
        v141[175] = v158;
        v141[176] = v152;
        v141[177] = v159;
        if (v145)
          operator delete(v145);
        goto LABEL_229;
      }
    }
    *v143 = v142;
    v152 = v143 + 1;
LABEL_229:
    v141[176] = v152;
LABEL_230:
    v162 = 1 << *(_DWORD *)(v3 + 48);
    if (v162 == 2)
    {
      v163 = *(_QWORD **)a1[1];
      v164 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      v165 = (uint64_t *)v163[179];
      v173 = v163[180];
      if ((unint64_t)v165 >= v173)
      {
        v167 = (uint64_t *)v163[178];
        v175 = v165 - v167;
        if ((unint64_t)(v175 + 1) >> 61)
          goto LABEL_296;
        v176 = v173 - (_QWORD)v167;
        v177 = (uint64_t)(v173 - (_QWORD)v167) >> 2;
        if (v177 <= v175 + 1)
          v177 = v175 + 1;
        if (v176 >= 0x7FFFFFFFFFFFFFF8)
          v178 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v178 = v177;
        if (v178)
        {
          v179 = (char *)sub_40FC((uint64_t)(v163 + 180), v178);
          v165 = (uint64_t *)v163[179];
          v167 = (uint64_t *)v163[178];
        }
        else
        {
          v179 = 0;
        }
        v180 = (uint64_t *)&v179[8 * v175];
        v181 = &v179[8 * v178];
        *v180 = v164;
        v174 = v180 + 1;
        while (v165 != v167)
        {
          v183 = *--v165;
          *--v180 = v183;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v162 != 1)
        goto LABEL_262;
      v163 = *(_QWORD **)a1[1];
      v164 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      v165 = (uint64_t *)v163[179];
      v166 = v163[180];
      if ((unint64_t)v165 >= v166)
      {
        v167 = (uint64_t *)v163[178];
        v168 = v165 - v167;
        if ((unint64_t)(v168 + 1) >> 61)
          goto LABEL_296;
        v169 = v166 - (_QWORD)v167;
        v170 = (uint64_t)(v166 - (_QWORD)v167) >> 2;
        if (v170 <= v168 + 1)
          v170 = v168 + 1;
        if (v169 >= 0x7FFFFFFFFFFFFFF8)
          v171 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v171 = v170;
        if (v171)
        {
          v172 = (char *)sub_40FC((uint64_t)(v163 + 180), v171);
          v165 = (uint64_t *)v163[179];
          v167 = (uint64_t *)v163[178];
        }
        else
        {
          v172 = 0;
        }
        v180 = (uint64_t *)&v172[8 * v168];
        v181 = &v172[8 * v171];
        *v180 = v164;
        v174 = v180 + 1;
        while (v165 != v167)
        {
          v182 = *--v165;
          *--v180 = v182;
        }
LABEL_259:
        v163[178] = v180;
        v163[179] = v174;
        v163[180] = v181;
        if (v167)
          operator delete(v167);
        goto LABEL_261;
      }
    }
    *v165 = v164;
    v174 = v165 + 1;
LABEL_261:
    v163[179] = v174;
LABEL_262:
    v184 = 1 << *(_DWORD *)(v3 + 48);
    if (v184 == 2)
    {
      v196 = a1[2];
      v186 = *(_QWORD **)a1[1];
      v187 = *(_DWORD *)(v196 + 48) & 0x3FFFFLL;
      v188 = (uint64_t *)v186[182];
      v197 = v186[183];
      if ((unint64_t)v188 >= v197)
      {
        v190 = (uint64_t *)v186[181];
        v199 = v188 - v190;
        if (!((unint64_t)(v199 + 1) >> 61))
        {
          v200 = v197 - (_QWORD)v190;
          v201 = (uint64_t)(v197 - (_QWORD)v190) >> 2;
          if (v201 <= v199 + 1)
            v201 = v199 + 1;
          if (v200 >= 0x7FFFFFFFFFFFFFF8)
            v202 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v202 = v201;
          if (v202)
          {
            v203 = (char *)sub_40FC((uint64_t)(v186 + 183), v202);
            v188 = (uint64_t *)v186[182];
            v190 = (uint64_t *)v186[181];
          }
          else
          {
            v203 = 0;
          }
          v204 = (uint64_t *)&v203[8 * v199];
          v205 = &v203[8 * v202];
          *v204 = v187;
          v198 = v204 + 1;
          while (v188 != v190)
          {
            v207 = *--v188;
            *--v204 = v207;
          }
          goto LABEL_291;
        }
LABEL_296:
        sub_4074();
      }
    }
    else
    {
      if (v184 != 1)
      {
LABEL_294:
        *a2 = 1;
        return;
      }
      v185 = a1[2];
      v186 = *(_QWORD **)a1[1];
      v187 = *(_DWORD *)(v185 + 48) & 0x3FFFFLL;
      v188 = (uint64_t *)v186[182];
      v189 = v186[183];
      if ((unint64_t)v188 >= v189)
      {
        v190 = (uint64_t *)v186[181];
        v191 = v188 - v190;
        if (!((unint64_t)(v191 + 1) >> 61))
        {
          v192 = v189 - (_QWORD)v190;
          v193 = (uint64_t)(v189 - (_QWORD)v190) >> 2;
          if (v193 <= v191 + 1)
            v193 = v191 + 1;
          if (v192 >= 0x7FFFFFFFFFFFFFF8)
            v194 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v194 = v193;
          if (v194)
          {
            v195 = (char *)sub_40FC((uint64_t)(v186 + 183), v194);
            v188 = (uint64_t *)v186[182];
            v190 = (uint64_t *)v186[181];
          }
          else
          {
            v195 = 0;
          }
          v204 = (uint64_t *)&v195[8 * v191];
          v205 = &v195[8 * v194];
          *v204 = v187;
          v198 = v204 + 1;
          while (v188 != v190)
          {
            v206 = *--v188;
            *--v204 = v206;
          }
LABEL_291:
          v186[181] = v204;
          v186[182] = v198;
          v186[183] = v205;
          if (v190)
            operator delete(v190);
          goto LABEL_293;
        }
        goto LABEL_296;
      }
    }
    *v188 = v187;
    v198 = v188 + 1;
LABEL_293:
    v186[182] = v198;
    goto LABEL_294;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = (unsigned int *)a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[158] - 8) += v17[7] & 0x3FFFF;
    *(_QWORD *)(v18[161] - 8) += v17[8] & 0x3FFFF;
    *(_QWORD *)(v18[164] - 8) += ((unint64_t)v17[5] >> 1) & 0x3FFFF;
    *(_QWORD *)(v18[167] - 8) += v17[6] & 0x3FFFF;
    *(_QWORD *)(v18[170] - 8) += v17[13] & 0x3FFFF;
    *(_QWORD *)(v18[173] - 8) += v17[9] & 0x3FFFF;
    *(_QWORD *)(v18[176] - 8) += v17[11] & 0x3FFFF;
    *(_QWORD *)(v18[179] - 8) += v17[10] & 0x3FFFF;
    *(_QWORD *)(v18[182] - 8) += v17[12] & 0x3FFFF;
  }
}

void sub_CAC00(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t *v143;
  unint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  unint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t *v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char *v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  uint64_t *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t *v187;
  unint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  uint64_t *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t *v210;
  unint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  char *v225;
  uint64_t *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFFLL;
      v8 = (uint64_t *)v6[962];
      v19 = v6[963];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (uint64_t *)v6[961];
        v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_328;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 963), v24);
          v8 = (uint64_t *)v6[962];
          v10 = (uint64_t *)v6[961];
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v29 = *--v8;
          *--v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFFLL;
      v8 = (uint64_t *)v6[962];
      v9 = v6[963];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[961];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_328;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 963), v14);
          v8 = (uint64_t *)v6[962];
          v10 = (uint64_t *)v6[961];
        }
        else
        {
          v15 = 0;
        }
        v26 = (uint64_t *)&v15[8 * v11];
        v27 = &v15[8 * v14];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v28 = *--v8;
          *--v26 = v28;
        }
LABEL_35:
        v6[961] = v26;
        v6[962] = v20;
        v6[963] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v20 = v8 + 1;
LABEL_37:
    v6[962] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFFLL;
      v33 = (uint64_t *)v31[965];
      v41 = v31[966];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[964];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_328;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 966), v46);
          v33 = (uint64_t *)v31[965];
          v35 = (uint64_t *)v31[964];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFFLL;
      v33 = (uint64_t *)v31[965];
      v34 = v31[966];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[964];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_328;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 966), v39);
          v33 = (uint64_t *)v31[965];
          v35 = (uint64_t *)v31[964];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[964] = v48;
        v31[965] = v42;
        v31[966] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[965] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
      v55 = (char *)v53[968];
      v63 = v53[969];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (char *)v53[967];
        v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_328;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 969), v68);
          v55 = (char *)v53[968];
          v57 = (char *)v53[967];
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[8 * v65];
        v71 = &v69[8 * v68];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v73 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
      v55 = (char *)v53[968];
      v56 = v53[969];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (char *)v53[967];
        v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_328;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 969), v61);
          v55 = (char *)v53[968];
          v57 = (char *)v53[967];
        }
        else
        {
          v62 = 0;
        }
        v70 = &v62[8 * v58];
        v71 = &v62[8 * v61];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v72 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[967] = v70;
        v53[968] = v64;
        v53[969] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v55 = v54;
    v64 = v55 + 8;
LABEL_101:
    v53[968] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v75 = *(_QWORD **)a1[1];
      v76 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFFLL;
      v77 = (uint64_t *)v75[971];
      v85 = v75[972];
      if ((unint64_t)v77 >= v85)
      {
        v79 = (uint64_t *)v75[970];
        v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61)
          goto LABEL_328;
        v88 = v85 - (_QWORD)v79;
        v89 = (uint64_t)(v85 - (_QWORD)v79) >> 2;
        if (v89 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v91 = (char *)sub_40FC((uint64_t)(v75 + 972), v90);
          v77 = (uint64_t *)v75[971];
          v79 = (uint64_t *)v75[970];
        }
        else
        {
          v91 = 0;
        }
        v92 = (uint64_t *)&v91[8 * v87];
        v93 = &v91[8 * v90];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v95 = *--v77;
          *--v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1)
        goto LABEL_134;
      v75 = *(_QWORD **)a1[1];
      v76 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFFLL;
      v77 = (uint64_t *)v75[971];
      v78 = v75[972];
      if ((unint64_t)v77 >= v78)
      {
        v79 = (uint64_t *)v75[970];
        v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61)
          goto LABEL_328;
        v81 = v78 - (_QWORD)v79;
        v82 = (uint64_t)(v78 - (_QWORD)v79) >> 2;
        if (v82 <= v80 + 1)
          v82 = v80 + 1;
        if (v81 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
        {
          v84 = (char *)sub_40FC((uint64_t)(v75 + 972), v83);
          v77 = (uint64_t *)v75[971];
          v79 = (uint64_t *)v75[970];
        }
        else
        {
          v84 = 0;
        }
        v92 = (uint64_t *)&v84[8 * v80];
        v93 = &v84[8 * v83];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v94 = *--v77;
          *--v92 = v94;
        }
LABEL_131:
        v75[970] = v92;
        v75[971] = v86;
        v75[972] = v93;
        if (v79)
          operator delete(v79);
        goto LABEL_133;
      }
    }
    *v77 = v76;
    v86 = v77 + 1;
LABEL_133:
    v75[971] = v86;
LABEL_134:
    v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      v97 = *(_QWORD **)a1[1];
      v98 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      v99 = (uint64_t *)v97[974];
      v107 = v97[975];
      if ((unint64_t)v99 >= v107)
      {
        v101 = (uint64_t *)v97[973];
        v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61)
          goto LABEL_328;
        v110 = v107 - (_QWORD)v101;
        v111 = (uint64_t)(v107 - (_QWORD)v101) >> 2;
        if (v111 <= v109 + 1)
          v111 = v109 + 1;
        if (v110 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v111;
        if (v112)
        {
          v113 = (char *)sub_40FC((uint64_t)(v97 + 975), v112);
          v99 = (uint64_t *)v97[974];
          v101 = (uint64_t *)v97[973];
        }
        else
        {
          v113 = 0;
        }
        v114 = (uint64_t *)&v113[8 * v109];
        v115 = &v113[8 * v112];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v117 = *--v99;
          *--v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1)
        goto LABEL_166;
      v97 = *(_QWORD **)a1[1];
      v98 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      v99 = (uint64_t *)v97[974];
      v100 = v97[975];
      if ((unint64_t)v99 >= v100)
      {
        v101 = (uint64_t *)v97[973];
        v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61)
          goto LABEL_328;
        v103 = v100 - (_QWORD)v101;
        v104 = (uint64_t)(v100 - (_QWORD)v101) >> 2;
        if (v104 <= v102 + 1)
          v104 = v102 + 1;
        if (v103 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v104;
        if (v105)
        {
          v106 = (char *)sub_40FC((uint64_t)(v97 + 975), v105);
          v99 = (uint64_t *)v97[974];
          v101 = (uint64_t *)v97[973];
        }
        else
        {
          v106 = 0;
        }
        v114 = (uint64_t *)&v106[8 * v102];
        v115 = &v106[8 * v105];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v116 = *--v99;
          *--v114 = v116;
        }
LABEL_163:
        v97[973] = v114;
        v97[974] = v108;
        v97[975] = v115;
        if (v101)
          operator delete(v101);
        goto LABEL_165;
      }
    }
    *v99 = v98;
    v108 = v99 + 1;
LABEL_165:
    v97[974] = v108;
LABEL_166:
    v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      v119 = *(_QWORD **)a1[1];
      v120 = *(_DWORD *)(a1[2] + 24) & 0x7FFFFLL;
      v121 = (uint64_t *)v119[977];
      v129 = v119[978];
      if ((unint64_t)v121 >= v129)
      {
        v123 = (uint64_t *)v119[976];
        v131 = v121 - v123;
        if ((unint64_t)(v131 + 1) >> 61)
          goto LABEL_328;
        v132 = v129 - (_QWORD)v123;
        v133 = (uint64_t)(v129 - (_QWORD)v123) >> 2;
        if (v133 <= v131 + 1)
          v133 = v131 + 1;
        if (v132 >= 0x7FFFFFFFFFFFFFF8)
          v134 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v134 = v133;
        if (v134)
        {
          v135 = (char *)sub_40FC((uint64_t)(v119 + 978), v134);
          v121 = (uint64_t *)v119[977];
          v123 = (uint64_t *)v119[976];
        }
        else
        {
          v135 = 0;
        }
        v136 = (uint64_t *)&v135[8 * v131];
        v137 = &v135[8 * v134];
        *v136 = v120;
        v130 = v136 + 1;
        while (v121 != v123)
        {
          v139 = *--v121;
          *--v136 = v139;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1)
        goto LABEL_198;
      v119 = *(_QWORD **)a1[1];
      v120 = *(_DWORD *)(a1[2] + 24) & 0x7FFFFLL;
      v121 = (uint64_t *)v119[977];
      v122 = v119[978];
      if ((unint64_t)v121 >= v122)
      {
        v123 = (uint64_t *)v119[976];
        v124 = v121 - v123;
        if ((unint64_t)(v124 + 1) >> 61)
          goto LABEL_328;
        v125 = v122 - (_QWORD)v123;
        v126 = (uint64_t)(v122 - (_QWORD)v123) >> 2;
        if (v126 <= v124 + 1)
          v126 = v124 + 1;
        if (v125 >= 0x7FFFFFFFFFFFFFF8)
          v127 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v127 = v126;
        if (v127)
        {
          v128 = (char *)sub_40FC((uint64_t)(v119 + 978), v127);
          v121 = (uint64_t *)v119[977];
          v123 = (uint64_t *)v119[976];
        }
        else
        {
          v128 = 0;
        }
        v136 = (uint64_t *)&v128[8 * v124];
        v137 = &v128[8 * v127];
        *v136 = v120;
        v130 = v136 + 1;
        while (v121 != v123)
        {
          v138 = *--v121;
          *--v136 = v138;
        }
LABEL_195:
        v119[976] = v136;
        v119[977] = v130;
        v119[978] = v137;
        if (v123)
          operator delete(v123);
        goto LABEL_197;
      }
    }
    *v121 = v120;
    v130 = v121 + 1;
LABEL_197:
    v119[977] = v130;
LABEL_198:
    v140 = 1 << *(_DWORD *)(v3 + 48);
    if (v140 == 2)
    {
      v141 = *(_QWORD **)a1[1];
      v142 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      v143 = (uint64_t *)v141[980];
      v151 = v141[981];
      if ((unint64_t)v143 >= v151)
      {
        v145 = (uint64_t *)v141[979];
        v153 = v143 - v145;
        if ((unint64_t)(v153 + 1) >> 61)
          goto LABEL_328;
        v154 = v151 - (_QWORD)v145;
        v155 = (uint64_t)(v151 - (_QWORD)v145) >> 2;
        if (v155 <= v153 + 1)
          v155 = v153 + 1;
        if (v154 >= 0x7FFFFFFFFFFFFFF8)
          v156 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v156 = v155;
        if (v156)
        {
          v157 = (char *)sub_40FC((uint64_t)(v141 + 981), v156);
          v143 = (uint64_t *)v141[980];
          v145 = (uint64_t *)v141[979];
        }
        else
        {
          v157 = 0;
        }
        v158 = (uint64_t *)&v157[8 * v153];
        v159 = &v157[8 * v156];
        *v158 = v142;
        v152 = v158 + 1;
        while (v143 != v145)
        {
          v161 = *--v143;
          *--v158 = v161;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v140 != 1)
        goto LABEL_230;
      v141 = *(_QWORD **)a1[1];
      v142 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      v143 = (uint64_t *)v141[980];
      v144 = v141[981];
      if ((unint64_t)v143 >= v144)
      {
        v145 = (uint64_t *)v141[979];
        v146 = v143 - v145;
        if ((unint64_t)(v146 + 1) >> 61)
          goto LABEL_328;
        v147 = v144 - (_QWORD)v145;
        v148 = (uint64_t)(v144 - (_QWORD)v145) >> 2;
        if (v148 <= v146 + 1)
          v148 = v146 + 1;
        if (v147 >= 0x7FFFFFFFFFFFFFF8)
          v149 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v149 = v148;
        if (v149)
        {
          v150 = (char *)sub_40FC((uint64_t)(v141 + 981), v149);
          v143 = (uint64_t *)v141[980];
          v145 = (uint64_t *)v141[979];
        }
        else
        {
          v150 = 0;
        }
        v158 = (uint64_t *)&v150[8 * v146];
        v159 = &v150[8 * v149];
        *v158 = v142;
        v152 = v158 + 1;
        while (v143 != v145)
        {
          v160 = *--v143;
          *--v158 = v160;
        }
LABEL_227:
        v141[979] = v158;
        v141[980] = v152;
        v141[981] = v159;
        if (v145)
          operator delete(v145);
        goto LABEL_229;
      }
    }
    *v143 = v142;
    v152 = v143 + 1;
LABEL_229:
    v141[980] = v152;
LABEL_230:
    v162 = 1 << *(_DWORD *)(v3 + 48);
    if (v162 == 2)
    {
      v163 = *(_QWORD **)a1[1];
      v164 = *(_DWORD *)(a1[2] + 20) & 0x7FFFFLL;
      v165 = (uint64_t *)v163[983];
      v173 = v163[984];
      if ((unint64_t)v165 >= v173)
      {
        v167 = (uint64_t *)v163[982];
        v175 = v165 - v167;
        if ((unint64_t)(v175 + 1) >> 61)
          goto LABEL_328;
        v176 = v173 - (_QWORD)v167;
        v177 = (uint64_t)(v173 - (_QWORD)v167) >> 2;
        if (v177 <= v175 + 1)
          v177 = v175 + 1;
        if (v176 >= 0x7FFFFFFFFFFFFFF8)
          v178 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v178 = v177;
        if (v178)
        {
          v179 = (char *)sub_40FC((uint64_t)(v163 + 984), v178);
          v165 = (uint64_t *)v163[983];
          v167 = (uint64_t *)v163[982];
        }
        else
        {
          v179 = 0;
        }
        v180 = (uint64_t *)&v179[8 * v175];
        v181 = &v179[8 * v178];
        *v180 = v164;
        v174 = v180 + 1;
        while (v165 != v167)
        {
          v183 = *--v165;
          *--v180 = v183;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v162 != 1)
        goto LABEL_262;
      v163 = *(_QWORD **)a1[1];
      v164 = *(_DWORD *)(a1[2] + 20) & 0x7FFFFLL;
      v165 = (uint64_t *)v163[983];
      v166 = v163[984];
      if ((unint64_t)v165 >= v166)
      {
        v167 = (uint64_t *)v163[982];
        v168 = v165 - v167;
        if ((unint64_t)(v168 + 1) >> 61)
          goto LABEL_328;
        v169 = v166 - (_QWORD)v167;
        v170 = (uint64_t)(v166 - (_QWORD)v167) >> 2;
        if (v170 <= v168 + 1)
          v170 = v168 + 1;
        if (v169 >= 0x7FFFFFFFFFFFFFF8)
          v171 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v171 = v170;
        if (v171)
        {
          v172 = (char *)sub_40FC((uint64_t)(v163 + 984), v171);
          v165 = (uint64_t *)v163[983];
          v167 = (uint64_t *)v163[982];
        }
        else
        {
          v172 = 0;
        }
        v180 = (uint64_t *)&v172[8 * v168];
        v181 = &v172[8 * v171];
        *v180 = v164;
        v174 = v180 + 1;
        while (v165 != v167)
        {
          v182 = *--v165;
          *--v180 = v182;
        }
LABEL_259:
        v163[982] = v180;
        v163[983] = v174;
        v163[984] = v181;
        if (v167)
          operator delete(v167);
        goto LABEL_261;
      }
    }
    *v165 = v164;
    v174 = v165 + 1;
LABEL_261:
    v163[983] = v174;
LABEL_262:
    v184 = 1 << *(_DWORD *)(v3 + 48);
    if (v184 == 2)
    {
      v185 = *(_QWORD **)a1[1];
      v186 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFFLL;
      v187 = (uint64_t *)v185[986];
      v195 = v185[987];
      if ((unint64_t)v187 >= v195)
      {
        v189 = (uint64_t *)v185[985];
        v197 = v187 - v189;
        if ((unint64_t)(v197 + 1) >> 61)
          goto LABEL_328;
        v198 = v195 - (_QWORD)v189;
        v199 = (uint64_t)(v195 - (_QWORD)v189) >> 2;
        if (v199 <= v197 + 1)
          v199 = v197 + 1;
        if (v198 >= 0x7FFFFFFFFFFFFFF8)
          v200 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v200 = v199;
        if (v200)
        {
          v201 = (char *)sub_40FC((uint64_t)(v185 + 987), v200);
          v187 = (uint64_t *)v185[986];
          v189 = (uint64_t *)v185[985];
        }
        else
        {
          v201 = 0;
        }
        v202 = (uint64_t *)&v201[8 * v197];
        v203 = &v201[8 * v200];
        *v202 = v186;
        v196 = v202 + 1;
        while (v187 != v189)
        {
          v205 = *--v187;
          *--v202 = v205;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v184 != 1)
        goto LABEL_294;
      v185 = *(_QWORD **)a1[1];
      v186 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFFLL;
      v187 = (uint64_t *)v185[986];
      v188 = v185[987];
      if ((unint64_t)v187 >= v188)
      {
        v189 = (uint64_t *)v185[985];
        v190 = v187 - v189;
        if ((unint64_t)(v190 + 1) >> 61)
          goto LABEL_328;
        v191 = v188 - (_QWORD)v189;
        v192 = (uint64_t)(v188 - (_QWORD)v189) >> 2;
        if (v192 <= v190 + 1)
          v192 = v190 + 1;
        if (v191 >= 0x7FFFFFFFFFFFFFF8)
          v193 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v193 = v192;
        if (v193)
        {
          v194 = (char *)sub_40FC((uint64_t)(v185 + 987), v193);
          v187 = (uint64_t *)v185[986];
          v189 = (uint64_t *)v185[985];
        }
        else
        {
          v194 = 0;
        }
        v202 = (uint64_t *)&v194[8 * v190];
        v203 = &v194[8 * v193];
        *v202 = v186;
        v196 = v202 + 1;
        while (v187 != v189)
        {
          v204 = *--v187;
          *--v202 = v204;
        }
LABEL_291:
        v185[985] = v202;
        v185[986] = v196;
        v185[987] = v203;
        if (v189)
          operator delete(v189);
        goto LABEL_293;
      }
    }
    *v187 = v186;
    v196 = v187 + 1;
LABEL_293:
    v185[986] = v196;
LABEL_294:
    v206 = 1 << *(_DWORD *)(v3 + 48);
    if (v206 == 2)
    {
      v218 = a1[2];
      v208 = *(_QWORD **)a1[1];
      v209 = *(_DWORD *)(v218 + 36) & 0x1FFFFFLL;
      v210 = (uint64_t *)v208[989];
      v219 = v208[990];
      if ((unint64_t)v210 >= v219)
      {
        v212 = (uint64_t *)v208[988];
        v221 = v210 - v212;
        if (!((unint64_t)(v221 + 1) >> 61))
        {
          v222 = v219 - (_QWORD)v212;
          v223 = (uint64_t)(v219 - (_QWORD)v212) >> 2;
          if (v223 <= v221 + 1)
            v223 = v221 + 1;
          if (v222 >= 0x7FFFFFFFFFFFFFF8)
            v224 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v224 = v223;
          if (v224)
          {
            v225 = (char *)sub_40FC((uint64_t)(v208 + 990), v224);
            v210 = (uint64_t *)v208[989];
            v212 = (uint64_t *)v208[988];
          }
          else
          {
            v225 = 0;
          }
          v226 = (uint64_t *)&v225[8 * v221];
          v227 = &v225[8 * v224];
          *v226 = v209;
          v220 = v226 + 1;
          while (v210 != v212)
          {
            v229 = *--v210;
            *--v226 = v229;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_4074();
      }
    }
    else
    {
      if (v206 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      v207 = a1[2];
      v208 = *(_QWORD **)a1[1];
      v209 = *(_DWORD *)(v207 + 36) & 0x1FFFFFLL;
      v210 = (uint64_t *)v208[989];
      v211 = v208[990];
      if ((unint64_t)v210 >= v211)
      {
        v212 = (uint64_t *)v208[988];
        v213 = v210 - v212;
        if (!((unint64_t)(v213 + 1) >> 61))
        {
          v214 = v211 - (_QWORD)v212;
          v215 = (uint64_t)(v211 - (_QWORD)v212) >> 2;
          if (v215 <= v213 + 1)
            v215 = v213 + 1;
          if (v214 >= 0x7FFFFFFFFFFFFFF8)
            v216 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v216 = v215;
          if (v216)
          {
            v217 = (char *)sub_40FC((uint64_t)(v208 + 990), v216);
            v210 = (uint64_t *)v208[989];
            v212 = (uint64_t *)v208[988];
          }
          else
          {
            v217 = 0;
          }
          v226 = (uint64_t *)&v217[8 * v213];
          v227 = &v217[8 * v216];
          *v226 = v209;
          v220 = v226 + 1;
          while (v210 != v212)
          {
            v228 = *--v210;
            *--v226 = v228;
          }
LABEL_323:
          v208[988] = v226;
          v208[989] = v220;
          v208[990] = v227;
          if (v212)
            operator delete(v212);
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *v210 = v209;
    v220 = v210 + 1;
LABEL_325:
    v208[989] = v220;
    goto LABEL_326;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[962] - 8) += *(_DWORD *)(v17 + 44) & 0x1FFFFF;
    *(_QWORD *)(v18[965] - 8) += *(_DWORD *)(v17 + 48) & 0x1FFFFF;
    *(_QWORD *)(v18[968] - 8) += *(_WORD *)(v17 + 56) & 0x7FFF;
    *(_QWORD *)(v18[971] - 8) += *(_DWORD *)(v17 + 52) & 0x1FFFFF;
    *(_QWORD *)(v18[974] - 8) += *(_DWORD *)(v17 + 32) & 0x7FFFF;
    *(_QWORD *)(v18[977] - 8) += *(_DWORD *)(v17 + 24) & 0x7FFFF;
    *(_QWORD *)(v18[980] - 8) += *(_DWORD *)(v17 + 28) & 0x7FFFF;
    *(_QWORD *)(v18[983] - 8) += *(_DWORD *)(v17 + 20) & 0x7FFFF;
    *(_QWORD *)(v18[986] - 8) += *(_DWORD *)(v17 + 40) & 0x1FFFFF;
    *(_QWORD *)(v18[989] - 8) += *(_DWORD *)(v17 + 36) & 0x1FFFFF;
  }
}

void sub_CBD0C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t *v146;
  unint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  uint64_t *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t *v168;
  unint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  unint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  uint64_t *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t *v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t *v212;
  unint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t *v234;
  unint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t *v256;
  unint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  unint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  char *v270;
  uint64_t *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t *v278;
  unint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  char *v292;
  uint64_t *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t *v300;
  unint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  unint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  char *v314;
  uint64_t *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t *v322;
  unint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  char *v329;
  unint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  char *v336;
  uint64_t *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  uint64_t *v345;
  unint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  char *v352;
  uint64_t v353;
  unint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  char *v360;
  uint64_t *v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFFLL;
      v8 = (uint64_t *)v6[869];
      v22 = v6[870];
      if ((unint64_t)v8 >= v22)
      {
        v10 = (uint64_t *)v6[868];
        v24 = v8 - v10;
        if ((unint64_t)(v24 + 1) >> 61)
          goto LABEL_520;
        v25 = v22 - (_QWORD)v10;
        v26 = (uint64_t)(v22 - (_QWORD)v10) >> 2;
        if (v26 <= v24 + 1)
          v26 = v24 + 1;
        if (v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (char *)sub_40FC((uint64_t)(v6 + 870), v27);
          v8 = (uint64_t *)v6[869];
          v10 = (uint64_t *)v6[868];
        }
        else
        {
          v28 = 0;
        }
        v29 = (uint64_t *)&v28[8 * v24];
        v30 = &v28[8 * v27];
        *v29 = v7;
        v23 = v29 + 1;
        while (v8 != v10)
        {
          v32 = *--v8;
          *--v29 = v32;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFFLL;
      v8 = (uint64_t *)v6[869];
      v9 = v6[870];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[868];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_520;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 870), v14);
          v8 = (uint64_t *)v6[869];
          v10 = (uint64_t *)v6[868];
        }
        else
        {
          v15 = 0;
        }
        v29 = (uint64_t *)&v15[8 * v11];
        v30 = &v15[8 * v14];
        *v29 = v7;
        v23 = v29 + 1;
        while (v8 != v10)
        {
          v31 = *--v8;
          *--v29 = v31;
        }
LABEL_35:
        v6[868] = v29;
        v6[869] = v23;
        v6[870] = v30;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v23 = v8 + 1;
LABEL_37:
    v6[869] = v23;
LABEL_38:
    v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      v34 = *(_QWORD **)a1[1];
      v35 = *(_DWORD *)(a1[2] + 68) & 0x3FFFFFLL;
      v36 = (uint64_t *)v34[872];
      v44 = v34[873];
      if ((unint64_t)v36 >= v44)
      {
        v38 = (uint64_t *)v34[871];
        v46 = v36 - v38;
        if ((unint64_t)(v46 + 1) >> 61)
          goto LABEL_520;
        v47 = v44 - (_QWORD)v38;
        v48 = (uint64_t)(v44 - (_QWORD)v38) >> 2;
        if (v48 <= v46 + 1)
          v48 = v46 + 1;
        if (v47 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          v50 = (char *)sub_40FC((uint64_t)(v34 + 873), v49);
          v36 = (uint64_t *)v34[872];
          v38 = (uint64_t *)v34[871];
        }
        else
        {
          v50 = 0;
        }
        v51 = (uint64_t *)&v50[8 * v46];
        v52 = &v50[8 * v49];
        *v51 = v35;
        v45 = v51 + 1;
        while (v36 != v38)
        {
          v54 = *--v36;
          *--v51 = v54;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1)
        goto LABEL_70;
      v34 = *(_QWORD **)a1[1];
      v35 = *(_DWORD *)(a1[2] + 68) & 0x3FFFFFLL;
      v36 = (uint64_t *)v34[872];
      v37 = v34[873];
      if ((unint64_t)v36 >= v37)
      {
        v38 = (uint64_t *)v34[871];
        v39 = v36 - v38;
        if ((unint64_t)(v39 + 1) >> 61)
          goto LABEL_520;
        v40 = v37 - (_QWORD)v38;
        v41 = (uint64_t)(v37 - (_QWORD)v38) >> 2;
        if (v41 <= v39 + 1)
          v41 = v39 + 1;
        if (v40 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          v43 = (char *)sub_40FC((uint64_t)(v34 + 873), v42);
          v36 = (uint64_t *)v34[872];
          v38 = (uint64_t *)v34[871];
        }
        else
        {
          v43 = 0;
        }
        v51 = (uint64_t *)&v43[8 * v39];
        v52 = &v43[8 * v42];
        *v51 = v35;
        v45 = v51 + 1;
        while (v36 != v38)
        {
          v53 = *--v36;
          *--v51 = v53;
        }
LABEL_67:
        v34[871] = v51;
        v34[872] = v45;
        v34[873] = v52;
        if (v38)
          operator delete(v38);
        goto LABEL_69;
      }
    }
    *v36 = v35;
    v45 = v36 + 1;
LABEL_69:
    v34[872] = v45;
LABEL_70:
    v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      v56 = *(_QWORD **)a1[1];
      v57 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFFLL;
      v58 = (uint64_t *)v56[875];
      v66 = v56[876];
      if ((unint64_t)v58 >= v66)
      {
        v60 = (uint64_t *)v56[874];
        v68 = v58 - v60;
        if ((unint64_t)(v68 + 1) >> 61)
          goto LABEL_520;
        v69 = v66 - (_QWORD)v60;
        v70 = (uint64_t)(v66 - (_QWORD)v60) >> 2;
        if (v70 <= v68 + 1)
          v70 = v68 + 1;
        if (v69 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        if (v71)
        {
          v72 = (char *)sub_40FC((uint64_t)(v56 + 876), v71);
          v58 = (uint64_t *)v56[875];
          v60 = (uint64_t *)v56[874];
        }
        else
        {
          v72 = 0;
        }
        v73 = (uint64_t *)&v72[8 * v68];
        v74 = &v72[8 * v71];
        *v73 = v57;
        v67 = v73 + 1;
        while (v58 != v60)
        {
          v76 = *--v58;
          *--v73 = v76;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1)
        goto LABEL_102;
      v56 = *(_QWORD **)a1[1];
      v57 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFFLL;
      v58 = (uint64_t *)v56[875];
      v59 = v56[876];
      if ((unint64_t)v58 >= v59)
      {
        v60 = (uint64_t *)v56[874];
        v61 = v58 - v60;
        if ((unint64_t)(v61 + 1) >> 61)
          goto LABEL_520;
        v62 = v59 - (_QWORD)v60;
        v63 = (uint64_t)(v59 - (_QWORD)v60) >> 2;
        if (v63 <= v61 + 1)
          v63 = v61 + 1;
        if (v62 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v64 = v63;
        if (v64)
        {
          v65 = (char *)sub_40FC((uint64_t)(v56 + 876), v64);
          v58 = (uint64_t *)v56[875];
          v60 = (uint64_t *)v56[874];
        }
        else
        {
          v65 = 0;
        }
        v73 = (uint64_t *)&v65[8 * v61];
        v74 = &v65[8 * v64];
        *v73 = v57;
        v67 = v73 + 1;
        while (v58 != v60)
        {
          v75 = *--v58;
          *--v73 = v75;
        }
LABEL_99:
        v56[874] = v73;
        v56[875] = v67;
        v56[876] = v74;
        if (v60)
          operator delete(v60);
        goto LABEL_101;
      }
    }
    *v58 = v57;
    v67 = v58 + 1;
LABEL_101:
    v56[875] = v67;
LABEL_102:
    v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      v78 = *(_QWORD **)a1[1];
      v79 = *(_DWORD *)(a1[2] + 64) & 0x3FFFFFLL;
      v80 = (uint64_t *)v78[878];
      v88 = v78[879];
      if ((unint64_t)v80 >= v88)
      {
        v82 = (uint64_t *)v78[877];
        v90 = v80 - v82;
        if ((unint64_t)(v90 + 1) >> 61)
          goto LABEL_520;
        v91 = v88 - (_QWORD)v82;
        v92 = (uint64_t)(v88 - (_QWORD)v82) >> 2;
        if (v92 <= v90 + 1)
          v92 = v90 + 1;
        if (v91 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        if (v93)
        {
          v94 = (char *)sub_40FC((uint64_t)(v78 + 879), v93);
          v80 = (uint64_t *)v78[878];
          v82 = (uint64_t *)v78[877];
        }
        else
        {
          v94 = 0;
        }
        v95 = (uint64_t *)&v94[8 * v90];
        v96 = &v94[8 * v93];
        *v95 = v79;
        v89 = v95 + 1;
        while (v80 != v82)
        {
          v98 = *--v80;
          *--v95 = v98;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1)
        goto LABEL_134;
      v78 = *(_QWORD **)a1[1];
      v79 = *(_DWORD *)(a1[2] + 64) & 0x3FFFFFLL;
      v80 = (uint64_t *)v78[878];
      v81 = v78[879];
      if ((unint64_t)v80 >= v81)
      {
        v82 = (uint64_t *)v78[877];
        v83 = v80 - v82;
        if ((unint64_t)(v83 + 1) >> 61)
          goto LABEL_520;
        v84 = v81 - (_QWORD)v82;
        v85 = (uint64_t)(v81 - (_QWORD)v82) >> 2;
        if (v85 <= v83 + 1)
          v85 = v83 + 1;
        if (v84 >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v85;
        if (v86)
        {
          v87 = (char *)sub_40FC((uint64_t)(v78 + 879), v86);
          v80 = (uint64_t *)v78[878];
          v82 = (uint64_t *)v78[877];
        }
        else
        {
          v87 = 0;
        }
        v95 = (uint64_t *)&v87[8 * v83];
        v96 = &v87[8 * v86];
        *v95 = v79;
        v89 = v95 + 1;
        while (v80 != v82)
        {
          v97 = *--v80;
          *--v95 = v97;
        }
LABEL_131:
        v78[877] = v95;
        v78[878] = v89;
        v78[879] = v96;
        if (v82)
          operator delete(v82);
        goto LABEL_133;
      }
    }
    *v80 = v79;
    v89 = v80 + 1;
LABEL_133:
    v78[878] = v89;
LABEL_134:
    v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      v102 = (uint64_t *)v100[881];
      v110 = v100[882];
      if ((unint64_t)v102 >= v110)
      {
        v104 = (uint64_t *)v100[880];
        v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_520;
        v113 = v110 - (_QWORD)v104;
        v114 = (uint64_t)(v110 - (_QWORD)v104) >> 2;
        if (v114 <= v112 + 1)
          v114 = v112 + 1;
        if (v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
        {
          v116 = (char *)sub_40FC((uint64_t)(v100 + 882), v115);
          v102 = (uint64_t *)v100[881];
          v104 = (uint64_t *)v100[880];
        }
        else
        {
          v116 = 0;
        }
        v117 = (uint64_t *)&v116[8 * v112];
        v118 = &v116[8 * v115];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v120 = *--v102;
          *--v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1)
        goto LABEL_166;
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      v102 = (uint64_t *)v100[881];
      v103 = v100[882];
      if ((unint64_t)v102 >= v103)
      {
        v104 = (uint64_t *)v100[880];
        v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61)
          goto LABEL_520;
        v106 = v103 - (_QWORD)v104;
        v107 = (uint64_t)(v103 - (_QWORD)v104) >> 2;
        if (v107 <= v105 + 1)
          v107 = v105 + 1;
        if (v106 >= 0x7FFFFFFFFFFFFFF8)
          v108 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v108 = v107;
        if (v108)
        {
          v109 = (char *)sub_40FC((uint64_t)(v100 + 882), v108);
          v102 = (uint64_t *)v100[881];
          v104 = (uint64_t *)v100[880];
        }
        else
        {
          v109 = 0;
        }
        v117 = (uint64_t *)&v109[8 * v105];
        v118 = &v109[8 * v108];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v119 = *--v102;
          *--v117 = v119;
        }
LABEL_163:
        v100[880] = v117;
        v100[881] = v111;
        v100[882] = v118;
        if (v104)
          operator delete(v104);
        goto LABEL_165;
      }
    }
    *v102 = v101;
    v111 = v102 + 1;
LABEL_165:
    v100[881] = v111;
LABEL_166:
    v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      v122 = *(_QWORD **)a1[1];
      v123 = *(_DWORD *)(a1[2] + 60) & 0x3FFFFFLL;
      v124 = (uint64_t *)v122[884];
      v132 = v122[885];
      if ((unint64_t)v124 >= v132)
      {
        v126 = (uint64_t *)v122[883];
        v134 = v124 - v126;
        if ((unint64_t)(v134 + 1) >> 61)
          goto LABEL_520;
        v135 = v132 - (_QWORD)v126;
        v136 = (uint64_t)(v132 - (_QWORD)v126) >> 2;
        if (v136 <= v134 + 1)
          v136 = v134 + 1;
        if (v135 >= 0x7FFFFFFFFFFFFFF8)
          v137 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137)
        {
          v138 = (char *)sub_40FC((uint64_t)(v122 + 885), v137);
          v124 = (uint64_t *)v122[884];
          v126 = (uint64_t *)v122[883];
        }
        else
        {
          v138 = 0;
        }
        v139 = (uint64_t *)&v138[8 * v134];
        v140 = &v138[8 * v137];
        *v139 = v123;
        v133 = v139 + 1;
        while (v124 != v126)
        {
          v142 = *--v124;
          *--v139 = v142;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1)
        goto LABEL_198;
      v122 = *(_QWORD **)a1[1];
      v123 = *(_DWORD *)(a1[2] + 60) & 0x3FFFFFLL;
      v124 = (uint64_t *)v122[884];
      v125 = v122[885];
      if ((unint64_t)v124 >= v125)
      {
        v126 = (uint64_t *)v122[883];
        v127 = v124 - v126;
        if ((unint64_t)(v127 + 1) >> 61)
          goto LABEL_520;
        v128 = v125 - (_QWORD)v126;
        v129 = (uint64_t)(v125 - (_QWORD)v126) >> 2;
        if (v129 <= v127 + 1)
          v129 = v127 + 1;
        if (v128 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
        {
          v131 = (char *)sub_40FC((uint64_t)(v122 + 885), v130);
          v124 = (uint64_t *)v122[884];
          v126 = (uint64_t *)v122[883];
        }
        else
        {
          v131 = 0;
        }
        v139 = (uint64_t *)&v131[8 * v127];
        v140 = &v131[8 * v130];
        *v139 = v123;
        v133 = v139 + 1;
        while (v124 != v126)
        {
          v141 = *--v124;
          *--v139 = v141;
        }
LABEL_195:
        v122[883] = v139;
        v122[884] = v133;
        v122[885] = v140;
        if (v126)
          operator delete(v126);
        goto LABEL_197;
      }
    }
    *v124 = v123;
    v133 = v124 + 1;
LABEL_197:
    v122[884] = v133;
LABEL_198:
    v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      v144 = *(_QWORD **)a1[1];
      v145 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFFLL;
      v146 = (uint64_t *)v144[887];
      v154 = v144[888];
      if ((unint64_t)v146 >= v154)
      {
        v148 = (uint64_t *)v144[886];
        v156 = v146 - v148;
        if ((unint64_t)(v156 + 1) >> 61)
          goto LABEL_520;
        v157 = v154 - (_QWORD)v148;
        v158 = (uint64_t)(v154 - (_QWORD)v148) >> 2;
        if (v158 <= v156 + 1)
          v158 = v156 + 1;
        if (v157 >= 0x7FFFFFFFFFFFFFF8)
          v159 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v159 = v158;
        if (v159)
        {
          v160 = (char *)sub_40FC((uint64_t)(v144 + 888), v159);
          v146 = (uint64_t *)v144[887];
          v148 = (uint64_t *)v144[886];
        }
        else
        {
          v160 = 0;
        }
        v161 = (uint64_t *)&v160[8 * v156];
        v162 = &v160[8 * v159];
        *v161 = v145;
        v155 = v161 + 1;
        while (v146 != v148)
        {
          v164 = *--v146;
          *--v161 = v164;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1)
        goto LABEL_230;
      v144 = *(_QWORD **)a1[1];
      v145 = *(_DWORD *)(a1[2] + 44) & 0x3FFFFFLL;
      v146 = (uint64_t *)v144[887];
      v147 = v144[888];
      if ((unint64_t)v146 >= v147)
      {
        v148 = (uint64_t *)v144[886];
        v149 = v146 - v148;
        if ((unint64_t)(v149 + 1) >> 61)
          goto LABEL_520;
        v150 = v147 - (_QWORD)v148;
        v151 = (uint64_t)(v147 - (_QWORD)v148) >> 2;
        if (v151 <= v149 + 1)
          v151 = v149 + 1;
        if (v150 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v152 = v151;
        if (v152)
        {
          v153 = (char *)sub_40FC((uint64_t)(v144 + 888), v152);
          v146 = (uint64_t *)v144[887];
          v148 = (uint64_t *)v144[886];
        }
        else
        {
          v153 = 0;
        }
        v161 = (uint64_t *)&v153[8 * v149];
        v162 = &v153[8 * v152];
        *v161 = v145;
        v155 = v161 + 1;
        while (v146 != v148)
        {
          v163 = *--v146;
          *--v161 = v163;
        }
LABEL_227:
        v144[886] = v161;
        v144[887] = v155;
        v144[888] = v162;
        if (v148)
          operator delete(v148);
        goto LABEL_229;
      }
    }
    *v146 = v145;
    v155 = v146 + 1;
LABEL_229:
    v144[887] = v155;
LABEL_230:
    v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      v166 = *(_QWORD **)a1[1];
      v167 = *(_DWORD *)(a1[2] + 76) & 0x3FFFFFLL;
      v168 = (uint64_t *)v166[890];
      v176 = v166[891];
      if ((unint64_t)v168 >= v176)
      {
        v170 = (uint64_t *)v166[889];
        v178 = v168 - v170;
        if ((unint64_t)(v178 + 1) >> 61)
          goto LABEL_520;
        v179 = v176 - (_QWORD)v170;
        v180 = (uint64_t)(v176 - (_QWORD)v170) >> 2;
        if (v180 <= v178 + 1)
          v180 = v178 + 1;
        if (v179 >= 0x7FFFFFFFFFFFFFF8)
          v181 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v181 = v180;
        if (v181)
        {
          v182 = (char *)sub_40FC((uint64_t)(v166 + 891), v181);
          v168 = (uint64_t *)v166[890];
          v170 = (uint64_t *)v166[889];
        }
        else
        {
          v182 = 0;
        }
        v183 = (uint64_t *)&v182[8 * v178];
        v184 = &v182[8 * v181];
        *v183 = v167;
        v177 = v183 + 1;
        while (v168 != v170)
        {
          v186 = *--v168;
          *--v183 = v186;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1)
        goto LABEL_262;
      v166 = *(_QWORD **)a1[1];
      v167 = *(_DWORD *)(a1[2] + 76) & 0x3FFFFFLL;
      v168 = (uint64_t *)v166[890];
      v169 = v166[891];
      if ((unint64_t)v168 >= v169)
      {
        v170 = (uint64_t *)v166[889];
        v171 = v168 - v170;
        if ((unint64_t)(v171 + 1) >> 61)
          goto LABEL_520;
        v172 = v169 - (_QWORD)v170;
        v173 = (uint64_t)(v169 - (_QWORD)v170) >> 2;
        if (v173 <= v171 + 1)
          v173 = v171 + 1;
        if (v172 >= 0x7FFFFFFFFFFFFFF8)
          v174 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v174 = v173;
        if (v174)
        {
          v175 = (char *)sub_40FC((uint64_t)(v166 + 891), v174);
          v168 = (uint64_t *)v166[890];
          v170 = (uint64_t *)v166[889];
        }
        else
        {
          v175 = 0;
        }
        v183 = (uint64_t *)&v175[8 * v171];
        v184 = &v175[8 * v174];
        *v183 = v167;
        v177 = v183 + 1;
        while (v168 != v170)
        {
          v185 = *--v168;
          *--v183 = v185;
        }
LABEL_259:
        v166[889] = v183;
        v166[890] = v177;
        v166[891] = v184;
        if (v170)
          operator delete(v170);
        goto LABEL_261;
      }
    }
    *v168 = v167;
    v177 = v168 + 1;
LABEL_261:
    v166[890] = v177;
LABEL_262:
    v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      v188 = *(_QWORD **)a1[1];
      v189 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      v190 = (uint64_t *)v188[893];
      v198 = v188[894];
      if ((unint64_t)v190 >= v198)
      {
        v192 = (uint64_t *)v188[892];
        v200 = v190 - v192;
        if ((unint64_t)(v200 + 1) >> 61)
          goto LABEL_520;
        v201 = v198 - (_QWORD)v192;
        v202 = (uint64_t)(v198 - (_QWORD)v192) >> 2;
        if (v202 <= v200 + 1)
          v202 = v200 + 1;
        if (v201 >= 0x7FFFFFFFFFFFFFF8)
          v203 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v203 = v202;
        if (v203)
        {
          v204 = (char *)sub_40FC((uint64_t)(v188 + 894), v203);
          v190 = (uint64_t *)v188[893];
          v192 = (uint64_t *)v188[892];
        }
        else
        {
          v204 = 0;
        }
        v205 = (uint64_t *)&v204[8 * v200];
        v206 = &v204[8 * v203];
        *v205 = v189;
        v199 = v205 + 1;
        while (v190 != v192)
        {
          v208 = *--v190;
          *--v205 = v208;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1)
        goto LABEL_294;
      v188 = *(_QWORD **)a1[1];
      v189 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      v190 = (uint64_t *)v188[893];
      v191 = v188[894];
      if ((unint64_t)v190 >= v191)
      {
        v192 = (uint64_t *)v188[892];
        v193 = v190 - v192;
        if ((unint64_t)(v193 + 1) >> 61)
          goto LABEL_520;
        v194 = v191 - (_QWORD)v192;
        v195 = (uint64_t)(v191 - (_QWORD)v192) >> 2;
        if (v195 <= v193 + 1)
          v195 = v193 + 1;
        if (v194 >= 0x7FFFFFFFFFFFFFF8)
          v196 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v196 = v195;
        if (v196)
        {
          v197 = (char *)sub_40FC((uint64_t)(v188 + 894), v196);
          v190 = (uint64_t *)v188[893];
          v192 = (uint64_t *)v188[892];
        }
        else
        {
          v197 = 0;
        }
        v205 = (uint64_t *)&v197[8 * v193];
        v206 = &v197[8 * v196];
        *v205 = v189;
        v199 = v205 + 1;
        while (v190 != v192)
        {
          v207 = *--v190;
          *--v205 = v207;
        }
LABEL_291:
        v188[892] = v205;
        v188[893] = v199;
        v188[894] = v206;
        if (v192)
          operator delete(v192);
        goto LABEL_293;
      }
    }
    *v190 = v189;
    v199 = v190 + 1;
LABEL_293:
    v188[893] = v199;
LABEL_294:
    v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      v210 = *(_QWORD **)a1[1];
      v211 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFFLL;
      v212 = (uint64_t *)v210[896];
      v220 = v210[897];
      if ((unint64_t)v212 >= v220)
      {
        v214 = (uint64_t *)v210[895];
        v222 = v212 - v214;
        if ((unint64_t)(v222 + 1) >> 61)
          goto LABEL_520;
        v223 = v220 - (_QWORD)v214;
        v224 = (uint64_t)(v220 - (_QWORD)v214) >> 2;
        if (v224 <= v222 + 1)
          v224 = v222 + 1;
        if (v223 >= 0x7FFFFFFFFFFFFFF8)
          v225 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v225 = v224;
        if (v225)
        {
          v226 = (char *)sub_40FC((uint64_t)(v210 + 897), v225);
          v212 = (uint64_t *)v210[896];
          v214 = (uint64_t *)v210[895];
        }
        else
        {
          v226 = 0;
        }
        v227 = (uint64_t *)&v226[8 * v222];
        v228 = &v226[8 * v225];
        *v227 = v211;
        v221 = v227 + 1;
        while (v212 != v214)
        {
          v230 = *--v212;
          *--v227 = v230;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1)
        goto LABEL_326;
      v210 = *(_QWORD **)a1[1];
      v211 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFFLL;
      v212 = (uint64_t *)v210[896];
      v213 = v210[897];
      if ((unint64_t)v212 >= v213)
      {
        v214 = (uint64_t *)v210[895];
        v215 = v212 - v214;
        if ((unint64_t)(v215 + 1) >> 61)
          goto LABEL_520;
        v216 = v213 - (_QWORD)v214;
        v217 = (uint64_t)(v213 - (_QWORD)v214) >> 2;
        if (v217 <= v215 + 1)
          v217 = v215 + 1;
        if (v216 >= 0x7FFFFFFFFFFFFFF8)
          v218 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v218 = v217;
        if (v218)
        {
          v219 = (char *)sub_40FC((uint64_t)(v210 + 897), v218);
          v212 = (uint64_t *)v210[896];
          v214 = (uint64_t *)v210[895];
        }
        else
        {
          v219 = 0;
        }
        v227 = (uint64_t *)&v219[8 * v215];
        v228 = &v219[8 * v218];
        *v227 = v211;
        v221 = v227 + 1;
        while (v212 != v214)
        {
          v229 = *--v212;
          *--v227 = v229;
        }
LABEL_323:
        v210[895] = v227;
        v210[896] = v221;
        v210[897] = v228;
        if (v214)
          operator delete(v214);
        goto LABEL_325;
      }
    }
    *v212 = v211;
    v221 = v212 + 1;
LABEL_325:
    v210[896] = v221;
LABEL_326:
    v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      v232 = *(_QWORD **)a1[1];
      v233 = *(_DWORD *)(a1[2] + 72) & 0x3FFFFFLL;
      v234 = (uint64_t *)v232[899];
      v242 = v232[900];
      if ((unint64_t)v234 >= v242)
      {
        v236 = (uint64_t *)v232[898];
        v244 = v234 - v236;
        if ((unint64_t)(v244 + 1) >> 61)
          goto LABEL_520;
        v245 = v242 - (_QWORD)v236;
        v246 = (uint64_t)(v242 - (_QWORD)v236) >> 2;
        if (v246 <= v244 + 1)
          v246 = v244 + 1;
        if (v245 >= 0x7FFFFFFFFFFFFFF8)
          v247 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v247 = v246;
        if (v247)
        {
          v248 = (char *)sub_40FC((uint64_t)(v232 + 900), v247);
          v234 = (uint64_t *)v232[899];
          v236 = (uint64_t *)v232[898];
        }
        else
        {
          v248 = 0;
        }
        v249 = (uint64_t *)&v248[8 * v244];
        v250 = &v248[8 * v247];
        *v249 = v233;
        v243 = v249 + 1;
        while (v234 != v236)
        {
          v252 = *--v234;
          *--v249 = v252;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1)
        goto LABEL_358;
      v232 = *(_QWORD **)a1[1];
      v233 = *(_DWORD *)(a1[2] + 72) & 0x3FFFFFLL;
      v234 = (uint64_t *)v232[899];
      v235 = v232[900];
      if ((unint64_t)v234 >= v235)
      {
        v236 = (uint64_t *)v232[898];
        v237 = v234 - v236;
        if ((unint64_t)(v237 + 1) >> 61)
          goto LABEL_520;
        v238 = v235 - (_QWORD)v236;
        v239 = (uint64_t)(v235 - (_QWORD)v236) >> 2;
        if (v239 <= v237 + 1)
          v239 = v237 + 1;
        if (v238 >= 0x7FFFFFFFFFFFFFF8)
          v240 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v240 = v239;
        if (v240)
        {
          v241 = (char *)sub_40FC((uint64_t)(v232 + 900), v240);
          v234 = (uint64_t *)v232[899];
          v236 = (uint64_t *)v232[898];
        }
        else
        {
          v241 = 0;
        }
        v249 = (uint64_t *)&v241[8 * v237];
        v250 = &v241[8 * v240];
        *v249 = v233;
        v243 = v249 + 1;
        while (v234 != v236)
        {
          v251 = *--v234;
          *--v249 = v251;
        }
LABEL_355:
        v232[898] = v249;
        v232[899] = v243;
        v232[900] = v250;
        if (v236)
          operator delete(v236);
        goto LABEL_357;
      }
    }
    *v234 = v233;
    v243 = v234 + 1;
LABEL_357:
    v232[899] = v243;
LABEL_358:
    v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      v254 = *(_QWORD **)a1[1];
      v255 = *(_DWORD *)(a1[2] + 20) & 0x3FFFFFLL;
      v256 = (uint64_t *)v254[902];
      v264 = v254[903];
      if ((unint64_t)v256 >= v264)
      {
        v258 = (uint64_t *)v254[901];
        v266 = v256 - v258;
        if ((unint64_t)(v266 + 1) >> 61)
          goto LABEL_520;
        v267 = v264 - (_QWORD)v258;
        v268 = (uint64_t)(v264 - (_QWORD)v258) >> 2;
        if (v268 <= v266 + 1)
          v268 = v266 + 1;
        if (v267 >= 0x7FFFFFFFFFFFFFF8)
          v269 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v269 = v268;
        if (v269)
        {
          v270 = (char *)sub_40FC((uint64_t)(v254 + 903), v269);
          v256 = (uint64_t *)v254[902];
          v258 = (uint64_t *)v254[901];
        }
        else
        {
          v270 = 0;
        }
        v271 = (uint64_t *)&v270[8 * v266];
        v272 = &v270[8 * v269];
        *v271 = v255;
        v265 = v271 + 1;
        while (v256 != v258)
        {
          v274 = *--v256;
          *--v271 = v274;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1)
        goto LABEL_390;
      v254 = *(_QWORD **)a1[1];
      v255 = *(_DWORD *)(a1[2] + 20) & 0x3FFFFFLL;
      v256 = (uint64_t *)v254[902];
      v257 = v254[903];
      if ((unint64_t)v256 >= v257)
      {
        v258 = (uint64_t *)v254[901];
        v259 = v256 - v258;
        if ((unint64_t)(v259 + 1) >> 61)
          goto LABEL_520;
        v260 = v257 - (_QWORD)v258;
        v261 = (uint64_t)(v257 - (_QWORD)v258) >> 2;
        if (v261 <= v259 + 1)
          v261 = v259 + 1;
        if (v260 >= 0x7FFFFFFFFFFFFFF8)
          v262 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v262 = v261;
        if (v262)
        {
          v263 = (char *)sub_40FC((uint64_t)(v254 + 903), v262);
          v256 = (uint64_t *)v254[902];
          v258 = (uint64_t *)v254[901];
        }
        else
        {
          v263 = 0;
        }
        v271 = (uint64_t *)&v263[8 * v259];
        v272 = &v263[8 * v262];
        *v271 = v255;
        v265 = v271 + 1;
        while (v256 != v258)
        {
          v273 = *--v256;
          *--v271 = v273;
        }
LABEL_387:
        v254[901] = v271;
        v254[902] = v265;
        v254[903] = v272;
        if (v258)
          operator delete(v258);
        goto LABEL_389;
      }
    }
    *v256 = v255;
    v265 = v256 + 1;
LABEL_389:
    v254[902] = v265;
LABEL_390:
    v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      v276 = *(_QWORD **)a1[1];
      v277 = *(_DWORD *)(a1[2] + 52) & 0x3FFFFFLL;
      v278 = (uint64_t *)v276[905];
      v286 = v276[906];
      if ((unint64_t)v278 >= v286)
      {
        v280 = (uint64_t *)v276[904];
        v288 = v278 - v280;
        if ((unint64_t)(v288 + 1) >> 61)
          goto LABEL_520;
        v289 = v286 - (_QWORD)v280;
        v290 = (uint64_t)(v286 - (_QWORD)v280) >> 2;
        if (v290 <= v288 + 1)
          v290 = v288 + 1;
        if (v289 >= 0x7FFFFFFFFFFFFFF8)
          v291 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v291 = v290;
        if (v291)
        {
          v292 = (char *)sub_40FC((uint64_t)(v276 + 906), v291);
          v278 = (uint64_t *)v276[905];
          v280 = (uint64_t *)v276[904];
        }
        else
        {
          v292 = 0;
        }
        v293 = (uint64_t *)&v292[8 * v288];
        v294 = &v292[8 * v291];
        *v293 = v277;
        v287 = v293 + 1;
        while (v278 != v280)
        {
          v296 = *--v278;
          *--v293 = v296;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1)
        goto LABEL_422;
      v276 = *(_QWORD **)a1[1];
      v277 = *(_DWORD *)(a1[2] + 52) & 0x3FFFFFLL;
      v278 = (uint64_t *)v276[905];
      v279 = v276[906];
      if ((unint64_t)v278 >= v279)
      {
        v280 = (uint64_t *)v276[904];
        v281 = v278 - v280;
        if ((unint64_t)(v281 + 1) >> 61)
          goto LABEL_520;
        v282 = v279 - (_QWORD)v280;
        v283 = (uint64_t)(v279 - (_QWORD)v280) >> 2;
        if (v283 <= v281 + 1)
          v283 = v281 + 1;
        if (v282 >= 0x7FFFFFFFFFFFFFF8)
          v284 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v284 = v283;
        if (v284)
        {
          v285 = (char *)sub_40FC((uint64_t)(v276 + 906), v284);
          v278 = (uint64_t *)v276[905];
          v280 = (uint64_t *)v276[904];
        }
        else
        {
          v285 = 0;
        }
        v293 = (uint64_t *)&v285[8 * v281];
        v294 = &v285[8 * v284];
        *v293 = v277;
        v287 = v293 + 1;
        while (v278 != v280)
        {
          v295 = *--v278;
          *--v293 = v295;
        }
LABEL_419:
        v276[904] = v293;
        v276[905] = v287;
        v276[906] = v294;
        if (v280)
          operator delete(v280);
        goto LABEL_421;
      }
    }
    *v278 = v277;
    v287 = v278 + 1;
LABEL_421:
    v276[905] = v287;
LABEL_422:
    v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      v298 = *(_QWORD **)a1[1];
      v299 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFFLL;
      v300 = (uint64_t *)v298[908];
      v308 = v298[909];
      if ((unint64_t)v300 >= v308)
      {
        v302 = (uint64_t *)v298[907];
        v310 = v300 - v302;
        if ((unint64_t)(v310 + 1) >> 61)
          goto LABEL_520;
        v311 = v308 - (_QWORD)v302;
        v312 = (uint64_t)(v308 - (_QWORD)v302) >> 2;
        if (v312 <= v310 + 1)
          v312 = v310 + 1;
        if (v311 >= 0x7FFFFFFFFFFFFFF8)
          v313 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v313 = v312;
        if (v313)
        {
          v314 = (char *)sub_40FC((uint64_t)(v298 + 909), v313);
          v300 = (uint64_t *)v298[908];
          v302 = (uint64_t *)v298[907];
        }
        else
        {
          v314 = 0;
        }
        v315 = (uint64_t *)&v314[8 * v310];
        v316 = &v314[8 * v313];
        *v315 = v299;
        v309 = v315 + 1;
        while (v300 != v302)
        {
          v318 = *--v300;
          *--v315 = v318;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v297 != 1)
        goto LABEL_454;
      v298 = *(_QWORD **)a1[1];
      v299 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFFLL;
      v300 = (uint64_t *)v298[908];
      v301 = v298[909];
      if ((unint64_t)v300 >= v301)
      {
        v302 = (uint64_t *)v298[907];
        v303 = v300 - v302;
        if ((unint64_t)(v303 + 1) >> 61)
          goto LABEL_520;
        v304 = v301 - (_QWORD)v302;
        v305 = (uint64_t)(v301 - (_QWORD)v302) >> 2;
        if (v305 <= v303 + 1)
          v305 = v303 + 1;
        if (v304 >= 0x7FFFFFFFFFFFFFF8)
          v306 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v306 = v305;
        if (v306)
        {
          v307 = (char *)sub_40FC((uint64_t)(v298 + 909), v306);
          v300 = (uint64_t *)v298[908];
          v302 = (uint64_t *)v298[907];
        }
        else
        {
          v307 = 0;
        }
        v315 = (uint64_t *)&v307[8 * v303];
        v316 = &v307[8 * v306];
        *v315 = v299;
        v309 = v315 + 1;
        while (v300 != v302)
        {
          v317 = *--v300;
          *--v315 = v317;
        }
LABEL_451:
        v298[907] = v315;
        v298[908] = v309;
        v298[909] = v316;
        if (v302)
          operator delete(v302);
        goto LABEL_453;
      }
    }
    *v300 = v299;
    v309 = v300 + 1;
LABEL_453:
    v298[908] = v309;
LABEL_454:
    v319 = 1 << *(_DWORD *)(v3 + 48);
    if (v319 == 2)
    {
      v320 = *(_QWORD **)a1[1];
      v321 = *(_DWORD *)(a1[2] + 56) & 0x3FFFFFLL;
      v322 = (uint64_t *)v320[911];
      v330 = v320[912];
      if ((unint64_t)v322 >= v330)
      {
        v324 = (uint64_t *)v320[910];
        v332 = v322 - v324;
        if ((unint64_t)(v332 + 1) >> 61)
          goto LABEL_520;
        v333 = v330 - (_QWORD)v324;
        v334 = (uint64_t)(v330 - (_QWORD)v324) >> 2;
        if (v334 <= v332 + 1)
          v334 = v332 + 1;
        if (v333 >= 0x7FFFFFFFFFFFFFF8)
          v335 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v335 = v334;
        if (v335)
        {
          v336 = (char *)sub_40FC((uint64_t)(v320 + 912), v335);
          v322 = (uint64_t *)v320[911];
          v324 = (uint64_t *)v320[910];
        }
        else
        {
          v336 = 0;
        }
        v337 = (uint64_t *)&v336[8 * v332];
        v338 = &v336[8 * v335];
        *v337 = v321;
        v331 = v337 + 1;
        while (v322 != v324)
        {
          v340 = *--v322;
          *--v337 = v340;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v319 != 1)
        goto LABEL_486;
      v320 = *(_QWORD **)a1[1];
      v321 = *(_DWORD *)(a1[2] + 56) & 0x3FFFFFLL;
      v322 = (uint64_t *)v320[911];
      v323 = v320[912];
      if ((unint64_t)v322 >= v323)
      {
        v324 = (uint64_t *)v320[910];
        v325 = v322 - v324;
        if ((unint64_t)(v325 + 1) >> 61)
          goto LABEL_520;
        v326 = v323 - (_QWORD)v324;
        v327 = (uint64_t)(v323 - (_QWORD)v324) >> 2;
        if (v327 <= v325 + 1)
          v327 = v325 + 1;
        if (v326 >= 0x7FFFFFFFFFFFFFF8)
          v328 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v328 = v327;
        if (v328)
        {
          v329 = (char *)sub_40FC((uint64_t)(v320 + 912), v328);
          v322 = (uint64_t *)v320[911];
          v324 = (uint64_t *)v320[910];
        }
        else
        {
          v329 = 0;
        }
        v337 = (uint64_t *)&v329[8 * v325];
        v338 = &v329[8 * v328];
        *v337 = v321;
        v331 = v337 + 1;
        while (v322 != v324)
        {
          v339 = *--v322;
          *--v337 = v339;
        }
LABEL_483:
        v320[910] = v337;
        v320[911] = v331;
        v320[912] = v338;
        if (v324)
          operator delete(v324);
        goto LABEL_485;
      }
    }
    *v322 = v321;
    v331 = v322 + 1;
LABEL_485:
    v320[911] = v331;
LABEL_486:
    v341 = 1 << *(_DWORD *)(v3 + 48);
    if (v341 == 2)
    {
      v353 = a1[2];
      v343 = *(_QWORD **)a1[1];
      v344 = *(_DWORD *)(v353 + 80) & 0x7FFFFLL;
      v345 = (uint64_t *)v343[914];
      v354 = v343[915];
      if ((unint64_t)v345 >= v354)
      {
        v347 = (uint64_t *)v343[913];
        v356 = v345 - v347;
        if (!((unint64_t)(v356 + 1) >> 61))
        {
          v357 = v354 - (_QWORD)v347;
          v358 = (uint64_t)(v354 - (_QWORD)v347) >> 2;
          if (v358 <= v356 + 1)
            v358 = v356 + 1;
          if (v357 >= 0x7FFFFFFFFFFFFFF8)
            v359 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v359 = v358;
          if (v359)
          {
            v360 = (char *)sub_40FC((uint64_t)(v343 + 915), v359);
            v345 = (uint64_t *)v343[914];
            v347 = (uint64_t *)v343[913];
          }
          else
          {
            v360 = 0;
          }
          v361 = (uint64_t *)&v360[8 * v356];
          v362 = &v360[8 * v359];
          *v361 = v344;
          v355 = v361 + 1;
          while (v345 != v347)
          {
            v364 = *--v345;
            *--v361 = v364;
          }
          goto LABEL_515;
        }
LABEL_520:
        sub_4074();
      }
    }
    else
    {
      if (v341 != 1)
      {
LABEL_518:
        *a2 = 1;
        return;
      }
      v342 = a1[2];
      v343 = *(_QWORD **)a1[1];
      v344 = *(_DWORD *)(v342 + 80) & 0x7FFFFLL;
      v345 = (uint64_t *)v343[914];
      v346 = v343[915];
      if ((unint64_t)v345 >= v346)
      {
        v347 = (uint64_t *)v343[913];
        v348 = v345 - v347;
        if (!((unint64_t)(v348 + 1) >> 61))
        {
          v349 = v346 - (_QWORD)v347;
          v350 = (uint64_t)(v346 - (_QWORD)v347) >> 2;
          if (v350 <= v348 + 1)
            v350 = v348 + 1;
          if (v349 >= 0x7FFFFFFFFFFFFFF8)
            v351 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v351 = v350;
          if (v351)
          {
            v352 = (char *)sub_40FC((uint64_t)(v343 + 915), v351);
            v345 = (uint64_t *)v343[914];
            v347 = (uint64_t *)v343[913];
          }
          else
          {
            v352 = 0;
          }
          v361 = (uint64_t *)&v352[8 * v348];
          v362 = &v352[8 * v351];
          *v361 = v344;
          v355 = v361 + 1;
          while (v345 != v347)
          {
            v363 = *--v345;
            *--v361 = v363;
          }
LABEL_515:
          v343[913] = v361;
          v343[914] = v355;
          v343[915] = v362;
          if (v347)
            operator delete(v347);
          goto LABEL_517;
        }
        goto LABEL_520;
      }
    }
    *v345 = v344;
    v355 = v345 + 1;
LABEL_517:
    v343[914] = v355;
    goto LABEL_518;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = (_DWORD *)a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[869] - 8) += v17[9] & 0x3FFFFF;
    *(_QWORD *)(v19[872] - 8) += v17[17] & 0x3FFFFF;
    *(_QWORD *)(v19[875] - 8) += v17[8] & 0x3FFFFF;
    *(_QWORD *)(v19[878] - 8) += v17[16] & 0x3FFFFF;
    *(_QWORD *)(v19[881] - 8) += v17[7] & 0x3FFFFF;
    *(_QWORD *)(v19[884] - 8) += v17[15] & 0x3FFFFF;
    *(_QWORD *)(v19[887] - 8) += v17[11] & 0x3FFFFF;
    *(_QWORD *)(v19[890] - 8) += v17[19] & 0x3FFFFF;
    *(_QWORD *)(v19[893] - 8) += v17[12] & 0x7FFFF;
    *(_QWORD *)(v19[896] - 8) += v17[10] & 0x3FFFFF;
    v20 = (_DWORD *)a1[2];
    v21 = (_QWORD *)*v18;
    *(_QWORD *)(v21[899] - 8) += v20[18] & 0x3FFFFF;
    *(_QWORD *)(v21[902] - 8) += v20[5] & 0x3FFFFF;
    *(_QWORD *)(v21[905] - 8) += v20[13] & 0x3FFFFF;
    *(_QWORD *)(v21[908] - 8) += v20[6] & 0x3FFFFF;
    *(_QWORD *)(v21[911] - 8) += v20[14] & 0x3FFFFF;
    *(_QWORD *)(v21[914] - 8) += v20[20] & 0x7FFFF;
  }
}

void sub_CD814(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t *v146;
  unint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  uint64_t *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t *v168;
  unint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  unint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  uint64_t *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t *v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t *v212;
  unint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t *v234;
  unint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t *v256;
  unint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  unint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  char *v270;
  uint64_t *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t *v278;
  unint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  char *v292;
  uint64_t *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t *v300;
  unint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  unint64_t v308;
  _QWORD *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  char *v314;
  uint64_t *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t *v323;
  unint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  char *v330;
  uint64_t v331;
  unint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  char *v338;
  uint64_t *v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
      v8 = (uint64_t *)v6[917];
      v22 = v6[918];
      if ((unint64_t)v8 >= v22)
      {
        v10 = (uint64_t *)v6[916];
        v24 = v8 - v10;
        if ((unint64_t)(v24 + 1) >> 61)
          goto LABEL_488;
        v25 = v22 - (_QWORD)v10;
        v26 = (uint64_t)(v22 - (_QWORD)v10) >> 2;
        if (v26 <= v24 + 1)
          v26 = v24 + 1;
        if (v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (char *)sub_40FC((uint64_t)(v6 + 918), v27);
          v8 = (uint64_t *)v6[917];
          v10 = (uint64_t *)v6[916];
        }
        else
        {
          v28 = 0;
        }
        v29 = (uint64_t *)&v28[8 * v24];
        v30 = &v28[8 * v27];
        *v29 = v7;
        v23 = v29 + 1;
        while (v8 != v10)
        {
          v32 = *--v8;
          *--v29 = v32;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 36) & 0x7FFFFLL;
      v8 = (uint64_t *)v6[917];
      v9 = v6[918];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[916];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_488;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 918), v14);
          v8 = (uint64_t *)v6[917];
          v10 = (uint64_t *)v6[916];
        }
        else
        {
          v15 = 0;
        }
        v29 = (uint64_t *)&v15[8 * v11];
        v30 = &v15[8 * v14];
        *v29 = v7;
        v23 = v29 + 1;
        while (v8 != v10)
        {
          v31 = *--v8;
          *--v29 = v31;
        }
LABEL_35:
        v6[916] = v29;
        v6[917] = v23;
        v6[918] = v30;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v23 = v8 + 1;
LABEL_37:
    v6[917] = v23;
LABEL_38:
    v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      v34 = *(_QWORD **)a1[1];
      v35 = *(_DWORD *)(a1[2] + 68) & 0xFFFFFLL;
      v36 = (uint64_t *)v34[920];
      v44 = v34[921];
      if ((unint64_t)v36 >= v44)
      {
        v38 = (uint64_t *)v34[919];
        v46 = v36 - v38;
        if ((unint64_t)(v46 + 1) >> 61)
          goto LABEL_488;
        v47 = v44 - (_QWORD)v38;
        v48 = (uint64_t)(v44 - (_QWORD)v38) >> 2;
        if (v48 <= v46 + 1)
          v48 = v46 + 1;
        if (v47 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          v50 = (char *)sub_40FC((uint64_t)(v34 + 921), v49);
          v36 = (uint64_t *)v34[920];
          v38 = (uint64_t *)v34[919];
        }
        else
        {
          v50 = 0;
        }
        v51 = (uint64_t *)&v50[8 * v46];
        v52 = &v50[8 * v49];
        *v51 = v35;
        v45 = v51 + 1;
        while (v36 != v38)
        {
          v54 = *--v36;
          *--v51 = v54;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1)
        goto LABEL_70;
      v34 = *(_QWORD **)a1[1];
      v35 = *(_DWORD *)(a1[2] + 68) & 0xFFFFFLL;
      v36 = (uint64_t *)v34[920];
      v37 = v34[921];
      if ((unint64_t)v36 >= v37)
      {
        v38 = (uint64_t *)v34[919];
        v39 = v36 - v38;
        if ((unint64_t)(v39 + 1) >> 61)
          goto LABEL_488;
        v40 = v37 - (_QWORD)v38;
        v41 = (uint64_t)(v37 - (_QWORD)v38) >> 2;
        if (v41 <= v39 + 1)
          v41 = v39 + 1;
        if (v40 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          v43 = (char *)sub_40FC((uint64_t)(v34 + 921), v42);
          v36 = (uint64_t *)v34[920];
          v38 = (uint64_t *)v34[919];
        }
        else
        {
          v43 = 0;
        }
        v51 = (uint64_t *)&v43[8 * v39];
        v52 = &v43[8 * v42];
        *v51 = v35;
        v45 = v51 + 1;
        while (v36 != v38)
        {
          v53 = *--v36;
          *--v51 = v53;
        }
LABEL_67:
        v34[919] = v51;
        v34[920] = v45;
        v34[921] = v52;
        if (v38)
          operator delete(v38);
        goto LABEL_69;
      }
    }
    *v36 = v35;
    v45 = v36 + 1;
LABEL_69:
    v34[920] = v45;
LABEL_70:
    v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      v56 = *(_QWORD **)a1[1];
      v57 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      v58 = (char *)v56[923];
      v66 = v56[924];
      if ((unint64_t)v58 >= v66)
      {
        v60 = (char *)v56[922];
        v68 = (v58 - v60) >> 3;
        if ((unint64_t)(v68 + 1) >> 61)
          goto LABEL_488;
        v69 = v66 - (_QWORD)v60;
        v70 = (uint64_t)(v66 - (_QWORD)v60) >> 2;
        if (v70 <= v68 + 1)
          v70 = v68 + 1;
        if (v69 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        if (v71)
        {
          v72 = (char *)sub_40FC((uint64_t)(v56 + 924), v71);
          v58 = (char *)v56[923];
          v60 = (char *)v56[922];
        }
        else
        {
          v72 = 0;
        }
        v73 = &v72[8 * v68];
        v74 = &v72[8 * v71];
        *(_QWORD *)v73 = v57;
        v67 = v73 + 8;
        while (v58 != v60)
        {
          v76 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v73 - 1) = v76;
          v73 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1)
        goto LABEL_102;
      v56 = *(_QWORD **)a1[1];
      v57 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      v58 = (char *)v56[923];
      v59 = v56[924];
      if ((unint64_t)v58 >= v59)
      {
        v60 = (char *)v56[922];
        v61 = (v58 - v60) >> 3;
        if ((unint64_t)(v61 + 1) >> 61)
          goto LABEL_488;
        v62 = v59 - (_QWORD)v60;
        v63 = (uint64_t)(v59 - (_QWORD)v60) >> 2;
        if (v63 <= v61 + 1)
          v63 = v61 + 1;
        if (v62 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v64 = v63;
        if (v64)
        {
          v65 = (char *)sub_40FC((uint64_t)(v56 + 924), v64);
          v58 = (char *)v56[923];
          v60 = (char *)v56[922];
        }
        else
        {
          v65 = 0;
        }
        v73 = &v65[8 * v61];
        v74 = &v65[8 * v64];
        *(_QWORD *)v73 = v57;
        v67 = v73 + 8;
        while (v58 != v60)
        {
          v75 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v73 - 1) = v75;
          v73 -= 8;
        }
LABEL_99:
        v56[922] = v73;
        v56[923] = v67;
        v56[924] = v74;
        if (v60)
          operator delete(v60);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v58 = v57;
    v67 = v58 + 8;
LABEL_101:
    v56[923] = v67;
LABEL_102:
    v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      v78 = *(_QWORD **)a1[1];
      v79 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      v80 = (uint64_t *)v78[926];
      v88 = v78[927];
      if ((unint64_t)v80 >= v88)
      {
        v82 = (uint64_t *)v78[925];
        v90 = v80 - v82;
        if ((unint64_t)(v90 + 1) >> 61)
          goto LABEL_488;
        v91 = v88 - (_QWORD)v82;
        v92 = (uint64_t)(v88 - (_QWORD)v82) >> 2;
        if (v92 <= v90 + 1)
          v92 = v90 + 1;
        if (v91 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        if (v93)
        {
          v94 = (char *)sub_40FC((uint64_t)(v78 + 927), v93);
          v80 = (uint64_t *)v78[926];
          v82 = (uint64_t *)v78[925];
        }
        else
        {
          v94 = 0;
        }
        v95 = (uint64_t *)&v94[8 * v90];
        v96 = &v94[8 * v93];
        *v95 = v79;
        v89 = v95 + 1;
        while (v80 != v82)
        {
          v98 = *--v80;
          *--v95 = v98;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1)
        goto LABEL_134;
      v78 = *(_QWORD **)a1[1];
      v79 = *(_DWORD *)(a1[2] + 32) & 0x7FFFFLL;
      v80 = (uint64_t *)v78[926];
      v81 = v78[927];
      if ((unint64_t)v80 >= v81)
      {
        v82 = (uint64_t *)v78[925];
        v83 = v80 - v82;
        if ((unint64_t)(v83 + 1) >> 61)
          goto LABEL_488;
        v84 = v81 - (_QWORD)v82;
        v85 = (uint64_t)(v81 - (_QWORD)v82) >> 2;
        if (v85 <= v83 + 1)
          v85 = v83 + 1;
        if (v84 >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v85;
        if (v86)
        {
          v87 = (char *)sub_40FC((uint64_t)(v78 + 927), v86);
          v80 = (uint64_t *)v78[926];
          v82 = (uint64_t *)v78[925];
        }
        else
        {
          v87 = 0;
        }
        v95 = (uint64_t *)&v87[8 * v83];
        v96 = &v87[8 * v86];
        *v95 = v79;
        v89 = v95 + 1;
        while (v80 != v82)
        {
          v97 = *--v80;
          *--v95 = v97;
        }
LABEL_131:
        v78[925] = v95;
        v78[926] = v89;
        v78[927] = v96;
        if (v82)
          operator delete(v82);
        goto LABEL_133;
      }
    }
    *v80 = v79;
    v89 = v80 + 1;
LABEL_133:
    v78[926] = v89;
LABEL_134:
    v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 64) & 0xFFFFFLL;
      v102 = (uint64_t *)v100[929];
      v110 = v100[930];
      if ((unint64_t)v102 >= v110)
      {
        v104 = (uint64_t *)v100[928];
        v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_488;
        v113 = v110 - (_QWORD)v104;
        v114 = (uint64_t)(v110 - (_QWORD)v104) >> 2;
        if (v114 <= v112 + 1)
          v114 = v112 + 1;
        if (v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
        {
          v116 = (char *)sub_40FC((uint64_t)(v100 + 930), v115);
          v102 = (uint64_t *)v100[929];
          v104 = (uint64_t *)v100[928];
        }
        else
        {
          v116 = 0;
        }
        v117 = (uint64_t *)&v116[8 * v112];
        v118 = &v116[8 * v115];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v120 = *--v102;
          *--v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1)
        goto LABEL_166;
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 64) & 0xFFFFFLL;
      v102 = (uint64_t *)v100[929];
      v103 = v100[930];
      if ((unint64_t)v102 >= v103)
      {
        v104 = (uint64_t *)v100[928];
        v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61)
          goto LABEL_488;
        v106 = v103 - (_QWORD)v104;
        v107 = (uint64_t)(v103 - (_QWORD)v104) >> 2;
        if (v107 <= v105 + 1)
          v107 = v105 + 1;
        if (v106 >= 0x7FFFFFFFFFFFFFF8)
          v108 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v108 = v107;
        if (v108)
        {
          v109 = (char *)sub_40FC((uint64_t)(v100 + 930), v108);
          v102 = (uint64_t *)v100[929];
          v104 = (uint64_t *)v100[928];
        }
        else
        {
          v109 = 0;
        }
        v117 = (uint64_t *)&v109[8 * v105];
        v118 = &v109[8 * v108];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v119 = *--v102;
          *--v117 = v119;
        }
LABEL_163:
        v100[928] = v117;
        v100[929] = v111;
        v100[930] = v118;
        if (v104)
          operator delete(v104);
        goto LABEL_165;
      }
    }
    *v102 = v101;
    v111 = v102 + 1;
LABEL_165:
    v100[929] = v111;
LABEL_166:
    v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      v122 = *(_QWORD **)a1[1];
      v123 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      v124 = (uint64_t *)v122[932];
      v132 = v122[933];
      if ((unint64_t)v124 >= v132)
      {
        v126 = (uint64_t *)v122[931];
        v134 = v124 - v126;
        if ((unint64_t)(v134 + 1) >> 61)
          goto LABEL_488;
        v135 = v132 - (_QWORD)v126;
        v136 = (uint64_t)(v132 - (_QWORD)v126) >> 2;
        if (v136 <= v134 + 1)
          v136 = v134 + 1;
        if (v135 >= 0x7FFFFFFFFFFFFFF8)
          v137 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137)
        {
          v138 = (char *)sub_40FC((uint64_t)(v122 + 933), v137);
          v124 = (uint64_t *)v122[932];
          v126 = (uint64_t *)v122[931];
        }
        else
        {
          v138 = 0;
        }
        v139 = (uint64_t *)&v138[8 * v134];
        v140 = &v138[8 * v137];
        *v139 = v123;
        v133 = v139 + 1;
        while (v124 != v126)
        {
          v142 = *--v124;
          *--v139 = v142;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1)
        goto LABEL_198;
      v122 = *(_QWORD **)a1[1];
      v123 = *(_DWORD *)(a1[2] + 28) & 0x7FFFFLL;
      v124 = (uint64_t *)v122[932];
      v125 = v122[933];
      if ((unint64_t)v124 >= v125)
      {
        v126 = (uint64_t *)v122[931];
        v127 = v124 - v126;
        if ((unint64_t)(v127 + 1) >> 61)
          goto LABEL_488;
        v128 = v125 - (_QWORD)v126;
        v129 = (uint64_t)(v125 - (_QWORD)v126) >> 2;
        if (v129 <= v127 + 1)
          v129 = v127 + 1;
        if (v128 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
        {
          v131 = (char *)sub_40FC((uint64_t)(v122 + 933), v130);
          v124 = (uint64_t *)v122[932];
          v126 = (uint64_t *)v122[931];
        }
        else
        {
          v131 = 0;
        }
        v139 = (uint64_t *)&v131[8 * v127];
        v140 = &v131[8 * v130];
        *v139 = v123;
        v133 = v139 + 1;
        while (v124 != v126)
        {
          v141 = *--v124;
          *--v139 = v141;
        }
LABEL_195:
        v122[931] = v139;
        v122[932] = v133;
        v122[933] = v140;
        if (v126)
          operator delete(v126);
        goto LABEL_197;
      }
    }
    *v124 = v123;
    v133 = v124 + 1;
LABEL_197:
    v122[932] = v133;
LABEL_198:
    v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      v144 = *(_QWORD **)a1[1];
      v145 = *(_DWORD *)(a1[2] + 60) & 0xFFFFFLL;
      v146 = (uint64_t *)v144[935];
      v154 = v144[936];
      if ((unint64_t)v146 >= v154)
      {
        v148 = (uint64_t *)v144[934];
        v156 = v146 - v148;
        if ((unint64_t)(v156 + 1) >> 61)
          goto LABEL_488;
        v157 = v154 - (_QWORD)v148;
        v158 = (uint64_t)(v154 - (_QWORD)v148) >> 2;
        if (v158 <= v156 + 1)
          v158 = v156 + 1;
        if (v157 >= 0x7FFFFFFFFFFFFFF8)
          v159 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v159 = v158;
        if (v159)
        {
          v160 = (char *)sub_40FC((uint64_t)(v144 + 936), v159);
          v146 = (uint64_t *)v144[935];
          v148 = (uint64_t *)v144[934];
        }
        else
        {
          v160 = 0;
        }
        v161 = (uint64_t *)&v160[8 * v156];
        v162 = &v160[8 * v159];
        *v161 = v145;
        v155 = v161 + 1;
        while (v146 != v148)
        {
          v164 = *--v146;
          *--v161 = v164;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1)
        goto LABEL_230;
      v144 = *(_QWORD **)a1[1];
      v145 = *(_DWORD *)(a1[2] + 60) & 0xFFFFFLL;
      v146 = (uint64_t *)v144[935];
      v147 = v144[936];
      if ((unint64_t)v146 >= v147)
      {
        v148 = (uint64_t *)v144[934];
        v149 = v146 - v148;
        if ((unint64_t)(v149 + 1) >> 61)
          goto LABEL_488;
        v150 = v147 - (_QWORD)v148;
        v151 = (uint64_t)(v147 - (_QWORD)v148) >> 2;
        if (v151 <= v149 + 1)
          v151 = v149 + 1;
        if (v150 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v152 = v151;
        if (v152)
        {
          v153 = (char *)sub_40FC((uint64_t)(v144 + 936), v152);
          v146 = (uint64_t *)v144[935];
          v148 = (uint64_t *)v144[934];
        }
        else
        {
          v153 = 0;
        }
        v161 = (uint64_t *)&v153[8 * v149];
        v162 = &v153[8 * v152];
        *v161 = v145;
        v155 = v161 + 1;
        while (v146 != v148)
        {
          v163 = *--v146;
          *--v161 = v163;
        }
LABEL_227:
        v144[934] = v161;
        v144[935] = v155;
        v144[936] = v162;
        if (v148)
          operator delete(v148);
        goto LABEL_229;
      }
    }
    *v146 = v145;
    v155 = v146 + 1;
LABEL_229:
    v144[935] = v155;
LABEL_230:
    v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      v166 = *(_QWORD **)a1[1];
      v167 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      v168 = (uint64_t *)v166[938];
      v176 = v166[939];
      if ((unint64_t)v168 >= v176)
      {
        v170 = (uint64_t *)v166[937];
        v178 = v168 - v170;
        if ((unint64_t)(v178 + 1) >> 61)
          goto LABEL_488;
        v179 = v176 - (_QWORD)v170;
        v180 = (uint64_t)(v176 - (_QWORD)v170) >> 2;
        if (v180 <= v178 + 1)
          v180 = v178 + 1;
        if (v179 >= 0x7FFFFFFFFFFFFFF8)
          v181 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v181 = v180;
        if (v181)
        {
          v182 = (char *)sub_40FC((uint64_t)(v166 + 939), v181);
          v168 = (uint64_t *)v166[938];
          v170 = (uint64_t *)v166[937];
        }
        else
        {
          v182 = 0;
        }
        v183 = (uint64_t *)&v182[8 * v178];
        v184 = &v182[8 * v181];
        *v183 = v167;
        v177 = v183 + 1;
        while (v168 != v170)
        {
          v186 = *--v168;
          *--v183 = v186;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1)
        goto LABEL_262;
      v166 = *(_QWORD **)a1[1];
      v167 = *(_DWORD *)(a1[2] + 44) & 0x7FFFFLL;
      v168 = (uint64_t *)v166[938];
      v169 = v166[939];
      if ((unint64_t)v168 >= v169)
      {
        v170 = (uint64_t *)v166[937];
        v171 = v168 - v170;
        if ((unint64_t)(v171 + 1) >> 61)
          goto LABEL_488;
        v172 = v169 - (_QWORD)v170;
        v173 = (uint64_t)(v169 - (_QWORD)v170) >> 2;
        if (v173 <= v171 + 1)
          v173 = v171 + 1;
        if (v172 >= 0x7FFFFFFFFFFFFFF8)
          v174 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v174 = v173;
        if (v174)
        {
          v175 = (char *)sub_40FC((uint64_t)(v166 + 939), v174);
          v168 = (uint64_t *)v166[938];
          v170 = (uint64_t *)v166[937];
        }
        else
        {
          v175 = 0;
        }
        v183 = (uint64_t *)&v175[8 * v171];
        v184 = &v175[8 * v174];
        *v183 = v167;
        v177 = v183 + 1;
        while (v168 != v170)
        {
          v185 = *--v168;
          *--v183 = v185;
        }
LABEL_259:
        v166[937] = v183;
        v166[938] = v177;
        v166[939] = v184;
        if (v170)
          operator delete(v170);
        goto LABEL_261;
      }
    }
    *v168 = v167;
    v177 = v168 + 1;
LABEL_261:
    v166[938] = v177;
LABEL_262:
    v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      v188 = *(_QWORD **)a1[1];
      v189 = *(_DWORD *)(a1[2] + 76) & 0xFFFFFLL;
      v190 = (uint64_t *)v188[941];
      v198 = v188[942];
      if ((unint64_t)v190 >= v198)
      {
        v192 = (uint64_t *)v188[940];
        v200 = v190 - v192;
        if ((unint64_t)(v200 + 1) >> 61)
          goto LABEL_488;
        v201 = v198 - (_QWORD)v192;
        v202 = (uint64_t)(v198 - (_QWORD)v192) >> 2;
        if (v202 <= v200 + 1)
          v202 = v200 + 1;
        if (v201 >= 0x7FFFFFFFFFFFFFF8)
          v203 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v203 = v202;
        if (v203)
        {
          v204 = (char *)sub_40FC((uint64_t)(v188 + 942), v203);
          v190 = (uint64_t *)v188[941];
          v192 = (uint64_t *)v188[940];
        }
        else
        {
          v204 = 0;
        }
        v205 = (uint64_t *)&v204[8 * v200];
        v206 = &v204[8 * v203];
        *v205 = v189;
        v199 = v205 + 1;
        while (v190 != v192)
        {
          v208 = *--v190;
          *--v205 = v208;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1)
        goto LABEL_294;
      v188 = *(_QWORD **)a1[1];
      v189 = *(_DWORD *)(a1[2] + 76) & 0xFFFFFLL;
      v190 = (uint64_t *)v188[941];
      v191 = v188[942];
      if ((unint64_t)v190 >= v191)
      {
        v192 = (uint64_t *)v188[940];
        v193 = v190 - v192;
        if ((unint64_t)(v193 + 1) >> 61)
          goto LABEL_488;
        v194 = v191 - (_QWORD)v192;
        v195 = (uint64_t)(v191 - (_QWORD)v192) >> 2;
        if (v195 <= v193 + 1)
          v195 = v193 + 1;
        if (v194 >= 0x7FFFFFFFFFFFFFF8)
          v196 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v196 = v195;
        if (v196)
        {
          v197 = (char *)sub_40FC((uint64_t)(v188 + 942), v196);
          v190 = (uint64_t *)v188[941];
          v192 = (uint64_t *)v188[940];
        }
        else
        {
          v197 = 0;
        }
        v205 = (uint64_t *)&v197[8 * v193];
        v206 = &v197[8 * v196];
        *v205 = v189;
        v199 = v205 + 1;
        while (v190 != v192)
        {
          v207 = *--v190;
          *--v205 = v207;
        }
LABEL_291:
        v188[940] = v205;
        v188[941] = v199;
        v188[942] = v206;
        if (v192)
          operator delete(v192);
        goto LABEL_293;
      }
    }
    *v190 = v189;
    v199 = v190 + 1;
LABEL_293:
    v188[941] = v199;
LABEL_294:
    v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      v210 = *(_QWORD **)a1[1];
      v211 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
      v212 = (uint64_t *)v210[944];
      v220 = v210[945];
      if ((unint64_t)v212 >= v220)
      {
        v214 = (uint64_t *)v210[943];
        v222 = v212 - v214;
        if ((unint64_t)(v222 + 1) >> 61)
          goto LABEL_488;
        v223 = v220 - (_QWORD)v214;
        v224 = (uint64_t)(v220 - (_QWORD)v214) >> 2;
        if (v224 <= v222 + 1)
          v224 = v222 + 1;
        if (v223 >= 0x7FFFFFFFFFFFFFF8)
          v225 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v225 = v224;
        if (v225)
        {
          v226 = (char *)sub_40FC((uint64_t)(v210 + 945), v225);
          v212 = (uint64_t *)v210[944];
          v214 = (uint64_t *)v210[943];
        }
        else
        {
          v226 = 0;
        }
        v227 = (uint64_t *)&v226[8 * v222];
        v228 = &v226[8 * v225];
        *v227 = v211;
        v221 = v227 + 1;
        while (v212 != v214)
        {
          v230 = *--v212;
          *--v227 = v230;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1)
        goto LABEL_326;
      v210 = *(_QWORD **)a1[1];
      v211 = *(_DWORD *)(a1[2] + 40) & 0x7FFFFLL;
      v212 = (uint64_t *)v210[944];
      v213 = v210[945];
      if ((unint64_t)v212 >= v213)
      {
        v214 = (uint64_t *)v210[943];
        v215 = v212 - v214;
        if ((unint64_t)(v215 + 1) >> 61)
          goto LABEL_488;
        v216 = v213 - (_QWORD)v214;
        v217 = (uint64_t)(v213 - (_QWORD)v214) >> 2;
        if (v217 <= v215 + 1)
          v217 = v215 + 1;
        if (v216 >= 0x7FFFFFFFFFFFFFF8)
          v218 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v218 = v217;
        if (v218)
        {
          v219 = (char *)sub_40FC((uint64_t)(v210 + 945), v218);
          v212 = (uint64_t *)v210[944];
          v214 = (uint64_t *)v210[943];
        }
        else
        {
          v219 = 0;
        }
        v227 = (uint64_t *)&v219[8 * v215];
        v228 = &v219[8 * v218];
        *v227 = v211;
        v221 = v227 + 1;
        while (v212 != v214)
        {
          v229 = *--v212;
          *--v227 = v229;
        }
LABEL_323:
        v210[943] = v227;
        v210[944] = v221;
        v210[945] = v228;
        if (v214)
          operator delete(v214);
        goto LABEL_325;
      }
    }
    *v212 = v211;
    v221 = v212 + 1;
LABEL_325:
    v210[944] = v221;
LABEL_326:
    v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      v232 = *(_QWORD **)a1[1];
      v233 = *(_DWORD *)(a1[2] + 72) & 0xFFFFFLL;
      v234 = (uint64_t *)v232[947];
      v242 = v232[948];
      if ((unint64_t)v234 >= v242)
      {
        v236 = (uint64_t *)v232[946];
        v244 = v234 - v236;
        if ((unint64_t)(v244 + 1) >> 61)
          goto LABEL_488;
        v245 = v242 - (_QWORD)v236;
        v246 = (uint64_t)(v242 - (_QWORD)v236) >> 2;
        if (v246 <= v244 + 1)
          v246 = v244 + 1;
        if (v245 >= 0x7FFFFFFFFFFFFFF8)
          v247 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v247 = v246;
        if (v247)
        {
          v248 = (char *)sub_40FC((uint64_t)(v232 + 948), v247);
          v234 = (uint64_t *)v232[947];
          v236 = (uint64_t *)v232[946];
        }
        else
        {
          v248 = 0;
        }
        v249 = (uint64_t *)&v248[8 * v244];
        v250 = &v248[8 * v247];
        *v249 = v233;
        v243 = v249 + 1;
        while (v234 != v236)
        {
          v252 = *--v234;
          *--v249 = v252;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1)
        goto LABEL_358;
      v232 = *(_QWORD **)a1[1];
      v233 = *(_DWORD *)(a1[2] + 72) & 0xFFFFFLL;
      v234 = (uint64_t *)v232[947];
      v235 = v232[948];
      if ((unint64_t)v234 >= v235)
      {
        v236 = (uint64_t *)v232[946];
        v237 = v234 - v236;
        if ((unint64_t)(v237 + 1) >> 61)
          goto LABEL_488;
        v238 = v235 - (_QWORD)v236;
        v239 = (uint64_t)(v235 - (_QWORD)v236) >> 2;
        if (v239 <= v237 + 1)
          v239 = v237 + 1;
        if (v238 >= 0x7FFFFFFFFFFFFFF8)
          v240 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v240 = v239;
        if (v240)
        {
          v241 = (char *)sub_40FC((uint64_t)(v232 + 948), v240);
          v234 = (uint64_t *)v232[947];
          v236 = (uint64_t *)v232[946];
        }
        else
        {
          v241 = 0;
        }
        v249 = (uint64_t *)&v241[8 * v237];
        v250 = &v241[8 * v240];
        *v249 = v233;
        v243 = v249 + 1;
        while (v234 != v236)
        {
          v251 = *--v234;
          *--v249 = v251;
        }
LABEL_355:
        v232[946] = v249;
        v232[947] = v243;
        v232[948] = v250;
        if (v236)
          operator delete(v236);
        goto LABEL_357;
      }
    }
    *v234 = v233;
    v243 = v234 + 1;
LABEL_357:
    v232[947] = v243;
LABEL_358:
    v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      v254 = *(_QWORD **)a1[1];
      v255 = *(_DWORD *)(a1[2] + 20) & 0x7FFFFLL;
      v256 = (uint64_t *)v254[950];
      v264 = v254[951];
      if ((unint64_t)v256 >= v264)
      {
        v258 = (uint64_t *)v254[949];
        v266 = v256 - v258;
        if ((unint64_t)(v266 + 1) >> 61)
          goto LABEL_488;
        v267 = v264 - (_QWORD)v258;
        v268 = (uint64_t)(v264 - (_QWORD)v258) >> 2;
        if (v268 <= v266 + 1)
          v268 = v266 + 1;
        if (v267 >= 0x7FFFFFFFFFFFFFF8)
          v269 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v269 = v268;
        if (v269)
        {
          v270 = (char *)sub_40FC((uint64_t)(v254 + 951), v269);
          v256 = (uint64_t *)v254[950];
          v258 = (uint64_t *)v254[949];
        }
        else
        {
          v270 = 0;
        }
        v271 = (uint64_t *)&v270[8 * v266];
        v272 = &v270[8 * v269];
        *v271 = v255;
        v265 = v271 + 1;
        while (v256 != v258)
        {
          v274 = *--v256;
          *--v271 = v274;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1)
        goto LABEL_390;
      v254 = *(_QWORD **)a1[1];
      v255 = *(_DWORD *)(a1[2] + 20) & 0x7FFFFLL;
      v256 = (uint64_t *)v254[950];
      v257 = v254[951];
      if ((unint64_t)v256 >= v257)
      {
        v258 = (uint64_t *)v254[949];
        v259 = v256 - v258;
        if ((unint64_t)(v259 + 1) >> 61)
          goto LABEL_488;
        v260 = v257 - (_QWORD)v258;
        v261 = (uint64_t)(v257 - (_QWORD)v258) >> 2;
        if (v261 <= v259 + 1)
          v261 = v259 + 1;
        if (v260 >= 0x7FFFFFFFFFFFFFF8)
          v262 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v262 = v261;
        if (v262)
        {
          v263 = (char *)sub_40FC((uint64_t)(v254 + 951), v262);
          v256 = (uint64_t *)v254[950];
          v258 = (uint64_t *)v254[949];
        }
        else
        {
          v263 = 0;
        }
        v271 = (uint64_t *)&v263[8 * v259];
        v272 = &v263[8 * v262];
        *v271 = v255;
        v265 = v271 + 1;
        while (v256 != v258)
        {
          v273 = *--v256;
          *--v271 = v273;
        }
LABEL_387:
        v254[949] = v271;
        v254[950] = v265;
        v254[951] = v272;
        if (v258)
          operator delete(v258);
        goto LABEL_389;
      }
    }
    *v256 = v255;
    v265 = v256 + 1;
LABEL_389:
    v254[950] = v265;
LABEL_390:
    v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      v276 = *(_QWORD **)a1[1];
      v277 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
      v278 = (uint64_t *)v276[953];
      v286 = v276[954];
      if ((unint64_t)v278 >= v286)
      {
        v280 = (uint64_t *)v276[952];
        v288 = v278 - v280;
        if ((unint64_t)(v288 + 1) >> 61)
          goto LABEL_488;
        v289 = v286 - (_QWORD)v280;
        v290 = (uint64_t)(v286 - (_QWORD)v280) >> 2;
        if (v290 <= v288 + 1)
          v290 = v288 + 1;
        if (v289 >= 0x7FFFFFFFFFFFFFF8)
          v291 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v291 = v290;
        if (v291)
        {
          v292 = (char *)sub_40FC((uint64_t)(v276 + 954), v291);
          v278 = (uint64_t *)v276[953];
          v280 = (uint64_t *)v276[952];
        }
        else
        {
          v292 = 0;
        }
        v293 = (uint64_t *)&v292[8 * v288];
        v294 = &v292[8 * v291];
        *v293 = v277;
        v287 = v293 + 1;
        while (v278 != v280)
        {
          v296 = *--v278;
          *--v293 = v296;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1)
        goto LABEL_422;
      v276 = *(_QWORD **)a1[1];
      v277 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
      v278 = (uint64_t *)v276[953];
      v279 = v276[954];
      if ((unint64_t)v278 >= v279)
      {
        v280 = (uint64_t *)v276[952];
        v281 = v278 - v280;
        if ((unint64_t)(v281 + 1) >> 61)
          goto LABEL_488;
        v282 = v279 - (_QWORD)v280;
        v283 = (uint64_t)(v279 - (_QWORD)v280) >> 2;
        if (v283 <= v281 + 1)
          v283 = v281 + 1;
        if (v282 >= 0x7FFFFFFFFFFFFFF8)
          v284 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v284 = v283;
        if (v284)
        {
          v285 = (char *)sub_40FC((uint64_t)(v276 + 954), v284);
          v278 = (uint64_t *)v276[953];
          v280 = (uint64_t *)v276[952];
        }
        else
        {
          v285 = 0;
        }
        v293 = (uint64_t *)&v285[8 * v281];
        v294 = &v285[8 * v284];
        *v293 = v277;
        v287 = v293 + 1;
        while (v278 != v280)
        {
          v295 = *--v278;
          *--v293 = v295;
        }
LABEL_419:
        v276[952] = v293;
        v276[953] = v287;
        v276[954] = v294;
        if (v280)
          operator delete(v280);
        goto LABEL_421;
      }
    }
    *v278 = v277;
    v287 = v278 + 1;
LABEL_421:
    v276[953] = v287;
LABEL_422:
    v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      v298 = *(_QWORD **)a1[1];
      v299 = *(_DWORD *)(a1[2] + 24) & 0x7FFFFLL;
      v300 = (uint64_t *)v298[956];
      v308 = v298[957];
      if ((unint64_t)v300 >= v308)
      {
        v302 = (uint64_t *)v298[955];
        v310 = v300 - v302;
        if ((unint64_t)(v310 + 1) >> 61)
          goto LABEL_488;
        v311 = v308 - (_QWORD)v302;
        v312 = (uint64_t)(v308 - (_QWORD)v302) >> 2;
        if (v312 <= v310 + 1)
          v312 = v310 + 1;
        if (v311 >= 0x7FFFFFFFFFFFFFF8)
          v313 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v313 = v312;
        if (v313)
        {
          v314 = (char *)sub_40FC((uint64_t)(v298 + 957), v313);
          v300 = (uint64_t *)v298[956];
          v302 = (uint64_t *)v298[955];
        }
        else
        {
          v314 = 0;
        }
        v315 = (uint64_t *)&v314[8 * v310];
        v316 = &v314[8 * v313];
        *v315 = v299;
        v309 = v315 + 1;
        while (v300 != v302)
        {
          v318 = *--v300;
          *--v315 = v318;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v297 != 1)
        goto LABEL_454;
      v298 = *(_QWORD **)a1[1];
      v299 = *(_DWORD *)(a1[2] + 24) & 0x7FFFFLL;
      v300 = (uint64_t *)v298[956];
      v301 = v298[957];
      if ((unint64_t)v300 >= v301)
      {
        v302 = (uint64_t *)v298[955];
        v303 = v300 - v302;
        if ((unint64_t)(v303 + 1) >> 61)
          goto LABEL_488;
        v304 = v301 - (_QWORD)v302;
        v305 = (uint64_t)(v301 - (_QWORD)v302) >> 2;
        if (v305 <= v303 + 1)
          v305 = v303 + 1;
        if (v304 >= 0x7FFFFFFFFFFFFFF8)
          v306 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v306 = v305;
        if (v306)
        {
          v307 = (char *)sub_40FC((uint64_t)(v298 + 957), v306);
          v300 = (uint64_t *)v298[956];
          v302 = (uint64_t *)v298[955];
        }
        else
        {
          v307 = 0;
        }
        v315 = (uint64_t *)&v307[8 * v303];
        v316 = &v307[8 * v306];
        *v315 = v299;
        v309 = v315 + 1;
        while (v300 != v302)
        {
          v317 = *--v300;
          *--v315 = v317;
        }
LABEL_451:
        v298[955] = v315;
        v298[956] = v309;
        v298[957] = v316;
        if (v302)
          operator delete(v302);
        goto LABEL_453;
      }
    }
    *v300 = v299;
    v309 = v300 + 1;
LABEL_453:
    v298[956] = v309;
LABEL_454:
    v319 = 1 << *(_DWORD *)(v3 + 48);
    if (v319 == 2)
    {
      v331 = a1[2];
      v321 = *(_QWORD **)a1[1];
      v322 = *(_DWORD *)(v331 + 56) & 0xFFFFFLL;
      v323 = (uint64_t *)v321[959];
      v332 = v321[960];
      if ((unint64_t)v323 >= v332)
      {
        v325 = (uint64_t *)v321[958];
        v334 = v323 - v325;
        if (!((unint64_t)(v334 + 1) >> 61))
        {
          v335 = v332 - (_QWORD)v325;
          v336 = (uint64_t)(v332 - (_QWORD)v325) >> 2;
          if (v336 <= v334 + 1)
            v336 = v334 + 1;
          if (v335 >= 0x7FFFFFFFFFFFFFF8)
            v337 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v337 = v336;
          if (v337)
          {
            v338 = (char *)sub_40FC((uint64_t)(v321 + 960), v337);
            v323 = (uint64_t *)v321[959];
            v325 = (uint64_t *)v321[958];
          }
          else
          {
            v338 = 0;
          }
          v339 = (uint64_t *)&v338[8 * v334];
          v340 = &v338[8 * v337];
          *v339 = v322;
          v333 = v339 + 1;
          while (v323 != v325)
          {
            v342 = *--v323;
            *--v339 = v342;
          }
          goto LABEL_483;
        }
LABEL_488:
        sub_4074();
      }
    }
    else
    {
      if (v319 != 1)
      {
LABEL_486:
        *a2 = 1;
        return;
      }
      v320 = a1[2];
      v321 = *(_QWORD **)a1[1];
      v322 = *(_DWORD *)(v320 + 56) & 0xFFFFFLL;
      v323 = (uint64_t *)v321[959];
      v324 = v321[960];
      if ((unint64_t)v323 >= v324)
      {
        v325 = (uint64_t *)v321[958];
        v326 = v323 - v325;
        if (!((unint64_t)(v326 + 1) >> 61))
        {
          v327 = v324 - (_QWORD)v325;
          v328 = (uint64_t)(v324 - (_QWORD)v325) >> 2;
          if (v328 <= v326 + 1)
            v328 = v326 + 1;
          if (v327 >= 0x7FFFFFFFFFFFFFF8)
            v329 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v329 = v328;
          if (v329)
          {
            v330 = (char *)sub_40FC((uint64_t)(v321 + 960), v329);
            v323 = (uint64_t *)v321[959];
            v325 = (uint64_t *)v321[958];
          }
          else
          {
            v330 = 0;
          }
          v339 = (uint64_t *)&v330[8 * v326];
          v340 = &v330[8 * v329];
          *v339 = v322;
          v333 = v339 + 1;
          while (v323 != v325)
          {
            v341 = *--v323;
            *--v339 = v341;
          }
LABEL_483:
          v321[958] = v339;
          v321[959] = v333;
          v321[960] = v340;
          if (v325)
            operator delete(v325);
          goto LABEL_485;
        }
        goto LABEL_488;
      }
    }
    *v323 = v322;
    v333 = v323 + 1;
LABEL_485:
    v321[959] = v333;
    goto LABEL_486;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[917] - 8) += *(_DWORD *)(v17 + 36) & 0x7FFFF;
    *(_QWORD *)(v19[920] - 8) += *(_DWORD *)(v17 + 68) & 0xFFFFF;
    *(_QWORD *)(v19[923] - 8) += *(_WORD *)(v17 + 48) & 0x7FFF;
    *(_QWORD *)(v19[926] - 8) += *(_DWORD *)(v17 + 32) & 0x7FFFF;
    *(_QWORD *)(v19[929] - 8) += *(_DWORD *)(v17 + 64) & 0xFFFFF;
    *(_QWORD *)(v19[932] - 8) += *(_DWORD *)(v17 + 28) & 0x7FFFF;
    *(_QWORD *)(v19[935] - 8) += *(_DWORD *)(v17 + 60) & 0xFFFFF;
    *(_QWORD *)(v19[938] - 8) += *(_DWORD *)(v17 + 44) & 0x7FFFF;
    *(_QWORD *)(v19[941] - 8) += *(_DWORD *)(v17 + 76) & 0xFFFFF;
    *(_QWORD *)(v19[944] - 8) += *(_DWORD *)(v17 + 40) & 0x7FFFF;
    v20 = (_DWORD *)a1[2];
    v21 = (_QWORD *)*v18;
    *(_QWORD *)(v21[947] - 8) += v20[18] & 0xFFFFF;
    *(_QWORD *)(v21[950] - 8) += v20[5] & 0x7FFFF;
    *(_QWORD *)(v21[953] - 8) += v20[13] & 0xFFFFF;
    *(_QWORD *)(v21[956] - 8) += v20[6] & 0x7FFFF;
    *(_QWORD *)(v21[959] - 8) += v20[14] & 0xFFFFF;
  }
}

void sub_CF174(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      v8 = (uint64_t *)v6[314];
      v19 = v6[315];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (uint64_t *)v6[313];
        v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_200;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 315), v24);
          v8 = (uint64_t *)v6[314];
          v10 = (uint64_t *)v6[313];
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v29 = *--v8;
          *--v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      v8 = (uint64_t *)v6[314];
      v9 = v6[315];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[313];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_200;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 315), v14);
          v8 = (uint64_t *)v6[314];
          v10 = (uint64_t *)v6[313];
        }
        else
        {
          v15 = 0;
        }
        v26 = (uint64_t *)&v15[8 * v11];
        v27 = &v15[8 * v14];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v28 = *--v8;
          *--v26 = v28;
        }
LABEL_35:
        v6[313] = v26;
        v6[314] = v20;
        v6[315] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v20 = v8 + 1;
LABEL_37:
    v6[314] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      v33 = (uint64_t *)v31[317];
      v41 = v31[318];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[316];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_200;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 318), v46);
          v33 = (uint64_t *)v31[317];
          v35 = (uint64_t *)v31[316];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      v33 = (uint64_t *)v31[317];
      v34 = v31[318];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[316];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_200;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 318), v39);
          v33 = (uint64_t *)v31[317];
          v35 = (uint64_t *)v31[316];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[316] = v48;
        v31[317] = v42;
        v31[318] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[317] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 24) & 0x1FFFFLL;
      v55 = (uint64_t *)v53[320];
      v63 = v53[321];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (uint64_t *)v53[319];
        v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_200;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 321), v68);
          v55 = (uint64_t *)v53[320];
          v57 = (uint64_t *)v53[319];
        }
        else
        {
          v69 = 0;
        }
        v70 = (uint64_t *)&v69[8 * v65];
        v71 = &v69[8 * v68];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v73 = *--v55;
          *--v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 24) & 0x1FFFFLL;
      v55 = (uint64_t *)v53[320];
      v56 = v53[321];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (uint64_t *)v53[319];
        v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_200;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 321), v61);
          v55 = (uint64_t *)v53[320];
          v57 = (uint64_t *)v53[319];
        }
        else
        {
          v62 = 0;
        }
        v70 = (uint64_t *)&v62[8 * v58];
        v71 = &v62[8 * v61];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v72 = *--v55;
          *--v70 = v72;
        }
LABEL_99:
        v53[319] = v70;
        v53[320] = v64;
        v53[321] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *v55 = v54;
    v64 = v55 + 1;
LABEL_101:
    v53[320] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v75 = *(_QWORD **)a1[1];
      v76 = *(_DWORD *)(a1[2] + 36) & 0x1FFFFFLL;
      v77 = (uint64_t *)v75[323];
      v85 = v75[324];
      if ((unint64_t)v77 >= v85)
      {
        v79 = (uint64_t *)v75[322];
        v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61)
          goto LABEL_200;
        v88 = v85 - (_QWORD)v79;
        v89 = (uint64_t)(v85 - (_QWORD)v79) >> 2;
        if (v89 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v91 = (char *)sub_40FC((uint64_t)(v75 + 324), v90);
          v77 = (uint64_t *)v75[323];
          v79 = (uint64_t *)v75[322];
        }
        else
        {
          v91 = 0;
        }
        v92 = (uint64_t *)&v91[8 * v87];
        v93 = &v91[8 * v90];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v95 = *--v77;
          *--v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1)
        goto LABEL_134;
      v75 = *(_QWORD **)a1[1];
      v76 = *(_DWORD *)(a1[2] + 36) & 0x1FFFFFLL;
      v77 = (uint64_t *)v75[323];
      v78 = v75[324];
      if ((unint64_t)v77 >= v78)
      {
        v79 = (uint64_t *)v75[322];
        v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61)
          goto LABEL_200;
        v81 = v78 - (_QWORD)v79;
        v82 = (uint64_t)(v78 - (_QWORD)v79) >> 2;
        if (v82 <= v80 + 1)
          v82 = v80 + 1;
        if (v81 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
        {
          v84 = (char *)sub_40FC((uint64_t)(v75 + 324), v83);
          v77 = (uint64_t *)v75[323];
          v79 = (uint64_t *)v75[322];
        }
        else
        {
          v84 = 0;
        }
        v92 = (uint64_t *)&v84[8 * v80];
        v93 = &v84[8 * v83];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v94 = *--v77;
          *--v92 = v94;
        }
LABEL_131:
        v75[322] = v92;
        v75[323] = v86;
        v75[324] = v93;
        if (v79)
          operator delete(v79);
        goto LABEL_133;
      }
    }
    *v77 = v76;
    v86 = v77 + 1;
LABEL_133:
    v75[323] = v86;
LABEL_134:
    v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      v108 = a1[1];
      v98 = *(_QWORD **)v108;
      v99 = *(unsigned __int16 *)(a1[2] + 22);
      v100 = *(char **)(*(_QWORD *)v108 + 2608);
      v109 = *(_QWORD *)(*(_QWORD *)v108 + 2616);
      if ((unint64_t)v100 >= v109)
      {
        v102 = (char *)v98[325];
        v111 = (v100 - v102) >> 3;
        if ((unint64_t)(v111 + 1) >> 61)
          goto LABEL_200;
        v112 = v109 - (_QWORD)v102;
        v113 = (uint64_t)(v109 - (_QWORD)v102) >> 2;
        if (v113 <= v111 + 1)
          v113 = v111 + 1;
        if (v112 >= 0x7FFFFFFFFFFFFFF8)
          v114 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v114 = v113;
        if (v114)
        {
          v115 = (char *)sub_40FC((uint64_t)(v98 + 327), v114);
          v100 = (char *)v98[326];
          v102 = (char *)v98[325];
        }
        else
        {
          v115 = 0;
        }
        v116 = &v115[8 * v111];
        v117 = &v115[8 * v114];
        *(_QWORD *)v116 = v99;
        v110 = v116 + 8;
        while (v100 != v102)
        {
          v119 = *((_QWORD *)v100 - 1);
          v100 -= 8;
          *((_QWORD *)v116 - 1) = v119;
          v116 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1)
        goto LABEL_166;
      v97 = a1[1];
      v98 = *(_QWORD **)v97;
      v99 = *(unsigned __int16 *)(a1[2] + 22);
      v100 = *(char **)(*(_QWORD *)v97 + 2608);
      v101 = *(_QWORD *)(*(_QWORD *)v97 + 2616);
      if ((unint64_t)v100 >= v101)
      {
        v102 = (char *)v98[325];
        v103 = (v100 - v102) >> 3;
        if ((unint64_t)(v103 + 1) >> 61)
          goto LABEL_200;
        v104 = v101 - (_QWORD)v102;
        v105 = (uint64_t)(v101 - (_QWORD)v102) >> 2;
        if (v105 <= v103 + 1)
          v105 = v103 + 1;
        if (v104 >= 0x7FFFFFFFFFFFFFF8)
          v106 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v106 = v105;
        if (v106)
        {
          v107 = (char *)sub_40FC((uint64_t)(v98 + 327), v106);
          v100 = (char *)v98[326];
          v102 = (char *)v98[325];
        }
        else
        {
          v107 = 0;
        }
        v116 = &v107[8 * v103];
        v117 = &v107[8 * v106];
        *(_QWORD *)v116 = v99;
        v110 = v116 + 8;
        while (v100 != v102)
        {
          v118 = *((_QWORD *)v100 - 1);
          v100 -= 8;
          *((_QWORD *)v116 - 1) = v118;
          v116 -= 8;
        }
LABEL_163:
        v98[325] = v116;
        v98[326] = v110;
        v98[327] = v117;
        if (v102)
          operator delete(v102);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v100 = v99;
    v110 = v100 + 8;
LABEL_165:
    v98[326] = v110;
LABEL_166:
    v120 = 1 << *(_DWORD *)(v3 + 48);
    if (v120 == 2)
    {
      v133 = a1[1];
      v134 = a1[2];
      v123 = *(_QWORD **)v133;
      v124 = *(unsigned __int16 *)(v134 + 20);
      v125 = *(char **)(*(_QWORD *)v133 + 2632);
      v135 = *(_QWORD *)(*(_QWORD *)v133 + 2640);
      if ((unint64_t)v125 >= v135)
      {
        v127 = (char *)v123[328];
        v137 = (v125 - v127) >> 3;
        if (!((unint64_t)(v137 + 1) >> 61))
        {
          v138 = v135 - (_QWORD)v127;
          v139 = (uint64_t)(v135 - (_QWORD)v127) >> 2;
          if (v139 <= v137 + 1)
            v139 = v137 + 1;
          if (v138 >= 0x7FFFFFFFFFFFFFF8)
            v140 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v140 = v139;
          if (v140)
          {
            v141 = (char *)sub_40FC((uint64_t)(v123 + 330), v140);
            v125 = (char *)v123[329];
            v127 = (char *)v123[328];
          }
          else
          {
            v141 = 0;
          }
          v142 = &v141[8 * v137];
          v143 = &v141[8 * v140];
          *(_QWORD *)v142 = v124;
          v136 = v142 + 8;
          while (v125 != v127)
          {
            v145 = *((_QWORD *)v125 - 1);
            v125 -= 8;
            *((_QWORD *)v142 - 1) = v145;
            v142 -= 8;
          }
          goto LABEL_195;
        }
LABEL_200:
        sub_4074();
      }
    }
    else
    {
      if (v120 != 1)
      {
LABEL_198:
        *a2 = 1;
        return;
      }
      v121 = a1[1];
      v122 = a1[2];
      v123 = *(_QWORD **)v121;
      v124 = *(unsigned __int16 *)(v122 + 20);
      v125 = *(char **)(*(_QWORD *)v121 + 2632);
      v126 = *(_QWORD *)(*(_QWORD *)v121 + 2640);
      if ((unint64_t)v125 >= v126)
      {
        v127 = (char *)v123[328];
        v128 = (v125 - v127) >> 3;
        if (!((unint64_t)(v128 + 1) >> 61))
        {
          v129 = v126 - (_QWORD)v127;
          v130 = (uint64_t)(v126 - (_QWORD)v127) >> 2;
          if (v130 <= v128 + 1)
            v130 = v128 + 1;
          if (v129 >= 0x7FFFFFFFFFFFFFF8)
            v131 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v131 = v130;
          if (v131)
          {
            v132 = (char *)sub_40FC((uint64_t)(v123 + 330), v131);
            v125 = (char *)v123[329];
            v127 = (char *)v123[328];
          }
          else
          {
            v132 = 0;
          }
          v142 = &v132[8 * v128];
          v143 = &v132[8 * v131];
          *(_QWORD *)v142 = v124;
          v136 = v142 + 8;
          while (v125 != v127)
          {
            v144 = *((_QWORD *)v125 - 1);
            v125 -= 8;
            *((_QWORD *)v142 - 1) = v144;
            v142 -= 8;
          }
LABEL_195:
          v123[328] = v142;
          v123[329] = v136;
          v123[330] = v143;
          if (v127)
            operator delete(v127);
          goto LABEL_197;
        }
        goto LABEL_200;
      }
    }
    *(_QWORD *)v125 = v124;
    v136 = v125 + 8;
LABEL_197:
    v123[329] = v136;
    goto LABEL_198;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[314] - 8) += *(_DWORD *)(v17 + 32) & 0x1FFFF;
    *(_QWORD *)(v18[317] - 8) += *(_DWORD *)(v17 + 28) & 0x1FFFF;
    *(_QWORD *)(v18[320] - 8) += *(_DWORD *)(v17 + 24) & 0x1FFFF;
    *(_QWORD *)(v18[323] - 8) += *(_DWORD *)(v17 + 36) & 0x1FFFFF;
    *(_QWORD *)(v18[326] - 8) += *(unsigned __int16 *)(v17 + 22);
    *(_QWORD *)(v18[329] - 8) += *(unsigned __int16 *)(v17 + 20);
  }
}

void sub_CFB68(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  _WORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _WORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  _QWORD *v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  unint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  _QWORD *v148;
  uint64_t v149;
  char *v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  _QWORD *v170;
  uint64_t v171;
  char *v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  _QWORD *v192;
  uint64_t v193;
  char *v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  unint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  _QWORD *v214;
  uint64_t v215;
  char *v216;
  unint64_t v217;
  char *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  _QWORD *v236;
  uint64_t v237;
  char *v238;
  unint64_t v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  unint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  char *v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  _QWORD *v258;
  uint64_t v259;
  char *v260;
  unint64_t v261;
  char *v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  char *v267;
  unint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  char *v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  _QWORD *v280;
  uint64_t v281;
  char *v282;
  unint64_t v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  unint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  char *v296;
  char *v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  _QWORD *v302;
  uint64_t v303;
  char *v304;
  unint64_t v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  char *v311;
  unint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  char *v318;
  char *v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  _QWORD *v324;
  uint64_t v325;
  char *v326;
  unint64_t v327;
  char *v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  char *v333;
  unint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  char *v340;
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  _QWORD *v346;
  uint64_t v347;
  char *v348;
  unint64_t v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  char *v355;
  unint64_t v356;
  _QWORD *v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  char *v362;
  char *v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  _QWORD *v368;
  uint64_t v369;
  char *v370;
  unint64_t v371;
  char *v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  char *v377;
  unint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  char *v384;
  char *v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  _QWORD *v390;
  uint64_t v391;
  char *v392;
  unint64_t v393;
  char *v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  unint64_t v398;
  char *v399;
  unint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  char *v406;
  char *v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  _QWORD *v412;
  uint64_t v413;
  char *v414;
  unint64_t v415;
  char *v416;
  uint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  char *v421;
  unint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  char *v428;
  char *v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  _QWORD *v434;
  uint64_t v435;
  char *v436;
  unint64_t v437;
  char *v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  char *v443;
  unint64_t v444;
  _QWORD *v445;
  uint64_t v446;
  unint64_t v447;
  unint64_t v448;
  unint64_t v449;
  char *v450;
  char *v451;
  char *v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  _QWORD *v456;
  uint64_t v457;
  char *v458;
  unint64_t v459;
  char *v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  char *v465;
  unint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  char *v472;
  char *v473;
  char *v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  _QWORD *v478;
  uint64_t v479;
  char *v480;
  unint64_t v481;
  char *v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  char *v487;
  unint64_t v488;
  _QWORD *v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  char *v494;
  char *v495;
  char *v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  _QWORD *v500;
  uint64_t v501;
  char *v502;
  unint64_t v503;
  char *v504;
  uint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t v508;
  char *v509;
  unint64_t v510;
  _QWORD *v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  char *v516;
  char *v517;
  char *v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  _QWORD *v522;
  uint64_t v523;
  char *v524;
  unint64_t v525;
  char *v526;
  uint64_t v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  char *v531;
  unint64_t v532;
  _QWORD *v533;
  uint64_t v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  char *v538;
  char *v539;
  char *v540;
  uint64_t v541;
  uint64_t v542;
  int v543;
  _QWORD *v544;
  uint64_t v545;
  char *v546;
  unint64_t v547;
  char *v548;
  uint64_t v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  char *v553;
  unint64_t v554;
  _QWORD *v555;
  uint64_t v556;
  unint64_t v557;
  unint64_t v558;
  unint64_t v559;
  char *v560;
  char *v561;
  char *v562;
  uint64_t v563;
  uint64_t v564;
  int v565;
  _QWORD *v566;
  uint64_t v567;
  char *v568;
  unint64_t v569;
  char *v570;
  uint64_t v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  char *v575;
  unint64_t v576;
  _QWORD *v577;
  uint64_t v578;
  unint64_t v579;
  unint64_t v580;
  unint64_t v581;
  char *v582;
  char *v583;
  char *v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  _QWORD *v588;
  uint64_t v589;
  char *v590;
  unint64_t v591;
  char *v592;
  uint64_t v593;
  unint64_t v594;
  unint64_t v595;
  unint64_t v596;
  char *v597;
  unint64_t v598;
  _QWORD *v599;
  uint64_t v600;
  unint64_t v601;
  unint64_t v602;
  unint64_t v603;
  char *v604;
  char *v605;
  char *v606;
  uint64_t v607;
  uint64_t v608;
  int v609;
  _QWORD *v610;
  uint64_t v611;
  char *v612;
  unint64_t v613;
  char *v614;
  uint64_t v615;
  unint64_t v616;
  unint64_t v617;
  unint64_t v618;
  char *v619;
  unint64_t v620;
  _QWORD *v621;
  uint64_t v622;
  unint64_t v623;
  unint64_t v624;
  unint64_t v625;
  char *v626;
  char *v627;
  char *v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  _QWORD *v632;
  uint64_t v633;
  char *v634;
  unint64_t v635;
  char *v636;
  uint64_t v637;
  unint64_t v638;
  unint64_t v639;
  unint64_t v640;
  char *v641;
  unint64_t v642;
  _QWORD *v643;
  uint64_t v644;
  unint64_t v645;
  unint64_t v646;
  unint64_t v647;
  char *v648;
  char *v649;
  char *v650;
  uint64_t v651;
  uint64_t v652;
  int v653;
  _QWORD *v654;
  uint64_t v655;
  char *v656;
  unint64_t v657;
  char *v658;
  uint64_t v659;
  unint64_t v660;
  unint64_t v661;
  unint64_t v662;
  char *v663;
  unint64_t v664;
  _QWORD *v665;
  uint64_t v666;
  unint64_t v667;
  unint64_t v668;
  unint64_t v669;
  char *v670;
  char *v671;
  char *v672;
  uint64_t v673;
  uint64_t v674;
  int v675;
  _QWORD *v676;
  uint64_t v677;
  char *v678;
  unint64_t v679;
  char *v680;
  uint64_t v681;
  unint64_t v682;
  unint64_t v683;
  unint64_t v684;
  char *v685;
  unint64_t v686;
  _QWORD *v687;
  uint64_t v688;
  unint64_t v689;
  unint64_t v690;
  unint64_t v691;
  char *v692;
  char *v693;
  char *v694;
  uint64_t v695;
  uint64_t v696;
  int v697;
  uint64_t v698;
  _QWORD *v699;
  uint64_t v700;
  char *v701;
  unint64_t v702;
  char *v703;
  uint64_t v704;
  unint64_t v705;
  unint64_t v706;
  unint64_t v707;
  char *v708;
  uint64_t v709;
  unint64_t v710;
  _QWORD *v711;
  uint64_t v712;
  unint64_t v713;
  unint64_t v714;
  unint64_t v715;
  char *v716;
  char *v717;
  char *v718;
  uint64_t v719;
  uint64_t v720;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 78) & 0x1FFF;
      v8 = (char *)v6[497];
      v26 = v6[498];
      if ((unint64_t)v8 >= v26)
      {
        v10 = (char *)v6[496];
        v28 = (v8 - v10) >> 3;
        if ((unint64_t)(v28 + 1) >> 61)
          goto LABEL_1032;
        v29 = v26 - (_QWORD)v10;
        v30 = (uint64_t)(v26 - (_QWORD)v10) >> 2;
        if (v30 <= v28 + 1)
          v30 = v28 + 1;
        if (v29 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
        {
          v32 = (char *)sub_40FC((uint64_t)(v6 + 498), v31);
          v8 = (char *)v6[497];
          v10 = (char *)v6[496];
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[8 * v28];
        v34 = &v32[8 * v31];
        *(_QWORD *)v33 = v7;
        v27 = v33 + 8;
        while (v8 != v10)
        {
          v36 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v33 - 1) = v36;
          v33 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 78) & 0x1FFF;
      v8 = (char *)v6[497];
      v9 = v6[498];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[496];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_1032;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 498), v14);
          v8 = (char *)v6[497];
          v10 = (char *)v6[496];
        }
        else
        {
          v15 = 0;
        }
        v33 = &v15[8 * v11];
        v34 = &v15[8 * v14];
        *(_QWORD *)v33 = v7;
        v27 = v33 + 8;
        while (v8 != v10)
        {
          v35 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v33 - 1) = v35;
          v33 -= 8;
        }
LABEL_35:
        v6[496] = v33;
        v6[497] = v27;
        v6[498] = v34;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v27 = v8 + 8;
LABEL_37:
    v6[497] = v27;
LABEL_38:
    v37 = 1 << *(_DWORD *)(v3 + 48);
    if (v37 == 2)
    {
      v38 = *(_QWORD **)a1[1];
      v39 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
      v40 = (char *)v38[500];
      v48 = v38[501];
      if ((unint64_t)v40 >= v48)
      {
        v42 = (char *)v38[499];
        v50 = (v40 - v42) >> 3;
        if ((unint64_t)(v50 + 1) >> 61)
          goto LABEL_1032;
        v51 = v48 - (_QWORD)v42;
        v52 = (uint64_t)(v48 - (_QWORD)v42) >> 2;
        if (v52 <= v50 + 1)
          v52 = v50 + 1;
        if (v51 >= 0x7FFFFFFFFFFFFFF8)
          v53 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
        {
          v54 = (char *)sub_40FC((uint64_t)(v38 + 501), v53);
          v40 = (char *)v38[500];
          v42 = (char *)v38[499];
        }
        else
        {
          v54 = 0;
        }
        v55 = &v54[8 * v50];
        v56 = &v54[8 * v53];
        *(_QWORD *)v55 = v39;
        v49 = v55 + 8;
        while (v40 != v42)
        {
          v58 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *((_QWORD *)v55 - 1) = v58;
          v55 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v37 != 1)
        goto LABEL_70;
      v38 = *(_QWORD **)a1[1];
      v39 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
      v40 = (char *)v38[500];
      v41 = v38[501];
      if ((unint64_t)v40 >= v41)
      {
        v42 = (char *)v38[499];
        v43 = (v40 - v42) >> 3;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_1032;
        v44 = v41 - (_QWORD)v42;
        v45 = (uint64_t)(v41 - (_QWORD)v42) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v38 + 501), v46);
          v40 = (char *)v38[500];
          v42 = (char *)v38[499];
        }
        else
        {
          v47 = 0;
        }
        v55 = &v47[8 * v43];
        v56 = &v47[8 * v46];
        *(_QWORD *)v55 = v39;
        v49 = v55 + 8;
        while (v40 != v42)
        {
          v57 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *((_QWORD *)v55 - 1) = v57;
          v55 -= 8;
        }
LABEL_67:
        v38[499] = v55;
        v38[500] = v49;
        v38[501] = v56;
        if (v42)
          operator delete(v42);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v40 = v39;
    v49 = v40 + 8;
LABEL_69:
    v38[500] = v49;
LABEL_70:
    v59 = 1 << *(_DWORD *)(v3 + 48);
    if (v59 == 2)
    {
      v60 = *(_QWORD **)a1[1];
      v61 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
      v62 = (char *)v60[503];
      v70 = v60[504];
      if ((unint64_t)v62 >= v70)
      {
        v64 = (char *)v60[502];
        v72 = (v62 - v64) >> 3;
        if ((unint64_t)(v72 + 1) >> 61)
          goto LABEL_1032;
        v73 = v70 - (_QWORD)v64;
        v74 = (uint64_t)(v70 - (_QWORD)v64) >> 2;
        if (v74 <= v72 + 1)
          v74 = v72 + 1;
        if (v73 >= 0x7FFFFFFFFFFFFFF8)
          v75 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v75 = v74;
        if (v75)
        {
          v76 = (char *)sub_40FC((uint64_t)(v60 + 504), v75);
          v62 = (char *)v60[503];
          v64 = (char *)v60[502];
        }
        else
        {
          v76 = 0;
        }
        v77 = &v76[8 * v72];
        v78 = &v76[8 * v75];
        *(_QWORD *)v77 = v61;
        v71 = v77 + 8;
        while (v62 != v64)
        {
          v80 = *((_QWORD *)v62 - 1);
          v62 -= 8;
          *((_QWORD *)v77 - 1) = v80;
          v77 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v59 != 1)
        goto LABEL_102;
      v60 = *(_QWORD **)a1[1];
      v61 = *(_WORD *)(a1[2] + 46) & 0x3FFF;
      v62 = (char *)v60[503];
      v63 = v60[504];
      if ((unint64_t)v62 >= v63)
      {
        v64 = (char *)v60[502];
        v65 = (v62 - v64) >> 3;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_1032;
        v66 = v63 - (_QWORD)v64;
        v67 = (uint64_t)(v63 - (_QWORD)v64) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v60 + 504), v68);
          v62 = (char *)v60[503];
          v64 = (char *)v60[502];
        }
        else
        {
          v69 = 0;
        }
        v77 = &v69[8 * v65];
        v78 = &v69[8 * v68];
        *(_QWORD *)v77 = v61;
        v71 = v77 + 8;
        while (v62 != v64)
        {
          v79 = *((_QWORD *)v62 - 1);
          v62 -= 8;
          *((_QWORD *)v77 - 1) = v79;
          v77 -= 8;
        }
LABEL_99:
        v60[502] = v77;
        v60[503] = v71;
        v60[504] = v78;
        if (v64)
          operator delete(v64);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v62 = v61;
    v71 = v62 + 8;
LABEL_101:
    v60[503] = v71;
LABEL_102:
    v81 = 1 << *(_DWORD *)(v3 + 48);
    if (v81 == 2)
    {
      v82 = *(_QWORD **)a1[1];
      v83 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v84 = (char *)v82[506];
      v92 = v82[507];
      if ((unint64_t)v84 >= v92)
      {
        v86 = (char *)v82[505];
        v94 = (v84 - v86) >> 3;
        if ((unint64_t)(v94 + 1) >> 61)
          goto LABEL_1032;
        v95 = v92 - (_QWORD)v86;
        v96 = (uint64_t)(v92 - (_QWORD)v86) >> 2;
        if (v96 <= v94 + 1)
          v96 = v94 + 1;
        if (v95 >= 0x7FFFFFFFFFFFFFF8)
          v97 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v97 = v96;
        if (v97)
        {
          v98 = (char *)sub_40FC((uint64_t)(v82 + 507), v97);
          v84 = (char *)v82[506];
          v86 = (char *)v82[505];
        }
        else
        {
          v98 = 0;
        }
        v99 = &v98[8 * v94];
        v100 = &v98[8 * v97];
        *(_QWORD *)v99 = v83;
        v93 = v99 + 8;
        while (v84 != v86)
        {
          v102 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *((_QWORD *)v99 - 1) = v102;
          v99 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v81 != 1)
        goto LABEL_134;
      v82 = *(_QWORD **)a1[1];
      v83 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v84 = (char *)v82[506];
      v85 = v82[507];
      if ((unint64_t)v84 >= v85)
      {
        v86 = (char *)v82[505];
        v87 = (v84 - v86) >> 3;
        if ((unint64_t)(v87 + 1) >> 61)
          goto LABEL_1032;
        v88 = v85 - (_QWORD)v86;
        v89 = (uint64_t)(v85 - (_QWORD)v86) >> 2;
        if (v89 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v91 = (char *)sub_40FC((uint64_t)(v82 + 507), v90);
          v84 = (char *)v82[506];
          v86 = (char *)v82[505];
        }
        else
        {
          v91 = 0;
        }
        v99 = &v91[8 * v87];
        v100 = &v91[8 * v90];
        *(_QWORD *)v99 = v83;
        v93 = v99 + 8;
        while (v84 != v86)
        {
          v101 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *((_QWORD *)v99 - 1) = v101;
          v99 -= 8;
        }
LABEL_131:
        v82[505] = v99;
        v82[506] = v93;
        v82[507] = v100;
        if (v86)
          operator delete(v86);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v84 = v83;
    v93 = v84 + 8;
LABEL_133:
    v82[506] = v93;
LABEL_134:
    v103 = 1 << *(_DWORD *)(v3 + 48);
    if (v103 == 2)
    {
      v104 = *(_QWORD **)a1[1];
      v105 = *(_WORD *)(a1[2] + 80) & 0x1FFF;
      v106 = (char *)v104[509];
      v114 = v104[510];
      if ((unint64_t)v106 >= v114)
      {
        v108 = (char *)v104[508];
        v116 = (v106 - v108) >> 3;
        if ((unint64_t)(v116 + 1) >> 61)
          goto LABEL_1032;
        v117 = v114 - (_QWORD)v108;
        v118 = (uint64_t)(v114 - (_QWORD)v108) >> 2;
        if (v118 <= v116 + 1)
          v118 = v116 + 1;
        if (v117 >= 0x7FFFFFFFFFFFFFF8)
          v119 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v119 = v118;
        if (v119)
        {
          v120 = (char *)sub_40FC((uint64_t)(v104 + 510), v119);
          v106 = (char *)v104[509];
          v108 = (char *)v104[508];
        }
        else
        {
          v120 = 0;
        }
        v121 = &v120[8 * v116];
        v122 = &v120[8 * v119];
        *(_QWORD *)v121 = v105;
        v115 = v121 + 8;
        while (v106 != v108)
        {
          v124 = *((_QWORD *)v106 - 1);
          v106 -= 8;
          *((_QWORD *)v121 - 1) = v124;
          v121 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v103 != 1)
        goto LABEL_166;
      v104 = *(_QWORD **)a1[1];
      v105 = *(_WORD *)(a1[2] + 80) & 0x1FFF;
      v106 = (char *)v104[509];
      v107 = v104[510];
      if ((unint64_t)v106 >= v107)
      {
        v108 = (char *)v104[508];
        v109 = (v106 - v108) >> 3;
        if ((unint64_t)(v109 + 1) >> 61)
          goto LABEL_1032;
        v110 = v107 - (_QWORD)v108;
        v111 = (uint64_t)(v107 - (_QWORD)v108) >> 2;
        if (v111 <= v109 + 1)
          v111 = v109 + 1;
        if (v110 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v111;
        if (v112)
        {
          v113 = (char *)sub_40FC((uint64_t)(v104 + 510), v112);
          v106 = (char *)v104[509];
          v108 = (char *)v104[508];
        }
        else
        {
          v113 = 0;
        }
        v121 = &v113[8 * v109];
        v122 = &v113[8 * v112];
        *(_QWORD *)v121 = v105;
        v115 = v121 + 8;
        while (v106 != v108)
        {
          v123 = *((_QWORD *)v106 - 1);
          v106 -= 8;
          *((_QWORD *)v121 - 1) = v123;
          v121 -= 8;
        }
LABEL_163:
        v104[508] = v121;
        v104[509] = v115;
        v104[510] = v122;
        if (v108)
          operator delete(v108);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v106 = v105;
    v115 = v106 + 8;
LABEL_165:
    v104[509] = v115;
LABEL_166:
    v125 = 1 << *(_DWORD *)(v3 + 48);
    if (v125 == 2)
    {
      v126 = *(_QWORD **)a1[1];
      v127 = *(_WORD *)(a1[2] + 64) & 0x3FFF;
      v128 = (char *)v126[512];
      v136 = v126[513];
      if ((unint64_t)v128 >= v136)
      {
        v130 = (char *)v126[511];
        v138 = (v128 - v130) >> 3;
        if ((unint64_t)(v138 + 1) >> 61)
          goto LABEL_1032;
        v139 = v136 - (_QWORD)v130;
        v140 = (uint64_t)(v136 - (_QWORD)v130) >> 2;
        if (v140 <= v138 + 1)
          v140 = v138 + 1;
        if (v139 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v140;
        if (v141)
        {
          v142 = (char *)sub_40FC((uint64_t)(v126 + 513), v141);
          v128 = (char *)v126[512];
          v130 = (char *)v126[511];
        }
        else
        {
          v142 = 0;
        }
        v143 = &v142[8 * v138];
        v144 = &v142[8 * v141];
        *(_QWORD *)v143 = v127;
        v137 = v143 + 8;
        while (v128 != v130)
        {
          v146 = *((_QWORD *)v128 - 1);
          v128 -= 8;
          *((_QWORD *)v143 - 1) = v146;
          v143 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v125 != 1)
        goto LABEL_198;
      v126 = *(_QWORD **)a1[1];
      v127 = *(_WORD *)(a1[2] + 64) & 0x3FFF;
      v128 = (char *)v126[512];
      v129 = v126[513];
      if ((unint64_t)v128 >= v129)
      {
        v130 = (char *)v126[511];
        v131 = (v128 - v130) >> 3;
        if ((unint64_t)(v131 + 1) >> 61)
          goto LABEL_1032;
        v132 = v129 - (_QWORD)v130;
        v133 = (uint64_t)(v129 - (_QWORD)v130) >> 2;
        if (v133 <= v131 + 1)
          v133 = v131 + 1;
        if (v132 >= 0x7FFFFFFFFFFFFFF8)
          v134 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v134 = v133;
        if (v134)
        {
          v135 = (char *)sub_40FC((uint64_t)(v126 + 513), v134);
          v128 = (char *)v126[512];
          v130 = (char *)v126[511];
        }
        else
        {
          v135 = 0;
        }
        v143 = &v135[8 * v131];
        v144 = &v135[8 * v134];
        *(_QWORD *)v143 = v127;
        v137 = v143 + 8;
        while (v128 != v130)
        {
          v145 = *((_QWORD *)v128 - 1);
          v128 -= 8;
          *((_QWORD *)v143 - 1) = v145;
          v143 -= 8;
        }
LABEL_195:
        v126[511] = v143;
        v126[512] = v137;
        v126[513] = v144;
        if (v130)
          operator delete(v130);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v128 = v127;
    v137 = v128 + 8;
LABEL_197:
    v126[512] = v137;
LABEL_198:
    v147 = 1 << *(_DWORD *)(v3 + 48);
    if (v147 == 2)
    {
      v148 = *(_QWORD **)a1[1];
      v149 = *(_WORD *)(a1[2] + 48) & 0x3FFF;
      v150 = (char *)v148[515];
      v158 = v148[516];
      if ((unint64_t)v150 >= v158)
      {
        v152 = (char *)v148[514];
        v160 = (v150 - v152) >> 3;
        if ((unint64_t)(v160 + 1) >> 61)
          goto LABEL_1032;
        v161 = v158 - (_QWORD)v152;
        v162 = (uint64_t)(v158 - (_QWORD)v152) >> 2;
        if (v162 <= v160 + 1)
          v162 = v160 + 1;
        if (v161 >= 0x7FFFFFFFFFFFFFF8)
          v163 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v163 = v162;
        if (v163)
        {
          v164 = (char *)sub_40FC((uint64_t)(v148 + 516), v163);
          v150 = (char *)v148[515];
          v152 = (char *)v148[514];
        }
        else
        {
          v164 = 0;
        }
        v165 = &v164[8 * v160];
        v166 = &v164[8 * v163];
        *(_QWORD *)v165 = v149;
        v159 = v165 + 8;
        while (v150 != v152)
        {
          v168 = *((_QWORD *)v150 - 1);
          v150 -= 8;
          *((_QWORD *)v165 - 1) = v168;
          v165 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v147 != 1)
        goto LABEL_230;
      v148 = *(_QWORD **)a1[1];
      v149 = *(_WORD *)(a1[2] + 48) & 0x3FFF;
      v150 = (char *)v148[515];
      v151 = v148[516];
      if ((unint64_t)v150 >= v151)
      {
        v152 = (char *)v148[514];
        v153 = (v150 - v152) >> 3;
        if ((unint64_t)(v153 + 1) >> 61)
          goto LABEL_1032;
        v154 = v151 - (_QWORD)v152;
        v155 = (uint64_t)(v151 - (_QWORD)v152) >> 2;
        if (v155 <= v153 + 1)
          v155 = v153 + 1;
        if (v154 >= 0x7FFFFFFFFFFFFFF8)
          v156 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v156 = v155;
        if (v156)
        {
          v157 = (char *)sub_40FC((uint64_t)(v148 + 516), v156);
          v150 = (char *)v148[515];
          v152 = (char *)v148[514];
        }
        else
        {
          v157 = 0;
        }
        v165 = &v157[8 * v153];
        v166 = &v157[8 * v156];
        *(_QWORD *)v165 = v149;
        v159 = v165 + 8;
        while (v150 != v152)
        {
          v167 = *((_QWORD *)v150 - 1);
          v150 -= 8;
          *((_QWORD *)v165 - 1) = v167;
          v165 -= 8;
        }
LABEL_227:
        v148[514] = v165;
        v148[515] = v159;
        v148[516] = v166;
        if (v152)
          operator delete(v152);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v150 = v149;
    v159 = v150 + 8;
LABEL_229:
    v148[515] = v159;
LABEL_230:
    v169 = 1 << *(_DWORD *)(v3 + 48);
    if (v169 == 2)
    {
      v170 = *(_QWORD **)a1[1];
      v171 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      v172 = (char *)v170[518];
      v180 = v170[519];
      if ((unint64_t)v172 >= v180)
      {
        v174 = (char *)v170[517];
        v182 = (v172 - v174) >> 3;
        if ((unint64_t)(v182 + 1) >> 61)
          goto LABEL_1032;
        v183 = v180 - (_QWORD)v174;
        v184 = (uint64_t)(v180 - (_QWORD)v174) >> 2;
        if (v184 <= v182 + 1)
          v184 = v182 + 1;
        if (v183 >= 0x7FFFFFFFFFFFFFF8)
          v185 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v185 = v184;
        if (v185)
        {
          v186 = (char *)sub_40FC((uint64_t)(v170 + 519), v185);
          v172 = (char *)v170[518];
          v174 = (char *)v170[517];
        }
        else
        {
          v186 = 0;
        }
        v187 = &v186[8 * v182];
        v188 = &v186[8 * v185];
        *(_QWORD *)v187 = v171;
        v181 = v187 + 8;
        while (v172 != v174)
        {
          v190 = *((_QWORD *)v172 - 1);
          v172 -= 8;
          *((_QWORD *)v187 - 1) = v190;
          v187 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v169 != 1)
        goto LABEL_262;
      v170 = *(_QWORD **)a1[1];
      v171 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      v172 = (char *)v170[518];
      v173 = v170[519];
      if ((unint64_t)v172 >= v173)
      {
        v174 = (char *)v170[517];
        v175 = (v172 - v174) >> 3;
        if ((unint64_t)(v175 + 1) >> 61)
          goto LABEL_1032;
        v176 = v173 - (_QWORD)v174;
        v177 = (uint64_t)(v173 - (_QWORD)v174) >> 2;
        if (v177 <= v175 + 1)
          v177 = v175 + 1;
        if (v176 >= 0x7FFFFFFFFFFFFFF8)
          v178 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v178 = v177;
        if (v178)
        {
          v179 = (char *)sub_40FC((uint64_t)(v170 + 519), v178);
          v172 = (char *)v170[518];
          v174 = (char *)v170[517];
        }
        else
        {
          v179 = 0;
        }
        v187 = &v179[8 * v175];
        v188 = &v179[8 * v178];
        *(_QWORD *)v187 = v171;
        v181 = v187 + 8;
        while (v172 != v174)
        {
          v189 = *((_QWORD *)v172 - 1);
          v172 -= 8;
          *((_QWORD *)v187 - 1) = v189;
          v187 -= 8;
        }
LABEL_259:
        v170[517] = v187;
        v170[518] = v181;
        v170[519] = v188;
        if (v174)
          operator delete(v174);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v172 = v171;
    v181 = v172 + 8;
LABEL_261:
    v170[518] = v181;
LABEL_262:
    v191 = 1 << *(_DWORD *)(v3 + 48);
    if (v191 == 2)
    {
      v192 = *(_QWORD **)a1[1];
      v193 = *(_WORD *)(a1[2] + 82) & 0x1FFF;
      v194 = (char *)v192[521];
      v202 = v192[522];
      if ((unint64_t)v194 >= v202)
      {
        v196 = (char *)v192[520];
        v204 = (v194 - v196) >> 3;
        if ((unint64_t)(v204 + 1) >> 61)
          goto LABEL_1032;
        v205 = v202 - (_QWORD)v196;
        v206 = (uint64_t)(v202 - (_QWORD)v196) >> 2;
        if (v206 <= v204 + 1)
          v206 = v204 + 1;
        if (v205 >= 0x7FFFFFFFFFFFFFF8)
          v207 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v207 = v206;
        if (v207)
        {
          v208 = (char *)sub_40FC((uint64_t)(v192 + 522), v207);
          v194 = (char *)v192[521];
          v196 = (char *)v192[520];
        }
        else
        {
          v208 = 0;
        }
        v209 = &v208[8 * v204];
        v210 = &v208[8 * v207];
        *(_QWORD *)v209 = v193;
        v203 = v209 + 8;
        while (v194 != v196)
        {
          v212 = *((_QWORD *)v194 - 1);
          v194 -= 8;
          *((_QWORD *)v209 - 1) = v212;
          v209 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v191 != 1)
        goto LABEL_294;
      v192 = *(_QWORD **)a1[1];
      v193 = *(_WORD *)(a1[2] + 82) & 0x1FFF;
      v194 = (char *)v192[521];
      v195 = v192[522];
      if ((unint64_t)v194 >= v195)
      {
        v196 = (char *)v192[520];
        v197 = (v194 - v196) >> 3;
        if ((unint64_t)(v197 + 1) >> 61)
          goto LABEL_1032;
        v198 = v195 - (_QWORD)v196;
        v199 = (uint64_t)(v195 - (_QWORD)v196) >> 2;
        if (v199 <= v197 + 1)
          v199 = v197 + 1;
        if (v198 >= 0x7FFFFFFFFFFFFFF8)
          v200 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v200 = v199;
        if (v200)
        {
          v201 = (char *)sub_40FC((uint64_t)(v192 + 522), v200);
          v194 = (char *)v192[521];
          v196 = (char *)v192[520];
        }
        else
        {
          v201 = 0;
        }
        v209 = &v201[8 * v197];
        v210 = &v201[8 * v200];
        *(_QWORD *)v209 = v193;
        v203 = v209 + 8;
        while (v194 != v196)
        {
          v211 = *((_QWORD *)v194 - 1);
          v194 -= 8;
          *((_QWORD *)v209 - 1) = v211;
          v209 -= 8;
        }
LABEL_291:
        v192[520] = v209;
        v192[521] = v203;
        v192[522] = v210;
        if (v196)
          operator delete(v196);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v194 = v193;
    v203 = v194 + 8;
LABEL_293:
    v192[521] = v203;
LABEL_294:
    v213 = 1 << *(_DWORD *)(v3 + 48);
    if (v213 == 2)
    {
      v214 = *(_QWORD **)a1[1];
      v215 = *(_WORD *)(a1[2] + 66) & 0x3FFF;
      v216 = (char *)v214[524];
      v224 = v214[525];
      if ((unint64_t)v216 >= v224)
      {
        v218 = (char *)v214[523];
        v226 = (v216 - v218) >> 3;
        if ((unint64_t)(v226 + 1) >> 61)
          goto LABEL_1032;
        v227 = v224 - (_QWORD)v218;
        v228 = (uint64_t)(v224 - (_QWORD)v218) >> 2;
        if (v228 <= v226 + 1)
          v228 = v226 + 1;
        if (v227 >= 0x7FFFFFFFFFFFFFF8)
          v229 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v229 = v228;
        if (v229)
        {
          v230 = (char *)sub_40FC((uint64_t)(v214 + 525), v229);
          v216 = (char *)v214[524];
          v218 = (char *)v214[523];
        }
        else
        {
          v230 = 0;
        }
        v231 = &v230[8 * v226];
        v232 = &v230[8 * v229];
        *(_QWORD *)v231 = v215;
        v225 = v231 + 8;
        while (v216 != v218)
        {
          v234 = *((_QWORD *)v216 - 1);
          v216 -= 8;
          *((_QWORD *)v231 - 1) = v234;
          v231 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v213 != 1)
        goto LABEL_326;
      v214 = *(_QWORD **)a1[1];
      v215 = *(_WORD *)(a1[2] + 66) & 0x3FFF;
      v216 = (char *)v214[524];
      v217 = v214[525];
      if ((unint64_t)v216 >= v217)
      {
        v218 = (char *)v214[523];
        v219 = (v216 - v218) >> 3;
        if ((unint64_t)(v219 + 1) >> 61)
          goto LABEL_1032;
        v220 = v217 - (_QWORD)v218;
        v221 = (uint64_t)(v217 - (_QWORD)v218) >> 2;
        if (v221 <= v219 + 1)
          v221 = v219 + 1;
        if (v220 >= 0x7FFFFFFFFFFFFFF8)
          v222 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v222 = v221;
        if (v222)
        {
          v223 = (char *)sub_40FC((uint64_t)(v214 + 525), v222);
          v216 = (char *)v214[524];
          v218 = (char *)v214[523];
        }
        else
        {
          v223 = 0;
        }
        v231 = &v223[8 * v219];
        v232 = &v223[8 * v222];
        *(_QWORD *)v231 = v215;
        v225 = v231 + 8;
        while (v216 != v218)
        {
          v233 = *((_QWORD *)v216 - 1);
          v216 -= 8;
          *((_QWORD *)v231 - 1) = v233;
          v231 -= 8;
        }
LABEL_323:
        v214[523] = v231;
        v214[524] = v225;
        v214[525] = v232;
        if (v218)
          operator delete(v218);
        goto LABEL_325;
      }
    }
    *(_QWORD *)v216 = v215;
    v225 = v216 + 8;
LABEL_325:
    v214[524] = v225;
LABEL_326:
    v235 = 1 << *(_DWORD *)(v3 + 48);
    if (v235 == 2)
    {
      v236 = *(_QWORD **)a1[1];
      v237 = *(_WORD *)(a1[2] + 50) & 0x3FFF;
      v238 = (char *)v236[527];
      v246 = v236[528];
      if ((unint64_t)v238 >= v246)
      {
        v240 = (char *)v236[526];
        v248 = (v238 - v240) >> 3;
        if ((unint64_t)(v248 + 1) >> 61)
          goto LABEL_1032;
        v249 = v246 - (_QWORD)v240;
        v250 = (uint64_t)(v246 - (_QWORD)v240) >> 2;
        if (v250 <= v248 + 1)
          v250 = v248 + 1;
        if (v249 >= 0x7FFFFFFFFFFFFFF8)
          v251 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v251 = v250;
        if (v251)
        {
          v252 = (char *)sub_40FC((uint64_t)(v236 + 528), v251);
          v238 = (char *)v236[527];
          v240 = (char *)v236[526];
        }
        else
        {
          v252 = 0;
        }
        v253 = &v252[8 * v248];
        v254 = &v252[8 * v251];
        *(_QWORD *)v253 = v237;
        v247 = v253 + 8;
        while (v238 != v240)
        {
          v256 = *((_QWORD *)v238 - 1);
          v238 -= 8;
          *((_QWORD *)v253 - 1) = v256;
          v253 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v235 != 1)
        goto LABEL_358;
      v236 = *(_QWORD **)a1[1];
      v237 = *(_WORD *)(a1[2] + 50) & 0x3FFF;
      v238 = (char *)v236[527];
      v239 = v236[528];
      if ((unint64_t)v238 >= v239)
      {
        v240 = (char *)v236[526];
        v241 = (v238 - v240) >> 3;
        if ((unint64_t)(v241 + 1) >> 61)
          goto LABEL_1032;
        v242 = v239 - (_QWORD)v240;
        v243 = (uint64_t)(v239 - (_QWORD)v240) >> 2;
        if (v243 <= v241 + 1)
          v243 = v241 + 1;
        if (v242 >= 0x7FFFFFFFFFFFFFF8)
          v244 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v244 = v243;
        if (v244)
        {
          v245 = (char *)sub_40FC((uint64_t)(v236 + 528), v244);
          v238 = (char *)v236[527];
          v240 = (char *)v236[526];
        }
        else
        {
          v245 = 0;
        }
        v253 = &v245[8 * v241];
        v254 = &v245[8 * v244];
        *(_QWORD *)v253 = v237;
        v247 = v253 + 8;
        while (v238 != v240)
        {
          v255 = *((_QWORD *)v238 - 1);
          v238 -= 8;
          *((_QWORD *)v253 - 1) = v255;
          v253 -= 8;
        }
LABEL_355:
        v236[526] = v253;
        v236[527] = v247;
        v236[528] = v254;
        if (v240)
          operator delete(v240);
        goto LABEL_357;
      }
    }
    *(_QWORD *)v238 = v237;
    v247 = v238 + 8;
LABEL_357:
    v236[527] = v247;
LABEL_358:
    v257 = 1 << *(_DWORD *)(v3 + 48);
    if (v257 == 2)
    {
      v258 = *(_QWORD **)a1[1];
      v259 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      v260 = (char *)v258[530];
      v268 = v258[531];
      if ((unint64_t)v260 >= v268)
      {
        v262 = (char *)v258[529];
        v270 = (v260 - v262) >> 3;
        if ((unint64_t)(v270 + 1) >> 61)
          goto LABEL_1032;
        v271 = v268 - (_QWORD)v262;
        v272 = (uint64_t)(v268 - (_QWORD)v262) >> 2;
        if (v272 <= v270 + 1)
          v272 = v270 + 1;
        if (v271 >= 0x7FFFFFFFFFFFFFF8)
          v273 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v273 = v272;
        if (v273)
        {
          v274 = (char *)sub_40FC((uint64_t)(v258 + 531), v273);
          v260 = (char *)v258[530];
          v262 = (char *)v258[529];
        }
        else
        {
          v274 = 0;
        }
        v275 = &v274[8 * v270];
        v276 = &v274[8 * v273];
        *(_QWORD *)v275 = v259;
        v269 = v275 + 8;
        while (v260 != v262)
        {
          v278 = *((_QWORD *)v260 - 1);
          v260 -= 8;
          *((_QWORD *)v275 - 1) = v278;
          v275 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v257 != 1)
        goto LABEL_390;
      v258 = *(_QWORD **)a1[1];
      v259 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      v260 = (char *)v258[530];
      v261 = v258[531];
      if ((unint64_t)v260 >= v261)
      {
        v262 = (char *)v258[529];
        v263 = (v260 - v262) >> 3;
        if ((unint64_t)(v263 + 1) >> 61)
          goto LABEL_1032;
        v264 = v261 - (_QWORD)v262;
        v265 = (uint64_t)(v261 - (_QWORD)v262) >> 2;
        if (v265 <= v263 + 1)
          v265 = v263 + 1;
        if (v264 >= 0x7FFFFFFFFFFFFFF8)
          v266 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v266 = v265;
        if (v266)
        {
          v267 = (char *)sub_40FC((uint64_t)(v258 + 531), v266);
          v260 = (char *)v258[530];
          v262 = (char *)v258[529];
        }
        else
        {
          v267 = 0;
        }
        v275 = &v267[8 * v263];
        v276 = &v267[8 * v266];
        *(_QWORD *)v275 = v259;
        v269 = v275 + 8;
        while (v260 != v262)
        {
          v277 = *((_QWORD *)v260 - 1);
          v260 -= 8;
          *((_QWORD *)v275 - 1) = v277;
          v275 -= 8;
        }
LABEL_387:
        v258[529] = v275;
        v258[530] = v269;
        v258[531] = v276;
        if (v262)
          operator delete(v262);
        goto LABEL_389;
      }
    }
    *(_QWORD *)v260 = v259;
    v269 = v260 + 8;
LABEL_389:
    v258[530] = v269;
LABEL_390:
    v279 = 1 << *(_DWORD *)(v3 + 48);
    if (v279 == 2)
    {
      v280 = *(_QWORD **)a1[1];
      v281 = *(_WORD *)(a1[2] + 72) & 0x1FFF;
      v282 = (char *)v280[533];
      v290 = v280[534];
      if ((unint64_t)v282 >= v290)
      {
        v284 = (char *)v280[532];
        v292 = (v282 - v284) >> 3;
        if ((unint64_t)(v292 + 1) >> 61)
          goto LABEL_1032;
        v293 = v290 - (_QWORD)v284;
        v294 = (uint64_t)(v290 - (_QWORD)v284) >> 2;
        if (v294 <= v292 + 1)
          v294 = v292 + 1;
        if (v293 >= 0x7FFFFFFFFFFFFFF8)
          v295 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v295 = v294;
        if (v295)
        {
          v296 = (char *)sub_40FC((uint64_t)(v280 + 534), v295);
          v282 = (char *)v280[533];
          v284 = (char *)v280[532];
        }
        else
        {
          v296 = 0;
        }
        v297 = &v296[8 * v292];
        v298 = &v296[8 * v295];
        *(_QWORD *)v297 = v281;
        v291 = v297 + 8;
        while (v282 != v284)
        {
          v300 = *((_QWORD *)v282 - 1);
          v282 -= 8;
          *((_QWORD *)v297 - 1) = v300;
          v297 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v279 != 1)
        goto LABEL_422;
      v280 = *(_QWORD **)a1[1];
      v281 = *(_WORD *)(a1[2] + 72) & 0x1FFF;
      v282 = (char *)v280[533];
      v283 = v280[534];
      if ((unint64_t)v282 >= v283)
      {
        v284 = (char *)v280[532];
        v285 = (v282 - v284) >> 3;
        if ((unint64_t)(v285 + 1) >> 61)
          goto LABEL_1032;
        v286 = v283 - (_QWORD)v284;
        v287 = (uint64_t)(v283 - (_QWORD)v284) >> 2;
        if (v287 <= v285 + 1)
          v287 = v285 + 1;
        if (v286 >= 0x7FFFFFFFFFFFFFF8)
          v288 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v288 = v287;
        if (v288)
        {
          v289 = (char *)sub_40FC((uint64_t)(v280 + 534), v288);
          v282 = (char *)v280[533];
          v284 = (char *)v280[532];
        }
        else
        {
          v289 = 0;
        }
        v297 = &v289[8 * v285];
        v298 = &v289[8 * v288];
        *(_QWORD *)v297 = v281;
        v291 = v297 + 8;
        while (v282 != v284)
        {
          v299 = *((_QWORD *)v282 - 1);
          v282 -= 8;
          *((_QWORD *)v297 - 1) = v299;
          v297 -= 8;
        }
LABEL_419:
        v280[532] = v297;
        v280[533] = v291;
        v280[534] = v298;
        if (v284)
          operator delete(v284);
        goto LABEL_421;
      }
    }
    *(_QWORD *)v282 = v281;
    v291 = v282 + 8;
LABEL_421:
    v280[533] = v291;
LABEL_422:
    v301 = 1 << *(_DWORD *)(v3 + 48);
    if (v301 == 2)
    {
      v302 = *(_QWORD **)a1[1];
      v303 = *(_WORD *)(a1[2] + 56) & 0x1FFF;
      v304 = (char *)v302[536];
      v312 = v302[537];
      if ((unint64_t)v304 >= v312)
      {
        v306 = (char *)v302[535];
        v314 = (v304 - v306) >> 3;
        if ((unint64_t)(v314 + 1) >> 61)
          goto LABEL_1032;
        v315 = v312 - (_QWORD)v306;
        v316 = (uint64_t)(v312 - (_QWORD)v306) >> 2;
        if (v316 <= v314 + 1)
          v316 = v314 + 1;
        if (v315 >= 0x7FFFFFFFFFFFFFF8)
          v317 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v317 = v316;
        if (v317)
        {
          v318 = (char *)sub_40FC((uint64_t)(v302 + 537), v317);
          v304 = (char *)v302[536];
          v306 = (char *)v302[535];
        }
        else
        {
          v318 = 0;
        }
        v319 = &v318[8 * v314];
        v320 = &v318[8 * v317];
        *(_QWORD *)v319 = v303;
        v313 = v319 + 8;
        while (v304 != v306)
        {
          v322 = *((_QWORD *)v304 - 1);
          v304 -= 8;
          *((_QWORD *)v319 - 1) = v322;
          v319 -= 8;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v301 != 1)
        goto LABEL_454;
      v302 = *(_QWORD **)a1[1];
      v303 = *(_WORD *)(a1[2] + 56) & 0x1FFF;
      v304 = (char *)v302[536];
      v305 = v302[537];
      if ((unint64_t)v304 >= v305)
      {
        v306 = (char *)v302[535];
        v307 = (v304 - v306) >> 3;
        if ((unint64_t)(v307 + 1) >> 61)
          goto LABEL_1032;
        v308 = v305 - (_QWORD)v306;
        v309 = (uint64_t)(v305 - (_QWORD)v306) >> 2;
        if (v309 <= v307 + 1)
          v309 = v307 + 1;
        if (v308 >= 0x7FFFFFFFFFFFFFF8)
          v310 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v310 = v309;
        if (v310)
        {
          v311 = (char *)sub_40FC((uint64_t)(v302 + 537), v310);
          v304 = (char *)v302[536];
          v306 = (char *)v302[535];
        }
        else
        {
          v311 = 0;
        }
        v319 = &v311[8 * v307];
        v320 = &v311[8 * v310];
        *(_QWORD *)v319 = v303;
        v313 = v319 + 8;
        while (v304 != v306)
        {
          v321 = *((_QWORD *)v304 - 1);
          v304 -= 8;
          *((_QWORD *)v319 - 1) = v321;
          v319 -= 8;
        }
LABEL_451:
        v302[535] = v319;
        v302[536] = v313;
        v302[537] = v320;
        if (v306)
          operator delete(v306);
        goto LABEL_453;
      }
    }
    *(_QWORD *)v304 = v303;
    v313 = v304 + 8;
LABEL_453:
    v302[536] = v313;
LABEL_454:
    v323 = 1 << *(_DWORD *)(v3 + 48);
    if (v323 == 2)
    {
      v324 = *(_QWORD **)a1[1];
      v325 = *(_WORD *)(a1[2] + 40) & 0x3FFF;
      v326 = (char *)v324[539];
      v334 = v324[540];
      if ((unint64_t)v326 >= v334)
      {
        v328 = (char *)v324[538];
        v336 = (v326 - v328) >> 3;
        if ((unint64_t)(v336 + 1) >> 61)
          goto LABEL_1032;
        v337 = v334 - (_QWORD)v328;
        v338 = (uint64_t)(v334 - (_QWORD)v328) >> 2;
        if (v338 <= v336 + 1)
          v338 = v336 + 1;
        if (v337 >= 0x7FFFFFFFFFFFFFF8)
          v339 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v339 = v338;
        if (v339)
        {
          v340 = (char *)sub_40FC((uint64_t)(v324 + 540), v339);
          v326 = (char *)v324[539];
          v328 = (char *)v324[538];
        }
        else
        {
          v340 = 0;
        }
        v341 = &v340[8 * v336];
        v342 = &v340[8 * v339];
        *(_QWORD *)v341 = v325;
        v335 = v341 + 8;
        while (v326 != v328)
        {
          v344 = *((_QWORD *)v326 - 1);
          v326 -= 8;
          *((_QWORD *)v341 - 1) = v344;
          v341 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v323 != 1)
        goto LABEL_486;
      v324 = *(_QWORD **)a1[1];
      v325 = *(_WORD *)(a1[2] + 40) & 0x3FFF;
      v326 = (char *)v324[539];
      v327 = v324[540];
      if ((unint64_t)v326 >= v327)
      {
        v328 = (char *)v324[538];
        v329 = (v326 - v328) >> 3;
        if ((unint64_t)(v329 + 1) >> 61)
          goto LABEL_1032;
        v330 = v327 - (_QWORD)v328;
        v331 = (uint64_t)(v327 - (_QWORD)v328) >> 2;
        if (v331 <= v329 + 1)
          v331 = v329 + 1;
        if (v330 >= 0x7FFFFFFFFFFFFFF8)
          v332 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v332 = v331;
        if (v332)
        {
          v333 = (char *)sub_40FC((uint64_t)(v324 + 540), v332);
          v326 = (char *)v324[539];
          v328 = (char *)v324[538];
        }
        else
        {
          v333 = 0;
        }
        v341 = &v333[8 * v329];
        v342 = &v333[8 * v332];
        *(_QWORD *)v341 = v325;
        v335 = v341 + 8;
        while (v326 != v328)
        {
          v343 = *((_QWORD *)v326 - 1);
          v326 -= 8;
          *((_QWORD *)v341 - 1) = v343;
          v341 -= 8;
        }
LABEL_483:
        v324[538] = v341;
        v324[539] = v335;
        v324[540] = v342;
        if (v328)
          operator delete(v328);
        goto LABEL_485;
      }
    }
    *(_QWORD *)v326 = v325;
    v335 = v326 + 8;
LABEL_485:
    v324[539] = v335;
LABEL_486:
    v345 = 1 << *(_DWORD *)(v3 + 48);
    if (v345 == 2)
    {
      v346 = *(_QWORD **)a1[1];
      v347 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v348 = (char *)v346[542];
      v356 = v346[543];
      if ((unint64_t)v348 >= v356)
      {
        v350 = (char *)v346[541];
        v358 = (v348 - v350) >> 3;
        if ((unint64_t)(v358 + 1) >> 61)
          goto LABEL_1032;
        v359 = v356 - (_QWORD)v350;
        v360 = (uint64_t)(v356 - (_QWORD)v350) >> 2;
        if (v360 <= v358 + 1)
          v360 = v358 + 1;
        if (v359 >= 0x7FFFFFFFFFFFFFF8)
          v361 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v361 = v360;
        if (v361)
        {
          v362 = (char *)sub_40FC((uint64_t)(v346 + 543), v361);
          v348 = (char *)v346[542];
          v350 = (char *)v346[541];
        }
        else
        {
          v362 = 0;
        }
        v363 = &v362[8 * v358];
        v364 = &v362[8 * v361];
        *(_QWORD *)v363 = v347;
        v357 = v363 + 8;
        while (v348 != v350)
        {
          v366 = *((_QWORD *)v348 - 1);
          v348 -= 8;
          *((_QWORD *)v363 - 1) = v366;
          v363 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v345 != 1)
        goto LABEL_518;
      v346 = *(_QWORD **)a1[1];
      v347 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v348 = (char *)v346[542];
      v349 = v346[543];
      if ((unint64_t)v348 >= v349)
      {
        v350 = (char *)v346[541];
        v351 = (v348 - v350) >> 3;
        if ((unint64_t)(v351 + 1) >> 61)
          goto LABEL_1032;
        v352 = v349 - (_QWORD)v350;
        v353 = (uint64_t)(v349 - (_QWORD)v350) >> 2;
        if (v353 <= v351 + 1)
          v353 = v351 + 1;
        if (v352 >= 0x7FFFFFFFFFFFFFF8)
          v354 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v354 = v353;
        if (v354)
        {
          v355 = (char *)sub_40FC((uint64_t)(v346 + 543), v354);
          v348 = (char *)v346[542];
          v350 = (char *)v346[541];
        }
        else
        {
          v355 = 0;
        }
        v363 = &v355[8 * v351];
        v364 = &v355[8 * v354];
        *(_QWORD *)v363 = v347;
        v357 = v363 + 8;
        while (v348 != v350)
        {
          v365 = *((_QWORD *)v348 - 1);
          v348 -= 8;
          *((_QWORD *)v363 - 1) = v365;
          v363 -= 8;
        }
LABEL_515:
        v346[541] = v363;
        v346[542] = v357;
        v346[543] = v364;
        if (v350)
          operator delete(v350);
        goto LABEL_517;
      }
    }
    *(_QWORD *)v348 = v347;
    v357 = v348 + 8;
LABEL_517:
    v346[542] = v357;
LABEL_518:
    v367 = 1 << *(_DWORD *)(v3 + 48);
    if (v367 == 2)
    {
      v368 = *(_QWORD **)a1[1];
      v369 = *(_WORD *)(a1[2] + 74) & 0x1FFF;
      v370 = (char *)v368[545];
      v378 = v368[546];
      if ((unint64_t)v370 >= v378)
      {
        v372 = (char *)v368[544];
        v380 = (v370 - v372) >> 3;
        if ((unint64_t)(v380 + 1) >> 61)
          goto LABEL_1032;
        v381 = v378 - (_QWORD)v372;
        v382 = (uint64_t)(v378 - (_QWORD)v372) >> 2;
        if (v382 <= v380 + 1)
          v382 = v380 + 1;
        if (v381 >= 0x7FFFFFFFFFFFFFF8)
          v383 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v383 = v382;
        if (v383)
        {
          v384 = (char *)sub_40FC((uint64_t)(v368 + 546), v383);
          v370 = (char *)v368[545];
          v372 = (char *)v368[544];
        }
        else
        {
          v384 = 0;
        }
        v385 = &v384[8 * v380];
        v386 = &v384[8 * v383];
        *(_QWORD *)v385 = v369;
        v379 = v385 + 8;
        while (v370 != v372)
        {
          v388 = *((_QWORD *)v370 - 1);
          v370 -= 8;
          *((_QWORD *)v385 - 1) = v388;
          v385 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v367 != 1)
        goto LABEL_550;
      v368 = *(_QWORD **)a1[1];
      v369 = *(_WORD *)(a1[2] + 74) & 0x1FFF;
      v370 = (char *)v368[545];
      v371 = v368[546];
      if ((unint64_t)v370 >= v371)
      {
        v372 = (char *)v368[544];
        v373 = (v370 - v372) >> 3;
        if ((unint64_t)(v373 + 1) >> 61)
          goto LABEL_1032;
        v374 = v371 - (_QWORD)v372;
        v375 = (uint64_t)(v371 - (_QWORD)v372) >> 2;
        if (v375 <= v373 + 1)
          v375 = v373 + 1;
        if (v374 >= 0x7FFFFFFFFFFFFFF8)
          v376 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v376 = v375;
        if (v376)
        {
          v377 = (char *)sub_40FC((uint64_t)(v368 + 546), v376);
          v370 = (char *)v368[545];
          v372 = (char *)v368[544];
        }
        else
        {
          v377 = 0;
        }
        v385 = &v377[8 * v373];
        v386 = &v377[8 * v376];
        *(_QWORD *)v385 = v369;
        v379 = v385 + 8;
        while (v370 != v372)
        {
          v387 = *((_QWORD *)v370 - 1);
          v370 -= 8;
          *((_QWORD *)v385 - 1) = v387;
          v385 -= 8;
        }
LABEL_547:
        v368[544] = v385;
        v368[545] = v379;
        v368[546] = v386;
        if (v372)
          operator delete(v372);
        goto LABEL_549;
      }
    }
    *(_QWORD *)v370 = v369;
    v379 = v370 + 8;
LABEL_549:
    v368[545] = v379;
LABEL_550:
    v389 = 1 << *(_DWORD *)(v3 + 48);
    if (v389 == 2)
    {
      v390 = *(_QWORD **)a1[1];
      v391 = *(_WORD *)(a1[2] + 58) & 0x1FFF;
      v392 = (char *)v390[548];
      v400 = v390[549];
      if ((unint64_t)v392 >= v400)
      {
        v394 = (char *)v390[547];
        v402 = (v392 - v394) >> 3;
        if ((unint64_t)(v402 + 1) >> 61)
          goto LABEL_1032;
        v403 = v400 - (_QWORD)v394;
        v404 = (uint64_t)(v400 - (_QWORD)v394) >> 2;
        if (v404 <= v402 + 1)
          v404 = v402 + 1;
        if (v403 >= 0x7FFFFFFFFFFFFFF8)
          v405 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v405 = v404;
        if (v405)
        {
          v406 = (char *)sub_40FC((uint64_t)(v390 + 549), v405);
          v392 = (char *)v390[548];
          v394 = (char *)v390[547];
        }
        else
        {
          v406 = 0;
        }
        v407 = &v406[8 * v402];
        v408 = &v406[8 * v405];
        *(_QWORD *)v407 = v391;
        v401 = v407 + 8;
        while (v392 != v394)
        {
          v410 = *((_QWORD *)v392 - 1);
          v392 -= 8;
          *((_QWORD *)v407 - 1) = v410;
          v407 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v389 != 1)
        goto LABEL_582;
      v390 = *(_QWORD **)a1[1];
      v391 = *(_WORD *)(a1[2] + 58) & 0x1FFF;
      v392 = (char *)v390[548];
      v393 = v390[549];
      if ((unint64_t)v392 >= v393)
      {
        v394 = (char *)v390[547];
        v395 = (v392 - v394) >> 3;
        if ((unint64_t)(v395 + 1) >> 61)
          goto LABEL_1032;
        v396 = v393 - (_QWORD)v394;
        v397 = (uint64_t)(v393 - (_QWORD)v394) >> 2;
        if (v397 <= v395 + 1)
          v397 = v395 + 1;
        if (v396 >= 0x7FFFFFFFFFFFFFF8)
          v398 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v398 = v397;
        if (v398)
        {
          v399 = (char *)sub_40FC((uint64_t)(v390 + 549), v398);
          v392 = (char *)v390[548];
          v394 = (char *)v390[547];
        }
        else
        {
          v399 = 0;
        }
        v407 = &v399[8 * v395];
        v408 = &v399[8 * v398];
        *(_QWORD *)v407 = v391;
        v401 = v407 + 8;
        while (v392 != v394)
        {
          v409 = *((_QWORD *)v392 - 1);
          v392 -= 8;
          *((_QWORD *)v407 - 1) = v409;
          v407 -= 8;
        }
LABEL_579:
        v390[547] = v407;
        v390[548] = v401;
        v390[549] = v408;
        if (v394)
          operator delete(v394);
        goto LABEL_581;
      }
    }
    *(_QWORD *)v392 = v391;
    v401 = v392 + 8;
LABEL_581:
    v390[548] = v401;
LABEL_582:
    v411 = 1 << *(_DWORD *)(v3 + 48);
    if (v411 == 2)
    {
      v412 = *(_QWORD **)a1[1];
      v413 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      v414 = (char *)v412[551];
      v422 = v412[552];
      if ((unint64_t)v414 >= v422)
      {
        v416 = (char *)v412[550];
        v424 = (v414 - v416) >> 3;
        if ((unint64_t)(v424 + 1) >> 61)
          goto LABEL_1032;
        v425 = v422 - (_QWORD)v416;
        v426 = (uint64_t)(v422 - (_QWORD)v416) >> 2;
        if (v426 <= v424 + 1)
          v426 = v424 + 1;
        if (v425 >= 0x7FFFFFFFFFFFFFF8)
          v427 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v427 = v426;
        if (v427)
        {
          v428 = (char *)sub_40FC((uint64_t)(v412 + 552), v427);
          v414 = (char *)v412[551];
          v416 = (char *)v412[550];
        }
        else
        {
          v428 = 0;
        }
        v429 = &v428[8 * v424];
        v430 = &v428[8 * v427];
        *(_QWORD *)v429 = v413;
        v423 = v429 + 8;
        while (v414 != v416)
        {
          v432 = *((_QWORD *)v414 - 1);
          v414 -= 8;
          *((_QWORD *)v429 - 1) = v432;
          v429 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v411 != 1)
        goto LABEL_614;
      v412 = *(_QWORD **)a1[1];
      v413 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      v414 = (char *)v412[551];
      v415 = v412[552];
      if ((unint64_t)v414 >= v415)
      {
        v416 = (char *)v412[550];
        v417 = (v414 - v416) >> 3;
        if ((unint64_t)(v417 + 1) >> 61)
          goto LABEL_1032;
        v418 = v415 - (_QWORD)v416;
        v419 = (uint64_t)(v415 - (_QWORD)v416) >> 2;
        if (v419 <= v417 + 1)
          v419 = v417 + 1;
        if (v418 >= 0x7FFFFFFFFFFFFFF8)
          v420 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v420 = v419;
        if (v420)
        {
          v421 = (char *)sub_40FC((uint64_t)(v412 + 552), v420);
          v414 = (char *)v412[551];
          v416 = (char *)v412[550];
        }
        else
        {
          v421 = 0;
        }
        v429 = &v421[8 * v417];
        v430 = &v421[8 * v420];
        *(_QWORD *)v429 = v413;
        v423 = v429 + 8;
        while (v414 != v416)
        {
          v431 = *((_QWORD *)v414 - 1);
          v414 -= 8;
          *((_QWORD *)v429 - 1) = v431;
          v429 -= 8;
        }
LABEL_611:
        v412[550] = v429;
        v412[551] = v423;
        v412[552] = v430;
        if (v416)
          operator delete(v416);
        goto LABEL_613;
      }
    }
    *(_QWORD *)v414 = v413;
    v423 = v414 + 8;
LABEL_613:
    v412[551] = v423;
LABEL_614:
    v433 = 1 << *(_DWORD *)(v3 + 48);
    if (v433 == 2)
    {
      v434 = *(_QWORD **)a1[1];
      v435 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v436 = (char *)v434[554];
      v444 = v434[555];
      if ((unint64_t)v436 >= v444)
      {
        v438 = (char *)v434[553];
        v446 = (v436 - v438) >> 3;
        if ((unint64_t)(v446 + 1) >> 61)
          goto LABEL_1032;
        v447 = v444 - (_QWORD)v438;
        v448 = (uint64_t)(v444 - (_QWORD)v438) >> 2;
        if (v448 <= v446 + 1)
          v448 = v446 + 1;
        if (v447 >= 0x7FFFFFFFFFFFFFF8)
          v449 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v449 = v448;
        if (v449)
        {
          v450 = (char *)sub_40FC((uint64_t)(v434 + 555), v449);
          v436 = (char *)v434[554];
          v438 = (char *)v434[553];
        }
        else
        {
          v450 = 0;
        }
        v451 = &v450[8 * v446];
        v452 = &v450[8 * v449];
        *(_QWORD *)v451 = v435;
        v445 = v451 + 8;
        while (v436 != v438)
        {
          v454 = *((_QWORD *)v436 - 1);
          v436 -= 8;
          *((_QWORD *)v451 - 1) = v454;
          v451 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v433 != 1)
        goto LABEL_646;
      v434 = *(_QWORD **)a1[1];
      v435 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v436 = (char *)v434[554];
      v437 = v434[555];
      if ((unint64_t)v436 >= v437)
      {
        v438 = (char *)v434[553];
        v439 = (v436 - v438) >> 3;
        if ((unint64_t)(v439 + 1) >> 61)
          goto LABEL_1032;
        v440 = v437 - (_QWORD)v438;
        v441 = (uint64_t)(v437 - (_QWORD)v438) >> 2;
        if (v441 <= v439 + 1)
          v441 = v439 + 1;
        if (v440 >= 0x7FFFFFFFFFFFFFF8)
          v442 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v442 = v441;
        if (v442)
        {
          v443 = (char *)sub_40FC((uint64_t)(v434 + 555), v442);
          v436 = (char *)v434[554];
          v438 = (char *)v434[553];
        }
        else
        {
          v443 = 0;
        }
        v451 = &v443[8 * v439];
        v452 = &v443[8 * v442];
        *(_QWORD *)v451 = v435;
        v445 = v451 + 8;
        while (v436 != v438)
        {
          v453 = *((_QWORD *)v436 - 1);
          v436 -= 8;
          *((_QWORD *)v451 - 1) = v453;
          v451 -= 8;
        }
LABEL_643:
        v434[553] = v451;
        v434[554] = v445;
        v434[555] = v452;
        if (v438)
          operator delete(v438);
        goto LABEL_645;
      }
    }
    *(_QWORD *)v436 = v435;
    v445 = v436 + 8;
LABEL_645:
    v434[554] = v445;
LABEL_646:
    v455 = 1 << *(_DWORD *)(v3 + 48);
    if (v455 == 2)
    {
      v456 = *(_QWORD **)a1[1];
      v457 = *(_WORD *)(a1[2] + 76) & 0x1FFF;
      v458 = (char *)v456[557];
      v466 = v456[558];
      if ((unint64_t)v458 >= v466)
      {
        v460 = (char *)v456[556];
        v468 = (v458 - v460) >> 3;
        if ((unint64_t)(v468 + 1) >> 61)
          goto LABEL_1032;
        v469 = v466 - (_QWORD)v460;
        v470 = (uint64_t)(v466 - (_QWORD)v460) >> 2;
        if (v470 <= v468 + 1)
          v470 = v468 + 1;
        if (v469 >= 0x7FFFFFFFFFFFFFF8)
          v471 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v471 = v470;
        if (v471)
        {
          v472 = (char *)sub_40FC((uint64_t)(v456 + 558), v471);
          v458 = (char *)v456[557];
          v460 = (char *)v456[556];
        }
        else
        {
          v472 = 0;
        }
        v473 = &v472[8 * v468];
        v474 = &v472[8 * v471];
        *(_QWORD *)v473 = v457;
        v467 = v473 + 8;
        while (v458 != v460)
        {
          v476 = *((_QWORD *)v458 - 1);
          v458 -= 8;
          *((_QWORD *)v473 - 1) = v476;
          v473 -= 8;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v455 != 1)
        goto LABEL_678;
      v456 = *(_QWORD **)a1[1];
      v457 = *(_WORD *)(a1[2] + 76) & 0x1FFF;
      v458 = (char *)v456[557];
      v459 = v456[558];
      if ((unint64_t)v458 >= v459)
      {
        v460 = (char *)v456[556];
        v461 = (v458 - v460) >> 3;
        if ((unint64_t)(v461 + 1) >> 61)
          goto LABEL_1032;
        v462 = v459 - (_QWORD)v460;
        v463 = (uint64_t)(v459 - (_QWORD)v460) >> 2;
        if (v463 <= v461 + 1)
          v463 = v461 + 1;
        if (v462 >= 0x7FFFFFFFFFFFFFF8)
          v464 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v464 = v463;
        if (v464)
        {
          v465 = (char *)sub_40FC((uint64_t)(v456 + 558), v464);
          v458 = (char *)v456[557];
          v460 = (char *)v456[556];
        }
        else
        {
          v465 = 0;
        }
        v473 = &v465[8 * v461];
        v474 = &v465[8 * v464];
        *(_QWORD *)v473 = v457;
        v467 = v473 + 8;
        while (v458 != v460)
        {
          v475 = *((_QWORD *)v458 - 1);
          v458 -= 8;
          *((_QWORD *)v473 - 1) = v475;
          v473 -= 8;
        }
LABEL_675:
        v456[556] = v473;
        v456[557] = v467;
        v456[558] = v474;
        if (v460)
          operator delete(v460);
        goto LABEL_677;
      }
    }
    *(_QWORD *)v458 = v457;
    v467 = v458 + 8;
LABEL_677:
    v456[557] = v467;
LABEL_678:
    v477 = 1 << *(_DWORD *)(v3 + 48);
    if (v477 == 2)
    {
      v478 = *(_QWORD **)a1[1];
      v479 = *(_WORD *)(a1[2] + 60) & 0x1FFF;
      v480 = (char *)v478[560];
      v488 = v478[561];
      if ((unint64_t)v480 >= v488)
      {
        v482 = (char *)v478[559];
        v490 = (v480 - v482) >> 3;
        if ((unint64_t)(v490 + 1) >> 61)
          goto LABEL_1032;
        v491 = v488 - (_QWORD)v482;
        v492 = (uint64_t)(v488 - (_QWORD)v482) >> 2;
        if (v492 <= v490 + 1)
          v492 = v490 + 1;
        if (v491 >= 0x7FFFFFFFFFFFFFF8)
          v493 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v493 = v492;
        if (v493)
        {
          v494 = (char *)sub_40FC((uint64_t)(v478 + 561), v493);
          v480 = (char *)v478[560];
          v482 = (char *)v478[559];
        }
        else
        {
          v494 = 0;
        }
        v495 = &v494[8 * v490];
        v496 = &v494[8 * v493];
        *(_QWORD *)v495 = v479;
        v489 = v495 + 8;
        while (v480 != v482)
        {
          v498 = *((_QWORD *)v480 - 1);
          v480 -= 8;
          *((_QWORD *)v495 - 1) = v498;
          v495 -= 8;
        }
        goto LABEL_707;
      }
    }
    else
    {
      if (v477 != 1)
        goto LABEL_710;
      v478 = *(_QWORD **)a1[1];
      v479 = *(_WORD *)(a1[2] + 60) & 0x1FFF;
      v480 = (char *)v478[560];
      v481 = v478[561];
      if ((unint64_t)v480 >= v481)
      {
        v482 = (char *)v478[559];
        v483 = (v480 - v482) >> 3;
        if ((unint64_t)(v483 + 1) >> 61)
          goto LABEL_1032;
        v484 = v481 - (_QWORD)v482;
        v485 = (uint64_t)(v481 - (_QWORD)v482) >> 2;
        if (v485 <= v483 + 1)
          v485 = v483 + 1;
        if (v484 >= 0x7FFFFFFFFFFFFFF8)
          v486 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v486 = v485;
        if (v486)
        {
          v487 = (char *)sub_40FC((uint64_t)(v478 + 561), v486);
          v480 = (char *)v478[560];
          v482 = (char *)v478[559];
        }
        else
        {
          v487 = 0;
        }
        v495 = &v487[8 * v483];
        v496 = &v487[8 * v486];
        *(_QWORD *)v495 = v479;
        v489 = v495 + 8;
        while (v480 != v482)
        {
          v497 = *((_QWORD *)v480 - 1);
          v480 -= 8;
          *((_QWORD *)v495 - 1) = v497;
          v495 -= 8;
        }
LABEL_707:
        v478[559] = v495;
        v478[560] = v489;
        v478[561] = v496;
        if (v482)
          operator delete(v482);
        goto LABEL_709;
      }
    }
    *(_QWORD *)v480 = v479;
    v489 = v480 + 8;
LABEL_709:
    v478[560] = v489;
LABEL_710:
    v499 = 1 << *(_DWORD *)(v3 + 48);
    if (v499 == 2)
    {
      v500 = *(_QWORD **)a1[1];
      v501 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      v502 = (char *)v500[563];
      v510 = v500[564];
      if ((unint64_t)v502 >= v510)
      {
        v504 = (char *)v500[562];
        v512 = (v502 - v504) >> 3;
        if ((unint64_t)(v512 + 1) >> 61)
          goto LABEL_1032;
        v513 = v510 - (_QWORD)v504;
        v514 = (uint64_t)(v510 - (_QWORD)v504) >> 2;
        if (v514 <= v512 + 1)
          v514 = v512 + 1;
        if (v513 >= 0x7FFFFFFFFFFFFFF8)
          v515 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v515 = v514;
        if (v515)
        {
          v516 = (char *)sub_40FC((uint64_t)(v500 + 564), v515);
          v502 = (char *)v500[563];
          v504 = (char *)v500[562];
        }
        else
        {
          v516 = 0;
        }
        v517 = &v516[8 * v512];
        v518 = &v516[8 * v515];
        *(_QWORD *)v517 = v501;
        v511 = v517 + 8;
        while (v502 != v504)
        {
          v520 = *((_QWORD *)v502 - 1);
          v502 -= 8;
          *((_QWORD *)v517 - 1) = v520;
          v517 -= 8;
        }
        goto LABEL_739;
      }
    }
    else
    {
      if (v499 != 1)
        goto LABEL_742;
      v500 = *(_QWORD **)a1[1];
      v501 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      v502 = (char *)v500[563];
      v503 = v500[564];
      if ((unint64_t)v502 >= v503)
      {
        v504 = (char *)v500[562];
        v505 = (v502 - v504) >> 3;
        if ((unint64_t)(v505 + 1) >> 61)
          goto LABEL_1032;
        v506 = v503 - (_QWORD)v504;
        v507 = (uint64_t)(v503 - (_QWORD)v504) >> 2;
        if (v507 <= v505 + 1)
          v507 = v505 + 1;
        if (v506 >= 0x7FFFFFFFFFFFFFF8)
          v508 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v508 = v507;
        if (v508)
        {
          v509 = (char *)sub_40FC((uint64_t)(v500 + 564), v508);
          v502 = (char *)v500[563];
          v504 = (char *)v500[562];
        }
        else
        {
          v509 = 0;
        }
        v517 = &v509[8 * v505];
        v518 = &v509[8 * v508];
        *(_QWORD *)v517 = v501;
        v511 = v517 + 8;
        while (v502 != v504)
        {
          v519 = *((_QWORD *)v502 - 1);
          v502 -= 8;
          *((_QWORD *)v517 - 1) = v519;
          v517 -= 8;
        }
LABEL_739:
        v500[562] = v517;
        v500[563] = v511;
        v500[564] = v518;
        if (v504)
          operator delete(v504);
        goto LABEL_741;
      }
    }
    *(_QWORD *)v502 = v501;
    v511 = v502 + 8;
LABEL_741:
    v500[563] = v511;
LABEL_742:
    v521 = 1 << *(_DWORD *)(v3 + 48);
    if (v521 == 2)
    {
      v522 = *(_QWORD **)a1[1];
      v523 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v524 = (char *)v522[566];
      v532 = v522[567];
      if ((unint64_t)v524 >= v532)
      {
        v526 = (char *)v522[565];
        v534 = (v524 - v526) >> 3;
        if ((unint64_t)(v534 + 1) >> 61)
          goto LABEL_1032;
        v535 = v532 - (_QWORD)v526;
        v536 = (uint64_t)(v532 - (_QWORD)v526) >> 2;
        if (v536 <= v534 + 1)
          v536 = v534 + 1;
        if (v535 >= 0x7FFFFFFFFFFFFFF8)
          v537 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v537 = v536;
        if (v537)
        {
          v538 = (char *)sub_40FC((uint64_t)(v522 + 567), v537);
          v524 = (char *)v522[566];
          v526 = (char *)v522[565];
        }
        else
        {
          v538 = 0;
        }
        v539 = &v538[8 * v534];
        v540 = &v538[8 * v537];
        *(_QWORD *)v539 = v523;
        v533 = v539 + 8;
        while (v524 != v526)
        {
          v542 = *((_QWORD *)v524 - 1);
          v524 -= 8;
          *((_QWORD *)v539 - 1) = v542;
          v539 -= 8;
        }
        goto LABEL_771;
      }
    }
    else
    {
      if (v521 != 1)
        goto LABEL_774;
      v522 = *(_QWORD **)a1[1];
      v523 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v524 = (char *)v522[566];
      v525 = v522[567];
      if ((unint64_t)v524 >= v525)
      {
        v526 = (char *)v522[565];
        v527 = (v524 - v526) >> 3;
        if ((unint64_t)(v527 + 1) >> 61)
          goto LABEL_1032;
        v528 = v525 - (_QWORD)v526;
        v529 = (uint64_t)(v525 - (_QWORD)v526) >> 2;
        if (v529 <= v527 + 1)
          v529 = v527 + 1;
        if (v528 >= 0x7FFFFFFFFFFFFFF8)
          v530 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v530 = v529;
        if (v530)
        {
          v531 = (char *)sub_40FC((uint64_t)(v522 + 567), v530);
          v524 = (char *)v522[566];
          v526 = (char *)v522[565];
        }
        else
        {
          v531 = 0;
        }
        v539 = &v531[8 * v527];
        v540 = &v531[8 * v530];
        *(_QWORD *)v539 = v523;
        v533 = v539 + 8;
        while (v524 != v526)
        {
          v541 = *((_QWORD *)v524 - 1);
          v524 -= 8;
          *((_QWORD *)v539 - 1) = v541;
          v539 -= 8;
        }
LABEL_771:
        v522[565] = v539;
        v522[566] = v533;
        v522[567] = v540;
        if (v526)
          operator delete(v526);
        goto LABEL_773;
      }
    }
    *(_QWORD *)v524 = v523;
    v533 = v524 + 8;
LABEL_773:
    v522[566] = v533;
LABEL_774:
    v543 = 1 << *(_DWORD *)(v3 + 48);
    if (v543 == 2)
    {
      v544 = *(_QWORD **)a1[1];
      v545 = *(_WORD *)(a1[2] + 68) & 0x1FFF;
      v546 = (char *)v544[569];
      v554 = v544[570];
      if ((unint64_t)v546 >= v554)
      {
        v548 = (char *)v544[568];
        v556 = (v546 - v548) >> 3;
        if ((unint64_t)(v556 + 1) >> 61)
          goto LABEL_1032;
        v557 = v554 - (_QWORD)v548;
        v558 = (uint64_t)(v554 - (_QWORD)v548) >> 2;
        if (v558 <= v556 + 1)
          v558 = v556 + 1;
        if (v557 >= 0x7FFFFFFFFFFFFFF8)
          v559 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v559 = v558;
        if (v559)
        {
          v560 = (char *)sub_40FC((uint64_t)(v544 + 570), v559);
          v546 = (char *)v544[569];
          v548 = (char *)v544[568];
        }
        else
        {
          v560 = 0;
        }
        v561 = &v560[8 * v556];
        v562 = &v560[8 * v559];
        *(_QWORD *)v561 = v545;
        v555 = v561 + 8;
        while (v546 != v548)
        {
          v564 = *((_QWORD *)v546 - 1);
          v546 -= 8;
          *((_QWORD *)v561 - 1) = v564;
          v561 -= 8;
        }
        goto LABEL_803;
      }
    }
    else
    {
      if (v543 != 1)
        goto LABEL_806;
      v544 = *(_QWORD **)a1[1];
      v545 = *(_WORD *)(a1[2] + 68) & 0x1FFF;
      v546 = (char *)v544[569];
      v547 = v544[570];
      if ((unint64_t)v546 >= v547)
      {
        v548 = (char *)v544[568];
        v549 = (v546 - v548) >> 3;
        if ((unint64_t)(v549 + 1) >> 61)
          goto LABEL_1032;
        v550 = v547 - (_QWORD)v548;
        v551 = (uint64_t)(v547 - (_QWORD)v548) >> 2;
        if (v551 <= v549 + 1)
          v551 = v549 + 1;
        if (v550 >= 0x7FFFFFFFFFFFFFF8)
          v552 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v552 = v551;
        if (v552)
        {
          v553 = (char *)sub_40FC((uint64_t)(v544 + 570), v552);
          v546 = (char *)v544[569];
          v548 = (char *)v544[568];
        }
        else
        {
          v553 = 0;
        }
        v561 = &v553[8 * v549];
        v562 = &v553[8 * v552];
        *(_QWORD *)v561 = v545;
        v555 = v561 + 8;
        while (v546 != v548)
        {
          v563 = *((_QWORD *)v546 - 1);
          v546 -= 8;
          *((_QWORD *)v561 - 1) = v563;
          v561 -= 8;
        }
LABEL_803:
        v544[568] = v561;
        v544[569] = v555;
        v544[570] = v562;
        if (v548)
          operator delete(v548);
        goto LABEL_805;
      }
    }
    *(_QWORD *)v546 = v545;
    v555 = v546 + 8;
LABEL_805:
    v544[569] = v555;
LABEL_806:
    v565 = 1 << *(_DWORD *)(v3 + 48);
    if (v565 == 2)
    {
      v566 = *(_QWORD **)a1[1];
      v567 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
      v568 = (char *)v566[572];
      v576 = v566[573];
      if ((unint64_t)v568 >= v576)
      {
        v570 = (char *)v566[571];
        v578 = (v568 - v570) >> 3;
        if ((unint64_t)(v578 + 1) >> 61)
          goto LABEL_1032;
        v579 = v576 - (_QWORD)v570;
        v580 = (uint64_t)(v576 - (_QWORD)v570) >> 2;
        if (v580 <= v578 + 1)
          v580 = v578 + 1;
        if (v579 >= 0x7FFFFFFFFFFFFFF8)
          v581 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v581 = v580;
        if (v581)
        {
          v582 = (char *)sub_40FC((uint64_t)(v566 + 573), v581);
          v568 = (char *)v566[572];
          v570 = (char *)v566[571];
        }
        else
        {
          v582 = 0;
        }
        v583 = &v582[8 * v578];
        v584 = &v582[8 * v581];
        *(_QWORD *)v583 = v567;
        v577 = v583 + 8;
        while (v568 != v570)
        {
          v586 = *((_QWORD *)v568 - 1);
          v568 -= 8;
          *((_QWORD *)v583 - 1) = v586;
          v583 -= 8;
        }
        goto LABEL_835;
      }
    }
    else
    {
      if (v565 != 1)
        goto LABEL_838;
      v566 = *(_QWORD **)a1[1];
      v567 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
      v568 = (char *)v566[572];
      v569 = v566[573];
      if ((unint64_t)v568 >= v569)
      {
        v570 = (char *)v566[571];
        v571 = (v568 - v570) >> 3;
        if ((unint64_t)(v571 + 1) >> 61)
          goto LABEL_1032;
        v572 = v569 - (_QWORD)v570;
        v573 = (uint64_t)(v569 - (_QWORD)v570) >> 2;
        if (v573 <= v571 + 1)
          v573 = v571 + 1;
        if (v572 >= 0x7FFFFFFFFFFFFFF8)
          v574 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v574 = v573;
        if (v574)
        {
          v575 = (char *)sub_40FC((uint64_t)(v566 + 573), v574);
          v568 = (char *)v566[572];
          v570 = (char *)v566[571];
        }
        else
        {
          v575 = 0;
        }
        v583 = &v575[8 * v571];
        v584 = &v575[8 * v574];
        *(_QWORD *)v583 = v567;
        v577 = v583 + 8;
        while (v568 != v570)
        {
          v585 = *((_QWORD *)v568 - 1);
          v568 -= 8;
          *((_QWORD *)v583 - 1) = v585;
          v583 -= 8;
        }
LABEL_835:
        v566[571] = v583;
        v566[572] = v577;
        v566[573] = v584;
        if (v570)
          operator delete(v570);
        goto LABEL_837;
      }
    }
    *(_QWORD *)v568 = v567;
    v577 = v568 + 8;
LABEL_837:
    v566[572] = v577;
LABEL_838:
    v587 = 1 << *(_DWORD *)(v3 + 48);
    if (v587 == 2)
    {
      v588 = *(_QWORD **)a1[1];
      v589 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
      v590 = (char *)v588[575];
      v598 = v588[576];
      if ((unint64_t)v590 >= v598)
      {
        v592 = (char *)v588[574];
        v600 = (v590 - v592) >> 3;
        if ((unint64_t)(v600 + 1) >> 61)
          goto LABEL_1032;
        v601 = v598 - (_QWORD)v592;
        v602 = (uint64_t)(v598 - (_QWORD)v592) >> 2;
        if (v602 <= v600 + 1)
          v602 = v600 + 1;
        if (v601 >= 0x7FFFFFFFFFFFFFF8)
          v603 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v603 = v602;
        if (v603)
        {
          v604 = (char *)sub_40FC((uint64_t)(v588 + 576), v603);
          v590 = (char *)v588[575];
          v592 = (char *)v588[574];
        }
        else
        {
          v604 = 0;
        }
        v605 = &v604[8 * v600];
        v606 = &v604[8 * v603];
        *(_QWORD *)v605 = v589;
        v599 = v605 + 8;
        while (v590 != v592)
        {
          v608 = *((_QWORD *)v590 - 1);
          v590 -= 8;
          *((_QWORD *)v605 - 1) = v608;
          v605 -= 8;
        }
        goto LABEL_867;
      }
    }
    else
    {
      if (v587 != 1)
        goto LABEL_870;
      v588 = *(_QWORD **)a1[1];
      v589 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
      v590 = (char *)v588[575];
      v591 = v588[576];
      if ((unint64_t)v590 >= v591)
      {
        v592 = (char *)v588[574];
        v593 = (v590 - v592) >> 3;
        if ((unint64_t)(v593 + 1) >> 61)
          goto LABEL_1032;
        v594 = v591 - (_QWORD)v592;
        v595 = (uint64_t)(v591 - (_QWORD)v592) >> 2;
        if (v595 <= v593 + 1)
          v595 = v593 + 1;
        if (v594 >= 0x7FFFFFFFFFFFFFF8)
          v596 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v596 = v595;
        if (v596)
        {
          v597 = (char *)sub_40FC((uint64_t)(v588 + 576), v596);
          v590 = (char *)v588[575];
          v592 = (char *)v588[574];
        }
        else
        {
          v597 = 0;
        }
        v605 = &v597[8 * v593];
        v606 = &v597[8 * v596];
        *(_QWORD *)v605 = v589;
        v599 = v605 + 8;
        while (v590 != v592)
        {
          v607 = *((_QWORD *)v590 - 1);
          v590 -= 8;
          *((_QWORD *)v605 - 1) = v607;
          v605 -= 8;
        }
LABEL_867:
        v588[574] = v605;
        v588[575] = v599;
        v588[576] = v606;
        if (v592)
          operator delete(v592);
        goto LABEL_869;
      }
    }
    *(_QWORD *)v590 = v589;
    v599 = v590 + 8;
LABEL_869:
    v588[575] = v599;
LABEL_870:
    v609 = 1 << *(_DWORD *)(v3 + 48);
    if (v609 == 2)
    {
      v610 = *(_QWORD **)a1[1];
      v611 = (unsigned __int16)*(_DWORD *)(a1[2] + 20) >> 1;
      v612 = (char *)v610[578];
      v620 = v610[579];
      if ((unint64_t)v612 >= v620)
      {
        v614 = (char *)v610[577];
        v622 = (v612 - v614) >> 3;
        if ((unint64_t)(v622 + 1) >> 61)
          goto LABEL_1032;
        v623 = v620 - (_QWORD)v614;
        v624 = (uint64_t)(v620 - (_QWORD)v614) >> 2;
        if (v624 <= v622 + 1)
          v624 = v622 + 1;
        if (v623 >= 0x7FFFFFFFFFFFFFF8)
          v625 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v625 = v624;
        if (v625)
        {
          v626 = (char *)sub_40FC((uint64_t)(v610 + 579), v625);
          v612 = (char *)v610[578];
          v614 = (char *)v610[577];
        }
        else
        {
          v626 = 0;
        }
        v627 = &v626[8 * v622];
        v628 = &v626[8 * v625];
        *(_QWORD *)v627 = v611;
        v621 = v627 + 8;
        while (v612 != v614)
        {
          v630 = *((_QWORD *)v612 - 1);
          v612 -= 8;
          *((_QWORD *)v627 - 1) = v630;
          v627 -= 8;
        }
        goto LABEL_899;
      }
    }
    else
    {
      if (v609 != 1)
        goto LABEL_902;
      v610 = *(_QWORD **)a1[1];
      v611 = (unsigned __int16)*(_DWORD *)(a1[2] + 20) >> 1;
      v612 = (char *)v610[578];
      v613 = v610[579];
      if ((unint64_t)v612 >= v613)
      {
        v614 = (char *)v610[577];
        v615 = (v612 - v614) >> 3;
        if ((unint64_t)(v615 + 1) >> 61)
          goto LABEL_1032;
        v616 = v613 - (_QWORD)v614;
        v617 = (uint64_t)(v613 - (_QWORD)v614) >> 2;
        if (v617 <= v615 + 1)
          v617 = v615 + 1;
        if (v616 >= 0x7FFFFFFFFFFFFFF8)
          v618 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v618 = v617;
        if (v618)
        {
          v619 = (char *)sub_40FC((uint64_t)(v610 + 579), v618);
          v612 = (char *)v610[578];
          v614 = (char *)v610[577];
        }
        else
        {
          v619 = 0;
        }
        v627 = &v619[8 * v615];
        v628 = &v619[8 * v618];
        *(_QWORD *)v627 = v611;
        v621 = v627 + 8;
        while (v612 != v614)
        {
          v629 = *((_QWORD *)v612 - 1);
          v612 -= 8;
          *((_QWORD *)v627 - 1) = v629;
          v627 -= 8;
        }
LABEL_899:
        v610[577] = v627;
        v610[578] = v621;
        v610[579] = v628;
        if (v614)
          operator delete(v614);
        goto LABEL_901;
      }
    }
    *(_QWORD *)v612 = v611;
    v621 = v612 + 8;
LABEL_901:
    v610[578] = v621;
LABEL_902:
    v631 = 1 << *(_DWORD *)(v3 + 48);
    if (v631 == 2)
    {
      v632 = *(_QWORD **)a1[1];
      v633 = *(_WORD *)(a1[2] + 70) & 0x1FFF;
      v634 = (char *)v632[581];
      v642 = v632[582];
      if ((unint64_t)v634 >= v642)
      {
        v636 = (char *)v632[580];
        v644 = (v634 - v636) >> 3;
        if ((unint64_t)(v644 + 1) >> 61)
          goto LABEL_1032;
        v645 = v642 - (_QWORD)v636;
        v646 = (uint64_t)(v642 - (_QWORD)v636) >> 2;
        if (v646 <= v644 + 1)
          v646 = v644 + 1;
        if (v645 >= 0x7FFFFFFFFFFFFFF8)
          v647 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v647 = v646;
        if (v647)
        {
          v648 = (char *)sub_40FC((uint64_t)(v632 + 582), v647);
          v634 = (char *)v632[581];
          v636 = (char *)v632[580];
        }
        else
        {
          v648 = 0;
        }
        v649 = &v648[8 * v644];
        v650 = &v648[8 * v647];
        *(_QWORD *)v649 = v633;
        v643 = v649 + 8;
        while (v634 != v636)
        {
          v652 = *((_QWORD *)v634 - 1);
          v634 -= 8;
          *((_QWORD *)v649 - 1) = v652;
          v649 -= 8;
        }
        goto LABEL_931;
      }
    }
    else
    {
      if (v631 != 1)
        goto LABEL_934;
      v632 = *(_QWORD **)a1[1];
      v633 = *(_WORD *)(a1[2] + 70) & 0x1FFF;
      v634 = (char *)v632[581];
      v635 = v632[582];
      if ((unint64_t)v634 >= v635)
      {
        v636 = (char *)v632[580];
        v637 = (v634 - v636) >> 3;
        if ((unint64_t)(v637 + 1) >> 61)
          goto LABEL_1032;
        v638 = v635 - (_QWORD)v636;
        v639 = (uint64_t)(v635 - (_QWORD)v636) >> 2;
        if (v639 <= v637 + 1)
          v639 = v637 + 1;
        if (v638 >= 0x7FFFFFFFFFFFFFF8)
          v640 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v640 = v639;
        if (v640)
        {
          v641 = (char *)sub_40FC((uint64_t)(v632 + 582), v640);
          v634 = (char *)v632[581];
          v636 = (char *)v632[580];
        }
        else
        {
          v641 = 0;
        }
        v649 = &v641[8 * v637];
        v650 = &v641[8 * v640];
        *(_QWORD *)v649 = v633;
        v643 = v649 + 8;
        while (v634 != v636)
        {
          v651 = *((_QWORD *)v634 - 1);
          v634 -= 8;
          *((_QWORD *)v649 - 1) = v651;
          v649 -= 8;
        }
LABEL_931:
        v632[580] = v649;
        v632[581] = v643;
        v632[582] = v650;
        if (v636)
          operator delete(v636);
        goto LABEL_933;
      }
    }
    *(_QWORD *)v634 = v633;
    v643 = v634 + 8;
LABEL_933:
    v632[581] = v643;
LABEL_934:
    v653 = 1 << *(_DWORD *)(v3 + 48);
    if (v653 == 2)
    {
      v654 = *(_QWORD **)a1[1];
      v655 = *(_WORD *)(a1[2] + 54) & 0x3FFF;
      v656 = (char *)v654[584];
      v664 = v654[585];
      if ((unint64_t)v656 >= v664)
      {
        v658 = (char *)v654[583];
        v666 = (v656 - v658) >> 3;
        if ((unint64_t)(v666 + 1) >> 61)
          goto LABEL_1032;
        v667 = v664 - (_QWORD)v658;
        v668 = (uint64_t)(v664 - (_QWORD)v658) >> 2;
        if (v668 <= v666 + 1)
          v668 = v666 + 1;
        if (v667 >= 0x7FFFFFFFFFFFFFF8)
          v669 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v669 = v668;
        if (v669)
        {
          v670 = (char *)sub_40FC((uint64_t)(v654 + 585), v669);
          v656 = (char *)v654[584];
          v658 = (char *)v654[583];
        }
        else
        {
          v670 = 0;
        }
        v671 = &v670[8 * v666];
        v672 = &v670[8 * v669];
        *(_QWORD *)v671 = v655;
        v665 = v671 + 8;
        while (v656 != v658)
        {
          v674 = *((_QWORD *)v656 - 1);
          v656 -= 8;
          *((_QWORD *)v671 - 1) = v674;
          v671 -= 8;
        }
        goto LABEL_963;
      }
    }
    else
    {
      if (v653 != 1)
        goto LABEL_966;
      v654 = *(_QWORD **)a1[1];
      v655 = *(_WORD *)(a1[2] + 54) & 0x3FFF;
      v656 = (char *)v654[584];
      v657 = v654[585];
      if ((unint64_t)v656 >= v657)
      {
        v658 = (char *)v654[583];
        v659 = (v656 - v658) >> 3;
        if ((unint64_t)(v659 + 1) >> 61)
          goto LABEL_1032;
        v660 = v657 - (_QWORD)v658;
        v661 = (uint64_t)(v657 - (_QWORD)v658) >> 2;
        if (v661 <= v659 + 1)
          v661 = v659 + 1;
        if (v660 >= 0x7FFFFFFFFFFFFFF8)
          v662 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v662 = v661;
        if (v662)
        {
          v663 = (char *)sub_40FC((uint64_t)(v654 + 585), v662);
          v656 = (char *)v654[584];
          v658 = (char *)v654[583];
        }
        else
        {
          v663 = 0;
        }
        v671 = &v663[8 * v659];
        v672 = &v663[8 * v662];
        *(_QWORD *)v671 = v655;
        v665 = v671 + 8;
        while (v656 != v658)
        {
          v673 = *((_QWORD *)v656 - 1);
          v656 -= 8;
          *((_QWORD *)v671 - 1) = v673;
          v671 -= 8;
        }
LABEL_963:
        v654[583] = v671;
        v654[584] = v665;
        v654[585] = v672;
        if (v658)
          operator delete(v658);
        goto LABEL_965;
      }
    }
    *(_QWORD *)v656 = v655;
    v665 = v656 + 8;
LABEL_965:
    v654[584] = v665;
LABEL_966:
    v675 = 1 << *(_DWORD *)(v3 + 48);
    if (v675 == 2)
    {
      v676 = *(_QWORD **)a1[1];
      v677 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
      v678 = (char *)v676[587];
      v686 = v676[588];
      if ((unint64_t)v678 >= v686)
      {
        v680 = (char *)v676[586];
        v688 = (v678 - v680) >> 3;
        if ((unint64_t)(v688 + 1) >> 61)
          goto LABEL_1032;
        v689 = v686 - (_QWORD)v680;
        v690 = (uint64_t)(v686 - (_QWORD)v680) >> 2;
        if (v690 <= v688 + 1)
          v690 = v688 + 1;
        if (v689 >= 0x7FFFFFFFFFFFFFF8)
          v691 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v691 = v690;
        if (v691)
        {
          v692 = (char *)sub_40FC((uint64_t)(v676 + 588), v691);
          v678 = (char *)v676[587];
          v680 = (char *)v676[586];
        }
        else
        {
          v692 = 0;
        }
        v693 = &v692[8 * v688];
        v694 = &v692[8 * v691];
        *(_QWORD *)v693 = v677;
        v687 = v693 + 8;
        while (v678 != v680)
        {
          v696 = *((_QWORD *)v678 - 1);
          v678 -= 8;
          *((_QWORD *)v693 - 1) = v696;
          v693 -= 8;
        }
        goto LABEL_995;
      }
    }
    else
    {
      if (v675 != 1)
        goto LABEL_998;
      v676 = *(_QWORD **)a1[1];
      v677 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
      v678 = (char *)v676[587];
      v679 = v676[588];
      if ((unint64_t)v678 >= v679)
      {
        v680 = (char *)v676[586];
        v681 = (v678 - v680) >> 3;
        if ((unint64_t)(v681 + 1) >> 61)
          goto LABEL_1032;
        v682 = v679 - (_QWORD)v680;
        v683 = (uint64_t)(v679 - (_QWORD)v680) >> 2;
        if (v683 <= v681 + 1)
          v683 = v681 + 1;
        if (v682 >= 0x7FFFFFFFFFFFFFF8)
          v684 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v684 = v683;
        if (v684)
        {
          v685 = (char *)sub_40FC((uint64_t)(v676 + 588), v684);
          v678 = (char *)v676[587];
          v680 = (char *)v676[586];
        }
        else
        {
          v685 = 0;
        }
        v693 = &v685[8 * v681];
        v694 = &v685[8 * v684];
        *(_QWORD *)v693 = v677;
        v687 = v693 + 8;
        while (v678 != v680)
        {
          v695 = *((_QWORD *)v678 - 1);
          v678 -= 8;
          *((_QWORD *)v693 - 1) = v695;
          v693 -= 8;
        }
LABEL_995:
        v676[586] = v693;
        v676[587] = v687;
        v676[588] = v694;
        if (v680)
          operator delete(v680);
        goto LABEL_997;
      }
    }
    *(_QWORD *)v678 = v677;
    v687 = v678 + 8;
LABEL_997:
    v676[587] = v687;
LABEL_998:
    v697 = 1 << *(_DWORD *)(v3 + 48);
    if (v697 == 2)
    {
      v709 = a1[2];
      v699 = *(_QWORD **)a1[1];
      v700 = *(_WORD *)(v709 + 22) & 0x7FFF;
      v701 = (char *)v699[590];
      v710 = v699[591];
      if ((unint64_t)v701 >= v710)
      {
        v703 = (char *)v699[589];
        v712 = (v701 - v703) >> 3;
        if (!((unint64_t)(v712 + 1) >> 61))
        {
          v713 = v710 - (_QWORD)v703;
          v714 = (uint64_t)(v710 - (_QWORD)v703) >> 2;
          if (v714 <= v712 + 1)
            v714 = v712 + 1;
          if (v713 >= 0x7FFFFFFFFFFFFFF8)
            v715 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v715 = v714;
          if (v715)
          {
            v716 = (char *)sub_40FC((uint64_t)(v699 + 591), v715);
            v701 = (char *)v699[590];
            v703 = (char *)v699[589];
          }
          else
          {
            v716 = 0;
          }
          v717 = &v716[8 * v712];
          v718 = &v716[8 * v715];
          *(_QWORD *)v717 = v700;
          v711 = v717 + 8;
          while (v701 != v703)
          {
            v720 = *((_QWORD *)v701 - 1);
            v701 -= 8;
            *((_QWORD *)v717 - 1) = v720;
            v717 -= 8;
          }
          goto LABEL_1027;
        }
LABEL_1032:
        sub_4074();
      }
    }
    else
    {
      if (v697 != 1)
      {
LABEL_1030:
        *a2 = 1;
        return;
      }
      v698 = a1[2];
      v699 = *(_QWORD **)a1[1];
      v700 = *(_WORD *)(v698 + 22) & 0x7FFF;
      v701 = (char *)v699[590];
      v702 = v699[591];
      if ((unint64_t)v701 >= v702)
      {
        v703 = (char *)v699[589];
        v704 = (v701 - v703) >> 3;
        if (!((unint64_t)(v704 + 1) >> 61))
        {
          v705 = v702 - (_QWORD)v703;
          v706 = (uint64_t)(v702 - (_QWORD)v703) >> 2;
          if (v706 <= v704 + 1)
            v706 = v704 + 1;
          if (v705 >= 0x7FFFFFFFFFFFFFF8)
            v707 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v707 = v706;
          if (v707)
          {
            v708 = (char *)sub_40FC((uint64_t)(v699 + 591), v707);
            v701 = (char *)v699[590];
            v703 = (char *)v699[589];
          }
          else
          {
            v708 = 0;
          }
          v717 = &v708[8 * v704];
          v718 = &v708[8 * v707];
          *(_QWORD *)v717 = v700;
          v711 = v717 + 8;
          while (v701 != v703)
          {
            v719 = *((_QWORD *)v701 - 1);
            v701 -= 8;
            *((_QWORD *)v717 - 1) = v719;
            v717 -= 8;
          }
LABEL_1027:
          v699[589] = v717;
          v699[590] = v711;
          v699[591] = v718;
          if (v703)
            operator delete(v703);
          goto LABEL_1029;
        }
        goto LABEL_1032;
      }
    }
    *(_QWORD *)v701 = v700;
    v711 = v701 + 8;
LABEL_1029:
    v699[590] = v711;
    goto LABEL_1030;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = (_WORD *)a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[497] - 8) += v17[39] & 0x1FFF;
    *(_QWORD *)(v19[500] - 8) += v17[31] & 0x3FFF;
    *(_QWORD *)(v19[503] - 8) += v17[23] & 0x3FFF;
    *(_QWORD *)(v19[506] - 8) += v17[15] & 0x7FFF;
    *(_QWORD *)(v19[509] - 8) += v17[40] & 0x1FFF;
    *(_QWORD *)(v19[512] - 8) += v17[32] & 0x3FFF;
    *(_QWORD *)(v19[515] - 8) += v17[24] & 0x3FFF;
    *(_QWORD *)(v19[518] - 8) += v17[16] & 0x7FFF;
    *(_QWORD *)(v19[521] - 8) += v17[41] & 0x1FFF;
    *(_QWORD *)(v19[524] - 8) += v17[33] & 0x3FFF;
    v20 = (_WORD *)a1[2];
    v21 = *(_QWORD **)a1[1];
    *(_QWORD *)(v21[527] - 8) += v20[25] & 0x3FFF;
    *(_QWORD *)(v21[530] - 8) += v20[17] & 0x7FFF;
    *(_QWORD *)(v21[533] - 8) += v20[36] & 0x1FFF;
    *(_QWORD *)(v21[536] - 8) += v20[28] & 0x1FFF;
    *(_QWORD *)(v21[539] - 8) += v20[20] & 0x3FFF;
    *(_QWORD *)(v21[542] - 8) += v20[12] & 0x7FFF;
    *(_QWORD *)(v21[545] - 8) += v20[37] & 0x1FFF;
    *(_QWORD *)(v21[548] - 8) += v20[29] & 0x1FFF;
    *(_QWORD *)(v21[551] - 8) += v20[21] & 0x3FFF;
    *(_QWORD *)(v21[554] - 8) += v20[13] & 0x7FFF;
    v22 = a1[2];
    v23 = *(_QWORD **)a1[1];
    *(_QWORD *)(v23[557] - 8) += *(_WORD *)(v22 + 76) & 0x1FFF;
    *(_QWORD *)(v23[560] - 8) += *(_WORD *)(v22 + 60) & 0x1FFF;
    *(_QWORD *)(v23[563] - 8) += *(_WORD *)(v22 + 44) & 0x3FFF;
    *(_QWORD *)(v23[566] - 8) += *(_WORD *)(v22 + 28) & 0x7FFF;
    *(_QWORD *)(v23[569] - 8) += *(_WORD *)(v22 + 68) & 0x1FFF;
    *(_QWORD *)(v23[572] - 8) += *(_WORD *)(v22 + 52) & 0x3FFF;
    *(_QWORD *)(v23[575] - 8) += *(_WORD *)(v22 + 36) & 0x3FFF;
    *(_QWORD *)(v23[578] - 8) += (unsigned __int16)*(_DWORD *)(v22 + 20) >> 1;
    *(_QWORD *)(v23[581] - 8) += *(_WORD *)(v22 + 70) & 0x1FFF;
    *(_QWORD *)(v23[584] - 8) += *(_WORD *)(v22 + 54) & 0x3FFF;
    v24 = a1[2];
    v25 = (_QWORD *)*v18;
    *(_QWORD *)(v25[587] - 8) += *(_WORD *)(v24 + 38) & 0x3FFF;
    *(_QWORD *)(v25[590] - 8) += *(_WORD *)(v24 + 22) & 0x7FFF;
  }
}

void sub_D30A8(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  char *v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      v8 = (char *)v6[476];
      v19 = v6[477];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (char *)v6[475];
        v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_232;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 477), v24);
          v8 = (char *)v6[476];
          v10 = (char *)v6[475];
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[8 * v21];
        v27 = &v25[8 * v24];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v29 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      v8 = (char *)v6[476];
      v9 = v6[477];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[475];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_232;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 477), v14);
          v8 = (char *)v6[476];
          v10 = (char *)v6[475];
        }
        else
        {
          v15 = 0;
        }
        v26 = &v15[8 * v11];
        v27 = &v15[8 * v14];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v28 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[475] = v26;
        v6[476] = v20;
        v6[477] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v20 = v8 + 8;
LABEL_37:
    v6[476] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      v33 = (char *)v31[479];
      v41 = v31[480];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (char *)v31[478];
        v43 = (v33 - v35) >> 3;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_232;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 480), v46);
          v33 = (char *)v31[479];
          v35 = (char *)v31[478];
        }
        else
        {
          v47 = 0;
        }
        v48 = &v47[8 * v43];
        v49 = &v47[8 * v46];
        *(_QWORD *)v48 = v32;
        v42 = v48 + 8;
        while (v33 != v35)
        {
          v51 = *((_QWORD *)v33 - 1);
          v33 -= 8;
          *((_QWORD *)v48 - 1) = v51;
          v48 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      v33 = (char *)v31[479];
      v34 = v31[480];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (char *)v31[478];
        v36 = (v33 - v35) >> 3;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_232;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 480), v39);
          v33 = (char *)v31[479];
          v35 = (char *)v31[478];
        }
        else
        {
          v40 = 0;
        }
        v48 = &v40[8 * v36];
        v49 = &v40[8 * v39];
        *(_QWORD *)v48 = v32;
        v42 = v48 + 8;
        while (v33 != v35)
        {
          v50 = *((_QWORD *)v33 - 1);
          v33 -= 8;
          *((_QWORD *)v48 - 1) = v50;
          v48 -= 8;
        }
LABEL_67:
        v31[478] = v48;
        v31[479] = v42;
        v31[480] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v33 = v32;
    v42 = v33 + 8;
LABEL_69:
    v31[479] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v55 = (char *)v53[482];
      v63 = v53[483];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (char *)v53[481];
        v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_232;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 483), v68);
          v55 = (char *)v53[482];
          v57 = (char *)v53[481];
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[8 * v65];
        v71 = &v69[8 * v68];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v73 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v55 = (char *)v53[482];
      v56 = v53[483];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (char *)v53[481];
        v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_232;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 483), v61);
          v55 = (char *)v53[482];
          v57 = (char *)v53[481];
        }
        else
        {
          v62 = 0;
        }
        v70 = &v62[8 * v58];
        v71 = &v62[8 * v61];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v72 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[481] = v70;
        v53[482] = v64;
        v53[483] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v55 = v54;
    v64 = v55 + 8;
LABEL_101:
    v53[482] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v75 = *(_QWORD **)a1[1];
      v76 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v77 = (char *)v75[485];
      v85 = v75[486];
      if ((unint64_t)v77 >= v85)
      {
        v79 = (char *)v75[484];
        v87 = (v77 - v79) >> 3;
        if ((unint64_t)(v87 + 1) >> 61)
          goto LABEL_232;
        v88 = v85 - (_QWORD)v79;
        v89 = (uint64_t)(v85 - (_QWORD)v79) >> 2;
        if (v89 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v91 = (char *)sub_40FC((uint64_t)(v75 + 486), v90);
          v77 = (char *)v75[485];
          v79 = (char *)v75[484];
        }
        else
        {
          v91 = 0;
        }
        v92 = &v91[8 * v87];
        v93 = &v91[8 * v90];
        *(_QWORD *)v92 = v76;
        v86 = v92 + 8;
        while (v77 != v79)
        {
          v95 = *((_QWORD *)v77 - 1);
          v77 -= 8;
          *((_QWORD *)v92 - 1) = v95;
          v92 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1)
        goto LABEL_134;
      v75 = *(_QWORD **)a1[1];
      v76 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v77 = (char *)v75[485];
      v78 = v75[486];
      if ((unint64_t)v77 >= v78)
      {
        v79 = (char *)v75[484];
        v80 = (v77 - v79) >> 3;
        if ((unint64_t)(v80 + 1) >> 61)
          goto LABEL_232;
        v81 = v78 - (_QWORD)v79;
        v82 = (uint64_t)(v78 - (_QWORD)v79) >> 2;
        if (v82 <= v80 + 1)
          v82 = v80 + 1;
        if (v81 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
        {
          v84 = (char *)sub_40FC((uint64_t)(v75 + 486), v83);
          v77 = (char *)v75[485];
          v79 = (char *)v75[484];
        }
        else
        {
          v84 = 0;
        }
        v92 = &v84[8 * v80];
        v93 = &v84[8 * v83];
        *(_QWORD *)v92 = v76;
        v86 = v92 + 8;
        while (v77 != v79)
        {
          v94 = *((_QWORD *)v77 - 1);
          v77 -= 8;
          *((_QWORD *)v92 - 1) = v94;
          v92 -= 8;
        }
LABEL_131:
        v75[484] = v92;
        v75[485] = v86;
        v75[486] = v93;
        if (v79)
          operator delete(v79);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v77 = v76;
    v86 = v77 + 8;
LABEL_133:
    v75[485] = v86;
LABEL_134:
    v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      v108 = a1[1];
      v98 = *(_QWORD **)v108;
      v99 = *(unsigned int *)(a1[2] + 24);
      v100 = *(char **)(*(_QWORD *)v108 + 3904);
      v109 = *(_QWORD *)(*(_QWORD *)v108 + 3912);
      if ((unint64_t)v100 >= v109)
      {
        v102 = (char *)v98[487];
        v111 = (v100 - v102) >> 3;
        if ((unint64_t)(v111 + 1) >> 61)
          goto LABEL_232;
        v112 = v109 - (_QWORD)v102;
        v113 = (uint64_t)(v109 - (_QWORD)v102) >> 2;
        if (v113 <= v111 + 1)
          v113 = v111 + 1;
        if (v112 >= 0x7FFFFFFFFFFFFFF8)
          v114 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v114 = v113;
        if (v114)
        {
          v115 = (char *)sub_40FC((uint64_t)(v98 + 489), v114);
          v100 = (char *)v98[488];
          v102 = (char *)v98[487];
        }
        else
        {
          v115 = 0;
        }
        v116 = &v115[8 * v111];
        v117 = &v115[8 * v114];
        *(_QWORD *)v116 = v99;
        v110 = v116 + 8;
        while (v100 != v102)
        {
          v119 = *((_QWORD *)v100 - 1);
          v100 -= 8;
          *((_QWORD *)v116 - 1) = v119;
          v116 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1)
        goto LABEL_166;
      v97 = a1[1];
      v98 = *(_QWORD **)v97;
      v99 = *(unsigned int *)(a1[2] + 24);
      v100 = *(char **)(*(_QWORD *)v97 + 3904);
      v101 = *(_QWORD *)(*(_QWORD *)v97 + 3912);
      if ((unint64_t)v100 >= v101)
      {
        v102 = (char *)v98[487];
        v103 = (v100 - v102) >> 3;
        if ((unint64_t)(v103 + 1) >> 61)
          goto LABEL_232;
        v104 = v101 - (_QWORD)v102;
        v105 = (uint64_t)(v101 - (_QWORD)v102) >> 2;
        if (v105 <= v103 + 1)
          v105 = v103 + 1;
        if (v104 >= 0x7FFFFFFFFFFFFFF8)
          v106 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v106 = v105;
        if (v106)
        {
          v107 = (char *)sub_40FC((uint64_t)(v98 + 489), v106);
          v100 = (char *)v98[488];
          v102 = (char *)v98[487];
        }
        else
        {
          v107 = 0;
        }
        v116 = &v107[8 * v103];
        v117 = &v107[8 * v106];
        *(_QWORD *)v116 = v99;
        v110 = v116 + 8;
        while (v100 != v102)
        {
          v118 = *((_QWORD *)v100 - 1);
          v100 -= 8;
          *((_QWORD *)v116 - 1) = v118;
          v116 -= 8;
        }
LABEL_163:
        v98[487] = v116;
        v98[488] = v110;
        v98[489] = v117;
        if (v102)
          operator delete(v102);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v100 = v99;
    v110 = v100 + 8;
LABEL_165:
    v98[488] = v110;
LABEL_166:
    v120 = 1 << *(_DWORD *)(v3 + 48);
    if (v120 == 2)
    {
      v132 = a1[1];
      v122 = *(_QWORD **)v132;
      v123 = *(unsigned __int16 *)(a1[2] + 36);
      v124 = *(char **)(*(_QWORD *)v132 + 3928);
      v133 = *(_QWORD *)(*(_QWORD *)v132 + 3936);
      if ((unint64_t)v124 >= v133)
      {
        v126 = (char *)v122[490];
        v135 = (v124 - v126) >> 3;
        if ((unint64_t)(v135 + 1) >> 61)
          goto LABEL_232;
        v136 = v133 - (_QWORD)v126;
        v137 = (uint64_t)(v133 - (_QWORD)v126) >> 2;
        if (v137 <= v135 + 1)
          v137 = v135 + 1;
        if (v136 >= 0x7FFFFFFFFFFFFFF8)
          v138 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v138 = v137;
        if (v138)
        {
          v139 = (char *)sub_40FC((uint64_t)(v122 + 492), v138);
          v124 = (char *)v122[491];
          v126 = (char *)v122[490];
        }
        else
        {
          v139 = 0;
        }
        v140 = &v139[8 * v135];
        v141 = &v139[8 * v138];
        *(_QWORD *)v140 = v123;
        v134 = v140 + 8;
        while (v124 != v126)
        {
          v143 = *((_QWORD *)v124 - 1);
          v124 -= 8;
          *((_QWORD *)v140 - 1) = v143;
          v140 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v120 != 1)
        goto LABEL_198;
      v121 = a1[1];
      v122 = *(_QWORD **)v121;
      v123 = *(unsigned __int16 *)(a1[2] + 36);
      v124 = *(char **)(*(_QWORD *)v121 + 3928);
      v125 = *(_QWORD *)(*(_QWORD *)v121 + 3936);
      if ((unint64_t)v124 >= v125)
      {
        v126 = (char *)v122[490];
        v127 = (v124 - v126) >> 3;
        if ((unint64_t)(v127 + 1) >> 61)
          goto LABEL_232;
        v128 = v125 - (_QWORD)v126;
        v129 = (uint64_t)(v125 - (_QWORD)v126) >> 2;
        if (v129 <= v127 + 1)
          v129 = v127 + 1;
        if (v128 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
        {
          v131 = (char *)sub_40FC((uint64_t)(v122 + 492), v130);
          v124 = (char *)v122[491];
          v126 = (char *)v122[490];
        }
        else
        {
          v131 = 0;
        }
        v140 = &v131[8 * v127];
        v141 = &v131[8 * v130];
        *(_QWORD *)v140 = v123;
        v134 = v140 + 8;
        while (v124 != v126)
        {
          v142 = *((_QWORD *)v124 - 1);
          v124 -= 8;
          *((_QWORD *)v140 - 1) = v142;
          v140 -= 8;
        }
LABEL_195:
        v122[490] = v140;
        v122[491] = v134;
        v122[492] = v141;
        if (v126)
          operator delete(v126);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v124 = v123;
    v134 = v124 + 8;
LABEL_197:
    v122[491] = v134;
LABEL_198:
    v144 = 1 << *(_DWORD *)(v3 + 48);
    if (v144 == 2)
    {
      v157 = a1[1];
      v158 = a1[2];
      v147 = *(_QWORD **)v157;
      v148 = *(unsigned int *)(v158 + 20);
      v149 = *(char **)(*(_QWORD *)v157 + 3952);
      v159 = *(_QWORD *)(*(_QWORD *)v157 + 3960);
      if ((unint64_t)v149 >= v159)
      {
        v151 = (char *)v147[493];
        v161 = (v149 - v151) >> 3;
        if (!((unint64_t)(v161 + 1) >> 61))
        {
          v162 = v159 - (_QWORD)v151;
          v163 = (uint64_t)(v159 - (_QWORD)v151) >> 2;
          if (v163 <= v161 + 1)
            v163 = v161 + 1;
          if (v162 >= 0x7FFFFFFFFFFFFFF8)
            v164 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v164 = v163;
          if (v164)
          {
            v165 = (char *)sub_40FC((uint64_t)(v147 + 495), v164);
            v149 = (char *)v147[494];
            v151 = (char *)v147[493];
          }
          else
          {
            v165 = 0;
          }
          v166 = &v165[8 * v161];
          v167 = &v165[8 * v164];
          *(_QWORD *)v166 = v148;
          v160 = v166 + 8;
          while (v149 != v151)
          {
            v169 = *((_QWORD *)v149 - 1);
            v149 -= 8;
            *((_QWORD *)v166 - 1) = v169;
            v166 -= 8;
          }
          goto LABEL_227;
        }
LABEL_232:
        sub_4074();
      }
    }
    else
    {
      if (v144 != 1)
      {
LABEL_230:
        *a2 = 1;
        return;
      }
      v145 = a1[1];
      v146 = a1[2];
      v147 = *(_QWORD **)v145;
      v148 = *(unsigned int *)(v146 + 20);
      v149 = *(char **)(*(_QWORD *)v145 + 3952);
      v150 = *(_QWORD *)(*(_QWORD *)v145 + 3960);
      if ((unint64_t)v149 >= v150)
      {
        v151 = (char *)v147[493];
        v152 = (v149 - v151) >> 3;
        if (!((unint64_t)(v152 + 1) >> 61))
        {
          v153 = v150 - (_QWORD)v151;
          v154 = (uint64_t)(v150 - (_QWORD)v151) >> 2;
          if (v154 <= v152 + 1)
            v154 = v152 + 1;
          if (v153 >= 0x7FFFFFFFFFFFFFF8)
            v155 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v155 = v154;
          if (v155)
          {
            v156 = (char *)sub_40FC((uint64_t)(v147 + 495), v155);
            v149 = (char *)v147[494];
            v151 = (char *)v147[493];
          }
          else
          {
            v156 = 0;
          }
          v166 = &v156[8 * v152];
          v167 = &v156[8 * v155];
          *(_QWORD *)v166 = v148;
          v160 = v166 + 8;
          while (v149 != v151)
          {
            v168 = *((_QWORD *)v149 - 1);
            v149 -= 8;
            *((_QWORD *)v166 - 1) = v168;
            v166 -= 8;
          }
LABEL_227:
          v147[493] = v166;
          v147[494] = v160;
          v147[495] = v167;
          if (v151)
            operator delete(v151);
          goto LABEL_229;
        }
        goto LABEL_232;
      }
    }
    *(_QWORD *)v149 = v148;
    v160 = v149 + 8;
LABEL_229:
    v147[494] = v160;
    goto LABEL_230;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[476] - 8) += *(_WORD *)(v17 + 34) & 0x7FFF;
    *(_QWORD *)(v18[479] - 8) += *(_WORD *)(v17 + 32) & 0x7FFF;
    *(_QWORD *)(v18[482] - 8) += *(_WORD *)(v17 + 30) & 0x7FFF;
    *(_QWORD *)(v18[485] - 8) += *(_WORD *)(v17 + 28) & 0x7FFF;
    *(_QWORD *)(v18[488] - 8) += *(unsigned int *)(v17 + 24);
    *(_QWORD *)(v18[491] - 8) += *(unsigned __int16 *)(v17 + 36);
    *(_QWORD *)(v18[494] - 8) += *(unsigned int *)(v17 + 20);
  }
}

void sub_D3C28(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _QWORD *v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  _QWORD *v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  unint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  _QWORD *v188;
  uint64_t v189;
  char *v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t *v212;
  unint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  char *v235;
  unint64_t v236;
  char *v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  char *v242;
  uint64_t v243;
  unint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v8 = (char *)v6[443];
      v20 = v6[444];
      if ((unint64_t)v8 >= v20)
      {
        v10 = (char *)v6[442];
        v22 = (v8 - v10) >> 3;
        if ((unint64_t)(v22 + 1) >> 61)
          goto LABEL_360;
        v23 = v20 - (_QWORD)v10;
        v24 = (uint64_t)(v20 - (_QWORD)v10) >> 2;
        if (v24 <= v22 + 1)
          v24 = v22 + 1;
        if (v23 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
        {
          v26 = (char *)sub_40FC((uint64_t)(v6 + 444), v25);
          v8 = (char *)v6[443];
          v10 = (char *)v6[442];
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[8 * v22];
        v28 = &v26[8 * v25];
        *(_QWORD *)v27 = v7;
        v21 = v27 + 8;
        while (v8 != v10)
        {
          v30 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v27 - 1) = v30;
          v27 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v8 = (char *)v6[443];
      v9 = v6[444];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[442];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_360;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 444), v14);
          v8 = (char *)v6[443];
          v10 = (char *)v6[442];
        }
        else
        {
          v15 = 0;
        }
        v27 = &v15[8 * v11];
        v28 = &v15[8 * v14];
        *(_QWORD *)v27 = v7;
        v21 = v27 + 8;
        while (v8 != v10)
        {
          v29 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v27 - 1) = v29;
          v27 -= 8;
        }
LABEL_35:
        v6[442] = v27;
        v6[443] = v21;
        v6[444] = v28;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v21 = v8 + 8;
LABEL_37:
    v6[443] = v21;
LABEL_38:
    v31 = 1 << *(_DWORD *)(v3 + 48);
    if (v31 == 2)
    {
      v32 = *(_QWORD **)a1[1];
      v33 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v34 = (char *)v32[446];
      v42 = v32[447];
      if ((unint64_t)v34 >= v42)
      {
        v36 = (char *)v32[445];
        v44 = (v34 - v36) >> 3;
        if ((unint64_t)(v44 + 1) >> 61)
          goto LABEL_360;
        v45 = v42 - (_QWORD)v36;
        v46 = (uint64_t)(v42 - (_QWORD)v36) >> 2;
        if (v46 <= v44 + 1)
          v46 = v44 + 1;
        if (v45 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47)
        {
          v48 = (char *)sub_40FC((uint64_t)(v32 + 447), v47);
          v34 = (char *)v32[446];
          v36 = (char *)v32[445];
        }
        else
        {
          v48 = 0;
        }
        v49 = &v48[8 * v44];
        v50 = &v48[8 * v47];
        *(_QWORD *)v49 = v33;
        v43 = v49 + 8;
        while (v34 != v36)
        {
          v52 = *((_QWORD *)v34 - 1);
          v34 -= 8;
          *((_QWORD *)v49 - 1) = v52;
          v49 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v31 != 1)
        goto LABEL_70;
      v32 = *(_QWORD **)a1[1];
      v33 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v34 = (char *)v32[446];
      v35 = v32[447];
      if ((unint64_t)v34 >= v35)
      {
        v36 = (char *)v32[445];
        v37 = (v34 - v36) >> 3;
        if ((unint64_t)(v37 + 1) >> 61)
          goto LABEL_360;
        v38 = v35 - (_QWORD)v36;
        v39 = (uint64_t)(v35 - (_QWORD)v36) >> 2;
        if (v39 <= v37 + 1)
          v39 = v37 + 1;
        if (v38 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v39;
        if (v40)
        {
          v41 = (char *)sub_40FC((uint64_t)(v32 + 447), v40);
          v34 = (char *)v32[446];
          v36 = (char *)v32[445];
        }
        else
        {
          v41 = 0;
        }
        v49 = &v41[8 * v37];
        v50 = &v41[8 * v40];
        *(_QWORD *)v49 = v33;
        v43 = v49 + 8;
        while (v34 != v36)
        {
          v51 = *((_QWORD *)v34 - 1);
          v34 -= 8;
          *((_QWORD *)v49 - 1) = v51;
          v49 -= 8;
        }
LABEL_67:
        v32[445] = v49;
        v32[446] = v43;
        v32[447] = v50;
        if (v36)
          operator delete(v36);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v34 = v33;
    v43 = v34 + 8;
LABEL_69:
    v32[446] = v43;
LABEL_70:
    v53 = 1 << *(_DWORD *)(v3 + 48);
    if (v53 == 2)
    {
      v65 = a1[1];
      v55 = *(_QWORD **)v65;
      v56 = *(unsigned __int8 *)(a1[2] + 46);
      v57 = *(char **)(*(_QWORD *)v65 + 3592);
      v66 = *(_QWORD *)(*(_QWORD *)v65 + 3600);
      if ((unint64_t)v57 >= v66)
      {
        v59 = (char *)v55[448];
        v68 = (v57 - v59) >> 3;
        if ((unint64_t)(v68 + 1) >> 61)
          goto LABEL_360;
        v69 = v66 - (_QWORD)v59;
        v70 = (uint64_t)(v66 - (_QWORD)v59) >> 2;
        if (v70 <= v68 + 1)
          v70 = v68 + 1;
        if (v69 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        if (v71)
        {
          v72 = (char *)sub_40FC((uint64_t)(v55 + 450), v71);
          v57 = (char *)v55[449];
          v59 = (char *)v55[448];
        }
        else
        {
          v72 = 0;
        }
        v73 = &v72[8 * v68];
        v74 = &v72[8 * v71];
        *(_QWORD *)v73 = v56;
        v67 = v73 + 8;
        while (v57 != v59)
        {
          v76 = *((_QWORD *)v57 - 1);
          v57 -= 8;
          *((_QWORD *)v73 - 1) = v76;
          v73 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v53 != 1)
        goto LABEL_102;
      v54 = a1[1];
      v55 = *(_QWORD **)v54;
      v56 = *(unsigned __int8 *)(a1[2] + 46);
      v57 = *(char **)(*(_QWORD *)v54 + 3592);
      v58 = *(_QWORD *)(*(_QWORD *)v54 + 3600);
      if ((unint64_t)v57 >= v58)
      {
        v59 = (char *)v55[448];
        v60 = (v57 - v59) >> 3;
        if ((unint64_t)(v60 + 1) >> 61)
          goto LABEL_360;
        v61 = v58 - (_QWORD)v59;
        v62 = (uint64_t)(v58 - (_QWORD)v59) >> 2;
        if (v62 <= v60 + 1)
          v62 = v60 + 1;
        if (v61 >= 0x7FFFFFFFFFFFFFF8)
          v63 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v63 = v62;
        if (v63)
        {
          v64 = (char *)sub_40FC((uint64_t)(v55 + 450), v63);
          v57 = (char *)v55[449];
          v59 = (char *)v55[448];
        }
        else
        {
          v64 = 0;
        }
        v73 = &v64[8 * v60];
        v74 = &v64[8 * v63];
        *(_QWORD *)v73 = v56;
        v67 = v73 + 8;
        while (v57 != v59)
        {
          v75 = *((_QWORD *)v57 - 1);
          v57 -= 8;
          *((_QWORD *)v73 - 1) = v75;
          v73 -= 8;
        }
LABEL_99:
        v55[448] = v73;
        v55[449] = v67;
        v55[450] = v74;
        if (v59)
          operator delete(v59);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v57 = v56;
    v67 = v57 + 8;
LABEL_101:
    v55[449] = v67;
LABEL_102:
    v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      v78 = *(_QWORD **)a1[1];
      v79 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      v80 = (uint64_t *)v78[452];
      v88 = v78[453];
      if ((unint64_t)v80 >= v88)
      {
        v82 = (uint64_t *)v78[451];
        v90 = v80 - v82;
        if ((unint64_t)(v90 + 1) >> 61)
          goto LABEL_360;
        v91 = v88 - (_QWORD)v82;
        v92 = (uint64_t)(v88 - (_QWORD)v82) >> 2;
        if (v92 <= v90 + 1)
          v92 = v90 + 1;
        if (v91 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        if (v93)
        {
          v94 = (char *)sub_40FC((uint64_t)(v78 + 453), v93);
          v80 = (uint64_t *)v78[452];
          v82 = (uint64_t *)v78[451];
        }
        else
        {
          v94 = 0;
        }
        v95 = (uint64_t *)&v94[8 * v90];
        v96 = &v94[8 * v93];
        *v95 = v79;
        v89 = v95 + 1;
        while (v80 != v82)
        {
          v98 = *--v80;
          *--v95 = v98;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1)
        goto LABEL_134;
      v78 = *(_QWORD **)a1[1];
      v79 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      v80 = (uint64_t *)v78[452];
      v81 = v78[453];
      if ((unint64_t)v80 >= v81)
      {
        v82 = (uint64_t *)v78[451];
        v83 = v80 - v82;
        if ((unint64_t)(v83 + 1) >> 61)
          goto LABEL_360;
        v84 = v81 - (_QWORD)v82;
        v85 = (uint64_t)(v81 - (_QWORD)v82) >> 2;
        if (v85 <= v83 + 1)
          v85 = v83 + 1;
        if (v84 >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v85;
        if (v86)
        {
          v87 = (char *)sub_40FC((uint64_t)(v78 + 453), v86);
          v80 = (uint64_t *)v78[452];
          v82 = (uint64_t *)v78[451];
        }
        else
        {
          v87 = 0;
        }
        v95 = (uint64_t *)&v87[8 * v83];
        v96 = &v87[8 * v86];
        *v95 = v79;
        v89 = v95 + 1;
        while (v80 != v82)
        {
          v97 = *--v80;
          *--v95 = v97;
        }
LABEL_131:
        v78[451] = v95;
        v78[452] = v89;
        v78[453] = v96;
        if (v82)
          operator delete(v82);
        goto LABEL_133;
      }
    }
    *v80 = v79;
    v89 = v80 + 1;
LABEL_133:
    v78[452] = v89;
LABEL_134:
    v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      v102 = (uint64_t *)v100[455];
      v110 = v100[456];
      if ((unint64_t)v102 >= v110)
      {
        v104 = (uint64_t *)v100[454];
        v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_360;
        v113 = v110 - (_QWORD)v104;
        v114 = (uint64_t)(v110 - (_QWORD)v104) >> 2;
        if (v114 <= v112 + 1)
          v114 = v112 + 1;
        if (v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
        {
          v116 = (char *)sub_40FC((uint64_t)(v100 + 456), v115);
          v102 = (uint64_t *)v100[455];
          v104 = (uint64_t *)v100[454];
        }
        else
        {
          v116 = 0;
        }
        v117 = (uint64_t *)&v116[8 * v112];
        v118 = &v116[8 * v115];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v120 = *--v102;
          *--v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1)
        goto LABEL_166;
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      v102 = (uint64_t *)v100[455];
      v103 = v100[456];
      if ((unint64_t)v102 >= v103)
      {
        v104 = (uint64_t *)v100[454];
        v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61)
          goto LABEL_360;
        v106 = v103 - (_QWORD)v104;
        v107 = (uint64_t)(v103 - (_QWORD)v104) >> 2;
        if (v107 <= v105 + 1)
          v107 = v105 + 1;
        if (v106 >= 0x7FFFFFFFFFFFFFF8)
          v108 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v108 = v107;
        if (v108)
        {
          v109 = (char *)sub_40FC((uint64_t)(v100 + 456), v108);
          v102 = (uint64_t *)v100[455];
          v104 = (uint64_t *)v100[454];
        }
        else
        {
          v109 = 0;
        }
        v117 = (uint64_t *)&v109[8 * v105];
        v118 = &v109[8 * v108];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v119 = *--v102;
          *--v117 = v119;
        }
LABEL_163:
        v100[454] = v117;
        v100[455] = v111;
        v100[456] = v118;
        if (v104)
          operator delete(v104);
        goto LABEL_165;
      }
    }
    *v102 = v101;
    v111 = v102 + 1;
LABEL_165:
    v100[455] = v111;
LABEL_166:
    v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      v122 = *(_QWORD **)a1[1];
      v123 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      v124 = (char *)v122[458];
      v132 = v122[459];
      if ((unint64_t)v124 >= v132)
      {
        v126 = (char *)v122[457];
        v134 = (v124 - v126) >> 3;
        if ((unint64_t)(v134 + 1) >> 61)
          goto LABEL_360;
        v135 = v132 - (_QWORD)v126;
        v136 = (uint64_t)(v132 - (_QWORD)v126) >> 2;
        if (v136 <= v134 + 1)
          v136 = v134 + 1;
        if (v135 >= 0x7FFFFFFFFFFFFFF8)
          v137 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137)
        {
          v138 = (char *)sub_40FC((uint64_t)(v122 + 459), v137);
          v124 = (char *)v122[458];
          v126 = (char *)v122[457];
        }
        else
        {
          v138 = 0;
        }
        v139 = &v138[8 * v134];
        v140 = &v138[8 * v137];
        *(_QWORD *)v139 = v123;
        v133 = v139 + 8;
        while (v124 != v126)
        {
          v142 = *((_QWORD *)v124 - 1);
          v124 -= 8;
          *((_QWORD *)v139 - 1) = v142;
          v139 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1)
        goto LABEL_198;
      v122 = *(_QWORD **)a1[1];
      v123 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      v124 = (char *)v122[458];
      v125 = v122[459];
      if ((unint64_t)v124 >= v125)
      {
        v126 = (char *)v122[457];
        v127 = (v124 - v126) >> 3;
        if ((unint64_t)(v127 + 1) >> 61)
          goto LABEL_360;
        v128 = v125 - (_QWORD)v126;
        v129 = (uint64_t)(v125 - (_QWORD)v126) >> 2;
        if (v129 <= v127 + 1)
          v129 = v127 + 1;
        if (v128 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
        {
          v131 = (char *)sub_40FC((uint64_t)(v122 + 459), v130);
          v124 = (char *)v122[458];
          v126 = (char *)v122[457];
        }
        else
        {
          v131 = 0;
        }
        v139 = &v131[8 * v127];
        v140 = &v131[8 * v130];
        *(_QWORD *)v139 = v123;
        v133 = v139 + 8;
        while (v124 != v126)
        {
          v141 = *((_QWORD *)v124 - 1);
          v124 -= 8;
          *((_QWORD *)v139 - 1) = v141;
          v139 -= 8;
        }
LABEL_195:
        v122[457] = v139;
        v122[458] = v133;
        v122[459] = v140;
        if (v126)
          operator delete(v126);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v124 = v123;
    v133 = v124 + 8;
LABEL_197:
    v122[458] = v133;
LABEL_198:
    v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      v144 = *(_QWORD **)a1[1];
      v145 = *(_WORD *)(a1[2] + 44) & 0x1FFF;
      v146 = (char *)v144[461];
      v154 = v144[462];
      if ((unint64_t)v146 >= v154)
      {
        v148 = (char *)v144[460];
        v156 = (v146 - v148) >> 3;
        if ((unint64_t)(v156 + 1) >> 61)
          goto LABEL_360;
        v157 = v154 - (_QWORD)v148;
        v158 = (uint64_t)(v154 - (_QWORD)v148) >> 2;
        if (v158 <= v156 + 1)
          v158 = v156 + 1;
        if (v157 >= 0x7FFFFFFFFFFFFFF8)
          v159 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v159 = v158;
        if (v159)
        {
          v160 = (char *)sub_40FC((uint64_t)(v144 + 462), v159);
          v146 = (char *)v144[461];
          v148 = (char *)v144[460];
        }
        else
        {
          v160 = 0;
        }
        v161 = &v160[8 * v156];
        v162 = &v160[8 * v159];
        *(_QWORD *)v161 = v145;
        v155 = v161 + 8;
        while (v146 != v148)
        {
          v164 = *((_QWORD *)v146 - 1);
          v146 -= 8;
          *((_QWORD *)v161 - 1) = v164;
          v161 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1)
        goto LABEL_230;
      v144 = *(_QWORD **)a1[1];
      v145 = *(_WORD *)(a1[2] + 44) & 0x1FFF;
      v146 = (char *)v144[461];
      v147 = v144[462];
      if ((unint64_t)v146 >= v147)
      {
        v148 = (char *)v144[460];
        v149 = (v146 - v148) >> 3;
        if ((unint64_t)(v149 + 1) >> 61)
          goto LABEL_360;
        v150 = v147 - (_QWORD)v148;
        v151 = (uint64_t)(v147 - (_QWORD)v148) >> 2;
        if (v151 <= v149 + 1)
          v151 = v149 + 1;
        if (v150 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v152 = v151;
        if (v152)
        {
          v153 = (char *)sub_40FC((uint64_t)(v144 + 462), v152);
          v146 = (char *)v144[461];
          v148 = (char *)v144[460];
        }
        else
        {
          v153 = 0;
        }
        v161 = &v153[8 * v149];
        v162 = &v153[8 * v152];
        *(_QWORD *)v161 = v145;
        v155 = v161 + 8;
        while (v146 != v148)
        {
          v163 = *((_QWORD *)v146 - 1);
          v146 -= 8;
          *((_QWORD *)v161 - 1) = v163;
          v161 -= 8;
        }
LABEL_227:
        v144[460] = v161;
        v144[461] = v155;
        v144[462] = v162;
        if (v148)
          operator delete(v148);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v146 = v145;
    v155 = v146 + 8;
LABEL_229:
    v144[461] = v155;
LABEL_230:
    v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      v166 = *(_QWORD **)a1[1];
      v167 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v168 = (char *)v166[464];
      v176 = v166[465];
      if ((unint64_t)v168 >= v176)
      {
        v170 = (char *)v166[463];
        v178 = (v168 - v170) >> 3;
        if ((unint64_t)(v178 + 1) >> 61)
          goto LABEL_360;
        v179 = v176 - (_QWORD)v170;
        v180 = (uint64_t)(v176 - (_QWORD)v170) >> 2;
        if (v180 <= v178 + 1)
          v180 = v178 + 1;
        if (v179 >= 0x7FFFFFFFFFFFFFF8)
          v181 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v181 = v180;
        if (v181)
        {
          v182 = (char *)sub_40FC((uint64_t)(v166 + 465), v181);
          v168 = (char *)v166[464];
          v170 = (char *)v166[463];
        }
        else
        {
          v182 = 0;
        }
        v183 = &v182[8 * v178];
        v184 = &v182[8 * v181];
        *(_QWORD *)v183 = v167;
        v177 = v183 + 8;
        while (v168 != v170)
        {
          v186 = *((_QWORD *)v168 - 1);
          v168 -= 8;
          *((_QWORD *)v183 - 1) = v186;
          v183 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1)
        goto LABEL_262;
      v166 = *(_QWORD **)a1[1];
      v167 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v168 = (char *)v166[464];
      v169 = v166[465];
      if ((unint64_t)v168 >= v169)
      {
        v170 = (char *)v166[463];
        v171 = (v168 - v170) >> 3;
        if ((unint64_t)(v171 + 1) >> 61)
          goto LABEL_360;
        v172 = v169 - (_QWORD)v170;
        v173 = (uint64_t)(v169 - (_QWORD)v170) >> 2;
        if (v173 <= v171 + 1)
          v173 = v171 + 1;
        if (v172 >= 0x7FFFFFFFFFFFFFF8)
          v174 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v174 = v173;
        if (v174)
        {
          v175 = (char *)sub_40FC((uint64_t)(v166 + 465), v174);
          v168 = (char *)v166[464];
          v170 = (char *)v166[463];
        }
        else
        {
          v175 = 0;
        }
        v183 = &v175[8 * v171];
        v184 = &v175[8 * v174];
        *(_QWORD *)v183 = v167;
        v177 = v183 + 8;
        while (v168 != v170)
        {
          v185 = *((_QWORD *)v168 - 1);
          v168 -= 8;
          *((_QWORD *)v183 - 1) = v185;
          v183 -= 8;
        }
LABEL_259:
        v166[463] = v183;
        v166[464] = v177;
        v166[465] = v184;
        if (v170)
          operator delete(v170);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v168 = v167;
    v177 = v168 + 8;
LABEL_261:
    v166[464] = v177;
LABEL_262:
    v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      v188 = *(_QWORD **)a1[1];
      v189 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      v190 = (char *)v188[467];
      v198 = v188[468];
      if ((unint64_t)v190 >= v198)
      {
        v192 = (char *)v188[466];
        v200 = (v190 - v192) >> 3;
        if ((unint64_t)(v200 + 1) >> 61)
          goto LABEL_360;
        v201 = v198 - (_QWORD)v192;
        v202 = (uint64_t)(v198 - (_QWORD)v192) >> 2;
        if (v202 <= v200 + 1)
          v202 = v200 + 1;
        if (v201 >= 0x7FFFFFFFFFFFFFF8)
          v203 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v203 = v202;
        if (v203)
        {
          v204 = (char *)sub_40FC((uint64_t)(v188 + 468), v203);
          v190 = (char *)v188[467];
          v192 = (char *)v188[466];
        }
        else
        {
          v204 = 0;
        }
        v205 = &v204[8 * v200];
        v206 = &v204[8 * v203];
        *(_QWORD *)v205 = v189;
        v199 = v205 + 8;
        while (v190 != v192)
        {
          v208 = *((_QWORD *)v190 - 1);
          v190 -= 8;
          *((_QWORD *)v205 - 1) = v208;
          v205 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1)
        goto LABEL_294;
      v188 = *(_QWORD **)a1[1];
      v189 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      v190 = (char *)v188[467];
      v191 = v188[468];
      if ((unint64_t)v190 >= v191)
      {
        v192 = (char *)v188[466];
        v193 = (v190 - v192) >> 3;
        if ((unint64_t)(v193 + 1) >> 61)
          goto LABEL_360;
        v194 = v191 - (_QWORD)v192;
        v195 = (uint64_t)(v191 - (_QWORD)v192) >> 2;
        if (v195 <= v193 + 1)
          v195 = v193 + 1;
        if (v194 >= 0x7FFFFFFFFFFFFFF8)
          v196 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v196 = v195;
        if (v196)
        {
          v197 = (char *)sub_40FC((uint64_t)(v188 + 468), v196);
          v190 = (char *)v188[467];
          v192 = (char *)v188[466];
        }
        else
        {
          v197 = 0;
        }
        v205 = &v197[8 * v193];
        v206 = &v197[8 * v196];
        *(_QWORD *)v205 = v189;
        v199 = v205 + 8;
        while (v190 != v192)
        {
          v207 = *((_QWORD *)v190 - 1);
          v190 -= 8;
          *((_QWORD *)v205 - 1) = v207;
          v205 -= 8;
        }
LABEL_291:
        v188[466] = v205;
        v188[467] = v199;
        v188[468] = v206;
        if (v192)
          operator delete(v192);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v190 = v189;
    v199 = v190 + 8;
LABEL_293:
    v188[467] = v199;
LABEL_294:
    v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      v210 = *(_QWORD **)a1[1];
      v211 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      v212 = (uint64_t *)v210[470];
      v220 = v210[471];
      if ((unint64_t)v212 >= v220)
      {
        v214 = (uint64_t *)v210[469];
        v222 = v212 - v214;
        if ((unint64_t)(v222 + 1) >> 61)
          goto LABEL_360;
        v223 = v220 - (_QWORD)v214;
        v224 = (uint64_t)(v220 - (_QWORD)v214) >> 2;
        if (v224 <= v222 + 1)
          v224 = v222 + 1;
        if (v223 >= 0x7FFFFFFFFFFFFFF8)
          v225 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v225 = v224;
        if (v225)
        {
          v226 = (char *)sub_40FC((uint64_t)(v210 + 471), v225);
          v212 = (uint64_t *)v210[470];
          v214 = (uint64_t *)v210[469];
        }
        else
        {
          v226 = 0;
        }
        v227 = (uint64_t *)&v226[8 * v222];
        v228 = &v226[8 * v225];
        *v227 = v211;
        v221 = v227 + 1;
        while (v212 != v214)
        {
          v230 = *--v212;
          *--v227 = v230;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1)
        goto LABEL_326;
      v210 = *(_QWORD **)a1[1];
      v211 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      v212 = (uint64_t *)v210[470];
      v213 = v210[471];
      if ((unint64_t)v212 >= v213)
      {
        v214 = (uint64_t *)v210[469];
        v215 = v212 - v214;
        if ((unint64_t)(v215 + 1) >> 61)
          goto LABEL_360;
        v216 = v213 - (_QWORD)v214;
        v217 = (uint64_t)(v213 - (_QWORD)v214) >> 2;
        if (v217 <= v215 + 1)
          v217 = v215 + 1;
        if (v216 >= 0x7FFFFFFFFFFFFFF8)
          v218 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v218 = v217;
        if (v218)
        {
          v219 = (char *)sub_40FC((uint64_t)(v210 + 471), v218);
          v212 = (uint64_t *)v210[470];
          v214 = (uint64_t *)v210[469];
        }
        else
        {
          v219 = 0;
        }
        v227 = (uint64_t *)&v219[8 * v215];
        v228 = &v219[8 * v218];
        *v227 = v211;
        v221 = v227 + 1;
        while (v212 != v214)
        {
          v229 = *--v212;
          *--v227 = v229;
        }
LABEL_323:
        v210[469] = v227;
        v210[470] = v221;
        v210[471] = v228;
        if (v214)
          operator delete(v214);
        goto LABEL_325;
      }
    }
    *v212 = v211;
    v221 = v212 + 1;
LABEL_325:
    v210[470] = v221;
LABEL_326:
    v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      v243 = a1[2];
      v233 = *(_QWORD **)a1[1];
      v234 = *(_WORD *)(v243 + 20) & 0x7FFF;
      v235 = (char *)v233[473];
      v244 = v233[474];
      if ((unint64_t)v235 >= v244)
      {
        v237 = (char *)v233[472];
        v246 = (v235 - v237) >> 3;
        if (!((unint64_t)(v246 + 1) >> 61))
        {
          v247 = v244 - (_QWORD)v237;
          v248 = (uint64_t)(v244 - (_QWORD)v237) >> 2;
          if (v248 <= v246 + 1)
            v248 = v246 + 1;
          if (v247 >= 0x7FFFFFFFFFFFFFF8)
            v249 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v249 = v248;
          if (v249)
          {
            v250 = (char *)sub_40FC((uint64_t)(v233 + 474), v249);
            v235 = (char *)v233[473];
            v237 = (char *)v233[472];
          }
          else
          {
            v250 = 0;
          }
          v251 = &v250[8 * v246];
          v252 = &v250[8 * v249];
          *(_QWORD *)v251 = v234;
          v245 = v251 + 8;
          while (v235 != v237)
          {
            v254 = *((_QWORD *)v235 - 1);
            v235 -= 8;
            *((_QWORD *)v251 - 1) = v254;
            v251 -= 8;
          }
          goto LABEL_355;
        }
LABEL_360:
        sub_4074();
      }
    }
    else
    {
      if (v231 != 1)
      {
LABEL_358:
        *a2 = 1;
        return;
      }
      v232 = a1[2];
      v233 = *(_QWORD **)a1[1];
      v234 = *(_WORD *)(v232 + 20) & 0x7FFF;
      v235 = (char *)v233[473];
      v236 = v233[474];
      if ((unint64_t)v235 >= v236)
      {
        v237 = (char *)v233[472];
        v238 = (v235 - v237) >> 3;
        if (!((unint64_t)(v238 + 1) >> 61))
        {
          v239 = v236 - (_QWORD)v237;
          v240 = (uint64_t)(v236 - (_QWORD)v237) >> 2;
          if (v240 <= v238 + 1)
            v240 = v238 + 1;
          if (v239 >= 0x7FFFFFFFFFFFFFF8)
            v241 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v241 = v240;
          if (v241)
          {
            v242 = (char *)sub_40FC((uint64_t)(v233 + 474), v241);
            v235 = (char *)v233[473];
            v237 = (char *)v233[472];
          }
          else
          {
            v242 = 0;
          }
          v251 = &v242[8 * v238];
          v252 = &v242[8 * v241];
          *(_QWORD *)v251 = v234;
          v245 = v251 + 8;
          while (v235 != v237)
          {
            v253 = *((_QWORD *)v235 - 1);
            v235 -= 8;
            *((_QWORD *)v251 - 1) = v253;
            v251 -= 8;
          }
LABEL_355:
          v233[472] = v251;
          v233[473] = v245;
          v233[474] = v252;
          if (v237)
            operator delete(v237);
          goto LABEL_357;
        }
        goto LABEL_360;
      }
    }
    *(_QWORD *)v235 = v234;
    v245 = v235 + 8;
LABEL_357:
    v233[473] = v245;
    goto LABEL_358;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = a1[1];
    v17 = a1[2];
    v19 = *(_QWORD **)v18;
    *(_QWORD *)(v19[443] - 8) += *(_WORD *)(v17 + 26) & 0x7FFF;
    *(_QWORD *)(v19[446] - 8) += *(_WORD *)(v17 + 24) & 0x7FFF;
    *(_QWORD *)(v19[449] - 8) += *(unsigned __int8 *)(v17 + 46);
    *(_QWORD *)(v19[452] - 8) += *(_DWORD *)(v17 + 32) & 0x3FFFF;
    *(_QWORD *)(v19[455] - 8) += *(_DWORD *)(v17 + 36) & 0x3FFFF;
    *(_QWORD *)(v19[458] - 8) += *(_WORD *)(v17 + 42) & 0x3FFF;
    *(_QWORD *)(v19[461] - 8) += *(_WORD *)(v17 + 44) & 0x1FFF;
    *(_QWORD *)(v19[464] - 8) += *(_WORD *)(v17 + 40) & 0x7FFF;
    *(_QWORD *)(v19[467] - 8) += *(_WORD *)(v17 + 22) & 0x7FFF;
    *(_QWORD *)(v19[470] - 8) += *(_DWORD *)(v17 + 28) & 0x1FFFF;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 3784) - 8) += *(_WORD *)(a1[2] + 20) & 0x7FFF;
  }
}

void sub_D4E2C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  unint64_t *v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  char *v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  char *v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  _QWORD *v192;
  uint64_t v193;
  char *v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  unint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t *v216;
  unint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  char *v230;
  uint64_t *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t *v238;
  unint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  unint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  char *v252;
  uint64_t *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t *v260;
  unint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  char *v267;
  unint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  char *v274;
  uint64_t *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t *v283;
  unint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  char *v298;
  uint64_t *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      v8 = (char *)v6[692];
      v22 = v6[693];
      if ((unint64_t)v8 >= v22)
      {
        v10 = (char *)v6[691];
        v24 = (v8 - v10) >> 3;
        if ((unint64_t)(v24 + 1) >> 61)
          goto LABEL_424;
        v25 = v22 - (_QWORD)v10;
        v26 = (uint64_t)(v22 - (_QWORD)v10) >> 2;
        if (v26 <= v24 + 1)
          v26 = v24 + 1;
        if (v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (char *)sub_40FC((uint64_t)(v6 + 693), v27);
          v8 = (char *)v6[692];
          v10 = (char *)v6[691];
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[8 * v24];
        v30 = &v28[8 * v27];
        *(_QWORD *)v29 = v7;
        v23 = v29 + 8;
        while (v8 != v10)
        {
          v32 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v29 - 1) = v32;
          v29 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      v8 = (char *)v6[692];
      v9 = v6[693];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[691];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_424;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 693), v14);
          v8 = (char *)v6[692];
          v10 = (char *)v6[691];
        }
        else
        {
          v15 = 0;
        }
        v29 = &v15[8 * v11];
        v30 = &v15[8 * v14];
        *(_QWORD *)v29 = v7;
        v23 = v29 + 8;
        while (v8 != v10)
        {
          v31 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v29 - 1) = v31;
          v29 -= 8;
        }
LABEL_35:
        v6[691] = v29;
        v6[692] = v23;
        v6[693] = v30;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v23 = v8 + 8;
LABEL_37:
    v6[692] = v23;
LABEL_38:
    v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      v34 = *(_QWORD **)a1[1];
      v35 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      v36 = (char *)v34[695];
      v44 = v34[696];
      if ((unint64_t)v36 >= v44)
      {
        v38 = (char *)v34[694];
        v46 = (v36 - v38) >> 3;
        if ((unint64_t)(v46 + 1) >> 61)
          goto LABEL_424;
        v47 = v44 - (_QWORD)v38;
        v48 = (uint64_t)(v44 - (_QWORD)v38) >> 2;
        if (v48 <= v46 + 1)
          v48 = v46 + 1;
        if (v47 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          v50 = (char *)sub_40FC((uint64_t)(v34 + 696), v49);
          v36 = (char *)v34[695];
          v38 = (char *)v34[694];
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[8 * v46];
        v52 = &v50[8 * v49];
        *(_QWORD *)v51 = v35;
        v45 = v51 + 8;
        while (v36 != v38)
        {
          v54 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v51 - 1) = v54;
          v51 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1)
        goto LABEL_70;
      v34 = *(_QWORD **)a1[1];
      v35 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      v36 = (char *)v34[695];
      v37 = v34[696];
      if ((unint64_t)v36 >= v37)
      {
        v38 = (char *)v34[694];
        v39 = (v36 - v38) >> 3;
        if ((unint64_t)(v39 + 1) >> 61)
          goto LABEL_424;
        v40 = v37 - (_QWORD)v38;
        v41 = (uint64_t)(v37 - (_QWORD)v38) >> 2;
        if (v41 <= v39 + 1)
          v41 = v39 + 1;
        if (v40 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          v43 = (char *)sub_40FC((uint64_t)(v34 + 696), v42);
          v36 = (char *)v34[695];
          v38 = (char *)v34[694];
        }
        else
        {
          v43 = 0;
        }
        v51 = &v43[8 * v39];
        v52 = &v43[8 * v42];
        *(_QWORD *)v51 = v35;
        v45 = v51 + 8;
        while (v36 != v38)
        {
          v53 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v51 - 1) = v53;
          v51 -= 8;
        }
LABEL_67:
        v34[694] = v51;
        v34[695] = v45;
        v34[696] = v52;
        if (v38)
          operator delete(v38);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v36 = v35;
    v45 = v36 + 8;
LABEL_69:
    v34[695] = v45;
LABEL_70:
    v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      v56 = *(_QWORD **)a1[1];
      v57 = (unint64_t)*(unsigned int *)(a1[2] + 56) >> 17;
      v58 = (unint64_t *)v56[698];
      v66 = v56[699];
      if ((unint64_t)v58 >= v66)
      {
        v60 = (unint64_t *)v56[697];
        v68 = v58 - v60;
        if ((unint64_t)(v68 + 1) >> 61)
          goto LABEL_424;
        v69 = v66 - (_QWORD)v60;
        v70 = (uint64_t)(v66 - (_QWORD)v60) >> 2;
        if (v70 <= v68 + 1)
          v70 = v68 + 1;
        if (v69 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        if (v71)
        {
          v72 = (char *)sub_40FC((uint64_t)(v56 + 699), v71);
          v58 = (unint64_t *)v56[698];
          v60 = (unint64_t *)v56[697];
        }
        else
        {
          v72 = 0;
        }
        v73 = (unint64_t *)&v72[8 * v68];
        v74 = &v72[8 * v71];
        *v73 = v57;
        v67 = v73 + 1;
        while (v58 != v60)
        {
          v76 = *--v58;
          *--v73 = v76;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1)
        goto LABEL_102;
      v56 = *(_QWORD **)a1[1];
      v57 = (unint64_t)*(unsigned int *)(a1[2] + 56) >> 17;
      v58 = (unint64_t *)v56[698];
      v59 = v56[699];
      if ((unint64_t)v58 >= v59)
      {
        v60 = (unint64_t *)v56[697];
        v61 = v58 - v60;
        if ((unint64_t)(v61 + 1) >> 61)
          goto LABEL_424;
        v62 = v59 - (_QWORD)v60;
        v63 = (uint64_t)(v59 - (_QWORD)v60) >> 2;
        if (v63 <= v61 + 1)
          v63 = v61 + 1;
        if (v62 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v64 = v63;
        if (v64)
        {
          v65 = (char *)sub_40FC((uint64_t)(v56 + 699), v64);
          v58 = (unint64_t *)v56[698];
          v60 = (unint64_t *)v56[697];
        }
        else
        {
          v65 = 0;
        }
        v73 = (unint64_t *)&v65[8 * v61];
        v74 = &v65[8 * v64];
        *v73 = v57;
        v67 = v73 + 1;
        while (v58 != v60)
        {
          v75 = *--v58;
          *--v73 = v75;
        }
LABEL_99:
        v56[697] = v73;
        v56[698] = v67;
        v56[699] = v74;
        if (v60)
          operator delete(v60);
        goto LABEL_101;
      }
    }
    *v58 = v57;
    v67 = v58 + 1;
LABEL_101:
    v56[698] = v67;
LABEL_102:
    v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      v78 = *(_QWORD **)a1[1];
      v79 = *(_DWORD *)(a1[2] + 36) & 0x1FFFFLL;
      v80 = (uint64_t *)v78[701];
      v88 = v78[702];
      if ((unint64_t)v80 >= v88)
      {
        v82 = (uint64_t *)v78[700];
        v90 = v80 - v82;
        if ((unint64_t)(v90 + 1) >> 61)
          goto LABEL_424;
        v91 = v88 - (_QWORD)v82;
        v92 = (uint64_t)(v88 - (_QWORD)v82) >> 2;
        if (v92 <= v90 + 1)
          v92 = v90 + 1;
        if (v91 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        if (v93)
        {
          v94 = (char *)sub_40FC((uint64_t)(v78 + 702), v93);
          v80 = (uint64_t *)v78[701];
          v82 = (uint64_t *)v78[700];
        }
        else
        {
          v94 = 0;
        }
        v95 = (uint64_t *)&v94[8 * v90];
        v96 = &v94[8 * v93];
        *v95 = v79;
        v89 = v95 + 1;
        while (v80 != v82)
        {
          v98 = *--v80;
          *--v95 = v98;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1)
        goto LABEL_134;
      v78 = *(_QWORD **)a1[1];
      v79 = *(_DWORD *)(a1[2] + 36) & 0x1FFFFLL;
      v80 = (uint64_t *)v78[701];
      v81 = v78[702];
      if ((unint64_t)v80 >= v81)
      {
        v82 = (uint64_t *)v78[700];
        v83 = v80 - v82;
        if ((unint64_t)(v83 + 1) >> 61)
          goto LABEL_424;
        v84 = v81 - (_QWORD)v82;
        v85 = (uint64_t)(v81 - (_QWORD)v82) >> 2;
        if (v85 <= v83 + 1)
          v85 = v83 + 1;
        if (v84 >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v85;
        if (v86)
        {
          v87 = (char *)sub_40FC((uint64_t)(v78 + 702), v86);
          v80 = (uint64_t *)v78[701];
          v82 = (uint64_t *)v78[700];
        }
        else
        {
          v87 = 0;
        }
        v95 = (uint64_t *)&v87[8 * v83];
        v96 = &v87[8 * v86];
        *v95 = v79;
        v89 = v95 + 1;
        while (v80 != v82)
        {
          v97 = *--v80;
          *--v95 = v97;
        }
LABEL_131:
        v78[700] = v95;
        v78[701] = v89;
        v78[702] = v96;
        if (v82)
          operator delete(v82);
        goto LABEL_133;
      }
    }
    *v80 = v79;
    v89 = v80 + 1;
LABEL_133:
    v78[701] = v89;
LABEL_134:
    v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      v102 = (uint64_t *)v100[704];
      v110 = v100[705];
      if ((unint64_t)v102 >= v110)
      {
        v104 = (uint64_t *)v100[703];
        v112 = v102 - v104;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_424;
        v113 = v110 - (_QWORD)v104;
        v114 = (uint64_t)(v110 - (_QWORD)v104) >> 2;
        if (v114 <= v112 + 1)
          v114 = v112 + 1;
        if (v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
        {
          v116 = (char *)sub_40FC((uint64_t)(v100 + 705), v115);
          v102 = (uint64_t *)v100[704];
          v104 = (uint64_t *)v100[703];
        }
        else
        {
          v116 = 0;
        }
        v117 = (uint64_t *)&v116[8 * v112];
        v118 = &v116[8 * v115];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v120 = *--v102;
          *--v117 = v120;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1)
        goto LABEL_166;
      v100 = *(_QWORD **)a1[1];
      v101 = *(_DWORD *)(a1[2] + 32) & 0x3FFFFLL;
      v102 = (uint64_t *)v100[704];
      v103 = v100[705];
      if ((unint64_t)v102 >= v103)
      {
        v104 = (uint64_t *)v100[703];
        v105 = v102 - v104;
        if ((unint64_t)(v105 + 1) >> 61)
          goto LABEL_424;
        v106 = v103 - (_QWORD)v104;
        v107 = (uint64_t)(v103 - (_QWORD)v104) >> 2;
        if (v107 <= v105 + 1)
          v107 = v105 + 1;
        if (v106 >= 0x7FFFFFFFFFFFFFF8)
          v108 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v108 = v107;
        if (v108)
        {
          v109 = (char *)sub_40FC((uint64_t)(v100 + 705), v108);
          v102 = (uint64_t *)v100[704];
          v104 = (uint64_t *)v100[703];
        }
        else
        {
          v109 = 0;
        }
        v117 = (uint64_t *)&v109[8 * v105];
        v118 = &v109[8 * v108];
        *v117 = v101;
        v111 = v117 + 1;
        while (v102 != v104)
        {
          v119 = *--v102;
          *--v117 = v119;
        }
LABEL_163:
        v100[703] = v117;
        v100[704] = v111;
        v100[705] = v118;
        if (v104)
          operator delete(v104);
        goto LABEL_165;
      }
    }
    *v102 = v101;
    v111 = v102 + 1;
LABEL_165:
    v100[704] = v111;
LABEL_166:
    v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      v122 = *(_QWORD **)a1[1];
      v123 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      v124 = (uint64_t *)v122[707];
      v132 = v122[708];
      if ((unint64_t)v124 >= v132)
      {
        v126 = (uint64_t *)v122[706];
        v134 = v124 - v126;
        if ((unint64_t)(v134 + 1) >> 61)
          goto LABEL_424;
        v135 = v132 - (_QWORD)v126;
        v136 = (uint64_t)(v132 - (_QWORD)v126) >> 2;
        if (v136 <= v134 + 1)
          v136 = v134 + 1;
        if (v135 >= 0x7FFFFFFFFFFFFFF8)
          v137 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137)
        {
          v138 = (char *)sub_40FC((uint64_t)(v122 + 708), v137);
          v124 = (uint64_t *)v122[707];
          v126 = (uint64_t *)v122[706];
        }
        else
        {
          v138 = 0;
        }
        v139 = (uint64_t *)&v138[8 * v134];
        v140 = &v138[8 * v137];
        *v139 = v123;
        v133 = v139 + 1;
        while (v124 != v126)
        {
          v142 = *--v124;
          *--v139 = v142;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1)
        goto LABEL_198;
      v122 = *(_QWORD **)a1[1];
      v123 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      v124 = (uint64_t *)v122[707];
      v125 = v122[708];
      if ((unint64_t)v124 >= v125)
      {
        v126 = (uint64_t *)v122[706];
        v127 = v124 - v126;
        if ((unint64_t)(v127 + 1) >> 61)
          goto LABEL_424;
        v128 = v125 - (_QWORD)v126;
        v129 = (uint64_t)(v125 - (_QWORD)v126) >> 2;
        if (v129 <= v127 + 1)
          v129 = v127 + 1;
        if (v128 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
        {
          v131 = (char *)sub_40FC((uint64_t)(v122 + 708), v130);
          v124 = (uint64_t *)v122[707];
          v126 = (uint64_t *)v122[706];
        }
        else
        {
          v131 = 0;
        }
        v139 = (uint64_t *)&v131[8 * v127];
        v140 = &v131[8 * v130];
        *v139 = v123;
        v133 = v139 + 1;
        while (v124 != v126)
        {
          v141 = *--v124;
          *--v139 = v141;
        }
LABEL_195:
        v122[706] = v139;
        v122[707] = v133;
        v122[708] = v140;
        if (v126)
          operator delete(v126);
        goto LABEL_197;
      }
    }
    *v124 = v123;
    v133 = v124 + 1;
LABEL_197:
    v122[707] = v133;
LABEL_198:
    v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      v155 = a1[1];
      v145 = *(_QWORD **)v155;
      v146 = *(unsigned __int16 *)(a1[2] + 42);
      v147 = *(char **)(*(_QWORD *)v155 + 5680);
      v156 = *(_QWORD *)(*(_QWORD *)v155 + 5688);
      if ((unint64_t)v147 >= v156)
      {
        v149 = (char *)v145[709];
        v158 = (v147 - v149) >> 3;
        if ((unint64_t)(v158 + 1) >> 61)
          goto LABEL_424;
        v159 = v156 - (_QWORD)v149;
        v160 = (uint64_t)(v156 - (_QWORD)v149) >> 2;
        if (v160 <= v158 + 1)
          v160 = v158 + 1;
        if (v159 >= 0x7FFFFFFFFFFFFFF8)
          v161 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v161 = v160;
        if (v161)
        {
          v162 = (char *)sub_40FC((uint64_t)(v145 + 711), v161);
          v147 = (char *)v145[710];
          v149 = (char *)v145[709];
        }
        else
        {
          v162 = 0;
        }
        v163 = &v162[8 * v158];
        v164 = &v162[8 * v161];
        *(_QWORD *)v163 = v146;
        v157 = v163 + 8;
        while (v147 != v149)
        {
          v166 = *((_QWORD *)v147 - 1);
          v147 -= 8;
          *((_QWORD *)v163 - 1) = v166;
          v163 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1)
        goto LABEL_230;
      v144 = a1[1];
      v145 = *(_QWORD **)v144;
      v146 = *(unsigned __int16 *)(a1[2] + 42);
      v147 = *(char **)(*(_QWORD *)v144 + 5680);
      v148 = *(_QWORD *)(*(_QWORD *)v144 + 5688);
      if ((unint64_t)v147 >= v148)
      {
        v149 = (char *)v145[709];
        v150 = (v147 - v149) >> 3;
        if ((unint64_t)(v150 + 1) >> 61)
          goto LABEL_424;
        v151 = v148 - (_QWORD)v149;
        v152 = (uint64_t)(v148 - (_QWORD)v149) >> 2;
        if (v152 <= v150 + 1)
          v152 = v150 + 1;
        if (v151 >= 0x7FFFFFFFFFFFFFF8)
          v153 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v153 = v152;
        if (v153)
        {
          v154 = (char *)sub_40FC((uint64_t)(v145 + 711), v153);
          v147 = (char *)v145[710];
          v149 = (char *)v145[709];
        }
        else
        {
          v154 = 0;
        }
        v163 = &v154[8 * v150];
        v164 = &v154[8 * v153];
        *(_QWORD *)v163 = v146;
        v157 = v163 + 8;
        while (v147 != v149)
        {
          v165 = *((_QWORD *)v147 - 1);
          v147 -= 8;
          *((_QWORD *)v163 - 1) = v165;
          v163 -= 8;
        }
LABEL_227:
        v145[709] = v163;
        v145[710] = v157;
        v145[711] = v164;
        if (v149)
          operator delete(v149);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v147 = v146;
    v157 = v147 + 8;
LABEL_229:
    v145[710] = v157;
LABEL_230:
    v167 = 1 << *(_DWORD *)(v3 + 48);
    if (v167 == 2)
    {
      v179 = a1[1];
      v169 = *(_QWORD **)v179;
      v170 = *(unsigned __int16 *)(a1[2] + 40);
      v171 = *(char **)(*(_QWORD *)v179 + 5704);
      v180 = *(_QWORD *)(*(_QWORD *)v179 + 5712);
      if ((unint64_t)v171 >= v180)
      {
        v173 = (char *)v169[712];
        v182 = (v171 - v173) >> 3;
        if ((unint64_t)(v182 + 1) >> 61)
          goto LABEL_424;
        v183 = v180 - (_QWORD)v173;
        v184 = (uint64_t)(v180 - (_QWORD)v173) >> 2;
        if (v184 <= v182 + 1)
          v184 = v182 + 1;
        if (v183 >= 0x7FFFFFFFFFFFFFF8)
          v185 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v185 = v184;
        if (v185)
        {
          v186 = (char *)sub_40FC((uint64_t)(v169 + 714), v185);
          v171 = (char *)v169[713];
          v173 = (char *)v169[712];
        }
        else
        {
          v186 = 0;
        }
        v187 = &v186[8 * v182];
        v188 = &v186[8 * v185];
        *(_QWORD *)v187 = v170;
        v181 = v187 + 8;
        while (v171 != v173)
        {
          v190 = *((_QWORD *)v171 - 1);
          v171 -= 8;
          *((_QWORD *)v187 - 1) = v190;
          v187 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v167 != 1)
        goto LABEL_262;
      v168 = a1[1];
      v169 = *(_QWORD **)v168;
      v170 = *(unsigned __int16 *)(a1[2] + 40);
      v171 = *(char **)(*(_QWORD *)v168 + 5704);
      v172 = *(_QWORD *)(*(_QWORD *)v168 + 5712);
      if ((unint64_t)v171 >= v172)
      {
        v173 = (char *)v169[712];
        v174 = (v171 - v173) >> 3;
        if ((unint64_t)(v174 + 1) >> 61)
          goto LABEL_424;
        v175 = v172 - (_QWORD)v173;
        v176 = (uint64_t)(v172 - (_QWORD)v173) >> 2;
        if (v176 <= v174 + 1)
          v176 = v174 + 1;
        if (v175 >= 0x7FFFFFFFFFFFFFF8)
          v177 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v177 = v176;
        if (v177)
        {
          v178 = (char *)sub_40FC((uint64_t)(v169 + 714), v177);
          v171 = (char *)v169[713];
          v173 = (char *)v169[712];
        }
        else
        {
          v178 = 0;
        }
        v187 = &v178[8 * v174];
        v188 = &v178[8 * v177];
        *(_QWORD *)v187 = v170;
        v181 = v187 + 8;
        while (v171 != v173)
        {
          v189 = *((_QWORD *)v171 - 1);
          v171 -= 8;
          *((_QWORD *)v187 - 1) = v189;
          v187 -= 8;
        }
LABEL_259:
        v169[712] = v187;
        v169[713] = v181;
        v169[714] = v188;
        if (v173)
          operator delete(v173);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v171 = v170;
    v181 = v171 + 8;
LABEL_261:
    v169[713] = v181;
LABEL_262:
    v191 = 1 << *(_DWORD *)(v3 + 48);
    if (v191 == 2)
    {
      v192 = *(_QWORD **)a1[1];
      v193 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v194 = (char *)v192[716];
      v202 = v192[717];
      if ((unint64_t)v194 >= v202)
      {
        v196 = (char *)v192[715];
        v204 = (v194 - v196) >> 3;
        if ((unint64_t)(v204 + 1) >> 61)
          goto LABEL_424;
        v205 = v202 - (_QWORD)v196;
        v206 = (uint64_t)(v202 - (_QWORD)v196) >> 2;
        if (v206 <= v204 + 1)
          v206 = v204 + 1;
        if (v205 >= 0x7FFFFFFFFFFFFFF8)
          v207 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v207 = v206;
        if (v207)
        {
          v208 = (char *)sub_40FC((uint64_t)(v192 + 717), v207);
          v194 = (char *)v192[716];
          v196 = (char *)v192[715];
        }
        else
        {
          v208 = 0;
        }
        v209 = &v208[8 * v204];
        v210 = &v208[8 * v207];
        *(_QWORD *)v209 = v193;
        v203 = v209 + 8;
        while (v194 != v196)
        {
          v212 = *((_QWORD *)v194 - 1);
          v194 -= 8;
          *((_QWORD *)v209 - 1) = v212;
          v209 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v191 != 1)
        goto LABEL_294;
      v192 = *(_QWORD **)a1[1];
      v193 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v194 = (char *)v192[716];
      v195 = v192[717];
      if ((unint64_t)v194 >= v195)
      {
        v196 = (char *)v192[715];
        v197 = (v194 - v196) >> 3;
        if ((unint64_t)(v197 + 1) >> 61)
          goto LABEL_424;
        v198 = v195 - (_QWORD)v196;
        v199 = (uint64_t)(v195 - (_QWORD)v196) >> 2;
        if (v199 <= v197 + 1)
          v199 = v197 + 1;
        if (v198 >= 0x7FFFFFFFFFFFFFF8)
          v200 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v200 = v199;
        if (v200)
        {
          v201 = (char *)sub_40FC((uint64_t)(v192 + 717), v200);
          v194 = (char *)v192[716];
          v196 = (char *)v192[715];
        }
        else
        {
          v201 = 0;
        }
        v209 = &v201[8 * v197];
        v210 = &v201[8 * v200];
        *(_QWORD *)v209 = v193;
        v203 = v209 + 8;
        while (v194 != v196)
        {
          v211 = *((_QWORD *)v194 - 1);
          v194 -= 8;
          *((_QWORD *)v209 - 1) = v211;
          v209 -= 8;
        }
LABEL_291:
        v192[715] = v209;
        v192[716] = v203;
        v192[717] = v210;
        if (v196)
          operator delete(v196);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v194 = v193;
    v203 = v194 + 8;
LABEL_293:
    v192[716] = v203;
LABEL_294:
    v213 = 1 << *(_DWORD *)(v3 + 48);
    if (v213 == 2)
    {
      v214 = *(_QWORD **)a1[1];
      v215 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFLL;
      v216 = (uint64_t *)v214[719];
      v224 = v214[720];
      if ((unint64_t)v216 >= v224)
      {
        v218 = (uint64_t *)v214[718];
        v226 = v216 - v218;
        if ((unint64_t)(v226 + 1) >> 61)
          goto LABEL_424;
        v227 = v224 - (_QWORD)v218;
        v228 = (uint64_t)(v224 - (_QWORD)v218) >> 2;
        if (v228 <= v226 + 1)
          v228 = v226 + 1;
        if (v227 >= 0x7FFFFFFFFFFFFFF8)
          v229 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v229 = v228;
        if (v229)
        {
          v230 = (char *)sub_40FC((uint64_t)(v214 + 720), v229);
          v216 = (uint64_t *)v214[719];
          v218 = (uint64_t *)v214[718];
        }
        else
        {
          v230 = 0;
        }
        v231 = (uint64_t *)&v230[8 * v226];
        v232 = &v230[8 * v229];
        *v231 = v215;
        v225 = v231 + 1;
        while (v216 != v218)
        {
          v234 = *--v216;
          *--v231 = v234;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v213 != 1)
        goto LABEL_326;
      v214 = *(_QWORD **)a1[1];
      v215 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFLL;
      v216 = (uint64_t *)v214[719];
      v217 = v214[720];
      if ((unint64_t)v216 >= v217)
      {
        v218 = (uint64_t *)v214[718];
        v219 = v216 - v218;
        if ((unint64_t)(v219 + 1) >> 61)
          goto LABEL_424;
        v220 = v217 - (_QWORD)v218;
        v221 = (uint64_t)(v217 - (_QWORD)v218) >> 2;
        if (v221 <= v219 + 1)
          v221 = v219 + 1;
        if (v220 >= 0x7FFFFFFFFFFFFFF8)
          v222 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v222 = v221;
        if (v222)
        {
          v223 = (char *)sub_40FC((uint64_t)(v214 + 720), v222);
          v216 = (uint64_t *)v214[719];
          v218 = (uint64_t *)v214[718];
        }
        else
        {
          v223 = 0;
        }
        v231 = (uint64_t *)&v223[8 * v219];
        v232 = &v223[8 * v222];
        *v231 = v215;
        v225 = v231 + 1;
        while (v216 != v218)
        {
          v233 = *--v216;
          *--v231 = v233;
        }
LABEL_323:
        v214[718] = v231;
        v214[719] = v225;
        v214[720] = v232;
        if (v218)
          operator delete(v218);
        goto LABEL_325;
      }
    }
    *v216 = v215;
    v225 = v216 + 1;
LABEL_325:
    v214[719] = v225;
LABEL_326:
    v235 = 1 << *(_DWORD *)(v3 + 48);
    if (v235 == 2)
    {
      v236 = *(_QWORD **)a1[1];
      v237 = *(_DWORD *)(a1[2] + 56) & 0x1FFFFLL;
      v238 = (uint64_t *)v236[722];
      v246 = v236[723];
      if ((unint64_t)v238 >= v246)
      {
        v240 = (uint64_t *)v236[721];
        v248 = v238 - v240;
        if ((unint64_t)(v248 + 1) >> 61)
          goto LABEL_424;
        v249 = v246 - (_QWORD)v240;
        v250 = (uint64_t)(v246 - (_QWORD)v240) >> 2;
        if (v250 <= v248 + 1)
          v250 = v248 + 1;
        if (v249 >= 0x7FFFFFFFFFFFFFF8)
          v251 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v251 = v250;
        if (v251)
        {
          v252 = (char *)sub_40FC((uint64_t)(v236 + 723), v251);
          v238 = (uint64_t *)v236[722];
          v240 = (uint64_t *)v236[721];
        }
        else
        {
          v252 = 0;
        }
        v253 = (uint64_t *)&v252[8 * v248];
        v254 = &v252[8 * v251];
        *v253 = v237;
        v247 = v253 + 1;
        while (v238 != v240)
        {
          v256 = *--v238;
          *--v253 = v256;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v235 != 1)
        goto LABEL_358;
      v236 = *(_QWORD **)a1[1];
      v237 = *(_DWORD *)(a1[2] + 56) & 0x1FFFFLL;
      v238 = (uint64_t *)v236[722];
      v239 = v236[723];
      if ((unint64_t)v238 >= v239)
      {
        v240 = (uint64_t *)v236[721];
        v241 = v238 - v240;
        if ((unint64_t)(v241 + 1) >> 61)
          goto LABEL_424;
        v242 = v239 - (_QWORD)v240;
        v243 = (uint64_t)(v239 - (_QWORD)v240) >> 2;
        if (v243 <= v241 + 1)
          v243 = v241 + 1;
        if (v242 >= 0x7FFFFFFFFFFFFFF8)
          v244 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v244 = v243;
        if (v244)
        {
          v245 = (char *)sub_40FC((uint64_t)(v236 + 723), v244);
          v238 = (uint64_t *)v236[722];
          v240 = (uint64_t *)v236[721];
        }
        else
        {
          v245 = 0;
        }
        v253 = (uint64_t *)&v245[8 * v241];
        v254 = &v245[8 * v244];
        *v253 = v237;
        v247 = v253 + 1;
        while (v238 != v240)
        {
          v255 = *--v238;
          *--v253 = v255;
        }
LABEL_355:
        v236[721] = v253;
        v236[722] = v247;
        v236[723] = v254;
        if (v240)
          operator delete(v240);
        goto LABEL_357;
      }
    }
    *v238 = v237;
    v247 = v238 + 1;
LABEL_357:
    v236[722] = v247;
LABEL_358:
    v257 = 1 << *(_DWORD *)(v3 + 48);
    if (v257 == 2)
    {
      v258 = *(_QWORD **)a1[1];
      v259 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      v260 = (uint64_t *)v258[725];
      v268 = v258[726];
      if ((unint64_t)v260 >= v268)
      {
        v262 = (uint64_t *)v258[724];
        v270 = v260 - v262;
        if ((unint64_t)(v270 + 1) >> 61)
          goto LABEL_424;
        v271 = v268 - (_QWORD)v262;
        v272 = (uint64_t)(v268 - (_QWORD)v262) >> 2;
        if (v272 <= v270 + 1)
          v272 = v270 + 1;
        if (v271 >= 0x7FFFFFFFFFFFFFF8)
          v273 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v273 = v272;
        if (v273)
        {
          v274 = (char *)sub_40FC((uint64_t)(v258 + 726), v273);
          v260 = (uint64_t *)v258[725];
          v262 = (uint64_t *)v258[724];
        }
        else
        {
          v274 = 0;
        }
        v275 = (uint64_t *)&v274[8 * v270];
        v276 = &v274[8 * v273];
        *v275 = v259;
        v269 = v275 + 1;
        while (v260 != v262)
        {
          v278 = *--v260;
          *--v275 = v278;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v257 != 1)
        goto LABEL_390;
      v258 = *(_QWORD **)a1[1];
      v259 = *(_DWORD *)(a1[2] + 52) & 0x1FFFFLL;
      v260 = (uint64_t *)v258[725];
      v261 = v258[726];
      if ((unint64_t)v260 >= v261)
      {
        v262 = (uint64_t *)v258[724];
        v263 = v260 - v262;
        if ((unint64_t)(v263 + 1) >> 61)
          goto LABEL_424;
        v264 = v261 - (_QWORD)v262;
        v265 = (uint64_t)(v261 - (_QWORD)v262) >> 2;
        if (v265 <= v263 + 1)
          v265 = v263 + 1;
        if (v264 >= 0x7FFFFFFFFFFFFFF8)
          v266 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v266 = v265;
        if (v266)
        {
          v267 = (char *)sub_40FC((uint64_t)(v258 + 726), v266);
          v260 = (uint64_t *)v258[725];
          v262 = (uint64_t *)v258[724];
        }
        else
        {
          v267 = 0;
        }
        v275 = (uint64_t *)&v267[8 * v263];
        v276 = &v267[8 * v266];
        *v275 = v259;
        v269 = v275 + 1;
        while (v260 != v262)
        {
          v277 = *--v260;
          *--v275 = v277;
        }
LABEL_387:
        v258[724] = v275;
        v258[725] = v269;
        v258[726] = v276;
        if (v262)
          operator delete(v262);
        goto LABEL_389;
      }
    }
    *v260 = v259;
    v269 = v260 + 1;
LABEL_389:
    v258[725] = v269;
LABEL_390:
    v279 = 1 << *(_DWORD *)(v3 + 48);
    if (v279 == 2)
    {
      v291 = a1[2];
      v281 = *(_QWORD **)a1[1];
      v282 = *(_DWORD *)(v291 + 48) & 0x1FFFFLL;
      v283 = (uint64_t *)v281[728];
      v292 = v281[729];
      if ((unint64_t)v283 >= v292)
      {
        v285 = (uint64_t *)v281[727];
        v294 = v283 - v285;
        if (!((unint64_t)(v294 + 1) >> 61))
        {
          v295 = v292 - (_QWORD)v285;
          v296 = (uint64_t)(v292 - (_QWORD)v285) >> 2;
          if (v296 <= v294 + 1)
            v296 = v294 + 1;
          if (v295 >= 0x7FFFFFFFFFFFFFF8)
            v297 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v297 = v296;
          if (v297)
          {
            v298 = (char *)sub_40FC((uint64_t)(v281 + 729), v297);
            v283 = (uint64_t *)v281[728];
            v285 = (uint64_t *)v281[727];
          }
          else
          {
            v298 = 0;
          }
          v299 = (uint64_t *)&v298[8 * v294];
          v300 = &v298[8 * v297];
          *v299 = v282;
          v293 = v299 + 1;
          while (v283 != v285)
          {
            v302 = *--v283;
            *--v299 = v302;
          }
          goto LABEL_419;
        }
LABEL_424:
        sub_4074();
      }
    }
    else
    {
      if (v279 != 1)
      {
LABEL_422:
        *a2 = 1;
        return;
      }
      v280 = a1[2];
      v281 = *(_QWORD **)a1[1];
      v282 = *(_DWORD *)(v280 + 48) & 0x1FFFFLL;
      v283 = (uint64_t *)v281[728];
      v284 = v281[729];
      if ((unint64_t)v283 >= v284)
      {
        v285 = (uint64_t *)v281[727];
        v286 = v283 - v285;
        if (!((unint64_t)(v286 + 1) >> 61))
        {
          v287 = v284 - (_QWORD)v285;
          v288 = (uint64_t)(v284 - (_QWORD)v285) >> 2;
          if (v288 <= v286 + 1)
            v288 = v286 + 1;
          if (v287 >= 0x7FFFFFFFFFFFFFF8)
            v289 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v289 = v288;
          if (v289)
          {
            v290 = (char *)sub_40FC((uint64_t)(v281 + 729), v289);
            v283 = (uint64_t *)v281[728];
            v285 = (uint64_t *)v281[727];
          }
          else
          {
            v290 = 0;
          }
          v299 = (uint64_t *)&v290[8 * v286];
          v300 = &v290[8 * v289];
          *v299 = v282;
          v293 = v299 + 1;
          while (v283 != v285)
          {
            v301 = *--v283;
            *--v299 = v301;
          }
LABEL_419:
          v281[727] = v299;
          v281[728] = v293;
          v281[729] = v300;
          if (v285)
            operator delete(v285);
          goto LABEL_421;
        }
        goto LABEL_424;
      }
    }
    *v283 = v282;
    v293 = v283 + 1;
LABEL_421:
    v281[728] = v293;
    goto LABEL_422;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[692] - 8) += *(_WORD *)(v17 + 20) & 0x7FFF;
    *(_QWORD *)(v19[695] - 8) += *(_WORD *)(v17 + 22) & 0x7FFF;
    *(_QWORD *)(v19[698] - 8) += (unint64_t)*(unsigned int *)(v17 + 56) >> 17;
    *(_QWORD *)(v19[701] - 8) += *(_DWORD *)(v17 + 36) & 0x1FFFF;
    *(_QWORD *)(v19[704] - 8) += *(_DWORD *)(v17 + 32) & 0x3FFFF;
    *(_QWORD *)(v19[707] - 8) += *(_DWORD *)(v17 + 28) & 0x3FFFF;
    *(_QWORD *)(v19[710] - 8) += *(unsigned __int16 *)(v17 + 42);
    *(_QWORD *)(v19[713] - 8) += *(unsigned __int16 *)(v17 + 40);
    *(_QWORD *)(v19[716] - 8) += *(_WORD *)(v17 + 24) & 0x7FFF;
    *(_QWORD *)(v19[719] - 8) += *(_DWORD *)(v17 + 44) & 0x1FFFF;
    v20 = (_DWORD *)a1[2];
    v21 = (_QWORD *)*v18;
    *(_QWORD *)(v21[722] - 8) += v20[14] & 0x1FFFF;
    *(_QWORD *)(v21[725] - 8) += v20[13] & 0x1FFFF;
    *(_QWORD *)(v21[728] - 8) += v20[12] & 0x1FFFF;
  }
}

void sub_D6420(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  _QWORD *v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  _QWORD *v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  _QWORD *v147;
  uint64_t v148;
  char *v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  unint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  _QWORD *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  unint64_t *v186;
  char *v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t *v193;
  unint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  unint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  uint64_t *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t *v215;
  unint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  char *v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  uint64_t *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  _QWORD *v235;
  uint64_t v236;
  char *v237;
  unint64_t v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  char *v244;
  unint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  _QWORD *v257;
  uint64_t v258;
  char *v259;
  unint64_t v260;
  char *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  char *v266;
  unint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  char *v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t *v281;
  unint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  char *v288;
  unint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  char *v295;
  uint64_t *v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  _QWORD *v301;
  uint64_t v302;
  uint64_t *v303;
  unint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  char *v310;
  unint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  char *v317;
  uint64_t *v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t *v325;
  unint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  char *v332;
  unint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  char *v339;
  uint64_t *v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  char *v348;
  unint64_t v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  char *v355;
  uint64_t v356;
  unint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  char *v363;
  char *v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  _QWORD *v370;
  uint64_t v371;
  char *v372;
  unint64_t v373;
  char *v374;
  uint64_t v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  char *v379;
  uint64_t v380;
  unint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  char *v387;
  char *v388;
  char *v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  char *v396;
  unint64_t v397;
  char *v398;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  char *v403;
  uint64_t v404;
  unint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  char *v411;
  char *v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  char *v420;
  unint64_t v421;
  char *v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  char *v427;
  uint64_t v428;
  unint64_t v429;
  _QWORD *v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  char *v435;
  char *v436;
  char *v437;
  uint64_t v438;
  uint64_t v439;
  int v440;
  uint64_t v441;
  _QWORD *v442;
  uint64_t v443;
  char *v444;
  unint64_t v445;
  char *v446;
  uint64_t v447;
  unint64_t v448;
  unint64_t v449;
  unint64_t v450;
  char *v451;
  uint64_t v452;
  unint64_t v453;
  _QWORD *v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  char *v459;
  char *v460;
  char *v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  _QWORD *v465;
  uint64_t v466;
  uint64_t *v467;
  unint64_t v468;
  uint64_t *v469;
  uint64_t v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t v473;
  char *v474;
  unint64_t v475;
  _QWORD *v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  char *v481;
  uint64_t *v482;
  char *v483;
  uint64_t v484;
  uint64_t v485;
  int v486;
  _QWORD *v487;
  uint64_t v488;
  char *v489;
  unint64_t v490;
  char *v491;
  uint64_t v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  char *v496;
  unint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  unint64_t v502;
  char *v503;
  char *v504;
  char *v505;
  uint64_t v506;
  uint64_t v507;
  int v508;
  _QWORD *v509;
  uint64_t v510;
  char *v511;
  unint64_t v512;
  char *v513;
  uint64_t v514;
  unint64_t v515;
  unint64_t v516;
  unint64_t v517;
  char *v518;
  unint64_t v519;
  _QWORD *v520;
  uint64_t v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  char *v525;
  char *v526;
  char *v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  _QWORD *v531;
  uint64_t v532;
  char *v533;
  unint64_t v534;
  char *v535;
  uint64_t v536;
  unint64_t v537;
  unint64_t v538;
  unint64_t v539;
  char *v540;
  unint64_t v541;
  _QWORD *v542;
  uint64_t v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  char *v547;
  char *v548;
  char *v549;
  uint64_t v550;
  uint64_t v551;
  int v552;
  _QWORD *v553;
  uint64_t v554;
  char *v555;
  unint64_t v556;
  char *v557;
  uint64_t v558;
  unint64_t v559;
  unint64_t v560;
  unint64_t v561;
  char *v562;
  unint64_t v563;
  _QWORD *v564;
  uint64_t v565;
  unint64_t v566;
  unint64_t v567;
  unint64_t v568;
  char *v569;
  char *v570;
  char *v571;
  uint64_t v572;
  uint64_t v573;
  int v574;
  _QWORD *v575;
  uint64_t v576;
  uint64_t *v577;
  unint64_t v578;
  uint64_t *v579;
  uint64_t v580;
  unint64_t v581;
  unint64_t v582;
  unint64_t v583;
  char *v584;
  unint64_t v585;
  _QWORD *v586;
  uint64_t v587;
  unint64_t v588;
  unint64_t v589;
  unint64_t v590;
  char *v591;
  uint64_t *v592;
  char *v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  _QWORD *v597;
  uint64_t v598;
  uint64_t *v599;
  unint64_t v600;
  uint64_t *v601;
  uint64_t v602;
  unint64_t v603;
  unint64_t v604;
  unint64_t v605;
  char *v606;
  unint64_t v607;
  _QWORD *v608;
  uint64_t v609;
  unint64_t v610;
  unint64_t v611;
  unint64_t v612;
  char *v613;
  uint64_t *v614;
  char *v615;
  uint64_t v616;
  uint64_t v617;
  int v618;
  _QWORD *v619;
  uint64_t v620;
  uint64_t *v621;
  unint64_t v622;
  uint64_t *v623;
  uint64_t v624;
  unint64_t v625;
  unint64_t v626;
  unint64_t v627;
  char *v628;
  unint64_t v629;
  _QWORD *v630;
  uint64_t v631;
  unint64_t v632;
  unint64_t v633;
  unint64_t v634;
  char *v635;
  uint64_t *v636;
  char *v637;
  uint64_t v638;
  uint64_t v639;
  int v640;
  _QWORD *v641;
  uint64_t v642;
  uint64_t *v643;
  unint64_t v644;
  uint64_t *v645;
  uint64_t v646;
  unint64_t v647;
  unint64_t v648;
  unint64_t v649;
  char *v650;
  unint64_t v651;
  _QWORD *v652;
  uint64_t v653;
  unint64_t v654;
  unint64_t v655;
  unint64_t v656;
  char *v657;
  uint64_t *v658;
  char *v659;
  uint64_t v660;
  uint64_t v661;
  int v662;
  uint64_t v663;
  _QWORD *v664;
  uint64_t v665;
  uint64_t *v666;
  unint64_t v667;
  uint64_t *v668;
  uint64_t v669;
  unint64_t v670;
  unint64_t v671;
  unint64_t v672;
  char *v673;
  uint64_t v674;
  unint64_t v675;
  _QWORD *v676;
  uint64_t v677;
  unint64_t v678;
  unint64_t v679;
  unint64_t v680;
  char *v681;
  uint64_t *v682;
  char *v683;
  uint64_t v684;
  uint64_t v685;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = (unint64_t)*(unsigned int *)(a1[2] + 36) >> 17;
      v8 = (unint64_t *)v6[593];
      v25 = v6[594];
      if ((unint64_t)v8 >= v25)
      {
        v10 = (unint64_t *)v6[592];
        v27 = v8 - v10;
        if ((unint64_t)(v27 + 1) >> 61)
          goto LABEL_968;
        v28 = v25 - (_QWORD)v10;
        v29 = (uint64_t)(v25 - (_QWORD)v10) >> 2;
        if (v29 <= v27 + 1)
          v29 = v27 + 1;
        if (v28 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
        {
          v31 = (char *)sub_40FC((uint64_t)(v6 + 594), v30);
          v8 = (unint64_t *)v6[593];
          v10 = (unint64_t *)v6[592];
        }
        else
        {
          v31 = 0;
        }
        v32 = (unint64_t *)&v31[8 * v27];
        v33 = &v31[8 * v30];
        *v32 = v7;
        v26 = v32 + 1;
        while (v8 != v10)
        {
          v35 = *--v8;
          *--v32 = v35;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = (unint64_t)*(unsigned int *)(a1[2] + 36) >> 17;
      v8 = (unint64_t *)v6[593];
      v9 = v6[594];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (unint64_t *)v6[592];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_968;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 594), v14);
          v8 = (unint64_t *)v6[593];
          v10 = (unint64_t *)v6[592];
        }
        else
        {
          v15 = 0;
        }
        v32 = (unint64_t *)&v15[8 * v11];
        v33 = &v15[8 * v14];
        *v32 = v7;
        v26 = v32 + 1;
        while (v8 != v10)
        {
          v34 = *--v8;
          *--v32 = v34;
        }
LABEL_35:
        v6[592] = v32;
        v6[593] = v26;
        v6[594] = v33;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v26 = v8 + 1;
LABEL_37:
    v6[593] = v26;
LABEL_38:
    v36 = 1 << *(_DWORD *)(v3 + 48);
    if (v36 == 2)
    {
      v37 = *(_QWORD **)a1[1];
      v38 = *(_DWORD *)(a1[2] + 36) & 0x1FFFFLL;
      v39 = (uint64_t *)v37[596];
      v47 = v37[597];
      if ((unint64_t)v39 >= v47)
      {
        v41 = (uint64_t *)v37[595];
        v49 = v39 - v41;
        if ((unint64_t)(v49 + 1) >> 61)
          goto LABEL_968;
        v50 = v47 - (_QWORD)v41;
        v51 = (uint64_t)(v47 - (_QWORD)v41) >> 2;
        if (v51 <= v49 + 1)
          v51 = v49 + 1;
        if (v50 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v51;
        if (v52)
        {
          v53 = (char *)sub_40FC((uint64_t)(v37 + 597), v52);
          v39 = (uint64_t *)v37[596];
          v41 = (uint64_t *)v37[595];
        }
        else
        {
          v53 = 0;
        }
        v54 = (uint64_t *)&v53[8 * v49];
        v55 = &v53[8 * v52];
        *v54 = v38;
        v48 = v54 + 1;
        while (v39 != v41)
        {
          v57 = *--v39;
          *--v54 = v57;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v36 != 1)
        goto LABEL_70;
      v37 = *(_QWORD **)a1[1];
      v38 = *(_DWORD *)(a1[2] + 36) & 0x1FFFFLL;
      v39 = (uint64_t *)v37[596];
      v40 = v37[597];
      if ((unint64_t)v39 >= v40)
      {
        v41 = (uint64_t *)v37[595];
        v42 = v39 - v41;
        if ((unint64_t)(v42 + 1) >> 61)
          goto LABEL_968;
        v43 = v40 - (_QWORD)v41;
        v44 = (uint64_t)(v40 - (_QWORD)v41) >> 2;
        if (v44 <= v42 + 1)
          v44 = v42 + 1;
        if (v43 >= 0x7FFFFFFFFFFFFFF8)
          v45 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v45 = v44;
        if (v45)
        {
          v46 = (char *)sub_40FC((uint64_t)(v37 + 597), v45);
          v39 = (uint64_t *)v37[596];
          v41 = (uint64_t *)v37[595];
        }
        else
        {
          v46 = 0;
        }
        v54 = (uint64_t *)&v46[8 * v42];
        v55 = &v46[8 * v45];
        *v54 = v38;
        v48 = v54 + 1;
        while (v39 != v41)
        {
          v56 = *--v39;
          *--v54 = v56;
        }
LABEL_67:
        v37[595] = v54;
        v37[596] = v48;
        v37[597] = v55;
        if (v41)
          operator delete(v41);
        goto LABEL_69;
      }
    }
    *v39 = v38;
    v48 = v39 + 1;
LABEL_69:
    v37[596] = v48;
LABEL_70:
    v58 = 1 << *(_DWORD *)(v3 + 48);
    if (v58 == 2)
    {
      v59 = *(_QWORD **)a1[1];
      v60 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v61 = (char *)v59[599];
      v69 = v59[600];
      if ((unint64_t)v61 >= v69)
      {
        v63 = (char *)v59[598];
        v71 = (v61 - v63) >> 3;
        if ((unint64_t)(v71 + 1) >> 61)
          goto LABEL_968;
        v72 = v69 - (_QWORD)v63;
        v73 = (uint64_t)(v69 - (_QWORD)v63) >> 2;
        if (v73 <= v71 + 1)
          v73 = v71 + 1;
        if (v72 >= 0x7FFFFFFFFFFFFFF8)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v73;
        if (v74)
        {
          v75 = (char *)sub_40FC((uint64_t)(v59 + 600), v74);
          v61 = (char *)v59[599];
          v63 = (char *)v59[598];
        }
        else
        {
          v75 = 0;
        }
        v76 = &v75[8 * v71];
        v77 = &v75[8 * v74];
        *(_QWORD *)v76 = v60;
        v70 = v76 + 8;
        while (v61 != v63)
        {
          v79 = *((_QWORD *)v61 - 1);
          v61 -= 8;
          *((_QWORD *)v76 - 1) = v79;
          v76 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v58 != 1)
        goto LABEL_102;
      v59 = *(_QWORD **)a1[1];
      v60 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v61 = (char *)v59[599];
      v62 = v59[600];
      if ((unint64_t)v61 >= v62)
      {
        v63 = (char *)v59[598];
        v64 = (v61 - v63) >> 3;
        if ((unint64_t)(v64 + 1) >> 61)
          goto LABEL_968;
        v65 = v62 - (_QWORD)v63;
        v66 = (uint64_t)(v62 - (_QWORD)v63) >> 2;
        if (v66 <= v64 + 1)
          v66 = v64 + 1;
        if (v65 >= 0x7FFFFFFFFFFFFFF8)
          v67 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v67 = v66;
        if (v67)
        {
          v68 = (char *)sub_40FC((uint64_t)(v59 + 600), v67);
          v61 = (char *)v59[599];
          v63 = (char *)v59[598];
        }
        else
        {
          v68 = 0;
        }
        v76 = &v68[8 * v64];
        v77 = &v68[8 * v67];
        *(_QWORD *)v76 = v60;
        v70 = v76 + 8;
        while (v61 != v63)
        {
          v78 = *((_QWORD *)v61 - 1);
          v61 -= 8;
          *((_QWORD *)v76 - 1) = v78;
          v76 -= 8;
        }
LABEL_99:
        v59[598] = v76;
        v59[599] = v70;
        v59[600] = v77;
        if (v63)
          operator delete(v63);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v61 = v60;
    v70 = v61 + 8;
LABEL_101:
    v59[599] = v70;
LABEL_102:
    v80 = 1 << *(_DWORD *)(v3 + 48);
    if (v80 == 2)
    {
      v81 = *(_QWORD **)a1[1];
      v82 = *(_QWORD *)(a1[2] + 76) >> 49;
      v83 = (char *)v81[602];
      v91 = v81[603];
      if ((unint64_t)v83 >= v91)
      {
        v85 = (char *)v81[601];
        v93 = (v83 - v85) >> 3;
        if ((unint64_t)(v93 + 1) >> 61)
          goto LABEL_968;
        v94 = v91 - (_QWORD)v85;
        v95 = (uint64_t)(v91 - (_QWORD)v85) >> 2;
        if (v95 <= v93 + 1)
          v95 = v93 + 1;
        if (v94 >= 0x7FFFFFFFFFFFFFF8)
          v96 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v96 = v95;
        if (v96)
        {
          v97 = (char *)sub_40FC((uint64_t)(v81 + 603), v96);
          v83 = (char *)v81[602];
          v85 = (char *)v81[601];
        }
        else
        {
          v97 = 0;
        }
        v98 = &v97[8 * v93];
        v99 = &v97[8 * v96];
        *(_QWORD *)v98 = v82;
        v92 = v98 + 8;
        while (v83 != v85)
        {
          v101 = *((_QWORD *)v83 - 1);
          v83 -= 8;
          *((_QWORD *)v98 - 1) = v101;
          v98 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v80 != 1)
        goto LABEL_134;
      v81 = *(_QWORD **)a1[1];
      v82 = *(_QWORD *)(a1[2] + 76) >> 49;
      v83 = (char *)v81[602];
      v84 = v81[603];
      if ((unint64_t)v83 >= v84)
      {
        v85 = (char *)v81[601];
        v86 = (v83 - v85) >> 3;
        if ((unint64_t)(v86 + 1) >> 61)
          goto LABEL_968;
        v87 = v84 - (_QWORD)v85;
        v88 = (uint64_t)(v84 - (_QWORD)v85) >> 2;
        if (v88 <= v86 + 1)
          v88 = v86 + 1;
        if (v87 >= 0x7FFFFFFFFFFFFFF8)
          v89 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v89 = v88;
        if (v89)
        {
          v90 = (char *)sub_40FC((uint64_t)(v81 + 603), v89);
          v83 = (char *)v81[602];
          v85 = (char *)v81[601];
        }
        else
        {
          v90 = 0;
        }
        v98 = &v90[8 * v86];
        v99 = &v90[8 * v89];
        *(_QWORD *)v98 = v82;
        v92 = v98 + 8;
        while (v83 != v85)
        {
          v100 = *((_QWORD *)v83 - 1);
          v83 -= 8;
          *((_QWORD *)v98 - 1) = v100;
          v98 -= 8;
        }
LABEL_131:
        v81[601] = v98;
        v81[602] = v92;
        v81[603] = v99;
        if (v85)
          operator delete(v85);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v83 = v82;
    v92 = v83 + 8;
LABEL_133:
    v81[602] = v92;
LABEL_134:
    v102 = 1 << *(_DWORD *)(v3 + 48);
    if (v102 == 2)
    {
      v103 = *(_QWORD **)a1[1];
      v104 = *(_WORD *)(a1[2] + 92) & 0x7FFF;
      v105 = (char *)v103[605];
      v113 = v103[606];
      if ((unint64_t)v105 >= v113)
      {
        v107 = (char *)v103[604];
        v115 = (v105 - v107) >> 3;
        if ((unint64_t)(v115 + 1) >> 61)
          goto LABEL_968;
        v116 = v113 - (_QWORD)v107;
        v117 = (uint64_t)(v113 - (_QWORD)v107) >> 2;
        if (v117 <= v115 + 1)
          v117 = v115 + 1;
        if (v116 >= 0x7FFFFFFFFFFFFFF8)
          v118 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v118 = v117;
        if (v118)
        {
          v119 = (char *)sub_40FC((uint64_t)(v103 + 606), v118);
          v105 = (char *)v103[605];
          v107 = (char *)v103[604];
        }
        else
        {
          v119 = 0;
        }
        v120 = &v119[8 * v115];
        v121 = &v119[8 * v118];
        *(_QWORD *)v120 = v104;
        v114 = v120 + 8;
        while (v105 != v107)
        {
          v123 = *((_QWORD *)v105 - 1);
          v105 -= 8;
          *((_QWORD *)v120 - 1) = v123;
          v120 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v102 != 1)
        goto LABEL_166;
      v103 = *(_QWORD **)a1[1];
      v104 = *(_WORD *)(a1[2] + 92) & 0x7FFF;
      v105 = (char *)v103[605];
      v106 = v103[606];
      if ((unint64_t)v105 >= v106)
      {
        v107 = (char *)v103[604];
        v108 = (v105 - v107) >> 3;
        if ((unint64_t)(v108 + 1) >> 61)
          goto LABEL_968;
        v109 = v106 - (_QWORD)v107;
        v110 = (uint64_t)(v106 - (_QWORD)v107) >> 2;
        if (v110 <= v108 + 1)
          v110 = v108 + 1;
        if (v109 >= 0x7FFFFFFFFFFFFFF8)
          v111 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v111 = v110;
        if (v111)
        {
          v112 = (char *)sub_40FC((uint64_t)(v103 + 606), v111);
          v105 = (char *)v103[605];
          v107 = (char *)v103[604];
        }
        else
        {
          v112 = 0;
        }
        v120 = &v112[8 * v108];
        v121 = &v112[8 * v111];
        *(_QWORD *)v120 = v104;
        v114 = v120 + 8;
        while (v105 != v107)
        {
          v122 = *((_QWORD *)v105 - 1);
          v105 -= 8;
          *((_QWORD *)v120 - 1) = v122;
          v120 -= 8;
        }
LABEL_163:
        v103[604] = v120;
        v103[605] = v114;
        v103[606] = v121;
        if (v107)
          operator delete(v107);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v105 = v104;
    v114 = v105 + 8;
LABEL_165:
    v103[605] = v114;
LABEL_166:
    v124 = 1 << *(_DWORD *)(v3 + 48);
    if (v124 == 2)
    {
      v125 = *(_QWORD **)a1[1];
      v126 = *(_WORD *)(a1[2] + 94) & 0x7FFF;
      v127 = (char *)v125[608];
      v135 = v125[609];
      if ((unint64_t)v127 >= v135)
      {
        v129 = (char *)v125[607];
        v137 = (v127 - v129) >> 3;
        if ((unint64_t)(v137 + 1) >> 61)
          goto LABEL_968;
        v138 = v135 - (_QWORD)v129;
        v139 = (uint64_t)(v135 - (_QWORD)v129) >> 2;
        if (v139 <= v137 + 1)
          v139 = v137 + 1;
        if (v138 >= 0x7FFFFFFFFFFFFFF8)
          v140 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v140 = v139;
        if (v140)
        {
          v141 = (char *)sub_40FC((uint64_t)(v125 + 609), v140);
          v127 = (char *)v125[608];
          v129 = (char *)v125[607];
        }
        else
        {
          v141 = 0;
        }
        v142 = &v141[8 * v137];
        v143 = &v141[8 * v140];
        *(_QWORD *)v142 = v126;
        v136 = v142 + 8;
        while (v127 != v129)
        {
          v145 = *((_QWORD *)v127 - 1);
          v127 -= 8;
          *((_QWORD *)v142 - 1) = v145;
          v142 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v124 != 1)
        goto LABEL_198;
      v125 = *(_QWORD **)a1[1];
      v126 = *(_WORD *)(a1[2] + 94) & 0x7FFF;
      v127 = (char *)v125[608];
      v128 = v125[609];
      if ((unint64_t)v127 >= v128)
      {
        v129 = (char *)v125[607];
        v130 = (v127 - v129) >> 3;
        if ((unint64_t)(v130 + 1) >> 61)
          goto LABEL_968;
        v131 = v128 - (_QWORD)v129;
        v132 = (uint64_t)(v128 - (_QWORD)v129) >> 2;
        if (v132 <= v130 + 1)
          v132 = v130 + 1;
        if (v131 >= 0x7FFFFFFFFFFFFFF8)
          v133 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v133 = v132;
        if (v133)
        {
          v134 = (char *)sub_40FC((uint64_t)(v125 + 609), v133);
          v127 = (char *)v125[608];
          v129 = (char *)v125[607];
        }
        else
        {
          v134 = 0;
        }
        v142 = &v134[8 * v130];
        v143 = &v134[8 * v133];
        *(_QWORD *)v142 = v126;
        v136 = v142 + 8;
        while (v127 != v129)
        {
          v144 = *((_QWORD *)v127 - 1);
          v127 -= 8;
          *((_QWORD *)v142 - 1) = v144;
          v142 -= 8;
        }
LABEL_195:
        v125[607] = v142;
        v125[608] = v136;
        v125[609] = v143;
        if (v129)
          operator delete(v129);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v127 = v126;
    v136 = v127 + 8;
LABEL_197:
    v125[608] = v136;
LABEL_198:
    v146 = 1 << *(_DWORD *)(v3 + 48);
    if (v146 == 2)
    {
      v147 = *(_QWORD **)a1[1];
      v148 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      v149 = (char *)v147[611];
      v157 = v147[612];
      if ((unint64_t)v149 >= v157)
      {
        v151 = (char *)v147[610];
        v159 = (v149 - v151) >> 3;
        if ((unint64_t)(v159 + 1) >> 61)
          goto LABEL_968;
        v160 = v157 - (_QWORD)v151;
        v161 = (uint64_t)(v157 - (_QWORD)v151) >> 2;
        if (v161 <= v159 + 1)
          v161 = v159 + 1;
        if (v160 >= 0x7FFFFFFFFFFFFFF8)
          v162 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v162 = v161;
        if (v162)
        {
          v163 = (char *)sub_40FC((uint64_t)(v147 + 612), v162);
          v149 = (char *)v147[611];
          v151 = (char *)v147[610];
        }
        else
        {
          v163 = 0;
        }
        v164 = &v163[8 * v159];
        v165 = &v163[8 * v162];
        *(_QWORD *)v164 = v148;
        v158 = v164 + 8;
        while (v149 != v151)
        {
          v167 = *((_QWORD *)v149 - 1);
          v149 -= 8;
          *((_QWORD *)v164 - 1) = v167;
          v164 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v146 != 1)
        goto LABEL_230;
      v147 = *(_QWORD **)a1[1];
      v148 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      v149 = (char *)v147[611];
      v150 = v147[612];
      if ((unint64_t)v149 >= v150)
      {
        v151 = (char *)v147[610];
        v152 = (v149 - v151) >> 3;
        if ((unint64_t)(v152 + 1) >> 61)
          goto LABEL_968;
        v153 = v150 - (_QWORD)v151;
        v154 = (uint64_t)(v150 - (_QWORD)v151) >> 2;
        if (v154 <= v152 + 1)
          v154 = v152 + 1;
        if (v153 >= 0x7FFFFFFFFFFFFFF8)
          v155 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v155 = v154;
        if (v155)
        {
          v156 = (char *)sub_40FC((uint64_t)(v147 + 612), v155);
          v149 = (char *)v147[611];
          v151 = (char *)v147[610];
        }
        else
        {
          v156 = 0;
        }
        v164 = &v156[8 * v152];
        v165 = &v156[8 * v155];
        *(_QWORD *)v164 = v148;
        v158 = v164 + 8;
        while (v149 != v151)
        {
          v166 = *((_QWORD *)v149 - 1);
          v149 -= 8;
          *((_QWORD *)v164 - 1) = v166;
          v164 -= 8;
        }
LABEL_227:
        v147[610] = v164;
        v147[611] = v158;
        v147[612] = v165;
        if (v151)
          operator delete(v151);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v149 = v148;
    v158 = v149 + 8;
LABEL_229:
    v147[611] = v158;
LABEL_230:
    v168 = 1 << *(_DWORD *)(v3 + 48);
    if (v168 == 2)
    {
      v169 = *(_QWORD **)a1[1];
      v170 = (unint64_t)*(unsigned int *)(a1[2] + 48) >> 17;
      v171 = (unint64_t *)v169[614];
      v179 = v169[615];
      if ((unint64_t)v171 >= v179)
      {
        v173 = (unint64_t *)v169[613];
        v181 = v171 - v173;
        if ((unint64_t)(v181 + 1) >> 61)
          goto LABEL_968;
        v182 = v179 - (_QWORD)v173;
        v183 = (uint64_t)(v179 - (_QWORD)v173) >> 2;
        if (v183 <= v181 + 1)
          v183 = v181 + 1;
        if (v182 >= 0x7FFFFFFFFFFFFFF8)
          v184 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v184 = v183;
        if (v184)
        {
          v185 = (char *)sub_40FC((uint64_t)(v169 + 615), v184);
          v171 = (unint64_t *)v169[614];
          v173 = (unint64_t *)v169[613];
        }
        else
        {
          v185 = 0;
        }
        v186 = (unint64_t *)&v185[8 * v181];
        v187 = &v185[8 * v184];
        *v186 = v170;
        v180 = v186 + 1;
        while (v171 != v173)
        {
          v189 = *--v171;
          *--v186 = v189;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v168 != 1)
        goto LABEL_262;
      v169 = *(_QWORD **)a1[1];
      v170 = (unint64_t)*(unsigned int *)(a1[2] + 48) >> 17;
      v171 = (unint64_t *)v169[614];
      v172 = v169[615];
      if ((unint64_t)v171 >= v172)
      {
        v173 = (unint64_t *)v169[613];
        v174 = v171 - v173;
        if ((unint64_t)(v174 + 1) >> 61)
          goto LABEL_968;
        v175 = v172 - (_QWORD)v173;
        v176 = (uint64_t)(v172 - (_QWORD)v173) >> 2;
        if (v176 <= v174 + 1)
          v176 = v174 + 1;
        if (v175 >= 0x7FFFFFFFFFFFFFF8)
          v177 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v177 = v176;
        if (v177)
        {
          v178 = (char *)sub_40FC((uint64_t)(v169 + 615), v177);
          v171 = (unint64_t *)v169[614];
          v173 = (unint64_t *)v169[613];
        }
        else
        {
          v178 = 0;
        }
        v186 = (unint64_t *)&v178[8 * v174];
        v187 = &v178[8 * v177];
        *v186 = v170;
        v180 = v186 + 1;
        while (v171 != v173)
        {
          v188 = *--v171;
          *--v186 = v188;
        }
LABEL_259:
        v169[613] = v186;
        v169[614] = v180;
        v169[615] = v187;
        if (v173)
          operator delete(v173);
        goto LABEL_261;
      }
    }
    *v171 = v170;
    v180 = v171 + 1;
LABEL_261:
    v169[614] = v180;
LABEL_262:
    v190 = 1 << *(_DWORD *)(v3 + 48);
    if (v190 == 2)
    {
      v191 = *(_QWORD **)a1[1];
      v192 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFLL;
      v193 = (uint64_t *)v191[617];
      v201 = v191[618];
      if ((unint64_t)v193 >= v201)
      {
        v195 = (uint64_t *)v191[616];
        v203 = v193 - v195;
        if ((unint64_t)(v203 + 1) >> 61)
          goto LABEL_968;
        v204 = v201 - (_QWORD)v195;
        v205 = (uint64_t)(v201 - (_QWORD)v195) >> 2;
        if (v205 <= v203 + 1)
          v205 = v203 + 1;
        if (v204 >= 0x7FFFFFFFFFFFFFF8)
          v206 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v206 = v205;
        if (v206)
        {
          v207 = (char *)sub_40FC((uint64_t)(v191 + 618), v206);
          v193 = (uint64_t *)v191[617];
          v195 = (uint64_t *)v191[616];
        }
        else
        {
          v207 = 0;
        }
        v208 = (uint64_t *)&v207[8 * v203];
        v209 = &v207[8 * v206];
        *v208 = v192;
        v202 = v208 + 1;
        while (v193 != v195)
        {
          v211 = *--v193;
          *--v208 = v211;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v190 != 1)
        goto LABEL_294;
      v191 = *(_QWORD **)a1[1];
      v192 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFLL;
      v193 = (uint64_t *)v191[617];
      v194 = v191[618];
      if ((unint64_t)v193 >= v194)
      {
        v195 = (uint64_t *)v191[616];
        v196 = v193 - v195;
        if ((unint64_t)(v196 + 1) >> 61)
          goto LABEL_968;
        v197 = v194 - (_QWORD)v195;
        v198 = (uint64_t)(v194 - (_QWORD)v195) >> 2;
        if (v198 <= v196 + 1)
          v198 = v196 + 1;
        if (v197 >= 0x7FFFFFFFFFFFFFF8)
          v199 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v199 = v198;
        if (v199)
        {
          v200 = (char *)sub_40FC((uint64_t)(v191 + 618), v199);
          v193 = (uint64_t *)v191[617];
          v195 = (uint64_t *)v191[616];
        }
        else
        {
          v200 = 0;
        }
        v208 = (uint64_t *)&v200[8 * v196];
        v209 = &v200[8 * v199];
        *v208 = v192;
        v202 = v208 + 1;
        while (v193 != v195)
        {
          v210 = *--v193;
          *--v208 = v210;
        }
LABEL_291:
        v191[616] = v208;
        v191[617] = v202;
        v191[618] = v209;
        if (v195)
          operator delete(v195);
        goto LABEL_293;
      }
    }
    *v193 = v192;
    v202 = v193 + 1;
LABEL_293:
    v191[617] = v202;
LABEL_294:
    v212 = 1 << *(_DWORD *)(v3 + 48);
    if (v212 == 2)
    {
      v213 = *(_QWORD **)a1[1];
      v214 = *(_DWORD *)(a1[2] + 80) & 0x1FFFFLL;
      v215 = (uint64_t *)v213[620];
      v223 = v213[621];
      if ((unint64_t)v215 >= v223)
      {
        v217 = (uint64_t *)v213[619];
        v225 = v215 - v217;
        if ((unint64_t)(v225 + 1) >> 61)
          goto LABEL_968;
        v226 = v223 - (_QWORD)v217;
        v227 = (uint64_t)(v223 - (_QWORD)v217) >> 2;
        if (v227 <= v225 + 1)
          v227 = v225 + 1;
        if (v226 >= 0x7FFFFFFFFFFFFFF8)
          v228 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v228 = v227;
        if (v228)
        {
          v229 = (char *)sub_40FC((uint64_t)(v213 + 621), v228);
          v215 = (uint64_t *)v213[620];
          v217 = (uint64_t *)v213[619];
        }
        else
        {
          v229 = 0;
        }
        v230 = (uint64_t *)&v229[8 * v225];
        v231 = &v229[8 * v228];
        *v230 = v214;
        v224 = v230 + 1;
        while (v215 != v217)
        {
          v233 = *--v215;
          *--v230 = v233;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v212 != 1)
        goto LABEL_326;
      v213 = *(_QWORD **)a1[1];
      v214 = *(_DWORD *)(a1[2] + 80) & 0x1FFFFLL;
      v215 = (uint64_t *)v213[620];
      v216 = v213[621];
      if ((unint64_t)v215 >= v216)
      {
        v217 = (uint64_t *)v213[619];
        v218 = v215 - v217;
        if ((unint64_t)(v218 + 1) >> 61)
          goto LABEL_968;
        v219 = v216 - (_QWORD)v217;
        v220 = (uint64_t)(v216 - (_QWORD)v217) >> 2;
        if (v220 <= v218 + 1)
          v220 = v218 + 1;
        if (v219 >= 0x7FFFFFFFFFFFFFF8)
          v221 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v221 = v220;
        if (v221)
        {
          v222 = (char *)sub_40FC((uint64_t)(v213 + 621), v221);
          v215 = (uint64_t *)v213[620];
          v217 = (uint64_t *)v213[619];
        }
        else
        {
          v222 = 0;
        }
        v230 = (uint64_t *)&v222[8 * v218];
        v231 = &v222[8 * v221];
        *v230 = v214;
        v224 = v230 + 1;
        while (v215 != v217)
        {
          v232 = *--v215;
          *--v230 = v232;
        }
LABEL_323:
        v213[619] = v230;
        v213[620] = v224;
        v213[621] = v231;
        if (v217)
          operator delete(v217);
        goto LABEL_325;
      }
    }
    *v215 = v214;
    v224 = v215 + 1;
LABEL_325:
    v213[620] = v224;
LABEL_326:
    v234 = 1 << *(_DWORD *)(v3 + 48);
    if (v234 == 2)
    {
      v235 = *(_QWORD **)a1[1];
      v236 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v237 = (char *)v235[623];
      v245 = v235[624];
      if ((unint64_t)v237 >= v245)
      {
        v239 = (char *)v235[622];
        v247 = (v237 - v239) >> 3;
        if ((unint64_t)(v247 + 1) >> 61)
          goto LABEL_968;
        v248 = v245 - (_QWORD)v239;
        v249 = (uint64_t)(v245 - (_QWORD)v239) >> 2;
        if (v249 <= v247 + 1)
          v249 = v247 + 1;
        if (v248 >= 0x7FFFFFFFFFFFFFF8)
          v250 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v250 = v249;
        if (v250)
        {
          v251 = (char *)sub_40FC((uint64_t)(v235 + 624), v250);
          v237 = (char *)v235[623];
          v239 = (char *)v235[622];
        }
        else
        {
          v251 = 0;
        }
        v252 = &v251[8 * v247];
        v253 = &v251[8 * v250];
        *(_QWORD *)v252 = v236;
        v246 = v252 + 8;
        while (v237 != v239)
        {
          v255 = *((_QWORD *)v237 - 1);
          v237 -= 8;
          *((_QWORD *)v252 - 1) = v255;
          v252 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v234 != 1)
        goto LABEL_358;
      v235 = *(_QWORD **)a1[1];
      v236 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v237 = (char *)v235[623];
      v238 = v235[624];
      if ((unint64_t)v237 >= v238)
      {
        v239 = (char *)v235[622];
        v240 = (v237 - v239) >> 3;
        if ((unint64_t)(v240 + 1) >> 61)
          goto LABEL_968;
        v241 = v238 - (_QWORD)v239;
        v242 = (uint64_t)(v238 - (_QWORD)v239) >> 2;
        if (v242 <= v240 + 1)
          v242 = v240 + 1;
        if (v241 >= 0x7FFFFFFFFFFFFFF8)
          v243 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v243 = v242;
        if (v243)
        {
          v244 = (char *)sub_40FC((uint64_t)(v235 + 624), v243);
          v237 = (char *)v235[623];
          v239 = (char *)v235[622];
        }
        else
        {
          v244 = 0;
        }
        v252 = &v244[8 * v240];
        v253 = &v244[8 * v243];
        *(_QWORD *)v252 = v236;
        v246 = v252 + 8;
        while (v237 != v239)
        {
          v254 = *((_QWORD *)v237 - 1);
          v237 -= 8;
          *((_QWORD *)v252 - 1) = v254;
          v252 -= 8;
        }
LABEL_355:
        v235[622] = v252;
        v235[623] = v246;
        v235[624] = v253;
        if (v239)
          operator delete(v239);
        goto LABEL_357;
      }
    }
    *(_QWORD *)v237 = v236;
    v246 = v237 + 8;
LABEL_357:
    v235[623] = v246;
LABEL_358:
    v256 = 1 << *(_DWORD *)(v3 + 48);
    if (v256 == 2)
    {
      v257 = *(_QWORD **)a1[1];
      v258 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      v259 = (char *)v257[626];
      v267 = v257[627];
      if ((unint64_t)v259 >= v267)
      {
        v261 = (char *)v257[625];
        v269 = (v259 - v261) >> 3;
        if ((unint64_t)(v269 + 1) >> 61)
          goto LABEL_968;
        v270 = v267 - (_QWORD)v261;
        v271 = (uint64_t)(v267 - (_QWORD)v261) >> 2;
        if (v271 <= v269 + 1)
          v271 = v269 + 1;
        if (v270 >= 0x7FFFFFFFFFFFFFF8)
          v272 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v272 = v271;
        if (v272)
        {
          v273 = (char *)sub_40FC((uint64_t)(v257 + 627), v272);
          v259 = (char *)v257[626];
          v261 = (char *)v257[625];
        }
        else
        {
          v273 = 0;
        }
        v274 = &v273[8 * v269];
        v275 = &v273[8 * v272];
        *(_QWORD *)v274 = v258;
        v268 = v274 + 8;
        while (v259 != v261)
        {
          v277 = *((_QWORD *)v259 - 1);
          v259 -= 8;
          *((_QWORD *)v274 - 1) = v277;
          v274 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v256 != 1)
        goto LABEL_390;
      v257 = *(_QWORD **)a1[1];
      v258 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      v259 = (char *)v257[626];
      v260 = v257[627];
      if ((unint64_t)v259 >= v260)
      {
        v261 = (char *)v257[625];
        v262 = (v259 - v261) >> 3;
        if ((unint64_t)(v262 + 1) >> 61)
          goto LABEL_968;
        v263 = v260 - (_QWORD)v261;
        v264 = (uint64_t)(v260 - (_QWORD)v261) >> 2;
        if (v264 <= v262 + 1)
          v264 = v262 + 1;
        if (v263 >= 0x7FFFFFFFFFFFFFF8)
          v265 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v265 = v264;
        if (v265)
        {
          v266 = (char *)sub_40FC((uint64_t)(v257 + 627), v265);
          v259 = (char *)v257[626];
          v261 = (char *)v257[625];
        }
        else
        {
          v266 = 0;
        }
        v274 = &v266[8 * v262];
        v275 = &v266[8 * v265];
        *(_QWORD *)v274 = v258;
        v268 = v274 + 8;
        while (v259 != v261)
        {
          v276 = *((_QWORD *)v259 - 1);
          v259 -= 8;
          *((_QWORD *)v274 - 1) = v276;
          v274 -= 8;
        }
LABEL_387:
        v257[625] = v274;
        v257[626] = v268;
        v257[627] = v275;
        if (v261)
          operator delete(v261);
        goto LABEL_389;
      }
    }
    *(_QWORD *)v259 = v258;
    v268 = v259 + 8;
LABEL_389:
    v257[626] = v268;
LABEL_390:
    v278 = 1 << *(_DWORD *)(v3 + 48);
    if (v278 == 2)
    {
      v279 = *(_QWORD **)a1[1];
      v280 = *(_DWORD *)(a1[2] + 72) & 0xFFFFFLL;
      v281 = (uint64_t *)v279[629];
      v289 = v279[630];
      if ((unint64_t)v281 >= v289)
      {
        v283 = (uint64_t *)v279[628];
        v291 = v281 - v283;
        if ((unint64_t)(v291 + 1) >> 61)
          goto LABEL_968;
        v292 = v289 - (_QWORD)v283;
        v293 = (uint64_t)(v289 - (_QWORD)v283) >> 2;
        if (v293 <= v291 + 1)
          v293 = v291 + 1;
        if (v292 >= 0x7FFFFFFFFFFFFFF8)
          v294 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v294 = v293;
        if (v294)
        {
          v295 = (char *)sub_40FC((uint64_t)(v279 + 630), v294);
          v281 = (uint64_t *)v279[629];
          v283 = (uint64_t *)v279[628];
        }
        else
        {
          v295 = 0;
        }
        v296 = (uint64_t *)&v295[8 * v291];
        v297 = &v295[8 * v294];
        *v296 = v280;
        v290 = v296 + 1;
        while (v281 != v283)
        {
          v299 = *--v281;
          *--v296 = v299;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v278 != 1)
        goto LABEL_422;
      v279 = *(_QWORD **)a1[1];
      v280 = *(_DWORD *)(a1[2] + 72) & 0xFFFFFLL;
      v281 = (uint64_t *)v279[629];
      v282 = v279[630];
      if ((unint64_t)v281 >= v282)
      {
        v283 = (uint64_t *)v279[628];
        v284 = v281 - v283;
        if ((unint64_t)(v284 + 1) >> 61)
          goto LABEL_968;
        v285 = v282 - (_QWORD)v283;
        v286 = (uint64_t)(v282 - (_QWORD)v283) >> 2;
        if (v286 <= v284 + 1)
          v286 = v284 + 1;
        if (v285 >= 0x7FFFFFFFFFFFFFF8)
          v287 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v287 = v286;
        if (v287)
        {
          v288 = (char *)sub_40FC((uint64_t)(v279 + 630), v287);
          v281 = (uint64_t *)v279[629];
          v283 = (uint64_t *)v279[628];
        }
        else
        {
          v288 = 0;
        }
        v296 = (uint64_t *)&v288[8 * v284];
        v297 = &v288[8 * v287];
        *v296 = v280;
        v290 = v296 + 1;
        while (v281 != v283)
        {
          v298 = *--v281;
          *--v296 = v298;
        }
LABEL_419:
        v279[628] = v296;
        v279[629] = v290;
        v279[630] = v297;
        if (v283)
          operator delete(v283);
        goto LABEL_421;
      }
    }
    *v281 = v280;
    v290 = v281 + 1;
LABEL_421:
    v279[629] = v290;
LABEL_422:
    v300 = 1 << *(_DWORD *)(v3 + 48);
    if (v300 == 2)
    {
      v301 = *(_QWORD **)a1[1];
      v302 = *(_DWORD *)(a1[2] + 64) & 0x1FFFFLL;
      v303 = (uint64_t *)v301[632];
      v311 = v301[633];
      if ((unint64_t)v303 >= v311)
      {
        v305 = (uint64_t *)v301[631];
        v313 = v303 - v305;
        if ((unint64_t)(v313 + 1) >> 61)
          goto LABEL_968;
        v314 = v311 - (_QWORD)v305;
        v315 = (uint64_t)(v311 - (_QWORD)v305) >> 2;
        if (v315 <= v313 + 1)
          v315 = v313 + 1;
        if (v314 >= 0x7FFFFFFFFFFFFFF8)
          v316 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v316 = v315;
        if (v316)
        {
          v317 = (char *)sub_40FC((uint64_t)(v301 + 633), v316);
          v303 = (uint64_t *)v301[632];
          v305 = (uint64_t *)v301[631];
        }
        else
        {
          v317 = 0;
        }
        v318 = (uint64_t *)&v317[8 * v313];
        v319 = &v317[8 * v316];
        *v318 = v302;
        v312 = v318 + 1;
        while (v303 != v305)
        {
          v321 = *--v303;
          *--v318 = v321;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v300 != 1)
        goto LABEL_454;
      v301 = *(_QWORD **)a1[1];
      v302 = *(_DWORD *)(a1[2] + 64) & 0x1FFFFLL;
      v303 = (uint64_t *)v301[632];
      v304 = v301[633];
      if ((unint64_t)v303 >= v304)
      {
        v305 = (uint64_t *)v301[631];
        v306 = v303 - v305;
        if ((unint64_t)(v306 + 1) >> 61)
          goto LABEL_968;
        v307 = v304 - (_QWORD)v305;
        v308 = (uint64_t)(v304 - (_QWORD)v305) >> 2;
        if (v308 <= v306 + 1)
          v308 = v306 + 1;
        if (v307 >= 0x7FFFFFFFFFFFFFF8)
          v309 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v309 = v308;
        if (v309)
        {
          v310 = (char *)sub_40FC((uint64_t)(v301 + 633), v309);
          v303 = (uint64_t *)v301[632];
          v305 = (uint64_t *)v301[631];
        }
        else
        {
          v310 = 0;
        }
        v318 = (uint64_t *)&v310[8 * v306];
        v319 = &v310[8 * v309];
        *v318 = v302;
        v312 = v318 + 1;
        while (v303 != v305)
        {
          v320 = *--v303;
          *--v318 = v320;
        }
LABEL_451:
        v301[631] = v318;
        v301[632] = v312;
        v301[633] = v319;
        if (v305)
          operator delete(v305);
        goto LABEL_453;
      }
    }
    *v303 = v302;
    v312 = v303 + 1;
LABEL_453:
    v301[632] = v312;
LABEL_454:
    v322 = 1 << *(_DWORD *)(v3 + 48);
    if (v322 == 2)
    {
      v323 = *(_QWORD **)a1[1];
      v324 = *(_DWORD *)(a1[2] + 68) & 0x1FFFFLL;
      v325 = (uint64_t *)v323[635];
      v333 = v323[636];
      if ((unint64_t)v325 >= v333)
      {
        v327 = (uint64_t *)v323[634];
        v335 = v325 - v327;
        if ((unint64_t)(v335 + 1) >> 61)
          goto LABEL_968;
        v336 = v333 - (_QWORD)v327;
        v337 = (uint64_t)(v333 - (_QWORD)v327) >> 2;
        if (v337 <= v335 + 1)
          v337 = v335 + 1;
        if (v336 >= 0x7FFFFFFFFFFFFFF8)
          v338 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v338 = v337;
        if (v338)
        {
          v339 = (char *)sub_40FC((uint64_t)(v323 + 636), v338);
          v325 = (uint64_t *)v323[635];
          v327 = (uint64_t *)v323[634];
        }
        else
        {
          v339 = 0;
        }
        v340 = (uint64_t *)&v339[8 * v335];
        v341 = &v339[8 * v338];
        *v340 = v324;
        v334 = v340 + 1;
        while (v325 != v327)
        {
          v343 = *--v325;
          *--v340 = v343;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v322 != 1)
        goto LABEL_486;
      v323 = *(_QWORD **)a1[1];
      v324 = *(_DWORD *)(a1[2] + 68) & 0x1FFFFLL;
      v325 = (uint64_t *)v323[635];
      v326 = v323[636];
      if ((unint64_t)v325 >= v326)
      {
        v327 = (uint64_t *)v323[634];
        v328 = v325 - v327;
        if ((unint64_t)(v328 + 1) >> 61)
          goto LABEL_968;
        v329 = v326 - (_QWORD)v327;
        v330 = (uint64_t)(v326 - (_QWORD)v327) >> 2;
        if (v330 <= v328 + 1)
          v330 = v328 + 1;
        if (v329 >= 0x7FFFFFFFFFFFFFF8)
          v331 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v331 = v330;
        if (v331)
        {
          v332 = (char *)sub_40FC((uint64_t)(v323 + 636), v331);
          v325 = (uint64_t *)v323[635];
          v327 = (uint64_t *)v323[634];
        }
        else
        {
          v332 = 0;
        }
        v340 = (uint64_t *)&v332[8 * v328];
        v341 = &v332[8 * v331];
        *v340 = v324;
        v334 = v340 + 1;
        while (v325 != v327)
        {
          v342 = *--v325;
          *--v340 = v342;
        }
LABEL_483:
        v323[634] = v340;
        v323[635] = v334;
        v323[636] = v341;
        if (v327)
          operator delete(v327);
        goto LABEL_485;
      }
    }
    *v325 = v324;
    v334 = v325 + 1;
LABEL_485:
    v323[635] = v334;
LABEL_486:
    v344 = 1 << *(_DWORD *)(v3 + 48);
    if (v344 == 2)
    {
      v356 = a1[1];
      v346 = *(_QWORD **)v356;
      v347 = *(unsigned __int16 *)(a1[2] + 54);
      v348 = *(char **)(*(_QWORD *)v356 + 5104);
      v357 = *(_QWORD *)(*(_QWORD *)v356 + 5112);
      if ((unint64_t)v348 >= v357)
      {
        v350 = (char *)v346[637];
        v359 = (v348 - v350) >> 3;
        if ((unint64_t)(v359 + 1) >> 61)
          goto LABEL_968;
        v360 = v357 - (_QWORD)v350;
        v361 = (uint64_t)(v357 - (_QWORD)v350) >> 2;
        if (v361 <= v359 + 1)
          v361 = v359 + 1;
        if (v360 >= 0x7FFFFFFFFFFFFFF8)
          v362 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v362 = v361;
        if (v362)
        {
          v363 = (char *)sub_40FC((uint64_t)(v346 + 639), v362);
          v348 = (char *)v346[638];
          v350 = (char *)v346[637];
        }
        else
        {
          v363 = 0;
        }
        v364 = &v363[8 * v359];
        v365 = &v363[8 * v362];
        *(_QWORD *)v364 = v347;
        v358 = v364 + 8;
        while (v348 != v350)
        {
          v367 = *((_QWORD *)v348 - 1);
          v348 -= 8;
          *((_QWORD *)v364 - 1) = v367;
          v364 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v344 != 1)
        goto LABEL_518;
      v345 = a1[1];
      v346 = *(_QWORD **)v345;
      v347 = *(unsigned __int16 *)(a1[2] + 54);
      v348 = *(char **)(*(_QWORD *)v345 + 5104);
      v349 = *(_QWORD *)(*(_QWORD *)v345 + 5112);
      if ((unint64_t)v348 >= v349)
      {
        v350 = (char *)v346[637];
        v351 = (v348 - v350) >> 3;
        if ((unint64_t)(v351 + 1) >> 61)
          goto LABEL_968;
        v352 = v349 - (_QWORD)v350;
        v353 = (uint64_t)(v349 - (_QWORD)v350) >> 2;
        if (v353 <= v351 + 1)
          v353 = v351 + 1;
        if (v352 >= 0x7FFFFFFFFFFFFFF8)
          v354 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v354 = v353;
        if (v354)
        {
          v355 = (char *)sub_40FC((uint64_t)(v346 + 639), v354);
          v348 = (char *)v346[638];
          v350 = (char *)v346[637];
        }
        else
        {
          v355 = 0;
        }
        v364 = &v355[8 * v351];
        v365 = &v355[8 * v354];
        *(_QWORD *)v364 = v347;
        v358 = v364 + 8;
        while (v348 != v350)
        {
          v366 = *((_QWORD *)v348 - 1);
          v348 -= 8;
          *((_QWORD *)v364 - 1) = v366;
          v364 -= 8;
        }
LABEL_515:
        v346[637] = v364;
        v346[638] = v358;
        v346[639] = v365;
        if (v350)
          operator delete(v350);
        goto LABEL_517;
      }
    }
    *(_QWORD *)v348 = v347;
    v358 = v348 + 8;
LABEL_517:
    v346[638] = v358;
LABEL_518:
    v368 = 1 << *(_DWORD *)(v3 + 48);
    if (v368 == 2)
    {
      v380 = a1[1];
      v370 = *(_QWORD **)v380;
      v371 = *(unsigned __int16 *)(a1[2] + 56);
      v372 = *(char **)(*(_QWORD *)v380 + 5128);
      v381 = *(_QWORD *)(*(_QWORD *)v380 + 5136);
      if ((unint64_t)v372 >= v381)
      {
        v374 = (char *)v370[640];
        v383 = (v372 - v374) >> 3;
        if ((unint64_t)(v383 + 1) >> 61)
          goto LABEL_968;
        v384 = v381 - (_QWORD)v374;
        v385 = (uint64_t)(v381 - (_QWORD)v374) >> 2;
        if (v385 <= v383 + 1)
          v385 = v383 + 1;
        if (v384 >= 0x7FFFFFFFFFFFFFF8)
          v386 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v386 = v385;
        if (v386)
        {
          v387 = (char *)sub_40FC((uint64_t)(v370 + 642), v386);
          v372 = (char *)v370[641];
          v374 = (char *)v370[640];
        }
        else
        {
          v387 = 0;
        }
        v388 = &v387[8 * v383];
        v389 = &v387[8 * v386];
        *(_QWORD *)v388 = v371;
        v382 = v388 + 8;
        while (v372 != v374)
        {
          v391 = *((_QWORD *)v372 - 1);
          v372 -= 8;
          *((_QWORD *)v388 - 1) = v391;
          v388 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v368 != 1)
        goto LABEL_550;
      v369 = a1[1];
      v370 = *(_QWORD **)v369;
      v371 = *(unsigned __int16 *)(a1[2] + 56);
      v372 = *(char **)(*(_QWORD *)v369 + 5128);
      v373 = *(_QWORD *)(*(_QWORD *)v369 + 5136);
      if ((unint64_t)v372 >= v373)
      {
        v374 = (char *)v370[640];
        v375 = (v372 - v374) >> 3;
        if ((unint64_t)(v375 + 1) >> 61)
          goto LABEL_968;
        v376 = v373 - (_QWORD)v374;
        v377 = (uint64_t)(v373 - (_QWORD)v374) >> 2;
        if (v377 <= v375 + 1)
          v377 = v375 + 1;
        if (v376 >= 0x7FFFFFFFFFFFFFF8)
          v378 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v378 = v377;
        if (v378)
        {
          v379 = (char *)sub_40FC((uint64_t)(v370 + 642), v378);
          v372 = (char *)v370[641];
          v374 = (char *)v370[640];
        }
        else
        {
          v379 = 0;
        }
        v388 = &v379[8 * v375];
        v389 = &v379[8 * v378];
        *(_QWORD *)v388 = v371;
        v382 = v388 + 8;
        while (v372 != v374)
        {
          v390 = *((_QWORD *)v372 - 1);
          v372 -= 8;
          *((_QWORD *)v388 - 1) = v390;
          v388 -= 8;
        }
LABEL_547:
        v370[640] = v388;
        v370[641] = v382;
        v370[642] = v389;
        if (v374)
          operator delete(v374);
        goto LABEL_549;
      }
    }
    *(_QWORD *)v372 = v371;
    v382 = v372 + 8;
LABEL_549:
    v370[641] = v382;
LABEL_550:
    v392 = 1 << *(_DWORD *)(v3 + 48);
    if (v392 == 2)
    {
      v404 = a1[1];
      v394 = *(_QWORD **)v404;
      v395 = *(unsigned __int16 *)(a1[2] + 76);
      v396 = *(char **)(*(_QWORD *)v404 + 5152);
      v405 = *(_QWORD *)(*(_QWORD *)v404 + 5160);
      if ((unint64_t)v396 >= v405)
      {
        v398 = (char *)v394[643];
        v407 = (v396 - v398) >> 3;
        if ((unint64_t)(v407 + 1) >> 61)
          goto LABEL_968;
        v408 = v405 - (_QWORD)v398;
        v409 = (uint64_t)(v405 - (_QWORD)v398) >> 2;
        if (v409 <= v407 + 1)
          v409 = v407 + 1;
        if (v408 >= 0x7FFFFFFFFFFFFFF8)
          v410 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v410 = v409;
        if (v410)
        {
          v411 = (char *)sub_40FC((uint64_t)(v394 + 645), v410);
          v396 = (char *)v394[644];
          v398 = (char *)v394[643];
        }
        else
        {
          v411 = 0;
        }
        v412 = &v411[8 * v407];
        v413 = &v411[8 * v410];
        *(_QWORD *)v412 = v395;
        v406 = v412 + 8;
        while (v396 != v398)
        {
          v415 = *((_QWORD *)v396 - 1);
          v396 -= 8;
          *((_QWORD *)v412 - 1) = v415;
          v412 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v392 != 1)
        goto LABEL_582;
      v393 = a1[1];
      v394 = *(_QWORD **)v393;
      v395 = *(unsigned __int16 *)(a1[2] + 76);
      v396 = *(char **)(*(_QWORD *)v393 + 5152);
      v397 = *(_QWORD *)(*(_QWORD *)v393 + 5160);
      if ((unint64_t)v396 >= v397)
      {
        v398 = (char *)v394[643];
        v399 = (v396 - v398) >> 3;
        if ((unint64_t)(v399 + 1) >> 61)
          goto LABEL_968;
        v400 = v397 - (_QWORD)v398;
        v401 = (uint64_t)(v397 - (_QWORD)v398) >> 2;
        if (v401 <= v399 + 1)
          v401 = v399 + 1;
        if (v400 >= 0x7FFFFFFFFFFFFFF8)
          v402 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v402 = v401;
        if (v402)
        {
          v403 = (char *)sub_40FC((uint64_t)(v394 + 645), v402);
          v396 = (char *)v394[644];
          v398 = (char *)v394[643];
        }
        else
        {
          v403 = 0;
        }
        v412 = &v403[8 * v399];
        v413 = &v403[8 * v402];
        *(_QWORD *)v412 = v395;
        v406 = v412 + 8;
        while (v396 != v398)
        {
          v414 = *((_QWORD *)v396 - 1);
          v396 -= 8;
          *((_QWORD *)v412 - 1) = v414;
          v412 -= 8;
        }
LABEL_579:
        v394[643] = v412;
        v394[644] = v406;
        v394[645] = v413;
        if (v398)
          operator delete(v398);
        goto LABEL_581;
      }
    }
    *(_QWORD *)v396 = v395;
    v406 = v396 + 8;
LABEL_581:
    v394[644] = v406;
LABEL_582:
    v416 = 1 << *(_DWORD *)(v3 + 48);
    if (v416 == 2)
    {
      v428 = a1[1];
      v418 = *(_QWORD **)v428;
      v419 = *(unsigned __int16 *)(a1[2] + 86);
      v420 = *(char **)(*(_QWORD *)v428 + 5176);
      v429 = *(_QWORD *)(*(_QWORD *)v428 + 5184);
      if ((unint64_t)v420 >= v429)
      {
        v422 = (char *)v418[646];
        v431 = (v420 - v422) >> 3;
        if ((unint64_t)(v431 + 1) >> 61)
          goto LABEL_968;
        v432 = v429 - (_QWORD)v422;
        v433 = (uint64_t)(v429 - (_QWORD)v422) >> 2;
        if (v433 <= v431 + 1)
          v433 = v431 + 1;
        if (v432 >= 0x7FFFFFFFFFFFFFF8)
          v434 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v434 = v433;
        if (v434)
        {
          v435 = (char *)sub_40FC((uint64_t)(v418 + 648), v434);
          v420 = (char *)v418[647];
          v422 = (char *)v418[646];
        }
        else
        {
          v435 = 0;
        }
        v436 = &v435[8 * v431];
        v437 = &v435[8 * v434];
        *(_QWORD *)v436 = v419;
        v430 = v436 + 8;
        while (v420 != v422)
        {
          v439 = *((_QWORD *)v420 - 1);
          v420 -= 8;
          *((_QWORD *)v436 - 1) = v439;
          v436 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v416 != 1)
        goto LABEL_614;
      v417 = a1[1];
      v418 = *(_QWORD **)v417;
      v419 = *(unsigned __int16 *)(a1[2] + 86);
      v420 = *(char **)(*(_QWORD *)v417 + 5176);
      v421 = *(_QWORD *)(*(_QWORD *)v417 + 5184);
      if ((unint64_t)v420 >= v421)
      {
        v422 = (char *)v418[646];
        v423 = (v420 - v422) >> 3;
        if ((unint64_t)(v423 + 1) >> 61)
          goto LABEL_968;
        v424 = v421 - (_QWORD)v422;
        v425 = (uint64_t)(v421 - (_QWORD)v422) >> 2;
        if (v425 <= v423 + 1)
          v425 = v423 + 1;
        if (v424 >= 0x7FFFFFFFFFFFFFF8)
          v426 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v426 = v425;
        if (v426)
        {
          v427 = (char *)sub_40FC((uint64_t)(v418 + 648), v426);
          v420 = (char *)v418[647];
          v422 = (char *)v418[646];
        }
        else
        {
          v427 = 0;
        }
        v436 = &v427[8 * v423];
        v437 = &v427[8 * v426];
        *(_QWORD *)v436 = v419;
        v430 = v436 + 8;
        while (v420 != v422)
        {
          v438 = *((_QWORD *)v420 - 1);
          v420 -= 8;
          *((_QWORD *)v436 - 1) = v438;
          v436 -= 8;
        }
LABEL_611:
        v418[646] = v436;
        v418[647] = v430;
        v418[648] = v437;
        if (v422)
          operator delete(v422);
        goto LABEL_613;
      }
    }
    *(_QWORD *)v420 = v419;
    v430 = v420 + 8;
LABEL_613:
    v418[647] = v430;
LABEL_614:
    v440 = 1 << *(_DWORD *)(v3 + 48);
    if (v440 == 2)
    {
      v452 = a1[1];
      v442 = *(_QWORD **)v452;
      v443 = *(unsigned __int16 *)(a1[2] + 78);
      v444 = *(char **)(*(_QWORD *)v452 + 5200);
      v453 = *(_QWORD *)(*(_QWORD *)v452 + 5208);
      if ((unint64_t)v444 >= v453)
      {
        v446 = (char *)v442[649];
        v455 = (v444 - v446) >> 3;
        if ((unint64_t)(v455 + 1) >> 61)
          goto LABEL_968;
        v456 = v453 - (_QWORD)v446;
        v457 = (uint64_t)(v453 - (_QWORD)v446) >> 2;
        if (v457 <= v455 + 1)
          v457 = v455 + 1;
        if (v456 >= 0x7FFFFFFFFFFFFFF8)
          v458 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v458 = v457;
        if (v458)
        {
          v459 = (char *)sub_40FC((uint64_t)(v442 + 651), v458);
          v444 = (char *)v442[650];
          v446 = (char *)v442[649];
        }
        else
        {
          v459 = 0;
        }
        v460 = &v459[8 * v455];
        v461 = &v459[8 * v458];
        *(_QWORD *)v460 = v443;
        v454 = v460 + 8;
        while (v444 != v446)
        {
          v463 = *((_QWORD *)v444 - 1);
          v444 -= 8;
          *((_QWORD *)v460 - 1) = v463;
          v460 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v440 != 1)
        goto LABEL_646;
      v441 = a1[1];
      v442 = *(_QWORD **)v441;
      v443 = *(unsigned __int16 *)(a1[2] + 78);
      v444 = *(char **)(*(_QWORD *)v441 + 5200);
      v445 = *(_QWORD *)(*(_QWORD *)v441 + 5208);
      if ((unint64_t)v444 >= v445)
      {
        v446 = (char *)v442[649];
        v447 = (v444 - v446) >> 3;
        if ((unint64_t)(v447 + 1) >> 61)
          goto LABEL_968;
        v448 = v445 - (_QWORD)v446;
        v449 = (uint64_t)(v445 - (_QWORD)v446) >> 2;
        if (v449 <= v447 + 1)
          v449 = v447 + 1;
        if (v448 >= 0x7FFFFFFFFFFFFFF8)
          v450 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v450 = v449;
        if (v450)
        {
          v451 = (char *)sub_40FC((uint64_t)(v442 + 651), v450);
          v444 = (char *)v442[650];
          v446 = (char *)v442[649];
        }
        else
        {
          v451 = 0;
        }
        v460 = &v451[8 * v447];
        v461 = &v451[8 * v450];
        *(_QWORD *)v460 = v443;
        v454 = v460 + 8;
        while (v444 != v446)
        {
          v462 = *((_QWORD *)v444 - 1);
          v444 -= 8;
          *((_QWORD *)v460 - 1) = v462;
          v460 -= 8;
        }
LABEL_643:
        v442[649] = v460;
        v442[650] = v454;
        v442[651] = v461;
        if (v446)
          operator delete(v446);
        goto LABEL_645;
      }
    }
    *(_QWORD *)v444 = v443;
    v454 = v444 + 8;
LABEL_645:
    v442[650] = v454;
LABEL_646:
    v464 = 1 << *(_DWORD *)(v3 + 48);
    if (v464 == 2)
    {
      v465 = *(_QWORD **)a1[1];
      v466 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      v467 = (uint64_t *)v465[653];
      v475 = v465[654];
      if ((unint64_t)v467 >= v475)
      {
        v469 = (uint64_t *)v465[652];
        v477 = v467 - v469;
        if ((unint64_t)(v477 + 1) >> 61)
          goto LABEL_968;
        v478 = v475 - (_QWORD)v469;
        v479 = (uint64_t)(v475 - (_QWORD)v469) >> 2;
        if (v479 <= v477 + 1)
          v479 = v477 + 1;
        if (v478 >= 0x7FFFFFFFFFFFFFF8)
          v480 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v480 = v479;
        if (v480)
        {
          v481 = (char *)sub_40FC((uint64_t)(v465 + 654), v480);
          v467 = (uint64_t *)v465[653];
          v469 = (uint64_t *)v465[652];
        }
        else
        {
          v481 = 0;
        }
        v482 = (uint64_t *)&v481[8 * v477];
        v483 = &v481[8 * v480];
        *v482 = v466;
        v476 = v482 + 1;
        while (v467 != v469)
        {
          v485 = *--v467;
          *--v482 = v485;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v464 != 1)
        goto LABEL_678;
      v465 = *(_QWORD **)a1[1];
      v466 = *(_DWORD *)(a1[2] + 48) & 0x1FFFFLL;
      v467 = (uint64_t *)v465[653];
      v468 = v465[654];
      if ((unint64_t)v467 >= v468)
      {
        v469 = (uint64_t *)v465[652];
        v470 = v467 - v469;
        if ((unint64_t)(v470 + 1) >> 61)
          goto LABEL_968;
        v471 = v468 - (_QWORD)v469;
        v472 = (uint64_t)(v468 - (_QWORD)v469) >> 2;
        if (v472 <= v470 + 1)
          v472 = v470 + 1;
        if (v471 >= 0x7FFFFFFFFFFFFFF8)
          v473 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v473 = v472;
        if (v473)
        {
          v474 = (char *)sub_40FC((uint64_t)(v465 + 654), v473);
          v467 = (uint64_t *)v465[653];
          v469 = (uint64_t *)v465[652];
        }
        else
        {
          v474 = 0;
        }
        v482 = (uint64_t *)&v474[8 * v470];
        v483 = &v474[8 * v473];
        *v482 = v466;
        v476 = v482 + 1;
        while (v467 != v469)
        {
          v484 = *--v467;
          *--v482 = v484;
        }
LABEL_675:
        v465[652] = v482;
        v465[653] = v476;
        v465[654] = v483;
        if (v469)
          operator delete(v469);
        goto LABEL_677;
      }
    }
    *v467 = v466;
    v476 = v467 + 1;
LABEL_677:
    v465[653] = v476;
LABEL_678:
    v486 = 1 << *(_DWORD *)(v3 + 48);
    if (v486 == 2)
    {
      v487 = *(_QWORD **)a1[1];
      v488 = *(_WORD *)(a1[2] + 84) & 0x7FFF;
      v489 = (char *)v487[656];
      v497 = v487[657];
      if ((unint64_t)v489 >= v497)
      {
        v491 = (char *)v487[655];
        v499 = (v489 - v491) >> 3;
        if ((unint64_t)(v499 + 1) >> 61)
          goto LABEL_968;
        v500 = v497 - (_QWORD)v491;
        v501 = (uint64_t)(v497 - (_QWORD)v491) >> 2;
        if (v501 <= v499 + 1)
          v501 = v499 + 1;
        if (v500 >= 0x7FFFFFFFFFFFFFF8)
          v502 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v502 = v501;
        if (v502)
        {
          v503 = (char *)sub_40FC((uint64_t)(v487 + 657), v502);
          v489 = (char *)v487[656];
          v491 = (char *)v487[655];
        }
        else
        {
          v503 = 0;
        }
        v504 = &v503[8 * v499];
        v505 = &v503[8 * v502];
        *(_QWORD *)v504 = v488;
        v498 = v504 + 8;
        while (v489 != v491)
        {
          v507 = *((_QWORD *)v489 - 1);
          v489 -= 8;
          *((_QWORD *)v504 - 1) = v507;
          v504 -= 8;
        }
        goto LABEL_707;
      }
    }
    else
    {
      if (v486 != 1)
        goto LABEL_710;
      v487 = *(_QWORD **)a1[1];
      v488 = *(_WORD *)(a1[2] + 84) & 0x7FFF;
      v489 = (char *)v487[656];
      v490 = v487[657];
      if ((unint64_t)v489 >= v490)
      {
        v491 = (char *)v487[655];
        v492 = (v489 - v491) >> 3;
        if ((unint64_t)(v492 + 1) >> 61)
          goto LABEL_968;
        v493 = v490 - (_QWORD)v491;
        v494 = (uint64_t)(v490 - (_QWORD)v491) >> 2;
        if (v494 <= v492 + 1)
          v494 = v492 + 1;
        if (v493 >= 0x7FFFFFFFFFFFFFF8)
          v495 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v495 = v494;
        if (v495)
        {
          v496 = (char *)sub_40FC((uint64_t)(v487 + 657), v495);
          v489 = (char *)v487[656];
          v491 = (char *)v487[655];
        }
        else
        {
          v496 = 0;
        }
        v504 = &v496[8 * v492];
        v505 = &v496[8 * v495];
        *(_QWORD *)v504 = v488;
        v498 = v504 + 8;
        while (v489 != v491)
        {
          v506 = *((_QWORD *)v489 - 1);
          v489 -= 8;
          *((_QWORD *)v504 - 1) = v506;
          v504 -= 8;
        }
LABEL_707:
        v487[655] = v504;
        v487[656] = v498;
        v487[657] = v505;
        if (v491)
          operator delete(v491);
        goto LABEL_709;
      }
    }
    *(_QWORD *)v489 = v488;
    v498 = v489 + 8;
LABEL_709:
    v487[656] = v498;
LABEL_710:
    v508 = 1 << *(_DWORD *)(v3 + 48);
    if (v508 == 2)
    {
      v509 = *(_QWORD **)a1[1];
      v510 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      v511 = (char *)v509[659];
      v519 = v509[660];
      if ((unint64_t)v511 >= v519)
      {
        v513 = (char *)v509[658];
        v521 = (v511 - v513) >> 3;
        if ((unint64_t)(v521 + 1) >> 61)
          goto LABEL_968;
        v522 = v519 - (_QWORD)v513;
        v523 = (uint64_t)(v519 - (_QWORD)v513) >> 2;
        if (v523 <= v521 + 1)
          v523 = v521 + 1;
        if (v522 >= 0x7FFFFFFFFFFFFFF8)
          v524 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v524 = v523;
        if (v524)
        {
          v525 = (char *)sub_40FC((uint64_t)(v509 + 660), v524);
          v511 = (char *)v509[659];
          v513 = (char *)v509[658];
        }
        else
        {
          v525 = 0;
        }
        v526 = &v525[8 * v521];
        v527 = &v525[8 * v524];
        *(_QWORD *)v526 = v510;
        v520 = v526 + 8;
        while (v511 != v513)
        {
          v529 = *((_QWORD *)v511 - 1);
          v511 -= 8;
          *((_QWORD *)v526 - 1) = v529;
          v526 -= 8;
        }
        goto LABEL_739;
      }
    }
    else
    {
      if (v508 != 1)
        goto LABEL_742;
      v509 = *(_QWORD **)a1[1];
      v510 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      v511 = (char *)v509[659];
      v512 = v509[660];
      if ((unint64_t)v511 >= v512)
      {
        v513 = (char *)v509[658];
        v514 = (v511 - v513) >> 3;
        if ((unint64_t)(v514 + 1) >> 61)
          goto LABEL_968;
        v515 = v512 - (_QWORD)v513;
        v516 = (uint64_t)(v512 - (_QWORD)v513) >> 2;
        if (v516 <= v514 + 1)
          v516 = v514 + 1;
        if (v515 >= 0x7FFFFFFFFFFFFFF8)
          v517 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v517 = v516;
        if (v517)
        {
          v518 = (char *)sub_40FC((uint64_t)(v509 + 660), v517);
          v511 = (char *)v509[659];
          v513 = (char *)v509[658];
        }
        else
        {
          v518 = 0;
        }
        v526 = &v518[8 * v514];
        v527 = &v518[8 * v517];
        *(_QWORD *)v526 = v510;
        v520 = v526 + 8;
        while (v511 != v513)
        {
          v528 = *((_QWORD *)v511 - 1);
          v511 -= 8;
          *((_QWORD *)v526 - 1) = v528;
          v526 -= 8;
        }
LABEL_739:
        v509[658] = v526;
        v509[659] = v520;
        v509[660] = v527;
        if (v513)
          operator delete(v513);
        goto LABEL_741;
      }
    }
    *(_QWORD *)v511 = v510;
    v520 = v511 + 8;
LABEL_741:
    v509[659] = v520;
LABEL_742:
    v530 = 1 << *(_DWORD *)(v3 + 48);
    if (v530 == 2)
    {
      v531 = *(_QWORD **)a1[1];
      v532 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v533 = (char *)v531[662];
      v541 = v531[663];
      if ((unint64_t)v533 >= v541)
      {
        v535 = (char *)v531[661];
        v543 = (v533 - v535) >> 3;
        if ((unint64_t)(v543 + 1) >> 61)
          goto LABEL_968;
        v544 = v541 - (_QWORD)v535;
        v545 = (uint64_t)(v541 - (_QWORD)v535) >> 2;
        if (v545 <= v543 + 1)
          v545 = v543 + 1;
        if (v544 >= 0x7FFFFFFFFFFFFFF8)
          v546 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v546 = v545;
        if (v546)
        {
          v547 = (char *)sub_40FC((uint64_t)(v531 + 663), v546);
          v533 = (char *)v531[662];
          v535 = (char *)v531[661];
        }
        else
        {
          v547 = 0;
        }
        v548 = &v547[8 * v543];
        v549 = &v547[8 * v546];
        *(_QWORD *)v548 = v532;
        v542 = v548 + 8;
        while (v533 != v535)
        {
          v551 = *((_QWORD *)v533 - 1);
          v533 -= 8;
          *((_QWORD *)v548 - 1) = v551;
          v548 -= 8;
        }
        goto LABEL_771;
      }
    }
    else
    {
      if (v530 != 1)
        goto LABEL_774;
      v531 = *(_QWORD **)a1[1];
      v532 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v533 = (char *)v531[662];
      v534 = v531[663];
      if ((unint64_t)v533 >= v534)
      {
        v535 = (char *)v531[661];
        v536 = (v533 - v535) >> 3;
        if ((unint64_t)(v536 + 1) >> 61)
          goto LABEL_968;
        v537 = v534 - (_QWORD)v535;
        v538 = (uint64_t)(v534 - (_QWORD)v535) >> 2;
        if (v538 <= v536 + 1)
          v538 = v536 + 1;
        if (v537 >= 0x7FFFFFFFFFFFFFF8)
          v539 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v539 = v538;
        if (v539)
        {
          v540 = (char *)sub_40FC((uint64_t)(v531 + 663), v539);
          v533 = (char *)v531[662];
          v535 = (char *)v531[661];
        }
        else
        {
          v540 = 0;
        }
        v548 = &v540[8 * v536];
        v549 = &v540[8 * v539];
        *(_QWORD *)v548 = v532;
        v542 = v548 + 8;
        while (v533 != v535)
        {
          v550 = *((_QWORD *)v533 - 1);
          v533 -= 8;
          *((_QWORD *)v548 - 1) = v550;
          v548 -= 8;
        }
LABEL_771:
        v531[661] = v548;
        v531[662] = v542;
        v531[663] = v549;
        if (v535)
          operator delete(v535);
        goto LABEL_773;
      }
    }
    *(_QWORD *)v533 = v532;
    v542 = v533 + 8;
LABEL_773:
    v531[662] = v542;
LABEL_774:
    v552 = 1 << *(_DWORD *)(v3 + 48);
    if (v552 == 2)
    {
      v553 = *(_QWORD **)a1[1];
      v554 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
      v555 = (char *)v553[665];
      v563 = v553[666];
      if ((unint64_t)v555 >= v563)
      {
        v557 = (char *)v553[664];
        v565 = (v555 - v557) >> 3;
        if ((unint64_t)(v565 + 1) >> 61)
          goto LABEL_968;
        v566 = v563 - (_QWORD)v557;
        v567 = (uint64_t)(v563 - (_QWORD)v557) >> 2;
        if (v567 <= v565 + 1)
          v567 = v565 + 1;
        if (v566 >= 0x7FFFFFFFFFFFFFF8)
          v568 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v568 = v567;
        if (v568)
        {
          v569 = (char *)sub_40FC((uint64_t)(v553 + 666), v568);
          v555 = (char *)v553[665];
          v557 = (char *)v553[664];
        }
        else
        {
          v569 = 0;
        }
        v570 = &v569[8 * v565];
        v571 = &v569[8 * v568];
        *(_QWORD *)v570 = v554;
        v564 = v570 + 8;
        while (v555 != v557)
        {
          v573 = *((_QWORD *)v555 - 1);
          v555 -= 8;
          *((_QWORD *)v570 - 1) = v573;
          v570 -= 8;
        }
        goto LABEL_803;
      }
    }
    else
    {
      if (v552 != 1)
        goto LABEL_806;
      v553 = *(_QWORD **)a1[1];
      v554 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
      v555 = (char *)v553[665];
      v556 = v553[666];
      if ((unint64_t)v555 >= v556)
      {
        v557 = (char *)v553[664];
        v558 = (v555 - v557) >> 3;
        if ((unint64_t)(v558 + 1) >> 61)
          goto LABEL_968;
        v559 = v556 - (_QWORD)v557;
        v560 = (uint64_t)(v556 - (_QWORD)v557) >> 2;
        if (v560 <= v558 + 1)
          v560 = v558 + 1;
        if (v559 >= 0x7FFFFFFFFFFFFFF8)
          v561 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v561 = v560;
        if (v561)
        {
          v562 = (char *)sub_40FC((uint64_t)(v553 + 666), v561);
          v555 = (char *)v553[665];
          v557 = (char *)v553[664];
        }
        else
        {
          v562 = 0;
        }
        v570 = &v562[8 * v558];
        v571 = &v562[8 * v561];
        *(_QWORD *)v570 = v554;
        v564 = v570 + 8;
        while (v555 != v557)
        {
          v572 = *((_QWORD *)v555 - 1);
          v555 -= 8;
          *((_QWORD *)v570 - 1) = v572;
          v570 -= 8;
        }
LABEL_803:
        v553[664] = v570;
        v553[665] = v564;
        v553[666] = v571;
        if (v557)
          operator delete(v557);
        goto LABEL_805;
      }
    }
    *(_QWORD *)v555 = v554;
    v564 = v555 + 8;
LABEL_805:
    v553[665] = v564;
LABEL_806:
    v574 = 1 << *(_DWORD *)(v3 + 48);
    if (v574 == 2)
    {
      v575 = *(_QWORD **)a1[1];
      v576 = *(_DWORD *)(a1[2] + 60) & 0x1FFFFLL;
      v577 = (uint64_t *)v575[668];
      v585 = v575[669];
      if ((unint64_t)v577 >= v585)
      {
        v579 = (uint64_t *)v575[667];
        v587 = v577 - v579;
        if ((unint64_t)(v587 + 1) >> 61)
          goto LABEL_968;
        v588 = v585 - (_QWORD)v579;
        v589 = (uint64_t)(v585 - (_QWORD)v579) >> 2;
        if (v589 <= v587 + 1)
          v589 = v587 + 1;
        if (v588 >= 0x7FFFFFFFFFFFFFF8)
          v590 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v590 = v589;
        if (v590)
        {
          v591 = (char *)sub_40FC((uint64_t)(v575 + 669), v590);
          v577 = (uint64_t *)v575[668];
          v579 = (uint64_t *)v575[667];
        }
        else
        {
          v591 = 0;
        }
        v592 = (uint64_t *)&v591[8 * v587];
        v593 = &v591[8 * v590];
        *v592 = v576;
        v586 = v592 + 1;
        while (v577 != v579)
        {
          v595 = *--v577;
          *--v592 = v595;
        }
        goto LABEL_835;
      }
    }
    else
    {
      if (v574 != 1)
        goto LABEL_838;
      v575 = *(_QWORD **)a1[1];
      v576 = *(_DWORD *)(a1[2] + 60) & 0x1FFFFLL;
      v577 = (uint64_t *)v575[668];
      v578 = v575[669];
      if ((unint64_t)v577 >= v578)
      {
        v579 = (uint64_t *)v575[667];
        v580 = v577 - v579;
        if ((unint64_t)(v580 + 1) >> 61)
          goto LABEL_968;
        v581 = v578 - (_QWORD)v579;
        v582 = (uint64_t)(v578 - (_QWORD)v579) >> 2;
        if (v582 <= v580 + 1)
          v582 = v580 + 1;
        if (v581 >= 0x7FFFFFFFFFFFFFF8)
          v583 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v583 = v582;
        if (v583)
        {
          v584 = (char *)sub_40FC((uint64_t)(v575 + 669), v583);
          v577 = (uint64_t *)v575[668];
          v579 = (uint64_t *)v575[667];
        }
        else
        {
          v584 = 0;
        }
        v592 = (uint64_t *)&v584[8 * v580];
        v593 = &v584[8 * v583];
        *v592 = v576;
        v586 = v592 + 1;
        while (v577 != v579)
        {
          v594 = *--v577;
          *--v592 = v594;
        }
LABEL_835:
        v575[667] = v592;
        v575[668] = v586;
        v575[669] = v593;
        if (v579)
          operator delete(v579);
        goto LABEL_837;
      }
    }
    *v577 = v576;
    v586 = v577 + 1;
LABEL_837:
    v575[668] = v586;
LABEL_838:
    v596 = 1 << *(_DWORD *)(v3 + 48);
    if (v596 == 2)
    {
      v597 = *(_QWORD **)a1[1];
      v598 = (*(_QWORD *)(a1[2] + 86) >> 16) & 0x1FFFFLL;
      v599 = (uint64_t *)v597[671];
      v607 = v597[672];
      if ((unint64_t)v599 >= v607)
      {
        v601 = (uint64_t *)v597[670];
        v609 = v599 - v601;
        if ((unint64_t)(v609 + 1) >> 61)
          goto LABEL_968;
        v610 = v607 - (_QWORD)v601;
        v611 = (uint64_t)(v607 - (_QWORD)v601) >> 2;
        if (v611 <= v609 + 1)
          v611 = v609 + 1;
        if (v610 >= 0x7FFFFFFFFFFFFFF8)
          v612 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v612 = v611;
        if (v612)
        {
          v613 = (char *)sub_40FC((uint64_t)(v597 + 672), v612);
          v599 = (uint64_t *)v597[671];
          v601 = (uint64_t *)v597[670];
        }
        else
        {
          v613 = 0;
        }
        v614 = (uint64_t *)&v613[8 * v609];
        v615 = &v613[8 * v612];
        *v614 = v598;
        v608 = v614 + 1;
        while (v599 != v601)
        {
          v617 = *--v599;
          *--v614 = v617;
        }
        goto LABEL_867;
      }
    }
    else
    {
      if (v596 != 1)
        goto LABEL_870;
      v597 = *(_QWORD **)a1[1];
      v598 = (*(_QWORD *)(a1[2] + 86) >> 16) & 0x1FFFFLL;
      v599 = (uint64_t *)v597[671];
      v600 = v597[672];
      if ((unint64_t)v599 >= v600)
      {
        v601 = (uint64_t *)v597[670];
        v602 = v599 - v601;
        if ((unint64_t)(v602 + 1) >> 61)
          goto LABEL_968;
        v603 = v600 - (_QWORD)v601;
        v604 = (uint64_t)(v600 - (_QWORD)v601) >> 2;
        if (v604 <= v602 + 1)
          v604 = v602 + 1;
        if (v603 >= 0x7FFFFFFFFFFFFFF8)
          v605 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v605 = v604;
        if (v605)
        {
          v606 = (char *)sub_40FC((uint64_t)(v597 + 672), v605);
          v599 = (uint64_t *)v597[671];
          v601 = (uint64_t *)v597[670];
        }
        else
        {
          v606 = 0;
        }
        v614 = (uint64_t *)&v606[8 * v602];
        v615 = &v606[8 * v605];
        *v614 = v598;
        v608 = v614 + 1;
        while (v599 != v601)
        {
          v616 = *--v599;
          *--v614 = v616;
        }
LABEL_867:
        v597[670] = v614;
        v597[671] = v608;
        v597[672] = v615;
        if (v601)
          operator delete(v601);
        goto LABEL_869;
      }
    }
    *v599 = v598;
    v608 = v599 + 1;
LABEL_869:
    v597[671] = v608;
LABEL_870:
    v618 = 1 << *(_DWORD *)(v3 + 48);
    if (v618 == 2)
    {
      v619 = *(_QWORD **)a1[1];
      v620 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      v621 = (uint64_t *)v619[674];
      v629 = v619[675];
      if ((unint64_t)v621 >= v629)
      {
        v623 = (uint64_t *)v619[673];
        v631 = v621 - v623;
        if ((unint64_t)(v631 + 1) >> 61)
          goto LABEL_968;
        v632 = v629 - (_QWORD)v623;
        v633 = (uint64_t)(v629 - (_QWORD)v623) >> 2;
        if (v633 <= v631 + 1)
          v633 = v631 + 1;
        if (v632 >= 0x7FFFFFFFFFFFFFF8)
          v634 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v634 = v633;
        if (v634)
        {
          v635 = (char *)sub_40FC((uint64_t)(v619 + 675), v634);
          v621 = (uint64_t *)v619[674];
          v623 = (uint64_t *)v619[673];
        }
        else
        {
          v635 = 0;
        }
        v636 = (uint64_t *)&v635[8 * v631];
        v637 = &v635[8 * v634];
        *v636 = v620;
        v630 = v636 + 1;
        while (v621 != v623)
        {
          v639 = *--v621;
          *--v636 = v639;
        }
        goto LABEL_899;
      }
    }
    else
    {
      if (v618 != 1)
        goto LABEL_902;
      v619 = *(_QWORD **)a1[1];
      v620 = *(_DWORD *)(a1[2] + 28) & 0x1FFFFLL;
      v621 = (uint64_t *)v619[674];
      v622 = v619[675];
      if ((unint64_t)v621 >= v622)
      {
        v623 = (uint64_t *)v619[673];
        v624 = v621 - v623;
        if ((unint64_t)(v624 + 1) >> 61)
          goto LABEL_968;
        v625 = v622 - (_QWORD)v623;
        v626 = (uint64_t)(v622 - (_QWORD)v623) >> 2;
        if (v626 <= v624 + 1)
          v626 = v624 + 1;
        if (v625 >= 0x7FFFFFFFFFFFFFF8)
          v627 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v627 = v626;
        if (v627)
        {
          v628 = (char *)sub_40FC((uint64_t)(v619 + 675), v627);
          v621 = (uint64_t *)v619[674];
          v623 = (uint64_t *)v619[673];
        }
        else
        {
          v628 = 0;
        }
        v636 = (uint64_t *)&v628[8 * v624];
        v637 = &v628[8 * v627];
        *v636 = v620;
        v630 = v636 + 1;
        while (v621 != v623)
        {
          v638 = *--v621;
          *--v636 = v638;
        }
LABEL_899:
        v619[673] = v636;
        v619[674] = v630;
        v619[675] = v637;
        if (v623)
          operator delete(v623);
        goto LABEL_901;
      }
    }
    *v621 = v620;
    v630 = v621 + 1;
LABEL_901:
    v619[674] = v630;
LABEL_902:
    v640 = 1 << *(_DWORD *)(v3 + 48);
    if (v640 == 2)
    {
      v641 = *(_QWORD **)a1[1];
      v642 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      v643 = (uint64_t *)v641[677];
      v651 = v641[678];
      if ((unint64_t)v643 >= v651)
      {
        v645 = (uint64_t *)v641[676];
        v653 = v643 - v645;
        if ((unint64_t)(v653 + 1) >> 61)
          goto LABEL_968;
        v654 = v651 - (_QWORD)v645;
        v655 = (uint64_t)(v651 - (_QWORD)v645) >> 2;
        if (v655 <= v653 + 1)
          v655 = v653 + 1;
        if (v654 >= 0x7FFFFFFFFFFFFFF8)
          v656 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v656 = v655;
        if (v656)
        {
          v657 = (char *)sub_40FC((uint64_t)(v641 + 678), v656);
          v643 = (uint64_t *)v641[677];
          v645 = (uint64_t *)v641[676];
        }
        else
        {
          v657 = 0;
        }
        v658 = (uint64_t *)&v657[8 * v653];
        v659 = &v657[8 * v656];
        *v658 = v642;
        v652 = v658 + 1;
        while (v643 != v645)
        {
          v661 = *--v643;
          *--v658 = v661;
        }
        goto LABEL_931;
      }
    }
    else
    {
      if (v640 != 1)
        goto LABEL_934;
      v641 = *(_QWORD **)a1[1];
      v642 = *(_DWORD *)(a1[2] + 32) & 0x1FFFFLL;
      v643 = (uint64_t *)v641[677];
      v644 = v641[678];
      if ((unint64_t)v643 >= v644)
      {
        v645 = (uint64_t *)v641[676];
        v646 = v643 - v645;
        if ((unint64_t)(v646 + 1) >> 61)
          goto LABEL_968;
        v647 = v644 - (_QWORD)v645;
        v648 = (uint64_t)(v644 - (_QWORD)v645) >> 2;
        if (v648 <= v646 + 1)
          v648 = v646 + 1;
        if (v647 >= 0x7FFFFFFFFFFFFFF8)
          v649 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v649 = v648;
        if (v649)
        {
          v650 = (char *)sub_40FC((uint64_t)(v641 + 678), v649);
          v643 = (uint64_t *)v641[677];
          v645 = (uint64_t *)v641[676];
        }
        else
        {
          v650 = 0;
        }
        v658 = (uint64_t *)&v650[8 * v646];
        v659 = &v650[8 * v649];
        *v658 = v642;
        v652 = v658 + 1;
        while (v643 != v645)
        {
          v660 = *--v643;
          *--v658 = v660;
        }
LABEL_931:
        v641[676] = v658;
        v641[677] = v652;
        v641[678] = v659;
        if (v645)
          operator delete(v645);
        goto LABEL_933;
      }
    }
    *v643 = v642;
    v652 = v643 + 1;
LABEL_933:
    v641[677] = v652;
LABEL_934:
    v662 = 1 << *(_DWORD *)(v3 + 48);
    if (v662 == 2)
    {
      v674 = a1[2];
      v664 = *(_QWORD **)a1[1];
      v665 = (*(_QWORD *)(v674 + 86) >> 33) & 0x7FFFLL;
      v666 = (uint64_t *)v664[680];
      v675 = v664[681];
      if ((unint64_t)v666 >= v675)
      {
        v668 = (uint64_t *)v664[679];
        v677 = v666 - v668;
        if (!((unint64_t)(v677 + 1) >> 61))
        {
          v678 = v675 - (_QWORD)v668;
          v679 = (uint64_t)(v675 - (_QWORD)v668) >> 2;
          if (v679 <= v677 + 1)
            v679 = v677 + 1;
          if (v678 >= 0x7FFFFFFFFFFFFFF8)
            v680 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v680 = v679;
          if (v680)
          {
            v681 = (char *)sub_40FC((uint64_t)(v664 + 681), v680);
            v666 = (uint64_t *)v664[680];
            v668 = (uint64_t *)v664[679];
          }
          else
          {
            v681 = 0;
          }
          v682 = (uint64_t *)&v681[8 * v677];
          v683 = &v681[8 * v680];
          *v682 = v665;
          v676 = v682 + 1;
          while (v666 != v668)
          {
            v685 = *--v666;
            *--v682 = v685;
          }
          goto LABEL_963;
        }
LABEL_968:
        sub_4074();
      }
    }
    else
    {
      if (v662 != 1)
      {
LABEL_966:
        *a2 = 1;
        return;
      }
      v663 = a1[2];
      v664 = *(_QWORD **)a1[1];
      v665 = (*(_QWORD *)(v663 + 86) >> 33) & 0x7FFFLL;
      v666 = (uint64_t *)v664[680];
      v667 = v664[681];
      if ((unint64_t)v666 >= v667)
      {
        v668 = (uint64_t *)v664[679];
        v669 = v666 - v668;
        if (!((unint64_t)(v669 + 1) >> 61))
        {
          v670 = v667 - (_QWORD)v668;
          v671 = (uint64_t)(v667 - (_QWORD)v668) >> 2;
          if (v671 <= v669 + 1)
            v671 = v669 + 1;
          if (v670 >= 0x7FFFFFFFFFFFFFF8)
            v672 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v672 = v671;
          if (v672)
          {
            v673 = (char *)sub_40FC((uint64_t)(v664 + 681), v672);
            v666 = (uint64_t *)v664[680];
            v668 = (uint64_t *)v664[679];
          }
          else
          {
            v673 = 0;
          }
          v682 = (uint64_t *)&v673[8 * v669];
          v683 = &v673[8 * v672];
          *v682 = v665;
          v676 = v682 + 1;
          while (v666 != v668)
          {
            v684 = *--v666;
            *--v682 = v684;
          }
LABEL_963:
          v664[679] = v682;
          v664[680] = v676;
          v664[681] = v683;
          if (v668)
            operator delete(v668);
          goto LABEL_965;
        }
        goto LABEL_968;
      }
    }
    *v666 = v665;
    v676 = v666 + 1;
LABEL_965:
    v664[680] = v676;
    goto LABEL_966;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = a1[2];
    v19 = *(_DWORD *)(v17 + 36);
    v17 += 36;
    v20 = (_QWORD *)*v18;
    *(_QWORD *)(v20[593] - 8) += (unint64_t)v19 >> 17;
    *(_QWORD *)(v20[596] - 8) += *(_DWORD *)v17 & 0x1FFFF;
    *(_QWORD *)(v20[599] - 8) += *(_WORD *)(v17 - 10) & 0x7FFF;
    *(_QWORD *)(v20[602] - 8) += *(_QWORD *)(v17 + 40) >> 49;
    *(_QWORD *)(v20[605] - 8) += *(_WORD *)(v17 + 56) & 0x7FFF;
    *(_QWORD *)(v20[608] - 8) += *(_WORD *)(v17 + 58) & 0x7FFF;
    *(_QWORD *)(v20[611] - 8) += *(_WORD *)(v17 - 14) & 0x7FFF;
    *(_QWORD *)(v20[614] - 8) += (unint64_t)*(unsigned int *)(v17 + 12) >> 17;
    *(_QWORD *)(v20[617] - 8) += *(_DWORD *)(v17 + 8) & 0x1FFFF;
    *(_QWORD *)(v20[620] - 8) += *(_DWORD *)(v17 + 44) & 0x1FFFF;
    v21 = a1[2];
    v22 = *(_QWORD **)a1[1];
    *(_QWORD *)(v22[623] - 8) += *(_WORD *)(v21 + 24) & 0x7FFF;
    *(_QWORD *)(v22[626] - 8) += *(_WORD *)(v21 + 20) & 0x7FFF;
    *(_QWORD *)(v22[629] - 8) += *(_DWORD *)(v21 + 72) & 0xFFFFF;
    *(_QWORD *)(v22[632] - 8) += *(_DWORD *)(v21 + 64) & 0x1FFFF;
    *(_QWORD *)(v22[635] - 8) += *(_DWORD *)(v21 + 68) & 0x1FFFF;
    *(_QWORD *)(v22[638] - 8) += *(unsigned __int16 *)(v21 + 54);
    *(_QWORD *)(v22[641] - 8) += *(unsigned __int16 *)(v21 + 56);
    *(_QWORD *)(v22[644] - 8) += *(unsigned __int16 *)(v21 + 76);
    *(_QWORD *)(v22[647] - 8) += *(unsigned __int16 *)(v21 + 86);
    *(_QWORD *)(v22[650] - 8) += *(unsigned __int16 *)(v21 + 78);
    v23 = a1[2];
    v24 = (_QWORD *)*v18;
    *(_QWORD *)(v24[653] - 8) += *(_DWORD *)(v23 + 48) & 0x1FFFF;
    *(_QWORD *)(v24[656] - 8) += *(_WORD *)(v23 + 84) & 0x7FFF;
    *(_QWORD *)(v24[659] - 8) += *(_WORD *)(v23 + 42) & 0x7FFF;
    *(_QWORD *)(v24[662] - 8) += *(_WORD *)(v23 + 40) & 0x7FFF;
    *(_QWORD *)(v24[665] - 8) += *(_WORD *)(v23 + 52) & 0x7FFF;
    *(_QWORD *)(v24[668] - 8) += *(_DWORD *)(v23 + 60) & 0x1FFFF;
    *(_QWORD *)(v24[671] - 8) += (*(_QWORD *)(v23 + 86) >> 16) & 0x1FFFFLL;
    *(_QWORD *)(v24[674] - 8) += *(_DWORD *)(v23 + 28) & 0x1FFFF;
    *(_QWORD *)(v24[677] - 8) += *(_DWORD *)(v23 + 32) & 0x1FFFF;
    *(_QWORD *)(v24[680] - 8) += (*(_QWORD *)(v23 + 86) >> 33) & 0x7FFFLL;
  }
}

void sub_D9618(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  _DWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 24) & 0x1FFFFFLL;
      v8 = (uint64_t *)v6[683];
      v19 = v6[684];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (uint64_t *)v6[682];
        v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_104;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 684), v24);
          v8 = (uint64_t *)v6[683];
          v10 = (uint64_t *)v6[682];
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v29 = *--v8;
          *--v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 24) & 0x1FFFFFLL;
      v8 = (uint64_t *)v6[683];
      v9 = v6[684];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[682];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_104;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 684), v14);
          v8 = (uint64_t *)v6[683];
          v10 = (uint64_t *)v6[682];
        }
        else
        {
          v15 = 0;
        }
        v26 = (uint64_t *)&v15[8 * v11];
        v27 = &v15[8 * v14];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v28 = *--v8;
          *--v26 = v28;
        }
LABEL_35:
        v6[682] = v26;
        v6[683] = v20;
        v6[684] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v20 = v8 + 1;
LABEL_37:
    v6[683] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      v33 = (uint64_t *)v31[686];
      v41 = v31[687];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[685];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_104;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 687), v46);
          v33 = (uint64_t *)v31[686];
          v35 = (uint64_t *)v31[685];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFFLL;
      v33 = (uint64_t *)v31[686];
      v34 = v31[687];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[685];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_104;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 687), v39);
          v33 = (uint64_t *)v31[686];
          v35 = (uint64_t *)v31[685];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[685] = v48;
        v31[686] = v42;
        v31[687] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[686] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v64 = a1[2];
      v54 = *(_QWORD **)a1[1];
      v55 = *(_DWORD *)(v64 + 20) & 0x3FFFFFLL;
      v56 = (uint64_t *)v54[689];
      v65 = v54[690];
      if ((unint64_t)v56 >= v65)
      {
        v58 = (uint64_t *)v54[688];
        v67 = v56 - v58;
        if (!((unint64_t)(v67 + 1) >> 61))
        {
          v68 = v65 - (_QWORD)v58;
          v69 = (uint64_t)(v65 - (_QWORD)v58) >> 2;
          if (v69 <= v67 + 1)
            v69 = v67 + 1;
          if (v68 >= 0x7FFFFFFFFFFFFFF8)
            v70 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v70 = v69;
          if (v70)
          {
            v71 = (char *)sub_40FC((uint64_t)(v54 + 690), v70);
            v56 = (uint64_t *)v54[689];
            v58 = (uint64_t *)v54[688];
          }
          else
          {
            v71 = 0;
          }
          v72 = (uint64_t *)&v71[8 * v67];
          v73 = &v71[8 * v70];
          *v72 = v55;
          v66 = v72 + 1;
          while (v56 != v58)
          {
            v75 = *--v56;
            *--v72 = v75;
          }
          goto LABEL_99;
        }
LABEL_104:
        sub_4074();
      }
    }
    else
    {
      if (v52 != 1)
      {
LABEL_102:
        *a2 = 1;
        return;
      }
      v53 = a1[2];
      v54 = *(_QWORD **)a1[1];
      v55 = *(_DWORD *)(v53 + 20) & 0x3FFFFFLL;
      v56 = (uint64_t *)v54[689];
      v57 = v54[690];
      if ((unint64_t)v56 >= v57)
      {
        v58 = (uint64_t *)v54[688];
        v59 = v56 - v58;
        if (!((unint64_t)(v59 + 1) >> 61))
        {
          v60 = v57 - (_QWORD)v58;
          v61 = (uint64_t)(v57 - (_QWORD)v58) >> 2;
          if (v61 <= v59 + 1)
            v61 = v59 + 1;
          if (v60 >= 0x7FFFFFFFFFFFFFF8)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v61;
          if (v62)
          {
            v63 = (char *)sub_40FC((uint64_t)(v54 + 690), v62);
            v56 = (uint64_t *)v54[689];
            v58 = (uint64_t *)v54[688];
          }
          else
          {
            v63 = 0;
          }
          v72 = (uint64_t *)&v63[8 * v59];
          v73 = &v63[8 * v62];
          *v72 = v55;
          v66 = v72 + 1;
          while (v56 != v58)
          {
            v74 = *--v56;
            *--v72 = v74;
          }
LABEL_99:
          v54[688] = v72;
          v54[689] = v66;
          v54[690] = v73;
          if (v58)
            operator delete(v58);
          goto LABEL_101;
        }
        goto LABEL_104;
      }
    }
    *v56 = v55;
    v66 = v56 + 1;
LABEL_101:
    v54[689] = v66;
    goto LABEL_102;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = (_DWORD *)a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[683] - 8) += v17[6] & 0x1FFFFF;
    *(_QWORD *)(v18[686] - 8) += v17[7] & 0x3FFFFF;
    *(_QWORD *)(v18[689] - 8) += v17[5] & 0x3FFFFF;
  }
}

void sub_D9B8C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  _QWORD *v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  unint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  _QWORD *v163;
  uint64_t v164;
  char *v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char *v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  _QWORD *v185;
  uint64_t v186;
  char *v187;
  unint64_t v188;
  char *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  char *v210;
  unint64_t v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 30) & 0x1FFF;
      v8 = (char *)v6[797];
      v19 = v6[798];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (char *)v6[796];
        v21 = (v8 - v10) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_328;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 798), v24);
          v8 = (char *)v6[797];
          v10 = (char *)v6[796];
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[8 * v21];
        v27 = &v25[8 * v24];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v29 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v29;
          v26 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 30) & 0x1FFF;
      v8 = (char *)v6[797];
      v9 = v6[798];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[796];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_328;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 798), v14);
          v8 = (char *)v6[797];
          v10 = (char *)v6[796];
        }
        else
        {
          v15 = 0;
        }
        v26 = &v15[8 * v11];
        v27 = &v15[8 * v14];
        *(_QWORD *)v26 = v7;
        v20 = v26 + 8;
        while (v8 != v10)
        {
          v28 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v26 - 1) = v28;
          v26 -= 8;
        }
LABEL_35:
        v6[796] = v26;
        v6[797] = v20;
        v6[798] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v20 = v8 + 8;
LABEL_37:
    v6[797] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      v33 = (uint64_t *)v31[800];
      v41 = v31[801];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[799];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_328;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 801), v46);
          v33 = (uint64_t *)v31[800];
          v35 = (uint64_t *)v31[799];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 36) & 0x3FFFFLL;
      v33 = (uint64_t *)v31[800];
      v34 = v31[801];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[799];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_328;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 801), v39);
          v33 = (uint64_t *)v31[800];
          v35 = (uint64_t *)v31[799];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[799] = v48;
        v31[800] = v42;
        v31[801] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[800] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 28) & 0x1FFF;
      v55 = (char *)v53[803];
      v63 = v53[804];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (char *)v53[802];
        v65 = (v55 - v57) >> 3;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_328;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 804), v68);
          v55 = (char *)v53[803];
          v57 = (char *)v53[802];
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[8 * v65];
        v71 = &v69[8 * v68];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v73 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v73;
          v70 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_WORD *)(a1[2] + 28) & 0x1FFF;
      v55 = (char *)v53[803];
      v56 = v53[804];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (char *)v53[802];
        v58 = (v55 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_328;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 804), v61);
          v55 = (char *)v53[803];
          v57 = (char *)v53[802];
        }
        else
        {
          v62 = 0;
        }
        v70 = &v62[8 * v58];
        v71 = &v62[8 * v61];
        *(_QWORD *)v70 = v54;
        v64 = v70 + 8;
        while (v55 != v57)
        {
          v72 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v70 - 1) = v72;
          v70 -= 8;
        }
LABEL_99:
        v53[802] = v70;
        v53[803] = v64;
        v53[804] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v55 = v54;
    v64 = v55 + 8;
LABEL_101:
    v53[803] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v75 = *(_QWORD **)a1[1];
      v76 = ((unint64_t)*(unsigned int *)(a1[2] + 32) >> 13) & 0x3FFFF;
      v77 = (unint64_t *)v75[806];
      v85 = v75[807];
      if ((unint64_t)v77 >= v85)
      {
        v79 = (unint64_t *)v75[805];
        v87 = v77 - v79;
        if ((unint64_t)(v87 + 1) >> 61)
          goto LABEL_328;
        v88 = v85 - (_QWORD)v79;
        v89 = (uint64_t)(v85 - (_QWORD)v79) >> 2;
        if (v89 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v91 = (char *)sub_40FC((uint64_t)(v75 + 807), v90);
          v77 = (unint64_t *)v75[806];
          v79 = (unint64_t *)v75[805];
        }
        else
        {
          v91 = 0;
        }
        v92 = (unint64_t *)&v91[8 * v87];
        v93 = &v91[8 * v90];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v95 = *--v77;
          *--v92 = v95;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1)
        goto LABEL_134;
      v75 = *(_QWORD **)a1[1];
      v76 = ((unint64_t)*(unsigned int *)(a1[2] + 32) >> 13) & 0x3FFFF;
      v77 = (unint64_t *)v75[806];
      v78 = v75[807];
      if ((unint64_t)v77 >= v78)
      {
        v79 = (unint64_t *)v75[805];
        v80 = v77 - v79;
        if ((unint64_t)(v80 + 1) >> 61)
          goto LABEL_328;
        v81 = v78 - (_QWORD)v79;
        v82 = (uint64_t)(v78 - (_QWORD)v79) >> 2;
        if (v82 <= v80 + 1)
          v82 = v80 + 1;
        if (v81 >= 0x7FFFFFFFFFFFFFF8)
          v83 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v83 = v82;
        if (v83)
        {
          v84 = (char *)sub_40FC((uint64_t)(v75 + 807), v83);
          v77 = (unint64_t *)v75[806];
          v79 = (unint64_t *)v75[805];
        }
        else
        {
          v84 = 0;
        }
        v92 = (unint64_t *)&v84[8 * v80];
        v93 = &v84[8 * v83];
        *v92 = v76;
        v86 = v92 + 1;
        while (v77 != v79)
        {
          v94 = *--v77;
          *--v92 = v94;
        }
LABEL_131:
        v75[805] = v92;
        v75[806] = v86;
        v75[807] = v93;
        if (v79)
          operator delete(v79);
        goto LABEL_133;
      }
    }
    *v77 = v76;
    v86 = v77 + 1;
LABEL_133:
    v75[806] = v86;
LABEL_134:
    v96 = 1 << *(_DWORD *)(v3 + 48);
    if (v96 == 2)
    {
      v97 = *(_QWORD **)a1[1];
      v98 = *(_DWORD *)(a1[2] + 32) & 0x1FFFLL;
      v99 = (uint64_t *)v97[809];
      v107 = v97[810];
      if ((unint64_t)v99 >= v107)
      {
        v101 = (uint64_t *)v97[808];
        v109 = v99 - v101;
        if ((unint64_t)(v109 + 1) >> 61)
          goto LABEL_328;
        v110 = v107 - (_QWORD)v101;
        v111 = (uint64_t)(v107 - (_QWORD)v101) >> 2;
        if (v111 <= v109 + 1)
          v111 = v109 + 1;
        if (v110 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v111;
        if (v112)
        {
          v113 = (char *)sub_40FC((uint64_t)(v97 + 810), v112);
          v99 = (uint64_t *)v97[809];
          v101 = (uint64_t *)v97[808];
        }
        else
        {
          v113 = 0;
        }
        v114 = (uint64_t *)&v113[8 * v109];
        v115 = &v113[8 * v112];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v117 = *--v99;
          *--v114 = v117;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v96 != 1)
        goto LABEL_166;
      v97 = *(_QWORD **)a1[1];
      v98 = *(_DWORD *)(a1[2] + 32) & 0x1FFFLL;
      v99 = (uint64_t *)v97[809];
      v100 = v97[810];
      if ((unint64_t)v99 >= v100)
      {
        v101 = (uint64_t *)v97[808];
        v102 = v99 - v101;
        if ((unint64_t)(v102 + 1) >> 61)
          goto LABEL_328;
        v103 = v100 - (_QWORD)v101;
        v104 = (uint64_t)(v100 - (_QWORD)v101) >> 2;
        if (v104 <= v102 + 1)
          v104 = v102 + 1;
        if (v103 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v104;
        if (v105)
        {
          v106 = (char *)sub_40FC((uint64_t)(v97 + 810), v105);
          v99 = (uint64_t *)v97[809];
          v101 = (uint64_t *)v97[808];
        }
        else
        {
          v106 = 0;
        }
        v114 = (uint64_t *)&v106[8 * v102];
        v115 = &v106[8 * v105];
        *v114 = v98;
        v108 = v114 + 1;
        while (v99 != v101)
        {
          v116 = *--v99;
          *--v114 = v116;
        }
LABEL_163:
        v97[808] = v114;
        v97[809] = v108;
        v97[810] = v115;
        if (v101)
          operator delete(v101);
        goto LABEL_165;
      }
    }
    *v99 = v98;
    v108 = v99 + 1;
LABEL_165:
    v97[809] = v108;
LABEL_166:
    v118 = 1 << *(_DWORD *)(v3 + 48);
    if (v118 == 2)
    {
      v119 = *(_QWORD **)a1[1];
      v120 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      v121 = (uint64_t *)v119[812];
      v129 = v119[813];
      if ((unint64_t)v121 >= v129)
      {
        v123 = (uint64_t *)v119[811];
        v131 = v121 - v123;
        if ((unint64_t)(v131 + 1) >> 61)
          goto LABEL_328;
        v132 = v129 - (_QWORD)v123;
        v133 = (uint64_t)(v129 - (_QWORD)v123) >> 2;
        if (v133 <= v131 + 1)
          v133 = v131 + 1;
        if (v132 >= 0x7FFFFFFFFFFFFFF8)
          v134 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v134 = v133;
        if (v134)
        {
          v135 = (char *)sub_40FC((uint64_t)(v119 + 813), v134);
          v121 = (uint64_t *)v119[812];
          v123 = (uint64_t *)v119[811];
        }
        else
        {
          v135 = 0;
        }
        v136 = (uint64_t *)&v135[8 * v131];
        v137 = &v135[8 * v134];
        *v136 = v120;
        v130 = v136 + 1;
        while (v121 != v123)
        {
          v139 = *--v121;
          *--v136 = v139;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v118 != 1)
        goto LABEL_198;
      v119 = *(_QWORD **)a1[1];
      v120 = *(_DWORD *)(a1[2] + 40) & 0x3FFFFLL;
      v121 = (uint64_t *)v119[812];
      v122 = v119[813];
      if ((unint64_t)v121 >= v122)
      {
        v123 = (uint64_t *)v119[811];
        v124 = v121 - v123;
        if ((unint64_t)(v124 + 1) >> 61)
          goto LABEL_328;
        v125 = v122 - (_QWORD)v123;
        v126 = (uint64_t)(v122 - (_QWORD)v123) >> 2;
        if (v126 <= v124 + 1)
          v126 = v124 + 1;
        if (v125 >= 0x7FFFFFFFFFFFFFF8)
          v127 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v127 = v126;
        if (v127)
        {
          v128 = (char *)sub_40FC((uint64_t)(v119 + 813), v127);
          v121 = (uint64_t *)v119[812];
          v123 = (uint64_t *)v119[811];
        }
        else
        {
          v128 = 0;
        }
        v136 = (uint64_t *)&v128[8 * v124];
        v137 = &v128[8 * v127];
        *v136 = v120;
        v130 = v136 + 1;
        while (v121 != v123)
        {
          v138 = *--v121;
          *--v136 = v138;
        }
LABEL_195:
        v119[811] = v136;
        v119[812] = v130;
        v119[813] = v137;
        if (v123)
          operator delete(v123);
        goto LABEL_197;
      }
    }
    *v121 = v120;
    v130 = v121 + 1;
LABEL_197:
    v119[812] = v130;
LABEL_198:
    v140 = 1 << *(_DWORD *)(v3 + 48);
    if (v140 == 2)
    {
      v141 = *(_QWORD **)a1[1];
      v142 = *(_WORD *)(a1[2] + 24) & 0x3FFF;
      v143 = (char *)v141[815];
      v151 = v141[816];
      if ((unint64_t)v143 >= v151)
      {
        v145 = (char *)v141[814];
        v153 = (v143 - v145) >> 3;
        if ((unint64_t)(v153 + 1) >> 61)
          goto LABEL_328;
        v154 = v151 - (_QWORD)v145;
        v155 = (uint64_t)(v151 - (_QWORD)v145) >> 2;
        if (v155 <= v153 + 1)
          v155 = v153 + 1;
        if (v154 >= 0x7FFFFFFFFFFFFFF8)
          v156 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v156 = v155;
        if (v156)
        {
          v157 = (char *)sub_40FC((uint64_t)(v141 + 816), v156);
          v143 = (char *)v141[815];
          v145 = (char *)v141[814];
        }
        else
        {
          v157 = 0;
        }
        v158 = &v157[8 * v153];
        v159 = &v157[8 * v156];
        *(_QWORD *)v158 = v142;
        v152 = v158 + 8;
        while (v143 != v145)
        {
          v161 = *((_QWORD *)v143 - 1);
          v143 -= 8;
          *((_QWORD *)v158 - 1) = v161;
          v158 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v140 != 1)
        goto LABEL_230;
      v141 = *(_QWORD **)a1[1];
      v142 = *(_WORD *)(a1[2] + 24) & 0x3FFF;
      v143 = (char *)v141[815];
      v144 = v141[816];
      if ((unint64_t)v143 >= v144)
      {
        v145 = (char *)v141[814];
        v146 = (v143 - v145) >> 3;
        if ((unint64_t)(v146 + 1) >> 61)
          goto LABEL_328;
        v147 = v144 - (_QWORD)v145;
        v148 = (uint64_t)(v144 - (_QWORD)v145) >> 2;
        if (v148 <= v146 + 1)
          v148 = v146 + 1;
        if (v147 >= 0x7FFFFFFFFFFFFFF8)
          v149 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v149 = v148;
        if (v149)
        {
          v150 = (char *)sub_40FC((uint64_t)(v141 + 816), v149);
          v143 = (char *)v141[815];
          v145 = (char *)v141[814];
        }
        else
        {
          v150 = 0;
        }
        v158 = &v150[8 * v146];
        v159 = &v150[8 * v149];
        *(_QWORD *)v158 = v142;
        v152 = v158 + 8;
        while (v143 != v145)
        {
          v160 = *((_QWORD *)v143 - 1);
          v143 -= 8;
          *((_QWORD *)v158 - 1) = v160;
          v158 -= 8;
        }
LABEL_227:
        v141[814] = v158;
        v141[815] = v152;
        v141[816] = v159;
        if (v145)
          operator delete(v145);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v143 = v142;
    v152 = v143 + 8;
LABEL_229:
    v141[815] = v152;
LABEL_230:
    v162 = 1 << *(_DWORD *)(v3 + 48);
    if (v162 == 2)
    {
      v163 = *(_QWORD **)a1[1];
      v164 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      v165 = (char *)v163[818];
      v173 = v163[819];
      if ((unint64_t)v165 >= v173)
      {
        v167 = (char *)v163[817];
        v175 = (v165 - v167) >> 3;
        if ((unint64_t)(v175 + 1) >> 61)
          goto LABEL_328;
        v176 = v173 - (_QWORD)v167;
        v177 = (uint64_t)(v173 - (_QWORD)v167) >> 2;
        if (v177 <= v175 + 1)
          v177 = v175 + 1;
        if (v176 >= 0x7FFFFFFFFFFFFFF8)
          v178 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v178 = v177;
        if (v178)
        {
          v179 = (char *)sub_40FC((uint64_t)(v163 + 819), v178);
          v165 = (char *)v163[818];
          v167 = (char *)v163[817];
        }
        else
        {
          v179 = 0;
        }
        v180 = &v179[8 * v175];
        v181 = &v179[8 * v178];
        *(_QWORD *)v180 = v164;
        v174 = v180 + 8;
        while (v165 != v167)
        {
          v183 = *((_QWORD *)v165 - 1);
          v165 -= 8;
          *((_QWORD *)v180 - 1) = v183;
          v180 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v162 != 1)
        goto LABEL_262;
      v163 = *(_QWORD **)a1[1];
      v164 = *(_WORD *)(a1[2] + 20) & 0x7FFF;
      v165 = (char *)v163[818];
      v166 = v163[819];
      if ((unint64_t)v165 >= v166)
      {
        v167 = (char *)v163[817];
        v168 = (v165 - v167) >> 3;
        if ((unint64_t)(v168 + 1) >> 61)
          goto LABEL_328;
        v169 = v166 - (_QWORD)v167;
        v170 = (uint64_t)(v166 - (_QWORD)v167) >> 2;
        if (v170 <= v168 + 1)
          v170 = v168 + 1;
        if (v169 >= 0x7FFFFFFFFFFFFFF8)
          v171 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v171 = v170;
        if (v171)
        {
          v172 = (char *)sub_40FC((uint64_t)(v163 + 819), v171);
          v165 = (char *)v163[818];
          v167 = (char *)v163[817];
        }
        else
        {
          v172 = 0;
        }
        v180 = &v172[8 * v168];
        v181 = &v172[8 * v171];
        *(_QWORD *)v180 = v164;
        v174 = v180 + 8;
        while (v165 != v167)
        {
          v182 = *((_QWORD *)v165 - 1);
          v165 -= 8;
          *((_QWORD *)v180 - 1) = v182;
          v180 -= 8;
        }
LABEL_259:
        v163[817] = v180;
        v163[818] = v174;
        v163[819] = v181;
        if (v167)
          operator delete(v167);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v165 = v164;
    v174 = v165 + 8;
LABEL_261:
    v163[818] = v174;
LABEL_262:
    v184 = 1 << *(_DWORD *)(v3 + 48);
    if (v184 == 2)
    {
      v185 = *(_QWORD **)a1[1];
      v186 = *(_WORD *)(a1[2] + 26) & 0x3FFF;
      v187 = (char *)v185[821];
      v195 = v185[822];
      if ((unint64_t)v187 >= v195)
      {
        v189 = (char *)v185[820];
        v197 = (v187 - v189) >> 3;
        if ((unint64_t)(v197 + 1) >> 61)
          goto LABEL_328;
        v198 = v195 - (_QWORD)v189;
        v199 = (uint64_t)(v195 - (_QWORD)v189) >> 2;
        if (v199 <= v197 + 1)
          v199 = v197 + 1;
        if (v198 >= 0x7FFFFFFFFFFFFFF8)
          v200 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v200 = v199;
        if (v200)
        {
          v201 = (char *)sub_40FC((uint64_t)(v185 + 822), v200);
          v187 = (char *)v185[821];
          v189 = (char *)v185[820];
        }
        else
        {
          v201 = 0;
        }
        v202 = &v201[8 * v197];
        v203 = &v201[8 * v200];
        *(_QWORD *)v202 = v186;
        v196 = v202 + 8;
        while (v187 != v189)
        {
          v205 = *((_QWORD *)v187 - 1);
          v187 -= 8;
          *((_QWORD *)v202 - 1) = v205;
          v202 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v184 != 1)
        goto LABEL_294;
      v185 = *(_QWORD **)a1[1];
      v186 = *(_WORD *)(a1[2] + 26) & 0x3FFF;
      v187 = (char *)v185[821];
      v188 = v185[822];
      if ((unint64_t)v187 >= v188)
      {
        v189 = (char *)v185[820];
        v190 = (v187 - v189) >> 3;
        if ((unint64_t)(v190 + 1) >> 61)
          goto LABEL_328;
        v191 = v188 - (_QWORD)v189;
        v192 = (uint64_t)(v188 - (_QWORD)v189) >> 2;
        if (v192 <= v190 + 1)
          v192 = v190 + 1;
        if (v191 >= 0x7FFFFFFFFFFFFFF8)
          v193 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v193 = v192;
        if (v193)
        {
          v194 = (char *)sub_40FC((uint64_t)(v185 + 822), v193);
          v187 = (char *)v185[821];
          v189 = (char *)v185[820];
        }
        else
        {
          v194 = 0;
        }
        v202 = &v194[8 * v190];
        v203 = &v194[8 * v193];
        *(_QWORD *)v202 = v186;
        v196 = v202 + 8;
        while (v187 != v189)
        {
          v204 = *((_QWORD *)v187 - 1);
          v187 -= 8;
          *((_QWORD *)v202 - 1) = v204;
          v202 -= 8;
        }
LABEL_291:
        v185[820] = v202;
        v185[821] = v196;
        v185[822] = v203;
        if (v189)
          operator delete(v189);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v187 = v186;
    v196 = v187 + 8;
LABEL_293:
    v185[821] = v196;
LABEL_294:
    v206 = 1 << *(_DWORD *)(v3 + 48);
    if (v206 == 2)
    {
      v218 = a1[2];
      v208 = *(_QWORD **)a1[1];
      v209 = *(_WORD *)(v218 + 22) & 0x7FFF;
      v210 = (char *)v208[824];
      v219 = v208[825];
      if ((unint64_t)v210 >= v219)
      {
        v212 = (char *)v208[823];
        v221 = (v210 - v212) >> 3;
        if (!((unint64_t)(v221 + 1) >> 61))
        {
          v222 = v219 - (_QWORD)v212;
          v223 = (uint64_t)(v219 - (_QWORD)v212) >> 2;
          if (v223 <= v221 + 1)
            v223 = v221 + 1;
          if (v222 >= 0x7FFFFFFFFFFFFFF8)
            v224 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v224 = v223;
          if (v224)
          {
            v225 = (char *)sub_40FC((uint64_t)(v208 + 825), v224);
            v210 = (char *)v208[824];
            v212 = (char *)v208[823];
          }
          else
          {
            v225 = 0;
          }
          v226 = &v225[8 * v221];
          v227 = &v225[8 * v224];
          *(_QWORD *)v226 = v209;
          v220 = v226 + 8;
          while (v210 != v212)
          {
            v229 = *((_QWORD *)v210 - 1);
            v210 -= 8;
            *((_QWORD *)v226 - 1) = v229;
            v226 -= 8;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_4074();
      }
    }
    else
    {
      if (v206 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      v207 = a1[2];
      v208 = *(_QWORD **)a1[1];
      v209 = *(_WORD *)(v207 + 22) & 0x7FFF;
      v210 = (char *)v208[824];
      v211 = v208[825];
      if ((unint64_t)v210 >= v211)
      {
        v212 = (char *)v208[823];
        v213 = (v210 - v212) >> 3;
        if (!((unint64_t)(v213 + 1) >> 61))
        {
          v214 = v211 - (_QWORD)v212;
          v215 = (uint64_t)(v211 - (_QWORD)v212) >> 2;
          if (v215 <= v213 + 1)
            v215 = v213 + 1;
          if (v214 >= 0x7FFFFFFFFFFFFFF8)
            v216 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v216 = v215;
          if (v216)
          {
            v217 = (char *)sub_40FC((uint64_t)(v208 + 825), v216);
            v210 = (char *)v208[824];
            v212 = (char *)v208[823];
          }
          else
          {
            v217 = 0;
          }
          v226 = &v217[8 * v213];
          v227 = &v217[8 * v216];
          *(_QWORD *)v226 = v209;
          v220 = v226 + 8;
          while (v210 != v212)
          {
            v228 = *((_QWORD *)v210 - 1);
            v210 -= 8;
            *((_QWORD *)v226 - 1) = v228;
            v226 -= 8;
          }
LABEL_323:
          v208[823] = v226;
          v208[824] = v220;
          v208[825] = v227;
          if (v212)
            operator delete(v212);
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *(_QWORD *)v210 = v209;
    v220 = v210 + 8;
LABEL_325:
    v208[824] = v220;
    goto LABEL_326;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[797] - 8) += *(_WORD *)(v17 + 30) & 0x1FFF;
    *(_QWORD *)(v18[800] - 8) += *(_DWORD *)(v17 + 36) & 0x3FFFF;
    *(_QWORD *)(v18[803] - 8) += *(_WORD *)(v17 + 28) & 0x1FFF;
    *(_QWORD *)(v18[806] - 8) += ((unint64_t)*(unsigned int *)(v17 + 32) >> 13) & 0x3FFFF;
    *(_QWORD *)(v18[809] - 8) += *(_DWORD *)(v17 + 32) & 0x1FFF;
    *(_QWORD *)(v18[812] - 8) += *(_DWORD *)(v17 + 40) & 0x3FFFF;
    *(_QWORD *)(v18[815] - 8) += *(_WORD *)(v17 + 24) & 0x3FFF;
    *(_QWORD *)(v18[818] - 8) += *(_WORD *)(v17 + 20) & 0x7FFF;
    *(_QWORD *)(v18[821] - 8) += *(_WORD *)(v17 + 26) & 0x3FFF;
    *(_QWORD *)(v18[824] - 8) += *(_WORD *)(v17 + 22) & 0x7FFF;
  }
}

void sub_DAC98(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  _QWORD *v149;
  uint64_t v150;
  char *v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  _QWORD *v171;
  uint64_t v172;
  char *v173;
  unint64_t v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char *v180;
  unint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  char *v196;
  unint64_t v197;
  char *v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  uint64_t v204;
  unint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  char *v221;
  unint64_t v222;
  char *v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  char *v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v20 = a1[1];
      v7 = *(_QWORD **)v20;
      v8 = *(unsigned __int16 *)(a1[2] + 34);
      v9 = *(char **)(*(_QWORD *)v20 + 2656);
      v21 = *(_QWORD *)(*(_QWORD *)v20 + 2664);
      if ((unint64_t)v9 >= v21)
      {
        v11 = (char *)v7[331];
        v23 = (v9 - v11) >> 3;
        if ((unint64_t)(v23 + 1) >> 61)
          goto LABEL_328;
        v24 = v21 - (_QWORD)v11;
        v25 = (uint64_t)(v21 - (_QWORD)v11) >> 2;
        if (v25 <= v23 + 1)
          v25 = v23 + 1;
        if (v24 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v27 = (char *)sub_40FC((uint64_t)(v7 + 333), v26);
          v9 = (char *)v7[332];
          v11 = (char *)v7[331];
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[8 * v23];
        v29 = &v27[8 * v26];
        *(_QWORD *)v28 = v8;
        v22 = v28 + 8;
        while (v9 != v11)
        {
          v31 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *((_QWORD *)v28 - 1) = v31;
          v28 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = a1[1];
      v7 = *(_QWORD **)v6;
      v8 = *(unsigned __int16 *)(a1[2] + 34);
      v9 = *(char **)(*(_QWORD *)v6 + 2656);
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 2664);
      if ((unint64_t)v9 >= v10)
      {
        v11 = (char *)v7[331];
        v12 = (v9 - v11) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          goto LABEL_328;
        v13 = v10 - (_QWORD)v11;
        v14 = (uint64_t)(v10 - (_QWORD)v11) >> 2;
        if (v14 <= v12 + 1)
          v14 = v12 + 1;
        if (v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)sub_40FC((uint64_t)(v7 + 333), v15);
          v9 = (char *)v7[332];
          v11 = (char *)v7[331];
        }
        else
        {
          v16 = 0;
        }
        v28 = &v16[8 * v12];
        v29 = &v16[8 * v15];
        *(_QWORD *)v28 = v8;
        v22 = v28 + 8;
        while (v9 != v11)
        {
          v30 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *((_QWORD *)v28 - 1) = v30;
          v28 -= 8;
        }
LABEL_35:
        v7[331] = v28;
        v7[332] = v22;
        v7[333] = v29;
        if (v11)
          operator delete(v11);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v9 = v8;
    v22 = v9 + 8;
LABEL_37:
    v7[332] = v22;
LABEL_38:
    v32 = 1 << *(_DWORD *)(v3 + 48);
    if (v32 == 2)
    {
      v44 = a1[1];
      v34 = *(_QWORD **)v44;
      v35 = *(unsigned __int16 *)(a1[2] + 30);
      v36 = *(char **)(*(_QWORD *)v44 + 2680);
      v45 = *(_QWORD *)(*(_QWORD *)v44 + 2688);
      if ((unint64_t)v36 >= v45)
      {
        v38 = (char *)v34[334];
        v47 = (v36 - v38) >> 3;
        if ((unint64_t)(v47 + 1) >> 61)
          goto LABEL_328;
        v48 = v45 - (_QWORD)v38;
        v49 = (uint64_t)(v45 - (_QWORD)v38) >> 2;
        if (v49 <= v47 + 1)
          v49 = v47 + 1;
        if (v48 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v49;
        if (v50)
        {
          v51 = (char *)sub_40FC((uint64_t)(v34 + 336), v50);
          v36 = (char *)v34[335];
          v38 = (char *)v34[334];
        }
        else
        {
          v51 = 0;
        }
        v52 = &v51[8 * v47];
        v53 = &v51[8 * v50];
        *(_QWORD *)v52 = v35;
        v46 = v52 + 8;
        while (v36 != v38)
        {
          v55 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v52 - 1) = v55;
          v52 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v32 != 1)
        goto LABEL_70;
      v33 = a1[1];
      v34 = *(_QWORD **)v33;
      v35 = *(unsigned __int16 *)(a1[2] + 30);
      v36 = *(char **)(*(_QWORD *)v33 + 2680);
      v37 = *(_QWORD *)(*(_QWORD *)v33 + 2688);
      if ((unint64_t)v36 >= v37)
      {
        v38 = (char *)v34[334];
        v39 = (v36 - v38) >> 3;
        if ((unint64_t)(v39 + 1) >> 61)
          goto LABEL_328;
        v40 = v37 - (_QWORD)v38;
        v41 = (uint64_t)(v37 - (_QWORD)v38) >> 2;
        if (v41 <= v39 + 1)
          v41 = v39 + 1;
        if (v40 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          v43 = (char *)sub_40FC((uint64_t)(v34 + 336), v42);
          v36 = (char *)v34[335];
          v38 = (char *)v34[334];
        }
        else
        {
          v43 = 0;
        }
        v52 = &v43[8 * v39];
        v53 = &v43[8 * v42];
        *(_QWORD *)v52 = v35;
        v46 = v52 + 8;
        while (v36 != v38)
        {
          v54 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v52 - 1) = v54;
          v52 -= 8;
        }
LABEL_67:
        v34[334] = v52;
        v34[335] = v46;
        v34[336] = v53;
        if (v38)
          operator delete(v38);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v36 = v35;
    v46 = v36 + 8;
LABEL_69:
    v34[335] = v46;
LABEL_70:
    v56 = 1 << *(_DWORD *)(v3 + 48);
    if (v56 == 2)
    {
      v57 = *(_QWORD **)a1[1];
      v58 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      v59 = (uint64_t *)v57[338];
      v67 = v57[339];
      if ((unint64_t)v59 >= v67)
      {
        v61 = (uint64_t *)v57[337];
        v69 = v59 - v61;
        if ((unint64_t)(v69 + 1) >> 61)
          goto LABEL_328;
        v70 = v67 - (_QWORD)v61;
        v71 = (uint64_t)(v67 - (_QWORD)v61) >> 2;
        if (v71 <= v69 + 1)
          v71 = v69 + 1;
        if (v70 >= 0x7FFFFFFFFFFFFFF8)
          v72 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v72 = v71;
        if (v72)
        {
          v73 = (char *)sub_40FC((uint64_t)(v57 + 339), v72);
          v59 = (uint64_t *)v57[338];
          v61 = (uint64_t *)v57[337];
        }
        else
        {
          v73 = 0;
        }
        v74 = (uint64_t *)&v73[8 * v69];
        v75 = &v73[8 * v72];
        *v74 = v58;
        v68 = v74 + 1;
        while (v59 != v61)
        {
          v77 = *--v59;
          *--v74 = v77;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v56 != 1)
        goto LABEL_102;
      v57 = *(_QWORD **)a1[1];
      v58 = *(_DWORD *)(a1[2] + 40) & 0x1FFFFLL;
      v59 = (uint64_t *)v57[338];
      v60 = v57[339];
      if ((unint64_t)v59 >= v60)
      {
        v61 = (uint64_t *)v57[337];
        v62 = v59 - v61;
        if ((unint64_t)(v62 + 1) >> 61)
          goto LABEL_328;
        v63 = v60 - (_QWORD)v61;
        v64 = (uint64_t)(v60 - (_QWORD)v61) >> 2;
        if (v64 <= v62 + 1)
          v64 = v62 + 1;
        if (v63 >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        if (v65)
        {
          v66 = (char *)sub_40FC((uint64_t)(v57 + 339), v65);
          v59 = (uint64_t *)v57[338];
          v61 = (uint64_t *)v57[337];
        }
        else
        {
          v66 = 0;
        }
        v74 = (uint64_t *)&v66[8 * v62];
        v75 = &v66[8 * v65];
        *v74 = v58;
        v68 = v74 + 1;
        while (v59 != v61)
        {
          v76 = *--v59;
          *--v74 = v76;
        }
LABEL_99:
        v57[337] = v74;
        v57[338] = v68;
        v57[339] = v75;
        if (v61)
          operator delete(v61);
        goto LABEL_101;
      }
    }
    *v59 = v58;
    v68 = v59 + 1;
LABEL_101:
    v57[338] = v68;
LABEL_102:
    v78 = 1 << *(_DWORD *)(v3 + 48);
    if (v78 == 2)
    {
      v90 = a1[1];
      v80 = *(_QWORD **)v90;
      v81 = *(unsigned __int16 *)(a1[2] + 36);
      v82 = *(char **)(*(_QWORD *)v90 + 2728);
      v91 = *(_QWORD *)(*(_QWORD *)v90 + 2736);
      if ((unint64_t)v82 >= v91)
      {
        v84 = (char *)v80[340];
        v93 = (v82 - v84) >> 3;
        if ((unint64_t)(v93 + 1) >> 61)
          goto LABEL_328;
        v94 = v91 - (_QWORD)v84;
        v95 = (uint64_t)(v91 - (_QWORD)v84) >> 2;
        if (v95 <= v93 + 1)
          v95 = v93 + 1;
        if (v94 >= 0x7FFFFFFFFFFFFFF8)
          v96 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v96 = v95;
        if (v96)
        {
          v97 = (char *)sub_40FC((uint64_t)(v80 + 342), v96);
          v82 = (char *)v80[341];
          v84 = (char *)v80[340];
        }
        else
        {
          v97 = 0;
        }
        v98 = &v97[8 * v93];
        v99 = &v97[8 * v96];
        *(_QWORD *)v98 = v81;
        v92 = v98 + 8;
        while (v82 != v84)
        {
          v101 = *((_QWORD *)v82 - 1);
          v82 -= 8;
          *((_QWORD *)v98 - 1) = v101;
          v98 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v78 != 1)
        goto LABEL_134;
      v79 = a1[1];
      v80 = *(_QWORD **)v79;
      v81 = *(unsigned __int16 *)(a1[2] + 36);
      v82 = *(char **)(*(_QWORD *)v79 + 2728);
      v83 = *(_QWORD *)(*(_QWORD *)v79 + 2736);
      if ((unint64_t)v82 >= v83)
      {
        v84 = (char *)v80[340];
        v85 = (v82 - v84) >> 3;
        if ((unint64_t)(v85 + 1) >> 61)
          goto LABEL_328;
        v86 = v83 - (_QWORD)v84;
        v87 = (uint64_t)(v83 - (_QWORD)v84) >> 2;
        if (v87 <= v85 + 1)
          v87 = v85 + 1;
        if (v86 >= 0x7FFFFFFFFFFFFFF8)
          v88 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v88 = v87;
        if (v88)
        {
          v89 = (char *)sub_40FC((uint64_t)(v80 + 342), v88);
          v82 = (char *)v80[341];
          v84 = (char *)v80[340];
        }
        else
        {
          v89 = 0;
        }
        v98 = &v89[8 * v85];
        v99 = &v89[8 * v88];
        *(_QWORD *)v98 = v81;
        v92 = v98 + 8;
        while (v82 != v84)
        {
          v100 = *((_QWORD *)v82 - 1);
          v82 -= 8;
          *((_QWORD *)v98 - 1) = v100;
          v98 -= 8;
        }
LABEL_131:
        v80[340] = v98;
        v80[341] = v92;
        v80[342] = v99;
        if (v84)
          operator delete(v84);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v82 = v81;
    v92 = v82 + 8;
LABEL_133:
    v80[341] = v92;
LABEL_134:
    v102 = 1 << *(_DWORD *)(v3 + 48);
    if (v102 == 2)
    {
      v114 = a1[1];
      v104 = *(_QWORD **)v114;
      v105 = *(unsigned __int16 *)(a1[2] + 32);
      v106 = *(char **)(*(_QWORD *)v114 + 2752);
      v115 = *(_QWORD *)(*(_QWORD *)v114 + 2760);
      if ((unint64_t)v106 >= v115)
      {
        v108 = (char *)v104[343];
        v117 = (v106 - v108) >> 3;
        if ((unint64_t)(v117 + 1) >> 61)
          goto LABEL_328;
        v118 = v115 - (_QWORD)v108;
        v119 = (uint64_t)(v115 - (_QWORD)v108) >> 2;
        if (v119 <= v117 + 1)
          v119 = v117 + 1;
        if (v118 >= 0x7FFFFFFFFFFFFFF8)
          v120 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v120 = v119;
        if (v120)
        {
          v121 = (char *)sub_40FC((uint64_t)(v104 + 345), v120);
          v106 = (char *)v104[344];
          v108 = (char *)v104[343];
        }
        else
        {
          v121 = 0;
        }
        v122 = &v121[8 * v117];
        v123 = &v121[8 * v120];
        *(_QWORD *)v122 = v105;
        v116 = v122 + 8;
        while (v106 != v108)
        {
          v125 = *((_QWORD *)v106 - 1);
          v106 -= 8;
          *((_QWORD *)v122 - 1) = v125;
          v122 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v102 != 1)
        goto LABEL_166;
      v103 = a1[1];
      v104 = *(_QWORD **)v103;
      v105 = *(unsigned __int16 *)(a1[2] + 32);
      v106 = *(char **)(*(_QWORD *)v103 + 2752);
      v107 = *(_QWORD *)(*(_QWORD *)v103 + 2760);
      if ((unint64_t)v106 >= v107)
      {
        v108 = (char *)v104[343];
        v109 = (v106 - v108) >> 3;
        if ((unint64_t)(v109 + 1) >> 61)
          goto LABEL_328;
        v110 = v107 - (_QWORD)v108;
        v111 = (uint64_t)(v107 - (_QWORD)v108) >> 2;
        if (v111 <= v109 + 1)
          v111 = v109 + 1;
        if (v110 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v111;
        if (v112)
        {
          v113 = (char *)sub_40FC((uint64_t)(v104 + 345), v112);
          v106 = (char *)v104[344];
          v108 = (char *)v104[343];
        }
        else
        {
          v113 = 0;
        }
        v122 = &v113[8 * v109];
        v123 = &v113[8 * v112];
        *(_QWORD *)v122 = v105;
        v116 = v122 + 8;
        while (v106 != v108)
        {
          v124 = *((_QWORD *)v106 - 1);
          v106 -= 8;
          *((_QWORD *)v122 - 1) = v124;
          v122 -= 8;
        }
LABEL_163:
        v104[343] = v122;
        v104[344] = v116;
        v104[345] = v123;
        if (v108)
          operator delete(v108);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v106 = v105;
    v116 = v106 + 8;
LABEL_165:
    v104[344] = v116;
LABEL_166:
    v126 = 1 << *(_DWORD *)(v3 + 48);
    if (v126 == 2)
    {
      v127 = *(_QWORD **)a1[1];
      v128 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFLL;
      v129 = (uint64_t *)v127[347];
      v137 = v127[348];
      if ((unint64_t)v129 >= v137)
      {
        v131 = (uint64_t *)v127[346];
        v139 = v129 - v131;
        if ((unint64_t)(v139 + 1) >> 61)
          goto LABEL_328;
        v140 = v137 - (_QWORD)v131;
        v141 = (uint64_t)(v137 - (_QWORD)v131) >> 2;
        if (v141 <= v139 + 1)
          v141 = v139 + 1;
        if (v140 >= 0x7FFFFFFFFFFFFFF8)
          v142 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v142 = v141;
        if (v142)
        {
          v143 = (char *)sub_40FC((uint64_t)(v127 + 348), v142);
          v129 = (uint64_t *)v127[347];
          v131 = (uint64_t *)v127[346];
        }
        else
        {
          v143 = 0;
        }
        v144 = (uint64_t *)&v143[8 * v139];
        v145 = &v143[8 * v142];
        *v144 = v128;
        v138 = v144 + 1;
        while (v129 != v131)
        {
          v147 = *--v129;
          *--v144 = v147;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v126 != 1)
        goto LABEL_198;
      v127 = *(_QWORD **)a1[1];
      v128 = *(_DWORD *)(a1[2] + 44) & 0x1FFFFLL;
      v129 = (uint64_t *)v127[347];
      v130 = v127[348];
      if ((unint64_t)v129 >= v130)
      {
        v131 = (uint64_t *)v127[346];
        v132 = v129 - v131;
        if ((unint64_t)(v132 + 1) >> 61)
          goto LABEL_328;
        v133 = v130 - (_QWORD)v131;
        v134 = (uint64_t)(v130 - (_QWORD)v131) >> 2;
        if (v134 <= v132 + 1)
          v134 = v132 + 1;
        if (v133 >= 0x7FFFFFFFFFFFFFF8)
          v135 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v135 = v134;
        if (v135)
        {
          v136 = (char *)sub_40FC((uint64_t)(v127 + 348), v135);
          v129 = (uint64_t *)v127[347];
          v131 = (uint64_t *)v127[346];
        }
        else
        {
          v136 = 0;
        }
        v144 = (uint64_t *)&v136[8 * v132];
        v145 = &v136[8 * v135];
        *v144 = v128;
        v138 = v144 + 1;
        while (v129 != v131)
        {
          v146 = *--v129;
          *--v144 = v146;
        }
LABEL_195:
        v127[346] = v144;
        v127[347] = v138;
        v127[348] = v145;
        if (v131)
          operator delete(v131);
        goto LABEL_197;
      }
    }
    *v129 = v128;
    v138 = v129 + 1;
LABEL_197:
    v127[347] = v138;
LABEL_198:
    v148 = 1 << *(_DWORD *)(v3 + 48);
    if (v148 == 2)
    {
      v149 = *(_QWORD **)a1[1];
      v150 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v151 = (char *)v149[350];
      v159 = v149[351];
      if ((unint64_t)v151 >= v159)
      {
        v153 = (char *)v149[349];
        v161 = (v151 - v153) >> 3;
        if ((unint64_t)(v161 + 1) >> 61)
          goto LABEL_328;
        v162 = v159 - (_QWORD)v153;
        v163 = (uint64_t)(v159 - (_QWORD)v153) >> 2;
        if (v163 <= v161 + 1)
          v163 = v161 + 1;
        if (v162 >= 0x7FFFFFFFFFFFFFF8)
          v164 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v164 = v163;
        if (v164)
        {
          v165 = (char *)sub_40FC((uint64_t)(v149 + 351), v164);
          v151 = (char *)v149[350];
          v153 = (char *)v149[349];
        }
        else
        {
          v165 = 0;
        }
        v166 = &v165[8 * v161];
        v167 = &v165[8 * v164];
        *(_QWORD *)v166 = v150;
        v160 = v166 + 8;
        while (v151 != v153)
        {
          v169 = *((_QWORD *)v151 - 1);
          v151 -= 8;
          *((_QWORD *)v166 - 1) = v169;
          v166 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v148 != 1)
        goto LABEL_230;
      v149 = *(_QWORD **)a1[1];
      v150 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v151 = (char *)v149[350];
      v152 = v149[351];
      if ((unint64_t)v151 >= v152)
      {
        v153 = (char *)v149[349];
        v154 = (v151 - v153) >> 3;
        if ((unint64_t)(v154 + 1) >> 61)
          goto LABEL_328;
        v155 = v152 - (_QWORD)v153;
        v156 = (uint64_t)(v152 - (_QWORD)v153) >> 2;
        if (v156 <= v154 + 1)
          v156 = v154 + 1;
        if (v155 >= 0x7FFFFFFFFFFFFFF8)
          v157 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v157 = v156;
        if (v157)
        {
          v158 = (char *)sub_40FC((uint64_t)(v149 + 351), v157);
          v151 = (char *)v149[350];
          v153 = (char *)v149[349];
        }
        else
        {
          v158 = 0;
        }
        v166 = &v158[8 * v154];
        v167 = &v158[8 * v157];
        *(_QWORD *)v166 = v150;
        v160 = v166 + 8;
        while (v151 != v153)
        {
          v168 = *((_QWORD *)v151 - 1);
          v151 -= 8;
          *((_QWORD *)v166 - 1) = v168;
          v166 -= 8;
        }
LABEL_227:
        v149[349] = v166;
        v149[350] = v160;
        v149[351] = v167;
        if (v153)
          operator delete(v153);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v151 = v150;
    v160 = v151 + 8;
LABEL_229:
    v149[350] = v160;
LABEL_230:
    v170 = 1 << *(_DWORD *)(v3 + 48);
    if (v170 == 2)
    {
      v171 = *(_QWORD **)a1[1];
      v172 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v173 = (char *)v171[353];
      v181 = v171[354];
      if ((unint64_t)v173 >= v181)
      {
        v175 = (char *)v171[352];
        v183 = (v173 - v175) >> 3;
        if ((unint64_t)(v183 + 1) >> 61)
          goto LABEL_328;
        v184 = v181 - (_QWORD)v175;
        v185 = (uint64_t)(v181 - (_QWORD)v175) >> 2;
        if (v185 <= v183 + 1)
          v185 = v183 + 1;
        if (v184 >= 0x7FFFFFFFFFFFFFF8)
          v186 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v186 = v185;
        if (v186)
        {
          v187 = (char *)sub_40FC((uint64_t)(v171 + 354), v186);
          v173 = (char *)v171[353];
          v175 = (char *)v171[352];
        }
        else
        {
          v187 = 0;
        }
        v188 = &v187[8 * v183];
        v189 = &v187[8 * v186];
        *(_QWORD *)v188 = v172;
        v182 = v188 + 8;
        while (v173 != v175)
        {
          v191 = *((_QWORD *)v173 - 1);
          v173 -= 8;
          *((_QWORD *)v188 - 1) = v191;
          v188 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v170 != 1)
        goto LABEL_262;
      v171 = *(_QWORD **)a1[1];
      v172 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v173 = (char *)v171[353];
      v174 = v171[354];
      if ((unint64_t)v173 >= v174)
      {
        v175 = (char *)v171[352];
        v176 = (v173 - v175) >> 3;
        if ((unint64_t)(v176 + 1) >> 61)
          goto LABEL_328;
        v177 = v174 - (_QWORD)v175;
        v178 = (uint64_t)(v174 - (_QWORD)v175) >> 2;
        if (v178 <= v176 + 1)
          v178 = v176 + 1;
        if (v177 >= 0x7FFFFFFFFFFFFFF8)
          v179 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v179 = v178;
        if (v179)
        {
          v180 = (char *)sub_40FC((uint64_t)(v171 + 354), v179);
          v173 = (char *)v171[353];
          v175 = (char *)v171[352];
        }
        else
        {
          v180 = 0;
        }
        v188 = &v180[8 * v176];
        v189 = &v180[8 * v179];
        *(_QWORD *)v188 = v172;
        v182 = v188 + 8;
        while (v173 != v175)
        {
          v190 = *((_QWORD *)v173 - 1);
          v173 -= 8;
          *((_QWORD *)v188 - 1) = v190;
          v188 -= 8;
        }
LABEL_259:
        v171[352] = v188;
        v171[353] = v182;
        v171[354] = v189;
        if (v175)
          operator delete(v175);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v173 = v172;
    v182 = v173 + 8;
LABEL_261:
    v171[353] = v182;
LABEL_262:
    v192 = 1 << *(_DWORD *)(v3 + 48);
    if (v192 == 2)
    {
      v204 = a1[1];
      v194 = *(_QWORD **)v204;
      v195 = *(unsigned __int16 *)(a1[2] + 24);
      v196 = *(char **)(*(_QWORD *)v204 + 2848);
      v205 = *(_QWORD *)(*(_QWORD *)v204 + 2856);
      if ((unint64_t)v196 >= v205)
      {
        v198 = (char *)v194[355];
        v207 = (v196 - v198) >> 3;
        if ((unint64_t)(v207 + 1) >> 61)
          goto LABEL_328;
        v208 = v205 - (_QWORD)v198;
        v209 = (uint64_t)(v205 - (_QWORD)v198) >> 2;
        if (v209 <= v207 + 1)
          v209 = v207 + 1;
        if (v208 >= 0x7FFFFFFFFFFFFFF8)
          v210 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v210 = v209;
        if (v210)
        {
          v211 = (char *)sub_40FC((uint64_t)(v194 + 357), v210);
          v196 = (char *)v194[356];
          v198 = (char *)v194[355];
        }
        else
        {
          v211 = 0;
        }
        v212 = &v211[8 * v207];
        v213 = &v211[8 * v210];
        *(_QWORD *)v212 = v195;
        v206 = v212 + 8;
        while (v196 != v198)
        {
          v215 = *((_QWORD *)v196 - 1);
          v196 -= 8;
          *((_QWORD *)v212 - 1) = v215;
          v212 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v192 != 1)
        goto LABEL_294;
      v193 = a1[1];
      v194 = *(_QWORD **)v193;
      v195 = *(unsigned __int16 *)(a1[2] + 24);
      v196 = *(char **)(*(_QWORD *)v193 + 2848);
      v197 = *(_QWORD *)(*(_QWORD *)v193 + 2856);
      if ((unint64_t)v196 >= v197)
      {
        v198 = (char *)v194[355];
        v199 = (v196 - v198) >> 3;
        if ((unint64_t)(v199 + 1) >> 61)
          goto LABEL_328;
        v200 = v197 - (_QWORD)v198;
        v201 = (uint64_t)(v197 - (_QWORD)v198) >> 2;
        if (v201 <= v199 + 1)
          v201 = v199 + 1;
        if (v200 >= 0x7FFFFFFFFFFFFFF8)
          v202 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v202 = v201;
        if (v202)
        {
          v203 = (char *)sub_40FC((uint64_t)(v194 + 357), v202);
          v196 = (char *)v194[356];
          v198 = (char *)v194[355];
        }
        else
        {
          v203 = 0;
        }
        v212 = &v203[8 * v199];
        v213 = &v203[8 * v202];
        *(_QWORD *)v212 = v195;
        v206 = v212 + 8;
        while (v196 != v198)
        {
          v214 = *((_QWORD *)v196 - 1);
          v196 -= 8;
          *((_QWORD *)v212 - 1) = v214;
          v212 -= 8;
        }
LABEL_291:
        v194[355] = v212;
        v194[356] = v206;
        v194[357] = v213;
        if (v198)
          operator delete(v198);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v196 = v195;
    v206 = v196 + 8;
LABEL_293:
    v194[356] = v206;
LABEL_294:
    v216 = 1 << *(_DWORD *)(v3 + 48);
    if (v216 == 2)
    {
      v229 = a1[1];
      v230 = a1[2];
      v219 = *(_QWORD **)v229;
      v220 = *(unsigned __int16 *)(v230 + 22);
      v221 = *(char **)(*(_QWORD *)v229 + 2872);
      v231 = *(_QWORD *)(*(_QWORD *)v229 + 2880);
      if ((unint64_t)v221 >= v231)
      {
        v223 = (char *)v219[358];
        v233 = (v221 - v223) >> 3;
        if (!((unint64_t)(v233 + 1) >> 61))
        {
          v234 = v231 - (_QWORD)v223;
          v235 = (uint64_t)(v231 - (_QWORD)v223) >> 2;
          if (v235 <= v233 + 1)
            v235 = v233 + 1;
          if (v234 >= 0x7FFFFFFFFFFFFFF8)
            v236 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v236 = v235;
          if (v236)
          {
            v237 = (char *)sub_40FC((uint64_t)(v219 + 360), v236);
            v221 = (char *)v219[359];
            v223 = (char *)v219[358];
          }
          else
          {
            v237 = 0;
          }
          v238 = &v237[8 * v233];
          v239 = &v237[8 * v236];
          *(_QWORD *)v238 = v220;
          v232 = v238 + 8;
          while (v221 != v223)
          {
            v241 = *((_QWORD *)v221 - 1);
            v221 -= 8;
            *((_QWORD *)v238 - 1) = v241;
            v238 -= 8;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_4074();
      }
    }
    else
    {
      if (v216 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      v217 = a1[1];
      v218 = a1[2];
      v219 = *(_QWORD **)v217;
      v220 = *(unsigned __int16 *)(v218 + 22);
      v221 = *(char **)(*(_QWORD *)v217 + 2872);
      v222 = *(_QWORD *)(*(_QWORD *)v217 + 2880);
      if ((unint64_t)v221 >= v222)
      {
        v223 = (char *)v219[358];
        v224 = (v221 - v223) >> 3;
        if (!((unint64_t)(v224 + 1) >> 61))
        {
          v225 = v222 - (_QWORD)v223;
          v226 = (uint64_t)(v222 - (_QWORD)v223) >> 2;
          if (v226 <= v224 + 1)
            v226 = v224 + 1;
          if (v225 >= 0x7FFFFFFFFFFFFFF8)
            v227 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v227 = v226;
          if (v227)
          {
            v228 = (char *)sub_40FC((uint64_t)(v219 + 360), v227);
            v221 = (char *)v219[359];
            v223 = (char *)v219[358];
          }
          else
          {
            v228 = 0;
          }
          v238 = &v228[8 * v224];
          v239 = &v228[8 * v227];
          *(_QWORD *)v238 = v220;
          v232 = v238 + 8;
          while (v221 != v223)
          {
            v240 = *((_QWORD *)v221 - 1);
            v221 -= 8;
            *((_QWORD *)v238 - 1) = v240;
            v238 -= 8;
          }
LABEL_323:
          v219[358] = v238;
          v219[359] = v232;
          v219[360] = v239;
          if (v223)
            operator delete(v223);
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *(_QWORD *)v221 = v220;
    v232 = v221 + 8;
LABEL_325:
    v219[359] = v232;
    goto LABEL_326;
  }
  v17 = 1 << *(_DWORD *)(v3 + 48);
  if (v17 == 2 || v17 == 1)
  {
    v18 = a1[2];
    v19 = *(_QWORD **)a1[1];
    *(_QWORD *)(v19[332] - 8) += *(unsigned __int16 *)(v18 + 34);
    *(_QWORD *)(v19[335] - 8) += *(unsigned __int16 *)(v18 + 30);
    *(_QWORD *)(v19[338] - 8) += *(_DWORD *)(v18 + 40) & 0x1FFFF;
    *(_QWORD *)(v19[341] - 8) += *(unsigned __int16 *)(v18 + 36);
    *(_QWORD *)(v19[344] - 8) += *(unsigned __int16 *)(v18 + 32);
    *(_QWORD *)(v19[347] - 8) += *(_DWORD *)(v18 + 44) & 0x1FFFF;
    *(_QWORD *)(v19[350] - 8) += *(_WORD *)(v18 + 28) & 0x7FFF;
    *(_QWORD *)(v19[353] - 8) += *(_WORD *)(v18 + 26) & 0x7FFF;
    *(_QWORD *)(v19[356] - 8) += *(unsigned __int16 *)(v18 + 24);
    *(_QWORD *)(v19[359] - 8) += *(unsigned __int16 *)(v18 + 22);
  }
}

void sub_DBCBC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  _WORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned __int16 *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  _QWORD *v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  _QWORD *v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  unint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  _QWORD *v188;
  uint64_t v189;
  char *v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  unint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  _QWORD *v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  char *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  _QWORD *v232;
  uint64_t v233;
  char *v234;
  unint64_t v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  unint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  _QWORD *v254;
  uint64_t v255;
  char *v256;
  unint64_t v257;
  char *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  unint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  _QWORD *v276;
  unint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  char *v292;
  unint64_t *v293;
  char *v294;
  unint64_t v295;
  unint64_t v296;
  int v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  char *v301;
  unint64_t v302;
  char *v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  char *v308;
  uint64_t v309;
  unint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  char *v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      v8 = (char *)v6[401];
      v22 = v6[402];
      if ((unint64_t)v8 >= v22)
      {
        v10 = (char *)v6[400];
        v24 = (v8 - v10) >> 3;
        if ((unint64_t)(v24 + 1) >> 61)
          goto LABEL_456;
        v25 = v22 - (_QWORD)v10;
        v26 = (uint64_t)(v22 - (_QWORD)v10) >> 2;
        if (v26 <= v24 + 1)
          v26 = v24 + 1;
        if (v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (char *)sub_40FC((uint64_t)(v6 + 402), v27);
          v8 = (char *)v6[401];
          v10 = (char *)v6[400];
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[8 * v24];
        v30 = &v28[8 * v27];
        *(_QWORD *)v29 = v7;
        v23 = v29 + 8;
        while (v8 != v10)
        {
          v32 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v29 - 1) = v32;
          v29 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      v8 = (char *)v6[401];
      v9 = v6[402];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[400];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_456;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 402), v14);
          v8 = (char *)v6[401];
          v10 = (char *)v6[400];
        }
        else
        {
          v15 = 0;
        }
        v29 = &v15[8 * v11];
        v30 = &v15[8 * v14];
        *(_QWORD *)v29 = v7;
        v23 = v29 + 8;
        while (v8 != v10)
        {
          v31 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v29 - 1) = v31;
          v29 -= 8;
        }
LABEL_35:
        v6[400] = v29;
        v6[401] = v23;
        v6[402] = v30;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v23 = v8 + 8;
LABEL_37:
    v6[401] = v23;
LABEL_38:
    v33 = 1 << *(_DWORD *)(v3 + 48);
    if (v33 == 2)
    {
      v34 = *(_QWORD **)a1[1];
      v35 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      v36 = (char *)v34[404];
      v44 = v34[405];
      if ((unint64_t)v36 >= v44)
      {
        v38 = (char *)v34[403];
        v46 = (v36 - v38) >> 3;
        if ((unint64_t)(v46 + 1) >> 61)
          goto LABEL_456;
        v47 = v44 - (_QWORD)v38;
        v48 = (uint64_t)(v44 - (_QWORD)v38) >> 2;
        if (v48 <= v46 + 1)
          v48 = v46 + 1;
        if (v47 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          v50 = (char *)sub_40FC((uint64_t)(v34 + 405), v49);
          v36 = (char *)v34[404];
          v38 = (char *)v34[403];
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[8 * v46];
        v52 = &v50[8 * v49];
        *(_QWORD *)v51 = v35;
        v45 = v51 + 8;
        while (v36 != v38)
        {
          v54 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v51 - 1) = v54;
          v51 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v33 != 1)
        goto LABEL_70;
      v34 = *(_QWORD **)a1[1];
      v35 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      v36 = (char *)v34[404];
      v37 = v34[405];
      if ((unint64_t)v36 >= v37)
      {
        v38 = (char *)v34[403];
        v39 = (v36 - v38) >> 3;
        if ((unint64_t)(v39 + 1) >> 61)
          goto LABEL_456;
        v40 = v37 - (_QWORD)v38;
        v41 = (uint64_t)(v37 - (_QWORD)v38) >> 2;
        if (v41 <= v39 + 1)
          v41 = v39 + 1;
        if (v40 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          v43 = (char *)sub_40FC((uint64_t)(v34 + 405), v42);
          v36 = (char *)v34[404];
          v38 = (char *)v34[403];
        }
        else
        {
          v43 = 0;
        }
        v51 = &v43[8 * v39];
        v52 = &v43[8 * v42];
        *(_QWORD *)v51 = v35;
        v45 = v51 + 8;
        while (v36 != v38)
        {
          v53 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v51 - 1) = v53;
          v51 -= 8;
        }
LABEL_67:
        v34[403] = v51;
        v34[404] = v45;
        v34[405] = v52;
        if (v38)
          operator delete(v38);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v36 = v35;
    v45 = v36 + 8;
LABEL_69:
    v34[404] = v45;
LABEL_70:
    v55 = 1 << *(_DWORD *)(v3 + 48);
    if (v55 == 2)
    {
      v56 = *(_QWORD **)a1[1];
      v57 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      v58 = (char *)v56[407];
      v66 = v56[408];
      if ((unint64_t)v58 >= v66)
      {
        v60 = (char *)v56[406];
        v68 = (v58 - v60) >> 3;
        if ((unint64_t)(v68 + 1) >> 61)
          goto LABEL_456;
        v69 = v66 - (_QWORD)v60;
        v70 = (uint64_t)(v66 - (_QWORD)v60) >> 2;
        if (v70 <= v68 + 1)
          v70 = v68 + 1;
        if (v69 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v70;
        if (v71)
        {
          v72 = (char *)sub_40FC((uint64_t)(v56 + 408), v71);
          v58 = (char *)v56[407];
          v60 = (char *)v56[406];
        }
        else
        {
          v72 = 0;
        }
        v73 = &v72[8 * v68];
        v74 = &v72[8 * v71];
        *(_QWORD *)v73 = v57;
        v67 = v73 + 8;
        while (v58 != v60)
        {
          v76 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v73 - 1) = v76;
          v73 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v55 != 1)
        goto LABEL_102;
      v56 = *(_QWORD **)a1[1];
      v57 = *(_WORD *)(a1[2] + 22) & 0x7FFF;
      v58 = (char *)v56[407];
      v59 = v56[408];
      if ((unint64_t)v58 >= v59)
      {
        v60 = (char *)v56[406];
        v61 = (v58 - v60) >> 3;
        if ((unint64_t)(v61 + 1) >> 61)
          goto LABEL_456;
        v62 = v59 - (_QWORD)v60;
        v63 = (uint64_t)(v59 - (_QWORD)v60) >> 2;
        if (v63 <= v61 + 1)
          v63 = v61 + 1;
        if (v62 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v64 = v63;
        if (v64)
        {
          v65 = (char *)sub_40FC((uint64_t)(v56 + 408), v64);
          v58 = (char *)v56[407];
          v60 = (char *)v56[406];
        }
        else
        {
          v65 = 0;
        }
        v73 = &v65[8 * v61];
        v74 = &v65[8 * v64];
        *(_QWORD *)v73 = v57;
        v67 = v73 + 8;
        while (v58 != v60)
        {
          v75 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v73 - 1) = v75;
          v73 -= 8;
        }
LABEL_99:
        v56[406] = v73;
        v56[407] = v67;
        v56[408] = v74;
        if (v60)
          operator delete(v60);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v58 = v57;
    v67 = v58 + 8;
LABEL_101:
    v56[407] = v67;
LABEL_102:
    v77 = 1 << *(_DWORD *)(v3 + 48);
    if (v77 == 2)
    {
      v78 = *(_QWORD **)a1[1];
      v79 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v80 = (char *)v78[410];
      v88 = v78[411];
      if ((unint64_t)v80 >= v88)
      {
        v82 = (char *)v78[409];
        v90 = (v80 - v82) >> 3;
        if ((unint64_t)(v90 + 1) >> 61)
          goto LABEL_456;
        v91 = v88 - (_QWORD)v82;
        v92 = (uint64_t)(v88 - (_QWORD)v82) >> 2;
        if (v92 <= v90 + 1)
          v92 = v90 + 1;
        if (v91 >= 0x7FFFFFFFFFFFFFF8)
          v93 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        if (v93)
        {
          v94 = (char *)sub_40FC((uint64_t)(v78 + 411), v93);
          v80 = (char *)v78[410];
          v82 = (char *)v78[409];
        }
        else
        {
          v94 = 0;
        }
        v95 = &v94[8 * v90];
        v96 = &v94[8 * v93];
        *(_QWORD *)v95 = v79;
        v89 = v95 + 8;
        while (v80 != v82)
        {
          v98 = *((_QWORD *)v80 - 1);
          v80 -= 8;
          *((_QWORD *)v95 - 1) = v98;
          v95 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v77 != 1)
        goto LABEL_134;
      v78 = *(_QWORD **)a1[1];
      v79 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v80 = (char *)v78[410];
      v81 = v78[411];
      if ((unint64_t)v80 >= v81)
      {
        v82 = (char *)v78[409];
        v83 = (v80 - v82) >> 3;
        if ((unint64_t)(v83 + 1) >> 61)
          goto LABEL_456;
        v84 = v81 - (_QWORD)v82;
        v85 = (uint64_t)(v81 - (_QWORD)v82) >> 2;
        if (v85 <= v83 + 1)
          v85 = v83 + 1;
        if (v84 >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v85;
        if (v86)
        {
          v87 = (char *)sub_40FC((uint64_t)(v78 + 411), v86);
          v80 = (char *)v78[410];
          v82 = (char *)v78[409];
        }
        else
        {
          v87 = 0;
        }
        v95 = &v87[8 * v83];
        v96 = &v87[8 * v86];
        *(_QWORD *)v95 = v79;
        v89 = v95 + 8;
        while (v80 != v82)
        {
          v97 = *((_QWORD *)v80 - 1);
          v80 -= 8;
          *((_QWORD *)v95 - 1) = v97;
          v95 -= 8;
        }
LABEL_131:
        v78[409] = v95;
        v78[410] = v89;
        v78[411] = v96;
        if (v82)
          operator delete(v82);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v80 = v79;
    v89 = v80 + 8;
LABEL_133:
    v78[410] = v89;
LABEL_134:
    v99 = 1 << *(_DWORD *)(v3 + 48);
    if (v99 == 2)
    {
      v100 = *(_QWORD **)a1[1];
      v101 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v102 = (char *)v100[413];
      v110 = v100[414];
      if ((unint64_t)v102 >= v110)
      {
        v104 = (char *)v100[412];
        v112 = (v102 - v104) >> 3;
        if ((unint64_t)(v112 + 1) >> 61)
          goto LABEL_456;
        v113 = v110 - (_QWORD)v104;
        v114 = (uint64_t)(v110 - (_QWORD)v104) >> 2;
        if (v114 <= v112 + 1)
          v114 = v112 + 1;
        if (v113 >= 0x7FFFFFFFFFFFFFF8)
          v115 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v115 = v114;
        if (v115)
        {
          v116 = (char *)sub_40FC((uint64_t)(v100 + 414), v115);
          v102 = (char *)v100[413];
          v104 = (char *)v100[412];
        }
        else
        {
          v116 = 0;
        }
        v117 = &v116[8 * v112];
        v118 = &v116[8 * v115];
        *(_QWORD *)v117 = v101;
        v111 = v117 + 8;
        while (v102 != v104)
        {
          v120 = *((_QWORD *)v102 - 1);
          v102 -= 8;
          *((_QWORD *)v117 - 1) = v120;
          v117 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v99 != 1)
        goto LABEL_166;
      v100 = *(_QWORD **)a1[1];
      v101 = *(_WORD *)(a1[2] + 24) & 0x7FFF;
      v102 = (char *)v100[413];
      v103 = v100[414];
      if ((unint64_t)v102 >= v103)
      {
        v104 = (char *)v100[412];
        v105 = (v102 - v104) >> 3;
        if ((unint64_t)(v105 + 1) >> 61)
          goto LABEL_456;
        v106 = v103 - (_QWORD)v104;
        v107 = (uint64_t)(v103 - (_QWORD)v104) >> 2;
        if (v107 <= v105 + 1)
          v107 = v105 + 1;
        if (v106 >= 0x7FFFFFFFFFFFFFF8)
          v108 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v108 = v107;
        if (v108)
        {
          v109 = (char *)sub_40FC((uint64_t)(v100 + 414), v108);
          v102 = (char *)v100[413];
          v104 = (char *)v100[412];
        }
        else
        {
          v109 = 0;
        }
        v117 = &v109[8 * v105];
        v118 = &v109[8 * v108];
        *(_QWORD *)v117 = v101;
        v111 = v117 + 8;
        while (v102 != v104)
        {
          v119 = *((_QWORD *)v102 - 1);
          v102 -= 8;
          *((_QWORD *)v117 - 1) = v119;
          v117 -= 8;
        }
LABEL_163:
        v100[412] = v117;
        v100[413] = v111;
        v100[414] = v118;
        if (v104)
          operator delete(v104);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v102 = v101;
    v111 = v102 + 8;
LABEL_165:
    v100[413] = v111;
LABEL_166:
    v121 = 1 << *(_DWORD *)(v3 + 48);
    if (v121 == 2)
    {
      v122 = *(_QWORD **)a1[1];
      v123 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      v124 = (char *)v122[416];
      v132 = v122[417];
      if ((unint64_t)v124 >= v132)
      {
        v126 = (char *)v122[415];
        v134 = (v124 - v126) >> 3;
        if ((unint64_t)(v134 + 1) >> 61)
          goto LABEL_456;
        v135 = v132 - (_QWORD)v126;
        v136 = (uint64_t)(v132 - (_QWORD)v126) >> 2;
        if (v136 <= v134 + 1)
          v136 = v134 + 1;
        if (v135 >= 0x7FFFFFFFFFFFFFF8)
          v137 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v137 = v136;
        if (v137)
        {
          v138 = (char *)sub_40FC((uint64_t)(v122 + 417), v137);
          v124 = (char *)v122[416];
          v126 = (char *)v122[415];
        }
        else
        {
          v138 = 0;
        }
        v139 = &v138[8 * v134];
        v140 = &v138[8 * v137];
        *(_QWORD *)v139 = v123;
        v133 = v139 + 8;
        while (v124 != v126)
        {
          v142 = *((_QWORD *)v124 - 1);
          v124 -= 8;
          *((_QWORD *)v139 - 1) = v142;
          v139 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v121 != 1)
        goto LABEL_198;
      v122 = *(_QWORD **)a1[1];
      v123 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      v124 = (char *)v122[416];
      v125 = v122[417];
      if ((unint64_t)v124 >= v125)
      {
        v126 = (char *)v122[415];
        v127 = (v124 - v126) >> 3;
        if ((unint64_t)(v127 + 1) >> 61)
          goto LABEL_456;
        v128 = v125 - (_QWORD)v126;
        v129 = (uint64_t)(v125 - (_QWORD)v126) >> 2;
        if (v129 <= v127 + 1)
          v129 = v127 + 1;
        if (v128 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
        {
          v131 = (char *)sub_40FC((uint64_t)(v122 + 417), v130);
          v124 = (char *)v122[416];
          v126 = (char *)v122[415];
        }
        else
        {
          v131 = 0;
        }
        v139 = &v131[8 * v127];
        v140 = &v131[8 * v130];
        *(_QWORD *)v139 = v123;
        v133 = v139 + 8;
        while (v124 != v126)
        {
          v141 = *((_QWORD *)v124 - 1);
          v124 -= 8;
          *((_QWORD *)v139 - 1) = v141;
          v139 -= 8;
        }
LABEL_195:
        v122[415] = v139;
        v122[416] = v133;
        v122[417] = v140;
        if (v126)
          operator delete(v126);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v124 = v123;
    v133 = v124 + 8;
LABEL_197:
    v122[416] = v133;
LABEL_198:
    v143 = 1 << *(_DWORD *)(v3 + 48);
    if (v143 == 2)
    {
      v144 = *(_QWORD **)a1[1];
      v145 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v146 = (char *)v144[419];
      v154 = v144[420];
      if ((unint64_t)v146 >= v154)
      {
        v148 = (char *)v144[418];
        v156 = (v146 - v148) >> 3;
        if ((unint64_t)(v156 + 1) >> 61)
          goto LABEL_456;
        v157 = v154 - (_QWORD)v148;
        v158 = (uint64_t)(v154 - (_QWORD)v148) >> 2;
        if (v158 <= v156 + 1)
          v158 = v156 + 1;
        if (v157 >= 0x7FFFFFFFFFFFFFF8)
          v159 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v159 = v158;
        if (v159)
        {
          v160 = (char *)sub_40FC((uint64_t)(v144 + 420), v159);
          v146 = (char *)v144[419];
          v148 = (char *)v144[418];
        }
        else
        {
          v160 = 0;
        }
        v161 = &v160[8 * v156];
        v162 = &v160[8 * v159];
        *(_QWORD *)v161 = v145;
        v155 = v161 + 8;
        while (v146 != v148)
        {
          v164 = *((_QWORD *)v146 - 1);
          v146 -= 8;
          *((_QWORD *)v161 - 1) = v164;
          v161 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v143 != 1)
        goto LABEL_230;
      v144 = *(_QWORD **)a1[1];
      v145 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v146 = (char *)v144[419];
      v147 = v144[420];
      if ((unint64_t)v146 >= v147)
      {
        v148 = (char *)v144[418];
        v149 = (v146 - v148) >> 3;
        if ((unint64_t)(v149 + 1) >> 61)
          goto LABEL_456;
        v150 = v147 - (_QWORD)v148;
        v151 = (uint64_t)(v147 - (_QWORD)v148) >> 2;
        if (v151 <= v149 + 1)
          v151 = v149 + 1;
        if (v150 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v152 = v151;
        if (v152)
        {
          v153 = (char *)sub_40FC((uint64_t)(v144 + 420), v152);
          v146 = (char *)v144[419];
          v148 = (char *)v144[418];
        }
        else
        {
          v153 = 0;
        }
        v161 = &v153[8 * v149];
        v162 = &v153[8 * v152];
        *(_QWORD *)v161 = v145;
        v155 = v161 + 8;
        while (v146 != v148)
        {
          v163 = *((_QWORD *)v146 - 1);
          v146 -= 8;
          *((_QWORD *)v161 - 1) = v163;
          v161 -= 8;
        }
LABEL_227:
        v144[418] = v161;
        v144[419] = v155;
        v144[420] = v162;
        if (v148)
          operator delete(v148);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v146 = v145;
    v155 = v146 + 8;
LABEL_229:
    v144[419] = v155;
LABEL_230:
    v165 = 1 << *(_DWORD *)(v3 + 48);
    if (v165 == 2)
    {
      v166 = *(_QWORD **)a1[1];
      v167 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      v168 = (char *)v166[422];
      v176 = v166[423];
      if ((unint64_t)v168 >= v176)
      {
        v170 = (char *)v166[421];
        v178 = (v168 - v170) >> 3;
        if ((unint64_t)(v178 + 1) >> 61)
          goto LABEL_456;
        v179 = v176 - (_QWORD)v170;
        v180 = (uint64_t)(v176 - (_QWORD)v170) >> 2;
        if (v180 <= v178 + 1)
          v180 = v178 + 1;
        if (v179 >= 0x7FFFFFFFFFFFFFF8)
          v181 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v181 = v180;
        if (v181)
        {
          v182 = (char *)sub_40FC((uint64_t)(v166 + 423), v181);
          v168 = (char *)v166[422];
          v170 = (char *)v166[421];
        }
        else
        {
          v182 = 0;
        }
        v183 = &v182[8 * v178];
        v184 = &v182[8 * v181];
        *(_QWORD *)v183 = v167;
        v177 = v183 + 8;
        while (v168 != v170)
        {
          v186 = *((_QWORD *)v168 - 1);
          v168 -= 8;
          *((_QWORD *)v183 - 1) = v186;
          v183 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v165 != 1)
        goto LABEL_262;
      v166 = *(_QWORD **)a1[1];
      v167 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      v168 = (char *)v166[422];
      v169 = v166[423];
      if ((unint64_t)v168 >= v169)
      {
        v170 = (char *)v166[421];
        v171 = (v168 - v170) >> 3;
        if ((unint64_t)(v171 + 1) >> 61)
          goto LABEL_456;
        v172 = v169 - (_QWORD)v170;
        v173 = (uint64_t)(v169 - (_QWORD)v170) >> 2;
        if (v173 <= v171 + 1)
          v173 = v171 + 1;
        if (v172 >= 0x7FFFFFFFFFFFFFF8)
          v174 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v174 = v173;
        if (v174)
        {
          v175 = (char *)sub_40FC((uint64_t)(v166 + 423), v174);
          v168 = (char *)v166[422];
          v170 = (char *)v166[421];
        }
        else
        {
          v175 = 0;
        }
        v183 = &v175[8 * v171];
        v184 = &v175[8 * v174];
        *(_QWORD *)v183 = v167;
        v177 = v183 + 8;
        while (v168 != v170)
        {
          v185 = *((_QWORD *)v168 - 1);
          v168 -= 8;
          *((_QWORD *)v183 - 1) = v185;
          v183 -= 8;
        }
LABEL_259:
        v166[421] = v183;
        v166[422] = v177;
        v166[423] = v184;
        if (v170)
          operator delete(v170);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v168 = v167;
    v177 = v168 + 8;
LABEL_261:
    v166[422] = v177;
LABEL_262:
    v187 = 1 << *(_DWORD *)(v3 + 48);
    if (v187 == 2)
    {
      v188 = *(_QWORD **)a1[1];
      v189 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      v190 = (char *)v188[425];
      v198 = v188[426];
      if ((unint64_t)v190 >= v198)
      {
        v192 = (char *)v188[424];
        v200 = (v190 - v192) >> 3;
        if ((unint64_t)(v200 + 1) >> 61)
          goto LABEL_456;
        v201 = v198 - (_QWORD)v192;
        v202 = (uint64_t)(v198 - (_QWORD)v192) >> 2;
        if (v202 <= v200 + 1)
          v202 = v200 + 1;
        if (v201 >= 0x7FFFFFFFFFFFFFF8)
          v203 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v203 = v202;
        if (v203)
        {
          v204 = (char *)sub_40FC((uint64_t)(v188 + 426), v203);
          v190 = (char *)v188[425];
          v192 = (char *)v188[424];
        }
        else
        {
          v204 = 0;
        }
        v205 = &v204[8 * v200];
        v206 = &v204[8 * v203];
        *(_QWORD *)v205 = v189;
        v199 = v205 + 8;
        while (v190 != v192)
        {
          v208 = *((_QWORD *)v190 - 1);
          v190 -= 8;
          *((_QWORD *)v205 - 1) = v208;
          v205 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v187 != 1)
        goto LABEL_294;
      v188 = *(_QWORD **)a1[1];
      v189 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      v190 = (char *)v188[425];
      v191 = v188[426];
      if ((unint64_t)v190 >= v191)
      {
        v192 = (char *)v188[424];
        v193 = (v190 - v192) >> 3;
        if ((unint64_t)(v193 + 1) >> 61)
          goto LABEL_456;
        v194 = v191 - (_QWORD)v192;
        v195 = (uint64_t)(v191 - (_QWORD)v192) >> 2;
        if (v195 <= v193 + 1)
          v195 = v193 + 1;
        if (v194 >= 0x7FFFFFFFFFFFFFF8)
          v196 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v196 = v195;
        if (v196)
        {
          v197 = (char *)sub_40FC((uint64_t)(v188 + 426), v196);
          v190 = (char *)v188[425];
          v192 = (char *)v188[424];
        }
        else
        {
          v197 = 0;
        }
        v205 = &v197[8 * v193];
        v206 = &v197[8 * v196];
        *(_QWORD *)v205 = v189;
        v199 = v205 + 8;
        while (v190 != v192)
        {
          v207 = *((_QWORD *)v190 - 1);
          v190 -= 8;
          *((_QWORD *)v205 - 1) = v207;
          v205 -= 8;
        }
LABEL_291:
        v188[424] = v205;
        v188[425] = v199;
        v188[426] = v206;
        if (v192)
          operator delete(v192);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v190 = v189;
    v199 = v190 + 8;
LABEL_293:
    v188[425] = v199;
LABEL_294:
    v209 = 1 << *(_DWORD *)(v3 + 48);
    if (v209 == 2)
    {
      v210 = *(_QWORD **)a1[1];
      v211 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v212 = (char *)v210[428];
      v220 = v210[429];
      if ((unint64_t)v212 >= v220)
      {
        v214 = (char *)v210[427];
        v222 = (v212 - v214) >> 3;
        if ((unint64_t)(v222 + 1) >> 61)
          goto LABEL_456;
        v223 = v220 - (_QWORD)v214;
        v224 = (uint64_t)(v220 - (_QWORD)v214) >> 2;
        if (v224 <= v222 + 1)
          v224 = v222 + 1;
        if (v223 >= 0x7FFFFFFFFFFFFFF8)
          v225 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v225 = v224;
        if (v225)
        {
          v226 = (char *)sub_40FC((uint64_t)(v210 + 429), v225);
          v212 = (char *)v210[428];
          v214 = (char *)v210[427];
        }
        else
        {
          v226 = 0;
        }
        v227 = &v226[8 * v222];
        v228 = &v226[8 * v225];
        *(_QWORD *)v227 = v211;
        v221 = v227 + 8;
        while (v212 != v214)
        {
          v230 = *((_QWORD *)v212 - 1);
          v212 -= 8;
          *((_QWORD *)v227 - 1) = v230;
          v227 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v209 != 1)
        goto LABEL_326;
      v210 = *(_QWORD **)a1[1];
      v211 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v212 = (char *)v210[428];
      v213 = v210[429];
      if ((unint64_t)v212 >= v213)
      {
        v214 = (char *)v210[427];
        v215 = (v212 - v214) >> 3;
        if ((unint64_t)(v215 + 1) >> 61)
          goto LABEL_456;
        v216 = v213 - (_QWORD)v214;
        v217 = (uint64_t)(v213 - (_QWORD)v214) >> 2;
        if (v217 <= v215 + 1)
          v217 = v215 + 1;
        if (v216 >= 0x7FFFFFFFFFFFFFF8)
          v218 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v218 = v217;
        if (v218)
        {
          v219 = (char *)sub_40FC((uint64_t)(v210 + 429), v218);
          v212 = (char *)v210[428];
          v214 = (char *)v210[427];
        }
        else
        {
          v219 = 0;
        }
        v227 = &v219[8 * v215];
        v228 = &v219[8 * v218];
        *(_QWORD *)v227 = v211;
        v221 = v227 + 8;
        while (v212 != v214)
        {
          v229 = *((_QWORD *)v212 - 1);
          v212 -= 8;
          *((_QWORD *)v227 - 1) = v229;
          v227 -= 8;
        }
LABEL_323:
        v210[427] = v227;
        v210[428] = v221;
        v210[429] = v228;
        if (v214)
          operator delete(v214);
        goto LABEL_325;
      }
    }
    *(_QWORD *)v212 = v211;
    v221 = v212 + 8;
LABEL_325:
    v210[428] = v221;
LABEL_326:
    v231 = 1 << *(_DWORD *)(v3 + 48);
    if (v231 == 2)
    {
      v232 = *(_QWORD **)a1[1];
      v233 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v234 = (char *)v232[431];
      v242 = v232[432];
      if ((unint64_t)v234 >= v242)
      {
        v236 = (char *)v232[430];
        v244 = (v234 - v236) >> 3;
        if ((unint64_t)(v244 + 1) >> 61)
          goto LABEL_456;
        v245 = v242 - (_QWORD)v236;
        v246 = (uint64_t)(v242 - (_QWORD)v236) >> 2;
        if (v246 <= v244 + 1)
          v246 = v244 + 1;
        if (v245 >= 0x7FFFFFFFFFFFFFF8)
          v247 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v247 = v246;
        if (v247)
        {
          v248 = (char *)sub_40FC((uint64_t)(v232 + 432), v247);
          v234 = (char *)v232[431];
          v236 = (char *)v232[430];
        }
        else
        {
          v248 = 0;
        }
        v249 = &v248[8 * v244];
        v250 = &v248[8 * v247];
        *(_QWORD *)v249 = v233;
        v243 = v249 + 8;
        while (v234 != v236)
        {
          v252 = *((_QWORD *)v234 - 1);
          v234 -= 8;
          *((_QWORD *)v249 - 1) = v252;
          v249 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v231 != 1)
        goto LABEL_358;
      v232 = *(_QWORD **)a1[1];
      v233 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v234 = (char *)v232[431];
      v235 = v232[432];
      if ((unint64_t)v234 >= v235)
      {
        v236 = (char *)v232[430];
        v237 = (v234 - v236) >> 3;
        if ((unint64_t)(v237 + 1) >> 61)
          goto LABEL_456;
        v238 = v235 - (_QWORD)v236;
        v239 = (uint64_t)(v235 - (_QWORD)v236) >> 2;
        if (v239 <= v237 + 1)
          v239 = v237 + 1;
        if (v238 >= 0x7FFFFFFFFFFFFFF8)
          v240 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v240 = v239;
        if (v240)
        {
          v241 = (char *)sub_40FC((uint64_t)(v232 + 432), v240);
          v234 = (char *)v232[431];
          v236 = (char *)v232[430];
        }
        else
        {
          v241 = 0;
        }
        v249 = &v241[8 * v237];
        v250 = &v241[8 * v240];
        *(_QWORD *)v249 = v233;
        v243 = v249 + 8;
        while (v234 != v236)
        {
          v251 = *((_QWORD *)v234 - 1);
          v234 -= 8;
          *((_QWORD *)v249 - 1) = v251;
          v249 -= 8;
        }
LABEL_355:
        v232[430] = v249;
        v232[431] = v243;
        v232[432] = v250;
        if (v236)
          operator delete(v236);
        goto LABEL_357;
      }
    }
    *(_QWORD *)v234 = v233;
    v243 = v234 + 8;
LABEL_357:
    v232[431] = v243;
LABEL_358:
    v253 = 1 << *(_DWORD *)(v3 + 48);
    if (v253 == 2)
    {
      v254 = *(_QWORD **)a1[1];
      v255 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      v256 = (char *)v254[434];
      v264 = v254[435];
      if ((unint64_t)v256 >= v264)
      {
        v258 = (char *)v254[433];
        v266 = (v256 - v258) >> 3;
        if ((unint64_t)(v266 + 1) >> 61)
          goto LABEL_456;
        v267 = v264 - (_QWORD)v258;
        v268 = (uint64_t)(v264 - (_QWORD)v258) >> 2;
        if (v268 <= v266 + 1)
          v268 = v266 + 1;
        if (v267 >= 0x7FFFFFFFFFFFFFF8)
          v269 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v269 = v268;
        if (v269)
        {
          v270 = (char *)sub_40FC((uint64_t)(v254 + 435), v269);
          v256 = (char *)v254[434];
          v258 = (char *)v254[433];
        }
        else
        {
          v270 = 0;
        }
        v271 = &v270[8 * v266];
        v272 = &v270[8 * v269];
        *(_QWORD *)v271 = v255;
        v265 = v271 + 8;
        while (v256 != v258)
        {
          v274 = *((_QWORD *)v256 - 1);
          v256 -= 8;
          *((_QWORD *)v271 - 1) = v274;
          v271 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v253 != 1)
        goto LABEL_390;
      v254 = *(_QWORD **)a1[1];
      v255 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      v256 = (char *)v254[434];
      v257 = v254[435];
      if ((unint64_t)v256 >= v257)
      {
        v258 = (char *)v254[433];
        v259 = (v256 - v258) >> 3;
        if ((unint64_t)(v259 + 1) >> 61)
          goto LABEL_456;
        v260 = v257 - (_QWORD)v258;
        v261 = (uint64_t)(v257 - (_QWORD)v258) >> 2;
        if (v261 <= v259 + 1)
          v261 = v259 + 1;
        if (v260 >= 0x7FFFFFFFFFFFFFF8)
          v262 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v262 = v261;
        if (v262)
        {
          v263 = (char *)sub_40FC((uint64_t)(v254 + 435), v262);
          v256 = (char *)v254[434];
          v258 = (char *)v254[433];
        }
        else
        {
          v263 = 0;
        }
        v271 = &v263[8 * v259];
        v272 = &v263[8 * v262];
        *(_QWORD *)v271 = v255;
        v265 = v271 + 8;
        while (v256 != v258)
        {
          v273 = *((_QWORD *)v256 - 1);
          v256 -= 8;
          *((_QWORD *)v271 - 1) = v273;
          v271 -= 8;
        }
LABEL_387:
        v254[433] = v271;
        v254[434] = v265;
        v254[435] = v272;
        if (v258)
          operator delete(v258);
        goto LABEL_389;
      }
    }
    *(_QWORD *)v256 = v255;
    v265 = v256 + 8;
LABEL_389:
    v254[434] = v265;
LABEL_390:
    v275 = 1 << *(_DWORD *)(v3 + 48);
    if (v275 == 2)
    {
      v276 = *(_QWORD **)a1[1];
      v277 = ((unint64_t)*(unsigned __int16 *)(a1[2] + 20) >> 1) & 0x3FFF;
      v278 = (unint64_t *)v276[437];
      v286 = v276[438];
      if ((unint64_t)v278 >= v286)
      {
        v280 = (unint64_t *)v276[436];
        v288 = v278 - v280;
        if ((unint64_t)(v288 + 1) >> 61)
          goto LABEL_456;
        v289 = v286 - (_QWORD)v280;
        v290 = (uint64_t)(v286 - (_QWORD)v280) >> 2;
        if (v290 <= v288 + 1)
          v290 = v288 + 1;
        if (v289 >= 0x7FFFFFFFFFFFFFF8)
          v291 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v291 = v290;
        if (v291)
        {
          v292 = (char *)sub_40FC((uint64_t)(v276 + 438), v291);
          v278 = (unint64_t *)v276[437];
          v280 = (unint64_t *)v276[436];
        }
        else
        {
          v292 = 0;
        }
        v293 = (unint64_t *)&v292[8 * v288];
        v294 = &v292[8 * v291];
        *v293 = v277;
        v287 = v293 + 1;
        while (v278 != v280)
        {
          v296 = *--v278;
          *--v293 = v296;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v275 != 1)
        goto LABEL_422;
      v276 = *(_QWORD **)a1[1];
      v277 = ((unint64_t)*(unsigned __int16 *)(a1[2] + 20) >> 1) & 0x3FFF;
      v278 = (unint64_t *)v276[437];
      v279 = v276[438];
      if ((unint64_t)v278 >= v279)
      {
        v280 = (unint64_t *)v276[436];
        v281 = v278 - v280;
        if ((unint64_t)(v281 + 1) >> 61)
          goto LABEL_456;
        v282 = v279 - (_QWORD)v280;
        v283 = (uint64_t)(v279 - (_QWORD)v280) >> 2;
        if (v283 <= v281 + 1)
          v283 = v281 + 1;
        if (v282 >= 0x7FFFFFFFFFFFFFF8)
          v284 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v284 = v283;
        if (v284)
        {
          v285 = (char *)sub_40FC((uint64_t)(v276 + 438), v284);
          v278 = (unint64_t *)v276[437];
          v280 = (unint64_t *)v276[436];
        }
        else
        {
          v285 = 0;
        }
        v293 = (unint64_t *)&v285[8 * v281];
        v294 = &v285[8 * v284];
        *v293 = v277;
        v287 = v293 + 1;
        while (v278 != v280)
        {
          v295 = *--v278;
          *--v293 = v295;
        }
LABEL_419:
        v276[436] = v293;
        v276[437] = v287;
        v276[438] = v294;
        if (v280)
          operator delete(v280);
        goto LABEL_421;
      }
    }
    *v278 = v277;
    v287 = v278 + 1;
LABEL_421:
    v276[437] = v287;
LABEL_422:
    v297 = 1 << *(_DWORD *)(v3 + 48);
    if (v297 == 2)
    {
      v309 = a1[2];
      v299 = *(_QWORD **)a1[1];
      v300 = *(_WORD *)(v309 + 46) & 0x7FFF;
      v301 = (char *)v299[440];
      v310 = v299[441];
      if ((unint64_t)v301 >= v310)
      {
        v303 = (char *)v299[439];
        v312 = (v301 - v303) >> 3;
        if (!((unint64_t)(v312 + 1) >> 61))
        {
          v313 = v310 - (_QWORD)v303;
          v314 = (uint64_t)(v310 - (_QWORD)v303) >> 2;
          if (v314 <= v312 + 1)
            v314 = v312 + 1;
          if (v313 >= 0x7FFFFFFFFFFFFFF8)
            v315 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v315 = v314;
          if (v315)
          {
            v316 = (char *)sub_40FC((uint64_t)(v299 + 441), v315);
            v301 = (char *)v299[440];
            v303 = (char *)v299[439];
          }
          else
          {
            v316 = 0;
          }
          v317 = &v316[8 * v312];
          v318 = &v316[8 * v315];
          *(_QWORD *)v317 = v300;
          v311 = v317 + 8;
          while (v301 != v303)
          {
            v320 = *((_QWORD *)v301 - 1);
            v301 -= 8;
            *((_QWORD *)v317 - 1) = v320;
            v317 -= 8;
          }
          goto LABEL_451;
        }
LABEL_456:
        sub_4074();
      }
    }
    else
    {
      if (v297 != 1)
      {
LABEL_454:
        *a2 = 1;
        return;
      }
      v298 = a1[2];
      v299 = *(_QWORD **)a1[1];
      v300 = *(_WORD *)(v298 + 46) & 0x7FFF;
      v301 = (char *)v299[440];
      v302 = v299[441];
      if ((unint64_t)v301 >= v302)
      {
        v303 = (char *)v299[439];
        v304 = (v301 - v303) >> 3;
        if (!((unint64_t)(v304 + 1) >> 61))
        {
          v305 = v302 - (_QWORD)v303;
          v306 = (uint64_t)(v302 - (_QWORD)v303) >> 2;
          if (v306 <= v304 + 1)
            v306 = v304 + 1;
          if (v305 >= 0x7FFFFFFFFFFFFFF8)
            v307 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v307 = v306;
          if (v307)
          {
            v308 = (char *)sub_40FC((uint64_t)(v299 + 441), v307);
            v301 = (char *)v299[440];
            v303 = (char *)v299[439];
          }
          else
          {
            v308 = 0;
          }
          v317 = &v308[8 * v304];
          v318 = &v308[8 * v307];
          *(_QWORD *)v317 = v300;
          v311 = v317 + 8;
          while (v301 != v303)
          {
            v319 = *((_QWORD *)v301 - 1);
            v301 -= 8;
            *((_QWORD *)v317 - 1) = v319;
            v317 -= 8;
          }
LABEL_451:
          v299[439] = v317;
          v299[440] = v311;
          v299[441] = v318;
          if (v303)
            operator delete(v303);
          goto LABEL_453;
        }
        goto LABEL_456;
      }
    }
    *(_QWORD *)v301 = v300;
    v311 = v301 + 8;
LABEL_453:
    v299[440] = v311;
    goto LABEL_454;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = (_WORD *)a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[401] - 8) += v17[22] & 0x7FFF;
    *(_QWORD *)(v19[404] - 8) += v17[21] & 0x7FFF;
    *(_QWORD *)(v19[407] - 8) += v17[11] & 0x7FFF;
    *(_QWORD *)(v19[410] - 8) += v17[15] & 0x7FFF;
    *(_QWORD *)(v19[413] - 8) += v17[12] & 0x7FFF;
    *(_QWORD *)(v19[416] - 8) += v17[16] & 0x7FFF;
    *(_QWORD *)(v19[419] - 8) += v17[13] & 0x7FFF;
    *(_QWORD *)(v19[422] - 8) += v17[19] & 0x7FFF;
    *(_QWORD *)(v19[425] - 8) += v17[17] & 0x7FFF;
    *(_QWORD *)(v19[428] - 8) += v17[14] & 0x7FFF;
    v20 = (unsigned __int16 *)a1[2];
    v21 = (_QWORD *)*v18;
    *(_QWORD *)(v21[431] - 8) += v20[20] & 0x7FFF;
    *(_QWORD *)(v21[434] - 8) += v20[18] & 0x7FFF;
    *(_QWORD *)(v21[437] - 8) += ((unint64_t)v20[10] >> 1) & 0x3FFF;
    *(_QWORD *)(v21[440] - 8) += v20[23] & 0x7FFF;
  }
}

void sub_DD394(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  _QWORD *v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  unint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  _QWORD *v177;
  uint64_t v178;
  char *v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  char *v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  char *v226;
  unint64_t v227;
  char *v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  char *v233;
  uint64_t v234;
  unint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  char *v250;
  unint64_t v251;
  char *v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  char *v257;
  uint64_t v258;
  unint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  char *v274;
  unint64_t v275;
  char *v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  char *v281;
  uint64_t v282;
  unint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  _QWORD *v296;
  __int128 v297;
  uint64_t v298;
  char *v299;
  unint64_t v300;
  char *v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  char *v306;
  uint64_t v307;
  __int128 v308;
  unint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  char *v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      v8 = (uint64_t *)v6[362];
      v23 = v6[363];
      if ((unint64_t)v8 >= v23)
      {
        v10 = (uint64_t *)v6[361];
        v25 = v8 - v10;
        if ((unint64_t)(v25 + 1) >> 61)
          goto LABEL_424;
        v26 = v23 - (_QWORD)v10;
        v27 = (uint64_t)(v23 - (_QWORD)v10) >> 2;
        if (v27 <= v25 + 1)
          v27 = v25 + 1;
        if (v26 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
        {
          v29 = (char *)sub_40FC((uint64_t)(v6 + 363), v28);
          v8 = (uint64_t *)v6[362];
          v10 = (uint64_t *)v6[361];
        }
        else
        {
          v29 = 0;
        }
        v30 = (uint64_t *)&v29[8 * v25];
        v31 = &v29[8 * v28];
        *v30 = v7;
        v24 = v30 + 1;
        while (v8 != v10)
        {
          v33 = *--v8;
          *--v30 = v33;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 48) & 0x7FFFFLL;
      v8 = (uint64_t *)v6[362];
      v9 = v6[363];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[361];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_424;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 363), v14);
          v8 = (uint64_t *)v6[362];
          v10 = (uint64_t *)v6[361];
        }
        else
        {
          v15 = 0;
        }
        v30 = (uint64_t *)&v15[8 * v11];
        v31 = &v15[8 * v14];
        *v30 = v7;
        v24 = v30 + 1;
        while (v8 != v10)
        {
          v32 = *--v8;
          *--v30 = v32;
        }
LABEL_35:
        v6[361] = v30;
        v6[362] = v24;
        v6[363] = v31;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v24 = v8 + 1;
LABEL_37:
    v6[362] = v24;
LABEL_38:
    v34 = 1 << *(_DWORD *)(v3 + 48);
    if (v34 == 2)
    {
      v46 = a1[1];
      v36 = *(_QWORD **)v46;
      v37 = *(unsigned __int16 *)(a1[2] + 22);
      v38 = *(char **)(*(_QWORD *)v46 + 2920);
      v47 = *(_QWORD *)(*(_QWORD *)v46 + 2928);
      if ((unint64_t)v38 >= v47)
      {
        v40 = (char *)v36[364];
        v49 = (v38 - v40) >> 3;
        if ((unint64_t)(v49 + 1) >> 61)
          goto LABEL_424;
        v50 = v47 - (_QWORD)v40;
        v51 = (uint64_t)(v47 - (_QWORD)v40) >> 2;
        if (v51 <= v49 + 1)
          v51 = v49 + 1;
        if (v50 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v51;
        if (v52)
        {
          v53 = (char *)sub_40FC((uint64_t)(v36 + 366), v52);
          v38 = (char *)v36[365];
          v40 = (char *)v36[364];
        }
        else
        {
          v53 = 0;
        }
        v54 = &v53[8 * v49];
        v55 = &v53[8 * v52];
        *(_QWORD *)v54 = v37;
        v48 = v54 + 8;
        while (v38 != v40)
        {
          v57 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *((_QWORD *)v54 - 1) = v57;
          v54 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v34 != 1)
        goto LABEL_70;
      v35 = a1[1];
      v36 = *(_QWORD **)v35;
      v37 = *(unsigned __int16 *)(a1[2] + 22);
      v38 = *(char **)(*(_QWORD *)v35 + 2920);
      v39 = *(_QWORD *)(*(_QWORD *)v35 + 2928);
      if ((unint64_t)v38 >= v39)
      {
        v40 = (char *)v36[364];
        v41 = (v38 - v40) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          goto LABEL_424;
        v42 = v39 - (_QWORD)v40;
        v43 = (uint64_t)(v39 - (_QWORD)v40) >> 2;
        if (v43 <= v41 + 1)
          v43 = v41 + 1;
        if (v42 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
        {
          v45 = (char *)sub_40FC((uint64_t)(v36 + 366), v44);
          v38 = (char *)v36[365];
          v40 = (char *)v36[364];
        }
        else
        {
          v45 = 0;
        }
        v54 = &v45[8 * v41];
        v55 = &v45[8 * v44];
        *(_QWORD *)v54 = v37;
        v48 = v54 + 8;
        while (v38 != v40)
        {
          v56 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *((_QWORD *)v54 - 1) = v56;
          v54 -= 8;
        }
LABEL_67:
        v36[364] = v54;
        v36[365] = v48;
        v36[366] = v55;
        if (v40)
          operator delete(v40);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v38 = v37;
    v48 = v38 + 8;
LABEL_69:
    v36[365] = v48;
LABEL_70:
    v58 = 1 << *(_DWORD *)(v3 + 48);
    if (v58 == 2)
    {
      v70 = a1[1];
      v60 = *(_QWORD **)v70;
      v61 = *(unsigned __int16 *)(a1[2] + 32);
      v62 = *(char **)(*(_QWORD *)v70 + 2944);
      v71 = *(_QWORD *)(*(_QWORD *)v70 + 2952);
      if ((unint64_t)v62 >= v71)
      {
        v64 = (char *)v60[367];
        v73 = (v62 - v64) >> 3;
        if ((unint64_t)(v73 + 1) >> 61)
          goto LABEL_424;
        v74 = v71 - (_QWORD)v64;
        v75 = (uint64_t)(v71 - (_QWORD)v64) >> 2;
        if (v75 <= v73 + 1)
          v75 = v73 + 1;
        if (v74 >= 0x7FFFFFFFFFFFFFF8)
          v76 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v76 = v75;
        if (v76)
        {
          v77 = (char *)sub_40FC((uint64_t)(v60 + 369), v76);
          v62 = (char *)v60[368];
          v64 = (char *)v60[367];
        }
        else
        {
          v77 = 0;
        }
        v78 = &v77[8 * v73];
        v79 = &v77[8 * v76];
        *(_QWORD *)v78 = v61;
        v72 = v78 + 8;
        while (v62 != v64)
        {
          v81 = *((_QWORD *)v62 - 1);
          v62 -= 8;
          *((_QWORD *)v78 - 1) = v81;
          v78 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v58 != 1)
        goto LABEL_102;
      v59 = a1[1];
      v60 = *(_QWORD **)v59;
      v61 = *(unsigned __int16 *)(a1[2] + 32);
      v62 = *(char **)(*(_QWORD *)v59 + 2944);
      v63 = *(_QWORD *)(*(_QWORD *)v59 + 2952);
      if ((unint64_t)v62 >= v63)
      {
        v64 = (char *)v60[367];
        v65 = (v62 - v64) >> 3;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_424;
        v66 = v63 - (_QWORD)v64;
        v67 = (uint64_t)(v63 - (_QWORD)v64) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v60 + 369), v68);
          v62 = (char *)v60[368];
          v64 = (char *)v60[367];
        }
        else
        {
          v69 = 0;
        }
        v78 = &v69[8 * v65];
        v79 = &v69[8 * v68];
        *(_QWORD *)v78 = v61;
        v72 = v78 + 8;
        while (v62 != v64)
        {
          v80 = *((_QWORD *)v62 - 1);
          v62 -= 8;
          *((_QWORD *)v78 - 1) = v80;
          v78 -= 8;
        }
LABEL_99:
        v60[367] = v78;
        v60[368] = v72;
        v60[369] = v79;
        if (v64)
          operator delete(v64);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v62 = v61;
    v72 = v62 + 8;
LABEL_101:
    v60[368] = v72;
LABEL_102:
    v82 = 1 << *(_DWORD *)(v3 + 48);
    if (v82 == 2)
    {
      v94 = a1[1];
      v84 = *(_QWORD **)v94;
      v85 = *(unsigned __int16 *)(a1[2] + 24);
      v86 = *(char **)(*(_QWORD *)v94 + 2968);
      v95 = *(_QWORD *)(*(_QWORD *)v94 + 2976);
      if ((unint64_t)v86 >= v95)
      {
        v88 = (char *)v84[370];
        v97 = (v86 - v88) >> 3;
        if ((unint64_t)(v97 + 1) >> 61)
          goto LABEL_424;
        v98 = v95 - (_QWORD)v88;
        v99 = (uint64_t)(v95 - (_QWORD)v88) >> 2;
        if (v99 <= v97 + 1)
          v99 = v97 + 1;
        if (v98 >= 0x7FFFFFFFFFFFFFF8)
          v100 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v100 = v99;
        if (v100)
        {
          v101 = (char *)sub_40FC((uint64_t)(v84 + 372), v100);
          v86 = (char *)v84[371];
          v88 = (char *)v84[370];
        }
        else
        {
          v101 = 0;
        }
        v102 = &v101[8 * v97];
        v103 = &v101[8 * v100];
        *(_QWORD *)v102 = v85;
        v96 = v102 + 8;
        while (v86 != v88)
        {
          v105 = *((_QWORD *)v86 - 1);
          v86 -= 8;
          *((_QWORD *)v102 - 1) = v105;
          v102 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v82 != 1)
        goto LABEL_134;
      v83 = a1[1];
      v84 = *(_QWORD **)v83;
      v85 = *(unsigned __int16 *)(a1[2] + 24);
      v86 = *(char **)(*(_QWORD *)v83 + 2968);
      v87 = *(_QWORD *)(*(_QWORD *)v83 + 2976);
      if ((unint64_t)v86 >= v87)
      {
        v88 = (char *)v84[370];
        v89 = (v86 - v88) >> 3;
        if ((unint64_t)(v89 + 1) >> 61)
          goto LABEL_424;
        v90 = v87 - (_QWORD)v88;
        v91 = (uint64_t)(v87 - (_QWORD)v88) >> 2;
        if (v91 <= v89 + 1)
          v91 = v89 + 1;
        if (v90 >= 0x7FFFFFFFFFFFFFF8)
          v92 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v92 = v91;
        if (v92)
        {
          v93 = (char *)sub_40FC((uint64_t)(v84 + 372), v92);
          v86 = (char *)v84[371];
          v88 = (char *)v84[370];
        }
        else
        {
          v93 = 0;
        }
        v102 = &v93[8 * v89];
        v103 = &v93[8 * v92];
        *(_QWORD *)v102 = v85;
        v96 = v102 + 8;
        while (v86 != v88)
        {
          v104 = *((_QWORD *)v86 - 1);
          v86 -= 8;
          *((_QWORD *)v102 - 1) = v104;
          v102 -= 8;
        }
LABEL_131:
        v84[370] = v102;
        v84[371] = v96;
        v84[372] = v103;
        if (v88)
          operator delete(v88);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v86 = v85;
    v96 = v86 + 8;
LABEL_133:
    v84[371] = v96;
LABEL_134:
    v106 = 1 << *(_DWORD *)(v3 + 48);
    if (v106 == 2)
    {
      v118 = a1[1];
      v108 = *(_QWORD **)v118;
      v109 = *(unsigned __int16 *)(a1[2] + 34);
      v110 = *(char **)(*(_QWORD *)v118 + 2992);
      v119 = *(_QWORD *)(*(_QWORD *)v118 + 3000);
      if ((unint64_t)v110 >= v119)
      {
        v112 = (char *)v108[373];
        v121 = (v110 - v112) >> 3;
        if ((unint64_t)(v121 + 1) >> 61)
          goto LABEL_424;
        v122 = v119 - (_QWORD)v112;
        v123 = (uint64_t)(v119 - (_QWORD)v112) >> 2;
        if (v123 <= v121 + 1)
          v123 = v121 + 1;
        if (v122 >= 0x7FFFFFFFFFFFFFF8)
          v124 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v124 = v123;
        if (v124)
        {
          v125 = (char *)sub_40FC((uint64_t)(v108 + 375), v124);
          v110 = (char *)v108[374];
          v112 = (char *)v108[373];
        }
        else
        {
          v125 = 0;
        }
        v126 = &v125[8 * v121];
        v127 = &v125[8 * v124];
        *(_QWORD *)v126 = v109;
        v120 = v126 + 8;
        while (v110 != v112)
        {
          v129 = *((_QWORD *)v110 - 1);
          v110 -= 8;
          *((_QWORD *)v126 - 1) = v129;
          v126 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v106 != 1)
        goto LABEL_166;
      v107 = a1[1];
      v108 = *(_QWORD **)v107;
      v109 = *(unsigned __int16 *)(a1[2] + 34);
      v110 = *(char **)(*(_QWORD *)v107 + 2992);
      v111 = *(_QWORD *)(*(_QWORD *)v107 + 3000);
      if ((unint64_t)v110 >= v111)
      {
        v112 = (char *)v108[373];
        v113 = (v110 - v112) >> 3;
        if ((unint64_t)(v113 + 1) >> 61)
          goto LABEL_424;
        v114 = v111 - (_QWORD)v112;
        v115 = (uint64_t)(v111 - (_QWORD)v112) >> 2;
        if (v115 <= v113 + 1)
          v115 = v113 + 1;
        if (v114 >= 0x7FFFFFFFFFFFFFF8)
          v116 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v116 = v115;
        if (v116)
        {
          v117 = (char *)sub_40FC((uint64_t)(v108 + 375), v116);
          v110 = (char *)v108[374];
          v112 = (char *)v108[373];
        }
        else
        {
          v117 = 0;
        }
        v126 = &v117[8 * v113];
        v127 = &v117[8 * v116];
        *(_QWORD *)v126 = v109;
        v120 = v126 + 8;
        while (v110 != v112)
        {
          v128 = *((_QWORD *)v110 - 1);
          v110 -= 8;
          *((_QWORD *)v126 - 1) = v128;
          v126 -= 8;
        }
LABEL_163:
        v108[373] = v126;
        v108[374] = v120;
        v108[375] = v127;
        if (v112)
          operator delete(v112);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v110 = v109;
    v120 = v110 + 8;
LABEL_165:
    v108[374] = v120;
LABEL_166:
    v130 = 1 << *(_DWORD *)(v3 + 48);
    if (v130 == 2)
    {
      v142 = a1[1];
      v132 = *(_QWORD **)v142;
      v133 = *(unsigned __int16 *)(a1[2] + 26);
      v134 = *(char **)(*(_QWORD *)v142 + 3016);
      v143 = *(_QWORD *)(*(_QWORD *)v142 + 3024);
      if ((unint64_t)v134 >= v143)
      {
        v136 = (char *)v132[376];
        v145 = (v134 - v136) >> 3;
        if ((unint64_t)(v145 + 1) >> 61)
          goto LABEL_424;
        v146 = v143 - (_QWORD)v136;
        v147 = (uint64_t)(v143 - (_QWORD)v136) >> 2;
        if (v147 <= v145 + 1)
          v147 = v145 + 1;
        if (v146 >= 0x7FFFFFFFFFFFFFF8)
          v148 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v148 = v147;
        if (v148)
        {
          v149 = (char *)sub_40FC((uint64_t)(v132 + 378), v148);
          v134 = (char *)v132[377];
          v136 = (char *)v132[376];
        }
        else
        {
          v149 = 0;
        }
        v150 = &v149[8 * v145];
        v151 = &v149[8 * v148];
        *(_QWORD *)v150 = v133;
        v144 = v150 + 8;
        while (v134 != v136)
        {
          v153 = *((_QWORD *)v134 - 1);
          v134 -= 8;
          *((_QWORD *)v150 - 1) = v153;
          v150 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v130 != 1)
        goto LABEL_198;
      v131 = a1[1];
      v132 = *(_QWORD **)v131;
      v133 = *(unsigned __int16 *)(a1[2] + 26);
      v134 = *(char **)(*(_QWORD *)v131 + 3016);
      v135 = *(_QWORD *)(*(_QWORD *)v131 + 3024);
      if ((unint64_t)v134 >= v135)
      {
        v136 = (char *)v132[376];
        v137 = (v134 - v136) >> 3;
        if ((unint64_t)(v137 + 1) >> 61)
          goto LABEL_424;
        v138 = v135 - (_QWORD)v136;
        v139 = (uint64_t)(v135 - (_QWORD)v136) >> 2;
        if (v139 <= v137 + 1)
          v139 = v137 + 1;
        if (v138 >= 0x7FFFFFFFFFFFFFF8)
          v140 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v140 = v139;
        if (v140)
        {
          v141 = (char *)sub_40FC((uint64_t)(v132 + 378), v140);
          v134 = (char *)v132[377];
          v136 = (char *)v132[376];
        }
        else
        {
          v141 = 0;
        }
        v150 = &v141[8 * v137];
        v151 = &v141[8 * v140];
        *(_QWORD *)v150 = v133;
        v144 = v150 + 8;
        while (v134 != v136)
        {
          v152 = *((_QWORD *)v134 - 1);
          v134 -= 8;
          *((_QWORD *)v150 - 1) = v152;
          v150 -= 8;
        }
LABEL_195:
        v132[376] = v150;
        v132[377] = v144;
        v132[378] = v151;
        if (v136)
          operator delete(v136);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v134 = v133;
    v144 = v134 + 8;
LABEL_197:
    v132[377] = v144;
LABEL_198:
    v154 = 1 << *(_DWORD *)(v3 + 48);
    if (v154 == 2)
    {
      v155 = *(_QWORD **)a1[1];
      v156 = (unsigned __int16)WORD2(*(_QWORD *)(a1[2] + 38));
      v157 = (char *)v155[380];
      v165 = v155[381];
      if ((unint64_t)v157 >= v165)
      {
        v159 = (char *)v155[379];
        v167 = (v157 - v159) >> 3;
        if ((unint64_t)(v167 + 1) >> 61)
          goto LABEL_424;
        v168 = v165 - (_QWORD)v159;
        v169 = (uint64_t)(v165 - (_QWORD)v159) >> 2;
        if (v169 <= v167 + 1)
          v169 = v167 + 1;
        if (v168 >= 0x7FFFFFFFFFFFFFF8)
          v170 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v170 = v169;
        if (v170)
        {
          v171 = (char *)sub_40FC((uint64_t)(v155 + 381), v170);
          v157 = (char *)v155[380];
          v159 = (char *)v155[379];
        }
        else
        {
          v171 = 0;
        }
        v172 = &v171[8 * v167];
        v173 = &v171[8 * v170];
        *(_QWORD *)v172 = v156;
        v166 = v172 + 8;
        while (v157 != v159)
        {
          v175 = *((_QWORD *)v157 - 1);
          v157 -= 8;
          *((_QWORD *)v172 - 1) = v175;
          v172 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v154 != 1)
        goto LABEL_230;
      v155 = *(_QWORD **)a1[1];
      v156 = (unsigned __int16)WORD2(*(_QWORD *)(a1[2] + 38));
      v157 = (char *)v155[380];
      v158 = v155[381];
      if ((unint64_t)v157 >= v158)
      {
        v159 = (char *)v155[379];
        v160 = (v157 - v159) >> 3;
        if ((unint64_t)(v160 + 1) >> 61)
          goto LABEL_424;
        v161 = v158 - (_QWORD)v159;
        v162 = (uint64_t)(v158 - (_QWORD)v159) >> 2;
        if (v162 <= v160 + 1)
          v162 = v160 + 1;
        if (v161 >= 0x7FFFFFFFFFFFFFF8)
          v163 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v163 = v162;
        if (v163)
        {
          v164 = (char *)sub_40FC((uint64_t)(v155 + 381), v163);
          v157 = (char *)v155[380];
          v159 = (char *)v155[379];
        }
        else
        {
          v164 = 0;
        }
        v172 = &v164[8 * v160];
        v173 = &v164[8 * v163];
        *(_QWORD *)v172 = v156;
        v166 = v172 + 8;
        while (v157 != v159)
        {
          v174 = *((_QWORD *)v157 - 1);
          v157 -= 8;
          *((_QWORD *)v172 - 1) = v174;
          v172 -= 8;
        }
LABEL_227:
        v155[379] = v172;
        v155[380] = v166;
        v155[381] = v173;
        if (v159)
          operator delete(v159);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v157 = v156;
    v166 = v157 + 8;
LABEL_229:
    v155[380] = v166;
LABEL_230:
    v176 = 1 << *(_DWORD *)(v3 + 48);
    if (v176 == 2)
    {
      v177 = *(_QWORD **)a1[1];
      v178 = WORD1(*(_QWORD *)(a1[2] + 38));
      v179 = (char *)v177[383];
      v187 = v177[384];
      if ((unint64_t)v179 >= v187)
      {
        v181 = (char *)v177[382];
        v189 = (v179 - v181) >> 3;
        if ((unint64_t)(v189 + 1) >> 61)
          goto LABEL_424;
        v190 = v187 - (_QWORD)v181;
        v191 = (uint64_t)(v187 - (_QWORD)v181) >> 2;
        if (v191 <= v189 + 1)
          v191 = v189 + 1;
        if (v190 >= 0x7FFFFFFFFFFFFFF8)
          v192 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v192 = v191;
        if (v192)
        {
          v193 = (char *)sub_40FC((uint64_t)(v177 + 384), v192);
          v179 = (char *)v177[383];
          v181 = (char *)v177[382];
        }
        else
        {
          v193 = 0;
        }
        v194 = &v193[8 * v189];
        v195 = &v193[8 * v192];
        *(_QWORD *)v194 = v178;
        v188 = v194 + 8;
        while (v179 != v181)
        {
          v197 = *((_QWORD *)v179 - 1);
          v179 -= 8;
          *((_QWORD *)v194 - 1) = v197;
          v194 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v176 != 1)
        goto LABEL_262;
      v177 = *(_QWORD **)a1[1];
      v178 = WORD1(*(_QWORD *)(a1[2] + 38));
      v179 = (char *)v177[383];
      v180 = v177[384];
      if ((unint64_t)v179 >= v180)
      {
        v181 = (char *)v177[382];
        v182 = (v179 - v181) >> 3;
        if ((unint64_t)(v182 + 1) >> 61)
          goto LABEL_424;
        v183 = v180 - (_QWORD)v181;
        v184 = (uint64_t)(v180 - (_QWORD)v181) >> 2;
        if (v184 <= v182 + 1)
          v184 = v182 + 1;
        if (v183 >= 0x7FFFFFFFFFFFFFF8)
          v185 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v185 = v184;
        if (v185)
        {
          v186 = (char *)sub_40FC((uint64_t)(v177 + 384), v185);
          v179 = (char *)v177[383];
          v181 = (char *)v177[382];
        }
        else
        {
          v186 = 0;
        }
        v194 = &v186[8 * v182];
        v195 = &v186[8 * v185];
        *(_QWORD *)v194 = v178;
        v188 = v194 + 8;
        while (v179 != v181)
        {
          v196 = *((_QWORD *)v179 - 1);
          v179 -= 8;
          *((_QWORD *)v194 - 1) = v196;
          v194 -= 8;
        }
LABEL_259:
        v177[382] = v194;
        v177[383] = v188;
        v177[384] = v195;
        if (v181)
          operator delete(v181);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v179 = v178;
    v188 = v179 + 8;
LABEL_261:
    v177[383] = v188;
LABEL_262:
    v198 = 1 << *(_DWORD *)(v3 + 48);
    if (v198 == 2)
    {
      v210 = a1[1];
      v200 = *(_QWORD **)v210;
      v201 = *(unsigned __int16 *)(a1[2] + 36);
      v202 = *(char **)(*(_QWORD *)v210 + 3088);
      v211 = *(_QWORD *)(*(_QWORD *)v210 + 3096);
      if ((unint64_t)v202 >= v211)
      {
        v204 = (char *)v200[385];
        v213 = (v202 - v204) >> 3;
        if ((unint64_t)(v213 + 1) >> 61)
          goto LABEL_424;
        v214 = v211 - (_QWORD)v204;
        v215 = (uint64_t)(v211 - (_QWORD)v204) >> 2;
        if (v215 <= v213 + 1)
          v215 = v213 + 1;
        if (v214 >= 0x7FFFFFFFFFFFFFF8)
          v216 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v216 = v215;
        if (v216)
        {
          v217 = (char *)sub_40FC((uint64_t)(v200 + 387), v216);
          v202 = (char *)v200[386];
          v204 = (char *)v200[385];
        }
        else
        {
          v217 = 0;
        }
        v218 = &v217[8 * v213];
        v219 = &v217[8 * v216];
        *(_QWORD *)v218 = v201;
        v212 = v218 + 8;
        while (v202 != v204)
        {
          v221 = *((_QWORD *)v202 - 1);
          v202 -= 8;
          *((_QWORD *)v218 - 1) = v221;
          v218 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v198 != 1)
        goto LABEL_294;
      v199 = a1[1];
      v200 = *(_QWORD **)v199;
      v201 = *(unsigned __int16 *)(a1[2] + 36);
      v202 = *(char **)(*(_QWORD *)v199 + 3088);
      v203 = *(_QWORD *)(*(_QWORD *)v199 + 3096);
      if ((unint64_t)v202 >= v203)
      {
        v204 = (char *)v200[385];
        v205 = (v202 - v204) >> 3;
        if ((unint64_t)(v205 + 1) >> 61)
          goto LABEL_424;
        v206 = v203 - (_QWORD)v204;
        v207 = (uint64_t)(v203 - (_QWORD)v204) >> 2;
        if (v207 <= v205 + 1)
          v207 = v205 + 1;
        if (v206 >= 0x7FFFFFFFFFFFFFF8)
          v208 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v208 = v207;
        if (v208)
        {
          v209 = (char *)sub_40FC((uint64_t)(v200 + 387), v208);
          v202 = (char *)v200[386];
          v204 = (char *)v200[385];
        }
        else
        {
          v209 = 0;
        }
        v218 = &v209[8 * v205];
        v219 = &v209[8 * v208];
        *(_QWORD *)v218 = v201;
        v212 = v218 + 8;
        while (v202 != v204)
        {
          v220 = *((_QWORD *)v202 - 1);
          v202 -= 8;
          *((_QWORD *)v218 - 1) = v220;
          v218 -= 8;
        }
LABEL_291:
        v200[385] = v218;
        v200[386] = v212;
        v200[387] = v219;
        if (v204)
          operator delete(v204);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v202 = v201;
    v212 = v202 + 8;
LABEL_293:
    v200[386] = v212;
LABEL_294:
    v222 = 1 << *(_DWORD *)(v3 + 48);
    if (v222 == 2)
    {
      v234 = a1[1];
      v224 = *(_QWORD **)v234;
      v225 = *(unsigned __int16 *)(a1[2] + 28);
      v226 = *(char **)(*(_QWORD *)v234 + 3112);
      v235 = *(_QWORD *)(*(_QWORD *)v234 + 3120);
      if ((unint64_t)v226 >= v235)
      {
        v228 = (char *)v224[388];
        v237 = (v226 - v228) >> 3;
        if ((unint64_t)(v237 + 1) >> 61)
          goto LABEL_424;
        v238 = v235 - (_QWORD)v228;
        v239 = (uint64_t)(v235 - (_QWORD)v228) >> 2;
        if (v239 <= v237 + 1)
          v239 = v237 + 1;
        if (v238 >= 0x7FFFFFFFFFFFFFF8)
          v240 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v240 = v239;
        if (v240)
        {
          v241 = (char *)sub_40FC((uint64_t)(v224 + 390), v240);
          v226 = (char *)v224[389];
          v228 = (char *)v224[388];
        }
        else
        {
          v241 = 0;
        }
        v242 = &v241[8 * v237];
        v243 = &v241[8 * v240];
        *(_QWORD *)v242 = v225;
        v236 = v242 + 8;
        while (v226 != v228)
        {
          v245 = *((_QWORD *)v226 - 1);
          v226 -= 8;
          *((_QWORD *)v242 - 1) = v245;
          v242 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v222 != 1)
        goto LABEL_326;
      v223 = a1[1];
      v224 = *(_QWORD **)v223;
      v225 = *(unsigned __int16 *)(a1[2] + 28);
      v226 = *(char **)(*(_QWORD *)v223 + 3112);
      v227 = *(_QWORD *)(*(_QWORD *)v223 + 3120);
      if ((unint64_t)v226 >= v227)
      {
        v228 = (char *)v224[388];
        v229 = (v226 - v228) >> 3;
        if ((unint64_t)(v229 + 1) >> 61)
          goto LABEL_424;
        v230 = v227 - (_QWORD)v228;
        v231 = (uint64_t)(v227 - (_QWORD)v228) >> 2;
        if (v231 <= v229 + 1)
          v231 = v229 + 1;
        if (v230 >= 0x7FFFFFFFFFFFFFF8)
          v232 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v232 = v231;
        if (v232)
        {
          v233 = (char *)sub_40FC((uint64_t)(v224 + 390), v232);
          v226 = (char *)v224[389];
          v228 = (char *)v224[388];
        }
        else
        {
          v233 = 0;
        }
        v242 = &v233[8 * v229];
        v243 = &v233[8 * v232];
        *(_QWORD *)v242 = v225;
        v236 = v242 + 8;
        while (v226 != v228)
        {
          v244 = *((_QWORD *)v226 - 1);
          v226 -= 8;
          *((_QWORD *)v242 - 1) = v244;
          v242 -= 8;
        }
LABEL_323:
        v224[388] = v242;
        v224[389] = v236;
        v224[390] = v243;
        if (v228)
          operator delete(v228);
        goto LABEL_325;
      }
    }
    *(_QWORD *)v226 = v225;
    v236 = v226 + 8;
LABEL_325:
    v224[389] = v236;
LABEL_326:
    v246 = 1 << *(_DWORD *)(v3 + 48);
    if (v246 == 2)
    {
      v258 = a1[1];
      v248 = *(_QWORD **)v258;
      v249 = *(unsigned __int16 *)(a1[2] + 38);
      v250 = *(char **)(*(_QWORD *)v258 + 3136);
      v259 = *(_QWORD *)(*(_QWORD *)v258 + 3144);
      if ((unint64_t)v250 >= v259)
      {
        v252 = (char *)v248[391];
        v261 = (v250 - v252) >> 3;
        if ((unint64_t)(v261 + 1) >> 61)
          goto LABEL_424;
        v262 = v259 - (_QWORD)v252;
        v263 = (uint64_t)(v259 - (_QWORD)v252) >> 2;
        if (v263 <= v261 + 1)
          v263 = v261 + 1;
        if (v262 >= 0x7FFFFFFFFFFFFFF8)
          v264 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v264 = v263;
        if (v264)
        {
          v265 = (char *)sub_40FC((uint64_t)(v248 + 393), v264);
          v250 = (char *)v248[392];
          v252 = (char *)v248[391];
        }
        else
        {
          v265 = 0;
        }
        v266 = &v265[8 * v261];
        v267 = &v265[8 * v264];
        *(_QWORD *)v266 = v249;
        v260 = v266 + 8;
        while (v250 != v252)
        {
          v269 = *((_QWORD *)v250 - 1);
          v250 -= 8;
          *((_QWORD *)v266 - 1) = v269;
          v266 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v246 != 1)
        goto LABEL_358;
      v247 = a1[1];
      v248 = *(_QWORD **)v247;
      v249 = *(unsigned __int16 *)(a1[2] + 38);
      v250 = *(char **)(*(_QWORD *)v247 + 3136);
      v251 = *(_QWORD *)(*(_QWORD *)v247 + 3144);
      if ((unint64_t)v250 >= v251)
      {
        v252 = (char *)v248[391];
        v253 = (v250 - v252) >> 3;
        if ((unint64_t)(v253 + 1) >> 61)
          goto LABEL_424;
        v254 = v251 - (_QWORD)v252;
        v255 = (uint64_t)(v251 - (_QWORD)v252) >> 2;
        if (v255 <= v253 + 1)
          v255 = v253 + 1;
        if (v254 >= 0x7FFFFFFFFFFFFFF8)
          v256 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v256 = v255;
        if (v256)
        {
          v257 = (char *)sub_40FC((uint64_t)(v248 + 393), v256);
          v250 = (char *)v248[392];
          v252 = (char *)v248[391];
        }
        else
        {
          v257 = 0;
        }
        v266 = &v257[8 * v253];
        v267 = &v257[8 * v256];
        *(_QWORD *)v266 = v249;
        v260 = v266 + 8;
        while (v250 != v252)
        {
          v268 = *((_QWORD *)v250 - 1);
          v250 -= 8;
          *((_QWORD *)v266 - 1) = v268;
          v266 -= 8;
        }
LABEL_355:
        v248[391] = v266;
        v248[392] = v260;
        v248[393] = v267;
        if (v252)
          operator delete(v252);
        goto LABEL_357;
      }
    }
    *(_QWORD *)v250 = v249;
    v260 = v250 + 8;
LABEL_357:
    v248[392] = v260;
LABEL_358:
    v270 = 1 << *(_DWORD *)(v3 + 48);
    if (v270 == 2)
    {
      v282 = a1[1];
      v272 = *(_QWORD **)v282;
      v273 = *(unsigned __int16 *)(a1[2] + 30);
      v274 = *(char **)(*(_QWORD *)v282 + 3160);
      v283 = *(_QWORD *)(*(_QWORD *)v282 + 3168);
      if ((unint64_t)v274 >= v283)
      {
        v276 = (char *)v272[394];
        v285 = (v274 - v276) >> 3;
        if ((unint64_t)(v285 + 1) >> 61)
          goto LABEL_424;
        v286 = v283 - (_QWORD)v276;
        v287 = (uint64_t)(v283 - (_QWORD)v276) >> 2;
        if (v287 <= v285 + 1)
          v287 = v285 + 1;
        if (v286 >= 0x7FFFFFFFFFFFFFF8)
          v288 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v288 = v287;
        if (v288)
        {
          v289 = (char *)sub_40FC((uint64_t)(v272 + 396), v288);
          v274 = (char *)v272[395];
          v276 = (char *)v272[394];
        }
        else
        {
          v289 = 0;
        }
        v290 = &v289[8 * v285];
        v291 = &v289[8 * v288];
        *(_QWORD *)v290 = v273;
        v284 = v290 + 8;
        while (v274 != v276)
        {
          v293 = *((_QWORD *)v274 - 1);
          v274 -= 8;
          *((_QWORD *)v290 - 1) = v293;
          v290 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v270 != 1)
        goto LABEL_390;
      v271 = a1[1];
      v272 = *(_QWORD **)v271;
      v273 = *(unsigned __int16 *)(a1[2] + 30);
      v274 = *(char **)(*(_QWORD *)v271 + 3160);
      v275 = *(_QWORD *)(*(_QWORD *)v271 + 3168);
      if ((unint64_t)v274 >= v275)
      {
        v276 = (char *)v272[394];
        v277 = (v274 - v276) >> 3;
        if ((unint64_t)(v277 + 1) >> 61)
          goto LABEL_424;
        v278 = v275 - (_QWORD)v276;
        v279 = (uint64_t)(v275 - (_QWORD)v276) >> 2;
        if (v279 <= v277 + 1)
          v279 = v277 + 1;
        if (v278 >= 0x7FFFFFFFFFFFFFF8)
          v280 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v280 = v279;
        if (v280)
        {
          v281 = (char *)sub_40FC((uint64_t)(v272 + 396), v280);
          v274 = (char *)v272[395];
          v276 = (char *)v272[394];
        }
        else
        {
          v281 = 0;
        }
        v290 = &v281[8 * v277];
        v291 = &v281[8 * v280];
        *(_QWORD *)v290 = v273;
        v284 = v290 + 8;
        while (v274 != v276)
        {
          v292 = *((_QWORD *)v274 - 1);
          v274 -= 8;
          *((_QWORD *)v290 - 1) = v292;
          v290 -= 8;
        }
LABEL_387:
        v272[394] = v290;
        v272[395] = v284;
        v272[396] = v291;
        if (v276)
          operator delete(v276);
        goto LABEL_389;
      }
    }
    *(_QWORD *)v274 = v273;
    v284 = v274 + 8;
LABEL_389:
    v272[395] = v284;
LABEL_390:
    v294 = 1 << *(_DWORD *)(v3 + 48);
    if (v294 == 2)
    {
      v307 = a1[2];
      v296 = *(_QWORD **)a1[1];
      *((_QWORD *)&v308 + 1) = *(unsigned __int8 *)(v307 + 46);
      *(_QWORD *)&v308 = *(_QWORD *)(v307 + 38);
      v298 = (v308 >> 48) & 0xFFFFF;
      v299 = (char *)v296[398];
      v309 = v296[399];
      if ((unint64_t)v299 >= v309)
      {
        v301 = (char *)v296[397];
        v311 = (v299 - v301) >> 3;
        if (!((unint64_t)(v311 + 1) >> 61))
        {
          v312 = v309 - (_QWORD)v301;
          v313 = (uint64_t)(v309 - (_QWORD)v301) >> 2;
          if (v313 <= v311 + 1)
            v313 = v311 + 1;
          if (v312 >= 0x7FFFFFFFFFFFFFF8)
            v314 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v314 = v313;
          if (v314)
          {
            v315 = (char *)sub_40FC((uint64_t)(v296 + 399), v314);
            v299 = (char *)v296[398];
            v301 = (char *)v296[397];
          }
          else
          {
            v315 = 0;
          }
          v316 = &v315[8 * v311];
          v317 = &v315[8 * v314];
          *(_QWORD *)v316 = v298;
          v310 = v316 + 8;
          while (v299 != v301)
          {
            v319 = *((_QWORD *)v299 - 1);
            v299 -= 8;
            *((_QWORD *)v316 - 1) = v319;
            v316 -= 8;
          }
          goto LABEL_419;
        }
LABEL_424:
        sub_4074();
      }
    }
    else
    {
      if (v294 != 1)
      {
LABEL_422:
        *a2 = 1;
        return;
      }
      v295 = a1[2];
      v296 = *(_QWORD **)a1[1];
      *((_QWORD *)&v297 + 1) = *(unsigned __int8 *)(v295 + 46);
      *(_QWORD *)&v297 = *(_QWORD *)(v295 + 38);
      v298 = (v297 >> 48) & 0xFFFFF;
      v299 = (char *)v296[398];
      v300 = v296[399];
      if ((unint64_t)v299 >= v300)
      {
        v301 = (char *)v296[397];
        v302 = (v299 - v301) >> 3;
        if (!((unint64_t)(v302 + 1) >> 61))
        {
          v303 = v300 - (_QWORD)v301;
          v304 = (uint64_t)(v300 - (_QWORD)v301) >> 2;
          if (v304 <= v302 + 1)
            v304 = v302 + 1;
          if (v303 >= 0x7FFFFFFFFFFFFFF8)
            v305 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v305 = v304;
          if (v305)
          {
            v306 = (char *)sub_40FC((uint64_t)(v296 + 399), v305);
            v299 = (char *)v296[398];
            v301 = (char *)v296[397];
          }
          else
          {
            v306 = 0;
          }
          v316 = &v306[8 * v302];
          v317 = &v306[8 * v305];
          *(_QWORD *)v316 = v298;
          v310 = v316 + 8;
          while (v299 != v301)
          {
            v318 = *((_QWORD *)v299 - 1);
            v299 -= 8;
            *((_QWORD *)v316 - 1) = v318;
            v316 -= 8;
          }
LABEL_419:
          v296[397] = v316;
          v296[398] = v310;
          v296[399] = v317;
          if (v301)
            operator delete(v301);
          goto LABEL_421;
        }
        goto LABEL_424;
      }
    }
    *(_QWORD *)v299 = v298;
    v310 = v299 + 8;
LABEL_421:
    v296[398] = v310;
    goto LABEL_422;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[362] - 8) += *(_DWORD *)(v17 + 48) & 0x7FFFF;
    *(_QWORD *)(v19[365] - 8) += *(unsigned __int16 *)(v17 + 22);
    *(_QWORD *)(v19[368] - 8) += *(unsigned __int16 *)(v17 + 32);
    *(_QWORD *)(v19[371] - 8) += *(unsigned __int16 *)(v17 + 24);
    *(_QWORD *)(v19[374] - 8) += *(unsigned __int16 *)(v17 + 34);
    *(_QWORD *)(v19[377] - 8) += *(unsigned __int16 *)(v17 + 26);
    *(_QWORD *)(v19[380] - 8) += (unsigned __int16)WORD2(*(_QWORD *)(v17 + 38));
    *(_QWORD *)(v19[383] - 8) += WORD1(*(_QWORD *)(v17 + 38));
    *(_QWORD *)(v19[386] - 8) += *(unsigned __int16 *)(v17 + 36);
    *(_QWORD *)(v19[389] - 8) += *(unsigned __int16 *)(v17 + 28);
    v20 = a1[2];
    v21 = (_QWORD *)*v18;
    *(_QWORD *)(v21[392] - 8) += *(unsigned __int16 *)(v20 + 38);
    *(_QWORD *)(v21[395] - 8) += *(unsigned __int16 *)(v20 + 30);
    *((_QWORD *)&v22 + 1) = *(unsigned __int8 *)(v20 + 46);
    *(_QWORD *)&v22 = *(_QWORD *)(v20 + 38);
    *(_QWORD *)(v21[398] - 8) += (v22 >> 48) & 0xFFFFF;
  }
}

void sub_DE8A8(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  uint64_t *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  unint64_t *v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  uint64_t *v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  char *v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t v295;
  int *v296;
  int **v297;
  uint64_t v298;
  unint64_t v299;
  int v300;
  unint64_t v301;
  _QWORD *v302;

  v4 = *a1;
  if (*a2 == 1)
  {
    v297 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v296 = *v297;
    v298 = (char *)v297[1] - (char *)*v297;
    if (v298)
    {
      v299 = v298 >> 2;
      if (v299 <= 1)
        v299 = 1;
      do
      {
        v300 = *v296++;
        switch(v300)
        {
          case 211:
            v301 = *(_WORD *)(a1[3] + 58) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 5848);
            goto LABEL_410;
          case 212:
            v301 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 5872);
            goto LABEL_410;
          case 213:
            v301 = *(_WORD *)(a1[3] + 60) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 5896);
            goto LABEL_410;
          case 214:
            v301 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 5920);
            goto LABEL_410;
          case 215:
            v301 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 5944);
            goto LABEL_410;
          case 216:
            v301 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 5968);
            goto LABEL_410;
          case 217:
            v301 = *(_DWORD *)(a1[3] + 24) & 0x3FFFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 5992);
            goto LABEL_410;
          case 218:
            v301 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6016);
            goto LABEL_410;
          case 219:
            v301 = *(_WORD *)(a1[3] + 34) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6040);
            goto LABEL_410;
          case 220:
            v301 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6064);
            goto LABEL_410;
          case 221:
            v301 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6088);
            goto LABEL_410;
          case 222:
            v301 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6112);
            goto LABEL_410;
          case 223:
            v301 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6136);
            goto LABEL_410;
          case 224:
            v301 = ((unint64_t)*(unsigned int *)(a1[3] + 20) >> 2) & 0xFFFFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6160);
            goto LABEL_410;
          case 225:
            v301 = *(_WORD *)(a1[3] + 68) & 0x7FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6184);
            goto LABEL_410;
          case 226:
            v301 = *(_WORD *)(a1[3] + 50) & 0xFFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6208);
            goto LABEL_410;
          case 227:
            v301 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6232);
            goto LABEL_410;
          case 228:
            v301 = *(_WORD *)(a1[3] + 64) & 0x3FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6256);
            goto LABEL_410;
          case 229:
            v301 = *(_WORD *)(a1[3] + 46) & 0x3FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6280);
            goto LABEL_410;
          case 230:
            v301 = *(_WORD *)(a1[3] + 66) & 0x3FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6304);
            goto LABEL_410;
          case 231:
            v301 = *(_WORD *)(a1[3] + 48) & 0x3FF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6328);
            goto LABEL_410;
          case 232:
            v301 = *(_DWORD *)(a1[3] + 28) & 0x7FFFF;
            v302 = (_QWORD *)(*(_QWORD *)a1[2] + 6352);
LABEL_410:
            *(_QWORD *)(*v302 - 8) += v301;
            break;
          default:
            break;
        }
        --v299;
      }
      while (v299);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xD3:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 58) & 0x3FFF;
            v12 = (char *)v10[731];
            v13 = v10[732];
            if ((unint64_t)v12 >= v13)
            {
              v120 = (char *)v10[730];
              v121 = (v12 - v120) >> 3;
              if ((unint64_t)(v121 + 1) >> 61)
                goto LABEL_414;
              v122 = v13 - (_QWORD)v120;
              v123 = (uint64_t)(v13 - (_QWORD)v120) >> 2;
              if (v123 <= v121 + 1)
                v123 = v121 + 1;
              if (v122 >= 0x7FFFFFFFFFFFFFF8)
                v124 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v124 = v123;
              if (v124)
              {
                v125 = (char *)sub_40FC((uint64_t)(v10 + 732), v124);
                v12 = (char *)v10[731];
                v120 = (char *)v10[730];
              }
              else
              {
                v125 = 0;
              }
              v252 = &v125[8 * v121];
              *(_QWORD *)v252 = v11;
              v14 = v252 + 8;
              while (v12 != v120)
              {
                v253 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v252 - 1) = v253;
                v252 -= 8;
              }
              v10[730] = v252;
              v10[731] = v14;
              v10[732] = &v125[8 * v124];
              if (v120)
                operator delete(v120);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[731] = v14;
            break;
          case 0xD4:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v17 = (char *)v15[734];
            v18 = v15[735];
            if ((unint64_t)v17 >= v18)
            {
              v126 = (char *)v15[733];
              v127 = (v17 - v126) >> 3;
              if ((unint64_t)(v127 + 1) >> 61)
                goto LABEL_414;
              v128 = v18 - (_QWORD)v126;
              v129 = (uint64_t)(v18 - (_QWORD)v126) >> 2;
              if (v129 <= v127 + 1)
                v129 = v127 + 1;
              if (v128 >= 0x7FFFFFFFFFFFFFF8)
                v130 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v130 = v129;
              if (v130)
              {
                v131 = (char *)sub_40FC((uint64_t)(v15 + 735), v130);
                v17 = (char *)v15[734];
                v126 = (char *)v15[733];
              }
              else
              {
                v131 = 0;
              }
              v254 = &v131[8 * v127];
              *(_QWORD *)v254 = v16;
              v19 = v254 + 8;
              while (v17 != v126)
              {
                v255 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v254 - 1) = v255;
                v254 -= 8;
              }
              v15[733] = v254;
              v15[734] = v19;
              v15[735] = &v131[8 * v130];
              if (v126)
                operator delete(v126);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[734] = v19;
            break;
          case 0xD5:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 60) & 0x3FFF;
            v22 = (char *)v20[737];
            v23 = v20[738];
            if ((unint64_t)v22 >= v23)
            {
              v132 = (char *)v20[736];
              v133 = (v22 - v132) >> 3;
              if ((unint64_t)(v133 + 1) >> 61)
                goto LABEL_414;
              v134 = v23 - (_QWORD)v132;
              v135 = (uint64_t)(v23 - (_QWORD)v132) >> 2;
              if (v135 <= v133 + 1)
                v135 = v133 + 1;
              if (v134 >= 0x7FFFFFFFFFFFFFF8)
                v136 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v136 = v135;
              if (v136)
              {
                v137 = (char *)sub_40FC((uint64_t)(v20 + 738), v136);
                v22 = (char *)v20[737];
                v132 = (char *)v20[736];
              }
              else
              {
                v137 = 0;
              }
              v256 = &v137[8 * v133];
              *(_QWORD *)v256 = v21;
              v24 = v256 + 8;
              while (v22 != v132)
              {
                v257 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v256 - 1) = v257;
                v256 -= 8;
              }
              v20[736] = v256;
              v20[737] = v24;
              v20[738] = &v137[8 * v136];
              if (v132)
                operator delete(v132);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[737] = v24;
            break;
          case 0xD6:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v27 = (char *)v25[740];
            v28 = v25[741];
            if ((unint64_t)v27 >= v28)
            {
              v138 = (char *)v25[739];
              v139 = (v27 - v138) >> 3;
              if ((unint64_t)(v139 + 1) >> 61)
                goto LABEL_414;
              v140 = v28 - (_QWORD)v138;
              v141 = (uint64_t)(v28 - (_QWORD)v138) >> 2;
              if (v141 <= v139 + 1)
                v141 = v139 + 1;
              if (v140 >= 0x7FFFFFFFFFFFFFF8)
                v142 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v142 = v141;
              if (v142)
              {
                v143 = (char *)sub_40FC((uint64_t)(v25 + 741), v142);
                v27 = (char *)v25[740];
                v138 = (char *)v25[739];
              }
              else
              {
                v143 = 0;
              }
              v258 = &v143[8 * v139];
              *(_QWORD *)v258 = v26;
              v29 = v258 + 8;
              while (v27 != v138)
              {
                v259 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v258 - 1) = v259;
                v258 -= 8;
              }
              v25[739] = v258;
              v25[740] = v29;
              v25[741] = &v143[8 * v142];
              if (v138)
                operator delete(v138);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[740] = v29;
            break;
          case 0xD7:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            v32 = (char *)v30[743];
            v33 = v30[744];
            if ((unint64_t)v32 >= v33)
            {
              v144 = (char *)v30[742];
              v145 = (v32 - v144) >> 3;
              if ((unint64_t)(v145 + 1) >> 61)
                goto LABEL_414;
              v146 = v33 - (_QWORD)v144;
              v147 = (uint64_t)(v33 - (_QWORD)v144) >> 2;
              if (v147 <= v145 + 1)
                v147 = v145 + 1;
              if (v146 >= 0x7FFFFFFFFFFFFFF8)
                v148 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v148 = v147;
              if (v148)
              {
                v149 = (char *)sub_40FC((uint64_t)(v30 + 744), v148);
                v32 = (char *)v30[743];
                v144 = (char *)v30[742];
              }
              else
              {
                v149 = 0;
              }
              v260 = &v149[8 * v145];
              *(_QWORD *)v260 = v31;
              v34 = v260 + 8;
              while (v32 != v144)
              {
                v261 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v260 - 1) = v261;
                v260 -= 8;
              }
              v30[742] = v260;
              v30[743] = v34;
              v30[744] = &v149[8 * v148];
              if (v144)
                operator delete(v144);
            }
            else
            {
              *(_QWORD *)v32 = v31;
              v34 = v32 + 8;
            }
            v30[743] = v34;
            break;
          case 0xD8:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            v37 = (char *)v35[746];
            v38 = v35[747];
            if ((unint64_t)v37 >= v38)
            {
              v150 = (char *)v35[745];
              v151 = (v37 - v150) >> 3;
              if ((unint64_t)(v151 + 1) >> 61)
                goto LABEL_414;
              v152 = v38 - (_QWORD)v150;
              v153 = (uint64_t)(v38 - (_QWORD)v150) >> 2;
              if (v153 <= v151 + 1)
                v153 = v151 + 1;
              if (v152 >= 0x7FFFFFFFFFFFFFF8)
                v154 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v154 = v153;
              if (v154)
              {
                v155 = (char *)sub_40FC((uint64_t)(v35 + 747), v154);
                v37 = (char *)v35[746];
                v150 = (char *)v35[745];
              }
              else
              {
                v155 = 0;
              }
              v262 = &v155[8 * v151];
              *(_QWORD *)v262 = v36;
              v39 = v262 + 8;
              while (v37 != v150)
              {
                v263 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v262 - 1) = v263;
                v262 -= 8;
              }
              v35[745] = v262;
              v35[746] = v39;
              v35[747] = &v155[8 * v154];
              if (v150)
                operator delete(v150);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[746] = v39;
            break;
          case 0xD9:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFLL;
            v42 = (uint64_t *)v40[749];
            v43 = v40[750];
            if ((unint64_t)v42 >= v43)
            {
              v156 = (uint64_t *)v40[748];
              v157 = v42 - v156;
              if ((unint64_t)(v157 + 1) >> 61)
                goto LABEL_414;
              v158 = v43 - (_QWORD)v156;
              v159 = (uint64_t)(v43 - (_QWORD)v156) >> 2;
              if (v159 <= v157 + 1)
                v159 = v157 + 1;
              if (v158 >= 0x7FFFFFFFFFFFFFF8)
                v160 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v160 = v159;
              if (v160)
              {
                v161 = (char *)sub_40FC((uint64_t)(v40 + 750), v160);
                v42 = (uint64_t *)v40[749];
                v156 = (uint64_t *)v40[748];
              }
              else
              {
                v161 = 0;
              }
              v264 = (uint64_t *)&v161[8 * v157];
              *v264 = v41;
              v44 = v264 + 1;
              while (v42 != v156)
              {
                v265 = *--v42;
                *--v264 = v265;
              }
              v40[748] = v264;
              v40[749] = v44;
              v40[750] = &v161[8 * v160];
              if (v156)
                operator delete(v156);
            }
            else
            {
              *v42 = v41;
              v44 = v42 + 1;
            }
            v40[749] = v44;
            break;
          case 0xDA:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            v47 = (char *)v45[752];
            v48 = v45[753];
            if ((unint64_t)v47 >= v48)
            {
              v162 = (char *)v45[751];
              v163 = (v47 - v162) >> 3;
              if ((unint64_t)(v163 + 1) >> 61)
                goto LABEL_414;
              v164 = v48 - (_QWORD)v162;
              v165 = (uint64_t)(v48 - (_QWORD)v162) >> 2;
              if (v165 <= v163 + 1)
                v165 = v163 + 1;
              if (v164 >= 0x7FFFFFFFFFFFFFF8)
                v166 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v166 = v165;
              if (v166)
              {
                v167 = (char *)sub_40FC((uint64_t)(v45 + 753), v166);
                v47 = (char *)v45[752];
                v162 = (char *)v45[751];
              }
              else
              {
                v167 = 0;
              }
              v266 = &v167[8 * v163];
              *(_QWORD *)v266 = v46;
              v49 = v266 + 8;
              while (v47 != v162)
              {
                v267 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v266 - 1) = v267;
                v266 -= 8;
              }
              v45[751] = v266;
              v45[752] = v49;
              v45[753] = &v167[8 * v166];
              if (v162)
                operator delete(v162);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[752] = v49;
            break;
          case 0xDB:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_WORD *)(a1[3] + 34) & 0x3FFF;
            v52 = (char *)v50[755];
            v53 = v50[756];
            if ((unint64_t)v52 >= v53)
            {
              v168 = (char *)v50[754];
              v169 = (v52 - v168) >> 3;
              if ((unint64_t)(v169 + 1) >> 61)
                goto LABEL_414;
              v170 = v53 - (_QWORD)v168;
              v171 = (uint64_t)(v53 - (_QWORD)v168) >> 2;
              if (v171 <= v169 + 1)
                v171 = v169 + 1;
              if (v170 >= 0x7FFFFFFFFFFFFFF8)
                v172 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v172 = v171;
              if (v172)
              {
                v173 = (char *)sub_40FC((uint64_t)(v50 + 756), v172);
                v52 = (char *)v50[755];
                v168 = (char *)v50[754];
              }
              else
              {
                v173 = 0;
              }
              v268 = &v173[8 * v169];
              *(_QWORD *)v268 = v51;
              v54 = v268 + 8;
              while (v52 != v168)
              {
                v269 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v268 - 1) = v269;
                v268 -= 8;
              }
              v50[754] = v268;
              v50[755] = v54;
              v50[756] = &v173[8 * v172];
              if (v168)
                operator delete(v168);
            }
            else
            {
              *(_QWORD *)v52 = v51;
              v54 = v52 + 8;
            }
            v50[755] = v54;
            break;
          case 0xDC:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            v57 = (char *)v55[758];
            v58 = v55[759];
            if ((unint64_t)v57 >= v58)
            {
              v174 = (char *)v55[757];
              v175 = (v57 - v174) >> 3;
              if ((unint64_t)(v175 + 1) >> 61)
                goto LABEL_414;
              v176 = v58 - (_QWORD)v174;
              v177 = (uint64_t)(v58 - (_QWORD)v174) >> 2;
              if (v177 <= v175 + 1)
                v177 = v175 + 1;
              if (v176 >= 0x7FFFFFFFFFFFFFF8)
                v178 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v178 = v177;
              if (v178)
              {
                v179 = (char *)sub_40FC((uint64_t)(v55 + 759), v178);
                v57 = (char *)v55[758];
                v174 = (char *)v55[757];
              }
              else
              {
                v179 = 0;
              }
              v270 = &v179[8 * v175];
              *(_QWORD *)v270 = v56;
              v59 = v270 + 8;
              while (v57 != v174)
              {
                v271 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v270 - 1) = v271;
                v270 -= 8;
              }
              v55[757] = v270;
              v55[758] = v59;
              v55[759] = &v179[8 * v178];
              if (v174)
                operator delete(v174);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[758] = v59;
            break;
          case 0xDD:
            v60 = *(_QWORD **)a1[2];
            v61 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            v62 = (char *)v60[761];
            v63 = v60[762];
            if ((unint64_t)v62 >= v63)
            {
              v180 = (char *)v60[760];
              v181 = (v62 - v180) >> 3;
              if ((unint64_t)(v181 + 1) >> 61)
                goto LABEL_414;
              v182 = v63 - (_QWORD)v180;
              v183 = (uint64_t)(v63 - (_QWORD)v180) >> 2;
              if (v183 <= v181 + 1)
                v183 = v181 + 1;
              if (v182 >= 0x7FFFFFFFFFFFFFF8)
                v184 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v184 = v183;
              if (v184)
              {
                v185 = (char *)sub_40FC((uint64_t)(v60 + 762), v184);
                v62 = (char *)v60[761];
                v180 = (char *)v60[760];
              }
              else
              {
                v185 = 0;
              }
              v272 = &v185[8 * v181];
              *(_QWORD *)v272 = v61;
              v64 = v272 + 8;
              while (v62 != v180)
              {
                v273 = *((_QWORD *)v62 - 1);
                v62 -= 8;
                *((_QWORD *)v272 - 1) = v273;
                v272 -= 8;
              }
              v60[760] = v272;
              v60[761] = v64;
              v60[762] = &v185[8 * v184];
              if (v180)
                operator delete(v180);
            }
            else
            {
              *(_QWORD *)v62 = v61;
              v64 = v62 + 8;
            }
            v60[761] = v64;
            break;
          case 0xDE:
            v65 = *(_QWORD **)a1[2];
            v66 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            v67 = (char *)v65[764];
            v68 = v65[765];
            if ((unint64_t)v67 >= v68)
            {
              v186 = (char *)v65[763];
              v187 = (v67 - v186) >> 3;
              if ((unint64_t)(v187 + 1) >> 61)
                goto LABEL_414;
              v188 = v68 - (_QWORD)v186;
              v189 = (uint64_t)(v68 - (_QWORD)v186) >> 2;
              if (v189 <= v187 + 1)
                v189 = v187 + 1;
              if (v188 >= 0x7FFFFFFFFFFFFFF8)
                v190 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v190 = v189;
              if (v190)
              {
                v191 = (char *)sub_40FC((uint64_t)(v65 + 765), v190);
                v67 = (char *)v65[764];
                v186 = (char *)v65[763];
              }
              else
              {
                v191 = 0;
              }
              v274 = &v191[8 * v187];
              *(_QWORD *)v274 = v66;
              v69 = v274 + 8;
              while (v67 != v186)
              {
                v275 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v274 - 1) = v275;
                v274 -= 8;
              }
              v65[763] = v274;
              v65[764] = v69;
              v65[765] = &v191[8 * v190];
              if (v186)
                operator delete(v186);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[764] = v69;
            break;
          case 0xDF:
            v70 = *(_QWORD **)a1[2];
            v71 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            v72 = (char *)v70[767];
            v73 = v70[768];
            if ((unint64_t)v72 >= v73)
            {
              v192 = (char *)v70[766];
              v193 = (v72 - v192) >> 3;
              if ((unint64_t)(v193 + 1) >> 61)
                goto LABEL_414;
              v194 = v73 - (_QWORD)v192;
              v195 = (uint64_t)(v73 - (_QWORD)v192) >> 2;
              if (v195 <= v193 + 1)
                v195 = v193 + 1;
              if (v194 >= 0x7FFFFFFFFFFFFFF8)
                v196 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v196 = v195;
              if (v196)
              {
                v197 = (char *)sub_40FC((uint64_t)(v70 + 768), v196);
                v72 = (char *)v70[767];
                v192 = (char *)v70[766];
              }
              else
              {
                v197 = 0;
              }
              v276 = &v197[8 * v193];
              *(_QWORD *)v276 = v71;
              v74 = v276 + 8;
              while (v72 != v192)
              {
                v277 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v276 - 1) = v277;
                v276 -= 8;
              }
              v70[766] = v276;
              v70[767] = v74;
              v70[768] = &v197[8 * v196];
              if (v192)
                operator delete(v192);
            }
            else
            {
              *(_QWORD *)v72 = v71;
              v74 = v72 + 8;
            }
            v70[767] = v74;
            break;
          case 0xE0:
            v75 = *(_QWORD **)a1[2];
            v76 = ((unint64_t)*(unsigned int *)(a1[3] + 20) >> 2) & 0xFFFFF;
            v77 = (unint64_t *)v75[770];
            v78 = v75[771];
            if ((unint64_t)v77 >= v78)
            {
              v198 = (unint64_t *)v75[769];
              v199 = v77 - v198;
              if ((unint64_t)(v199 + 1) >> 61)
                goto LABEL_414;
              v200 = v78 - (_QWORD)v198;
              v201 = (uint64_t)(v78 - (_QWORD)v198) >> 2;
              if (v201 <= v199 + 1)
                v201 = v199 + 1;
              if (v200 >= 0x7FFFFFFFFFFFFFF8)
                v202 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v202 = v201;
              if (v202)
              {
                v203 = (char *)sub_40FC((uint64_t)(v75 + 771), v202);
                v77 = (unint64_t *)v75[770];
                v198 = (unint64_t *)v75[769];
              }
              else
              {
                v203 = 0;
              }
              v278 = (unint64_t *)&v203[8 * v199];
              *v278 = v76;
              v79 = v278 + 1;
              while (v77 != v198)
              {
                v279 = *--v77;
                *--v278 = v279;
              }
              v75[769] = v278;
              v75[770] = v79;
              v75[771] = &v203[8 * v202];
              if (v198)
                operator delete(v198);
            }
            else
            {
              *v77 = v76;
              v79 = v77 + 1;
            }
            v75[770] = v79;
            break;
          case 0xE1:
            v80 = *(_QWORD **)a1[2];
            v81 = *(_WORD *)(a1[3] + 68) & 0x7FF;
            v82 = (char *)v80[773];
            v83 = v80[774];
            if ((unint64_t)v82 >= v83)
            {
              v204 = (char *)v80[772];
              v205 = (v82 - v204) >> 3;
              if ((unint64_t)(v205 + 1) >> 61)
                goto LABEL_414;
              v206 = v83 - (_QWORD)v204;
              v207 = (uint64_t)(v83 - (_QWORD)v204) >> 2;
              if (v207 <= v205 + 1)
                v207 = v205 + 1;
              if (v206 >= 0x7FFFFFFFFFFFFFF8)
                v208 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v208 = v207;
              if (v208)
              {
                v209 = (char *)sub_40FC((uint64_t)(v80 + 774), v208);
                v82 = (char *)v80[773];
                v204 = (char *)v80[772];
              }
              else
              {
                v209 = 0;
              }
              v280 = &v209[8 * v205];
              *(_QWORD *)v280 = v81;
              v84 = v280 + 8;
              while (v82 != v204)
              {
                v281 = *((_QWORD *)v82 - 1);
                v82 -= 8;
                *((_QWORD *)v280 - 1) = v281;
                v280 -= 8;
              }
              v80[772] = v280;
              v80[773] = v84;
              v80[774] = &v209[8 * v208];
              if (v204)
                operator delete(v204);
            }
            else
            {
              *(_QWORD *)v82 = v81;
              v84 = v82 + 8;
            }
            v80[773] = v84;
            break;
          case 0xE2:
            v85 = *(_QWORD **)a1[2];
            v86 = *(_WORD *)(a1[3] + 50) & 0xFFF;
            v87 = (char *)v85[776];
            v88 = v85[777];
            if ((unint64_t)v87 >= v88)
            {
              v210 = (char *)v85[775];
              v211 = (v87 - v210) >> 3;
              if ((unint64_t)(v211 + 1) >> 61)
                goto LABEL_414;
              v212 = v88 - (_QWORD)v210;
              v213 = (uint64_t)(v88 - (_QWORD)v210) >> 2;
              if (v213 <= v211 + 1)
                v213 = v211 + 1;
              if (v212 >= 0x7FFFFFFFFFFFFFF8)
                v214 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v214 = v213;
              if (v214)
              {
                v215 = (char *)sub_40FC((uint64_t)(v85 + 777), v214);
                v87 = (char *)v85[776];
                v210 = (char *)v85[775];
              }
              else
              {
                v215 = 0;
              }
              v282 = &v215[8 * v211];
              *(_QWORD *)v282 = v86;
              v89 = v282 + 8;
              while (v87 != v210)
              {
                v283 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v282 - 1) = v283;
                v282 -= 8;
              }
              v85[775] = v282;
              v85[776] = v89;
              v85[777] = &v215[8 * v214];
              if (v210)
                operator delete(v210);
            }
            else
            {
              *(_QWORD *)v87 = v86;
              v89 = v87 + 8;
            }
            v85[776] = v89;
            break;
          case 0xE3:
            v90 = *(_QWORD **)a1[2];
            v91 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v92 = (char *)v90[779];
            v93 = v90[780];
            if ((unint64_t)v92 >= v93)
            {
              v216 = (char *)v90[778];
              v217 = (v92 - v216) >> 3;
              if ((unint64_t)(v217 + 1) >> 61)
                goto LABEL_414;
              v218 = v93 - (_QWORD)v216;
              v219 = (uint64_t)(v93 - (_QWORD)v216) >> 2;
              if (v219 <= v217 + 1)
                v219 = v217 + 1;
              if (v218 >= 0x7FFFFFFFFFFFFFF8)
                v220 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v220 = v219;
              if (v220)
              {
                v221 = (char *)sub_40FC((uint64_t)(v90 + 780), v220);
                v92 = (char *)v90[779];
                v216 = (char *)v90[778];
              }
              else
              {
                v221 = 0;
              }
              v284 = &v221[8 * v217];
              *(_QWORD *)v284 = v91;
              v94 = v284 + 8;
              while (v92 != v216)
              {
                v285 = *((_QWORD *)v92 - 1);
                v92 -= 8;
                *((_QWORD *)v284 - 1) = v285;
                v284 -= 8;
              }
              v90[778] = v284;
              v90[779] = v94;
              v90[780] = &v221[8 * v220];
              if (v216)
                operator delete(v216);
            }
            else
            {
              *(_QWORD *)v92 = v91;
              v94 = v92 + 8;
            }
            v90[779] = v94;
            break;
          case 0xE4:
            v95 = *(_QWORD **)a1[2];
            v96 = *(_WORD *)(a1[3] + 64) & 0x3FF;
            v97 = (char *)v95[782];
            v98 = v95[783];
            if ((unint64_t)v97 >= v98)
            {
              v222 = (char *)v95[781];
              v223 = (v97 - v222) >> 3;
              if ((unint64_t)(v223 + 1) >> 61)
                goto LABEL_414;
              v224 = v98 - (_QWORD)v222;
              v225 = (uint64_t)(v98 - (_QWORD)v222) >> 2;
              if (v225 <= v223 + 1)
                v225 = v223 + 1;
              if (v224 >= 0x7FFFFFFFFFFFFFF8)
                v226 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v226 = v225;
              if (v226)
              {
                v227 = (char *)sub_40FC((uint64_t)(v95 + 783), v226);
                v97 = (char *)v95[782];
                v222 = (char *)v95[781];
              }
              else
              {
                v227 = 0;
              }
              v286 = &v227[8 * v223];
              *(_QWORD *)v286 = v96;
              v99 = v286 + 8;
              while (v97 != v222)
              {
                v287 = *((_QWORD *)v97 - 1);
                v97 -= 8;
                *((_QWORD *)v286 - 1) = v287;
                v286 -= 8;
              }
              v95[781] = v286;
              v95[782] = v99;
              v95[783] = &v227[8 * v226];
              if (v222)
                operator delete(v222);
            }
            else
            {
              *(_QWORD *)v97 = v96;
              v99 = v97 + 8;
            }
            v95[782] = v99;
            break;
          case 0xE5:
            v100 = *(_QWORD **)a1[2];
            v101 = *(_WORD *)(a1[3] + 46) & 0x3FF;
            v102 = (char *)v100[785];
            v103 = v100[786];
            if ((unint64_t)v102 >= v103)
            {
              v228 = (char *)v100[784];
              v229 = (v102 - v228) >> 3;
              if ((unint64_t)(v229 + 1) >> 61)
                goto LABEL_414;
              v230 = v103 - (_QWORD)v228;
              v231 = (uint64_t)(v103 - (_QWORD)v228) >> 2;
              if (v231 <= v229 + 1)
                v231 = v229 + 1;
              if (v230 >= 0x7FFFFFFFFFFFFFF8)
                v232 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v232 = v231;
              if (v232)
              {
                v233 = (char *)sub_40FC((uint64_t)(v100 + 786), v232);
                v102 = (char *)v100[785];
                v228 = (char *)v100[784];
              }
              else
              {
                v233 = 0;
              }
              v288 = &v233[8 * v229];
              *(_QWORD *)v288 = v101;
              v104 = v288 + 8;
              while (v102 != v228)
              {
                v289 = *((_QWORD *)v102 - 1);
                v102 -= 8;
                *((_QWORD *)v288 - 1) = v289;
                v288 -= 8;
              }
              v100[784] = v288;
              v100[785] = v104;
              v100[786] = &v233[8 * v232];
              if (v228)
                operator delete(v228);
            }
            else
            {
              *(_QWORD *)v102 = v101;
              v104 = v102 + 8;
            }
            v100[785] = v104;
            break;
          case 0xE6:
            v105 = *(_QWORD **)a1[2];
            v106 = *(_WORD *)(a1[3] + 66) & 0x3FF;
            v107 = (char *)v105[788];
            v108 = v105[789];
            if ((unint64_t)v107 >= v108)
            {
              v234 = (char *)v105[787];
              v235 = (v107 - v234) >> 3;
              if ((unint64_t)(v235 + 1) >> 61)
                goto LABEL_414;
              v236 = v108 - (_QWORD)v234;
              v237 = (uint64_t)(v108 - (_QWORD)v234) >> 2;
              if (v237 <= v235 + 1)
                v237 = v235 + 1;
              if (v236 >= 0x7FFFFFFFFFFFFFF8)
                v238 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v238 = v237;
              if (v238)
              {
                v239 = (char *)sub_40FC((uint64_t)(v105 + 789), v238);
                v107 = (char *)v105[788];
                v234 = (char *)v105[787];
              }
              else
              {
                v239 = 0;
              }
              v290 = &v239[8 * v235];
              *(_QWORD *)v290 = v106;
              v109 = v290 + 8;
              while (v107 != v234)
              {
                v291 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *((_QWORD *)v290 - 1) = v291;
                v290 -= 8;
              }
              v105[787] = v290;
              v105[788] = v109;
              v105[789] = &v239[8 * v238];
              if (v234)
                operator delete(v234);
            }
            else
            {
              *(_QWORD *)v107 = v106;
              v109 = v107 + 8;
            }
            v105[788] = v109;
            break;
          case 0xE7:
            v110 = *(_QWORD **)a1[2];
            v111 = *(_WORD *)(a1[3] + 48) & 0x3FF;
            v112 = (char *)v110[791];
            v113 = v110[792];
            if ((unint64_t)v112 >= v113)
            {
              v240 = (char *)v110[790];
              v241 = (v112 - v240) >> 3;
              if ((unint64_t)(v241 + 1) >> 61)
                goto LABEL_414;
              v242 = v113 - (_QWORD)v240;
              v243 = (uint64_t)(v113 - (_QWORD)v240) >> 2;
              if (v243 <= v241 + 1)
                v243 = v241 + 1;
              if (v242 >= 0x7FFFFFFFFFFFFFF8)
                v244 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v244 = v243;
              if (v244)
              {
                v245 = (char *)sub_40FC((uint64_t)(v110 + 792), v244);
                v112 = (char *)v110[791];
                v240 = (char *)v110[790];
              }
              else
              {
                v245 = 0;
              }
              v292 = &v245[8 * v241];
              *(_QWORD *)v292 = v111;
              v114 = v292 + 8;
              while (v112 != v240)
              {
                v293 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                *((_QWORD *)v292 - 1) = v293;
                v292 -= 8;
              }
              v110[790] = v292;
              v110[791] = v114;
              v110[792] = &v245[8 * v244];
              if (v240)
                operator delete(v240);
            }
            else
            {
              *(_QWORD *)v112 = v111;
              v114 = v112 + 8;
            }
            v110[791] = v114;
            break;
          case 0xE8:
            v115 = *(_QWORD **)a1[2];
            v116 = *(_DWORD *)(a1[3] + 28) & 0x7FFFFLL;
            v117 = (uint64_t *)v115[794];
            v118 = v115[795];
            if ((unint64_t)v117 >= v118)
            {
              v246 = (uint64_t *)v115[793];
              v247 = v117 - v246;
              if ((unint64_t)(v247 + 1) >> 61)
LABEL_414:
                sub_4074();
              v248 = v118 - (_QWORD)v246;
              v249 = (uint64_t)(v118 - (_QWORD)v246) >> 2;
              if (v249 <= v247 + 1)
                v249 = v247 + 1;
              if (v248 >= 0x7FFFFFFFFFFFFFF8)
                v250 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v250 = v249;
              if (v250)
              {
                v251 = (char *)sub_40FC((uint64_t)(v115 + 795), v250);
                v117 = (uint64_t *)v115[794];
                v246 = (uint64_t *)v115[793];
              }
              else
              {
                v251 = 0;
              }
              v294 = (uint64_t *)&v251[8 * v247];
              *v294 = v116;
              v119 = v294 + 1;
              while (v117 != v246)
              {
                v295 = *--v117;
                *--v294 = v295;
              }
              v115[793] = v294;
              v115[794] = v119;
              v115[795] = &v251[8 * v250];
              if (v246)
                operator delete(v246);
            }
            else
            {
              *v117 = v116;
              v119 = v117 + 1;
            }
            v115[794] = v119;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_DFDD0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t *v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  int *v194;
  int **v195;
  uint64_t v196;
  unint64_t v197;
  int v198;
  uint64_t v199;
  _QWORD *v200;

  v4 = *a1;
  if (*a2 == 1)
  {
    v195 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v194 = *v195;
    v196 = (char *)v195[1] - (char *)*v195;
    if (v196)
    {
      v197 = v196 >> 2;
      if (v197 <= 1)
        v197 = 1;
      do
      {
        v198 = *v194++;
        switch(v198)
        {
          case 243:
            v199 = *(_DWORD *)(a1[3] + 40) & 0xFFFFF;
            v200 = (_QWORD *)(*(_QWORD *)a1[2] + 6616);
            goto LABEL_266;
          case 244:
            v199 = *(_DWORD *)(a1[3] + 44) & 0xFFFFF;
            v200 = (_QWORD *)(*(_QWORD *)a1[2] + 6640);
            goto LABEL_266;
          case 245:
            v199 = *(_DWORD *)(a1[3] + 48) & 0xFFFFF;
            v200 = (_QWORD *)(*(_QWORD *)a1[2] + 6664);
            goto LABEL_266;
          case 246:
            v199 = *(unsigned __int16 *)(a1[3] + 56);
            v200 = (_QWORD *)(*(_QWORD *)a1[2] + 6688);
            goto LABEL_266;
          case 247:
            v199 = *(unsigned __int16 *)(a1[3] + 52);
            v200 = (_QWORD *)(*(_QWORD *)a1[2] + 6712);
            goto LABEL_266;
          case 248:
            v199 = *(_WORD *)(a1[3] + 58) & 0x7FFF;
            v200 = (_QWORD *)(*(_QWORD *)a1[2] + 6736);
            goto LABEL_266;
          case 249:
            v199 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            v200 = (_QWORD *)(*(_QWORD *)a1[2] + 6760);
            goto LABEL_266;
          case 250:
            v199 = *(_WORD *)(a1[3] + 60) & 0x7FFF;
            v200 = (_QWORD *)(*(_QWORD *)a1[2] + 6784);
            goto LABEL_266;
          case 251:
            v199 = *(_WORD *)(a1[3] + 62) & 0x7FFF;
            v200 = (_QWORD *)(*(_QWORD *)a1[2] + 6808);
            goto LABEL_266;
          case 252:
            v199 = *(_DWORD *)(a1[3] + 28) & 0xFFFFF;
            v200 = (_QWORD *)(*(_QWORD *)a1[2] + 6832);
            goto LABEL_266;
          case 253:
            v199 = *(_DWORD *)(a1[3] + 32) & 0xFFFFF;
            v200 = (_QWORD *)(*(_QWORD *)a1[2] + 6856);
            goto LABEL_266;
          case 254:
            v199 = *(_DWORD *)(a1[3] + 36) & 0xFFFFF;
            v200 = (_QWORD *)(*(_QWORD *)a1[2] + 6880);
            goto LABEL_266;
          case 255:
            v199 = *(_DWORD *)(a1[3] + 20) & 0xFFFFF;
            v200 = (_QWORD *)(*(_QWORD *)a1[2] + 6904);
            goto LABEL_266;
          case 256:
            v199 = *(_DWORD *)(a1[3] + 24) & 0xFFFFF;
            v200 = (_QWORD *)(*(_QWORD *)a1[2] + 6928);
LABEL_266:
            *(_QWORD *)(*v200 - 8) += v199;
            break;
          default:
            break;
        }
        --v197;
      }
      while (v197);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xF3:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 40) & 0xFFFFFLL;
            v12 = (uint64_t *)v10[827];
            v13 = v10[828];
            if ((unint64_t)v12 >= v13)
            {
              v82 = (uint64_t *)v10[826];
              v83 = v12 - v82;
              if ((unint64_t)(v83 + 1) >> 61)
                goto LABEL_270;
              v84 = v13 - (_QWORD)v82;
              v85 = (uint64_t)(v13 - (_QWORD)v82) >> 2;
              if (v85 <= v83 + 1)
                v85 = v83 + 1;
              if (v84 >= 0x7FFFFFFFFFFFFFF8)
                v86 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v86 = v85;
              if (v86)
              {
                v87 = (char *)sub_40FC((uint64_t)(v10 + 828), v86);
                v12 = (uint64_t *)v10[827];
                v82 = (uint64_t *)v10[826];
              }
              else
              {
                v87 = 0;
              }
              v166 = (uint64_t *)&v87[8 * v83];
              *v166 = v11;
              v14 = v166 + 1;
              while (v12 != v82)
              {
                v167 = *--v12;
                *--v166 = v167;
              }
              v10[826] = v166;
              v10[827] = v14;
              v10[828] = &v87[8 * v86];
              if (v82)
                operator delete(v82);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[827] = v14;
            break;
          case 0xF4:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 44) & 0xFFFFFLL;
            v17 = (uint64_t *)v15[830];
            v18 = v15[831];
            if ((unint64_t)v17 >= v18)
            {
              v88 = (uint64_t *)v15[829];
              v89 = v17 - v88;
              if ((unint64_t)(v89 + 1) >> 61)
                goto LABEL_270;
              v90 = v18 - (_QWORD)v88;
              v91 = (uint64_t)(v18 - (_QWORD)v88) >> 2;
              if (v91 <= v89 + 1)
                v91 = v89 + 1;
              if (v90 >= 0x7FFFFFFFFFFFFFF8)
                v92 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v92 = v91;
              if (v92)
              {
                v93 = (char *)sub_40FC((uint64_t)(v15 + 831), v92);
                v17 = (uint64_t *)v15[830];
                v88 = (uint64_t *)v15[829];
              }
              else
              {
                v93 = 0;
              }
              v168 = (uint64_t *)&v93[8 * v89];
              *v168 = v16;
              v19 = v168 + 1;
              while (v17 != v88)
              {
                v169 = *--v17;
                *--v168 = v169;
              }
              v15[829] = v168;
              v15[830] = v19;
              v15[831] = &v93[8 * v92];
              if (v88)
                operator delete(v88);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[830] = v19;
            break;
          case 0xF5:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_DWORD *)(a1[3] + 48) & 0xFFFFFLL;
            v22 = (uint64_t *)v20[833];
            v23 = v20[834];
            if ((unint64_t)v22 >= v23)
            {
              v94 = (uint64_t *)v20[832];
              v95 = v22 - v94;
              if ((unint64_t)(v95 + 1) >> 61)
                goto LABEL_270;
              v96 = v23 - (_QWORD)v94;
              v97 = (uint64_t)(v23 - (_QWORD)v94) >> 2;
              if (v97 <= v95 + 1)
                v97 = v95 + 1;
              if (v96 >= 0x7FFFFFFFFFFFFFF8)
                v98 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v98 = v97;
              if (v98)
              {
                v99 = (char *)sub_40FC((uint64_t)(v20 + 834), v98);
                v22 = (uint64_t *)v20[833];
                v94 = (uint64_t *)v20[832];
              }
              else
              {
                v99 = 0;
              }
              v170 = (uint64_t *)&v99[8 * v95];
              *v170 = v21;
              v24 = v170 + 1;
              while (v22 != v94)
              {
                v171 = *--v22;
                *--v170 = v171;
              }
              v20[832] = v170;
              v20[833] = v24;
              v20[834] = &v99[8 * v98];
              if (v94)
                operator delete(v94);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[833] = v24;
            break;
          case 0xF6:
            v25 = a1[2];
            v26 = *(_QWORD **)v25;
            v27 = *(unsigned __int16 *)(a1[3] + 56);
            v28 = *(char **)(*(_QWORD *)v25 + 6688);
            v29 = *(_QWORD *)(*(_QWORD *)v25 + 6696);
            if ((unint64_t)v28 >= v29)
            {
              v100 = (char *)v26[835];
              v101 = (v28 - v100) >> 3;
              if ((unint64_t)(v101 + 1) >> 61)
                goto LABEL_270;
              v102 = v29 - (_QWORD)v100;
              v103 = (uint64_t)(v29 - (_QWORD)v100) >> 2;
              if (v103 <= v101 + 1)
                v103 = v101 + 1;
              if (v102 >= 0x7FFFFFFFFFFFFFF8)
                v104 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v104 = v103;
              if (v104)
              {
                v105 = (char *)sub_40FC((uint64_t)(v26 + 837), v104);
                v28 = (char *)v26[836];
                v100 = (char *)v26[835];
              }
              else
              {
                v105 = 0;
              }
              v172 = &v105[8 * v101];
              *(_QWORD *)v172 = v27;
              v30 = v172 + 8;
              while (v28 != v100)
              {
                v173 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v172 - 1) = v173;
                v172 -= 8;
              }
              v26[835] = v172;
              v26[836] = v30;
              v26[837] = &v105[8 * v104];
              if (v100)
                operator delete(v100);
            }
            else
            {
              *(_QWORD *)v28 = v27;
              v30 = v28 + 8;
            }
            v26[836] = v30;
            break;
          case 0xF7:
            v31 = a1[2];
            v32 = *(_QWORD **)v31;
            v33 = *(unsigned __int16 *)(a1[3] + 52);
            v34 = *(char **)(*(_QWORD *)v31 + 6712);
            v35 = *(_QWORD *)(*(_QWORD *)v31 + 6720);
            if ((unint64_t)v34 >= v35)
            {
              v106 = (char *)v32[838];
              v107 = (v34 - v106) >> 3;
              if ((unint64_t)(v107 + 1) >> 61)
                goto LABEL_270;
              v108 = v35 - (_QWORD)v106;
              v109 = (uint64_t)(v35 - (_QWORD)v106) >> 2;
              if (v109 <= v107 + 1)
                v109 = v107 + 1;
              if (v108 >= 0x7FFFFFFFFFFFFFF8)
                v110 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v110 = v109;
              if (v110)
              {
                v111 = (char *)sub_40FC((uint64_t)(v32 + 840), v110);
                v34 = (char *)v32[839];
                v106 = (char *)v32[838];
              }
              else
              {
                v111 = 0;
              }
              v174 = &v111[8 * v107];
              *(_QWORD *)v174 = v33;
              v36 = v174 + 8;
              while (v34 != v106)
              {
                v175 = *((_QWORD *)v34 - 1);
                v34 -= 8;
                *((_QWORD *)v174 - 1) = v175;
                v174 -= 8;
              }
              v32[838] = v174;
              v32[839] = v36;
              v32[840] = &v111[8 * v110];
              if (v106)
                operator delete(v106);
            }
            else
            {
              *(_QWORD *)v34 = v33;
              v36 = v34 + 8;
            }
            v32[839] = v36;
            break;
          case 0xF8:
            v37 = *(_QWORD **)a1[2];
            v38 = *(_WORD *)(a1[3] + 58) & 0x7FFF;
            v39 = (char *)v37[842];
            v40 = v37[843];
            if ((unint64_t)v39 >= v40)
            {
              v112 = (char *)v37[841];
              v113 = (v39 - v112) >> 3;
              if ((unint64_t)(v113 + 1) >> 61)
                goto LABEL_270;
              v114 = v40 - (_QWORD)v112;
              v115 = (uint64_t)(v40 - (_QWORD)v112) >> 2;
              if (v115 <= v113 + 1)
                v115 = v113 + 1;
              if (v114 >= 0x7FFFFFFFFFFFFFF8)
                v116 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v116 = v115;
              if (v116)
              {
                v117 = (char *)sub_40FC((uint64_t)(v37 + 843), v116);
                v39 = (char *)v37[842];
                v112 = (char *)v37[841];
              }
              else
              {
                v117 = 0;
              }
              v176 = &v117[8 * v113];
              *(_QWORD *)v176 = v38;
              v41 = v176 + 8;
              while (v39 != v112)
              {
                v177 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *((_QWORD *)v176 - 1) = v177;
                v176 -= 8;
              }
              v37[841] = v176;
              v37[842] = v41;
              v37[843] = &v117[8 * v116];
              if (v112)
                operator delete(v112);
            }
            else
            {
              *(_QWORD *)v39 = v38;
              v41 = v39 + 8;
            }
            v37[842] = v41;
            break;
          case 0xF9:
            v42 = *(_QWORD **)a1[2];
            v43 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            v44 = (char *)v42[845];
            v45 = v42[846];
            if ((unint64_t)v44 >= v45)
            {
              v118 = (char *)v42[844];
              v119 = (v44 - v118) >> 3;
              if ((unint64_t)(v119 + 1) >> 61)
                goto LABEL_270;
              v120 = v45 - (_QWORD)v118;
              v121 = (uint64_t)(v45 - (_QWORD)v118) >> 2;
              if (v121 <= v119 + 1)
                v121 = v119 + 1;
              if (v120 >= 0x7FFFFFFFFFFFFFF8)
                v122 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v122 = v121;
              if (v122)
              {
                v123 = (char *)sub_40FC((uint64_t)(v42 + 846), v122);
                v44 = (char *)v42[845];
                v118 = (char *)v42[844];
              }
              else
              {
                v123 = 0;
              }
              v178 = &v123[8 * v119];
              *(_QWORD *)v178 = v43;
              v46 = v178 + 8;
              while (v44 != v118)
              {
                v179 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *((_QWORD *)v178 - 1) = v179;
                v178 -= 8;
              }
              v42[844] = v178;
              v42[845] = v46;
              v42[846] = &v123[8 * v122];
              if (v118)
                operator delete(v118);
            }
            else
            {
              *(_QWORD *)v44 = v43;
              v46 = v44 + 8;
            }
            v42[845] = v46;
            break;
          case 0xFA:
            v47 = *(_QWORD **)a1[2];
            v48 = *(_WORD *)(a1[3] + 60) & 0x7FFF;
            v49 = (char *)v47[848];
            v50 = v47[849];
            if ((unint64_t)v49 >= v50)
            {
              v124 = (char *)v47[847];
              v125 = (v49 - v124) >> 3;
              if ((unint64_t)(v125 + 1) >> 61)
                goto LABEL_270;
              v126 = v50 - (_QWORD)v124;
              v127 = (uint64_t)(v50 - (_QWORD)v124) >> 2;
              if (v127 <= v125 + 1)
                v127 = v125 + 1;
              if (v126 >= 0x7FFFFFFFFFFFFFF8)
                v128 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v128 = v127;
              if (v128)
              {
                v129 = (char *)sub_40FC((uint64_t)(v47 + 849), v128);
                v49 = (char *)v47[848];
                v124 = (char *)v47[847];
              }
              else
              {
                v129 = 0;
              }
              v180 = &v129[8 * v125];
              *(_QWORD *)v180 = v48;
              v51 = v180 + 8;
              while (v49 != v124)
              {
                v181 = *((_QWORD *)v49 - 1);
                v49 -= 8;
                *((_QWORD *)v180 - 1) = v181;
                v180 -= 8;
              }
              v47[847] = v180;
              v47[848] = v51;
              v47[849] = &v129[8 * v128];
              if (v124)
                operator delete(v124);
            }
            else
            {
              *(_QWORD *)v49 = v48;
              v51 = v49 + 8;
            }
            v47[848] = v51;
            break;
          case 0xFB:
            v52 = *(_QWORD **)a1[2];
            v53 = *(_WORD *)(a1[3] + 62) & 0x7FFF;
            v54 = (char *)v52[851];
            v55 = v52[852];
            if ((unint64_t)v54 >= v55)
            {
              v130 = (char *)v52[850];
              v131 = (v54 - v130) >> 3;
              if ((unint64_t)(v131 + 1) >> 61)
                goto LABEL_270;
              v132 = v55 - (_QWORD)v130;
              v133 = (uint64_t)(v55 - (_QWORD)v130) >> 2;
              if (v133 <= v131 + 1)
                v133 = v131 + 1;
              if (v132 >= 0x7FFFFFFFFFFFFFF8)
                v134 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v134 = v133;
              if (v134)
              {
                v135 = (char *)sub_40FC((uint64_t)(v52 + 852), v134);
                v54 = (char *)v52[851];
                v130 = (char *)v52[850];
              }
              else
              {
                v135 = 0;
              }
              v182 = &v135[8 * v131];
              *(_QWORD *)v182 = v53;
              v56 = v182 + 8;
              while (v54 != v130)
              {
                v183 = *((_QWORD *)v54 - 1);
                v54 -= 8;
                *((_QWORD *)v182 - 1) = v183;
                v182 -= 8;
              }
              v52[850] = v182;
              v52[851] = v56;
              v52[852] = &v135[8 * v134];
              if (v130)
                operator delete(v130);
            }
            else
            {
              *(_QWORD *)v54 = v53;
              v56 = v54 + 8;
            }
            v52[851] = v56;
            break;
          case 0xFC:
            v57 = *(_QWORD **)a1[2];
            v58 = *(_DWORD *)(a1[3] + 28) & 0xFFFFFLL;
            v59 = (uint64_t *)v57[854];
            v60 = v57[855];
            if ((unint64_t)v59 >= v60)
            {
              v136 = (uint64_t *)v57[853];
              v137 = v59 - v136;
              if ((unint64_t)(v137 + 1) >> 61)
                goto LABEL_270;
              v138 = v60 - (_QWORD)v136;
              v139 = (uint64_t)(v60 - (_QWORD)v136) >> 2;
              if (v139 <= v137 + 1)
                v139 = v137 + 1;
              if (v138 >= 0x7FFFFFFFFFFFFFF8)
                v140 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v140 = v139;
              if (v140)
              {
                v141 = (char *)sub_40FC((uint64_t)(v57 + 855), v140);
                v59 = (uint64_t *)v57[854];
                v136 = (uint64_t *)v57[853];
              }
              else
              {
                v141 = 0;
              }
              v184 = (uint64_t *)&v141[8 * v137];
              *v184 = v58;
              v61 = v184 + 1;
              while (v59 != v136)
              {
                v185 = *--v59;
                *--v184 = v185;
              }
              v57[853] = v184;
              v57[854] = v61;
              v57[855] = &v141[8 * v140];
              if (v136)
                operator delete(v136);
            }
            else
            {
              *v59 = v58;
              v61 = v59 + 1;
            }
            v57[854] = v61;
            break;
          case 0xFD:
            v62 = *(_QWORD **)a1[2];
            v63 = *(_DWORD *)(a1[3] + 32) & 0xFFFFFLL;
            v64 = (uint64_t *)v62[857];
            v65 = v62[858];
            if ((unint64_t)v64 >= v65)
            {
              v142 = (uint64_t *)v62[856];
              v143 = v64 - v142;
              if ((unint64_t)(v143 + 1) >> 61)
                goto LABEL_270;
              v144 = v65 - (_QWORD)v142;
              v145 = (uint64_t)(v65 - (_QWORD)v142) >> 2;
              if (v145 <= v143 + 1)
                v145 = v143 + 1;
              if (v144 >= 0x7FFFFFFFFFFFFFF8)
                v146 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v146 = v145;
              if (v146)
              {
                v147 = (char *)sub_40FC((uint64_t)(v62 + 858), v146);
                v64 = (uint64_t *)v62[857];
                v142 = (uint64_t *)v62[856];
              }
              else
              {
                v147 = 0;
              }
              v186 = (uint64_t *)&v147[8 * v143];
              *v186 = v63;
              v66 = v186 + 1;
              while (v64 != v142)
              {
                v187 = *--v64;
                *--v186 = v187;
              }
              v62[856] = v186;
              v62[857] = v66;
              v62[858] = &v147[8 * v146];
              if (v142)
                operator delete(v142);
            }
            else
            {
              *v64 = v63;
              v66 = v64 + 1;
            }
            v62[857] = v66;
            break;
          case 0xFE:
            v67 = *(_QWORD **)a1[2];
            v68 = *(_DWORD *)(a1[3] + 36) & 0xFFFFFLL;
            v69 = (uint64_t *)v67[860];
            v70 = v67[861];
            if ((unint64_t)v69 >= v70)
            {
              v148 = (uint64_t *)v67[859];
              v149 = v69 - v148;
              if ((unint64_t)(v149 + 1) >> 61)
                goto LABEL_270;
              v150 = v70 - (_QWORD)v148;
              v151 = (uint64_t)(v70 - (_QWORD)v148) >> 2;
              if (v151 <= v149 + 1)
                v151 = v149 + 1;
              if (v150 >= 0x7FFFFFFFFFFFFFF8)
                v152 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v152 = v151;
              if (v152)
              {
                v153 = (char *)sub_40FC((uint64_t)(v67 + 861), v152);
                v69 = (uint64_t *)v67[860];
                v148 = (uint64_t *)v67[859];
              }
              else
              {
                v153 = 0;
              }
              v188 = (uint64_t *)&v153[8 * v149];
              *v188 = v68;
              v71 = v188 + 1;
              while (v69 != v148)
              {
                v189 = *--v69;
                *--v188 = v189;
              }
              v67[859] = v188;
              v67[860] = v71;
              v67[861] = &v153[8 * v152];
              if (v148)
                operator delete(v148);
            }
            else
            {
              *v69 = v68;
              v71 = v69 + 1;
            }
            v67[860] = v71;
            break;
          case 0xFF:
            v72 = *(_QWORD **)a1[2];
            v73 = *(_DWORD *)(a1[3] + 20) & 0xFFFFFLL;
            v74 = (uint64_t *)v72[863];
            v75 = v72[864];
            if ((unint64_t)v74 >= v75)
            {
              v154 = (uint64_t *)v72[862];
              v155 = v74 - v154;
              if ((unint64_t)(v155 + 1) >> 61)
                goto LABEL_270;
              v156 = v75 - (_QWORD)v154;
              v157 = (uint64_t)(v75 - (_QWORD)v154) >> 2;
              if (v157 <= v155 + 1)
                v157 = v155 + 1;
              if (v156 >= 0x7FFFFFFFFFFFFFF8)
                v158 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v158 = v157;
              if (v158)
              {
                v159 = (char *)sub_40FC((uint64_t)(v72 + 864), v158);
                v74 = (uint64_t *)v72[863];
                v154 = (uint64_t *)v72[862];
              }
              else
              {
                v159 = 0;
              }
              v190 = (uint64_t *)&v159[8 * v155];
              *v190 = v73;
              v76 = v190 + 1;
              while (v74 != v154)
              {
                v191 = *--v74;
                *--v190 = v191;
              }
              v72[862] = v190;
              v72[863] = v76;
              v72[864] = &v159[8 * v158];
              if (v154)
                operator delete(v154);
            }
            else
            {
              *v74 = v73;
              v76 = v74 + 1;
            }
            v72[863] = v76;
            break;
          case 0x100:
            v77 = *(_QWORD **)a1[2];
            v78 = *(_DWORD *)(a1[3] + 24) & 0xFFFFFLL;
            v79 = (uint64_t *)v77[866];
            v80 = v77[867];
            if ((unint64_t)v79 >= v80)
            {
              v160 = (uint64_t *)v77[865];
              v161 = v79 - v160;
              if ((unint64_t)(v161 + 1) >> 61)
LABEL_270:
                sub_4074();
              v162 = v80 - (_QWORD)v160;
              v163 = (uint64_t)(v80 - (_QWORD)v160) >> 2;
              if (v163 <= v161 + 1)
                v163 = v161 + 1;
              if (v162 >= 0x7FFFFFFFFFFFFFF8)
                v164 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v164 = v163;
              if (v164)
              {
                v165 = (char *)sub_40FC((uint64_t)(v77 + 867), v164);
                v79 = (uint64_t *)v77[866];
                v160 = (uint64_t *)v77[865];
              }
              else
              {
                v165 = 0;
              }
              v192 = (uint64_t *)&v165[8 * v161];
              *v192 = v78;
              v81 = v192 + 1;
              while (v79 != v160)
              {
                v193 = *--v79;
                *--v192 = v193;
              }
              v77[865] = v192;
              v77[866] = v81;
              v77[867] = &v165[8 * v164];
              if (v160)
                operator delete(v160);
            }
            else
            {
              *v79 = v78;
              v81 = v79 + 1;
            }
            v77[866] = v81;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E0BA8(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  int *v270;
  int **v271;
  uint64_t v272;
  unint64_t v273;
  int v274;
  _WORD *v275;
  _QWORD *v276;

  v4 = *a1;
  if (*a2 == 1)
  {
    v271 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v270 = *v271;
    v272 = (char *)v271[1] - (char *)*v271;
    if (v272)
    {
      v273 = v272 >> 2;
      if (v273 <= 1)
        v273 = 1;
      do
      {
        v274 = *v270++;
        switch(v274)
        {
          case 0:
            v275 = (_WORD *)(a1[3] + 56);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 784);
            goto LABEL_374;
          case 1:
            v275 = (_WORD *)(a1[3] + 52);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 808);
            goto LABEL_374;
          case 2:
            v275 = (_WORD *)(a1[3] + 58);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 832);
            goto LABEL_374;
          case 3:
            v275 = (_WORD *)(a1[3] + 54);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 856);
            goto LABEL_374;
          case 4:
            v275 = (_WORD *)(a1[3] + 36);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 880);
            goto LABEL_374;
          case 5:
            v275 = (_WORD *)(a1[3] + 20);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 904);
            goto LABEL_374;
          case 6:
            v275 = (_WORD *)(a1[3] + 38);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 928);
            goto LABEL_374;
          case 7:
            v275 = (_WORD *)(a1[3] + 22);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 952);
            goto LABEL_374;
          case 8:
            v275 = (_WORD *)(a1[3] + 40);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 976);
            goto LABEL_374;
          case 9:
            v275 = (_WORD *)(a1[3] + 24);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 1000);
            goto LABEL_374;
          case 10:
            v275 = (_WORD *)(a1[3] + 42);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 1024);
            goto LABEL_374;
          case 11:
            v275 = (_WORD *)(a1[3] + 26);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 1048);
            goto LABEL_374;
          case 12:
            v275 = (_WORD *)(a1[3] + 44);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 1072);
            goto LABEL_374;
          case 13:
            v275 = (_WORD *)(a1[3] + 28);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 1096);
            goto LABEL_374;
          case 14:
            v275 = (_WORD *)(a1[3] + 46);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 1120);
            goto LABEL_374;
          case 15:
            v275 = (_WORD *)(a1[3] + 30);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 1144);
            goto LABEL_374;
          case 16:
            v275 = (_WORD *)(a1[3] + 48);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 1168);
            goto LABEL_374;
          case 17:
            v275 = (_WORD *)(a1[3] + 32);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 1192);
            goto LABEL_374;
          case 18:
            v275 = (_WORD *)(a1[3] + 50);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 1216);
            goto LABEL_374;
          case 19:
            v275 = (_WORD *)(a1[3] + 34);
            v276 = (_QWORD *)(*(_QWORD *)a1[2] + 1240);
LABEL_374:
            *(_QWORD *)(*v276 - 8) += *v275 & 0x7FFF;
            break;
          default:
            break;
        }
        --v273;
      }
      while (v273);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            v12 = (char *)v10[98];
            v13 = v10[99];
            if ((unint64_t)v12 >= v13)
            {
              v110 = (char *)v10[97];
              v111 = (v12 - v110) >> 3;
              if ((unint64_t)(v111 + 1) >> 61)
                goto LABEL_378;
              v112 = v13 - (_QWORD)v110;
              v113 = (uint64_t)(v13 - (_QWORD)v110) >> 2;
              if (v113 <= v111 + 1)
                v113 = v111 + 1;
              if (v112 >= 0x7FFFFFFFFFFFFFF8)
                v114 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v114 = v113;
              if (v114)
              {
                v115 = (char *)sub_40FC((uint64_t)(v10 + 99), v114);
                v12 = (char *)v10[98];
                v110 = (char *)v10[97];
              }
              else
              {
                v115 = 0;
              }
              v230 = &v115[8 * v111];
              *(_QWORD *)v230 = v11;
              v14 = v230 + 8;
              while (v12 != v110)
              {
                v231 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v230 - 1) = v231;
                v230 -= 8;
              }
              v10[97] = v230;
              v10[98] = v14;
              v10[99] = &v115[8 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[98] = v14;
            break;
          case 1:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            v17 = (char *)v15[101];
            v18 = v15[102];
            if ((unint64_t)v17 >= v18)
            {
              v116 = (char *)v15[100];
              v117 = (v17 - v116) >> 3;
              if ((unint64_t)(v117 + 1) >> 61)
                goto LABEL_378;
              v118 = v18 - (_QWORD)v116;
              v119 = (uint64_t)(v18 - (_QWORD)v116) >> 2;
              if (v119 <= v117 + 1)
                v119 = v117 + 1;
              if (v118 >= 0x7FFFFFFFFFFFFFF8)
                v120 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v120 = v119;
              if (v120)
              {
                v121 = (char *)sub_40FC((uint64_t)(v15 + 102), v120);
                v17 = (char *)v15[101];
                v116 = (char *)v15[100];
              }
              else
              {
                v121 = 0;
              }
              v232 = &v121[8 * v117];
              *(_QWORD *)v232 = v16;
              v19 = v232 + 8;
              while (v17 != v116)
              {
                v233 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v232 - 1) = v233;
                v232 -= 8;
              }
              v15[100] = v232;
              v15[101] = v19;
              v15[102] = &v121[8 * v120];
              if (v116)
                operator delete(v116);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[101] = v19;
            break;
          case 2:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 58) & 0x7FFF;
            v22 = (char *)v20[104];
            v23 = v20[105];
            if ((unint64_t)v22 >= v23)
            {
              v122 = (char *)v20[103];
              v123 = (v22 - v122) >> 3;
              if ((unint64_t)(v123 + 1) >> 61)
                goto LABEL_378;
              v124 = v23 - (_QWORD)v122;
              v125 = (uint64_t)(v23 - (_QWORD)v122) >> 2;
              if (v125 <= v123 + 1)
                v125 = v123 + 1;
              if (v124 >= 0x7FFFFFFFFFFFFFF8)
                v126 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v126 = v125;
              if (v126)
              {
                v127 = (char *)sub_40FC((uint64_t)(v20 + 105), v126);
                v22 = (char *)v20[104];
                v122 = (char *)v20[103];
              }
              else
              {
                v127 = 0;
              }
              v234 = &v127[8 * v123];
              *(_QWORD *)v234 = v21;
              v24 = v234 + 8;
              while (v22 != v122)
              {
                v235 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v234 - 1) = v235;
                v234 -= 8;
              }
              v20[103] = v234;
              v20[104] = v24;
              v20[105] = &v127[8 * v126];
              if (v122)
                operator delete(v122);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[104] = v24;
            break;
          case 3:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_WORD *)(a1[3] + 54) & 0x7FFF;
            v27 = (char *)v25[107];
            v28 = v25[108];
            if ((unint64_t)v27 >= v28)
            {
              v128 = (char *)v25[106];
              v129 = (v27 - v128) >> 3;
              if ((unint64_t)(v129 + 1) >> 61)
                goto LABEL_378;
              v130 = v28 - (_QWORD)v128;
              v131 = (uint64_t)(v28 - (_QWORD)v128) >> 2;
              if (v131 <= v129 + 1)
                v131 = v129 + 1;
              if (v130 >= 0x7FFFFFFFFFFFFFF8)
                v132 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v132 = v131;
              if (v132)
              {
                v133 = (char *)sub_40FC((uint64_t)(v25 + 108), v132);
                v27 = (char *)v25[107];
                v128 = (char *)v25[106];
              }
              else
              {
                v133 = 0;
              }
              v236 = &v133[8 * v129];
              *(_QWORD *)v236 = v26;
              v29 = v236 + 8;
              while (v27 != v128)
              {
                v237 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v236 - 1) = v237;
                v236 -= 8;
              }
              v25[106] = v236;
              v25[107] = v29;
              v25[108] = &v133[8 * v132];
              if (v128)
                operator delete(v128);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[107] = v29;
            break;
          case 4:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            v32 = (char *)v30[110];
            v33 = v30[111];
            if ((unint64_t)v32 >= v33)
            {
              v134 = (char *)v30[109];
              v135 = (v32 - v134) >> 3;
              if ((unint64_t)(v135 + 1) >> 61)
                goto LABEL_378;
              v136 = v33 - (_QWORD)v134;
              v137 = (uint64_t)(v33 - (_QWORD)v134) >> 2;
              if (v137 <= v135 + 1)
                v137 = v135 + 1;
              if (v136 >= 0x7FFFFFFFFFFFFFF8)
                v138 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v138 = v137;
              if (v138)
              {
                v139 = (char *)sub_40FC((uint64_t)(v30 + 111), v138);
                v32 = (char *)v30[110];
                v134 = (char *)v30[109];
              }
              else
              {
                v139 = 0;
              }
              v238 = &v139[8 * v135];
              *(_QWORD *)v238 = v31;
              v34 = v238 + 8;
              while (v32 != v134)
              {
                v239 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v238 - 1) = v239;
                v238 -= 8;
              }
              v30[109] = v238;
              v30[110] = v34;
              v30[111] = &v139[8 * v138];
              if (v134)
                operator delete(v134);
            }
            else
            {
              *(_QWORD *)v32 = v31;
              v34 = v32 + 8;
            }
            v30[110] = v34;
            break;
          case 5:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            v37 = (char *)v35[113];
            v38 = v35[114];
            if ((unint64_t)v37 >= v38)
            {
              v140 = (char *)v35[112];
              v141 = (v37 - v140) >> 3;
              if ((unint64_t)(v141 + 1) >> 61)
                goto LABEL_378;
              v142 = v38 - (_QWORD)v140;
              v143 = (uint64_t)(v38 - (_QWORD)v140) >> 2;
              if (v143 <= v141 + 1)
                v143 = v141 + 1;
              if (v142 >= 0x7FFFFFFFFFFFFFF8)
                v144 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v144 = v143;
              if (v144)
              {
                v145 = (char *)sub_40FC((uint64_t)(v35 + 114), v144);
                v37 = (char *)v35[113];
                v140 = (char *)v35[112];
              }
              else
              {
                v145 = 0;
              }
              v240 = &v145[8 * v141];
              *(_QWORD *)v240 = v36;
              v39 = v240 + 8;
              while (v37 != v140)
              {
                v241 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v240 - 1) = v241;
                v240 -= 8;
              }
              v35[112] = v240;
              v35[113] = v39;
              v35[114] = &v145[8 * v144];
              if (v140)
                operator delete(v140);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[113] = v39;
            break;
          case 6:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            v42 = (char *)v40[116];
            v43 = v40[117];
            if ((unint64_t)v42 >= v43)
            {
              v146 = (char *)v40[115];
              v147 = (v42 - v146) >> 3;
              if ((unint64_t)(v147 + 1) >> 61)
                goto LABEL_378;
              v148 = v43 - (_QWORD)v146;
              v149 = (uint64_t)(v43 - (_QWORD)v146) >> 2;
              if (v149 <= v147 + 1)
                v149 = v147 + 1;
              if (v148 >= 0x7FFFFFFFFFFFFFF8)
                v150 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v150 = v149;
              if (v150)
              {
                v151 = (char *)sub_40FC((uint64_t)(v40 + 117), v150);
                v42 = (char *)v40[116];
                v146 = (char *)v40[115];
              }
              else
              {
                v151 = 0;
              }
              v242 = &v151[8 * v147];
              *(_QWORD *)v242 = v41;
              v44 = v242 + 8;
              while (v42 != v146)
              {
                v243 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v242 - 1) = v243;
                v242 -= 8;
              }
              v40[115] = v242;
              v40[116] = v44;
              v40[117] = &v151[8 * v150];
              if (v146)
                operator delete(v146);
            }
            else
            {
              *(_QWORD *)v42 = v41;
              v44 = v42 + 8;
            }
            v40[116] = v44;
            break;
          case 7:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            v47 = (char *)v45[119];
            v48 = v45[120];
            if ((unint64_t)v47 >= v48)
            {
              v152 = (char *)v45[118];
              v153 = (v47 - v152) >> 3;
              if ((unint64_t)(v153 + 1) >> 61)
                goto LABEL_378;
              v154 = v48 - (_QWORD)v152;
              v155 = (uint64_t)(v48 - (_QWORD)v152) >> 2;
              if (v155 <= v153 + 1)
                v155 = v153 + 1;
              if (v154 >= 0x7FFFFFFFFFFFFFF8)
                v156 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v156 = v155;
              if (v156)
              {
                v157 = (char *)sub_40FC((uint64_t)(v45 + 120), v156);
                v47 = (char *)v45[119];
                v152 = (char *)v45[118];
              }
              else
              {
                v157 = 0;
              }
              v244 = &v157[8 * v153];
              *(_QWORD *)v244 = v46;
              v49 = v244 + 8;
              while (v47 != v152)
              {
                v245 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v244 - 1) = v245;
                v244 -= 8;
              }
              v45[118] = v244;
              v45[119] = v49;
              v45[120] = &v157[8 * v156];
              if (v152)
                operator delete(v152);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[119] = v49;
            break;
          case 8:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v52 = (char *)v50[122];
            v53 = v50[123];
            if ((unint64_t)v52 >= v53)
            {
              v158 = (char *)v50[121];
              v159 = (v52 - v158) >> 3;
              if ((unint64_t)(v159 + 1) >> 61)
                goto LABEL_378;
              v160 = v53 - (_QWORD)v158;
              v161 = (uint64_t)(v53 - (_QWORD)v158) >> 2;
              if (v161 <= v159 + 1)
                v161 = v159 + 1;
              if (v160 >= 0x7FFFFFFFFFFFFFF8)
                v162 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v162 = v161;
              if (v162)
              {
                v163 = (char *)sub_40FC((uint64_t)(v50 + 123), v162);
                v52 = (char *)v50[122];
                v158 = (char *)v50[121];
              }
              else
              {
                v163 = 0;
              }
              v246 = &v163[8 * v159];
              *(_QWORD *)v246 = v51;
              v54 = v246 + 8;
              while (v52 != v158)
              {
                v247 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v246 - 1) = v247;
                v246 -= 8;
              }
              v50[121] = v246;
              v50[122] = v54;
              v50[123] = &v163[8 * v162];
              if (v158)
                operator delete(v158);
            }
            else
            {
              *(_QWORD *)v52 = v51;
              v54 = v52 + 8;
            }
            v50[122] = v54;
            break;
          case 9:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v57 = (char *)v55[125];
            v58 = v55[126];
            if ((unint64_t)v57 >= v58)
            {
              v164 = (char *)v55[124];
              v165 = (v57 - v164) >> 3;
              if ((unint64_t)(v165 + 1) >> 61)
                goto LABEL_378;
              v166 = v58 - (_QWORD)v164;
              v167 = (uint64_t)(v58 - (_QWORD)v164) >> 2;
              if (v167 <= v165 + 1)
                v167 = v165 + 1;
              if (v166 >= 0x7FFFFFFFFFFFFFF8)
                v168 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v168 = v167;
              if (v168)
              {
                v169 = (char *)sub_40FC((uint64_t)(v55 + 126), v168);
                v57 = (char *)v55[125];
                v164 = (char *)v55[124];
              }
              else
              {
                v169 = 0;
              }
              v248 = &v169[8 * v165];
              *(_QWORD *)v248 = v56;
              v59 = v248 + 8;
              while (v57 != v164)
              {
                v249 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v248 - 1) = v249;
                v248 -= 8;
              }
              v55[124] = v248;
              v55[125] = v59;
              v55[126] = &v169[8 * v168];
              if (v164)
                operator delete(v164);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[125] = v59;
            break;
          case 0xA:
            v60 = *(_QWORD **)a1[2];
            v61 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v62 = (char *)v60[128];
            v63 = v60[129];
            if ((unint64_t)v62 >= v63)
            {
              v170 = (char *)v60[127];
              v171 = (v62 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61)
                goto LABEL_378;
              v172 = v63 - (_QWORD)v170;
              v173 = (uint64_t)(v63 - (_QWORD)v170) >> 2;
              if (v173 <= v171 + 1)
                v173 = v171 + 1;
              if (v172 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v173;
              if (v174)
              {
                v175 = (char *)sub_40FC((uint64_t)(v60 + 129), v174);
                v62 = (char *)v60[128];
                v170 = (char *)v60[127];
              }
              else
              {
                v175 = 0;
              }
              v250 = &v175[8 * v171];
              *(_QWORD *)v250 = v61;
              v64 = v250 + 8;
              while (v62 != v170)
              {
                v251 = *((_QWORD *)v62 - 1);
                v62 -= 8;
                *((_QWORD *)v250 - 1) = v251;
                v250 -= 8;
              }
              v60[127] = v250;
              v60[128] = v64;
              v60[129] = &v175[8 * v174];
              if (v170)
                operator delete(v170);
            }
            else
            {
              *(_QWORD *)v62 = v61;
              v64 = v62 + 8;
            }
            v60[128] = v64;
            break;
          case 0xB:
            v65 = *(_QWORD **)a1[2];
            v66 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v67 = (char *)v65[131];
            v68 = v65[132];
            if ((unint64_t)v67 >= v68)
            {
              v176 = (char *)v65[130];
              v177 = (v67 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61)
                goto LABEL_378;
              v178 = v68 - (_QWORD)v176;
              v179 = (uint64_t)(v68 - (_QWORD)v176) >> 2;
              if (v179 <= v177 + 1)
                v179 = v177 + 1;
              if (v178 >= 0x7FFFFFFFFFFFFFF8)
                v180 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v180 = v179;
              if (v180)
              {
                v181 = (char *)sub_40FC((uint64_t)(v65 + 132), v180);
                v67 = (char *)v65[131];
                v176 = (char *)v65[130];
              }
              else
              {
                v181 = 0;
              }
              v252 = &v181[8 * v177];
              *(_QWORD *)v252 = v66;
              v69 = v252 + 8;
              while (v67 != v176)
              {
                v253 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v252 - 1) = v253;
                v252 -= 8;
              }
              v65[130] = v252;
              v65[131] = v69;
              v65[132] = &v181[8 * v180];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[131] = v69;
            break;
          case 0xC:
            v70 = *(_QWORD **)a1[2];
            v71 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            v72 = (char *)v70[134];
            v73 = v70[135];
            if ((unint64_t)v72 >= v73)
            {
              v182 = (char *)v70[133];
              v183 = (v72 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61)
                goto LABEL_378;
              v184 = v73 - (_QWORD)v182;
              v185 = (uint64_t)(v73 - (_QWORD)v182) >> 2;
              if (v185 <= v183 + 1)
                v185 = v183 + 1;
              if (v184 >= 0x7FFFFFFFFFFFFFF8)
                v186 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v186 = v185;
              if (v186)
              {
                v187 = (char *)sub_40FC((uint64_t)(v70 + 135), v186);
                v72 = (char *)v70[134];
                v182 = (char *)v70[133];
              }
              else
              {
                v187 = 0;
              }
              v254 = &v187[8 * v183];
              *(_QWORD *)v254 = v71;
              v74 = v254 + 8;
              while (v72 != v182)
              {
                v255 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v254 - 1) = v255;
                v254 -= 8;
              }
              v70[133] = v254;
              v70[134] = v74;
              v70[135] = &v187[8 * v186];
              if (v182)
                operator delete(v182);
            }
            else
            {
              *(_QWORD *)v72 = v71;
              v74 = v72 + 8;
            }
            v70[134] = v74;
            break;
          case 0xD:
            v75 = *(_QWORD **)a1[2];
            v76 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v77 = (char *)v75[137];
            v78 = v75[138];
            if ((unint64_t)v77 >= v78)
            {
              v188 = (char *)v75[136];
              v189 = (v77 - v188) >> 3;
              if ((unint64_t)(v189 + 1) >> 61)
                goto LABEL_378;
              v190 = v78 - (_QWORD)v188;
              v191 = (uint64_t)(v78 - (_QWORD)v188) >> 2;
              if (v191 <= v189 + 1)
                v191 = v189 + 1;
              if (v190 >= 0x7FFFFFFFFFFFFFF8)
                v192 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v192 = v191;
              if (v192)
              {
                v193 = (char *)sub_40FC((uint64_t)(v75 + 138), v192);
                v77 = (char *)v75[137];
                v188 = (char *)v75[136];
              }
              else
              {
                v193 = 0;
              }
              v256 = &v193[8 * v189];
              *(_QWORD *)v256 = v76;
              v79 = v256 + 8;
              while (v77 != v188)
              {
                v257 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *((_QWORD *)v256 - 1) = v257;
                v256 -= 8;
              }
              v75[136] = v256;
              v75[137] = v79;
              v75[138] = &v193[8 * v192];
              if (v188)
                operator delete(v188);
            }
            else
            {
              *(_QWORD *)v77 = v76;
              v79 = v77 + 8;
            }
            v75[137] = v79;
            break;
          case 0xE:
            v80 = *(_QWORD **)a1[2];
            v81 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            v82 = (char *)v80[140];
            v83 = v80[141];
            if ((unint64_t)v82 >= v83)
            {
              v194 = (char *)v80[139];
              v195 = (v82 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61)
                goto LABEL_378;
              v196 = v83 - (_QWORD)v194;
              v197 = (uint64_t)(v83 - (_QWORD)v194) >> 2;
              if (v197 <= v195 + 1)
                v197 = v195 + 1;
              if (v196 >= 0x7FFFFFFFFFFFFFF8)
                v198 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v198 = v197;
              if (v198)
              {
                v199 = (char *)sub_40FC((uint64_t)(v80 + 141), v198);
                v82 = (char *)v80[140];
                v194 = (char *)v80[139];
              }
              else
              {
                v199 = 0;
              }
              v258 = &v199[8 * v195];
              *(_QWORD *)v258 = v81;
              v84 = v258 + 8;
              while (v82 != v194)
              {
                v259 = *((_QWORD *)v82 - 1);
                v82 -= 8;
                *((_QWORD *)v258 - 1) = v259;
                v258 -= 8;
              }
              v80[139] = v258;
              v80[140] = v84;
              v80[141] = &v199[8 * v198];
              if (v194)
                operator delete(v194);
            }
            else
            {
              *(_QWORD *)v82 = v81;
              v84 = v82 + 8;
            }
            v80[140] = v84;
            break;
          case 0xF:
            v85 = *(_QWORD **)a1[2];
            v86 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v87 = (char *)v85[143];
            v88 = v85[144];
            if ((unint64_t)v87 >= v88)
            {
              v200 = (char *)v85[142];
              v201 = (v87 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61)
                goto LABEL_378;
              v202 = v88 - (_QWORD)v200;
              v203 = (uint64_t)(v88 - (_QWORD)v200) >> 2;
              if (v203 <= v201 + 1)
                v203 = v201 + 1;
              if (v202 >= 0x7FFFFFFFFFFFFFF8)
                v204 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v204 = v203;
              if (v204)
              {
                v205 = (char *)sub_40FC((uint64_t)(v85 + 144), v204);
                v87 = (char *)v85[143];
                v200 = (char *)v85[142];
              }
              else
              {
                v205 = 0;
              }
              v260 = &v205[8 * v201];
              *(_QWORD *)v260 = v86;
              v89 = v260 + 8;
              while (v87 != v200)
              {
                v261 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v260 - 1) = v261;
                v260 -= 8;
              }
              v85[142] = v260;
              v85[143] = v89;
              v85[144] = &v205[8 * v204];
              if (v200)
                operator delete(v200);
            }
            else
            {
              *(_QWORD *)v87 = v86;
              v89 = v87 + 8;
            }
            v85[143] = v89;
            break;
          case 0x10:
            v90 = *(_QWORD **)a1[2];
            v91 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            v92 = (char *)v90[146];
            v93 = v90[147];
            if ((unint64_t)v92 >= v93)
            {
              v206 = (char *)v90[145];
              v207 = (v92 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61)
                goto LABEL_378;
              v208 = v93 - (_QWORD)v206;
              v209 = (uint64_t)(v93 - (_QWORD)v206) >> 2;
              if (v209 <= v207 + 1)
                v209 = v207 + 1;
              if (v208 >= 0x7FFFFFFFFFFFFFF8)
                v210 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v210 = v209;
              if (v210)
              {
                v211 = (char *)sub_40FC((uint64_t)(v90 + 147), v210);
                v92 = (char *)v90[146];
                v206 = (char *)v90[145];
              }
              else
              {
                v211 = 0;
              }
              v262 = &v211[8 * v207];
              *(_QWORD *)v262 = v91;
              v94 = v262 + 8;
              while (v92 != v206)
              {
                v263 = *((_QWORD *)v92 - 1);
                v92 -= 8;
                *((_QWORD *)v262 - 1) = v263;
                v262 -= 8;
              }
              v90[145] = v262;
              v90[146] = v94;
              v90[147] = &v211[8 * v210];
              if (v206)
                operator delete(v206);
            }
            else
            {
              *(_QWORD *)v92 = v91;
              v94 = v92 + 8;
            }
            v90[146] = v94;
            break;
          case 0x11:
            v95 = *(_QWORD **)a1[2];
            v96 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v97 = (char *)v95[149];
            v98 = v95[150];
            if ((unint64_t)v97 >= v98)
            {
              v212 = (char *)v95[148];
              v213 = (v97 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61)
                goto LABEL_378;
              v214 = v98 - (_QWORD)v212;
              v215 = (uint64_t)(v98 - (_QWORD)v212) >> 2;
              if (v215 <= v213 + 1)
                v215 = v213 + 1;
              if (v214 >= 0x7FFFFFFFFFFFFFF8)
                v216 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v216 = v215;
              if (v216)
              {
                v217 = (char *)sub_40FC((uint64_t)(v95 + 150), v216);
                v97 = (char *)v95[149];
                v212 = (char *)v95[148];
              }
              else
              {
                v217 = 0;
              }
              v264 = &v217[8 * v213];
              *(_QWORD *)v264 = v96;
              v99 = v264 + 8;
              while (v97 != v212)
              {
                v265 = *((_QWORD *)v97 - 1);
                v97 -= 8;
                *((_QWORD *)v264 - 1) = v265;
                v264 -= 8;
              }
              v95[148] = v264;
              v95[149] = v99;
              v95[150] = &v217[8 * v216];
              if (v212)
                operator delete(v212);
            }
            else
            {
              *(_QWORD *)v97 = v96;
              v99 = v97 + 8;
            }
            v95[149] = v99;
            break;
          case 0x12:
            v100 = *(_QWORD **)a1[2];
            v101 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            v102 = (char *)v100[152];
            v103 = v100[153];
            if ((unint64_t)v102 >= v103)
            {
              v218 = (char *)v100[151];
              v219 = (v102 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61)
                goto LABEL_378;
              v220 = v103 - (_QWORD)v218;
              v221 = (uint64_t)(v103 - (_QWORD)v218) >> 2;
              if (v221 <= v219 + 1)
                v221 = v219 + 1;
              if (v220 >= 0x7FFFFFFFFFFFFFF8)
                v222 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v222 = v221;
              if (v222)
              {
                v223 = (char *)sub_40FC((uint64_t)(v100 + 153), v222);
                v102 = (char *)v100[152];
                v218 = (char *)v100[151];
              }
              else
              {
                v223 = 0;
              }
              v266 = &v223[8 * v219];
              *(_QWORD *)v266 = v101;
              v104 = v266 + 8;
              while (v102 != v218)
              {
                v267 = *((_QWORD *)v102 - 1);
                v102 -= 8;
                *((_QWORD *)v266 - 1) = v267;
                v266 -= 8;
              }
              v100[151] = v266;
              v100[152] = v104;
              v100[153] = &v223[8 * v222];
              if (v218)
                operator delete(v218);
            }
            else
            {
              *(_QWORD *)v102 = v101;
              v104 = v102 + 8;
            }
            v100[152] = v104;
            break;
          case 0x13:
            v105 = *(_QWORD **)a1[2];
            v106 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            v107 = (char *)v105[155];
            v108 = v105[156];
            if ((unint64_t)v107 >= v108)
            {
              v224 = (char *)v105[154];
              v225 = (v107 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61)
LABEL_378:
                sub_4074();
              v226 = v108 - (_QWORD)v224;
              v227 = (uint64_t)(v108 - (_QWORD)v224) >> 2;
              if (v227 <= v225 + 1)
                v227 = v225 + 1;
              if (v226 >= 0x7FFFFFFFFFFFFFF8)
                v228 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v228 = v227;
              if (v228)
              {
                v229 = (char *)sub_40FC((uint64_t)(v105 + 156), v228);
                v107 = (char *)v105[155];
                v224 = (char *)v105[154];
              }
              else
              {
                v229 = 0;
              }
              v268 = &v229[8 * v225];
              *(_QWORD *)v268 = v106;
              v109 = v268 + 8;
              while (v107 != v224)
              {
                v269 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *((_QWORD *)v268 - 1) = v269;
                v268 -= 8;
              }
              v105[154] = v268;
              v105[155] = v109;
              v105[156] = &v229[8 * v228];
              if (v224)
                operator delete(v224);
            }
            else
            {
              *(_QWORD *)v107 = v106;
              v109 = v107 + 8;
            }
            v105[155] = v109;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E1DC0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t *v134;
  unint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t *v139;
  unint64_t v140;
  _QWORD *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t *v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  uint64_t *v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  char *v183;
  uint64_t *v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  char *v189;
  uint64_t *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  char *v195;
  uint64_t *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  uint64_t *v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  char *v231;
  uint64_t *v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  char *v261;
  uint64_t *v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  char *v267;
  unint64_t *v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  char *v273;
  uint64_t *v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  char *v279;
  uint64_t *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  char *v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  int *v334;
  int **v335;
  uint64_t v336;
  unint64_t v337;
  int v338;
  unint64_t v339;
  _QWORD *v340;

  v4 = *a1;
  if (*a2 == 1)
  {
    v335 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v334 = *v335;
    v336 = (char *)v335[1] - (char *)*v335;
    if (v336)
    {
      v337 = v336 >> 2;
      if (v337 <= 1)
        v337 = 1;
      do
      {
        v338 = *v334++;
        switch(v338)
        {
          case '0':
            v339 = *(unsigned __int16 *)(a1[3] + 60);
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 1936);
            goto LABEL_446;
          case '1':
            v339 = *(unsigned __int16 *)(a1[3] + 22);
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 1960);
            goto LABEL_446;
          case '2':
            v339 = *(_DWORD *)(a1[3] + 88) & 0x7FFF;
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 1984);
            goto LABEL_446;
          case '3':
            v339 = *(_QWORD *)(a1[3] + 56) >> 17;
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2008);
            goto LABEL_446;
          case '4':
            v339 = *(unsigned __int16 *)(a1[3] + 80);
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2032);
            goto LABEL_446;
          case '5':
            v339 = *(unsigned __int16 *)(a1[3] + 40);
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2056);
            goto LABEL_446;
          case '6':
            v339 = *(_DWORD *)(a1[3] + 48) & 0x1FFFF;
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2080);
            goto LABEL_446;
          case '7':
            v339 = *(_QWORD *)(a1[3] + 56) & 0x1FFFFLL;
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2104);
            goto LABEL_446;
          case '8':
            v339 = *(_DWORD *)(a1[3] + 72) & 0x1FFFF;
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2128);
            goto LABEL_446;
          case '9':
            v339 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2152);
            goto LABEL_446;
          case ':':
            v339 = *(unsigned __int16 *)(a1[3] + 76);
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2176);
            goto LABEL_446;
          case ';':
            v339 = *(unsigned __int16 *)(a1[3] + 36);
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2200);
            goto LABEL_446;
          case '<':
            v339 = *(unsigned __int16 *)(a1[3] + 84);
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2224);
            goto LABEL_446;
          case '=':
            v339 = (*(unsigned __int16 *)(a1[3] + 44) | (*(unsigned __int8 *)(a1[3] + 46) << 16)) & 0x1FFFF;
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2248);
            goto LABEL_446;
          case '>':
            v339 = *(unsigned __int16 *)(a1[3] + 86);
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2272);
            goto LABEL_446;
          case '?':
            v339 = *(_DWORD *)(a1[3] + 52) & 0x1FFFF;
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2296);
            goto LABEL_446;
          case '@':
            v339 = *(unsigned __int16 *)(a1[3] + 82);
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2320);
            goto LABEL_446;
          case 'A':
            v339 = *(unsigned __int16 *)(a1[3] + 42);
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2344);
            goto LABEL_446;
          case 'B':
            v339 = *(unsigned __int16 *)(a1[3] + 78);
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2368);
            goto LABEL_446;
          case 'C':
            v339 = *(unsigned __int16 *)(a1[3] + 38);
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2392);
            goto LABEL_446;
          case 'D':
            v339 = *(_DWORD *)(a1[3] + 64) & 0x3FFFF;
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2416);
            goto LABEL_446;
          case 'E':
            v339 = ((*(unsigned int *)(a1[3] + 22) | ((unint64_t)*(unsigned __int8 *)(a1[3] + 26) << 32)) >> 16) & 0x3FFFF;
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2440);
            goto LABEL_446;
          case 'F':
            v339 = *(_DWORD *)(a1[3] + 68) & 0x3FFFF;
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2464);
            goto LABEL_446;
          case 'G':
            v339 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            v340 = (_QWORD *)(*(_QWORD *)a1[2] + 2488);
LABEL_446:
            *(_QWORD *)(*v340 - 8) += v339;
            break;
          default:
            break;
        }
        --v337;
      }
      while (v337);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case '0':
            v10 = a1[2];
            v11 = *(_QWORD **)v10;
            v12 = *(unsigned __int16 *)(a1[3] + 60);
            v13 = *(char **)(*(_QWORD *)v10 + 1936);
            v14 = *(_QWORD *)(*(_QWORD *)v10 + 1944);
            if ((unint64_t)v13 >= v14)
            {
              v142 = (char *)v11[241];
              v143 = (v13 - v142) >> 3;
              if ((unint64_t)(v143 + 1) >> 61)
                goto LABEL_450;
              v144 = v14 - (_QWORD)v142;
              v145 = (uint64_t)(v14 - (_QWORD)v142) >> 2;
              if (v145 <= v143 + 1)
                v145 = v143 + 1;
              if (v144 >= 0x7FFFFFFFFFFFFFF8)
                v146 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v146 = v145;
              if (v146)
              {
                v147 = (char *)sub_40FC((uint64_t)(v11 + 243), v146);
                v13 = (char *)v11[242];
                v142 = (char *)v11[241];
              }
              else
              {
                v147 = 0;
              }
              v286 = &v147[8 * v143];
              *(_QWORD *)v286 = v12;
              v15 = v286 + 8;
              while (v13 != v142)
              {
                v287 = *((_QWORD *)v13 - 1);
                v13 -= 8;
                *((_QWORD *)v286 - 1) = v287;
                v286 -= 8;
              }
              v11[241] = v286;
              v11[242] = v15;
              v11[243] = &v147[8 * v146];
              if (v142)
                operator delete(v142);
            }
            else
            {
              *(_QWORD *)v13 = v12;
              v15 = v13 + 8;
            }
            v11[242] = v15;
            break;
          case '1':
            v16 = a1[2];
            v17 = *(_QWORD **)v16;
            v18 = *(unsigned __int16 *)(a1[3] + 22);
            v19 = *(char **)(*(_QWORD *)v16 + 1960);
            v20 = *(_QWORD *)(*(_QWORD *)v16 + 1968);
            if ((unint64_t)v19 >= v20)
            {
              v148 = (char *)v17[244];
              v149 = (v19 - v148) >> 3;
              if ((unint64_t)(v149 + 1) >> 61)
                goto LABEL_450;
              v150 = v20 - (_QWORD)v148;
              v151 = (uint64_t)(v20 - (_QWORD)v148) >> 2;
              if (v151 <= v149 + 1)
                v151 = v149 + 1;
              if (v150 >= 0x7FFFFFFFFFFFFFF8)
                v152 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v152 = v151;
              if (v152)
              {
                v153 = (char *)sub_40FC((uint64_t)(v17 + 246), v152);
                v19 = (char *)v17[245];
                v148 = (char *)v17[244];
              }
              else
              {
                v153 = 0;
              }
              v288 = &v153[8 * v149];
              *(_QWORD *)v288 = v18;
              v21 = v288 + 8;
              while (v19 != v148)
              {
                v289 = *((_QWORD *)v19 - 1);
                v19 -= 8;
                *((_QWORD *)v288 - 1) = v289;
                v288 -= 8;
              }
              v17[244] = v288;
              v17[245] = v21;
              v17[246] = &v153[8 * v152];
              if (v148)
                operator delete(v148);
            }
            else
            {
              *(_QWORD *)v19 = v18;
              v21 = v19 + 8;
            }
            v17[245] = v21;
            break;
          case '2':
            v22 = *(_QWORD **)a1[2];
            v23 = *(_DWORD *)(a1[3] + 88) & 0x7FFFLL;
            v24 = (uint64_t *)v22[248];
            v25 = v22[249];
            if ((unint64_t)v24 >= v25)
            {
              v154 = (uint64_t *)v22[247];
              v155 = v24 - v154;
              if ((unint64_t)(v155 + 1) >> 61)
                goto LABEL_450;
              v156 = v25 - (_QWORD)v154;
              v157 = (uint64_t)(v25 - (_QWORD)v154) >> 2;
              if (v157 <= v155 + 1)
                v157 = v155 + 1;
              if (v156 >= 0x7FFFFFFFFFFFFFF8)
                v158 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v158 = v157;
              if (v158)
              {
                v159 = (char *)sub_40FC((uint64_t)(v22 + 249), v158);
                v24 = (uint64_t *)v22[248];
                v154 = (uint64_t *)v22[247];
              }
              else
              {
                v159 = 0;
              }
              v290 = (uint64_t *)&v159[8 * v155];
              *v290 = v23;
              v26 = v290 + 1;
              while (v24 != v154)
              {
                v291 = *--v24;
                *--v290 = v291;
              }
              v22[247] = v290;
              v22[248] = v26;
              v22[249] = &v159[8 * v158];
              if (v154)
                operator delete(v154);
            }
            else
            {
              *v24 = v23;
              v26 = v24 + 1;
            }
            v22[248] = v26;
            break;
          case '3':
            v27 = *(_QWORD **)a1[2];
            v28 = *(_QWORD *)(a1[3] + 56) >> 17;
            v29 = (char *)v27[251];
            v30 = v27[252];
            if ((unint64_t)v29 >= v30)
            {
              v160 = (char *)v27[250];
              v161 = (v29 - v160) >> 3;
              if ((unint64_t)(v161 + 1) >> 61)
                goto LABEL_450;
              v162 = v30 - (_QWORD)v160;
              v163 = (uint64_t)(v30 - (_QWORD)v160) >> 2;
              if (v163 <= v161 + 1)
                v163 = v161 + 1;
              if (v162 >= 0x7FFFFFFFFFFFFFF8)
                v164 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v164 = v163;
              if (v164)
              {
                v165 = (char *)sub_40FC((uint64_t)(v27 + 252), v164);
                v29 = (char *)v27[251];
                v160 = (char *)v27[250];
              }
              else
              {
                v165 = 0;
              }
              v292 = &v165[8 * v161];
              *(_QWORD *)v292 = v28;
              v31 = v292 + 8;
              while (v29 != v160)
              {
                v293 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v292 - 1) = v293;
                v292 -= 8;
              }
              v27[250] = v292;
              v27[251] = v31;
              v27[252] = &v165[8 * v164];
              if (v160)
                operator delete(v160);
            }
            else
            {
              *(_QWORD *)v29 = v28;
              v31 = v29 + 8;
            }
            v27[251] = v31;
            break;
          case '4':
            v32 = a1[2];
            v33 = *(_QWORD **)v32;
            v34 = *(unsigned __int16 *)(a1[3] + 80);
            v35 = *(char **)(*(_QWORD *)v32 + 2032);
            v36 = *(_QWORD *)(*(_QWORD *)v32 + 2040);
            if ((unint64_t)v35 >= v36)
            {
              v166 = (char *)v33[253];
              v167 = (v35 - v166) >> 3;
              if ((unint64_t)(v167 + 1) >> 61)
                goto LABEL_450;
              v168 = v36 - (_QWORD)v166;
              v169 = (uint64_t)(v36 - (_QWORD)v166) >> 2;
              if (v169 <= v167 + 1)
                v169 = v167 + 1;
              if (v168 >= 0x7FFFFFFFFFFFFFF8)
                v170 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v170 = v169;
              if (v170)
              {
                v171 = (char *)sub_40FC((uint64_t)(v33 + 255), v170);
                v35 = (char *)v33[254];
                v166 = (char *)v33[253];
              }
              else
              {
                v171 = 0;
              }
              v294 = &v171[8 * v167];
              *(_QWORD *)v294 = v34;
              v37 = v294 + 8;
              while (v35 != v166)
              {
                v295 = *((_QWORD *)v35 - 1);
                v35 -= 8;
                *((_QWORD *)v294 - 1) = v295;
                v294 -= 8;
              }
              v33[253] = v294;
              v33[254] = v37;
              v33[255] = &v171[8 * v170];
              if (v166)
                operator delete(v166);
            }
            else
            {
              *(_QWORD *)v35 = v34;
              v37 = v35 + 8;
            }
            v33[254] = v37;
            break;
          case '5':
            v38 = a1[2];
            v39 = *(_QWORD **)v38;
            v40 = *(unsigned __int16 *)(a1[3] + 40);
            v41 = *(char **)(*(_QWORD *)v38 + 2056);
            v42 = *(_QWORD *)(*(_QWORD *)v38 + 2064);
            if ((unint64_t)v41 >= v42)
            {
              v172 = (char *)v39[256];
              v173 = (v41 - v172) >> 3;
              if ((unint64_t)(v173 + 1) >> 61)
                goto LABEL_450;
              v174 = v42 - (_QWORD)v172;
              v175 = (uint64_t)(v42 - (_QWORD)v172) >> 2;
              if (v175 <= v173 + 1)
                v175 = v173 + 1;
              if (v174 >= 0x7FFFFFFFFFFFFFF8)
                v176 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v176 = v175;
              if (v176)
              {
                v177 = (char *)sub_40FC((uint64_t)(v39 + 258), v176);
                v41 = (char *)v39[257];
                v172 = (char *)v39[256];
              }
              else
              {
                v177 = 0;
              }
              v296 = &v177[8 * v173];
              *(_QWORD *)v296 = v40;
              v43 = v296 + 8;
              while (v41 != v172)
              {
                v297 = *((_QWORD *)v41 - 1);
                v41 -= 8;
                *((_QWORD *)v296 - 1) = v297;
                v296 -= 8;
              }
              v39[256] = v296;
              v39[257] = v43;
              v39[258] = &v177[8 * v176];
              if (v172)
                operator delete(v172);
            }
            else
            {
              *(_QWORD *)v41 = v40;
              v43 = v41 + 8;
            }
            v39[257] = v43;
            break;
          case '6':
            v44 = *(_QWORD **)a1[2];
            v45 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFLL;
            v46 = (uint64_t *)v44[260];
            v47 = v44[261];
            if ((unint64_t)v46 >= v47)
            {
              v178 = (uint64_t *)v44[259];
              v179 = v46 - v178;
              if ((unint64_t)(v179 + 1) >> 61)
                goto LABEL_450;
              v180 = v47 - (_QWORD)v178;
              v181 = (uint64_t)(v47 - (_QWORD)v178) >> 2;
              if (v181 <= v179 + 1)
                v181 = v179 + 1;
              if (v180 >= 0x7FFFFFFFFFFFFFF8)
                v182 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v182 = v181;
              if (v182)
              {
                v183 = (char *)sub_40FC((uint64_t)(v44 + 261), v182);
                v46 = (uint64_t *)v44[260];
                v178 = (uint64_t *)v44[259];
              }
              else
              {
                v183 = 0;
              }
              v298 = (uint64_t *)&v183[8 * v179];
              *v298 = v45;
              v48 = v298 + 1;
              while (v46 != v178)
              {
                v299 = *--v46;
                *--v298 = v299;
              }
              v44[259] = v298;
              v44[260] = v48;
              v44[261] = &v183[8 * v182];
              if (v178)
                operator delete(v178);
            }
            else
            {
              *v46 = v45;
              v48 = v46 + 1;
            }
            v44[260] = v48;
            break;
          case '7':
            v49 = *(_QWORD **)a1[2];
            v50 = *(_QWORD *)(a1[3] + 56) & 0x1FFFFLL;
            v51 = (uint64_t *)v49[263];
            v52 = v49[264];
            if ((unint64_t)v51 >= v52)
            {
              v184 = (uint64_t *)v49[262];
              v185 = v51 - v184;
              if ((unint64_t)(v185 + 1) >> 61)
                goto LABEL_450;
              v186 = v52 - (_QWORD)v184;
              v187 = (uint64_t)(v52 - (_QWORD)v184) >> 2;
              if (v187 <= v185 + 1)
                v187 = v185 + 1;
              if (v186 >= 0x7FFFFFFFFFFFFFF8)
                v188 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v188 = v187;
              if (v188)
              {
                v189 = (char *)sub_40FC((uint64_t)(v49 + 264), v188);
                v51 = (uint64_t *)v49[263];
                v184 = (uint64_t *)v49[262];
              }
              else
              {
                v189 = 0;
              }
              v300 = (uint64_t *)&v189[8 * v185];
              *v300 = v50;
              v53 = v300 + 1;
              while (v51 != v184)
              {
                v301 = *--v51;
                *--v300 = v301;
              }
              v49[262] = v300;
              v49[263] = v53;
              v49[264] = &v189[8 * v188];
              if (v184)
                operator delete(v184);
            }
            else
            {
              *v51 = v50;
              v53 = v51 + 1;
            }
            v49[263] = v53;
            break;
          case '8':
            v54 = *(_QWORD **)a1[2];
            v55 = *(_DWORD *)(a1[3] + 72) & 0x1FFFFLL;
            v56 = (uint64_t *)v54[266];
            v57 = v54[267];
            if ((unint64_t)v56 >= v57)
            {
              v190 = (uint64_t *)v54[265];
              v191 = v56 - v190;
              if ((unint64_t)(v191 + 1) >> 61)
                goto LABEL_450;
              v192 = v57 - (_QWORD)v190;
              v193 = (uint64_t)(v57 - (_QWORD)v190) >> 2;
              if (v193 <= v191 + 1)
                v193 = v191 + 1;
              if (v192 >= 0x7FFFFFFFFFFFFFF8)
                v194 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v194 = v193;
              if (v194)
              {
                v195 = (char *)sub_40FC((uint64_t)(v54 + 267), v194);
                v56 = (uint64_t *)v54[266];
                v190 = (uint64_t *)v54[265];
              }
              else
              {
                v195 = 0;
              }
              v302 = (uint64_t *)&v195[8 * v191];
              *v302 = v55;
              v58 = v302 + 1;
              while (v56 != v190)
              {
                v303 = *--v56;
                *--v302 = v303;
              }
              v54[265] = v302;
              v54[266] = v58;
              v54[267] = &v195[8 * v194];
              if (v190)
                operator delete(v190);
            }
            else
            {
              *v56 = v55;
              v58 = v56 + 1;
            }
            v54[266] = v58;
            break;
          case '9':
            v59 = *(_QWORD **)a1[2];
            v60 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            v61 = (uint64_t *)v59[269];
            v62 = v59[270];
            if ((unint64_t)v61 >= v62)
            {
              v196 = (uint64_t *)v59[268];
              v197 = v61 - v196;
              if ((unint64_t)(v197 + 1) >> 61)
                goto LABEL_450;
              v198 = v62 - (_QWORD)v196;
              v199 = (uint64_t)(v62 - (_QWORD)v196) >> 2;
              if (v199 <= v197 + 1)
                v199 = v197 + 1;
              if (v198 >= 0x7FFFFFFFFFFFFFF8)
                v200 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v200 = v199;
              if (v200)
              {
                v201 = (char *)sub_40FC((uint64_t)(v59 + 270), v200);
                v61 = (uint64_t *)v59[269];
                v196 = (uint64_t *)v59[268];
              }
              else
              {
                v201 = 0;
              }
              v304 = (uint64_t *)&v201[8 * v197];
              *v304 = v60;
              v63 = v304 + 1;
              while (v61 != v196)
              {
                v305 = *--v61;
                *--v304 = v305;
              }
              v59[268] = v304;
              v59[269] = v63;
              v59[270] = &v201[8 * v200];
              if (v196)
                operator delete(v196);
            }
            else
            {
              *v61 = v60;
              v63 = v61 + 1;
            }
            v59[269] = v63;
            break;
          case ':':
            v64 = a1[2];
            v65 = *(_QWORD **)v64;
            v66 = *(unsigned __int16 *)(a1[3] + 76);
            v67 = *(char **)(*(_QWORD *)v64 + 2176);
            v68 = *(_QWORD *)(*(_QWORD *)v64 + 2184);
            if ((unint64_t)v67 >= v68)
            {
              v202 = (char *)v65[271];
              v203 = (v67 - v202) >> 3;
              if ((unint64_t)(v203 + 1) >> 61)
                goto LABEL_450;
              v204 = v68 - (_QWORD)v202;
              v205 = (uint64_t)(v68 - (_QWORD)v202) >> 2;
              if (v205 <= v203 + 1)
                v205 = v203 + 1;
              if (v204 >= 0x7FFFFFFFFFFFFFF8)
                v206 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v206 = v205;
              if (v206)
              {
                v207 = (char *)sub_40FC((uint64_t)(v65 + 273), v206);
                v67 = (char *)v65[272];
                v202 = (char *)v65[271];
              }
              else
              {
                v207 = 0;
              }
              v306 = &v207[8 * v203];
              *(_QWORD *)v306 = v66;
              v69 = v306 + 8;
              while (v67 != v202)
              {
                v307 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v306 - 1) = v307;
                v306 -= 8;
              }
              v65[271] = v306;
              v65[272] = v69;
              v65[273] = &v207[8 * v206];
              if (v202)
                operator delete(v202);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[272] = v69;
            break;
          case ';':
            v70 = a1[2];
            v71 = *(_QWORD **)v70;
            v72 = *(unsigned __int16 *)(a1[3] + 36);
            v73 = *(char **)(*(_QWORD *)v70 + 2200);
            v74 = *(_QWORD *)(*(_QWORD *)v70 + 2208);
            if ((unint64_t)v73 >= v74)
            {
              v208 = (char *)v71[274];
              v209 = (v73 - v208) >> 3;
              if ((unint64_t)(v209 + 1) >> 61)
                goto LABEL_450;
              v210 = v74 - (_QWORD)v208;
              v211 = (uint64_t)(v74 - (_QWORD)v208) >> 2;
              if (v211 <= v209 + 1)
                v211 = v209 + 1;
              if (v210 >= 0x7FFFFFFFFFFFFFF8)
                v212 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v212 = v211;
              if (v212)
              {
                v213 = (char *)sub_40FC((uint64_t)(v71 + 276), v212);
                v73 = (char *)v71[275];
                v208 = (char *)v71[274];
              }
              else
              {
                v213 = 0;
              }
              v308 = &v213[8 * v209];
              *(_QWORD *)v308 = v72;
              v75 = v308 + 8;
              while (v73 != v208)
              {
                v309 = *((_QWORD *)v73 - 1);
                v73 -= 8;
                *((_QWORD *)v308 - 1) = v309;
                v308 -= 8;
              }
              v71[274] = v308;
              v71[275] = v75;
              v71[276] = &v213[8 * v212];
              if (v208)
                operator delete(v208);
            }
            else
            {
              *(_QWORD *)v73 = v72;
              v75 = v73 + 8;
            }
            v71[275] = v75;
            break;
          case '<':
            v76 = a1[2];
            v77 = *(_QWORD **)v76;
            v78 = *(unsigned __int16 *)(a1[3] + 84);
            v79 = *(char **)(*(_QWORD *)v76 + 2224);
            v80 = *(_QWORD *)(*(_QWORD *)v76 + 2232);
            if ((unint64_t)v79 >= v80)
            {
              v214 = (char *)v77[277];
              v215 = (v79 - v214) >> 3;
              if ((unint64_t)(v215 + 1) >> 61)
                goto LABEL_450;
              v216 = v80 - (_QWORD)v214;
              v217 = (uint64_t)(v80 - (_QWORD)v214) >> 2;
              if (v217 <= v215 + 1)
                v217 = v215 + 1;
              if (v216 >= 0x7FFFFFFFFFFFFFF8)
                v218 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v218 = v217;
              if (v218)
              {
                v219 = (char *)sub_40FC((uint64_t)(v77 + 279), v218);
                v79 = (char *)v77[278];
                v214 = (char *)v77[277];
              }
              else
              {
                v219 = 0;
              }
              v310 = &v219[8 * v215];
              *(_QWORD *)v310 = v78;
              v81 = v310 + 8;
              while (v79 != v214)
              {
                v311 = *((_QWORD *)v79 - 1);
                v79 -= 8;
                *((_QWORD *)v310 - 1) = v311;
                v310 -= 8;
              }
              v77[277] = v310;
              v77[278] = v81;
              v77[279] = &v219[8 * v218];
              if (v214)
                operator delete(v214);
            }
            else
            {
              *(_QWORD *)v79 = v78;
              v81 = v79 + 8;
            }
            v77[278] = v81;
            break;
          case '=':
            v82 = *(_QWORD **)a1[2];
            v83 = (*(unsigned __int16 *)(a1[3] + 44) | (*(unsigned __int8 *)(a1[3] + 46) << 16)) & 0x1FFFFLL;
            v84 = (uint64_t *)v82[281];
            v85 = v82[282];
            if ((unint64_t)v84 >= v85)
            {
              v220 = (uint64_t *)v82[280];
              v221 = v84 - v220;
              if ((unint64_t)(v221 + 1) >> 61)
                goto LABEL_450;
              v222 = v85 - (_QWORD)v220;
              v223 = (uint64_t)(v85 - (_QWORD)v220) >> 2;
              if (v223 <= v221 + 1)
                v223 = v221 + 1;
              if (v222 >= 0x7FFFFFFFFFFFFFF8)
                v224 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v224 = v223;
              if (v224)
              {
                v225 = (char *)sub_40FC((uint64_t)(v82 + 282), v224);
                v84 = (uint64_t *)v82[281];
                v220 = (uint64_t *)v82[280];
              }
              else
              {
                v225 = 0;
              }
              v312 = (uint64_t *)&v225[8 * v221];
              *v312 = v83;
              v86 = v312 + 1;
              while (v84 != v220)
              {
                v313 = *--v84;
                *--v312 = v313;
              }
              v82[280] = v312;
              v82[281] = v86;
              v82[282] = &v225[8 * v224];
              if (v220)
                operator delete(v220);
            }
            else
            {
              *v84 = v83;
              v86 = v84 + 1;
            }
            v82[281] = v86;
            break;
          case '>':
            v87 = a1[2];
            v88 = *(_QWORD **)v87;
            v89 = *(unsigned __int16 *)(a1[3] + 86);
            v90 = *(char **)(*(_QWORD *)v87 + 2272);
            v91 = *(_QWORD *)(*(_QWORD *)v87 + 2280);
            if ((unint64_t)v90 >= v91)
            {
              v226 = (char *)v88[283];
              v227 = (v90 - v226) >> 3;
              if ((unint64_t)(v227 + 1) >> 61)
                goto LABEL_450;
              v228 = v91 - (_QWORD)v226;
              v229 = (uint64_t)(v91 - (_QWORD)v226) >> 2;
              if (v229 <= v227 + 1)
                v229 = v227 + 1;
              if (v228 >= 0x7FFFFFFFFFFFFFF8)
                v230 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v230 = v229;
              if (v230)
              {
                v231 = (char *)sub_40FC((uint64_t)(v88 + 285), v230);
                v90 = (char *)v88[284];
                v226 = (char *)v88[283];
              }
              else
              {
                v231 = 0;
              }
              v314 = &v231[8 * v227];
              *(_QWORD *)v314 = v89;
              v92 = v314 + 8;
              while (v90 != v226)
              {
                v315 = *((_QWORD *)v90 - 1);
                v90 -= 8;
                *((_QWORD *)v314 - 1) = v315;
                v314 -= 8;
              }
              v88[283] = v314;
              v88[284] = v92;
              v88[285] = &v231[8 * v230];
              if (v226)
                operator delete(v226);
            }
            else
            {
              *(_QWORD *)v90 = v89;
              v92 = v90 + 8;
            }
            v88[284] = v92;
            break;
          case '?':
            v93 = *(_QWORD **)a1[2];
            v94 = *(_DWORD *)(a1[3] + 52) & 0x1FFFFLL;
            v95 = (uint64_t *)v93[287];
            v96 = v93[288];
            if ((unint64_t)v95 >= v96)
            {
              v232 = (uint64_t *)v93[286];
              v233 = v95 - v232;
              if ((unint64_t)(v233 + 1) >> 61)
                goto LABEL_450;
              v234 = v96 - (_QWORD)v232;
              v235 = (uint64_t)(v96 - (_QWORD)v232) >> 2;
              if (v235 <= v233 + 1)
                v235 = v233 + 1;
              if (v234 >= 0x7FFFFFFFFFFFFFF8)
                v236 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v236 = v235;
              if (v236)
              {
                v237 = (char *)sub_40FC((uint64_t)(v93 + 288), v236);
                v95 = (uint64_t *)v93[287];
                v232 = (uint64_t *)v93[286];
              }
              else
              {
                v237 = 0;
              }
              v316 = (uint64_t *)&v237[8 * v233];
              *v316 = v94;
              v97 = v316 + 1;
              while (v95 != v232)
              {
                v317 = *--v95;
                *--v316 = v317;
              }
              v93[286] = v316;
              v93[287] = v97;
              v93[288] = &v237[8 * v236];
              if (v232)
                operator delete(v232);
            }
            else
            {
              *v95 = v94;
              v97 = v95 + 1;
            }
            v93[287] = v97;
            break;
          case '@':
            v98 = a1[2];
            v99 = *(_QWORD **)v98;
            v100 = *(unsigned __int16 *)(a1[3] + 82);
            v101 = *(char **)(*(_QWORD *)v98 + 2320);
            v102 = *(_QWORD *)(*(_QWORD *)v98 + 2328);
            if ((unint64_t)v101 >= v102)
            {
              v238 = (char *)v99[289];
              v239 = (v101 - v238) >> 3;
              if ((unint64_t)(v239 + 1) >> 61)
                goto LABEL_450;
              v240 = v102 - (_QWORD)v238;
              v241 = (uint64_t)(v102 - (_QWORD)v238) >> 2;
              if (v241 <= v239 + 1)
                v241 = v239 + 1;
              if (v240 >= 0x7FFFFFFFFFFFFFF8)
                v242 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v242 = v241;
              if (v242)
              {
                v243 = (char *)sub_40FC((uint64_t)(v99 + 291), v242);
                v101 = (char *)v99[290];
                v238 = (char *)v99[289];
              }
              else
              {
                v243 = 0;
              }
              v318 = &v243[8 * v239];
              *(_QWORD *)v318 = v100;
              v103 = v318 + 8;
              while (v101 != v238)
              {
                v319 = *((_QWORD *)v101 - 1);
                v101 -= 8;
                *((_QWORD *)v318 - 1) = v319;
                v318 -= 8;
              }
              v99[289] = v318;
              v99[290] = v103;
              v99[291] = &v243[8 * v242];
              if (v238)
                operator delete(v238);
            }
            else
            {
              *(_QWORD *)v101 = v100;
              v103 = v101 + 8;
            }
            v99[290] = v103;
            break;
          case 'A':
            v104 = a1[2];
            v105 = *(_QWORD **)v104;
            v106 = *(unsigned __int16 *)(a1[3] + 42);
            v107 = *(char **)(*(_QWORD *)v104 + 2344);
            v108 = *(_QWORD *)(*(_QWORD *)v104 + 2352);
            if ((unint64_t)v107 >= v108)
            {
              v244 = (char *)v105[292];
              v245 = (v107 - v244) >> 3;
              if ((unint64_t)(v245 + 1) >> 61)
                goto LABEL_450;
              v246 = v108 - (_QWORD)v244;
              v247 = (uint64_t)(v108 - (_QWORD)v244) >> 2;
              if (v247 <= v245 + 1)
                v247 = v245 + 1;
              if (v246 >= 0x7FFFFFFFFFFFFFF8)
                v248 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v248 = v247;
              if (v248)
              {
                v249 = (char *)sub_40FC((uint64_t)(v105 + 294), v248);
                v107 = (char *)v105[293];
                v244 = (char *)v105[292];
              }
              else
              {
                v249 = 0;
              }
              v320 = &v249[8 * v245];
              *(_QWORD *)v320 = v106;
              v109 = v320 + 8;
              while (v107 != v244)
              {
                v321 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *((_QWORD *)v320 - 1) = v321;
                v320 -= 8;
              }
              v105[292] = v320;
              v105[293] = v109;
              v105[294] = &v249[8 * v248];
              if (v244)
                operator delete(v244);
            }
            else
            {
              *(_QWORD *)v107 = v106;
              v109 = v107 + 8;
            }
            v105[293] = v109;
            break;
          case 'B':
            v110 = a1[2];
            v111 = *(_QWORD **)v110;
            v112 = *(unsigned __int16 *)(a1[3] + 78);
            v113 = *(char **)(*(_QWORD *)v110 + 2368);
            v114 = *(_QWORD *)(*(_QWORD *)v110 + 2376);
            if ((unint64_t)v113 >= v114)
            {
              v250 = (char *)v111[295];
              v251 = (v113 - v250) >> 3;
              if ((unint64_t)(v251 + 1) >> 61)
                goto LABEL_450;
              v252 = v114 - (_QWORD)v250;
              v253 = (uint64_t)(v114 - (_QWORD)v250) >> 2;
              if (v253 <= v251 + 1)
                v253 = v251 + 1;
              if (v252 >= 0x7FFFFFFFFFFFFFF8)
                v254 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v254 = v253;
              if (v254)
              {
                v255 = (char *)sub_40FC((uint64_t)(v111 + 297), v254);
                v113 = (char *)v111[296];
                v250 = (char *)v111[295];
              }
              else
              {
                v255 = 0;
              }
              v322 = &v255[8 * v251];
              *(_QWORD *)v322 = v112;
              v115 = v322 + 8;
              while (v113 != v250)
              {
                v323 = *((_QWORD *)v113 - 1);
                v113 -= 8;
                *((_QWORD *)v322 - 1) = v323;
                v322 -= 8;
              }
              v111[295] = v322;
              v111[296] = v115;
              v111[297] = &v255[8 * v254];
              if (v250)
                operator delete(v250);
            }
            else
            {
              *(_QWORD *)v113 = v112;
              v115 = v113 + 8;
            }
            v111[296] = v115;
            break;
          case 'C':
            v116 = a1[2];
            v117 = *(_QWORD **)v116;
            v118 = *(unsigned __int16 *)(a1[3] + 38);
            v119 = *(char **)(*(_QWORD *)v116 + 2392);
            v120 = *(_QWORD *)(*(_QWORD *)v116 + 2400);
            if ((unint64_t)v119 >= v120)
            {
              v256 = (char *)v117[298];
              v257 = (v119 - v256) >> 3;
              if ((unint64_t)(v257 + 1) >> 61)
                goto LABEL_450;
              v258 = v120 - (_QWORD)v256;
              v259 = (uint64_t)(v120 - (_QWORD)v256) >> 2;
              if (v259 <= v257 + 1)
                v259 = v257 + 1;
              if (v258 >= 0x7FFFFFFFFFFFFFF8)
                v260 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v260 = v259;
              if (v260)
              {
                v261 = (char *)sub_40FC((uint64_t)(v117 + 300), v260);
                v119 = (char *)v117[299];
                v256 = (char *)v117[298];
              }
              else
              {
                v261 = 0;
              }
              v324 = &v261[8 * v257];
              *(_QWORD *)v324 = v118;
              v121 = v324 + 8;
              while (v119 != v256)
              {
                v325 = *((_QWORD *)v119 - 1);
                v119 -= 8;
                *((_QWORD *)v324 - 1) = v325;
                v324 -= 8;
              }
              v117[298] = v324;
              v117[299] = v121;
              v117[300] = &v261[8 * v260];
              if (v256)
                operator delete(v256);
            }
            else
            {
              *(_QWORD *)v119 = v118;
              v121 = v119 + 8;
            }
            v117[299] = v121;
            break;
          case 'D':
            v122 = *(_QWORD **)a1[2];
            v123 = *(_DWORD *)(a1[3] + 64) & 0x3FFFFLL;
            v124 = (uint64_t *)v122[302];
            v125 = v122[303];
            if ((unint64_t)v124 >= v125)
            {
              v262 = (uint64_t *)v122[301];
              v263 = v124 - v262;
              if ((unint64_t)(v263 + 1) >> 61)
                goto LABEL_450;
              v264 = v125 - (_QWORD)v262;
              v265 = (uint64_t)(v125 - (_QWORD)v262) >> 2;
              if (v265 <= v263 + 1)
                v265 = v263 + 1;
              if (v264 >= 0x7FFFFFFFFFFFFFF8)
                v266 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v266 = v265;
              if (v266)
              {
                v267 = (char *)sub_40FC((uint64_t)(v122 + 303), v266);
                v124 = (uint64_t *)v122[302];
                v262 = (uint64_t *)v122[301];
              }
              else
              {
                v267 = 0;
              }
              v326 = (uint64_t *)&v267[8 * v263];
              *v326 = v123;
              v126 = v326 + 1;
              while (v124 != v262)
              {
                v327 = *--v124;
                *--v326 = v327;
              }
              v122[301] = v326;
              v122[302] = v126;
              v122[303] = &v267[8 * v266];
              if (v262)
                operator delete(v262);
            }
            else
            {
              *v124 = v123;
              v126 = v124 + 1;
            }
            v122[302] = v126;
            break;
          case 'E':
            v127 = *(_QWORD **)a1[2];
            v128 = ((*(unsigned int *)(a1[3] + 22) | ((unint64_t)*(unsigned __int8 *)(a1[3] + 26) << 32)) >> 16) & 0x3FFFF;
            v129 = (unint64_t *)v127[305];
            v130 = v127[306];
            if ((unint64_t)v129 >= v130)
            {
              v268 = (unint64_t *)v127[304];
              v269 = v129 - v268;
              if ((unint64_t)(v269 + 1) >> 61)
                goto LABEL_450;
              v270 = v130 - (_QWORD)v268;
              v271 = (uint64_t)(v130 - (_QWORD)v268) >> 2;
              if (v271 <= v269 + 1)
                v271 = v269 + 1;
              if (v270 >= 0x7FFFFFFFFFFFFFF8)
                v272 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v272 = v271;
              if (v272)
              {
                v273 = (char *)sub_40FC((uint64_t)(v127 + 306), v272);
                v129 = (unint64_t *)v127[305];
                v268 = (unint64_t *)v127[304];
              }
              else
              {
                v273 = 0;
              }
              v328 = (unint64_t *)&v273[8 * v269];
              *v328 = v128;
              v131 = v328 + 1;
              while (v129 != v268)
              {
                v329 = *--v129;
                *--v328 = v329;
              }
              v127[304] = v328;
              v127[305] = v131;
              v127[306] = &v273[8 * v272];
              if (v268)
                operator delete(v268);
            }
            else
            {
              *v129 = v128;
              v131 = v129 + 1;
            }
            v127[305] = v131;
            break;
          case 'F':
            v132 = *(_QWORD **)a1[2];
            v133 = *(_DWORD *)(a1[3] + 68) & 0x3FFFFLL;
            v134 = (uint64_t *)v132[308];
            v135 = v132[309];
            if ((unint64_t)v134 >= v135)
            {
              v274 = (uint64_t *)v132[307];
              v275 = v134 - v274;
              if ((unint64_t)(v275 + 1) >> 61)
                goto LABEL_450;
              v276 = v135 - (_QWORD)v274;
              v277 = (uint64_t)(v135 - (_QWORD)v274) >> 2;
              if (v277 <= v275 + 1)
                v277 = v275 + 1;
              if (v276 >= 0x7FFFFFFFFFFFFFF8)
                v278 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v278 = v277;
              if (v278)
              {
                v279 = (char *)sub_40FC((uint64_t)(v132 + 309), v278);
                v134 = (uint64_t *)v132[308];
                v274 = (uint64_t *)v132[307];
              }
              else
              {
                v279 = 0;
              }
              v330 = (uint64_t *)&v279[8 * v275];
              *v330 = v133;
              v136 = v330 + 1;
              while (v134 != v274)
              {
                v331 = *--v134;
                *--v330 = v331;
              }
              v132[307] = v330;
              v132[308] = v136;
              v132[309] = &v279[8 * v278];
              if (v274)
                operator delete(v274);
            }
            else
            {
              *v134 = v133;
              v136 = v134 + 1;
            }
            v132[308] = v136;
            break;
          case 'G':
            v137 = *(_QWORD **)a1[2];
            v138 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            v139 = (uint64_t *)v137[311];
            v140 = v137[312];
            if ((unint64_t)v139 >= v140)
            {
              v280 = (uint64_t *)v137[310];
              v281 = v139 - v280;
              if ((unint64_t)(v281 + 1) >> 61)
LABEL_450:
                sub_4074();
              v282 = v140 - (_QWORD)v280;
              v283 = (uint64_t)(v140 - (_QWORD)v280) >> 2;
              if (v283 <= v281 + 1)
                v283 = v281 + 1;
              if (v282 >= 0x7FFFFFFFFFFFFFF8)
                v284 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v284 = v283;
              if (v284)
              {
                v285 = (char *)sub_40FC((uint64_t)(v137 + 312), v284);
                v139 = (uint64_t *)v137[311];
                v280 = (uint64_t *)v137[310];
              }
              else
              {
                v285 = 0;
              }
              v332 = (uint64_t *)&v285[8 * v281];
              *v332 = v138;
              v141 = v332 + 1;
              while (v139 != v280)
              {
                v333 = *--v139;
                *--v332 = v333;
              }
              v137[310] = v332;
              v137[311] = v141;
              v137[312] = &v285[8 * v284];
              if (v280)
                operator delete(v280);
            }
            else
            {
              *v139 = v138;
              v141 = v139 + 1;
            }
            v137[311] = v141;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E3358(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  unint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t *v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  char *v184;
  uint64_t *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  char *v190;
  uint64_t *v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  uint64_t *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  char *v202;
  uint64_t *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  uint64_t *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  char *v214;
  uint64_t *v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  int *v259;
  int **v260;
  uint64_t v261;
  unint64_t v262;
  int v263;
  unint64_t v264;
  _QWORD *v265;

  v4 = *a1;
  if (*a2 == 1)
  {
    v260 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v259 = *v260;
    v261 = (char *)v260[1] - (char *)*v260;
    if (v261)
    {
      v262 = v261 >> 2;
      if (v262 <= 1)
        v262 = 1;
      do
      {
        v263 = *v259++;
        switch(v263)
        {
          case 29:
            v264 = *(unsigned __int16 *)(a1[3] + 64);
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1480);
            goto LABEL_356;
          case 30:
            v264 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1504);
            goto LABEL_356;
          case 31:
            v264 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1528);
            goto LABEL_356;
          case 32:
            v264 = *(_DWORD *)(a1[3] + 24) & 0x3FFFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1552);
            goto LABEL_356;
          case 33:
            v264 = ((unint64_t)*(unsigned int *)(a1[3] + 20) >> 1) & 0x3FFFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1576);
            goto LABEL_356;
          case 34:
            v264 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1600);
            goto LABEL_356;
          case 35:
            v264 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1624);
            goto LABEL_356;
          case 36:
            v264 = *(unsigned __int16 *)(a1[3] + 66);
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1648);
            goto LABEL_356;
          case 37:
            v264 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1672);
            goto LABEL_356;
          case 38:
            v264 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1696);
            goto LABEL_356;
          case 39:
            v264 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1720);
            goto LABEL_356;
          case 40:
            v264 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1744);
            goto LABEL_356;
          case 41:
            v264 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1768);
            goto LABEL_356;
          case 42:
            v264 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1792);
            goto LABEL_356;
          case 43:
            v264 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1816);
            goto LABEL_356;
          case 44:
            v264 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1840);
            goto LABEL_356;
          case 45:
            v264 = *(_DWORD *)(a1[3] + 52) & 0xFFFFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1864);
            goto LABEL_356;
          case 46:
            v264 = *(_DWORD *)(a1[3] + 60) & 0x3FFFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1888);
            goto LABEL_356;
          case 47:
            v264 = *(_DWORD *)(a1[3] + 56) & 0xFFFFF;
            v265 = (_QWORD *)(*(_QWORD *)a1[2] + 1912);
LABEL_356:
            *(_QWORD *)(*v265 - 8) += v264;
            break;
          default:
            break;
        }
        --v262;
      }
      while (v262);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x1D:
            v10 = a1[2];
            v11 = *(_QWORD **)v10;
            v12 = *(unsigned __int16 *)(a1[3] + 64);
            v13 = *(char **)(*(_QWORD *)v10 + 1480);
            v14 = *(_QWORD *)(*(_QWORD *)v10 + 1488);
            if ((unint64_t)v13 >= v14)
            {
              v107 = (char *)v11[184];
              v108 = (v13 - v107) >> 3;
              if ((unint64_t)(v108 + 1) >> 61)
                goto LABEL_360;
              v109 = v14 - (_QWORD)v107;
              v110 = (uint64_t)(v14 - (_QWORD)v107) >> 2;
              if (v110 <= v108 + 1)
                v110 = v108 + 1;
              if (v109 >= 0x7FFFFFFFFFFFFFF8)
                v111 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v111 = v110;
              if (v111)
              {
                v112 = (char *)sub_40FC((uint64_t)(v11 + 186), v111);
                v13 = (char *)v11[185];
                v107 = (char *)v11[184];
              }
              else
              {
                v112 = 0;
              }
              v221 = &v112[8 * v108];
              *(_QWORD *)v221 = v12;
              v15 = v221 + 8;
              while (v13 != v107)
              {
                v222 = *((_QWORD *)v13 - 1);
                v13 -= 8;
                *((_QWORD *)v221 - 1) = v222;
                v221 -= 8;
              }
              v11[184] = v221;
              v11[185] = v15;
              v11[186] = &v112[8 * v111];
              if (v107)
                operator delete(v107);
            }
            else
            {
              *(_QWORD *)v13 = v12;
              v15 = v13 + 8;
            }
            v11[185] = v15;
            break;
          case 0x1E:
            v16 = *(_QWORD **)a1[2];
            v17 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            v18 = (uint64_t *)v16[188];
            v19 = v16[189];
            if ((unint64_t)v18 >= v19)
            {
              v113 = (uint64_t *)v16[187];
              v114 = v18 - v113;
              if ((unint64_t)(v114 + 1) >> 61)
                goto LABEL_360;
              v115 = v19 - (_QWORD)v113;
              v116 = (uint64_t)(v19 - (_QWORD)v113) >> 2;
              if (v116 <= v114 + 1)
                v116 = v114 + 1;
              if (v115 >= 0x7FFFFFFFFFFFFFF8)
                v117 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v117 = v116;
              if (v117)
              {
                v118 = (char *)sub_40FC((uint64_t)(v16 + 189), v117);
                v18 = (uint64_t *)v16[188];
                v113 = (uint64_t *)v16[187];
              }
              else
              {
                v118 = 0;
              }
              v223 = (uint64_t *)&v118[8 * v114];
              *v223 = v17;
              v20 = v223 + 1;
              while (v18 != v113)
              {
                v224 = *--v18;
                *--v223 = v224;
              }
              v16[187] = v223;
              v16[188] = v20;
              v16[189] = &v118[8 * v117];
              if (v113)
                operator delete(v113);
            }
            else
            {
              *v18 = v17;
              v20 = v18 + 1;
            }
            v16[188] = v20;
            break;
          case 0x1F:
            v21 = *(_QWORD **)a1[2];
            v22 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            v23 = (uint64_t *)v21[191];
            v24 = v21[192];
            if ((unint64_t)v23 >= v24)
            {
              v119 = (uint64_t *)v21[190];
              v120 = v23 - v119;
              if ((unint64_t)(v120 + 1) >> 61)
                goto LABEL_360;
              v121 = v24 - (_QWORD)v119;
              v122 = (uint64_t)(v24 - (_QWORD)v119) >> 2;
              if (v122 <= v120 + 1)
                v122 = v120 + 1;
              if (v121 >= 0x7FFFFFFFFFFFFFF8)
                v123 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v123 = v122;
              if (v123)
              {
                v124 = (char *)sub_40FC((uint64_t)(v21 + 192), v123);
                v23 = (uint64_t *)v21[191];
                v119 = (uint64_t *)v21[190];
              }
              else
              {
                v124 = 0;
              }
              v225 = (uint64_t *)&v124[8 * v120];
              *v225 = v22;
              v25 = v225 + 1;
              while (v23 != v119)
              {
                v226 = *--v23;
                *--v225 = v226;
              }
              v21[190] = v225;
              v21[191] = v25;
              v21[192] = &v124[8 * v123];
              if (v119)
                operator delete(v119);
            }
            else
            {
              *v23 = v22;
              v25 = v23 + 1;
            }
            v21[191] = v25;
            break;
          case 0x20:
            v26 = *(_QWORD **)a1[2];
            v27 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFLL;
            v28 = (uint64_t *)v26[194];
            v29 = v26[195];
            if ((unint64_t)v28 >= v29)
            {
              v125 = (uint64_t *)v26[193];
              v126 = v28 - v125;
              if ((unint64_t)(v126 + 1) >> 61)
                goto LABEL_360;
              v127 = v29 - (_QWORD)v125;
              v128 = (uint64_t)(v29 - (_QWORD)v125) >> 2;
              if (v128 <= v126 + 1)
                v128 = v126 + 1;
              if (v127 >= 0x7FFFFFFFFFFFFFF8)
                v129 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v129 = v128;
              if (v129)
              {
                v130 = (char *)sub_40FC((uint64_t)(v26 + 195), v129);
                v28 = (uint64_t *)v26[194];
                v125 = (uint64_t *)v26[193];
              }
              else
              {
                v130 = 0;
              }
              v227 = (uint64_t *)&v130[8 * v126];
              *v227 = v27;
              v30 = v227 + 1;
              while (v28 != v125)
              {
                v228 = *--v28;
                *--v227 = v228;
              }
              v26[193] = v227;
              v26[194] = v30;
              v26[195] = &v130[8 * v129];
              if (v125)
                operator delete(v125);
            }
            else
            {
              *v28 = v27;
              v30 = v28 + 1;
            }
            v26[194] = v30;
            break;
          case 0x21:
            v31 = *(_QWORD **)a1[2];
            v32 = ((unint64_t)*(unsigned int *)(a1[3] + 20) >> 1) & 0x3FFFF;
            v33 = (unint64_t *)v31[197];
            v34 = v31[198];
            if ((unint64_t)v33 >= v34)
            {
              v131 = (unint64_t *)v31[196];
              v132 = v33 - v131;
              if ((unint64_t)(v132 + 1) >> 61)
                goto LABEL_360;
              v133 = v34 - (_QWORD)v131;
              v134 = (uint64_t)(v34 - (_QWORD)v131) >> 2;
              if (v134 <= v132 + 1)
                v134 = v132 + 1;
              if (v133 >= 0x7FFFFFFFFFFFFFF8)
                v135 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v135 = v134;
              if (v135)
              {
                v136 = (char *)sub_40FC((uint64_t)(v31 + 198), v135);
                v33 = (unint64_t *)v31[197];
                v131 = (unint64_t *)v31[196];
              }
              else
              {
                v136 = 0;
              }
              v229 = (unint64_t *)&v136[8 * v132];
              *v229 = v32;
              v35 = v229 + 1;
              while (v33 != v131)
              {
                v230 = *--v33;
                *--v229 = v230;
              }
              v31[196] = v229;
              v31[197] = v35;
              v31[198] = &v136[8 * v135];
              if (v131)
                operator delete(v131);
            }
            else
            {
              *v33 = v32;
              v35 = v33 + 1;
            }
            v31[197] = v35;
            break;
          case 0x22:
            v36 = *(_QWORD **)a1[2];
            v37 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            v38 = (uint64_t *)v36[200];
            v39 = v36[201];
            if ((unint64_t)v38 >= v39)
            {
              v137 = (uint64_t *)v36[199];
              v138 = v38 - v137;
              if ((unint64_t)(v138 + 1) >> 61)
                goto LABEL_360;
              v139 = v39 - (_QWORD)v137;
              v140 = (uint64_t)(v39 - (_QWORD)v137) >> 2;
              if (v140 <= v138 + 1)
                v140 = v138 + 1;
              if (v139 >= 0x7FFFFFFFFFFFFFF8)
                v141 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v141 = v140;
              if (v141)
              {
                v142 = (char *)sub_40FC((uint64_t)(v36 + 201), v141);
                v38 = (uint64_t *)v36[200];
                v137 = (uint64_t *)v36[199];
              }
              else
              {
                v142 = 0;
              }
              v231 = (uint64_t *)&v142[8 * v138];
              *v231 = v37;
              v40 = v231 + 1;
              while (v38 != v137)
              {
                v232 = *--v38;
                *--v231 = v232;
              }
              v36[199] = v231;
              v36[200] = v40;
              v36[201] = &v142[8 * v141];
              if (v137)
                operator delete(v137);
            }
            else
            {
              *v38 = v37;
              v40 = v38 + 1;
            }
            v36[200] = v40;
            break;
          case 0x23:
            v41 = *(_QWORD **)a1[2];
            v42 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            v43 = (uint64_t *)v41[203];
            v44 = v41[204];
            if ((unint64_t)v43 >= v44)
            {
              v143 = (uint64_t *)v41[202];
              v144 = v43 - v143;
              if ((unint64_t)(v144 + 1) >> 61)
                goto LABEL_360;
              v145 = v44 - (_QWORD)v143;
              v146 = (uint64_t)(v44 - (_QWORD)v143) >> 2;
              if (v146 <= v144 + 1)
                v146 = v144 + 1;
              if (v145 >= 0x7FFFFFFFFFFFFFF8)
                v147 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v147 = v146;
              if (v147)
              {
                v148 = (char *)sub_40FC((uint64_t)(v41 + 204), v147);
                v43 = (uint64_t *)v41[203];
                v143 = (uint64_t *)v41[202];
              }
              else
              {
                v148 = 0;
              }
              v233 = (uint64_t *)&v148[8 * v144];
              *v233 = v42;
              v45 = v233 + 1;
              while (v43 != v143)
              {
                v234 = *--v43;
                *--v233 = v234;
              }
              v41[202] = v233;
              v41[203] = v45;
              v41[204] = &v148[8 * v147];
              if (v143)
                operator delete(v143);
            }
            else
            {
              *v43 = v42;
              v45 = v43 + 1;
            }
            v41[203] = v45;
            break;
          case 0x24:
            v46 = a1[2];
            v47 = *(_QWORD **)v46;
            v48 = *(unsigned __int16 *)(a1[3] + 66);
            v49 = *(char **)(*(_QWORD *)v46 + 1648);
            v50 = *(_QWORD *)(*(_QWORD *)v46 + 1656);
            if ((unint64_t)v49 >= v50)
            {
              v149 = (char *)v47[205];
              v150 = (v49 - v149) >> 3;
              if ((unint64_t)(v150 + 1) >> 61)
                goto LABEL_360;
              v151 = v50 - (_QWORD)v149;
              v152 = (uint64_t)(v50 - (_QWORD)v149) >> 2;
              if (v152 <= v150 + 1)
                v152 = v150 + 1;
              if (v151 >= 0x7FFFFFFFFFFFFFF8)
                v153 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v153 = v152;
              if (v153)
              {
                v154 = (char *)sub_40FC((uint64_t)(v47 + 207), v153);
                v49 = (char *)v47[206];
                v149 = (char *)v47[205];
              }
              else
              {
                v154 = 0;
              }
              v235 = &v154[8 * v150];
              *(_QWORD *)v235 = v48;
              v51 = v235 + 8;
              while (v49 != v149)
              {
                v236 = *((_QWORD *)v49 - 1);
                v49 -= 8;
                *((_QWORD *)v235 - 1) = v236;
                v235 -= 8;
              }
              v47[205] = v235;
              v47[206] = v51;
              v47[207] = &v154[8 * v153];
              if (v149)
                operator delete(v149);
            }
            else
            {
              *(_QWORD *)v49 = v48;
              v51 = v49 + 8;
            }
            v47[206] = v51;
            break;
          case 0x25:
            v52 = *(_QWORD **)a1[2];
            v53 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            v54 = (char *)v52[209];
            v55 = v52[210];
            if ((unint64_t)v54 >= v55)
            {
              v155 = (char *)v52[208];
              v156 = (v54 - v155) >> 3;
              if ((unint64_t)(v156 + 1) >> 61)
                goto LABEL_360;
              v157 = v55 - (_QWORD)v155;
              v158 = (uint64_t)(v55 - (_QWORD)v155) >> 2;
              if (v158 <= v156 + 1)
                v158 = v156 + 1;
              if (v157 >= 0x7FFFFFFFFFFFFFF8)
                v159 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v159 = v158;
              if (v159)
              {
                v160 = (char *)sub_40FC((uint64_t)(v52 + 210), v159);
                v54 = (char *)v52[209];
                v155 = (char *)v52[208];
              }
              else
              {
                v160 = 0;
              }
              v237 = &v160[8 * v156];
              *(_QWORD *)v237 = v53;
              v56 = v237 + 8;
              while (v54 != v155)
              {
                v238 = *((_QWORD *)v54 - 1);
                v54 -= 8;
                *((_QWORD *)v237 - 1) = v238;
                v237 -= 8;
              }
              v52[208] = v237;
              v52[209] = v56;
              v52[210] = &v160[8 * v159];
              if (v155)
                operator delete(v155);
            }
            else
            {
              *(_QWORD *)v54 = v53;
              v56 = v54 + 8;
            }
            v52[209] = v56;
            break;
          case 0x26:
            v57 = *(_QWORD **)a1[2];
            v58 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            v59 = (char *)v57[212];
            v60 = v57[213];
            if ((unint64_t)v59 >= v60)
            {
              v161 = (char *)v57[211];
              v162 = (v59 - v161) >> 3;
              if ((unint64_t)(v162 + 1) >> 61)
                goto LABEL_360;
              v163 = v60 - (_QWORD)v161;
              v164 = (uint64_t)(v60 - (_QWORD)v161) >> 2;
              if (v164 <= v162 + 1)
                v164 = v162 + 1;
              if (v163 >= 0x7FFFFFFFFFFFFFF8)
                v165 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v165 = v164;
              if (v165)
              {
                v166 = (char *)sub_40FC((uint64_t)(v57 + 213), v165);
                v59 = (char *)v57[212];
                v161 = (char *)v57[211];
              }
              else
              {
                v166 = 0;
              }
              v239 = &v166[8 * v162];
              *(_QWORD *)v239 = v58;
              v61 = v239 + 8;
              while (v59 != v161)
              {
                v240 = *((_QWORD *)v59 - 1);
                v59 -= 8;
                *((_QWORD *)v239 - 1) = v240;
                v239 -= 8;
              }
              v57[211] = v239;
              v57[212] = v61;
              v57[213] = &v166[8 * v165];
              if (v161)
                operator delete(v161);
            }
            else
            {
              *(_QWORD *)v59 = v58;
              v61 = v59 + 8;
            }
            v57[212] = v61;
            break;
          case 0x27:
            v62 = *(_QWORD **)a1[2];
            v63 = *(_WORD *)(a1[3] + 50) & 0x7FFF;
            v64 = (char *)v62[215];
            v65 = v62[216];
            if ((unint64_t)v64 >= v65)
            {
              v167 = (char *)v62[214];
              v168 = (v64 - v167) >> 3;
              if ((unint64_t)(v168 + 1) >> 61)
                goto LABEL_360;
              v169 = v65 - (_QWORD)v167;
              v170 = (uint64_t)(v65 - (_QWORD)v167) >> 2;
              if (v170 <= v168 + 1)
                v170 = v168 + 1;
              if (v169 >= 0x7FFFFFFFFFFFFFF8)
                v171 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v171 = v170;
              if (v171)
              {
                v172 = (char *)sub_40FC((uint64_t)(v62 + 216), v171);
                v64 = (char *)v62[215];
                v167 = (char *)v62[214];
              }
              else
              {
                v172 = 0;
              }
              v241 = &v172[8 * v168];
              *(_QWORD *)v241 = v63;
              v66 = v241 + 8;
              while (v64 != v167)
              {
                v242 = *((_QWORD *)v64 - 1);
                v64 -= 8;
                *((_QWORD *)v241 - 1) = v242;
                v241 -= 8;
              }
              v62[214] = v241;
              v62[215] = v66;
              v62[216] = &v172[8 * v171];
              if (v167)
                operator delete(v167);
            }
            else
            {
              *(_QWORD *)v64 = v63;
              v66 = v64 + 8;
            }
            v62[215] = v66;
            break;
          case 0x28:
            v67 = *(_QWORD **)a1[2];
            v68 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            v69 = (char *)v67[218];
            v70 = v67[219];
            if ((unint64_t)v69 >= v70)
            {
              v173 = (char *)v67[217];
              v174 = (v69 - v173) >> 3;
              if ((unint64_t)(v174 + 1) >> 61)
                goto LABEL_360;
              v175 = v70 - (_QWORD)v173;
              v176 = (uint64_t)(v70 - (_QWORD)v173) >> 2;
              if (v176 <= v174 + 1)
                v176 = v174 + 1;
              if (v175 >= 0x7FFFFFFFFFFFFFF8)
                v177 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v177 = v176;
              if (v177)
              {
                v178 = (char *)sub_40FC((uint64_t)(v67 + 219), v177);
                v69 = (char *)v67[218];
                v173 = (char *)v67[217];
              }
              else
              {
                v178 = 0;
              }
              v243 = &v178[8 * v174];
              *(_QWORD *)v243 = v68;
              v71 = v243 + 8;
              while (v69 != v173)
              {
                v244 = *((_QWORD *)v69 - 1);
                v69 -= 8;
                *((_QWORD *)v243 - 1) = v244;
                v243 -= 8;
              }
              v67[217] = v243;
              v67[218] = v71;
              v67[219] = &v178[8 * v177];
              if (v173)
                operator delete(v173);
            }
            else
            {
              *(_QWORD *)v69 = v68;
              v71 = v69 + 8;
            }
            v67[218] = v71;
            break;
          case 0x29:
            v72 = *(_QWORD **)a1[2];
            v73 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            v74 = (uint64_t *)v72[221];
            v75 = v72[222];
            if ((unint64_t)v74 >= v75)
            {
              v179 = (uint64_t *)v72[220];
              v180 = v74 - v179;
              if ((unint64_t)(v180 + 1) >> 61)
                goto LABEL_360;
              v181 = v75 - (_QWORD)v179;
              v182 = (uint64_t)(v75 - (_QWORD)v179) >> 2;
              if (v182 <= v180 + 1)
                v182 = v180 + 1;
              if (v181 >= 0x7FFFFFFFFFFFFFF8)
                v183 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v183 = v182;
              if (v183)
              {
                v184 = (char *)sub_40FC((uint64_t)(v72 + 222), v183);
                v74 = (uint64_t *)v72[221];
                v179 = (uint64_t *)v72[220];
              }
              else
              {
                v184 = 0;
              }
              v245 = (uint64_t *)&v184[8 * v180];
              *v245 = v73;
              v76 = v245 + 1;
              while (v74 != v179)
              {
                v246 = *--v74;
                *--v245 = v246;
              }
              v72[220] = v245;
              v72[221] = v76;
              v72[222] = &v184[8 * v183];
              if (v179)
                operator delete(v179);
            }
            else
            {
              *v74 = v73;
              v76 = v74 + 1;
            }
            v72[221] = v76;
            break;
          case 0x2A:
            v77 = *(_QWORD **)a1[2];
            v78 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            v79 = (uint64_t *)v77[224];
            v80 = v77[225];
            if ((unint64_t)v79 >= v80)
            {
              v185 = (uint64_t *)v77[223];
              v186 = v79 - v185;
              if ((unint64_t)(v186 + 1) >> 61)
                goto LABEL_360;
              v187 = v80 - (_QWORD)v185;
              v188 = (uint64_t)(v80 - (_QWORD)v185) >> 2;
              if (v188 <= v186 + 1)
                v188 = v186 + 1;
              if (v187 >= 0x7FFFFFFFFFFFFFF8)
                v189 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v189 = v188;
              if (v189)
              {
                v190 = (char *)sub_40FC((uint64_t)(v77 + 225), v189);
                v79 = (uint64_t *)v77[224];
                v185 = (uint64_t *)v77[223];
              }
              else
              {
                v190 = 0;
              }
              v247 = (uint64_t *)&v190[8 * v186];
              *v247 = v78;
              v81 = v247 + 1;
              while (v79 != v185)
              {
                v248 = *--v79;
                *--v247 = v248;
              }
              v77[223] = v247;
              v77[224] = v81;
              v77[225] = &v190[8 * v189];
              if (v185)
                operator delete(v185);
            }
            else
            {
              *v79 = v78;
              v81 = v79 + 1;
            }
            v77[224] = v81;
            break;
          case 0x2B:
            v82 = *(_QWORD **)a1[2];
            v83 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            v84 = (uint64_t *)v82[227];
            v85 = v82[228];
            if ((unint64_t)v84 >= v85)
            {
              v191 = (uint64_t *)v82[226];
              v192 = v84 - v191;
              if ((unint64_t)(v192 + 1) >> 61)
                goto LABEL_360;
              v193 = v85 - (_QWORD)v191;
              v194 = (uint64_t)(v85 - (_QWORD)v191) >> 2;
              if (v194 <= v192 + 1)
                v194 = v192 + 1;
              if (v193 >= 0x7FFFFFFFFFFFFFF8)
                v195 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v195 = v194;
              if (v195)
              {
                v196 = (char *)sub_40FC((uint64_t)(v82 + 228), v195);
                v84 = (uint64_t *)v82[227];
                v191 = (uint64_t *)v82[226];
              }
              else
              {
                v196 = 0;
              }
              v249 = (uint64_t *)&v196[8 * v192];
              *v249 = v83;
              v86 = v249 + 1;
              while (v84 != v191)
              {
                v250 = *--v84;
                *--v249 = v250;
              }
              v82[226] = v249;
              v82[227] = v86;
              v82[228] = &v196[8 * v195];
              if (v191)
                operator delete(v191);
            }
            else
            {
              *v84 = v83;
              v86 = v84 + 1;
            }
            v82[227] = v86;
            break;
          case 0x2C:
            v87 = *(_QWORD **)a1[2];
            v88 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            v89 = (uint64_t *)v87[230];
            v90 = v87[231];
            if ((unint64_t)v89 >= v90)
            {
              v197 = (uint64_t *)v87[229];
              v198 = v89 - v197;
              if ((unint64_t)(v198 + 1) >> 61)
                goto LABEL_360;
              v199 = v90 - (_QWORD)v197;
              v200 = (uint64_t)(v90 - (_QWORD)v197) >> 2;
              if (v200 <= v198 + 1)
                v200 = v198 + 1;
              if (v199 >= 0x7FFFFFFFFFFFFFF8)
                v201 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v201 = v200;
              if (v201)
              {
                v202 = (char *)sub_40FC((uint64_t)(v87 + 231), v201);
                v89 = (uint64_t *)v87[230];
                v197 = (uint64_t *)v87[229];
              }
              else
              {
                v202 = 0;
              }
              v251 = (uint64_t *)&v202[8 * v198];
              *v251 = v88;
              v91 = v251 + 1;
              while (v89 != v197)
              {
                v252 = *--v89;
                *--v251 = v252;
              }
              v87[229] = v251;
              v87[230] = v91;
              v87[231] = &v202[8 * v201];
              if (v197)
                operator delete(v197);
            }
            else
            {
              *v89 = v88;
              v91 = v89 + 1;
            }
            v87[230] = v91;
            break;
          case 0x2D:
            v92 = *(_QWORD **)a1[2];
            v93 = *(_DWORD *)(a1[3] + 52) & 0xFFFFFLL;
            v94 = (uint64_t *)v92[233];
            v95 = v92[234];
            if ((unint64_t)v94 >= v95)
            {
              v203 = (uint64_t *)v92[232];
              v204 = v94 - v203;
              if ((unint64_t)(v204 + 1) >> 61)
                goto LABEL_360;
              v205 = v95 - (_QWORD)v203;
              v206 = (uint64_t)(v95 - (_QWORD)v203) >> 2;
              if (v206 <= v204 + 1)
                v206 = v204 + 1;
              if (v205 >= 0x7FFFFFFFFFFFFFF8)
                v207 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v207 = v206;
              if (v207)
              {
                v208 = (char *)sub_40FC((uint64_t)(v92 + 234), v207);
                v94 = (uint64_t *)v92[233];
                v203 = (uint64_t *)v92[232];
              }
              else
              {
                v208 = 0;
              }
              v253 = (uint64_t *)&v208[8 * v204];
              *v253 = v93;
              v96 = v253 + 1;
              while (v94 != v203)
              {
                v254 = *--v94;
                *--v253 = v254;
              }
              v92[232] = v253;
              v92[233] = v96;
              v92[234] = &v208[8 * v207];
              if (v203)
                operator delete(v203);
            }
            else
            {
              *v94 = v93;
              v96 = v94 + 1;
            }
            v92[233] = v96;
            break;
          case 0x2E:
            v97 = *(_QWORD **)a1[2];
            v98 = *(_DWORD *)(a1[3] + 60) & 0x3FFFFLL;
            v99 = (uint64_t *)v97[236];
            v100 = v97[237];
            if ((unint64_t)v99 >= v100)
            {
              v209 = (uint64_t *)v97[235];
              v210 = v99 - v209;
              if ((unint64_t)(v210 + 1) >> 61)
                goto LABEL_360;
              v211 = v100 - (_QWORD)v209;
              v212 = (uint64_t)(v100 - (_QWORD)v209) >> 2;
              if (v212 <= v210 + 1)
                v212 = v210 + 1;
              if (v211 >= 0x7FFFFFFFFFFFFFF8)
                v213 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v213 = v212;
              if (v213)
              {
                v214 = (char *)sub_40FC((uint64_t)(v97 + 237), v213);
                v99 = (uint64_t *)v97[236];
                v209 = (uint64_t *)v97[235];
              }
              else
              {
                v214 = 0;
              }
              v255 = (uint64_t *)&v214[8 * v210];
              *v255 = v98;
              v101 = v255 + 1;
              while (v99 != v209)
              {
                v256 = *--v99;
                *--v255 = v256;
              }
              v97[235] = v255;
              v97[236] = v101;
              v97[237] = &v214[8 * v213];
              if (v209)
                operator delete(v209);
            }
            else
            {
              *v99 = v98;
              v101 = v99 + 1;
            }
            v97[236] = v101;
            break;
          case 0x2F:
            v102 = *(_QWORD **)a1[2];
            v103 = *(_DWORD *)(a1[3] + 56) & 0xFFFFFLL;
            v104 = (uint64_t *)v102[239];
            v105 = v102[240];
            if ((unint64_t)v104 >= v105)
            {
              v215 = (uint64_t *)v102[238];
              v216 = v104 - v215;
              if ((unint64_t)(v216 + 1) >> 61)
LABEL_360:
                sub_4074();
              v217 = v105 - (_QWORD)v215;
              v218 = (uint64_t)(v105 - (_QWORD)v215) >> 2;
              if (v218 <= v216 + 1)
                v218 = v216 + 1;
              if (v217 >= 0x7FFFFFFFFFFFFFF8)
                v219 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v219 = v218;
              if (v219)
              {
                v220 = (char *)sub_40FC((uint64_t)(v102 + 240), v219);
                v104 = (uint64_t *)v102[239];
                v215 = (uint64_t *)v102[238];
              }
              else
              {
                v220 = 0;
              }
              v257 = (uint64_t *)&v220[8 * v216];
              *v257 = v103;
              v106 = v257 + 1;
              while (v104 != v215)
              {
                v258 = *--v104;
                *--v257 = v258;
              }
              v102[238] = v257;
              v102[239] = v106;
              v102[240] = &v220[8 * v219];
              if (v215)
                operator delete(v215);
            }
            else
            {
              *v104 = v103;
              v106 = v104 + 1;
            }
            v102[239] = v106;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E44D4(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  int *v127;
  int **v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  int v132;
  _QWORD *v133;

  v4 = *a1;
  if (*a2 == 1)
  {
    v128 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v127 = *v128;
    v129 = (char *)v128[1] - (char *)*v128;
    if (v129)
    {
      v130 = v129 >> 2;
      if (v130 <= 1)
        v130 = 1;
      do
      {
        v131 = *v127++;
        switch(v131)
        {
          case 20:
            v132 = *(_DWORD *)(a1[3] + 28);
            v133 = (_QWORD *)(*(_QWORD *)a1[2] + 1264);
            goto LABEL_176;
          case 21:
            v132 = *(_DWORD *)(a1[3] + 32);
            v133 = (_QWORD *)(*(_QWORD *)a1[2] + 1288);
            goto LABEL_176;
          case 22:
            v132 = *(_DWORD *)(a1[3] + 20) >> 1;
            v133 = (_QWORD *)(*(_QWORD *)a1[2] + 1312);
            goto LABEL_176;
          case 23:
            v132 = *(_DWORD *)(a1[3] + 24);
            v133 = (_QWORD *)(*(_QWORD *)a1[2] + 1336);
            goto LABEL_176;
          case 24:
            v132 = *(_DWORD *)(a1[3] + 52);
            v133 = (_QWORD *)(*(_QWORD *)a1[2] + 1360);
            goto LABEL_176;
          case 25:
            v132 = *(_DWORD *)(a1[3] + 36);
            v133 = (_QWORD *)(*(_QWORD *)a1[2] + 1384);
            goto LABEL_176;
          case 26:
            v132 = *(_DWORD *)(a1[3] + 44);
            v133 = (_QWORD *)(*(_QWORD *)a1[2] + 1408);
            goto LABEL_176;
          case 27:
            v132 = *(_DWORD *)(a1[3] + 40);
            v133 = (_QWORD *)(*(_QWORD *)a1[2] + 1432);
            goto LABEL_176;
          case 28:
            v132 = *(_DWORD *)(a1[3] + 48);
            v133 = (_QWORD *)(*(_QWORD *)a1[2] + 1456);
LABEL_176:
            *(_QWORD *)(*v133 - 8) += v132 & 0x3FFFF;
            break;
          default:
            break;
        }
        --v130;
      }
      while (v130);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x14:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            v12 = (uint64_t *)v10[158];
            v13 = v10[159];
            if ((unint64_t)v12 >= v13)
            {
              v55 = (uint64_t *)v10[157];
              v56 = v12 - v55;
              if ((unint64_t)(v56 + 1) >> 61)
                goto LABEL_180;
              v57 = v13 - (_QWORD)v55;
              v58 = (uint64_t)(v13 - (_QWORD)v55) >> 2;
              if (v58 <= v56 + 1)
                v58 = v56 + 1;
              if (v57 >= 0x7FFFFFFFFFFFFFF8)
                v59 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v59 = v58;
              if (v59)
              {
                v60 = (char *)sub_40FC((uint64_t)(v10 + 159), v59);
                v12 = (uint64_t *)v10[158];
                v55 = (uint64_t *)v10[157];
              }
              else
              {
                v60 = 0;
              }
              v109 = (uint64_t *)&v60[8 * v56];
              *v109 = v11;
              v14 = v109 + 1;
              while (v12 != v55)
              {
                v110 = *--v12;
                *--v109 = v110;
              }
              v10[157] = v109;
              v10[158] = v14;
              v10[159] = &v60[8 * v59];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[158] = v14;
            break;
          case 0x15:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            v17 = (uint64_t *)v15[161];
            v18 = v15[162];
            if ((unint64_t)v17 >= v18)
            {
              v61 = (uint64_t *)v15[160];
              v62 = v17 - v61;
              if ((unint64_t)(v62 + 1) >> 61)
                goto LABEL_180;
              v63 = v18 - (_QWORD)v61;
              v64 = (uint64_t)(v18 - (_QWORD)v61) >> 2;
              if (v64 <= v62 + 1)
                v64 = v62 + 1;
              if (v63 >= 0x7FFFFFFFFFFFFFF8)
                v65 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v65 = v64;
              if (v65)
              {
                v66 = (char *)sub_40FC((uint64_t)(v15 + 162), v65);
                v17 = (uint64_t *)v15[161];
                v61 = (uint64_t *)v15[160];
              }
              else
              {
                v66 = 0;
              }
              v111 = (uint64_t *)&v66[8 * v62];
              *v111 = v16;
              v19 = v111 + 1;
              while (v17 != v61)
              {
                v112 = *--v17;
                *--v111 = v112;
              }
              v15[160] = v111;
              v15[161] = v19;
              v15[162] = &v66[8 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[161] = v19;
            break;
          case 0x16:
            v20 = *(_QWORD **)a1[2];
            v21 = ((unint64_t)*(unsigned int *)(a1[3] + 20) >> 1) & 0x3FFFF;
            v22 = (unint64_t *)v20[164];
            v23 = v20[165];
            if ((unint64_t)v22 >= v23)
            {
              v67 = (unint64_t *)v20[163];
              v68 = v22 - v67;
              if ((unint64_t)(v68 + 1) >> 61)
                goto LABEL_180;
              v69 = v23 - (_QWORD)v67;
              v70 = (uint64_t)(v23 - (_QWORD)v67) >> 2;
              if (v70 <= v68 + 1)
                v70 = v68 + 1;
              if (v69 >= 0x7FFFFFFFFFFFFFF8)
                v71 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v71 = v70;
              if (v71)
              {
                v72 = (char *)sub_40FC((uint64_t)(v20 + 165), v71);
                v22 = (unint64_t *)v20[164];
                v67 = (unint64_t *)v20[163];
              }
              else
              {
                v72 = 0;
              }
              v113 = (unint64_t *)&v72[8 * v68];
              *v113 = v21;
              v24 = v113 + 1;
              while (v22 != v67)
              {
                v114 = *--v22;
                *--v113 = v114;
              }
              v20[163] = v113;
              v20[164] = v24;
              v20[165] = &v72[8 * v71];
              if (v67)
                operator delete(v67);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[164] = v24;
            break;
          case 0x17:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFLL;
            v27 = (uint64_t *)v25[167];
            v28 = v25[168];
            if ((unint64_t)v27 >= v28)
            {
              v73 = (uint64_t *)v25[166];
              v74 = v27 - v73;
              if ((unint64_t)(v74 + 1) >> 61)
                goto LABEL_180;
              v75 = v28 - (_QWORD)v73;
              v76 = (uint64_t)(v28 - (_QWORD)v73) >> 2;
              if (v76 <= v74 + 1)
                v76 = v74 + 1;
              if (v75 >= 0x7FFFFFFFFFFFFFF8)
                v77 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v77 = v76;
              if (v77)
              {
                v78 = (char *)sub_40FC((uint64_t)(v25 + 168), v77);
                v27 = (uint64_t *)v25[167];
                v73 = (uint64_t *)v25[166];
              }
              else
              {
                v78 = 0;
              }
              v115 = (uint64_t *)&v78[8 * v74];
              *v115 = v26;
              v29 = v115 + 1;
              while (v27 != v73)
              {
                v116 = *--v27;
                *--v115 = v116;
              }
              v25[166] = v115;
              v25[167] = v29;
              v25[168] = &v78[8 * v77];
              if (v73)
                operator delete(v73);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[167] = v29;
            break;
          case 0x18:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 52) & 0x3FFFFLL;
            v32 = (uint64_t *)v30[170];
            v33 = v30[171];
            if ((unint64_t)v32 >= v33)
            {
              v79 = (uint64_t *)v30[169];
              v80 = v32 - v79;
              if ((unint64_t)(v80 + 1) >> 61)
                goto LABEL_180;
              v81 = v33 - (_QWORD)v79;
              v82 = (uint64_t)(v33 - (_QWORD)v79) >> 2;
              if (v82 <= v80 + 1)
                v82 = v80 + 1;
              if (v81 >= 0x7FFFFFFFFFFFFFF8)
                v83 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v83 = v82;
              if (v83)
              {
                v84 = (char *)sub_40FC((uint64_t)(v30 + 171), v83);
                v32 = (uint64_t *)v30[170];
                v79 = (uint64_t *)v30[169];
              }
              else
              {
                v84 = 0;
              }
              v117 = (uint64_t *)&v84[8 * v80];
              *v117 = v31;
              v34 = v117 + 1;
              while (v32 != v79)
              {
                v118 = *--v32;
                *--v117 = v118;
              }
              v30[169] = v117;
              v30[170] = v34;
              v30[171] = &v84[8 * v83];
              if (v79)
                operator delete(v79);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[170] = v34;
            break;
          case 0x19:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            v37 = (uint64_t *)v35[173];
            v38 = v35[174];
            if ((unint64_t)v37 >= v38)
            {
              v85 = (uint64_t *)v35[172];
              v86 = v37 - v85;
              if ((unint64_t)(v86 + 1) >> 61)
                goto LABEL_180;
              v87 = v38 - (_QWORD)v85;
              v88 = (uint64_t)(v38 - (_QWORD)v85) >> 2;
              if (v88 <= v86 + 1)
                v88 = v86 + 1;
              if (v87 >= 0x7FFFFFFFFFFFFFF8)
                v89 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v89 = v88;
              if (v89)
              {
                v90 = (char *)sub_40FC((uint64_t)(v35 + 174), v89);
                v37 = (uint64_t *)v35[173];
                v85 = (uint64_t *)v35[172];
              }
              else
              {
                v90 = 0;
              }
              v119 = (uint64_t *)&v90[8 * v86];
              *v119 = v36;
              v39 = v119 + 1;
              while (v37 != v85)
              {
                v120 = *--v37;
                *--v119 = v120;
              }
              v35[172] = v119;
              v35[173] = v39;
              v35[174] = &v90[8 * v89];
              if (v85)
                operator delete(v85);
            }
            else
            {
              *v37 = v36;
              v39 = v37 + 1;
            }
            v35[173] = v39;
            break;
          case 0x1A:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFLL;
            v42 = (uint64_t *)v40[176];
            v43 = v40[177];
            if ((unint64_t)v42 >= v43)
            {
              v91 = (uint64_t *)v40[175];
              v92 = v42 - v91;
              if ((unint64_t)(v92 + 1) >> 61)
                goto LABEL_180;
              v93 = v43 - (_QWORD)v91;
              v94 = (uint64_t)(v43 - (_QWORD)v91) >> 2;
              if (v94 <= v92 + 1)
                v94 = v92 + 1;
              if (v93 >= 0x7FFFFFFFFFFFFFF8)
                v95 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v95 = v94;
              if (v95)
              {
                v96 = (char *)sub_40FC((uint64_t)(v40 + 177), v95);
                v42 = (uint64_t *)v40[176];
                v91 = (uint64_t *)v40[175];
              }
              else
              {
                v96 = 0;
              }
              v121 = (uint64_t *)&v96[8 * v92];
              *v121 = v41;
              v44 = v121 + 1;
              while (v42 != v91)
              {
                v122 = *--v42;
                *--v121 = v122;
              }
              v40[175] = v121;
              v40[176] = v44;
              v40[177] = &v96[8 * v95];
              if (v91)
                operator delete(v91);
            }
            else
            {
              *v42 = v41;
              v44 = v42 + 1;
            }
            v40[176] = v44;
            break;
          case 0x1B:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            v47 = (uint64_t *)v45[179];
            v48 = v45[180];
            if ((unint64_t)v47 >= v48)
            {
              v97 = (uint64_t *)v45[178];
              v98 = v47 - v97;
              if ((unint64_t)(v98 + 1) >> 61)
                goto LABEL_180;
              v99 = v48 - (_QWORD)v97;
              v100 = (uint64_t)(v48 - (_QWORD)v97) >> 2;
              if (v100 <= v98 + 1)
                v100 = v98 + 1;
              if (v99 >= 0x7FFFFFFFFFFFFFF8)
                v101 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v101 = v100;
              if (v101)
              {
                v102 = (char *)sub_40FC((uint64_t)(v45 + 180), v101);
                v47 = (uint64_t *)v45[179];
                v97 = (uint64_t *)v45[178];
              }
              else
              {
                v102 = 0;
              }
              v123 = (uint64_t *)&v102[8 * v98];
              *v123 = v46;
              v49 = v123 + 1;
              while (v47 != v97)
              {
                v124 = *--v47;
                *--v123 = v124;
              }
              v45[178] = v123;
              v45[179] = v49;
              v45[180] = &v102[8 * v101];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *v47 = v46;
              v49 = v47 + 1;
            }
            v45[179] = v49;
            break;
          case 0x1C:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_DWORD *)(a1[3] + 48) & 0x3FFFFLL;
            v52 = (uint64_t *)v50[182];
            v53 = v50[183];
            if ((unint64_t)v52 >= v53)
            {
              v103 = (uint64_t *)v50[181];
              v104 = v52 - v103;
              if ((unint64_t)(v104 + 1) >> 61)
LABEL_180:
                sub_4074();
              v105 = v53 - (_QWORD)v103;
              v106 = (uint64_t)(v53 - (_QWORD)v103) >> 2;
              if (v106 <= v104 + 1)
                v106 = v104 + 1;
              if (v105 >= 0x7FFFFFFFFFFFFFF8)
                v107 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v107 = v106;
              if (v107)
              {
                v108 = (char *)sub_40FC((uint64_t)(v50 + 183), v107);
                v52 = (uint64_t *)v50[182];
                v103 = (uint64_t *)v50[181];
              }
              else
              {
                v108 = 0;
              }
              v125 = (uint64_t *)&v108[8 * v104];
              *v125 = v51;
              v54 = v125 + 1;
              while (v52 != v103)
              {
                v126 = *--v52;
                *--v125 = v126;
              }
              v50[181] = v125;
              v50[182] = v54;
              v50[183] = &v108[8 * v107];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *v52 = v51;
              v54 = v52 + 1;
            }
            v50[182] = v54;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E4DAC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  int *v140;
  int **v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  _QWORD *v146;

  v4 = *a1;
  if (*a2 == 1)
  {
    v141 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v140 = *v141;
    v142 = (char *)v141[1] - (char *)*v141;
    if (v142)
    {
      v143 = v142 >> 2;
      if (v143 <= 1)
        v143 = 1;
      do
      {
        v144 = *v140++;
        switch(v144)
        {
          case 288:
            v145 = *(_DWORD *)(a1[3] + 44) & 0x1FFFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 7696);
            goto LABEL_194;
          case 289:
            v145 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 7720);
            goto LABEL_194;
          case 290:
            v145 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 7744);
            goto LABEL_194;
          case 291:
            v145 = *(_DWORD *)(a1[3] + 52) & 0x1FFFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 7768);
            goto LABEL_194;
          case 292:
            v145 = *(_DWORD *)(a1[3] + 32) & 0x7FFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 7792);
            goto LABEL_194;
          case 293:
            v145 = *(_DWORD *)(a1[3] + 24) & 0x7FFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 7816);
            goto LABEL_194;
          case 294:
            v145 = *(_DWORD *)(a1[3] + 28) & 0x7FFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 7840);
            goto LABEL_194;
          case 295:
            v145 = *(_DWORD *)(a1[3] + 20) & 0x7FFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 7864);
            goto LABEL_194;
          case 296:
            v145 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 7888);
            goto LABEL_194;
          case 297:
            v145 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 7912);
LABEL_194:
            *(_QWORD *)(*v146 - 8) += v145;
            break;
          default:
            break;
        }
        --v143;
      }
      while (v143);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x120:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 44) & 0x1FFFFFLL;
            v12 = (uint64_t *)v10[962];
            v13 = v10[963];
            if ((unint64_t)v12 >= v13)
            {
              v60 = (uint64_t *)v10[961];
              v61 = v12 - v60;
              if ((unint64_t)(v61 + 1) >> 61)
                goto LABEL_198;
              v62 = v13 - (_QWORD)v60;
              v63 = (uint64_t)(v13 - (_QWORD)v60) >> 2;
              if (v63 <= v61 + 1)
                v63 = v61 + 1;
              if (v62 >= 0x7FFFFFFFFFFFFFF8)
                v64 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v64 = v63;
              if (v64)
              {
                v65 = (char *)sub_40FC((uint64_t)(v10 + 963), v64);
                v12 = (uint64_t *)v10[962];
                v60 = (uint64_t *)v10[961];
              }
              else
              {
                v65 = 0;
              }
              v120 = (uint64_t *)&v65[8 * v61];
              *v120 = v11;
              v14 = v120 + 1;
              while (v12 != v60)
              {
                v121 = *--v12;
                *--v120 = v121;
              }
              v10[961] = v120;
              v10[962] = v14;
              v10[963] = &v65[8 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[962] = v14;
            break;
          case 0x121:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFFLL;
            v17 = (uint64_t *)v15[965];
            v18 = v15[966];
            if ((unint64_t)v17 >= v18)
            {
              v66 = (uint64_t *)v15[964];
              v67 = v17 - v66;
              if ((unint64_t)(v67 + 1) >> 61)
                goto LABEL_198;
              v68 = v18 - (_QWORD)v66;
              v69 = (uint64_t)(v18 - (_QWORD)v66) >> 2;
              if (v69 <= v67 + 1)
                v69 = v67 + 1;
              if (v68 >= 0x7FFFFFFFFFFFFFF8)
                v70 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v70 = v69;
              if (v70)
              {
                v71 = (char *)sub_40FC((uint64_t)(v15 + 966), v70);
                v17 = (uint64_t *)v15[965];
                v66 = (uint64_t *)v15[964];
              }
              else
              {
                v71 = 0;
              }
              v122 = (uint64_t *)&v71[8 * v67];
              *v122 = v16;
              v19 = v122 + 1;
              while (v17 != v66)
              {
                v123 = *--v17;
                *--v122 = v123;
              }
              v15[964] = v122;
              v15[965] = v19;
              v15[966] = &v71[8 * v70];
              if (v66)
                operator delete(v66);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[965] = v19;
            break;
          case 0x122:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 56) & 0x7FFF;
            v22 = (char *)v20[968];
            v23 = v20[969];
            if ((unint64_t)v22 >= v23)
            {
              v72 = (char *)v20[967];
              v73 = (v22 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61)
                goto LABEL_198;
              v74 = v23 - (_QWORD)v72;
              v75 = (uint64_t)(v23 - (_QWORD)v72) >> 2;
              if (v75 <= v73 + 1)
                v75 = v73 + 1;
              if (v74 >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v75;
              if (v76)
              {
                v77 = (char *)sub_40FC((uint64_t)(v20 + 969), v76);
                v22 = (char *)v20[968];
                v72 = (char *)v20[967];
              }
              else
              {
                v77 = 0;
              }
              v124 = &v77[8 * v73];
              *(_QWORD *)v124 = v21;
              v24 = v124 + 8;
              while (v22 != v72)
              {
                v125 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v124 - 1) = v125;
                v124 -= 8;
              }
              v20[967] = v124;
              v20[968] = v24;
              v20[969] = &v77[8 * v76];
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[968] = v24;
            break;
          case 0x123:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_DWORD *)(a1[3] + 52) & 0x1FFFFFLL;
            v27 = (uint64_t *)v25[971];
            v28 = v25[972];
            if ((unint64_t)v27 >= v28)
            {
              v78 = (uint64_t *)v25[970];
              v79 = v27 - v78;
              if ((unint64_t)(v79 + 1) >> 61)
                goto LABEL_198;
              v80 = v28 - (_QWORD)v78;
              v81 = (uint64_t)(v28 - (_QWORD)v78) >> 2;
              if (v81 <= v79 + 1)
                v81 = v79 + 1;
              if (v80 >= 0x7FFFFFFFFFFFFFF8)
                v82 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v82 = v81;
              if (v82)
              {
                v83 = (char *)sub_40FC((uint64_t)(v25 + 972), v82);
                v27 = (uint64_t *)v25[971];
                v78 = (uint64_t *)v25[970];
              }
              else
              {
                v83 = 0;
              }
              v126 = (uint64_t *)&v83[8 * v79];
              *v126 = v26;
              v29 = v126 + 1;
              while (v27 != v78)
              {
                v127 = *--v27;
                *--v126 = v127;
              }
              v25[970] = v126;
              v25[971] = v29;
              v25[972] = &v83[8 * v82];
              if (v78)
                operator delete(v78);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[971] = v29;
            break;
          case 0x124:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 32) & 0x7FFFFLL;
            v32 = (uint64_t *)v30[974];
            v33 = v30[975];
            if ((unint64_t)v32 >= v33)
            {
              v84 = (uint64_t *)v30[973];
              v85 = v32 - v84;
              if ((unint64_t)(v85 + 1) >> 61)
                goto LABEL_198;
              v86 = v33 - (_QWORD)v84;
              v87 = (uint64_t)(v33 - (_QWORD)v84) >> 2;
              if (v87 <= v85 + 1)
                v87 = v85 + 1;
              if (v86 >= 0x7FFFFFFFFFFFFFF8)
                v88 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v88 = v87;
              if (v88)
              {
                v89 = (char *)sub_40FC((uint64_t)(v30 + 975), v88);
                v32 = (uint64_t *)v30[974];
                v84 = (uint64_t *)v30[973];
              }
              else
              {
                v89 = 0;
              }
              v128 = (uint64_t *)&v89[8 * v85];
              *v128 = v31;
              v34 = v128 + 1;
              while (v32 != v84)
              {
                v129 = *--v32;
                *--v128 = v129;
              }
              v30[973] = v128;
              v30[974] = v34;
              v30[975] = &v89[8 * v88];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[974] = v34;
            break;
          case 0x125:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_DWORD *)(a1[3] + 24) & 0x7FFFFLL;
            v37 = (uint64_t *)v35[977];
            v38 = v35[978];
            if ((unint64_t)v37 >= v38)
            {
              v90 = (uint64_t *)v35[976];
              v91 = v37 - v90;
              if ((unint64_t)(v91 + 1) >> 61)
                goto LABEL_198;
              v92 = v38 - (_QWORD)v90;
              v93 = (uint64_t)(v38 - (_QWORD)v90) >> 2;
              if (v93 <= v91 + 1)
                v93 = v91 + 1;
              if (v92 >= 0x7FFFFFFFFFFFFFF8)
                v94 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v94 = v93;
              if (v94)
              {
                v95 = (char *)sub_40FC((uint64_t)(v35 + 978), v94);
                v37 = (uint64_t *)v35[977];
                v90 = (uint64_t *)v35[976];
              }
              else
              {
                v95 = 0;
              }
              v130 = (uint64_t *)&v95[8 * v91];
              *v130 = v36;
              v39 = v130 + 1;
              while (v37 != v90)
              {
                v131 = *--v37;
                *--v130 = v131;
              }
              v35[976] = v130;
              v35[977] = v39;
              v35[978] = &v95[8 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *v37 = v36;
              v39 = v37 + 1;
            }
            v35[977] = v39;
            break;
          case 0x126:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_DWORD *)(a1[3] + 28) & 0x7FFFFLL;
            v42 = (uint64_t *)v40[980];
            v43 = v40[981];
            if ((unint64_t)v42 >= v43)
            {
              v96 = (uint64_t *)v40[979];
              v97 = v42 - v96;
              if ((unint64_t)(v97 + 1) >> 61)
                goto LABEL_198;
              v98 = v43 - (_QWORD)v96;
              v99 = (uint64_t)(v43 - (_QWORD)v96) >> 2;
              if (v99 <= v97 + 1)
                v99 = v97 + 1;
              if (v98 >= 0x7FFFFFFFFFFFFFF8)
                v100 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v100 = v99;
              if (v100)
              {
                v101 = (char *)sub_40FC((uint64_t)(v40 + 981), v100);
                v42 = (uint64_t *)v40[980];
                v96 = (uint64_t *)v40[979];
              }
              else
              {
                v101 = 0;
              }
              v132 = (uint64_t *)&v101[8 * v97];
              *v132 = v41;
              v44 = v132 + 1;
              while (v42 != v96)
              {
                v133 = *--v42;
                *--v132 = v133;
              }
              v40[979] = v132;
              v40[980] = v44;
              v40[981] = &v101[8 * v100];
              if (v96)
                operator delete(v96);
            }
            else
            {
              *v42 = v41;
              v44 = v42 + 1;
            }
            v40[980] = v44;
            break;
          case 0x127:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_DWORD *)(a1[3] + 20) & 0x7FFFFLL;
            v47 = (uint64_t *)v45[983];
            v48 = v45[984];
            if ((unint64_t)v47 >= v48)
            {
              v102 = (uint64_t *)v45[982];
              v103 = v47 - v102;
              if ((unint64_t)(v103 + 1) >> 61)
                goto LABEL_198;
              v104 = v48 - (_QWORD)v102;
              v105 = (uint64_t)(v48 - (_QWORD)v102) >> 2;
              if (v105 <= v103 + 1)
                v105 = v103 + 1;
              if (v104 >= 0x7FFFFFFFFFFFFFF8)
                v106 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v106 = v105;
              if (v106)
              {
                v107 = (char *)sub_40FC((uint64_t)(v45 + 984), v106);
                v47 = (uint64_t *)v45[983];
                v102 = (uint64_t *)v45[982];
              }
              else
              {
                v107 = 0;
              }
              v134 = (uint64_t *)&v107[8 * v103];
              *v134 = v46;
              v49 = v134 + 1;
              while (v47 != v102)
              {
                v135 = *--v47;
                *--v134 = v135;
              }
              v45[982] = v134;
              v45[983] = v49;
              v45[984] = &v107[8 * v106];
              if (v102)
                operator delete(v102);
            }
            else
            {
              *v47 = v46;
              v49 = v47 + 1;
            }
            v45[983] = v49;
            break;
          case 0x128:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFFLL;
            v52 = (uint64_t *)v50[986];
            v53 = v50[987];
            if ((unint64_t)v52 >= v53)
            {
              v108 = (uint64_t *)v50[985];
              v109 = v52 - v108;
              if ((unint64_t)(v109 + 1) >> 61)
                goto LABEL_198;
              v110 = v53 - (_QWORD)v108;
              v111 = (uint64_t)(v53 - (_QWORD)v108) >> 2;
              if (v111 <= v109 + 1)
                v111 = v109 + 1;
              if (v110 >= 0x7FFFFFFFFFFFFFF8)
                v112 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v112 = v111;
              if (v112)
              {
                v113 = (char *)sub_40FC((uint64_t)(v50 + 987), v112);
                v52 = (uint64_t *)v50[986];
                v108 = (uint64_t *)v50[985];
              }
              else
              {
                v113 = 0;
              }
              v136 = (uint64_t *)&v113[8 * v109];
              *v136 = v51;
              v54 = v136 + 1;
              while (v52 != v108)
              {
                v137 = *--v52;
                *--v136 = v137;
              }
              v50[985] = v136;
              v50[986] = v54;
              v50[987] = &v113[8 * v112];
              if (v108)
                operator delete(v108);
            }
            else
            {
              *v52 = v51;
              v54 = v52 + 1;
            }
            v50[986] = v54;
            break;
          case 0x129:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFFLL;
            v57 = (uint64_t *)v55[989];
            v58 = v55[990];
            if ((unint64_t)v57 >= v58)
            {
              v114 = (uint64_t *)v55[988];
              v115 = v57 - v114;
              if ((unint64_t)(v115 + 1) >> 61)
LABEL_198:
                sub_4074();
              v116 = v58 - (_QWORD)v114;
              v117 = (uint64_t)(v58 - (_QWORD)v114) >> 2;
              if (v117 <= v115 + 1)
                v117 = v115 + 1;
              if (v116 >= 0x7FFFFFFFFFFFFFF8)
                v118 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v118 = v117;
              if (v118)
              {
                v119 = (char *)sub_40FC((uint64_t)(v55 + 990), v118);
                v57 = (uint64_t *)v55[989];
                v114 = (uint64_t *)v55[988];
              }
              else
              {
                v119 = 0;
              }
              v138 = (uint64_t *)&v119[8 * v115];
              *v138 = v56;
              v59 = v138 + 1;
              while (v57 != v114)
              {
                v139 = *--v57;
                *--v138 = v139;
              }
              v55[988] = v138;
              v55[989] = v59;
              v55[990] = &v119[8 * v118];
              if (v114)
                operator delete(v114);
            }
            else
            {
              *v57 = v56;
              v59 = v57 + 1;
            }
            v55[989] = v59;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E57F4(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  uint64_t *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  uint64_t *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  char *v173;
  uint64_t *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  uint64_t *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  int *v218;
  int **v219;
  uint64_t v220;
  unint64_t v221;
  int v222;
  uint64_t v223;
  _QWORD *v224;

  v4 = *a1;
  if (*a2 == 1)
  {
    v219 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v218 = *v219;
    v220 = (char *)v219[1] - (char *)*v219;
    if (v220)
    {
      v221 = v220 >> 2;
      if (v221 <= 1)
        v221 = 1;
      do
      {
        v222 = *v218++;
        switch(v222)
        {
          case 257:
            v223 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 6952);
            goto LABEL_302;
          case 258:
            v223 = *(_DWORD *)(a1[3] + 68) & 0x3FFFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 6976);
            goto LABEL_302;
          case 259:
            v223 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 7000);
            goto LABEL_302;
          case 260:
            v223 = *(_DWORD *)(a1[3] + 64) & 0x3FFFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 7024);
            goto LABEL_302;
          case 261:
            v223 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 7048);
            goto LABEL_302;
          case 262:
            v223 = *(_DWORD *)(a1[3] + 60) & 0x3FFFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 7072);
            goto LABEL_302;
          case 263:
            v223 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 7096);
            goto LABEL_302;
          case 264:
            v223 = *(_DWORD *)(a1[3] + 76) & 0x3FFFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 7120);
            goto LABEL_302;
          case 265:
            v223 = *(_DWORD *)(a1[3] + 48) & 0x7FFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 7144);
            goto LABEL_302;
          case 266:
            v223 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 7168);
            goto LABEL_302;
          case 267:
            v223 = *(_DWORD *)(a1[3] + 72) & 0x3FFFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 7192);
            goto LABEL_302;
          case 268:
            v223 = *(_DWORD *)(a1[3] + 20) & 0x3FFFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 7216);
            goto LABEL_302;
          case 269:
            v223 = *(_DWORD *)(a1[3] + 52) & 0x3FFFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 7240);
            goto LABEL_302;
          case 270:
            v223 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 7264);
            goto LABEL_302;
          case 271:
            v223 = *(_DWORD *)(a1[3] + 56) & 0x3FFFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 7288);
            goto LABEL_302;
          case 272:
            v223 = *(_DWORD *)(a1[3] + 80) & 0x7FFFF;
            v224 = (_QWORD *)(*(_QWORD *)a1[2] + 7312);
LABEL_302:
            *(_QWORD *)(*v224 - 8) += v223;
            break;
          default:
            break;
        }
        --v221;
      }
      while (v221);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x101:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFFLL;
            v12 = (uint64_t *)v10[869];
            v13 = v10[870];
            if ((unint64_t)v12 >= v13)
            {
              v90 = (uint64_t *)v10[868];
              v91 = v12 - v90;
              if ((unint64_t)(v91 + 1) >> 61)
                goto LABEL_306;
              v92 = v13 - (_QWORD)v90;
              v93 = (uint64_t)(v13 - (_QWORD)v90) >> 2;
              if (v93 <= v91 + 1)
                v93 = v91 + 1;
              if (v92 >= 0x7FFFFFFFFFFFFFF8)
                v94 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v94 = v93;
              if (v94)
              {
                v95 = (char *)sub_40FC((uint64_t)(v10 + 870), v94);
                v12 = (uint64_t *)v10[869];
                v90 = (uint64_t *)v10[868];
              }
              else
              {
                v95 = 0;
              }
              v186 = (uint64_t *)&v95[8 * v91];
              *v186 = v11;
              v14 = v186 + 1;
              while (v12 != v90)
              {
                v187 = *--v12;
                *--v186 = v187;
              }
              v10[868] = v186;
              v10[869] = v14;
              v10[870] = &v95[8 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[869] = v14;
            break;
          case 0x102:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 68) & 0x3FFFFFLL;
            v17 = (uint64_t *)v15[872];
            v18 = v15[873];
            if ((unint64_t)v17 >= v18)
            {
              v96 = (uint64_t *)v15[871];
              v97 = v17 - v96;
              if ((unint64_t)(v97 + 1) >> 61)
                goto LABEL_306;
              v98 = v18 - (_QWORD)v96;
              v99 = (uint64_t)(v18 - (_QWORD)v96) >> 2;
              if (v99 <= v97 + 1)
                v99 = v97 + 1;
              if (v98 >= 0x7FFFFFFFFFFFFFF8)
                v100 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v100 = v99;
              if (v100)
              {
                v101 = (char *)sub_40FC((uint64_t)(v15 + 873), v100);
                v17 = (uint64_t *)v15[872];
                v96 = (uint64_t *)v15[871];
              }
              else
              {
                v101 = 0;
              }
              v188 = (uint64_t *)&v101[8 * v97];
              *v188 = v16;
              v19 = v188 + 1;
              while (v17 != v96)
              {
                v189 = *--v17;
                *--v188 = v189;
              }
              v15[871] = v188;
              v15[872] = v19;
              v15[873] = &v101[8 * v100];
              if (v96)
                operator delete(v96);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[872] = v19;
            break;
          case 0x103:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFFLL;
            v22 = (uint64_t *)v20[875];
            v23 = v20[876];
            if ((unint64_t)v22 >= v23)
            {
              v102 = (uint64_t *)v20[874];
              v103 = v22 - v102;
              if ((unint64_t)(v103 + 1) >> 61)
                goto LABEL_306;
              v104 = v23 - (_QWORD)v102;
              v105 = (uint64_t)(v23 - (_QWORD)v102) >> 2;
              if (v105 <= v103 + 1)
                v105 = v103 + 1;
              if (v104 >= 0x7FFFFFFFFFFFFFF8)
                v106 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v106 = v105;
              if (v106)
              {
                v107 = (char *)sub_40FC((uint64_t)(v20 + 876), v106);
                v22 = (uint64_t *)v20[875];
                v102 = (uint64_t *)v20[874];
              }
              else
              {
                v107 = 0;
              }
              v190 = (uint64_t *)&v107[8 * v103];
              *v190 = v21;
              v24 = v190 + 1;
              while (v22 != v102)
              {
                v191 = *--v22;
                *--v190 = v191;
              }
              v20[874] = v190;
              v20[875] = v24;
              v20[876] = &v107[8 * v106];
              if (v102)
                operator delete(v102);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[875] = v24;
            break;
          case 0x104:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_DWORD *)(a1[3] + 64) & 0x3FFFFFLL;
            v27 = (uint64_t *)v25[878];
            v28 = v25[879];
            if ((unint64_t)v27 >= v28)
            {
              v108 = (uint64_t *)v25[877];
              v109 = v27 - v108;
              if ((unint64_t)(v109 + 1) >> 61)
                goto LABEL_306;
              v110 = v28 - (_QWORD)v108;
              v111 = (uint64_t)(v28 - (_QWORD)v108) >> 2;
              if (v111 <= v109 + 1)
                v111 = v109 + 1;
              if (v110 >= 0x7FFFFFFFFFFFFFF8)
                v112 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v112 = v111;
              if (v112)
              {
                v113 = (char *)sub_40FC((uint64_t)(v25 + 879), v112);
                v27 = (uint64_t *)v25[878];
                v108 = (uint64_t *)v25[877];
              }
              else
              {
                v113 = 0;
              }
              v192 = (uint64_t *)&v113[8 * v109];
              *v192 = v26;
              v29 = v192 + 1;
              while (v27 != v108)
              {
                v193 = *--v27;
                *--v192 = v193;
              }
              v25[877] = v192;
              v25[878] = v29;
              v25[879] = &v113[8 * v112];
              if (v108)
                operator delete(v108);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[878] = v29;
            break;
          case 0x105:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFFLL;
            v32 = (uint64_t *)v30[881];
            v33 = v30[882];
            if ((unint64_t)v32 >= v33)
            {
              v114 = (uint64_t *)v30[880];
              v115 = v32 - v114;
              if ((unint64_t)(v115 + 1) >> 61)
                goto LABEL_306;
              v116 = v33 - (_QWORD)v114;
              v117 = (uint64_t)(v33 - (_QWORD)v114) >> 2;
              if (v117 <= v115 + 1)
                v117 = v115 + 1;
              if (v116 >= 0x7FFFFFFFFFFFFFF8)
                v118 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v118 = v117;
              if (v118)
              {
                v119 = (char *)sub_40FC((uint64_t)(v30 + 882), v118);
                v32 = (uint64_t *)v30[881];
                v114 = (uint64_t *)v30[880];
              }
              else
              {
                v119 = 0;
              }
              v194 = (uint64_t *)&v119[8 * v115];
              *v194 = v31;
              v34 = v194 + 1;
              while (v32 != v114)
              {
                v195 = *--v32;
                *--v194 = v195;
              }
              v30[880] = v194;
              v30[881] = v34;
              v30[882] = &v119[8 * v118];
              if (v114)
                operator delete(v114);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[881] = v34;
            break;
          case 0x106:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_DWORD *)(a1[3] + 60) & 0x3FFFFFLL;
            v37 = (uint64_t *)v35[884];
            v38 = v35[885];
            if ((unint64_t)v37 >= v38)
            {
              v120 = (uint64_t *)v35[883];
              v121 = v37 - v120;
              if ((unint64_t)(v121 + 1) >> 61)
                goto LABEL_306;
              v122 = v38 - (_QWORD)v120;
              v123 = (uint64_t)(v38 - (_QWORD)v120) >> 2;
              if (v123 <= v121 + 1)
                v123 = v121 + 1;
              if (v122 >= 0x7FFFFFFFFFFFFFF8)
                v124 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v124 = v123;
              if (v124)
              {
                v125 = (char *)sub_40FC((uint64_t)(v35 + 885), v124);
                v37 = (uint64_t *)v35[884];
                v120 = (uint64_t *)v35[883];
              }
              else
              {
                v125 = 0;
              }
              v196 = (uint64_t *)&v125[8 * v121];
              *v196 = v36;
              v39 = v196 + 1;
              while (v37 != v120)
              {
                v197 = *--v37;
                *--v196 = v197;
              }
              v35[883] = v196;
              v35[884] = v39;
              v35[885] = &v125[8 * v124];
              if (v120)
                operator delete(v120);
            }
            else
            {
              *v37 = v36;
              v39 = v37 + 1;
            }
            v35[884] = v39;
            break;
          case 0x107:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_DWORD *)(a1[3] + 44) & 0x3FFFFFLL;
            v42 = (uint64_t *)v40[887];
            v43 = v40[888];
            if ((unint64_t)v42 >= v43)
            {
              v126 = (uint64_t *)v40[886];
              v127 = v42 - v126;
              if ((unint64_t)(v127 + 1) >> 61)
                goto LABEL_306;
              v128 = v43 - (_QWORD)v126;
              v129 = (uint64_t)(v43 - (_QWORD)v126) >> 2;
              if (v129 <= v127 + 1)
                v129 = v127 + 1;
              if (v128 >= 0x7FFFFFFFFFFFFFF8)
                v130 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v130 = v129;
              if (v130)
              {
                v131 = (char *)sub_40FC((uint64_t)(v40 + 888), v130);
                v42 = (uint64_t *)v40[887];
                v126 = (uint64_t *)v40[886];
              }
              else
              {
                v131 = 0;
              }
              v198 = (uint64_t *)&v131[8 * v127];
              *v198 = v41;
              v44 = v198 + 1;
              while (v42 != v126)
              {
                v199 = *--v42;
                *--v198 = v199;
              }
              v40[886] = v198;
              v40[887] = v44;
              v40[888] = &v131[8 * v130];
              if (v126)
                operator delete(v126);
            }
            else
            {
              *v42 = v41;
              v44 = v42 + 1;
            }
            v40[887] = v44;
            break;
          case 0x108:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_DWORD *)(a1[3] + 76) & 0x3FFFFFLL;
            v47 = (uint64_t *)v45[890];
            v48 = v45[891];
            if ((unint64_t)v47 >= v48)
            {
              v132 = (uint64_t *)v45[889];
              v133 = v47 - v132;
              if ((unint64_t)(v133 + 1) >> 61)
                goto LABEL_306;
              v134 = v48 - (_QWORD)v132;
              v135 = (uint64_t)(v48 - (_QWORD)v132) >> 2;
              if (v135 <= v133 + 1)
                v135 = v133 + 1;
              if (v134 >= 0x7FFFFFFFFFFFFFF8)
                v136 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v136 = v135;
              if (v136)
              {
                v137 = (char *)sub_40FC((uint64_t)(v45 + 891), v136);
                v47 = (uint64_t *)v45[890];
                v132 = (uint64_t *)v45[889];
              }
              else
              {
                v137 = 0;
              }
              v200 = (uint64_t *)&v137[8 * v133];
              *v200 = v46;
              v49 = v200 + 1;
              while (v47 != v132)
              {
                v201 = *--v47;
                *--v200 = v201;
              }
              v45[889] = v200;
              v45[890] = v49;
              v45[891] = &v137[8 * v136];
              if (v132)
                operator delete(v132);
            }
            else
            {
              *v47 = v46;
              v49 = v47 + 1;
            }
            v45[890] = v49;
            break;
          case 0x109:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_DWORD *)(a1[3] + 48) & 0x7FFFFLL;
            v52 = (uint64_t *)v50[893];
            v53 = v50[894];
            if ((unint64_t)v52 >= v53)
            {
              v138 = (uint64_t *)v50[892];
              v139 = v52 - v138;
              if ((unint64_t)(v139 + 1) >> 61)
                goto LABEL_306;
              v140 = v53 - (_QWORD)v138;
              v141 = (uint64_t)(v53 - (_QWORD)v138) >> 2;
              if (v141 <= v139 + 1)
                v141 = v139 + 1;
              if (v140 >= 0x7FFFFFFFFFFFFFF8)
                v142 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v142 = v141;
              if (v142)
              {
                v143 = (char *)sub_40FC((uint64_t)(v50 + 894), v142);
                v52 = (uint64_t *)v50[893];
                v138 = (uint64_t *)v50[892];
              }
              else
              {
                v143 = 0;
              }
              v202 = (uint64_t *)&v143[8 * v139];
              *v202 = v51;
              v54 = v202 + 1;
              while (v52 != v138)
              {
                v203 = *--v52;
                *--v202 = v203;
              }
              v50[892] = v202;
              v50[893] = v54;
              v50[894] = &v143[8 * v142];
              if (v138)
                operator delete(v138);
            }
            else
            {
              *v52 = v51;
              v54 = v52 + 1;
            }
            v50[893] = v54;
            break;
          case 0x10A:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFFLL;
            v57 = (uint64_t *)v55[896];
            v58 = v55[897];
            if ((unint64_t)v57 >= v58)
            {
              v144 = (uint64_t *)v55[895];
              v145 = v57 - v144;
              if ((unint64_t)(v145 + 1) >> 61)
                goto LABEL_306;
              v146 = v58 - (_QWORD)v144;
              v147 = (uint64_t)(v58 - (_QWORD)v144) >> 2;
              if (v147 <= v145 + 1)
                v147 = v145 + 1;
              if (v146 >= 0x7FFFFFFFFFFFFFF8)
                v148 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v148 = v147;
              if (v148)
              {
                v149 = (char *)sub_40FC((uint64_t)(v55 + 897), v148);
                v57 = (uint64_t *)v55[896];
                v144 = (uint64_t *)v55[895];
              }
              else
              {
                v149 = 0;
              }
              v204 = (uint64_t *)&v149[8 * v145];
              *v204 = v56;
              v59 = v204 + 1;
              while (v57 != v144)
              {
                v205 = *--v57;
                *--v204 = v205;
              }
              v55[895] = v204;
              v55[896] = v59;
              v55[897] = &v149[8 * v148];
              if (v144)
                operator delete(v144);
            }
            else
            {
              *v57 = v56;
              v59 = v57 + 1;
            }
            v55[896] = v59;
            break;
          case 0x10B:
            v60 = *(_QWORD **)a1[2];
            v61 = *(_DWORD *)(a1[3] + 72) & 0x3FFFFFLL;
            v62 = (uint64_t *)v60[899];
            v63 = v60[900];
            if ((unint64_t)v62 >= v63)
            {
              v150 = (uint64_t *)v60[898];
              v151 = v62 - v150;
              if ((unint64_t)(v151 + 1) >> 61)
                goto LABEL_306;
              v152 = v63 - (_QWORD)v150;
              v153 = (uint64_t)(v63 - (_QWORD)v150) >> 2;
              if (v153 <= v151 + 1)
                v153 = v151 + 1;
              if (v152 >= 0x7FFFFFFFFFFFFFF8)
                v154 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v154 = v153;
              if (v154)
              {
                v155 = (char *)sub_40FC((uint64_t)(v60 + 900), v154);
                v62 = (uint64_t *)v60[899];
                v150 = (uint64_t *)v60[898];
              }
              else
              {
                v155 = 0;
              }
              v206 = (uint64_t *)&v155[8 * v151];
              *v206 = v61;
              v64 = v206 + 1;
              while (v62 != v150)
              {
                v207 = *--v62;
                *--v206 = v207;
              }
              v60[898] = v206;
              v60[899] = v64;
              v60[900] = &v155[8 * v154];
              if (v150)
                operator delete(v150);
            }
            else
            {
              *v62 = v61;
              v64 = v62 + 1;
            }
            v60[899] = v64;
            break;
          case 0x10C:
            v65 = *(_QWORD **)a1[2];
            v66 = *(_DWORD *)(a1[3] + 20) & 0x3FFFFFLL;
            v67 = (uint64_t *)v65[902];
            v68 = v65[903];
            if ((unint64_t)v67 >= v68)
            {
              v156 = (uint64_t *)v65[901];
              v157 = v67 - v156;
              if ((unint64_t)(v157 + 1) >> 61)
                goto LABEL_306;
              v158 = v68 - (_QWORD)v156;
              v159 = (uint64_t)(v68 - (_QWORD)v156) >> 2;
              if (v159 <= v157 + 1)
                v159 = v157 + 1;
              if (v158 >= 0x7FFFFFFFFFFFFFF8)
                v160 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v160 = v159;
              if (v160)
              {
                v161 = (char *)sub_40FC((uint64_t)(v65 + 903), v160);
                v67 = (uint64_t *)v65[902];
                v156 = (uint64_t *)v65[901];
              }
              else
              {
                v161 = 0;
              }
              v208 = (uint64_t *)&v161[8 * v157];
              *v208 = v66;
              v69 = v208 + 1;
              while (v67 != v156)
              {
                v209 = *--v67;
                *--v208 = v209;
              }
              v65[901] = v208;
              v65[902] = v69;
              v65[903] = &v161[8 * v160];
              if (v156)
                operator delete(v156);
            }
            else
            {
              *v67 = v66;
              v69 = v67 + 1;
            }
            v65[902] = v69;
            break;
          case 0x10D:
            v70 = *(_QWORD **)a1[2];
            v71 = *(_DWORD *)(a1[3] + 52) & 0x3FFFFFLL;
            v72 = (uint64_t *)v70[905];
            v73 = v70[906];
            if ((unint64_t)v72 >= v73)
            {
              v162 = (uint64_t *)v70[904];
              v163 = v72 - v162;
              if ((unint64_t)(v163 + 1) >> 61)
                goto LABEL_306;
              v164 = v73 - (_QWORD)v162;
              v165 = (uint64_t)(v73 - (_QWORD)v162) >> 2;
              if (v165 <= v163 + 1)
                v165 = v163 + 1;
              if (v164 >= 0x7FFFFFFFFFFFFFF8)
                v166 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v166 = v165;
              if (v166)
              {
                v167 = (char *)sub_40FC((uint64_t)(v70 + 906), v166);
                v72 = (uint64_t *)v70[905];
                v162 = (uint64_t *)v70[904];
              }
              else
              {
                v167 = 0;
              }
              v210 = (uint64_t *)&v167[8 * v163];
              *v210 = v71;
              v74 = v210 + 1;
              while (v72 != v162)
              {
                v211 = *--v72;
                *--v210 = v211;
              }
              v70[904] = v210;
              v70[905] = v74;
              v70[906] = &v167[8 * v166];
              if (v162)
                operator delete(v162);
            }
            else
            {
              *v72 = v71;
              v74 = v72 + 1;
            }
            v70[905] = v74;
            break;
          case 0x10E:
            v75 = *(_QWORD **)a1[2];
            v76 = *(_DWORD *)(a1[3] + 24) & 0x3FFFFFLL;
            v77 = (uint64_t *)v75[908];
            v78 = v75[909];
            if ((unint64_t)v77 >= v78)
            {
              v168 = (uint64_t *)v75[907];
              v169 = v77 - v168;
              if ((unint64_t)(v169 + 1) >> 61)
                goto LABEL_306;
              v170 = v78 - (_QWORD)v168;
              v171 = (uint64_t)(v78 - (_QWORD)v168) >> 2;
              if (v171 <= v169 + 1)
                v171 = v169 + 1;
              if (v170 >= 0x7FFFFFFFFFFFFFF8)
                v172 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v172 = v171;
              if (v172)
              {
                v173 = (char *)sub_40FC((uint64_t)(v75 + 909), v172);
                v77 = (uint64_t *)v75[908];
                v168 = (uint64_t *)v75[907];
              }
              else
              {
                v173 = 0;
              }
              v212 = (uint64_t *)&v173[8 * v169];
              *v212 = v76;
              v79 = v212 + 1;
              while (v77 != v168)
              {
                v213 = *--v77;
                *--v212 = v213;
              }
              v75[907] = v212;
              v75[908] = v79;
              v75[909] = &v173[8 * v172];
              if (v168)
                operator delete(v168);
            }
            else
            {
              *v77 = v76;
              v79 = v77 + 1;
            }
            v75[908] = v79;
            break;
          case 0x10F:
            v80 = *(_QWORD **)a1[2];
            v81 = *(_DWORD *)(a1[3] + 56) & 0x3FFFFFLL;
            v82 = (uint64_t *)v80[911];
            v83 = v80[912];
            if ((unint64_t)v82 >= v83)
            {
              v174 = (uint64_t *)v80[910];
              v175 = v82 - v174;
              if ((unint64_t)(v175 + 1) >> 61)
                goto LABEL_306;
              v176 = v83 - (_QWORD)v174;
              v177 = (uint64_t)(v83 - (_QWORD)v174) >> 2;
              if (v177 <= v175 + 1)
                v177 = v175 + 1;
              if (v176 >= 0x7FFFFFFFFFFFFFF8)
                v178 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v178 = v177;
              if (v178)
              {
                v179 = (char *)sub_40FC((uint64_t)(v80 + 912), v178);
                v82 = (uint64_t *)v80[911];
                v174 = (uint64_t *)v80[910];
              }
              else
              {
                v179 = 0;
              }
              v214 = (uint64_t *)&v179[8 * v175];
              *v214 = v81;
              v84 = v214 + 1;
              while (v82 != v174)
              {
                v215 = *--v82;
                *--v214 = v215;
              }
              v80[910] = v214;
              v80[911] = v84;
              v80[912] = &v179[8 * v178];
              if (v174)
                operator delete(v174);
            }
            else
            {
              *v82 = v81;
              v84 = v82 + 1;
            }
            v80[911] = v84;
            break;
          case 0x110:
            v85 = *(_QWORD **)a1[2];
            v86 = *(_DWORD *)(a1[3] + 80) & 0x7FFFFLL;
            v87 = (uint64_t *)v85[914];
            v88 = v85[915];
            if ((unint64_t)v87 >= v88)
            {
              v180 = (uint64_t *)v85[913];
              v181 = v87 - v180;
              if ((unint64_t)(v181 + 1) >> 61)
LABEL_306:
                sub_4074();
              v182 = v88 - (_QWORD)v180;
              v183 = (uint64_t)(v88 - (_QWORD)v180) >> 2;
              if (v183 <= v181 + 1)
                v183 = v181 + 1;
              if (v182 >= 0x7FFFFFFFFFFFFFF8)
                v184 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v184 = v183;
              if (v184)
              {
                v185 = (char *)sub_40FC((uint64_t)(v85 + 915), v184);
                v87 = (uint64_t *)v85[914];
                v180 = (uint64_t *)v85[913];
              }
              else
              {
                v185 = 0;
              }
              v216 = (uint64_t *)&v185[8 * v181];
              *v216 = v86;
              v89 = v216 + 1;
              while (v87 != v180)
              {
                v217 = *--v87;
                *--v216 = v217;
              }
              v85[913] = v216;
              v85[914] = v89;
              v85[915] = &v185[8 * v184];
              if (v180)
                operator delete(v180);
            }
            else
            {
              *v87 = v86;
              v89 = v87 + 1;
            }
            v85[914] = v89;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E67AC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t *v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t *v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  int *v205;
  int **v206;
  uint64_t v207;
  unint64_t v208;
  int v209;
  uint64_t v210;
  _QWORD *v211;

  v4 = *a1;
  if (*a2 == 1)
  {
    v206 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v205 = *v206;
    v207 = (char *)v206[1] - (char *)*v206;
    if (v207)
    {
      v208 = v207 >> 2;
      if (v208 <= 1)
        v208 = 1;
      do
      {
        v209 = *v205++;
        switch(v209)
        {
          case 273:
            v210 = *(_DWORD *)(a1[3] + 36) & 0x7FFFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7336);
            goto LABEL_284;
          case 274:
            v210 = *(_DWORD *)(a1[3] + 68) & 0xFFFFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7360);
            goto LABEL_284;
          case 275:
            v210 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7384);
            goto LABEL_284;
          case 276:
            v210 = *(_DWORD *)(a1[3] + 32) & 0x7FFFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7408);
            goto LABEL_284;
          case 277:
            v210 = *(_DWORD *)(a1[3] + 64) & 0xFFFFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7432);
            goto LABEL_284;
          case 278:
            v210 = *(_DWORD *)(a1[3] + 28) & 0x7FFFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7456);
            goto LABEL_284;
          case 279:
            v210 = *(_DWORD *)(a1[3] + 60) & 0xFFFFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7480);
            goto LABEL_284;
          case 280:
            v210 = *(_DWORD *)(a1[3] + 44) & 0x7FFFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7504);
            goto LABEL_284;
          case 281:
            v210 = *(_DWORD *)(a1[3] + 76) & 0xFFFFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7528);
            goto LABEL_284;
          case 282:
            v210 = *(_DWORD *)(a1[3] + 40) & 0x7FFFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7552);
            goto LABEL_284;
          case 283:
            v210 = *(_DWORD *)(a1[3] + 72) & 0xFFFFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7576);
            goto LABEL_284;
          case 284:
            v210 = *(_DWORD *)(a1[3] + 20) & 0x7FFFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7600);
            goto LABEL_284;
          case 285:
            v210 = *(_DWORD *)(a1[3] + 52) & 0xFFFFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7624);
            goto LABEL_284;
          case 286:
            v210 = *(_DWORD *)(a1[3] + 24) & 0x7FFFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7648);
            goto LABEL_284;
          case 287:
            v210 = *(_DWORD *)(a1[3] + 56) & 0xFFFFF;
            v211 = (_QWORD *)(*(_QWORD *)a1[2] + 7672);
LABEL_284:
            *(_QWORD *)(*v211 - 8) += v210;
            break;
          default:
            break;
        }
        --v208;
      }
      while (v208);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x111:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 36) & 0x7FFFFLL;
            v12 = (uint64_t *)v10[917];
            v13 = v10[918];
            if ((unint64_t)v12 >= v13)
            {
              v85 = (uint64_t *)v10[916];
              v86 = v12 - v85;
              if ((unint64_t)(v86 + 1) >> 61)
                goto LABEL_288;
              v87 = v13 - (_QWORD)v85;
              v88 = (uint64_t)(v13 - (_QWORD)v85) >> 2;
              if (v88 <= v86 + 1)
                v88 = v86 + 1;
              if (v87 >= 0x7FFFFFFFFFFFFFF8)
                v89 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v89 = v88;
              if (v89)
              {
                v90 = (char *)sub_40FC((uint64_t)(v10 + 918), v89);
                v12 = (uint64_t *)v10[917];
                v85 = (uint64_t *)v10[916];
              }
              else
              {
                v90 = 0;
              }
              v175 = (uint64_t *)&v90[8 * v86];
              *v175 = v11;
              v14 = v175 + 1;
              while (v12 != v85)
              {
                v176 = *--v12;
                *--v175 = v176;
              }
              v10[916] = v175;
              v10[917] = v14;
              v10[918] = &v90[8 * v89];
              if (v85)
                operator delete(v85);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[917] = v14;
            break;
          case 0x112:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 68) & 0xFFFFFLL;
            v17 = (uint64_t *)v15[920];
            v18 = v15[921];
            if ((unint64_t)v17 >= v18)
            {
              v91 = (uint64_t *)v15[919];
              v92 = v17 - v91;
              if ((unint64_t)(v92 + 1) >> 61)
                goto LABEL_288;
              v93 = v18 - (_QWORD)v91;
              v94 = (uint64_t)(v18 - (_QWORD)v91) >> 2;
              if (v94 <= v92 + 1)
                v94 = v92 + 1;
              if (v93 >= 0x7FFFFFFFFFFFFFF8)
                v95 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v95 = v94;
              if (v95)
              {
                v96 = (char *)sub_40FC((uint64_t)(v15 + 921), v95);
                v17 = (uint64_t *)v15[920];
                v91 = (uint64_t *)v15[919];
              }
              else
              {
                v96 = 0;
              }
              v177 = (uint64_t *)&v96[8 * v92];
              *v177 = v16;
              v19 = v177 + 1;
              while (v17 != v91)
              {
                v178 = *--v17;
                *--v177 = v178;
              }
              v15[919] = v177;
              v15[920] = v19;
              v15[921] = &v96[8 * v95];
              if (v91)
                operator delete(v91);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[920] = v19;
            break;
          case 0x113:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 48) & 0x7FFF;
            v22 = (char *)v20[923];
            v23 = v20[924];
            if ((unint64_t)v22 >= v23)
            {
              v97 = (char *)v20[922];
              v98 = (v22 - v97) >> 3;
              if ((unint64_t)(v98 + 1) >> 61)
                goto LABEL_288;
              v99 = v23 - (_QWORD)v97;
              v100 = (uint64_t)(v23 - (_QWORD)v97) >> 2;
              if (v100 <= v98 + 1)
                v100 = v98 + 1;
              if (v99 >= 0x7FFFFFFFFFFFFFF8)
                v101 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v101 = v100;
              if (v101)
              {
                v102 = (char *)sub_40FC((uint64_t)(v20 + 924), v101);
                v22 = (char *)v20[923];
                v97 = (char *)v20[922];
              }
              else
              {
                v102 = 0;
              }
              v179 = &v102[8 * v98];
              *(_QWORD *)v179 = v21;
              v24 = v179 + 8;
              while (v22 != v97)
              {
                v180 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v179 - 1) = v180;
                v179 -= 8;
              }
              v20[922] = v179;
              v20[923] = v24;
              v20[924] = &v102[8 * v101];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[923] = v24;
            break;
          case 0x114:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_DWORD *)(a1[3] + 32) & 0x7FFFFLL;
            v27 = (uint64_t *)v25[926];
            v28 = v25[927];
            if ((unint64_t)v27 >= v28)
            {
              v103 = (uint64_t *)v25[925];
              v104 = v27 - v103;
              if ((unint64_t)(v104 + 1) >> 61)
                goto LABEL_288;
              v105 = v28 - (_QWORD)v103;
              v106 = (uint64_t)(v28 - (_QWORD)v103) >> 2;
              if (v106 <= v104 + 1)
                v106 = v104 + 1;
              if (v105 >= 0x7FFFFFFFFFFFFFF8)
                v107 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v107 = v106;
              if (v107)
              {
                v108 = (char *)sub_40FC((uint64_t)(v25 + 927), v107);
                v27 = (uint64_t *)v25[926];
                v103 = (uint64_t *)v25[925];
              }
              else
              {
                v108 = 0;
              }
              v181 = (uint64_t *)&v108[8 * v104];
              *v181 = v26;
              v29 = v181 + 1;
              while (v27 != v103)
              {
                v182 = *--v27;
                *--v181 = v182;
              }
              v25[925] = v181;
              v25[926] = v29;
              v25[927] = &v108[8 * v107];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[926] = v29;
            break;
          case 0x115:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 64) & 0xFFFFFLL;
            v32 = (uint64_t *)v30[929];
            v33 = v30[930];
            if ((unint64_t)v32 >= v33)
            {
              v109 = (uint64_t *)v30[928];
              v110 = v32 - v109;
              if ((unint64_t)(v110 + 1) >> 61)
                goto LABEL_288;
              v111 = v33 - (_QWORD)v109;
              v112 = (uint64_t)(v33 - (_QWORD)v109) >> 2;
              if (v112 <= v110 + 1)
                v112 = v110 + 1;
              if (v111 >= 0x7FFFFFFFFFFFFFF8)
                v113 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v113 = v112;
              if (v113)
              {
                v114 = (char *)sub_40FC((uint64_t)(v30 + 930), v113);
                v32 = (uint64_t *)v30[929];
                v109 = (uint64_t *)v30[928];
              }
              else
              {
                v114 = 0;
              }
              v183 = (uint64_t *)&v114[8 * v110];
              *v183 = v31;
              v34 = v183 + 1;
              while (v32 != v109)
              {
                v184 = *--v32;
                *--v183 = v184;
              }
              v30[928] = v183;
              v30[929] = v34;
              v30[930] = &v114[8 * v113];
              if (v109)
                operator delete(v109);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[929] = v34;
            break;
          case 0x116:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_DWORD *)(a1[3] + 28) & 0x7FFFFLL;
            v37 = (uint64_t *)v35[932];
            v38 = v35[933];
            if ((unint64_t)v37 >= v38)
            {
              v115 = (uint64_t *)v35[931];
              v116 = v37 - v115;
              if ((unint64_t)(v116 + 1) >> 61)
                goto LABEL_288;
              v117 = v38 - (_QWORD)v115;
              v118 = (uint64_t)(v38 - (_QWORD)v115) >> 2;
              if (v118 <= v116 + 1)
                v118 = v116 + 1;
              if (v117 >= 0x7FFFFFFFFFFFFFF8)
                v119 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v119 = v118;
              if (v119)
              {
                v120 = (char *)sub_40FC((uint64_t)(v35 + 933), v119);
                v37 = (uint64_t *)v35[932];
                v115 = (uint64_t *)v35[931];
              }
              else
              {
                v120 = 0;
              }
              v185 = (uint64_t *)&v120[8 * v116];
              *v185 = v36;
              v39 = v185 + 1;
              while (v37 != v115)
              {
                v186 = *--v37;
                *--v185 = v186;
              }
              v35[931] = v185;
              v35[932] = v39;
              v35[933] = &v120[8 * v119];
              if (v115)
                operator delete(v115);
            }
            else
            {
              *v37 = v36;
              v39 = v37 + 1;
            }
            v35[932] = v39;
            break;
          case 0x117:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_DWORD *)(a1[3] + 60) & 0xFFFFFLL;
            v42 = (uint64_t *)v40[935];
            v43 = v40[936];
            if ((unint64_t)v42 >= v43)
            {
              v121 = (uint64_t *)v40[934];
              v122 = v42 - v121;
              if ((unint64_t)(v122 + 1) >> 61)
                goto LABEL_288;
              v123 = v43 - (_QWORD)v121;
              v124 = (uint64_t)(v43 - (_QWORD)v121) >> 2;
              if (v124 <= v122 + 1)
                v124 = v122 + 1;
              if (v123 >= 0x7FFFFFFFFFFFFFF8)
                v125 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v125 = v124;
              if (v125)
              {
                v126 = (char *)sub_40FC((uint64_t)(v40 + 936), v125);
                v42 = (uint64_t *)v40[935];
                v121 = (uint64_t *)v40[934];
              }
              else
              {
                v126 = 0;
              }
              v187 = (uint64_t *)&v126[8 * v122];
              *v187 = v41;
              v44 = v187 + 1;
              while (v42 != v121)
              {
                v188 = *--v42;
                *--v187 = v188;
              }
              v40[934] = v187;
              v40[935] = v44;
              v40[936] = &v126[8 * v125];
              if (v121)
                operator delete(v121);
            }
            else
            {
              *v42 = v41;
              v44 = v42 + 1;
            }
            v40[935] = v44;
            break;
          case 0x118:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_DWORD *)(a1[3] + 44) & 0x7FFFFLL;
            v47 = (uint64_t *)v45[938];
            v48 = v45[939];
            if ((unint64_t)v47 >= v48)
            {
              v127 = (uint64_t *)v45[937];
              v128 = v47 - v127;
              if ((unint64_t)(v128 + 1) >> 61)
                goto LABEL_288;
              v129 = v48 - (_QWORD)v127;
              v130 = (uint64_t)(v48 - (_QWORD)v127) >> 2;
              if (v130 <= v128 + 1)
                v130 = v128 + 1;
              if (v129 >= 0x7FFFFFFFFFFFFFF8)
                v131 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v131 = v130;
              if (v131)
              {
                v132 = (char *)sub_40FC((uint64_t)(v45 + 939), v131);
                v47 = (uint64_t *)v45[938];
                v127 = (uint64_t *)v45[937];
              }
              else
              {
                v132 = 0;
              }
              v189 = (uint64_t *)&v132[8 * v128];
              *v189 = v46;
              v49 = v189 + 1;
              while (v47 != v127)
              {
                v190 = *--v47;
                *--v189 = v190;
              }
              v45[937] = v189;
              v45[938] = v49;
              v45[939] = &v132[8 * v131];
              if (v127)
                operator delete(v127);
            }
            else
            {
              *v47 = v46;
              v49 = v47 + 1;
            }
            v45[938] = v49;
            break;
          case 0x119:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_DWORD *)(a1[3] + 76) & 0xFFFFFLL;
            v52 = (uint64_t *)v50[941];
            v53 = v50[942];
            if ((unint64_t)v52 >= v53)
            {
              v133 = (uint64_t *)v50[940];
              v134 = v52 - v133;
              if ((unint64_t)(v134 + 1) >> 61)
                goto LABEL_288;
              v135 = v53 - (_QWORD)v133;
              v136 = (uint64_t)(v53 - (_QWORD)v133) >> 2;
              if (v136 <= v134 + 1)
                v136 = v134 + 1;
              if (v135 >= 0x7FFFFFFFFFFFFFF8)
                v137 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v137 = v136;
              if (v137)
              {
                v138 = (char *)sub_40FC((uint64_t)(v50 + 942), v137);
                v52 = (uint64_t *)v50[941];
                v133 = (uint64_t *)v50[940];
              }
              else
              {
                v138 = 0;
              }
              v191 = (uint64_t *)&v138[8 * v134];
              *v191 = v51;
              v54 = v191 + 1;
              while (v52 != v133)
              {
                v192 = *--v52;
                *--v191 = v192;
              }
              v50[940] = v191;
              v50[941] = v54;
              v50[942] = &v138[8 * v137];
              if (v133)
                operator delete(v133);
            }
            else
            {
              *v52 = v51;
              v54 = v52 + 1;
            }
            v50[941] = v54;
            break;
          case 0x11A:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_DWORD *)(a1[3] + 40) & 0x7FFFFLL;
            v57 = (uint64_t *)v55[944];
            v58 = v55[945];
            if ((unint64_t)v57 >= v58)
            {
              v139 = (uint64_t *)v55[943];
              v140 = v57 - v139;
              if ((unint64_t)(v140 + 1) >> 61)
                goto LABEL_288;
              v141 = v58 - (_QWORD)v139;
              v142 = (uint64_t)(v58 - (_QWORD)v139) >> 2;
              if (v142 <= v140 + 1)
                v142 = v140 + 1;
              if (v141 >= 0x7FFFFFFFFFFFFFF8)
                v143 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v143 = v142;
              if (v143)
              {
                v144 = (char *)sub_40FC((uint64_t)(v55 + 945), v143);
                v57 = (uint64_t *)v55[944];
                v139 = (uint64_t *)v55[943];
              }
              else
              {
                v144 = 0;
              }
              v193 = (uint64_t *)&v144[8 * v140];
              *v193 = v56;
              v59 = v193 + 1;
              while (v57 != v139)
              {
                v194 = *--v57;
                *--v193 = v194;
              }
              v55[943] = v193;
              v55[944] = v59;
              v55[945] = &v144[8 * v143];
              if (v139)
                operator delete(v139);
            }
            else
            {
              *v57 = v56;
              v59 = v57 + 1;
            }
            v55[944] = v59;
            break;
          case 0x11B:
            v60 = *(_QWORD **)a1[2];
            v61 = *(_DWORD *)(a1[3] + 72) & 0xFFFFFLL;
            v62 = (uint64_t *)v60[947];
            v63 = v60[948];
            if ((unint64_t)v62 >= v63)
            {
              v145 = (uint64_t *)v60[946];
              v146 = v62 - v145;
              if ((unint64_t)(v146 + 1) >> 61)
                goto LABEL_288;
              v147 = v63 - (_QWORD)v145;
              v148 = (uint64_t)(v63 - (_QWORD)v145) >> 2;
              if (v148 <= v146 + 1)
                v148 = v146 + 1;
              if (v147 >= 0x7FFFFFFFFFFFFFF8)
                v149 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v149 = v148;
              if (v149)
              {
                v150 = (char *)sub_40FC((uint64_t)(v60 + 948), v149);
                v62 = (uint64_t *)v60[947];
                v145 = (uint64_t *)v60[946];
              }
              else
              {
                v150 = 0;
              }
              v195 = (uint64_t *)&v150[8 * v146];
              *v195 = v61;
              v64 = v195 + 1;
              while (v62 != v145)
              {
                v196 = *--v62;
                *--v195 = v196;
              }
              v60[946] = v195;
              v60[947] = v64;
              v60[948] = &v150[8 * v149];
              if (v145)
                operator delete(v145);
            }
            else
            {
              *v62 = v61;
              v64 = v62 + 1;
            }
            v60[947] = v64;
            break;
          case 0x11C:
            v65 = *(_QWORD **)a1[2];
            v66 = *(_DWORD *)(a1[3] + 20) & 0x7FFFFLL;
            v67 = (uint64_t *)v65[950];
            v68 = v65[951];
            if ((unint64_t)v67 >= v68)
            {
              v151 = (uint64_t *)v65[949];
              v152 = v67 - v151;
              if ((unint64_t)(v152 + 1) >> 61)
                goto LABEL_288;
              v153 = v68 - (_QWORD)v151;
              v154 = (uint64_t)(v68 - (_QWORD)v151) >> 2;
              if (v154 <= v152 + 1)
                v154 = v152 + 1;
              if (v153 >= 0x7FFFFFFFFFFFFFF8)
                v155 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v155 = v154;
              if (v155)
              {
                v156 = (char *)sub_40FC((uint64_t)(v65 + 951), v155);
                v67 = (uint64_t *)v65[950];
                v151 = (uint64_t *)v65[949];
              }
              else
              {
                v156 = 0;
              }
              v197 = (uint64_t *)&v156[8 * v152];
              *v197 = v66;
              v69 = v197 + 1;
              while (v67 != v151)
              {
                v198 = *--v67;
                *--v197 = v198;
              }
              v65[949] = v197;
              v65[950] = v69;
              v65[951] = &v156[8 * v155];
              if (v151)
                operator delete(v151);
            }
            else
            {
              *v67 = v66;
              v69 = v67 + 1;
            }
            v65[950] = v69;
            break;
          case 0x11D:
            v70 = *(_QWORD **)a1[2];
            v71 = *(_DWORD *)(a1[3] + 52) & 0xFFFFFLL;
            v72 = (uint64_t *)v70[953];
            v73 = v70[954];
            if ((unint64_t)v72 >= v73)
            {
              v157 = (uint64_t *)v70[952];
              v158 = v72 - v157;
              if ((unint64_t)(v158 + 1) >> 61)
                goto LABEL_288;
              v159 = v73 - (_QWORD)v157;
              v160 = (uint64_t)(v73 - (_QWORD)v157) >> 2;
              if (v160 <= v158 + 1)
                v160 = v158 + 1;
              if (v159 >= 0x7FFFFFFFFFFFFFF8)
                v161 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v161 = v160;
              if (v161)
              {
                v162 = (char *)sub_40FC((uint64_t)(v70 + 954), v161);
                v72 = (uint64_t *)v70[953];
                v157 = (uint64_t *)v70[952];
              }
              else
              {
                v162 = 0;
              }
              v199 = (uint64_t *)&v162[8 * v158];
              *v199 = v71;
              v74 = v199 + 1;
              while (v72 != v157)
              {
                v200 = *--v72;
                *--v199 = v200;
              }
              v70[952] = v199;
              v70[953] = v74;
              v70[954] = &v162[8 * v161];
              if (v157)
                operator delete(v157);
            }
            else
            {
              *v72 = v71;
              v74 = v72 + 1;
            }
            v70[953] = v74;
            break;
          case 0x11E:
            v75 = *(_QWORD **)a1[2];
            v76 = *(_DWORD *)(a1[3] + 24) & 0x7FFFFLL;
            v77 = (uint64_t *)v75[956];
            v78 = v75[957];
            if ((unint64_t)v77 >= v78)
            {
              v163 = (uint64_t *)v75[955];
              v164 = v77 - v163;
              if ((unint64_t)(v164 + 1) >> 61)
                goto LABEL_288;
              v165 = v78 - (_QWORD)v163;
              v166 = (uint64_t)(v78 - (_QWORD)v163) >> 2;
              if (v166 <= v164 + 1)
                v166 = v164 + 1;
              if (v165 >= 0x7FFFFFFFFFFFFFF8)
                v167 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v167 = v166;
              if (v167)
              {
                v168 = (char *)sub_40FC((uint64_t)(v75 + 957), v167);
                v77 = (uint64_t *)v75[956];
                v163 = (uint64_t *)v75[955];
              }
              else
              {
                v168 = 0;
              }
              v201 = (uint64_t *)&v168[8 * v164];
              *v201 = v76;
              v79 = v201 + 1;
              while (v77 != v163)
              {
                v202 = *--v77;
                *--v201 = v202;
              }
              v75[955] = v201;
              v75[956] = v79;
              v75[957] = &v168[8 * v167];
              if (v163)
                operator delete(v163);
            }
            else
            {
              *v77 = v76;
              v79 = v77 + 1;
            }
            v75[956] = v79;
            break;
          case 0x11F:
            v80 = *(_QWORD **)a1[2];
            v81 = *(_DWORD *)(a1[3] + 56) & 0xFFFFFLL;
            v82 = (uint64_t *)v80[959];
            v83 = v80[960];
            if ((unint64_t)v82 >= v83)
            {
              v169 = (uint64_t *)v80[958];
              v170 = v82 - v169;
              if ((unint64_t)(v170 + 1) >> 61)
LABEL_288:
                sub_4074();
              v171 = v83 - (_QWORD)v169;
              v172 = (uint64_t)(v83 - (_QWORD)v169) >> 2;
              if (v172 <= v170 + 1)
                v172 = v170 + 1;
              if (v171 >= 0x7FFFFFFFFFFFFFF8)
                v173 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v173 = v172;
              if (v173)
              {
                v174 = (char *)sub_40FC((uint64_t)(v80 + 960), v173);
                v82 = (uint64_t *)v80[959];
                v169 = (uint64_t *)v80[958];
              }
              else
              {
                v174 = 0;
              }
              v203 = (uint64_t *)&v174[8 * v170];
              *v203 = v81;
              v84 = v203 + 1;
              while (v82 != v169)
              {
                v204 = *--v82;
                *--v203 = v204;
              }
              v80[958] = v203;
              v80[959] = v84;
              v80[960] = &v174[8 * v173];
              if (v169)
                operator delete(v169);
            }
            else
            {
              *v82 = v81;
              v84 = v82 + 1;
            }
            v80[959] = v84;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E767C(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  int *v90;
  int **v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;

  v4 = *a1;
  if (*a2 == 1)
  {
    v91 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v90 = *v91;
    v92 = (char *)v91[1] - (char *)*v91;
    if (v92)
    {
      v93 = v92 >> 2;
      if (v93 <= 1)
        v93 = 1;
      do
      {
        v94 = *v90++;
        switch(v94)
        {
          case 'H':
            v95 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            v96 = (_QWORD *)(*(_QWORD *)a1[2] + 2512);
            goto LABEL_122;
          case 'I':
            v95 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            v96 = (_QWORD *)(*(_QWORD *)a1[2] + 2536);
            goto LABEL_122;
          case 'J':
            v95 = *(_DWORD *)(a1[3] + 24) & 0x1FFFF;
            v96 = (_QWORD *)(*(_QWORD *)a1[2] + 2560);
            goto LABEL_122;
          case 'K':
            v95 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFF;
            v96 = (_QWORD *)(*(_QWORD *)a1[2] + 2584);
            goto LABEL_122;
          case 'L':
            v95 = *(unsigned __int16 *)(a1[3] + 22);
            v96 = (_QWORD *)(*(_QWORD *)a1[2] + 2608);
            goto LABEL_122;
          case 'M':
            v95 = *(unsigned __int16 *)(a1[3] + 20);
            v96 = (_QWORD *)(*(_QWORD *)a1[2] + 2632);
LABEL_122:
            *(_QWORD *)(*v96 - 8) += v95;
            break;
          default:
            break;
        }
        --v93;
      }
      while (v93);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'H':
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            v12 = (uint64_t *)v10[314];
            v13 = v10[315];
            if ((unint64_t)v12 >= v13)
            {
              v42 = (uint64_t *)v10[313];
              v43 = v12 - v42;
              if ((unint64_t)(v43 + 1) >> 61)
                goto LABEL_126;
              v44 = v13 - (_QWORD)v42;
              v45 = (uint64_t)(v13 - (_QWORD)v42) >> 2;
              if (v45 <= v43 + 1)
                v45 = v43 + 1;
              if (v44 >= 0x7FFFFFFFFFFFFFF8)
                v46 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v46 = v45;
              if (v46)
              {
                v47 = (char *)sub_40FC((uint64_t)(v10 + 315), v46);
                v12 = (uint64_t *)v10[314];
                v42 = (uint64_t *)v10[313];
              }
              else
              {
                v47 = 0;
              }
              v78 = (uint64_t *)&v47[8 * v43];
              *v78 = v11;
              v14 = v78 + 1;
              while (v12 != v42)
              {
                v79 = *--v12;
                *--v78 = v79;
              }
              v10[313] = v78;
              v10[314] = v14;
              v10[315] = &v47[8 * v46];
              if (v42)
                operator delete(v42);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[314] = v14;
            break;
          case 'I':
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            v17 = (uint64_t *)v15[317];
            v18 = v15[318];
            if ((unint64_t)v17 >= v18)
            {
              v48 = (uint64_t *)v15[316];
              v49 = v17 - v48;
              if ((unint64_t)(v49 + 1) >> 61)
                goto LABEL_126;
              v50 = v18 - (_QWORD)v48;
              v51 = (uint64_t)(v18 - (_QWORD)v48) >> 2;
              if (v51 <= v49 + 1)
                v51 = v49 + 1;
              if (v50 >= 0x7FFFFFFFFFFFFFF8)
                v52 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v52 = v51;
              if (v52)
              {
                v53 = (char *)sub_40FC((uint64_t)(v15 + 318), v52);
                v17 = (uint64_t *)v15[317];
                v48 = (uint64_t *)v15[316];
              }
              else
              {
                v53 = 0;
              }
              v80 = (uint64_t *)&v53[8 * v49];
              *v80 = v16;
              v19 = v80 + 1;
              while (v17 != v48)
              {
                v81 = *--v17;
                *--v80 = v81;
              }
              v15[316] = v80;
              v15[317] = v19;
              v15[318] = &v53[8 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[317] = v19;
            break;
          case 'J':
            v20 = *(_QWORD **)a1[2];
            v21 = *(_DWORD *)(a1[3] + 24) & 0x1FFFFLL;
            v22 = (uint64_t *)v20[320];
            v23 = v20[321];
            if ((unint64_t)v22 >= v23)
            {
              v54 = (uint64_t *)v20[319];
              v55 = v22 - v54;
              if ((unint64_t)(v55 + 1) >> 61)
                goto LABEL_126;
              v56 = v23 - (_QWORD)v54;
              v57 = (uint64_t)(v23 - (_QWORD)v54) >> 2;
              if (v57 <= v55 + 1)
                v57 = v55 + 1;
              if (v56 >= 0x7FFFFFFFFFFFFFF8)
                v58 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v58 = v57;
              if (v58)
              {
                v59 = (char *)sub_40FC((uint64_t)(v20 + 321), v58);
                v22 = (uint64_t *)v20[320];
                v54 = (uint64_t *)v20[319];
              }
              else
              {
                v59 = 0;
              }
              v82 = (uint64_t *)&v59[8 * v55];
              *v82 = v21;
              v24 = v82 + 1;
              while (v22 != v54)
              {
                v83 = *--v22;
                *--v82 = v83;
              }
              v20[319] = v82;
              v20[320] = v24;
              v20[321] = &v59[8 * v58];
              if (v54)
                operator delete(v54);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[320] = v24;
            break;
          case 'K':
            v25 = *(_QWORD **)a1[2];
            v26 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFFLL;
            v27 = (uint64_t *)v25[323];
            v28 = v25[324];
            if ((unint64_t)v27 >= v28)
            {
              v60 = (uint64_t *)v25[322];
              v61 = v27 - v60;
              if ((unint64_t)(v61 + 1) >> 61)
                goto LABEL_126;
              v62 = v28 - (_QWORD)v60;
              v63 = (uint64_t)(v28 - (_QWORD)v60) >> 2;
              if (v63 <= v61 + 1)
                v63 = v61 + 1;
              if (v62 >= 0x7FFFFFFFFFFFFFF8)
                v64 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v64 = v63;
              if (v64)
              {
                v65 = (char *)sub_40FC((uint64_t)(v25 + 324), v64);
                v27 = (uint64_t *)v25[323];
                v60 = (uint64_t *)v25[322];
              }
              else
              {
                v65 = 0;
              }
              v84 = (uint64_t *)&v65[8 * v61];
              *v84 = v26;
              v29 = v84 + 1;
              while (v27 != v60)
              {
                v85 = *--v27;
                *--v84 = v85;
              }
              v25[322] = v84;
              v25[323] = v29;
              v25[324] = &v65[8 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[323] = v29;
            break;
          case 'L':
            v30 = a1[2];
            v31 = *(_QWORD **)v30;
            v32 = *(unsigned __int16 *)(a1[3] + 22);
            v33 = *(char **)(*(_QWORD *)v30 + 2608);
            v34 = *(_QWORD *)(*(_QWORD *)v30 + 2616);
            if ((unint64_t)v33 >= v34)
            {
              v66 = (char *)v31[325];
              v67 = (v33 - v66) >> 3;
              if ((unint64_t)(v67 + 1) >> 61)
                goto LABEL_126;
              v68 = v34 - (_QWORD)v66;
              v69 = (uint64_t)(v34 - (_QWORD)v66) >> 2;
              if (v69 <= v67 + 1)
                v69 = v67 + 1;
              if (v68 >= 0x7FFFFFFFFFFFFFF8)
                v70 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v70 = v69;
              if (v70)
              {
                v71 = (char *)sub_40FC((uint64_t)(v31 + 327), v70);
                v33 = (char *)v31[326];
                v66 = (char *)v31[325];
              }
              else
              {
                v71 = 0;
              }
              v86 = &v71[8 * v67];
              *(_QWORD *)v86 = v32;
              v35 = v86 + 8;
              while (v33 != v66)
              {
                v87 = *((_QWORD *)v33 - 1);
                v33 -= 8;
                *((_QWORD *)v86 - 1) = v87;
                v86 -= 8;
              }
              v31[325] = v86;
              v31[326] = v35;
              v31[327] = &v71[8 * v70];
              if (v66)
                operator delete(v66);
            }
            else
            {
              *(_QWORD *)v33 = v32;
              v35 = v33 + 8;
            }
            v31[326] = v35;
            break;
          case 'M':
            v36 = a1[2];
            v37 = *(_QWORD **)v36;
            v38 = *(unsigned __int16 *)(a1[3] + 20);
            v39 = *(char **)(*(_QWORD *)v36 + 2632);
            v40 = *(_QWORD *)(*(_QWORD *)v36 + 2640);
            if ((unint64_t)v39 >= v40)
            {
              v72 = (char *)v37[328];
              v73 = (v39 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61)
LABEL_126:
                sub_4074();
              v74 = v40 - (_QWORD)v72;
              v75 = (uint64_t)(v40 - (_QWORD)v72) >> 2;
              if (v75 <= v73 + 1)
                v75 = v73 + 1;
              if (v74 >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v75;
              if (v76)
              {
                v77 = (char *)sub_40FC((uint64_t)(v37 + 330), v76);
                v39 = (char *)v37[329];
                v72 = (char *)v37[328];
              }
              else
              {
                v77 = 0;
              }
              v88 = &v77[8 * v73];
              *(_QWORD *)v88 = v38;
              v41 = v88 + 8;
              while (v39 != v72)
              {
                v89 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *((_QWORD *)v88 - 1) = v89;
                v88 -= 8;
              }
              v37[328] = v88;
              v37[329] = v41;
              v37[330] = &v77[8 * v76];
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(_QWORD *)v39 = v38;
              v41 = v39 + 8;
            }
            v37[329] = v41;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E7CCC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  char *v147;
  unint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  _QWORD *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  char *v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  char *v319;
  char *v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  char *v331;
  char *v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  char *v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  char *v370;
  uint64_t v371;
  char *v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  char *v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  char *v380;
  uint64_t v381;
  char *v382;
  uint64_t v383;
  char *v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  char *v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  char *v414;
  uint64_t v415;
  char *v416;
  uint64_t v417;
  char *v418;
  uint64_t v419;
  char *v420;
  uint64_t v421;
  char *v422;
  uint64_t v423;
  char *v424;
  uint64_t v425;
  int *v426;
  int **v427;
  uint64_t v428;
  unint64_t v429;
  int v430;
  uint64_t v431;
  char *v432;
  uint64_t v433;
  char *v434;

  v4 = *a1;
  if (*a2 == 1)
  {
    v427 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v426 = *v427;
    v428 = (char *)v427[1] - (char *)*v427;
    if (v428)
    {
      v429 = v428 >> 2;
      if (v429 <= 1)
        v429 = 1;
      do
      {
        v430 = *v426++;
        switch(v430)
        {
          case 133:
            v431 = *(_WORD *)(a1[3] + 78) & 0x1FFF;
            v432 = (char *)(*(_QWORD *)a1[2] + 3976);
            goto LABEL_591;
          case 134:
            v431 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            v432 = (char *)(*(_QWORD *)a1[2] + 4000);
            goto LABEL_591;
          case 135:
            v431 = *(_WORD *)(a1[3] + 46) & 0x3FFF;
            v432 = (char *)(*(_QWORD *)a1[2] + 4024);
            goto LABEL_591;
          case 136:
            v431 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v432 = (char *)(*(_QWORD *)a1[2] + 4048);
            goto LABEL_591;
          case 137:
            v431 = *(_WORD *)(a1[3] + 80) & 0x1FFF;
            v432 = (char *)(*(_QWORD *)a1[2] + 4072);
            goto LABEL_591;
          case 138:
            v431 = *(_WORD *)(a1[3] + 64) & 0x3FFF;
            v432 = (char *)(*(_QWORD *)a1[2] + 4096);
            goto LABEL_591;
          case 139:
            v431 = *(_WORD *)(a1[3] + 48) & 0x3FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/usr/lib/libLLVM.dylib" + 8;
            goto LABEL_590;
          case 140:
            v431 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = (_BYTE *)(&stru_1028 + 8);
            goto LABEL_590;
          case 141:
            v431 = *(_WORD *)(a1[3] + 82) & 0x1FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/PrivateFrameworks/GPUToolsTransport.framework/GPUToolsTransport" + 8;
            goto LABEL_590;
          case 142:
            v431 = *(_WORD *)(a1[3] + 66) & 0x3FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/PrivateFrameworks/GPUToolsTransport.framework/GPUToolsTransport" + 32;
            goto LABEL_590;
          case 143:
            v431 = *(_WORD *)(a1[3] + 50) & 0x3FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/PrivateFrameworks/GPUToolsTransport.framework/GPUToolsTransport" + 56;
            goto LABEL_590;
          case 144:
            v431 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = (_BYTE *)&stru_1090;
            goto LABEL_590;
          case 145:
            v431 = *(_WORD *)(a1[3] + 72) & 0x1FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/Frameworks/IOSurface.framework/IOSurface";
            goto LABEL_590;
          case 146:
            v431 = *(_WORD *)(a1[3] + 56) & 0x1FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/Frameworks/IOSurface.framework/IOSurface" + 24;
            goto LABEL_590;
          case 147:
            v431 = *(_WORD *)(a1[3] + 40) & 0x3FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/Frameworks/IOSurface.framework/IOSurface" + 48;
            goto LABEL_590;
          case 148:
            v431 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = (_BYTE *)(&stru_10E8 + 8);
            goto LABEL_590;
          case 149:
            v431 = *(_WORD *)(a1[3] + 74) & 0x1FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/usr/lib/libcompression.dylib" + 8;
            goto LABEL_590;
          case 150:
            v431 = *(_WORD *)(a1[3] + 58) & 0x1FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = (_BYTE *)&stru_1120;
            goto LABEL_590;
          case 151:
            v431 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore";
            goto LABEL_590;
          case 152:
            v431 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore" + 24;
            goto LABEL_590;
          case 153:
            v431 = *(_WORD *)(a1[3] + 76) & 0x1FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore" + 48;
            goto LABEL_590;
          case 154:
            v431 = *(_WORD *)(a1[3] + 60) & 0x1FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = (_BYTE *)&stru_1180;
            goto LABEL_590;
          case 155:
            v431 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics";
            goto LABEL_590;
          case 156:
            v431 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics" + 24;
            goto LABEL_590;
          case 157:
            v431 = *(_WORD *)(a1[3] + 68) & 0x1FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics" + 48;
            goto LABEL_590;
          case 158:
            v431 = *(_WORD *)(a1[3] + 52) & 0x3FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = (_BYTE *)(&stru_11D8 + 8);
            goto LABEL_590;
          case 159:
            v431 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/Frameworks/Metal.framework/Metal" + 8;
            goto LABEL_590;
          case 160:
            v431 = (unsigned __int16)*(_DWORD *)(a1[3] + 20) >> 1;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/Frameworks/Metal.framework/Metal" + 32;
            goto LABEL_590;
          case 161:
            v431 = *(_WORD *)(a1[3] + 70) & 0x1FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = (_BYTE *)&stru_1228;
            goto LABEL_590;
          case 162:
            v431 = *(_WORD *)(a1[3] + 54) & 0x3FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders";
            goto LABEL_590;
          case 163:
            v431 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders" + 24;
            goto LABEL_590;
          case 164:
            v431 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            v433 = *(_QWORD *)a1[2];
            v434 = "/System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders" + 48;
LABEL_590:
            v432 = &v434[v433];
LABEL_591:
            *(_QWORD *)(*(_QWORD *)v432 - 8) += v431;
            break;
          default:
            break;
        }
        --v429;
      }
      while (v429);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x85:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 78) & 0x1FFF;
            v12 = (char *)v10[497];
            v13 = v10[498];
            if ((unint64_t)v12 >= v13)
            {
              v170 = (char *)v10[496];
              v171 = (v12 - v170) >> 3;
              if ((unint64_t)(v171 + 1) >> 61)
                goto LABEL_595;
              v172 = v13 - (_QWORD)v170;
              v173 = (uint64_t)(v13 - (_QWORD)v170) >> 2;
              if (v173 <= v171 + 1)
                v173 = v171 + 1;
              if (v172 >= 0x7FFFFFFFFFFFFFF8)
                v174 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v174 = v173;
              if (v174)
              {
                v175 = (char *)sub_40FC((uint64_t)(v10 + 498), v174);
                v12 = (char *)v10[497];
                v170 = (char *)v10[496];
              }
              else
              {
                v175 = 0;
              }
              v362 = &v175[8 * v171];
              *(_QWORD *)v362 = v11;
              v14 = v362 + 8;
              while (v12 != v170)
              {
                v363 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v362 - 1) = v363;
                v362 -= 8;
              }
              v10[496] = v362;
              v10[497] = v14;
              v10[498] = &v175[8 * v174];
              if (v170)
                operator delete(v170);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[497] = v14;
            break;
          case 0x86:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 62) & 0x3FFF;
            v17 = (char *)v15[500];
            v18 = v15[501];
            if ((unint64_t)v17 >= v18)
            {
              v176 = (char *)v15[499];
              v177 = (v17 - v176) >> 3;
              if ((unint64_t)(v177 + 1) >> 61)
                goto LABEL_595;
              v178 = v18 - (_QWORD)v176;
              v179 = (uint64_t)(v18 - (_QWORD)v176) >> 2;
              if (v179 <= v177 + 1)
                v179 = v177 + 1;
              if (v178 >= 0x7FFFFFFFFFFFFFF8)
                v180 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v180 = v179;
              if (v180)
              {
                v181 = (char *)sub_40FC((uint64_t)(v15 + 501), v180);
                v17 = (char *)v15[500];
                v176 = (char *)v15[499];
              }
              else
              {
                v181 = 0;
              }
              v364 = &v181[8 * v177];
              *(_QWORD *)v364 = v16;
              v19 = v364 + 8;
              while (v17 != v176)
              {
                v365 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v364 - 1) = v365;
                v364 -= 8;
              }
              v15[499] = v364;
              v15[500] = v19;
              v15[501] = &v181[8 * v180];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[500] = v19;
            break;
          case 0x87:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 46) & 0x3FFF;
            v22 = (char *)v20[503];
            v23 = v20[504];
            if ((unint64_t)v22 >= v23)
            {
              v182 = (char *)v20[502];
              v183 = (v22 - v182) >> 3;
              if ((unint64_t)(v183 + 1) >> 61)
                goto LABEL_595;
              v184 = v23 - (_QWORD)v182;
              v185 = (uint64_t)(v23 - (_QWORD)v182) >> 2;
              if (v185 <= v183 + 1)
                v185 = v183 + 1;
              if (v184 >= 0x7FFFFFFFFFFFFFF8)
                v186 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v186 = v185;
              if (v186)
              {
                v187 = (char *)sub_40FC((uint64_t)(v20 + 504), v186);
                v22 = (char *)v20[503];
                v182 = (char *)v20[502];
              }
              else
              {
                v187 = 0;
              }
              v366 = &v187[8 * v183];
              *(_QWORD *)v366 = v21;
              v24 = v366 + 8;
              while (v22 != v182)
              {
                v367 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v366 - 1) = v367;
                v366 -= 8;
              }
              v20[502] = v366;
              v20[503] = v24;
              v20[504] = &v187[8 * v186];
              if (v182)
                operator delete(v182);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[503] = v24;
            break;
          case 0x88:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v27 = (char *)v25[506];
            v28 = v25[507];
            if ((unint64_t)v27 >= v28)
            {
              v188 = (char *)v25[505];
              v189 = (v27 - v188) >> 3;
              if ((unint64_t)(v189 + 1) >> 61)
                goto LABEL_595;
              v190 = v28 - (_QWORD)v188;
              v191 = (uint64_t)(v28 - (_QWORD)v188) >> 2;
              if (v191 <= v189 + 1)
                v191 = v189 + 1;
              if (v190 >= 0x7FFFFFFFFFFFFFF8)
                v192 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v192 = v191;
              if (v192)
              {
                v193 = (char *)sub_40FC((uint64_t)(v25 + 507), v192);
                v27 = (char *)v25[506];
                v188 = (char *)v25[505];
              }
              else
              {
                v193 = 0;
              }
              v368 = &v193[8 * v189];
              *(_QWORD *)v368 = v26;
              v29 = v368 + 8;
              while (v27 != v188)
              {
                v369 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v368 - 1) = v369;
                v368 -= 8;
              }
              v25[505] = v368;
              v25[506] = v29;
              v25[507] = &v193[8 * v192];
              if (v188)
                operator delete(v188);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[506] = v29;
            break;
          case 0x89:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_WORD *)(a1[3] + 80) & 0x1FFF;
            v32 = (char *)v30[509];
            v33 = v30[510];
            if ((unint64_t)v32 >= v33)
            {
              v194 = (char *)v30[508];
              v195 = (v32 - v194) >> 3;
              if ((unint64_t)(v195 + 1) >> 61)
                goto LABEL_595;
              v196 = v33 - (_QWORD)v194;
              v197 = (uint64_t)(v33 - (_QWORD)v194) >> 2;
              if (v197 <= v195 + 1)
                v197 = v195 + 1;
              if (v196 >= 0x7FFFFFFFFFFFFFF8)
                v198 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v198 = v197;
              if (v198)
              {
                v199 = (char *)sub_40FC((uint64_t)(v30 + 510), v198);
                v32 = (char *)v30[509];
                v194 = (char *)v30[508];
              }
              else
              {
                v199 = 0;
              }
              v370 = &v199[8 * v195];
              *(_QWORD *)v370 = v31;
              v34 = v370 + 8;
              while (v32 != v194)
              {
                v371 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v370 - 1) = v371;
                v370 -= 8;
              }
              v30[508] = v370;
              v30[509] = v34;
              v30[510] = &v199[8 * v198];
              if (v194)
                operator delete(v194);
            }
            else
            {
              *(_QWORD *)v32 = v31;
              v34 = v32 + 8;
            }
            v30[509] = v34;
            break;
          case 0x8A:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 64) & 0x3FFF;
            v37 = (char *)v35[512];
            v38 = v35[513];
            if ((unint64_t)v37 >= v38)
            {
              v200 = (char *)v35[511];
              v201 = (v37 - v200) >> 3;
              if ((unint64_t)(v201 + 1) >> 61)
                goto LABEL_595;
              v202 = v38 - (_QWORD)v200;
              v203 = (uint64_t)(v38 - (_QWORD)v200) >> 2;
              if (v203 <= v201 + 1)
                v203 = v201 + 1;
              if (v202 >= 0x7FFFFFFFFFFFFFF8)
                v204 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v204 = v203;
              if (v204)
              {
                v205 = (char *)sub_40FC((uint64_t)(v35 + 513), v204);
                v37 = (char *)v35[512];
                v200 = (char *)v35[511];
              }
              else
              {
                v205 = 0;
              }
              v372 = &v205[8 * v201];
              *(_QWORD *)v372 = v36;
              v39 = v372 + 8;
              while (v37 != v200)
              {
                v373 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v372 - 1) = v373;
                v372 -= 8;
              }
              v35[511] = v372;
              v35[512] = v39;
              v35[513] = &v205[8 * v204];
              if (v200)
                operator delete(v200);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[512] = v39;
            break;
          case 0x8B:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_WORD *)(a1[3] + 48) & 0x3FFF;
            v42 = (char *)v40[515];
            v43 = v40[516];
            if ((unint64_t)v42 >= v43)
            {
              v206 = (char *)v40[514];
              v207 = (v42 - v206) >> 3;
              if ((unint64_t)(v207 + 1) >> 61)
                goto LABEL_595;
              v208 = v43 - (_QWORD)v206;
              v209 = (uint64_t)(v43 - (_QWORD)v206) >> 2;
              if (v209 <= v207 + 1)
                v209 = v207 + 1;
              if (v208 >= 0x7FFFFFFFFFFFFFF8)
                v210 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v210 = v209;
              if (v210)
              {
                v211 = (char *)sub_40FC((uint64_t)(v40 + 516), v210);
                v42 = (char *)v40[515];
                v206 = (char *)v40[514];
              }
              else
              {
                v211 = 0;
              }
              v374 = &v211[8 * v207];
              *(_QWORD *)v374 = v41;
              v44 = v374 + 8;
              while (v42 != v206)
              {
                v375 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v374 - 1) = v375;
                v374 -= 8;
              }
              v40[514] = v374;
              v40[515] = v44;
              v40[516] = &v211[8 * v210];
              if (v206)
                operator delete(v206);
            }
            else
            {
              *(_QWORD *)v42 = v41;
              v44 = v42 + 8;
            }
            v40[515] = v44;
            break;
          case 0x8C:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v47 = (char *)v45[518];
            v48 = v45[519];
            if ((unint64_t)v47 >= v48)
            {
              v212 = (char *)v45[517];
              v213 = (v47 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61)
                goto LABEL_595;
              v214 = v48 - (_QWORD)v212;
              v215 = (uint64_t)(v48 - (_QWORD)v212) >> 2;
              if (v215 <= v213 + 1)
                v215 = v213 + 1;
              if (v214 >= 0x7FFFFFFFFFFFFFF8)
                v216 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v216 = v215;
              if (v216)
              {
                v217 = (char *)sub_40FC((uint64_t)(v45 + 519), v216);
                v47 = (char *)v45[518];
                v212 = (char *)v45[517];
              }
              else
              {
                v217 = 0;
              }
              v376 = &v217[8 * v213];
              *(_QWORD *)v376 = v46;
              v49 = v376 + 8;
              while (v47 != v212)
              {
                v377 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v376 - 1) = v377;
                v376 -= 8;
              }
              v45[517] = v376;
              v45[518] = v49;
              v45[519] = &v217[8 * v216];
              if (v212)
                operator delete(v212);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[518] = v49;
            break;
          case 0x8D:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_WORD *)(a1[3] + 82) & 0x1FFF;
            v52 = (char *)v50[521];
            v53 = v50[522];
            if ((unint64_t)v52 >= v53)
            {
              v218 = (char *)v50[520];
              v219 = (v52 - v218) >> 3;
              if ((unint64_t)(v219 + 1) >> 61)
                goto LABEL_595;
              v220 = v53 - (_QWORD)v218;
              v221 = (uint64_t)(v53 - (_QWORD)v218) >> 2;
              if (v221 <= v219 + 1)
                v221 = v219 + 1;
              if (v220 >= 0x7FFFFFFFFFFFFFF8)
                v222 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v222 = v221;
              if (v222)
              {
                v223 = (char *)sub_40FC((uint64_t)(v50 + 522), v222);
                v52 = (char *)v50[521];
                v218 = (char *)v50[520];
              }
              else
              {
                v223 = 0;
              }
              v378 = &v223[8 * v219];
              *(_QWORD *)v378 = v51;
              v54 = v378 + 8;
              while (v52 != v218)
              {
                v379 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v378 - 1) = v379;
                v378 -= 8;
              }
              v50[520] = v378;
              v50[521] = v54;
              v50[522] = &v223[8 * v222];
              if (v218)
                operator delete(v218);
            }
            else
            {
              *(_QWORD *)v52 = v51;
              v54 = v52 + 8;
            }
            v50[521] = v54;
            break;
          case 0x8E:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 66) & 0x3FFF;
            v57 = (char *)v55[524];
            v58 = v55[525];
            if ((unint64_t)v57 >= v58)
            {
              v224 = (char *)v55[523];
              v225 = (v57 - v224) >> 3;
              if ((unint64_t)(v225 + 1) >> 61)
                goto LABEL_595;
              v226 = v58 - (_QWORD)v224;
              v227 = (uint64_t)(v58 - (_QWORD)v224) >> 2;
              if (v227 <= v225 + 1)
                v227 = v225 + 1;
              if (v226 >= 0x7FFFFFFFFFFFFFF8)
                v228 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v228 = v227;
              if (v228)
              {
                v229 = (char *)sub_40FC((uint64_t)(v55 + 525), v228);
                v57 = (char *)v55[524];
                v224 = (char *)v55[523];
              }
              else
              {
                v229 = 0;
              }
              v380 = &v229[8 * v225];
              *(_QWORD *)v380 = v56;
              v59 = v380 + 8;
              while (v57 != v224)
              {
                v381 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v380 - 1) = v381;
                v380 -= 8;
              }
              v55[523] = v380;
              v55[524] = v59;
              v55[525] = &v229[8 * v228];
              if (v224)
                operator delete(v224);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[524] = v59;
            break;
          case 0x8F:
            v60 = *(_QWORD **)a1[2];
            v61 = *(_WORD *)(a1[3] + 50) & 0x3FFF;
            v62 = (char *)v60[527];
            v63 = v60[528];
            if ((unint64_t)v62 >= v63)
            {
              v230 = (char *)v60[526];
              v231 = (v62 - v230) >> 3;
              if ((unint64_t)(v231 + 1) >> 61)
                goto LABEL_595;
              v232 = v63 - (_QWORD)v230;
              v233 = (uint64_t)(v63 - (_QWORD)v230) >> 2;
              if (v233 <= v231 + 1)
                v233 = v231 + 1;
              if (v232 >= 0x7FFFFFFFFFFFFFF8)
                v234 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v234 = v233;
              if (v234)
              {
                v235 = (char *)sub_40FC((uint64_t)(v60 + 528), v234);
                v62 = (char *)v60[527];
                v230 = (char *)v60[526];
              }
              else
              {
                v235 = 0;
              }
              v382 = &v235[8 * v231];
              *(_QWORD *)v382 = v61;
              v64 = v382 + 8;
              while (v62 != v230)
              {
                v383 = *((_QWORD *)v62 - 1);
                v62 -= 8;
                *((_QWORD *)v382 - 1) = v383;
                v382 -= 8;
              }
              v60[526] = v382;
              v60[527] = v64;
              v60[528] = &v235[8 * v234];
              if (v230)
                operator delete(v230);
            }
            else
            {
              *(_QWORD *)v62 = v61;
              v64 = v62 + 8;
            }
            v60[527] = v64;
            break;
          case 0x90:
            v65 = *(_QWORD **)a1[2];
            v66 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            v67 = (char *)v65[530];
            v68 = v65[531];
            if ((unint64_t)v67 >= v68)
            {
              v236 = (char *)v65[529];
              v237 = (v67 - v236) >> 3;
              if ((unint64_t)(v237 + 1) >> 61)
                goto LABEL_595;
              v238 = v68 - (_QWORD)v236;
              v239 = (uint64_t)(v68 - (_QWORD)v236) >> 2;
              if (v239 <= v237 + 1)
                v239 = v237 + 1;
              if (v238 >= 0x7FFFFFFFFFFFFFF8)
                v240 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v240 = v239;
              if (v240)
              {
                v241 = (char *)sub_40FC((uint64_t)(v65 + 531), v240);
                v67 = (char *)v65[530];
                v236 = (char *)v65[529];
              }
              else
              {
                v241 = 0;
              }
              v384 = &v241[8 * v237];
              *(_QWORD *)v384 = v66;
              v69 = v384 + 8;
              while (v67 != v236)
              {
                v385 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v384 - 1) = v385;
                v384 -= 8;
              }
              v65[529] = v384;
              v65[530] = v69;
              v65[531] = &v241[8 * v240];
              if (v236)
                operator delete(v236);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[530] = v69;
            break;
          case 0x91:
            v70 = *(_QWORD **)a1[2];
            v71 = *(_WORD *)(a1[3] + 72) & 0x1FFF;
            v72 = (char *)v70[533];
            v73 = v70[534];
            if ((unint64_t)v72 >= v73)
            {
              v242 = (char *)v70[532];
              v243 = (v72 - v242) >> 3;
              if ((unint64_t)(v243 + 1) >> 61)
                goto LABEL_595;
              v244 = v73 - (_QWORD)v242;
              v245 = (uint64_t)(v73 - (_QWORD)v242) >> 2;
              if (v245 <= v243 + 1)
                v245 = v243 + 1;
              if (v244 >= 0x7FFFFFFFFFFFFFF8)
                v246 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v246 = v245;
              if (v246)
              {
                v247 = (char *)sub_40FC((uint64_t)(v70 + 534), v246);
                v72 = (char *)v70[533];
                v242 = (char *)v70[532];
              }
              else
              {
                v247 = 0;
              }
              v386 = &v247[8 * v243];
              *(_QWORD *)v386 = v71;
              v74 = v386 + 8;
              while (v72 != v242)
              {
                v387 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v386 - 1) = v387;
                v386 -= 8;
              }
              v70[532] = v386;
              v70[533] = v74;
              v70[534] = &v247[8 * v246];
              if (v242)
                operator delete(v242);
            }
            else
            {
              *(_QWORD *)v72 = v71;
              v74 = v72 + 8;
            }
            v70[533] = v74;
            break;
          case 0x92:
            v75 = *(_QWORD **)a1[2];
            v76 = *(_WORD *)(a1[3] + 56) & 0x1FFF;
            v77 = (char *)v75[536];
            v78 = v75[537];
            if ((unint64_t)v77 >= v78)
            {
              v248 = (char *)v75[535];
              v249 = (v77 - v248) >> 3;
              if ((unint64_t)(v249 + 1) >> 61)
                goto LABEL_595;
              v250 = v78 - (_QWORD)v248;
              v251 = (uint64_t)(v78 - (_QWORD)v248) >> 2;
              if (v251 <= v249 + 1)
                v251 = v249 + 1;
              if (v250 >= 0x7FFFFFFFFFFFFFF8)
                v252 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v252 = v251;
              if (v252)
              {
                v253 = (char *)sub_40FC((uint64_t)(v75 + 537), v252);
                v77 = (char *)v75[536];
                v248 = (char *)v75[535];
              }
              else
              {
                v253 = 0;
              }
              v388 = &v253[8 * v249];
              *(_QWORD *)v388 = v76;
              v79 = v388 + 8;
              while (v77 != v248)
              {
                v389 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *((_QWORD *)v388 - 1) = v389;
                v388 -= 8;
              }
              v75[535] = v388;
              v75[536] = v79;
              v75[537] = &v253[8 * v252];
              if (v248)
                operator delete(v248);
            }
            else
            {
              *(_QWORD *)v77 = v76;
              v79 = v77 + 8;
            }
            v75[536] = v79;
            break;
          case 0x93:
            v80 = *(_QWORD **)a1[2];
            v81 = *(_WORD *)(a1[3] + 40) & 0x3FFF;
            v82 = (char *)v80[539];
            v83 = v80[540];
            if ((unint64_t)v82 >= v83)
            {
              v254 = (char *)v80[538];
              v255 = (v82 - v254) >> 3;
              if ((unint64_t)(v255 + 1) >> 61)
                goto LABEL_595;
              v256 = v83 - (_QWORD)v254;
              v257 = (uint64_t)(v83 - (_QWORD)v254) >> 2;
              if (v257 <= v255 + 1)
                v257 = v255 + 1;
              if (v256 >= 0x7FFFFFFFFFFFFFF8)
                v258 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v258 = v257;
              if (v258)
              {
                v259 = (char *)sub_40FC((uint64_t)(v80 + 540), v258);
                v82 = (char *)v80[539];
                v254 = (char *)v80[538];
              }
              else
              {
                v259 = 0;
              }
              v390 = &v259[8 * v255];
              *(_QWORD *)v390 = v81;
              v84 = v390 + 8;
              while (v82 != v254)
              {
                v391 = *((_QWORD *)v82 - 1);
                v82 -= 8;
                *((_QWORD *)v390 - 1) = v391;
                v390 -= 8;
              }
              v80[538] = v390;
              v80[539] = v84;
              v80[540] = &v259[8 * v258];
              if (v254)
                operator delete(v254);
            }
            else
            {
              *(_QWORD *)v82 = v81;
              v84 = v82 + 8;
            }
            v80[539] = v84;
            break;
          case 0x94:
            v85 = *(_QWORD **)a1[2];
            v86 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v87 = (char *)v85[542];
            v88 = v85[543];
            if ((unint64_t)v87 >= v88)
            {
              v260 = (char *)v85[541];
              v261 = (v87 - v260) >> 3;
              if ((unint64_t)(v261 + 1) >> 61)
                goto LABEL_595;
              v262 = v88 - (_QWORD)v260;
              v263 = (uint64_t)(v88 - (_QWORD)v260) >> 2;
              if (v263 <= v261 + 1)
                v263 = v261 + 1;
              if (v262 >= 0x7FFFFFFFFFFFFFF8)
                v264 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v264 = v263;
              if (v264)
              {
                v265 = (char *)sub_40FC((uint64_t)(v85 + 543), v264);
                v87 = (char *)v85[542];
                v260 = (char *)v85[541];
              }
              else
              {
                v265 = 0;
              }
              v392 = &v265[8 * v261];
              *(_QWORD *)v392 = v86;
              v89 = v392 + 8;
              while (v87 != v260)
              {
                v393 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v392 - 1) = v393;
                v392 -= 8;
              }
              v85[541] = v392;
              v85[542] = v89;
              v85[543] = &v265[8 * v264];
              if (v260)
                operator delete(v260);
            }
            else
            {
              *(_QWORD *)v87 = v86;
              v89 = v87 + 8;
            }
            v85[542] = v89;
            break;
          case 0x95:
            v90 = *(_QWORD **)a1[2];
            v91 = *(_WORD *)(a1[3] + 74) & 0x1FFF;
            v92 = (char *)v90[545];
            v93 = v90[546];
            if ((unint64_t)v92 >= v93)
            {
              v266 = (char *)v90[544];
              v267 = (v92 - v266) >> 3;
              if ((unint64_t)(v267 + 1) >> 61)
                goto LABEL_595;
              v268 = v93 - (_QWORD)v266;
              v269 = (uint64_t)(v93 - (_QWORD)v266) >> 2;
              if (v269 <= v267 + 1)
                v269 = v267 + 1;
              if (v268 >= 0x7FFFFFFFFFFFFFF8)
                v270 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v270 = v269;
              if (v270)
              {
                v271 = (char *)sub_40FC((uint64_t)(v90 + 546), v270);
                v92 = (char *)v90[545];
                v266 = (char *)v90[544];
              }
              else
              {
                v271 = 0;
              }
              v394 = &v271[8 * v267];
              *(_QWORD *)v394 = v91;
              v94 = v394 + 8;
              while (v92 != v266)
              {
                v395 = *((_QWORD *)v92 - 1);
                v92 -= 8;
                *((_QWORD *)v394 - 1) = v395;
                v394 -= 8;
              }
              v90[544] = v394;
              v90[545] = v94;
              v90[546] = &v271[8 * v270];
              if (v266)
                operator delete(v266);
            }
            else
            {
              *(_QWORD *)v92 = v91;
              v94 = v92 + 8;
            }
            v90[545] = v94;
            break;
          case 0x96:
            v95 = *(_QWORD **)a1[2];
            v96 = *(_WORD *)(a1[3] + 58) & 0x1FFF;
            v97 = (char *)v95[548];
            v98 = v95[549];
            if ((unint64_t)v97 >= v98)
            {
              v272 = (char *)v95[547];
              v273 = (v97 - v272) >> 3;
              if ((unint64_t)(v273 + 1) >> 61)
                goto LABEL_595;
              v274 = v98 - (_QWORD)v272;
              v275 = (uint64_t)(v98 - (_QWORD)v272) >> 2;
              if (v275 <= v273 + 1)
                v275 = v273 + 1;
              if (v274 >= 0x7FFFFFFFFFFFFFF8)
                v276 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v276 = v275;
              if (v276)
              {
                v277 = (char *)sub_40FC((uint64_t)(v95 + 549), v276);
                v97 = (char *)v95[548];
                v272 = (char *)v95[547];
              }
              else
              {
                v277 = 0;
              }
              v396 = &v277[8 * v273];
              *(_QWORD *)v396 = v96;
              v99 = v396 + 8;
              while (v97 != v272)
              {
                v397 = *((_QWORD *)v97 - 1);
                v97 -= 8;
                *((_QWORD *)v396 - 1) = v397;
                v396 -= 8;
              }
              v95[547] = v396;
              v95[548] = v99;
              v95[549] = &v277[8 * v276];
              if (v272)
                operator delete(v272);
            }
            else
            {
              *(_QWORD *)v97 = v96;
              v99 = v97 + 8;
            }
            v95[548] = v99;
            break;
          case 0x97:
            v100 = *(_QWORD **)a1[2];
            v101 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            v102 = (char *)v100[551];
            v103 = v100[552];
            if ((unint64_t)v102 >= v103)
            {
              v278 = (char *)v100[550];
              v279 = (v102 - v278) >> 3;
              if ((unint64_t)(v279 + 1) >> 61)
                goto LABEL_595;
              v280 = v103 - (_QWORD)v278;
              v281 = (uint64_t)(v103 - (_QWORD)v278) >> 2;
              if (v281 <= v279 + 1)
                v281 = v279 + 1;
              if (v280 >= 0x7FFFFFFFFFFFFFF8)
                v282 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v282 = v281;
              if (v282)
              {
                v283 = (char *)sub_40FC((uint64_t)(v100 + 552), v282);
                v102 = (char *)v100[551];
                v278 = (char *)v100[550];
              }
              else
              {
                v283 = 0;
              }
              v398 = &v283[8 * v279];
              *(_QWORD *)v398 = v101;
              v104 = v398 + 8;
              while (v102 != v278)
              {
                v399 = *((_QWORD *)v102 - 1);
                v102 -= 8;
                *((_QWORD *)v398 - 1) = v399;
                v398 -= 8;
              }
              v100[550] = v398;
              v100[551] = v104;
              v100[552] = &v283[8 * v282];
              if (v278)
                operator delete(v278);
            }
            else
            {
              *(_QWORD *)v102 = v101;
              v104 = v102 + 8;
            }
            v100[551] = v104;
            break;
          case 0x98:
            v105 = *(_QWORD **)a1[2];
            v106 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v107 = (char *)v105[554];
            v108 = v105[555];
            if ((unint64_t)v107 >= v108)
            {
              v284 = (char *)v105[553];
              v285 = (v107 - v284) >> 3;
              if ((unint64_t)(v285 + 1) >> 61)
                goto LABEL_595;
              v286 = v108 - (_QWORD)v284;
              v287 = (uint64_t)(v108 - (_QWORD)v284) >> 2;
              if (v287 <= v285 + 1)
                v287 = v285 + 1;
              if (v286 >= 0x7FFFFFFFFFFFFFF8)
                v288 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v288 = v287;
              if (v288)
              {
                v289 = (char *)sub_40FC((uint64_t)(v105 + 555), v288);
                v107 = (char *)v105[554];
                v284 = (char *)v105[553];
              }
              else
              {
                v289 = 0;
              }
              v400 = &v289[8 * v285];
              *(_QWORD *)v400 = v106;
              v109 = v400 + 8;
              while (v107 != v284)
              {
                v401 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *((_QWORD *)v400 - 1) = v401;
                v400 -= 8;
              }
              v105[553] = v400;
              v105[554] = v109;
              v105[555] = &v289[8 * v288];
              if (v284)
                operator delete(v284);
            }
            else
            {
              *(_QWORD *)v107 = v106;
              v109 = v107 + 8;
            }
            v105[554] = v109;
            break;
          case 0x99:
            v110 = *(_QWORD **)a1[2];
            v111 = *(_WORD *)(a1[3] + 76) & 0x1FFF;
            v112 = (char *)v110[557];
            v113 = v110[558];
            if ((unint64_t)v112 >= v113)
            {
              v290 = (char *)v110[556];
              v291 = (v112 - v290) >> 3;
              if ((unint64_t)(v291 + 1) >> 61)
                goto LABEL_595;
              v292 = v113 - (_QWORD)v290;
              v293 = (uint64_t)(v113 - (_QWORD)v290) >> 2;
              if (v293 <= v291 + 1)
                v293 = v291 + 1;
              if (v292 >= 0x7FFFFFFFFFFFFFF8)
                v294 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v294 = v293;
              if (v294)
              {
                v295 = (char *)sub_40FC((uint64_t)(v110 + 558), v294);
                v112 = (char *)v110[557];
                v290 = (char *)v110[556];
              }
              else
              {
                v295 = 0;
              }
              v402 = &v295[8 * v291];
              *(_QWORD *)v402 = v111;
              v114 = v402 + 8;
              while (v112 != v290)
              {
                v403 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                *((_QWORD *)v402 - 1) = v403;
                v402 -= 8;
              }
              v110[556] = v402;
              v110[557] = v114;
              v110[558] = &v295[8 * v294];
              if (v290)
                operator delete(v290);
            }
            else
            {
              *(_QWORD *)v112 = v111;
              v114 = v112 + 8;
            }
            v110[557] = v114;
            break;
          case 0x9A:
            v115 = *(_QWORD **)a1[2];
            v116 = *(_WORD *)(a1[3] + 60) & 0x1FFF;
            v117 = (char *)v115[560];
            v118 = v115[561];
            if ((unint64_t)v117 >= v118)
            {
              v296 = (char *)v115[559];
              v297 = (v117 - v296) >> 3;
              if ((unint64_t)(v297 + 1) >> 61)
                goto LABEL_595;
              v298 = v118 - (_QWORD)v296;
              v299 = (uint64_t)(v118 - (_QWORD)v296) >> 2;
              if (v299 <= v297 + 1)
                v299 = v297 + 1;
              if (v298 >= 0x7FFFFFFFFFFFFFF8)
                v300 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v300 = v299;
              if (v300)
              {
                v301 = (char *)sub_40FC((uint64_t)(v115 + 561), v300);
                v117 = (char *)v115[560];
                v296 = (char *)v115[559];
              }
              else
              {
                v301 = 0;
              }
              v404 = &v301[8 * v297];
              *(_QWORD *)v404 = v116;
              v119 = v404 + 8;
              while (v117 != v296)
              {
                v405 = *((_QWORD *)v117 - 1);
                v117 -= 8;
                *((_QWORD *)v404 - 1) = v405;
                v404 -= 8;
              }
              v115[559] = v404;
              v115[560] = v119;
              v115[561] = &v301[8 * v300];
              if (v296)
                operator delete(v296);
            }
            else
            {
              *(_QWORD *)v117 = v116;
              v119 = v117 + 8;
            }
            v115[560] = v119;
            break;
          case 0x9B:
            v120 = *(_QWORD **)a1[2];
            v121 = *(_WORD *)(a1[3] + 44) & 0x3FFF;
            v122 = (char *)v120[563];
            v123 = v120[564];
            if ((unint64_t)v122 >= v123)
            {
              v302 = (char *)v120[562];
              v303 = (v122 - v302) >> 3;
              if ((unint64_t)(v303 + 1) >> 61)
                goto LABEL_595;
              v304 = v123 - (_QWORD)v302;
              v305 = (uint64_t)(v123 - (_QWORD)v302) >> 2;
              if (v305 <= v303 + 1)
                v305 = v303 + 1;
              if (v304 >= 0x7FFFFFFFFFFFFFF8)
                v306 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v306 = v305;
              if (v306)
              {
                v307 = (char *)sub_40FC((uint64_t)(v120 + 564), v306);
                v122 = (char *)v120[563];
                v302 = (char *)v120[562];
              }
              else
              {
                v307 = 0;
              }
              v406 = &v307[8 * v303];
              *(_QWORD *)v406 = v121;
              v124 = v406 + 8;
              while (v122 != v302)
              {
                v407 = *((_QWORD *)v122 - 1);
                v122 -= 8;
                *((_QWORD *)v406 - 1) = v407;
                v406 -= 8;
              }
              v120[562] = v406;
              v120[563] = v124;
              v120[564] = &v307[8 * v306];
              if (v302)
                operator delete(v302);
            }
            else
            {
              *(_QWORD *)v122 = v121;
              v124 = v122 + 8;
            }
            v120[563] = v124;
            break;
          case 0x9C:
            v125 = *(_QWORD **)a1[2];
            v126 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v127 = (char *)v125[566];
            v128 = v125[567];
            if ((unint64_t)v127 >= v128)
            {
              v308 = (char *)v125[565];
              v309 = (v127 - v308) >> 3;
              if ((unint64_t)(v309 + 1) >> 61)
                goto LABEL_595;
              v310 = v128 - (_QWORD)v308;
              v311 = (uint64_t)(v128 - (_QWORD)v308) >> 2;
              if (v311 <= v309 + 1)
                v311 = v309 + 1;
              if (v310 >= 0x7FFFFFFFFFFFFFF8)
                v312 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v312 = v311;
              if (v312)
              {
                v313 = (char *)sub_40FC((uint64_t)(v125 + 567), v312);
                v127 = (char *)v125[566];
                v308 = (char *)v125[565];
              }
              else
              {
                v313 = 0;
              }
              v408 = &v313[8 * v309];
              *(_QWORD *)v408 = v126;
              v129 = v408 + 8;
              while (v127 != v308)
              {
                v409 = *((_QWORD *)v127 - 1);
                v127 -= 8;
                *((_QWORD *)v408 - 1) = v409;
                v408 -= 8;
              }
              v125[565] = v408;
              v125[566] = v129;
              v125[567] = &v313[8 * v312];
              if (v308)
                operator delete(v308);
            }
            else
            {
              *(_QWORD *)v127 = v126;
              v129 = v127 + 8;
            }
            v125[566] = v129;
            break;
          case 0x9D:
            v130 = *(_QWORD **)a1[2];
            v131 = *(_WORD *)(a1[3] + 68) & 0x1FFF;
            v132 = (char *)v130[569];
            v133 = v130[570];
            if ((unint64_t)v132 >= v133)
            {
              v314 = (char *)v130[568];
              v315 = (v132 - v314) >> 3;
              if ((unint64_t)(v315 + 1) >> 61)
                goto LABEL_595;
              v316 = v133 - (_QWORD)v314;
              v317 = (uint64_t)(v133 - (_QWORD)v314) >> 2;
              if (v317 <= v315 + 1)
                v317 = v315 + 1;
              if (v316 >= 0x7FFFFFFFFFFFFFF8)
                v318 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v318 = v317;
              if (v318)
              {
                v319 = (char *)sub_40FC((uint64_t)(v130 + 570), v318);
                v132 = (char *)v130[569];
                v314 = (char *)v130[568];
              }
              else
              {
                v319 = 0;
              }
              v410 = &v319[8 * v315];
              *(_QWORD *)v410 = v131;
              v134 = v410 + 8;
              while (v132 != v314)
              {
                v411 = *((_QWORD *)v132 - 1);
                v132 -= 8;
                *((_QWORD *)v410 - 1) = v411;
                v410 -= 8;
              }
              v130[568] = v410;
              v130[569] = v134;
              v130[570] = &v319[8 * v318];
              if (v314)
                operator delete(v314);
            }
            else
            {
              *(_QWORD *)v132 = v131;
              v134 = v132 + 8;
            }
            v130[569] = v134;
            break;
          case 0x9E:
            v135 = *(_QWORD **)a1[2];
            v136 = *(_WORD *)(a1[3] + 52) & 0x3FFF;
            v137 = (char *)v135[572];
            v138 = v135[573];
            if ((unint64_t)v137 >= v138)
            {
              v320 = (char *)v135[571];
              v321 = (v137 - v320) >> 3;
              if ((unint64_t)(v321 + 1) >> 61)
                goto LABEL_595;
              v322 = v138 - (_QWORD)v320;
              v323 = (uint64_t)(v138 - (_QWORD)v320) >> 2;
              if (v323 <= v321 + 1)
                v323 = v321 + 1;
              if (v322 >= 0x7FFFFFFFFFFFFFF8)
                v324 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v324 = v323;
              if (v324)
              {
                v325 = (char *)sub_40FC((uint64_t)(v135 + 573), v324);
                v137 = (char *)v135[572];
                v320 = (char *)v135[571];
              }
              else
              {
                v325 = 0;
              }
              v412 = &v325[8 * v321];
              *(_QWORD *)v412 = v136;
              v139 = v412 + 8;
              while (v137 != v320)
              {
                v413 = *((_QWORD *)v137 - 1);
                v137 -= 8;
                *((_QWORD *)v412 - 1) = v413;
                v412 -= 8;
              }
              v135[571] = v412;
              v135[572] = v139;
              v135[573] = &v325[8 * v324];
              if (v320)
                operator delete(v320);
            }
            else
            {
              *(_QWORD *)v137 = v136;
              v139 = v137 + 8;
            }
            v135[572] = v139;
            break;
          case 0x9F:
            v140 = *(_QWORD **)a1[2];
            v141 = *(_WORD *)(a1[3] + 36) & 0x3FFF;
            v142 = (char *)v140[575];
            v143 = v140[576];
            if ((unint64_t)v142 >= v143)
            {
              v326 = (char *)v140[574];
              v327 = (v142 - v326) >> 3;
              if ((unint64_t)(v327 + 1) >> 61)
                goto LABEL_595;
              v328 = v143 - (_QWORD)v326;
              v329 = (uint64_t)(v143 - (_QWORD)v326) >> 2;
              if (v329 <= v327 + 1)
                v329 = v327 + 1;
              if (v328 >= 0x7FFFFFFFFFFFFFF8)
                v330 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v330 = v329;
              if (v330)
              {
                v331 = (char *)sub_40FC((uint64_t)(v140 + 576), v330);
                v142 = (char *)v140[575];
                v326 = (char *)v140[574];
              }
              else
              {
                v331 = 0;
              }
              v414 = &v331[8 * v327];
              *(_QWORD *)v414 = v141;
              v144 = v414 + 8;
              while (v142 != v326)
              {
                v415 = *((_QWORD *)v142 - 1);
                v142 -= 8;
                *((_QWORD *)v414 - 1) = v415;
                v414 -= 8;
              }
              v140[574] = v414;
              v140[575] = v144;
              v140[576] = &v331[8 * v330];
              if (v326)
                operator delete(v326);
            }
            else
            {
              *(_QWORD *)v142 = v141;
              v144 = v142 + 8;
            }
            v140[575] = v144;
            break;
          case 0xA0:
            v145 = *(_QWORD **)a1[2];
            v146 = (unsigned __int16)*(_DWORD *)(a1[3] + 20) >> 1;
            v147 = (char *)v145[578];
            v148 = v145[579];
            if ((unint64_t)v147 >= v148)
            {
              v332 = (char *)v145[577];
              v333 = (v147 - v332) >> 3;
              if ((unint64_t)(v333 + 1) >> 61)
                goto LABEL_595;
              v334 = v148 - (_QWORD)v332;
              v335 = (uint64_t)(v148 - (_QWORD)v332) >> 2;
              if (v335 <= v333 + 1)
                v335 = v333 + 1;
              if (v334 >= 0x7FFFFFFFFFFFFFF8)
                v336 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v336 = v335;
              if (v336)
              {
                v337 = (char *)sub_40FC((uint64_t)(v145 + 579), v336);
                v147 = (char *)v145[578];
                v332 = (char *)v145[577];
              }
              else
              {
                v337 = 0;
              }
              v416 = &v337[8 * v333];
              *(_QWORD *)v416 = v146;
              v149 = v416 + 8;
              while (v147 != v332)
              {
                v417 = *((_QWORD *)v147 - 1);
                v147 -= 8;
                *((_QWORD *)v416 - 1) = v417;
                v416 -= 8;
              }
              v145[577] = v416;
              v145[578] = v149;
              v145[579] = &v337[8 * v336];
              if (v332)
                operator delete(v332);
            }
            else
            {
              *(_QWORD *)v147 = v146;
              v149 = v147 + 8;
            }
            v145[578] = v149;
            break;
          case 0xA1:
            v150 = *(_QWORD **)a1[2];
            v151 = *(_WORD *)(a1[3] + 70) & 0x1FFF;
            v152 = (char *)v150[581];
            v153 = v150[582];
            if ((unint64_t)v152 >= v153)
            {
              v338 = (char *)v150[580];
              v339 = (v152 - v338) >> 3;
              if ((unint64_t)(v339 + 1) >> 61)
                goto LABEL_595;
              v340 = v153 - (_QWORD)v338;
              v341 = (uint64_t)(v153 - (_QWORD)v338) >> 2;
              if (v341 <= v339 + 1)
                v341 = v339 + 1;
              if (v340 >= 0x7FFFFFFFFFFFFFF8)
                v342 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v342 = v341;
              if (v342)
              {
                v343 = (char *)sub_40FC((uint64_t)(v150 + 582), v342);
                v152 = (char *)v150[581];
                v338 = (char *)v150[580];
              }
              else
              {
                v343 = 0;
              }
              v418 = &v343[8 * v339];
              *(_QWORD *)v418 = v151;
              v154 = v418 + 8;
              while (v152 != v338)
              {
                v419 = *((_QWORD *)v152 - 1);
                v152 -= 8;
                *((_QWORD *)v418 - 1) = v419;
                v418 -= 8;
              }
              v150[580] = v418;
              v150[581] = v154;
              v150[582] = &v343[8 * v342];
              if (v338)
                operator delete(v338);
            }
            else
            {
              *(_QWORD *)v152 = v151;
              v154 = v152 + 8;
            }
            v150[581] = v154;
            break;
          case 0xA2:
            v155 = *(_QWORD **)a1[2];
            v156 = *(_WORD *)(a1[3] + 54) & 0x3FFF;
            v157 = (char *)v155[584];
            v158 = v155[585];
            if ((unint64_t)v157 >= v158)
            {
              v344 = (char *)v155[583];
              v345 = (v157 - v344) >> 3;
              if ((unint64_t)(v345 + 1) >> 61)
                goto LABEL_595;
              v346 = v158 - (_QWORD)v344;
              v347 = (uint64_t)(v158 - (_QWORD)v344) >> 2;
              if (v347 <= v345 + 1)
                v347 = v345 + 1;
              if (v346 >= 0x7FFFFFFFFFFFFFF8)
                v348 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v348 = v347;
              if (v348)
              {
                v349 = (char *)sub_40FC((uint64_t)(v155 + 585), v348);
                v157 = (char *)v155[584];
                v344 = (char *)v155[583];
              }
              else
              {
                v349 = 0;
              }
              v420 = &v349[8 * v345];
              *(_QWORD *)v420 = v156;
              v159 = v420 + 8;
              while (v157 != v344)
              {
                v421 = *((_QWORD *)v157 - 1);
                v157 -= 8;
                *((_QWORD *)v420 - 1) = v421;
                v420 -= 8;
              }
              v155[583] = v420;
              v155[584] = v159;
              v155[585] = &v349[8 * v348];
              if (v344)
                operator delete(v344);
            }
            else
            {
              *(_QWORD *)v157 = v156;
              v159 = v157 + 8;
            }
            v155[584] = v159;
            break;
          case 0xA3:
            v160 = *(_QWORD **)a1[2];
            v161 = *(_WORD *)(a1[3] + 38) & 0x3FFF;
            v162 = (char *)v160[587];
            v163 = v160[588];
            if ((unint64_t)v162 >= v163)
            {
              v350 = (char *)v160[586];
              v351 = (v162 - v350) >> 3;
              if ((unint64_t)(v351 + 1) >> 61)
                goto LABEL_595;
              v352 = v163 - (_QWORD)v350;
              v353 = (uint64_t)(v163 - (_QWORD)v350) >> 2;
              if (v353 <= v351 + 1)
                v353 = v351 + 1;
              if (v352 >= 0x7FFFFFFFFFFFFFF8)
                v354 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v354 = v353;
              if (v354)
              {
                v355 = (char *)sub_40FC((uint64_t)(v160 + 588), v354);
                v162 = (char *)v160[587];
                v350 = (char *)v160[586];
              }
              else
              {
                v355 = 0;
              }
              v422 = &v355[8 * v351];
              *(_QWORD *)v422 = v161;
              v164 = v422 + 8;
              while (v162 != v350)
              {
                v423 = *((_QWORD *)v162 - 1);
                v162 -= 8;
                *((_QWORD *)v422 - 1) = v423;
                v422 -= 8;
              }
              v160[586] = v422;
              v160[587] = v164;
              v160[588] = &v355[8 * v354];
              if (v350)
                operator delete(v350);
            }
            else
            {
              *(_QWORD *)v162 = v161;
              v164 = v162 + 8;
            }
            v160[587] = v164;
            break;
          case 0xA4:
            v165 = *(_QWORD **)a1[2];
            v166 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            v167 = (char *)v165[590];
            v168 = v165[591];
            if ((unint64_t)v167 >= v168)
            {
              v356 = (char *)v165[589];
              v357 = (v167 - v356) >> 3;
              if ((unint64_t)(v357 + 1) >> 61)
LABEL_595:
                sub_4074();
              v358 = v168 - (_QWORD)v356;
              v359 = (uint64_t)(v168 - (_QWORD)v356) >> 2;
              if (v359 <= v357 + 1)
                v359 = v357 + 1;
              if (v358 >= 0x7FFFFFFFFFFFFFF8)
                v360 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v360 = v359;
              if (v360)
              {
                v361 = (char *)sub_40FC((uint64_t)(v165 + 591), v360);
                v167 = (char *)v165[590];
                v356 = (char *)v165[589];
              }
              else
              {
                v361 = 0;
              }
              v424 = &v361[8 * v357];
              *(_QWORD *)v424 = v166;
              v169 = v424 + 8;
              while (v167 != v356)
              {
                v425 = *((_QWORD *)v167 - 1);
                v167 -= 8;
                *((_QWORD *)v424 - 1) = v425;
                v424 -= 8;
              }
              v165[589] = v424;
              v165[590] = v169;
              v165[591] = &v361[8 * v360];
              if (v356)
                operator delete(v356);
            }
            else
            {
              *(_QWORD *)v167 = v166;
              v169 = v167 + 8;
            }
            v165[590] = v169;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_E9AD8(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  int *v104;
  int **v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  _QWORD *v110;

  v4 = *a1;
  if (*a2 == 1)
  {
    v105 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v104 = *v105;
    v106 = (char *)v105[1] - (char *)*v105;
    if (v106)
    {
      v107 = v106 >> 2;
      if (v107 <= 1)
        v107 = 1;
      do
      {
        v108 = *v104++;
        switch(v108)
        {
          case 126:
            v109 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            v110 = (_QWORD *)(*(_QWORD *)a1[2] + 3808);
            goto LABEL_140;
          case 127:
            v109 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v110 = (_QWORD *)(*(_QWORD *)a1[2] + 3832);
            goto LABEL_140;
          case 128:
            v109 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v110 = (_QWORD *)(*(_QWORD *)a1[2] + 3856);
            goto LABEL_140;
          case 129:
            v109 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v110 = (_QWORD *)(*(_QWORD *)a1[2] + 3880);
            goto LABEL_140;
          case 130:
            v109 = *(unsigned int *)(a1[3] + 24);
            v110 = (_QWORD *)(*(_QWORD *)a1[2] + 3904);
            goto LABEL_140;
          case 131:
            v109 = *(unsigned __int16 *)(a1[3] + 36);
            v110 = (_QWORD *)(*(_QWORD *)a1[2] + 3928);
            goto LABEL_140;
          case 132:
            v109 = *(unsigned int *)(a1[3] + 20);
            v110 = (_QWORD *)(*(_QWORD *)a1[2] + 3952);
LABEL_140:
            *(_QWORD *)(*v110 - 8) += v109;
            break;
          default:
            break;
        }
        --v107;
      }
      while (v107);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0x7E:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            v12 = (char *)v10[476];
            v13 = v10[477];
            if ((unint64_t)v12 >= v13)
            {
              v48 = (char *)v10[475];
              v49 = (v12 - v48) >> 3;
              if ((unint64_t)(v49 + 1) >> 61)
                goto LABEL_144;
              v50 = v13 - (_QWORD)v48;
              v51 = (uint64_t)(v13 - (_QWORD)v48) >> 2;
              if (v51 <= v49 + 1)
                v51 = v49 + 1;
              if (v50 >= 0x7FFFFFFFFFFFFFF8)
                v52 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v52 = v51;
              if (v52)
              {
                v53 = (char *)sub_40FC((uint64_t)(v10 + 477), v52);
                v12 = (char *)v10[476];
                v48 = (char *)v10[475];
              }
              else
              {
                v53 = 0;
              }
              v90 = &v53[8 * v49];
              *(_QWORD *)v90 = v11;
              v14 = v90 + 8;
              while (v12 != v48)
              {
                v91 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v90 - 1) = v91;
                v90 -= 8;
              }
              v10[475] = v90;
              v10[476] = v14;
              v10[477] = &v53[8 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[476] = v14;
            break;
          case 0x7F:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v17 = (char *)v15[479];
            v18 = v15[480];
            if ((unint64_t)v17 >= v18)
            {
              v54 = (char *)v15[478];
              v55 = (v17 - v54) >> 3;
              if ((unint64_t)(v55 + 1) >> 61)
                goto LABEL_144;
              v56 = v18 - (_QWORD)v54;
              v57 = (uint64_t)(v18 - (_QWORD)v54) >> 2;
              if (v57 <= v55 + 1)
                v57 = v55 + 1;
              if (v56 >= 0x7FFFFFFFFFFFFFF8)
                v58 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v58 = v57;
              if (v58)
              {
                v59 = (char *)sub_40FC((uint64_t)(v15 + 480), v58);
                v17 = (char *)v15[479];
                v54 = (char *)v15[478];
              }
              else
              {
                v59 = 0;
              }
              v92 = &v59[8 * v55];
              *(_QWORD *)v92 = v16;
              v19 = v92 + 8;
              while (v17 != v54)
              {
                v93 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v92 - 1) = v93;
                v92 -= 8;
              }
              v15[478] = v92;
              v15[479] = v19;
              v15[480] = &v59[8 * v58];
              if (v54)
                operator delete(v54);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[479] = v19;
            break;
          case 0x80:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v22 = (char *)v20[482];
            v23 = v20[483];
            if ((unint64_t)v22 >= v23)
            {
              v60 = (char *)v20[481];
              v61 = (v22 - v60) >> 3;
              if ((unint64_t)(v61 + 1) >> 61)
                goto LABEL_144;
              v62 = v23 - (_QWORD)v60;
              v63 = (uint64_t)(v23 - (_QWORD)v60) >> 2;
              if (v63 <= v61 + 1)
                v63 = v61 + 1;
              if (v62 >= 0x7FFFFFFFFFFFFFF8)
                v64 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v64 = v63;
              if (v64)
              {
                v65 = (char *)sub_40FC((uint64_t)(v20 + 483), v64);
                v22 = (char *)v20[482];
                v60 = (char *)v20[481];
              }
              else
              {
                v65 = 0;
              }
              v94 = &v65[8 * v61];
              *(_QWORD *)v94 = v21;
              v24 = v94 + 8;
              while (v22 != v60)
              {
                v95 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v94 - 1) = v95;
                v94 -= 8;
              }
              v20[481] = v94;
              v20[482] = v24;
              v20[483] = &v65[8 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[482] = v24;
            break;
          case 0x81:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v27 = (char *)v25[485];
            v28 = v25[486];
            if ((unint64_t)v27 >= v28)
            {
              v66 = (char *)v25[484];
              v67 = (v27 - v66) >> 3;
              if ((unint64_t)(v67 + 1) >> 61)
                goto LABEL_144;
              v68 = v28 - (_QWORD)v66;
              v69 = (uint64_t)(v28 - (_QWORD)v66) >> 2;
              if (v69 <= v67 + 1)
                v69 = v67 + 1;
              if (v68 >= 0x7FFFFFFFFFFFFFF8)
                v70 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v70 = v69;
              if (v70)
              {
                v71 = (char *)sub_40FC((uint64_t)(v25 + 486), v70);
                v27 = (char *)v25[485];
                v66 = (char *)v25[484];
              }
              else
              {
                v71 = 0;
              }
              v96 = &v71[8 * v67];
              *(_QWORD *)v96 = v26;
              v29 = v96 + 8;
              while (v27 != v66)
              {
                v97 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v96 - 1) = v97;
                v96 -= 8;
              }
              v25[484] = v96;
              v25[485] = v29;
              v25[486] = &v71[8 * v70];
              if (v66)
                operator delete(v66);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[485] = v29;
            break;
          case 0x82:
            v30 = a1[2];
            v31 = *(_QWORD **)v30;
            v32 = *(unsigned int *)(a1[3] + 24);
            v33 = *(char **)(*(_QWORD *)v30 + 3904);
            v34 = *(_QWORD *)(*(_QWORD *)v30 + 3912);
            if ((unint64_t)v33 >= v34)
            {
              v72 = (char *)v31[487];
              v73 = (v33 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61)
                goto LABEL_144;
              v74 = v34 - (_QWORD)v72;
              v75 = (uint64_t)(v34 - (_QWORD)v72) >> 2;
              if (v75 <= v73 + 1)
                v75 = v73 + 1;
              if (v74 >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v75;
              if (v76)
              {
                v77 = (char *)sub_40FC((uint64_t)(v31 + 489), v76);
                v33 = (char *)v31[488];
                v72 = (char *)v31[487];
              }
              else
              {
                v77 = 0;
              }
              v98 = &v77[8 * v73];
              *(_QWORD *)v98 = v32;
              v35 = v98 + 8;
              while (v33 != v72)
              {
                v99 = *((_QWORD *)v33 - 1);
                v33 -= 8;
                *((_QWORD *)v98 - 1) = v99;
                v98 -= 8;
              }
              v31[487] = v98;
              v31[488] = v35;
              v31[489] = &v77[8 * v76];
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(_QWORD *)v33 = v32;
              v35 = v33 + 8;
            }
            v31[488] = v35;
            break;
          case 0x83:
            v36 = a1[2];
            v37 = *(_QWORD **)v36;
            v38 = *(unsigned __int16 *)(a1[3] + 36);
            v39 = *(char **)(*(_QWORD *)v36 + 3928);
            v40 = *(_QWORD *)(*(_QWORD *)v36 + 3936);
            if ((unint64_t)v39 >= v40)
            {
              v78 = (char *)v37[490];
              v79 = (v39 - v78) >> 3;
              if ((unint64_t)(v79 + 1) >> 61)
                goto LABEL_144;
              v80 = v40 - (_QWORD)v78;
              v81 = (uint64_t)(v40 - (_QWORD)v78) >> 2;
              if (v81 <= v79 + 1)
                v81 = v79 + 1;
              if (v80 >= 0x7FFFFFFFFFFFFFF8)
                v82 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v82 = v81;
              if (v82)
              {
                v83 = (char *)sub_40FC((uint64_t)(v37 + 492), v82);
                v39 = (char *)v37[491];
                v78 = (char *)v37[490];
              }
              else
              {
                v83 = 0;
              }
              v100 = &v83[8 * v79];
              *(_QWORD *)v100 = v38;
              v41 = v100 + 8;
              while (v39 != v78)
              {
                v101 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *((_QWORD *)v100 - 1) = v101;
                v100 -= 8;
              }
              v37[490] = v100;
              v37[491] = v41;
              v37[492] = &v83[8 * v82];
              if (v78)
                operator delete(v78);
            }
            else
            {
              *(_QWORD *)v39 = v38;
              v41 = v39 + 8;
            }
            v37[491] = v41;
            break;
          case 0x84:
            v42 = a1[2];
            v43 = *(_QWORD **)v42;
            v44 = *(unsigned int *)(a1[3] + 20);
            v45 = *(char **)(*(_QWORD *)v42 + 3952);
            v46 = *(_QWORD *)(*(_QWORD *)v42 + 3960);
            if ((unint64_t)v45 >= v46)
            {
              v84 = (char *)v43[493];
              v85 = (v45 - v84) >> 3;
              if ((unint64_t)(v85 + 1) >> 61)
LABEL_144:
                sub_4074();
              v86 = v46 - (_QWORD)v84;
              v87 = (uint64_t)(v46 - (_QWORD)v84) >> 2;
              if (v87 <= v85 + 1)
                v87 = v85 + 1;
              if (v86 >= 0x7FFFFFFFFFFFFFF8)
                v88 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v88 = v87;
              if (v88)
              {
                v89 = (char *)sub_40FC((uint64_t)(v43 + 495), v88);
                v45 = (char *)v43[494];
                v84 = (char *)v43[493];
              }
              else
              {
                v89 = 0;
              }
              v102 = &v89[8 * v85];
              *(_QWORD *)v102 = v44;
              v47 = v102 + 8;
              while (v45 != v84)
              {
                v103 = *((_QWORD *)v45 - 1);
                v45 -= 8;
                *((_QWORD *)v102 - 1) = v103;
                v102 -= 8;
              }
              v43[493] = v102;
              v43[494] = v47;
              v43[495] = &v89[8 * v88];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *(_QWORD *)v45 = v44;
              v47 = v45 + 8;
            }
            v43[494] = v47;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_EA1FC(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  int *v154;
  int **v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  uint64_t v159;
  _QWORD *v160;

  v4 = *a1;
  if (*a2 == 1)
  {
    v155 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v154 = *v155;
    v156 = (char *)v155[1] - (char *)*v155;
    if (v156)
    {
      v157 = v156 >> 2;
      if (v157 <= 1)
        v157 = 1;
      do
      {
        v158 = *v154++;
        switch(v158)
        {
          case 's':
            v159 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v160 = (_QWORD *)(*(_QWORD *)a1[2] + 3544);
            goto LABEL_212;
          case 't':
            v159 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v160 = (_QWORD *)(*(_QWORD *)a1[2] + 3568);
            goto LABEL_212;
          case 'u':
            v159 = *(unsigned __int8 *)(a1[3] + 46);
            v160 = (_QWORD *)(*(_QWORD *)a1[2] + 3592);
            goto LABEL_212;
          case 'v':
            v159 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            v160 = (_QWORD *)(*(_QWORD *)a1[2] + 3616);
            goto LABEL_212;
          case 'w':
            v159 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            v160 = (_QWORD *)(*(_QWORD *)a1[2] + 3640);
            goto LABEL_212;
          case 'x':
            v159 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            v160 = (_QWORD *)(*(_QWORD *)a1[2] + 3664);
            goto LABEL_212;
          case 'y':
            v159 = *(_WORD *)(a1[3] + 44) & 0x1FFF;
            v160 = (_QWORD *)(*(_QWORD *)a1[2] + 3688);
            goto LABEL_212;
          case 'z':
            v159 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v160 = (_QWORD *)(*(_QWORD *)a1[2] + 3712);
            goto LABEL_212;
          case '{':
            v159 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            v160 = (_QWORD *)(*(_QWORD *)a1[2] + 3736);
            goto LABEL_212;
          case '|':
            v159 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            v160 = (_QWORD *)(*(_QWORD *)a1[2] + 3760);
            goto LABEL_212;
          case '}':
            v159 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            v160 = (_QWORD *)(*(_QWORD *)a1[2] + 3784);
LABEL_212:
            *(_QWORD *)(*v160 - 8) += v159;
            break;
          default:
            break;
        }
        --v157;
      }
      while (v157);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 's':
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v12 = (char *)v10[443];
            v13 = v10[444];
            if ((unint64_t)v12 >= v13)
            {
              v66 = (char *)v10[442];
              v67 = (v12 - v66) >> 3;
              if ((unint64_t)(v67 + 1) >> 61)
                goto LABEL_216;
              v68 = v13 - (_QWORD)v66;
              v69 = (uint64_t)(v13 - (_QWORD)v66) >> 2;
              if (v69 <= v67 + 1)
                v69 = v67 + 1;
              if (v68 >= 0x7FFFFFFFFFFFFFF8)
                v70 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v70 = v69;
              if (v70)
              {
                v71 = (char *)sub_40FC((uint64_t)(v10 + 444), v70);
                v12 = (char *)v10[443];
                v66 = (char *)v10[442];
              }
              else
              {
                v71 = 0;
              }
              v132 = &v71[8 * v67];
              *(_QWORD *)v132 = v11;
              v14 = v132 + 8;
              while (v12 != v66)
              {
                v133 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v132 - 1) = v133;
                v132 -= 8;
              }
              v10[442] = v132;
              v10[443] = v14;
              v10[444] = &v71[8 * v70];
              if (v66)
                operator delete(v66);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[443] = v14;
            break;
          case 't':
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v17 = (char *)v15[446];
            v18 = v15[447];
            if ((unint64_t)v17 >= v18)
            {
              v72 = (char *)v15[445];
              v73 = (v17 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61)
                goto LABEL_216;
              v74 = v18 - (_QWORD)v72;
              v75 = (uint64_t)(v18 - (_QWORD)v72) >> 2;
              if (v75 <= v73 + 1)
                v75 = v73 + 1;
              if (v74 >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v75;
              if (v76)
              {
                v77 = (char *)sub_40FC((uint64_t)(v15 + 447), v76);
                v17 = (char *)v15[446];
                v72 = (char *)v15[445];
              }
              else
              {
                v77 = 0;
              }
              v134 = &v77[8 * v73];
              *(_QWORD *)v134 = v16;
              v19 = v134 + 8;
              while (v17 != v72)
              {
                v135 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v134 - 1) = v135;
                v134 -= 8;
              }
              v15[445] = v134;
              v15[446] = v19;
              v15[447] = &v77[8 * v76];
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[446] = v19;
            break;
          case 'u':
            v20 = a1[2];
            v21 = *(_QWORD **)v20;
            v22 = *(unsigned __int8 *)(a1[3] + 46);
            v23 = *(char **)(*(_QWORD *)v20 + 3592);
            v24 = *(_QWORD *)(*(_QWORD *)v20 + 3600);
            if ((unint64_t)v23 >= v24)
            {
              v78 = (char *)v21[448];
              v79 = (v23 - v78) >> 3;
              if ((unint64_t)(v79 + 1) >> 61)
                goto LABEL_216;
              v80 = v24 - (_QWORD)v78;
              v81 = (uint64_t)(v24 - (_QWORD)v78) >> 2;
              if (v81 <= v79 + 1)
                v81 = v79 + 1;
              if (v80 >= 0x7FFFFFFFFFFFFFF8)
                v82 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v82 = v81;
              if (v82)
              {
                v83 = (char *)sub_40FC((uint64_t)(v21 + 450), v82);
                v23 = (char *)v21[449];
                v78 = (char *)v21[448];
              }
              else
              {
                v83 = 0;
              }
              v136 = &v83[8 * v79];
              *(_QWORD *)v136 = v22;
              v25 = v136 + 8;
              while (v23 != v78)
              {
                v137 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *((_QWORD *)v136 - 1) = v137;
                v136 -= 8;
              }
              v21[448] = v136;
              v21[449] = v25;
              v21[450] = &v83[8 * v82];
              if (v78)
                operator delete(v78);
            }
            else
            {
              *(_QWORD *)v23 = v22;
              v25 = v23 + 8;
            }
            v21[449] = v25;
            break;
          case 'v':
            v26 = *(_QWORD **)a1[2];
            v27 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            v28 = (uint64_t *)v26[452];
            v29 = v26[453];
            if ((unint64_t)v28 >= v29)
            {
              v84 = (uint64_t *)v26[451];
              v85 = v28 - v84;
              if ((unint64_t)(v85 + 1) >> 61)
                goto LABEL_216;
              v86 = v29 - (_QWORD)v84;
              v87 = (uint64_t)(v29 - (_QWORD)v84) >> 2;
              if (v87 <= v85 + 1)
                v87 = v85 + 1;
              if (v86 >= 0x7FFFFFFFFFFFFFF8)
                v88 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v88 = v87;
              if (v88)
              {
                v89 = (char *)sub_40FC((uint64_t)(v26 + 453), v88);
                v28 = (uint64_t *)v26[452];
                v84 = (uint64_t *)v26[451];
              }
              else
              {
                v89 = 0;
              }
              v138 = (uint64_t *)&v89[8 * v85];
              *v138 = v27;
              v30 = v138 + 1;
              while (v28 != v84)
              {
                v139 = *--v28;
                *--v138 = v139;
              }
              v26[451] = v138;
              v26[452] = v30;
              v26[453] = &v89[8 * v88];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *v28 = v27;
              v30 = v28 + 1;
            }
            v26[452] = v30;
            break;
          case 'w':
            v31 = *(_QWORD **)a1[2];
            v32 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            v33 = (uint64_t *)v31[455];
            v34 = v31[456];
            if ((unint64_t)v33 >= v34)
            {
              v90 = (uint64_t *)v31[454];
              v91 = v33 - v90;
              if ((unint64_t)(v91 + 1) >> 61)
                goto LABEL_216;
              v92 = v34 - (_QWORD)v90;
              v93 = (uint64_t)(v34 - (_QWORD)v90) >> 2;
              if (v93 <= v91 + 1)
                v93 = v91 + 1;
              if (v92 >= 0x7FFFFFFFFFFFFFF8)
                v94 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v94 = v93;
              if (v94)
              {
                v95 = (char *)sub_40FC((uint64_t)(v31 + 456), v94);
                v33 = (uint64_t *)v31[455];
                v90 = (uint64_t *)v31[454];
              }
              else
              {
                v95 = 0;
              }
              v140 = (uint64_t *)&v95[8 * v91];
              *v140 = v32;
              v35 = v140 + 1;
              while (v33 != v90)
              {
                v141 = *--v33;
                *--v140 = v141;
              }
              v31[454] = v140;
              v31[455] = v35;
              v31[456] = &v95[8 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *v33 = v32;
              v35 = v33 + 1;
            }
            v31[455] = v35;
            break;
          case 'x':
            v36 = *(_QWORD **)a1[2];
            v37 = *(_WORD *)(a1[3] + 42) & 0x3FFF;
            v38 = (char *)v36[458];
            v39 = v36[459];
            if ((unint64_t)v38 >= v39)
            {
              v96 = (char *)v36[457];
              v97 = (v38 - v96) >> 3;
              if ((unint64_t)(v97 + 1) >> 61)
                goto LABEL_216;
              v98 = v39 - (_QWORD)v96;
              v99 = (uint64_t)(v39 - (_QWORD)v96) >> 2;
              if (v99 <= v97 + 1)
                v99 = v97 + 1;
              if (v98 >= 0x7FFFFFFFFFFFFFF8)
                v100 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v100 = v99;
              if (v100)
              {
                v101 = (char *)sub_40FC((uint64_t)(v36 + 459), v100);
                v38 = (char *)v36[458];
                v96 = (char *)v36[457];
              }
              else
              {
                v101 = 0;
              }
              v142 = &v101[8 * v97];
              *(_QWORD *)v142 = v37;
              v40 = v142 + 8;
              while (v38 != v96)
              {
                v143 = *((_QWORD *)v38 - 1);
                v38 -= 8;
                *((_QWORD *)v142 - 1) = v143;
                v142 -= 8;
              }
              v36[457] = v142;
              v36[458] = v40;
              v36[459] = &v101[8 * v100];
              if (v96)
                operator delete(v96);
            }
            else
            {
              *(_QWORD *)v38 = v37;
              v40 = v38 + 8;
            }
            v36[458] = v40;
            break;
          case 'y':
            v41 = *(_QWORD **)a1[2];
            v42 = *(_WORD *)(a1[3] + 44) & 0x1FFF;
            v43 = (char *)v41[461];
            v44 = v41[462];
            if ((unint64_t)v43 >= v44)
            {
              v102 = (char *)v41[460];
              v103 = (v43 - v102) >> 3;
              if ((unint64_t)(v103 + 1) >> 61)
                goto LABEL_216;
              v104 = v44 - (_QWORD)v102;
              v105 = (uint64_t)(v44 - (_QWORD)v102) >> 2;
              if (v105 <= v103 + 1)
                v105 = v103 + 1;
              if (v104 >= 0x7FFFFFFFFFFFFFF8)
                v106 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v106 = v105;
              if (v106)
              {
                v107 = (char *)sub_40FC((uint64_t)(v41 + 462), v106);
                v43 = (char *)v41[461];
                v102 = (char *)v41[460];
              }
              else
              {
                v107 = 0;
              }
              v144 = &v107[8 * v103];
              *(_QWORD *)v144 = v42;
              v45 = v144 + 8;
              while (v43 != v102)
              {
                v145 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v144 - 1) = v145;
                v144 -= 8;
              }
              v41[460] = v144;
              v41[461] = v45;
              v41[462] = &v107[8 * v106];
              if (v102)
                operator delete(v102);
            }
            else
            {
              *(_QWORD *)v43 = v42;
              v45 = v43 + 8;
            }
            v41[461] = v45;
            break;
          case 'z':
            v46 = *(_QWORD **)a1[2];
            v47 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v48 = (char *)v46[464];
            v49 = v46[465];
            if ((unint64_t)v48 >= v49)
            {
              v108 = (char *)v46[463];
              v109 = (v48 - v108) >> 3;
              if ((unint64_t)(v109 + 1) >> 61)
                goto LABEL_216;
              v110 = v49 - (_QWORD)v108;
              v111 = (uint64_t)(v49 - (_QWORD)v108) >> 2;
              if (v111 <= v109 + 1)
                v111 = v109 + 1;
              if (v110 >= 0x7FFFFFFFFFFFFFF8)
                v112 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v112 = v111;
              if (v112)
              {
                v113 = (char *)sub_40FC((uint64_t)(v46 + 465), v112);
                v48 = (char *)v46[464];
                v108 = (char *)v46[463];
              }
              else
              {
                v113 = 0;
              }
              v146 = &v113[8 * v109];
              *(_QWORD *)v146 = v47;
              v50 = v146 + 8;
              while (v48 != v108)
              {
                v147 = *((_QWORD *)v48 - 1);
                v48 -= 8;
                *((_QWORD *)v146 - 1) = v147;
                v146 -= 8;
              }
              v46[463] = v146;
              v46[464] = v50;
              v46[465] = &v113[8 * v112];
              if (v108)
                operator delete(v108);
            }
            else
            {
              *(_QWORD *)v48 = v47;
              v50 = v48 + 8;
            }
            v46[464] = v50;
            break;
          case '{':
            v51 = *(_QWORD **)a1[2];
            v52 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            v53 = (char *)v51[467];
            v54 = v51[468];
            if ((unint64_t)v53 >= v54)
            {
              v114 = (char *)v51[466];
              v115 = (v53 - v114) >> 3;
              if ((unint64_t)(v115 + 1) >> 61)
                goto LABEL_216;
              v116 = v54 - (_QWORD)v114;
              v117 = (uint64_t)(v54 - (_QWORD)v114) >> 2;
              if (v117 <= v115 + 1)
                v117 = v115 + 1;
              if (v116 >= 0x7FFFFFFFFFFFFFF8)
                v118 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v118 = v117;
              if (v118)
              {
                v119 = (char *)sub_40FC((uint64_t)(v51 + 468), v118);
                v53 = (char *)v51[467];
                v114 = (char *)v51[466];
              }
              else
              {
                v119 = 0;
              }
              v148 = &v119[8 * v115];
              *(_QWORD *)v148 = v52;
              v55 = v148 + 8;
              while (v53 != v114)
              {
                v149 = *((_QWORD *)v53 - 1);
                v53 -= 8;
                *((_QWORD *)v148 - 1) = v149;
                v148 -= 8;
              }
              v51[466] = v148;
              v51[467] = v55;
              v51[468] = &v119[8 * v118];
              if (v114)
                operator delete(v114);
            }
            else
            {
              *(_QWORD *)v53 = v52;
              v55 = v53 + 8;
            }
            v51[467] = v55;
            break;
          case '|':
            v56 = *(_QWORD **)a1[2];
            v57 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            v58 = (uint64_t *)v56[470];
            v59 = v56[471];
            if ((unint64_t)v58 >= v59)
            {
              v120 = (uint64_t *)v56[469];
              v121 = v58 - v120;
              if ((unint64_t)(v121 + 1) >> 61)
                goto LABEL_216;
              v122 = v59 - (_QWORD)v120;
              v123 = (uint64_t)(v59 - (_QWORD)v120) >> 2;
              if (v123 <= v121 + 1)
                v123 = v121 + 1;
              if (v122 >= 0x7FFFFFFFFFFFFFF8)
                v124 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v124 = v123;
              if (v124)
              {
                v125 = (char *)sub_40FC((uint64_t)(v56 + 471), v124);
                v58 = (uint64_t *)v56[470];
                v120 = (uint64_t *)v56[469];
              }
              else
              {
                v125 = 0;
              }
              v150 = (uint64_t *)&v125[8 * v121];
              *v150 = v57;
              v60 = v150 + 1;
              while (v58 != v120)
              {
                v151 = *--v58;
                *--v150 = v151;
              }
              v56[469] = v150;
              v56[470] = v60;
              v56[471] = &v125[8 * v124];
              if (v120)
                operator delete(v120);
            }
            else
            {
              *v58 = v57;
              v60 = v58 + 1;
            }
            v56[470] = v60;
            break;
          case '}':
            v61 = *(_QWORD **)a1[2];
            v62 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            v63 = (char *)v61[473];
            v64 = v61[474];
            if ((unint64_t)v63 >= v64)
            {
              v126 = (char *)v61[472];
              v127 = (v63 - v126) >> 3;
              if ((unint64_t)(v127 + 1) >> 61)
LABEL_216:
                sub_4074();
              v128 = v64 - (_QWORD)v126;
              v129 = (uint64_t)(v64 - (_QWORD)v126) >> 2;
              if (v129 <= v127 + 1)
                v129 = v127 + 1;
              if (v128 >= 0x7FFFFFFFFFFFFFF8)
                v130 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v130 = v129;
              if (v130)
              {
                v131 = (char *)sub_40FC((uint64_t)(v61 + 474), v130);
                v63 = (char *)v61[473];
                v126 = (char *)v61[472];
              }
              else
              {
                v131 = 0;
              }
              v152 = &v131[8 * v127];
              *(_QWORD *)v152 = v62;
              v65 = v152 + 8;
              while (v63 != v126)
              {
                v153 = *((_QWORD *)v63 - 1);
                v63 -= 8;
                *((_QWORD *)v152 - 1) = v153;
                v152 -= 8;
              }
              v61[472] = v152;
              v61[473] = v65;
              v61[474] = &v131[8 * v130];
              if (v126)
                operator delete(v126);
            }
            else
            {
              *(_QWORD *)v63 = v62;
              v65 = v63 + 8;
            }
            v61[473] = v65;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_EACA0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  unint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  int *v181;
  int **v182;
  uint64_t v183;
  unint64_t v184;
  int v185;
  unint64_t v186;
  _QWORD *v187;

  v4 = *a1;
  if (*a2 == 1)
  {
    v182 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v181 = *v182;
    v183 = (char *)v182[1] - (char *)*v182;
    if (v183)
    {
      v184 = v183 >> 2;
      if (v184 <= 1)
        v184 = 1;
      do
      {
        v185 = *v181++;
        switch(v185)
        {
          case 198:
            v186 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            v187 = (_QWORD *)(*(_QWORD *)a1[2] + 5536);
            goto LABEL_248;
          case 199:
            v186 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            v187 = (_QWORD *)(*(_QWORD *)a1[2] + 5560);
            goto LABEL_248;
          case 200:
            v186 = (unint64_t)*(unsigned int *)(a1[3] + 56) >> 17;
            v187 = (_QWORD *)(*(_QWORD *)a1[2] + 5584);
            goto LABEL_248;
          case 201:
            v186 = *(_DWORD *)(a1[3] + 36) & 0x1FFFF;
            v187 = (_QWORD *)(*(_QWORD *)a1[2] + 5608);
            goto LABEL_248;
          case 202:
            v186 = *(_DWORD *)(a1[3] + 32) & 0x3FFFF;
            v187 = (_QWORD *)(*(_QWORD *)a1[2] + 5632);
            goto LABEL_248;
          case 203:
            v186 = *(_DWORD *)(a1[3] + 28) & 0x3FFFF;
            v187 = (_QWORD *)(*(_QWORD *)a1[2] + 5656);
            goto LABEL_248;
          case 204:
            v186 = *(unsigned __int16 *)(a1[3] + 42);
            v187 = (_QWORD *)(*(_QWORD *)a1[2] + 5680);
            goto LABEL_248;
          case 205:
            v186 = *(unsigned __int16 *)(a1[3] + 40);
            v187 = (_QWORD *)(*(_QWORD *)a1[2] + 5704);
            goto LABEL_248;
          case 206:
            v186 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v187 = (_QWORD *)(*(_QWORD *)a1[2] + 5728);
            goto LABEL_248;
          case 207:
            v186 = *(_DWORD *)(a1[3] + 44) & 0x1FFFF;
            v187 = (_QWORD *)(*(_QWORD *)a1[2] + 5752);
            goto LABEL_248;
          case 208:
            v186 = *(_DWORD *)(a1[3] + 56) & 0x1FFFF;
            v187 = (_QWORD *)(*(_QWORD *)a1[2] + 5776);
            goto LABEL_248;
          case 209:
            v186 = *(_DWORD *)(a1[3] + 52) & 0x1FFFF;
            v187 = (_QWORD *)(*(_QWORD *)a1[2] + 5800);
            goto LABEL_248;
          case 210:
            v186 = *(_DWORD *)(a1[3] + 48) & 0x1FFFF;
            v187 = (_QWORD *)(*(_QWORD *)a1[2] + 5824);
LABEL_248:
            *(_QWORD *)(*v187 - 8) += v186;
            break;
          default:
            break;
        }
        --v184;
      }
      while (v184);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xC6:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            v12 = (char *)v10[692];
            v13 = v10[693];
            if ((unint64_t)v12 >= v13)
            {
              v77 = (char *)v10[691];
              v78 = (v12 - v77) >> 3;
              if ((unint64_t)(v78 + 1) >> 61)
                goto LABEL_252;
              v79 = v13 - (_QWORD)v77;
              v80 = (uint64_t)(v13 - (_QWORD)v77) >> 2;
              if (v80 <= v78 + 1)
                v80 = v78 + 1;
              if (v79 >= 0x7FFFFFFFFFFFFFF8)
                v81 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v81 = v80;
              if (v81)
              {
                v82 = (char *)sub_40FC((uint64_t)(v10 + 693), v81);
                v12 = (char *)v10[692];
                v77 = (char *)v10[691];
              }
              else
              {
                v82 = 0;
              }
              v155 = &v82[8 * v78];
              *(_QWORD *)v155 = v11;
              v14 = v155 + 8;
              while (v12 != v77)
              {
                v156 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v155 - 1) = v156;
                v155 -= 8;
              }
              v10[691] = v155;
              v10[692] = v14;
              v10[693] = &v82[8 * v81];
              if (v77)
                operator delete(v77);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[692] = v14;
            break;
          case 0xC7:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            v17 = (char *)v15[695];
            v18 = v15[696];
            if ((unint64_t)v17 >= v18)
            {
              v83 = (char *)v15[694];
              v84 = (v17 - v83) >> 3;
              if ((unint64_t)(v84 + 1) >> 61)
                goto LABEL_252;
              v85 = v18 - (_QWORD)v83;
              v86 = (uint64_t)(v18 - (_QWORD)v83) >> 2;
              if (v86 <= v84 + 1)
                v86 = v84 + 1;
              if (v85 >= 0x7FFFFFFFFFFFFFF8)
                v87 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v87 = v86;
              if (v87)
              {
                v88 = (char *)sub_40FC((uint64_t)(v15 + 696), v87);
                v17 = (char *)v15[695];
                v83 = (char *)v15[694];
              }
              else
              {
                v88 = 0;
              }
              v157 = &v88[8 * v84];
              *(_QWORD *)v157 = v16;
              v19 = v157 + 8;
              while (v17 != v83)
              {
                v158 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v157 - 1) = v158;
                v157 -= 8;
              }
              v15[694] = v157;
              v15[695] = v19;
              v15[696] = &v88[8 * v87];
              if (v83)
                operator delete(v83);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[695] = v19;
            break;
          case 0xC8:
            v20 = *(_QWORD **)a1[2];
            v21 = (unint64_t)*(unsigned int *)(a1[3] + 56) >> 17;
            v22 = (unint64_t *)v20[698];
            v23 = v20[699];
            if ((unint64_t)v22 >= v23)
            {
              v89 = (unint64_t *)v20[697];
              v90 = v22 - v89;
              if ((unint64_t)(v90 + 1) >> 61)
                goto LABEL_252;
              v91 = v23 - (_QWORD)v89;
              v92 = (uint64_t)(v23 - (_QWORD)v89) >> 2;
              if (v92 <= v90 + 1)
                v92 = v90 + 1;
              if (v91 >= 0x7FFFFFFFFFFFFFF8)
                v93 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v93 = v92;
              if (v93)
              {
                v94 = (char *)sub_40FC((uint64_t)(v20 + 699), v93);
                v22 = (unint64_t *)v20[698];
                v89 = (unint64_t *)v20[697];
              }
              else
              {
                v94 = 0;
              }
              v159 = (unint64_t *)&v94[8 * v90];
              *v159 = v21;
              v24 = v159 + 1;
              while (v22 != v89)
              {
                v160 = *--v22;
                *--v159 = v160;
              }
              v20[697] = v159;
              v20[698] = v24;
              v20[699] = &v94[8 * v93];
              if (v89)
                operator delete(v89);
            }
            else
            {
              *v22 = v21;
              v24 = v22 + 1;
            }
            v20[698] = v24;
            break;
          case 0xC9:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFLL;
            v27 = (uint64_t *)v25[701];
            v28 = v25[702];
            if ((unint64_t)v27 >= v28)
            {
              v95 = (uint64_t *)v25[700];
              v96 = v27 - v95;
              if ((unint64_t)(v96 + 1) >> 61)
                goto LABEL_252;
              v97 = v28 - (_QWORD)v95;
              v98 = (uint64_t)(v28 - (_QWORD)v95) >> 2;
              if (v98 <= v96 + 1)
                v98 = v96 + 1;
              if (v97 >= 0x7FFFFFFFFFFFFFF8)
                v99 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v99 = v98;
              if (v99)
              {
                v100 = (char *)sub_40FC((uint64_t)(v25 + 702), v99);
                v27 = (uint64_t *)v25[701];
                v95 = (uint64_t *)v25[700];
              }
              else
              {
                v100 = 0;
              }
              v161 = (uint64_t *)&v100[8 * v96];
              *v161 = v26;
              v29 = v161 + 1;
              while (v27 != v95)
              {
                v162 = *--v27;
                *--v161 = v162;
              }
              v25[700] = v161;
              v25[701] = v29;
              v25[702] = &v100[8 * v99];
              if (v95)
                operator delete(v95);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[701] = v29;
            break;
          case 0xCA:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 32) & 0x3FFFFLL;
            v32 = (uint64_t *)v30[704];
            v33 = v30[705];
            if ((unint64_t)v32 >= v33)
            {
              v101 = (uint64_t *)v30[703];
              v102 = v32 - v101;
              if ((unint64_t)(v102 + 1) >> 61)
                goto LABEL_252;
              v103 = v33 - (_QWORD)v101;
              v104 = (uint64_t)(v33 - (_QWORD)v101) >> 2;
              if (v104 <= v102 + 1)
                v104 = v102 + 1;
              if (v103 >= 0x7FFFFFFFFFFFFFF8)
                v105 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v105 = v104;
              if (v105)
              {
                v106 = (char *)sub_40FC((uint64_t)(v30 + 705), v105);
                v32 = (uint64_t *)v30[704];
                v101 = (uint64_t *)v30[703];
              }
              else
              {
                v106 = 0;
              }
              v163 = (uint64_t *)&v106[8 * v102];
              *v163 = v31;
              v34 = v163 + 1;
              while (v32 != v101)
              {
                v164 = *--v32;
                *--v163 = v164;
              }
              v30[703] = v163;
              v30[704] = v34;
              v30[705] = &v106[8 * v105];
              if (v101)
                operator delete(v101);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[704] = v34;
            break;
          case 0xCB:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFLL;
            v37 = (uint64_t *)v35[707];
            v38 = v35[708];
            if ((unint64_t)v37 >= v38)
            {
              v107 = (uint64_t *)v35[706];
              v108 = v37 - v107;
              if ((unint64_t)(v108 + 1) >> 61)
                goto LABEL_252;
              v109 = v38 - (_QWORD)v107;
              v110 = (uint64_t)(v38 - (_QWORD)v107) >> 2;
              if (v110 <= v108 + 1)
                v110 = v108 + 1;
              if (v109 >= 0x7FFFFFFFFFFFFFF8)
                v111 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v111 = v110;
              if (v111)
              {
                v112 = (char *)sub_40FC((uint64_t)(v35 + 708), v111);
                v37 = (uint64_t *)v35[707];
                v107 = (uint64_t *)v35[706];
              }
              else
              {
                v112 = 0;
              }
              v165 = (uint64_t *)&v112[8 * v108];
              *v165 = v36;
              v39 = v165 + 1;
              while (v37 != v107)
              {
                v166 = *--v37;
                *--v165 = v166;
              }
              v35[706] = v165;
              v35[707] = v39;
              v35[708] = &v112[8 * v111];
              if (v107)
                operator delete(v107);
            }
            else
            {
              *v37 = v36;
              v39 = v37 + 1;
            }
            v35[707] = v39;
            break;
          case 0xCC:
            v40 = a1[2];
            v41 = *(_QWORD **)v40;
            v42 = *(unsigned __int16 *)(a1[3] + 42);
            v43 = *(char **)(*(_QWORD *)v40 + 5680);
            v44 = *(_QWORD *)(*(_QWORD *)v40 + 5688);
            if ((unint64_t)v43 >= v44)
            {
              v113 = (char *)v41[709];
              v114 = (v43 - v113) >> 3;
              if ((unint64_t)(v114 + 1) >> 61)
                goto LABEL_252;
              v115 = v44 - (_QWORD)v113;
              v116 = (uint64_t)(v44 - (_QWORD)v113) >> 2;
              if (v116 <= v114 + 1)
                v116 = v114 + 1;
              if (v115 >= 0x7FFFFFFFFFFFFFF8)
                v117 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v117 = v116;
              if (v117)
              {
                v118 = (char *)sub_40FC((uint64_t)(v41 + 711), v117);
                v43 = (char *)v41[710];
                v113 = (char *)v41[709];
              }
              else
              {
                v118 = 0;
              }
              v167 = &v118[8 * v114];
              *(_QWORD *)v167 = v42;
              v45 = v167 + 8;
              while (v43 != v113)
              {
                v168 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v167 - 1) = v168;
                v167 -= 8;
              }
              v41[709] = v167;
              v41[710] = v45;
              v41[711] = &v118[8 * v117];
              if (v113)
                operator delete(v113);
            }
            else
            {
              *(_QWORD *)v43 = v42;
              v45 = v43 + 8;
            }
            v41[710] = v45;
            break;
          case 0xCD:
            v46 = a1[2];
            v47 = *(_QWORD **)v46;
            v48 = *(unsigned __int16 *)(a1[3] + 40);
            v49 = *(char **)(*(_QWORD *)v46 + 5704);
            v50 = *(_QWORD *)(*(_QWORD *)v46 + 5712);
            if ((unint64_t)v49 >= v50)
            {
              v119 = (char *)v47[712];
              v120 = (v49 - v119) >> 3;
              if ((unint64_t)(v120 + 1) >> 61)
                goto LABEL_252;
              v121 = v50 - (_QWORD)v119;
              v122 = (uint64_t)(v50 - (_QWORD)v119) >> 2;
              if (v122 <= v120 + 1)
                v122 = v120 + 1;
              if (v121 >= 0x7FFFFFFFFFFFFFF8)
                v123 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v123 = v122;
              if (v123)
              {
                v124 = (char *)sub_40FC((uint64_t)(v47 + 714), v123);
                v49 = (char *)v47[713];
                v119 = (char *)v47[712];
              }
              else
              {
                v124 = 0;
              }
              v169 = &v124[8 * v120];
              *(_QWORD *)v169 = v48;
              v51 = v169 + 8;
              while (v49 != v119)
              {
                v170 = *((_QWORD *)v49 - 1);
                v49 -= 8;
                *((_QWORD *)v169 - 1) = v170;
                v169 -= 8;
              }
              v47[712] = v169;
              v47[713] = v51;
              v47[714] = &v124[8 * v123];
              if (v119)
                operator delete(v119);
            }
            else
            {
              *(_QWORD *)v49 = v48;
              v51 = v49 + 8;
            }
            v47[713] = v51;
            break;
          case 0xCE:
            v52 = *(_QWORD **)a1[2];
            v53 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v54 = (char *)v52[716];
            v55 = v52[717];
            if ((unint64_t)v54 >= v55)
            {
              v125 = (char *)v52[715];
              v126 = (v54 - v125) >> 3;
              if ((unint64_t)(v126 + 1) >> 61)
                goto LABEL_252;
              v127 = v55 - (_QWORD)v125;
              v128 = (uint64_t)(v55 - (_QWORD)v125) >> 2;
              if (v128 <= v126 + 1)
                v128 = v126 + 1;
              if (v127 >= 0x7FFFFFFFFFFFFFF8)
                v129 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v129 = v128;
              if (v129)
              {
                v130 = (char *)sub_40FC((uint64_t)(v52 + 717), v129);
                v54 = (char *)v52[716];
                v125 = (char *)v52[715];
              }
              else
              {
                v130 = 0;
              }
              v171 = &v130[8 * v126];
              *(_QWORD *)v171 = v53;
              v56 = v171 + 8;
              while (v54 != v125)
              {
                v172 = *((_QWORD *)v54 - 1);
                v54 -= 8;
                *((_QWORD *)v171 - 1) = v172;
                v171 -= 8;
              }
              v52[715] = v171;
              v52[716] = v56;
              v52[717] = &v130[8 * v129];
              if (v125)
                operator delete(v125);
            }
            else
            {
              *(_QWORD *)v54 = v53;
              v56 = v54 + 8;
            }
            v52[716] = v56;
            break;
          case 0xCF:
            v57 = *(_QWORD **)a1[2];
            v58 = *(_DWORD *)(a1[3] + 44) & 0x1FFFFLL;
            v59 = (uint64_t *)v57[719];
            v60 = v57[720];
            if ((unint64_t)v59 >= v60)
            {
              v131 = (uint64_t *)v57[718];
              v132 = v59 - v131;
              if ((unint64_t)(v132 + 1) >> 61)
                goto LABEL_252;
              v133 = v60 - (_QWORD)v131;
              v134 = (uint64_t)(v60 - (_QWORD)v131) >> 2;
              if (v134 <= v132 + 1)
                v134 = v132 + 1;
              if (v133 >= 0x7FFFFFFFFFFFFFF8)
                v135 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v135 = v134;
              if (v135)
              {
                v136 = (char *)sub_40FC((uint64_t)(v57 + 720), v135);
                v59 = (uint64_t *)v57[719];
                v131 = (uint64_t *)v57[718];
              }
              else
              {
                v136 = 0;
              }
              v173 = (uint64_t *)&v136[8 * v132];
              *v173 = v58;
              v61 = v173 + 1;
              while (v59 != v131)
              {
                v174 = *--v59;
                *--v173 = v174;
              }
              v57[718] = v173;
              v57[719] = v61;
              v57[720] = &v136[8 * v135];
              if (v131)
                operator delete(v131);
            }
            else
            {
              *v59 = v58;
              v61 = v59 + 1;
            }
            v57[719] = v61;
            break;
          case 0xD0:
            v62 = *(_QWORD **)a1[2];
            v63 = *(_DWORD *)(a1[3] + 56) & 0x1FFFFLL;
            v64 = (uint64_t *)v62[722];
            v65 = v62[723];
            if ((unint64_t)v64 >= v65)
            {
              v137 = (uint64_t *)v62[721];
              v138 = v64 - v137;
              if ((unint64_t)(v138 + 1) >> 61)
                goto LABEL_252;
              v139 = v65 - (_QWORD)v137;
              v140 = (uint64_t)(v65 - (_QWORD)v137) >> 2;
              if (v140 <= v138 + 1)
                v140 = v138 + 1;
              if (v139 >= 0x7FFFFFFFFFFFFFF8)
                v141 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v141 = v140;
              if (v141)
              {
                v142 = (char *)sub_40FC((uint64_t)(v62 + 723), v141);
                v64 = (uint64_t *)v62[722];
                v137 = (uint64_t *)v62[721];
              }
              else
              {
                v142 = 0;
              }
              v175 = (uint64_t *)&v142[8 * v138];
              *v175 = v63;
              v66 = v175 + 1;
              while (v64 != v137)
              {
                v176 = *--v64;
                *--v175 = v176;
              }
              v62[721] = v175;
              v62[722] = v66;
              v62[723] = &v142[8 * v141];
              if (v137)
                operator delete(v137);
            }
            else
            {
              *v64 = v63;
              v66 = v64 + 1;
            }
            v62[722] = v66;
            break;
          case 0xD1:
            v67 = *(_QWORD **)a1[2];
            v68 = *(_DWORD *)(a1[3] + 52) & 0x1FFFFLL;
            v69 = (uint64_t *)v67[725];
            v70 = v67[726];
            if ((unint64_t)v69 >= v70)
            {
              v143 = (uint64_t *)v67[724];
              v144 = v69 - v143;
              if ((unint64_t)(v144 + 1) >> 61)
                goto LABEL_252;
              v145 = v70 - (_QWORD)v143;
              v146 = (uint64_t)(v70 - (_QWORD)v143) >> 2;
              if (v146 <= v144 + 1)
                v146 = v144 + 1;
              if (v145 >= 0x7FFFFFFFFFFFFFF8)
                v147 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v147 = v146;
              if (v147)
              {
                v148 = (char *)sub_40FC((uint64_t)(v67 + 726), v147);
                v69 = (uint64_t *)v67[725];
                v143 = (uint64_t *)v67[724];
              }
              else
              {
                v148 = 0;
              }
              v177 = (uint64_t *)&v148[8 * v144];
              *v177 = v68;
              v71 = v177 + 1;
              while (v69 != v143)
              {
                v178 = *--v69;
                *--v177 = v178;
              }
              v67[724] = v177;
              v67[725] = v71;
              v67[726] = &v148[8 * v147];
              if (v143)
                operator delete(v143);
            }
            else
            {
              *v69 = v68;
              v71 = v69 + 1;
            }
            v67[725] = v71;
            break;
          case 0xD2:
            v72 = *(_QWORD **)a1[2];
            v73 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFLL;
            v74 = (uint64_t *)v72[728];
            v75 = v72[729];
            if ((unint64_t)v74 >= v75)
            {
              v149 = (uint64_t *)v72[727];
              v150 = v74 - v149;
              if ((unint64_t)(v150 + 1) >> 61)
LABEL_252:
                sub_4074();
              v151 = v75 - (_QWORD)v149;
              v152 = (uint64_t)(v75 - (_QWORD)v149) >> 2;
              if (v152 <= v150 + 1)
                v152 = v150 + 1;
              if (v151 >= 0x7FFFFFFFFFFFFFF8)
                v153 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v153 = v152;
              if (v153)
              {
                v154 = (char *)sub_40FC((uint64_t)(v72 + 729), v153);
                v74 = (uint64_t *)v72[728];
                v149 = (uint64_t *)v72[727];
              }
              else
              {
                v154 = 0;
              }
              v179 = (uint64_t *)&v154[8 * v150];
              *v179 = v73;
              v76 = v179 + 1;
              while (v74 != v149)
              {
                v180 = *--v74;
                *--v179 = v180;
              }
              v72[727] = v179;
              v72[728] = v76;
              v72[729] = &v154[8 * v153];
              if (v149)
                operator delete(v149);
            }
            else
            {
              *v74 = v73;
              v76 = v74 + 1;
            }
            v72[728] = v76;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_EB990(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t *v152;
  unint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t *v162;
  unint64_t v163;
  _QWORD *v164;
  unint64_t *v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  unint64_t *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  uint64_t *v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char *v218;
  uint64_t *v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  char *v236;
  uint64_t *v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  char *v242;
  uint64_t *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t *v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  char *v284;
  uint64_t *v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  char *v290;
  char *v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  char *v296;
  char *v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  char *v302;
  char *v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  char *v308;
  char *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  char *v314;
  uint64_t *v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  char *v320;
  uint64_t *v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  char *v326;
  uint64_t *v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  char *v332;
  uint64_t *v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  char *v338;
  uint64_t *v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  char *v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  char *v349;
  uint64_t v350;
  char *v351;
  uint64_t v352;
  char *v353;
  uint64_t v354;
  char *v355;
  uint64_t v356;
  char *v357;
  uint64_t v358;
  unint64_t *v359;
  unint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  char *v367;
  uint64_t v368;
  uint64_t *v369;
  uint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  char *v377;
  uint64_t v378;
  char *v379;
  uint64_t v380;
  char *v381;
  uint64_t v382;
  char *v383;
  uint64_t v384;
  uint64_t *v385;
  uint64_t v386;
  char *v387;
  uint64_t v388;
  char *v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  char *v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t *v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  int *v405;
  int **v406;
  uint64_t v407;
  unint64_t v408;
  int v409;
  unint64_t v410;
  uint64_t v411;
  char *v412;

  v4 = *a1;
  if (*a2 == 1)
  {
    v406 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v405 = *v406;
    v407 = (char *)v406[1] - (char *)*v406;
    if (v407)
    {
      v408 = v407 >> 2;
      if (v408 <= 1)
        v408 = 1;
      do
      {
        v409 = *v405++;
        switch(v409)
        {
          case 165:
            v410 = (unint64_t)*(unsigned int *)(a1[3] + 36) >> 17;
            v411 = *(_QWORD *)a1[2];
            v412 = "/System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders" + 72;
            goto LABEL_554;
          case 166:
            v410 = *(_DWORD *)(a1[3] + 36) & 0x1FFFF;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)(&stru_1298 + 8);
            goto LABEL_554;
          case 167:
            v410 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v411 = *(_QWORD *)a1[2];
            v412 = "/System/Library/Frameworks/QuartzCore.framework/QuartzCore" + 8;
            goto LABEL_554;
          case 168:
            v410 = *(_QWORD *)(a1[3] + 76) >> 49;
            v411 = *(_QWORD *)a1[2];
            v412 = "/System/Library/Frameworks/QuartzCore.framework/QuartzCore" + 32;
            goto LABEL_554;
          case 169:
            v410 = *(_WORD *)(a1[3] + 92) & 0x7FFF;
            v411 = *(_QWORD *)a1[2];
            v412 = "/System/Library/Frameworks/QuartzCore.framework/QuartzCore" + 56;
            goto LABEL_554;
          case 170:
            v410 = *(_WORD *)(a1[3] + 94) & 0x7FFF;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)(&stru_12F0 + 16);
            goto LABEL_554;
          case 171:
            v410 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            v411 = *(_QWORD *)a1[2];
            v412 = "/System/Library/Frameworks/Foundation.framework/Foundation" + 16;
            goto LABEL_554;
          case 172:
            v410 = (unint64_t)*(unsigned int *)(a1[3] + 48) >> 17;
            v411 = *(_QWORD *)a1[2];
            v412 = "/System/Library/Frameworks/Foundation.framework/Foundation" + 40;
            goto LABEL_554;
          case 173:
            v410 = *(_DWORD *)(a1[3] + 44) & 0x1FFFF;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)&stru_1348;
            goto LABEL_554;
          case 174:
            v410 = *(_DWORD *)(a1[3] + 80) & 0x1FFFF;
            v411 = *(_QWORD *)a1[2];
            v412 = "/usr/lib/libobjc.A.dylib";
            goto LABEL_554;
          case 175:
            v410 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v411 = *(_QWORD *)a1[2];
            v412 = "/usr/lib/libobjc.A.dylib" + 24;
            goto LABEL_554;
          case 176:
            v410 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)(&stru_1380 + 16);
            goto LABEL_554;
          case 177:
            v410 = *(_DWORD *)(a1[3] + 72) & 0xFFFFF;
            v411 = *(_QWORD *)a1[2];
            v412 = "/usr/lib/libc++.1.dylib" + 16;
            goto LABEL_554;
          case 178:
            v410 = *(_DWORD *)(a1[3] + 64) & 0x1FFFF;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)(&stru_13B0 + 16);
            goto LABEL_554;
          case 179:
            v410 = *(_DWORD *)(a1[3] + 68) & 0x1FFFF;
            v411 = *(_QWORD *)a1[2];
            v412 = "/usr/lib/libSystem.B.dylib" + 16;
            goto LABEL_554;
          case 180:
            v410 = *(unsigned __int16 *)(a1[3] + 54);
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)(&stru_13E8 + 8);
            goto LABEL_554;
          case 181:
            v410 = *(unsigned __int16 *)(a1[3] + 56);
            v411 = *(_QWORD *)a1[2];
            v412 = "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" + 8;
            goto LABEL_554;
          case 182:
            v410 = *(unsigned __int16 *)(a1[3] + 76);
            v411 = *(_QWORD *)a1[2];
            v412 = "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" + 32;
            goto LABEL_554;
          case 183:
            v410 = *(unsigned __int16 *)(a1[3] + 86);
            v411 = *(_QWORD *)a1[2];
            v412 = "/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation" + 56;
            goto LABEL_554;
          case 184:
            v410 = *(unsigned __int16 *)(a1[3] + 78);
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)(&stru_1448 + 8);
            goto LABEL_554;
          case 185:
            v410 = *(_DWORD *)(a1[3] + 48) & 0x1FFFF;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)&stru_1468;
            goto LABEL_554;
          case 186:
            v410 = *(_WORD *)(a1[3] + 84) & 0x7FFF;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)&unk_1480;
            goto LABEL_554;
          case 187:
            v410 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)&unk_1498;
            goto LABEL_554;
          case 188:
            v410 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)&unk_14B0;
            goto LABEL_554;
          case 189:
            v410 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)&unk_14C8;
            goto LABEL_554;
          case 190:
            v410 = *(_DWORD *)(a1[3] + 60) & 0x1FFFF;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)&unk_14E0;
            goto LABEL_554;
          case 191:
            v410 = (*(_QWORD *)(a1[3] + 86) >> 16) & 0x1FFFFLL;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)&unk_14F8;
            goto LABEL_554;
          case 192:
            v410 = *(_DWORD *)(a1[3] + 28) & 0x1FFFF;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)&unk_1510;
            goto LABEL_554;
          case 193:
            v410 = *(_DWORD *)(a1[3] + 32) & 0x1FFFF;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)&unk_1528;
            goto LABEL_554;
          case 194:
            v410 = (*(_QWORD *)(a1[3] + 86) >> 33) & 0x7FFFLL;
            v411 = *(_QWORD *)a1[2];
            v412 = (_BYTE *)&unk_1540;
LABEL_554:
            *(_QWORD *)(*(_QWORD *)&v412[v411] - 8) += v410;
            break;
          default:
            break;
        }
        --v408;
      }
      while (v408);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xA5:
            v10 = *(_QWORD **)a1[2];
            v11 = (unint64_t)*(unsigned int *)(a1[3] + 36) >> 17;
            v12 = (unint64_t *)v10[593];
            v13 = v10[594];
            if ((unint64_t)v12 >= v13)
            {
              v165 = (unint64_t *)v10[592];
              v166 = v12 - v165;
              if ((unint64_t)(v166 + 1) >> 61)
                goto LABEL_558;
              v167 = v13 - (_QWORD)v165;
              v168 = (uint64_t)(v13 - (_QWORD)v165) >> 2;
              if (v168 <= v166 + 1)
                v168 = v166 + 1;
              if (v167 >= 0x7FFFFFFFFFFFFFF8)
                v169 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v169 = v168;
              if (v169)
              {
                v170 = (char *)sub_40FC((uint64_t)(v10 + 594), v169);
                v12 = (unint64_t *)v10[593];
                v165 = (unint64_t *)v10[592];
              }
              else
              {
                v170 = 0;
              }
              v345 = (unint64_t *)&v170[8 * v166];
              *v345 = v11;
              v14 = v345 + 1;
              while (v12 != v165)
              {
                v346 = *--v12;
                *--v345 = v346;
              }
              v10[592] = v345;
              v10[593] = v14;
              v10[594] = &v170[8 * v169];
              if (v165)
                operator delete(v165);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[593] = v14;
            break;
          case 0xA6:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 36) & 0x1FFFFLL;
            v17 = (uint64_t *)v15[596];
            v18 = v15[597];
            if ((unint64_t)v17 >= v18)
            {
              v171 = (uint64_t *)v15[595];
              v172 = v17 - v171;
              if ((unint64_t)(v172 + 1) >> 61)
                goto LABEL_558;
              v173 = v18 - (_QWORD)v171;
              v174 = (uint64_t)(v18 - (_QWORD)v171) >> 2;
              if (v174 <= v172 + 1)
                v174 = v172 + 1;
              if (v173 >= 0x7FFFFFFFFFFFFFF8)
                v175 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v175 = v174;
              if (v175)
              {
                v176 = (char *)sub_40FC((uint64_t)(v15 + 597), v175);
                v17 = (uint64_t *)v15[596];
                v171 = (uint64_t *)v15[595];
              }
              else
              {
                v176 = 0;
              }
              v347 = (uint64_t *)&v176[8 * v172];
              *v347 = v16;
              v19 = v347 + 1;
              while (v17 != v171)
              {
                v348 = *--v17;
                *--v347 = v348;
              }
              v15[595] = v347;
              v15[596] = v19;
              v15[597] = &v176[8 * v175];
              if (v171)
                operator delete(v171);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[596] = v19;
            break;
          case 0xA7:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v22 = (char *)v20[599];
            v23 = v20[600];
            if ((unint64_t)v22 >= v23)
            {
              v177 = (char *)v20[598];
              v178 = (v22 - v177) >> 3;
              if ((unint64_t)(v178 + 1) >> 61)
                goto LABEL_558;
              v179 = v23 - (_QWORD)v177;
              v180 = (uint64_t)(v23 - (_QWORD)v177) >> 2;
              if (v180 <= v178 + 1)
                v180 = v178 + 1;
              if (v179 >= 0x7FFFFFFFFFFFFFF8)
                v181 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v181 = v180;
              if (v181)
              {
                v182 = (char *)sub_40FC((uint64_t)(v20 + 600), v181);
                v22 = (char *)v20[599];
                v177 = (char *)v20[598];
              }
              else
              {
                v182 = 0;
              }
              v349 = &v182[8 * v178];
              *(_QWORD *)v349 = v21;
              v24 = v349 + 8;
              while (v22 != v177)
              {
                v350 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v349 - 1) = v350;
                v349 -= 8;
              }
              v20[598] = v349;
              v20[599] = v24;
              v20[600] = &v182[8 * v181];
              if (v177)
                operator delete(v177);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[599] = v24;
            break;
          case 0xA8:
            v25 = *(_QWORD **)a1[2];
            v26 = *(_QWORD *)(a1[3] + 76) >> 49;
            v27 = (char *)v25[602];
            v28 = v25[603];
            if ((unint64_t)v27 >= v28)
            {
              v183 = (char *)v25[601];
              v184 = (v27 - v183) >> 3;
              if ((unint64_t)(v184 + 1) >> 61)
                goto LABEL_558;
              v185 = v28 - (_QWORD)v183;
              v186 = (uint64_t)(v28 - (_QWORD)v183) >> 2;
              if (v186 <= v184 + 1)
                v186 = v184 + 1;
              if (v185 >= 0x7FFFFFFFFFFFFFF8)
                v187 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v187 = v186;
              if (v187)
              {
                v188 = (char *)sub_40FC((uint64_t)(v25 + 603), v187);
                v27 = (char *)v25[602];
                v183 = (char *)v25[601];
              }
              else
              {
                v188 = 0;
              }
              v351 = &v188[8 * v184];
              *(_QWORD *)v351 = v26;
              v29 = v351 + 8;
              while (v27 != v183)
              {
                v352 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v351 - 1) = v352;
                v351 -= 8;
              }
              v25[601] = v351;
              v25[602] = v29;
              v25[603] = &v188[8 * v187];
              if (v183)
                operator delete(v183);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[602] = v29;
            break;
          case 0xA9:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_WORD *)(a1[3] + 92) & 0x7FFF;
            v32 = (char *)v30[605];
            v33 = v30[606];
            if ((unint64_t)v32 >= v33)
            {
              v189 = (char *)v30[604];
              v190 = (v32 - v189) >> 3;
              if ((unint64_t)(v190 + 1) >> 61)
                goto LABEL_558;
              v191 = v33 - (_QWORD)v189;
              v192 = (uint64_t)(v33 - (_QWORD)v189) >> 2;
              if (v192 <= v190 + 1)
                v192 = v190 + 1;
              if (v191 >= 0x7FFFFFFFFFFFFFF8)
                v193 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v193 = v192;
              if (v193)
              {
                v194 = (char *)sub_40FC((uint64_t)(v30 + 606), v193);
                v32 = (char *)v30[605];
                v189 = (char *)v30[604];
              }
              else
              {
                v194 = 0;
              }
              v353 = &v194[8 * v190];
              *(_QWORD *)v353 = v31;
              v34 = v353 + 8;
              while (v32 != v189)
              {
                v354 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v353 - 1) = v354;
                v353 -= 8;
              }
              v30[604] = v353;
              v30[605] = v34;
              v30[606] = &v194[8 * v193];
              if (v189)
                operator delete(v189);
            }
            else
            {
              *(_QWORD *)v32 = v31;
              v34 = v32 + 8;
            }
            v30[605] = v34;
            break;
          case 0xAA:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 94) & 0x7FFF;
            v37 = (char *)v35[608];
            v38 = v35[609];
            if ((unint64_t)v37 >= v38)
            {
              v195 = (char *)v35[607];
              v196 = (v37 - v195) >> 3;
              if ((unint64_t)(v196 + 1) >> 61)
                goto LABEL_558;
              v197 = v38 - (_QWORD)v195;
              v198 = (uint64_t)(v38 - (_QWORD)v195) >> 2;
              if (v198 <= v196 + 1)
                v198 = v196 + 1;
              if (v197 >= 0x7FFFFFFFFFFFFFF8)
                v199 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v199 = v198;
              if (v199)
              {
                v200 = (char *)sub_40FC((uint64_t)(v35 + 609), v199);
                v37 = (char *)v35[608];
                v195 = (char *)v35[607];
              }
              else
              {
                v200 = 0;
              }
              v355 = &v200[8 * v196];
              *(_QWORD *)v355 = v36;
              v39 = v355 + 8;
              while (v37 != v195)
              {
                v356 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v355 - 1) = v356;
                v355 -= 8;
              }
              v35[607] = v355;
              v35[608] = v39;
              v35[609] = &v200[8 * v199];
              if (v195)
                operator delete(v195);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[608] = v39;
            break;
          case 0xAB:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            v42 = (char *)v40[611];
            v43 = v40[612];
            if ((unint64_t)v42 >= v43)
            {
              v201 = (char *)v40[610];
              v202 = (v42 - v201) >> 3;
              if ((unint64_t)(v202 + 1) >> 61)
                goto LABEL_558;
              v203 = v43 - (_QWORD)v201;
              v204 = (uint64_t)(v43 - (_QWORD)v201) >> 2;
              if (v204 <= v202 + 1)
                v204 = v202 + 1;
              if (v203 >= 0x7FFFFFFFFFFFFFF8)
                v205 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v205 = v204;
              if (v205)
              {
                v206 = (char *)sub_40FC((uint64_t)(v40 + 612), v205);
                v42 = (char *)v40[611];
                v201 = (char *)v40[610];
              }
              else
              {
                v206 = 0;
              }
              v357 = &v206[8 * v202];
              *(_QWORD *)v357 = v41;
              v44 = v357 + 8;
              while (v42 != v201)
              {
                v358 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v357 - 1) = v358;
                v357 -= 8;
              }
              v40[610] = v357;
              v40[611] = v44;
              v40[612] = &v206[8 * v205];
              if (v201)
                operator delete(v201);
            }
            else
            {
              *(_QWORD *)v42 = v41;
              v44 = v42 + 8;
            }
            v40[611] = v44;
            break;
          case 0xAC:
            v45 = *(_QWORD **)a1[2];
            v46 = (unint64_t)*(unsigned int *)(a1[3] + 48) >> 17;
            v47 = (unint64_t *)v45[614];
            v48 = v45[615];
            if ((unint64_t)v47 >= v48)
            {
              v207 = (unint64_t *)v45[613];
              v208 = v47 - v207;
              if ((unint64_t)(v208 + 1) >> 61)
                goto LABEL_558;
              v209 = v48 - (_QWORD)v207;
              v210 = (uint64_t)(v48 - (_QWORD)v207) >> 2;
              if (v210 <= v208 + 1)
                v210 = v208 + 1;
              if (v209 >= 0x7FFFFFFFFFFFFFF8)
                v211 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v211 = v210;
              if (v211)
              {
                v212 = (char *)sub_40FC((uint64_t)(v45 + 615), v211);
                v47 = (unint64_t *)v45[614];
                v207 = (unint64_t *)v45[613];
              }
              else
              {
                v212 = 0;
              }
              v359 = (unint64_t *)&v212[8 * v208];
              *v359 = v46;
              v49 = v359 + 1;
              while (v47 != v207)
              {
                v360 = *--v47;
                *--v359 = v360;
              }
              v45[613] = v359;
              v45[614] = v49;
              v45[615] = &v212[8 * v211];
              if (v207)
                operator delete(v207);
            }
            else
            {
              *v47 = v46;
              v49 = v47 + 1;
            }
            v45[614] = v49;
            break;
          case 0xAD:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_DWORD *)(a1[3] + 44) & 0x1FFFFLL;
            v52 = (uint64_t *)v50[617];
            v53 = v50[618];
            if ((unint64_t)v52 >= v53)
            {
              v213 = (uint64_t *)v50[616];
              v214 = v52 - v213;
              if ((unint64_t)(v214 + 1) >> 61)
                goto LABEL_558;
              v215 = v53 - (_QWORD)v213;
              v216 = (uint64_t)(v53 - (_QWORD)v213) >> 2;
              if (v216 <= v214 + 1)
                v216 = v214 + 1;
              if (v215 >= 0x7FFFFFFFFFFFFFF8)
                v217 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v217 = v216;
              if (v217)
              {
                v218 = (char *)sub_40FC((uint64_t)(v50 + 618), v217);
                v52 = (uint64_t *)v50[617];
                v213 = (uint64_t *)v50[616];
              }
              else
              {
                v218 = 0;
              }
              v361 = (uint64_t *)&v218[8 * v214];
              *v361 = v51;
              v54 = v361 + 1;
              while (v52 != v213)
              {
                v362 = *--v52;
                *--v361 = v362;
              }
              v50[616] = v361;
              v50[617] = v54;
              v50[618] = &v218[8 * v217];
              if (v213)
                operator delete(v213);
            }
            else
            {
              *v52 = v51;
              v54 = v52 + 1;
            }
            v50[617] = v54;
            break;
          case 0xAE:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_DWORD *)(a1[3] + 80) & 0x1FFFFLL;
            v57 = (uint64_t *)v55[620];
            v58 = v55[621];
            if ((unint64_t)v57 >= v58)
            {
              v219 = (uint64_t *)v55[619];
              v220 = v57 - v219;
              if ((unint64_t)(v220 + 1) >> 61)
                goto LABEL_558;
              v221 = v58 - (_QWORD)v219;
              v222 = (uint64_t)(v58 - (_QWORD)v219) >> 2;
              if (v222 <= v220 + 1)
                v222 = v220 + 1;
              if (v221 >= 0x7FFFFFFFFFFFFFF8)
                v223 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v223 = v222;
              if (v223)
              {
                v224 = (char *)sub_40FC((uint64_t)(v55 + 621), v223);
                v57 = (uint64_t *)v55[620];
                v219 = (uint64_t *)v55[619];
              }
              else
              {
                v224 = 0;
              }
              v363 = (uint64_t *)&v224[8 * v220];
              *v363 = v56;
              v59 = v363 + 1;
              while (v57 != v219)
              {
                v364 = *--v57;
                *--v363 = v364;
              }
              v55[619] = v363;
              v55[620] = v59;
              v55[621] = &v224[8 * v223];
              if (v219)
                operator delete(v219);
            }
            else
            {
              *v57 = v56;
              v59 = v57 + 1;
            }
            v55[620] = v59;
            break;
          case 0xAF:
            v60 = *(_QWORD **)a1[2];
            v61 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v62 = (char *)v60[623];
            v63 = v60[624];
            if ((unint64_t)v62 >= v63)
            {
              v225 = (char *)v60[622];
              v226 = (v62 - v225) >> 3;
              if ((unint64_t)(v226 + 1) >> 61)
                goto LABEL_558;
              v227 = v63 - (_QWORD)v225;
              v228 = (uint64_t)(v63 - (_QWORD)v225) >> 2;
              if (v228 <= v226 + 1)
                v228 = v226 + 1;
              if (v227 >= 0x7FFFFFFFFFFFFFF8)
                v229 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v229 = v228;
              if (v229)
              {
                v230 = (char *)sub_40FC((uint64_t)(v60 + 624), v229);
                v62 = (char *)v60[623];
                v225 = (char *)v60[622];
              }
              else
              {
                v230 = 0;
              }
              v365 = &v230[8 * v226];
              *(_QWORD *)v365 = v61;
              v64 = v365 + 8;
              while (v62 != v225)
              {
                v366 = *((_QWORD *)v62 - 1);
                v62 -= 8;
                *((_QWORD *)v365 - 1) = v366;
                v365 -= 8;
              }
              v60[622] = v365;
              v60[623] = v64;
              v60[624] = &v230[8 * v229];
              if (v225)
                operator delete(v225);
            }
            else
            {
              *(_QWORD *)v62 = v61;
              v64 = v62 + 8;
            }
            v60[623] = v64;
            break;
          case 0xB0:
            v65 = *(_QWORD **)a1[2];
            v66 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            v67 = (char *)v65[626];
            v68 = v65[627];
            if ((unint64_t)v67 >= v68)
            {
              v231 = (char *)v65[625];
              v232 = (v67 - v231) >> 3;
              if ((unint64_t)(v232 + 1) >> 61)
                goto LABEL_558;
              v233 = v68 - (_QWORD)v231;
              v234 = (uint64_t)(v68 - (_QWORD)v231) >> 2;
              if (v234 <= v232 + 1)
                v234 = v232 + 1;
              if (v233 >= 0x7FFFFFFFFFFFFFF8)
                v235 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v235 = v234;
              if (v235)
              {
                v236 = (char *)sub_40FC((uint64_t)(v65 + 627), v235);
                v67 = (char *)v65[626];
                v231 = (char *)v65[625];
              }
              else
              {
                v236 = 0;
              }
              v367 = &v236[8 * v232];
              *(_QWORD *)v367 = v66;
              v69 = v367 + 8;
              while (v67 != v231)
              {
                v368 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v367 - 1) = v368;
                v367 -= 8;
              }
              v65[625] = v367;
              v65[626] = v69;
              v65[627] = &v236[8 * v235];
              if (v231)
                operator delete(v231);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[626] = v69;
            break;
          case 0xB1:
            v70 = *(_QWORD **)a1[2];
            v71 = *(_DWORD *)(a1[3] + 72) & 0xFFFFFLL;
            v72 = (uint64_t *)v70[629];
            v73 = v70[630];
            if ((unint64_t)v72 >= v73)
            {
              v237 = (uint64_t *)v70[628];
              v238 = v72 - v237;
              if ((unint64_t)(v238 + 1) >> 61)
                goto LABEL_558;
              v239 = v73 - (_QWORD)v237;
              v240 = (uint64_t)(v73 - (_QWORD)v237) >> 2;
              if (v240 <= v238 + 1)
                v240 = v238 + 1;
              if (v239 >= 0x7FFFFFFFFFFFFFF8)
                v241 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v241 = v240;
              if (v241)
              {
                v242 = (char *)sub_40FC((uint64_t)(v70 + 630), v241);
                v72 = (uint64_t *)v70[629];
                v237 = (uint64_t *)v70[628];
              }
              else
              {
                v242 = 0;
              }
              v369 = (uint64_t *)&v242[8 * v238];
              *v369 = v71;
              v74 = v369 + 1;
              while (v72 != v237)
              {
                v370 = *--v72;
                *--v369 = v370;
              }
              v70[628] = v369;
              v70[629] = v74;
              v70[630] = &v242[8 * v241];
              if (v237)
                operator delete(v237);
            }
            else
            {
              *v72 = v71;
              v74 = v72 + 1;
            }
            v70[629] = v74;
            break;
          case 0xB2:
            v75 = *(_QWORD **)a1[2];
            v76 = *(_DWORD *)(a1[3] + 64) & 0x1FFFFLL;
            v77 = (uint64_t *)v75[632];
            v78 = v75[633];
            if ((unint64_t)v77 >= v78)
            {
              v243 = (uint64_t *)v75[631];
              v244 = v77 - v243;
              if ((unint64_t)(v244 + 1) >> 61)
                goto LABEL_558;
              v245 = v78 - (_QWORD)v243;
              v246 = (uint64_t)(v78 - (_QWORD)v243) >> 2;
              if (v246 <= v244 + 1)
                v246 = v244 + 1;
              if (v245 >= 0x7FFFFFFFFFFFFFF8)
                v247 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v247 = v246;
              if (v247)
              {
                v248 = (char *)sub_40FC((uint64_t)(v75 + 633), v247);
                v77 = (uint64_t *)v75[632];
                v243 = (uint64_t *)v75[631];
              }
              else
              {
                v248 = 0;
              }
              v371 = (uint64_t *)&v248[8 * v244];
              *v371 = v76;
              v79 = v371 + 1;
              while (v77 != v243)
              {
                v372 = *--v77;
                *--v371 = v372;
              }
              v75[631] = v371;
              v75[632] = v79;
              v75[633] = &v248[8 * v247];
              if (v243)
                operator delete(v243);
            }
            else
            {
              *v77 = v76;
              v79 = v77 + 1;
            }
            v75[632] = v79;
            break;
          case 0xB3:
            v80 = *(_QWORD **)a1[2];
            v81 = *(_DWORD *)(a1[3] + 68) & 0x1FFFFLL;
            v82 = (uint64_t *)v80[635];
            v83 = v80[636];
            if ((unint64_t)v82 >= v83)
            {
              v249 = (uint64_t *)v80[634];
              v250 = v82 - v249;
              if ((unint64_t)(v250 + 1) >> 61)
                goto LABEL_558;
              v251 = v83 - (_QWORD)v249;
              v252 = (uint64_t)(v83 - (_QWORD)v249) >> 2;
              if (v252 <= v250 + 1)
                v252 = v250 + 1;
              if (v251 >= 0x7FFFFFFFFFFFFFF8)
                v253 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v253 = v252;
              if (v253)
              {
                v254 = (char *)sub_40FC((uint64_t)(v80 + 636), v253);
                v82 = (uint64_t *)v80[635];
                v249 = (uint64_t *)v80[634];
              }
              else
              {
                v254 = 0;
              }
              v373 = (uint64_t *)&v254[8 * v250];
              *v373 = v81;
              v84 = v373 + 1;
              while (v82 != v249)
              {
                v374 = *--v82;
                *--v373 = v374;
              }
              v80[634] = v373;
              v80[635] = v84;
              v80[636] = &v254[8 * v253];
              if (v249)
                operator delete(v249);
            }
            else
            {
              *v82 = v81;
              v84 = v82 + 1;
            }
            v80[635] = v84;
            break;
          case 0xB4:
            v85 = a1[2];
            v86 = *(_QWORD **)v85;
            v87 = *(unsigned __int16 *)(a1[3] + 54);
            v88 = *(char **)(*(_QWORD *)v85 + 5104);
            v89 = *(_QWORD *)(*(_QWORD *)v85 + 5112);
            if ((unint64_t)v88 >= v89)
            {
              v255 = (char *)v86[637];
              v256 = (v88 - v255) >> 3;
              if ((unint64_t)(v256 + 1) >> 61)
                goto LABEL_558;
              v257 = v89 - (_QWORD)v255;
              v258 = (uint64_t)(v89 - (_QWORD)v255) >> 2;
              if (v258 <= v256 + 1)
                v258 = v256 + 1;
              if (v257 >= 0x7FFFFFFFFFFFFFF8)
                v259 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v259 = v258;
              if (v259)
              {
                v260 = (char *)sub_40FC((uint64_t)(v86 + 639), v259);
                v88 = (char *)v86[638];
                v255 = (char *)v86[637];
              }
              else
              {
                v260 = 0;
              }
              v375 = &v260[8 * v256];
              *(_QWORD *)v375 = v87;
              v90 = v375 + 8;
              while (v88 != v255)
              {
                v376 = *((_QWORD *)v88 - 1);
                v88 -= 8;
                *((_QWORD *)v375 - 1) = v376;
                v375 -= 8;
              }
              v86[637] = v375;
              v86[638] = v90;
              v86[639] = &v260[8 * v259];
              if (v255)
                operator delete(v255);
            }
            else
            {
              *(_QWORD *)v88 = v87;
              v90 = v88 + 8;
            }
            v86[638] = v90;
            break;
          case 0xB5:
            v91 = a1[2];
            v92 = *(_QWORD **)v91;
            v93 = *(unsigned __int16 *)(a1[3] + 56);
            v94 = *(char **)(*(_QWORD *)v91 + 5128);
            v95 = *(_QWORD *)(*(_QWORD *)v91 + 5136);
            if ((unint64_t)v94 >= v95)
            {
              v261 = (char *)v92[640];
              v262 = (v94 - v261) >> 3;
              if ((unint64_t)(v262 + 1) >> 61)
                goto LABEL_558;
              v263 = v95 - (_QWORD)v261;
              v264 = (uint64_t)(v95 - (_QWORD)v261) >> 2;
              if (v264 <= v262 + 1)
                v264 = v262 + 1;
              if (v263 >= 0x7FFFFFFFFFFFFFF8)
                v265 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v265 = v264;
              if (v265)
              {
                v266 = (char *)sub_40FC((uint64_t)(v92 + 642), v265);
                v94 = (char *)v92[641];
                v261 = (char *)v92[640];
              }
              else
              {
                v266 = 0;
              }
              v377 = &v266[8 * v262];
              *(_QWORD *)v377 = v93;
              v96 = v377 + 8;
              while (v94 != v261)
              {
                v378 = *((_QWORD *)v94 - 1);
                v94 -= 8;
                *((_QWORD *)v377 - 1) = v378;
                v377 -= 8;
              }
              v92[640] = v377;
              v92[641] = v96;
              v92[642] = &v266[8 * v265];
              if (v261)
                operator delete(v261);
            }
            else
            {
              *(_QWORD *)v94 = v93;
              v96 = v94 + 8;
            }
            v92[641] = v96;
            break;
          case 0xB6:
            v97 = a1[2];
            v98 = *(_QWORD **)v97;
            v99 = *(unsigned __int16 *)(a1[3] + 76);
            v100 = *(char **)(*(_QWORD *)v97 + 5152);
            v101 = *(_QWORD *)(*(_QWORD *)v97 + 5160);
            if ((unint64_t)v100 >= v101)
            {
              v267 = (char *)v98[643];
              v268 = (v100 - v267) >> 3;
              if ((unint64_t)(v268 + 1) >> 61)
                goto LABEL_558;
              v269 = v101 - (_QWORD)v267;
              v270 = (uint64_t)(v101 - (_QWORD)v267) >> 2;
              if (v270 <= v268 + 1)
                v270 = v268 + 1;
              if (v269 >= 0x7FFFFFFFFFFFFFF8)
                v271 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v271 = v270;
              if (v271)
              {
                v272 = (char *)sub_40FC((uint64_t)(v98 + 645), v271);
                v100 = (char *)v98[644];
                v267 = (char *)v98[643];
              }
              else
              {
                v272 = 0;
              }
              v379 = &v272[8 * v268];
              *(_QWORD *)v379 = v99;
              v102 = v379 + 8;
              while (v100 != v267)
              {
                v380 = *((_QWORD *)v100 - 1);
                v100 -= 8;
                *((_QWORD *)v379 - 1) = v380;
                v379 -= 8;
              }
              v98[643] = v379;
              v98[644] = v102;
              v98[645] = &v272[8 * v271];
              if (v267)
                operator delete(v267);
            }
            else
            {
              *(_QWORD *)v100 = v99;
              v102 = v100 + 8;
            }
            v98[644] = v102;
            break;
          case 0xB7:
            v103 = a1[2];
            v104 = *(_QWORD **)v103;
            v105 = *(unsigned __int16 *)(a1[3] + 86);
            v106 = *(char **)(*(_QWORD *)v103 + 5176);
            v107 = *(_QWORD *)(*(_QWORD *)v103 + 5184);
            if ((unint64_t)v106 >= v107)
            {
              v273 = (char *)v104[646];
              v274 = (v106 - v273) >> 3;
              if ((unint64_t)(v274 + 1) >> 61)
                goto LABEL_558;
              v275 = v107 - (_QWORD)v273;
              v276 = (uint64_t)(v107 - (_QWORD)v273) >> 2;
              if (v276 <= v274 + 1)
                v276 = v274 + 1;
              if (v275 >= 0x7FFFFFFFFFFFFFF8)
                v277 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v277 = v276;
              if (v277)
              {
                v278 = (char *)sub_40FC((uint64_t)(v104 + 648), v277);
                v106 = (char *)v104[647];
                v273 = (char *)v104[646];
              }
              else
              {
                v278 = 0;
              }
              v381 = &v278[8 * v274];
              *(_QWORD *)v381 = v105;
              v108 = v381 + 8;
              while (v106 != v273)
              {
                v382 = *((_QWORD *)v106 - 1);
                v106 -= 8;
                *((_QWORD *)v381 - 1) = v382;
                v381 -= 8;
              }
              v104[646] = v381;
              v104[647] = v108;
              v104[648] = &v278[8 * v277];
              if (v273)
                operator delete(v273);
            }
            else
            {
              *(_QWORD *)v106 = v105;
              v108 = v106 + 8;
            }
            v104[647] = v108;
            break;
          case 0xB8:
            v109 = a1[2];
            v110 = *(_QWORD **)v109;
            v111 = *(unsigned __int16 *)(a1[3] + 78);
            v112 = *(char **)(*(_QWORD *)v109 + 5200);
            v113 = *(_QWORD *)(*(_QWORD *)v109 + 5208);
            if ((unint64_t)v112 >= v113)
            {
              v279 = (char *)v110[649];
              v280 = (v112 - v279) >> 3;
              if ((unint64_t)(v280 + 1) >> 61)
                goto LABEL_558;
              v281 = v113 - (_QWORD)v279;
              v282 = (uint64_t)(v113 - (_QWORD)v279) >> 2;
              if (v282 <= v280 + 1)
                v282 = v280 + 1;
              if (v281 >= 0x7FFFFFFFFFFFFFF8)
                v283 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v283 = v282;
              if (v283)
              {
                v284 = (char *)sub_40FC((uint64_t)(v110 + 651), v283);
                v112 = (char *)v110[650];
                v279 = (char *)v110[649];
              }
              else
              {
                v284 = 0;
              }
              v383 = &v284[8 * v280];
              *(_QWORD *)v383 = v111;
              v114 = v383 + 8;
              while (v112 != v279)
              {
                v384 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                *((_QWORD *)v383 - 1) = v384;
                v383 -= 8;
              }
              v110[649] = v383;
              v110[650] = v114;
              v110[651] = &v284[8 * v283];
              if (v279)
                operator delete(v279);
            }
            else
            {
              *(_QWORD *)v112 = v111;
              v114 = v112 + 8;
            }
            v110[650] = v114;
            break;
          case 0xB9:
            v115 = *(_QWORD **)a1[2];
            v116 = *(_DWORD *)(a1[3] + 48) & 0x1FFFFLL;
            v117 = (uint64_t *)v115[653];
            v118 = v115[654];
            if ((unint64_t)v117 >= v118)
            {
              v285 = (uint64_t *)v115[652];
              v286 = v117 - v285;
              if ((unint64_t)(v286 + 1) >> 61)
                goto LABEL_558;
              v287 = v118 - (_QWORD)v285;
              v288 = (uint64_t)(v118 - (_QWORD)v285) >> 2;
              if (v288 <= v286 + 1)
                v288 = v286 + 1;
              if (v287 >= 0x7FFFFFFFFFFFFFF8)
                v289 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v289 = v288;
              if (v289)
              {
                v290 = (char *)sub_40FC((uint64_t)(v115 + 654), v289);
                v117 = (uint64_t *)v115[653];
                v285 = (uint64_t *)v115[652];
              }
              else
              {
                v290 = 0;
              }
              v385 = (uint64_t *)&v290[8 * v286];
              *v385 = v116;
              v119 = v385 + 1;
              while (v117 != v285)
              {
                v386 = *--v117;
                *--v385 = v386;
              }
              v115[652] = v385;
              v115[653] = v119;
              v115[654] = &v290[8 * v289];
              if (v285)
                operator delete(v285);
            }
            else
            {
              *v117 = v116;
              v119 = v117 + 1;
            }
            v115[653] = v119;
            break;
          case 0xBA:
            v120 = *(_QWORD **)a1[2];
            v121 = *(_WORD *)(a1[3] + 84) & 0x7FFF;
            v122 = (char *)v120[656];
            v123 = v120[657];
            if ((unint64_t)v122 >= v123)
            {
              v291 = (char *)v120[655];
              v292 = (v122 - v291) >> 3;
              if ((unint64_t)(v292 + 1) >> 61)
                goto LABEL_558;
              v293 = v123 - (_QWORD)v291;
              v294 = (uint64_t)(v123 - (_QWORD)v291) >> 2;
              if (v294 <= v292 + 1)
                v294 = v292 + 1;
              if (v293 >= 0x7FFFFFFFFFFFFFF8)
                v295 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v295 = v294;
              if (v295)
              {
                v296 = (char *)sub_40FC((uint64_t)(v120 + 657), v295);
                v122 = (char *)v120[656];
                v291 = (char *)v120[655];
              }
              else
              {
                v296 = 0;
              }
              v387 = &v296[8 * v292];
              *(_QWORD *)v387 = v121;
              v124 = v387 + 8;
              while (v122 != v291)
              {
                v388 = *((_QWORD *)v122 - 1);
                v122 -= 8;
                *((_QWORD *)v387 - 1) = v388;
                v387 -= 8;
              }
              v120[655] = v387;
              v120[656] = v124;
              v120[657] = &v296[8 * v295];
              if (v291)
                operator delete(v291);
            }
            else
            {
              *(_QWORD *)v122 = v121;
              v124 = v122 + 8;
            }
            v120[656] = v124;
            break;
          case 0xBB:
            v125 = *(_QWORD **)a1[2];
            v126 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v127 = (char *)v125[659];
            v128 = v125[660];
            if ((unint64_t)v127 >= v128)
            {
              v297 = (char *)v125[658];
              v298 = (v127 - v297) >> 3;
              if ((unint64_t)(v298 + 1) >> 61)
                goto LABEL_558;
              v299 = v128 - (_QWORD)v297;
              v300 = (uint64_t)(v128 - (_QWORD)v297) >> 2;
              if (v300 <= v298 + 1)
                v300 = v298 + 1;
              if (v299 >= 0x7FFFFFFFFFFFFFF8)
                v301 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v301 = v300;
              if (v301)
              {
                v302 = (char *)sub_40FC((uint64_t)(v125 + 660), v301);
                v127 = (char *)v125[659];
                v297 = (char *)v125[658];
              }
              else
              {
                v302 = 0;
              }
              v389 = &v302[8 * v298];
              *(_QWORD *)v389 = v126;
              v129 = v389 + 8;
              while (v127 != v297)
              {
                v390 = *((_QWORD *)v127 - 1);
                v127 -= 8;
                *((_QWORD *)v389 - 1) = v390;
                v389 -= 8;
              }
              v125[658] = v389;
              v125[659] = v129;
              v125[660] = &v302[8 * v301];
              if (v297)
                operator delete(v297);
            }
            else
            {
              *(_QWORD *)v127 = v126;
              v129 = v127 + 8;
            }
            v125[659] = v129;
            break;
          case 0xBC:
            v130 = *(_QWORD **)a1[2];
            v131 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v132 = (char *)v130[662];
            v133 = v130[663];
            if ((unint64_t)v132 >= v133)
            {
              v303 = (char *)v130[661];
              v304 = (v132 - v303) >> 3;
              if ((unint64_t)(v304 + 1) >> 61)
                goto LABEL_558;
              v305 = v133 - (_QWORD)v303;
              v306 = (uint64_t)(v133 - (_QWORD)v303) >> 2;
              if (v306 <= v304 + 1)
                v306 = v304 + 1;
              if (v305 >= 0x7FFFFFFFFFFFFFF8)
                v307 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v307 = v306;
              if (v307)
              {
                v308 = (char *)sub_40FC((uint64_t)(v130 + 663), v307);
                v132 = (char *)v130[662];
                v303 = (char *)v130[661];
              }
              else
              {
                v308 = 0;
              }
              v391 = &v308[8 * v304];
              *(_QWORD *)v391 = v131;
              v134 = v391 + 8;
              while (v132 != v303)
              {
                v392 = *((_QWORD *)v132 - 1);
                v132 -= 8;
                *((_QWORD *)v391 - 1) = v392;
                v391 -= 8;
              }
              v130[661] = v391;
              v130[662] = v134;
              v130[663] = &v308[8 * v307];
              if (v303)
                operator delete(v303);
            }
            else
            {
              *(_QWORD *)v132 = v131;
              v134 = v132 + 8;
            }
            v130[662] = v134;
            break;
          case 0xBD:
            v135 = *(_QWORD **)a1[2];
            v136 = *(_WORD *)(a1[3] + 52) & 0x7FFF;
            v137 = (char *)v135[665];
            v138 = v135[666];
            if ((unint64_t)v137 >= v138)
            {
              v309 = (char *)v135[664];
              v310 = (v137 - v309) >> 3;
              if ((unint64_t)(v310 + 1) >> 61)
                goto LABEL_558;
              v311 = v138 - (_QWORD)v309;
              v312 = (uint64_t)(v138 - (_QWORD)v309) >> 2;
              if (v312 <= v310 + 1)
                v312 = v310 + 1;
              if (v311 >= 0x7FFFFFFFFFFFFFF8)
                v313 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v313 = v312;
              if (v313)
              {
                v314 = (char *)sub_40FC((uint64_t)(v135 + 666), v313);
                v137 = (char *)v135[665];
                v309 = (char *)v135[664];
              }
              else
              {
                v314 = 0;
              }
              v393 = &v314[8 * v310];
              *(_QWORD *)v393 = v136;
              v139 = v393 + 8;
              while (v137 != v309)
              {
                v394 = *((_QWORD *)v137 - 1);
                v137 -= 8;
                *((_QWORD *)v393 - 1) = v394;
                v393 -= 8;
              }
              v135[664] = v393;
              v135[665] = v139;
              v135[666] = &v314[8 * v313];
              if (v309)
                operator delete(v309);
            }
            else
            {
              *(_QWORD *)v137 = v136;
              v139 = v137 + 8;
            }
            v135[665] = v139;
            break;
          case 0xBE:
            v140 = *(_QWORD **)a1[2];
            v141 = *(_DWORD *)(a1[3] + 60) & 0x1FFFFLL;
            v142 = (uint64_t *)v140[668];
            v143 = v140[669];
            if ((unint64_t)v142 >= v143)
            {
              v315 = (uint64_t *)v140[667];
              v316 = v142 - v315;
              if ((unint64_t)(v316 + 1) >> 61)
                goto LABEL_558;
              v317 = v143 - (_QWORD)v315;
              v318 = (uint64_t)(v143 - (_QWORD)v315) >> 2;
              if (v318 <= v316 + 1)
                v318 = v316 + 1;
              if (v317 >= 0x7FFFFFFFFFFFFFF8)
                v319 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v319 = v318;
              if (v319)
              {
                v320 = (char *)sub_40FC((uint64_t)(v140 + 669), v319);
                v142 = (uint64_t *)v140[668];
                v315 = (uint64_t *)v140[667];
              }
              else
              {
                v320 = 0;
              }
              v395 = (uint64_t *)&v320[8 * v316];
              *v395 = v141;
              v144 = v395 + 1;
              while (v142 != v315)
              {
                v396 = *--v142;
                *--v395 = v396;
              }
              v140[667] = v395;
              v140[668] = v144;
              v140[669] = &v320[8 * v319];
              if (v315)
                operator delete(v315);
            }
            else
            {
              *v142 = v141;
              v144 = v142 + 1;
            }
            v140[668] = v144;
            break;
          case 0xBF:
            v145 = *(_QWORD **)a1[2];
            v146 = (*(_QWORD *)(a1[3] + 86) >> 16) & 0x1FFFFLL;
            v147 = (uint64_t *)v145[671];
            v148 = v145[672];
            if ((unint64_t)v147 >= v148)
            {
              v321 = (uint64_t *)v145[670];
              v322 = v147 - v321;
              if ((unint64_t)(v322 + 1) >> 61)
                goto LABEL_558;
              v323 = v148 - (_QWORD)v321;
              v324 = (uint64_t)(v148 - (_QWORD)v321) >> 2;
              if (v324 <= v322 + 1)
                v324 = v322 + 1;
              if (v323 >= 0x7FFFFFFFFFFFFFF8)
                v325 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v325 = v324;
              if (v325)
              {
                v326 = (char *)sub_40FC((uint64_t)(v145 + 672), v325);
                v147 = (uint64_t *)v145[671];
                v321 = (uint64_t *)v145[670];
              }
              else
              {
                v326 = 0;
              }
              v397 = (uint64_t *)&v326[8 * v322];
              *v397 = v146;
              v149 = v397 + 1;
              while (v147 != v321)
              {
                v398 = *--v147;
                *--v397 = v398;
              }
              v145[670] = v397;
              v145[671] = v149;
              v145[672] = &v326[8 * v325];
              if (v321)
                operator delete(v321);
            }
            else
            {
              *v147 = v146;
              v149 = v147 + 1;
            }
            v145[671] = v149;
            break;
          case 0xC0:
            v150 = *(_QWORD **)a1[2];
            v151 = *(_DWORD *)(a1[3] + 28) & 0x1FFFFLL;
            v152 = (uint64_t *)v150[674];
            v153 = v150[675];
            if ((unint64_t)v152 >= v153)
            {
              v327 = (uint64_t *)v150[673];
              v328 = v152 - v327;
              if ((unint64_t)(v328 + 1) >> 61)
                goto LABEL_558;
              v329 = v153 - (_QWORD)v327;
              v330 = (uint64_t)(v153 - (_QWORD)v327) >> 2;
              if (v330 <= v328 + 1)
                v330 = v328 + 1;
              if (v329 >= 0x7FFFFFFFFFFFFFF8)
                v331 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v331 = v330;
              if (v331)
              {
                v332 = (char *)sub_40FC((uint64_t)(v150 + 675), v331);
                v152 = (uint64_t *)v150[674];
                v327 = (uint64_t *)v150[673];
              }
              else
              {
                v332 = 0;
              }
              v399 = (uint64_t *)&v332[8 * v328];
              *v399 = v151;
              v154 = v399 + 1;
              while (v152 != v327)
              {
                v400 = *--v152;
                *--v399 = v400;
              }
              v150[673] = v399;
              v150[674] = v154;
              v150[675] = &v332[8 * v331];
              if (v327)
                operator delete(v327);
            }
            else
            {
              *v152 = v151;
              v154 = v152 + 1;
            }
            v150[674] = v154;
            break;
          case 0xC1:
            v155 = *(_QWORD **)a1[2];
            v156 = *(_DWORD *)(a1[3] + 32) & 0x1FFFFLL;
            v157 = (uint64_t *)v155[677];
            v158 = v155[678];
            if ((unint64_t)v157 >= v158)
            {
              v333 = (uint64_t *)v155[676];
              v334 = v157 - v333;
              if ((unint64_t)(v334 + 1) >> 61)
                goto LABEL_558;
              v335 = v158 - (_QWORD)v333;
              v336 = (uint64_t)(v158 - (_QWORD)v333) >> 2;
              if (v336 <= v334 + 1)
                v336 = v334 + 1;
              if (v335 >= 0x7FFFFFFFFFFFFFF8)
                v337 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v337 = v336;
              if (v337)
              {
                v338 = (char *)sub_40FC((uint64_t)(v155 + 678), v337);
                v157 = (uint64_t *)v155[677];
                v333 = (uint64_t *)v155[676];
              }
              else
              {
                v338 = 0;
              }
              v401 = (uint64_t *)&v338[8 * v334];
              *v401 = v156;
              v159 = v401 + 1;
              while (v157 != v333)
              {
                v402 = *--v157;
                *--v401 = v402;
              }
              v155[676] = v401;
              v155[677] = v159;
              v155[678] = &v338[8 * v337];
              if (v333)
                operator delete(v333);
            }
            else
            {
              *v157 = v156;
              v159 = v157 + 1;
            }
            v155[677] = v159;
            break;
          case 0xC2:
            v160 = *(_QWORD **)a1[2];
            v161 = (*(_QWORD *)(a1[3] + 86) >> 33) & 0x7FFFLL;
            v162 = (uint64_t *)v160[680];
            v163 = v160[681];
            if ((unint64_t)v162 >= v163)
            {
              v339 = (uint64_t *)v160[679];
              v340 = v162 - v339;
              if ((unint64_t)(v340 + 1) >> 61)
LABEL_558:
                sub_4074();
              v341 = v163 - (_QWORD)v339;
              v342 = (uint64_t)(v163 - (_QWORD)v339) >> 2;
              if (v342 <= v340 + 1)
                v342 = v340 + 1;
              if (v341 >= 0x7FFFFFFFFFFFFFF8)
                v343 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v343 = v342;
              if (v343)
              {
                v344 = (char *)sub_40FC((uint64_t)(v160 + 681), v343);
                v162 = (uint64_t *)v160[680];
                v339 = (uint64_t *)v160[679];
              }
              else
              {
                v344 = 0;
              }
              v403 = (uint64_t *)&v344[8 * v340];
              *v403 = v161;
              v164 = v403 + 1;
              while (v162 != v339)
              {
                v404 = *--v162;
                *--v403 = v404;
              }
              v160[679] = v403;
              v160[680] = v164;
              v160[681] = &v344[8 * v343];
              if (v339)
                operator delete(v339);
            }
            else
            {
              *v162 = v161;
              v164 = v162 + 1;
            }
            v160[680] = v164;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_ED5D0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int *v50;
  int **v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;

  v4 = *a1;
  if (*a2 == 1)
  {
    v51 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v50 = *v51;
    v52 = (char *)v51[1] - (char *)*v51;
    if (!v52)
      goto LABEL_74;
    v53 = v52 >> 2;
    if (v53 <= 1)
      v53 = 1;
    while (1)
    {
      v55 = *v50++;
      v54 = v55;
      if (v55 == 197)
        break;
      if (v54 == 196)
      {
        v56 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFF;
        v57 = (_QWORD *)(*(_QWORD *)a1[2] + 5488);
        goto LABEL_72;
      }
      if (v54 == 195)
      {
        v56 = *(_DWORD *)(a1[3] + 24) & 0x1FFFFF;
        v57 = (_QWORD *)(*(_QWORD *)a1[2] + 5464);
LABEL_72:
        *(_QWORD *)(*v57 - 8) += v56;
      }
      if (!--v53)
        goto LABEL_74;
    }
    v56 = *(_DWORD *)(a1[3] + 20) & 0x3FFFFF;
    v57 = (_QWORD *)(*(_QWORD *)a1[2] + 5512);
    goto LABEL_72;
  }
  if (*a2)
    return;
  v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
  v6 = v5[1] - *v5;
  if (v6)
  {
    v7 = 0;
    v8 = v6 >> 2;
    if (v8 <= 1)
      v9 = 1;
    else
      v9 = v8;
    do
    {
      v10 = *(_DWORD *)(*v5 + 4 * v7);
      switch(v10)
      {
        case 197:
          v16 = *(_QWORD **)a1[2];
          v17 = *(_DWORD *)(a1[3] + 20) & 0x3FFFFFLL;
          v18 = (uint64_t *)v16[689];
          v19 = v16[690];
          if ((unint64_t)v18 >= v19)
          {
            v32 = (uint64_t *)v16[688];
            v33 = v18 - v32;
            if ((unint64_t)(v33 + 1) >> 61)
              goto LABEL_76;
            v34 = v19 - (_QWORD)v32;
            v35 = (uint64_t)(v19 - (_QWORD)v32) >> 2;
            if (v35 <= v33 + 1)
              v35 = v33 + 1;
            if (v34 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v35;
            if (v36)
            {
              v37 = (char *)sub_40FC((uint64_t)(v16 + 690), v36);
              v18 = (uint64_t *)v16[689];
              v32 = (uint64_t *)v16[688];
            }
            else
            {
              v37 = 0;
            }
            v46 = (uint64_t *)&v37[8 * v33];
            *v46 = v17;
            v20 = v46 + 1;
            while (v18 != v32)
            {
              v47 = *--v18;
              *--v46 = v47;
            }
            v16[688] = v46;
            v16[689] = v20;
            v16[690] = &v37[8 * v36];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *v18 = v17;
            v20 = v18 + 1;
          }
          v16[689] = v20;
          break;
        case 196:
          v21 = *(_QWORD **)a1[2];
          v22 = *(_DWORD *)(a1[3] + 28) & 0x3FFFFFLL;
          v23 = (uint64_t *)v21[686];
          v24 = v21[687];
          if ((unint64_t)v23 >= v24)
          {
            v38 = (uint64_t *)v21[685];
            v39 = v23 - v38;
            if ((unint64_t)(v39 + 1) >> 61)
LABEL_76:
              sub_4074();
            v40 = v24 - (_QWORD)v38;
            v41 = (uint64_t)(v24 - (_QWORD)v38) >> 2;
            if (v41 <= v39 + 1)
              v41 = v39 + 1;
            if (v40 >= 0x7FFFFFFFFFFFFFF8)
              v42 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v42 = v41;
            if (v42)
            {
              v43 = (char *)sub_40FC((uint64_t)(v21 + 687), v42);
              v23 = (uint64_t *)v21[686];
              v38 = (uint64_t *)v21[685];
            }
            else
            {
              v43 = 0;
            }
            v48 = (uint64_t *)&v43[8 * v39];
            *v48 = v22;
            v25 = v48 + 1;
            while (v23 != v38)
            {
              v49 = *--v23;
              *--v48 = v49;
            }
            v21[685] = v48;
            v21[686] = v25;
            v21[687] = &v43[8 * v42];
            if (v38)
              operator delete(v38);
          }
          else
          {
            *v23 = v22;
            v25 = v23 + 1;
          }
          v21[686] = v25;
          break;
        case 195:
          v11 = *(_QWORD **)a1[2];
          v12 = *(_DWORD *)(a1[3] + 24) & 0x1FFFFFLL;
          v13 = (uint64_t *)v11[683];
          v14 = v11[684];
          if ((unint64_t)v13 >= v14)
          {
            v26 = (uint64_t *)v11[682];
            v27 = v13 - v26;
            if ((unint64_t)(v27 + 1) >> 61)
              goto LABEL_76;
            v28 = v14 - (_QWORD)v26;
            v29 = (uint64_t)(v14 - (_QWORD)v26) >> 2;
            if (v29 <= v27 + 1)
              v29 = v27 + 1;
            if (v28 >= 0x7FFFFFFFFFFFFFF8)
              v30 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v30 = v29;
            if (v30)
            {
              v31 = (char *)sub_40FC((uint64_t)(v11 + 684), v30);
              v13 = (uint64_t *)v11[683];
              v26 = (uint64_t *)v11[682];
            }
            else
            {
              v31 = 0;
            }
            v44 = (uint64_t *)&v31[8 * v27];
            *v44 = v12;
            v15 = v44 + 1;
            while (v13 != v26)
            {
              v45 = *--v13;
              *--v44 = v45;
            }
            v11[682] = v44;
            v11[683] = v15;
            v11[684] = &v31[8 * v30];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *v13 = v12;
            v15 = v13 + 1;
          }
          v11[683] = v15;
          break;
      }
      ++v7;
    }
    while (v7 != v9);
  }
LABEL_74:
  *a2 = 1;
}

void sub_ED9A0(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  unint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  int *v140;
  int **v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  _QWORD *v146;

  v4 = *a1;
  if (*a2 == 1)
  {
    v141 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v140 = *v141;
    v142 = (char *)v141[1] - (char *)*v141;
    if (v142)
    {
      v143 = v142 >> 2;
      if (v143 <= 1)
        v143 = 1;
      do
      {
        v144 = *v140++;
        switch(v144)
        {
          case 233:
            v145 = *(_WORD *)(a1[3] + 30) & 0x1FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 6376);
            goto LABEL_194;
          case 234:
            v145 = *(_DWORD *)(a1[3] + 36) & 0x3FFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 6400);
            goto LABEL_194;
          case 235:
            v145 = *(_WORD *)(a1[3] + 28) & 0x1FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 6424);
            goto LABEL_194;
          case 236:
            v145 = ((unint64_t)*(unsigned int *)(a1[3] + 32) >> 13) & 0x3FFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 6448);
            goto LABEL_194;
          case 237:
            v145 = *(_DWORD *)(a1[3] + 32) & 0x1FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 6472);
            goto LABEL_194;
          case 238:
            v145 = *(_DWORD *)(a1[3] + 40) & 0x3FFFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 6496);
            goto LABEL_194;
          case 239:
            v145 = *(_WORD *)(a1[3] + 24) & 0x3FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 6520);
            goto LABEL_194;
          case 240:
            v145 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 6544);
            goto LABEL_194;
          case 241:
            v145 = *(_WORD *)(a1[3] + 26) & 0x3FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 6568);
            goto LABEL_194;
          case 242:
            v145 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            v146 = (_QWORD *)(*(_QWORD *)a1[2] + 6592);
LABEL_194:
            *(_QWORD *)(*v146 - 8) += v145;
            break;
          default:
            break;
        }
        --v143;
      }
      while (v143);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 0xE9:
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 30) & 0x1FFF;
            v12 = (char *)v10[797];
            v13 = v10[798];
            if ((unint64_t)v12 >= v13)
            {
              v60 = (char *)v10[796];
              v61 = (v12 - v60) >> 3;
              if ((unint64_t)(v61 + 1) >> 61)
                goto LABEL_198;
              v62 = v13 - (_QWORD)v60;
              v63 = (uint64_t)(v13 - (_QWORD)v60) >> 2;
              if (v63 <= v61 + 1)
                v63 = v61 + 1;
              if (v62 >= 0x7FFFFFFFFFFFFFF8)
                v64 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v64 = v63;
              if (v64)
              {
                v65 = (char *)sub_40FC((uint64_t)(v10 + 798), v64);
                v12 = (char *)v10[797];
                v60 = (char *)v10[796];
              }
              else
              {
                v65 = 0;
              }
              v120 = &v65[8 * v61];
              *(_QWORD *)v120 = v11;
              v14 = v120 + 8;
              while (v12 != v60)
              {
                v121 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v120 - 1) = v121;
                v120 -= 8;
              }
              v10[796] = v120;
              v10[797] = v14;
              v10[798] = &v65[8 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[797] = v14;
            break;
          case 0xEA:
            v15 = *(_QWORD **)a1[2];
            v16 = *(_DWORD *)(a1[3] + 36) & 0x3FFFFLL;
            v17 = (uint64_t *)v15[800];
            v18 = v15[801];
            if ((unint64_t)v17 >= v18)
            {
              v66 = (uint64_t *)v15[799];
              v67 = v17 - v66;
              if ((unint64_t)(v67 + 1) >> 61)
                goto LABEL_198;
              v68 = v18 - (_QWORD)v66;
              v69 = (uint64_t)(v18 - (_QWORD)v66) >> 2;
              if (v69 <= v67 + 1)
                v69 = v67 + 1;
              if (v68 >= 0x7FFFFFFFFFFFFFF8)
                v70 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v70 = v69;
              if (v70)
              {
                v71 = (char *)sub_40FC((uint64_t)(v15 + 801), v70);
                v17 = (uint64_t *)v15[800];
                v66 = (uint64_t *)v15[799];
              }
              else
              {
                v71 = 0;
              }
              v122 = (uint64_t *)&v71[8 * v67];
              *v122 = v16;
              v19 = v122 + 1;
              while (v17 != v66)
              {
                v123 = *--v17;
                *--v122 = v123;
              }
              v15[799] = v122;
              v15[800] = v19;
              v15[801] = &v71[8 * v70];
              if (v66)
                operator delete(v66);
            }
            else
            {
              *v17 = v16;
              v19 = v17 + 1;
            }
            v15[800] = v19;
            break;
          case 0xEB:
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 28) & 0x1FFF;
            v22 = (char *)v20[803];
            v23 = v20[804];
            if ((unint64_t)v22 >= v23)
            {
              v72 = (char *)v20[802];
              v73 = (v22 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61)
                goto LABEL_198;
              v74 = v23 - (_QWORD)v72;
              v75 = (uint64_t)(v23 - (_QWORD)v72) >> 2;
              if (v75 <= v73 + 1)
                v75 = v73 + 1;
              if (v74 >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v75;
              if (v76)
              {
                v77 = (char *)sub_40FC((uint64_t)(v20 + 804), v76);
                v22 = (char *)v20[803];
                v72 = (char *)v20[802];
              }
              else
              {
                v77 = 0;
              }
              v124 = &v77[8 * v73];
              *(_QWORD *)v124 = v21;
              v24 = v124 + 8;
              while (v22 != v72)
              {
                v125 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v124 - 1) = v125;
                v124 -= 8;
              }
              v20[802] = v124;
              v20[803] = v24;
              v20[804] = &v77[8 * v76];
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[803] = v24;
            break;
          case 0xEC:
            v25 = *(_QWORD **)a1[2];
            v26 = ((unint64_t)*(unsigned int *)(a1[3] + 32) >> 13) & 0x3FFFF;
            v27 = (unint64_t *)v25[806];
            v28 = v25[807];
            if ((unint64_t)v27 >= v28)
            {
              v78 = (unint64_t *)v25[805];
              v79 = v27 - v78;
              if ((unint64_t)(v79 + 1) >> 61)
                goto LABEL_198;
              v80 = v28 - (_QWORD)v78;
              v81 = (uint64_t)(v28 - (_QWORD)v78) >> 2;
              if (v81 <= v79 + 1)
                v81 = v79 + 1;
              if (v80 >= 0x7FFFFFFFFFFFFFF8)
                v82 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v82 = v81;
              if (v82)
              {
                v83 = (char *)sub_40FC((uint64_t)(v25 + 807), v82);
                v27 = (unint64_t *)v25[806];
                v78 = (unint64_t *)v25[805];
              }
              else
              {
                v83 = 0;
              }
              v126 = (unint64_t *)&v83[8 * v79];
              *v126 = v26;
              v29 = v126 + 1;
              while (v27 != v78)
              {
                v127 = *--v27;
                *--v126 = v127;
              }
              v25[805] = v126;
              v25[806] = v29;
              v25[807] = &v83[8 * v82];
              if (v78)
                operator delete(v78);
            }
            else
            {
              *v27 = v26;
              v29 = v27 + 1;
            }
            v25[806] = v29;
            break;
          case 0xED:
            v30 = *(_QWORD **)a1[2];
            v31 = *(_DWORD *)(a1[3] + 32) & 0x1FFFLL;
            v32 = (uint64_t *)v30[809];
            v33 = v30[810];
            if ((unint64_t)v32 >= v33)
            {
              v84 = (uint64_t *)v30[808];
              v85 = v32 - v84;
              if ((unint64_t)(v85 + 1) >> 61)
                goto LABEL_198;
              v86 = v33 - (_QWORD)v84;
              v87 = (uint64_t)(v33 - (_QWORD)v84) >> 2;
              if (v87 <= v85 + 1)
                v87 = v85 + 1;
              if (v86 >= 0x7FFFFFFFFFFFFFF8)
                v88 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v88 = v87;
              if (v88)
              {
                v89 = (char *)sub_40FC((uint64_t)(v30 + 810), v88);
                v32 = (uint64_t *)v30[809];
                v84 = (uint64_t *)v30[808];
              }
              else
              {
                v89 = 0;
              }
              v128 = (uint64_t *)&v89[8 * v85];
              *v128 = v31;
              v34 = v128 + 1;
              while (v32 != v84)
              {
                v129 = *--v32;
                *--v128 = v129;
              }
              v30[808] = v128;
              v30[809] = v34;
              v30[810] = &v89[8 * v88];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *v32 = v31;
              v34 = v32 + 1;
            }
            v30[809] = v34;
            break;
          case 0xEE:
            v35 = *(_QWORD **)a1[2];
            v36 = *(_DWORD *)(a1[3] + 40) & 0x3FFFFLL;
            v37 = (uint64_t *)v35[812];
            v38 = v35[813];
            if ((unint64_t)v37 >= v38)
            {
              v90 = (uint64_t *)v35[811];
              v91 = v37 - v90;
              if ((unint64_t)(v91 + 1) >> 61)
                goto LABEL_198;
              v92 = v38 - (_QWORD)v90;
              v93 = (uint64_t)(v38 - (_QWORD)v90) >> 2;
              if (v93 <= v91 + 1)
                v93 = v91 + 1;
              if (v92 >= 0x7FFFFFFFFFFFFFF8)
                v94 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v94 = v93;
              if (v94)
              {
                v95 = (char *)sub_40FC((uint64_t)(v35 + 813), v94);
                v37 = (uint64_t *)v35[812];
                v90 = (uint64_t *)v35[811];
              }
              else
              {
                v95 = 0;
              }
              v130 = (uint64_t *)&v95[8 * v91];
              *v130 = v36;
              v39 = v130 + 1;
              while (v37 != v90)
              {
                v131 = *--v37;
                *--v130 = v131;
              }
              v35[811] = v130;
              v35[812] = v39;
              v35[813] = &v95[8 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *v37 = v36;
              v39 = v37 + 1;
            }
            v35[812] = v39;
            break;
          case 0xEF:
            v40 = *(_QWORD **)a1[2];
            v41 = *(_WORD *)(a1[3] + 24) & 0x3FFF;
            v42 = (char *)v40[815];
            v43 = v40[816];
            if ((unint64_t)v42 >= v43)
            {
              v96 = (char *)v40[814];
              v97 = (v42 - v96) >> 3;
              if ((unint64_t)(v97 + 1) >> 61)
                goto LABEL_198;
              v98 = v43 - (_QWORD)v96;
              v99 = (uint64_t)(v43 - (_QWORD)v96) >> 2;
              if (v99 <= v97 + 1)
                v99 = v97 + 1;
              if (v98 >= 0x7FFFFFFFFFFFFFF8)
                v100 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v100 = v99;
              if (v100)
              {
                v101 = (char *)sub_40FC((uint64_t)(v40 + 816), v100);
                v42 = (char *)v40[815];
                v96 = (char *)v40[814];
              }
              else
              {
                v101 = 0;
              }
              v132 = &v101[8 * v97];
              *(_QWORD *)v132 = v41;
              v44 = v132 + 8;
              while (v42 != v96)
              {
                v133 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v132 - 1) = v133;
                v132 -= 8;
              }
              v40[814] = v132;
              v40[815] = v44;
              v40[816] = &v101[8 * v100];
              if (v96)
                operator delete(v96);
            }
            else
            {
              *(_QWORD *)v42 = v41;
              v44 = v42 + 8;
            }
            v40[815] = v44;
            break;
          case 0xF0:
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 20) & 0x7FFF;
            v47 = (char *)v45[818];
            v48 = v45[819];
            if ((unint64_t)v47 >= v48)
            {
              v102 = (char *)v45[817];
              v103 = (v47 - v102) >> 3;
              if ((unint64_t)(v103 + 1) >> 61)
                goto LABEL_198;
              v104 = v48 - (_QWORD)v102;
              v105 = (uint64_t)(v48 - (_QWORD)v102) >> 2;
              if (v105 <= v103 + 1)
                v105 = v103 + 1;
              if (v104 >= 0x7FFFFFFFFFFFFFF8)
                v106 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v106 = v105;
              if (v106)
              {
                v107 = (char *)sub_40FC((uint64_t)(v45 + 819), v106);
                v47 = (char *)v45[818];
                v102 = (char *)v45[817];
              }
              else
              {
                v107 = 0;
              }
              v134 = &v107[8 * v103];
              *(_QWORD *)v134 = v46;
              v49 = v134 + 8;
              while (v47 != v102)
              {
                v135 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v134 - 1) = v135;
                v134 -= 8;
              }
              v45[817] = v134;
              v45[818] = v49;
              v45[819] = &v107[8 * v106];
              if (v102)
                operator delete(v102);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[818] = v49;
            break;
          case 0xF1:
            v50 = *(_QWORD **)a1[2];
            v51 = *(_WORD *)(a1[3] + 26) & 0x3FFF;
            v52 = (char *)v50[821];
            v53 = v50[822];
            if ((unint64_t)v52 >= v53)
            {
              v108 = (char *)v50[820];
              v109 = (v52 - v108) >> 3;
              if ((unint64_t)(v109 + 1) >> 61)
                goto LABEL_198;
              v110 = v53 - (_QWORD)v108;
              v111 = (uint64_t)(v53 - (_QWORD)v108) >> 2;
              if (v111 <= v109 + 1)
                v111 = v109 + 1;
              if (v110 >= 0x7FFFFFFFFFFFFFF8)
                v112 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v112 = v111;
              if (v112)
              {
                v113 = (char *)sub_40FC((uint64_t)(v50 + 822), v112);
                v52 = (char *)v50[821];
                v108 = (char *)v50[820];
              }
              else
              {
                v113 = 0;
              }
              v136 = &v113[8 * v109];
              *(_QWORD *)v136 = v51;
              v54 = v136 + 8;
              while (v52 != v108)
              {
                v137 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v136 - 1) = v137;
                v136 -= 8;
              }
              v50[820] = v136;
              v50[821] = v54;
              v50[822] = &v113[8 * v112];
              if (v108)
                operator delete(v108);
            }
            else
            {
              *(_QWORD *)v52 = v51;
              v54 = v52 + 8;
            }
            v50[821] = v54;
            break;
          case 0xF2:
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            v57 = (char *)v55[824];
            v58 = v55[825];
            if ((unint64_t)v57 >= v58)
            {
              v114 = (char *)v55[823];
              v115 = (v57 - v114) >> 3;
              if ((unint64_t)(v115 + 1) >> 61)
LABEL_198:
                sub_4074();
              v116 = v58 - (_QWORD)v114;
              v117 = (uint64_t)(v58 - (_QWORD)v114) >> 2;
              if (v117 <= v115 + 1)
                v117 = v115 + 1;
              if (v116 >= 0x7FFFFFFFFFFFFFF8)
                v118 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v118 = v117;
              if (v118)
              {
                v119 = (char *)sub_40FC((uint64_t)(v55 + 825), v118);
                v57 = (char *)v55[824];
                v114 = (char *)v55[823];
              }
              else
              {
                v119 = 0;
              }
              v138 = &v119[8 * v115];
              *(_QWORD *)v138 = v56;
              v59 = v138 + 8;
              while (v57 != v114)
              {
                v139 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v138 - 1) = v139;
                v138 -= 8;
              }
              v55[823] = v138;
              v55[824] = v59;
              v55[825] = &v119[8 * v118];
              if (v114)
                operator delete(v114);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[824] = v59;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_EE3E8(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  int *v146;
  int **v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  _QWORD *v152;

  v4 = *a1;
  if (*a2 == 1)
  {
    v147 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v146 = *v147;
    v148 = (char *)v147[1] - (char *)*v147;
    if (v148)
    {
      v149 = v148 >> 2;
      if (v149 <= 1)
        v149 = 1;
      do
      {
        v150 = *v146++;
        switch(v150)
        {
          case 'N':
            v151 = *(unsigned __int16 *)(a1[3] + 34);
            v152 = (_QWORD *)(*(_QWORD *)a1[2] + 2656);
            goto LABEL_194;
          case 'O':
            v151 = *(unsigned __int16 *)(a1[3] + 30);
            v152 = (_QWORD *)(*(_QWORD *)a1[2] + 2680);
            goto LABEL_194;
          case 'P':
            v151 = *(_DWORD *)(a1[3] + 40) & 0x1FFFF;
            v152 = (_QWORD *)(*(_QWORD *)a1[2] + 2704);
            goto LABEL_194;
          case 'Q':
            v151 = *(unsigned __int16 *)(a1[3] + 36);
            v152 = (_QWORD *)(*(_QWORD *)a1[2] + 2728);
            goto LABEL_194;
          case 'R':
            v151 = *(unsigned __int16 *)(a1[3] + 32);
            v152 = (_QWORD *)(*(_QWORD *)a1[2] + 2752);
            goto LABEL_194;
          case 'S':
            v151 = *(_DWORD *)(a1[3] + 44) & 0x1FFFF;
            v152 = (_QWORD *)(*(_QWORD *)a1[2] + 2776);
            goto LABEL_194;
          case 'T':
            v151 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v152 = (_QWORD *)(*(_QWORD *)a1[2] + 2800);
            goto LABEL_194;
          case 'U':
            v151 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v152 = (_QWORD *)(*(_QWORD *)a1[2] + 2824);
            goto LABEL_194;
          case 'V':
            v151 = *(unsigned __int16 *)(a1[3] + 24);
            v152 = (_QWORD *)(*(_QWORD *)a1[2] + 2848);
            goto LABEL_194;
          case 'W':
            v151 = *(unsigned __int16 *)(a1[3] + 22);
            v152 = (_QWORD *)(*(_QWORD *)a1[2] + 2872);
LABEL_194:
            *(_QWORD *)(*v152 - 8) += v151;
            break;
          default:
            break;
        }
        --v149;
      }
      while (v149);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'N':
            v10 = a1[2];
            v11 = *(_QWORD **)v10;
            v12 = *(unsigned __int16 *)(a1[3] + 34);
            v13 = *(char **)(*(_QWORD *)v10 + 2656);
            v14 = *(_QWORD *)(*(_QWORD *)v10 + 2664);
            if ((unint64_t)v13 >= v14)
            {
              v66 = (char *)v11[331];
              v67 = (v13 - v66) >> 3;
              if ((unint64_t)(v67 + 1) >> 61)
                goto LABEL_198;
              v68 = v14 - (_QWORD)v66;
              v69 = (uint64_t)(v14 - (_QWORD)v66) >> 2;
              if (v69 <= v67 + 1)
                v69 = v67 + 1;
              if (v68 >= 0x7FFFFFFFFFFFFFF8)
                v70 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v70 = v69;
              if (v70)
              {
                v71 = (char *)sub_40FC((uint64_t)(v11 + 333), v70);
                v13 = (char *)v11[332];
                v66 = (char *)v11[331];
              }
              else
              {
                v71 = 0;
              }
              v126 = &v71[8 * v67];
              *(_QWORD *)v126 = v12;
              v15 = v126 + 8;
              while (v13 != v66)
              {
                v127 = *((_QWORD *)v13 - 1);
                v13 -= 8;
                *((_QWORD *)v126 - 1) = v127;
                v126 -= 8;
              }
              v11[331] = v126;
              v11[332] = v15;
              v11[333] = &v71[8 * v70];
              if (v66)
                operator delete(v66);
            }
            else
            {
              *(_QWORD *)v13 = v12;
              v15 = v13 + 8;
            }
            v11[332] = v15;
            break;
          case 'O':
            v16 = a1[2];
            v17 = *(_QWORD **)v16;
            v18 = *(unsigned __int16 *)(a1[3] + 30);
            v19 = *(char **)(*(_QWORD *)v16 + 2680);
            v20 = *(_QWORD *)(*(_QWORD *)v16 + 2688);
            if ((unint64_t)v19 >= v20)
            {
              v72 = (char *)v17[334];
              v73 = (v19 - v72) >> 3;
              if ((unint64_t)(v73 + 1) >> 61)
                goto LABEL_198;
              v74 = v20 - (_QWORD)v72;
              v75 = (uint64_t)(v20 - (_QWORD)v72) >> 2;
              if (v75 <= v73 + 1)
                v75 = v73 + 1;
              if (v74 >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v75;
              if (v76)
              {
                v77 = (char *)sub_40FC((uint64_t)(v17 + 336), v76);
                v19 = (char *)v17[335];
                v72 = (char *)v17[334];
              }
              else
              {
                v77 = 0;
              }
              v128 = &v77[8 * v73];
              *(_QWORD *)v128 = v18;
              v21 = v128 + 8;
              while (v19 != v72)
              {
                v129 = *((_QWORD *)v19 - 1);
                v19 -= 8;
                *((_QWORD *)v128 - 1) = v129;
                v128 -= 8;
              }
              v17[334] = v128;
              v17[335] = v21;
              v17[336] = &v77[8 * v76];
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(_QWORD *)v19 = v18;
              v21 = v19 + 8;
            }
            v17[335] = v21;
            break;
          case 'P':
            v22 = *(_QWORD **)a1[2];
            v23 = *(_DWORD *)(a1[3] + 40) & 0x1FFFFLL;
            v24 = (uint64_t *)v22[338];
            v25 = v22[339];
            if ((unint64_t)v24 >= v25)
            {
              v78 = (uint64_t *)v22[337];
              v79 = v24 - v78;
              if ((unint64_t)(v79 + 1) >> 61)
                goto LABEL_198;
              v80 = v25 - (_QWORD)v78;
              v81 = (uint64_t)(v25 - (_QWORD)v78) >> 2;
              if (v81 <= v79 + 1)
                v81 = v79 + 1;
              if (v80 >= 0x7FFFFFFFFFFFFFF8)
                v82 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v82 = v81;
              if (v82)
              {
                v83 = (char *)sub_40FC((uint64_t)(v22 + 339), v82);
                v24 = (uint64_t *)v22[338];
                v78 = (uint64_t *)v22[337];
              }
              else
              {
                v83 = 0;
              }
              v130 = (uint64_t *)&v83[8 * v79];
              *v130 = v23;
              v26 = v130 + 1;
              while (v24 != v78)
              {
                v131 = *--v24;
                *--v130 = v131;
              }
              v22[337] = v130;
              v22[338] = v26;
              v22[339] = &v83[8 * v82];
              if (v78)
                operator delete(v78);
            }
            else
            {
              *v24 = v23;
              v26 = v24 + 1;
            }
            v22[338] = v26;
            break;
          case 'Q':
            v27 = a1[2];
            v28 = *(_QWORD **)v27;
            v29 = *(unsigned __int16 *)(a1[3] + 36);
            v30 = *(char **)(*(_QWORD *)v27 + 2728);
            v31 = *(_QWORD *)(*(_QWORD *)v27 + 2736);
            if ((unint64_t)v30 >= v31)
            {
              v84 = (char *)v28[340];
              v85 = (v30 - v84) >> 3;
              if ((unint64_t)(v85 + 1) >> 61)
                goto LABEL_198;
              v86 = v31 - (_QWORD)v84;
              v87 = (uint64_t)(v31 - (_QWORD)v84) >> 2;
              if (v87 <= v85 + 1)
                v87 = v85 + 1;
              if (v86 >= 0x7FFFFFFFFFFFFFF8)
                v88 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v88 = v87;
              if (v88)
              {
                v89 = (char *)sub_40FC((uint64_t)(v28 + 342), v88);
                v30 = (char *)v28[341];
                v84 = (char *)v28[340];
              }
              else
              {
                v89 = 0;
              }
              v132 = &v89[8 * v85];
              *(_QWORD *)v132 = v29;
              v32 = v132 + 8;
              while (v30 != v84)
              {
                v133 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *((_QWORD *)v132 - 1) = v133;
                v132 -= 8;
              }
              v28[340] = v132;
              v28[341] = v32;
              v28[342] = &v89[8 * v88];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *(_QWORD *)v30 = v29;
              v32 = v30 + 8;
            }
            v28[341] = v32;
            break;
          case 'R':
            v33 = a1[2];
            v34 = *(_QWORD **)v33;
            v35 = *(unsigned __int16 *)(a1[3] + 32);
            v36 = *(char **)(*(_QWORD *)v33 + 2752);
            v37 = *(_QWORD *)(*(_QWORD *)v33 + 2760);
            if ((unint64_t)v36 >= v37)
            {
              v90 = (char *)v34[343];
              v91 = (v36 - v90) >> 3;
              if ((unint64_t)(v91 + 1) >> 61)
                goto LABEL_198;
              v92 = v37 - (_QWORD)v90;
              v93 = (uint64_t)(v37 - (_QWORD)v90) >> 2;
              if (v93 <= v91 + 1)
                v93 = v91 + 1;
              if (v92 >= 0x7FFFFFFFFFFFFFF8)
                v94 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v94 = v93;
              if (v94)
              {
                v95 = (char *)sub_40FC((uint64_t)(v34 + 345), v94);
                v36 = (char *)v34[344];
                v90 = (char *)v34[343];
              }
              else
              {
                v95 = 0;
              }
              v134 = &v95[8 * v91];
              *(_QWORD *)v134 = v35;
              v38 = v134 + 8;
              while (v36 != v90)
              {
                v135 = *((_QWORD *)v36 - 1);
                v36 -= 8;
                *((_QWORD *)v134 - 1) = v135;
                v134 -= 8;
              }
              v34[343] = v134;
              v34[344] = v38;
              v34[345] = &v95[8 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *(_QWORD *)v36 = v35;
              v38 = v36 + 8;
            }
            v34[344] = v38;
            break;
          case 'S':
            v39 = *(_QWORD **)a1[2];
            v40 = *(_DWORD *)(a1[3] + 44) & 0x1FFFFLL;
            v41 = (uint64_t *)v39[347];
            v42 = v39[348];
            if ((unint64_t)v41 >= v42)
            {
              v96 = (uint64_t *)v39[346];
              v97 = v41 - v96;
              if ((unint64_t)(v97 + 1) >> 61)
                goto LABEL_198;
              v98 = v42 - (_QWORD)v96;
              v99 = (uint64_t)(v42 - (_QWORD)v96) >> 2;
              if (v99 <= v97 + 1)
                v99 = v97 + 1;
              if (v98 >= 0x7FFFFFFFFFFFFFF8)
                v100 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v100 = v99;
              if (v100)
              {
                v101 = (char *)sub_40FC((uint64_t)(v39 + 348), v100);
                v41 = (uint64_t *)v39[347];
                v96 = (uint64_t *)v39[346];
              }
              else
              {
                v101 = 0;
              }
              v136 = (uint64_t *)&v101[8 * v97];
              *v136 = v40;
              v43 = v136 + 1;
              while (v41 != v96)
              {
                v137 = *--v41;
                *--v136 = v137;
              }
              v39[346] = v136;
              v39[347] = v43;
              v39[348] = &v101[8 * v100];
              if (v96)
                operator delete(v96);
            }
            else
            {
              *v41 = v40;
              v43 = v41 + 1;
            }
            v39[347] = v43;
            break;
          case 'T':
            v44 = *(_QWORD **)a1[2];
            v45 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v46 = (char *)v44[350];
            v47 = v44[351];
            if ((unint64_t)v46 >= v47)
            {
              v102 = (char *)v44[349];
              v103 = (v46 - v102) >> 3;
              if ((unint64_t)(v103 + 1) >> 61)
                goto LABEL_198;
              v104 = v47 - (_QWORD)v102;
              v105 = (uint64_t)(v47 - (_QWORD)v102) >> 2;
              if (v105 <= v103 + 1)
                v105 = v103 + 1;
              if (v104 >= 0x7FFFFFFFFFFFFFF8)
                v106 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v106 = v105;
              if (v106)
              {
                v107 = (char *)sub_40FC((uint64_t)(v44 + 351), v106);
                v46 = (char *)v44[350];
                v102 = (char *)v44[349];
              }
              else
              {
                v107 = 0;
              }
              v138 = &v107[8 * v103];
              *(_QWORD *)v138 = v45;
              v48 = v138 + 8;
              while (v46 != v102)
              {
                v139 = *((_QWORD *)v46 - 1);
                v46 -= 8;
                *((_QWORD *)v138 - 1) = v139;
                v138 -= 8;
              }
              v44[349] = v138;
              v44[350] = v48;
              v44[351] = &v107[8 * v106];
              if (v102)
                operator delete(v102);
            }
            else
            {
              *(_QWORD *)v46 = v45;
              v48 = v46 + 8;
            }
            v44[350] = v48;
            break;
          case 'U':
            v49 = *(_QWORD **)a1[2];
            v50 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v51 = (char *)v49[353];
            v52 = v49[354];
            if ((unint64_t)v51 >= v52)
            {
              v108 = (char *)v49[352];
              v109 = (v51 - v108) >> 3;
              if ((unint64_t)(v109 + 1) >> 61)
                goto LABEL_198;
              v110 = v52 - (_QWORD)v108;
              v111 = (uint64_t)(v52 - (_QWORD)v108) >> 2;
              if (v111 <= v109 + 1)
                v111 = v109 + 1;
              if (v110 >= 0x7FFFFFFFFFFFFFF8)
                v112 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v112 = v111;
              if (v112)
              {
                v113 = (char *)sub_40FC((uint64_t)(v49 + 354), v112);
                v51 = (char *)v49[353];
                v108 = (char *)v49[352];
              }
              else
              {
                v113 = 0;
              }
              v140 = &v113[8 * v109];
              *(_QWORD *)v140 = v50;
              v53 = v140 + 8;
              while (v51 != v108)
              {
                v141 = *((_QWORD *)v51 - 1);
                v51 -= 8;
                *((_QWORD *)v140 - 1) = v141;
                v140 -= 8;
              }
              v49[352] = v140;
              v49[353] = v53;
              v49[354] = &v113[8 * v112];
              if (v108)
                operator delete(v108);
            }
            else
            {
              *(_QWORD *)v51 = v50;
              v53 = v51 + 8;
            }
            v49[353] = v53;
            break;
          case 'V':
            v54 = a1[2];
            v55 = *(_QWORD **)v54;
            v56 = *(unsigned __int16 *)(a1[3] + 24);
            v57 = *(char **)(*(_QWORD *)v54 + 2848);
            v58 = *(_QWORD *)(*(_QWORD *)v54 + 2856);
            if ((unint64_t)v57 >= v58)
            {
              v114 = (char *)v55[355];
              v115 = (v57 - v114) >> 3;
              if ((unint64_t)(v115 + 1) >> 61)
                goto LABEL_198;
              v116 = v58 - (_QWORD)v114;
              v117 = (uint64_t)(v58 - (_QWORD)v114) >> 2;
              if (v117 <= v115 + 1)
                v117 = v115 + 1;
              if (v116 >= 0x7FFFFFFFFFFFFFF8)
                v118 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v118 = v117;
              if (v118)
              {
                v119 = (char *)sub_40FC((uint64_t)(v55 + 357), v118);
                v57 = (char *)v55[356];
                v114 = (char *)v55[355];
              }
              else
              {
                v119 = 0;
              }
              v142 = &v119[8 * v115];
              *(_QWORD *)v142 = v56;
              v59 = v142 + 8;
              while (v57 != v114)
              {
                v143 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v142 - 1) = v143;
                v142 -= 8;
              }
              v55[355] = v142;
              v55[356] = v59;
              v55[357] = &v119[8 * v118];
              if (v114)
                operator delete(v114);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[356] = v59;
            break;
          case 'W':
            v60 = a1[2];
            v61 = *(_QWORD **)v60;
            v62 = *(unsigned __int16 *)(a1[3] + 22);
            v63 = *(char **)(*(_QWORD *)v60 + 2872);
            v64 = *(_QWORD *)(*(_QWORD *)v60 + 2880);
            if ((unint64_t)v63 >= v64)
            {
              v120 = (char *)v61[358];
              v121 = (v63 - v120) >> 3;
              if ((unint64_t)(v121 + 1) >> 61)
LABEL_198:
                sub_4074();
              v122 = v64 - (_QWORD)v120;
              v123 = (uint64_t)(v64 - (_QWORD)v120) >> 2;
              if (v123 <= v121 + 1)
                v123 = v121 + 1;
              if (v122 >= 0x7FFFFFFFFFFFFFF8)
                v124 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v124 = v123;
              if (v124)
              {
                v125 = (char *)sub_40FC((uint64_t)(v61 + 360), v124);
                v63 = (char *)v61[359];
                v120 = (char *)v61[358];
              }
              else
              {
                v125 = 0;
              }
              v144 = &v125[8 * v121];
              *(_QWORD *)v144 = v62;
              v65 = v144 + 8;
              while (v63 != v120)
              {
                v145 = *((_QWORD *)v63 - 1);
                v63 -= 8;
                *((_QWORD *)v144 - 1) = v145;
                v144 -= 8;
              }
              v61[358] = v144;
              v61[359] = v65;
              v61[360] = &v125[8 * v124];
              if (v120)
                operator delete(v120);
            }
            else
            {
              *(_QWORD *)v63 = v62;
              v65 = v63 + 8;
            }
            v61[359] = v65;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_EED88(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  unint64_t *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  int *v192;
  int **v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  unint64_t v197;
  _QWORD *v198;

  v4 = *a1;
  if (*a2 == 1)
  {
    v193 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v192 = *v193;
    v194 = (char *)v193[1] - (char *)*v193;
    if (v194)
    {
      v195 = v194 >> 2;
      if (v195 <= 1)
        v195 = 1;
      do
      {
        v196 = *v192++;
        switch(v196)
        {
          case 'e':
            v197 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            v198 = (_QWORD *)(*(_QWORD *)a1[2] + 3208);
            goto LABEL_266;
          case 'f':
            v197 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v198 = (_QWORD *)(*(_QWORD *)a1[2] + 3232);
            goto LABEL_266;
          case 'g':
            v197 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            v198 = (_QWORD *)(*(_QWORD *)a1[2] + 3256);
            goto LABEL_266;
          case 'h':
            v197 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v198 = (_QWORD *)(*(_QWORD *)a1[2] + 3280);
            goto LABEL_266;
          case 'i':
            v197 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v198 = (_QWORD *)(*(_QWORD *)a1[2] + 3304);
            goto LABEL_266;
          case 'j':
            v197 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v198 = (_QWORD *)(*(_QWORD *)a1[2] + 3328);
            goto LABEL_266;
          case 'k':
            v197 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v198 = (_QWORD *)(*(_QWORD *)a1[2] + 3352);
            goto LABEL_266;
          case 'l':
            v197 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            v198 = (_QWORD *)(*(_QWORD *)a1[2] + 3376);
            goto LABEL_266;
          case 'm':
            v197 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            v198 = (_QWORD *)(*(_QWORD *)a1[2] + 3400);
            goto LABEL_266;
          case 'n':
            v197 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v198 = (_QWORD *)(*(_QWORD *)a1[2] + 3424);
            goto LABEL_266;
          case 'o':
            v197 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v198 = (_QWORD *)(*(_QWORD *)a1[2] + 3448);
            goto LABEL_266;
          case 'p':
            v197 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            v198 = (_QWORD *)(*(_QWORD *)a1[2] + 3472);
            goto LABEL_266;
          case 'q':
            v197 = ((unint64_t)*(unsigned __int16 *)(a1[3] + 20) >> 1) & 0x3FFF;
            v198 = (_QWORD *)(*(_QWORD *)a1[2] + 3496);
            goto LABEL_266;
          case 'r':
            v197 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            v198 = (_QWORD *)(*(_QWORD *)a1[2] + 3520);
LABEL_266:
            *(_QWORD *)(*v198 - 8) += v197;
            break;
          default:
            break;
        }
        --v195;
      }
      while (v195);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'e':
            v10 = *(_QWORD **)a1[2];
            v11 = *(_WORD *)(a1[3] + 44) & 0x7FFF;
            v12 = (char *)v10[401];
            v13 = v10[402];
            if ((unint64_t)v12 >= v13)
            {
              v80 = (char *)v10[400];
              v81 = (v12 - v80) >> 3;
              if ((unint64_t)(v81 + 1) >> 61)
                goto LABEL_270;
              v82 = v13 - (_QWORD)v80;
              v83 = (uint64_t)(v13 - (_QWORD)v80) >> 2;
              if (v83 <= v81 + 1)
                v83 = v81 + 1;
              if (v82 >= 0x7FFFFFFFFFFFFFF8)
                v84 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v84 = v83;
              if (v84)
              {
                v85 = (char *)sub_40FC((uint64_t)(v10 + 402), v84);
                v12 = (char *)v10[401];
                v80 = (char *)v10[400];
              }
              else
              {
                v85 = 0;
              }
              v164 = &v85[8 * v81];
              *(_QWORD *)v164 = v11;
              v14 = v164 + 8;
              while (v12 != v80)
              {
                v165 = *((_QWORD *)v12 - 1);
                v12 -= 8;
                *((_QWORD *)v164 - 1) = v165;
                v164 -= 8;
              }
              v10[400] = v164;
              v10[401] = v14;
              v10[402] = &v85[8 * v84];
              if (v80)
                operator delete(v80);
            }
            else
            {
              *(_QWORD *)v12 = v11;
              v14 = v12 + 8;
            }
            v10[401] = v14;
            break;
          case 'f':
            v15 = *(_QWORD **)a1[2];
            v16 = *(_WORD *)(a1[3] + 42) & 0x7FFF;
            v17 = (char *)v15[404];
            v18 = v15[405];
            if ((unint64_t)v17 >= v18)
            {
              v86 = (char *)v15[403];
              v87 = (v17 - v86) >> 3;
              if ((unint64_t)(v87 + 1) >> 61)
                goto LABEL_270;
              v88 = v18 - (_QWORD)v86;
              v89 = (uint64_t)(v18 - (_QWORD)v86) >> 2;
              if (v89 <= v87 + 1)
                v89 = v87 + 1;
              if (v88 >= 0x7FFFFFFFFFFFFFF8)
                v90 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v90 = v89;
              if (v90)
              {
                v91 = (char *)sub_40FC((uint64_t)(v15 + 405), v90);
                v17 = (char *)v15[404];
                v86 = (char *)v15[403];
              }
              else
              {
                v91 = 0;
              }
              v166 = &v91[8 * v87];
              *(_QWORD *)v166 = v16;
              v19 = v166 + 8;
              while (v17 != v86)
              {
                v167 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v166 - 1) = v167;
                v166 -= 8;
              }
              v15[403] = v166;
              v15[404] = v19;
              v15[405] = &v91[8 * v90];
              if (v86)
                operator delete(v86);
            }
            else
            {
              *(_QWORD *)v17 = v16;
              v19 = v17 + 8;
            }
            v15[404] = v19;
            break;
          case 'g':
            v20 = *(_QWORD **)a1[2];
            v21 = *(_WORD *)(a1[3] + 22) & 0x7FFF;
            v22 = (char *)v20[407];
            v23 = v20[408];
            if ((unint64_t)v22 >= v23)
            {
              v92 = (char *)v20[406];
              v93 = (v22 - v92) >> 3;
              if ((unint64_t)(v93 + 1) >> 61)
                goto LABEL_270;
              v94 = v23 - (_QWORD)v92;
              v95 = (uint64_t)(v23 - (_QWORD)v92) >> 2;
              if (v95 <= v93 + 1)
                v95 = v93 + 1;
              if (v94 >= 0x7FFFFFFFFFFFFFF8)
                v96 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v96 = v95;
              if (v96)
              {
                v97 = (char *)sub_40FC((uint64_t)(v20 + 408), v96);
                v22 = (char *)v20[407];
                v92 = (char *)v20[406];
              }
              else
              {
                v97 = 0;
              }
              v168 = &v97[8 * v93];
              *(_QWORD *)v168 = v21;
              v24 = v168 + 8;
              while (v22 != v92)
              {
                v169 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v168 - 1) = v169;
                v168 -= 8;
              }
              v20[406] = v168;
              v20[407] = v24;
              v20[408] = &v97[8 * v96];
              if (v92)
                operator delete(v92);
            }
            else
            {
              *(_QWORD *)v22 = v21;
              v24 = v22 + 8;
            }
            v20[407] = v24;
            break;
          case 'h':
            v25 = *(_QWORD **)a1[2];
            v26 = *(_WORD *)(a1[3] + 30) & 0x7FFF;
            v27 = (char *)v25[410];
            v28 = v25[411];
            if ((unint64_t)v27 >= v28)
            {
              v98 = (char *)v25[409];
              v99 = (v27 - v98) >> 3;
              if ((unint64_t)(v99 + 1) >> 61)
                goto LABEL_270;
              v100 = v28 - (_QWORD)v98;
              v101 = (uint64_t)(v28 - (_QWORD)v98) >> 2;
              if (v101 <= v99 + 1)
                v101 = v99 + 1;
              if (v100 >= 0x7FFFFFFFFFFFFFF8)
                v102 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v102 = v101;
              if (v102)
              {
                v103 = (char *)sub_40FC((uint64_t)(v25 + 411), v102);
                v27 = (char *)v25[410];
                v98 = (char *)v25[409];
              }
              else
              {
                v103 = 0;
              }
              v170 = &v103[8 * v99];
              *(_QWORD *)v170 = v26;
              v29 = v170 + 8;
              while (v27 != v98)
              {
                v171 = *((_QWORD *)v27 - 1);
                v27 -= 8;
                *((_QWORD *)v170 - 1) = v171;
                v170 -= 8;
              }
              v25[409] = v170;
              v25[410] = v29;
              v25[411] = &v103[8 * v102];
              if (v98)
                operator delete(v98);
            }
            else
            {
              *(_QWORD *)v27 = v26;
              v29 = v27 + 8;
            }
            v25[410] = v29;
            break;
          case 'i':
            v30 = *(_QWORD **)a1[2];
            v31 = *(_WORD *)(a1[3] + 24) & 0x7FFF;
            v32 = (char *)v30[413];
            v33 = v30[414];
            if ((unint64_t)v32 >= v33)
            {
              v104 = (char *)v30[412];
              v105 = (v32 - v104) >> 3;
              if ((unint64_t)(v105 + 1) >> 61)
                goto LABEL_270;
              v106 = v33 - (_QWORD)v104;
              v107 = (uint64_t)(v33 - (_QWORD)v104) >> 2;
              if (v107 <= v105 + 1)
                v107 = v105 + 1;
              if (v106 >= 0x7FFFFFFFFFFFFFF8)
                v108 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v108 = v107;
              if (v108)
              {
                v109 = (char *)sub_40FC((uint64_t)(v30 + 414), v108);
                v32 = (char *)v30[413];
                v104 = (char *)v30[412];
              }
              else
              {
                v109 = 0;
              }
              v172 = &v109[8 * v105];
              *(_QWORD *)v172 = v31;
              v34 = v172 + 8;
              while (v32 != v104)
              {
                v173 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v172 - 1) = v173;
                v172 -= 8;
              }
              v30[412] = v172;
              v30[413] = v34;
              v30[414] = &v109[8 * v108];
              if (v104)
                operator delete(v104);
            }
            else
            {
              *(_QWORD *)v32 = v31;
              v34 = v32 + 8;
            }
            v30[413] = v34;
            break;
          case 'j':
            v35 = *(_QWORD **)a1[2];
            v36 = *(_WORD *)(a1[3] + 32) & 0x7FFF;
            v37 = (char *)v35[416];
            v38 = v35[417];
            if ((unint64_t)v37 >= v38)
            {
              v110 = (char *)v35[415];
              v111 = (v37 - v110) >> 3;
              if ((unint64_t)(v111 + 1) >> 61)
                goto LABEL_270;
              v112 = v38 - (_QWORD)v110;
              v113 = (uint64_t)(v38 - (_QWORD)v110) >> 2;
              if (v113 <= v111 + 1)
                v113 = v111 + 1;
              if (v112 >= 0x7FFFFFFFFFFFFFF8)
                v114 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v114 = v113;
              if (v114)
              {
                v115 = (char *)sub_40FC((uint64_t)(v35 + 417), v114);
                v37 = (char *)v35[416];
                v110 = (char *)v35[415];
              }
              else
              {
                v115 = 0;
              }
              v174 = &v115[8 * v111];
              *(_QWORD *)v174 = v36;
              v39 = v174 + 8;
              while (v37 != v110)
              {
                v175 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v174 - 1) = v175;
                v174 -= 8;
              }
              v35[415] = v174;
              v35[416] = v39;
              v35[417] = &v115[8 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *(_QWORD *)v37 = v36;
              v39 = v37 + 8;
            }
            v35[416] = v39;
            break;
          case 'k':
            v40 = *(_QWORD **)a1[2];
            v41 = *(_WORD *)(a1[3] + 26) & 0x7FFF;
            v42 = (char *)v40[419];
            v43 = v40[420];
            if ((unint64_t)v42 >= v43)
            {
              v116 = (char *)v40[418];
              v117 = (v42 - v116) >> 3;
              if ((unint64_t)(v117 + 1) >> 61)
                goto LABEL_270;
              v118 = v43 - (_QWORD)v116;
              v119 = (uint64_t)(v43 - (_QWORD)v116) >> 2;
              if (v119 <= v117 + 1)
                v119 = v117 + 1;
              if (v118 >= 0x7FFFFFFFFFFFFFF8)
                v120 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v120 = v119;
              if (v120)
              {
                v121 = (char *)sub_40FC((uint64_t)(v40 + 420), v120);
                v42 = (char *)v40[419];
                v116 = (char *)v40[418];
              }
              else
              {
                v121 = 0;
              }
              v176 = &v121[8 * v117];
              *(_QWORD *)v176 = v41;
              v44 = v176 + 8;
              while (v42 != v116)
              {
                v177 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v176 - 1) = v177;
                v176 -= 8;
              }
              v40[418] = v176;
              v40[419] = v44;
              v40[420] = &v121[8 * v120];
              if (v116)
                operator delete(v116);
            }
            else
            {
              *(_QWORD *)v42 = v41;
              v44 = v42 + 8;
            }
            v40[419] = v44;
            break;
          case 'l':
            v45 = *(_QWORD **)a1[2];
            v46 = *(_WORD *)(a1[3] + 38) & 0x7FFF;
            v47 = (char *)v45[422];
            v48 = v45[423];
            if ((unint64_t)v47 >= v48)
            {
              v122 = (char *)v45[421];
              v123 = (v47 - v122) >> 3;
              if ((unint64_t)(v123 + 1) >> 61)
                goto LABEL_270;
              v124 = v48 - (_QWORD)v122;
              v125 = (uint64_t)(v48 - (_QWORD)v122) >> 2;
              if (v125 <= v123 + 1)
                v125 = v123 + 1;
              if (v124 >= 0x7FFFFFFFFFFFFFF8)
                v126 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v126 = v125;
              if (v126)
              {
                v127 = (char *)sub_40FC((uint64_t)(v45 + 423), v126);
                v47 = (char *)v45[422];
                v122 = (char *)v45[421];
              }
              else
              {
                v127 = 0;
              }
              v178 = &v127[8 * v123];
              *(_QWORD *)v178 = v46;
              v49 = v178 + 8;
              while (v47 != v122)
              {
                v179 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v178 - 1) = v179;
                v178 -= 8;
              }
              v45[421] = v178;
              v45[422] = v49;
              v45[423] = &v127[8 * v126];
              if (v122)
                operator delete(v122);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[422] = v49;
            break;
          case 'm':
            v50 = *(_QWORD **)a1[2];
            v51 = *(_WORD *)(a1[3] + 34) & 0x7FFF;
            v52 = (char *)v50[425];
            v53 = v50[426];
            if ((unint64_t)v52 >= v53)
            {
              v128 = (char *)v50[424];
              v129 = (v52 - v128) >> 3;
              if ((unint64_t)(v129 + 1) >> 61)
                goto LABEL_270;
              v130 = v53 - (_QWORD)v128;
              v131 = (uint64_t)(v53 - (_QWORD)v128) >> 2;
              if (v131 <= v129 + 1)
                v131 = v129 + 1;
              if (v130 >= 0x7FFFFFFFFFFFFFF8)
                v132 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v132 = v131;
              if (v132)
              {
                v133 = (char *)sub_40FC((uint64_t)(v50 + 426), v132);
                v52 = (char *)v50[425];
                v128 = (char *)v50[424];
              }
              else
              {
                v133 = 0;
              }
              v180 = &v133[8 * v129];
              *(_QWORD *)v180 = v51;
              v54 = v180 + 8;
              while (v52 != v128)
              {
                v181 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v180 - 1) = v181;
                v180 -= 8;
              }
              v50[424] = v180;
              v50[425] = v54;
              v50[426] = &v133[8 * v132];
              if (v128)
                operator delete(v128);
            }
            else
            {
              *(_QWORD *)v52 = v51;
              v54 = v52 + 8;
            }
            v50[425] = v54;
            break;
          case 'n':
            v55 = *(_QWORD **)a1[2];
            v56 = *(_WORD *)(a1[3] + 28) & 0x7FFF;
            v57 = (char *)v55[428];
            v58 = v55[429];
            if ((unint64_t)v57 >= v58)
            {
              v134 = (char *)v55[427];
              v135 = (v57 - v134) >> 3;
              if ((unint64_t)(v135 + 1) >> 61)
                goto LABEL_270;
              v136 = v58 - (_QWORD)v134;
              v137 = (uint64_t)(v58 - (_QWORD)v134) >> 2;
              if (v137 <= v135 + 1)
                v137 = v135 + 1;
              if (v136 >= 0x7FFFFFFFFFFFFFF8)
                v138 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v138 = v137;
              if (v138)
              {
                v139 = (char *)sub_40FC((uint64_t)(v55 + 429), v138);
                v57 = (char *)v55[428];
                v134 = (char *)v55[427];
              }
              else
              {
                v139 = 0;
              }
              v182 = &v139[8 * v135];
              *(_QWORD *)v182 = v56;
              v59 = v182 + 8;
              while (v57 != v134)
              {
                v183 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v182 - 1) = v183;
                v182 -= 8;
              }
              v55[427] = v182;
              v55[428] = v59;
              v55[429] = &v139[8 * v138];
              if (v134)
                operator delete(v134);
            }
            else
            {
              *(_QWORD *)v57 = v56;
              v59 = v57 + 8;
            }
            v55[428] = v59;
            break;
          case 'o':
            v60 = *(_QWORD **)a1[2];
            v61 = *(_WORD *)(a1[3] + 40) & 0x7FFF;
            v62 = (char *)v60[431];
            v63 = v60[432];
            if ((unint64_t)v62 >= v63)
            {
              v140 = (char *)v60[430];
              v141 = (v62 - v140) >> 3;
              if ((unint64_t)(v141 + 1) >> 61)
                goto LABEL_270;
              v142 = v63 - (_QWORD)v140;
              v143 = (uint64_t)(v63 - (_QWORD)v140) >> 2;
              if (v143 <= v141 + 1)
                v143 = v141 + 1;
              if (v142 >= 0x7FFFFFFFFFFFFFF8)
                v144 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v144 = v143;
              if (v144)
              {
                v145 = (char *)sub_40FC((uint64_t)(v60 + 432), v144);
                v62 = (char *)v60[431];
                v140 = (char *)v60[430];
              }
              else
              {
                v145 = 0;
              }
              v184 = &v145[8 * v141];
              *(_QWORD *)v184 = v61;
              v64 = v184 + 8;
              while (v62 != v140)
              {
                v185 = *((_QWORD *)v62 - 1);
                v62 -= 8;
                *((_QWORD *)v184 - 1) = v185;
                v184 -= 8;
              }
              v60[430] = v184;
              v60[431] = v64;
              v60[432] = &v145[8 * v144];
              if (v140)
                operator delete(v140);
            }
            else
            {
              *(_QWORD *)v62 = v61;
              v64 = v62 + 8;
            }
            v60[431] = v64;
            break;
          case 'p':
            v65 = *(_QWORD **)a1[2];
            v66 = *(_WORD *)(a1[3] + 36) & 0x7FFF;
            v67 = (char *)v65[434];
            v68 = v65[435];
            if ((unint64_t)v67 >= v68)
            {
              v146 = (char *)v65[433];
              v147 = (v67 - v146) >> 3;
              if ((unint64_t)(v147 + 1) >> 61)
                goto LABEL_270;
              v148 = v68 - (_QWORD)v146;
              v149 = (uint64_t)(v68 - (_QWORD)v146) >> 2;
              if (v149 <= v147 + 1)
                v149 = v147 + 1;
              if (v148 >= 0x7FFFFFFFFFFFFFF8)
                v150 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v150 = v149;
              if (v150)
              {
                v151 = (char *)sub_40FC((uint64_t)(v65 + 435), v150);
                v67 = (char *)v65[434];
                v146 = (char *)v65[433];
              }
              else
              {
                v151 = 0;
              }
              v186 = &v151[8 * v147];
              *(_QWORD *)v186 = v66;
              v69 = v186 + 8;
              while (v67 != v146)
              {
                v187 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v186 - 1) = v187;
                v186 -= 8;
              }
              v65[433] = v186;
              v65[434] = v69;
              v65[435] = &v151[8 * v150];
              if (v146)
                operator delete(v146);
            }
            else
            {
              *(_QWORD *)v67 = v66;
              v69 = v67 + 8;
            }
            v65[434] = v69;
            break;
          case 'q':
            v70 = *(_QWORD **)a1[2];
            v71 = ((unint64_t)*(unsigned __int16 *)(a1[3] + 20) >> 1) & 0x3FFF;
            v72 = (unint64_t *)v70[437];
            v73 = v70[438];
            if ((unint64_t)v72 >= v73)
            {
              v152 = (unint64_t *)v70[436];
              v153 = v72 - v152;
              if ((unint64_t)(v153 + 1) >> 61)
                goto LABEL_270;
              v154 = v73 - (_QWORD)v152;
              v155 = (uint64_t)(v73 - (_QWORD)v152) >> 2;
              if (v155 <= v153 + 1)
                v155 = v153 + 1;
              if (v154 >= 0x7FFFFFFFFFFFFFF8)
                v156 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v156 = v155;
              if (v156)
              {
                v157 = (char *)sub_40FC((uint64_t)(v70 + 438), v156);
                v72 = (unint64_t *)v70[437];
                v152 = (unint64_t *)v70[436];
              }
              else
              {
                v157 = 0;
              }
              v188 = (unint64_t *)&v157[8 * v153];
              *v188 = v71;
              v74 = v188 + 1;
              while (v72 != v152)
              {
                v189 = *--v72;
                *--v188 = v189;
              }
              v70[436] = v188;
              v70[437] = v74;
              v70[438] = &v157[8 * v156];
              if (v152)
                operator delete(v152);
            }
            else
            {
              *v72 = v71;
              v74 = v72 + 1;
            }
            v70[437] = v74;
            break;
          case 'r':
            v75 = *(_QWORD **)a1[2];
            v76 = *(_WORD *)(a1[3] + 46) & 0x7FFF;
            v77 = (char *)v75[440];
            v78 = v75[441];
            if ((unint64_t)v77 >= v78)
            {
              v158 = (char *)v75[439];
              v159 = (v77 - v158) >> 3;
              if ((unint64_t)(v159 + 1) >> 61)
LABEL_270:
                sub_4074();
              v160 = v78 - (_QWORD)v158;
              v161 = (uint64_t)(v78 - (_QWORD)v158) >> 2;
              if (v161 <= v159 + 1)
                v161 = v159 + 1;
              if (v160 >= 0x7FFFFFFFFFFFFFF8)
                v162 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v162 = v161;
              if (v162)
              {
                v163 = (char *)sub_40FC((uint64_t)(v75 + 441), v162);
                v77 = (char *)v75[440];
                v158 = (char *)v75[439];
              }
              else
              {
                v163 = 0;
              }
              v190 = &v163[8 * v159];
              *(_QWORD *)v190 = v76;
              v79 = v190 + 8;
              while (v77 != v158)
              {
                v191 = *((_QWORD *)v77 - 1);
                v77 -= 8;
                *((_QWORD *)v190 - 1) = v191;
                v190 -= 8;
              }
              v75[439] = v190;
              v75[440] = v79;
              v75[441] = &v163[8 * v162];
              if (v158)
                operator delete(v158);
            }
            else
            {
              *(_QWORD *)v77 = v76;
              v79 = v77 + 8;
            }
            v75[440] = v79;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_EFAC8(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  uint64_t *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  int *v190;
  int **v191;
  uint64_t v192;
  unint64_t v193;
  int v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  __int128 v198;

  v4 = *a1;
  if (*a2 == 1)
  {
    v191 = (int **)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v190 = *v191;
    v192 = (char *)v191[1] - (char *)*v191;
    if (v192)
    {
      v193 = v192 >> 2;
      if (v193 <= 1)
        v193 = 1;
      do
      {
        v194 = *v190++;
        switch(v194)
        {
          case 'X':
            v195 = *(_DWORD *)(a1[3] + 48) & 0x7FFFF;
            v196 = (_QWORD *)(*(_QWORD *)a1[2] + 2896);
            goto LABEL_248;
          case 'Y':
            v195 = *(unsigned __int16 *)(a1[3] + 22);
            v196 = (_QWORD *)(*(_QWORD *)a1[2] + 2920);
            goto LABEL_248;
          case 'Z':
            v195 = *(unsigned __int16 *)(a1[3] + 32);
            v196 = (_QWORD *)(*(_QWORD *)a1[2] + 2944);
            goto LABEL_248;
          case '[':
            v195 = *(unsigned __int16 *)(a1[3] + 24);
            v196 = (_QWORD *)(*(_QWORD *)a1[2] + 2968);
            goto LABEL_248;
          case '\\':
            v195 = *(unsigned __int16 *)(a1[3] + 34);
            v196 = (_QWORD *)(*(_QWORD *)a1[2] + 2992);
            goto LABEL_248;
          case ']':
            v195 = *(unsigned __int16 *)(a1[3] + 26);
            v196 = (_QWORD *)(*(_QWORD *)a1[2] + 3016);
            goto LABEL_248;
          case '^':
            v195 = (unsigned __int16)WORD2(*(_QWORD *)(a1[3] + 38));
            v196 = (_QWORD *)(*(_QWORD *)a1[2] + 3040);
            goto LABEL_248;
          case '_':
            v195 = WORD1(*(_QWORD *)(a1[3] + 38));
            v196 = (_QWORD *)(*(_QWORD *)a1[2] + 3064);
            goto LABEL_248;
            v195 = *(unsigned __int16 *)(a1[3] + 36);
            v196 = (_QWORD *)(*(_QWORD *)a1[2] + 3088);
            goto LABEL_248;
          case 'a':
            v195 = *(unsigned __int16 *)(a1[3] + 28);
            v196 = (_QWORD *)(*(_QWORD *)a1[2] + 3112);
            goto LABEL_248;
          case 'b':
            v195 = *(unsigned __int16 *)(a1[3] + 38);
            v196 = (_QWORD *)(*(_QWORD *)a1[2] + 3136);
            goto LABEL_248;
          case 'c':
            v195 = *(unsigned __int16 *)(a1[3] + 30);
            v196 = (_QWORD *)(*(_QWORD *)a1[2] + 3160);
            goto LABEL_248;
          case 'd':
            v197 = a1[3];
            *((_QWORD *)&v198 + 1) = *(unsigned __int8 *)(v197 + 46);
            *(_QWORD *)&v198 = *(_QWORD *)(v197 + 38);
            v195 = (v198 >> 48) & 0xFFFFF;
            v196 = (_QWORD *)(*(_QWORD *)a1[2] + 3184);
LABEL_248:
            *(_QWORD *)(*v196 - 8) += v195;
            break;
          default:
            break;
        }
        --v193;
      }
      while (v193);
    }
  }
  else
  {
    if (*a2)
      return;
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 136) + 24 * *(unsigned int *)a1[1]);
    v6 = v5[1] - *v5;
    if (v6)
    {
      v7 = 0;
      v8 = v6 >> 2;
      if (v8 <= 1)
        v9 = 1;
      else
        v9 = v8;
      do
      {
        switch(*(_DWORD *)(*v5 + 4 * v7))
        {
          case 'X':
            v10 = *(_QWORD **)a1[2];
            v11 = *(_DWORD *)(a1[3] + 48) & 0x7FFFFLL;
            v12 = (uint64_t *)v10[362];
            v13 = v10[363];
            if ((unint64_t)v12 >= v13)
            {
              v86 = (uint64_t *)v10[361];
              v87 = v12 - v86;
              if ((unint64_t)(v87 + 1) >> 61)
                goto LABEL_252;
              v88 = v13 - (_QWORD)v86;
              v89 = (uint64_t)(v13 - (_QWORD)v86) >> 2;
              if (v89 <= v87 + 1)
                v89 = v87 + 1;
              if (v88 >= 0x7FFFFFFFFFFFFFF8)
                v90 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v90 = v89;
              if (v90)
              {
                v91 = (char *)sub_40FC((uint64_t)(v10 + 363), v90);
                v12 = (uint64_t *)v10[362];
                v86 = (uint64_t *)v10[361];
              }
              else
              {
                v91 = 0;
              }
              v164 = (uint64_t *)&v91[8 * v87];
              *v164 = v11;
              v14 = v164 + 1;
              while (v12 != v86)
              {
                v165 = *--v12;
                *--v164 = v165;
              }
              v10[361] = v164;
              v10[362] = v14;
              v10[363] = &v91[8 * v90];
              if (v86)
                operator delete(v86);
            }
            else
            {
              *v12 = v11;
              v14 = v12 + 1;
            }
            v10[362] = v14;
            break;
          case 'Y':
            v15 = a1[2];
            v16 = *(_QWORD **)v15;
            v17 = *(unsigned __int16 *)(a1[3] + 22);
            v18 = *(char **)(*(_QWORD *)v15 + 2920);
            v19 = *(_QWORD *)(*(_QWORD *)v15 + 2928);
            if ((unint64_t)v18 >= v19)
            {
              v92 = (char *)v16[364];
              v93 = (v18 - v92) >> 3;
              if ((unint64_t)(v93 + 1) >> 61)
                goto LABEL_252;
              v94 = v19 - (_QWORD)v92;
              v95 = (uint64_t)(v19 - (_QWORD)v92) >> 2;
              if (v95 <= v93 + 1)
                v95 = v93 + 1;
              if (v94 >= 0x7FFFFFFFFFFFFFF8)
                v96 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v96 = v95;
              if (v96)
              {
                v97 = (char *)sub_40FC((uint64_t)(v16 + 366), v96);
                v18 = (char *)v16[365];
                v92 = (char *)v16[364];
              }
              else
              {
                v97 = 0;
              }
              v166 = &v97[8 * v93];
              *(_QWORD *)v166 = v17;
              v20 = v166 + 8;
              while (v18 != v92)
              {
                v167 = *((_QWORD *)v18 - 1);
                v18 -= 8;
                *((_QWORD *)v166 - 1) = v167;
                v166 -= 8;
              }
              v16[364] = v166;
              v16[365] = v20;
              v16[366] = &v97[8 * v96];
              if (v92)
                operator delete(v92);
            }
            else
            {
              *(_QWORD *)v18 = v17;
              v20 = v18 + 8;
            }
            v16[365] = v20;
            break;
          case 'Z':
            v21 = a1[2];
            v22 = *(_QWORD **)v21;
            v23 = *(unsigned __int16 *)(a1[3] + 32);
            v24 = *(char **)(*(_QWORD *)v21 + 2944);
            v25 = *(_QWORD *)(*(_QWORD *)v21 + 2952);
            if ((unint64_t)v24 >= v25)
            {
              v98 = (char *)v22[367];
              v99 = (v24 - v98) >> 3;
              if ((unint64_t)(v99 + 1) >> 61)
                goto LABEL_252;
              v100 = v25 - (_QWORD)v98;
              v101 = (uint64_t)(v25 - (_QWORD)v98) >> 2;
              if (v101 <= v99 + 1)
                v101 = v99 + 1;
              if (v100 >= 0x7FFFFFFFFFFFFFF8)
                v102 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v102 = v101;
              if (v102)
              {
                v103 = (char *)sub_40FC((uint64_t)(v22 + 369), v102);
                v24 = (char *)v22[368];
                v98 = (char *)v22[367];
              }
              else
              {
                v103 = 0;
              }
              v168 = &v103[8 * v99];
              *(_QWORD *)v168 = v23;
              v26 = v168 + 8;
              while (v24 != v98)
              {
                v169 = *((_QWORD *)v24 - 1);
                v24 -= 8;
                *((_QWORD *)v168 - 1) = v169;
                v168 -= 8;
              }
              v22[367] = v168;
              v22[368] = v26;
              v22[369] = &v103[8 * v102];
              if (v98)
                operator delete(v98);
            }
            else
            {
              *(_QWORD *)v24 = v23;
              v26 = v24 + 8;
            }
            v22[368] = v26;
            break;
          case '[':
            v27 = a1[2];
            v28 = *(_QWORD **)v27;
            v29 = *(unsigned __int16 *)(a1[3] + 24);
            v30 = *(char **)(*(_QWORD *)v27 + 2968);
            v31 = *(_QWORD *)(*(_QWORD *)v27 + 2976);
            if ((unint64_t)v30 >= v31)
            {
              v104 = (char *)v28[370];
              v105 = (v30 - v104) >> 3;
              if ((unint64_t)(v105 + 1) >> 61)
                goto LABEL_252;
              v106 = v31 - (_QWORD)v104;
              v107 = (uint64_t)(v31 - (_QWORD)v104) >> 2;
              if (v107 <= v105 + 1)
                v107 = v105 + 1;
              if (v106 >= 0x7FFFFFFFFFFFFFF8)
                v108 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v108 = v107;
              if (v108)
              {
                v109 = (char *)sub_40FC((uint64_t)(v28 + 372), v108);
                v30 = (char *)v28[371];
                v104 = (char *)v28[370];
              }
              else
              {
                v109 = 0;
              }
              v170 = &v109[8 * v105];
              *(_QWORD *)v170 = v29;
              v32 = v170 + 8;
              while (v30 != v104)
              {
                v171 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *((_QWORD *)v170 - 1) = v171;
                v170 -= 8;
              }
              v28[370] = v170;
              v28[371] = v32;
              v28[372] = &v109[8 * v108];
              if (v104)
                operator delete(v104);
            }
            else
            {
              *(_QWORD *)v30 = v29;
              v32 = v30 + 8;
            }
            v28[371] = v32;
            break;
          case '\\':
            v33 = a1[2];
            v34 = *(_QWORD **)v33;
            v35 = *(unsigned __int16 *)(a1[3] + 34);
            v36 = *(char **)(*(_QWORD *)v33 + 2992);
            v37 = *(_QWORD *)(*(_QWORD *)v33 + 3000);
            if ((unint64_t)v36 >= v37)
            {
              v110 = (char *)v34[373];
              v111 = (v36 - v110) >> 3;
              if ((unint64_t)(v111 + 1) >> 61)
                goto LABEL_252;
              v112 = v37 - (_QWORD)v110;
              v113 = (uint64_t)(v37 - (_QWORD)v110) >> 2;
              if (v113 <= v111 + 1)
                v113 = v111 + 1;
              if (v112 >= 0x7FFFFFFFFFFFFFF8)
                v114 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v114 = v113;
              if (v114)
              {
                v115 = (char *)sub_40FC((uint64_t)(v34 + 375), v114);
                v36 = (char *)v34[374];
                v110 = (char *)v34[373];
              }
              else
              {
                v115 = 0;
              }
              v172 = &v115[8 * v111];
              *(_QWORD *)v172 = v35;
              v38 = v172 + 8;
              while (v36 != v110)
              {
                v173 = *((_QWORD *)v36 - 1);
                v36 -= 8;
                *((_QWORD *)v172 - 1) = v173;
                v172 -= 8;
              }
              v34[373] = v172;
              v34[374] = v38;
              v34[375] = &v115[8 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *(_QWORD *)v36 = v35;
              v38 = v36 + 8;
            }
            v34[374] = v38;
            break;
          case ']':
            v39 = a1[2];
            v40 = *(_QWORD **)v39;
            v41 = *(unsigned __int16 *)(a1[3] + 26);
            v42 = *(char **)(*(_QWORD *)v39 + 3016);
            v43 = *(_QWORD *)(*(_QWORD *)v39 + 3024);
            if ((unint64_t)v42 >= v43)
            {
              v116 = (char *)v40[376];
              v117 = (v42 - v116) >> 3;
              if ((unint64_t)(v117 + 1) >> 61)
                goto LABEL_252;
              v118 = v43 - (_QWORD)v116;
              v119 = (uint64_t)(v43 - (_QWORD)v116) >> 2;
              if (v119 <= v117 + 1)
                v119 = v117 + 1;
              if (v118 >= 0x7FFFFFFFFFFFFFF8)
                v120 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v120 = v119;
              if (v120)
              {
                v121 = (char *)sub_40FC((uint64_t)(v40 + 378), v120);
                v42 = (char *)v40[377];
                v116 = (char *)v40[376];
              }
              else
              {
                v121 = 0;
              }
              v174 = &v121[8 * v117];
              *(_QWORD *)v174 = v41;
              v44 = v174 + 8;
              while (v42 != v116)
              {
                v175 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v174 - 1) = v175;
                v174 -= 8;
              }
              v40[376] = v174;
              v40[377] = v44;
              v40[378] = &v121[8 * v120];
              if (v116)
                operator delete(v116);
            }
            else
            {
              *(_QWORD *)v42 = v41;
              v44 = v42 + 8;
            }
            v40[377] = v44;
            break;
          case '^':
            v45 = *(_QWORD **)a1[2];
            v46 = (unsigned __int16)WORD2(*(_QWORD *)(a1[3] + 38));
            v47 = (char *)v45[380];
            v48 = v45[381];
            if ((unint64_t)v47 >= v48)
            {
              v122 = (char *)v45[379];
              v123 = (v47 - v122) >> 3;
              if ((unint64_t)(v123 + 1) >> 61)
                goto LABEL_252;
              v124 = v48 - (_QWORD)v122;
              v125 = (uint64_t)(v48 - (_QWORD)v122) >> 2;
              if (v125 <= v123 + 1)
                v125 = v123 + 1;
              if (v124 >= 0x7FFFFFFFFFFFFFF8)
                v126 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v126 = v125;
              if (v126)
              {
                v127 = (char *)sub_40FC((uint64_t)(v45 + 381), v126);
                v47 = (char *)v45[380];
                v122 = (char *)v45[379];
              }
              else
              {
                v127 = 0;
              }
              v176 = &v127[8 * v123];
              *(_QWORD *)v176 = v46;
              v49 = v176 + 8;
              while (v47 != v122)
              {
                v177 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v176 - 1) = v177;
                v176 -= 8;
              }
              v45[379] = v176;
              v45[380] = v49;
              v45[381] = &v127[8 * v126];
              if (v122)
                operator delete(v122);
            }
            else
            {
              *(_QWORD *)v47 = v46;
              v49 = v47 + 8;
            }
            v45[380] = v49;
            break;
          case '_':
            v50 = *(_QWORD **)a1[2];
            v51 = WORD1(*(_QWORD *)(a1[3] + 38));
            v52 = (char *)v50[383];
            v53 = v50[384];
            if ((unint64_t)v52 >= v53)
            {
              v128 = (char *)v50[382];
              v129 = (v52 - v128) >> 3;
              if ((unint64_t)(v129 + 1) >> 61)
                goto LABEL_252;
              v130 = v53 - (_QWORD)v128;
              v131 = (uint64_t)(v53 - (_QWORD)v128) >> 2;
              if (v131 <= v129 + 1)
                v131 = v129 + 1;
              if (v130 >= 0x7FFFFFFFFFFFFFF8)
                v132 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v132 = v131;
              if (v132)
              {
                v133 = (char *)sub_40FC((uint64_t)(v50 + 384), v132);
                v52 = (char *)v50[383];
                v128 = (char *)v50[382];
              }
              else
              {
                v133 = 0;
              }
              v178 = &v133[8 * v129];
              *(_QWORD *)v178 = v51;
              v54 = v178 + 8;
              while (v52 != v128)
              {
                v179 = *((_QWORD *)v52 - 1);
                v52 -= 8;
                *((_QWORD *)v178 - 1) = v179;
                v178 -= 8;
              }
              v50[382] = v178;
              v50[383] = v54;
              v50[384] = &v133[8 * v132];
              if (v128)
                operator delete(v128);
            }
            else
            {
              *(_QWORD *)v52 = v51;
              v54 = v52 + 8;
            }
            v50[383] = v54;
            break;
            v55 = a1[2];
            v56 = *(_QWORD **)v55;
            v57 = *(unsigned __int16 *)(a1[3] + 36);
            v58 = *(char **)(*(_QWORD *)v55 + 3088);
            v59 = *(_QWORD *)(*(_QWORD *)v55 + 3096);
            if ((unint64_t)v58 >= v59)
            {
              v134 = (char *)v56[385];
              v135 = (v58 - v134) >> 3;
              if ((unint64_t)(v135 + 1) >> 61)
                goto LABEL_252;
              v136 = v59 - (_QWORD)v134;
              v137 = (uint64_t)(v59 - (_QWORD)v134) >> 2;
              if (v137 <= v135 + 1)
                v137 = v135 + 1;
              if (v136 >= 0x7FFFFFFFFFFFFFF8)
                v138 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v138 = v137;
              if (v138)
              {
                v139 = (char *)sub_40FC((uint64_t)(v56 + 387), v138);
                v58 = (char *)v56[386];
                v134 = (char *)v56[385];
              }
              else
              {
                v139 = 0;
              }
              v180 = &v139[8 * v135];
              *(_QWORD *)v180 = v57;
              v60 = v180 + 8;
              while (v58 != v134)
              {
                v181 = *((_QWORD *)v58 - 1);
                v58 -= 8;
                *((_QWORD *)v180 - 1) = v181;
                v180 -= 8;
              }
              v56[385] = v180;
              v56[386] = v60;
              v56[387] = &v139[8 * v138];
              if (v134)
                operator delete(v134);
            }
            else
            {
              *(_QWORD *)v58 = v57;
              v60 = v58 + 8;
            }
            v56[386] = v60;
            break;
          case 'a':
            v61 = a1[2];
            v62 = *(_QWORD **)v61;
            v63 = *(unsigned __int16 *)(a1[3] + 28);
            v64 = *(char **)(*(_QWORD *)v61 + 3112);
            v65 = *(_QWORD *)(*(_QWORD *)v61 + 3120);
            if ((unint64_t)v64 >= v65)
            {
              v140 = (char *)v62[388];
              v141 = (v64 - v140) >> 3;
              if ((unint64_t)(v141 + 1) >> 61)
                goto LABEL_252;
              v142 = v65 - (_QWORD)v140;
              v143 = (uint64_t)(v65 - (_QWORD)v140) >> 2;
              if (v143 <= v141 + 1)
                v143 = v141 + 1;
              if (v142 >= 0x7FFFFFFFFFFFFFF8)
                v144 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v144 = v143;
              if (v144)
              {
                v145 = (char *)sub_40FC((uint64_t)(v62 + 390), v144);
                v64 = (char *)v62[389];
                v140 = (char *)v62[388];
              }
              else
              {
                v145 = 0;
              }
              v182 = &v145[8 * v141];
              *(_QWORD *)v182 = v63;
              v66 = v182 + 8;
              while (v64 != v140)
              {
                v183 = *((_QWORD *)v64 - 1);
                v64 -= 8;
                *((_QWORD *)v182 - 1) = v183;
                v182 -= 8;
              }
              v62[388] = v182;
              v62[389] = v66;
              v62[390] = &v145[8 * v144];
              if (v140)
                operator delete(v140);
            }
            else
            {
              *(_QWORD *)v64 = v63;
              v66 = v64 + 8;
            }
            v62[389] = v66;
            break;
          case 'b':
            v67 = a1[2];
            v68 = *(_QWORD **)v67;
            v69 = *(unsigned __int16 *)(a1[3] + 38);
            v70 = *(char **)(*(_QWORD *)v67 + 3136);
            v71 = *(_QWORD *)(*(_QWORD *)v67 + 3144);
            if ((unint64_t)v70 >= v71)
            {
              v146 = (char *)v68[391];
              v147 = (v70 - v146) >> 3;
              if ((unint64_t)(v147 + 1) >> 61)
                goto LABEL_252;
              v148 = v71 - (_QWORD)v146;
              v149 = (uint64_t)(v71 - (_QWORD)v146) >> 2;
              if (v149 <= v147 + 1)
                v149 = v147 + 1;
              if (v148 >= 0x7FFFFFFFFFFFFFF8)
                v150 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v150 = v149;
              if (v150)
              {
                v151 = (char *)sub_40FC((uint64_t)(v68 + 393), v150);
                v70 = (char *)v68[392];
                v146 = (char *)v68[391];
              }
              else
              {
                v151 = 0;
              }
              v184 = &v151[8 * v147];
              *(_QWORD *)v184 = v69;
              v72 = v184 + 8;
              while (v70 != v146)
              {
                v185 = *((_QWORD *)v70 - 1);
                v70 -= 8;
                *((_QWORD *)v184 - 1) = v185;
                v184 -= 8;
              }
              v68[391] = v184;
              v68[392] = v72;
              v68[393] = &v151[8 * v150];
              if (v146)
                operator delete(v146);
            }
            else
            {
              *(_QWORD *)v70 = v69;
              v72 = v70 + 8;
            }
            v68[392] = v72;
            break;
          case 'c':
            v73 = a1[2];
            v74 = *(_QWORD **)v73;
            v75 = *(unsigned __int16 *)(a1[3] + 30);
            v76 = *(char **)(*(_QWORD *)v73 + 3160);
            v77 = *(_QWORD *)(*(_QWORD *)v73 + 3168);
            if ((unint64_t)v76 >= v77)
            {
              v152 = (char *)v74[394];
              v153 = (v76 - v152) >> 3;
              if ((unint64_t)(v153 + 1) >> 61)
                goto LABEL_252;
              v154 = v77 - (_QWORD)v152;
              v155 = (uint64_t)(v77 - (_QWORD)v152) >> 2;
              if (v155 <= v153 + 1)
                v155 = v153 + 1;
              if (v154 >= 0x7FFFFFFFFFFFFFF8)
                v156 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v156 = v155;
              if (v156)
              {
                v157 = (char *)sub_40FC((uint64_t)(v74 + 396), v156);
                v76 = (char *)v74[395];
                v152 = (char *)v74[394];
              }
              else
              {
                v157 = 0;
              }
              v186 = &v157[8 * v153];
              *(_QWORD *)v186 = v75;
              v78 = v186 + 8;
              while (v76 != v152)
              {
                v187 = *((_QWORD *)v76 - 1);
                v76 -= 8;
                *((_QWORD *)v186 - 1) = v187;
                v186 -= 8;
              }
              v74[394] = v186;
              v74[395] = v78;
              v74[396] = &v157[8 * v156];
              if (v152)
                operator delete(v152);
            }
            else
            {
              *(_QWORD *)v76 = v75;
              v78 = v76 + 8;
            }
            v74[395] = v78;
            break;
          case 'd':
            v79 = a1[3];
            v80 = *(_QWORD **)a1[2];
            *((_QWORD *)&v81 + 1) = *(unsigned __int8 *)(v79 + 46);
            *(_QWORD *)&v81 = *(_QWORD *)(v79 + 38);
            v82 = (v81 >> 48) & 0xFFFFF;
            v83 = (char *)v80[398];
            v84 = v80[399];
            if ((unint64_t)v83 >= v84)
            {
              v158 = (char *)v80[397];
              v159 = (v83 - v158) >> 3;
              if ((unint64_t)(v159 + 1) >> 61)
LABEL_252:
                sub_4074();
              v160 = v84 - (_QWORD)v158;
              v161 = (uint64_t)(v84 - (_QWORD)v158) >> 2;
              if (v161 <= v159 + 1)
                v161 = v159 + 1;
              if (v160 >= 0x7FFFFFFFFFFFFFF8)
                v162 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v162 = v161;
              if (v162)
              {
                v163 = (char *)sub_40FC((uint64_t)(v80 + 399), v162);
                v83 = (char *)v80[398];
                v158 = (char *)v80[397];
              }
              else
              {
                v163 = 0;
              }
              v188 = &v163[8 * v159];
              *(_QWORD *)v188 = v82;
              v85 = v188 + 8;
              while (v83 != v158)
              {
                v189 = *((_QWORD *)v83 - 1);
                v83 -= 8;
                *((_QWORD *)v188 - 1) = v189;
                v188 -= 8;
              }
              v80[397] = v188;
              v80[398] = v85;
              v80[399] = &v163[8 * v162];
              if (v158)
                operator delete(v158);
            }
            else
            {
              *(_QWORD *)v83 = v82;
              v85 = v83 + 8;
            }
            v80[398] = v85;
            break;
          default:
            break;
        }
        ++v7;
      }
      while (v7 != v9);
    }
  }
  *a2 = 1;
}

void sub_F0714()
{
  operator delete();
}

uint64_t sub_F0728(int a1, char *__s1)
{
  uint64_t result;

  if (!__s1)
    return 298;
  result = strcmp(__s1, "F95DFFE3A1BA6540BA6B0C8C3B3B08C3D4C0BCCC082A0874526304B7CF0313EF");
  if ((_DWORD)result)
  {
    if (!strcmp(__s1, "55CEE38A63D2BFA2E2E0C34CCA91302C92577CB2B3213282D9DABC41F03D0D21"))
    {
      return 1;
    }
    else if (!strcmp(__s1, "8C878172DC559994374EED2CC5251FCD50A25BB771DEBC5FD9EE64B4665AD14D"))
    {
      return 2;
    }
    else if (!strcmp(__s1, "D56B7E7432EDA7633C4AFD6FFE777A29E7AACB6AB05EABE4DE90F2936E5B2623"))
    {
      return 3;
    }
    else if (!strcmp(__s1, "C51A7FA32CB56141CC2697BD50AA465B125331846CF486D1A23C56491C063BCA"))
    {
      return 4;
    }
    else if (!strcmp(__s1, "06233651FBD08F0066125C1134383BAF4791BCC2DFBBF905ACA71F5466ADED9B"))
    {
      return 5;
    }
    else if (!strcmp(__s1, "85F2A20F2D46E2D369470A5B664F4163FB619D3513AB222F4222C880D59B383A"))
    {
      return 6;
    }
    else if (!strcmp(__s1, "5B5DC5D95D1F90AD39F549F24C70BAC5928129DDCBB79BAB2158AA85317B2099"))
    {
      return 7;
    }
    else if (!strcmp(__s1, "1E68C8A4555F978F7EBB48C7CDE72B0B669D4FCF524878C1B09753DC85FA51C6"))
    {
      return 8;
    }
    else if (!strcmp(__s1, "C521760ABB46B43088E9E6E286368E5464F20AE90F1D698DF07C00A6FBB3D115"))
    {
      return 9;
    }
    else if (!strcmp(__s1, "D2BAB1CC9060EBB2601E0D9594280A394EF3A978788A7F144337BDE41C25A9D3"))
    {
      return 10;
    }
    else if (!strcmp(__s1, "360081D8A192D9EAB8DC6F6EAC25370B5B838CEB9F334BAC919F4CC2E7CD4ED6"))
    {
      return 11;
    }
    else if (!strcmp(__s1, "8D544DD9E94EA7D05E520E44F9BD5E58A12EACF9440D3323E8A9EBD681E1B22E"))
    {
      return 12;
    }
    else if (!strcmp(__s1, "ED33A3CBB8630DAFA661B6977D341D62361A584B83C50CE4AA9F20C77278610B"))
    {
      return 13;
    }
    else if (!strcmp(__s1, "68955CD4DD2B024A2C3B1347FAA2EE1C0FEAC9A54B834FFD798DB5B40F86EF99"))
    {
      return 14;
    }
    else if (!strcmp(__s1, "4978C08E9D3AB613EE1B8B0BDCCE4046D596D77E4B3285FD26DE51CBED95C706"))
    {
      return 15;
    }
    else if (!strcmp(__s1, "7CA95EAA0720DCB83F7592E7A95207136D0365E3259721FA97A5F2E3B189472C"))
    {
      return 16;
    }
    else if (!strcmp(__s1, "4D997B4599AD37918CEE1A51347AE6F6595A4B4F6BDB5A626BC00348DC070B38"))
    {
      return 17;
    }
    else if (!strcmp(__s1, "30CF25A160D15BDFBD79EE3DEFAF8D8673918FA6239A815D00E6989DA599205A"))
    {
      return 18;
    }
    else if (!strcmp(__s1, "A1F762436C046FC59046061C0CB7BD0DE45C222A5E57C1C47F87948850234594"))
    {
      return 19;
    }
    else if (!strcmp(__s1, "41919D0D7426716623EB2B8CEC8FEC7C0185029A4F970CA7905BA42388A97673"))
    {
      return 20;
    }
    else if (!strcmp(__s1, "4F15DAD92E0A785D745021F7B94F51521E898720D5169990597E128646A6955D"))
    {
      return 21;
    }
    else if (!strcmp(__s1, "171BC401E17487FA4D07865739044B318EEDC79CADD0317DD27D70E2BD0E5F5E"))
    {
      return 22;
    }
    else if (!strcmp(__s1, "F87F5FA1ACBE57E6A8D239141A2AEB89660AA820F4752500BE993B80E3AE6AD0"))
    {
      return 23;
    }
    else if (!strcmp(__s1, "DC2161FB676079EFF4C6F12BF10A5EE9711C91E511F1FD4709AEDD025D8A940D"))
    {
      return 24;
    }
    else if (!strcmp(__s1, "08AB4C79C0BDC9E53461A58B27E6D0E7EB2C43FF4B5F7E4DAD07415A5E112741"))
    {
      return 25;
    }
    else if (!strcmp(__s1, "6CF80B1A4946AE0C475E5E4AC168052F3850D07EBCA0C1CD0369D2D3C2C64D04"))
    {
      return 26;
    }
    else if (!strcmp(__s1, "C5491B58BB279B039FAC8C9736C09E9A33E7EC5399E387F4D13BBAE612BCA350"))
    {
      return 27;
    }
    else if (!strcmp(__s1, "D754A0D8A25FC01887EF6D4864286FB54EE1AD4C88BE01CFF4EA45226ED884B3"))
    {
      return 28;
    }
    else if (!strcmp(__s1, "EE1C44BA654C2C10C7DB0434A851DBB3103BDD9D9306720B99A54BAC5F81779F"))
    {
      return 29;
    }
    else if (!strcmp(__s1, "D7642F4CD8A1F1052D8874FFCB84623EEB5AD8DB476AAA36BB13F44E0122717D"))
    {
      return 30;
    }
    else if (!strcmp(__s1, "ECCE75AB7F80F9519A3E08E3A0EE71610AE67E3B82829786B02D98C09276F560"))
    {
      return 31;
    }
    else if (!strcmp(__s1, "0D43CB377576A411251DB7D5579117D02FC1BB178830D97B5332A806AC122B37"))
    {
      return 32;
    }
    else if (!strcmp(__s1, "9E7E7B3180DA596EBA2925972639C8DC058E97904ADA86E8FA31E691D63CA97B"))
    {
      return 33;
    }
    else if (!strcmp(__s1, "FE4E8A2782700A8DEC84E195627096B91A904FF6F486B78EF381501FB9667E0F"))
    {
      return 34;
    }
    else if (!strcmp(__s1, "35E9B0A78729DBBE416E11951D26DDC657D957CE37E23B41A2915BB6CC8CF792"))
    {
      return 35;
    }
    else if (!strcmp(__s1, "30E723A308ED187FBA1B1767CFC4B4194C6A5B389089F21A3C0995763C0B223C"))
    {
      return 36;
    }
    else if (!strcmp(__s1, "51189DA6335464233B7B06C10962008F93292B56018C07FED32661289705C6ED"))
    {
      return 37;
    }
    else if (!strcmp(__s1, "8CF1E386EE3A3B138617A8BCFBEB4D376D2B696364330A1BFD8711185D4729B3"))
    {
      return 38;
    }
    else if (!strcmp(__s1, "5C54374704E9720290CC29DD546EB2792D9D700BE3F0A1F6CCAFA3D19D8F9832"))
    {
      return 39;
    }
    else if (!strcmp(__s1, "300AF657F991E64A7D1C840E67C80384F989A47CEDCCA986B57DBE26768A2730"))
    {
      return 40;
    }
    else if (!strcmp(__s1, "3EBB72814821E8E8DB302E61197BC3AC6B0A02119FCD0C86BCFA54EB1B511AD2"))
    {
      return 41;
    }
    else if (!strcmp(__s1, "F89408CC4F2E499CED47E61E0AFD929E01C44D079ADF0B440EF845B984DE4956"))
    {
      return 42;
    }
    else if (!strcmp(__s1, "0DAB6425F1EAC005798A5E8220F97E433817AADFE2490BD4F4B762C38F20E22B"))
    {
      return 43;
    }
    else if (!strcmp(__s1, "7FD8B674D9FE018B3D64EA31CB94787780CD12317B2764B9BAFB60C975CDC8EB"))
    {
      return 44;
    }
    else if (!strcmp(__s1, "C04589D08BD1AA2481137A423CC2E81C537B75011557AB0EA579F58E489D9981"))
    {
      return 45;
    }
    else if (!strcmp(__s1, "7C3CD59A80673DD0787DF037FB1FB45E0EB635BFDB2554E10CBF5D056FEDAB78"))
    {
      return 46;
    }
    else if (!strcmp(__s1, "A1CD5E72A4CAD33DD4C2190F293103B9FD8B40FFE76B1A99A195768465964F91"))
    {
      return 47;
    }
    else if (!strcmp(__s1, "8213F897439E4E662B08D104E6437CECDC7C228913AABC2518D8AF9E0E92A4E6"))
    {
      return 48;
    }
    else if (!strcmp(__s1, "20067B98EF95585EF99A8343EF911E18D2C235A3AD20103589A20D84933F8EB0"))
    {
      return 49;
    }
    else if (!strcmp(__s1, "1FFBA951E06F1A7810DC823264210F0C13273E454D699383F3D6265630FEDD53"))
    {
      return 50;
    }
    else if (!strcmp(__s1, "3856FBD8576C0AA988700D7EF5787AAAE94A3BBFBB393B0426FA9D379DA69C91"))
    {
      return 51;
    }
    else if (!strcmp(__s1, "76F5A23AACC27615C980BE3E58B52994192195866836855BCA7C3F885796297B"))
    {
      return 52;
    }
    else if (!strcmp(__s1, "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC"))
    {
      return 53;
    }
    else if (!strcmp(__s1, "9382104F02B29DB357F4F725145F7C1FB09501D2B49FEE4E19072E37FC7BD72A"))
    {
      return 54;
    }
    else if (!strcmp(__s1, "7A1AA2B358C4A67EB5370BDD2302AF92968558ABF28AC078D6FA40D578116978"))
    {
      return 55;
    }
    else if (!strcmp(__s1, "260130B343BA0695AB911D986B3870FA0CCD0EC58E6F55895A856F37201CE9F8"))
    {
      return 56;
    }
    else if (!strcmp(__s1, "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF"))
    {
      return 57;
    }
    else if (!strcmp(__s1, "100299043F027ADADB62685130C7FBE549E29F08B58C365844FF8EC25BAEEAB0"))
    {
      return 58;
    }
    else if (!strcmp(__s1, "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D"))
    {
      return 59;
    }
    else if (!strcmp(__s1, "6E9FC9ADDBC6FDE3F223F4689164CD676FE137A81548507A1D0C44EEA6492399"))
    {
      return 60;
    }
    else if (!strcmp(__s1, "6E4B985D58D9922328978C1195CE700B9D0ADEA8B6F32EE2B50F86C993F53566"))
    {
      return 61;
    }
    else if (!strcmp(__s1, "E0A8B6C5B8F699697896183E1FAFABD9541AA90136D44C9E11F2D135A32D37D7"))
    {
      return 62;
    }
    else if (!strcmp(__s1, "904CBFF8576D1B845F2199FC58EB496E6C12A8412850799564035215C2EE4EA6"))
    {
      return 63;
    }
    else if (!strcmp(__s1, "02FFFEEC34CB4F9BB2B7187D31D98A830068967AB21581BD376B54C226438E89"))
    {
      return 64;
    }
    else if (!strcmp(__s1, "9C4011AA6D96FA382174AFD86D59DF18369E28D27CF17B9BB9ACA4FF95E40B54"))
    {
      return 65;
    }
    else if (!strcmp(__s1, "547021D0E82D62B7841769A23FC7FE04F7A63B8A0528A3F6E4C67E8B9420360E"))
    {
      return 66;
    }
    else if (!strcmp(__s1, "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033"))
    {
      return 67;
    }
    else if (!strcmp(__s1, "97C8674BCC5158E92BF4C5A05149D966851A4049E662F540F6B03D6AD581EAE3"))
    {
      return 68;
    }
    else if (!strcmp(__s1, "0EE126743B64823629A81C2920FAA6966E0E52263862EF2A9F3DFF35C2AC8A9C"))
    {
      return 69;
    }
    else if (!strcmp(__s1, "D45640E968D6D66E66F8457BBE4543C7AD52C659AAC83DA1F84538E5A3422E7F"))
    {
      return 70;
    }
    else if (!strcmp(__s1, "44154E71B9E814B41C5ECA21680AC1383FF6126ED3EB45B479A9D67BA843AFB2"))
    {
      return 71;
    }
    else if (!strcmp(__s1, "37C7DEA7C7AC62E48672D62B73746ED032AC86A05AA223DB4F373D44F106CD6A"))
    {
      return 72;
    }
    else if (!strcmp(__s1, "42EA38C66C2CC54A764D5E204FF38F3402542A5F05B7731D549F22D745429051"))
    {
      return 73;
    }
    else if (!strcmp(__s1, "F6D454657EA6A999B3D168C1A68D6592B2F348BA088B279DBF0A992754767224"))
    {
      return 74;
    }
    else if (!strcmp(__s1, "C437CC379874665252F935CA927505B4C191927511AC72B4669F58BE3576516D"))
    {
      return 75;
    }
    else if (!strcmp(__s1, "63CA0F7A21417297C42CDF8868259FBCECF5C6A5C1C994C3A1CA5F608179B458"))
    {
      return 76;
    }
    else if (!strcmp(__s1, "75D1CF68BBA66F3E658B115EF614F1449D832863CAF5F46D092488791378897F"))
    {
      return 77;
    }
    else if (!strcmp(__s1, "058DEB9413998E950FC4226E0E272AFAF7557DF5129D7C7374655EB1CFDA77C5"))
    {
      return 78;
    }
    else if (!strcmp(__s1, "CFA032F2D29A5A051C9E0050D1DFA42F3E8112A934B9A17AC7C973D207993235"))
    {
      return 79;
    }
    else if (!strcmp(__s1, "B738AA29E795A9CAFDA6B743FE4B68F905E623302A5DE71A6B38401852D81CB4"))
    {
      return 80;
    }
    else if (!strcmp(__s1, "D73A9F216596E70D19B1F74DE41EEFB1A75CAB3823F2E0D1239E5F1FB9B6D40D"))
    {
      return 81;
    }
    else if (!strcmp(__s1, "ABB726B88EE52902918D7A6085403CE4DCA71804DD26B0CD6AF7B65F3E7500CF"))
    {
      return 82;
    }
    else if (!strcmp(__s1, "284BE43EB4908DBAA8A2B74BCB666EA0230514C2DD3AF9C77D20623852CB0D92"))
    {
      return 83;
    }
    else if (!strcmp(__s1, "0C763E061C178833BD52885B68343D76CDFCED5D51206DFC1A3DDE3BD4FA39D7"))
    {
      return 84;
    }
    else if (!strcmp(__s1, "B6F798954446EE61B4B6F9E14234CF2BB9558D9BCFEBFBAF3134CF51BDB370B3"))
    {
      return 85;
    }
    else if (!strcmp(__s1, "6154A03B5F85252391A19A31A8A44D2E5DFE993D77B3C3A50DA3990009A0E625"))
    {
      return 86;
    }
    else if (!strcmp(__s1, "EA836EBA2C0A7B3BED5ABDB96D9B623391DF35AC6186D459C8D3062213C1D8E2"))
    {
      return 87;
    }
    else if (!strcmp(__s1, "C02C23697E66132B8FFFAC249DBF633A97CFA692CDCE8AE3A840182863AB6EE8"))
    {
      return 88;
    }
    else if (!strcmp(__s1, "ECCA69648E94F50D0440D785106461FB6DEE6D369D319A9CA7CD9CF7C2A4EA61"))
    {
      return 89;
    }
    else if (!strcmp(__s1, "30C511991A56C9FE9B30FACC17BF86AE650C1DB1B66D9B19107F9CC769097340"))
    {
      return 90;
    }
    else if (!strcmp(__s1, "C27650C105DB677612F1E9F8232F2AA9D30A54B9223A181963447DD34D6AE9DE"))
    {
      return 91;
    }
    else if (!strcmp(__s1, "23756AABD0EA1A60AAA6F3289C152C912C9D461304216E43F65836C05E27ED67"))
    {
      return 92;
    }
    else if (!strcmp(__s1, "B6DCB4CCB503695CDDA1B5747ADBE4125D7F82EAFAA0E937A98724113EB1D727"))
    {
      return 93;
    }
    else if (!strcmp(__s1, "045052878913BCFB4518F5BF626951DB057E6BD2AC4BED3FAD09B84AD03A1DBD"))
    {
      return 94;
    }
    else if (!strcmp(__s1, "0AC3DEB7B7857ABC7031C0EB5FDDDEAE98F8A14C4F0B08255DC001F7DE977D5C"))
    {
      return 95;
    }
    else if (!strcmp(__s1, "0F46655CBD9E1B682631F1BEFAE3E0E81F9193AF0F1EAD29656ABDB3632DE244"))
    {
      return 96;
    }
    else if (!strcmp(__s1, "5D33B1B65FCFEAEB9146D7AAE9F282B0D99B1537E5B9D3079C85F88A599EBC07"))
    {
      return 97;
    }
    else if (!strcmp(__s1, "61C68100BE242001078E0A0FC57CC3D9EA793D0D5CACE34A32AD5603FB6936FA"))
    {
      return 98;
    }
    else if (!strcmp(__s1, "A705828E5FB8C152DCE53B6F6A5492B7514C11FF5CB01B85149DF5994A18B21D"))
    {
      return 99;
    }
    else if (!strcmp(__s1, "066723C9107184DA081F4D97E0290FCF8B7B75CB9631BDDD6D1E15186A341B6E"))
    {
      return 100;
    }
    else if (!strcmp(__s1, "DCE3F220104420D5EDC132F677A8C6A1257EF93B970E7DE664F8EE793CF1532A"))
    {
      return 101;
    }
    else if (!strcmp(__s1, "DCCC6EE977ED263F50E3DDE456DD372F0F537B4BFC8F164170391AFA99D96854"))
    {
      return 102;
    }
    else if (!strcmp(__s1, "6861705822904D595ABAA778F3DF9D975025CBD7C7674705BA752C7891BBC307"))
    {
      return 103;
    }
    else if (!strcmp(__s1, "F1C68883F5F9ED928E6A5BF31A6525992D8B07ABA1F8977BC437BD8286A63DD2"))
    {
      return 104;
    }
    else if (!strcmp(__s1, "0214ED3C57EB33DB2A5D42EE66D29ABF9D2D23258AE2BC458FBC6C3ACF7A0CBF"))
    {
      return 105;
    }
    else if (!strcmp(__s1, "C346BCA67550C99A599946885EDDF9B14D9B079D36A2DEC76BB68FC0ACBCA31F"))
    {
      return 106;
    }
    else if (!strcmp(__s1, "C525B796661267471CC4B306B845D23A9F4ED9F4D097BBC132C0E9A4F86183A9"))
    {
      return 107;
    }
    else if (!strcmp(__s1, "167624C4E0D84FF1B7DB7AF3A2D43D2BFC4EC9BBD1E18E616D0F00275FF15B32"))
    {
      return 108;
    }
    else if (!strcmp(__s1, "59D424C509360155E8355827007DA8E77475B13EC2D54CD5983573729A2B4942"))
    {
      return 109;
    }
    else if (!strcmp(__s1, "88ECEFCD1A9ACA3B39E3029D2EB12B722121FA0DA35ACE594F624FE4D83464D0"))
    {
      return 110;
    }
    else if (!strcmp(__s1, "5C375A462DB50DE2CCABAD8D1F37C06074032D3EC4196BD15CC09AC7C985383B"))
    {
      return 111;
    }
    else if (!strcmp(__s1, "C198C7A918CDFB2827306C31549DA06545879E8CFC1441823118729D8457BEB1"))
    {
      return 112;
    }
    else if (!strcmp(__s1, "3DCEDD6EF45622D3F5652B8EC88EFEF37CB00FE4FC16B84E577E6981B291FDD9"))
    {
      return 113;
    }
    else if (!strcmp(__s1, "D1ED7C08E70C720C20054F501D7EEEF6DCBE980A5D268FE88BAB3587F2838E52"))
    {
      return 114;
    }
    else if (!strcmp(__s1, "4713C70EDB33363B2C09D578EAF1776DAF492F1CF7FC8D5BA3CC2B74B6BCB97C"))
    {
      return 115;
    }
    else if (!strcmp(__s1, "E60420C1A25456D560E8CD9611A939376974BEBAFA619C12639380F0B31FD8B8"))
    {
      return 116;
    }
    else if (!strcmp(__s1, "526C20712356D4CB263465D867971F7887BB1970662A18C1A9E038A9A64F5905"))
    {
      return 117;
    }
    else if (!strcmp(__s1, "7401310D7AC47EE7D18793C9381D0E7B211C27413EED891054A50674A3A43D55"))
    {
      return 118;
    }
    else if (!strcmp(__s1, "E37B71F0829DCC5E49BFA2EC41E5995C98E0C6F9D6A50126D6813647621C31A9"))
    {
      return 119;
    }
    else if (!strcmp(__s1, "A60D3215F4F6222E067084EC53C4CB6D6F0C90C9CE2340806435D4D7B71CDE8D"))
    {
      return 120;
    }
    else if (!strcmp(__s1, "F01E4AED4622CF10C11CE6A7F898827E4AFD081185296BF76777B2207981E836"))
    {
      return 121;
    }
    else if (!strcmp(__s1, "164EEDE66D74F9279F17F86F1CDCA94299BF6213C2BA64E50786F8D0ABBCCAB9"))
    {
      return 122;
    }
    else if (!strcmp(__s1, "152B31D6CDC80AD2A7F1593F1E81074F9FEB957043B213E8537F5C9098DFD449"))
    {
      return 123;
    }
    else if (!strcmp(__s1, "C5B8AC3EFD6D9E22434A119330212D0B0CD6D432EDF6E86FCCEF7CCF823802C4"))
    {
      return 124;
    }
    else if (!strcmp(__s1, "0E8C0AF79B626C37D4BD04D61ACC6B1841B7F784FEF6692E84A2B1971C771CF6"))
    {
      return 125;
    }
    else if (!strcmp(__s1, "12038A812C239440324EDCEB54DA13B6B7D0C4D89F61582F9A4628C4409FAAE6"))
    {
      return 126;
    }
    else if (!strcmp(__s1, "12ADE1668F06776E2CE9CC2CC563E0BD45A5346C6D883D748FD3C132E7EB8A2F"))
    {
      return 127;
    }
    else if (!strcmp(__s1, "D5D2B254E0B808929711EBFC999F2E0F884DB9876C90B056E230E4DD6D3261CE"))
    {
      return 128;
    }
    else if (!strcmp(__s1, "CA5FDEAD1B2DEC16F5B525E9AE3CA7C4EDC163EEE950D7A77A7C5284A607369F"))
    {
      return 129;
    }
    else if (!strcmp(__s1, "28B92DE785184753FAF5508E080CB8FE784D6A5214E5E6382751D52534A72FCE"))
    {
      return 130;
    }
    else if (!strcmp(__s1, "316635C054256728753D20516A98550DBF581EBA16691321F7BBCE3A9177E09D"))
    {
      return 131;
    }
    else if (!strcmp(__s1, "D2D14661D9692EBD5065F06CB4C2AC7DD14339CAEA538D5AFA4A2B5813E87D5D"))
    {
      return 132;
    }
    else if (!strcmp(__s1, "96775CCE99E1AD0C194329938D933579304BAD868B3720C34D20D27536E7AEE7"))
    {
      return 133;
    }
    else if (!strcmp(__s1, "615761368EF9DB43D1A8DF2EF1CC087B17906454F025A1E1C5BB95B022582B9B"))
    {
      return 134;
    }
    else if (!strcmp(__s1, "2A5A81F290FDE6D31DB132DD493737A7252C441023286294F3C77CE48DD4E2F0"))
    {
      return 135;
    }
    else if (!strcmp(__s1, "7262FC4EB2434704063840AB716EF14B50F3A0E5E3457E8EBF9E014325CAE94F"))
    {
      return 136;
    }
    else if (!strcmp(__s1, "A2B9B85B3AADE88EBF43D3DB522C31E6A781700C0112047F72FA920A638A69BE"))
    {
      return 137;
    }
    else if (!strcmp(__s1, "D97205C2B224673AE923C3A7A003D96258A1A774E1C9E3CD513B0706C6657D48"))
    {
      return 138;
    }
    else if (!strcmp(__s1, "0C60DB8A2A73C9B343C4B279EDF24580976BD74BD0294B1AAC17B0A4273D8C28"))
    {
      return 139;
    }
    else if (!strcmp(__s1, "27A93DA3DF54447DCB9F371C54907BEFA8F17B7FA905EDAC2B523C7A0D93A918"))
    {
      return 140;
    }
    else if (!strcmp(__s1, "F98BB9D35C454CA00A884F6B9621A30F2C78A880A96D81B5E661391D74E8455A"))
    {
      return 141;
    }
    else if (!strcmp(__s1, "AC00030F77E6F4E41BF49DC8D7A42C68813DB0C3B652C340B340C01873EB0AB7"))
    {
      return 142;
    }
    else if (!strcmp(__s1, "BA7A33DF7A125E9EE5C1036DD6DADB3B74CC4B9BA9C5C1B235C131E70B7B4E41"))
    {
      return 143;
    }
    else if (!strcmp(__s1, "038FA673BF47F15B7C5236E4863A96C910C3993AB31529A041DE199F3EEB66CB"))
    {
      return 144;
    }
    else if (!strcmp(__s1, "E44B08E42854960D4B0277D46D6181F8B07FAC3C3CCF5A6B31AA9DC9FA4057D6"))
    {
      return 145;
    }
    else if (!strcmp(__s1, "B80C09BAE4062CCC534F6E6EF6EA6E0ABEFF12048A342EB3138E7B76890D8D3B"))
    {
      return 146;
    }
    else if (!strcmp(__s1, "00EB2F035A98609505AB8DAB9B98D1FECEAA766F368932F7FE6316AE8BAEFBE0"))
    {
      return 147;
    }
    else if (!strcmp(__s1, "6368DD78E9738AAB3001F4C17EBE26BFB0414CDCC1399D092A48AB5A57536454"))
    {
      return 148;
    }
    else if (!strcmp(__s1, "C0909793BE0330B378C0CD09F0D9B9F09F599EC8C6B94C37ABA9011E83596F90"))
    {
      return 149;
    }
    else if (!strcmp(__s1, "11221127E966E92C6C18F64D312E8C9AF73DB3A9DB792E4442FCECE644A8E7B1"))
    {
      return 150;
    }
    else if (!strcmp(__s1, "FED7B076A3D7DE52B6D9A21D14FB1A49BABF975B73BE74181C4EA26976162724"))
    {
      return 151;
    }
    else if (!strcmp(__s1, "26456E27CBF6165D84C883AC666AF50E5EAAA39D07887C37BD3A9BD26A74B2FE"))
    {
      return 152;
    }
    else if (!strcmp(__s1, "F365A0CC0EEB38797FCD82D5E4AC3B2ACF44EB34D333D4AB1AD8D8891B7F8892"))
    {
      return 153;
    }
    else if (!strcmp(__s1, "A5F302F870E09D718474CBCADD4E0B3589351A5007777F1B805169B54226B875"))
    {
      return 154;
    }
    else if (!strcmp(__s1, "903B8B51F5368A75F9777D9155C6A2664116770701ED241A6D1662131A802333"))
    {
      return 155;
    }
    else if (!strcmp(__s1, "DD96D75C3E233EE9B4528803691C00E98D5F49F2B4B3B83676332ABFBB65DE07"))
    {
      return 156;
    }
    else if (!strcmp(__s1, "F2F4280636DC1065AEFE537517EE6B816C8133EF2E5C106D92DDD2B0E0DFC69D"))
    {
      return 157;
    }
    else if (!strcmp(__s1, "EA4B7DF630D01A5FC30F51DEEC420CB0F667CC57639F1C1D8E67D97B12524E0C"))
    {
      return 158;
    }
    else if (!strcmp(__s1, "89DBD24AAAD1D4D50F3F74A7040B52C5B06B4768F1E09DC89D4067D243744882"))
    {
      return 159;
    }
    else if (!strcmp(__s1, "F942A7256C77ACD182AE0B767F21133B11937660A61610A18CD14087D1F2F71C"))
    {
      return 160;
    }
    else if (!strcmp(__s1, "A739EE6D2886FEBC60795D1D8803BF19A1A3463541AB6024A90DBB8E4650F589"))
    {
      return 161;
    }
    else if (!strcmp(__s1, "7B872939683DD4D93E917C20089932C93AACDE7E7C0738CB78026B6FC178B1D9"))
    {
      return 162;
    }
    else if (!strcmp(__s1, "9EB2D21E75D0AA677C8D110763485DB3A78262C89D05CA0C3AF7EBD2D6AB99DD"))
    {
      return 163;
    }
    else if (!strcmp(__s1, "AC7E4629ABFA704A6369754CB199383D2901F0916E230FB75D765420550E8244"))
    {
      return 164;
    }
    else if (!strcmp(__s1, "FF9225FC7116F7583194D2D2F948E6CFD131F9020C7B7C9D61A8DE2F46571C5F"))
    {
      return 165;
    }
    else if (!strcmp(__s1, "3216E3D0006FC749B832DD3C33FF4B7CAE3CE455B3FE030A3EB061DC0356D829"))
    {
      return 166;
    }
    else if (!strcmp(__s1, "2F5E861CD13CBCECC15CB691FCC7DCE54FC0755F96F1289D26AFB056BD6788D5"))
    {
      return 167;
    }
    else if (!strcmp(__s1, "83CF792CEDB646E6CAFF1BCC76E8DFB7FF51A50875049FEF596900D59D6A5063"))
    {
      return 168;
    }
    else if (!strcmp(__s1, "BA803B54C15A39AF7A61D86AA72C0960C2B897521015CDEF204CA5CECBB91072"))
    {
      return 169;
    }
    else if (!strcmp(__s1, "402C26288D835CFCE4962372266741D147E53F41D456B73D02938C3C1D4BD839"))
    {
      return 170;
    }
    else if (!strcmp(__s1, "6634D05466F515CAD98B1548EE7DCC52386712E059BE4C1A3FBB157892D9D61E"))
    {
      return 171;
    }
    else if (!strcmp(__s1, "C1F228965CE72DCBDF0563CA9125430BFC5215644CF7426375AAE844D9C393CF"))
    {
      return 172;
    }
    else if (!strcmp(__s1, "860E5D173A5DA8DE4C5A88EDDF57BFB0D9E7D010DFD109852AF3D1C8480DE485"))
    {
      return 173;
    }
    else if (!strcmp(__s1, "1E95F2EC42D9C8BCDDA799372B28B445C5807F73AC0A88117EE9819CECB7B2C2"))
    {
      return 174;
    }
    else if (!strcmp(__s1, "FBF25B757E387E5538EE893DFCD803EF74AC4FDE7BD9AC9064121A84F2E26715"))
    {
      return 175;
    }
    else if (!strcmp(__s1, "E9DD4EFE9ABCE80DF05B97D5043161FCF2371855DF6715BE46971FCE7EBE2B32"))
    {
      return 176;
    }
    else if (!strcmp(__s1, "20FE67CA0BC6365A5F2E83A71443FCD1FF79D0FB655A2B26EF0293D935F451AD"))
    {
      return 177;
    }
    else if (!strcmp(__s1, "DFAD6694DAD2CF309685D73CC39C1523D4D92A94D9CBD4B16F3468EB89D1A732"))
    {
      return 178;
    }
    else if (!strcmp(__s1, "137C754E9BEA98B17962D83B8E9EBF70D33891C8B32A876D13CD776C2EB805CD"))
    {
      return 179;
    }
    else if (!strcmp(__s1, "97448FE09776C5C51AE32BFC9D1EE9728156924E321AAA8318E2F2A1C2A62C31"))
    {
      return 180;
    }
    else if (!strcmp(__s1, "BECA30E32A8DD8B418D4AC9150B23FC3F4AAAAFCA128274C1DE87621A54FF840"))
    {
      return 181;
    }
    else if (!strcmp(__s1, "D74797F7B8D690624B1F756C30E55986965EB05837E721FA720A2DE0B8E56C30"))
    {
      return 182;
    }
    else if (!strcmp(__s1, "C0B7EF990ADBF3FF96B6F2BE59AAD1B6B9F4FE088B93B70A5FA1F0B63BA86F4C"))
    {
      return 183;
    }
    else if (!strcmp(__s1, "5B4446A6E3D13E950BC7F482E0A1C6555A187EE5321E7294F0E604F3BA96322F"))
    {
      return 184;
    }
    else if (!strcmp(__s1, "A2AEBDCCCD11BCF937DC0DE23C78762A9FD1425DA34EE911F615F041D947D3CE"))
    {
      return 185;
    }
    else if (!strcmp(__s1, "168D9C154D599835B3232AA4F8CDA23177190B54D01FFF59C94A9BD7332F0761"))
    {
      return 186;
    }
    else if (!strcmp(__s1, "C517BA395C2A64392D1C11AE86475E6F476E22867252458FCC5152B58A43603D"))
    {
      return 187;
    }
    else if (!strcmp(__s1, "E5FA747F28EBFE3E4BBD4BE279044F914B09502E3EB62035341300536242F90B"))
    {
      return 188;
    }
    else if (!strcmp(__s1, "7973408EAAC4FAF261DDB68AD698E34EFC1018CD38876DB49DA34E1C044F2CFC"))
    {
      return 189;
    }
    else if (!strcmp(__s1, "18974CEA3A33281B8436277C48EB0BB5EEA5111C4544565257A2EA24EEA75CDA"))
    {
      return 190;
    }
    else if (!strcmp(__s1, "AED7BFB3A042F79BC64BB54CC5BDBA86C0D8C2786730E5C6C09252A4BB9F5CBC"))
    {
      return 191;
    }
    else if (!strcmp(__s1, "7EFBE7B468F2C8FF4C34E67EDC7E8F80DB3E295C6221F8408D4440A78430C64F"))
    {
      return 192;
    }
    else if (!strcmp(__s1, "D67C31C99E39309E5E09E11F7A5E7B3576972C57135463976A5539814860D051"))
    {
      return 193;
    }
    else if (!strcmp(__s1, "140886F02BB994604FFA8022CFFAB05A4BE1590A6805FAF9162497C81F05BBFE"))
    {
      return 194;
    }
    else if (!strcmp(__s1, "3473F3E1E2A85DAEEB664F0C421CDF84D3B27258796FFBB2881208B73DEFC007"))
    {
      return 195;
    }
    else if (!strcmp(__s1, "CBB7FC5C90F6950C90B30709E38AC295085E9F9A5D82EB5DF56E89752A1E0252"))
    {
      return 196;
    }
    else if (!strcmp(__s1, "F5B97BA71877E7014D8BB80B1B5750123154A26D4FD86B41AE0525EDEF44A41B"))
    {
      return 197;
    }
    else if (!strcmp(__s1, "E2175386E8858E1E5273EB120A19C734896FE34E529B7720E38F90C3E66633CC"))
    {
      return 198;
    }
    else if (!strcmp(__s1, "1513162A9F37F71138014E6B4184BAD2DA941D4140D9F8F006E771B77F5BC38B"))
    {
      return 199;
    }
    else if (!strcmp(__s1, "C648A066B5DF92C6610FB4DD77453469B226FC0B0B2903FDA7E76C7AD03011AC"))
    {
      return 200;
    }
    else if (!strcmp(__s1, "A5AD2AAF51022A15627C4C6C3F18D612BFF2CA7F01F65EC1C26965ED6DDC6563"))
    {
      return 201;
    }
    else if (!strcmp(__s1, "BEE28431C5E817DF3C9C265B3672660D03A6C89EE5236507323554958AE59578"))
    {
      return 202;
    }
    else if (!strcmp(__s1, "1F6D45D5DEB05AFFD7C7C1DAC38D882FA9A9D616990FBB135621C1F0D30CA596"))
    {
      return 203;
    }
    else if (!strcmp(__s1, "24B2EDEBE37A35C073BBC2B83505D52B7FDB9C121406C6308CF528457883D4BE"))
    {
      return 204;
    }
    else if (!strcmp(__s1, "D51129E2277ED8B7AE37E82DA9F8FEB9C3FDB71EC4E4B5548B4D3763A89AF1C2"))
    {
      return 205;
    }
    else if (!strcmp(__s1, "CFEE285EA42317F1E8CE16B6BAED451F1D8029F8C057963B2486EA9093B3CD28"))
    {
      return 206;
    }
    else if (!strcmp(__s1, "C46314BBA0AA01362E06989DA928CE0AED5C5A628892598193CCE37C495FE865"))
    {
      return 207;
    }
    else if (!strcmp(__s1, "74B8506E0293EF192597C6C641B6C4C6A59F95177448E44017C4210467A625AC"))
    {
      return 208;
    }
    else if (!strcmp(__s1, "380FDF6575F27B17985711ECE0E551113641F9F9447B55D386C6BBDE95DBA9DE"))
    {
      return 209;
    }
    else if (!strcmp(__s1, "DC615E09F661E340E6495BF8406FDB597D2C6B7CD5AB0CA1E1155D715C73C434"))
    {
      return 210;
    }
    else if (!strcmp(__s1, "AEB4C02667999241FFC01E220B4443963E1B34D3ACD2C5545F5BBE1143870378"))
    {
      return 211;
    }
    else if (!strcmp(__s1, "98A511FEF2F07DAECD3383521C19383B6DCA2C733FA4611CDFA49CC62B7B5181"))
    {
      return 212;
    }
    else if (!strcmp(__s1, "40A9788933E5BA39796E86A50864B263BC0F2291A4B895C7EA6BBB144E5DACA5"))
    {
      return 213;
    }
    else if (!strcmp(__s1, "51A34CA49D64B984F464BC878382CDD07EEF0B001EBE4F2E95026F21673969A7"))
    {
      return 214;
    }
    else if (!strcmp(__s1, "D469DF7536BAE8E1DE2CB8B3C1E14B4133343771592D97C7BCEC1D03BF0EE40A"))
    {
      return 215;
    }
    else if (!strcmp(__s1, "83B2F8BA9316B9EFB16E84445A86F4306028A166E21E7B350C8D908E696445FC"))
    {
      return 216;
    }
    else if (!strcmp(__s1, "ECE8C77FAA463F6CD7C69976F66D170E06AABA1F8EAADE7E5C2EF059C7FD1BC6"))
    {
      return 217;
    }
    else if (!strcmp(__s1, "06E83674FEE3BAEADDA04BCE4F798E64EAF9562959486A334178EFE9614AFE02"))
    {
      return 218;
    }
    else if (!strcmp(__s1, "92CB5205D6DC7B8CF67306FCBBF4D2E22C50A82E14C323C9869A8154961E1379"))
    {
      return 219;
    }
    else if (!strcmp(__s1, "CFC88028D48CFFC122779E410D958A0644A7B3219492B8F56805460AE11D3317"))
    {
      return 220;
    }
    else if (!strcmp(__s1, "87BA80BEA278BCBDE11D4ADFEA6B3C8BEF365D8260CDE3591D5B76B2C36DD853"))
    {
      return 221;
    }
    else if (!strcmp(__s1, "C38EE6AA610415ACB3D10D68E346EE868CDB70CFC2F46D887E5E152FD4A256B2"))
    {
      return 222;
    }
    else if (!strcmp(__s1, "D2D6A9827703DC8826305F130123DE83C3648F82DCB4F96DFCD7E33EA799BD62"))
    {
      return 223;
    }
    else if (!strcmp(__s1, "9B37F49C310110FE3C1D0349A0DBD1F4165E5E1873418FE3D8E02DBD2C42360F"))
    {
      return 224;
    }
    else if (!strcmp(__s1, "3E6CC5C197ACBED66DB18F36FE33CAF7D744175ADB2FE6C6FAE97B0CBB5B21CD"))
    {
      return 225;
    }
    else if (!strcmp(__s1, "250DFDD8D5BC61F9B0D9CD91F4DDCE0E4799ED7B1264EEF03FAD66612BCA288D"))
    {
      return 226;
    }
    else if (!strcmp(__s1, "6EA38ABD760FE83DDB724F359C9F761841C5BD69E5DCCC1C211D42F98751EF80"))
    {
      return 227;
    }
    else if (!strcmp(__s1, "F9F04A751DF32AED42FF9EFB131D3CD40E499AA0A99A68D0DD6778167E42BF26"))
    {
      return 228;
    }
    else if (!strcmp(__s1, "5BA476059E7B48575673F80A8DC1251E26C5B23F5DCF5BCB3AB1251D0D3424E8"))
    {
      return 229;
    }
    else if (!strcmp(__s1, "357D351342C59B72F21BD4580AD1B2F1C4C47D0006AB615A4760BC3BEBD99E48"))
    {
      return 230;
    }
    else if (!strcmp(__s1, "D613D0441777617363D2EF9031155D28A493ED4CF2B714C61332BEB8E694A21C"))
    {
      return 231;
    }
    else if (!strcmp(__s1, "8751E932723FAB8324B1EFAB05DE911953F94AB079963EC9D4882EC0F853207E"))
    {
      return 232;
    }
    else if (!strcmp(__s1, "EA870EDD0C8AD026DB44FB5C6AC53D8875D62255F794C489EAB9F8222F0616CB"))
    {
      return 233;
    }
    else if (!strcmp(__s1, "B0D00D3E15F0D45E0DAD2FE819496F3837110BDADE01AC3A17862CDDACDEE5AB"))
    {
      return 234;
    }
    else if (!strcmp(__s1, "7B4CF9B631F81D78F2CEA2F4869D0137BE4CA667AE9B13DB22A617C2BA15C075"))
    {
      return 235;
    }
    else if (!strcmp(__s1, "CA1DD5B830AB9668FC5EBD5904EB9B0113C766FCE57EF59AEC58982AE744413A"))
    {
      return 236;
    }
    else if (!strcmp(__s1, "2D29DA77B4EF8E7B1D2F3F764587274747D1C2AB05C053B4CE38AE701116BF6A"))
    {
      return 237;
    }
    else if (!strcmp(__s1, "83156D57355E76E46E7319E18EA9D6A8D20E78958733028FD3F74C3FD9B0BCC5"))
    {
      return 238;
    }
    else if (!strcmp(__s1, "95DD082534B76465BAA6B38551429C11CD11A77CB351740B05F3D18D2CD2B990"))
    {
      return 239;
    }
    else if (!strcmp(__s1, "996E91405229B0F31165936664CCE9F7D3145963C1A14FA9DD57A320E349F123"))
    {
      return 240;
    }
    else if (!strcmp(__s1, "294111BEC0EE4CFDDCE430D197B75A1CB09E21EB1C822E16CD1CBCC982D46A3F"))
    {
      return 241;
    }
    else if (!strcmp(__s1, "727820125C45F365E03E3C14E8202CFF1E0049F24543B5D589F3956E11F5C581"))
    {
      return 242;
    }
    else if (!strcmp(__s1, "33634F0DC72BA827D588E38DC75C388CF4976E4671D85148780CFAFD262B07FB"))
    {
      return 243;
    }
    else if (!strcmp(__s1, "FD6F91B4C067953424B95F0B332F0FB4A64F7E43DC4D6E8CDE26B1D5D7C07A42"))
    {
      return 244;
    }
    else if (!strcmp(__s1, "50E7E1AAC46F3CF79A6B3BB2DDC0BCDCF0ACD9011439415E47AEA7B6579F3EA8"))
    {
      return 245;
    }
    else if (!strcmp(__s1, "25C93B5B4A76FFE8A20CA68271CF612F43D0B5504B6680945F3BB046DA47213A"))
    {
      return 246;
    }
    else if (!strcmp(__s1, "B6B78FABA9FD12B688986DC5EA4D4B8B731265EDEC1E5AE52B0CAA6FC31801F2"))
    {
      return 247;
    }
    else if (!strcmp(__s1, "7F94E8CDDF759E47648859D758AC1D2F3A203FDADD7EBE71974F98670262F0E1"))
    {
      return 248;
    }
    else if (!strcmp(__s1, "EE8BC6D1FFF4A5A917BB00BF2D4D1731C21189C48D1E9BC5D3ADA75BBEFB1B21"))
    {
      return 249;
    }
    else if (!strcmp(__s1, "B4FDED34CDC40097AF8781159958E328E97F9506A54251304F3044F35734BA1F"))
    {
      return 250;
    }
    else if (!strcmp(__s1, "8DE3EB67F4A5DDDF3DF41FF1DCEC7946DE4C0AC8C6E18A46B9A3E61C6C497F69"))
    {
      return 251;
    }
    else if (!strcmp(__s1, "55DDF08ED5B641C5048444150A2D58A930D81F86EEA506CD8B4073F64FC0F1C2"))
    {
      return 252;
    }
    else if (!strcmp(__s1, "C4B3D90E89BC6B96BEB336D1A17757038334C2A490EDF56428037F1BC405BF70"))
    {
      return 253;
    }
    else if (!strcmp(__s1, "E0822A12A8DD1B222198A771537F2CE4899EB45BC94D7854E0E6FA983E6EBC89"))
    {
      return 254;
    }
    else if (!strcmp(__s1, "FB75B1EE028F765D95134B65BAFD26602EE879B247F31514268AFE1DF00830D4"))
    {
      return 255;
    }
    else if (!strcmp(__s1, "C8CAD3DF32303A6876151218FAAA63CA0642964F0528B51E0F3BBA792A0FA006"))
    {
      return 256;
    }
    else if (!strcmp(__s1, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D"))
    {
      return 257;
    }
    else if (!strcmp(__s1, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85"))
    {
      return 258;
    }
    else if (!strcmp(__s1, "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035"))
    {
      return 259;
    }
    else if (!strcmp(__s1, "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D"))
    {
      return 260;
    }
    else if (!strcmp(__s1, "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A"))
    {
      return 261;
    }
    else if (!strcmp(__s1, "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46"))
    {
      return 262;
    }
    else if (!strcmp(__s1, "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE"))
    {
      return 263;
    }
    else if (!strcmp(__s1, "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38"))
    {
      return 264;
    }
    else if (!strcmp(__s1, "2660D91E9E44E8375C647F1F4FDD89923B3BFA26A3AF29D5937BAF8EF1E10CFE"))
    {
      return 265;
    }
    else if (!strcmp(__s1, "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182"))
    {
      return 266;
    }
    else if (!strcmp(__s1, "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791"))
    {
      return 267;
    }
    else if (!strcmp(__s1, "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174"))
    {
      return 268;
    }
    else if (!strcmp(__s1, "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69"))
    {
      return 269;
    }
    else if (!strcmp(__s1, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7"))
    {
      return 270;
    }
    else if (!strcmp(__s1, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D"))
    {
      return 271;
    }
    else if (!strcmp(__s1, "5DCA18DF36F9FA665E30157E71359C15F04492B59DA944CC2B10D7A925843DA7"))
    {
      return 272;
    }
    else if (!strcmp(__s1, "5851D9888A5EE313F6D80CC60F6BB6ADFC20BB0BA8D9BED753F04382DF6BED1A"))
    {
      return 273;
    }
    else if (!strcmp(__s1, "FD406D36CD5763CFC9F0DD6C37C7BDC528ADF3990CF9725229F4258C1758C94D"))
    {
      return 274;
    }
    else if (!strcmp(__s1, "EC02EE62A95DE2B0B2BC9C65A400E1318CFD7FFA894EECC7B23F8FB164A10C08"))
    {
      return 275;
    }
    else if (!strcmp(__s1, "54D70702DEC6F85C65B8D1E26F089610058B0CDC6B23440F6FD07F26E6E23315"))
    {
      return 276;
    }
    else if (!strcmp(__s1, "244B94B5F2129A5A0083F3661EAC9C6B9EB5FB62A499E6ED236452F5BE6828F5"))
    {
      return 277;
    }
    else if (!strcmp(__s1, "2C9ACA342CA7C8F4A29CA1C798155F709AC8B8D95F0D20C549DBC00F1C42184D"))
    {
      return 278;
    }
    else if (!strcmp(__s1, "972B60C198C39199A11F25454037CADA381BB118BE18D850A36534F88A82B7F1"))
    {
      return 279;
    }
    else if (!strcmp(__s1, "0AAC94B02176D8B144479EAFEE546A608C8B5E61D7A27481868626A7820E0CB1"))
    {
      return 280;
    }
    else if (!strcmp(__s1, "5537928133BBD235A03487186F42FBFF9D0FC45873C83FD5219EB5EBF500ED10"))
    {
      return 281;
    }
    else if (!strcmp(__s1, "1ADDCB1D74CE36E8E4C6007CDB14DD6A053A9C2FBDB707345B3C5E7BB07299AA"))
    {
      return 282;
    }
    else if (!strcmp(__s1, "353FBA19946FC52BCED9C06F6EE4844496369F4985110F6E78E467505E48C88F"))
    {
      return 283;
    }
    else if (!strcmp(__s1, "E2D94E3051875514422124C186B05CDA6F417AF1FC67511A17055B65BED227AA"))
    {
      return 284;
    }
    else if (!strcmp(__s1, "E9FDDF0E4E3D3ABB4D40C135F207C0310E5BE4CCF2EC1099CB89594DD756B745"))
    {
      return 285;
    }
    else if (!strcmp(__s1, "A6DE7D11FD45FD0B0F5541862F786FAAA17E530F3CBAC5CE63EFD6C7B7B8EC27"))
    {
      return 286;
    }
    else if (!strcmp(__s1, "53E08B2D38CDBBC0D198B95302BCC632B50E773651E9BA4C57373B002114CBBC"))
    {
      return 287;
    }
    else if (!strcmp(__s1, "000DAB9E75390C26D045E00DFBE36CBC2FFBD42E8B0530540C4DCD8981FB52C9"))
    {
      return 288;
    }
    else if (!strcmp(__s1, "20704FA8349FC82949E901F75BCF6DA19690A9A2FE0383950F4A47E8056DB114"))
    {
      return 289;
    }
    else if (!strcmp(__s1, "768E15468DD7366F4763C6D1E172AFF1731073A8C04B89CE1D9C2920364B4386"))
    {
      return 290;
    }
    else if (!strcmp(__s1, "33B334FD12A6201DB49E4003CB6BB2666575C9DF119DB5CF714FF5C4CF8B9156"))
    {
      return 291;
    }
    else if (!strcmp(__s1, "E21086636B17AA11D0ECA0545AB90C82D396EB03C6D33A9DE49DEEC71BFEC9A3"))
    {
      return 292;
    }
    else if (!strcmp(__s1, "18487C9D7CEF0D61908387ACBCC7316000F44757B4F9C98EA18217C35C6ECF85"))
    {
      return 293;
    }
    else if (!strcmp(__s1, "274A1E04D620A2A93E0AAFC7DB5F0BC3A6322D745709FD3011852A7608D0DC59"))
    {
      return 294;
    }
    else if (!strcmp(__s1, "A6C2B5EE1745CD5EB5C81F2B31F5E946A0C1BDC93B226BB05571EFA08555EF8F"))
    {
      return 295;
    }
    else if (!strcmp(__s1, "2E0EE94947E219E4D34F16A40C302DB5FA44C7B9EA4630D8C0F56ED4D1ACE48E"))
    {
      return 296;
    }
    else if (!strcmp(__s1, "04277177F6AEF2AE45F19B0C9C9E5A0BD94A52E04CBC3126862B455BE12A4396"))
    {
      return 297;
    }
    else
    {
      return 298;
    }
  }
  return result;
}

uint64_t sub_F27E0(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  char *v3;
  char *v4;

  v2 = a2 - 128;
  if (a2 < 0x80)
  {
    v3 = (char *)&unk_4A3C20 + 4 * (int)a2;
    return *(unsigned int *)v3;
  }
  if (v2 < 0x40)
  {
    v4 = (char *)&unk_4A3E20;
LABEL_9:
    v3 = &v4[4 * v2];
    return *(unsigned int *)v3;
  }
  v2 = a2 - 192;
  if (a2 - 192 < 0x40)
  {
    v4 = (char *)&unk_4A3F20;
    goto LABEL_9;
  }
  v2 = a2 - 256;
  if (a2 - 256 < 0x2A)
  {
    v4 = (char *)&unk_4A4020;
    goto LABEL_9;
  }
  return 20;
}

void sub_F284C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  void **v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v11;
  bzero((void *)(a1 + 8), 0x6598uLL);
  *(_QWORD *)(a1 + 26016) = a6;
  *(_QWORD *)(a1 + 26032) = a3;
  v12 = (void **)(a1 + 26064);
  *(_OWORD *)(a1 + 26040) = 0u;
  *(_OWORD *)(a1 + 26072) = 0u;
  *(_OWORD *)(a1 + 26088) = 0u;
  *(_OWORD *)(a1 + 26104) = 0u;
  *(_OWORD *)(a1 + 26056) = 0u;
  v13 = sub_40FC(a1 + 26056, 1uLL);
  v14 = *(char **)(a1 + 26048);
  v15 = *(char **)(a1 + 26040);
  v17 = &v13[v16];
  *v13 = a4;
  v18 = v13 + 1;
  while (v14 != v15)
  {
    v19 = *((_QWORD *)v14 - 1);
    v14 -= 8;
    *--v13 = v19;
  }
  *(_QWORD *)(a1 + 26040) = v13;
  *(_QWORD *)(a1 + 26048) = v18;
  *(_QWORD *)(a1 + 26056) = v17;
  if (v15)
    operator delete(v15);
  *(_QWORD *)(a1 + 26048) = v18;
  v20 = *(char **)(a1 + 26072);
  v21 = *(_QWORD *)(a1 + 26080);
  if ((unint64_t)v20 >= v21)
  {
    v23 = (char *)*v12;
    v24 = (v20 - (_BYTE *)*v12) >> 3;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61)
      sub_4074();
    v26 = v21 - (_QWORD)v23;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v28 = (char *)sub_40FC(a1 + 26080, v27);
      v20 = *(char **)(a1 + 26072);
      v23 = *(char **)(a1 + 26064);
    }
    else
    {
      v28 = 0;
    }
    v29 = &v28[8 * v24];
    v30 = &v28[8 * v27];
    *(_QWORD *)v29 = a5;
    v22 = v29 + 8;
    while (v20 != v23)
    {
      v31 = *((_QWORD *)v20 - 1);
      v20 -= 8;
      *((_QWORD *)v29 - 1) = v31;
      v29 -= 8;
    }
    *(_QWORD *)(a1 + 26064) = v29;
    *(_QWORD *)(a1 + 26072) = v22;
    *(_QWORD *)(a1 + 26080) = v30;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *(_QWORD *)v20 = a5;
    v22 = v20 + 8;
  }
  *(_QWORD *)(a1 + 26072) = v22;
  operator new[]();
}

void sub_F2A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  v17 = (void *)v10[3261];
  if (v17)
  {
    v10[3262] = (uint64_t)v17;
    operator delete(v17);
  }
  v18 = *v14;
  if (*v14)
  {
    v10[3259] = (uint64_t)v18;
    operator delete(v18);
  }
  v19 = *v15;
  if (*v15)
  {
    v10[3256] = (uint64_t)v19;
    operator delete(v19);
  }
  v20 = (void *)v10[3247];
  if (v20)
  {
    v10[3248] = (uint64_t)v20;
    operator delete(v20);
  }
  v21 = 0;
  while (1)
  {
    v22 = (void *)v10[v21 + 3244];
    if (v22)
    {
      v10[v21 + 3245] = (uint64_t)v22;
      operator delete(v22);
    }
    v21 -= 3;
    if (v21 == -150)
    {
      v23 = 3000;
      while (1)
      {
        v24 = (void *)v10[v23 + 94];
        if (v24)
        {
          v10[v23 + 95] = (uint64_t)v24;
          operator delete(v24);
        }
        v23 -= 3;
        if (!(v23 * 8))
        {
          sub_F2B04(v13);
          sub_F34C0(v12);
          sub_F2B7C(a10);
          sub_F36F4(v11);
          v25 = *v10;
          *v10 = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          _Unwind_Resume(a1);
        }
      }
    }
  }
}

uint64_t sub_F2B04(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  v7 = (void **)(a1 + 96);
  sub_F343C(&v7);
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_F2B7C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t *sub_F2BE0(uint64_t *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void **v20;

  if (a1[3253])
    operator delete[]();
  v2 = (void *)a1[3261];
  if (v2)
  {
    a1[3262] = (uint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3258];
  if (v3)
  {
    a1[3259] = (uint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3255];
  if (v4)
  {
    a1[3256] = (uint64_t)v4;
    operator delete(v4);
  }
  v5 = (void *)a1[3247];
  if (v5)
  {
    a1[3248] = (uint64_t)v5;
    operator delete(v5);
  }
  for (i = 0; i != -150; i -= 3)
  {
    v7 = (void *)a1[i + 3244];
    if (v7)
    {
      a1[i + 3245] = (uint64_t)v7;
      operator delete(v7);
    }
  }
  v8 = 3000;
  do
  {
    v9 = (void *)a1[v8 + 94];
    if (v9)
    {
      a1[v8 + 95] = (uint64_t)v9;
      operator delete(v9);
    }
    v8 -= 3;
  }
  while (v8 * 8);
  v20 = (void **)(a1 + 94);
  sub_F343C(&v20);
  v10 = (void *)a1[91];
  if (v10)
  {
    a1[92] = (uint64_t)v10;
    operator delete(v10);
  }
  v11 = (void *)a1[88];
  if (v11)
  {
    a1[89] = (uint64_t)v11;
    operator delete(v11);
  }
  v12 = (void *)a1[85];
  if (v12)
  {
    a1[86] = (uint64_t)v12;
    operator delete(v12);
  }
  v13 = (void *)a1[82];
  if (v13)
  {
    a1[83] = (uint64_t)v13;
    operator delete(v13);
  }
  sub_F34C0(a1 + 34);
  v14 = (void *)a1[31];
  if (v14)
  {
    a1[32] = (uint64_t)v14;
    operator delete(v14);
  }
  v15 = (void *)a1[28];
  if (v15)
  {
    a1[29] = (uint64_t)v15;
    operator delete(v15);
  }
  v16 = (void *)a1[25];
  if (v16)
  {
    a1[26] = (uint64_t)v16;
    operator delete(v16);
  }
  v17 = (void *)a1[22];
  if (v17)
  {
    a1[23] = (uint64_t)v17;
    operator delete(v17);
  }
  sub_F36F4((uint64_t)(a1 + 1));
  v18 = *a1;
  *a1 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return a1;
}

void sub_F2D64(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void **v33;
  void **v34;
  unint64_t v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int **v49;
  unsigned int *v50;
  unsigned int *v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;

  *(_QWORD *)(a1 + 26048) = *(_QWORD *)(a1 + 26040);
  *(_QWORD *)(a1 + 26072) = *(_QWORD *)(a1 + 26064);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 248);
  v10 = *(void ***)(a1 + 280);
  v11 = *(_QWORD *)(a1 + 288) - (_QWORD)v10;
  *(_QWORD *)(a1 + 312) = 0;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v10);
      v12 = *(_QWORD *)(a1 + 288);
      v10 = (void **)(*(_QWORD *)(a1 + 280) + 8);
      *(_QWORD *)(a1 + 280) = v10;
      v11 = v12 - (_QWORD)v10;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v13 = 256;
  }
  else
  {
    if (v11 >> 3 != 2)
      goto LABEL_8;
    v13 = 512;
  }
  *(_QWORD *)(a1 + 304) = v13;
LABEL_8:
  v14 = *(void ***)(a1 + 328);
  v15 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 360) = 0;
  v16 = v15 - (_QWORD)v14;
  if (v16 >= 0x11)
  {
    do
    {
      operator delete(*v14);
      v17 = *(_QWORD *)(a1 + 336);
      v14 = (void **)(*(_QWORD *)(a1 + 328) + 8);
      *(_QWORD *)(a1 + 328) = v14;
      v16 = v17 - (_QWORD)v14;
    }
    while (v16 > 0x10);
  }
  if (v16 >> 3 == 1)
  {
    v18 = 256;
  }
  else
  {
    if (v16 >> 3 != 2)
      goto LABEL_15;
    v18 = 512;
  }
  *(_QWORD *)(a1 + 352) = v18;
LABEL_15:
  v19 = *(void ***)(a1 + 376);
  v20 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 408) = 0;
  v21 = v20 - (_QWORD)v19;
  if (v21 >= 0x11)
  {
    do
    {
      operator delete(*v19);
      v22 = *(_QWORD *)(a1 + 384);
      v19 = (void **)(*(_QWORD *)(a1 + 376) + 8);
      *(_QWORD *)(a1 + 376) = v19;
      v21 = v22 - (_QWORD)v19;
    }
    while (v21 > 0x10);
  }
  if (v21 >> 3 == 1)
  {
    v23 = 256;
  }
  else
  {
    if (v21 >> 3 != 2)
      goto LABEL_22;
    v23 = 512;
  }
  *(_QWORD *)(a1 + 400) = v23;
LABEL_22:
  v24 = *(void ***)(a1 + 424);
  v25 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 456) = 0;
  v26 = v25 - (_QWORD)v24;
  if (v26 >= 0x11)
  {
    do
    {
      operator delete(*v24);
      v27 = *(_QWORD *)(a1 + 432);
      v24 = (void **)(*(_QWORD *)(a1 + 424) + 8);
      *(_QWORD *)(a1 + 424) = v24;
      v26 = v27 - (_QWORD)v24;
    }
    while (v26 > 0x10);
  }
  if (v26 >> 3 == 1)
  {
    v28 = 256;
  }
  else
  {
    if (v26 >> 3 != 2)
      goto LABEL_29;
    v28 = 512;
  }
  *(_QWORD *)(a1 + 448) = v28;
LABEL_29:
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 520) = 0;
  v29 = *(void ***)(a1 + 544);
  v30 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 576) = 0;
  v31 = v30 - (_QWORD)v29;
  if (v31 >= 0x11)
  {
    do
    {
      operator delete(*v29);
      v29 = (void **)(*(_QWORD *)(a1 + 544) + 8);
      *(_QWORD *)(a1 + 544) = v29;
      v31 = *(_QWORD *)(a1 + 552) - (_QWORD)v29;
    }
    while (v31 > 0x10);
  }
  if (v31 >> 3 == 1)
  {
    v32 = 56;
  }
  else
  {
    if (v31 >> 3 != 2)
      goto LABEL_36;
    v32 = 113;
  }
  *(_QWORD *)(a1 + 568) = v32;
LABEL_36:
  *(_QWORD *)(a1 + 592) = 0;
  v33 = *(void ***)(a1 + 616);
  v34 = *(void ***)(a1 + 624);
  if (v34 == v33)
  {
    v34 = *(void ***)(a1 + 616);
  }
  else
  {
    v35 = *(_QWORD *)(a1 + 640);
    v36 = &v33[v35 >> 5];
    v37 = (uint64_t)*v36 + 128 * (v35 & 0x1F);
    v38 = *(uint64_t *)((char *)v33 + (((*(_QWORD *)(a1 + 648) + v35) >> 2) & 0x3FFFFFFFFFFFFFF8))
        + 128 * ((*(_QWORD *)(a1 + 648) + v35) & 0x1F);
    if (v37 != v38)
    {
      do
      {
        sub_44FE8(a1 + 648, v37);
        v37 += 128;
        if (v37 - (_QWORD)*v36 == 4096)
        {
          v39 = (uint64_t)v36[1];
          ++v36;
          v37 = v39;
        }
      }
      while (v37 != v38);
      v34 = *(void ***)(a1 + 624);
      v33 = *(void ***)(a1 + 616);
    }
  }
  *(_QWORD *)(a1 + 648) = 0;
  v40 = (char *)v34 - (char *)v33;
  if (v40 >= 0x11)
  {
    do
    {
      operator delete(*v33);
      v33 = (void **)(*(_QWORD *)(a1 + 616) + 8);
      *(_QWORD *)(a1 + 616) = v33;
      v40 = *(_QWORD *)(a1 + 624) - (_QWORD)v33;
    }
    while (v40 > 0x10);
  }
  if (v40 >> 3 == 1)
  {
    v41 = 16;
  }
  else
  {
    if (v40 >> 3 != 2)
      goto LABEL_50;
    v41 = 32;
  }
  *(_QWORD *)(a1 + 640) = v41;
LABEL_50:
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a1 + 704);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a1 + 728);
  v42 = *(_QWORD *)(a1 + 760);
  v43 = *(_QWORD *)(a1 + 752);
  while (v42 != v43)
  {
    v42 -= 128;
    sub_44FE8(a1 + 768, v42);
  }
  *(_QWORD *)(a1 + 760) = v43;
  v44 = *a2;
  v45 = a2[1];
  if (*a2 == v45)
  {
    v54 = *(unsigned int *)(*(_QWORD *)a1 + 8);
    if ((_DWORD)v54)
    {
      v55 = (_QWORD *)(a1 + 784);
      do
      {
        *v55 = *(v55 - 1);
        v55 += 3;
        --v54;
      }
      while (v54);
    }
    v56 = -1200;
    do
    {
      *(_QWORD *)(a1 + v56 + 25984) = *(_QWORD *)(a1 + v56 + 25976);
      v56 += 24;
    }
    while (v56);
  }
  else
  {
    v46 = 0;
    v47 = (unsigned __int128)((v45 - v44) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    v48 = (v47 >> 2) + ((unint64_t)v47 >> 63);
    if (v48 <= 1)
      v48 = 1;
    do
    {
      v49 = (unsigned int **)(v44 + 24 * v46);
      v50 = *v49;
      v51 = v49[1];
      if (v50 != v51)
      {
        *(_QWORD *)(a1 + 24 * v46 + 24784) = *(_QWORD *)(a1 + 24 * v46 + 24776);
        v52 = v51 - v50;
        if (v52 <= 1)
          v52 = 1;
        do
        {
          v53 = *v50++;
          *(_QWORD *)(a1 + 24 * v53 + 784) = *(_QWORD *)(a1 + 24 * v53 + 776);
          --v52;
        }
        while (v52);
      }
      ++v46;
    }
    while (v46 != v48);
  }
  *(_QWORD *)(a1 + 25984) = *(_QWORD *)(a1 + 25976);
  *(_QWORD *)(a1 + 26112) = 0;
  *(_OWORD *)(a1 + 26000) = 0u;
  *(_QWORD *)(a1 + 26032) = a3;
  v57 = *(char **)(a1 + 26048);
  v58 = *(_QWORD *)(a1 + 26056);
  if ((unint64_t)v57 >= v58)
  {
    v60 = *(char **)(a1 + 26040);
    v61 = (v57 - v60) >> 3;
    if ((unint64_t)(v61 + 1) >> 61)
      goto LABEL_99;
    v62 = v58 - (_QWORD)v60;
    v63 = (uint64_t)(v58 - (_QWORD)v60) >> 2;
    if (v63 <= v61 + 1)
      v63 = v61 + 1;
    if (v62 >= 0x7FFFFFFFFFFFFFF8)
      v64 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v64 = v63;
    if (v64)
    {
      v65 = (char *)sub_40FC(a1 + 26056, v64);
      v57 = *(char **)(a1 + 26048);
      v60 = *(char **)(a1 + 26040);
    }
    else
    {
      v65 = 0;
    }
    v66 = &v65[8 * v61];
    v67 = &v65[8 * v64];
    *(_QWORD *)v66 = a4;
    v59 = v66 + 8;
    while (v57 != v60)
    {
      v68 = *((_QWORD *)v57 - 1);
      v57 -= 8;
      *((_QWORD *)v66 - 1) = v68;
      v66 -= 8;
    }
    *(_QWORD *)(a1 + 26040) = v66;
    *(_QWORD *)(a1 + 26048) = v59;
    *(_QWORD *)(a1 + 26056) = v67;
    if (v60)
      operator delete(v60);
  }
  else
  {
    *(_QWORD *)v57 = a4;
    v59 = v57 + 8;
  }
  *(_QWORD *)(a1 + 26048) = v59;
  v69 = *(char **)(a1 + 26072);
  v70 = *(_QWORD *)(a1 + 26080);
  if ((unint64_t)v69 < v70)
  {
    *(_QWORD *)v69 = a5;
    v71 = v69 + 8;
    goto LABEL_98;
  }
  v72 = *(char **)(a1 + 26064);
  v73 = (v69 - v72) >> 3;
  if ((unint64_t)(v73 + 1) >> 61)
LABEL_99:
    sub_4074();
  v74 = v70 - (_QWORD)v72;
  v75 = (uint64_t)(v70 - (_QWORD)v72) >> 2;
  if (v75 <= v73 + 1)
    v75 = v73 + 1;
  if (v74 >= 0x7FFFFFFFFFFFFFF8)
    v76 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v76 = v75;
  if (v76)
  {
    v77 = (char *)sub_40FC(a1 + 26080, v76);
    v69 = *(char **)(a1 + 26072);
    v72 = *(char **)(a1 + 26064);
  }
  else
  {
    v77 = 0;
  }
  v78 = &v77[8 * v73];
  v79 = &v77[8 * v76];
  *(_QWORD *)v78 = a5;
  v71 = v78 + 8;
  while (v69 != v72)
  {
    v80 = *((_QWORD *)v69 - 1);
    v69 -= 8;
    *((_QWORD *)v78 - 1) = v80;
    v78 -= 8;
  }
  *(_QWORD *)(a1 + 26064) = v78;
  *(_QWORD *)(a1 + 26072) = v71;
  *(_QWORD *)(a1 + 26080) = v79;
  if (v72)
    operator delete(v72);
LABEL_98:
  *(_QWORD *)(a1 + 26072) = v71;
  bzero(*(void **)(a1 + 26024), 16 * *(_QWORD *)(a1 + 26016));
}

uint64_t sub_F338C(uint64_t result, _BYTE *a2, unint64_t a3, _QWORD *a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (!*a2)
  {
    v5 = *(_QWORD *)(result + 26048);
    v6 = *(_QWORD *)(result + 26040);
    if (v5 - v6 >= 1)
    {
      v7 = (unint64_t)(v5 - v6) >> 3;
      do
      {
        if (a5 >= a3)
          a5 -= a3;
        else
          a5 = 0;
        *(_QWORD *)(v6 - 8 + 8 * v7) = a5;
      }
      while (v7-- > 1);
    }
    if (v6 != v5)
      *a4 = *(_QWORD *)(v5 - 8);
    *a2 = 1;
  }
  return result;
}

uint64_t sub_F33E4(uint64_t result, _BYTE *a2, unint64_t a3, _QWORD *a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (!*a2)
  {
    v5 = *(_QWORD *)(result + 26072);
    v6 = *(_QWORD *)(result + 26064);
    if (v5 - v6 >= 1)
    {
      v7 = (unint64_t)(v5 - v6) >> 3;
      do
      {
        if (a5 >= a3)
          a5 -= a3;
        else
          a5 = 0;
        *(_QWORD *)(v6 - 8 + 8 * v7) = a5;
      }
      while (v7-- > 1);
    }
    if (v6 != v5)
      *a4 = *(_QWORD *)(v5 - 8);
    *a2 = 1;
  }
  return result;
}

void sub_F343C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 128;
        sub_44FE8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_F34C0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  sub_F3540(a1 + 42);
  v2 = (void *)a1[39];
  if (v2)
    operator delete(v2);
  sub_F3660(a1 + 33);
  v3 = (void *)a1[30];
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[27];
  if (v4)
  {
    a1[28] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[24];
  if (v5)
  {
    a1[25] = v5;
    operator delete(v5);
  }
  std::deque<ProfileEvent>::~deque[abi:nn180100](a1 + 18);
  std::deque<ProfileEvent>::~deque[abi:nn180100](a1 + 12);
  std::deque<ProfileEvent>::~deque[abi:nn180100](a1 + 6);
  return std::deque<ProfileEvent>::~deque[abi:nn180100](a1);
}

uint64_t sub_F3540(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 >> 5];
    v7 = (uint64_t)*v6 + 128 * (v5 & 0x1F);
    v8 = *(uint64_t *)((char *)v3 + (((a1[5] + v5) >> 2) & 0x3FFFFFFFFFFFFFF8)) + 128 * ((a1[5] + v5) & 0x1F);
    if (v7 != v8)
    {
      do
      {
        sub_44FE8((uint64_t)v2, v7);
        v7 += 128;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 16;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 32;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return std::__split_buffer<ProfileEvent *>::~__split_buffer((uint64_t)a1);
}

uint64_t sub_F3660(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 56;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 113;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<ProfileEvent *>::~__split_buffer((uint64_t)a1);
}

uint64_t sub_F36F4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(_QWORD *)(a1 + 128) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_F3784(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "DeltaSeconds");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_F37C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_d10d40e0cc19cf68a523b252faa985cd5777f1eab3cbe768098ca805cc7216ef");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_F37FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_0c33d520d54b5d5f84a71398d6ae71152426874088128bd3c18ad78df5f6d8b7");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_d10d40e0cc19cf68a523b252faa985cd5777f1eab3cbe768098ca805cc7216ef");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  return v10;
}

uint64_t sub_F3890(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_da2d5f5fd43e7edda6d5635752a29f09d285cf47c2ecd0a1b83b1ba3eddcef55");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_F38CC(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;

  v7 = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_448897b2730c90c177c3e468d3780d048b4ef0c6feb09887550eb9e5e71373c0");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_F3964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  int *v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int *v16;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_e319ade855d6fde34a28ecc2a2266f86d6d99b5e413e08b4884629844476c571");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_83b4492da25346ffc6c1820a633ef533874dda8e2939056928ffd92384775e38");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_a3104b8f0a1ab0931761cf851c8ac5ce3212eff30deff24a1f9a5ef67453adca");
  v12 = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_bd9f890bd3bdbe08af5851fb3dfa228a36a5e54b72c7d74d5985af75bafa6217");
  v15 = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  return v16;
}

int *sub_F3A90(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *))
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v5 = (**a3)(a3, "NSEC_PER_SEC");
  v7 = v6;
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PrimitivesSubmitted");
  v9 = sub_F6DC(v5, v7, v8);
  v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_792173079ffc5aacc2cea817d8812166e71ea17309e294d24ee2cc88d2fb1e8e");
  v11 = (**a3)(a3, "TIME_SCALE");
  v13 = sub_1023C(v10, v11, v12);
  return sub_10D90((unsigned int *)v9, (unsigned int *)v13);
}

int *sub_F3B58(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *))
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v5 = (**a3)(a3, "NSEC_PER_SEC");
  v7 = v6;
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PSInvocation");
  v9 = sub_F6DC(v5, v7, v8);
  v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_792173079ffc5aacc2cea817d8812166e71ea17309e294d24ee2cc88d2fb1e8e");
  v11 = (**a3)(a3, "TIME_SCALE");
  v13 = sub_1023C(v10, v11, v12);
  return sub_10D90((unsigned int *)v9, (unsigned int *)v13);
}

int *sub_F3C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PSInvocation");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "VSInvocation");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_F3CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PSInvocation");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PrimitivesSubmitted");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_F3D48(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f6c3f9b835930ff834f081ab2dfaacbdfbe451f6f2100abcdecec1c3c7999e0b");
  length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

uint64_t sub_F3DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_427543bc9ae51e5f3520629f8bbe54e3a18d14de616f0c418cf7190a55cd7d9c");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_F3E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "VerticesSubmitted");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "VSInvocation");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  v11 = sub_BB28();
  v13 = v12;
  v14 = sub_169FF0(a5, 0, length);
  v15 = sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v10, v11, v13, v14, 1);
  agxps_timeseries_select_tts(v14, (uint64_t)v10, v11, v13, v15);
  return v15;
}

uint64_t sub_F3F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "VerticesSubmitted");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "VSInvocation");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  LODWORD(v7) = sub_BB28();
  v12 = v11;
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v10, (int)v7, v12, v13, 1);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "VerticesSubmitted");
  v15 = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, v15);
  agxps_timeseries_div_tt(v13, v14, v16, 1);
  v17 = sub_BB28();
  v19 = v18;
  v20 = sub_169FF0(a5, 0, v15);
  v21 = sub_169FF0(a5, 0, v15);
  agxps_timeseries_compare_ts(3, v16, v17, v19, v20, 1);
  agxps_timeseries_select_tts(v20, (uint64_t)v16, v17, v19, v21);
  return v21;
}

uint64_t sub_F40DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_2d3c257f33af88b8488658fb5b6a86f64cb02169b680e1250d3f37d373a4197f");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_F4118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PrimitivesRasterized");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "InputPrimitivesPostClipping");
  v14 = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, v14);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F4274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_29091329a1ff8f86d51ab9b84da709de18ba8aa1d94003a519a0663db7add4a1");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_6169af48fcc4f2c5d036243de6acd153bd0308c644bd7e4afc67499ad1aef2c7");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_F4308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int *v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ClippedPrimitives");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PreCullPrimitiveCount");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

uint64_t sub_F43E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_b466c606c4b7e98fcde3adad24a292c946f1f1130670918262ebf9f660e0173c");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_F4424(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_9f4066c82340989d0ea535230ddae2a44d311837c37d0eb67d122b2c592e661f");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_F4460(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_01038280d9d6c505432733b12946359b7c301c69b32369f4b921b6fa206c2211");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_F449C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_1b4a415305c5e09fd037b34e5c34c099f08044e780d5c06d813ce80cf354dafd");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_F44D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_d1bc81f56d6b804a852adb705f1ef63549265bdfc317d5a3af98aaee0d8f8ef9");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_F4514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  uint64_t v17;
  int *v18;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PreCullPrimitiveCount");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ClippedPrimitives");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  v11 = sub_BB28();
  v13 = v12;
  v14 = sub_169FF0(a5, 0, length);
  v15 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v10, v11, v13, v14, 1);
  agxps_timeseries_select_tts(v14, (uint64_t)v10, v11, v13, (uint64_t)v15);
  v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TrianglesCreatedByClipper");
  v17 = agxps_timeseries_get_length((uint64_t)v16);
  v18 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_add_tt(v15, v16, v18, 1);
  return v18;
}

uint64_t sub_F4674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  int *v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "CulledPrimitives");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "GuardBandCullPrims");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "BackFaceCullPrims");
  v12 = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, v12);
  agxps_timeseries_sub_tt(v10, v11, v13, 1);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "OffscreenCullPrims");
  v15 = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, v15);
  agxps_timeseries_sub_tt(v13, v14, v16, 1);
  v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "SmallTriangleClippedPrims");
  v18 = agxps_timeseries_get_length((uint64_t)v17);
  v19 = (int *)sub_169FF0(a5, 0, v18);
  agxps_timeseries_sub_tt(v16, v17, v19, 1);
  v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "BackFaceClippedPrims");
  v21 = agxps_timeseries_get_length((uint64_t)v20);
  v22 = (int *)sub_169FF0(a5, 0, v21);
  agxps_timeseries_sub_tt(v19, v20, v22, 1);
  v23 = sub_BB28();
  v25 = v24;
  v26 = sub_169FF0(a5, 0, v21);
  v27 = sub_169FF0(a5, 0, v21);
  agxps_timeseries_compare_ts(3, v22, v23, v25, v26, 1);
  agxps_timeseries_select_tts(v26, (uint64_t)v22, v23, v25, v27);
  return v27;
}

int *sub_F48A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "BackFaceCullPrims");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "InputPrimitivesPostClipping");
  v14 = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, v14);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F4A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "SmallTriangleCullPrims");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "InputPrimitivesPostClipping");
  v14 = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, v14);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F4B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  int *v11;
  uint64_t v12;
  int *v13;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_4b1f5c87264cd5cd23bb5eb652d21194fb7f49f9b1d70433f180b31a7a22dcab");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_4bb4ab3f3e64c565175f4fbe0f75df41b12c3bc2b4242b99cd4a330773d475d4");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_d7b92925765e8d20627989863f1b950ec5d6dffbd815c4c100730b3a7e7801fd");
  v12 = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  return v13;
}

int *sub_F4C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "GuardBandCullPrims");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "InputPrimitivesPostClipping");
  v14 = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, v14);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F4D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  int *v11;
  uint64_t v12;
  int *v13;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_0f9aab25f0863ace3de6f9832139250c806045a7ac0d6f8cf06c682c282005f1");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_dbe3d527893309548e6eebdee711a622433c869e148727cf18e31ae63cf116d3");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_3bd7a95222e8315bf62e84ba01a511e64bd7aa7487bed322a8ac96e4c4e628e1");
  v12 = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  return v13;
}

int *sub_F4E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "OffscreenCullPrims");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "InputPrimitivesPostClipping");
  v14 = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, v14);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

uint64_t sub_F4FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "InputPrimitivesPostClipping");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PrimitivesRasterized");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  v11 = sub_BB28();
  v13 = v12;
  v14 = sub_169FF0(a5, 0, length);
  v15 = sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v10, v11, v13, v14, 1);
  agxps_timeseries_select_tts(v14, (uint64_t)v10, v11, v13, v15);
  return v15;
}

int *sub_F50EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "CulledPrimitives");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "InputPrimitivesPostClipping");
  v14 = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, v14);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F5248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int *v21;
  int *v22;
  uint64_t v23;
  int *v24;
  int *v25;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_7cef4e481233623472ea3e1f6b4131fabb20f247f7e5eae173dfd693aa60d0ff");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_9177fce9b3d9e2a64a816854b3084588e4673c25a1c069c53b5909a77fb853eb");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  v11 = sub_BB28();
  v13 = v12;
  v14 = sub_169FF0(a5, 0, length);
  v15 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v10, v11, v13, v14, 1);
  agxps_timeseries_select_tts(v14, (uint64_t)v10, v11, v13, (uint64_t)v15);
  LODWORD(v11) = sub_BB28();
  v17 = v16;
  v18 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v15, v11, v17, v18, 1);
  v19 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "CA64702D3D4494B38F08BCB24ABD879988FB0FFE1D929F859EC9AED1C1C160E1");
  v20 = agxps_timeseries_get_length((uint64_t)v19);
  v21 = (int *)sub_169FF0(a5, 0, v20);
  agxps_timeseries_mul_tt(v8, v19, v21, 1);
  v22 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "2EAC2CEBA509E12A31090A56155DDCE41EAEE148F6832947CA8A512BDCFA0DF9");
  v23 = agxps_timeseries_get_length((uint64_t)v22);
  v24 = (int *)sub_169FF0(a5, 0, v23);
  agxps_timeseries_mul_tt(v21, v22, v24, 1);
  v25 = (int *)sub_169FF0(a5, 0, v23);
  agxps_timeseries_add_tt(v18, v24, v25, 1);
  return v25;
}

int *sub_F5464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int *v21;
  int *v22;
  uint64_t v23;
  int *v24;
  int *v25;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_24be79c8d8f70844505a88372d5027b6f8afd064ccbab97ac3ffe36dd5a0ef2b");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_9177fce9b3d9e2a64a816854b3084588e4673c25a1c069c53b5909a77fb853eb");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  v11 = sub_BB28();
  v13 = v12;
  v14 = sub_169FF0(a5, 0, length);
  v15 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v10, v11, v13, v14, 1);
  agxps_timeseries_select_tts(v14, (uint64_t)v10, v11, v13, (uint64_t)v15);
  LODWORD(v11) = sub_BB28();
  v17 = v16;
  v18 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v15, v11, v17, v18, 1);
  v19 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "CA64702D3D4494B38F08BCB24ABD879988FB0FFE1D929F859EC9AED1C1C160E1");
  v20 = agxps_timeseries_get_length((uint64_t)v19);
  v21 = (int *)sub_169FF0(a5, 0, v20);
  agxps_timeseries_mul_tt(v8, v19, v21, 1);
  v22 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "2EAC2CEBA509E12A31090A56155DDCE41EAEE148F6832947CA8A512BDCFA0DF9");
  v23 = agxps_timeseries_get_length((uint64_t)v22);
  v24 = (int *)sub_169FF0(a5, 0, v23);
  agxps_timeseries_mul_tt(v21, v22, v24, 1);
  v25 = (int *)sub_169FF0(a5, 0, v23);
  agxps_timeseries_add_tt(v18, v24, v25, 1);
  return v25;
}

uint64_t sub_F5680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "FragmentsRasterized");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PreZPassCount");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  v11 = sub_BB28();
  v13 = v12;
  v14 = sub_169FF0(a5, 0, length);
  v15 = sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v10, v11, v13, v14, 1);
  agxps_timeseries_select_tts(v14, (uint64_t)v10, v11, v13, v15);
  return v15;
}

int *sub_F5790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int *v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PreZFailCount");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "FragmentsRasterized");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_F5870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int *v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PreZPassCount");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "FragmentsRasterized");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_F5950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  int *v9;
  uint64_t length;
  int *v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int *v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PSInvocation");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_eda5bce70befa39e7c6029505c0269211092c220048a502fd8fa2fe30895465b");
  agxps_timeseries_get_length((uint64_t)v8);
  v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "CA64702D3D4494B38F08BCB24ABD879988FB0FFE1D929F859EC9AED1C1C160E1");
  length = agxps_timeseries_get_length((uint64_t)v9);
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_tt(v8, v9, v11, 1);
  v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "2EAC2CEBA509E12A31090A56155DDCE41EAEE148F6832947CA8A512BDCFA0DF9");
  v13 = agxps_timeseries_get_length((uint64_t)v12);
  v14 = (int *)sub_169FF0(a5, 0, v13);
  agxps_timeseries_mul_tt(v11, v12, v14, 1);
  v15 = (int *)sub_169FF0(a5, 0, v13);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

int *sub_F5A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "CA64702D3D4494B38F08BCB24ABD879988FB0FFE1D929F859EC9AED1C1C160E1");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "2EAC2CEBA509E12A31090A56155DDCE41EAEE148F6832947CA8A512BDCFA0DF9");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_tt(v7, v8, v10, 1);
  return v10;
}

uint64_t sub_F5B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ae304fc8bce5708ffef30935687e442d6bea78f814055a5fe6e3380013d7e507");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f46268d72ed52af703d1b490e193d71605d5c756930dfe9385a5433c9b4f264f");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v15, v17, v18, 1);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_sub_tt(v12, v18, v19, 1);
  v20 = sub_BB28();
  v22 = v21;
  v23 = sub_169FF0(a5, 0, v14);
  v24 = sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v19, v20, v22, v23, 1);
  agxps_timeseries_select_tts(v23, (uint64_t)v19, v20, v22, v24);
  return v24;
}

int *sub_F5CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TextureSamples");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "VSInvocation");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_F5D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TextureSamples");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PSInvocation");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_F5DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TextureSamples");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "CSInvocation");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_F5E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t length;
  int *v13;
  int *v14;
  unint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  int *v25;
  int *v26;
  unint64_t v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  int *v31;
  int *v32;
  unint64_t v33;
  unint64_t v34;
  int *v35;
  uint64_t v36;
  int *v37;
  int *v38;
  unint64_t v39;
  unint64_t v40;
  int *v41;
  uint64_t v42;
  int *v43;
  int *v44;
  unint64_t v45;
  unint64_t v46;
  int *v47;
  uint64_t v48;
  int *v49;
  int *v50;
  unint64_t v51;
  unint64_t v52;
  int *v53;
  uint64_t v54;
  int *v55;
  int *v56;
  unint64_t v57;
  unint64_t v58;
  int *v59;
  uint64_t v60;
  int *v61;
  int *v62;
  int *v63;
  uint64_t v64;
  int *v65;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_a7e72038471917bb4125254ae57103538d43fd9d4a233b06a1f248ca3bfc11ac");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f76e110e78dbd810843354c733691fcfcd8a5624a46d34e887797178f903ab95");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v13, v14, 1);
  LODWORD(v7) = sub_BB28();
  v16 = v15;
  v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ce8d2278e7b086459bd4cccfe0b5c79b13ff287bf60e12cb62113d7478856b46");
  v18 = agxps_timeseries_get_length((uint64_t)v17);
  v19 = (int *)sub_169FF0(a5, 0, v18);
  agxps_timeseries_mul_st((int)v7, v16, v17, v19, 1);
  v20 = (int *)sub_169FF0(a5, 0, v18);
  agxps_timeseries_add_tt(v14, v19, v20, 1);
  LODWORD(v14) = sub_BB28();
  v22 = v21;
  v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_88a70ef450a839c73c44e1ebf268aa13bf92a5179d6ff3ab45ac0006fa8544cd");
  v24 = agxps_timeseries_get_length((uint64_t)v23);
  v25 = (int *)sub_169FF0(a5, 0, v24);
  agxps_timeseries_mul_st((int)v14, v22, v23, v25, 1);
  v26 = (int *)sub_169FF0(a5, 0, v24);
  agxps_timeseries_add_tt(v20, v25, v26, 1);
  LODWORD(v20) = sub_BB28();
  v28 = v27;
  v29 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_851e2825825612ac09e7b26350dc1b5b05998c3aab3198f4a2921768a84dfbbb");
  v30 = agxps_timeseries_get_length((uint64_t)v29);
  v31 = (int *)sub_169FF0(a5, 0, v30);
  agxps_timeseries_mul_st((int)v20, v28, v29, v31, 1);
  v32 = (int *)sub_169FF0(a5, 0, v30);
  agxps_timeseries_add_tt(v26, v31, v32, 1);
  LODWORD(v26) = sub_BB28();
  v34 = v33;
  v35 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_b48ed13a188e430f6a5bd26a74642ceabd518b8d290fe8322ebc00a7671bef9d");
  v36 = agxps_timeseries_get_length((uint64_t)v35);
  v37 = (int *)sub_169FF0(a5, 0, v36);
  agxps_timeseries_mul_st((int)v26, v34, v35, v37, 1);
  v38 = (int *)sub_169FF0(a5, 0, v36);
  agxps_timeseries_add_tt(v32, v37, v38, 1);
  LODWORD(v32) = sub_BB28();
  v40 = v39;
  v41 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_3b22188697e2c64b322decfb2df85c2cd7a7f264312a00737b10231811737d35");
  v42 = agxps_timeseries_get_length((uint64_t)v41);
  v43 = (int *)sub_169FF0(a5, 0, v42);
  agxps_timeseries_mul_st((int)v32, v40, v41, v43, 1);
  v44 = (int *)sub_169FF0(a5, 0, v42);
  agxps_timeseries_add_tt(v38, v43, v44, 1);
  LODWORD(v38) = sub_BB28();
  v46 = v45;
  v47 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_14a170fde3d2efeda34d72f062b69852d6b927feb012e65ae602e9c41c3565ba");
  v48 = agxps_timeseries_get_length((uint64_t)v47);
  v49 = (int *)sub_169FF0(a5, 0, v48);
  agxps_timeseries_mul_st((int)v38, v46, v47, v49, 1);
  v50 = (int *)sub_169FF0(a5, 0, v48);
  agxps_timeseries_add_tt(v44, v49, v50, 1);
  LODWORD(v44) = sub_BB28();
  v52 = v51;
  v53 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_57bf025a3b6e220efeee5fb9ecd97ad51c6adcccb96ca62426cc096e38eb9aa0");
  v54 = agxps_timeseries_get_length((uint64_t)v53);
  v55 = (int *)sub_169FF0(a5, 0, v54);
  agxps_timeseries_mul_st((int)v44, v52, v53, v55, 1);
  v56 = (int *)sub_169FF0(a5, 0, v54);
  agxps_timeseries_add_tt(v50, v55, v56, 1);
  LODWORD(v50) = sub_BB28();
  v58 = v57;
  v59 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_d86114b5bc1b6abf8638dd305669a55d8b394e5709b8e33e585d73c184d18943");
  v60 = agxps_timeseries_get_length((uint64_t)v59);
  v61 = (int *)sub_169FF0(a5, 0, v60);
  agxps_timeseries_mul_st((int)v50, v58, v59, v61, 1);
  v62 = (int *)sub_169FF0(a5, 0, v60);
  agxps_timeseries_add_tt(v56, v61, v62, 1);
  v63 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_838e506beb7a1376c2242cd5738a6016661bdfccb78c105f3ce081c89735bc9d");
  v64 = agxps_timeseries_get_length((uint64_t)v63);
  v65 = (int *)sub_169FF0(a5, 0, v64);
  agxps_timeseries_div_tt(v62, v63, v65, 1);
  return v65;
}

int *sub_F63D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ae304fc8bce5708ffef30935687e442d6bea78f814055a5fe6e3380013d7e507");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_F6468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_0927651557827fd5468721c2ee04ff7924ebb553f9e0acc6b504a791aefdf935");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_F64FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  int *v7;
  unsigned int *v8;
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;

  v3 = sub_BB28();
  v5 = v4;
  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_0927651557827fd5468721c2ee04ff7924ebb553f9e0acc6b504a791aefdf935");
  v7 = sub_F6DC(v3, v5, v6);
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_d856a24dfeb33f1dad922753efc16618fdf12ef3544115f2f5fffd93affab8d5");
  v9 = sub_D108((unsigned int *)v7, v8);
  v10 = sub_10D90((unsigned int *)v7, (unsigned int *)v9);
  v11 = sub_BB28();
  return sub_15F1C((unsigned int *)v10, v11, v12);
}

int *sub_F65B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f46268d72ed52af703d1b490e193d71605d5c756930dfe9385a5433c9b4f264f");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_F6640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_838e506beb7a1376c2242cd5738a6016661bdfccb78c105f3ce081c89735bc9d");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_F66D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int *v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_838e506beb7a1376c2242cd5738a6016661bdfccb78c105f3ce081c89735bc9d");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TextureQuads");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_F67B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_b7afe579643b48d1495eb528fa5a78db4c0a065f75636f39f24f9cf4578912cf");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_F6840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int *v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_b7afe579643b48d1495eb528fa5a78db4c0a065f75636f39f24f9cf4578912cf");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TextureQuads");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_F6920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_443fdcc2095b4dca2f7e327fb6af5914523d670164b66d05316044de82474149");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_F69B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int *v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_443fdcc2095b4dca2f7e327fb6af5914523d670164b66d05316044de82474149");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TextureQuads");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_F6A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  int *v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  int *v25;
  int *v26;
  uint64_t v27;
  int *v28;
  int *v29;
  uint64_t v30;
  int *v31;
  int *v32;
  uint64_t v33;
  int *v34;
  int *v35;
  uint64_t v36;
  int *v37;
  int *v38;
  uint64_t v39;
  int *v40;
  int *v41;
  uint64_t v42;
  int *v43;
  int *v44;
  uint64_t v45;
  int *v46;
  int *v47;
  uint64_t v48;
  int *v49;
  int *v50;
  uint64_t v51;
  int *v52;
  int *v53;
  uint64_t v54;
  int *v55;
  int *v56;
  uint64_t v57;
  int *v58;
  int *v59;
  uint64_t v60;
  int *v61;
  int *v62;
  uint64_t v63;
  int *v64;
  int *v65;
  uint64_t v66;
  int *v67;
  int *v68;
  uint64_t v69;
  int *v70;
  int *v71;
  uint64_t v72;
  int *v73;
  int *v74;
  uint64_t v75;
  int *v76;
  int *v77;
  uint64_t v78;
  int *v79;
  int *v80;
  uint64_t v81;
  int *v82;
  int *v83;
  uint64_t v84;
  int *v85;
  int *v86;
  uint64_t v87;
  int *v88;
  int *v89;
  uint64_t v90;
  int *v91;
  int *v92;
  uint64_t v93;
  int *v94;
  int *v95;
  uint64_t v96;
  int *v97;
  unint64_t v98;
  unint64_t v99;
  int *v100;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_cd1ed48f521bc3dff5675e8c48183da96f416902d6a6a198f8c83a2a6f8d0d11");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_bd02d5aeed8b2a086512b59511b59d2675b598b2801965ba46b391cd64096154");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_3bcb3dea436f55c613020a7937271b8cbb6acaf6a14172ba5175c91c9ab5567e");
  v12 = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_865162aa257660a732d84c9c100db8137273b0f5909e5210071fdd0e89742d21");
  v15 = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_c11db3f19bb1da1294fb244d920ecbf0b1b99d56ff50e75c19bcb9e5bb1f57b3");
  v18 = agxps_timeseries_get_length((uint64_t)v17);
  v19 = (int *)sub_169FF0(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_04594fddf571ddbd959568fdd6bb83d8daff2e345e898fb624563a1c3c9d0a4c");
  v21 = agxps_timeseries_get_length((uint64_t)v20);
  v22 = (int *)sub_169FF0(a5, 0, v21);
  agxps_timeseries_add_tt(v19, v20, v22, 1);
  v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_711e0179cf22b718fc893a151a0933029ea2007379bfce51a69fdf0184a5485b");
  v24 = agxps_timeseries_get_length((uint64_t)v23);
  v25 = (int *)sub_169FF0(a5, 0, v24);
  agxps_timeseries_add_tt(v22, v23, v25, 1);
  v26 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_4cb7b2192985d1bd9a9cb239446047edd976fbe2ff69438a86f59e6b813558a8");
  v27 = agxps_timeseries_get_length((uint64_t)v26);
  v28 = (int *)sub_169FF0(a5, 0, v27);
  agxps_timeseries_add_tt(v25, v26, v28, 1);
  v29 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_4724ff18a7e7c06ae181692b6cadbed734b1c843a05c05daa26071f1af4c6a87");
  v30 = agxps_timeseries_get_length((uint64_t)v29);
  v31 = (int *)sub_169FF0(a5, 0, v30);
  agxps_timeseries_add_tt(v28, v29, v31, 1);
  v32 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f8d2effb45f8b4aacaf1029c53b986b48c36db82b2d599c587ab6c8617309cf8");
  v33 = agxps_timeseries_get_length((uint64_t)v32);
  v34 = (int *)sub_169FF0(a5, 0, v33);
  agxps_timeseries_add_tt(v31, v32, v34, 1);
  v35 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_eac71bc8f3eb0ca60d7616bcb6c0f838417f6ab5859c211564897b1ff7c4199c");
  v36 = agxps_timeseries_get_length((uint64_t)v35);
  v37 = (int *)sub_169FF0(a5, 0, v36);
  agxps_timeseries_add_tt(v34, v35, v37, 1);
  v38 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_51775add461074af32e489ceb1be9957e57adffb8c08954e7cbc8b97503f57aa");
  v39 = agxps_timeseries_get_length((uint64_t)v38);
  v40 = (int *)sub_169FF0(a5, 0, v39);
  agxps_timeseries_add_tt(v37, v38, v40, 1);
  v41 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_611e8d6895be97ec85f10254d0a182eba64be144b3828d81e58296d054c806f4");
  v42 = agxps_timeseries_get_length((uint64_t)v41);
  v43 = (int *)sub_169FF0(a5, 0, v42);
  agxps_timeseries_add_tt(v40, v41, v43, 1);
  v44 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_29b22d9d81e5faf744ffe7f2ef578e3373cddcc7920cbcc40a2adbe852681fc9");
  v45 = agxps_timeseries_get_length((uint64_t)v44);
  v46 = (int *)sub_169FF0(a5, 0, v45);
  agxps_timeseries_add_tt(v43, v44, v46, 1);
  v47 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_5a7e43ba4541824bbaa881559bdcdd5ef8408e3ba5e9a4a5b8c8263cf2154427");
  v48 = agxps_timeseries_get_length((uint64_t)v47);
  v49 = (int *)sub_169FF0(a5, 0, v48);
  agxps_timeseries_add_tt(v46, v47, v49, 1);
  v50 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_0596eeb85056cf898443332ee6ea8bb881ee935a2e48e123c1bea937d7628835");
  v51 = agxps_timeseries_get_length((uint64_t)v50);
  v52 = (int *)sub_169FF0(a5, 0, v51);
  agxps_timeseries_add_tt(v49, v50, v52, 1);
  v53 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_99a23e5520fca1ce9e447dcb8f465fb3421277f600bd4619d437c73762113efb");
  v54 = agxps_timeseries_get_length((uint64_t)v53);
  v55 = (int *)sub_169FF0(a5, 0, v54);
  agxps_timeseries_add_tt(v52, v53, v55, 1);
  v56 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f20734f8b1c3edc9cd0770ab4136f9c10a91972eb00a5b6d09d709ec96e491fa");
  v57 = agxps_timeseries_get_length((uint64_t)v56);
  v58 = (int *)sub_169FF0(a5, 0, v57);
  agxps_timeseries_add_tt(v55, v56, v58, 1);
  v59 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_1368d41a242c0d8551e43e68e72de446f5393d47c57e5e80d30a559200ed596c");
  v60 = agxps_timeseries_get_length((uint64_t)v59);
  v61 = (int *)sub_169FF0(a5, 0, v60);
  agxps_timeseries_add_tt(v58, v59, v61, 1);
  v62 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_c5fcc1133689a4133a1de53ded83dc65a5521aa193be40ab64c4189f3a9ae9cf");
  v63 = agxps_timeseries_get_length((uint64_t)v62);
  v64 = (int *)sub_169FF0(a5, 0, v63);
  agxps_timeseries_add_tt(v61, v62, v64, 1);
  v65 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_e1ad3266ba1f3521d10f57bd0d29721449ef2ac9bbaaafd3d3ae59b1627126db");
  v66 = agxps_timeseries_get_length((uint64_t)v65);
  v67 = (int *)sub_169FF0(a5, 0, v66);
  agxps_timeseries_add_tt(v64, v65, v67, 1);
  v68 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_3ebb8c7a6a99602c5cd417ea8af19176f3ceb108288c6f00f490ae550ac5c2c6");
  v69 = agxps_timeseries_get_length((uint64_t)v68);
  v70 = (int *)sub_169FF0(a5, 0, v69);
  agxps_timeseries_add_tt(v67, v68, v70, 1);
  v71 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_459564729d0b5db736b153577373a56625347fe30183800281802f300feee3ba");
  v72 = agxps_timeseries_get_length((uint64_t)v71);
  v73 = (int *)sub_169FF0(a5, 0, v72);
  agxps_timeseries_add_tt(v70, v71, v73, 1);
  v74 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_c077cee4bb409aecdf1974aadf9abcb056681bc42c4fc15f30170bf80d1f6e4c");
  v75 = agxps_timeseries_get_length((uint64_t)v74);
  v76 = (int *)sub_169FF0(a5, 0, v75);
  agxps_timeseries_add_tt(v73, v74, v76, 1);
  v77 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_fa01d5329f611805a99f4699e796d485f8f993df07816be0c8b15ac5e39951ea");
  v78 = agxps_timeseries_get_length((uint64_t)v77);
  v79 = (int *)sub_169FF0(a5, 0, v78);
  agxps_timeseries_add_tt(v76, v77, v79, 1);
  v80 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_0b4c966855c4b581f07ec85a1491cb234d31a838aaf82adc9427d3b2497bd31c");
  v81 = agxps_timeseries_get_length((uint64_t)v80);
  v82 = (int *)sub_169FF0(a5, 0, v81);
  agxps_timeseries_add_tt(v79, v80, v82, 1);
  v83 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_3a4bf2592dcfa5bd877f621933e8c97461f8774aaf1561c64cc4e90f0cafeb4e");
  v84 = agxps_timeseries_get_length((uint64_t)v83);
  v85 = (int *)sub_169FF0(a5, 0, v84);
  agxps_timeseries_add_tt(v82, v83, v85, 1);
  v86 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_89051b6760c2a53381edfd5c68aef41e769dba64437b5fc30417a810f55e9296");
  v87 = agxps_timeseries_get_length((uint64_t)v86);
  v88 = (int *)sub_169FF0(a5, 0, v87);
  agxps_timeseries_add_tt(v85, v86, v88, 1);
  v89 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_4e088158f4d8adbbe88420686b1cb8700f71b4a42277c8b25c3f00bb97008361");
  v90 = agxps_timeseries_get_length((uint64_t)v89);
  v91 = (int *)sub_169FF0(a5, 0, v90);
  agxps_timeseries_add_tt(v88, v89, v91, 1);
  v92 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_0427b329a9bf6f3b297e589bdebcd2e8a222101e677f95061e2fbe6fbe4ffa6f");
  v93 = agxps_timeseries_get_length((uint64_t)v92);
  v94 = (int *)sub_169FF0(a5, 0, v93);
  agxps_timeseries_add_tt(v91, v92, v94, 1);
  v95 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_da358d8f72edfef7369baa73d3f5e11cfbd49f69949f6c79da120cd408287c04");
  v96 = agxps_timeseries_get_length((uint64_t)v95);
  v97 = (int *)sub_169FF0(a5, 0, v96);
  agxps_timeseries_add_tt(v94, v95, v97, 1);
  LODWORD(v95) = sub_BB28();
  v99 = v98;
  v100 = (int *)sub_169FF0(a5, 0, v96);
  agxps_timeseries_mul_ts(v97, (int)v95, v99, v100, 1);
  return v100;
}

uint64_t sub_F7394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "CompressedSamples");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TextureQuads");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v15, v17, v18, 1);
  v19 = sub_BB28();
  v21 = v20;
  v22 = sub_169FF0(a5, 0, v14);
  v23 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v18, v19, v21, v22, 1);
  agxps_timeseries_select_tts(v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  v24 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  v25 = sub_BB28();
  v27 = v26;
  v28 = sub_169FF0(a5, 0, v14);
  v29 = sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(2, v24, v25, v27, v28, 1);
  agxps_timeseries_select_tts(v28, (uint64_t)v24, v25, v27, v29);
  return v29;
}

int *sub_F75A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_7cdc2c85e61923202c5936567bb447b8929b55e3fadd72277ff0796a99a7bdb4");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_F7638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "LosslessCompressedSamples");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TextureQuads");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v15, v17, v18, 1);
  v19 = sub_BB28();
  v21 = v20;
  v22 = sub_169FF0(a5, 0, v14);
  v23 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v18, v19, v21, v22, 1);
  agxps_timeseries_select_tts(v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  v24 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  return v24;
}

int *sub_F77D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_4e06778c6dbd312e12fd320be6a28037bd94e2cc19c8687aba8981ec52f7d19e");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_F7860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "LossyCompressedSamples");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TextureQuads");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v15, v17, v18, 1);
  v19 = sub_BB28();
  v21 = v20;
  v22 = sub_169FF0(a5, 0, v14);
  v23 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v18, v19, v21, v22, 1);
  agxps_timeseries_select_tts(v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  v24 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  return v24;
}

uint64_t sub_F79F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  int *v9;
  uint64_t length;
  int *v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TextureSamples");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "CompressedSamples");
  agxps_timeseries_get_length((uint64_t)v8);
  v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "LosslessCompressedSamples");
  length = agxps_timeseries_get_length((uint64_t)v9);
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v8, v9, v11, 1);
  v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "LossyCompressedSamples");
  v13 = agxps_timeseries_get_length((uint64_t)v12);
  v14 = (int *)sub_169FF0(a5, 0, v13);
  agxps_timeseries_add_tt(v11, v12, v14, 1);
  v15 = (int *)sub_169FF0(a5, 0, v13);
  agxps_timeseries_sub_tt(v7, v14, v15, 1);
  v16 = sub_BB28();
  v18 = v17;
  v19 = sub_169FF0(a5, 0, v13);
  v20 = sub_169FF0(a5, 0, v13);
  agxps_timeseries_compare_ts(3, v15, v16, v18, v19, 1);
  agxps_timeseries_select_tts(v19, (uint64_t)v15, v16, v18, v20);
  return v20;
}

uint64_t sub_F7B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "UncompressedSamples");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TextureQuads");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  LODWORD(v9) = sub_BB28();
  v16 = v15;
  v17 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_mul_ts(v13, v9, v16, v17, 1);
  v18 = sub_BB28();
  v20 = v19;
  v21 = sub_169FF0(a5, 0, v14);
  v22 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v17, v18, v20, v21, 1);
  agxps_timeseries_select_tts(v21, (uint64_t)v17, v18, v20, (uint64_t)v22);
  v23 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v22, v23, 1);
  v24 = sub_BB28();
  v26 = v25;
  v27 = sub_169FF0(a5, 0, v14);
  v28 = sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(2, v23, v24, v26, v27, 1);
  agxps_timeseries_select_tts(v27, (uint64_t)v23, v24, v26, v28);
  return v28;
}

int *sub_F7DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f406f88bdd312ec0455d0943c388de77e53b86cf0109624b028c3aa596ec3bf4");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_F7E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_170b3221860fc0fbaa56212aaec28265bbcde52553eab4dcc253c612393c0d02");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_b1c17891cd73c9759b561e8166a6d51c7a422df70de3a45524ee1d8edf3d8edc");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  LODWORD(v8) = sub_BB28();
  v12 = v11;
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v10, (int)v8, v12, v13, 1);
  return v13;
}

uint64_t sub_F7F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t length;
  uint64_t v10;
  uint64_t v11;
  double v12;

  v7 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PixelsUnbiasedWrittenToMemory");
  agxps_timeseries_get_length(v7);
  v8 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TexturePixelsWrittenToMemory");
  length = agxps_timeseries_get_length(v8);
  v10 = sub_169FF0(a5, 0, length);
  v11 = sub_169FF0(a5, 0, length);
  v12 = agxps_timeseries_compare_tt(3, v7, v8, v10, 1);
  agxps_timeseries_select_ttt(v10, v7, v8, v11, v12);
  return v11;
}

uint64_t sub_F7FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PixelsUnbiasedWrittenToMemory");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TexturePixelsWrittenToMemory");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_sub_tt(v7, v8, v10, 1);
  v11 = sub_BB28();
  v13 = v12;
  v14 = sub_169FF0(a5, 0, length);
  v15 = sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v10, v11, v13, v14, 1);
  agxps_timeseries_select_tts(v14, (uint64_t)v10, v11, v13, v15);
  return v15;
}

int *sub_F80F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_17ce0d5869b1ca5ede98d597eab698bc9a77c1ce783528f1a91438acb0c9fd08");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_71974a1faa4bcd23016a415a1cc6479308dab6778adbf2bab1cc0b8bf7de9982");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  LODWORD(v8) = sub_BB28();
  v12 = v11;
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v10, (int)v8, v12, v13, 1);
  return v13;
}

int *sub_F81D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  int *v11;
  uint64_t v12;
  int *v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int *v17;
  int *v18;
  uint64_t v19;
  int *v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  int *v24;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_84bc1f813b908b1a82a17fdf171643fd8ce9017f20844aa9fd9dd7f157bfeb00");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_766330b34b32220fe711ebf12a170751a84406ef29a5cd982cef665be1b22d5d");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f68e35eeb2bee048cb6bf9642f11773f9a1cac3f48f8bd73dac5c2f707b94e9c");
  v12 = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_4d4fe81719dc0200f2d42c34feddce82198b6d23f8bbe3ec0bd4187bf4a30249");
  agxps_timeseries_get_length((uint64_t)v14);
  v15 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_0f5ce867725c9affb1528c58134532b18ac7e8860047f7e3b81c9f367bf50f04");
  v16 = agxps_timeseries_get_length((uint64_t)v15);
  v17 = (int *)sub_169FF0(a5, 0, v16);
  agxps_timeseries_add_tt(v14, v15, v17, 1);
  v18 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_5f3f0a1e85f83b10e10c873cae3db6a0be598f56f0c208e4d8bf3a4ea9cf40fa");
  v19 = agxps_timeseries_get_length((uint64_t)v18);
  v20 = (int *)sub_169FF0(a5, 0, v19);
  agxps_timeseries_add_tt(v17, v18, v20, 1);
  v21 = (int *)sub_169FF0(a5, 0, v19);
  agxps_timeseries_add_tt(v13, v20, v21, 1);
  LODWORD(v13) = sub_BB28();
  v23 = v22;
  v24 = (int *)sub_169FF0(a5, 0, v19);
  agxps_timeseries_mul_ts(v21, (int)v13, v23, v24, 1);
  return v24;
}

int *sub_F83CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  int *v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int *v22;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_5139262f4aa51a2a266c84eae7b1d2a0524e10ec154ddf35e1e1bc529071258a");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_a126f888ccf5d17092b398420351fb81f0c5462f5e15a2bf22f6914208f68de2");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_b2f6334df9fdac01bda9fa44b127edadeb640750d6824c0b27a248d10aba3638");
  v12 = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_346c9e2c1dd65c22e4dcdd48f80c681551c075280b02796f700601c4530e6f4f");
  v15 = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ba686a2bead0a853932fbb1feeb87f6b3cabbfa17f2e647b7d6f92105f398c4d");
  v18 = agxps_timeseries_get_length((uint64_t)v17);
  v19 = (int *)sub_169FF0(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_5d5cf41f6d7d32235e797b13857ad1e9dfa3b04d83470ee5997d55d83e8107aa");
  v21 = agxps_timeseries_get_length((uint64_t)v20);
  v22 = (int *)sub_169FF0(a5, 0, v21);
  agxps_timeseries_add_tt(v19, v20, v22, 1);
  return v22;
}

int *sub_F8588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_5139262f4aa51a2a266c84eae7b1d2a0524e10ec154ddf35e1e1bc529071258a");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TotalSBUsedInLossyCompression");
  v14 = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, v14);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F86E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_a126f888ccf5d17092b398420351fb81f0c5462f5e15a2bf22f6914208f68de2");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TotalSBUsedInLossyCompression");
  v14 = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, v14);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F8838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  uint64_t length;
  int *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  int *v28;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_b2f6334df9fdac01bda9fa44b127edadeb640750d6824c0b27a248d10aba3638");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_346c9e2c1dd65c22e4dcdd48f80c681551c075280b02796f700601c4530e6f4f");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ba686a2bead0a853932fbb1feeb87f6b3cabbfa17f2e647b7d6f92105f398c4d");
  v15 = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_5d5cf41f6d7d32235e797b13857ad1e9dfa3b04d83470ee5997d55d83e8107aa");
  v18 = agxps_timeseries_get_length((uint64_t)v17);
  v19 = (int *)sub_169FF0(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  v20 = (int *)sub_169FF0(a5, 0, v18);
  agxps_timeseries_mul_st(v7, v9, v19, v20, 1);
  v21 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TotalSBUsedInLossyCompression");
  v22 = agxps_timeseries_get_length(v21);
  v23 = sub_BB28();
  v25 = v24;
  v26 = sub_169FF0(a5, 0, v22);
  v27 = (int *)sub_169FF0(a5, 0, v22);
  agxps_timeseries_compare_ts(3, v21, v23, v25, v26, 1);
  agxps_timeseries_select_tts(v26, v21, v23, v25, (uint64_t)v27);
  v28 = (int *)sub_169FF0(a5, 0, v22);
  agxps_timeseries_div_tt(v20, v27, v28, 1);
  return v28;
}

int *sub_F8A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  int *v18;
  int *v19;
  unint64_t v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  int *v24;
  int *v25;
  int *v26;
  uint64_t v27;
  int *v28;
  int *v29;
  int *v30;
  int *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int *v36;
  int *v37;
  int *v39;

  v39 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_b2f6334df9fdac01bda9fa44b127edadeb640750d6824c0b27a248d10aba3638");
  agxps_timeseries_get_length((uint64_t)v39);
  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_346c9e2c1dd65c22e4dcdd48f80c681551c075280b02796f700601c4530e6f4f");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v39, v12, v13, 1);
  LODWORD(length) = sub_BB28();
  v15 = v14;
  v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ba686a2bead0a853932fbb1feeb87f6b3cabbfa17f2e647b7d6f92105f398c4d");
  v17 = agxps_timeseries_get_length((uint64_t)v16);
  v18 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_mul_st(length, v15, v16, v18, 1);
  v19 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_add_tt(v13, v18, v19, 1);
  LODWORD(v13) = sub_BB28();
  v21 = v20;
  v22 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_5d5cf41f6d7d32235e797b13857ad1e9dfa3b04d83470ee5997d55d83e8107aa");
  v23 = agxps_timeseries_get_length((uint64_t)v22);
  v24 = (int *)sub_169FF0(a5, 0, v23);
  agxps_timeseries_mul_st((int)v13, v21, v22, v24, 1);
  v25 = (int *)sub_169FF0(a5, 0, v23);
  agxps_timeseries_add_tt(v19, v24, v25, 1);
  v26 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_a126f888ccf5d17092b398420351fb81f0c5462f5e15a2bf22f6914208f68de2");
  v27 = agxps_timeseries_get_length((uint64_t)v26);
  v28 = (int *)sub_169FF0(a5, 0, v27);
  agxps_timeseries_add_tt(v26, v39, v28, 1);
  v29 = (int *)sub_169FF0(a5, 0, v27);
  agxps_timeseries_add_tt(v28, v10, v29, 1);
  v30 = (int *)sub_169FF0(a5, 0, v27);
  agxps_timeseries_add_tt(v29, v16, v30, 1);
  v31 = (int *)sub_169FF0(a5, 0, v27);
  agxps_timeseries_add_tt(v30, v22, v31, 1);
  v32 = sub_BB28();
  v34 = v33;
  v35 = sub_169FF0(a5, 0, v27);
  v36 = (int *)sub_169FF0(a5, 0, v27);
  agxps_timeseries_compare_ts(3, v31, v32, v34, v35, 1);
  agxps_timeseries_select_tts(v35, (uint64_t)v31, v32, v34, (uint64_t)v36);
  v37 = (int *)sub_169FF0(a5, 0, v27);
  agxps_timeseries_div_tt(v25, v36, v37, 1);
  return v37;
}

int *sub_F8DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TexturePixelsWrittenToMemory");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PixelsWrittenToMemory");
  v14 = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, v14);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F8F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "AttachmentPixelsWrittenToMemory");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PixelsWrittenToMemory");
  v14 = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, v14);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F9080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "CompressedPixelsWrittenToMemory");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PixelsWrittenToMemory");
  v14 = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, v14);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F91D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "LossyCompressedPixelsWrittenToMemory");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PixelsWrittenToMemory");
  v14 = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, v14);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

int *sub_F9330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_66eafb3ddb63687a1eef3817f25c70385aeb51f41d76b5cbdc5aa69a556bb76c");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_F93C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_788f9865b6b4897849bedfd577403fe30b882c1c6c2afcdbf2a9f8a0d41e741b");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_F9450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t length;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int *v19;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "MSAA2XResolvedPixels");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PixelsWrittenToMemory");
  length = agxps_timeseries_get_length(v11);
  v13 = sub_BB28();
  v15 = v14;
  v16 = sub_169FF0(a5, 0, length);
  v17 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v11, v13, v15, v16, 1);
  agxps_timeseries_select_tts(v16, v11, v13, v15, (uint64_t)v17);
  v18 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v10, v17, v18, 1);
  v19 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v18, v19, 1);
  return v19;
}

int *sub_F95B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t length;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int *v19;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "MSAA4XResolvedPixels");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PixelsWrittenToMemory");
  length = agxps_timeseries_get_length(v11);
  v13 = sub_BB28();
  v15 = v14;
  v16 = sub_169FF0(a5, 0, length);
  v17 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v11, v13, v15, v16, 1);
  agxps_timeseries_select_tts(v16, v11, v13, v15, (uint64_t)v17);
  v18 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v10, v17, v18, 1);
  v19 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v18, v19, 1);
  return v19;
}

int *sub_F9710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  int *v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  unint64_t v17;
  unint64_t v18;
  int *v19;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_92e4033c73762edd1ce117ae25bceecf0ae126712bf861ca430c8049f845b9ff");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_37b62c762d1c23168d0c25f1bc6033c6ee17922f5e31eab8d0cd946eb40ff5f3");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_984b0993354750161fe0018879ef125f6e3d98a5cbd800796dba5fb611df1651");
  v12 = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_6bb7d08e271a527bc1e586380563ec0de8de7e58c81e7b417ac1ecb39790c288");
  v15 = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  LODWORD(v14) = sub_BB28();
  v18 = v17;
  v19 = (int *)sub_169FF0(a5, 0, v15);
  agxps_timeseries_mul_ts(v16, (int)v14, v18, v19, 1);
  return v19;
}

int *sub_F987C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t length;
  int *v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  int *v22;
  int *v23;
  unint64_t v24;
  unint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  int *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  int *v38;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_92e4033c73762edd1ce117ae25bceecf0ae126712bf861ca430c8049f845b9ff");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = sub_BB28();
  v13 = v12;
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_37b62c762d1c23168d0c25f1bc6033c6ee17922f5e31eab8d0cd946eb40ff5f3");
  length = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v11, v13, v14, v16, 1);
  v17 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v10, v16, v17, 1);
  LODWORD(v10) = sub_BB28();
  v19 = v18;
  v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_984b0993354750161fe0018879ef125f6e3d98a5cbd800796dba5fb611df1651");
  v21 = agxps_timeseries_get_length((uint64_t)v20);
  v22 = (int *)sub_169FF0(a5, 0, v21);
  agxps_timeseries_mul_st((int)v10, v19, v20, v22, 1);
  v23 = (int *)sub_169FF0(a5, 0, v21);
  agxps_timeseries_add_tt(v17, v22, v23, 1);
  LODWORD(v17) = sub_BB28();
  v25 = v24;
  v26 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_6bb7d08e271a527bc1e586380563ec0de8de7e58c81e7b417ac1ecb39790c288");
  v27 = agxps_timeseries_get_length((uint64_t)v26);
  v28 = (int *)sub_169FF0(a5, 0, v27);
  agxps_timeseries_mul_st((int)v17, v25, v26, v28, 1);
  v29 = (int *)sub_169FF0(a5, 0, v27);
  agxps_timeseries_add_tt(v23, v28, v29, 1);
  v30 = (int *)sub_169FF0(a5, 0, v27);
  agxps_timeseries_mul_st(v7, v9, v29, v30, 1);
  v31 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TotalResolvedPixels");
  v32 = agxps_timeseries_get_length(v31);
  v33 = sub_BB28();
  v35 = v34;
  v36 = sub_169FF0(a5, 0, v32);
  v37 = (int *)sub_169FF0(a5, 0, v32);
  agxps_timeseries_compare_ts(3, v31, v33, v35, v36, 1);
  agxps_timeseries_select_tts(v36, v31, v33, v35, (uint64_t)v37);
  v38 = (int *)sub_169FF0(a5, 0, v32);
  agxps_timeseries_div_tt(v30, v37, v38, 1);
  return v38;
}

int *sub_F9B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int *v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_867226b78b975653eb9f9d171ce53bedbf3edbc1ee1af8aa960cb9db4ec6490f");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_df20e560276a18cd9b97f03f47abf0d8bf719014920913d325c6ad5d4ab98453");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_F9C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int *v15;
  int *v16;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f430991e42f778aeda210861eca9b8cef241898007339644eff469d83e5a6c9d");
  length = agxps_timeseries_get_length((uint64_t)v7);
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, v9, v11, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_3459b3e3f2f8a441719d05aae2161786eded99c72d7215bb6797f836d46a3426");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_add_tt(v7, v13, v15, 1);
  v16 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v15, v16, 1);
  return v16;
}

int *sub_F9D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  uint64_t length;
  int *v13;
  int *v14;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f539a056fbd45e39d61b9d34af0ea1a305dd8af6f005b5aa29488f2c966e7f21");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_c420303ee3c2ea941491fa0a071ec1553251898524fce318c3635bc711160395");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  return v14;
}

int *sub_F9E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  uint64_t length;
  int *v13;
  int *v14;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_c89f25b2a31116ea6540fc6b89b623da7d4cbc9b2349ce7dbe4423a1395da60a");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_7eba0657c66c2437c8d6952fb82117b9399d920ea84fa32c5bdc9d1dee49e290");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  return v14;
}

int *sub_F9F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  uint64_t length;
  int *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_3c6dba64fd85b35b8b8339f1d322943087d45cbb9b6689c587fd76259587a9d8");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ac73411a986e90adcd0a1181ace1f2684e4a900be931343385b93f58de650db4");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_sub_tt(v10, v11, v13, 1);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_9153a820a764c5c32c10432035db3a4194ee169ef665e8fc7297bd5592b39e62");
  v15 = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_2fc529a9d4ee232bf862a8eb577d573bb5b4a0b9bd581d966832ceb22e3be4cf");
  v18 = agxps_timeseries_get_length((uint64_t)v17);
  v19 = (int *)sub_169FF0(a5, 0, v18);
  agxps_timeseries_sub_tt(v16, v17, v19, 1);
  v20 = sub_BB28();
  v22 = v21;
  v23 = sub_169FF0(a5, 0, v18);
  v24 = (int *)sub_169FF0(a5, 0, v18);
  agxps_timeseries_compare_ts(3, v19, v20, v22, v23, 1);
  agxps_timeseries_select_tts(v23, (uint64_t)v19, v20, v22, (uint64_t)v24);
  v25 = (int *)sub_169FF0(a5, 0, v18);
  agxps_timeseries_mul_st(v7, v9, v24, v25, 1);
  return v25;
}

int *sub_FA11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  uint64_t length;
  int *v13;
  int *v14;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_3c6dba64fd85b35b8b8339f1d322943087d45cbb9b6689c587fd76259587a9d8");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_9153a820a764c5c32c10432035db3a4194ee169ef665e8fc7297bd5592b39e62");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  return v14;
}

int *sub_FA204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  uint64_t length;
  int *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int *v21;
  uint64_t v22;
  int *v23;
  int *v24;
  uint64_t v25;
  int *v26;
  int *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int *v34;
  int *v35;
  int *v36;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ef52925e500884ba6b276e576ae78b97fd8448dfadeba596c2202b5202e246c3");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_43fe12d20dfe3a9ea7b303773d624405e026e20b2c550822f2587997d2557f13");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_0d5290b07753d1bbf223d0700438322c356bc6d3f028bf47df09e81f21da75c6");
  v15 = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_3329a7bf90f5b81c24f86beffadfc66daefb2b2f45b08cdb822f931dac7370d6");
  v18 = agxps_timeseries_get_length((uint64_t)v17);
  v19 = (int *)sub_169FF0(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_3c6dba64fd85b35b8b8339f1d322943087d45cbb9b6689c587fd76259587a9d8");
  agxps_timeseries_get_length((uint64_t)v20);
  v21 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ac73411a986e90adcd0a1181ace1f2684e4a900be931343385b93f58de650db4");
  v22 = agxps_timeseries_get_length((uint64_t)v21);
  v23 = (int *)sub_169FF0(a5, 0, v22);
  agxps_timeseries_sub_tt(v20, v21, v23, 1);
  v24 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_9153a820a764c5c32c10432035db3a4194ee169ef665e8fc7297bd5592b39e62");
  v25 = agxps_timeseries_get_length((uint64_t)v24);
  v26 = (int *)sub_169FF0(a5, 0, v25);
  agxps_timeseries_add_tt(v23, v24, v26, 1);
  v27 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_2fc529a9d4ee232bf862a8eb577d573bb5b4a0b9bd581d966832ceb22e3be4cf");
  v28 = agxps_timeseries_get_length((uint64_t)v27);
  v29 = (int *)sub_169FF0(a5, 0, v28);
  agxps_timeseries_sub_tt(v26, v27, v29, 1);
  v30 = sub_BB28();
  v32 = v31;
  v33 = sub_169FF0(a5, 0, v28);
  v34 = (int *)sub_169FF0(a5, 0, v28);
  agxps_timeseries_compare_ts(3, v29, v30, v32, v33, 1);
  agxps_timeseries_select_tts(v33, (uint64_t)v29, v30, v32, (uint64_t)v34);
  v35 = (int *)sub_169FF0(a5, 0, v28);
  agxps_timeseries_add_tt(v19, v34, v35, 1);
  v36 = (int *)sub_169FF0(a5, 0, v28);
  agxps_timeseries_mul_st(v7, v9, v35, v36, 1);
  return v36;
}

int *sub_FA514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  uint64_t length;
  int *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int *v22;
  int *v23;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_d7a23701e11432625d46f02ff35668e60e55a7706704976facfe5fbeea3b1936");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_88723e1253a5c3264f69b1fbf3a6b7f3ab67bbd9fe97afeedb649146b3b8b043");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_56a63abf333e0f9f06f1a00635d4125c3910b3c00286e4fb3652687402916c8a");
  v15 = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_3c6dba64fd85b35b8b8339f1d322943087d45cbb9b6689c587fd76259587a9d8");
  v18 = agxps_timeseries_get_length((uint64_t)v17);
  v19 = (int *)sub_169FF0(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_9153a820a764c5c32c10432035db3a4194ee169ef665e8fc7297bd5592b39e62");
  v21 = agxps_timeseries_get_length((uint64_t)v20);
  v22 = (int *)sub_169FF0(a5, 0, v21);
  agxps_timeseries_add_tt(v19, v20, v22, 1);
  v23 = (int *)sub_169FF0(a5, 0, v21);
  agxps_timeseries_mul_st(v7, v9, v22, v23, 1);
  return v23;
}

int *sub_FA6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_df20e560276a18cd9b97f03f47abf0d8bf719014920913d325c6ad5d4ab98453");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

uint64_t sub_FA768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t length;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  int v30;

  v7 = sub_BB28();
  v29 = v8;
  v30 = v7;
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f406f88bdd312ec0455d0943c388de77e53b86cf0109624b028c3aa596ec3bf4");
  agxps_timeseries_get_length((uint64_t)v12);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_9da983fb76d81017bb17c1307769e9cdaa3547cc33eadcf7f389043343c66b31");
  length = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, length);
  v19 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  v21 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_sub_st(v9, v11, v20, v21, 1);
  v22 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v30, v29, v21, v22, 1);
  v23 = sub_BB28();
  v25 = v24;
  v26 = sub_169FF0(a5, 0, length);
  v27 = sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v22, v23, v25, v26, 1);
  agxps_timeseries_select_tts(v26, (uint64_t)v22, v23, v25, v27);
  return v27;
}

uint64_t sub_FA974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t length;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  int v34;

  v7 = sub_BB28();
  v33 = v8;
  v34 = v7;
  v9 = sub_BB28();
  v11 = v10;
  v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TextureAccesses");
  agxps_timeseries_get_length((uint64_t)v12);
  v13 = sub_BB28();
  v15 = v14;
  v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "TextureQuads");
  length = agxps_timeseries_get_length((uint64_t)v16);
  v18 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v13, v15, v16, v18, 1);
  v19 = sub_BB28();
  v21 = v20;
  v22 = sub_169FF0(a5, 0, length);
  v23 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v18, v19, v21, v22, 1);
  agxps_timeseries_select_tts(v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  v24 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  v25 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_sub_st(v9, v11, v24, v25, 1);
  v26 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v34, v33, v25, v26, 1);
  v27 = sub_BB28();
  v29 = v28;
  v30 = sub_169FF0(a5, 0, length);
  v31 = sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v26, v27, v29, v30, 1);
  agxps_timeseries_select_tts(v30, (uint64_t)v26, v27, v29, v31);
  return v31;
}

int *sub_FABBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  int *v13;
  uint64_t v14;
  int *v15;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_416b2a4855c3ad10e45eaab8493e7651ad66f8e3d44ad880fa8111c87ccd090a");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_eda5bce70befa39e7c6029505c0269211092c220048a502fd8fa2fe30895465b");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_FAC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_416b2a4855c3ad10e45eaab8493e7651ad66f8e3d44ad880fa8111c87ccd090a");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = sub_BB28();
  v15 = v14;
  v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ca0d54323c1777d994357aaacdb7beac572bea11cd16afed4c756f3dc9496a18");
  v17 = agxps_timeseries_get_length((uint64_t)v16);
  v18 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_mul_st(v13, v15, v16, v18, 1);
  v19 = sub_BB28();
  v21 = v20;
  v22 = sub_169FF0(a5, 0, v17);
  v23 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_compare_ts(3, v18, v19, v21, v22, 1);
  agxps_timeseries_select_tts(v22, (uint64_t)v18, v19, v21, (uint64_t)v23);
  v24 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_div_tt(v12, v23, v24, 1);
  return v24;
}

int *sub_FAE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  int *v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int *v18;
  uint64_t v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  int *v25;
  int *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_b4a97f86133bb31ea8cf25afb427cb7dc1fe52552105fcd8bc3c4aa7ad099a78");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_9969883349fe2838e0be35dff1762942e9491b337c7b0ba46661003a330996ac");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_868dda8bb614bc2256251603b58ea88fa9ebfde94214a32cac586b56bc8a0fdc");
  v12 = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_001df138804c389a08dc6f67112cad9b15228d51415c964e384102355b0ff784");
  v15 = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f8d12ed1fd4a2c10df5bc36ac39f6108a81c23c312389616fd2fa2fbf882c94a");
  agxps_timeseries_get_length((uint64_t)v17);
  v18 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_c9b7b4db80ce4f449662cc8a655a128294ce8cb63a963492682ad9c02a338a46");
  v19 = agxps_timeseries_get_length((uint64_t)v18);
  v20 = (int *)sub_169FF0(a5, 0, v19);
  agxps_timeseries_add_tt(v17, v18, v20, 1);
  LODWORD(v17) = sub_BB28();
  v22 = v21;
  v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_4167773bd45e5e4d7f626a716b9775f840b172225798dd96b00c6f7f0290d75e");
  v24 = agxps_timeseries_get_length((uint64_t)v23);
  v25 = (int *)sub_169FF0(a5, 0, v24);
  agxps_timeseries_mul_st((int)v17, v22, v23, v25, 1);
  v26 = (int *)sub_169FF0(a5, 0, v24);
  agxps_timeseries_add_tt(v20, v25, v26, 1);
  v27 = sub_BB28();
  v29 = v28;
  v30 = sub_169FF0(a5, 0, v24);
  v31 = (int *)sub_169FF0(a5, 0, v24);
  agxps_timeseries_compare_ts(3, v26, v27, v29, v30, 1);
  agxps_timeseries_select_tts(v30, (uint64_t)v26, v27, v29, (uint64_t)v31);
  v32 = (int *)sub_169FF0(a5, 0, v24);
  agxps_timeseries_div_tt(v16, v31, v32, 1);
  return v32;
}

int *sub_FB0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_1827ca25b7318e2df60eb0fe4f0c290b43054021ec3233e1fcdcf7b622fe4589");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_04d4411374e68233627aa77e33b97414d97097b7d3599dc0555f05e8ba0c27ad");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  v11 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_127d5295001f8af60ca5165221e36d79521a187e9c43940c9ea618e0d2d7c316");
  v12 = agxps_timeseries_get_length(v11);
  v13 = sub_BB28();
  v15 = v14;
  v16 = sub_169FF0(a5, 0, v12);
  v17 = (int *)sub_169FF0(a5, 0, v12);
  agxps_timeseries_compare_ts(3, v11, v13, v15, v16, 1);
  agxps_timeseries_select_tts(v16, v11, v13, v15, (uint64_t)v17);
  v18 = (int *)sub_169FF0(a5, 0, v12);
  agxps_timeseries_div_tt(v10, v17, v18, 1);
  return v18;
}

int *sub_FB248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_3a25f8b9b9a3bb6fee419881039de7947be1fc155061f0ed642d5957df2c9221");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FB2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_732f9ae18abcb107b504911ba9abe0422500b581734d0a11f801be57da3a56b5");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FB370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  int *v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ba0f7bef8431f94f98ea8587e522d4c8468e2bab9bc0be87d3b8b9ac97981db3");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_48d6a3135170e202f4c373f10c7fe2f4f35ae24a0feecef8accedc4f75fb7af4");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_01d049a728cff3c54b425c2839925c3f72de7d5110d2cd0b6823d0360fd8b0d4");
  v12 = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  LODWORD(v11) = sub_BB28();
  v15 = v14;
  v16 = (int *)sub_169FF0(a5, 0, v12);
  agxps_timeseries_mul_ts(v13, (int)v11, v15, v16, 1);
  return v16;
}

uint64_t sub_FB498(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "AF Bandwidth");
}

int *sub_FB4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_fa7f16c60620d451db8d71e3b82cab7253d2dbf1457c7966dbf002da9af010c0");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_FB53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  uint64_t length;
  int *v13;
  int *v14;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_e06b821bba710b56a3eaf194be742a6d964b111bb761426f6b1ebd16e227010e");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_becc55001438de226fddc3e26ffa180fce103d635eb0f85ffbb6c01dbde954fd");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  return v14;
}

int *sub_FB624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  uint64_t length;
  int *v13;
  int *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  int *v20;
  int *v21;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_c788b8bd5d3e1ef8ad9501833f3b01bba5e1046e3e16d1a2aa837b76a60f19f4");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_4167773bd45e5e4d7f626a716b9775f840b172225798dd96b00c6f7f0290d75e");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  v15 = sub_BB28();
  v17 = v16;
  v18 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_67d62b746943a02f8d4dc07a8183667897d2a5b27b2bb6fbb52cc1f27f1c53f7");
  v19 = agxps_timeseries_get_length((uint64_t)v18);
  v20 = (int *)sub_169FF0(a5, 0, v19);
  agxps_timeseries_mul_st(v15, v17, v18, v20, 1);
  v21 = (int *)sub_169FF0(a5, 0, v19);
  agxps_timeseries_add_tt(v14, v20, v21, 1);
  return v21;
}

int *sub_FB798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_b89bac942f8b36ffc2ca66b71168fcbc6ce13aaf07ffbb371c8176139128528d");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_FB824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_44e2790fe56248cd45e2248d0f69699da605c77fab749daf6c865f1ab5f16563");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_5c5c55d05fb355aa5be61ac63c88eb4a2a521a47dd8f79c18b5c1df163d5cb55");
  v14 = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, v14);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

uint64_t sub_FB97C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_899b43f77bed0cc43134b61fcccca0925a0e62110b4bb7fae2c765efa3f9bbdc");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_FB9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_257ec906bdb46e45679882d962be91fe1c161cb79df17ea71a7427b234a0b812");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  LODWORD(v6) = sub_BB28();
  v13 = v12;
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v11, (int)v6, v13, v14, 1);
  return v14;
}

int *sub_FBA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_23628149970030e181bfc592d170355b20bf26530773c5dc9481760b2c4158ea");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  LODWORD(v6) = sub_BB28();
  v13 = v12;
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v11, (int)v6, v13, v14, 1);
  return v14;
}

int *sub_FBB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ParameterBufferTilerAlloc");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ParameterBufferPrimitiveBlockAlloc");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  return v10;
}

uint64_t sub_FBBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_06f73dd77cc4f21054a372b34a28a1d5d054ff7241ee73be67f927d897211048");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_FBC30(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t length;
  int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;

  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ad6b7a66022bb8efc6c01d6f3db0be8594408168905585015d8f7ab8e7efe672");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  v14 = sub_BB28();
  v16 = v15;
  v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_BB88(v14, v16, v17);
  v19 = v18;
  v20 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

uint64_t sub_FBD50(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  int *v12;
  uint64_t length;
  int *v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  int *v18;

  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_2fab6f6232fd4f1349620047490c7562c852746134f1a6e53ca0510462394598");
  agxps_timeseries_get_length((uint64_t)v11);
  v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f4035ec10b022c926c9e5a14e4e2c08c16049d0e9474bf8b383ed109db7360d7");
  length = agxps_timeseries_get_length((uint64_t)v12);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v11, v12, v14, 1);
  v15 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v14, v15, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_CORES");
  v17 = v16;
  v18 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v15, (int)a3, v17, v18, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
}

uint64_t sub_FBE9C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  int *v12;
  uint64_t length;
  int *v14;
  int *v15;
  int *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int *v20;
  double v21;
  int *v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;

  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_1308feee43a7aae19c3764eb8928e79f464f3a2b9d1291b01c1bae25565fa93c");
  agxps_timeseries_get_length((uint64_t)v11);
  v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ee24ab3d92c84359c20d00d2061a37fcec736e1c550577f0529a9c9441a265dc");
  length = agxps_timeseries_get_length((uint64_t)v12);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v11, v12, v14, 1);
  v15 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_adcaa1bfdaea7d31b4a776ffd13089ba401d5c9c533c77378b5f378062215fdb");
  agxps_timeseries_get_length((uint64_t)v15);
  v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_883c062d224c59ccd4c4303a7caeacbd0aa87cd6fffd5347dfedb52a23f4a6e5");
  v17 = agxps_timeseries_get_length((uint64_t)v16);
  v18 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_add_tt(v15, v16, v18, 1);
  v19 = sub_169FF0(a5, 0, v17);
  v20 = (int *)sub_169FF0(a5, 0, v17);
  v21 = agxps_timeseries_compare_tt(3, v14, v18, v19, 1);
  agxps_timeseries_select_ttt(v19, (uint64_t)v14, (uint64_t)v18, (uint64_t)v20, v21);
  v22 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_mul_st(v8, v10, v20, v22, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_CORES");
  v24 = v23;
  v25 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_div_ts(v22, (int)a3, v24, v25, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v25);
}

int *sub_FC0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;
  int *v11;
  uint64_t v12;
  int *v13;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_d2acb8217628c8c28df030d3f819e3831a16760dc5af79722487d789d9cbe02d");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_847829852334f2b320f2b2890d9a9c3dd7022b760b29a94540ba4fe13d1dd91a");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v7, v8, v10, 1);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_a7dd90063ddd29bf1b2d1259297cca0904b949cc92e9dee2e929fec2294f0422");
  v12 = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, v12);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  return v13;
}

int *sub_FC18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t length;
  int *v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  int *v22;
  int *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_d2acb8217628c8c28df030d3f819e3831a16760dc5af79722487d789d9cbe02d");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = sub_BB28();
  v13 = v12;
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_847829852334f2b320f2b2890d9a9c3dd7022b760b29a94540ba4fe13d1dd91a");
  length = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v11, v13, v14, v16, 1);
  v17 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v10, v16, v17, 1);
  LODWORD(v10) = sub_BB28();
  v19 = v18;
  v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_a7dd90063ddd29bf1b2d1259297cca0904b949cc92e9dee2e929fec2294f0422");
  v21 = agxps_timeseries_get_length((uint64_t)v20);
  v22 = (int *)sub_169FF0(a5, 0, v21);
  agxps_timeseries_mul_st((int)v10, v19, v20, v22, 1);
  v23 = (int *)sub_169FF0(a5, 0, v21);
  agxps_timeseries_add_tt(v17, v22, v23, 1);
  v24 = (int *)sub_169FF0(a5, 0, v21);
  agxps_timeseries_mul_st(v7, v9, v23, v24, 1);
  v25 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "SparseTextureRequests");
  v26 = agxps_timeseries_get_length(v25);
  v27 = sub_BB28();
  v29 = v28;
  v30 = sub_169FF0(a5, 0, v26);
  v31 = (int *)sub_169FF0(a5, 0, v26);
  agxps_timeseries_compare_ts(3, v25, v27, v29, v30, 1);
  agxps_timeseries_select_tts(v30, v25, v27, v29, (uint64_t)v31);
  v32 = (int *)sub_169FF0(a5, 0, v26);
  agxps_timeseries_div_tt(v24, v31, v32, 1);
  return v32;
}

uint64_t sub_FC3F8(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t length;
  int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;

  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_64a10cb112e74a4ec02f177b245e3f83edd61c0f78bc5bc7ae4978ce28f07f83");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  v14 = sub_BB28();
  v16 = v15;
  v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_BB88(v14, v16, v17);
  v19 = v18;
  v20 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

uint64_t sub_FC518(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t length;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;

  v8 = sub_BB28();
  v10 = v9;
  v11 = sub_BB28();
  v12 = sub_BB88(v8, v10, v11);
  v14 = v13;
  v15 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_aabc9758d4e52fd36dfb1a0e38171798aa7bf2ec665135dc298c1aa1a7c10760");
  length = agxps_timeseries_get_length((uint64_t)v15);
  v17 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v12, v14, v15, v17, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_CORES");
  v19 = v18;
  v20 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v17, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

uint64_t sub_FC638(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t length;
  int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  int *v24;

  v8 = sub_BB28();
  v10 = v9;
  v11 = sub_BB28();
  v12 = sub_BB88(v8, v10, v11);
  v14 = v13;
  v15 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ca0d54323c1777d994357aaacdb7beac572bea11cd16afed4c756f3dc9496a18");
  length = agxps_timeseries_get_length((uint64_t)v15);
  v17 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v12, v14, v15, v17, 1);
  v18 = sub_BB28();
  v20 = v19;
  v21 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_BB88(v18, v20, v21);
  v23 = v22;
  v24 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v17, (int)a3, v23, v24, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v24);
}

uint64_t sub_FC77C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t length;
  int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;

  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_46210435e8bd691719dc45391f51ef552bf7e745c1401ee9943aa6f85086336e");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  v14 = sub_BB28();
  v16 = v15;
  v17 = (**a3)(a3, "NUM_GPS");
  LODWORD(a3) = sub_BB88(v14, v16, v17);
  v19 = v18;
  v20 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

uint64_t sub_FC89C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t length;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;

  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_2d3c257f33af88b8488658fb5b6a86f64cb02169b680e1250d3f37d373a4197f");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  v15 = v14;
  v16 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v15, v16, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
}

uint64_t sub_FC998(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t length;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;

  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_149b69750a3c80a27d163a4ca69ec03e3b39b3c0afe9c90c8cd37a128832cb13");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  v15 = v14;
  v16 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v15, v16, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
}

uint64_t sub_FCA94(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t length;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;

  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_da824fe9269c1efd80cb71a6e5415be160b6f43b41e858cb83976c4140b052a5");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  v15 = v14;
  v16 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v15, v16, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
}

uint64_t sub_FCB90(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  int *v12;
  uint64_t length;
  int *v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  int *v18;

  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_6d6a7c8efb15986fa71f8bf4a6a06f8942199b36680e516766e92490607c958d");
  agxps_timeseries_get_length((uint64_t)v11);
  v12 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_fdc48a2370f6885da6ac169661812057de2cf71fbbbcb5df8348a78f112992dc");
  length = agxps_timeseries_get_length((uint64_t)v12);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v11, v12, v14, 1);
  v15 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v14, v15, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_L2_BANKS");
  v17 = v16;
  v18 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v15, (int)a3, v17, v18, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
}

int *sub_FCCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_6d6a7c8efb15986fa71f8bf4a6a06f8942199b36680e516766e92490607c958d");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

uint64_t sub_FCD68(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t length;
  int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;

  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_da2d5f5fd43e7edda6d5635752a29f09d285cf47c2ecd0a1b83b1ba3eddcef55");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  v14 = sub_BB28();
  v16 = v15;
  v17 = (**a3)(a3, "NUM_GPS");
  LODWORD(a3) = sub_BB88(v14, v16, v17);
  v19 = v18;
  v20 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

uint64_t sub_FCE88(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t length;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;

  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_63b721bdb7ff9f45f3835f7e6a8a4595b1fed0038ae9a76cb853fc36756386c9");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_CORES");
  v15 = v14;
  v16 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v15, v16, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
}

int *sub_FCF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_63b721bdb7ff9f45f3835f7e6a8a4595b1fed0038ae9a76cb853fc36756386c9");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FD018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  int *v18;
  int *v19;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_95457b9a60a638f3c652d16526373338287f19e3cb86adaea8a30e8255a7aa34");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = sub_BB28();
  v15 = v14;
  v16 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_2b086decbf8af5fc652f38631028061547de9b4eab238b05cc6e26e20ba26444");
  v17 = agxps_timeseries_get_length((uint64_t)v16);
  v18 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_mul_st(v13, v15, v16, v18, 1);
  v19 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_add_tt(v12, v18, v19, 1);
  return v19;
}

int *sub_FD140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t v8;
  uint64_t length;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "FragmentZStoreBytes");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ZBytesWrittenToMainMemory");
  length = agxps_timeseries_get_length(v8);
  v10 = sub_BB28();
  v12 = v11;
  v13 = sub_169FF0(a5, 0, length);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v8, v10, v12, v13, 1);
  agxps_timeseries_select_tts(v13, v8, v10, v12, (uint64_t)v14);
  v15 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

uint64_t sub_FD258(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_64a10cb112e74a4ec02f177b245e3f83edd61c0f78bc5bc7ae4978ce28f07f83");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_FD294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ca0d54323c1777d994357aaacdb7beac572bea11cd16afed4c756f3dc9496a18");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_FD31C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t length;
  int *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  int *v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  uint64_t v26;
  int *v27;
  int *v28;
  int *v29;
  uint64_t v30;
  int *v31;
  int *v32;

  v7 = sub_BB28();
  v9 = v8;
  v10 = sub_BB28();
  v12 = v11;
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_e88003194e52f7912577c1de30615d17adeaeb189988c5f7b3dd3994c4bf01c3");
  length = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v10, v12, v13, v15, 1);
  v16 = sub_BB28();
  v18 = v17;
  v19 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_0517252655ede3af8df3294d0dd1936ef2e6b738323e5502da4b683aea057ba3");
  v20 = agxps_timeseries_get_length((uint64_t)v19);
  v21 = (int *)sub_169FF0(a5, 0, v20);
  agxps_timeseries_mul_st(v16, v18, v19, v21, 1);
  v22 = (int *)sub_169FF0(a5, 0, v20);
  agxps_timeseries_add_tt(v15, v21, v22, 1);
  LODWORD(v18) = sub_BB28();
  v24 = v23;
  v25 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_b07f7948ecee8df33172343235e9df76503200554b4ccf95b2c7622c0380772c");
  v26 = agxps_timeseries_get_length((uint64_t)v25);
  v27 = (int *)sub_169FF0(a5, 0, v26);
  agxps_timeseries_mul_st(v18, v24, v25, v27, 1);
  v28 = (int *)sub_169FF0(a5, 0, v26);
  agxps_timeseries_add_tt(v22, v27, v28, 1);
  v29 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_2545b5f3d7fb631492e04dfa0b70c6a57307db64c735d42b00f373627eb0fa08");
  v30 = agxps_timeseries_get_length((uint64_t)v29);
  v31 = (int *)sub_169FF0(a5, 0, v30);
  agxps_timeseries_add_tt(v28, v29, v31, 1);
  v32 = (int *)sub_169FF0(a5, 0, v30);
  agxps_timeseries_mul_st(v7, v9, v31, v32, 1);
  return v32;
}

uint64_t sub_FD558(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_46210435e8bd691719dc45391f51ef552bf7e745c1401ee9943aa6f85086336e");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_FD594(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_149b69750a3c80a27d163a4ca69ec03e3b39b3c0afe9c90c8cd37a128832cb13");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_FD5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_da824fe9269c1efd80cb71a6e5415be160b6f43b41e858cb83976c4140b052a5");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_FD60C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_eda5bce70befa39e7c6029505c0269211092c220048a502fd8fa2fe30895465b");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_FD648(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_2fab6f6232fd4f1349620047490c7562c852746134f1a6e53ca0510462394598");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_FD684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_0f67618fe6dd59b9cc951584dc80dd9f5dd9c428402dbe2e8a03c7df4100020e");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_FD710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v6;
  uint64_t length;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_40680272e25f5a98ef1fdae57c0be82cc7fb940000907f1a4d46547de8525db0");
  length = agxps_timeseries_get_length((uint64_t)v6);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v6, v8, v10, v11, 1);
  return v11;
}

int *sub_FD7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  uint64_t length;
  int *v10;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "FragmentGeneratorPrimitiveProcessed");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "FragmentGeneratorTilesProcessed");
  length = agxps_timeseries_get_length((uint64_t)v8);
  v10 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v7, v8, v10, 1);
  return v10;
}

int *sub_FD838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t length;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;

  v7 = sub_BB28();
  v9 = v8;
  v10 = sub_BB28();
  LODWORD(v9) = sub_BB88(v7, v9, v10);
  v12 = v11;
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_719a713b390f2b37bbbe8ca62f3053819539a3fc60d05b02f21b2c8435fb73a6");
  length = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v9, v12, v13, v15, 1);
  v16 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "FragmentQuadsProcessed");
  v17 = agxps_timeseries_get_length(v16);
  v18 = sub_BB28();
  v20 = v19;
  v21 = sub_169FF0(a5, 0, v17);
  v22 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_compare_ts(3, v16, v18, v20, v21, 1);
  agxps_timeseries_select_tts(v21, v16, v18, v20, (uint64_t)v22);
  v23 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_div_tt(v15, v22, v23, 1);
  return v23;
}

int *sub_FD9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t length;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;

  v7 = sub_BB28();
  v9 = v8;
  v10 = sub_BB28();
  LODWORD(v9) = sub_BB88(v7, v9, v10);
  v12 = v11;
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_fade8eea03e1fbf9a3d3cd6ab6bfd82b70bc1595ffb23f1b638746baa6c672e0");
  length = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v9, v12, v13, v15, 1);
  v16 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "FragmentQuadsProcessed");
  v17 = agxps_timeseries_get_length(v16);
  v18 = sub_BB28();
  v20 = v19;
  v21 = sub_169FF0(a5, 0, v17);
  v22 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_compare_ts(3, v16, v18, v20, v21, 1);
  agxps_timeseries_select_tts(v21, v16, v18, v20, (uint64_t)v22);
  v23 = (int *)sub_169FF0(a5, 0, v17);
  agxps_timeseries_div_tt(v15, v22, v23, 1);
  return v23;
}

int *sub_FDB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int *v14;
  uint64_t length;
  int *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;

  v7 = sub_BB28();
  v9 = v8;
  v10 = sub_BB28();
  LODWORD(v9) = sub_BB88(v7, v9, v10);
  v12 = v11;
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_db1f507c85a72a4148283a69481d823edb23fbfb999acf18fb2d155eb7edc768");
  agxps_timeseries_get_length((uint64_t)v13);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_879d7622b5c9023712d7cc6c70f432757ab72505afba79be4dcb023459f9658a");
  length = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  v17 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v9, v12, v16, v17, 1);
  v18 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "FragmentQuadsProcessed");
  v19 = agxps_timeseries_get_length(v18);
  v20 = sub_BB28();
  v22 = v21;
  v23 = sub_169FF0(a5, 0, v19);
  v24 = (int *)sub_169FF0(a5, 0, v19);
  agxps_timeseries_compare_ts(3, v18, v20, v22, v23, 1);
  agxps_timeseries_select_tts(v23, v18, v20, v22, (uint64_t)v24);
  v25 = (int *)sub_169FF0(a5, 0, v19);
  agxps_timeseries_div_tt(v17, v24, v25, 1);
  return v25;
}

uint64_t sub_FDCF8(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t length;
  int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;

  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_7c42e99464b33ee51de11bdd9f8cf11a14473f7061e75f7589a3578a7757abfd");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  v14 = sub_BB28();
  v16 = v15;
  v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_BB88(v14, v16, v17);
  v19 = v18;
  v20 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

uint64_t sub_FDE18(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t length;
  int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;

  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_d11d0ca656849a8048dbe7d1d6761d3cbcf463d9196a20b3da7e6a554fd0652f");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  v14 = sub_BB28();
  v16 = v15;
  v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_BB88(v14, v16, v17);
  v19 = v18;
  v20 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

uint64_t sub_FDF38(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t length;
  int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;

  v8 = sub_BB28();
  v10 = v9;
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_d54a22a6f6eb41ec901489f9e47263886645d322e2546360a6622d2c6bdeddb9");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v8, v10, v11, v13, 1);
  v14 = sub_BB28();
  v16 = v15;
  v17 = (**a3)(a3, "NUM_CORES");
  LODWORD(a3) = sub_BB88(v14, v16, v17);
  v19 = v18;
  v20 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v13, (int)a3, v19, v20, 1);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v20);
}

int *sub_FE058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_20c8b2b1747ee9c33baf87dc32e8f5d07b9eb25ca5829ad056d92eb0d040c76a");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_e247689f0b49c692ba39d348957d19faa7587b07d3025f3b283a165cfc35f5b8");
  v14 = agxps_timeseries_get_length(v13);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, v14);
  v19 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_compare_ts(3, v13, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, v13, v15, v17, (uint64_t)v19);
  v20 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v19, v20, 1);
  return v20;
}

uint64_t sub_FE1B0(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int *v8;
  int *v9;
  uint64_t length;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f883d72b08be21c3348078baaa2362bec3884949a1726642308e7dd5cb69fe07");
  agxps_timeseries_get_length((uint64_t)v8);
  v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_a15872ac9b60de1aa5b2f8738fe49df926f782ead2f5f010124e3c141c961be3");
  length = agxps_timeseries_get_length((uint64_t)v9);
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v8, v9, v11, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  v13 = v12;
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v11, (int)a3, v13, v14, 1);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, length);
  v19 = sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(2, v14, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, (uint64_t)v14, v15, v17, v19);
  return (**(uint64_t (***)(uint64_t, uint64_t))a2)(a2, v19);
}

uint64_t sub_FE328(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int *v8;
  int *v9;
  uint64_t length;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_2413cbfc3cf49db0f8a6cbaddb7f99118134a04d0a7bbfcf3e5c192276c68644");
  agxps_timeseries_get_length((uint64_t)v8);
  v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_27cde4b049e15693c767899196a213dcd807878d655e33dde43ddff8910df32e");
  length = agxps_timeseries_get_length((uint64_t)v9);
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v8, v9, v11, 1);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  v13 = v12;
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v11, (int)a3, v13, v14, 1);
  v15 = sub_BB28();
  v17 = v16;
  v18 = sub_169FF0(a5, 0, length);
  v19 = sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(2, v14, v15, v17, v18, 1);
  agxps_timeseries_select_tts(v18, (uint64_t)v14, v15, v17, v19);
  return (**(uint64_t (***)(uint64_t, uint64_t))a2)(a2, v19);
}

uint64_t sub_FE4A0(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *))
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;

  v5 = sub_BB28();
  v7 = v6;
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ffb81bec9c1a43cfe9f952f38103d1887bef653181bcb3c1362308492368933d");
  v9 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_50c5ccf70ef1ec17254253a456f052e1130edd339eee1dafe34fc8254d36b52a");
  v10 = sub_C1F8(v8, v9);
  v11 = sub_F6DC(v5, v7, (unsigned int *)v10);
  v12 = (**a3)(a3, "NUM_GPS");
  v14 = sub_11CB8((unsigned int *)v11, v12, v13);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v14);
}

uint64_t sub_FE578(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int *v8;
  uint64_t length;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_c3bf601f0a951d8e293718574d5f9ce5ddcb27d830ef81f6b018a3b933194ce1");
  length = agxps_timeseries_get_length((uint64_t)v8);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v8, (int)a3, v11, v12, 1);
  v13 = sub_BB28();
  v15 = v14;
  v16 = sub_169FF0(a5, 0, length);
  v17 = sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(2, v12, v13, v15, v16, 1);
  agxps_timeseries_select_tts(v16, (uint64_t)v12, v13, v15, v17);
  return (**(uint64_t (***)(uint64_t, uint64_t))a2)(a2, v17);
}

uint64_t sub_FE6A8(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int *v8;
  uint64_t length;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ba42c3f46d52663d076f226bfb30be092b4b536d27d161d16869c10288811903");
  length = agxps_timeseries_get_length((uint64_t)v8);
  LODWORD(a3) = (**a3)(a3, "NUM_GPS");
  v11 = v10;
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_ts(v8, (int)a3, v11, v12, 1);
  v13 = sub_BB28();
  v15 = v14;
  v16 = sub_169FF0(a5, 0, length);
  v17 = sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(2, v12, v13, v15, v16, 1);
  agxps_timeseries_select_tts(v16, (uint64_t)v12, v13, v15, v17);
  return (**(uint64_t (***)(uint64_t, uint64_t))a2)(a2, v17);
}

uint64_t sub_FE7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_e247689f0b49c692ba39d348957d19faa7587b07d3025f3b283a165cfc35f5b8");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_FE814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_e263044475c736413734a34bbc76c45c46960ed823cfa5696235ee862ce5b6ea");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_FE850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  uint64_t length;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "MMUTLBRequests");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "MMUTLBHits");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_sub_tt(v10, v11, v13, 1);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v13, v14, 1);
  v15 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "MMUTLBRequests");
  v16 = agxps_timeseries_get_length(v15);
  v17 = sub_BB28();
  v19 = v18;
  v20 = sub_169FF0(a5, 0, v16);
  v21 = (int *)sub_169FF0(a5, 0, v16);
  agxps_timeseries_compare_ts(3, v15, v17, v19, v20, 1);
  agxps_timeseries_select_tts(v20, v15, v17, v19, (uint64_t)v21);
  v22 = (int *)sub_169FF0(a5, 0, v16);
  agxps_timeseries_div_tt(v14, v21, v22, 1);
  v23 = sub_BB28();
  v25 = v24;
  v26 = sub_169FF0(a5, 0, v16);
  v27 = sub_169FF0(a5, 0, v16);
  agxps_timeseries_compare_ts(2, v22, v23, v25, v26, 1);
  agxps_timeseries_select_tts(v26, (uint64_t)v22, v23, v25, v27);
  return v27;
}

int *sub_FEA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t v8;
  uint64_t length;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_e6362c1fcf78a3882ad4f3bbd5a66cfb0a6feeae2d8e84b4b161234e0b3aa335");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_fdc48a2370f6885da6ac169661812057de2cf71fbbbcb5df8348a78f112992dc");
  length = agxps_timeseries_get_length(v8);
  v10 = sub_BB28();
  v12 = v11;
  v13 = sub_169FF0(a5, 0, length);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v8, v10, v12, v13, 1);
  agxps_timeseries_select_tts(v13, v8, v10, v12, (uint64_t)v14);
  v15 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

int *sub_FEB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t v8;
  uint64_t length;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "FragmentsRasterized");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "PrimitivesSubmitted");
  length = agxps_timeseries_get_length(v8);
  v10 = sub_BB28();
  v12 = v11;
  v13 = sub_169FF0(a5, 0, length);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_ts(3, v8, v10, v12, v13, 1);
  agxps_timeseries_select_tts(v13, v8, v10, v12, (uint64_t)v14);
  v15 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

int *sub_FECA8(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  uint64_t length;
  int *v13;
  int *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int *v19;
  int *v20;
  int *v21;
  uint64_t v22;
  int *v23;
  int *v24;

  v7 = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF");
  agxps_timeseries_get_length((uint64_t)v10);
  v11 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D");
  length = agxps_timeseries_get_length((uint64_t)v11);
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v10, v11, v13, 1);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "3476066F46CC277DE7616AAAD8FCDF2C28DA42293B231F74A62159EB6EDAC78C");
  v15 = agxps_timeseries_get_length((uint64_t)v14);
  v16 = sub_BB28();
  v18 = v17;
  v19 = (int *)sub_169FF0(a5, 0, v15);
  agxps_timeseries_mul_ts(v14, v16, v18, v19, 1);
  v20 = (int *)sub_169FF0(a5, 0, v15);
  agxps_timeseries_add_tt(v13, v19, v20, 1);
  v21 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033");
  v22 = agxps_timeseries_get_length((uint64_t)v21);
  v23 = (int *)sub_169FF0(a5, 0, v22);
  agxps_timeseries_add_tt(v20, v21, v23, 1);
  v24 = (int *)sub_169FF0(a5, 0, v22);
  agxps_timeseries_mul_st(v7, v9, v23, v24, 1);
  return v24;
}

int *sub_FEE74(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int *v8;
  int *v9;
  uint64_t length;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int *v14;

  v8 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "VSInvocation");
  agxps_timeseries_get_length((uint64_t)v8);
  v9 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "DeltaSeconds");
  length = agxps_timeseries_get_length((uint64_t)v9);
  LODWORD(a3) = (**a3)(a3, "NSEC_PER_SEC");
  v12 = v11;
  v13 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v9, (int)a3, v12, v13, 1);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v8, v13, v14, 1);
  return v14;
}

uint64_t sub_FEF6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int *v14;
  uint64_t length;
  int *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int *v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  int *v25;
  int *v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = sub_BB28();
  v9 = v8;
  v10 = sub_BB28();
  v12 = v11;
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "1EE37CF6B772CC32CDCB4FC2CFE693EF7D7C80950325049285C3D49A4A88FD1C");
  agxps_timeseries_get_length((uint64_t)v13);
  v14 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "C950D7F7AD90A2158FFC69617C9E89613825A41B0F38F9F0FCE55D75FC5532A3");
  length = agxps_timeseries_get_length((uint64_t)v14);
  v16 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_add_tt(v13, v14, v16, 1);
  v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "C0D7A26A9BD1F09964BA54D31CBA3CBA8957E46C0129A0BED9DDD908890206C1");
  v18 = agxps_timeseries_get_length((uint64_t)v17);
  v19 = (int *)sub_169FF0(a5, 0, v18);
  agxps_timeseries_add_tt(v16, v17, v19, 1);
  v20 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "18AA14F767F6966C6A9135ADD34A19B911559D7B7DD52BA1E092BA6613D26AF0");
  v21 = agxps_timeseries_get_length((uint64_t)v20);
  v22 = (int *)sub_169FF0(a5, 0, v21);
  agxps_timeseries_add_tt(v19, v20, v22, 1);
  v23 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ALUInstructions");
  v24 = agxps_timeseries_get_length((uint64_t)v23);
  v25 = (int *)sub_169FF0(a5, 0, v24);
  agxps_timeseries_div_tt(v22, v23, v25, 1);
  v26 = (int *)sub_169FF0(a5, 0, v24);
  agxps_timeseries_sub_st(v10, v12, v25, v26, 1);
  v27 = (int *)sub_169FF0(a5, 0, v24);
  agxps_timeseries_mul_st(v7, v9, v26, v27, 1);
  v28 = sub_BB28();
  v30 = v29;
  v31 = sub_169FF0(a5, 0, v24);
  v32 = sub_169FF0(a5, 0, v24);
  agxps_timeseries_compare_ts(3, v27, v28, v30, v31, 1);
  agxps_timeseries_select_tts(v31, (uint64_t)v27, v28, v30, v32);
  return v32;
}

uint64_t sub_FF1E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "1EE37CF6B772CC32CDCB4FC2CFE693EF7D7C80950325049285C3D49A4A88FD1C");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_FF21C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "C950D7F7AD90A2158FFC69617C9E89613825A41B0F38F9F0FCE55D75FC5532A3");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_FF258(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "C0D7A26A9BD1F09964BA54D31CBA3CBA8957E46C0129A0BED9DDD908890206C1");
  agxps_timeseries_get_length(v2);
  return v2;
}

uint64_t sub_FF294(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "18AA14F767F6966C6A9135ADD34A19B911559D7B7DD52BA1E092BA6613D26AF0");
  agxps_timeseries_get_length(v2);
  return v2;
}

int *sub_FF2D0(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D");
  length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

int *sub_FF374(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF");
  length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

int *sub_FF418(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033");
  length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

int *sub_FF4BC(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "3476066F46CC277DE7616AAAD8FCDF2C28DA42293B231F74A62159EB6EDAC78C");
  length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  LODWORD(a3) = sub_BB28();
  v13 = v12;
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v11, (int)a3, v13, v14, 1);
  return v14;
}

int *sub_FF59C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t length;
  unint64_t v9;
  unint64_t v10;
  int *v11;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC");
  length = agxps_timeseries_get_length((uint64_t)v7);
  LODWORD(a3) = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  v10 = v9;
  v11 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v7, (int)a3, v10, v11, 1);
  return v11;
}

int *sub_FF640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t length;
  uint64_t v13;
  int *v14;
  int *v15;

  v7 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ALUInstructions");
  agxps_timeseries_get_length((uint64_t)v7);
  v8 = sub_BB28();
  v10 = v9;
  v11 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "DeltaSeconds");
  length = agxps_timeseries_get_length(v11);
  v13 = sub_169FF0(a5, 0, length);
  v14 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_compare_st(3, v8, v10, v11, v13, 1);
  agxps_timeseries_select_tst(v13, v8, v10, v11, (uint64_t)v14);
  v15 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_div_tt(v7, v14, v15, 1);
  return v15;
}

int *sub_FF758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  int *v13;
  uint64_t v14;
  int *v15;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ALUF32Issued");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ALUInstructions");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_FF834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  int *v13;
  uint64_t v14;
  int *v15;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ALUF16Issued");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ALUInstructions");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_FF910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  int *v13;
  uint64_t v14;
  int *v15;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ALUInt32AndCondIssued");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ALUInstructions");
  v14 = agxps_timeseries_get_length((uint64_t)v13);
  v15 = (int *)sub_169FF0(a5, 0, v14);
  agxps_timeseries_div_tt(v12, v13, v15, 1);
  return v15;
}

int *sub_FF9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;
  int *v19;

  v7 = sub_BB28();
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ALUIntAndComplexIssued");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  v13 = sub_BB28();
  v15 = v14;
  v16 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_ts(v12, v13, v15, v16, 1);
  v17 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ALUInstructions");
  v18 = agxps_timeseries_get_length((uint64_t)v17);
  v19 = (int *)sub_169FF0(a5, 0, v18);
  agxps_timeseries_div_tt(v16, v17, v19, 1);
  return v19;
}

int *sub_FFB10(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;

  v7 = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

int *sub_FFBA8(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, const char *), uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t length;
  int *v12;

  v7 = (**a3)(a3, "NUM_THREADS_PER_CLIQUE");
  v9 = v8;
  v10 = (int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "3856FBD8576C0AA988700D7EF5787AAAE94A3BBFBB393B0426FA9D379DA69C91");
  length = agxps_timeseries_get_length((uint64_t)v10);
  v12 = (int *)sub_169FF0(a5, 0, length);
  agxps_timeseries_mul_st(v7, v9, v10, v12, 1);
  return v12;
}

uint64_t sub_FFC40@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 v4;
  uint64_t *v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t *v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t *v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t *v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t *v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t *v33;
  __int128 v34;
  uint64_t *v35;
  uint64_t *v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t *v39;
  __int128 v40;
  uint64_t *v41;
  uint64_t *v42;
  __int128 v43;
  uint64_t *v44;
  uint64_t *v45;
  __int128 v46;
  uint64_t *v47;
  uint64_t *v48;
  __int128 v49;
  uint64_t *v50;
  uint64_t *v51;
  __int128 v52;
  uint64_t *v53;
  uint64_t *v54;
  __int128 v55;
  uint64_t *v56;
  uint64_t *v57;
  __int128 v58;
  uint64_t *v59;
  uint64_t *v60;
  __int128 v61;
  uint64_t *v62;
  uint64_t *v63;
  __int128 v64;
  uint64_t *v65;
  uint64_t *v66;
  __int128 v67;
  uint64_t *v68;
  uint64_t *v69;
  __int128 v70;
  uint64_t *v71;
  uint64_t *v72;
  __int128 v73;
  uint64_t *v74;
  uint64_t *v75;
  __int128 v76;
  uint64_t *v77;
  uint64_t *v78;
  __int128 v79;
  uint64_t *v80;
  uint64_t *v81;
  __int128 v82;
  uint64_t *v83;
  uint64_t *v84;
  __int128 v85;
  uint64_t *v86;
  uint64_t *v87;
  __int128 v88;
  uint64_t *v89;
  uint64_t *v90;
  __int128 v91;
  uint64_t *v92;
  uint64_t *v93;
  __int128 v94;
  uint64_t *v95;
  uint64_t *v96;
  __int128 v97;
  uint64_t *v98;
  uint64_t *v99;
  __int128 v100;
  uint64_t *v101;
  uint64_t *v102;
  __int128 v103;
  uint64_t *v104;
  uint64_t *v105;
  __int128 v106;
  uint64_t *v107;
  uint64_t *v108;
  __int128 v109;
  uint64_t *v110;
  uint64_t *v111;
  __int128 v112;
  uint64_t *v113;
  uint64_t *v114;
  __int128 v115;
  uint64_t *v116;
  uint64_t *v117;
  __int128 v118;
  uint64_t *v119;
  uint64_t *v120;
  __int128 v121;
  uint64_t *v122;
  uint64_t *v123;
  __int128 v124;
  uint64_t *v125;
  uint64_t *v126;
  __int128 v127;
  uint64_t *v128;
  uint64_t *v129;
  __int128 v130;
  uint64_t *v131;
  uint64_t *v132;
  __int128 v133;
  uint64_t *v134;
  uint64_t *v135;
  __int128 v136;
  uint64_t *v137;
  uint64_t *v138;
  __int128 v139;
  uint64_t *v140;
  uint64_t *v141;
  __int128 v142;
  uint64_t *v143;
  uint64_t *v144;
  __int128 v145;
  uint64_t *v146;
  uint64_t *v147;
  __int128 v148;
  uint64_t *v149;
  uint64_t *v150;
  __int128 v151;
  uint64_t *v152;
  uint64_t *v153;
  __int128 v154;
  uint64_t *v155;
  uint64_t *v156;
  __int128 v157;
  uint64_t *v158;
  uint64_t *v159;
  __int128 v160;
  uint64_t *v161;
  uint64_t *v162;
  __int128 v163;
  uint64_t *v164;
  uint64_t *v165;
  __int128 v166;
  uint64_t *v167;
  uint64_t *v168;
  __int128 v169;
  uint64_t *v170;
  uint64_t *v171;
  __int128 v172;
  uint64_t *v173;
  uint64_t *v174;
  __int128 v175;
  uint64_t *v176;
  uint64_t *v177;
  __int128 v178;
  uint64_t *v179;
  uint64_t *v180;
  __int128 v181;
  uint64_t *v182;
  uint64_t *v183;
  __int128 v184;
  uint64_t *v185;
  uint64_t *v186;
  __int128 v187;
  uint64_t *v188;
  uint64_t *v189;
  __int128 v190;
  uint64_t *v191;
  uint64_t *v192;
  __int128 v193;
  uint64_t *v194;
  uint64_t *v195;
  __int128 v196;
  uint64_t *v197;
  uint64_t *v198;
  __int128 v199;
  uint64_t *v200;
  uint64_t *v201;
  __int128 v202;
  uint64_t *v203;
  uint64_t *v204;
  __int128 v205;
  uint64_t *v206;
  uint64_t *v207;
  __int128 v208;
  uint64_t *v209;
  uint64_t *v210;
  __int128 v211;
  uint64_t *v212;
  uint64_t *v213;
  __int128 v214;
  uint64_t *v215;
  uint64_t *v216;
  __int128 v217;
  uint64_t *v218;
  uint64_t *v219;
  __int128 v220;
  uint64_t *v221;
  uint64_t *v222;
  __int128 v223;
  uint64_t *v224;
  uint64_t *v225;
  __int128 v226;
  uint64_t *v227;
  uint64_t *v228;
  __int128 v229;
  uint64_t *v230;
  uint64_t *v231;
  __int128 v232;
  uint64_t *v233;
  uint64_t *v234;
  __int128 v235;
  uint64_t *v236;
  uint64_t *v237;
  __int128 v238;
  uint64_t *v239;
  uint64_t *v240;
  __int128 v241;
  uint64_t *v242;
  uint64_t *v243;
  __int128 v244;
  uint64_t *v245;
  uint64_t *v246;
  __int128 v247;
  uint64_t *v248;
  uint64_t *v249;
  __int128 v250;
  uint64_t *v251;
  uint64_t *v252;
  __int128 v253;
  uint64_t *v254;
  uint64_t *v255;
  __int128 v256;
  uint64_t *v257;
  uint64_t *v258;
  __int128 v259;
  uint64_t *v260;
  uint64_t *v261;
  __int128 v262;
  uint64_t *v263;
  uint64_t *v264;
  __int128 v265;
  uint64_t *v266;
  uint64_t *v267;
  __int128 v268;
  uint64_t *v269;
  uint64_t *v270;
  __int128 v271;
  uint64_t *v272;
  uint64_t *v273;
  __int128 v274;
  uint64_t *v275;
  uint64_t *v276;
  __int128 v277;
  uint64_t *v278;
  uint64_t *v279;
  __int128 v280;
  uint64_t *v281;
  uint64_t *v282;
  __int128 v283;
  uint64_t *v284;
  uint64_t *v285;
  __int128 v286;
  uint64_t *v287;
  uint64_t *v288;
  __int128 v289;
  uint64_t *v290;
  uint64_t *v291;
  __int128 v292;
  uint64_t *v293;
  uint64_t *v294;
  __int128 v295;
  uint64_t *v296;
  uint64_t *v297;
  __int128 v298;
  uint64_t *v299;
  uint64_t *v300;
  __int128 v301;
  uint64_t *v302;
  uint64_t *v303;
  __int128 v304;
  uint64_t *v305;
  uint64_t *v306;
  __int128 v307;
  uint64_t *v308;
  uint64_t *v309;
  __int128 v310;
  uint64_t *v311;
  uint64_t *v312;
  __int128 v313;
  uint64_t *v314;
  uint64_t *v315;
  __int128 v316;
  uint64_t *v317;
  uint64_t *v318;
  __int128 v319;
  uint64_t *v320;
  uint64_t *v321;
  __int128 v322;
  uint64_t *v323;
  uint64_t *v324;
  __int128 v325;
  uint64_t *v326;
  uint64_t *v327;
  __int128 v328;
  uint64_t *v329;
  uint64_t *v330;
  __int128 v331;
  uint64_t *v332;
  uint64_t *v333;
  __int128 v334;
  uint64_t *v335;
  uint64_t *v336;
  __int128 v337;
  uint64_t *v338;
  uint64_t *v339;
  __int128 v340;
  uint64_t *v341;
  uint64_t *v342;
  __int128 v343;
  uint64_t *v344;
  uint64_t *v345;
  __int128 v346;
  uint64_t *v347;
  uint64_t *v348;
  __int128 v349;
  uint64_t *v350;
  uint64_t *v351;
  __int128 v352;
  uint64_t *v353;
  uint64_t *v354;
  __int128 v355;
  uint64_t *v356;
  uint64_t *v357;
  __int128 v358;
  uint64_t *v359;
  uint64_t *v360;
  __int128 v361;
  uint64_t *v362;
  uint64_t *v363;
  __int128 v364;
  uint64_t *v365;
  uint64_t *v366;
  __int128 v367;
  uint64_t *v368;
  uint64_t *v369;
  __int128 v370;
  uint64_t *v371;
  uint64_t *v372;
  __int128 v373;
  uint64_t *v374;
  uint64_t *v375;
  __int128 v376;
  uint64_t *v377;
  uint64_t *v378;
  __int128 v379;
  uint64_t *v380;
  uint64_t *v381;
  __int128 v382;
  uint64_t *v383;
  uint64_t *v384;
  __int128 v385;
  uint64_t *v386;
  uint64_t *v387;
  __int128 v388;
  uint64_t *v389;
  uint64_t *v390;
  __int128 v391;
  uint64_t *v392;
  uint64_t *v393;
  __int128 v394;
  uint64_t *v395;
  uint64_t *v396;
  __int128 v397;
  uint64_t *v398;
  uint64_t *v399;
  __int128 v400;
  uint64_t *v401;
  uint64_t *v402;
  __int128 v403;
  uint64_t *v404;
  uint64_t *v405;
  __int128 v406;
  uint64_t *v407;
  uint64_t *v408;
  __int128 v409;
  uint64_t *v410;
  uint64_t *v411;
  __int128 v412;
  uint64_t *v413;
  uint64_t *v414;
  __int128 v415;
  uint64_t *v416;
  uint64_t *v417;
  __int128 v418;
  uint64_t *v419;
  uint64_t *v420;
  __int128 v421;
  uint64_t *v422;
  uint64_t *v423;
  __int128 v424;
  uint64_t *v425;
  uint64_t *v426;
  __int128 v427;
  uint64_t *v428;
  uint64_t *v429;
  __int128 v430;
  uint64_t *v431;
  uint64_t *v432;
  __int128 v433;
  uint64_t *v434;
  uint64_t *v435;
  __int128 v436;
  uint64_t *v437;
  uint64_t *v438;
  __int128 v439;
  uint64_t *v440;
  uint64_t *v441;
  __int128 v442;
  uint64_t *v443;
  uint64_t *v444;
  __int128 v445;
  uint64_t *v446;
  uint64_t *v447;
  __int128 v448;
  uint64_t *v449;
  uint64_t *v450;
  __int128 v451;
  uint64_t *v452;
  uint64_t *v453;
  __int128 v454;
  uint64_t *v455;
  uint64_t *v456;
  __int128 v457;
  uint64_t *v458;
  uint64_t *v459;
  __int128 v460;
  uint64_t *v461;
  uint64_t *v462;
  __int128 v463;
  uint64_t *v464;
  uint64_t *v465;
  __int128 v466;
  uint64_t *v467;
  uint64_t *v468;
  __int128 v469;
  uint64_t *v470;
  uint64_t *v471;
  __int128 v472;
  uint64_t *v473;
  uint64_t *v474;
  __int128 v475;
  uint64_t *v476;
  uint64_t *v477;
  __int128 v478;
  uint64_t *v479;
  uint64_t *v480;
  __int128 v481;
  uint64_t *v482;
  uint64_t *v483;
  __int128 v484;
  uint64_t *v485;
  uint64_t *v486;
  __int128 v487;
  uint64_t *v488;
  uint64_t *v489;
  __int128 v490;
  uint64_t *v491;
  uint64_t *v492;
  __int128 v493;
  uint64_t *v494;
  uint64_t *v495;
  __int128 v496;
  uint64_t *v497;
  uint64_t *v498;
  __int128 v499;
  uint64_t *v500;
  uint64_t *v501;
  __int128 v502;
  uint64_t *v503;
  uint64_t *v504;
  __int128 v505;
  uint64_t *v506;
  uint64_t *v507;
  __int128 v508;
  uint64_t *v509;
  uint64_t *v510;
  __int128 v511;
  uint64_t *v512;
  uint64_t *v513;
  __int128 v514;
  uint64_t *v515;
  uint64_t *v516;
  __int128 v517;
  uint64_t *v518;
  uint64_t *v519;
  __int128 v520;
  uint64_t *v521;
  uint64_t *v522;
  __int128 v523;
  uint64_t *v524;
  uint64_t *v525;
  __int128 v526;
  uint64_t *v527;
  uint64_t *v528;
  __int128 v529;
  uint64_t *v530;
  uint64_t *v531;
  __int128 v532;
  uint64_t *v533;
  uint64_t *v534;
  __int128 v535;
  uint64_t *v536;
  uint64_t *v537;
  __int128 v538;
  char *v539;
  uint64_t v540;
  _BYTE v542[88];
  _BYTE v543[88];
  _BYTE v544[88];
  _BYTE v545[88];
  _BYTE v546[88];
  _BYTE v547[88];
  _BYTE v548[88];
  _BYTE v549[88];
  _BYTE v550[88];
  _BYTE v551[88];
  _BYTE v552[88];
  _BYTE v553[88];
  _BYTE v554[88];
  _BYTE v555[88];
  _BYTE v556[88];
  _BYTE v557[88];
  _BYTE v558[88];
  _BYTE v559[88];
  _BYTE v560[88];
  _BYTE v561[88];
  _BYTE v562[88];
  _BYTE v563[88];
  _BYTE v564[88];
  _BYTE v565[88];
  _BYTE v566[88];
  _BYTE v567[88];
  _BYTE v568[88];
  _BYTE v569[88];
  _BYTE v570[88];
  _BYTE v571[88];
  _BYTE v572[88];
  _BYTE v573[88];
  _BYTE v574[88];
  _BYTE v575[88];
  _BYTE v576[88];
  _BYTE v577[88];
  _BYTE v578[88];
  _BYTE v579[88];
  _BYTE v580[88];
  _BYTE v581[88];
  _BYTE v582[88];
  _BYTE v583[88];
  _BYTE v584[88];
  _BYTE v585[88];
  _BYTE v586[88];
  _BYTE v587[88];
  _BYTE v588[88];
  _BYTE v589[88];
  _BYTE v590[88];
  _BYTE v591[88];
  _BYTE v592[88];
  _BYTE v593[88];
  _BYTE v594[88];
  _BYTE v595[88];
  _BYTE v596[88];
  _BYTE v597[88];
  _BYTE v598[88];
  _BYTE v599[88];
  _BYTE v600[88];
  _BYTE v601[88];
  _BYTE v602[88];
  _BYTE v603[88];
  _BYTE v604[88];
  _BYTE v605[88];
  _BYTE v606[88];
  _BYTE v607[88];
  _BYTE v608[88];
  _BYTE v609[88];
  _BYTE v610[88];
  _BYTE v611[88];
  _BYTE v612[88];
  _BYTE v613[88];
  _BYTE v614[88];
  _BYTE v615[88];
  _BYTE v616[88];
  _BYTE v617[88];
  _BYTE v618[88];
  _BYTE v619[88];
  _BYTE v620[88];
  _BYTE v621[88];
  _BYTE v622[88];
  _BYTE v623[88];
  _BYTE v624[88];
  _BYTE v625[88];
  _BYTE v626[88];
  _BYTE v627[88];
  _BYTE v628[88];
  _BYTE v629[88];
  _BYTE v630[88];
  _BYTE v631[88];
  _BYTE v632[88];
  _BYTE v633[88];
  _BYTE v634[88];
  _BYTE v635[88];
  _BYTE v636[88];
  _BYTE v637[88];
  _BYTE v638[88];
  _BYTE v639[88];
  _BYTE v640[88];
  _BYTE v641[88];
  _BYTE v642[88];
  _BYTE v643[88];
  _BYTE v644[88];
  _BYTE v645[88];
  _BYTE v646[88];
  _BYTE v647[88];
  _BYTE v648[88];
  _BYTE v649[88];
  _BYTE v650[88];
  _BYTE v651[88];
  _BYTE v652[88];
  _BYTE v653[88];
  _BYTE v654[88];
  _BYTE v655[88];
  _BYTE v656[88];
  _BYTE v657[88];
  _BYTE v658[88];
  _BYTE v659[88];
  _BYTE v660[88];
  _BYTE v661[88];
  _BYTE v662[88];
  _BYTE v663[88];
  _BYTE v664[88];
  _BYTE v665[88];
  _BYTE v666[88];
  _BYTE v667[88];
  _BYTE v668[88];
  _BYTE v669[88];
  _BYTE v670[88];
  _BYTE v671[88];
  _BYTE v672[88];
  _BYTE v673[88];
  _BYTE v674[88];
  _BYTE v675[88];
  _BYTE v676[88];
  _BYTE v677[88];
  _BYTE v678[88];
  _BYTE v679[88];
  _BYTE v680[88];
  _BYTE v681[88];
  _BYTE v682[88];
  _BYTE v683[88];
  _BYTE v684[88];
  _BYTE v685[88];
  _BYTE v686[88];
  _BYTE v687[88];
  _BYTE v688[88];
  _BYTE v689[88];
  _BYTE v690[88];
  _BYTE v691[88];
  _BYTE v692[88];
  _BYTE v693[88];
  _BYTE v694[88];
  _BYTE v695[88];
  _BYTE v696[88];
  _BYTE v697[88];
  _BYTE v698[88];
  _BYTE v699[88];
  _BYTE v700[88];
  _BYTE v701[88];
  _BYTE v702[88];
  _BYTE v703[88];
  _BYTE v704[88];
  _BYTE v705[88];
  _BYTE v706[88];
  _BYTE v707[88];
  _BYTE v708[88];
  _BYTE v709[88];
  _BYTE v710[88];
  _BYTE v711[88];
  _BYTE v712[88];
  _BYTE v713[88];
  _BYTE v714[88];
  _BYTE v715[88];
  _BYTE v716[88];
  _BYTE v717[88];
  _BYTE v718[88];
  _BYTE v719[88];
  _QWORD v720[12];
  char v721;
  __int128 v722;
  int v723;
  uint64_t v724;
  _QWORD v725[3];
  __int128 v726;
  int v727;
  uint64_t v728;
  _QWORD v729[3];
  __int128 v730;
  int v731;
  uint64_t v732;
  _QWORD v733[3];
  __int128 v734;
  int v735;
  uint64_t v736;
  _QWORD v737[3];
  __int128 v738;
  int v739;
  uint64_t v740;
  _QWORD v741[3];
  __int128 v742;
  int v743;
  uint64_t v744;
  _QWORD v745[3];
  __int128 v746;
  int v747;
  uint64_t v748;
  _QWORD v749[3];
  __int128 v750;
  int v751;
  uint64_t v752;
  _QWORD v753[3];
  __int128 v754;
  int v755;
  uint64_t v756;
  _QWORD v757[3];
  __int128 v758;
  int v759;
  uint64_t v760;
  _QWORD v761[3];
  __int128 v762;
  int v763;
  uint64_t v764;
  _QWORD v765[3];
  __int128 v766;
  int v767;
  uint64_t v768;
  _QWORD v769[3];
  __int128 v770;
  int v771;
  uint64_t v772;
  _QWORD v773[3];
  __int128 v774;
  int v775;
  uint64_t v776;
  _QWORD v777[3];
  __int128 v778;
  int v779;
  uint64_t v780;
  _QWORD v781[3];
  __int128 v782;
  int v783;
  uint64_t v784;
  _QWORD v785[3];
  __int128 v786;
  int v787;
  uint64_t v788;
  _QWORD v789[3];
  __int128 v790;
  int v791;
  uint64_t v792;
  _QWORD v793[3];
  __int128 v794;
  int v795;
  uint64_t v796;
  _QWORD v797[3];
  __int128 v798;
  int v799;
  uint64_t v800;
  _QWORD v801[3];
  __int128 v802;
  int v803;
  uint64_t v804;
  _QWORD v805[3];
  __int128 v806;
  int v807;
  uint64_t v808;
  _QWORD v809[3];
  __int128 v810;
  int v811;
  uint64_t v812;
  _QWORD v813[3];
  __int128 v814;
  int v815;
  uint64_t v816;
  _QWORD v817[3];
  __int128 v818;
  int v819;
  uint64_t v820;
  _QWORD v821[3];
  __int128 v822;
  int v823;
  uint64_t v824;
  _QWORD v825[3];
  __int128 v826;
  int v827;
  uint64_t v828;
  _QWORD v829[3];
  __int128 v830;
  int v831;
  uint64_t v832;
  _QWORD v833[3];
  __int128 v834;
  int v835;
  uint64_t v836;
  _QWORD v837[3];
  __int128 v838;
  int v839;
  uint64_t v840;
  _QWORD v841[3];
  __int128 v842;
  int v843;
  uint64_t v844;
  _QWORD v845[3];
  __int128 v846;
  int v847;
  uint64_t v848;
  _QWORD v849[3];
  __int128 v850;
  int v851;
  uint64_t v852;
  _QWORD v853[3];
  __int128 v854;
  int v855;
  uint64_t v856;
  _QWORD v857[3];
  __int128 v858;
  int v859;
  uint64_t v860;
  _QWORD v861[3];
  __int128 v862;
  int v863;
  uint64_t v864;
  _QWORD v865[3];
  __int128 v866;
  int v867;
  uint64_t v868;
  _QWORD v869[3];
  __int128 v870;
  int v871;
  uint64_t v872;
  _QWORD v873[3];
  __int128 v874;
  int v875;
  uint64_t v876;
  _QWORD v877[3];
  __int128 v878;
  int v879;
  uint64_t v880;
  _QWORD v881[3];
  __int128 v882;
  int v883;
  uint64_t v884;
  _QWORD v885[3];
  __int128 v886;
  int v887;
  uint64_t v888;
  _QWORD v889[3];
  __int128 v890;
  int v891;
  uint64_t v892;
  _QWORD v893[3];
  __int128 v894;
  int v895;
  uint64_t v896;
  _QWORD v897[3];
  __int128 v898;
  int v899;
  uint64_t v900;
  _QWORD v901[3];
  __int128 v902;
  int v903;
  uint64_t v904;
  _QWORD v905[3];
  __int128 v906;
  int v907;
  uint64_t v908;
  _QWORD v909[3];
  __int128 v910;
  int v911;
  uint64_t v912;
  _QWORD v913[3];
  __int128 v914;
  int v915;
  uint64_t v916;
  _QWORD v917[3];
  __int128 v918;
  int v919;
  uint64_t v920;
  _QWORD v921[3];
  __int128 v922;
  int v923;
  uint64_t v924;
  _QWORD v925[3];
  __int128 v926;
  int v927;
  uint64_t v928;
  _QWORD v929[3];
  __int128 v930;
  int v931;
  uint64_t v932;
  _QWORD v933[3];
  __int128 v934;
  int v935;
  uint64_t v936;
  _QWORD v937[3];
  __int128 v938;
  int v939;
  uint64_t v940;
  _QWORD v941[3];
  __int128 v942;
  int v943;
  uint64_t v944;
  _QWORD v945[3];
  __int128 v946;
  int v947;
  uint64_t v948;
  _QWORD v949[3];
  __int128 v950;
  int v951;
  uint64_t v952;
  _QWORD v953[3];
  __int128 v954;
  int v955;
  uint64_t v956;
  _QWORD v957[3];
  __int128 v958;
  int v959;
  uint64_t v960;
  _QWORD v961[3];
  __int128 v962;
  int v963;
  uint64_t v964;
  _QWORD v965[3];
  __int128 v966;
  int v967;
  uint64_t v968;
  _QWORD v969[3];
  __int128 v970;
  int v971;
  uint64_t v972;
  _QWORD v973[3];
  __int128 v974;
  int v975;
  uint64_t v976;
  _QWORD v977[3];
  __int128 v978;
  int v979;
  uint64_t v980;
  _QWORD v981[3];
  __int128 v982;
  int v983;
  uint64_t v984;
  _QWORD v985[3];
  __int128 v986;
  int v987;
  uint64_t v988;
  _QWORD v989[3];
  __int128 v990;
  int v991;
  uint64_t v992;
  _QWORD v993[3];
  __int128 v994;
  int v995;
  uint64_t v996;
  _QWORD v997[3];
  __int128 v998;
  int v999;
  uint64_t v1000;
  _QWORD v1001[3];
  __int128 v1002;
  int v1003;
  uint64_t v1004;
  _QWORD v1005[3];
  __int128 v1006;
  int v1007;
  uint64_t v1008;
  _QWORD v1009[3];
  __int128 v1010;
  int v1011;
  uint64_t v1012;
  _QWORD v1013[3];
  __int128 v1014;
  int v1015;
  uint64_t v1016;
  _QWORD v1017[3];
  __int128 v1018;
  int v1019;
  uint64_t v1020;
  _QWORD v1021[3];
  __int128 v1022;
  int v1023;
  uint64_t v1024;
  _QWORD v1025[3];
  __int128 v1026;
  int v1027;
  uint64_t v1028;
  _QWORD v1029[3];
  __int128 v1030;
  int v1031;
  uint64_t v1032;
  _QWORD v1033[3];
  __int128 v1034;
  int v1035;
  uint64_t v1036;
  _QWORD v1037[3];
  __int128 v1038;
  int v1039;
  uint64_t v1040;
  _QWORD v1041[3];
  __int128 v1042;
  int v1043;
  uint64_t v1044;
  _QWORD v1045[3];
  __int128 v1046;
  int v1047;
  uint64_t v1048;
  _QWORD v1049[3];
  __int128 v1050;
  int v1051;
  uint64_t v1052;
  _QWORD v1053[3];
  __int128 v1054;
  int v1055;
  uint64_t v1056;
  _QWORD v1057[3];
  __int128 v1058;
  int v1059;
  uint64_t v1060;
  _QWORD v1061[3];
  __int128 v1062;
  int v1063;
  uint64_t v1064;
  _QWORD v1065[3];
  __int128 v1066;
  int v1067;
  uint64_t v1068;
  _QWORD v1069[3];
  __int128 v1070;
  int v1071;
  uint64_t v1072;
  _QWORD v1073[3];
  __int128 v1074;
  int v1075;
  uint64_t v1076;
  _QWORD v1077[3];
  __int128 v1078;
  int v1079;
  uint64_t v1080;
  _QWORD v1081[3];
  __int128 v1082;
  int v1083;
  uint64_t v1084;
  _QWORD v1085[3];
  __int128 v1086;
  int v1087;
  uint64_t v1088;
  _QWORD v1089[3];
  __int128 v1090;
  int v1091;
  uint64_t v1092;
  _QWORD v1093[3];
  __int128 v1094;
  int v1095;
  uint64_t v1096;
  _QWORD v1097[3];
  __int128 v1098;
  int v1099;
  uint64_t v1100;
  _QWORD v1101[3];
  __int128 v1102;
  int v1103;
  uint64_t v1104;
  _QWORD v1105[3];
  __int128 v1106;
  int v1107;
  uint64_t v1108;
  _QWORD v1109[3];
  __int128 v1110;
  int v1111;
  uint64_t v1112;
  _QWORD v1113[3];
  __int128 v1114;
  int v1115;
  uint64_t v1116;
  _QWORD v1117[3];
  __int128 v1118;
  int v1119;
  uint64_t v1120;
  _QWORD v1121[3];
  __int128 v1122;
  int v1123;
  uint64_t v1124;
  _QWORD v1125[3];
  __int128 v1126;
  int v1127;
  uint64_t v1128;
  _QWORD v1129[3];
  __int128 v1130;
  int v1131;
  uint64_t v1132;
  _QWORD v1133[3];
  __int128 v1134;
  int v1135;
  uint64_t v1136;
  _QWORD v1137[3];
  __int128 v1138;
  int v1139;
  uint64_t v1140;
  _QWORD v1141[3];
  __int128 v1142;
  int v1143;
  uint64_t v1144;
  _QWORD v1145[3];
  __int128 v1146;
  int v1147;
  uint64_t v1148;
  _QWORD v1149[3];
  __int128 v1150;
  int v1151;
  uint64_t v1152;
  _QWORD v1153[3];
  __int128 v1154;
  int v1155;
  uint64_t v1156;
  _QWORD v1157[3];
  __int128 v1158;
  int v1159;
  uint64_t v1160;
  _QWORD v1161[3];
  __int128 v1162;
  int v1163;
  uint64_t v1164;
  _QWORD v1165[3];
  __int128 v1166;
  int v1167;
  uint64_t v1168;
  _QWORD v1169[3];
  __int128 v1170;
  int v1171;
  uint64_t v1172;
  _QWORD v1173[3];
  __int128 v1174;
  int v1175;
  uint64_t v1176;
  _QWORD v1177[3];
  __int128 v1178;
  int v1179;
  uint64_t v1180;
  _QWORD v1181[3];
  __int128 v1182;
  int v1183;
  uint64_t v1184;
  _QWORD v1185[3];
  __int128 v1186;
  int v1187;
  uint64_t v1188;
  _QWORD v1189[3];
  __int128 v1190;
  int v1191;
  uint64_t v1192;
  _QWORD v1193[3];
  __int128 v1194;
  int v1195;
  uint64_t v1196;
  _QWORD v1197[3];
  __int128 v1198;
  int v1199;
  uint64_t v1200;
  _QWORD v1201[3];
  __int128 v1202;
  int v1203;
  uint64_t v1204;
  _QWORD v1205[3];
  __int128 v1206;
  int v1207;
  uint64_t v1208;
  _QWORD v1209[3];
  __int128 v1210;
  int v1211;
  uint64_t v1212;
  _QWORD v1213[3];
  __int128 v1214;
  int v1215;
  uint64_t v1216;
  _QWORD v1217[3];
  __int128 v1218;
  int v1219;
  uint64_t v1220;
  _QWORD v1221[3];
  __int128 v1222;
  int v1223;
  uint64_t v1224;
  _QWORD v1225[3];
  __int128 v1226;
  int v1227;
  uint64_t v1228;
  _QWORD v1229[3];
  __int128 v1230;
  int v1231;
  uint64_t v1232;
  _QWORD v1233[3];
  __int128 v1234;
  int v1235;
  uint64_t v1236;
  _QWORD v1237[3];
  __int128 v1238;
  int v1239;
  uint64_t v1240;
  _QWORD v1241[3];
  __int128 v1242;
  int v1243;
  uint64_t v1244;
  _QWORD v1245[3];
  __int128 v1246;
  int v1247;
  uint64_t v1248;
  _QWORD v1249[3];
  __int128 v1250;
  int v1251;
  uint64_t v1252;
  _QWORD v1253[3];
  __int128 v1254;
  int v1255;
  uint64_t v1256;
  _QWORD v1257[3];
  __int128 v1258;
  int v1259;
  uint64_t v1260;
  _QWORD v1261[3];
  __int128 v1262;
  int v1263;
  uint64_t v1264;
  _QWORD v1265[3];
  __int128 v1266;
  int v1267;
  uint64_t v1268;
  _QWORD v1269[3];
  __int128 v1270;
  int v1271;
  uint64_t v1272;
  _QWORD v1273[3];
  __int128 v1274;
  int v1275;
  uint64_t v1276;
  _QWORD v1277[3];
  __int128 v1278;
  int v1279;
  uint64_t v1280;
  _QWORD v1281[3];
  __int128 v1282;
  int v1283;
  uint64_t v1284;
  _QWORD v1285[3];
  __int128 v1286;
  int v1287;
  uint64_t v1288;
  _QWORD v1289[3];
  __int128 v1290;
  int v1291;
  uint64_t v1292;
  _QWORD v1293[3];
  __int128 v1294;
  int v1295;
  uint64_t v1296;
  _QWORD v1297[3];
  __int128 v1298;
  int v1299;
  uint64_t v1300;
  _QWORD v1301[3];
  __int128 v1302;
  int v1303;
  uint64_t v1304;
  _QWORD v1305[3];
  __int128 v1306;
  int v1307;
  uint64_t v1308;
  _QWORD v1309[3];
  __int128 v1310;
  int v1311;
  uint64_t v1312;
  _QWORD v1313[3];
  __int128 v1314;
  int v1315;
  uint64_t v1316;
  _QWORD v1317[3];
  __int128 v1318;
  int v1319;
  uint64_t v1320;
  _QWORD v1321[3];
  __int128 v1322;
  int v1323;
  uint64_t v1324;
  _QWORD v1325[3];
  __int128 v1326;
  int v1327;
  uint64_t v1328;
  _QWORD v1329[3];
  __int128 v1330;
  int v1331;
  uint64_t v1332;
  _QWORD v1333[3];
  __int128 v1334;
  int v1335;
  uint64_t v1336;
  _QWORD v1337[3];
  __int128 v1338;
  int v1339;
  uint64_t v1340;
  _QWORD v1341[3];
  __int128 v1342;
  int v1343;
  uint64_t v1344;
  _QWORD v1345[3];
  __int128 v1346;
  int v1347;
  uint64_t v1348;
  _QWORD v1349[3];
  __int128 v1350;
  int v1351;
  uint64_t v1352;
  _QWORD v1353[3];
  __int128 v1354;
  int v1355;
  uint64_t v1356;
  _QWORD v1357[3];
  __int128 v1358;
  int v1359;
  uint64_t v1360;
  _QWORD v1361[3];
  __int128 v1362;
  int v1363;
  uint64_t v1364;
  _QWORD v1365[3];
  __int128 v1366;
  int v1367;
  uint64_t v1368;
  _QWORD v1369[3];
  __int128 v1370;
  int v1371;
  uint64_t v1372;
  _QWORD v1373[3];
  __int128 v1374;
  int v1375;
  uint64_t v1376;
  _QWORD v1377[3];
  __int128 v1378;
  int v1379;
  uint64_t v1380;
  _QWORD v1381[3];
  __int128 v1382;
  int v1383;
  uint64_t v1384;
  _QWORD v1385[3];
  __int128 v1386;
  int v1387;
  uint64_t v1388;
  _QWORD v1389[3];
  __int128 v1390;
  int v1391;
  uint64_t v1392;
  _QWORD v1393[3];
  __int128 v1394;
  int v1395;
  uint64_t v1396;
  _QWORD v1397[3];
  __int128 v1398;
  int v1399;
  uint64_t v1400;
  _QWORD v1401[3];
  __int128 v1402;
  int v1403;
  uint64_t v1404;
  _QWORD v1405[3];
  __int128 v1406;
  int v1407;
  uint64_t v1408;
  _QWORD v1409[3];
  __int128 v1410;
  int v1411;
  uint64_t v1412;
  _QWORD v1413[3];
  __int128 v1414;
  int v1415;
  uint64_t v1416;
  _QWORD v1417[3];
  __int128 v1418;
  int v1419;
  uint64_t v1420;
  _QWORD v1421[3];
  __int128 v1422;
  int v1423;
  uint64_t v1424;
  _QWORD v1425[3];
  __int128 v1426;
  int v1427;
  uint64_t v1428;
  _QWORD v1429[3];
  __int128 v1430;
  int v1431;
  uint64_t v1432;
  _QWORD v1433[3];
  __int128 v1434;
  int v1435;
  uint64_t v1436;
  _QWORD v1437[3];
  uint64_t v1438;

  sub_4368((int)v720, "GPUTime");
  v2 = (uint64_t *)sub_445C((uint64_t)v720, 0xFu, 3, (uint64_t)sub_F3784);
  v3 = sub_4618(v2, "Xcode Derived Counters");
  v4 = *(_OWORD *)v3;
  v723 = *((_DWORD *)v3 + 4);
  v722 = v4;
  sub_10A068((uint64_t)&v724, (uint64_t)(v3 + 3));
  memset(v725, 0, sizeof(v725));
  sub_8B6C((char *)v725, (__int128 *)v3[8], (__int128 *)v3[9], 0xAAAAAAAAAAAAAAABLL * ((v3[9] - v3[8]) >> 3));
  sub_4368((int)v719, "MeshPrimitivesSubmitted");
  v5 = (uint64_t *)sub_445C((uint64_t)v719, 0xFu, 3, (uint64_t)sub_F37C0);
  v6 = sub_4618(v5, "Xcode Derived Counters");
  v7 = *(_OWORD *)v6;
  v727 = *((_DWORD *)v6 + 4);
  v726 = v7;
  sub_10A068((uint64_t)&v728, (uint64_t)(v6 + 3));
  memset(v729, 0, sizeof(v729));
  sub_8B6C((char *)v729, (__int128 *)v6[8], (__int128 *)v6[9], 0xAAAAAAAAAAAAAAABLL * ((v6[9] - v6[8]) >> 3));
  sub_4368((int)v718, "PrimitivesSubmitted");
  v8 = (uint64_t *)sub_445C((uint64_t)v718, 0xFu, 3, (uint64_t)sub_F37FC);
  v9 = sub_4618(v8, "Xcode Derived Counters");
  v10 = *(_OWORD *)v9;
  v731 = *((_DWORD *)v9 + 4);
  v730 = v10;
  sub_10A068((uint64_t)&v732, (uint64_t)(v9 + 3));
  memset(v733, 0, sizeof(v733));
  sub_8B6C((char *)v733, (__int128 *)v9[8], (__int128 *)v9[9], 0xAAAAAAAAAAAAAAABLL * ((v9[9] - v9[8]) >> 3));
  sub_4368((int)v717, "VSInvocation");
  v11 = (uint64_t *)sub_445C((uint64_t)v717, 0xFu, 3, (uint64_t)sub_F3890);
  v12 = sub_4618(v11, "Xcode Derived Counters");
  v13 = *(_OWORD *)v12;
  v735 = *((_DWORD *)v12 + 4);
  v734 = v13;
  sub_10A068((uint64_t)&v736, (uint64_t)(v12 + 3));
  memset(v737, 0, sizeof(v737));
  sub_8B6C((char *)v737, (__int128 *)v12[8], (__int128 *)v12[9], 0xAAAAAAAAAAAAAAABLL * ((v12[9] - v12[8]) >> 3));
  sub_4368((int)v716, "PSInvocation");
  v14 = (uint64_t *)sub_445C((uint64_t)v716, 0xFu, 3, (uint64_t)sub_F38CC);
  v15 = sub_4618(v14, "Xcode Derived Counters");
  v16 = *(_OWORD *)v15;
  v739 = *((_DWORD *)v15 + 4);
  v738 = v16;
  sub_10A068((uint64_t)&v740, (uint64_t)(v15 + 3));
  memset(v741, 0, sizeof(v741));
  sub_8B6C((char *)v741, (__int128 *)v15[8], (__int128 *)v15[9], 0xAAAAAAAAAAAAAAABLL * ((v15[9] - v15[8]) >> 3));
  sub_4368((int)v715, "CSInvocation");
  v17 = (uint64_t *)sub_445C((uint64_t)v715, 0xFu, 3, (uint64_t)sub_F3964);
  v18 = sub_4618(v17, "Xcode Derived Counters");
  v19 = *(_OWORD *)v18;
  v743 = *((_DWORD *)v18 + 4);
  v742 = v19;
  sub_10A068((uint64_t)&v744, (uint64_t)(v18 + 3));
  memset(v745, 0, sizeof(v745));
  sub_8B6C((char *)v745, (__int128 *)v18[8], (__int128 *)v18[9], 0xAAAAAAAAAAAAAAABLL * ((v18[9] - v18[8]) >> 3));
  sub_4368((int)v714, "PrimitivesPerSec");
  v20 = (uint64_t *)sub_445C((uint64_t)v714, 0xFu, 3, (uint64_t)sub_F3A90);
  v21 = sub_4618(v20, "Xcode Derived Counters");
  v22 = *(_OWORD *)v21;
  v747 = *((_DWORD *)v21 + 4);
  v746 = v22;
  sub_10A068((uint64_t)&v748, (uint64_t)(v21 + 3));
  memset(v749, 0, sizeof(v749));
  sub_8B6C((char *)v749, (__int128 *)v21[8], (__int128 *)v21[9], 0xAAAAAAAAAAAAAAABLL * ((v21[9] - v21[8]) >> 3));
  sub_4368((int)v713, "PixelsPerSec");
  v23 = (uint64_t *)sub_445C((uint64_t)v713, 0xFu, 3, (uint64_t)sub_F3B58);
  v24 = sub_4618(v23, "Xcode Derived Counters");
  v25 = *(_OWORD *)v24;
  v751 = *((_DWORD *)v24 + 4);
  v750 = v25;
  sub_10A068((uint64_t)&v752, (uint64_t)(v24 + 3));
  memset(v753, 0, sizeof(v753));
  sub_8B6C((char *)v753, (__int128 *)v24[8], (__int128 *)v24[9], 0xAAAAAAAAAAAAAAABLL * ((v24[9] - v24[8]) >> 3));
  sub_4368((int)v712, "PixelToVertexRatio");
  v26 = (uint64_t *)sub_445C((uint64_t)v712, 0xFu, 3, (uint64_t)sub_F3C20);
  v27 = sub_4618(v26, "Xcode Derived Counters");
  v28 = *(_OWORD *)v27;
  v755 = *((_DWORD *)v27 + 4);
  v754 = v28;
  sub_10A068((uint64_t)&v756, (uint64_t)(v27 + 3));
  memset(v757, 0, sizeof(v757));
  sub_8B6C((char *)v757, (__int128 *)v27[8], (__int128 *)v27[9], 0xAAAAAAAAAAAAAAABLL * ((v27[9] - v27[8]) >> 3));
  sub_4368((int)v711, "PixelPerTriangle");
  v29 = (uint64_t *)sub_445C((uint64_t)v711, 0xFu, 3, (uint64_t)sub_F3CB4);
  v30 = sub_4618(v29, "Xcode Derived Counters");
  v31 = *(_OWORD *)v30;
  v759 = *((_DWORD *)v30 + 4);
  v758 = v31;
  sub_10A068((uint64_t)&v760, (uint64_t)(v30 + 3));
  memset(v761, 0, sizeof(v761));
  sub_8B6C((char *)v761, (__int128 *)v30[8], (__int128 *)v30[9], 0xAAAAAAAAAAAAAAABLL * ((v30[9] - v30[8]) >> 3));
  sub_4368((int)v710, "DrawCalls");
  v32 = (uint64_t *)sub_445C((uint64_t)v710, 0xFu, 3, (uint64_t)sub_F3D48);
  v33 = sub_4618(v32, "Xcode Derived Counters");
  v34 = *(_OWORD *)v33;
  v763 = *((_DWORD *)v33 + 4);
  v762 = v34;
  sub_10A068((uint64_t)&v764, (uint64_t)(v33 + 3));
  memset(v765, 0, sizeof(v765));
  sub_8B6C((char *)v765, (__int128 *)v33[8], (__int128 *)v33[9], 0xAAAAAAAAAAAAAAABLL * ((v33[9] - v33[8]) >> 3));
  sub_4368((int)v709, "VerticesSubmitted");
  v35 = (uint64_t *)sub_445C((uint64_t)v709, 0xFu, 3, (uint64_t)sub_F3DEC);
  v36 = sub_4618(v35, "Xcode Derived Counters");
  v37 = *(_OWORD *)v36;
  v767 = *((_DWORD *)v36 + 4);
  v766 = v37;
  sub_10A068((uint64_t)&v768, (uint64_t)(v36 + 3));
  memset(v769, 0, sizeof(v769));
  sub_8B6C((char *)v769, (__int128 *)v36[8], (__int128 *)v36[9], 0xAAAAAAAAAAAAAAABLL * ((v36[9] - v36[8]) >> 3));
  sub_4368((int)v708, "VerticesReused");
  v38 = (uint64_t *)sub_445C((uint64_t)v708, 0xFu, 3, (uint64_t)sub_F3E28);
  v39 = sub_4618(v38, "Xcode Derived Counters");
  v40 = *(_OWORD *)v39;
  v771 = *((_DWORD *)v39 + 4);
  v770 = v40;
  sub_10A068((uint64_t)&v772, (uint64_t)(v39 + 3));
  memset(v773, 0, sizeof(v773));
  sub_8B6C((char *)v773, (__int128 *)v39[8], (__int128 *)v39[9], 0xAAAAAAAAAAAAAAABLL * ((v39[9] - v39[8]) >> 3));
  sub_4368((int)v707, "VerticesReusedPercent");
  v41 = (uint64_t *)sub_445C((uint64_t)v707, 0xFu, 3, (uint64_t)sub_F3F38);
  v42 = sub_4618(v41, "Xcode Derived Counters");
  v43 = *(_OWORD *)v42;
  v775 = *((_DWORD *)v42 + 4);
  v774 = v43;
  sub_10A068((uint64_t)&v776, (uint64_t)(v42 + 3));
  memset(v777, 0, sizeof(v777));
  sub_8B6C((char *)v777, (__int128 *)v42[8], (__int128 *)v42[9], 0xAAAAAAAAAAAAAAABLL * ((v42[9] - v42[8]) >> 3));
  sub_4368((int)v706, "PrimitivesRasterized");
  v44 = (uint64_t *)sub_445C((uint64_t)v706, 0xFu, 3, (uint64_t)sub_F40DC);
  v45 = sub_4618(v44, "Xcode Derived Counters");
  v46 = *(_OWORD *)v45;
  v779 = *((_DWORD *)v45 + 4);
  v778 = v46;
  sub_10A068((uint64_t)&v780, (uint64_t)(v45 + 3));
  memset(v781, 0, sizeof(v781));
  sub_8B6C((char *)v781, (__int128 *)v45[8], (__int128 *)v45[9], 0xAAAAAAAAAAAAAAABLL * ((v45[9] - v45[8]) >> 3));
  sub_4368((int)v705, "PrimitivesRasterizedPercent");
  v47 = (uint64_t *)sub_445C((uint64_t)v705, 0xFu, 3, (uint64_t)sub_F4118);
  v48 = sub_4618(v47, "Xcode Derived Counters");
  v49 = *(_OWORD *)v48;
  v783 = *((_DWORD *)v48 + 4);
  v782 = v49;
  sub_10A068((uint64_t)&v784, (uint64_t)(v48 + 3));
  memset(v785, 0, sizeof(v785));
  sub_8B6C((char *)v785, (__int128 *)v48[8], (__int128 *)v48[9], 0xAAAAAAAAAAAAAAABLL * ((v48[9] - v48[8]) >> 3));
  sub_4368((int)v704, "ClippedPrimitives");
  v50 = (uint64_t *)sub_445C((uint64_t)v704, 0xFu, 3, (uint64_t)sub_F4274);
  v51 = sub_4618(v50, "Xcode Derived Counters");
  v52 = *(_OWORD *)v51;
  v787 = *((_DWORD *)v51 + 4);
  v786 = v52;
  sub_10A068((uint64_t)&v788, (uint64_t)(v51 + 3));
  memset(v789, 0, sizeof(v789));
  sub_8B6C((char *)v789, (__int128 *)v51[8], (__int128 *)v51[9], 0xAAAAAAAAAAAAAAABLL * ((v51[9] - v51[8]) >> 3));
  sub_4368((int)v703, "ClippedPrimitivesPercent");
  v53 = (uint64_t *)sub_445C((uint64_t)v703, 0xFu, 3, (uint64_t)sub_F4308);
  v54 = sub_4618(v53, "Xcode Derived Counters");
  v55 = *(_OWORD *)v54;
  v791 = *((_DWORD *)v54 + 4);
  v790 = v55;
  sub_10A068((uint64_t)&v792, (uint64_t)(v54 + 3));
  memset(v793, 0, sizeof(v793));
  sub_8B6C((char *)v793, (__int128 *)v54[8], (__int128 *)v54[9], 0xAAAAAAAAAAAAAAABLL * ((v54[9] - v54[8]) >> 3));
  sub_4368((int)v702, "BackFaceCullPrims");
  v56 = (uint64_t *)sub_445C((uint64_t)v702, 0xFu, 3, (uint64_t)sub_F43E8);
  v57 = sub_4618(v56, "Xcode Derived Counters");
  v58 = *(_OWORD *)v57;
  v795 = *((_DWORD *)v57 + 4);
  v794 = v58;
  sub_10A068((uint64_t)&v796, (uint64_t)(v57 + 3));
  memset(v797, 0, sizeof(v797));
  sub_8B6C((char *)v797, (__int128 *)v57[8], (__int128 *)v57[9], 0xAAAAAAAAAAAAAAABLL * ((v57[9] - v57[8]) >> 3));
  sub_4368((int)v701, "BackFaceClippedPrims");
  v59 = (uint64_t *)sub_445C((uint64_t)v701, 0xFu, 3, (uint64_t)sub_F4424);
  v60 = sub_4618(v59, "Xcode Derived Counters");
  v61 = *(_OWORD *)v60;
  v799 = *((_DWORD *)v60 + 4);
  v798 = v61;
  sub_10A068((uint64_t)&v800, (uint64_t)(v60 + 3));
  memset(v801, 0, sizeof(v801));
  sub_8B6C((char *)v801, (__int128 *)v60[8], (__int128 *)v60[9], 0xAAAAAAAAAAAAAAABLL * ((v60[9] - v60[8]) >> 3));
  sub_4368((int)v700, "SmallTriangleClippedPrims");
  v62 = (uint64_t *)sub_445C((uint64_t)v700, 0xFu, 3, (uint64_t)sub_F4460);
  v63 = sub_4618(v62, "Xcode Derived Counters");
  v64 = *(_OWORD *)v63;
  v803 = *((_DWORD *)v63 + 4);
  v802 = v64;
  sub_10A068((uint64_t)&v804, (uint64_t)(v63 + 3));
  memset(v805, 0, sizeof(v805));
  sub_8B6C((char *)v805, (__int128 *)v63[8], (__int128 *)v63[9], 0xAAAAAAAAAAAAAAABLL * ((v63[9] - v63[8]) >> 3));
  sub_4368((int)v699, "TrianglesCreatedByClipper");
  v65 = (uint64_t *)sub_445C((uint64_t)v699, 0xFu, 3, (uint64_t)sub_F449C);
  v66 = sub_4618(v65, "Xcode Derived Counters");
  v67 = *(_OWORD *)v66;
  v807 = *((_DWORD *)v66 + 4);
  v806 = v67;
  sub_10A068((uint64_t)&v808, (uint64_t)(v66 + 3));
  memset(v809, 0, sizeof(v809));
  sub_8B6C((char *)v809, (__int128 *)v66[8], (__int128 *)v66[9], 0xAAAAAAAAAAAAAAABLL * ((v66[9] - v66[8]) >> 3));
  sub_4368((int)v698, "VerticesCreatedByClipper");
  v68 = (uint64_t *)sub_445C((uint64_t)v698, 0xFu, 3, (uint64_t)sub_F44D8);
  v69 = sub_4618(v68, "Xcode Derived Counters");
  v70 = *(_OWORD *)v69;
  v811 = *((_DWORD *)v69 + 4);
  v810 = v70;
  sub_10A068((uint64_t)&v812, (uint64_t)(v69 + 3));
  memset(v813, 0, sizeof(v813));
  sub_8B6C((char *)v813, (__int128 *)v69[8], (__int128 *)v69[9], 0xAAAAAAAAAAAAAAABLL * ((v69[9] - v69[8]) >> 3));
  sub_4368((int)v697, "InputPrimitivesPostClipping");
  v71 = (uint64_t *)sub_445C((uint64_t)v697, 0xFu, 3, (uint64_t)sub_F4514);
  v72 = sub_4618(v71, "Xcode Derived Counters");
  v73 = *(_OWORD *)v72;
  v815 = *((_DWORD *)v72 + 4);
  v814 = v73;
  sub_10A068((uint64_t)&v816, (uint64_t)(v72 + 3));
  memset(v817, 0, sizeof(v817));
  sub_8B6C((char *)v817, (__int128 *)v72[8], (__int128 *)v72[9], 0xAAAAAAAAAAAAAAABLL * ((v72[9] - v72[8]) >> 3));
  sub_4368((int)v696, "SmallTriangleCullPrims");
  v74 = (uint64_t *)sub_445C((uint64_t)v696, 0xFu, 3, (uint64_t)sub_F4674);
  v75 = sub_4618(v74, "Xcode Derived Counters");
  v76 = *(_OWORD *)v75;
  v819 = *((_DWORD *)v75 + 4);
  v818 = v76;
  sub_10A068((uint64_t)&v820, (uint64_t)(v75 + 3));
  memset(v821, 0, sizeof(v821));
  sub_8B6C((char *)v821, (__int128 *)v75[8], (__int128 *)v75[9], 0xAAAAAAAAAAAAAAABLL * ((v75[9] - v75[8]) >> 3));
  sub_4368((int)v695, "BackFaceCullPrimsPercent");
  v77 = (uint64_t *)sub_445C((uint64_t)v695, 0xFu, 3, (uint64_t)sub_F48A4);
  v78 = sub_4618(v77, "Xcode Derived Counters");
  v79 = *(_OWORD *)v78;
  v823 = *((_DWORD *)v78 + 4);
  v822 = v79;
  sub_10A068((uint64_t)&v824, (uint64_t)(v78 + 3));
  memset(v825, 0, sizeof(v825));
  sub_8B6C((char *)v825, (__int128 *)v78[8], (__int128 *)v78[9], 0xAAAAAAAAAAAAAAABLL * ((v78[9] - v78[8]) >> 3));
  sub_4368((int)v694, "SmallTriangleCullPrimsPercent");
  v80 = (uint64_t *)sub_445C((uint64_t)v694, 0xFu, 3, (uint64_t)sub_F4A00);
  v81 = sub_4618(v80, "Xcode Derived Counters");
  v82 = *(_OWORD *)v81;
  v827 = *((_DWORD *)v81 + 4);
  v826 = v82;
  sub_10A068((uint64_t)&v828, (uint64_t)(v81 + 3));
  memset(v829, 0, sizeof(v829));
  sub_8B6C((char *)v829, (__int128 *)v81[8], (__int128 *)v81[9], 0xAAAAAAAAAAAAAAABLL * ((v81[9] - v81[8]) >> 3));
  sub_4368((int)v693, "GuardBandCullPrims");
  v83 = (uint64_t *)sub_445C((uint64_t)v693, 0xFu, 3, (uint64_t)sub_F4B5C);
  v84 = sub_4618(v83, "Xcode Derived Counters");
  v85 = *(_OWORD *)v84;
  v831 = *((_DWORD *)v84 + 4);
  v830 = v85;
  sub_10A068((uint64_t)&v832, (uint64_t)(v84 + 3));
  memset(v833, 0, sizeof(v833));
  sub_8B6C((char *)v833, (__int128 *)v84[8], (__int128 *)v84[9], 0xAAAAAAAAAAAAAAABLL * ((v84[9] - v84[8]) >> 3));
  sub_4368((int)v692, "GuardBandCullPrimsPercent");
  v86 = (uint64_t *)sub_445C((uint64_t)v692, 0xFu, 3, (uint64_t)sub_F4C40);
  v87 = sub_4618(v86, "Xcode Derived Counters");
  v88 = *(_OWORD *)v87;
  v835 = *((_DWORD *)v87 + 4);
  v834 = v88;
  sub_10A068((uint64_t)&v836, (uint64_t)(v87 + 3));
  memset(v837, 0, sizeof(v837));
  sub_8B6C((char *)v837, (__int128 *)v87[8], (__int128 *)v87[9], 0xAAAAAAAAAAAAAAABLL * ((v87[9] - v87[8]) >> 3));
  sub_4368((int)v691, "OffscreenCullPrims");
  v89 = (uint64_t *)sub_445C((uint64_t)v691, 0xFu, 3, (uint64_t)sub_F4D9C);
  v90 = sub_4618(v89, "Xcode Derived Counters");
  v91 = *(_OWORD *)v90;
  v839 = *((_DWORD *)v90 + 4);
  v838 = v91;
  sub_10A068((uint64_t)&v840, (uint64_t)(v90 + 3));
  memset(v841, 0, sizeof(v841));
  sub_8B6C((char *)v841, (__int128 *)v90[8], (__int128 *)v90[9], 0xAAAAAAAAAAAAAAABLL * ((v90[9] - v90[8]) >> 3));
  sub_4368((int)v690, "OffscreenCullPrimsPercent");
  v92 = (uint64_t *)sub_445C((uint64_t)v690, 0xFu, 3, (uint64_t)sub_F4E80);
  v93 = sub_4618(v92, "Xcode Derived Counters");
  v94 = *(_OWORD *)v93;
  v843 = *((_DWORD *)v93 + 4);
  v842 = v94;
  sub_10A068((uint64_t)&v844, (uint64_t)(v93 + 3));
  memset(v845, 0, sizeof(v845));
  sub_8B6C((char *)v845, (__int128 *)v93[8], (__int128 *)v93[9], 0xAAAAAAAAAAAAAAABLL * ((v93[9] - v93[8]) >> 3));
  sub_4368((int)v689, "CulledPrimitives");
  v95 = (uint64_t *)sub_445C((uint64_t)v689, 0xFu, 3, (uint64_t)sub_F4FDC);
  v96 = sub_4618(v95, "Xcode Derived Counters");
  v97 = *(_OWORD *)v96;
  v847 = *((_DWORD *)v96 + 4);
  v846 = v97;
  sub_10A068((uint64_t)&v848, (uint64_t)(v96 + 3));
  memset(v849, 0, sizeof(v849));
  sub_8B6C((char *)v849, (__int128 *)v96[8], (__int128 *)v96[9], 0xAAAAAAAAAAAAAAABLL * ((v96[9] - v96[8]) >> 3));
  sub_4368((int)v688, "CulledPrimitivesPercent");
  v98 = (uint64_t *)sub_445C((uint64_t)v688, 0xFu, 3, (uint64_t)sub_F50EC);
  v99 = sub_4618(v98, "Xcode Derived Counters");
  v100 = *(_OWORD *)v99;
  v851 = *((_DWORD *)v99 + 4);
  v850 = v100;
  sub_10A068((uint64_t)&v852, (uint64_t)(v99 + 3));
  memset(v853, 0, sizeof(v853));
  sub_8B6C((char *)v853, (__int128 *)v99[8], (__int128 *)v99[9], 0xAAAAAAAAAAAAAAABLL * ((v99[9] - v99[8]) >> 3));
  sub_4368((int)v687, "FragmentsRasterized");
  v101 = (uint64_t *)sub_445C((uint64_t)v687, 0xFu, 3, (uint64_t)sub_F5248);
  v102 = sub_4618(v101, "Xcode Derived Counters");
  v103 = *(_OWORD *)v102;
  v855 = *((_DWORD *)v102 + 4);
  v854 = v103;
  sub_10A068((uint64_t)&v856, (uint64_t)(v102 + 3));
  memset(v857, 0, sizeof(v857));
  sub_8B6C((char *)v857, (__int128 *)v102[8], (__int128 *)v102[9], 0xAAAAAAAAAAAAAAABLL * ((v102[9] - v102[8]) >> 3));
  sub_4368((int)v686, "PreZPassCount");
  v104 = (uint64_t *)sub_445C((uint64_t)v686, 0xFu, 3, (uint64_t)sub_F5464);
  v105 = sub_4618(v104, "Xcode Derived Counters");
  v106 = *(_OWORD *)v105;
  v859 = *((_DWORD *)v105 + 4);
  v858 = v106;
  sub_10A068((uint64_t)&v860, (uint64_t)(v105 + 3));
  memset(v861, 0, sizeof(v861));
  sub_8B6C((char *)v861, (__int128 *)v105[8], (__int128 *)v105[9], 0xAAAAAAAAAAAAAAABLL * ((v105[9] - v105[8]) >> 3));
  sub_4368((int)v685, "PreZFailCount");
  v107 = (uint64_t *)sub_445C((uint64_t)v685, 0xFu, 3, (uint64_t)sub_F5680);
  v108 = sub_4618(v107, "Xcode Derived Counters");
  v109 = *(_OWORD *)v108;
  v863 = *((_DWORD *)v108 + 4);
  v862 = v109;
  sub_10A068((uint64_t)&v864, (uint64_t)(v108 + 3));
  memset(v865, 0, sizeof(v865));
  sub_8B6C((char *)v865, (__int128 *)v108[8], (__int128 *)v108[9], 0xAAAAAAAAAAAAAAABLL * ((v108[9] - v108[8]) >> 3));
  sub_4368((int)v684, "PreZFailCountPercent");
  v110 = (uint64_t *)sub_445C((uint64_t)v684, 0xFu, 3, (uint64_t)sub_F5790);
  v111 = sub_4618(v110, "Xcode Derived Counters");
  v112 = *(_OWORD *)v111;
  v867 = *((_DWORD *)v111 + 4);
  v866 = v112;
  sub_10A068((uint64_t)&v868, (uint64_t)(v111 + 3));
  memset(v869, 0, sizeof(v869));
  sub_8B6C((char *)v869, (__int128 *)v111[8], (__int128 *)v111[9], 0xAAAAAAAAAAAAAAABLL * ((v111[9] - v111[8]) >> 3));
  sub_4368((int)v683, "PreZPassCountPercent");
  v113 = (uint64_t *)sub_445C((uint64_t)v683, 0xFu, 3, (uint64_t)sub_F5870);
  v114 = sub_4618(v113, "Xcode Derived Counters");
  v115 = *(_OWORD *)v114;
  v871 = *((_DWORD *)v114 + 4);
  v870 = v115;
  sub_10A068((uint64_t)&v872, (uint64_t)(v114 + 3));
  memset(v873, 0, sizeof(v873));
  sub_8B6C((char *)v873, (__int128 *)v114[8], (__int128 *)v114[9], 0xAAAAAAAAAAAAAAABLL * ((v114[9] - v114[8]) >> 3));
  sub_4368((int)v682, "AverageOverdraw");
  v116 = (uint64_t *)sub_445C((uint64_t)v682, 0xFu, 3, (uint64_t)sub_F5950);
  v117 = sub_4618(v116, "Xcode Derived Counters");
  v118 = *(_OWORD *)v117;
  v875 = *((_DWORD *)v117 + 4);
  v874 = v118;
  sub_10A068((uint64_t)&v876, (uint64_t)(v117 + 3));
  memset(v877, 0, sizeof(v877));
  sub_8B6C((char *)v877, (__int128 *)v117[8], (__int128 *)v117[9], 0xAAAAAAAAAAAAAAABLL * ((v117[9] - v117[8]) >> 3));
  sub_4368((int)v681, "PixelsPerTile");
  v119 = (uint64_t *)sub_445C((uint64_t)v681, 0xFu, 3, (uint64_t)sub_F5A80);
  v120 = sub_4618(v119, "Xcode Derived Counters");
  v121 = *(_OWORD *)v120;
  v879 = *((_DWORD *)v120 + 4);
  v878 = v121;
  sub_10A068((uint64_t)&v880, (uint64_t)(v120 + 3));
  memset(v881, 0, sizeof(v881));
  sub_8B6C((char *)v881, (__int128 *)v120[8], (__int128 *)v120[9], 0xAAAAAAAAAAAAAAABLL * ((v120[9] - v120[8]) >> 3));
  sub_4368((int)v680, "TextureSamples");
  v122 = (uint64_t *)sub_445C((uint64_t)v680, 0xFu, 3, (uint64_t)sub_F5B14);
  v123 = sub_4618(v122, "Xcode Derived Counters");
  v124 = *(_OWORD *)v123;
  v883 = *((_DWORD *)v123 + 4);
  v882 = v124;
  sub_10A068((uint64_t)&v884, (uint64_t)(v123 + 3));
  memset(v885, 0, sizeof(v885));
  sub_8B6C((char *)v885, (__int128 *)v123[8], (__int128 *)v123[9], 0xAAAAAAAAAAAAAAABLL * ((v123[9] - v123[8]) >> 3));
  sub_4368((int)v679, "VSTextureSamplesPerInvocation");
  v125 = (uint64_t *)sub_445C((uint64_t)v679, 0xFu, 3, (uint64_t)sub_F5CAC);
  v126 = sub_4618(v125, "Xcode Derived Counters");
  v127 = *(_OWORD *)v126;
  v887 = *((_DWORD *)v126 + 4);
  v886 = v127;
  sub_10A068((uint64_t)&v888, (uint64_t)(v126 + 3));
  memset(v889, 0, sizeof(v889));
  sub_8B6C((char *)v889, (__int128 *)v126[8], (__int128 *)v126[9], 0xAAAAAAAAAAAAAAABLL * ((v126[9] - v126[8]) >> 3));
  sub_4368((int)v678, "FSTextureSamplesPerInvocation");
  v128 = (uint64_t *)sub_445C((uint64_t)v678, 0xFu, 3, (uint64_t)sub_F5D40);
  v129 = sub_4618(v128, "Xcode Derived Counters");
  v130 = *(_OWORD *)v129;
  v891 = *((_DWORD *)v129 + 4);
  v890 = v130;
  sub_10A068((uint64_t)&v892, (uint64_t)(v129 + 3));
  memset(v893, 0, sizeof(v893));
  sub_8B6C((char *)v893, (__int128 *)v129[8], (__int128 *)v129[9], 0xAAAAAAAAAAAAAAABLL * ((v129[9] - v129[8]) >> 3));
  sub_4368((int)v677, "CSTextureSamplesPerInvocation");
  v131 = (uint64_t *)sub_445C((uint64_t)v677, 0xFu, 3, (uint64_t)sub_F5DD4);
  v132 = sub_4618(v131, "Xcode Derived Counters");
  v133 = *(_OWORD *)v132;
  v895 = *((_DWORD *)v132 + 4);
  v894 = v133;
  sub_10A068((uint64_t)&v896, (uint64_t)(v132 + 3));
  memset(v897, 0, sizeof(v897));
  sub_8B6C((char *)v897, (__int128 *)v132[8], (__int128 *)v132[9], 0xAAAAAAAAAAAAAAABLL * ((v132[9] - v132[8]) >> 3));
  sub_4368((int)v676, "AverageAnisotropicRatio");
  v134 = (uint64_t *)sub_445C((uint64_t)v676, 0xFu, 3, (uint64_t)sub_F5E68);
  v135 = sub_4618(v134, "Xcode Derived Counters");
  v136 = *(_OWORD *)v135;
  v899 = *((_DWORD *)v135 + 4);
  v898 = v136;
  sub_10A068((uint64_t)&v900, (uint64_t)(v135 + 3));
  memset(v901, 0, sizeof(v901));
  sub_8B6C((char *)v901, (__int128 *)v135[8], (__int128 *)v135[9], 0xAAAAAAAAAAAAAAABLL * ((v135[9] - v135[8]) >> 3));
  sub_4368((int)v675, "TextureAccesses");
  v137 = (uint64_t *)sub_445C((uint64_t)v675, 0xFu, 3, (uint64_t)sub_F63D4);
  v138 = sub_4618(v137, "Xcode Derived Counters");
  v139 = *(_OWORD *)v138;
  v903 = *((_DWORD *)v138 + 4);
  v902 = v139;
  sub_10A068((uint64_t)&v904, (uint64_t)(v138 + 3));
  memset(v905, 0, sizeof(v905));
  sub_8B6C((char *)v905, (__int128 *)v138[8], (__int128 *)v138[9], 0xAAAAAAAAAAAAAAABLL * ((v138[9] - v138[8]) >> 3));
  sub_4368((int)v674, "TextureQuads");
  v140 = (uint64_t *)sub_445C((uint64_t)v674, 0xFu, 3, (uint64_t)sub_F6468);
  v141 = sub_4618(v140, "Xcode Derived Counters");
  v142 = *(_OWORD *)v141;
  v907 = *((_DWORD *)v141 + 4);
  v906 = v142;
  sub_10A068((uint64_t)&v908, (uint64_t)(v141 + 3));
  memset(v909, 0, sizeof(v909));
  sub_8B6C((char *)v909, (__int128 *)v141[8], (__int128 *)v141[9], 0xAAAAAAAAAAAAAAABLL * ((v141[9] - v141[8]) >> 3));
  sub_4368((int)v673, "FPSSpeedupFactor");
  v143 = (uint64_t *)sub_445C((uint64_t)v673, 0xFu, 3, (uint64_t)sub_F64FC);
  v144 = sub_4618(v143, "Xcode Derived Counters");
  v145 = *(_OWORD *)v144;
  v911 = *((_DWORD *)v144 + 4);
  v910 = v145;
  sub_10A068((uint64_t)&v912, (uint64_t)(v144 + 3));
  memset(v913, 0, sizeof(v913));
  sub_8B6C((char *)v913, (__int128 *)v144[8], (__int128 *)v144[9], 0xAAAAAAAAAAAAAAABLL * ((v144[9] - v144[8]) >> 3));
  sub_4368((int)v672, "TextureQuadsGathered");
  v146 = (uint64_t *)sub_445C((uint64_t)v672, 0xFu, 3, (uint64_t)sub_F65B0);
  v147 = sub_4618(v146, "Xcode Derived Counters");
  v148 = *(_OWORD *)v147;
  v915 = *((_DWORD *)v147 + 4);
  v914 = v148;
  sub_10A068((uint64_t)&v916, (uint64_t)(v147 + 3));
  memset(v917, 0, sizeof(v917));
  sub_8B6C((char *)v917, (__int128 *)v147[8], (__int128 *)v147[9], 0xAAAAAAAAAAAAAAABLL * ((v147[9] - v147[8]) >> 3));
  sub_4368((int)v671, "AnisotropicSamples");
  v149 = (uint64_t *)sub_445C((uint64_t)v671, 0xFu, 3, (uint64_t)sub_F6640);
  v150 = sub_4618(v149, "Xcode Derived Counters");
  v151 = *(_OWORD *)v150;
  v919 = *((_DWORD *)v150 + 4);
  v918 = v151;
  sub_10A068((uint64_t)&v920, (uint64_t)(v150 + 3));
  memset(v921, 0, sizeof(v921));
  sub_8B6C((char *)v921, (__int128 *)v150[8], (__int128 *)v150[9], 0xAAAAAAAAAAAAAAABLL * ((v150[9] - v150[8]) >> 3));
  sub_4368((int)v670, "AnisotropicSamplesPercent");
  v152 = (uint64_t *)sub_445C((uint64_t)v670, 0xFu, 3, (uint64_t)sub_F66D0);
  v153 = sub_4618(v152, "Xcode Derived Counters");
  v154 = *(_OWORD *)v153;
  v923 = *((_DWORD *)v153 + 4);
  v922 = v154;
  sub_10A068((uint64_t)&v924, (uint64_t)(v153 + 3));
  memset(v925, 0, sizeof(v925));
  sub_8B6C((char *)v925, (__int128 *)v153[8], (__int128 *)v153[9], 0xAAAAAAAAAAAAAAABLL * ((v153[9] - v153[8]) >> 3));
  sub_4368((int)v669, "MipmapLinearSamples");
  v155 = (uint64_t *)sub_445C((uint64_t)v669, 0xFu, 3, (uint64_t)sub_F67B0);
  v156 = sub_4618(v155, "Xcode Derived Counters");
  v157 = *(_OWORD *)v156;
  v927 = *((_DWORD *)v156 + 4);
  v926 = v157;
  sub_10A068((uint64_t)&v928, (uint64_t)(v156 + 3));
  memset(v929, 0, sizeof(v929));
  sub_8B6C((char *)v929, (__int128 *)v156[8], (__int128 *)v156[9], 0xAAAAAAAAAAAAAAABLL * ((v156[9] - v156[8]) >> 3));
  sub_4368((int)v668, "MipmapLinearSamplesPercent");
  v158 = (uint64_t *)sub_445C((uint64_t)v668, 0xFu, 3, (uint64_t)sub_F6840);
  v159 = sub_4618(v158, "Xcode Derived Counters");
  v160 = *(_OWORD *)v159;
  v931 = *((_DWORD *)v159 + 4);
  v930 = v160;
  sub_10A068((uint64_t)&v932, (uint64_t)(v159 + 3));
  memset(v933, 0, sizeof(v933));
  sub_8B6C((char *)v933, (__int128 *)v159[8], (__int128 *)v159[9], 0xAAAAAAAAAAAAAAABLL * ((v159[9] - v159[8]) >> 3));
  sub_4368((int)v667, "MipmapNearestSamples");
  v161 = (uint64_t *)sub_445C((uint64_t)v667, 0xFu, 3, (uint64_t)sub_F6920);
  v162 = sub_4618(v161, "Xcode Derived Counters");
  v163 = *(_OWORD *)v162;
  v935 = *((_DWORD *)v162 + 4);
  v934 = v163;
  sub_10A068((uint64_t)&v936, (uint64_t)(v162 + 3));
  memset(v937, 0, sizeof(v937));
  sub_8B6C((char *)v937, (__int128 *)v162[8], (__int128 *)v162[9], 0xAAAAAAAAAAAAAAABLL * ((v162[9] - v162[8]) >> 3));
  sub_4368((int)v666, "MipmapNearestSamplesPercent");
  v164 = (uint64_t *)sub_445C((uint64_t)v666, 0xFu, 3, (uint64_t)sub_F69B0);
  v165 = sub_4618(v164, "Xcode Derived Counters");
  v166 = *(_OWORD *)v165;
  v939 = *((_DWORD *)v165 + 4);
  v938 = v166;
  sub_10A068((uint64_t)&v940, (uint64_t)(v165 + 3));
  memset(v941, 0, sizeof(v941));
  sub_8B6C((char *)v941, (__int128 *)v165[8], (__int128 *)v165[9], 0xAAAAAAAAAAAAAAABLL * ((v165[9] - v165[8]) >> 3));
  sub_4368((int)v665, "CompressedSamples");
  v167 = (uint64_t *)sub_445C((uint64_t)v665, 0xFu, 3, (uint64_t)sub_F6A90);
  v168 = sub_4618(v167, "Xcode Derived Counters");
  v169 = *(_OWORD *)v168;
  v943 = *((_DWORD *)v168 + 4);
  v942 = v169;
  sub_10A068((uint64_t)&v944, (uint64_t)(v168 + 3));
  memset(v945, 0, sizeof(v945));
  sub_8B6C((char *)v945, (__int128 *)v168[8], (__int128 *)v168[9], 0xAAAAAAAAAAAAAAABLL * ((v168[9] - v168[8]) >> 3));
  sub_4368((int)v664, "CompressedSamplesPercent");
  v170 = (uint64_t *)sub_445C((uint64_t)v664, 0xFu, 3, (uint64_t)sub_F7394);
  v171 = sub_4618(v170, "Xcode Derived Counters");
  v172 = *(_OWORD *)v171;
  v947 = *((_DWORD *)v171 + 4);
  v946 = v172;
  sub_10A068((uint64_t)&v948, (uint64_t)(v171 + 3));
  memset(v949, 0, sizeof(v949));
  sub_8B6C((char *)v949, (__int128 *)v171[8], (__int128 *)v171[9], 0xAAAAAAAAAAAAAAABLL * ((v171[9] - v171[8]) >> 3));
  sub_4368((int)v663, "LosslessCompressedSamples");
  v173 = (uint64_t *)sub_445C((uint64_t)v663, 0xFu, 3, (uint64_t)sub_F75A8);
  v174 = sub_4618(v173, "Xcode Derived Counters");
  v175 = *(_OWORD *)v174;
  v951 = *((_DWORD *)v174 + 4);
  v950 = v175;
  sub_10A068((uint64_t)&v952, (uint64_t)(v174 + 3));
  memset(v953, 0, sizeof(v953));
  sub_8B6C((char *)v953, (__int128 *)v174[8], (__int128 *)v174[9], 0xAAAAAAAAAAAAAAABLL * ((v174[9] - v174[8]) >> 3));
  sub_4368((int)v662, "LosslessCompressedSamplesPercent");
  v176 = (uint64_t *)sub_445C((uint64_t)v662, 0xFu, 3, (uint64_t)sub_F7638);
  v177 = sub_4618(v176, "Xcode Derived Counters");
  v178 = *(_OWORD *)v177;
  v955 = *((_DWORD *)v177 + 4);
  v954 = v178;
  sub_10A068((uint64_t)&v956, (uint64_t)(v177 + 3));
  memset(v957, 0, sizeof(v957));
  sub_8B6C((char *)v957, (__int128 *)v177[8], (__int128 *)v177[9], 0xAAAAAAAAAAAAAAABLL * ((v177[9] - v177[8]) >> 3));
  sub_4368((int)v661, "LossyCompressedSamples");
  v179 = (uint64_t *)sub_445C((uint64_t)v661, 0xFu, 3, (uint64_t)sub_F77D0);
  v180 = sub_4618(v179, "Xcode Derived Counters");
  v181 = *(_OWORD *)v180;
  v959 = *((_DWORD *)v180 + 4);
  v958 = v181;
  sub_10A068((uint64_t)&v960, (uint64_t)(v180 + 3));
  memset(v961, 0, sizeof(v961));
  sub_8B6C((char *)v961, (__int128 *)v180[8], (__int128 *)v180[9], 0xAAAAAAAAAAAAAAABLL * ((v180[9] - v180[8]) >> 3));
  sub_4368((int)v660, "LossyCompressedSamplesPercent");
  v182 = (uint64_t *)sub_445C((uint64_t)v660, 0xFu, 3, (uint64_t)sub_F7860);
  v183 = sub_4618(v182, "Xcode Derived Counters");
  v184 = *(_OWORD *)v183;
  v963 = *((_DWORD *)v183 + 4);
  v962 = v184;
  sub_10A068((uint64_t)&v964, (uint64_t)(v183 + 3));
  memset(v965, 0, sizeof(v965));
  sub_8B6C((char *)v965, (__int128 *)v183[8], (__int128 *)v183[9], 0xAAAAAAAAAAAAAAABLL * ((v183[9] - v183[8]) >> 3));
  sub_4368((int)v659, "UncompressedSamples");
  v185 = (uint64_t *)sub_445C((uint64_t)v659, 0xFu, 3, (uint64_t)sub_F79F8);
  v186 = sub_4618(v185, "Xcode Derived Counters");
  v187 = *(_OWORD *)v186;
  v967 = *((_DWORD *)v186 + 4);
  v966 = v187;
  sub_10A068((uint64_t)&v968, (uint64_t)(v186 + 3));
  memset(v969, 0, sizeof(v969));
  sub_8B6C((char *)v969, (__int128 *)v186[8], (__int128 *)v186[9], 0xAAAAAAAAAAAAAAABLL * ((v186[9] - v186[8]) >> 3));
  sub_4368((int)v658, "UnCompressedSamplesPercent");
  v188 = (uint64_t *)sub_445C((uint64_t)v658, 0xFu, 3, (uint64_t)sub_F7B98);
  v189 = sub_4618(v188, "Xcode Derived Counters");
  v190 = *(_OWORD *)v189;
  v971 = *((_DWORD *)v189 + 4);
  v970 = v190;
  sub_10A068((uint64_t)&v972, (uint64_t)(v189 + 3));
  memset(v973, 0, sizeof(v973));
  sub_8B6C((char *)v973, (__int128 *)v189[8], (__int128 *)v189[9], 0xAAAAAAAAAAAAAAABLL * ((v189[9] - v189[8]) >> 3));
  sub_4368((int)v657, "PixelsUnbiasedWrittenToMemory");
  v191 = (uint64_t *)sub_445C((uint64_t)v657, 0xFu, 3, (uint64_t)sub_F7DA8);
  v192 = sub_4618(v191, "Xcode Derived Counters");
  v193 = *(_OWORD *)v192;
  v975 = *((_DWORD *)v192 + 4);
  v974 = v193;
  sub_10A068((uint64_t)&v976, (uint64_t)(v192 + 3));
  memset(v977, 0, sizeof(v977));
  sub_8B6C((char *)v977, (__int128 *)v192[8], (__int128 *)v192[9], 0xAAAAAAAAAAAAAAABLL * ((v192[9] - v192[8]) >> 3));
  sub_4368((int)v656, "TexturePixelsWrittenToMemory");
  v194 = (uint64_t *)sub_445C((uint64_t)v656, 0xFu, 3, (uint64_t)sub_F7E38);
  v195 = sub_4618(v194, "Xcode Derived Counters");
  v196 = *(_OWORD *)v195;
  v979 = *((_DWORD *)v195 + 4);
  v978 = v196;
  sub_10A068((uint64_t)&v980, (uint64_t)(v195 + 3));
  memset(v981, 0, sizeof(v981));
  sub_8B6C((char *)v981, (__int128 *)v195[8], (__int128 *)v195[9], 0xAAAAAAAAAAAAAAABLL * ((v195[9] - v195[8]) >> 3));
  sub_4368((int)v655, "PixelsWrittenToMemory");
  v197 = (uint64_t *)sub_445C((uint64_t)v655, 0xFu, 3, (uint64_t)sub_F7F14);
  v198 = sub_4618(v197, "Xcode Derived Counters");
  v199 = *(_OWORD *)v198;
  v983 = *((_DWORD *)v198 + 4);
  v982 = v199;
  sub_10A068((uint64_t)&v984, (uint64_t)(v198 + 3));
  memset(v985, 0, sizeof(v985));
  sub_8B6C((char *)v985, (__int128 *)v198[8], (__int128 *)v198[9], 0xAAAAAAAAAAAAAAABLL * ((v198[9] - v198[8]) >> 3));
  sub_4368((int)v654, "AttachmentPixelsWrittenToMemory");
  v200 = (uint64_t *)sub_445C((uint64_t)v654, 0xFu, 3, (uint64_t)sub_F7FE4);
  v201 = sub_4618(v200, "Xcode Derived Counters");
  v202 = *(_OWORD *)v201;
  v987 = *((_DWORD *)v201 + 4);
  v986 = v202;
  sub_10A068((uint64_t)&v988, (uint64_t)(v201 + 3));
  memset(v989, 0, sizeof(v989));
  sub_8B6C((char *)v989, (__int128 *)v201[8], (__int128 *)v201[9], 0xAAAAAAAAAAAAAAABLL * ((v201[9] - v201[8]) >> 3));
  sub_4368((int)v653, "CompressedPixelsWrittenToMemory");
  v203 = (uint64_t *)sub_445C((uint64_t)v653, 0xFu, 3, (uint64_t)sub_F80F4);
  v204 = sub_4618(v203, "Xcode Derived Counters");
  v205 = *(_OWORD *)v204;
  v991 = *((_DWORD *)v204 + 4);
  v990 = v205;
  sub_10A068((uint64_t)&v992, (uint64_t)(v204 + 3));
  memset(v993, 0, sizeof(v993));
  sub_8B6C((char *)v993, (__int128 *)v204[8], (__int128 *)v204[9], 0xAAAAAAAAAAAAAAABLL * ((v204[9] - v204[8]) >> 3));
  sub_4368((int)v652, "LossyCompressedPixelsWrittenToMemory");
  v206 = (uint64_t *)sub_445C((uint64_t)v652, 0xFu, 3, (uint64_t)sub_F81D0);
  v207 = sub_4618(v206, "Xcode Derived Counters");
  v208 = *(_OWORD *)v207;
  v995 = *((_DWORD *)v207 + 4);
  v994 = v208;
  sub_10A068((uint64_t)&v996, (uint64_t)(v207 + 3));
  memset(v997, 0, sizeof(v997));
  sub_8B6C((char *)v997, (__int128 *)v207[8], (__int128 *)v207[9], 0xAAAAAAAAAAAAAAABLL * ((v207[9] - v207[8]) >> 3));
  sub_4368((int)v651, "TotalSBUsedInLossyCompression");
  v209 = (uint64_t *)sub_445C((uint64_t)v651, 0xFu, 3, (uint64_t)sub_F83CC);
  v210 = sub_4618(v209, "Xcode Derived Counters");
  v211 = *(_OWORD *)v210;
  v999 = *((_DWORD *)v210 + 4);
  v998 = v211;
  sub_10A068((uint64_t)&v1000, (uint64_t)(v210 + 3));
  memset(v1001, 0, sizeof(v1001));
  sub_8B6C((char *)v1001, (__int128 *)v210[8], (__int128 *)v210[9], 0xAAAAAAAAAAAAAAABLL * ((v210[9] - v210[8]) >> 3));
  sub_4368((int)v650, "PercentageLosslessCompressedSB");
  v212 = (uint64_t *)sub_445C((uint64_t)v650, 0xFu, 3, (uint64_t)sub_F8588);
  v213 = sub_4618(v212, "Xcode Derived Counters");
  v214 = *(_OWORD *)v213;
  v1003 = *((_DWORD *)v213 + 4);
  v1002 = v214;
  sub_10A068((uint64_t)&v1004, (uint64_t)(v213 + 3));
  memset(v1005, 0, sizeof(v1005));
  sub_8B6C((char *)v1005, (__int128 *)v213[8], (__int128 *)v213[9], 0xAAAAAAAAAAAAAAABLL * ((v213[9] - v213[8]) >> 3));
  sub_4368((int)v649, "PercentageLossyCompressedSBNoFB");
  v215 = (uint64_t *)sub_445C((uint64_t)v649, 0xFu, 3, (uint64_t)sub_F86E0);
  v216 = sub_4618(v215, "Xcode Derived Counters");
  v217 = *(_OWORD *)v216;
  v1007 = *((_DWORD *)v216 + 4);
  v1006 = v217;
  sub_10A068((uint64_t)&v1008, (uint64_t)(v216 + 3));
  memset(v1009, 0, sizeof(v1009));
  sub_8B6C((char *)v1009, (__int128 *)v216[8], (__int128 *)v216[9], 0xAAAAAAAAAAAAAAABLL * ((v216[9] - v216[8]) >> 3));
  sub_4368((int)v648, "PercentageLossyCompressedSBWithFB");
  v218 = (uint64_t *)sub_445C((uint64_t)v648, 0xFu, 3, (uint64_t)sub_F8838);
  v219 = sub_4618(v218, "Xcode Derived Counters");
  v220 = *(_OWORD *)v219;
  v1011 = *((_DWORD *)v219 + 4);
  v1010 = v220;
  sub_10A068((uint64_t)&v1012, (uint64_t)(v219 + 3));
  memset(v1013, 0, sizeof(v1013));
  sub_8B6C((char *)v1013, (__int128 *)v219[8], (__int128 *)v219[9], 0xAAAAAAAAAAAAAAABLL * ((v219[9] - v219[8]) >> 3));
  sub_4368((int)v647, "AverageFBRegionsLossyCompressedSBs");
  v221 = (uint64_t *)sub_445C((uint64_t)v647, 0xFu, 3, (uint64_t)sub_F8A6C);
  v222 = sub_4618(v221, "Xcode Derived Counters");
  v223 = *(_OWORD *)v222;
  v1015 = *((_DWORD *)v222 + 4);
  v1014 = v223;
  sub_10A068((uint64_t)&v1016, (uint64_t)(v222 + 3));
  memset(v1017, 0, sizeof(v1017));
  sub_8B6C((char *)v1017, (__int128 *)v222[8], (__int128 *)v222[9], 0xAAAAAAAAAAAAAAABLL * ((v222[9] - v222[8]) >> 3));
  sub_4368((int)v646, "TexturePixelsWrittenToMemoryPercent");
  v224 = (uint64_t *)sub_445C((uint64_t)v646, 0xFu, 3, (uint64_t)sub_F8DD0);
  v225 = sub_4618(v224, "Xcode Derived Counters");
  v226 = *(_OWORD *)v225;
  v1019 = *((_DWORD *)v225 + 4);
  v1018 = v226;
  sub_10A068((uint64_t)&v1020, (uint64_t)(v225 + 3));
  memset(v1021, 0, sizeof(v1021));
  sub_8B6C((char *)v1021, (__int128 *)v225[8], (__int128 *)v225[9], 0xAAAAAAAAAAAAAAABLL * ((v225[9] - v225[8]) >> 3));
  sub_4368((int)v645, "AttachmentPixelsWrittenToMemoryPercent");
  v227 = (uint64_t *)sub_445C((uint64_t)v645, 0xFu, 3, (uint64_t)sub_F8F28);
  v228 = sub_4618(v227, "Xcode Derived Counters");
  v229 = *(_OWORD *)v228;
  v1023 = *((_DWORD *)v228 + 4);
  v1022 = v229;
  sub_10A068((uint64_t)&v1024, (uint64_t)(v228 + 3));
  memset(v1025, 0, sizeof(v1025));
  sub_8B6C((char *)v1025, (__int128 *)v228[8], (__int128 *)v228[9], 0xAAAAAAAAAAAAAAABLL * ((v228[9] - v228[8]) >> 3));
  sub_4368((int)v644, "CompressedPixelsWrittenToMemoryPercent");
  v230 = (uint64_t *)sub_445C((uint64_t)v644, 0xFu, 3, (uint64_t)sub_F9080);
  v231 = sub_4618(v230, "Xcode Derived Counters");
  v232 = *(_OWORD *)v231;
  v1027 = *((_DWORD *)v231 + 4);
  v1026 = v232;
  sub_10A068((uint64_t)&v1028, (uint64_t)(v231 + 3));
  memset(v1029, 0, sizeof(v1029));
  sub_8B6C((char *)v1029, (__int128 *)v231[8], (__int128 *)v231[9], 0xAAAAAAAAAAAAAAABLL * ((v231[9] - v231[8]) >> 3));
  sub_4368((int)v643, "LossyCompressedPixelsWrittenToMemoryPercent");
  v233 = (uint64_t *)sub_445C((uint64_t)v643, 0xFu, 3, (uint64_t)sub_F91D8);
  v234 = sub_4618(v233, "Xcode Derived Counters");
  v235 = *(_OWORD *)v234;
  v1031 = *((_DWORD *)v234 + 4);
  v1030 = v235;
  sub_10A068((uint64_t)&v1032, (uint64_t)(v234 + 3));
  memset(v1033, 0, sizeof(v1033));
  sub_8B6C((char *)v1033, (__int128 *)v234[8], (__int128 *)v234[9], 0xAAAAAAAAAAAAAAABLL * ((v234[9] - v234[8]) >> 3));
  sub_4368((int)v642, "MSAA2XResolvedPixels");
  v236 = (uint64_t *)sub_445C((uint64_t)v642, 0xFu, 3, (uint64_t)sub_F9330);
  v237 = sub_4618(v236, "Xcode Derived Counters");
  v238 = *(_OWORD *)v237;
  v1035 = *((_DWORD *)v237 + 4);
  v1034 = v238;
  sub_10A068((uint64_t)&v1036, (uint64_t)(v237 + 3));
  memset(v1037, 0, sizeof(v1037));
  sub_8B6C((char *)v1037, (__int128 *)v237[8], (__int128 *)v237[9], 0xAAAAAAAAAAAAAAABLL * ((v237[9] - v237[8]) >> 3));
  sub_4368((int)v641, "MSAA4XResolvedPixels");
  v239 = (uint64_t *)sub_445C((uint64_t)v641, 0xFu, 3, (uint64_t)sub_F93C0);
  v240 = sub_4618(v239, "Xcode Derived Counters");
  v241 = *(_OWORD *)v240;
  v1039 = *((_DWORD *)v240 + 4);
  v1038 = v241;
  sub_10A068((uint64_t)&v1040, (uint64_t)(v240 + 3));
  memset(v1041, 0, sizeof(v1041));
  sub_8B6C((char *)v1041, (__int128 *)v240[8], (__int128 *)v240[9], 0xAAAAAAAAAAAAAAABLL * ((v240[9] - v240[8]) >> 3));
  sub_4368((int)v640, "MSAA2XResolvedPixelsPercent");
  v242 = (uint64_t *)sub_445C((uint64_t)v640, 0xFu, 3, (uint64_t)sub_F9450);
  v243 = sub_4618(v242, "Xcode Derived Counters");
  v244 = *(_OWORD *)v243;
  v1043 = *((_DWORD *)v243 + 4);
  v1042 = v244;
  sub_10A068((uint64_t)&v1044, (uint64_t)(v243 + 3));
  memset(v1045, 0, sizeof(v1045));
  sub_8B6C((char *)v1045, (__int128 *)v243[8], (__int128 *)v243[9], 0xAAAAAAAAAAAAAAABLL * ((v243[9] - v243[8]) >> 3));
  sub_4368((int)v639, "MSAA4XResolvedPixelsPercent");
  v245 = (uint64_t *)sub_445C((uint64_t)v639, 0xFu, 3, (uint64_t)sub_F95B0);
  v246 = sub_4618(v245, "Xcode Derived Counters");
  v247 = *(_OWORD *)v246;
  v1047 = *((_DWORD *)v246 + 4);
  v1046 = v247;
  sub_10A068((uint64_t)&v1048, (uint64_t)(v246 + 3));
  memset(v1049, 0, sizeof(v1049));
  sub_8B6C((char *)v1049, (__int128 *)v246[8], (__int128 *)v246[9], 0xAAAAAAAAAAAAAAABLL * ((v246[9] - v246[8]) >> 3));
  sub_4368((int)v638, "TotalResolvedPixels");
  v248 = (uint64_t *)sub_445C((uint64_t)v638, 0xFu, 3, (uint64_t)sub_F9710);
  v249 = sub_4618(v248, "Xcode Derived Counters");
  v250 = *(_OWORD *)v249;
  v1051 = *((_DWORD *)v249 + 4);
  v1050 = v250;
  sub_10A068((uint64_t)&v1052, (uint64_t)(v249 + 3));
  memset(v1053, 0, sizeof(v1053));
  sub_8B6C((char *)v1053, (__int128 *)v249[8], (__int128 *)v249[9], 0xAAAAAAAAAAAAAAABLL * ((v249[9] - v249[8]) >> 3));
  sub_4368((int)v637, "AverageUniqueColorsPerResolvedPixels");
  v251 = (uint64_t *)sub_445C((uint64_t)v637, 0xFu, 3, (uint64_t)sub_F987C);
  v252 = sub_4618(v251, "Xcode Derived Counters");
  v253 = *(_OWORD *)v252;
  v1055 = *((_DWORD *)v252 + 4);
  v1054 = v253;
  sub_10A068((uint64_t)&v1056, (uint64_t)(v252 + 3));
  memset(v1057, 0, sizeof(v1057));
  sub_8B6C((char *)v1057, (__int128 *)v252[8], (__int128 *)v252[9], 0xAAAAAAAAAAAAAAABLL * ((v252[9] - v252[8]) >> 3));
  sub_4368((int)v636, "TextureCacheMissRate");
  v254 = (uint64_t *)sub_445C((uint64_t)v636, 0xFu, 3, (uint64_t)sub_F9B70);
  v255 = sub_4618(v254, "Xcode Derived Counters");
  v256 = *(_OWORD *)v255;
  v1059 = *((_DWORD *)v255 + 4);
  v1058 = v256;
  sub_10A068((uint64_t)&v1060, (uint64_t)(v255 + 3));
  memset(v1061, 0, sizeof(v1061));
  sub_8B6C((char *)v1061, (__int128 *)v255[8], (__int128 *)v255[9], 0xAAAAAAAAAAAAAAABLL * ((v255[9] - v255[8]) >> 3));
  sub_4368((int)v635, "TextureCacheWriteMissRate");
  v257 = (uint64_t *)sub_445C((uint64_t)v635, 0xFu, 3, (uint64_t)sub_F9C50);
  v258 = sub_4618(v257, "Xcode Derived Counters");
  v259 = *(_OWORD *)v258;
  v1063 = *((_DWORD *)v258 + 4);
  v1062 = v259;
  sub_10A068((uint64_t)&v1064, (uint64_t)(v258 + 3));
  memset(v1065, 0, sizeof(v1065));
  sub_8B6C((char *)v1065, (__int128 *)v258[8], (__int128 *)v258[9], 0xAAAAAAAAAAAAAAABLL * ((v258[9] - v258[8]) >> 3));
  sub_4368((int)v634, "BytesReadFromMainMemory");
  v260 = (uint64_t *)sub_445C((uint64_t)v634, 0xFu, 3, (uint64_t)sub_F9D5C);
  v261 = sub_4618(v260, "Xcode Derived Counters");
  v262 = *(_OWORD *)v261;
  v1067 = *((_DWORD *)v261 + 4);
  v1066 = v262;
  sub_10A068((uint64_t)&v1068, (uint64_t)(v261 + 3));
  memset(v1069, 0, sizeof(v1069));
  sub_8B6C((char *)v1069, (__int128 *)v261[8], (__int128 *)v261[9], 0xAAAAAAAAAAAAAAABLL * ((v261[9] - v261[8]) >> 3));
  sub_4368((int)v633, "BytesWrittenToMainMemory");
  v263 = (uint64_t *)sub_445C((uint64_t)v633, 0xFu, 3, (uint64_t)sub_F9E44);
  v264 = sub_4618(v263, "Xcode Derived Counters");
  v265 = *(_OWORD *)v264;
  v1071 = *((_DWORD *)v264 + 4);
  v1070 = v265;
  sub_10A068((uint64_t)&v1072, (uint64_t)(v264 + 3));
  memset(v1073, 0, sizeof(v1073));
  sub_8B6C((char *)v1073, (__int128 *)v264[8], (__int128 *)v264[9], 0xAAAAAAAAAAAAAAABLL * ((v264[9] - v264[8]) >> 3));
  sub_4368((int)v632, "TotalGlobalAABytesRead");
  v266 = (uint64_t *)sub_445C((uint64_t)v632, 0xFu, 3, (uint64_t)sub_F9F2C);
  v267 = sub_4618(v266, "Xcode Derived Counters");
  v268 = *(_OWORD *)v267;
  v1075 = *((_DWORD *)v267 + 4);
  v1074 = v268;
  sub_10A068((uint64_t)&v1076, (uint64_t)(v267 + 3));
  memset(v1077, 0, sizeof(v1077));
  sub_8B6C((char *)v1077, (__int128 *)v267[8], (__int128 *)v267[9], 0xAAAAAAAAAAAAAAABLL * ((v267[9] - v267[8]) >> 3));
  sub_4368((int)v631, "TotalGlobalAABytesWritten");
  v269 = (uint64_t *)sub_445C((uint64_t)v631, 0xFu, 3, (uint64_t)sub_FA11C);
  v270 = sub_4618(v269, "Xcode Derived Counters");
  v271 = *(_OWORD *)v270;
  v1079 = *((_DWORD *)v270 + 4);
  v1078 = v271;
  sub_10A068((uint64_t)&v1080, (uint64_t)(v270 + 3));
  memset(v1081, 0, sizeof(v1081));
  sub_8B6C((char *)v1081, (__int128 *)v270[8], (__int128 *)v270[9], 0xAAAAAAAAAAAAAAABLL * ((v270[9] - v270[8]) >> 3));
  sub_4368((int)v630, "TotalL2BytesRead");
  v272 = (uint64_t *)sub_445C((uint64_t)v630, 0xFu, 3, (uint64_t)sub_FA204);
  v273 = sub_4618(v272, "Xcode Derived Counters");
  v274 = *(_OWORD *)v273;
  v1083 = *((_DWORD *)v273 + 4);
  v1082 = v274;
  sub_10A068((uint64_t)&v1084, (uint64_t)(v273 + 3));
  memset(v1085, 0, sizeof(v1085));
  sub_8B6C((char *)v1085, (__int128 *)v273[8], (__int128 *)v273[9], 0xAAAAAAAAAAAAAAABLL * ((v273[9] - v273[8]) >> 3));
  sub_4368((int)v629, "TotalL2BytesWritten");
  v275 = (uint64_t *)sub_445C((uint64_t)v629, 0xFu, 3, (uint64_t)sub_FA514);
  v276 = sub_4618(v275, "Xcode Derived Counters");
  v277 = *(_OWORD *)v276;
  v1087 = *((_DWORD *)v276 + 4);
  v1086 = v277;
  sub_10A068((uint64_t)&v1088, (uint64_t)(v276 + 3));
  memset(v1089, 0, sizeof(v1089));
  sub_8B6C((char *)v1089, (__int128 *)v276[8], (__int128 *)v276[9], 0xAAAAAAAAAAAAAAABLL * ((v276[9] - v276[8]) >> 3));
  sub_4368((int)v628, "TotalBytesReadFromTextureL1Cache");
  v278 = (uint64_t *)sub_445C((uint64_t)v628, 0xFu, 3, (uint64_t)sub_FA6D4);
  v279 = sub_4618(v278, "Xcode Derived Counters");
  v280 = *(_OWORD *)v279;
  v1091 = *((_DWORD *)v279 + 4);
  v1090 = v280;
  sub_10A068((uint64_t)&v1092, (uint64_t)(v279 + 3));
  memset(v1093, 0, sizeof(v1093));
  sub_8B6C((char *)v1093, (__int128 *)v279[8], (__int128 *)v279[9], 0xAAAAAAAAAAAAAAABLL * ((v279[9] - v279[8]) >> 3));
  sub_4368((int)v627, "PredicatedTextureWritePercentage");
  v281 = (uint64_t *)sub_445C((uint64_t)v627, 0xFu, 3, (uint64_t)sub_FA768);
  v282 = sub_4618(v281, "Xcode Derived Counters");
  v283 = *(_OWORD *)v282;
  v1095 = *((_DWORD *)v282 + 4);
  v1094 = v283;
  sub_10A068((uint64_t)&v1096, (uint64_t)(v282 + 3));
  memset(v1097, 0, sizeof(v1097));
  sub_8B6C((char *)v1097, (__int128 *)v282[8], (__int128 *)v282[9], 0xAAAAAAAAAAAAAAABLL * ((v282[9] - v282[8]) >> 3));
  sub_4368((int)v626, "PredicatedTextureReadPercentage");
  v284 = (uint64_t *)sub_445C((uint64_t)v626, 0xFu, 3, (uint64_t)sub_FA974);
  v285 = sub_4618(v284, "Xcode Derived Counters");
  v286 = *(_OWORD *)v285;
  v1099 = *((_DWORD *)v285 + 4);
  v1098 = v286;
  sub_10A068((uint64_t)&v1100, (uint64_t)(v285 + 3));
  memset(v1101, 0, sizeof(v1101));
  sub_8B6C((char *)v1101, (__int128 *)v285[8], (__int128 *)v285[9], 0xAAAAAAAAAAAAAAABLL * ((v285[9] - v285[8]) >> 3));
  sub_4368((int)v625, "SamplesShadedPerTile");
  v287 = (uint64_t *)sub_445C((uint64_t)v625, 0xFu, 3, (uint64_t)sub_FABBC);
  v288 = sub_4618(v287, "Xcode Derived Counters");
  v289 = *(_OWORD *)v288;
  v1103 = *((_DWORD *)v288 + 4);
  v1102 = v289;
  sub_10A068((uint64_t)&v1104, (uint64_t)(v288 + 3));
  memset(v1105, 0, sizeof(v1105));
  sub_8B6C((char *)v1105, (__int128 *)v288[8], (__int128 *)v288[9], 0xAAAAAAAAAAAAAAABLL * ((v288[9] - v288[8]) >> 3));
  sub_4368((int)v624, "SamplesShadedPerQuad");
  v290 = (uint64_t *)sub_445C((uint64_t)v624, 0xFu, 3, (uint64_t)sub_FAC98);
  v291 = sub_4618(v290, "Xcode Derived Counters");
  v292 = *(_OWORD *)v291;
  v1107 = *((_DWORD *)v291 + 4);
  v1106 = v292;
  sub_10A068((uint64_t)&v1108, (uint64_t)(v291 + 3));
  memset(v1109, 0, sizeof(v1109));
  sub_8B6C((char *)v1109, (__int128 *)v291[8], (__int128 *)v291[9], 0xAAAAAAAAAAAAAAABLL * ((v291[9] - v291[8]) >> 3));
  sub_4368((int)v623, "CompressionRatioTextureMemoryWritten");
  v293 = (uint64_t *)sub_445C((uint64_t)v623, 0xFu, 3, (uint64_t)sub_FAE2C);
  v294 = sub_4618(v293, "Xcode Derived Counters");
  v295 = *(_OWORD *)v294;
  v1111 = *((_DWORD *)v294 + 4);
  v1110 = v295;
  sub_10A068((uint64_t)&v1112, (uint64_t)(v294 + 3));
  memset(v1113, 0, sizeof(v1113));
  sub_8B6C((char *)v1113, (__int128 *)v294[8], (__int128 *)v294[9], 0xAAAAAAAAAAAAAAABLL * ((v294[9] - v294[8]) >> 3));
  sub_4368((int)v622, "CompressionRatioTextureMemoryRead");
  v296 = (uint64_t *)sub_445C((uint64_t)v622, 0xFu, 3, (uint64_t)sub_FB0E8);
  v297 = sub_4618(v296, "Xcode Derived Counters");
  v298 = *(_OWORD *)v297;
  v1115 = *((_DWORD *)v297 + 4);
  v1114 = v298;
  sub_10A068((uint64_t)&v1116, (uint64_t)(v297 + 3));
  memset(v1117, 0, sizeof(v1117));
  sub_8B6C((char *)v1117, (__int128 *)v297[8], (__int128 *)v297[9], 0xAAAAAAAAAAAAAAABLL * ((v297[9] - v297[8]) >> 3));
  sub_4368((int)v621, "LosslessCompressedBytesFromTC");
  v299 = (uint64_t *)sub_445C((uint64_t)v621, 0xFu, 3, (uint64_t)sub_FB248);
  v300 = sub_4618(v299, "Xcode Derived Counters");
  v301 = *(_OWORD *)v300;
  v1119 = *((_DWORD *)v300 + 4);
  v1118 = v301;
  sub_10A068((uint64_t)&v1120, (uint64_t)(v300 + 3));
  memset(v1121, 0, sizeof(v1121));
  sub_8B6C((char *)v1121, (__int128 *)v300[8], (__int128 *)v300[9], 0xAAAAAAAAAAAAAAABLL * ((v300[9] - v300[8]) >> 3));
  sub_4368((int)v620, "UncompressedBytesFromTC");
  v302 = (uint64_t *)sub_445C((uint64_t)v620, 0xFu, 3, (uint64_t)sub_FB2DC);
  v303 = sub_4618(v302, "Xcode Derived Counters");
  v304 = *(_OWORD *)v303;
  v1123 = *((_DWORD *)v303 + 4);
  v1122 = v304;
  sub_10A068((uint64_t)&v1124, (uint64_t)(v303 + 3));
  memset(v1125, 0, sizeof(v1125));
  sub_8B6C((char *)v1125, (__int128 *)v303[8], (__int128 *)v303[9], 0xAAAAAAAAAAAAAAABLL * ((v303[9] - v303[8]) >> 3));
  sub_4368((int)v619, "LossyCompressedBytesFromTC");
  v305 = (uint64_t *)sub_445C((uint64_t)v619, 0xFu, 3, (uint64_t)sub_FB370);
  v306 = sub_4618(v305, "Xcode Derived Counters");
  v307 = *(_OWORD *)v306;
  v1127 = *((_DWORD *)v306 + 4);
  v1126 = v307;
  sub_10A068((uint64_t)&v1128, (uint64_t)(v306 + 3));
  memset(v1129, 0, sizeof(v1129));
  sub_8B6C((char *)v1129, (__int128 *)v306[8], (__int128 *)v306[9], 0xAAAAAAAAAAAAAAABLL * ((v306[9] - v306[8]) >> 3));
  sub_4368((int)v618, "MainMemoryThroughput");
  v308 = (uint64_t *)sub_445C((uint64_t)v618, 0xFu, 3, (uint64_t)sub_FB498);
  v309 = sub_4618(v308, "Xcode Derived Counters");
  v310 = *(_OWORD *)v309;
  v1131 = *((_DWORD *)v309 + 4);
  v1130 = v310;
  sub_10A068((uint64_t)&v1132, (uint64_t)(v309 + 3));
  memset(v1133, 0, sizeof(v1133));
  sub_8B6C((char *)v1133, (__int128 *)v309[8], (__int128 *)v309[9], 0xAAAAAAAAAAAAAAABLL * ((v309[9] - v309[8]) >> 3));
  sub_4368((int)v617, "BytesReadForBuffersFromMainMemory");
  v311 = (uint64_t *)sub_445C((uint64_t)v617, 0xFu, 3, (uint64_t)sub_FB4B0);
  v312 = sub_4618(v311, "Xcode Derived Counters");
  v313 = *(_OWORD *)v312;
  v1135 = *((_DWORD *)v312 + 4);
  v1134 = v313;
  sub_10A068((uint64_t)&v1136, (uint64_t)(v312 + 3));
  memset(v1137, 0, sizeof(v1137));
  sub_8B6C((char *)v1137, (__int128 *)v312[8], (__int128 *)v312[9], 0xAAAAAAAAAAAAAAABLL * ((v312[9] - v312[8]) >> 3));
  sub_4368((int)v616, "BytesWrittenForBuffersFromMainMemory");
  v314 = (uint64_t *)sub_445C((uint64_t)v616, 0xFu, 3, (uint64_t)sub_FB53C);
  v315 = sub_4618(v314, "Xcode Derived Counters");
  v316 = *(_OWORD *)v315;
  v1139 = *((_DWORD *)v315 + 4);
  v1138 = v316;
  sub_10A068((uint64_t)&v1140, (uint64_t)(v315 + 3));
  memset(v1141, 0, sizeof(v1141));
  sub_8B6C((char *)v1141, (__int128 *)v315[8], (__int128 *)v315[9], 0xAAAAAAAAAAAAAAABLL * ((v315[9] - v315[8]) >> 3));
  sub_4368((int)v615, "TextureBytesWrittenToMainMemory");
  v317 = (uint64_t *)sub_445C((uint64_t)v615, 0xFu, 3, (uint64_t)sub_FB624);
  v318 = sub_4618(v317, "Xcode Derived Counters");
  v319 = *(_OWORD *)v318;
  v1143 = *((_DWORD *)v318 + 4);
  v1142 = v319;
  sub_10A068((uint64_t)&v1144, (uint64_t)(v318 + 3));
  memset(v1145, 0, sizeof(v1145));
  sub_8B6C((char *)v1145, (__int128 *)v318[8], (__int128 *)v318[9], 0xAAAAAAAAAAAAAAABLL * ((v318[9] - v318[8]) >> 3));
  sub_4368((int)v614, "TextureBytesReadFromMainMemory");
  v320 = (uint64_t *)sub_445C((uint64_t)v614, 0xFu, 3, (uint64_t)sub_FB798);
  v321 = sub_4618(v320, "Xcode Derived Counters");
  v322 = *(_OWORD *)v321;
  v1147 = *((_DWORD *)v321 + 4);
  v1146 = v322;
  sub_10A068((uint64_t)&v1148, (uint64_t)(v321 + 3));
  memset(v1149, 0, sizeof(v1149));
  sub_8B6C((char *)v1149, (__int128 *)v321[8], (__int128 *)v321[9], 0xAAAAAAAAAAAAAAABLL * ((v321[9] - v321[8]) >> 3));
  sub_4368((int)v613, "L2CacheMissRate");
  v323 = (uint64_t *)sub_445C((uint64_t)v613, 0xFu, 3, (uint64_t)sub_FB824);
  v324 = sub_4618(v323, "Xcode Derived Counters");
  v325 = *(_OWORD *)v324;
  v1151 = *((_DWORD *)v324 + 4);
  v1150 = v325;
  sub_10A068((uint64_t)&v1152, (uint64_t)(v324 + 3));
  memset(v1153, 0, sizeof(v1153));
  sub_8B6C((char *)v1153, (__int128 *)v324[8], (__int128 *)v324[9], 0xAAAAAAAAAAAAAAABLL * ((v324[9] - v324[8]) >> 3));
  sub_4368((int)v612, "PartialRenders");
  v326 = (uint64_t *)sub_445C((uint64_t)v612, 0xFu, 3, (uint64_t)sub_FB97C);
  v327 = sub_4618(v326, "Xcode Derived Counters");
  v328 = *(_OWORD *)v327;
  v1155 = *((_DWORD *)v327 + 4);
  v1154 = v328;
  sub_10A068((uint64_t)&v1156, (uint64_t)(v327 + 3));
  memset(v1157, 0, sizeof(v1157));
  sub_8B6C((char *)v1157, (__int128 *)v327[8], (__int128 *)v327[9], 0xAAAAAAAAAAAAAAABLL * ((v327[9] - v327[8]) >> 3));
  sub_4368((int)v611, "ParameterBufferTilerAlloc");
  v329 = (uint64_t *)sub_445C((uint64_t)v611, 0xFu, 3, (uint64_t)sub_FB9B8);
  v330 = sub_4618(v329, "Xcode Derived Counters");
  v331 = *(_OWORD *)v330;
  v1159 = *((_DWORD *)v330 + 4);
  v1158 = v331;
  sub_10A068((uint64_t)&v1160, (uint64_t)(v330 + 3));
  memset(v1161, 0, sizeof(v1161));
  sub_8B6C((char *)v1161, (__int128 *)v330[8], (__int128 *)v330[9], 0xAAAAAAAAAAAAAAABLL * ((v330[9] - v330[8]) >> 3));
  sub_4368((int)v610, "ParameterBufferPrimitiveBlockAlloc");
  v332 = (uint64_t *)sub_445C((uint64_t)v610, 0xFu, 3, (uint64_t)sub_FBA8C);
  v333 = sub_4618(v332, "Xcode Derived Counters");
  v334 = *(_OWORD *)v333;
  v1163 = *((_DWORD *)v333 + 4);
  v1162 = v334;
  sub_10A068((uint64_t)&v1164, (uint64_t)(v333 + 3));
  memset(v1165, 0, sizeof(v1165));
  sub_8B6C((char *)v1165, (__int128 *)v333[8], (__int128 *)v333[9], 0xAAAAAAAAAAAAAAABLL * ((v333[9] - v333[8]) >> 3));
  sub_4368((int)v609, "ParameterBufferBytesUsed");
  v335 = (uint64_t *)sub_445C((uint64_t)v609, 0xFu, 3, (uint64_t)sub_FBB60);
  v336 = sub_4618(v335, "Xcode Derived Counters");
  v337 = *(_OWORD *)v336;
  v1167 = *((_DWORD *)v336 + 4);
  v1166 = v337;
  sub_10A068((uint64_t)&v1168, (uint64_t)(v336 + 3));
  memset(v1169, 0, sizeof(v1169));
  sub_8B6C((char *)v1169, (__int128 *)v336[8], (__int128 *)v336[9], 0xAAAAAAAAAAAAAAABLL * ((v336[9] - v336[8]) >> 3));
  sub_4368((int)v608, "FRGTicks");
  v338 = (uint64_t *)sub_445C((uint64_t)v608, 0xFu, 3, (uint64_t)sub_FBBF4);
  v339 = sub_4618(v338, "Xcode Derived Counters");
  v340 = *(_OWORD *)v339;
  v1171 = *((_DWORD *)v339 + 4);
  v1170 = v340;
  sub_10A068((uint64_t)&v1172, (uint64_t)(v339 + 3));
  memset(v1173, 0, sizeof(v1173));
  sub_8B6C((char *)v1173, (__int128 *)v339[8], (__int128 *)v339[9], 0xAAAAAAAAAAAAAAABLL * ((v339[9] - v339[8]) >> 3));
  sub_4368((int)v607, "TextureCacheLimiter");
  v341 = (uint64_t *)sub_445C((uint64_t)v607, 0xFu, 3, (uint64_t)sub_FBC30);
  v342 = sub_4618(v341, "Xcode Derived Counters");
  v343 = *(_OWORD *)v342;
  v1175 = *((_DWORD *)v342 + 4);
  v1174 = v343;
  sub_10A068((uint64_t)&v1176, (uint64_t)(v342 + 3));
  memset(v1177, 0, sizeof(v1177));
  sub_8B6C((char *)v1177, (__int128 *)v342[8], (__int128 *)v342[9], 0xAAAAAAAAAAAAAAABLL * ((v342[9] - v342[8]) >> 3));
  sub_4368((int)v606, "TextureCacheMissLimiter");
  v344 = (uint64_t *)sub_445C((uint64_t)v606, 0xFu, 3, (uint64_t)sub_FBD50);
  v345 = sub_4618(v344, "Xcode Derived Counters");
  v346 = *(_OWORD *)v345;
  v1179 = *((_DWORD *)v345 + 4);
  v1178 = v346;
  sub_10A068((uint64_t)&v1180, (uint64_t)(v345 + 3));
  memset(v1181, 0, sizeof(v1181));
  sub_8B6C((char *)v1181, (__int128 *)v345[8], (__int128 *)v345[9], 0xAAAAAAAAAAAAAAABLL * ((v345[9] - v345[8]) >> 3));
  sub_4368((int)v605, "SparseTextureTranslationLimiter");
  v347 = (uint64_t *)sub_445C((uint64_t)v605, 0xFu, 3, (uint64_t)sub_FBE9C);
  v348 = sub_4618(v347, "Xcode Derived Counters");
  v349 = *(_OWORD *)v348;
  v1183 = *((_DWORD *)v348 + 4);
  v1182 = v349;
  sub_10A068((uint64_t)&v1184, (uint64_t)(v348 + 3));
  memset(v1185, 0, sizeof(v1185));
  sub_8B6C((char *)v1185, (__int128 *)v348[8], (__int128 *)v348[9], 0xAAAAAAAAAAAAAAABLL * ((v348[9] - v348[8]) >> 3));
  sub_4368((int)v604, "SparseTextureRequests");
  v350 = (uint64_t *)sub_445C((uint64_t)v604, 0xFu, 3, (uint64_t)sub_FC0A8);
  v351 = sub_4618(v350, "Xcode Derived Counters");
  v352 = *(_OWORD *)v351;
  v1187 = *((_DWORD *)v351 + 4);
  v1186 = v352;
  sub_10A068((uint64_t)&v1188, (uint64_t)(v351 + 3));
  memset(v1189, 0, sizeof(v1189));
  sub_8B6C((char *)v1189, (__int128 *)v351[8], (__int128 *)v351[9], 0xAAAAAAAAAAAAAAABLL * ((v351[9] - v351[8]) >> 3));
  sub_4368((int)v603, "AverageSparseTextureRequestSize");
  v353 = (uint64_t *)sub_445C((uint64_t)v603, 0xFu, 3, (uint64_t)sub_FC18C);
  v354 = sub_4618(v353, "Xcode Derived Counters");
  v355 = *(_OWORD *)v354;
  v1191 = *((_DWORD *)v354 + 4);
  v1190 = v355;
  sub_10A068((uint64_t)&v1192, (uint64_t)(v354 + 3));
  memset(v1193, 0, sizeof(v1193));
  sub_8B6C((char *)v1193, (__int128 *)v354[8], (__int128 *)v354[9], 0xAAAAAAAAAAAAAAABLL * ((v354[9] - v354[8]) >> 3));
  sub_4368((int)v602, "FragmentGeneratorPrimitiveUtilization");
  v356 = (uint64_t *)sub_445C((uint64_t)v602, 0xFu, 3, (uint64_t)sub_FC3F8);
  v357 = sub_4618(v356, "Xcode Derived Counters");
  v358 = *(_OWORD *)v357;
  v1195 = *((_DWORD *)v357 + 4);
  v1194 = v358;
  sub_10A068((uint64_t)&v1196, (uint64_t)(v357 + 3));
  memset(v1197, 0, sizeof(v1197));
  sub_8B6C((char *)v1197, (__int128 *)v357[8], (__int128 *)v357[9], 0xAAAAAAAAAAAAAAABLL * ((v357[9] - v357[8]) >> 3));
  sub_4368((int)v601, "FragmentRasterizerUtilization");
  v359 = (uint64_t *)sub_445C((uint64_t)v601, 0xFu, 3, (uint64_t)sub_FC518);
  v360 = sub_4618(v359, "Xcode Derived Counters");
  v361 = *(_OWORD *)v360;
  v1199 = *((_DWORD *)v360 + 4);
  v1198 = v361;
  sub_10A068((uint64_t)&v1200, (uint64_t)(v360 + 3));
  memset(v1201, 0, sizeof(v1201));
  sub_8B6C((char *)v1201, (__int128 *)v360[8], (__int128 *)v360[9], 0xAAAAAAAAAAAAAAABLL * ((v360[9] - v360[8]) >> 3));
  sub_4368((int)v600, "FragmentQuadProcessingUtilization");
  v362 = (uint64_t *)sub_445C((uint64_t)v600, 0xFu, 3, (uint64_t)sub_FC638);
  v363 = sub_4618(v362, "Xcode Derived Counters");
  v364 = *(_OWORD *)v363;
  v1203 = *((_DWORD *)v363 + 4);
  v1202 = v364;
  sub_10A068((uint64_t)&v1204, (uint64_t)(v363 + 3));
  memset(v1205, 0, sizeof(v1205));
  sub_8B6C((char *)v1205, (__int128 *)v363[8], (__int128 *)v363[9], 0xAAAAAAAAAAAAAAABLL * ((v363[9] - v363[8]) >> 3));
  sub_4368((int)v599, "PreCullPrimitiveBlockUtilization");
  v365 = (uint64_t *)sub_445C((uint64_t)v599, 0xFu, 3, (uint64_t)sub_FC77C);
  v366 = sub_4618(v365, "Xcode Derived Counters");
  v367 = *(_OWORD *)v366;
  v1207 = *((_DWORD *)v366 + 4);
  v1206 = v367;
  sub_10A068((uint64_t)&v1208, (uint64_t)(v366 + 3));
  memset(v1209, 0, sizeof(v1209));
  sub_8B6C((char *)v1209, (__int128 *)v366[8], (__int128 *)v366[9], 0xAAAAAAAAAAAAAAABLL * ((v366[9] - v366[8]) >> 3));
  sub_4368((int)v598, "PostClipCullPrimitiveBlockUtilization");
  v368 = (uint64_t *)sub_445C((uint64_t)v598, 0xFu, 3, (uint64_t)sub_FC89C);
  v369 = sub_4618(v368, "Xcode Derived Counters");
  v370 = *(_OWORD *)v369;
  v1211 = *((_DWORD *)v369 + 4);
  v1210 = v370;
  sub_10A068((uint64_t)&v1212, (uint64_t)(v369 + 3));
  memset(v1213, 0, sizeof(v1213));
  sub_8B6C((char *)v1213, (__int128 *)v369[8], (__int128 *)v369[9], 0xAAAAAAAAAAAAAAABLL * ((v369[9] - v369[8]) >> 3));
  sub_4368((int)v597, "PrimitiveTileIntersectionUtilization");
  v371 = (uint64_t *)sub_445C((uint64_t)v597, 0xFu, 3, (uint64_t)sub_FC998);
  v372 = sub_4618(v371, "Xcode Derived Counters");
  v373 = *(_OWORD *)v372;
  v1215 = *((_DWORD *)v372 + 4);
  v1214 = v373;
  sub_10A068((uint64_t)&v1216, (uint64_t)(v372 + 3));
  memset(v1217, 0, sizeof(v1217));
  sub_8B6C((char *)v1217, (__int128 *)v372[8], (__int128 *)v372[9], 0xAAAAAAAAAAAAAAABLL * ((v372[9] - v372[8]) >> 3));
  sub_4368((int)v596, "TilerUtilization");
  v374 = (uint64_t *)sub_445C((uint64_t)v596, 0xFu, 3, (uint64_t)sub_FCA94);
  v375 = sub_4618(v374, "Xcode Derived Counters");
  v376 = *(_OWORD *)v375;
  v1219 = *((_DWORD *)v375 + 4);
  v1218 = v376;
  sub_10A068((uint64_t)&v1220, (uint64_t)(v375 + 3));
  memset(v1221, 0, sizeof(v1221));
  sub_8B6C((char *)v1221, (__int128 *)v375[8], (__int128 *)v375[9], 0xAAAAAAAAAAAAAAABLL * ((v375[9] - v375[8]) >> 3));
  sub_4368((int)v595, "MMULimiter");
  v377 = (uint64_t *)sub_445C((uint64_t)v595, 0xFu, 3, (uint64_t)sub_FCB90);
  v378 = sub_4618(v377, "Xcode Derived Counters");
  v379 = *(_OWORD *)v378;
  v1223 = *((_DWORD *)v378 + 4);
  v1222 = v379;
  sub_10A068((uint64_t)&v1224, (uint64_t)(v378 + 3));
  memset(v1225, 0, sizeof(v1225));
  sub_8B6C((char *)v1225, (__int128 *)v378[8], (__int128 *)v378[9], 0xAAAAAAAAAAAAAAABLL * ((v378[9] - v378[8]) >> 3));
  sub_4368((int)v594, "MainMemoryTraffic");
  v380 = (uint64_t *)sub_445C((uint64_t)v594, 0xFu, 3, (uint64_t)sub_FCCDC);
  v381 = sub_4618(v380, "Xcode Derived Counters");
  v382 = *(_OWORD *)v381;
  v1227 = *((_DWORD *)v381 + 4);
  v1226 = v382;
  sub_10A068((uint64_t)&v1228, (uint64_t)(v381 + 3));
  memset(v1229, 0, sizeof(v1229));
  sub_8B6C((char *)v1229, (__int128 *)v381[8], (__int128 *)v381[9], 0xAAAAAAAAAAAAAAABLL * ((v381[9] - v381[8]) >> 3));
  sub_4368((int)v593, "VSInvocationUtilization");
  v383 = (uint64_t *)sub_445C((uint64_t)v593, 0xFu, 3, (uint64_t)sub_FCD68);
  v384 = sub_4618(v383, "Xcode Derived Counters");
  v385 = *(_OWORD *)v384;
  v1231 = *((_DWORD *)v384 + 4);
  v1230 = v385;
  sub_10A068((uint64_t)&v1232, (uint64_t)(v384 + 3));
  memset(v1233, 0, sizeof(v1233));
  sub_8B6C((char *)v1233, (__int128 *)v384[8], (__int128 *)v384[9], 0xAAAAAAAAAAAAAAABLL * ((v384[9] - v384[8]) >> 3));
  sub_4368((int)v592, "FragmentZStoreUtilization");
  v386 = (uint64_t *)sub_445C((uint64_t)v592, 0xFu, 3, (uint64_t)sub_FCE88);
  v387 = sub_4618(v386, "Xcode Derived Counters");
  v388 = *(_OWORD *)v387;
  v1235 = *((_DWORD *)v387 + 4);
  v1234 = v388;
  sub_10A068((uint64_t)&v1236, (uint64_t)(v387 + 3));
  memset(v1237, 0, sizeof(v1237));
  sub_8B6C((char *)v1237, (__int128 *)v387[8], (__int128 *)v387[9], 0xAAAAAAAAAAAAAAABLL * ((v387[9] - v387[8]) >> 3));
  sub_4368((int)v591, "FragmentZStoreBytes");
  v389 = (uint64_t *)sub_445C((uint64_t)v591, 0xFu, 3, (uint64_t)sub_FCF84);
  v390 = sub_4618(v389, "Xcode Derived Counters");
  v391 = *(_OWORD *)v390;
  v1239 = *((_DWORD *)v390 + 4);
  v1238 = v391;
  sub_10A068((uint64_t)&v1240, (uint64_t)(v390 + 3));
  memset(v1241, 0, sizeof(v1241));
  sub_8B6C((char *)v1241, (__int128 *)v390[8], (__int128 *)v390[9], 0xAAAAAAAAAAAAAAABLL * ((v390[9] - v390[8]) >> 3));
  sub_4368((int)v590, "ZBytesWrittenToMainMemory");
  v392 = (uint64_t *)sub_445C((uint64_t)v590, 0xFu, 3, (uint64_t)sub_FD018);
  v393 = sub_4618(v392, "Xcode Derived Counters");
  v394 = *(_OWORD *)v393;
  v1243 = *((_DWORD *)v393 + 4);
  v1242 = v394;
  sub_10A068((uint64_t)&v1244, (uint64_t)(v393 + 3));
  memset(v1245, 0, sizeof(v1245));
  sub_8B6C((char *)v1245, (__int128 *)v393[8], (__int128 *)v393[9], 0xAAAAAAAAAAAAAAABLL * ((v393[9] - v393[8]) >> 3));
  sub_4368((int)v589, "CompressionRatioZTextureMemoryWritten");
  v395 = (uint64_t *)sub_445C((uint64_t)v589, 0xFu, 3, (uint64_t)sub_FD140);
  v396 = sub_4618(v395, "Xcode Derived Counters");
  v397 = *(_OWORD *)v396;
  v1247 = *((_DWORD *)v396 + 4);
  v1246 = v397;
  sub_10A068((uint64_t)&v1248, (uint64_t)(v396 + 3));
  memset(v1249, 0, sizeof(v1249));
  sub_8B6C((char *)v1249, (__int128 *)v396[8], (__int128 *)v396[9], 0xAAAAAAAAAAAAAAABLL * ((v396[9] - v396[8]) >> 3));
  sub_4368((int)v588, "FragmentGeneratorPrimitiveProcessed");
  v398 = (uint64_t *)sub_445C((uint64_t)v588, 0xFu, 3, (uint64_t)sub_FD258);
  v399 = sub_4618(v398, "Xcode Derived Counters");
  v400 = *(_OWORD *)v399;
  v1251 = *((_DWORD *)v399 + 4);
  v1250 = v400;
  sub_10A068((uint64_t)&v1252, (uint64_t)(v399 + 3));
  memset(v1253, 0, sizeof(v1253));
  sub_8B6C((char *)v1253, (__int128 *)v399[8], (__int128 *)v399[9], 0xAAAAAAAAAAAAAAABLL * ((v399[9] - v399[8]) >> 3));
  sub_4368((int)v587, "FragmentQuadsProcessed");
  v401 = (uint64_t *)sub_445C((uint64_t)v587, 0xFu, 3, (uint64_t)sub_FD294);
  v402 = sub_4618(v401, "Xcode Derived Counters");
  v403 = *(_OWORD *)v402;
  v1255 = *((_DWORD *)v402 + 4);
  v1254 = v403;
  sub_10A068((uint64_t)&v1256, (uint64_t)(v402 + 3));
  memset(v1257, 0, sizeof(v1257));
  sub_8B6C((char *)v1257, (__int128 *)v402[8], (__int128 *)v402[9], 0xAAAAAAAAAAAAAAABLL * ((v402[9] - v402[8]) >> 3));
  sub_4368((int)v586, "FragmentStoreBytes");
  v404 = (uint64_t *)sub_445C((uint64_t)v586, 0xFu, 3, (uint64_t)sub_FD31C);
  v405 = sub_4618(v404, "Xcode Derived Counters");
  v406 = *(_OWORD *)v405;
  v1259 = *((_DWORD *)v405 + 4);
  v1258 = v406;
  sub_10A068((uint64_t)&v1260, (uint64_t)(v405 + 3));
  memset(v1261, 0, sizeof(v1261));
  sub_8B6C((char *)v1261, (__int128 *)v405[8], (__int128 *)v405[9], 0xAAAAAAAAAAAAAAABLL * ((v405[9] - v405[8]) >> 3));
  sub_4368((int)v585, "PreCullPrimitiveCount");
  v407 = (uint64_t *)sub_445C((uint64_t)v585, 0xFu, 3, (uint64_t)sub_FD558);
  v408 = sub_4618(v407, "Xcode Derived Counters");
  v409 = *(_OWORD *)v408;
  v1263 = *((_DWORD *)v408 + 4);
  v1262 = v409;
  sub_10A068((uint64_t)&v1264, (uint64_t)(v408 + 3));
  memset(v1265, 0, sizeof(v1265));
  sub_8B6C((char *)v1265, (__int128 *)v408[8], (__int128 *)v408[9], 0xAAAAAAAAAAAAAAABLL * ((v408[9] - v408[8]) >> 3));
  sub_4368((int)v584, "PrimitiveTileIntersections");
  v410 = (uint64_t *)sub_445C((uint64_t)v584, 0xFu, 3, (uint64_t)sub_FD594);
  v411 = sub_4618(v410, "Xcode Derived Counters");
  v412 = *(_OWORD *)v411;
  v1267 = *((_DWORD *)v411 + 4);
  v1266 = v412;
  sub_10A068((uint64_t)&v1268, (uint64_t)(v411 + 3));
  memset(v1269, 0, sizeof(v1269));
  sub_8B6C((char *)v1269, (__int128 *)v411[8], (__int128 *)v411[9], 0xAAAAAAAAAAAAAAABLL * ((v411[9] - v411[8]) >> 3));
  sub_4368((int)v583, "TilerTilesProcessed");
  v413 = (uint64_t *)sub_445C((uint64_t)v583, 0xFu, 3, (uint64_t)sub_FD5D0);
  v414 = sub_4618(v413, "Xcode Derived Counters");
  v415 = *(_OWORD *)v414;
  v1271 = *((_DWORD *)v414 + 4);
  v1270 = v415;
  sub_10A068((uint64_t)&v1272, (uint64_t)(v414 + 3));
  memset(v1273, 0, sizeof(v1273));
  sub_8B6C((char *)v1273, (__int128 *)v414[8], (__int128 *)v414[9], 0xAAAAAAAAAAAAAAABLL * ((v414[9] - v414[8]) >> 3));
  sub_4368((int)v582, "FragmentGeneratorTilesProcessed");
  v416 = (uint64_t *)sub_445C((uint64_t)v582, 0xFu, 3, (uint64_t)sub_FD60C);
  v417 = sub_4618(v416, "Xcode Derived Counters");
  v418 = *(_OWORD *)v417;
  v1275 = *((_DWORD *)v417 + 4);
  v1274 = v418;
  sub_10A068((uint64_t)&v1276, (uint64_t)(v417 + 3));
  memset(v1277, 0, sizeof(v1277));
  sub_8B6C((char *)v1277, (__int128 *)v417[8], (__int128 *)v417[9], 0xAAAAAAAAAAAAAAABLL * ((v417[9] - v417[8]) >> 3));
  sub_4368((int)v581, "TextureCacheMissCount");
  v419 = (uint64_t *)sub_445C((uint64_t)v581, 0xFu, 3, (uint64_t)sub_FD648);
  v420 = sub_4618(v419, "Xcode Derived Counters");
  v421 = *(_OWORD *)v420;
  v1279 = *((_DWORD *)v420 + 4);
  v1278 = v421;
  sub_10A068((uint64_t)&v1280, (uint64_t)(v420 + 3));
  memset(v1281, 0, sizeof(v1281));
  sub_8B6C((char *)v1281, (__int128 *)v420[8], (__int128 *)v420[9], 0xAAAAAAAAAAAAAAABLL * ((v420[9] - v420[8]) >> 3));
  sub_4368((int)v580, "ZTextureBytesReadFromMainMemory");
  v422 = (uint64_t *)sub_445C((uint64_t)v580, 0xFu, 3, (uint64_t)sub_FD684);
  v423 = sub_4618(v422, "Xcode Derived Counters");
  v424 = *(_OWORD *)v423;
  v1283 = *((_DWORD *)v423 + 4);
  v1282 = v424;
  sub_10A068((uint64_t)&v1284, (uint64_t)(v423 + 3));
  memset(v1285, 0, sizeof(v1285));
  sub_8B6C((char *)v1285, (__int128 *)v423[8], (__int128 *)v423[9], 0xAAAAAAAAAAAAAAABLL * ((v423[9] - v423[8]) >> 3));
  sub_4368((int)v579, "FragmentZLoadBytes");
  v425 = (uint64_t *)sub_445C((uint64_t)v579, 0xFu, 3, (uint64_t)sub_FD710);
  v426 = sub_4618(v425, "Xcode Derived Counters");
  v427 = *(_OWORD *)v426;
  v1287 = *((_DWORD *)v426 + 4);
  v1286 = v427;
  sub_10A068((uint64_t)&v1288, (uint64_t)(v426 + 3));
  memset(v1289, 0, sizeof(v1289));
  sub_8B6C((char *)v1289, (__int128 *)v426[8], (__int128 *)v426[9], 0xAAAAAAAAAAAAAAABLL * ((v426[9] - v426[8]) >> 3));
  sub_4368((int)v578, "AveragePrimitiveProcessedPerTile");
  v428 = (uint64_t *)sub_445C((uint64_t)v578, 0xFu, 3, (uint64_t)sub_FD7A4);
  v429 = sub_4618(v428, "Xcode Derived Counters");
  v430 = *(_OWORD *)v429;
  v1291 = *((_DWORD *)v429 + 4);
  v1290 = v430;
  sub_10A068((uint64_t)&v1292, (uint64_t)(v429 + 3));
  memset(v1293, 0, sizeof(v1293));
  sub_8B6C((char *)v1293, (__int128 *)v429[8], (__int128 *)v429[9], 0xAAAAAAAAAAAAAAABLL * ((v429[9] - v429[8]) >> 3));
  sub_4368((int)v577, "OpaqueFragmentQuadsProcessed");
  v431 = (uint64_t *)sub_445C((uint64_t)v577, 0xFu, 3, (uint64_t)sub_FD838);
  v432 = sub_4618(v431, "Xcode Derived Counters");
  v433 = *(_OWORD *)v432;
  v1295 = *((_DWORD *)v432 + 4);
  v1294 = v433;
  sub_10A068((uint64_t)&v1296, (uint64_t)(v432 + 3));
  memset(v1297, 0, sizeof(v1297));
  sub_8B6C((char *)v1297, (__int128 *)v432[8], (__int128 *)v432[9], 0xAAAAAAAAAAAAAAABLL * ((v432[9] - v432[8]) >> 3));
  sub_4368((int)v576, "TranslucentFragmentQuadsProcessed");
  v434 = (uint64_t *)sub_445C((uint64_t)v576, 0xFu, 3, (uint64_t)sub_FD9B4);
  v435 = sub_4618(v434, "Xcode Derived Counters");
  v436 = *(_OWORD *)v435;
  v1299 = *((_DWORD *)v435 + 4);
  v1298 = v436;
  sub_10A068((uint64_t)&v1300, (uint64_t)(v435 + 3));
  memset(v1301, 0, sizeof(v1301));
  sub_8B6C((char *)v1301, (__int128 *)v435[8], (__int128 *)v435[9], 0xAAAAAAAAAAAAAAABLL * ((v435[9] - v435[8]) >> 3));
  sub_4368((int)v575, "FeedBackFragmentQuadsProcessed");
  v437 = (uint64_t *)sub_445C((uint64_t)v575, 0xFu, 3, (uint64_t)sub_FDB30);
  v438 = sub_4618(v437, "Xcode Derived Counters");
  v439 = *(_OWORD *)v438;
  v1303 = *((_DWORD *)v438 + 4);
  v1302 = v439;
  sub_10A068((uint64_t)&v1304, (uint64_t)(v438 + 3));
  memset(v1305, 0, sizeof(v1305));
  sub_8B6C((char *)v1305, (__int128 *)v438[8], (__int128 *)v438[9], 0xAAAAAAAAAAAAAAABLL * ((v438[9] - v438[8]) >> 3));
  sub_4368((int)v574, "TextureFilteringLimiter");
  v440 = (uint64_t *)sub_445C((uint64_t)v574, 0xFu, 3, (uint64_t)sub_FDCF8);
  v441 = sub_4618(v440, "Xcode Derived Counters");
  v442 = *(_OWORD *)v441;
  v1307 = *((_DWORD *)v441 + 4);
  v1306 = v442;
  sub_10A068((uint64_t)&v1308, (uint64_t)(v441 + 3));
  memset(v1309, 0, sizeof(v1309));
  sub_8B6C((char *)v1309, (__int128 *)v441[8], (__int128 *)v441[9], 0xAAAAAAAAAAAAAAABLL * ((v441[9] - v441[8]) >> 3));
  sub_4368((int)v573, "TextureFilteringUtilization");
  v443 = (uint64_t *)sub_445C((uint64_t)v573, 0xFu, 3, (uint64_t)sub_FDE18);
  v444 = sub_4618(v443, "Xcode Derived Counters");
  v445 = *(_OWORD *)v444;
  v1311 = *((_DWORD *)v444 + 4);
  v1310 = v445;
  sub_10A068((uint64_t)&v1312, (uint64_t)(v444 + 3));
  memset(v1313, 0, sizeof(v1313));
  sub_8B6C((char *)v1313, (__int128 *)v444[8], (__int128 *)v444[9], 0xAAAAAAAAAAAAAAABLL * ((v444[9] - v444[8]) >> 3));
  sub_4368((int)v572, "TextureCacheUtilization");
  v446 = (uint64_t *)sub_445C((uint64_t)v572, 0xFu, 3, (uint64_t)sub_FDF38);
  v447 = sub_4618(v446, "Xcode Derived Counters");
  v448 = *(_OWORD *)v447;
  v1315 = *((_DWORD *)v447 + 4);
  v1314 = v448;
  sub_10A068((uint64_t)&v1316, (uint64_t)(v447 + 3));
  memset(v1317, 0, sizeof(v1317));
  sub_8B6C((char *)v1317, (__int128 *)v447[8], (__int128 *)v447[9], 0xAAAAAAAAAAAAAAABLL * ((v447[9] - v447[8]) >> 3));
  sub_4368((int)v571, "TLBMissRate");
  v449 = (uint64_t *)sub_445C((uint64_t)v571, 0xFu, 3, (uint64_t)sub_FE058);
  v450 = sub_4618(v449, "Xcode Derived Counters");
  v451 = *(_OWORD *)v450;
  v1319 = *((_DWORD *)v450 + 4);
  v1318 = v451;
  sub_10A068((uint64_t)&v1320, (uint64_t)(v450 + 3));
  memset(v1321, 0, sizeof(v1321));
  sub_8B6C((char *)v1321, (__int128 *)v450[8], (__int128 *)v450[9], 0xAAAAAAAAAAAAAAABLL * ((v450[9] - v450[8]) >> 3));
  sub_4368((int)v570, "TilingBlockLimiter");
  v452 = (uint64_t *)sub_445C((uint64_t)v570, 0xFu, 3, (uint64_t)sub_FE1B0);
  v453 = sub_4618(v452, "Xcode Derived Counters");
  v454 = *(_OWORD *)v453;
  v1323 = *((_DWORD *)v453 + 4);
  v1322 = v454;
  sub_10A068((uint64_t)&v1324, (uint64_t)(v453 + 3));
  memset(v1325, 0, sizeof(v1325));
  sub_8B6C((char *)v1325, (__int128 *)v453[8], (__int128 *)v453[9], 0xAAAAAAAAAAAAAAABLL * ((v453[9] - v453[8]) >> 3));
  sub_4368((int)v569, "PrimitiveBlocksWriteLimiter");
  v455 = (uint64_t *)sub_445C((uint64_t)v569, 0xFu, 3, (uint64_t)sub_FE328);
  v456 = sub_4618(v455, "Xcode Derived Counters");
  v457 = *(_OWORD *)v456;
  v1327 = *((_DWORD *)v456 + 4);
  v1326 = v457;
  sub_10A068((uint64_t)&v1328, (uint64_t)(v456 + 3));
  memset(v1329, 0, sizeof(v1329));
  sub_8B6C((char *)v1329, (__int128 *)v456[8], (__int128 *)v456[9], 0xAAAAAAAAAAAAAAABLL * ((v456[9] - v456[8]) >> 3));
  sub_4368((int)v568, "ShadedVertexReadLimiter");
  v458 = (uint64_t *)sub_445C((uint64_t)v568, 0xFu, 3, (uint64_t)sub_FE4A0);
  v459 = sub_4618(v458, "Xcode Derived Counters");
  v460 = *(_OWORD *)v459;
  v1331 = *((_DWORD *)v459 + 4);
  v1330 = v460;
  sub_10A068((uint64_t)&v1332, (uint64_t)(v459 + 3));
  memset(v1333, 0, sizeof(v1333));
  sub_8B6C((char *)v1333, (__int128 *)v459[8], (__int128 *)v459[9], 0xAAAAAAAAAAAAAAABLL * ((v459[9] - v459[8]) >> 3));
  sub_4368((int)v567, "PrimitiveCullLimiter");
  v461 = (uint64_t *)sub_445C((uint64_t)v567, 0xFu, 3, (uint64_t)sub_FE578);
  v462 = sub_4618(v461, "Xcode Derived Counters");
  v463 = *(_OWORD *)v462;
  v1335 = *((_DWORD *)v462 + 4);
  v1334 = v463;
  sub_10A068((uint64_t)&v1336, (uint64_t)(v462 + 3));
  memset(v1337, 0, sizeof(v1337));
  sub_8B6C((char *)v1337, (__int128 *)v462[8], (__int128 *)v462[9], 0xAAAAAAAAAAAAAAABLL * ((v462[9] - v462[8]) >> 3));
  sub_4368((int)v566, "PrimitiveClipLimiter");
  v464 = (uint64_t *)sub_445C((uint64_t)v566, 0xFu, 3, (uint64_t)sub_FE6A8);
  v465 = sub_4618(v464, "Xcode Derived Counters");
  v466 = *(_OWORD *)v465;
  v1339 = *((_DWORD *)v465 + 4);
  v1338 = v466;
  sub_10A068((uint64_t)&v1340, (uint64_t)(v465 + 3));
  memset(v1341, 0, sizeof(v1341));
  sub_8B6C((char *)v1341, (__int128 *)v465[8], (__int128 *)v465[9], 0xAAAAAAAAAAAAAAABLL * ((v465[9] - v465[8]) >> 3));
  sub_4368((int)v565, "MMUTLBRequests");
  v467 = (uint64_t *)sub_445C((uint64_t)v565, 0xFu, 3, (uint64_t)sub_FE7D8);
  v468 = sub_4618(v467, "Xcode Derived Counters");
  v469 = *(_OWORD *)v468;
  v1343 = *((_DWORD *)v468 + 4);
  v1342 = v469;
  sub_10A068((uint64_t)&v1344, (uint64_t)(v468 + 3));
  memset(v1345, 0, sizeof(v1345));
  sub_8B6C((char *)v1345, (__int128 *)v468[8], (__int128 *)v468[9], 0xAAAAAAAAAAAAAAABLL * ((v468[9] - v468[8]) >> 3));
  sub_4368((int)v564, "MMUTLBHits");
  v470 = (uint64_t *)sub_445C((uint64_t)v564, 0xFu, 3, (uint64_t)sub_FE814);
  v471 = sub_4618(v470, "Xcode Derived Counters");
  v472 = *(_OWORD *)v471;
  v1347 = *((_DWORD *)v471 + 4);
  v1346 = v472;
  sub_10A068((uint64_t)&v1348, (uint64_t)(v471 + 3));
  memset(v1349, 0, sizeof(v1349));
  sub_8B6C((char *)v1349, (__int128 *)v471[8], (__int128 *)v471[9], 0xAAAAAAAAAAAAAAABLL * ((v471[9] - v471[8]) >> 3));
  sub_4368((int)v563, "MMUTLBMissRate");
  v473 = (uint64_t *)sub_445C((uint64_t)v563, 0xFu, 3, (uint64_t)sub_FE850);
  v474 = sub_4618(v473, "Xcode Derived Counters");
  v475 = *(_OWORD *)v474;
  v1351 = *((_DWORD *)v474 + 4);
  v1350 = v475;
  sub_10A068((uint64_t)&v1352, (uint64_t)(v474 + 3));
  memset(v1353, 0, sizeof(v1353));
  sub_8B6C((char *)v1353, (__int128 *)v474[8], (__int128 *)v474[9], 0xAAAAAAAAAAAAAAABLL * ((v474[9] - v474[8]) >> 3));
  sub_4368((int)v562, "MissBufferFullStallRatio");
  v476 = (uint64_t *)sub_445C((uint64_t)v562, 0xFu, 3, (uint64_t)sub_FEA78);
  v477 = sub_4618(v476, "Xcode Derived Counters");
  v478 = *(_OWORD *)v477;
  v1355 = *((_DWORD *)v477 + 4);
  v1354 = v478;
  sub_10A068((uint64_t)&v1356, (uint64_t)(v477 + 3));
  memset(v1357, 0, sizeof(v1357));
  sub_8B6C((char *)v1357, (__int128 *)v477[8], (__int128 *)v477[9], 0xAAAAAAAAAAAAAAABLL * ((v477[9] - v477[8]) >> 3));
  sub_4368((int)v561, "RasterizedFragmentsPerTriangle");
  v479 = (uint64_t *)sub_445C((uint64_t)v561, 0xFu, 3, (uint64_t)sub_FEB90);
  v480 = sub_4618(v479, "Xcode Derived Counters");
  v481 = *(_OWORD *)v480;
  v1359 = *((_DWORD *)v480 + 4);
  v1358 = v481;
  sub_10A068((uint64_t)&v1360, (uint64_t)(v480 + 3));
  memset(v1361, 0, sizeof(v1361));
  sub_8B6C((char *)v1361, (__int128 *)v480[8], (__int128 *)v480[9], 0xAAAAAAAAAAAAAAABLL * ((v480[9] - v480[8]) >> 3));
  sub_4368((int)v560, "ALUInstructions");
  v482 = (uint64_t *)sub_445C((uint64_t)v560, 0xFu, 3, (uint64_t)sub_FECA8);
  v483 = sub_4618(v482, "Xcode Derived Counters");
  v484 = *(_OWORD *)v483;
  v1363 = *((_DWORD *)v483 + 4);
  v1362 = v484;
  sub_10A068((uint64_t)&v1364, (uint64_t)(v483 + 3));
  memset(v1365, 0, sizeof(v1365));
  sub_8B6C((char *)v1365, (__int128 *)v483[8], (__int128 *)v483[9], 0xAAAAAAAAAAAAAAABLL * ((v483[9] - v483[8]) >> 3));
  sub_4368((int)v559, "VerticesPerNSec");
  v485 = (uint64_t *)sub_445C((uint64_t)v559, 0xFu, 3, (uint64_t)sub_FEE74);
  v486 = sub_4618(v485, "Xcode Derived Counters");
  v487 = *(_OWORD *)v486;
  v1367 = *((_DWORD *)v486 + 4);
  v1366 = v487;
  sub_10A068((uint64_t)&v1368, (uint64_t)(v486 + 3));
  memset(v1369, 0, sizeof(v1369));
  sub_8B6C((char *)v1369, (__int128 *)v486[8], (__int128 *)v486[9], 0xAAAAAAAAAAAAAAABLL * ((v486[9] - v486[8]) >> 3));
  sub_4368((int)v558, "PredicatedALUPercentage");
  v488 = (uint64_t *)sub_445C((uint64_t)v558, 0xFu, 3, (uint64_t)sub_FEF6C);
  v489 = sub_4618(v488, "Xcode Derived Counters");
  v490 = *(_OWORD *)v489;
  v1371 = *((_DWORD *)v489 + 4);
  v1370 = v490;
  sub_10A068((uint64_t)&v1372, (uint64_t)(v489 + 3));
  memset(v1373, 0, sizeof(v1373));
  sub_8B6C((char *)v1373, (__int128 *)v489[8], (__int128 *)v489[9], 0xAAAAAAAAAAAAAAABLL * ((v489[9] - v489[8]) >> 3));
  sub_4368((int)v557, "ALUF32");
  v491 = (uint64_t *)sub_445C((uint64_t)v557, 0xFu, 3, (uint64_t)sub_FF1E0);
  v492 = sub_4618(v491, "Xcode Derived Counters");
  v493 = *(_OWORD *)v492;
  v1375 = *((_DWORD *)v492 + 4);
  v1374 = v493;
  sub_10A068((uint64_t)&v1376, (uint64_t)(v492 + 3));
  memset(v1377, 0, sizeof(v1377));
  sub_8B6C((char *)v1377, (__int128 *)v492[8], (__int128 *)v492[9], 0xAAAAAAAAAAAAAAABLL * ((v492[9] - v492[8]) >> 3));
  sub_4368((int)v556, "ALUF16");
  v494 = (uint64_t *)sub_445C((uint64_t)v556, 0xFu, 3, (uint64_t)sub_FF21C);
  v495 = sub_4618(v494, "Xcode Derived Counters");
  v496 = *(_OWORD *)v495;
  v1379 = *((_DWORD *)v495 + 4);
  v1378 = v496;
  sub_10A068((uint64_t)&v1380, (uint64_t)(v495 + 3));
  memset(v1381, 0, sizeof(v1381));
  sub_8B6C((char *)v1381, (__int128 *)v495[8], (__int128 *)v495[9], 0xAAAAAAAAAAAAAAABLL * ((v495[9] - v495[8]) >> 3));
  sub_4368((int)v555, "ALUInt32AndCond");
  v497 = (uint64_t *)sub_445C((uint64_t)v555, 0xFu, 3, (uint64_t)sub_FF258);
  v498 = sub_4618(v497, "Xcode Derived Counters");
  v499 = *(_OWORD *)v498;
  v1383 = *((_DWORD *)v498 + 4);
  v1382 = v499;
  sub_10A068((uint64_t)&v1384, (uint64_t)(v498 + 3));
  memset(v1385, 0, sizeof(v1385));
  sub_8B6C((char *)v1385, (__int128 *)v498[8], (__int128 *)v498[9], 0xAAAAAAAAAAAAAAABLL * ((v498[9] - v498[8]) >> 3));
  sub_4368((int)v554, "ALUIntAndComplex");
  v500 = (uint64_t *)sub_445C((uint64_t)v554, 0xFu, 3, (uint64_t)sub_FF294);
  v501 = sub_4618(v500, "Xcode Derived Counters");
  v502 = *(_OWORD *)v501;
  v1387 = *((_DWORD *)v501 + 4);
  v1386 = v502;
  sub_10A068((uint64_t)&v1388, (uint64_t)(v501 + 3));
  memset(v1389, 0, sizeof(v1389));
  sub_8B6C((char *)v1389, (__int128 *)v501[8], (__int128 *)v501[9], 0xAAAAAAAAAAAAAAABLL * ((v501[9] - v501[8]) >> 3));
  sub_4368((int)v553, "ALUF32Issued");
  v503 = (uint64_t *)sub_445C((uint64_t)v553, 0xFu, 3, (uint64_t)sub_FF2D0);
  v504 = sub_4618(v503, "Xcode Derived Counters");
  v505 = *(_OWORD *)v504;
  v1391 = *((_DWORD *)v504 + 4);
  v1390 = v505;
  sub_10A068((uint64_t)&v1392, (uint64_t)(v504 + 3));
  memset(v1393, 0, sizeof(v1393));
  sub_8B6C((char *)v1393, (__int128 *)v504[8], (__int128 *)v504[9], 0xAAAAAAAAAAAAAAABLL * ((v504[9] - v504[8]) >> 3));
  sub_4368((int)v552, "ALUF16Issued");
  v506 = (uint64_t *)sub_445C((uint64_t)v552, 0xFu, 3, (uint64_t)sub_FF374);
  v507 = sub_4618(v506, "Xcode Derived Counters");
  v508 = *(_OWORD *)v507;
  v1395 = *((_DWORD *)v507 + 4);
  v1394 = v508;
  sub_10A068((uint64_t)&v1396, (uint64_t)(v507 + 3));
  memset(v1397, 0, sizeof(v1397));
  sub_8B6C((char *)v1397, (__int128 *)v507[8], (__int128 *)v507[9], 0xAAAAAAAAAAAAAAABLL * ((v507[9] - v507[8]) >> 3));
  sub_4368((int)v551, "ALUInt32AndCondIssued");
  v509 = (uint64_t *)sub_445C((uint64_t)v551, 0xFu, 3, (uint64_t)sub_FF418);
  v510 = sub_4618(v509, "Xcode Derived Counters");
  v511 = *(_OWORD *)v510;
  v1399 = *((_DWORD *)v510 + 4);
  v1398 = v511;
  sub_10A068((uint64_t)&v1400, (uint64_t)(v510 + 3));
  memset(v1401, 0, sizeof(v1401));
  sub_8B6C((char *)v1401, (__int128 *)v510[8], (__int128 *)v510[9], 0xAAAAAAAAAAAAAAABLL * ((v510[9] - v510[8]) >> 3));
  sub_4368((int)v550, "ALUIntAndComplexIssued");
  v512 = (uint64_t *)sub_445C((uint64_t)v550, 0xFu, 3, (uint64_t)sub_FF4BC);
  v513 = sub_4618(v512, "Xcode Derived Counters");
  v514 = *(_OWORD *)v513;
  v1403 = *((_DWORD *)v513 + 4);
  v1402 = v514;
  sub_10A068((uint64_t)&v1404, (uint64_t)(v513 + 3));
  memset(v1405, 0, sizeof(v1405));
  sub_8B6C((char *)v1405, (__int128 *)v513[8], (__int128 *)v513[9], 0xAAAAAAAAAAAAAAABLL * ((v513[9] - v513[8]) >> 3));
  sub_4368((int)v549, "CFIssued");
  v515 = (uint64_t *)sub_445C((uint64_t)v549, 0xFu, 3, (uint64_t)sub_FF59C);
  v516 = sub_4618(v515, "Xcode Derived Counters");
  v517 = *(_OWORD *)v516;
  v1407 = *((_DWORD *)v516 + 4);
  v1406 = v517;
  sub_10A068((uint64_t)&v1408, (uint64_t)(v516 + 3));
  memset(v1409, 0, sizeof(v1409));
  sub_8B6C((char *)v1409, (__int128 *)v516[8], (__int128 *)v516[9], 0xAAAAAAAAAAAAAAABLL * ((v516[9] - v516[8]) >> 3));
  sub_4368((int)v548, "ALUPerformance");
  v518 = (uint64_t *)sub_445C((uint64_t)v548, 0xFu, 3, (uint64_t)sub_FF640);
  v519 = sub_4618(v518, "Xcode Derived Counters");
  v520 = *(_OWORD *)v519;
  v1411 = *((_DWORD *)v519 + 4);
  v1410 = v520;
  sub_10A068((uint64_t)&v1412, (uint64_t)(v519 + 3));
  memset(v1413, 0, sizeof(v1413));
  sub_8B6C((char *)v1413, (__int128 *)v519[8], (__int128 *)v519[9], 0xAAAAAAAAAAAAAAABLL * ((v519[9] - v519[8]) >> 3));
  sub_4368((int)v547, "ALUF32Percent");
  v521 = (uint64_t *)sub_445C((uint64_t)v547, 0xFu, 3, (uint64_t)sub_FF758);
  v522 = sub_4618(v521, "Xcode Derived Counters");
  v523 = *(_OWORD *)v522;
  v1415 = *((_DWORD *)v522 + 4);
  v1414 = v523;
  sub_10A068((uint64_t)&v1416, (uint64_t)(v522 + 3));
  memset(v1417, 0, sizeof(v1417));
  sub_8B6C((char *)v1417, (__int128 *)v522[8], (__int128 *)v522[9], 0xAAAAAAAAAAAAAAABLL * ((v522[9] - v522[8]) >> 3));
  sub_4368((int)v546, "ALUF16Percent");
  v524 = (uint64_t *)sub_445C((uint64_t)v546, 0xFu, 3, (uint64_t)sub_FF834);
  v525 = sub_4618(v524, "Xcode Derived Counters");
  v526 = *(_OWORD *)v525;
  v1419 = *((_DWORD *)v525 + 4);
  v1418 = v526;
  sub_10A068((uint64_t)&v1420, (uint64_t)(v525 + 3));
  memset(v1421, 0, sizeof(v1421));
  sub_8B6C((char *)v1421, (__int128 *)v525[8], (__int128 *)v525[9], 0xAAAAAAAAAAAAAAABLL * ((v525[9] - v525[8]) >> 3));
  sub_4368((int)v545, "ALUSCIBPercent");
  v527 = (uint64_t *)sub_445C((uint64_t)v545, 0xFu, 3, (uint64_t)sub_FF910);
  v528 = sub_4618(v527, "Xcode Derived Counters");
  v529 = *(_OWORD *)v528;
  v1423 = *((_DWORD *)v528 + 4);
  v1422 = v529;
  sub_10A068((uint64_t)&v1424, (uint64_t)(v528 + 3));
  memset(v1425, 0, sizeof(v1425));
  sub_8B6C((char *)v1425, (__int128 *)v528[8], (__int128 *)v528[9], 0xAAAAAAAAAAAAAAABLL * ((v528[9] - v528[8]) >> 3));
  sub_4368((int)v544, "ALUICPercent");
  v530 = (uint64_t *)sub_445C((uint64_t)v544, 0xFu, 3, (uint64_t)sub_FF9EC);
  v531 = sub_4618(v530, "Xcode Derived Counters");
  v532 = *(_OWORD *)v531;
  v1427 = *((_DWORD *)v531 + 4);
  v1426 = v532;
  sub_10A068((uint64_t)&v1428, (uint64_t)(v531 + 3));
  memset(v1429, 0, sizeof(v1429));
  sub_8B6C((char *)v1429, (__int128 *)v531[8], (__int128 *)v531[9], 0xAAAAAAAAAAAAAAABLL * ((v531[9] - v531[8]) >> 3));
  sub_4368((int)v543, "CFInstructions");
  v533 = (uint64_t *)sub_445C((uint64_t)v543, 0xFu, 3, (uint64_t)sub_FFB10);
  v534 = sub_4618(v533, "Xcode Derived Counters");
  v535 = *(_OWORD *)v534;
  v1431 = *((_DWORD *)v534 + 4);
  v1430 = v535;
  sub_10A068((uint64_t)&v1432, (uint64_t)(v534 + 3));
  memset(v1433, 0, sizeof(v1433));
  sub_8B6C((char *)v1433, (__int128 *)v534[8], (__int128 *)v534[9], 0xAAAAAAAAAAAAAAABLL * ((v534[9] - v534[8]) >> 3));
  sub_4368((int)v542, "AGenInstructions");
  v536 = (uint64_t *)sub_445C((uint64_t)v542, 0xFu, 3, (uint64_t)sub_FFBA8);
  v537 = sub_4618(v536, "Xcode Derived Counters");
  v538 = *(_OWORD *)v537;
  v1435 = *((_DWORD *)v537 + 4);
  v1434 = v538;
  sub_10A068((uint64_t)&v1436, (uint64_t)(v537 + 3));
  memset(v1437, 0, sizeof(v1437));
  sub_8B6C((char *)v1437, (__int128 *)v537[8], (__int128 *)v537[9], 0xAAAAAAAAAAAAAAABLL * ((v537[9] - v537[8]) >> 3));
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v720[11] = a1;
  v721 = 0;
  v539 = (char *)operator new(0x3D88uLL);
  *a1 = v539;
  a1[1] = v539;
  a1[2] = v539 + 15752;
  v540 = 0;
  a1[1] = sub_10A300((uint64_t)(a1 + 2), (uint64_t)&v722, (uint64_t)&v1438, (uint64_t)v539);
  do
  {
    sub_43FC((char *)&v1434 + v540);
    v540 -= 88;
  }
  while (v540 != -15752);
  sub_43FC(v542);
  sub_43FC(v543);
  sub_43FC(v544);
  sub_43FC(v545);
  sub_43FC(v546);
  sub_43FC(v547);
  sub_43FC(v548);
  sub_43FC(v549);
  sub_43FC(v550);
  sub_43FC(v551);
  sub_43FC(v552);
  sub_43FC(v553);
  sub_43FC(v554);
  sub_43FC(v555);
  sub_43FC(v556);
  sub_43FC(v557);
  sub_43FC(v558);
  sub_43FC(v559);
  sub_43FC(v560);
  sub_43FC(v561);
  sub_43FC(v562);
  sub_43FC(v563);
  sub_43FC(v564);
  sub_43FC(v565);
  sub_43FC(v566);
  sub_43FC(v567);
  sub_43FC(v568);
  sub_43FC(v569);
  sub_43FC(v570);
  sub_43FC(v571);
  sub_43FC(v572);
  sub_43FC(v573);
  sub_43FC(v574);
  sub_43FC(v575);
  sub_43FC(v576);
  sub_43FC(v577);
  sub_43FC(v578);
  sub_43FC(v579);
  sub_43FC(v580);
  sub_43FC(v581);
  sub_43FC(v582);
  sub_43FC(v583);
  sub_43FC(v584);
  sub_43FC(v585);
  sub_43FC(v586);
  sub_43FC(v587);
  sub_43FC(v588);
  sub_43FC(v589);
  sub_43FC(v590);
  sub_43FC(v591);
  sub_43FC(v592);
  sub_43FC(v593);
  sub_43FC(v594);
  sub_43FC(v595);
  sub_43FC(v596);
  sub_43FC(v597);
  sub_43FC(v598);
  sub_43FC(v599);
  sub_43FC(v600);
  sub_43FC(v601);
  sub_43FC(v602);
  sub_43FC(v603);
  sub_43FC(v604);
  sub_43FC(v605);
  sub_43FC(v606);
  sub_43FC(v607);
  sub_43FC(v608);
  sub_43FC(v609);
  sub_43FC(v610);
  sub_43FC(v611);
  sub_43FC(v612);
  sub_43FC(v613);
  sub_43FC(v614);
  sub_43FC(v615);
  sub_43FC(v616);
  sub_43FC(v617);
  sub_43FC(v618);
  sub_43FC(v619);
  sub_43FC(v620);
  sub_43FC(v621);
  sub_43FC(v622);
  sub_43FC(v623);
  sub_43FC(v624);
  sub_43FC(v625);
  sub_43FC(v626);
  sub_43FC(v627);
  sub_43FC(v628);
  sub_43FC(v629);
  sub_43FC(v630);
  sub_43FC(v631);
  sub_43FC(v632);
  sub_43FC(v633);
  sub_43FC(v634);
  sub_43FC(v635);
  sub_43FC(v636);
  sub_43FC(v637);
  sub_43FC(v638);
  sub_43FC(v639);
  sub_43FC(v640);
  sub_43FC(v641);
  sub_43FC(v642);
  sub_43FC(v643);
  sub_43FC(v644);
  sub_43FC(v645);
  sub_43FC(v646);
  sub_43FC(v647);
  sub_43FC(v648);
  sub_43FC(v649);
  sub_43FC(v650);
  sub_43FC(v651);
  sub_43FC(v652);
  sub_43FC(v653);
  sub_43FC(v654);
  sub_43FC(v655);
  sub_43FC(v656);
  sub_43FC(v657);
  sub_43FC(v658);
  sub_43FC(v659);
  sub_43FC(v660);
  sub_43FC(v661);
  sub_43FC(v662);
  sub_43FC(v663);
  sub_43FC(v664);
  sub_43FC(v665);
  sub_43FC(v666);
  sub_43FC(v667);
  sub_43FC(v668);
  sub_43FC(v669);
  sub_43FC(v670);
  sub_43FC(v671);
  sub_43FC(v672);
  sub_43FC(v673);
  sub_43FC(v674);
  sub_43FC(v675);
  sub_43FC(v676);
  sub_43FC(v677);
  sub_43FC(v678);
  sub_43FC(v679);
  sub_43FC(v680);
  sub_43FC(v681);
  sub_43FC(v682);
  sub_43FC(v683);
  sub_43FC(v684);
  sub_43FC(v685);
  sub_43FC(v686);
  sub_43FC(v687);
  sub_43FC(v688);
  sub_43FC(v689);
  sub_43FC(v690);
  sub_43FC(v691);
  sub_43FC(v692);
  sub_43FC(v693);
  sub_43FC(v694);
  sub_43FC(v695);
  sub_43FC(v696);
  sub_43FC(v697);
  sub_43FC(v698);
  sub_43FC(v699);
  sub_43FC(v700);
  sub_43FC(v701);
  sub_43FC(v702);
  sub_43FC(v703);
  sub_43FC(v704);
  sub_43FC(v705);
  sub_43FC(v706);
  sub_43FC(v707);
  sub_43FC(v708);
  sub_43FC(v709);
  sub_43FC(v710);
  sub_43FC(v711);
  sub_43FC(v712);
  sub_43FC(v713);
  sub_43FC(v714);
  sub_43FC(v715);
  sub_43FC(v716);
  sub_43FC(v717);
  sub_43FC(v718);
  sub_43FC(v719);
  return sub_43FC(v720);
}

void sub_1081CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;

  *(_QWORD *)(v65 + 8) = v66;
  sub_B830((void ***)&STACK[0x3D90]);
  v69 = -15752;
  v70 = v67;
  do
  {
    v70 = sub_43FC(v70) - 88;
    v69 += 88;
  }
  while (v69);
  sub_43FC(&a10);
  sub_43FC(&a21);
  sub_43FC(&a32);
  sub_43FC(&a43);
  sub_43FC(&a54);
  sub_43FC(&a65);
  sub_43FC(&STACK[0x218]);
  sub_43FC(&STACK[0x270]);
  sub_43FC(&STACK[0x2C8]);
  sub_43FC(&STACK[0x320]);
  sub_43FC(&STACK[0x378]);
  sub_43FC(&STACK[0x3D0]);
  sub_43FC(&STACK[0x428]);
  sub_43FC(&STACK[0x480]);
  sub_43FC(&STACK[0x4D8]);
  sub_43FC(&STACK[0x530]);
  sub_43FC(&STACK[0x588]);
  sub_43FC(&STACK[0x5E0]);
  sub_43FC(&STACK[0x638]);
  sub_43FC(&STACK[0x690]);
  sub_43FC(&STACK[0x6E8]);
  sub_43FC(&STACK[0x740]);
  sub_43FC(&STACK[0x798]);
  sub_43FC(&STACK[0x7F0]);
  sub_43FC(&STACK[0x848]);
  sub_43FC(&STACK[0x8A0]);
  sub_43FC(&STACK[0x8F8]);
  sub_43FC(&STACK[0x950]);
  sub_43FC(&STACK[0x9A8]);
  sub_43FC(&STACK[0xA00]);
  sub_43FC(&STACK[0xA58]);
  sub_43FC(&STACK[0xAB0]);
  sub_43FC(&STACK[0xB08]);
  sub_43FC(&STACK[0xB60]);
  sub_43FC(&STACK[0xBB8]);
  sub_43FC(&STACK[0xC10]);
  sub_43FC(&STACK[0xC68]);
  sub_43FC(&STACK[0xCC0]);
  sub_43FC(&STACK[0xD18]);
  sub_43FC(&STACK[0xD70]);
  sub_43FC(&STACK[0xDC8]);
  sub_43FC(&STACK[0xE20]);
  sub_43FC(&STACK[0xE78]);
  sub_43FC(&STACK[0xED0]);
  sub_43FC(&STACK[0xF28]);
  sub_43FC(&STACK[0xF80]);
  sub_43FC(&STACK[0xFD8]);
  sub_43FC(&STACK[0x1030]);
  sub_43FC(&STACK[0x1088]);
  sub_43FC(&STACK[0x10E0]);
  sub_43FC(&STACK[0x1138]);
  sub_43FC(&STACK[0x1190]);
  sub_43FC(&STACK[0x11E8]);
  sub_43FC(&STACK[0x1240]);
  sub_43FC(&STACK[0x1298]);
  sub_43FC(&STACK[0x12F0]);
  sub_43FC(&STACK[0x1348]);
  sub_43FC(&STACK[0x13A0]);
  sub_43FC(&STACK[0x13F8]);
  sub_43FC(&STACK[0x1450]);
  sub_43FC(&STACK[0x14A8]);
  sub_43FC(&STACK[0x1500]);
  sub_43FC(&STACK[0x1558]);
  sub_43FC(&STACK[0x15B0]);
  sub_43FC(&STACK[0x1608]);
  sub_43FC(&STACK[0x1660]);
  sub_43FC(&STACK[0x16B8]);
  sub_43FC(&STACK[0x1710]);
  sub_43FC(&STACK[0x1768]);
  sub_43FC(&STACK[0x17C0]);
  sub_43FC(&STACK[0x1818]);
  sub_43FC(&STACK[0x1870]);
  sub_43FC(&STACK[0x18C8]);
  sub_43FC(&STACK[0x1920]);
  sub_43FC(&STACK[0x1978]);
  sub_43FC(&STACK[0x19D0]);
  sub_43FC(&STACK[0x1A28]);
  sub_43FC(&STACK[0x1A80]);
  sub_43FC(&STACK[0x1AD8]);
  sub_43FC(&STACK[0x1B30]);
  sub_43FC(&STACK[0x1B88]);
  sub_43FC(&STACK[0x1BE0]);
  sub_43FC(&STACK[0x1C38]);
  sub_43FC(&STACK[0x1C90]);
  sub_43FC(&STACK[0x1CE8]);
  sub_43FC(&STACK[0x1D40]);
  sub_43FC(&STACK[0x1D98]);
  sub_43FC(&STACK[0x1DF0]);
  sub_43FC(&STACK[0x1E48]);
  sub_43FC(&STACK[0x1EA0]);
  sub_43FC(&STACK[0x1EF8]);
  sub_43FC(&STACK[0x1F50]);
  sub_43FC(&STACK[0x1FA8]);
  sub_43FC(&STACK[0x2000]);
  sub_43FC(&STACK[0x2058]);
  sub_43FC(&STACK[0x20B0]);
  sub_43FC(&STACK[0x2108]);
  sub_43FC(&STACK[0x2160]);
  sub_43FC(&STACK[0x21B8]);
  sub_43FC(&STACK[0x2210]);
  sub_43FC(&STACK[0x2268]);
  sub_43FC(&STACK[0x22C0]);
  sub_43FC(&STACK[0x2318]);
  sub_43FC(&STACK[0x2370]);
  sub_43FC(&STACK[0x23C8]);
  sub_43FC(&STACK[0x2420]);
  sub_43FC(&STACK[0x2478]);
  sub_43FC(&STACK[0x24D0]);
  sub_43FC(&STACK[0x2528]);
  sub_43FC(&STACK[0x2580]);
  sub_43FC(&STACK[0x25D8]);
  sub_43FC(&STACK[0x2630]);
  sub_43FC(&STACK[0x2688]);
  sub_43FC(&STACK[0x26E0]);
  sub_43FC(&STACK[0x2738]);
  sub_43FC(&STACK[0x2790]);
  sub_43FC(&STACK[0x27E8]);
  sub_43FC(&STACK[0x2840]);
  sub_43FC(&STACK[0x2898]);
  sub_43FC(&STACK[0x28F0]);
  sub_43FC(&STACK[0x2948]);
  sub_43FC(&STACK[0x29A0]);
  sub_43FC(&STACK[0x29F8]);
  sub_43FC(&STACK[0x2A50]);
  sub_43FC(&STACK[0x2AA8]);
  sub_43FC(&STACK[0x2B00]);
  sub_43FC(&STACK[0x2B58]);
  sub_43FC(&STACK[0x2BB0]);
  sub_43FC(&STACK[0x2C08]);
  sub_43FC(&STACK[0x2C60]);
  sub_43FC(&STACK[0x2CB8]);
  sub_43FC(&STACK[0x2D10]);
  sub_43FC(&STACK[0x2D68]);
  sub_43FC(&STACK[0x2DC0]);
  sub_43FC(&STACK[0x2E18]);
  sub_43FC(&STACK[0x2E70]);
  sub_43FC(&STACK[0x2EC8]);
  sub_43FC(&STACK[0x2F20]);
  sub_43FC(&STACK[0x2F78]);
  sub_43FC(&STACK[0x2FD0]);
  sub_43FC(&STACK[0x3028]);
  sub_43FC(&STACK[0x3080]);
  sub_43FC(&STACK[0x30D8]);
  sub_43FC(&STACK[0x3130]);
  sub_43FC(&STACK[0x3188]);
  sub_43FC(&STACK[0x31E0]);
  sub_43FC(&STACK[0x3238]);
  sub_43FC(&STACK[0x3290]);
  sub_43FC(&STACK[0x32E8]);
  sub_43FC(&STACK[0x3340]);
  sub_43FC(&STACK[0x3398]);
  sub_43FC(&STACK[0x33F0]);
  sub_43FC(&STACK[0x3448]);
  sub_43FC(&STACK[0x34A0]);
  sub_43FC(&STACK[0x34F8]);
  sub_43FC(&STACK[0x3550]);
  sub_43FC(&STACK[0x35A8]);
  sub_43FC(&STACK[0x3600]);
  sub_43FC(&STACK[0x3658]);
  sub_43FC(&STACK[0x36B0]);
  sub_43FC(&STACK[0x3708]);
  sub_43FC(&STACK[0x3760]);
  sub_43FC(&STACK[0x37B8]);
  sub_43FC(&STACK[0x3810]);
  sub_43FC(&STACK[0x3868]);
  sub_43FC(&STACK[0x38C0]);
  sub_43FC(&STACK[0x3918]);
  sub_43FC(&STACK[0x3970]);
  sub_43FC(&STACK[0x39C8]);
  sub_43FC(&STACK[0x3A20]);
  sub_43FC(&STACK[0x3A78]);
  sub_43FC(&STACK[0x3AD0]);
  sub_43FC(&STACK[0x3B28]);
  sub_43FC(&STACK[0x3B80]);
  sub_43FC(&STACK[0x3BD8]);
  sub_43FC(&STACK[0x3C30]);
  sub_43FC(&STACK[0x3C88]);
  sub_43FC(&STACK[0x3CE0]);
  sub_43FC(&STACK[0x3D38]);
  _Unwind_Resume(a1);
}

uint64_t sub_10A068(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_7750(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    sub_10A0DC(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_10A0C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10A0DC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  v10[4] = *(_QWORD *)(a3 + 16);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_7750(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_10A2EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10A300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  if (a2 != a3)
  {
    v8 = 0;
    do
    {
      sub_10A390(a1, a4 + v8, (__int128 *)(a2 + v8));
      v8 += 88;
    }
    while (a2 + v8 != a3);
    a4 += v8;
  }
  return a4;
}

void sub_10A36C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 88;
    do
    {
      sub_43FC(v4 + v2);
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10A390(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  __int128 v5;

  v4 = a2;
  v5 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v5;
  sub_10A068(a2 + 24, (uint64_t)a3 + 24);
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  v4 += 64;
  *(_QWORD *)(v4 + 16) = 0;
  return sub_8B6C((char *)v4, *((__int128 **)a3 + 8), *((__int128 **)a3 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 9) - *((_QWORD *)a3 + 8)) >> 3));
}

void sub_10A400(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10A414@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t *v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t *v31;
  __int128 v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  __int128 v36;
  uint64_t *v37;
  uint64_t *v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  __int128 v43;
  uint64_t *v44;
  uint64_t *v45;
  __int128 v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  __int128 v50;
  uint64_t *v51;
  uint64_t *v52;
  __int128 v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  __int128 v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  __int128 v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  __int128 v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  __int128 v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  __int128 v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  __int128 v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  __int128 v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  __int128 v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  __int128 v89;
  uint64_t *v90;
  uint64_t *v91;
  __int128 v92;
  uint64_t *v93;
  uint64_t *v94;
  __int128 v95;
  uint64_t *v96;
  uint64_t *v97;
  __int128 v98;
  uint64_t *v99;
  uint64_t *v100;
  __int128 v101;
  uint64_t *v102;
  uint64_t *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  __int128 v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  __int128 v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  __int128 v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  __int128 v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  __int128 v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  __int128 v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  __int128 v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  __int128 v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t *v142;
  __int128 v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  __int128 v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t *v151;
  __int128 v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t *v155;
  __int128 v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  __int128 v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  __int128 v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  __int128 v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t *v172;
  __int128 v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  __int128 v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t *v181;
  __int128 v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t *v185;
  __int128 v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  __int128 v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  __int128 v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  __int128 v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  __int128 v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t *v205;
  __int128 v206;
  uint64_t *v207;
  uint64_t *v208;
  uint64_t *v209;
  __int128 v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t *v213;
  __int128 v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t *v217;
  __int128 v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t *v221;
  __int128 v222;
  uint64_t *v223;
  uint64_t *v224;
  uint64_t *v225;
  __int128 v226;
  uint64_t *v227;
  uint64_t *v228;
  uint64_t *v229;
  __int128 v230;
  uint64_t *v231;
  uint64_t *v232;
  uint64_t *v233;
  __int128 v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t *v238;
  __int128 v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t *v242;
  uint64_t *v243;
  __int128 v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t *v247;
  __int128 v248;
  uint64_t *v249;
  uint64_t *v250;
  uint64_t *v251;
  __int128 v252;
  uint64_t *v253;
  uint64_t *v254;
  __int128 v255;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t *v258;
  __int128 v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t *v262;
  __int128 v263;
  uint64_t *v264;
  uint64_t *v265;
  uint64_t *v266;
  __int128 v267;
  uint64_t *v268;
  uint64_t *v269;
  uint64_t *v270;
  __int128 v271;
  uint64_t *v272;
  uint64_t *v273;
  uint64_t *v274;
  __int128 v275;
  uint64_t *v276;
  uint64_t *v277;
  uint64_t *v278;
  __int128 v279;
  uint64_t *v280;
  uint64_t *v281;
  uint64_t *v282;
  __int128 v283;
  uint64_t *v284;
  uint64_t *v285;
  uint64_t *v286;
  __int128 v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t *v290;
  __int128 v291;
  uint64_t *v292;
  uint64_t *v293;
  uint64_t *v294;
  __int128 v295;
  uint64_t *v296;
  uint64_t *v297;
  uint64_t *v298;
  __int128 v299;
  uint64_t *v300;
  uint64_t *v301;
  uint64_t *v302;
  __int128 v303;
  uint64_t *v304;
  uint64_t *v305;
  uint64_t *v306;
  __int128 v307;
  uint64_t *v308;
  uint64_t *v309;
  uint64_t *v310;
  __int128 v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t *v315;
  __int128 v316;
  uint64_t *v317;
  uint64_t *v318;
  uint64_t *v319;
  __int128 v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t *v323;
  uint64_t *v324;
  __int128 v325;
  uint64_t *v326;
  uint64_t *v327;
  uint64_t *v328;
  __int128 v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t *v333;
  uint64_t *v334;
  __int128 v335;
  uint64_t *v336;
  uint64_t *v337;
  uint64_t *v338;
  __int128 v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t *v342;
  uint64_t *v343;
  __int128 v344;
  uint64_t *v345;
  uint64_t *v346;
  uint64_t *v347;
  __int128 v348;
  uint64_t *v349;
  uint64_t *v350;
  uint64_t *v351;
  __int128 v352;
  uint64_t *v353;
  uint64_t *v354;
  uint64_t *v355;
  __int128 v356;
  uint64_t *v357;
  uint64_t *v358;
  __int128 v359;
  uint64_t *v360;
  uint64_t *v361;
  uint64_t *v362;
  __int128 v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t *v366;
  __int128 v367;
  uint64_t *v368;
  uint64_t *v369;
  uint64_t *v370;
  __int128 v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t *v374;
  __int128 v375;
  uint64_t *v376;
  uint64_t *v377;
  uint64_t *v378;
  __int128 v379;
  uint64_t v380;
  uint64_t *v381;
  uint64_t *v382;
  __int128 v383;
  uint64_t *v384;
  uint64_t *v385;
  uint64_t *v386;
  __int128 v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t *v391;
  uint64_t *v392;
  uint64_t *v393;
  uint64_t *v394;
  __int128 v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t *v399;
  uint64_t *v400;
  uint64_t *v401;
  uint64_t *v402;
  __int128 v403;
  uint64_t *v404;
  uint64_t *v405;
  uint64_t *v406;
  uint64_t *v407;
  __int128 v408;
  uint64_t *v409;
  uint64_t *v410;
  uint64_t *v411;
  uint64_t *v412;
  __int128 v413;
  uint64_t v414;
  uint64_t *v415;
  uint64_t *v416;
  uint64_t *v417;
  uint64_t *v418;
  __int128 v419;
  uint64_t v420;
  uint64_t *v421;
  uint64_t *v422;
  uint64_t *v423;
  uint64_t *v424;
  __int128 v425;
  uint64_t *v426;
  uint64_t *v427;
  uint64_t *v428;
  uint64_t *v429;
  __int128 v430;
  uint64_t *v431;
  uint64_t *v432;
  uint64_t *v433;
  uint64_t *v434;
  __int128 v435;
  uint64_t *v436;
  uint64_t *v437;
  uint64_t *v438;
  uint64_t *v439;
  __int128 v440;
  uint64_t *v441;
  uint64_t *v442;
  uint64_t *v443;
  uint64_t *v444;
  __int128 v445;
  uint64_t *v446;
  uint64_t *v447;
  uint64_t *v448;
  uint64_t *v449;
  __int128 v450;
  uint64_t *v451;
  uint64_t *v452;
  uint64_t *v453;
  uint64_t *v454;
  __int128 v455;
  uint64_t *v456;
  uint64_t *v457;
  uint64_t *v458;
  uint64_t *v459;
  __int128 v460;
  uint64_t *v461;
  uint64_t *v462;
  uint64_t *v463;
  uint64_t *v464;
  __int128 v465;
  uint64_t *v466;
  uint64_t *v467;
  uint64_t *v468;
  uint64_t *v469;
  __int128 v470;
  uint64_t *v471;
  uint64_t *v472;
  uint64_t *v473;
  uint64_t *v474;
  __int128 v475;
  uint64_t *v476;
  uint64_t *v477;
  uint64_t *v478;
  uint64_t *v479;
  __int128 v480;
  uint64_t *v481;
  uint64_t *v482;
  uint64_t *v483;
  uint64_t *v484;
  __int128 v485;
  uint64_t *v486;
  uint64_t *v487;
  uint64_t *v488;
  uint64_t *v489;
  __int128 v490;
  uint64_t *v491;
  uint64_t *v492;
  uint64_t *v493;
  uint64_t *v494;
  __int128 v495;
  uint64_t *v496;
  uint64_t *v497;
  uint64_t *v498;
  uint64_t *v499;
  __int128 v500;
  uint64_t *v501;
  uint64_t *v502;
  uint64_t *v503;
  uint64_t *v504;
  __int128 v505;
  uint64_t *v506;
  uint64_t *v507;
  uint64_t *v508;
  __int128 v509;
  uint64_t *v510;
  uint64_t *v511;
  __int128 v512;
  uint64_t *v513;
  uint64_t *v514;
  uint64_t *v515;
  __int128 v516;
  uint64_t *v517;
  uint64_t *v518;
  uint64_t *v519;
  __int128 v520;
  uint64_t *v521;
  uint64_t *v522;
  uint64_t *v523;
  __int128 v524;
  uint64_t *v525;
  uint64_t *v526;
  uint64_t *v527;
  __int128 v528;
  uint64_t *v529;
  uint64_t *v530;
  uint64_t *v531;
  __int128 v532;
  char *v533;
  uint64_t v534;
  char v536;
  _BYTE v537[88];
  _BYTE v538[88];
  _BYTE v539[88];
  _BYTE v540[88];
  _BYTE v541[88];
  _BYTE v542[88];
  _BYTE v543[88];
  _BYTE v544[88];
  _BYTE v545[88];
  _BYTE v546[88];
  _BYTE v547[88];
  _BYTE v548[88];
  _BYTE v549[88];
  _BYTE v550[88];
  _BYTE v551[88];
  _BYTE v552[88];
  _BYTE v553[88];
  _BYTE v554[88];
  _BYTE v555[88];
  _BYTE v556[88];
  _BYTE v557[88];
  _BYTE v558[88];
  _BYTE v559[88];
  _BYTE v560[88];
  _BYTE v561[88];
  _BYTE v562[88];
  _BYTE v563[88];
  _BYTE v564[88];
  _BYTE v565[88];
  _BYTE v566[88];
  _BYTE v567[88];
  _BYTE v568[88];
  _BYTE v569[88];
  _BYTE v570[88];
  _BYTE v571[88];
  _BYTE v572[88];
  _BYTE v573[88];
  _BYTE v574[88];
  _BYTE v575[88];
  _BYTE v576[88];
  _BYTE v577[88];
  _BYTE v578[88];
  _BYTE v579[88];
  _BYTE v580[88];
  _BYTE v581[88];
  _BYTE v582[88];
  _BYTE v583[88];
  _BYTE v584[88];
  _BYTE v585[88];
  _BYTE v586[88];
  _BYTE v587[88];
  _BYTE v588[88];
  _BYTE v589[88];
  _BYTE v590[88];
  _BYTE v591[88];
  _BYTE v592[88];
  _BYTE v593[88];
  _BYTE v594[88];
  _BYTE v595[88];
  _BYTE v596[88];
  _BYTE v597[88];
  _BYTE v598[88];
  _BYTE v599[88];
  _BYTE v600[88];
  _BYTE v601[88];
  _BYTE v602[88];
  _BYTE v603[88];
  _BYTE v604[88];
  _BYTE v605[88];
  _BYTE v606[88];
  _BYTE v607[88];
  _BYTE v608[88];
  _BYTE v609[88];
  _BYTE v610[88];
  _BYTE v611[88];
  _BYTE v612[88];
  _BYTE v613[88];
  _BYTE v614[88];
  _BYTE v615[88];
  _BYTE v616[88];
  _BYTE v617[88];
  _BYTE v618[88];
  _BYTE v619[88];
  _BYTE v620[88];
  _BYTE v621[88];
  _BYTE v622[88];
  _BYTE v623[88];
  _BYTE v624[88];
  _BYTE v625[88];
  _BYTE v626[88];
  _BYTE v627[88];
  _BYTE v628[88];
  _BYTE v629[88];
  _BYTE v630[88];
  _BYTE v631[88];
  _BYTE v632[88];
  _BYTE v633[88];
  _BYTE v634[88];
  _BYTE v635[88];
  _BYTE v636[88];
  _BYTE v637[88];
  _BYTE v638[88];
  _BYTE v639[88];
  _BYTE v640[88];
  _BYTE v641[88];
  _BYTE v642[88];
  _BYTE v643[88];
  _BYTE v644[88];
  _BYTE v645[88];
  _BYTE v646[88];
  _BYTE v647[88];
  _BYTE v648[88];
  _BYTE v649[88];
  _BYTE v650[88];
  _BYTE v651[88];
  _BYTE v652[88];
  _BYTE v653[88];
  _BYTE v654[88];
  _BYTE v655[88];
  _BYTE v656[88];
  _BYTE v657[88];
  _BYTE v658[88];
  _BYTE v659[88];
  _BYTE v660[88];
  _QWORD v661[12];
  char v662;
  __int128 v663;
  int v664;
  uint64_t v665;
  _QWORD v666[3];
  __int128 v667;
  int v668;
  uint64_t v669;
  _QWORD v670[3];
  __int128 v671;
  int v672;
  uint64_t v673;
  _QWORD v674[3];
  __int128 v675;
  int v676;
  uint64_t v677;
  _QWORD v678[3];
  __int128 v679;
  int v680;
  uint64_t v681;
  _QWORD v682[3];
  __int128 v683;
  int v684;
  uint64_t v685;
  _QWORD v686[3];
  __int128 v687;
  int v688;
  uint64_t v689;
  _QWORD v690[3];
  __int128 v691;
  int v692;
  uint64_t v693;
  _QWORD v694[3];
  __int128 v695;
  int v696;
  uint64_t v697;
  _QWORD v698[3];
  __int128 v699;
  int v700;
  uint64_t v701;
  _QWORD v702[3];
  __int128 v703;
  int v704;
  uint64_t v705;
  _QWORD v706[3];
  __int128 v707;
  int v708;
  uint64_t v709;
  _QWORD v710[3];
  __int128 v711;
  int v712;
  uint64_t v713;
  _QWORD v714[3];
  __int128 v715;
  int v716;
  uint64_t v717;
  _QWORD v718[3];
  __int128 v719;
  int v720;
  uint64_t v721;
  _QWORD v722[3];
  __int128 v723;
  int v724;
  uint64_t v725;
  _QWORD v726[3];
  __int128 v727;
  int v728;
  uint64_t v729;
  _QWORD v730[3];
  __int128 v731;
  int v732;
  uint64_t v733;
  _QWORD v734[3];
  __int128 v735;
  int v736;
  uint64_t v737;
  _QWORD v738[3];
  __int128 v739;
  int v740;
  uint64_t v741;
  _QWORD v742[3];
  __int128 v743;
  int v744;
  uint64_t v745;
  _QWORD v746[3];
  __int128 v747;
  int v748;
  uint64_t v749;
  _QWORD v750[3];
  __int128 v751;
  int v752;
  uint64_t v753;
  _QWORD v754[3];
  __int128 v755;
  int v756;
  uint64_t v757;
  _QWORD v758[3];
  __int128 v759;
  int v760;
  uint64_t v761;
  _QWORD v762[3];
  __int128 v763;
  int v764;
  uint64_t v765;
  _QWORD v766[3];
  __int128 v767;
  int v768;
  uint64_t v769;
  _QWORD v770[3];
  __int128 v771;
  int v772;
  uint64_t v773;
  _QWORD v774[3];
  __int128 v775;
  int v776;
  uint64_t v777;
  _QWORD v778[3];
  __int128 v779;
  int v780;
  uint64_t v781;
  _QWORD v782[3];
  __int128 v783;
  int v784;
  uint64_t v785;
  _QWORD v786[3];
  __int128 v787;
  int v788;
  uint64_t v789;
  _QWORD v790[3];
  __int128 v791;
  int v792;
  uint64_t v793;
  _QWORD v794[3];
  __int128 v795;
  int v796;
  uint64_t v797;
  _QWORD v798[3];
  __int128 v799;
  int v800;
  uint64_t v801;
  _QWORD v802[3];
  __int128 v803;
  int v804;
  uint64_t v805;
  _QWORD v806[3];
  __int128 v807;
  int v808;
  uint64_t v809;
  _QWORD v810[3];
  __int128 v811;
  int v812;
  uint64_t v813;
  _QWORD v814[3];
  __int128 v815;
  int v816;
  uint64_t v817;
  _QWORD v818[3];
  __int128 v819;
  int v820;
  uint64_t v821;
  _QWORD v822[3];
  __int128 v823;
  int v824;
  uint64_t v825;
  _QWORD v826[3];
  __int128 v827;
  int v828;
  uint64_t v829;
  _QWORD v830[3];
  __int128 v831;
  int v832;
  uint64_t v833;
  _QWORD v834[3];
  __int128 v835;
  int v836;
  uint64_t v837;
  _QWORD v838[3];
  __int128 v839;
  int v840;
  uint64_t v841;
  _QWORD v842[3];
  __int128 v843;
  int v844;
  uint64_t v845;
  _QWORD v846[3];
  __int128 v847;
  int v848;
  uint64_t v849;
  _QWORD v850[3];
  __int128 v851;
  int v852;
  uint64_t v853;
  _QWORD v854[3];
  __int128 v855;
  int v856;
  uint64_t v857;
  _QWORD v858[3];
  __int128 v859;
  int v860;
  uint64_t v861;
  _QWORD v862[3];
  __int128 v863;
  int v864;
  uint64_t v865;
  _QWORD v866[3];
  __int128 v867;
  int v868;
  uint64_t v869;
  _QWORD v870[3];
  __int128 v871;
  int v872;
  uint64_t v873;
  _QWORD v874[3];
  __int128 v875;
  int v876;
  uint64_t v877;
  _QWORD v878[3];
  __int128 v879;
  int v880;
  uint64_t v881;
  _QWORD v882[3];
  __int128 v883;
  int v884;
  uint64_t v885;
  _QWORD v886[3];
  __int128 v887;
  int v888;
  uint64_t v889;
  _QWORD v890[3];
  __int128 v891;
  int v892;
  uint64_t v893;
  _QWORD v894[3];
  __int128 v895;
  int v896;
  uint64_t v897;
  _QWORD v898[3];
  __int128 v899;
  int v900;
  uint64_t v901;
  _QWORD v902[3];
  __int128 v903;
  int v904;
  uint64_t v905;
  _QWORD v906[3];
  __int128 v907;
  int v908;
  uint64_t v909;
  _QWORD v910[3];
  __int128 v911;
  int v912;
  uint64_t v913;
  _QWORD v914[3];
  __int128 v915;
  int v916;
  uint64_t v917;
  _QWORD v918[3];
  __int128 v919;
  int v920;
  uint64_t v921;
  _QWORD v922[3];
  __int128 v923;
  int v924;
  uint64_t v925;
  _QWORD v926[3];
  __int128 v927;
  int v928;
  uint64_t v929;
  _QWORD v930[3];
  __int128 v931;
  int v932;
  uint64_t v933;
  _QWORD v934[3];
  __int128 v935;
  int v936;
  uint64_t v937;
  _QWORD v938[3];
  __int128 v939;
  int v940;
  uint64_t v941;
  _QWORD v942[3];
  __int128 v943;
  int v944;
  uint64_t v945;
  _QWORD v946[3];
  __int128 v947;
  int v948;
  uint64_t v949;
  _QWORD v950[3];
  __int128 v951;
  int v952;
  uint64_t v953;
  _QWORD v954[3];
  __int128 v955;
  int v956;
  uint64_t v957;
  _QWORD v958[3];
  __int128 v959;
  int v960;
  uint64_t v961;
  _QWORD v962[3];
  __int128 v963;
  int v964;
  uint64_t v965;
  _QWORD v966[3];
  __int128 v967;
  int v968;
  uint64_t v969;
  _QWORD v970[3];
  __int128 v971;
  int v972;
  uint64_t v973;
  _QWORD v974[3];
  __int128 v975;
  int v976;
  uint64_t v977;
  _QWORD v978[3];
  __int128 v979;
  int v980;
  uint64_t v981;
  _QWORD v982[3];
  __int128 v983;
  int v984;
  uint64_t v985;
  _QWORD v986[3];
  __int128 v987;
  int v988;
  uint64_t v989;
  _QWORD v990[3];
  __int128 v991;
  int v992;
  uint64_t v993;
  _QWORD v994[3];
  __int128 v995;
  int v996;
  uint64_t v997;
  _QWORD v998[3];
  __int128 v999;
  int v1000;
  uint64_t v1001;
  _QWORD v1002[3];
  __int128 v1003;
  int v1004;
  uint64_t v1005;
  _QWORD v1006[3];
  __int128 v1007;
  int v1008;
  uint64_t v1009;
  _QWORD v1010[3];
  __int128 v1011;
  int v1012;
  uint64_t v1013;
  _QWORD v1014[3];
  __int128 v1015;
  int v1016;
  uint64_t v1017;
  _QWORD v1018[3];
  __int128 v1019;
  int v1020;
  uint64_t v1021;
  _QWORD v1022[3];
  __int128 v1023;
  int v1024;
  uint64_t v1025;
  _QWORD v1026[3];
  __int128 v1027;
  int v1028;
  uint64_t v1029;
  _QWORD v1030[3];
  __int128 v1031;
  int v1032;
  uint64_t v1033;
  _QWORD v1034[3];
  __int128 v1035;
  int v1036;
  uint64_t v1037;
  _QWORD v1038[3];
  __int128 v1039;
  int v1040;
  uint64_t v1041;
  _QWORD v1042[3];
  __int128 v1043;
  int v1044;
  uint64_t v1045;
  _QWORD v1046[3];
  __int128 v1047;
  int v1048;
  uint64_t v1049;
  _QWORD v1050[3];
  __int128 v1051;
  int v1052;
  uint64_t v1053;
  _QWORD v1054[3];
  __int128 v1055;
  int v1056;
  uint64_t v1057;
  _QWORD v1058[3];
  __int128 v1059;
  int v1060;
  uint64_t v1061;
  _QWORD v1062[3];
  __int128 v1063;
  int v1064;
  uint64_t v1065;
  _QWORD v1066[3];
  __int128 v1067;
  int v1068;
  uint64_t v1069;
  _QWORD v1070[3];
  __int128 v1071;
  int v1072;
  uint64_t v1073;
  _QWORD v1074[3];
  __int128 v1075;
  int v1076;
  uint64_t v1077;
  _QWORD v1078[3];
  __int128 v1079;
  int v1080;
  uint64_t v1081;
  _QWORD v1082[3];
  __int128 v1083;
  int v1084;
  uint64_t v1085;
  _QWORD v1086[3];
  __int128 v1087;
  int v1088;
  uint64_t v1089;
  _QWORD v1090[3];
  __int128 v1091;
  int v1092;
  uint64_t v1093;
  _QWORD v1094[3];
  __int128 v1095;
  int v1096;
  uint64_t v1097;
  _QWORD v1098[3];
  __int128 v1099;
  int v1100;
  uint64_t v1101;
  _QWORD v1102[3];
  __int128 v1103;
  int v1104;
  uint64_t v1105;
  _QWORD v1106[3];
  __int128 v1107;
  int v1108;
  uint64_t v1109;
  _QWORD v1110[3];
  __int128 v1111;
  int v1112;
  uint64_t v1113;
  _QWORD v1114[3];
  __int128 v1115;
  int v1116;
  uint64_t v1117;
  _QWORD v1118[3];
  __int128 v1119;
  int v1120;
  uint64_t v1121;
  _QWORD v1122[3];
  __int128 v1123;
  int v1124;
  uint64_t v1125;
  _QWORD v1126[3];
  __int128 v1127;
  int v1128;
  uint64_t v1129;
  _QWORD v1130[3];
  __int128 v1131;
  int v1132;
  uint64_t v1133;
  _QWORD v1134[3];
  __int128 v1135;
  int v1136;
  uint64_t v1137;
  _QWORD v1138[3];
  __int128 v1139;
  int v1140;
  uint64_t v1141;
  _QWORD v1142[3];
  __int128 v1143;
  int v1144;
  uint64_t v1145;
  _QWORD v1146[3];
  __int128 v1147;
  int v1148;
  uint64_t v1149;
  _QWORD v1150[3];
  __int128 v1151;
  int v1152;
  uint64_t v1153;
  _QWORD v1154[3];
  __int128 v1155;
  int v1156;
  uint64_t v1157;
  _QWORD v1158[3];
  __int128 v1159;
  int v1160;
  uint64_t v1161;
  _QWORD v1162[3];
  __int128 v1163;
  int v1164;
  uint64_t v1165;
  _QWORD v1166[3];
  uint64_t v1167;

  sub_4368((int)v661, "L1 GPR Bytes Occupancy");
  v2 = (uint64_t *)sub_445C((uint64_t)v661, 0xFu, 3, (uint64_t)sub_111F78);
  v3 = sub_4618(v2, "One Pass");
  v4 = *(_OWORD *)v3;
  v664 = *((_DWORD *)v3 + 4);
  v663 = v4;
  sub_10A068((uint64_t)&v665, (uint64_t)(v3 + 3));
  memset(v666, 0, sizeof(v666));
  sub_8B6C((char *)v666, (__int128 *)v3[8], (__int128 *)v3[9], 0xAAAAAAAAAAAAAAABLL * ((v3[9] - v3[8]) >> 3));
  sub_4368((int)v660, "L1 GPR Occupancy");
  v5 = (uint64_t *)sub_445C((uint64_t)v660, 0xFu, 3, (uint64_t)sub_112074);
  v6 = sub_4618(v5, "L1 Occupancy");
  v7 = sub_4618(v6, "One Pass");
  v8 = *(_OWORD *)v7;
  v668 = *((_DWORD *)v7 + 4);
  v667 = v8;
  sub_10A068((uint64_t)&v669, (uint64_t)(v7 + 3));
  memset(v670, 0, sizeof(v670));
  sub_8B6C((char *)v670, (__int128 *)v7[8], (__int128 *)v7[9], 0xAAAAAAAAAAAAAAABLL * ((v7[9] - v7[8]) >> 3));
  sub_4368((int)v659, "L1 Buffer Bytes Occupancy");
  v9 = (uint64_t *)sub_445C((uint64_t)v659, 0xFu, 3, (uint64_t)sub_1120D8);
  v10 = sub_4618(v9, "One Pass");
  v11 = *(_OWORD *)v10;
  v672 = *((_DWORD *)v10 + 4);
  v671 = v11;
  sub_10A068((uint64_t)&v673, (uint64_t)(v10 + 3));
  memset(v674, 0, sizeof(v674));
  sub_8B6C((char *)v674, (__int128 *)v10[8], (__int128 *)v10[9], 0xAAAAAAAAAAAAAAABLL * ((v10[9] - v10[8]) >> 3));
  sub_4368((int)v658, "L1 Buffer Occupancy");
  v12 = (uint64_t *)sub_445C((uint64_t)v658, 0xFu, 3, (uint64_t)sub_1121D4);
  v13 = sub_4618(v12, "L1 Occupancy");
  v14 = sub_4618(v13, "One Pass");
  v15 = *(_OWORD *)v14;
  v676 = *((_DWORD *)v14 + 4);
  v675 = v15;
  sub_10A068((uint64_t)&v677, (uint64_t)(v14 + 3));
  memset(v678, 0, sizeof(v678));
  sub_8B6C((char *)v678, (__int128 *)v14[8], (__int128 *)v14[9], 0xAAAAAAAAAAAAAAABLL * ((v14[9] - v14[8]) >> 3));
  sub_4368((int)v657, "L1 Raytracing Scratch Bytes Occupancy");
  v16 = (uint64_t *)sub_445C((uint64_t)v657, 0xFu, 3, (uint64_t)sub_112238);
  v17 = sub_4618(v16, "One Pass");
  v18 = *(_OWORD *)v17;
  v680 = *((_DWORD *)v17 + 4);
  v679 = v18;
  sub_10A068((uint64_t)&v681, (uint64_t)(v17 + 3));
  memset(v682, 0, sizeof(v682));
  sub_8B6C((char *)v682, (__int128 *)v17[8], (__int128 *)v17[9], 0xAAAAAAAAAAAAAAABLL * ((v17[9] - v17[8]) >> 3));
  sub_4368((int)v656, "L1 Raytracing Scratch Occupancy");
  v19 = (uint64_t *)sub_445C((uint64_t)v656, 0xFu, 3, (uint64_t)sub_112334);
  v20 = sub_4618(v19, "L1 Occupancy");
  v21 = sub_4618(v20, "One Pass");
  v22 = *(_OWORD *)v21;
  v684 = *((_DWORD *)v21 + 4);
  v683 = v22;
  sub_10A068((uint64_t)&v685, (uint64_t)(v21 + 3));
  memset(v686, 0, sizeof(v686));
  sub_8B6C((char *)v686, (__int128 *)v21[8], (__int128 *)v21[9], 0xAAAAAAAAAAAAAAABLL * ((v21[9] - v21[8]) >> 3));
  sub_4368((int)v655, "L1 Stack Bytes Occupancy");
  v23 = (uint64_t *)sub_445C((uint64_t)v655, 0xFu, 3, (uint64_t)sub_112398);
  v24 = sub_4618(v23, "One Pass");
  v25 = *(_OWORD *)v24;
  v688 = *((_DWORD *)v24 + 4);
  v687 = v25;
  sub_10A068((uint64_t)&v689, (uint64_t)(v24 + 3));
  memset(v690, 0, sizeof(v690));
  sub_8B6C((char *)v690, (__int128 *)v24[8], (__int128 *)v24[9], 0xAAAAAAAAAAAAAAABLL * ((v24[9] - v24[8]) >> 3));
  sub_4368((int)v654, "L1 Stack Occupancy");
  v26 = (uint64_t *)sub_445C((uint64_t)v654, 0xFu, 3, (uint64_t)sub_112494);
  v27 = sub_4618(v26, "L1 Occupancy");
  v28 = sub_4618(v27, "One Pass");
  v29 = *(_OWORD *)v28;
  v692 = *((_DWORD *)v28 + 4);
  v691 = v29;
  sub_10A068((uint64_t)&v693, (uint64_t)(v28 + 3));
  memset(v694, 0, sizeof(v694));
  sub_8B6C((char *)v694, (__int128 *)v28[8], (__int128 *)v28[9], 0xAAAAAAAAAAAAAAABLL * ((v28[9] - v28[8]) >> 3));
  sub_4368((int)v653, "L1 Threadgroup Bytes Occupancy");
  v30 = (uint64_t *)sub_445C((uint64_t)v653, 0xFu, 3, (uint64_t)sub_1124F8);
  v31 = sub_4618(v30, "One Pass");
  v32 = *(_OWORD *)v31;
  v696 = *((_DWORD *)v31 + 4);
  v695 = v32;
  sub_10A068((uint64_t)&v697, (uint64_t)(v31 + 3));
  memset(v698, 0, sizeof(v698));
  sub_8B6C((char *)v698, (__int128 *)v31[8], (__int128 *)v31[9], 0xAAAAAAAAAAAAAAABLL * ((v31[9] - v31[8]) >> 3));
  sub_4368((int)v652, "L1 Threadgroup Occupancy");
  v33 = (uint64_t *)sub_445C((uint64_t)v652, 0xFu, 3, (uint64_t)sub_1125F4);
  v34 = sub_4618(v33, "L1 Occupancy");
  v35 = sub_4618(v34, "One Pass");
  v36 = *(_OWORD *)v35;
  v700 = *((_DWORD *)v35 + 4);
  v699 = v36;
  sub_10A068((uint64_t)&v701, (uint64_t)(v35 + 3));
  memset(v702, 0, sizeof(v702));
  sub_8B6C((char *)v702, (__int128 *)v35[8], (__int128 *)v35[9], 0xAAAAAAAAAAAAAAABLL * ((v35[9] - v35[8]) >> 3));
  sub_4368((int)v651, "L1 Imageblock Bytes Occupancy");
  v37 = (uint64_t *)sub_445C((uint64_t)v651, 0xFu, 3, (uint64_t)sub_112658);
  v38 = sub_4618(v37, "One Pass");
  v39 = *(_OWORD *)v38;
  v704 = *((_DWORD *)v38 + 4);
  v703 = v39;
  sub_10A068((uint64_t)&v705, (uint64_t)(v38 + 3));
  memset(v706, 0, sizeof(v706));
  sub_8B6C((char *)v706, (__int128 *)v38[8], (__int128 *)v38[9], 0xAAAAAAAAAAAAAAABLL * ((v38[9] - v38[8]) >> 3));
  sub_4368((int)v650, "L1 Imageblock Occupancy");
  v40 = (uint64_t *)sub_445C((uint64_t)v650, 0xFu, 3, (uint64_t)sub_11277C);
  v41 = sub_4618(v40, "L1 Occupancy");
  v42 = sub_4618(v41, "One Pass");
  v43 = *(_OWORD *)v42;
  v708 = *((_DWORD *)v42 + 4);
  v707 = v43;
  sub_10A068((uint64_t)&v709, (uint64_t)(v42 + 3));
  memset(v710, 0, sizeof(v710));
  sub_8B6C((char *)v710, (__int128 *)v42[8], (__int128 *)v42[9], 0xAAAAAAAAAAAAAAABLL * ((v42[9] - v42[8]) >> 3));
  sub_4368((int)v649, "L1 Other Bytes Occupancy");
  v44 = (uint64_t *)sub_445C((uint64_t)v649, 0xFu, 3, (uint64_t)sub_1127E0);
  v45 = sub_4618(v44, "One Pass");
  v46 = *(_OWORD *)v45;
  v712 = *((_DWORD *)v45 + 4);
  v711 = v46;
  sub_10A068((uint64_t)&v713, (uint64_t)(v45 + 3));
  memset(v714, 0, sizeof(v714));
  sub_8B6C((char *)v714, (__int128 *)v45[8], (__int128 *)v45[9], 0xAAAAAAAAAAAAAAABLL * ((v45[9] - v45[8]) >> 3));
  sub_4368((int)v648, "L1 Other Occupancy");
  v47 = (uint64_t *)sub_445C((uint64_t)v648, 0xFu, 3, (uint64_t)sub_112904);
  v48 = sub_4618(v47, "L1 Occupancy");
  v49 = sub_4618(v48, "One Pass");
  v50 = *(_OWORD *)v49;
  v716 = *((_DWORD *)v49 + 4);
  v715 = v50;
  sub_10A068((uint64_t)&v717, (uint64_t)(v49 + 3));
  memset(v718, 0, sizeof(v718));
  sub_8B6C((char *)v718, (__int128 *)v49[8], (__int128 *)v49[9], 0xAAAAAAAAAAAAAAABLL * ((v49[9] - v49[8]) >> 3));
  sub_4368((int)v647, "L1 Total Bytes Occupancy");
  v51 = (uint64_t *)sub_445C((uint64_t)v647, 0xFu, 3, (uint64_t)sub_112968);
  v52 = sub_4618(v51, "One Pass");
  v53 = *(_OWORD *)v52;
  v720 = *((_DWORD *)v52 + 4);
  v719 = v53;
  sub_10A068((uint64_t)&v721, (uint64_t)(v52 + 3));
  memset(v722, 0, sizeof(v722));
  sub_8B6C((char *)v722, (__int128 *)v52[8], (__int128 *)v52[9], 0xAAAAAAAAAAAAAAABLL * ((v52[9] - v52[8]) >> 3));
  sub_4368((int)v646, "L1 Total Occupancy");
  v54 = (uint64_t *)sub_445C((uint64_t)v646, 0xFu, 3, (uint64_t)sub_112A88);
  v55 = sub_4618(v54, "L1 Occupancy");
  v56 = sub_4618(v55, "One Pass");
  v57 = *(_OWORD *)v56;
  v724 = *((_DWORD *)v56 + 4);
  v723 = v57;
  sub_10A068((uint64_t)&v725, (uint64_t)(v56 + 3));
  memset(v726, 0, sizeof(v726));
  sub_8B6C((char *)v726, (__int128 *)v56[8], (__int128 *)v56[9], 0xAAAAAAAAAAAAAAABLL * ((v56[9] - v56[8]) >> 3));
  sub_4368((int)v645, "Occupancy Management L1 Eviction Rate");
  v58 = (uint64_t *)sub_445C((uint64_t)v645, 0xFu, 3, (uint64_t)sub_112AEC);
  v59 = sub_4618(v58, "Thread Occupancy");
  v60 = sub_4618(v59, "One Pass");
  v61 = *(_OWORD *)v60;
  v728 = *((_DWORD *)v60 + 4);
  v727 = v61;
  sub_10A068((uint64_t)&v729, (uint64_t)(v60 + 3));
  memset(v730, 0, sizeof(v730));
  sub_8B6C((char *)v730, (__int128 *)v60[8], (__int128 *)v60[9], 0xAAAAAAAAAAAAAAABLL * ((v60[9] - v60[8]) >> 3));
  sub_4368((int)v644, "Buffer L1 Miss Rate");
  v62 = (uint64_t *)sub_445C((uint64_t)v644, 0xFu, 3, (uint64_t)sub_112C04);
  v63 = sub_4618(v62, "One Pass");
  v64 = sub_4618(v63, "Cache Misses");
  v65 = *(_OWORD *)v64;
  v732 = *((_DWORD *)v64 + 4);
  v731 = v65;
  sub_10A068((uint64_t)&v733, (uint64_t)(v64 + 3));
  memset(v734, 0, sizeof(v734));
  sub_8B6C((char *)v734, (__int128 *)v64[8], (__int128 *)v64[9], 0xAAAAAAAAAAAAAAABLL * ((v64[9] - v64[8]) >> 3));
  sub_4368((int)v643, "Vertex Shader Launch Utilization");
  v66 = (uint64_t *)sub_445C((uint64_t)v643, 0xFu, 3, (uint64_t)sub_112C5C);
  v67 = sub_4618(v66, "One Pass");
  v68 = sub_4618(v67, "Utilizations");
  v69 = *(_OWORD *)v68;
  v736 = *((_DWORD *)v68 + 4);
  v735 = v69;
  sub_10A068((uint64_t)&v737, (uint64_t)(v68 + 3));
  memset(v738, 0, sizeof(v738));
  sub_8B6C((char *)v738, (__int128 *)v68[8], (__int128 *)v68[9], 0xAAAAAAAAAAAAAAABLL * ((v68[9] - v68[8]) >> 3));
  sub_4368((int)v642, "Vertex Shader Launch Limiter");
  v70 = (uint64_t *)sub_445C((uint64_t)v642, 0xFu, 3, (uint64_t)sub_112D94);
  v71 = sub_4618(v70, "One Pass");
  v72 = sub_4618(v71, "Thread Occupancy");
  v73 = *(_OWORD *)v72;
  v740 = *((_DWORD *)v72 + 4);
  v739 = v73;
  sub_10A068((uint64_t)&v741, (uint64_t)(v72 + 3));
  memset(v742, 0, sizeof(v742));
  sub_8B6C((char *)v742, (__int128 *)v72[8], (__int128 *)v72[9], 0xAAAAAAAAAAAAAAABLL * ((v72[9] - v72[8]) >> 3));
  sub_4368((int)v641, "Fragment Shader Launch Utilization");
  v74 = (uint64_t *)sub_445C((uint64_t)v641, 0xFu, 3, (uint64_t)sub_1130D8);
  v75 = sub_4618(v74, "One Pass");
  v76 = sub_4618(v75, "Utilizations");
  v77 = *(_OWORD *)v76;
  v744 = *((_DWORD *)v76 + 4);
  v743 = v77;
  sub_10A068((uint64_t)&v745, (uint64_t)(v76 + 3));
  memset(v746, 0, sizeof(v746));
  sub_8B6C((char *)v746, (__int128 *)v76[8], (__int128 *)v76[9], 0xAAAAAAAAAAAAAAABLL * ((v76[9] - v76[8]) >> 3));
  sub_4368((int)v640, "Fragment Shader Launch Limiter");
  v78 = (uint64_t *)sub_445C((uint64_t)v640, 0xFu, 3, (uint64_t)sub_1131F0);
  v79 = sub_4618(v78, "One Pass");
  v80 = sub_4618(v79, "Thread Occupancy");
  v81 = *(_OWORD *)v80;
  v748 = *((_DWORD *)v80 + 4);
  v747 = v81;
  sub_10A068((uint64_t)&v749, (uint64_t)(v80 + 3));
  memset(v750, 0, sizeof(v750));
  sub_8B6C((char *)v750, (__int128 *)v80[8], (__int128 *)v80[9], 0xAAAAAAAAAAAAAAABLL * ((v80[9] - v80[8]) >> 3));
  sub_4368((int)v639, "Compute Shader Launch Utilization");
  v82 = (uint64_t *)sub_445C((uint64_t)v639, 0xFu, 3, (uint64_t)sub_113354);
  v83 = sub_4618(v82, "One Pass");
  v84 = sub_4618(v83, "Utilizations");
  v85 = *(_OWORD *)v84;
  v752 = *((_DWORD *)v84 + 4);
  v751 = v85;
  sub_10A068((uint64_t)&v753, (uint64_t)(v84 + 3));
  memset(v754, 0, sizeof(v754));
  sub_8B6C((char *)v754, (__int128 *)v84[8], (__int128 *)v84[9], 0xAAAAAAAAAAAAAAABLL * ((v84[9] - v84[8]) >> 3));
  sub_4368((int)v638, "Compute Shader Launch Limiter");
  v86 = (uint64_t *)sub_445C((uint64_t)v638, 0xFu, 3, (uint64_t)sub_11346C);
  v87 = sub_4618(v86, "One Pass");
  v88 = sub_4618(v87, "Thread Occupancy");
  v89 = *(_OWORD *)v88;
  v756 = *((_DWORD *)v88 + 4);
  v755 = v89;
  sub_10A068((uint64_t)&v757, (uint64_t)(v88 + 3));
  memset(v758, 0, sizeof(v758));
  sub_8B6C((char *)v758, (__int128 *)v88[8], (__int128 *)v88[9], 0xAAAAAAAAAAAAAAABLL * ((v88[9] - v88[8]) >> 3));
  sub_4368((int)v637, "Vertex Threads Launched");
  v90 = (uint64_t *)sub_445C((uint64_t)v637, 0xFu, 3, (uint64_t)sub_11371C);
  v91 = sub_4618(v90, "Absolute Statistics");
  v92 = *(_OWORD *)v91;
  v760 = *((_DWORD *)v91 + 4);
  v759 = v92;
  sub_10A068((uint64_t)&v761, (uint64_t)(v91 + 3));
  memset(v762, 0, sizeof(v762));
  sub_8B6C((char *)v762, (__int128 *)v91[8], (__int128 *)v91[9], 0xAAAAAAAAAAAAAAABLL * ((v91[9] - v91[8]) >> 3));
  sub_4368((int)v636, "Fragment Threads Launched");
  v93 = (uint64_t *)sub_445C((uint64_t)v636, 0xFu, 3, (uint64_t)sub_113734);
  v94 = sub_4618(v93, "Absolute Statistics");
  v95 = *(_OWORD *)v94;
  v764 = *((_DWORD *)v94 + 4);
  v763 = v95;
  sub_10A068((uint64_t)&v765, (uint64_t)(v94 + 3));
  memset(v766, 0, sizeof(v766));
  sub_8B6C((char *)v766, (__int128 *)v94[8], (__int128 *)v94[9], 0xAAAAAAAAAAAAAAABLL * ((v94[9] - v94[8]) >> 3));
  sub_4368((int)v635, "Compute Threads Launched");
  v96 = (uint64_t *)sub_445C((uint64_t)v635, 0xFu, 3, (uint64_t)sub_11374C);
  v97 = sub_4618(v96, "Absolute Statistics");
  v98 = *(_OWORD *)v97;
  v768 = *((_DWORD *)v97 + 4);
  v767 = v98;
  sub_10A068((uint64_t)&v769, (uint64_t)(v97 + 3));
  memset(v770, 0, sizeof(v770));
  sub_8B6C((char *)v770, (__int128 *)v97[8], (__int128 *)v97[9], 0xAAAAAAAAAAAAAAABLL * ((v97[9] - v97[8]) >> 3));
  sub_4368((int)v634, "Threads Launched");
  v99 = (uint64_t *)sub_445C((uint64_t)v634, 0xFu, 3, (uint64_t)sub_113764);
  v100 = sub_4618(v99, "Absolute Statistics");
  v101 = *(_OWORD *)v100;
  v772 = *((_DWORD *)v100 + 4);
  v771 = v101;
  sub_10A068((uint64_t)&v773, (uint64_t)(v100 + 3));
  memset(v774, 0, sizeof(v774));
  sub_8B6C((char *)v774, (__int128 *)v100[8], (__int128 *)v100[9], 0xAAAAAAAAAAAAAAABLL * ((v100[9] - v100[8]) >> 3));
  sub_4368((int)v633, "Simdgroups Launched");
  v102 = (uint64_t *)sub_445C((uint64_t)v633, 0xFu, 3, (uint64_t)sub_1137E4);
  v103 = sub_4618(v102, "Absolute Statistics");
  v104 = *(_OWORD *)v103;
  v776 = *((_DWORD *)v103 + 4);
  v775 = v104;
  sub_10A068((uint64_t)&v777, (uint64_t)(v103 + 3));
  memset(v778, 0, sizeof(v778));
  sub_8B6C((char *)v778, (__int128 *)v103[8], (__int128 *)v103[9], 0xAAAAAAAAAAAAAAABLL * ((v103[9] - v103[8]) >> 3));
  sub_4368((int)v632, "Fragment Interpolation Limiter");
  v105 = sub_4400((uint64_t)v632, 11, 2, (uint64_t)sub_1137FC);
  v106 = sub_4400(v105, 11, 3, (uint64_t)sub_1137FC);
  v107 = (uint64_t *)sub_4400(v106, 12, 2, (uint64_t)sub_1137FC);
  v108 = sub_4618(v107, "Limiters");
  v109 = sub_4618(v108, "One Pass");
  v110 = *(_OWORD *)v109;
  v780 = *((_DWORD *)v109 + 4);
  v779 = v110;
  sub_10A068((uint64_t)&v781, (uint64_t)(v109 + 3));
  memset(v782, 0, sizeof(v782));
  sub_8B6C((char *)v782, (__int128 *)v109[8], (__int128 *)v109[9], 0xAAAAAAAAAAAAAAABLL * ((v109[9] - v109[8]) >> 3));
  sub_4368((int)v631, "MMU Limiter");
  v111 = (uint64_t *)sub_445C((uint64_t)v631, 0xBu, 2, (uint64_t)sub_1138C4);
  v112 = sub_4618(v111, "Limiters");
  v113 = sub_4618(v112, "One Pass");
  v114 = *(_OWORD *)v113;
  v784 = *((_DWORD *)v113 + 4);
  v783 = v114;
  sub_10A068((uint64_t)&v785, (uint64_t)(v113 + 3));
  memset(v786, 0, sizeof(v786));
  sub_8B6C((char *)v786, (__int128 *)v113[8], (__int128 *)v113[9], 0xAAAAAAAAAAAAAAABLL * ((v113[9] - v113[8]) >> 3));
  sub_4368((int)v630, "MMU Utilization");
  v115 = (uint64_t *)sub_445C((uint64_t)v630, 0xBu, 2, (uint64_t)sub_1139B4);
  v116 = sub_4618(v115, "Utilizations");
  v117 = sub_4618(v116, "One Pass");
  v118 = *(_OWORD *)v117;
  v788 = *((_DWORD *)v117 + 4);
  v787 = v118;
  sub_10A068((uint64_t)&v789, (uint64_t)(v117 + 3));
  memset(v790, 0, sizeof(v790));
  sub_8B6C((char *)v790, (__int128 *)v117[8], (__int128 *)v117[9], 0xAAAAAAAAAAAAAAABLL * ((v117[9] - v117[8]) >> 3));
  sub_4368((int)v629, "L2 Cache Limiter");
  v119 = (uint64_t *)sub_445C((uint64_t)v629, 0xBu, 2, (uint64_t)sub_113A7C);
  v120 = sub_4618(v119, "Limiters");
  v121 = sub_4618(v120, "One Pass");
  v122 = *(_OWORD *)v121;
  v792 = *((_DWORD *)v121 + 4);
  v791 = v122;
  sub_10A068((uint64_t)&v793, (uint64_t)(v121 + 3));
  memset(v794, 0, sizeof(v794));
  sub_8B6C((char *)v794, (__int128 *)v121[8], (__int128 *)v121[9], 0xAAAAAAAAAAAAAAABLL * ((v121[9] - v121[8]) >> 3));
  sub_4368((int)v628, "L2 Cache Utilization");
  v123 = (uint64_t *)sub_445C((uint64_t)v628, 0xBu, 2, (uint64_t)sub_113B6C);
  v124 = sub_4618(v123, "Utilizations");
  v125 = sub_4618(v124, "One Pass");
  v126 = *(_OWORD *)v125;
  v796 = *((_DWORD *)v125 + 4);
  v795 = v126;
  sub_10A068((uint64_t)&v797, (uint64_t)(v125 + 3));
  memset(v798, 0, sizeof(v798));
  sub_8B6C((char *)v798, (__int128 *)v125[8], (__int128 *)v125[9], 0xAAAAAAAAAAAAAAABLL * ((v125[9] - v125[8]) >> 3));
  sub_4368((int)v627, "L1 Cache Limiter");
  v127 = (uint64_t *)sub_445C((uint64_t)v627, 0xFu, 3, (uint64_t)sub_113C34);
  v128 = sub_4618(v127, "Limiters");
  v129 = sub_4618(v128, "One Pass");
  v130 = *(_OWORD *)v129;
  v800 = *((_DWORD *)v129 + 4);
  v799 = v130;
  sub_10A068((uint64_t)&v801, (uint64_t)(v129 + 3));
  memset(v802, 0, sizeof(v802));
  sub_8B6C((char *)v802, (__int128 *)v129[8], (__int128 *)v129[9], 0xAAAAAAAAAAAAAAABLL * ((v129[9] - v129[8]) >> 3));
  sub_4368((int)v626, "L1 Cache Utilization");
  v131 = (uint64_t *)sub_445C((uint64_t)v626, 0xFu, 3, (uint64_t)sub_113DC0);
  v132 = sub_4618(v131, "Utilizations");
  v133 = sub_4618(v132, "One Pass");
  v134 = *(_OWORD *)v133;
  v804 = *((_DWORD *)v133 + 4);
  v803 = v134;
  sub_10A068((uint64_t)&v805, (uint64_t)(v133 + 3));
  memset(v806, 0, sizeof(v806));
  sub_8B6C((char *)v806, (__int128 *)v133[8], (__int128 *)v133[9], 0xAAAAAAAAAAAAAAABLL * ((v133[9] - v133[8]) >> 3));
  sub_4368((int)v625, "Buffer Load Limiter");
  v135 = sub_454C((uint64_t)v625, 0xBu, 2, 0xCuLL, 2, (uint64_t)sub_113F04);
  v136 = (uint64_t *)sub_454C(v135, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_113FF0);
  v137 = sub_4618(v136, "Limiters");
  v138 = sub_4618(v137, "One Pass");
  v139 = *(_OWORD *)v138;
  v808 = *((_DWORD *)v138 + 4);
  v807 = v139;
  sub_10A068((uint64_t)&v809, (uint64_t)(v138 + 3));
  memset(v810, 0, sizeof(v810));
  sub_8B6C((char *)v810, (__int128 *)v138[8], (__int128 *)v138[9], 0xAAAAAAAAAAAAAAABLL * ((v138[9] - v138[8]) >> 3));
  sub_4368((int)v624, "Buffer Load Utilization");
  v140 = (uint64_t *)sub_454C((uint64_t)v624, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_114104);
  v141 = sub_4618(v140, "Utilizations");
  v142 = sub_4618(v141, "One Pass");
  v143 = *(_OWORD *)v142;
  v812 = *((_DWORD *)v142 + 4);
  v811 = v143;
  sub_10A068((uint64_t)&v813, (uint64_t)(v142 + 3));
  memset(v814, 0, sizeof(v814));
  sub_8B6C((char *)v814, (__int128 *)v142[8], (__int128 *)v142[9], 0xAAAAAAAAAAAAAAABLL * ((v142[9] - v142[8]) >> 3));
  sub_4368((int)v623, "Buffer L1 Load %");
  v144 = (uint64_t *)sub_445C((uint64_t)v623, 0xFu, 3, (uint64_t)sub_1141CC);
  v145 = sub_4618(v144, "L1 Access Breakdown");
  v146 = sub_4618(v145, "One Pass");
  v147 = *(_OWORD *)v146;
  v816 = *((_DWORD *)v146 + 4);
  v815 = v147;
  sub_10A068((uint64_t)&v817, (uint64_t)(v146 + 3));
  memset(v818, 0, sizeof(v818));
  sub_8B6C((char *)v818, (__int128 *)v146[8], (__int128 *)v146[9], 0xAAAAAAAAAAAAAAABLL * ((v146[9] - v146[8]) >> 3));
  sub_4368((int)v622, "Buffer Store Limiter");
  v148 = sub_454C((uint64_t)v622, 0xBu, 2, 0xCuLL, 2, (uint64_t)sub_11424C);
  v149 = (uint64_t *)sub_454C(v148, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_114338);
  v150 = sub_4618(v149, "Limiters");
  v151 = sub_4618(v150, "One Pass");
  v152 = *(_OWORD *)v151;
  v820 = *((_DWORD *)v151 + 4);
  v819 = v152;
  sub_10A068((uint64_t)&v821, (uint64_t)(v151 + 3));
  memset(v822, 0, sizeof(v822));
  sub_8B6C((char *)v822, (__int128 *)v151[8], (__int128 *)v151[9], 0xAAAAAAAAAAAAAAABLL * ((v151[9] - v151[8]) >> 3));
  sub_4368((int)v621, "Buffer Store Utilization");
  v153 = (uint64_t *)sub_454C((uint64_t)v621, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_11444C);
  v154 = sub_4618(v153, "Utilizations");
  v155 = sub_4618(v154, "One Pass");
  v156 = *(_OWORD *)v155;
  v824 = *((_DWORD *)v155 + 4);
  v823 = v156;
  sub_10A068((uint64_t)&v825, (uint64_t)(v155 + 3));
  memset(v826, 0, sizeof(v826));
  sub_8B6C((char *)v826, (__int128 *)v155[8], (__int128 *)v155[9], 0xAAAAAAAAAAAAAAABLL * ((v155[9] - v155[8]) >> 3));
  sub_4368((int)v620, "Buffer L1 Store %");
  v157 = (uint64_t *)sub_445C((uint64_t)v620, 0xFu, 3, (uint64_t)sub_114514);
  v158 = sub_4618(v157, "L1 Access Breakdown");
  v159 = sub_4618(v158, "One Pass");
  v160 = *(_OWORD *)v159;
  v828 = *((_DWORD *)v159 + 4);
  v827 = v160;
  sub_10A068((uint64_t)&v829, (uint64_t)(v159 + 3));
  memset(v830, 0, sizeof(v830));
  sub_8B6C((char *)v830, (__int128 *)v159[8], (__int128 *)v159[9], 0xAAAAAAAAAAAAAAABLL * ((v159[9] - v159[8]) >> 3));
  sub_4368((int)v619, "Threadgroup Load Limiter");
  v161 = sub_454C((uint64_t)v619, 0xBu, 2, 0xCuLL, 2, (uint64_t)sub_114594);
  v162 = (uint64_t *)sub_454C(v161, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_11465C);
  v163 = sub_4618(v162, "Limiters");
  v164 = sub_4618(v163, "One Pass");
  v165 = *(_OWORD *)v164;
  v832 = *((_DWORD *)v164 + 4);
  v831 = v165;
  sub_10A068((uint64_t)&v833, (uint64_t)(v164 + 3));
  memset(v834, 0, sizeof(v834));
  sub_8B6C((char *)v834, (__int128 *)v164[8], (__int128 *)v164[9], 0xAAAAAAAAAAAAAAABLL * ((v164[9] - v164[8]) >> 3));
  sub_4368((int)v618, "Threadgroup Load Utilization");
  v166 = (uint64_t *)sub_454C((uint64_t)v618, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_11474C);
  v167 = sub_4618(v166, "Utilizations");
  v168 = sub_4618(v167, "One Pass");
  v169 = *(_OWORD *)v168;
  v836 = *((_DWORD *)v168 + 4);
  v835 = v169;
  sub_10A068((uint64_t)&v837, (uint64_t)(v168 + 3));
  memset(v838, 0, sizeof(v838));
  sub_8B6C((char *)v838, (__int128 *)v168[8], (__int128 *)v168[9], 0xAAAAAAAAAAAAAAABLL * ((v168[9] - v168[8]) >> 3));
  sub_4368((int)v617, "Threadgroup L1 Load %");
  v170 = (uint64_t *)sub_445C((uint64_t)v617, 0xFu, 3, (uint64_t)sub_114814);
  v171 = sub_4618(v170, "L1 Access Breakdown");
  v172 = sub_4618(v171, "One Pass");
  v173 = *(_OWORD *)v172;
  v840 = *((_DWORD *)v172 + 4);
  v839 = v173;
  sub_10A068((uint64_t)&v841, (uint64_t)(v172 + 3));
  memset(v842, 0, sizeof(v842));
  sub_8B6C((char *)v842, (__int128 *)v172[8], (__int128 *)v172[9], 0xAAAAAAAAAAAAAAABLL * ((v172[9] - v172[8]) >> 3));
  sub_4368((int)v616, "Threadgroup Store Limiter");
  v174 = sub_454C((uint64_t)v616, 0xBu, 2, 0xCuLL, 2, (uint64_t)sub_114894);
  v175 = (uint64_t *)sub_454C(v174, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_11495C);
  v176 = sub_4618(v175, "Limiters");
  v177 = sub_4618(v176, "One Pass");
  v178 = *(_OWORD *)v177;
  v844 = *((_DWORD *)v177 + 4);
  v843 = v178;
  sub_10A068((uint64_t)&v845, (uint64_t)(v177 + 3));
  memset(v846, 0, sizeof(v846));
  sub_8B6C((char *)v846, (__int128 *)v177[8], (__int128 *)v177[9], 0xAAAAAAAAAAAAAAABLL * ((v177[9] - v177[8]) >> 3));
  sub_4368((int)v615, "Threadgroup Store Utilization");
  v179 = (uint64_t *)sub_454C((uint64_t)v615, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_114A4C);
  v180 = sub_4618(v179, "Utilizations");
  v181 = sub_4618(v180, "One Pass");
  v182 = *(_OWORD *)v181;
  v848 = *((_DWORD *)v181 + 4);
  v847 = v182;
  sub_10A068((uint64_t)&v849, (uint64_t)(v181 + 3));
  memset(v850, 0, sizeof(v850));
  sub_8B6C((char *)v850, (__int128 *)v181[8], (__int128 *)v181[9], 0xAAAAAAAAAAAAAAABLL * ((v181[9] - v181[8]) >> 3));
  sub_4368((int)v614, "Threadgroup L1 Store %");
  v183 = (uint64_t *)sub_445C((uint64_t)v614, 0xFu, 3, (uint64_t)sub_114B14);
  v184 = sub_4618(v183, "L1 Access Breakdown");
  v185 = sub_4618(v184, "One Pass");
  v186 = *(_OWORD *)v185;
  v852 = *((_DWORD *)v185 + 4);
  v851 = v186;
  sub_10A068((uint64_t)&v853, (uint64_t)(v185 + 3));
  memset(v854, 0, sizeof(v854));
  sub_8B6C((char *)v854, (__int128 *)v185[8], (__int128 *)v185[9], 0xAAAAAAAAAAAAAAABLL * ((v185[9] - v185[8]) >> 3));
  sub_4368((int)v613, "Threadgroup Atomic Limiter");
  v187 = (uint64_t *)sub_454C((uint64_t)v613, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_114B94);
  v188 = sub_4618(v187, "Limiters");
  v189 = sub_4618(v188, "One Pass");
  v190 = *(_OWORD *)v189;
  v856 = *((_DWORD *)v189 + 4);
  v855 = v190;
  sub_10A068((uint64_t)&v857, (uint64_t)(v189 + 3));
  memset(v858, 0, sizeof(v858));
  sub_8B6C((char *)v858, (__int128 *)v189[8], (__int128 *)v189[9], 0xAAAAAAAAAAAAAAABLL * ((v189[9] - v189[8]) >> 3));
  sub_4368((int)v612, "Threadgroup Atomic Utilization");
  v191 = (uint64_t *)sub_454C((uint64_t)v612, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_114C44);
  v192 = sub_4618(v191, "Utilizations");
  v193 = sub_4618(v192, "One Pass");
  v194 = *(_OWORD *)v193;
  v860 = *((_DWORD *)v193 + 4);
  v859 = v194;
  sub_10A068((uint64_t)&v861, (uint64_t)(v193 + 3));
  memset(v862, 0, sizeof(v862));
  sub_8B6C((char *)v862, (__int128 *)v193[8], (__int128 *)v193[9], 0xAAAAAAAAAAAAAAABLL * ((v193[9] - v193[8]) >> 3));
  sub_4368((int)v611, "GPR L1 Read %");
  v195 = (uint64_t *)sub_454C((uint64_t)v611, 0xFu, 3, 0x11uLL, 2, (uint64_t)sub_114CCC);
  v196 = sub_4618(v195, "L1 Access Breakdown");
  v197 = sub_4618(v196, "One Pass");
  v198 = *(_OWORD *)v197;
  v864 = *((_DWORD *)v197 + 4);
  v863 = v198;
  sub_10A068((uint64_t)&v865, (uint64_t)(v197 + 3));
  memset(v866, 0, sizeof(v866));
  sub_8B6C((char *)v866, (__int128 *)v197[8], (__int128 *)v197[9], 0xAAAAAAAAAAAAAAABLL * ((v197[9] - v197[8]) >> 3));
  sub_4368((int)v610, "GPR L1 Write %");
  v199 = (uint64_t *)sub_454C((uint64_t)v610, 0xFu, 3, 0x11uLL, 2, (uint64_t)sub_114D4C);
  v200 = sub_4618(v199, "L1 Access Breakdown");
  v201 = sub_4618(v200, "One Pass");
  v202 = *(_OWORD *)v201;
  v868 = *((_DWORD *)v201 + 4);
  v867 = v202;
  sub_10A068((uint64_t)&v869, (uint64_t)(v201 + 3));
  memset(v870, 0, sizeof(v870));
  sub_8B6C((char *)v870, (__int128 *)v201[8], (__int128 *)v201[9], 0xAAAAAAAAAAAAAAABLL * ((v201[9] - v201[8]) >> 3));
  sub_4368((int)v609, "Stack L1 Load %");
  v203 = (uint64_t *)sub_445C((uint64_t)v609, 0xFu, 3, (uint64_t)sub_114DCC);
  v204 = sub_4618(v203, "L1 Access Breakdown");
  v205 = sub_4618(v204, "One Pass");
  v206 = *(_OWORD *)v205;
  v872 = *((_DWORD *)v205 + 4);
  v871 = v206;
  sub_10A068((uint64_t)&v873, (uint64_t)(v205 + 3));
  memset(v874, 0, sizeof(v874));
  sub_8B6C((char *)v874, (__int128 *)v205[8], (__int128 *)v205[9], 0xAAAAAAAAAAAAAAABLL * ((v205[9] - v205[8]) >> 3));
  sub_4368((int)v608, "Stack L1 Store %");
  v207 = (uint64_t *)sub_445C((uint64_t)v608, 0xFu, 3, (uint64_t)sub_114E4C);
  v208 = sub_4618(v207, "L1 Access Breakdown");
  v209 = sub_4618(v208, "One Pass");
  v210 = *(_OWORD *)v209;
  v876 = *((_DWORD *)v209 + 4);
  v875 = v210;
  sub_10A068((uint64_t)&v877, (uint64_t)(v209 + 3));
  memset(v878, 0, sizeof(v878));
  sub_8B6C((char *)v878, (__int128 *)v209[8], (__int128 *)v209[9], 0xAAAAAAAAAAAAAAABLL * ((v209[9] - v209[8]) >> 3));
  sub_4368((int)v607, "Imageblock L1 Load %");
  v211 = (uint64_t *)sub_445C((uint64_t)v607, 0xFu, 3, (uint64_t)sub_114ECC);
  v212 = sub_4618(v211, "L1 Access Breakdown");
  v213 = sub_4618(v212, "One Pass");
  v214 = *(_OWORD *)v213;
  v880 = *((_DWORD *)v213 + 4);
  v879 = v214;
  sub_10A068((uint64_t)&v881, (uint64_t)(v213 + 3));
  memset(v882, 0, sizeof(v882));
  sub_8B6C((char *)v882, (__int128 *)v213[8], (__int128 *)v213[9], 0xAAAAAAAAAAAAAAABLL * ((v213[9] - v213[8]) >> 3));
  sub_4368((int)v606, "Imageblock L1 Store %");
  v215 = (uint64_t *)sub_445C((uint64_t)v606, 0xFu, 3, (uint64_t)sub_114F74);
  v216 = sub_4618(v215, "L1 Access Breakdown");
  v217 = sub_4618(v216, "One Pass");
  v218 = *(_OWORD *)v217;
  v884 = *((_DWORD *)v217 + 4);
  v883 = v218;
  sub_10A068((uint64_t)&v885, (uint64_t)(v217 + 3));
  memset(v886, 0, sizeof(v886));
  sub_8B6C((char *)v886, (__int128 *)v217[8], (__int128 *)v217[9], 0xAAAAAAAAAAAAAAABLL * ((v217[9] - v217[8]) >> 3));
  sub_4368((int)v605, "Raytracing Scratch L1 Load %");
  v219 = (uint64_t *)sub_445C((uint64_t)v605, 0xFu, 3, (uint64_t)sub_11501C);
  v220 = sub_4618(v219, "L1 Access Breakdown");
  v221 = sub_4618(v220, "One Pass");
  v222 = *(_OWORD *)v221;
  v888 = *((_DWORD *)v221 + 4);
  v887 = v222;
  sub_10A068((uint64_t)&v889, (uint64_t)(v221 + 3));
  memset(v890, 0, sizeof(v890));
  sub_8B6C((char *)v890, (__int128 *)v221[8], (__int128 *)v221[9], 0xAAAAAAAAAAAAAAABLL * ((v221[9] - v221[8]) >> 3));
  sub_4368((int)v604, "Raytracing Scratch L1 Store %");
  v223 = (uint64_t *)sub_445C((uint64_t)v604, 0xFu, 3, (uint64_t)sub_11509C);
  v224 = sub_4618(v223, "L1 Access Breakdown");
  v225 = sub_4618(v224, "One Pass");
  v226 = *(_OWORD *)v225;
  v892 = *((_DWORD *)v225 + 4);
  v891 = v226;
  sub_10A068((uint64_t)&v893, (uint64_t)(v225 + 3));
  memset(v894, 0, sizeof(v894));
  sub_8B6C((char *)v894, (__int128 *)v225[8], (__int128 *)v225[9], 0xAAAAAAAAAAAAAAABLL * ((v225[9] - v225[8]) >> 3));
  sub_4368((int)v603, "Other L1 Loads %");
  v227 = (uint64_t *)sub_445C((uint64_t)v603, 0xFu, 3, (uint64_t)sub_11511C);
  v228 = sub_4618(v227, "L1 Access Breakdown");
  v229 = sub_4618(v228, "One Pass");
  v230 = *(_OWORD *)v229;
  v896 = *((_DWORD *)v229 + 4);
  v895 = v230;
  sub_10A068((uint64_t)&v897, (uint64_t)(v229 + 3));
  memset(v898, 0, sizeof(v898));
  sub_8B6C((char *)v898, (__int128 *)v229[8], (__int128 *)v229[9], 0xAAAAAAAAAAAAAAABLL * ((v229[9] - v229[8]) >> 3));
  sub_4368((int)v602, "Other L1 Stores %");
  v231 = (uint64_t *)sub_445C((uint64_t)v602, 0xFu, 3, (uint64_t)sub_1151C4);
  v232 = sub_4618(v231, "L1 Access Breakdown");
  v233 = sub_4618(v232, "One Pass");
  v234 = *(_OWORD *)v233;
  v900 = *((_DWORD *)v233 + 4);
  v899 = v234;
  sub_10A068((uint64_t)&v901, (uint64_t)(v233 + 3));
  memset(v902, 0, sizeof(v902));
  sub_8B6C((char *)v902, (__int128 *)v233[8], (__int128 *)v233[9], 0xAAAAAAAAAAAAAAABLL * ((v233[9] - v233[8]) >> 3));
  sub_4368((int)v601, "ALU Limiter");
  v235 = sub_454C((uint64_t)v601, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_11526C);
  v236 = (uint64_t *)sub_445C(v235, 0xFu, 3, (uint64_t)sub_11535C);
  v237 = sub_4618(v236, "Limiters");
  v238 = sub_4618(v237, "One Pass");
  v239 = *(_OWORD *)v238;
  v904 = *((_DWORD *)v238 + 4);
  v903 = v239;
  sub_10A068((uint64_t)&v905, (uint64_t)(v238 + 3));
  memset(v906, 0, sizeof(v906));
  sub_8B6C((char *)v906, (__int128 *)v238[8], (__int128 *)v238[9], 0xAAAAAAAAAAAAAAABLL * ((v238[9] - v238[8]) >> 3));
  sub_4368((int)v600, "ALU Utilization");
  v240 = sub_454C((uint64_t)v600, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_115570);
  v241 = (uint64_t *)sub_445C(v240, 0xFu, 3, (uint64_t)sub_115638);
  v242 = sub_4618(v241, "Utilizations");
  v243 = sub_4618(v242, "One Pass");
  v244 = *(_OWORD *)v243;
  v908 = *((_DWORD *)v243 + 4);
  v907 = v244;
  sub_10A068((uint64_t)&v909, (uint64_t)(v243 + 3));
  memset(v910, 0, sizeof(v910));
  sub_8B6C((char *)v910, (__int128 *)v243[8], (__int128 *)v243[9], 0xAAAAAAAAAAAAAAABLL * ((v243[9] - v243[8]) >> 3));
  sub_4368((int)v599, "Shader Core Limiter");
  v245 = (uint64_t *)sub_445C((uint64_t)v599, 0xFu, 3, (uint64_t)sub_1157AC);
  v246 = sub_4618(v245, "Limiters");
  v247 = sub_4618(v246, "One Pass");
  v248 = *(_OWORD *)v247;
  v912 = *((_DWORD *)v247 + 4);
  v911 = v248;
  sub_10A068((uint64_t)&v913, (uint64_t)(v247 + 3));
  memset(v914, 0, sizeof(v914));
  sub_8B6C((char *)v914, (__int128 *)v247[8], (__int128 *)v247[9], 0xAAAAAAAAAAAAAAABLL * ((v247[9] - v247[8]) >> 3));
  sub_4368((int)v598, "Shader Core Utilization");
  v249 = (uint64_t *)sub_445C((uint64_t)v598, 0xFu, 3, (uint64_t)sub_115A38);
  v250 = sub_4618(v249, "Utilizations");
  v251 = sub_4618(v250, "One Pass");
  v252 = *(_OWORD *)v251;
  v916 = *((_DWORD *)v251 + 4);
  v915 = v252;
  sub_10A068((uint64_t)&v917, (uint64_t)(v251 + 3));
  memset(v918, 0, sizeof(v918));
  sub_8B6C((char *)v918, (__int128 *)v251[8], (__int128 *)v251[9], 0xAAAAAAAAAAAAAAABLL * ((v251[9] - v251[8]) >> 3));
  sub_4368((int)v597, "Instructions Executed");
  v253 = (uint64_t *)sub_445C((uint64_t)v597, 0xFu, 3, (uint64_t)sub_115AF4);
  v254 = sub_4618(v253, "Absolute Statistics");
  v255 = *(_OWORD *)v254;
  v920 = *((_DWORD *)v254 + 4);
  v919 = v255;
  sub_10A068((uint64_t)&v921, (uint64_t)(v254 + 3));
  memset(v922, 0, sizeof(v922));
  sub_8B6C((char *)v922, (__int128 *)v254[8], (__int128 *)v254[9], 0xAAAAAAAAAAAAAAABLL * ((v254[9] - v254[8]) >> 3));
  sub_4368((int)v596, "Instructions Per Clock");
  v256 = (uint64_t *)sub_445C((uint64_t)v596, 0xFu, 3, (uint64_t)sub_115B6C);
  v257 = sub_4618(v256, "Instructions Per Clock");
  v258 = sub_4618(v257, "One Pass");
  v259 = *(_OWORD *)v258;
  v924 = *((_DWORD *)v258 + 4);
  v923 = v259;
  sub_10A068((uint64_t)&v925, (uint64_t)(v258 + 3));
  memset(v926, 0, sizeof(v926));
  sub_8B6C((char *)v926, (__int128 *)v258[8], (__int128 *)v258[9], 0xAAAAAAAAAAAAAAABLL * ((v258[9] - v258[8]) >> 3));
  sub_4368((int)v595, "F16 Limiter");
  v260 = (uint64_t *)sub_445C((uint64_t)v595, 0xFu, 3, (uint64_t)sub_115BF4);
  v261 = sub_4618(v260, "Limiters");
  v262 = sub_4618(v261, "One Pass");
  v263 = *(_OWORD *)v262;
  v928 = *((_DWORD *)v262 + 4);
  v927 = v263;
  sub_10A068((uint64_t)&v929, (uint64_t)(v262 + 3));
  memset(v930, 0, sizeof(v930));
  sub_8B6C((char *)v930, (__int128 *)v262[8], (__int128 *)v262[9], 0xAAAAAAAAAAAAAAABLL * ((v262[9] - v262[8]) >> 3));
  sub_4368((int)v594, "F16 Utilization");
  v264 = (uint64_t *)sub_445C((uint64_t)v594, 0xFu, 3, (uint64_t)sub_115CE4);
  v265 = sub_4618(v264, "Utilizations");
  v266 = sub_4618(v265, "One Pass");
  v267 = *(_OWORD *)v266;
  v932 = *((_DWORD *)v266 + 4);
  v931 = v267;
  sub_10A068((uint64_t)&v933, (uint64_t)(v266 + 3));
  memset(v934, 0, sizeof(v934));
  sub_8B6C((char *)v934, (__int128 *)v266[8], (__int128 *)v266[9], 0xAAAAAAAAAAAAAAABLL * ((v266[9] - v266[8]) >> 3));
  sub_4368((int)v593, "F32 Limiter");
  v268 = (uint64_t *)sub_445C((uint64_t)v593, 0xFu, 3, (uint64_t)sub_115DAC);
  v269 = sub_4618(v268, "Limiters");
  v270 = sub_4618(v269, "One Pass");
  v271 = *(_OWORD *)v270;
  v936 = *((_DWORD *)v270 + 4);
  v935 = v271;
  sub_10A068((uint64_t)&v937, (uint64_t)(v270 + 3));
  memset(v938, 0, sizeof(v938));
  sub_8B6C((char *)v938, (__int128 *)v270[8], (__int128 *)v270[9], 0xAAAAAAAAAAAAAAABLL * ((v270[9] - v270[8]) >> 3));
  sub_4368((int)v592, "F32 Utilization");
  v272 = (uint64_t *)sub_445C((uint64_t)v592, 0xFu, 3, (uint64_t)sub_115E9C);
  v273 = sub_4618(v272, "Utilizations");
  v274 = sub_4618(v273, "One Pass");
  v275 = *(_OWORD *)v274;
  v940 = *((_DWORD *)v274 + 4);
  v939 = v275;
  sub_10A068((uint64_t)&v941, (uint64_t)(v274 + 3));
  memset(v942, 0, sizeof(v942));
  sub_8B6C((char *)v942, (__int128 *)v274[8], (__int128 *)v274[9], 0xAAAAAAAAAAAAAAABLL * ((v274[9] - v274[8]) >> 3));
  sub_4368((int)v591, "IC Limiter");
  v276 = (uint64_t *)sub_445C((uint64_t)v591, 0xFu, 3, (uint64_t)sub_115F64);
  v277 = sub_4618(v276, "Limiters");
  v278 = sub_4618(v277, "One Pass");
  v279 = *(_OWORD *)v278;
  v944 = *((_DWORD *)v278 + 4);
  v943 = v279;
  sub_10A068((uint64_t)&v945, (uint64_t)(v278 + 3));
  memset(v946, 0, sizeof(v946));
  sub_8B6C((char *)v946, (__int128 *)v278[8], (__int128 *)v278[9], 0xAAAAAAAAAAAAAAABLL * ((v278[9] - v278[8]) >> 3));
  sub_4368((int)v590, "IC Utilization");
  v280 = (uint64_t *)sub_445C((uint64_t)v590, 0xFu, 3, (uint64_t)sub_11604C);
  v281 = sub_4618(v280, "Utilizations");
  v282 = sub_4618(v281, "One Pass");
  v283 = *(_OWORD *)v282;
  v948 = *((_DWORD *)v282 + 4);
  v947 = v283;
  sub_10A068((uint64_t)&v949, (uint64_t)(v282 + 3));
  memset(v950, 0, sizeof(v950));
  sub_8B6C((char *)v950, (__int128 *)v282[8], (__int128 *)v282[9], 0xAAAAAAAAAAAAAAABLL * ((v282[9] - v282[8]) >> 3));
  sub_4368((int)v589, "SCIB Limiter");
  v284 = (uint64_t *)sub_445C((uint64_t)v589, 0xFu, 3, (uint64_t)sub_116114);
  v285 = sub_4618(v284, "Limiters");
  v286 = sub_4618(v285, "One Pass");
  v287 = *(_OWORD *)v286;
  v952 = *((_DWORD *)v286 + 4);
  v951 = v287;
  sub_10A068((uint64_t)&v953, (uint64_t)(v286 + 3));
  memset(v954, 0, sizeof(v954));
  sub_8B6C((char *)v954, (__int128 *)v286[8], (__int128 *)v286[9], 0xAAAAAAAAAAAAAAABLL * ((v286[9] - v286[8]) >> 3));
  sub_4368((int)v588, "SCIB Utilization");
  v288 = (uint64_t *)sub_445C((uint64_t)v588, 0xFu, 3, (uint64_t)sub_116204);
  v289 = sub_4618(v288, "Utilizations");
  v290 = sub_4618(v289, "One Pass");
  v291 = *(_OWORD *)v290;
  v956 = *((_DWORD *)v290 + 4);
  v955 = v291;
  sub_10A068((uint64_t)&v957, (uint64_t)(v290 + 3));
  memset(v958, 0, sizeof(v958));
  sub_8B6C((char *)v958, (__int128 *)v290[8], (__int128 *)v290[9], 0xAAAAAAAAAAAAAAABLL * ((v290[9] - v290[8]) >> 3));
  sub_4368((int)v587, "Control Flow Limiter");
  v292 = (uint64_t *)sub_445C((uint64_t)v587, 0xFu, 3, (uint64_t)sub_1162CC);
  v293 = sub_4618(v292, "Limiters");
  v294 = sub_4618(v293, "One Pass");
  v295 = *(_OWORD *)v294;
  v960 = *((_DWORD *)v294 + 4);
  v959 = v295;
  sub_10A068((uint64_t)&v961, (uint64_t)(v294 + 3));
  memset(v962, 0, sizeof(v962));
  sub_8B6C((char *)v962, (__int128 *)v294[8], (__int128 *)v294[9], 0xAAAAAAAAAAAAAAABLL * ((v294[9] - v294[8]) >> 3));
  sub_4368((int)v586, "Control Flow Utilization");
  v296 = (uint64_t *)sub_445C((uint64_t)v586, 0xFu, 3, (uint64_t)sub_1163BC);
  v297 = sub_4618(v296, "Utilizations");
  v298 = sub_4618(v297, "One Pass");
  v299 = *(_OWORD *)v298;
  v964 = *((_DWORD *)v298 + 4);
  v963 = v299;
  sub_10A068((uint64_t)&v965, (uint64_t)(v298 + 3));
  memset(v966, 0, sizeof(v966));
  sub_8B6C((char *)v966, (__int128 *)v298[8], (__int128 *)v298[9], 0xAAAAAAAAAAAAAAABLL * ((v298[9] - v298[8]) >> 3));
  sub_4368((int)v585, "Address Generation Limiter");
  v300 = (uint64_t *)sub_445C((uint64_t)v585, 0xFu, 3, (uint64_t)sub_116484);
  v301 = sub_4618(v300, "Limiters");
  v302 = sub_4618(v301, "One Pass");
  v303 = *(_OWORD *)v302;
  v968 = *((_DWORD *)v302 + 4);
  v967 = v303;
  sub_10A068((uint64_t)&v969, (uint64_t)(v302 + 3));
  memset(v970, 0, sizeof(v970));
  sub_8B6C((char *)v970, (__int128 *)v302[8], (__int128 *)v302[9], 0xAAAAAAAAAAAAAAABLL * ((v302[9] - v302[8]) >> 3));
  sub_4368((int)v584, "Address Generation Utilization");
  v304 = (uint64_t *)sub_445C((uint64_t)v584, 0xFu, 3, (uint64_t)sub_116574);
  v305 = sub_4618(v304, "Utilizations");
  v306 = sub_4618(v305, "One Pass");
  v307 = *(_OWORD *)v306;
  v972 = *((_DWORD *)v306 + 4);
  v971 = v307;
  sub_10A068((uint64_t)&v973, (uint64_t)(v306 + 3));
  memset(v974, 0, sizeof(v974));
  sub_8B6C((char *)v974, (__int128 *)v306[8], (__int128 *)v306[9], 0xAAAAAAAAAAAAAAABLL * ((v306[9] - v306[8]) >> 3));
  sub_4368((int)v583, "Texture Cache Limiter");
  v308 = (uint64_t *)sub_445C((uint64_t)v583, 0xFu, 3, (uint64_t)sub_11663C);
  v309 = sub_4618(v308, "Limiters");
  v310 = sub_4618(v309, "One Pass");
  v311 = *(_OWORD *)v310;
  v976 = *((_DWORD *)v310 + 4);
  v975 = v311;
  sub_10A068((uint64_t)&v977, (uint64_t)(v310 + 3));
  memset(v978, 0, sizeof(v978));
  sub_8B6C((char *)v978, (__int128 *)v310[8], (__int128 *)v310[9], 0xAAAAAAAAAAAAAAABLL * ((v310[9] - v310[8]) >> 3));
  sub_4368((int)v582, "Texture Cache Limiter");
  v312 = sub_454C((uint64_t)v582, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_11663C);
  v313 = (uint64_t *)sub_445C(v312, 0xFu, 3, (uint64_t)sub_11672C);
  v314 = sub_4618(v313, "Limiters");
  v315 = sub_4618(v314, "One Pass");
  v316 = *(_OWORD *)v315;
  v980 = *((_DWORD *)v315 + 4);
  v979 = v316;
  sub_10A068((uint64_t)&v981, (uint64_t)(v315 + 3));
  memset(v982, 0, sizeof(v982));
  sub_8B6C((char *)v982, (__int128 *)v315[8], (__int128 *)v315[9], 0xAAAAAAAAAAAAAAABLL * ((v315[9] - v315[8]) >> 3));
  sub_4368((int)v581, "Texture Cache Utilization");
  v317 = (uint64_t *)sub_445C((uint64_t)v581, 0xFu, 3, (uint64_t)sub_1167DC);
  v318 = sub_4618(v317, "Utilizations");
  v319 = sub_4618(v318, "One Pass");
  v320 = *(_OWORD *)v319;
  v984 = *((_DWORD *)v319 + 4);
  v983 = v320;
  sub_10A068((uint64_t)&v985, (uint64_t)(v319 + 3));
  memset(v986, 0, sizeof(v986));
  sub_8B6C((char *)v986, (__int128 *)v319[8], (__int128 *)v319[9], 0xAAAAAAAAAAAAAAABLL * ((v319[9] - v319[8]) >> 3));
  sub_4368((int)v580, "Texture Cache Utilization");
  v321 = sub_454C((uint64_t)v580, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_1167DC);
  v322 = (uint64_t *)sub_445C(v321, 0xFu, 3, (uint64_t)sub_1168A4);
  v323 = sub_4618(v322, "Utilizations");
  v324 = sub_4618(v323, "One Pass");
  v325 = *(_OWORD *)v324;
  v988 = *((_DWORD *)v324 + 4);
  v987 = v325;
  sub_10A068((uint64_t)&v989, (uint64_t)(v324 + 3));
  memset(v990, 0, sizeof(v990));
  sub_8B6C((char *)v990, (__int128 *)v324[8], (__int128 *)v324[9], 0xAAAAAAAAAAAAAAABLL * ((v324[9] - v324[8]) >> 3));
  sub_4368((int)v579, "Texture Read Limiter");
  v326 = (uint64_t *)sub_445C((uint64_t)v579, 0xFu, 3, (uint64_t)sub_11696C);
  v327 = sub_4618(v326, "Limiters");
  v328 = sub_4618(v327, "One Pass");
  v329 = *(_OWORD *)v328;
  v992 = *((_DWORD *)v328 + 4);
  v991 = v329;
  sub_10A068((uint64_t)&v993, (uint64_t)(v328 + 3));
  memset(v994, 0, sizeof(v994));
  sub_8B6C((char *)v994, (__int128 *)v328[8], (__int128 *)v328[9], 0xAAAAAAAAAAAAAAABLL * ((v328[9] - v328[8]) >> 3));
  sub_4368((int)v578, "Texture Read Limiter");
  v330 = sub_454C((uint64_t)v578, 0xBu, 2, 0xCuLL, 2, (uint64_t)sub_116A5C);
  v331 = sub_454C(v330, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_11696C);
  v332 = (uint64_t *)sub_445C(v331, 0xFu, 3, (uint64_t)sub_116B24);
  v333 = sub_4618(v332, "Limiters");
  v334 = sub_4618(v333, "One Pass");
  v335 = *(_OWORD *)v334;
  v996 = *((_DWORD *)v334 + 4);
  v995 = v335;
  sub_10A068((uint64_t)&v997, (uint64_t)(v334 + 3));
  memset(v998, 0, sizeof(v998));
  sub_8B6C((char *)v998, (__int128 *)v334[8], (__int128 *)v334[9], 0xAAAAAAAAAAAAAAABLL * ((v334[9] - v334[8]) >> 3));
  sub_4368((int)v577, "Texture Read Utilization");
  v336 = (uint64_t *)sub_445C((uint64_t)v577, 0xFu, 3, (uint64_t)sub_116B28);
  v337 = sub_4618(v336, "Utilizations");
  v338 = sub_4618(v337, "One Pass");
  v339 = *(_OWORD *)v338;
  v1000 = *((_DWORD *)v338 + 4);
  v999 = v339;
  sub_10A068((uint64_t)&v1001, (uint64_t)(v338 + 3));
  memset(v1002, 0, sizeof(v1002));
  sub_8B6C((char *)v1002, (__int128 *)v338[8], (__int128 *)v338[9], 0xAAAAAAAAAAAAAAABLL * ((v338[9] - v338[8]) >> 3));
  sub_4368((int)v576, "Texture Read Utilization");
  v340 = sub_454C((uint64_t)v576, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_116B28);
  v341 = (uint64_t *)sub_445C(v340, 0xFu, 3, (uint64_t)sub_116BF0);
  v342 = sub_4618(v341, "Utilizations");
  v343 = sub_4618(v342, "One Pass");
  v344 = *(_OWORD *)v343;
  v1004 = *((_DWORD *)v343 + 4);
  v1003 = v344;
  sub_10A068((uint64_t)&v1005, (uint64_t)(v343 + 3));
  memset(v1006, 0, sizeof(v1006));
  sub_8B6C((char *)v1006, (__int128 *)v343[8], (__int128 *)v343[9], 0xAAAAAAAAAAAAAAABLL * ((v343[9] - v343[8]) >> 3));
  sub_4368((int)v575, "Texture Write Limiter");
  v345 = (uint64_t *)sub_445C((uint64_t)v575, 0xBu, 2, (uint64_t)sub_116DE0);
  v346 = sub_4618(v345, "Limiters");
  v347 = sub_4618(v346, "One Pass");
  v348 = *(_OWORD *)v347;
  v1008 = *((_DWORD *)v347 + 4);
  v1007 = v348;
  sub_10A068((uint64_t)&v1009, (uint64_t)(v347 + 3));
  memset(v1010, 0, sizeof(v1010));
  sub_8B6C((char *)v1010, (__int128 *)v347[8], (__int128 *)v347[9], 0xAAAAAAAAAAAAAAABLL * ((v347[9] - v347[8]) >> 3));
  sub_4368((int)v574, "Texture Write Utilization");
  v349 = (uint64_t *)sub_445C((uint64_t)v574, 0xBu, 2, (uint64_t)sub_116ED0);
  v350 = sub_4618(v349, "Utilizations");
  v351 = sub_4618(v350, "One Pass");
  v352 = *(_OWORD *)v351;
  v1012 = *((_DWORD *)v351 + 4);
  v1011 = v352;
  sub_10A068((uint64_t)&v1013, (uint64_t)(v351 + 3));
  memset(v1014, 0, sizeof(v1014));
  sub_8B6C((char *)v1014, (__int128 *)v351[8], (__int128 *)v351[9], 0xAAAAAAAAAAAAAAABLL * ((v351[9] - v351[8]) >> 3));
  sub_4368((int)v573, "Total Occupancy");
  v353 = (uint64_t *)sub_445C((uint64_t)v573, 0xBu, 2, (uint64_t)sub_116F98);
  v354 = sub_4618(v353, "Thread Occupancy");
  v355 = sub_4618(v354, "One Pass");
  v356 = *(_OWORD *)v355;
  v1016 = *((_DWORD *)v355 + 4);
  v1015 = v356;
  sub_10A068((uint64_t)&v1017, (uint64_t)(v355 + 3));
  memset(v1018, 0, sizeof(v1018));
  sub_8B6C((char *)v1018, (__int128 *)v355[8], (__int128 *)v355[9], 0xAAAAAAAAAAAAAAABLL * ((v355[9] - v355[8]) >> 3));
  sub_4368((int)v572, "Total Simdgroups Inflight Per Shader Core");
  v357 = (uint64_t *)sub_445C((uint64_t)v572, 0xBu, 2, (uint64_t)sub_11703C);
  v358 = sub_4618(v357, "One Pass");
  v359 = *(_OWORD *)v358;
  v1020 = *((_DWORD *)v358 + 4);
  v1019 = v359;
  sub_10A068((uint64_t)&v1021, (uint64_t)(v358 + 3));
  memset(v1022, 0, sizeof(v1022));
  sub_8B6C((char *)v1022, (__int128 *)v358[8], (__int128 *)v358[9], 0xAAAAAAAAAAAAAAABLL * ((v358[9] - v358[8]) >> 3));
  sub_4368((int)v571, "Vertex Occupancy");
  v360 = (uint64_t *)sub_445C((uint64_t)v571, 0xBu, 2, (uint64_t)sub_1170BC);
  v361 = sub_4618(v360, "Thread Occupancy");
  v362 = sub_4618(v361, "One Pass");
  v363 = *(_OWORD *)v362;
  v1024 = *((_DWORD *)v362 + 4);
  v1023 = v363;
  sub_10A068((uint64_t)&v1025, (uint64_t)(v362 + 3));
  memset(v1026, 0, sizeof(v1026));
  sub_8B6C((char *)v1026, (__int128 *)v362[8], (__int128 *)v362[9], 0xAAAAAAAAAAAAAAABLL * ((v362[9] - v362[8]) >> 3));
  sub_4368((int)v570, "Vertex Simdgroups Inflight Per Shader Core");
  v364 = sub_454C((uint64_t)v570, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_117120);
  v365 = (uint64_t *)sub_445C(v364, 0xFu, 3, (uint64_t)sub_1171B8);
  v366 = sub_4618(v365, "One Pass");
  v367 = *(_OWORD *)v366;
  v1028 = *((_DWORD *)v366 + 4);
  v1027 = v367;
  sub_10A068((uint64_t)&v1029, (uint64_t)(v366 + 3));
  memset(v1030, 0, sizeof(v1030));
  sub_8B6C((char *)v1030, (__int128 *)v366[8], (__int128 *)v366[9], 0xAAAAAAAAAAAAAAABLL * ((v366[9] - v366[8]) >> 3));
  sub_4368((int)v569, "Fragment Occupancy");
  v368 = (uint64_t *)sub_445C((uint64_t)v569, 0xBu, 2, (uint64_t)sub_1172DC);
  v369 = sub_4618(v368, "Thread Occupancy");
  v370 = sub_4618(v369, "One Pass");
  v371 = *(_OWORD *)v370;
  v1032 = *((_DWORD *)v370 + 4);
  v1031 = v371;
  sub_10A068((uint64_t)&v1033, (uint64_t)(v370 + 3));
  memset(v1034, 0, sizeof(v1034));
  sub_8B6C((char *)v1034, (__int128 *)v370[8], (__int128 *)v370[9], 0xAAAAAAAAAAAAAAABLL * ((v370[9] - v370[8]) >> 3));
  sub_4368((int)v568, "Fragment Simdgroups Inflight Per Shader Core");
  v372 = sub_454C((uint64_t)v568, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_117340);
  v373 = (uint64_t *)sub_445C(v372, 0xFu, 3, (uint64_t)sub_1173D8);
  v374 = sub_4618(v373, "One Pass");
  v375 = *(_OWORD *)v374;
  v1036 = *((_DWORD *)v374 + 4);
  v1035 = v375;
  sub_10A068((uint64_t)&v1037, (uint64_t)(v374 + 3));
  memset(v1038, 0, sizeof(v1038));
  sub_8B6C((char *)v1038, (__int128 *)v374[8], (__int128 *)v374[9], 0xAAAAAAAAAAAAAAABLL * ((v374[9] - v374[8]) >> 3));
  sub_4368((int)v567, "Compute Occupancy");
  v376 = (uint64_t *)sub_445C((uint64_t)v567, 0xBu, 2, (uint64_t)sub_117524);
  v377 = sub_4618(v376, "Thread Occupancy");
  v378 = sub_4618(v377, "One Pass");
  v379 = *(_OWORD *)v378;
  v1040 = *((_DWORD *)v378 + 4);
  v1039 = v379;
  sub_10A068((uint64_t)&v1041, (uint64_t)(v378 + 3));
  memset(v1042, 0, sizeof(v1042));
  sub_8B6C((char *)v1042, (__int128 *)v378[8], (__int128 *)v378[9], 0xAAAAAAAAAAAAAAABLL * ((v378[9] - v378[8]) >> 3));
  sub_4368((int)v566, "Compute Simdgroups Inflight Per Shader Core");
  v380 = sub_454C((uint64_t)v566, 0xBu, 2, 0xFuLL, 2, (uint64_t)sub_117588);
  v381 = (uint64_t *)sub_445C(v380, 0xFu, 3, (uint64_t)sub_117620);
  v382 = sub_4618(v381, "One Pass");
  v383 = *(_OWORD *)v382;
  v1044 = *((_DWORD *)v382 + 4);
  v1043 = v383;
  sub_10A068((uint64_t)&v1045, (uint64_t)(v382 + 3));
  memset(v1046, 0, sizeof(v1046));
  sub_8B6C((char *)v1046, (__int128 *)v382[8], (__int128 *)v382[9], 0xAAAAAAAAAAAAAAABLL * ((v382[9] - v382[8]) >> 3));
  sub_4368((int)v565, "Occupancy Manager Target");
  v384 = (uint64_t *)sub_445C((uint64_t)v565, 0xFu, 3, (uint64_t)sub_11776C);
  v385 = sub_4618(v384, "Thread Occupancy");
  v386 = sub_4618(v385, "One Pass");
  v387 = *(_OWORD *)v386;
  v1048 = *((_DWORD *)v386 + 4);
  v1047 = v387;
  sub_10A068((uint64_t)&v1049, (uint64_t)(v386 + 3));
  memset(v1050, 0, sizeof(v1050));
  sub_8B6C((char *)v1050, (__int128 *)v386[8], (__int128 *)v386[9], 0xAAAAAAAAAAAAAAABLL * ((v386[9] - v386[8]) >> 3));
  sub_4368((int)v564, "AF Bandwidth");
  v388 = sub_454C((uint64_t)v564, 0xBu, 2, 0xBuLL, 3, (uint64_t)sub_117894);
  v389 = sub_454C(v388, 0xCu, 2, 0xEuLL, 3, (uint64_t)sub_1178F8);
  v390 = sub_445C(v389, 0xEu, 4, (uint64_t)sub_1179AC);
  v391 = (uint64_t *)sub_4400(v390, 15, 2, (uint64_t)sub_1178F8);
  v392 = sub_4618(v391, "Memory Bandwidth");
  v393 = sub_4618(v392, "System Memory Bandwidth");
  v394 = sub_4618(v393, "One Pass");
  v395 = *(_OWORD *)v394;
  v1052 = *((_DWORD *)v394 + 4);
  v1051 = v395;
  sub_10A068((uint64_t)&v1053, (uint64_t)(v394 + 3));
  memset(v1054, 0, sizeof(v1054));
  sub_8B6C((char *)v1054, (__int128 *)v394[8], (__int128 *)v394[9], 0xAAAAAAAAAAAAAAABLL * ((v394[9] - v394[8]) >> 3));
  sub_4368((int)v563, "AF Read Bandwidth");
  v396 = sub_454C((uint64_t)v563, 0xBu, 2, 0xBuLL, 3, (uint64_t)sub_117A88);
  v397 = sub_454C(v396, 0xCu, 2, 0xEuLL, 3, (uint64_t)sub_117AEC);
  v398 = sub_445C(v397, 0xEu, 4, (uint64_t)sub_117B78);
  v399 = (uint64_t *)sub_4400(v398, 15, 2, (uint64_t)sub_117AEC);
  v400 = sub_4618(v399, "Memory Bandwidth");
  v401 = sub_4618(v400, "System Memory Bandwidth");
  v402 = sub_4618(v401, "One Pass");
  v403 = *(_OWORD *)v402;
  v1056 = *((_DWORD *)v402 + 4);
  v1055 = v403;
  sub_10A068((uint64_t)&v1057, (uint64_t)(v402 + 3));
  memset(v1058, 0, sizeof(v1058));
  sub_8B6C((char *)v1058, (__int128 *)v402[8], (__int128 *)v402[9], 0xAAAAAAAAAAAAAAABLL * ((v402[9] - v402[8]) >> 3));
  sub_4368((int)v562, "AF Write Bandwidth");
  v404 = (uint64_t *)sub_445C((uint64_t)v562, 0xBu, 2, (uint64_t)sub_117C04);
  v405 = sub_4618(v404, "Memory Bandwidth");
  v406 = sub_4618(v405, "System Memory Bandwidth");
  v407 = sub_4618(v406, "One Pass");
  v408 = *(_OWORD *)v407;
  v1060 = *((_DWORD *)v407 + 4);
  v1059 = v408;
  sub_10A068((uint64_t)&v1061, (uint64_t)(v407 + 3));
  memset(v1062, 0, sizeof(v1062));
  sub_8B6C((char *)v1062, (__int128 *)v407[8], (__int128 *)v407[9], 0xAAAAAAAAAAAAAAABLL * ((v407[9] - v407[8]) >> 3));
  sub_4368((int)v561, "L2 Bandwidth");
  v409 = (uint64_t *)sub_445C((uint64_t)v561, 0xBu, 2, (uint64_t)sub_117C5C);
  v410 = sub_4618(v409, "Memory Bandwidth");
  v411 = sub_4618(v410, "Internal Memory Bandwidth");
  v412 = sub_4618(v411, "One Pass");
  v413 = *(_OWORD *)v412;
  v1064 = *((_DWORD *)v412 + 4);
  v1063 = v413;
  sub_10A068((uint64_t)&v1065, (uint64_t)(v412 + 3));
  memset(v1066, 0, sizeof(v1066));
  sub_8B6C((char *)v1066, (__int128 *)v412[8], (__int128 *)v412[9], 0xAAAAAAAAAAAAAAABLL * ((v412[9] - v412[8]) >> 3));
  sub_4368((int)v560, "L1 Load Bandwidth");
  v414 = sub_454C((uint64_t)v560, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_117CC0);
  v415 = (uint64_t *)sub_445C(v414, 0xFu, 3, (uint64_t)sub_117D24);
  v416 = sub_4618(v415, "Memory Bandwidth");
  v417 = sub_4618(v416, "Internal Memory Bandwidth");
  v418 = sub_4618(v417, "One Pass");
  v419 = *(_OWORD *)v418;
  v1068 = *((_DWORD *)v418 + 4);
  v1067 = v419;
  sub_10A068((uint64_t)&v1069, (uint64_t)(v418 + 3));
  memset(v1070, 0, sizeof(v1070));
  sub_8B6C((char *)v1070, (__int128 *)v418[8], (__int128 *)v418[9], 0xAAAAAAAAAAAAAAABLL * ((v418[9] - v418[8]) >> 3));
  sub_4368((int)v559, "L1 Store Bandwidth");
  v420 = sub_454C((uint64_t)v559, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_117D70);
  v421 = (uint64_t *)sub_445C(v420, 0xFu, 3, (uint64_t)sub_117DD4);
  v422 = sub_4618(v421, "Memory Bandwidth");
  v423 = sub_4618(v422, "Internal Memory Bandwidth");
  v424 = sub_4618(v423, "One Pass");
  v425 = *(_OWORD *)v424;
  v1072 = *((_DWORD *)v424 + 4);
  v1071 = v425;
  sub_10A068((uint64_t)&v1073, (uint64_t)(v424 + 3));
  memset(v1074, 0, sizeof(v1074));
  sub_8B6C((char *)v1074, (__int128 *)v424[8], (__int128 *)v424[9], 0xAAAAAAAAAAAAAAABLL * ((v424[9] - v424[8]) >> 3));
  sub_4368((int)v558, "Threadgroup Memory Load Bandwidth");
  v426 = (uint64_t *)sub_454C((uint64_t)v558, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_117E20);
  v427 = sub_4618(v426, "Memory Bandwidth");
  v428 = sub_4618(v427, "Internal Memory Bandwidth");
  v429 = sub_4618(v428, "One Pass");
  v430 = *(_OWORD *)v429;
  v1076 = *((_DWORD *)v429 + 4);
  v1075 = v430;
  sub_10A068((uint64_t)&v1077, (uint64_t)(v429 + 3));
  memset(v1078, 0, sizeof(v1078));
  sub_8B6C((char *)v1078, (__int128 *)v429[8], (__int128 *)v429[9], 0xAAAAAAAAAAAAAAABLL * ((v429[9] - v429[8]) >> 3));
  sub_4368((int)v557, "Threadgroup Memory Store Bandwidth");
  v431 = (uint64_t *)sub_454C((uint64_t)v557, 0xDu, 2, 0xFuLL, 2, (uint64_t)sub_117E9C);
  v432 = sub_4618(v431, "Memory Bandwidth");
  v433 = sub_4618(v432, "Internal Memory Bandwidth");
  v434 = sub_4618(v433, "One Pass");
  v435 = *(_OWORD *)v434;
  v1080 = *((_DWORD *)v434 + 4);
  v1079 = v435;
  sub_10A068((uint64_t)&v1081, (uint64_t)(v434 + 3));
  memset(v1082, 0, sizeof(v1082));
  sub_8B6C((char *)v1082, (__int128 *)v434[8], (__int128 *)v434[9], 0xAAAAAAAAAAAAAAABLL * ((v434[9] - v434[8]) >> 3));
  sub_4368((int)v556, "Threadgroup Memory L1 Load Bandwidth");
  v436 = (uint64_t *)sub_445C((uint64_t)v556, 0xFu, 3, (uint64_t)sub_117E20);
  v437 = sub_4618(v436, "Memory Bandwidth");
  v438 = sub_4618(v437, "Internal Memory Bandwidth");
  v439 = sub_4618(v438, "One Pass");
  v440 = *(_OWORD *)v439;
  v1084 = *((_DWORD *)v439 + 4);
  v1083 = v440;
  sub_10A068((uint64_t)&v1085, (uint64_t)(v439 + 3));
  memset(v1086, 0, sizeof(v1086));
  sub_8B6C((char *)v1086, (__int128 *)v439[8], (__int128 *)v439[9], 0xAAAAAAAAAAAAAAABLL * ((v439[9] - v439[8]) >> 3));
  sub_4368((int)v555, "Threadgroup Memory L1 Store Bandwidth");
  v441 = (uint64_t *)sub_445C((uint64_t)v555, 0xFu, 3, (uint64_t)sub_117E9C);
  v442 = sub_4618(v441, "Memory Bandwidth");
  v443 = sub_4618(v442, "Internal Memory Bandwidth");
  v444 = sub_4618(v443, "One Pass");
  v445 = *(_OWORD *)v444;
  v1088 = *((_DWORD *)v444 + 4);
  v1087 = v445;
  sub_10A068((uint64_t)&v1089, (uint64_t)(v444 + 3));
  memset(v1090, 0, sizeof(v1090));
  sub_8B6C((char *)v1090, (__int128 *)v444[8], (__int128 *)v444[9], 0xAAAAAAAAAAAAAAABLL * ((v444[9] - v444[8]) >> 3));
  sub_4368((int)v554, "Imageblock L1 Load Bandwidth");
  v446 = (uint64_t *)sub_445C((uint64_t)v554, 0xFu, 3, (uint64_t)sub_117F18);
  v447 = sub_4618(v446, "Memory Bandwidth");
  v448 = sub_4618(v447, "Internal Memory Bandwidth");
  v449 = sub_4618(v448, "One Pass");
  v450 = *(_OWORD *)v449;
  v1092 = *((_DWORD *)v449 + 4);
  v1091 = v450;
  sub_10A068((uint64_t)&v1093, (uint64_t)(v449 + 3));
  memset(v1094, 0, sizeof(v1094));
  sub_8B6C((char *)v1094, (__int128 *)v449[8], (__int128 *)v449[9], 0xAAAAAAAAAAAAAAABLL * ((v449[9] - v449[8]) >> 3));
  sub_4368((int)v553, "Imageblock L1 Store Bandwidth");
  v451 = (uint64_t *)sub_445C((uint64_t)v553, 0xFu, 3, (uint64_t)sub_117FBC);
  v452 = sub_4618(v451, "Memory Bandwidth");
  v453 = sub_4618(v452, "Internal Memory Bandwidth");
  v454 = sub_4618(v453, "One Pass");
  v455 = *(_OWORD *)v454;
  v1096 = *((_DWORD *)v454 + 4);
  v1095 = v455;
  sub_10A068((uint64_t)&v1097, (uint64_t)(v454 + 3));
  memset(v1098, 0, sizeof(v1098));
  sub_8B6C((char *)v1098, (__int128 *)v454[8], (__int128 *)v454[9], 0xAAAAAAAAAAAAAAABLL * ((v454[9] - v454[8]) >> 3));
  sub_4368((int)v552, "Raytracing Scratch L1 Load Bandwidth");
  v456 = (uint64_t *)sub_445C((uint64_t)v552, 0xFu, 3, (uint64_t)sub_118060);
  v457 = sub_4618(v456, "Memory Bandwidth");
  v458 = sub_4618(v457, "Internal Memory Bandwidth");
  v459 = sub_4618(v458, "One Pass");
  v460 = *(_OWORD *)v459;
  v1100 = *((_DWORD *)v459 + 4);
  v1099 = v460;
  sub_10A068((uint64_t)&v1101, (uint64_t)(v459 + 3));
  memset(v1102, 0, sizeof(v1102));
  sub_8B6C((char *)v1102, (__int128 *)v459[8], (__int128 *)v459[9], 0xAAAAAAAAAAAAAAABLL * ((v459[9] - v459[8]) >> 3));
  sub_4368((int)v551, "Raytracing Scratch L1 Store Bandwidth");
  v461 = (uint64_t *)sub_445C((uint64_t)v551, 0xFu, 3, (uint64_t)sub_1180DC);
  v462 = sub_4618(v461, "Memory Bandwidth");
  v463 = sub_4618(v462, "Internal Memory Bandwidth");
  v464 = sub_4618(v463, "One Pass");
  v465 = *(_OWORD *)v464;
  v1104 = *((_DWORD *)v464 + 4);
  v1103 = v465;
  sub_10A068((uint64_t)&v1105, (uint64_t)(v464 + 3));
  memset(v1106, 0, sizeof(v1106));
  sub_8B6C((char *)v1106, (__int128 *)v464[8], (__int128 *)v464[9], 0xAAAAAAAAAAAAAAABLL * ((v464[9] - v464[8]) >> 3));
  sub_4368((int)v550, "Other L1 Load Bandwidth");
  v466 = (uint64_t *)sub_445C((uint64_t)v550, 0xFu, 3, (uint64_t)sub_118158);
  v467 = sub_4618(v466, "Memory Bandwidth");
  v468 = sub_4618(v467, "Internal Memory Bandwidth");
  v469 = sub_4618(v468, "One Pass");
  v470 = *(_OWORD *)v469;
  v1108 = *((_DWORD *)v469 + 4);
  v1107 = v470;
  sub_10A068((uint64_t)&v1109, (uint64_t)(v469 + 3));
  memset(v1110, 0, sizeof(v1110));
  sub_8B6C((char *)v1110, (__int128 *)v469[8], (__int128 *)v469[9], 0xAAAAAAAAAAAAAAABLL * ((v469[9] - v469[8]) >> 3));
  sub_4368((int)v549, "Other L1 Store Bandwidth");
  v471 = (uint64_t *)sub_445C((uint64_t)v549, 0xFu, 3, (uint64_t)sub_1181FC);
  v472 = sub_4618(v471, "Memory Bandwidth");
  v473 = sub_4618(v472, "Internal Memory Bandwidth");
  v474 = sub_4618(v473, "One Pass");
  v475 = *(_OWORD *)v474;
  v1112 = *((_DWORD *)v474 + 4);
  v1111 = v475;
  sub_10A068((uint64_t)&v1113, (uint64_t)(v474 + 3));
  memset(v1114, 0, sizeof(v1114));
  sub_8B6C((char *)v1114, (__int128 *)v474[8], (__int128 *)v474[9], 0xAAAAAAAAAAAAAAABLL * ((v474[9] - v474[8]) >> 3));
  sub_4368((int)v548, "GPR L1 Load Bandwidth");
  v476 = (uint64_t *)sub_445C((uint64_t)v548, 0xFu, 3, (uint64_t)sub_1182A0);
  v477 = sub_4618(v476, "Memory Bandwidth");
  v478 = sub_4618(v477, "Internal Memory Bandwidth");
  v479 = sub_4618(v478, "One Pass");
  v480 = *(_OWORD *)v479;
  v1116 = *((_DWORD *)v479 + 4);
  v1115 = v480;
  sub_10A068((uint64_t)&v1117, (uint64_t)(v479 + 3));
  memset(v1118, 0, sizeof(v1118));
  sub_8B6C((char *)v1118, (__int128 *)v479[8], (__int128 *)v479[9], 0xAAAAAAAAAAAAAAABLL * ((v479[9] - v479[8]) >> 3));
  sub_4368((int)v547, "GPR L1 Store Bandwidth");
  v481 = (uint64_t *)sub_445C((uint64_t)v547, 0xFu, 3, (uint64_t)sub_11831C);
  v482 = sub_4618(v481, "Memory Bandwidth");
  v483 = sub_4618(v482, "Internal Memory Bandwidth");
  v484 = sub_4618(v483, "One Pass");
  v485 = *(_OWORD *)v484;
  v1120 = *((_DWORD *)v484 + 4);
  v1119 = v485;
  sub_10A068((uint64_t)&v1121, (uint64_t)(v484 + 3));
  memset(v1122, 0, sizeof(v1122));
  sub_8B6C((char *)v1122, (__int128 *)v484[8], (__int128 *)v484[9], 0xAAAAAAAAAAAAAAABLL * ((v484[9] - v484[8]) >> 3));
  sub_4368((int)v546, "Stack L1 Load Bandwidth");
  v486 = (uint64_t *)sub_445C((uint64_t)v546, 0xFu, 3, (uint64_t)sub_118398);
  v487 = sub_4618(v486, "Memory Bandwidth");
  v488 = sub_4618(v487, "Internal Memory Bandwidth");
  v489 = sub_4618(v488, "One Pass");
  v490 = *(_OWORD *)v489;
  v1124 = *((_DWORD *)v489 + 4);
  v1123 = v490;
  sub_10A068((uint64_t)&v1125, (uint64_t)(v489 + 3));
  memset(v1126, 0, sizeof(v1126));
  sub_8B6C((char *)v1126, (__int128 *)v489[8], (__int128 *)v489[9], 0xAAAAAAAAAAAAAAABLL * ((v489[9] - v489[8]) >> 3));
  sub_4368((int)v545, "Stack L1 Store Bandwidth");
  v491 = (uint64_t *)sub_445C((uint64_t)v545, 0xFu, 3, (uint64_t)sub_118414);
  v492 = sub_4618(v491, "Memory Bandwidth");
  v493 = sub_4618(v492, "Internal Memory Bandwidth");
  v494 = sub_4618(v493, "One Pass");
  v495 = *(_OWORD *)v494;
  v1128 = *((_DWORD *)v494 + 4);
  v1127 = v495;
  sub_10A068((uint64_t)&v1129, (uint64_t)(v494 + 3));
  memset(v1130, 0, sizeof(v1130));
  sub_8B6C((char *)v1130, (__int128 *)v494[8], (__int128 *)v494[9], 0xAAAAAAAAAAAAAAABLL * ((v494[9] - v494[8]) >> 3));
  sub_4368((int)v544, "Buffer L1 Load Bandwidth");
  v496 = (uint64_t *)sub_445C((uint64_t)v544, 0xFu, 3, (uint64_t)sub_118490);
  v497 = sub_4618(v496, "Memory Bandwidth");
  v498 = sub_4618(v497, "Internal Memory Bandwidth");
  v499 = sub_4618(v498, "One Pass");
  v500 = *(_OWORD *)v499;
  v1132 = *((_DWORD *)v499 + 4);
  v1131 = v500;
  sub_10A068((uint64_t)&v1133, (uint64_t)(v499 + 3));
  memset(v1134, 0, sizeof(v1134));
  sub_8B6C((char *)v1134, (__int128 *)v499[8], (__int128 *)v499[9], 0xAAAAAAAAAAAAAAABLL * ((v499[9] - v499[8]) >> 3));
  sub_4368((int)v543, "Buffer L1 Store Bandwidth");
  v501 = (uint64_t *)sub_445C((uint64_t)v543, 0xFu, 3, (uint64_t)sub_11850C);
  v502 = sub_4618(v501, "Memory Bandwidth");
  v503 = sub_4618(v502, "Internal Memory Bandwidth");
  v504 = sub_4618(v503, "One Pass");
  v505 = *(_OWORD *)v504;
  v1136 = *((_DWORD *)v504 + 4);
  v1135 = v505;
  sub_10A068((uint64_t)&v1137, (uint64_t)(v504 + 3));
  memset(v1138, 0, sizeof(v1138));
  sub_8B6C((char *)v1138, (__int128 *)v504[8], (__int128 *)v504[9], 0xAAAAAAAAAAAAAAABLL * ((v504[9] - v504[8]) >> 3));
  sub_4368((int)v542, "Raytracing Active");
  v506 = (uint64_t *)sub_445C((uint64_t)v542, 0xFu, 3, (uint64_t)sub_118588);
  v507 = sub_4618(v506, "Raytracing Limiters");
  v508 = sub_4618(v507, "One Pass");
  v509 = *(_OWORD *)v508;
  v1140 = *((_DWORD *)v508 + 4);
  v1139 = v509;
  sub_10A068((uint64_t)&v1141, (uint64_t)(v508 + 3));
  memset(v1142, 0, sizeof(v1142));
  sub_8B6C((char *)v1142, (__int128 *)v508[8], (__int128 *)v508[9], 0xAAAAAAAAAAAAAAABLL * ((v508[9] - v508[8]) >> 3));
  sub_4368((int)v541, "Raytracing Active GT");
  v510 = (uint64_t *)sub_445C((uint64_t)v541, 0xFu, 3, (uint64_t)sub_1185D8);
  v511 = sub_4618(v510, "One Pass GT");
  v512 = *(_OWORD *)v511;
  v1144 = *((_DWORD *)v511 + 4);
  v1143 = v512;
  sub_10A068((uint64_t)&v1145, (uint64_t)(v511 + 3));
  memset(v1146, 0, sizeof(v1146));
  sub_8B6C((char *)v1146, (__int128 *)v511[8], (__int128 *)v511[9], 0xAAAAAAAAAAAAAAABLL * ((v511[9] - v511[8]) >> 3));
  sub_4368((int)v540, "Ray Occupancy");
  v513 = (uint64_t *)sub_445C((uint64_t)v540, 0xFu, 3, (uint64_t)sub_1186A8);
  v514 = sub_4618(v513, "Raytracing Limiters");
  v515 = sub_4618(v514, "One Pass");
  v516 = *(_OWORD *)v515;
  v1148 = *((_DWORD *)v515 + 4);
  v1147 = v516;
  sub_10A068((uint64_t)&v1149, (uint64_t)(v515 + 3));
  memset(v1150, 0, sizeof(v1150));
  sub_8B6C((char *)v1150, (__int128 *)v515[8], (__int128 *)v515[9], 0xAAAAAAAAAAAAAAABLL * ((v515[9] - v515[8]) >> 3));
  sub_4368((int)v539, "Leaf Test Occupancy");
  v517 = (uint64_t *)sub_445C((uint64_t)v539, 0xFu, 3, (uint64_t)sub_1187A4);
  v518 = sub_4618(v517, "Raytracing Limiters");
  v519 = sub_4618(v518, "One Pass");
  v520 = *(_OWORD *)v519;
  v1152 = *((_DWORD *)v519 + 4);
  v1151 = v520;
  sub_10A068((uint64_t)&v1153, (uint64_t)(v519 + 3));
  memset(v1154, 0, sizeof(v1154));
  sub_8B6C((char *)v1154, (__int128 *)v519[8], (__int128 *)v519[9], 0xAAAAAAAAAAAAAAABLL * ((v519[9] - v519[8]) >> 3));
  sub_4368((int)v538, "Raytracing Node Test");
  v521 = (uint64_t *)sub_445C((uint64_t)v538, 0xFu, 3, (uint64_t)sub_1188A0);
  v522 = sub_4618(v521, "Raytracing");
  v523 = sub_4618(v522, "One Pass");
  v524 = *(_OWORD *)v523;
  v1156 = *((_DWORD *)v523 + 4);
  v1155 = v524;
  sub_10A068((uint64_t)&v1157, (uint64_t)(v523 + 3));
  memset(v1158, 0, sizeof(v1158));
  sub_8B6C((char *)v1158, (__int128 *)v523[8], (__int128 *)v523[9], 0xAAAAAAAAAAAAAAABLL * ((v523[9] - v523[8]) >> 3));
  sub_4368((int)v537, "Ray T Leaf Test");
  v525 = (uint64_t *)sub_445C((uint64_t)v537, 0xFu, 3, (uint64_t)sub_1188C8);
  v526 = sub_4618(v525, "Raytracing");
  v527 = sub_4618(v526, "One Pass");
  v528 = *(_OWORD *)v527;
  v1160 = *((_DWORD *)v527 + 4);
  v1159 = v528;
  sub_10A068((uint64_t)&v1161, (uint64_t)(v527 + 3));
  memset(v1162, 0, sizeof(v1162));
  sub_8B6C((char *)v1162, (__int128 *)v527[8], (__int128 *)v527[9], 0xAAAAAAAAAAAAAAABLL * ((v527[9] - v527[8]) >> 3));
  sub_4368((int)&v536, "Intersect Ray Threads");
  v529 = (uint64_t *)sub_445C((uint64_t)&v536, 0xFu, 3, (uint64_t)sub_1188F0);
  v530 = sub_4618(v529, "Raytracing");
  v531 = sub_4618(v530, "One Pass");
  v532 = *(_OWORD *)v531;
  v1164 = *((_DWORD *)v531 + 4);
  v1163 = v532;
  sub_10A068((uint64_t)&v1165, (uint64_t)(v531 + 3));
  memset(v1166, 0, sizeof(v1166));
  sub_8B6C((char *)v1166, (__int128 *)v531[8], (__int128 *)v531[9], 0xAAAAAAAAAAAAAAABLL * ((v531[9] - v531[8]) >> 3));
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v661[11] = a1;
  v662 = 0;
  v533 = (char *)operator new(0x2B50uLL);
  *a1 = v533;
  a1[1] = v533;
  a1[2] = v533 + 11088;
  v534 = 0;
  a1[1] = sub_10A300((uint64_t)(a1 + 2), (uint64_t)&v663, (uint64_t)&v1167, (uint64_t)v533);
  do
  {
    sub_43FC((char *)&v1163 + v534);
    v534 -= 88;
  }
  while (v534 != -11088);
  sub_43FC(&v536);
  sub_43FC(v537);
  sub_43FC(v538);
  sub_43FC(v539);
  sub_43FC(v540);
  sub_43FC(v541);
  sub_43FC(v542);
  sub_43FC(v543);
  sub_43FC(v544);
  sub_43FC(v545);
  sub_43FC(v546);
  sub_43FC(v547);
  sub_43FC(v548);
  sub_43FC(v549);
  sub_43FC(v550);
  sub_43FC(v551);
  sub_43FC(v552);
  sub_43FC(v553);
  sub_43FC(v554);
  sub_43FC(v555);
  sub_43FC(v556);
  sub_43FC(v557);
  sub_43FC(v558);
  sub_43FC(v559);
  sub_43FC(v560);
  sub_43FC(v561);
  sub_43FC(v562);
  sub_43FC(v563);
  sub_43FC(v564);
  sub_43FC(v565);
  sub_43FC(v566);
  sub_43FC(v567);
  sub_43FC(v568);
  sub_43FC(v569);
  sub_43FC(v570);
  sub_43FC(v571);
  sub_43FC(v572);
  sub_43FC(v573);
  sub_43FC(v574);
  sub_43FC(v575);
  sub_43FC(v576);
  sub_43FC(v577);
  sub_43FC(v578);
  sub_43FC(v579);
  sub_43FC(v580);
  sub_43FC(v581);
  sub_43FC(v582);
  sub_43FC(v583);
  sub_43FC(v584);
  sub_43FC(v585);
  sub_43FC(v586);
  sub_43FC(v587);
  sub_43FC(v588);
  sub_43FC(v589);
  sub_43FC(v590);
  sub_43FC(v591);
  sub_43FC(v592);
  sub_43FC(v593);
  sub_43FC(v594);
  sub_43FC(v595);
  sub_43FC(v596);
  sub_43FC(v597);
  sub_43FC(v598);
  sub_43FC(v599);
  sub_43FC(v600);
  sub_43FC(v601);
  sub_43FC(v602);
  sub_43FC(v603);
  sub_43FC(v604);
  sub_43FC(v605);
  sub_43FC(v606);
  sub_43FC(v607);
  sub_43FC(v608);
  sub_43FC(v609);
  sub_43FC(v610);
  sub_43FC(v611);
  sub_43FC(v612);
  sub_43FC(v613);
  sub_43FC(v614);
  sub_43FC(v615);
  sub_43FC(v616);
  sub_43FC(v617);
  sub_43FC(v618);
  sub_43FC(v619);
  sub_43FC(v620);
  sub_43FC(v621);
  sub_43FC(v622);
  sub_43FC(v623);
  sub_43FC(v624);
  sub_43FC(v625);
  sub_43FC(v626);
  sub_43FC(v627);
  sub_43FC(v628);
  sub_43FC(v629);
  sub_43FC(v630);
  sub_43FC(v631);
  sub_43FC(v632);
  sub_43FC(v633);
  sub_43FC(v634);
  sub_43FC(v635);
  sub_43FC(v636);
  sub_43FC(v637);
  sub_43FC(v638);
  sub_43FC(v639);
  sub_43FC(v640);
  sub_43FC(v641);
  sub_43FC(v642);
  sub_43FC(v643);
  sub_43FC(v644);
  sub_43FC(v645);
  sub_43FC(v646);
  sub_43FC(v647);
  sub_43FC(v648);
  sub_43FC(v649);
  sub_43FC(v650);
  sub_43FC(v651);
  sub_43FC(v652);
  sub_43FC(v653);
  sub_43FC(v654);
  sub_43FC(v655);
  sub_43FC(v656);
  sub_43FC(v657);
  sub_43FC(v658);
  sub_43FC(v659);
  sub_43FC(v660);
  return sub_43FC(v661);
}

void sub_110A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;

  *(_QWORD *)(v65 + 8) = v66;
  sub_B830((void ***)&STACK[0x2B50]);
  v68 = -11088;
  v69 = v64;
  do
  {
    v69 = sub_43FC(v69) - 88;
    v68 += 88;
  }
  while (v68);
  sub_43FC(&a9);
  sub_43FC(&a20);
  sub_43FC(&a31);
  sub_43FC(&a42);
  sub_43FC(&a53);
  sub_43FC(&a64);
  sub_43FC(&STACK[0x210]);
  sub_43FC(&STACK[0x268]);
  sub_43FC(&STACK[0x2C0]);
  sub_43FC(&STACK[0x318]);
  sub_43FC(&STACK[0x370]);
  sub_43FC(&STACK[0x3C8]);
  sub_43FC(&STACK[0x420]);
  sub_43FC(&STACK[0x478]);
  sub_43FC(&STACK[0x4D0]);
  sub_43FC(&STACK[0x528]);
  sub_43FC(&STACK[0x580]);
  sub_43FC(&STACK[0x5D8]);
  sub_43FC(&STACK[0x630]);
  sub_43FC(&STACK[0x688]);
  sub_43FC(&STACK[0x6E0]);
  sub_43FC(&STACK[0x738]);
  sub_43FC(&STACK[0x790]);
  sub_43FC(&STACK[0x7E8]);
  sub_43FC(&STACK[0x840]);
  sub_43FC(&STACK[0x898]);
  sub_43FC(&STACK[0x8F0]);
  sub_43FC(&STACK[0x948]);
  sub_43FC(&STACK[0x9A0]);
  sub_43FC(&STACK[0x9F8]);
  sub_43FC(&STACK[0xA50]);
  sub_43FC(&STACK[0xAA8]);
  sub_43FC(&STACK[0xB00]);
  sub_43FC(&STACK[0xB58]);
  sub_43FC(&STACK[0xBB0]);
  sub_43FC(&STACK[0xC08]);
  sub_43FC(&STACK[0xC60]);
  sub_43FC(&STACK[0xCB8]);
  sub_43FC(&STACK[0xD10]);
  sub_43FC(&STACK[0xD68]);
  sub_43FC(&STACK[0xDC0]);
  sub_43FC(&STACK[0xE18]);
  sub_43FC(&STACK[0xE70]);
  sub_43FC(&STACK[0xEC8]);
  sub_43FC(&STACK[0xF20]);
  sub_43FC(&STACK[0xF78]);
  sub_43FC(&STACK[0xFD0]);
  sub_43FC(&STACK[0x1028]);
  sub_43FC(&STACK[0x1080]);
  sub_43FC(&STACK[0x10D8]);
  sub_43FC(&STACK[0x1130]);
  sub_43FC(&STACK[0x1188]);
  sub_43FC(&STACK[0x11E0]);
  sub_43FC(&STACK[0x1238]);
  sub_43FC(&STACK[0x1290]);
  sub_43FC(&STACK[0x12E8]);
  sub_43FC(&STACK[0x1340]);
  sub_43FC(&STACK[0x1398]);
  sub_43FC(&STACK[0x13F0]);
  sub_43FC(&STACK[0x1448]);
  sub_43FC(&STACK[0x14A0]);
  sub_43FC(&STACK[0x14F8]);
  sub_43FC(&STACK[0x1550]);
  sub_43FC(&STACK[0x15A8]);
  sub_43FC(&STACK[0x1600]);
  sub_43FC(&STACK[0x1658]);
  sub_43FC(&STACK[0x16B0]);
  sub_43FC(&STACK[0x1708]);
  sub_43FC(&STACK[0x1760]);
  sub_43FC(&STACK[0x17B8]);
  sub_43FC(&STACK[0x1810]);
  sub_43FC(&STACK[0x1868]);
  sub_43FC(&STACK[0x18C0]);
  sub_43FC(&STACK[0x1918]);
  sub_43FC(&STACK[0x1970]);
  sub_43FC(&STACK[0x19C8]);
  sub_43FC(&STACK[0x1A20]);
  sub_43FC(&STACK[0x1A78]);
  sub_43FC(&STACK[0x1AD0]);
  sub_43FC(&STACK[0x1B28]);
  sub_43FC(&STACK[0x1B80]);
  sub_43FC(&STACK[0x1BD8]);
  sub_43FC(&STACK[0x1C30]);
  sub_43FC(&STACK[0x1C88]);
  sub_43FC(&STACK[0x1CE0]);
  sub_43FC(&STACK[0x1D38]);
  sub_43FC(&STACK[0x1D90]);
  sub_43FC(&STACK[0x1DE8]);
  sub_43FC(&STACK[0x1E40]);
  sub_43FC(&STACK[0x1E98]);
  sub_43FC(&STACK[0x1EF0]);
  sub_43FC(&STACK[0x1F48]);
  sub_43FC(&STACK[0x1FA0]);
  sub_43FC(&STACK[0x1FF8]);
  sub_43FC(&STACK[0x2050]);
  sub_43FC(&STACK[0x20A8]);
  sub_43FC(&STACK[0x2100]);
  sub_43FC(&STACK[0x2158]);
  sub_43FC(&STACK[0x21B0]);
  sub_43FC(&STACK[0x2208]);
  sub_43FC(&STACK[0x2260]);
  sub_43FC(&STACK[0x22B8]);
  sub_43FC(&STACK[0x2310]);
  sub_43FC(&STACK[0x2368]);
  sub_43FC(&STACK[0x23C0]);
  sub_43FC(&STACK[0x2418]);
  sub_43FC(&STACK[0x2470]);
  sub_43FC(&STACK[0x24C8]);
  sub_43FC(&STACK[0x2520]);
  sub_43FC(&STACK[0x2578]);
  sub_43FC(&STACK[0x25D0]);
  sub_43FC(&STACK[0x2628]);
  sub_43FC(&STACK[0x2680]);
  sub_43FC(&STACK[0x26D8]);
  sub_43FC(&STACK[0x2730]);
  sub_43FC(&STACK[0x2788]);
  sub_43FC(&STACK[0x27E0]);
  sub_43FC(&STACK[0x2838]);
  sub_43FC(&STACK[0x2890]);
  sub_43FC(&STACK[0x28E8]);
  sub_43FC(&STACK[0x2940]);
  sub_43FC(&STACK[0x2998]);
  sub_43FC(&STACK[0x29F0]);
  sub_43FC(&STACK[0x2A48]);
  sub_43FC(&STACK[0x2AA0]);
  sub_43FC(&STACK[0x2AF8]);
  _Unwind_Resume(a1);
}

uint64_t sub_111F78(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "D36BDC945E9A3C2158D269457AE35CC5AD63543965D991AB68A2CC0556E31D50");
  v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
  v10 = v9;
  v11 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
  LODWORD(a4) = sub_BB88(v8, v10, v11);
  v13 = v12;
  v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v15 = sub_BE08(a4, v13, v14);
  v17 = sub_1023C(v7, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_112074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 GPR Bytes Occupancy");
  v6 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");
  return sub_11CB8(v5, v6, v7);
}

uint64_t sub_1120D8(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "FD406D36CD5763CFC9F0DD6C37C7BDC528ADF3990CF9725229F4258C1758C94D");
  v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
  v10 = v9;
  v11 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
  LODWORD(a4) = sub_BB88(v8, v10, v11);
  v13 = v12;
  v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v15 = sub_BE08(a4, v13, v14);
  v17 = sub_1023C(v7, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_1121D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 Buffer Bytes Occupancy");
  v6 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");
  return sub_11CB8(v5, v6, v7);
}

uint64_t sub_112238(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "353FBA19946FC52BCED9C06F6EE4844496369F4985110F6E78E467505E48C88F");
  v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
  v10 = v9;
  v11 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
  LODWORD(a4) = sub_BB88(v8, v10, v11);
  v13 = v12;
  v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v15 = sub_BE08(a4, v13, v14);
  v17 = sub_1023C(v7, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_112334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 Raytracing Scratch Bytes Occupancy");
  v6 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");
  return sub_11CB8(v5, v6, v7);
}

uint64_t sub_112398(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "E9FDDF0E4E3D3ABB4D40C135F207C0310E5BE4CCF2EC1099CB89594DD756B745");
  v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
  v10 = v9;
  v11 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
  LODWORD(a4) = sub_BB88(v8, v10, v11);
  v13 = v12;
  v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v15 = sub_BE08(a4, v13, v14);
  v17 = sub_1023C(v7, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_112494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 Stack Bytes Occupancy");
  v6 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");
  return sub_11CB8(v5, v6, v7);
}

uint64_t sub_1124F8(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "53E08B2D38CDBBC0D198B95302BCC632B50E773651E9BA4C57373B002114CBBC");
  v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
  v10 = v9;
  v11 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
  LODWORD(a4) = sub_BB88(v8, v10, v11);
  v13 = v12;
  v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v15 = sub_BE08(a4, v13, v14);
  v17 = sub_1023C(v7, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_1125F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 Threadgroup Bytes Occupancy");
  v6 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");
  return sub_11CB8(v5, v6, v7);
}

uint64_t sub_112658(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "244B94B5F2129A5A0083F3661EAC9C6B9EB5FB62A499E6ED236452F5BE6828F5");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "972B60C198C39199A11F25454037CADA381BB118BE18D850A36534F88A82B7F1");
  v9 = sub_C1F8(v7, v8);
  v10 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
  v12 = v11;
  v13 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
  LODWORD(a4) = sub_BB88(v10, v12, v13);
  v15 = v14;
  v16 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v17 = sub_BE08(a4, v15, v16);
  v19 = sub_1023C((unsigned int *)v9, v17, v18);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v19);
}

int *sub_11277C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 Imageblock Bytes Occupancy");
  v6 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");
  return sub_11CB8(v5, v6, v7);
}

uint64_t sub_1127E0(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "5537928133BBD235A03487186F42FBFF9D0FC45873C83FD5219EB5EBF500ED10");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "19FCC75261554C74A79C9151422F265347FC6282808C4BB8E9627195837B3682");
  v9 = sub_C1F8(v7, v8);
  v10 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
  v12 = v11;
  v13 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
  LODWORD(a4) = sub_BB88(v10, v12, v13);
  v15 = v14;
  v16 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v17 = sub_BE08(a4, v15, v16);
  v19 = sub_1023C((unsigned int *)v9, v17, v18);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v19);
}

int *sub_112904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 Other Bytes Occupancy");
  v6 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");
  return sub_11CB8(v5, v6, v7);
}

int *sub_112968(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  int *v5;
  unsigned int *v6;
  int *v7;
  unsigned int *v8;
  int *v9;
  unsigned int *v10;
  int *v11;
  unsigned int *v12;
  int *v13;
  unsigned int *v14;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 GPR Bytes Occupancy");
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 Buffer Bytes Occupancy");
  v5 = sub_C1F8(v3, v4);
  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 Raytracing Scratch Bytes Occupancy");
  v7 = sub_C1F8((unsigned int *)v5, v6);
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 Stack Bytes Occupancy");
  v9 = sub_C1F8((unsigned int *)v7, v8);
  v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 Threadgroup Bytes Occupancy");
  v11 = sub_C1F8((unsigned int *)v9, v10);
  v12 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 Imageblock Bytes Occupancy");
  v13 = sub_C1F8((unsigned int *)v11, v12);
  v14 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 Other Bytes Occupancy");
  return sub_C1F8((unsigned int *)v13, v14);
}

int *sub_112A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 Total Bytes Occupancy");
  v6 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");
  return sub_11CB8(v5, v6, v7);
}

int *sub_112AEC(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  unsigned int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int *v19;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a2 + 16))(a2, kAGXPSCounterGPUCycles);
  v8 = (**a3)(a3, kAGXPSCounterConstantOccupancyManagerEvalWindow);
  v10 = sub_11CB8(v7, v8, v9);
  v11 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "EC02EE62A95DE2B0B2BC9C65A400E1318CFD7FFA894EECC7B23F8FB164A10C08");
  v12 = sub_10D90(v11, (unsigned int *)v10);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_137_107");
  v14 = v13;
  v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v16 = sub_BB88(a4, v14, v15);
  v18 = v17;
  v19 = sub_138AC((unsigned int *)v12, v16, v17);
  return sub_11CB8((unsigned int *)v19, v16, v18);
}

int *sub_112C04(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "5851D9888A5EE313F6D80CC60F6BB6ADFC20BB0BA8D9BED753F04382DF6BED1A");
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "18487C9D7CEF0D61908387ACBCC7316000F44757B4F9C98EA18217C35C6ECF85");
  return sub_10D90(v3, v4);
}

int *sub_112C5C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "5BA476059E7B48575673F80A8DC1251E26C5B23F5DCF5BCB3AB1251D0D3424E8");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "D613D0441777617363D2EF9031155D28A493ED4CF2B714C61332BEB8E694A21C");
  v9 = sub_C1F8(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_133_103");
  v11 = v10;
  v12 = sub_BB28();
  LODWORD(a4) = sub_BB88(a4, v11, v12);
  v14 = v13;
  v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v16 = sub_BE08(a4, v14, v15);
  v18 = sub_1023C((unsigned int *)v9, v16, v17);
  v19 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
  v20 = sub_BB28();
  return sub_138AC(v19, v20, v21);
}

int *sub_112D94(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  int variant;
  uint64_t (*v8)(uint64_t, const char *);
  unsigned int *v9;
  unsigned int *v10;
  int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  int *v37;
  unsigned int *v38;
  int *v39;
  unsigned int *v40;
  unsigned int *v41;
  int *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  int *v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int *v56;
  uint64_t v57;
  unint64_t v58;

  variant = agxps_gpu_get_variant(a1);
  v8 = *(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16);
  if ((variant - 4) > 2)
  {
    v40 = (unsigned int *)v8(a2, "F9F04A751DF32AED42FF9EFB131D3CD40E499AA0A99A68D0DD6778167E42BF26");
    v41 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "357D351342C59B72F21BD4580AD1B2F1C4C47D0006AB615A4760BC3BEBD99E48");
    v42 = sub_C1F8(v40, v41);
    v43 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_133_103");
    v45 = v44;
    v46 = sub_BB28();
    v47 = sub_BB88(v43, v45, v46);
    v49 = v48;
    v50 = (**a3)(a3, kAGXPSCounterConstantNumCores);
    v51 = sub_BE08(v47, v49, v50);
    v53 = sub_1023C((unsigned int *)v42, v51, v52);
    v54 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v53);
    v55 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Vertex Shader Launch Utilization");
    v39 = sub_C1F8(v54, v55);
  }
  else
  {
    v9 = (unsigned int *)v8(a2, "5BA476059E7B48575673F80A8DC1251E26C5B23F5DCF5BCB3AB1251D0D3424E8");
    v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "F9F04A751DF32AED42FF9EFB131D3CD40E499AA0A99A68D0DD6778167E42BF26");
    v11 = sub_C1F8(v9, v10);
    v12 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_133_103");
    v14 = v13;
    v15 = sub_BB28();
    v16 = sub_BB88(v12, v14, v15);
    v18 = v17;
    v19 = (**a3)(a3, kAGXPSCounterConstantNumCores);
    v20 = sub_BE08(v16, v18, v19);
    v22 = sub_1023C((unsigned int *)v11, v20, v21);
    v23 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v22);
    v24 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "D613D0441777617363D2EF9031155D28A493ED4CF2B714C61332BEB8E694A21C");
    v25 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "357D351342C59B72F21BD4580AD1B2F1C4C47D0006AB615A4760BC3BEBD99E48");
    v26 = sub_C1F8(v24, v25);
    v27 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_133_103");
    v29 = v28;
    v30 = sub_BB28();
    v31 = sub_BB88(v27, v29, v30);
    v33 = v32;
    v34 = (**a3)(a3, kAGXPSCounterConstantNumCores);
    v35 = sub_BE08(v31, v33, v34);
    v37 = sub_1023C((unsigned int *)v26, v35, v36);
    v38 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v37);
    v39 = sub_14508(v23, v38);
  }
  v56 = (unsigned int *)v39;
  v57 = sub_BB28();
  return sub_138AC(v56, v57, v58);
}

uint64_t sub_1130D8(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  unsigned int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "92CB5205D6DC7B8CF67306FCBBF4D2E22C50A82E14C323C9869A8154961E1379");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "87BA80BEA278BCBDE11D4ADFEA6B3C8BEF365D8260CDE3591D5B76B2C36DD853");
  v9 = sub_C1F8(v7, v8);
  v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "D2D6A9827703DC8826305F130123DE83C3648F82DCB4F96DFCD7E33EA799BD62");
  v11 = sub_C1F8((unsigned int *)v9, v10);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_134_104");
  v13 = v12;
  v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v15 = sub_BE08(a4, v13, v14);
  v17 = sub_1023C((unsigned int *)v11, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_1131F0(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  unsigned int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  unsigned int *v18;
  unsigned int *v19;
  int *v20;
  uint64_t v21;
  unint64_t v22;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "06E83674FEE3BAEADDA04BCE4F798E64EAF9562959486A334178EFE9614AFE02");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "CFC88028D48CFFC122779E410D958A0644A7B3219492B8F56805460AE11D3317");
  v9 = sub_C1F8(v7, v8);
  v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "C38EE6AA610415ACB3D10D68E346EE868CDB70CFC2F46D887E5E152FD4A256B2");
  v11 = sub_C1F8((unsigned int *)v9, v10);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_135_105");
  v13 = v12;
  v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v15 = sub_BE08(a4, v13, v14);
  v17 = sub_1023C((unsigned int *)v11, v15, v16);
  v18 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
  v19 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Fragment Shader Launch Utilization");
  v20 = sub_C1F8(v18, v19);
  v21 = sub_BB28();
  return sub_138AC((unsigned int *)v20, v21, v22);
}

uint64_t sub_113354(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  unsigned int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "98A511FEF2F07DAECD3383521C19383B6DCA2C733FA4611CDFA49CC62B7B5181");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "51A34CA49D64B984F464BC878382CDD07EEF0B001EBE4F2E95026F21673969A7");
  v9 = sub_C1F8(v7, v8);
  v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "83B2F8BA9316B9EFB16E84445A86F4306028A166E21E7B350C8D908E696445FC");
  v11 = sub_C1F8((unsigned int *)v9, v10);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_136_106");
  v13 = v12;
  v14 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v15 = sub_BE08(a4, v13, v14);
  v17 = sub_1023C((unsigned int *)v11, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_11346C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  int *v36;
  unsigned int *v37;
  int *v38;
  int *v39;
  uint64_t v40;
  unint64_t v41;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "98A511FEF2F07DAECD3383521C19383B6DCA2C733FA4611CDFA49CC62B7B5181");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "AEB4C02667999241FFC01E220B4443963E1B34D3ACD2C5545F5BBE1143870378");
  v9 = sub_C1F8(v7, v8);
  v10 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_136_106");
  v12 = v11;
  v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v14 = sub_BE08(v10, v12, v13);
  v16 = sub_1023C((unsigned int *)v9, v14, v15);
  v17 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
  v18 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "51A34CA49D64B984F464BC878382CDD07EEF0B001EBE4F2E95026F21673969A7");
  v19 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "40A9788933E5BA39796E86A50864B263BC0F2291A4B895C7EA6BBB144E5DACA5");
  v20 = sub_C1F8(v18, v19);
  LODWORD(v12) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_136_106");
  v22 = v21;
  v23 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v24 = sub_BE08(v12, v22, v23);
  v26 = sub_1023C((unsigned int *)v20, v24, v25);
  v27 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v26);
  v28 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "83B2F8BA9316B9EFB16E84445A86F4306028A166E21E7B350C8D908E696445FC");
  v29 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "D469DF7536BAE8E1DE2CB8B3C1E14B4133343771592D97C7BCEC1D03BF0EE40A");
  v30 = sub_C1F8(v28, v29);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_136_106");
  v32 = v31;
  v33 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v34 = sub_BE08(a4, v32, v33);
  v36 = sub_1023C((unsigned int *)v30, v34, v35);
  v37 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v36);
  v38 = sub_14508(v27, v37);
  v39 = sub_14508(v17, (unsigned int *)v38);
  v40 = sub_BB28();
  return sub_138AC((unsigned int *)v39, v40, v41);
}

uint64_t sub_11371C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "8751E932723FAB8324B1EFAB05DE911953F94AB079963EC9D4882EC0F853207E");
}

uint64_t sub_113734(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "9B37F49C310110FE3C1D0349A0DBD1F4165E5E1873418FE3D8E02DBD2C42360F");
}

uint64_t sub_11374C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "ECE8C77FAA463F6CD7C69976F66D170E06AABA1F8EAADE7E5C2EF059C7FD1BC6");
}

int *sub_113764(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  int *v5;
  unsigned int *v6;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Vertex Threads Launched");
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Fragment Threads Launched");
  v5 = sub_C1F8(v3, v4);
  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Compute Threads Launched");
  return sub_C1F8((unsigned int *)v5, v6);
}

uint64_t sub_1137E4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "6EA38ABD760FE83DDB724F359C9F761841C5BD69E5DCCC1C211D42F98751EF80");
}

uint64_t sub_1137FC(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_28_0");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_86_56");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_1138C4(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *))
{
  unsigned int *v5;
  unsigned int *v6;
  int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_29_1");
  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_30_2");
  v7 = sub_C1F8(v5, v6);
  v8 = (**a3)(a3, kAGXPSCounterConstantNumBanksPerL2);
  v10 = v9;
  v11 = (**a3)(a3, kAGXPSCounterConstantNumAGCs);
  v12 = sub_BB88(v8, v10, v11);
  v14 = sub_11CB8((unsigned int *)v7, v12, v13);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v14);
}

uint64_t sub_1139B4(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *))
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_29_1");
  v6 = (**a3)(a3, kAGXPSCounterConstantNumBanksPerL2);
  v8 = v7;
  v9 = (**a3)(a3, kAGXPSCounterConstantNumAGCs);
  v10 = sub_BB88(v6, v8, v9);
  v12 = sub_11CB8(v5, v10, v11);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v12);
}

uint64_t sub_113A7C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *))
{
  unsigned int *v5;
  unsigned int *v6;
  int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_5c5c55d05fb355aa5be61ac63c88eb4a2a521a47dd8f79c18b5c1df163d5cb55");
  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_c9bcd5df6397dc8477a12ddf9358bccbbb3d8e52fc3dadab320be9bbb14fe157");
  v7 = sub_C1F8(v5, v6);
  v8 = (**a3)(a3, kAGXPSCounterConstantNumBanksPerL2);
  v10 = v9;
  v11 = (**a3)(a3, kAGXPSCounterConstantNumAGCs);
  v12 = sub_BB88(v8, v10, v11);
  v14 = sub_11CB8((unsigned int *)v7, v12, v13);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v14);
}

uint64_t sub_113B6C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *))
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_5c5c55d05fb355aa5be61ac63c88eb4a2a521a47dd8f79c18b5c1df163d5cb55");
  v6 = (**a3)(a3, kAGXPSCounterConstantNumBanksPerL2);
  v8 = v7;
  v9 = (**a3)(a3, kAGXPSCounterConstantNumAGCs);
  v10 = sub_BB88(v6, v8, v9);
  v12 = sub_11CB8(v5, v10, v11);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v12);
}

int *sub_113C34(unsigned int *a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *))
{
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  unsigned int *v18;
  unsigned int *v19;

  agxps_gpu_get_gen(a1);
  agxps_gpu_get_variant((uint64_t)a1);
  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "274A1E04D620A2A93E0AAFC7DB5F0BC3A6322D745709FD3011852A7608D0DC59");
  v7 = sub_BB28();
  v9 = sub_11CB8(v6, v7, v8);
  v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "E21086636B17AA11D0ECA0545AB90C82D396EB03C6D33A9DE49DEEC71BFEC9A3");
  v11 = sub_BB28();
  v13 = sub_11CB8(v10, v11, v12);
  v14 = sub_C1F8((unsigned int *)v9, (unsigned int *)v13);
  v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v17 = sub_11CB8((unsigned int *)v14, v15, v16);
  v18 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
  v19 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "L1 Cache Utilization");
  return sub_C1F8(v18, v19);
}

uint64_t sub_113DC0(unsigned int *a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *))
{
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;

  agxps_gpu_get_gen(a1);
  agxps_gpu_get_variant((uint64_t)a1);
  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "A6C2B5EE1745CD5EB5C81F2B31F5E946A0C1BDC93B226BB05571EFA08555EF8F");
  v7 = sub_BB28();
  v9 = sub_11CB8(v6, v7, v8);
  v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "18487C9D7CEF0D61908387ACBCC7316000F44757B4F9C98EA18217C35C6ECF85");
  v11 = sub_BB28();
  v13 = sub_11CB8(v10, v11, v12);
  v14 = sub_C1F8((unsigned int *)v9, (unsigned int *)v13);
  v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v17 = sub_11CB8((unsigned int *)v14, v15, v16);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
}

int *sub_113F04(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_224fc5057da0739817ec8947d2fb1ad3ff63c2ceb3fabe0e34719c0eb465d7e9");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_90_60");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  v14 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
  v15 = sub_BB28();
  return sub_138AC(v14, v15, v16);
}

int *sub_113FF0(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_31_3");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_32_4");
  v9 = sub_C1F8(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_90_60");
  v11 = v10;
  v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v13 = sub_BE08(a4, v11, v12);
  v15 = sub_1023C((unsigned int *)v9, v13, v14);
  v16 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
  v17 = sub_BB28();
  return sub_138AC(v16, v17, v18);
}

uint64_t sub_114104(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_31_3");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_90_60");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

int *sub_1141CC(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D");
  v5 = sub_BB28();
  v7 = v6;
  v8 = sub_11F364(a1, a2);
  v9 = sub_152B4(v5, v7, (unsigned int *)v8);
  return sub_10D90(v4, (unsigned int *)v9);
}

int *sub_11424C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_b39850e6fdaf024c59701c0ee69b15fce7e4f6c92aa385e9920569a6f595745f");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_92_62");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  v14 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
  v15 = sub_BB28();
  return sub_138AC(v14, v15, v16);
}

int *sub_114338(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_33_5");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_34_6");
  v9 = sub_C1F8(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_92_62");
  v11 = v10;
  v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v13 = sub_BE08(a4, v11, v12);
  v15 = sub_1023C((unsigned int *)v9, v13, v14);
  v16 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
  v17 = sub_BB28();
  return sub_138AC(v16, v17, v18);
}

uint64_t sub_11444C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_33_5");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_92_62");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

int *sub_114514(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85");
  v5 = sub_BB28();
  v7 = v6;
  v8 = sub_11F364(a1, a2);
  v9 = sub_152B4(v5, v7, (unsigned int *)v8);
  return sub_10D90(v4, (unsigned int *)v9);
}

uint64_t sub_114594(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_43_15");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_93_63");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_11465C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_44_16");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_45_17");
  v9 = sub_C1F8(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_93_63");
  v11 = v10;
  v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v13 = sub_BE08(a4, v11, v12);
  v15 = sub_1023C((unsigned int *)v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_11474C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_44_16");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_93_63");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

int *sub_114814(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7");
  v5 = sub_BB28();
  v7 = v6;
  v8 = sub_11F364(a1, a2);
  v9 = sub_152B4(v5, v7, (unsigned int *)v8);
  return sub_10D90(v4, (unsigned int *)v9);
}

uint64_t sub_114894(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_48_20");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_95_65");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_11495C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_50_22");
  v9 = sub_C1F8(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_95_65");
  v11 = v10;
  v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v13 = sub_BE08(a4, v11, v12);
  v15 = sub_1023C((unsigned int *)v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_114A4C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_95_65");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

int *sub_114B14(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D");
  v5 = sub_BB28();
  v7 = v6;
  v8 = sub_11F364(a1, a2);
  v9 = sub_152B4(v5, v7, (unsigned int *)v8);
  return sub_10D90(v4, (unsigned int *)v9);
}

uint64_t sub_114B94(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *))
{
  unsigned int *v5;
  unsigned int *v6;
  int *v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_51_23");
  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_52_24");
  v7 = sub_C1F8(v5, v6);
  v8 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v10 = sub_11CB8((unsigned int *)v7, v8, v9);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v10);
}

uint64_t sub_114C44(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *))
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_51_23");
  v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v8 = sub_11CB8(v5, v6, v7);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v8);
}

int *sub_114CCC(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_39_11");
  v5 = sub_BB28();
  v7 = v6;
  v8 = sub_11F364(a1, a2);
  v9 = sub_152B4(v5, v7, (unsigned int *)v8);
  return sub_10D90(v4, (unsigned int *)v9);
}

int *sub_114D4C(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_40_12");
  v5 = sub_BB28();
  v7 = v6;
  v8 = sub_11F364(a1, a2);
  v9 = sub_152B4(v5, v7, (unsigned int *)v8);
  return sub_10D90(v4, (unsigned int *)v9);
}

int *sub_114DCC(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174");
  v5 = sub_BB28();
  v7 = v6;
  v8 = sub_11F364(a1, a2);
  v9 = sub_152B4(v5, v7, (unsigned int *)v8);
  return sub_10D90(v4, (unsigned int *)v9);
}

int *sub_114E4C(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69");
  v5 = sub_BB28();
  v7 = v6;
  v8 = sub_11F364(a1, a2);
  v9 = sub_152B4(v5, v7, (unsigned int *)v8);
  return sub_10D90(v4, (unsigned int *)v9);
}

int *sub_114ECC(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035");
  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A");
  v6 = sub_C1F8(v4, v5);
  v7 = sub_BB28();
  v9 = v8;
  v10 = sub_11F364(a1, a2);
  v11 = sub_152B4(v7, v9, (unsigned int *)v10);
  return sub_10D90((unsigned int *)v6, (unsigned int *)v11);
}

int *sub_114F74(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D");
  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46");
  v6 = sub_C1F8(v4, v5);
  v7 = sub_BB28();
  v9 = v8;
  v10 = sub_11F364(a1, a2);
  v11 = sub_152B4(v7, v9, (unsigned int *)v10);
  return sub_10D90((unsigned int *)v6, (unsigned int *)v11);
}

int *sub_11501C(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182");
  v5 = sub_BB28();
  v7 = v6;
  v8 = sub_11F364(a1, a2);
  v9 = sub_152B4(v5, v7, (unsigned int *)v8);
  return sub_10D90(v4, (unsigned int *)v9);
}

int *sub_11509C(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  int *v9;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791");
  v5 = sub_BB28();
  v7 = v6;
  v8 = sub_11F364(a1, a2);
  v9 = sub_152B4(v5, v7, (unsigned int *)v8);
  return sub_10D90(v4, (unsigned int *)v9);
}

int *sub_11511C(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE");
  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A");
  v6 = sub_C1F8(v4, v5);
  v7 = sub_BB28();
  v9 = v8;
  v10 = sub_11F364(a1, a2);
  v11 = sub_152B4(v7, v9, (unsigned int *)v10);
  return sub_10D90((unsigned int *)v6, (unsigned int *)v11);
}

int *sub_1151C4(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38");
  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472");
  v6 = sub_C1F8(v4, v5);
  v7 = sub_BB28();
  v9 = v8;
  v10 = sub_11F364(a1, a2);
  v11 = sub_152B4(v7, v9, (unsigned int *)v10);
  return sub_10D90((unsigned int *)v6, (unsigned int *)v11);
}

uint64_t sub_11526C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_58_30");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
  v9 = sub_C1F8(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_117_87");
  v11 = v10;
  v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v13 = sub_BE08(a4, v11, v12);
  v15 = sub_1023C((unsigned int *)v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_11535C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  unsigned int *v10;
  int *v11;
  unsigned int *v12;
  int *v13;
  unsigned int *v14;
  int *v15;
  unsigned int *v16;
  int *v17;
  unsigned int *v18;
  unsigned int *v19;
  int *v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_59_31");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_60_32");
  v9 = sub_C1F8(v7, v8);
  v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_61_33");
  v11 = sub_C1F8((unsigned int *)v9, v10);
  v12 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_62_34");
  v13 = sub_C1F8((unsigned int *)v11, v12);
  v14 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_65_37");
  v15 = sub_C1F8((unsigned int *)v13, v14);
  v16 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_66_38");
  v17 = sub_C1F8((unsigned int *)v15, v16);
  v18 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_63_35");
  v19 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_64_36");
  v20 = sub_C1F8(v18, v19);
  v21 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_120_90");
  v23 = sub_1023C((unsigned int *)v20, v21, v22);
  v24 = sub_C1F8((unsigned int *)v17, (unsigned int *)v23);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_118_88");
  v26 = v25;
  v27 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v28 = sub_BE08(a4, v26, v27);
  v30 = sub_1023C((unsigned int *)v24, v28, v29);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v30);
}

uint64_t sub_115570(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_117_87");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_115638(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  unsigned int *v10;
  int *v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_59_31");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_61_33");
  v9 = sub_C1F8(v7, v8);
  v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_65_37");
  v11 = sub_C1F8((unsigned int *)v9, v10);
  v12 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_63_35");
  v13 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_120_90");
  v15 = sub_1023C(v12, v13, v14);
  v16 = sub_C1F8((unsigned int *)v11, (unsigned int *)v15);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_118_88");
  v18 = v17;
  v19 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v20 = sub_BE08(a4, v18, v19);
  v22 = sub_1023C((unsigned int *)v16, v20, v21);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v22);
}

int *sub_1157AC(uint64_t a1, uint64_t (***a2)(_QWORD, int *), uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *), uint64_t a5)
{
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t length;
  unsigned int *v30;
  double *data;
  double *v32;
  double *v33;
  double *v34;
  double *i;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  unsigned int *v45;

  v9 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_53_25");
  v10 = sub_BB28();
  v12 = sub_11CB8(v9, v10, v11);
  v13 = (**a2)(a2, v12);
  v14 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_55_27");
  v15 = sub_BB28();
  v17 = sub_11CB8(v14, v15, v16);
  v18 = (**a2)(a2, v17);
  v19 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_54_26");
  v20 = sub_BB28();
  v22 = sub_11CB8(v19, v20, v21);
  v23 = (**a2)(a2, v22);
  v24 = (unsigned int *)(*a2)[2](a2, (int *)"\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_56_28");
  v25 = sub_BB28();
  v27 = sub_11CB8(v24, v25, v26);
  v28 = (**a2)(a2, v27);
  if (!sub_11F7A0(v13, v18, v23, v28))
    return (int *)agxps_gpu_invalid_handle();
  length = agxps_timeseries_get_length(v13);
  v30 = (unsigned int *)sub_169FF0(a5, 0, length);
  data = (double *)agxps_timeseries_get_data((uint64_t)v30);
  v32 = (double *)agxps_timeseries_get_data(v13);
  v33 = (double *)agxps_timeseries_get_data(v18);
  v34 = (double *)agxps_timeseries_get_data(v23);
  for (i = (double *)agxps_timeseries_get_data(v28); length; --length)
  {
    v36 = *v32++;
    v37 = v36;
    v38 = *v33++;
    v39 = v38;
    v40 = *v34++;
    v41 = v40;
    v42 = *i++;
    v43 = v42;
    if (v41 < v42)
      v41 = v43;
    v44 = v39 - v37;
    if (v44 < 0.0)
      v44 = 0.0;
    if (v39 + v41 <= 1.0)
      v44 = 0.0;
    *data++ = fmin(v39 + v41 - v44, 1.0);
  }
  v45 = (unsigned int *)sub_115A38((uint64_t)i, a2, a3, a4);
  return sub_14508(v30, v45);
}

uint64_t sub_115A38(uint64_t a1, uint64_t (***a2)(_QWORD, int *), uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  uint64_t (***v4)(_QWORD, const char *);
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v4 = a4;
  v7 = sub_11F848((uint64_t)a2, a4);
  LODWORD(v4) = (**v4)(v4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_117_87");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(v4, v9, v10);
  v13 = sub_1023C((unsigned int *)v7, v11, v12);
  return (**a2)(a2, v13);
}

uint64_t sub_115AF4(uint64_t a1, uint64_t (***a2)(_QWORD, int *), uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;

  v6 = sub_11F848((uint64_t)a2, a4);
  v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_119_89");
  v9 = sub_1023C((unsigned int *)v6, v7, v8);
  return (**a2)(a2, v9);
}

uint64_t sub_115B6C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *))
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Instructions Executed");
  v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v8 = sub_11CB8(v5, v6, v7);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v8);
}

uint64_t sub_115BF4(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_59_31");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_60_32");
  v9 = sub_C1F8(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_111_81");
  v11 = v10;
  v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v13 = sub_BE08(a4, v11, v12);
  v15 = sub_1023C((unsigned int *)v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_115CE4(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_59_31");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_111_81");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_115DAC(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_61_33");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_62_34");
  v9 = sub_C1F8(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_112_82");
  v11 = v10;
  v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v13 = sub_BE08(a4, v11, v12);
  v15 = sub_1023C((unsigned int *)v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_115E9C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_61_33");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_112_82");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_115F64(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_63_35");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_64_36");
  v9 = sub_C1F8(v7, v8);
  v10 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_113_83");
  v12 = sub_1023C((unsigned int *)v9, v10, v11);
  v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v15 = sub_11CB8((unsigned int *)v12, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_11604C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_63_35");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_113_83");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_116114(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_65_37");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_66_38");
  v9 = sub_C1F8(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_114_84");
  v11 = v10;
  v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v13 = sub_BE08(a4, v11, v12);
  v15 = sub_1023C((unsigned int *)v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_116204(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_65_37");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_114_84");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_1162CC(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_67_39");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_68_40");
  v9 = sub_C1F8(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_115_85");
  v11 = v10;
  v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v13 = sub_BE08(a4, v11, v12);
  v15 = sub_1023C((unsigned int *)v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_1163BC(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_67_39");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_115_85");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_116484(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_69_41");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_70_42");
  v9 = sub_C1F8(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_116_86");
  v11 = v10;
  v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v13 = sub_BE08(a4, v11, v12);
  v15 = sub_1023C((unsigned int *)v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_116574(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_69_41");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_116_86");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_11663C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_72_44");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_71_43");
  v9 = sub_C1F8(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_121_91");
  v11 = v10;
  v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v13 = sub_BE08(a4, v11, v12);
  v15 = sub_1023C((unsigned int *)v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_11672C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *))
{
  unsigned int *v5;
  unsigned int *v6;
  int *v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_fec93bc804b85a65d152fdd4747b95f2b6633ea518b6bb44a7bc87186198c2a8");
  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_8922765bce9a86586c4e9f2d8c17967bf71fc42fefdc94b60ac069f686424044");
  v7 = sub_C1F8(v5, v6);
  v8 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v10 = sub_11CB8((unsigned int *)v7, v8, v9);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v10);
}

uint64_t sub_1167DC(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_71_43");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_121_91");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_1168A4(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_eb1b52d1bee0dd7bb1d4f6345a6a34e9d9f75340093e425454be8205d717c2ba");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_122_92");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_11696C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_73_45");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_74_46");
  v9 = sub_C1F8(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_123_93");
  v11 = v10;
  v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v13 = sub_BE08(a4, v11, v12);
  v15 = sub_1023C((unsigned int *)v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_116A5C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_7646a8523871192073a29fb3af219f4dbddae3339e969e0da8ef8d84a3d46ec5");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_123_93");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

uint64_t sub_116B28(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_73_45");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_123_93");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BE08(a4, v9, v10);
  v13 = sub_1023C(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

int *sub_116BF0(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *), uint64_t a5)
{
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  unsigned int *v23;
  int *v24;
  uint64_t length;
  unsigned int *datatype;
  int *v27;
  int *v28;
  uint64_t v29;
  unint64_t v30;
  int *v31;
  int *v32;
  unsigned int *v33;

  v9 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_ae304fc8bce5708ffef30935687e442d6bea78f814055a5fe6e3380013d7e507");
  v10 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_125_95");
  v12 = sub_1023C(v9, v10, v11);
  LODWORD(v9) = sub_BB28();
  v14 = v13;
  v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v16 = sub_BE08(v9, v14, v15);
  v18 = sub_1023C((unsigned int *)v12, v16, v17);
  v19 = (int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
  v20 = sub_BB28();
  v22 = sub_1023C((unsigned int *)v12, v20, v21);
  v23 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_d856a24dfeb33f1dad922753efc16618fdf12ef3544115f2f5fffd93affab8d5");
  v24 = sub_D108((unsigned int *)v22, v23);
  length = agxps_timeseries_get_length((uint64_t)v22);
  datatype = agxps_timeseries_get_datatype((unsigned int *)v22);
  v27 = (int *)sub_169FF0(a5, (uint64_t)datatype, length);
  v28 = (int *)sub_169FF0(a5, (uint64_t)datatype, length);
  agxps_timeseries_div_tt(v22, v24, v27, 1);
  v29 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_124_94");
  v31 = sub_F6DC(v29, v30, (unsigned int *)v27);
  v32 = agxps_timeseries_div_tt(v19, v31, v28, 1);
  v33 = (unsigned int *)sub_116A5C((uint64_t)v32, a2, a3, a4);
  return sub_12B00(v33, (unsigned int *)v28);
}

uint64_t sub_116DE0(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_75_47");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_76_48");
  v9 = sub_C1F8(v7, v8);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_126_96");
  v11 = v10;
  v12 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v13 = sub_BB88(a4, v11, v12);
  v15 = sub_11CB8((unsigned int *)v9, v13, v14);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v15);
}

uint64_t sub_116ED0(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_75_47");
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_126_96");
  v9 = v8;
  v10 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_BB88(a4, v9, v10);
  v13 = sub_11CB8(v7, v11, v12);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v13);
}

int *sub_116F98(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  int *v5;
  unsigned int *v6;
  int *v7;
  uint64_t v8;
  unint64_t v9;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Vertex Occupancy");
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Fragment Occupancy");
  v5 = sub_C1F8(v3, v4);
  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Compute Occupancy");
  v7 = sub_C1F8((unsigned int *)v5, v6);
  v8 = sub_BB28();
  return sub_138AC((unsigned int *)v7, v8, v9);
}

int *sub_11703C(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  int *v5;
  unsigned int *v6;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Vertex Simdgroups Inflight Per Shader Core");
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Fragment Simdgroups Inflight Per Shader Core");
  v5 = sub_C1F8(v3, v4);
  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Compute Simdgroups Inflight Per Shader Core");
  return sub_C1F8((unsigned int *)v5, v6);
}

int *sub_1170BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Vertex Simdgroups Inflight Per Shader Core");
  v6 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");
  return sub_11CB8(v5, v6, v7);
}

uint64_t sub_117120(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *))
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_77_49");
  v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v8 = sub_BB88(v6, v7, qword_751FE0);
  v10 = sub_11CB8(v5, v8, v9);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v10);
}

int *sub_1171B8(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  unsigned int *v17;
  uint64_t v18;
  unint64_t v19;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "FB75B1EE028F765D95134B65BAFD26602EE879B247F31514268AFE1DF00830D4");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "C8CAD3DF32303A6876151218FAAA63CA0642964F0528B51E0F3BBA792A0FA006");
  v9 = sub_C1F8(v7, v8);
  v10 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_127_97");
  v12 = v11;
  v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v14 = sub_BE08(v10, v12, v13);
  v16 = sub_1023C((unsigned int *)v9, v14, v15);
  v17 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
  v18 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");
  return sub_138AC(v17, v18, v19);
}

int *sub_1172DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Fragment Simdgroups Inflight Per Shader Core");
  v6 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");
  return sub_11CB8(v5, v6, v7);
}

uint64_t sub_117340(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *))
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_78_50");
  v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v8 = sub_BB88(v6, v7, qword_751FE0);
  v10 = sub_11CB8(v5, v8, v9);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v10);
}

int *sub_1173D8(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  unsigned int *v10;
  int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "55DDF08ED5B641C5048444150A2D58A930D81F86EEA506CD8B4073F64FC0F1C2");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "C4B3D90E89BC6B96BEB336D1A17757038334C2A490EDF56428037F1BC405BF70");
  v9 = sub_C1F8(v7, v8);
  v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "E0822A12A8DD1B222198A771537F2CE4899EB45BC94D7854E0E6FA983E6EBC89");
  v11 = sub_C1F8((unsigned int *)v9, v10);
  v12 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_127_97");
  v14 = v13;
  v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v16 = sub_BE08(v12, v14, v15);
  v18 = sub_1023C((unsigned int *)v11, v16, v17);
  v19 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
  v20 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");
  return sub_138AC(v19, v20, v21);
}

int *sub_117524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "Compute Simdgroups Inflight Per Shader Core");
  v6 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");
  return sub_11CB8(v5, v6, v7);
}

uint64_t sub_117588(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *))
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_79_51");
  v6 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v8 = sub_BB88(v6, v7, qword_751FE0);
  v10 = sub_11CB8(v5, v8, v9);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v10);
}

int *sub_117620(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int *v8;
  int *v9;
  unsigned int *v10;
  int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "33634F0DC72BA827D588E38DC75C388CF4976E4671D85148780CFAFD262B07FB");
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "FD6F91B4C067953424B95F0B332F0FB4A64F7E43DC4D6E8CDE26B1D5D7C07A42");
  v9 = sub_C1F8(v7, v8);
  v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "50E7E1AAC46F3CF79A6B3BB2DDC0BCDCF0ACD9011439415E47AEA7B6579F3EA8");
  v11 = sub_C1F8((unsigned int *)v9, v10);
  v12 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_127_97");
  v14 = v13;
  v15 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v16 = sub_BE08(v12, v14, v15);
  v18 = sub_1023C((unsigned int *)v11, v16, v17);
  v19 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v18);
  v20 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");
  return sub_138AC(v19, v20, v21);
}

int *sub_11776C(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "3AFE7FC24E518305DB9BB516AE4AA6725E13A423016B31BAFEBFD6FA09AFAFCD");
  v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_128_98");
  v10 = v9;
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");
  v12 = v11;
  v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v14 = sub_BB88(a4, v12, v13);
  v15 = sub_BE08(v8, v10, v14);
  v17 = sub_1023C(v7, v15, v16);
  v18 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v17);
  v19 = sub_BB28();
  return sub_138AC(v18, v19, v20);
}

uint64_t sub_117894(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_6d6a7c8efb15986fa71f8bf4a6a06f8942199b36680e516766e92490607c958d");
  v4 = sub_BB28();
  v6 = sub_1023C(v3, v4, v5);
  return sub_169C9C(a2, v6);
}

uint64_t sub_1178F8(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  int *v5;
  unsigned int *v6;
  int *v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_190175e7010a5c90cc957e3f3eed64c3910111ef228808fbb2462cd269524ef5");
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_e7982344eb9c10ce1e1e9e179c01bb8a55934656fd5d499f956d6e35e42f1f10");
  v5 = sub_C1F8(v3, v4);
  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_aac2d2ece8ff1acbf2ab0f821c8f1e4e2dbb2ca4c3a6918e2dc458dfab8ee05c");
  v7 = sub_C1F8((unsigned int *)v5, v6);
  v8 = sub_BB28();
  v10 = sub_1023C((unsigned int *)v7, v8, v9);
  return sub_169C9C(a2, v10);
}

uint64_t sub_1179AC(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  int *v5;
  unsigned int *v6;
  int *v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f539a056fbd45e39d61b9d34af0ea1a305dd8af6f005b5aa29488f2c966e7f21");
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_c420303ee3c2ea941491fa0a071ec1553251898524fce318c3635bc711160395");
  v5 = sub_C1F8(v3, v4);
  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_c89f25b2a31116ea6540fc6b89b623da7d4cbc9b2349ce7dbe4423a1395da60a");
  v7 = sub_C1F8((unsigned int *)v5, v6);
  v8 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_7eba0657c66c2437c8d6952fb82117b9399d920ea84fa32c5bdc9d1dee49e290");
  v9 = sub_C1F8((unsigned int *)v7, v8);
  v10 = sub_BB28();
  v12 = sub_1023C((unsigned int *)v9, v10, v11);
  return sub_169C9C(a2, v12);
}

uint64_t sub_117A88(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_7df466c5ce6d100c121c263bbbff0effc1e4806f9bdb997e3c9b3c3bd4753064");
  v4 = sub_BB28();
  v6 = sub_1023C(v3, v4, v5);
  return sub_169C9C(a2, v6);
}

uint64_t sub_117AEC(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  int *v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_e7982344eb9c10ce1e1e9e179c01bb8a55934656fd5d499f956d6e35e42f1f10");
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_aac2d2ece8ff1acbf2ab0f821c8f1e4e2dbb2ca4c3a6918e2dc458dfab8ee05c");
  v5 = sub_C1F8(v3, v4);
  v6 = sub_BB28();
  v8 = sub_1023C((unsigned int *)v5, v6, v7);
  return sub_169C9C(a2, v8);
}

uint64_t sub_117B78(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  int *v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_f539a056fbd45e39d61b9d34af0ea1a305dd8af6f005b5aa29488f2c966e7f21");
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_c420303ee3c2ea941491fa0a071ec1553251898524fce318c3635bc711160395");
  v5 = sub_C1F8(v3, v4);
  v6 = sub_BB28();
  v8 = sub_1023C((unsigned int *)v5, v6, v7);
  return sub_169C9C(a2, v8);
}

int *sub_117C04(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "AF Bandwidth");
  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "AF Read Bandwidth");
  return sub_D108(v3, v4);
}

uint64_t sub_117C5C(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "_5c5c55d05fb355aa5be61ac63c88eb4a2a521a47dd8f79c18b5c1df163d5cb55");
  v4 = sub_BB28();
  v6 = sub_1023C(v3, v4, v5);
  return sub_169C9C(a2, v6);
}

uint64_t sub_117CC0(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_31_3");
  v4 = sub_BB28();
  v6 = sub_1023C(v3, v4, v5);
  return sub_169C9C(a2, v6);
}

uint64_t sub_117D24(unsigned int *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;

  v3 = sub_11F3A8(a1, a2);
  v4 = sub_BB28();
  v6 = sub_1023C((unsigned int *)v3, v4, v5);
  return sub_169C9C(a2, v6);
}

uint64_t sub_117D70(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;

  v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_33_5");
  v4 = sub_BB28();
  v6 = sub_1023C(v3, v4, v5);
  return sub_169C9C(a2, v6);
}

uint64_t sub_117DD4(unsigned int *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;

  v3 = sub_11F5A4(a1, a2);
  v4 = sub_BB28();
  v6 = sub_1023C((unsigned int *)v3, v4, v5);
  return sub_169C9C(a2, v6);
}

uint64_t sub_117E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;

  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_46_18");
  v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_94_64");
  v9 = sub_1023C(v6, v7, v8);
  return sub_169C9C(a2, v9);
}

uint64_t sub_117E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;

  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_47_19");
  v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_96_66");
  v9 = sub_1023C(v6, v7, v8);
  return sub_169C9C(a2, v9);
}

uint64_t sub_117F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v6;
  unsigned int *v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035");
  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A");
  v8 = sub_C1F8(v6, v7);
  v9 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_106_76");
  v11 = sub_1023C((unsigned int *)v8, v9, v10);
  return sub_169C9C(a2, v11);
}

uint64_t sub_117FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v6;
  unsigned int *v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D");
  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46");
  v8 = sub_C1F8(v6, v7);
  v9 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_106_76");
  v11 = sub_1023C((unsigned int *)v8, v9, v10);
  return sub_169C9C(a2, v11);
}

uint64_t sub_118060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;

  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182");
  v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_108_78");
  v9 = sub_1023C(v6, v7, v8);
  return sub_169C9C(a2, v9);
}

uint64_t sub_1180DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;

  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791");
  v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_108_78");
  v9 = sub_1023C(v6, v7, v8);
  return sub_169C9C(a2, v9);
}

uint64_t sub_118158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v6;
  unsigned int *v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE");
  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A");
  v8 = sub_C1F8(v6, v7);
  v9 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_110_80");
  v11 = sub_1023C((unsigned int *)v8, v9, v10);
  return sub_169C9C(a2, v11);
}

uint64_t sub_1181FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v6;
  unsigned int *v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;

  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38");
  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472");
  v8 = sub_C1F8(v6, v7);
  v9 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_110_80");
  v11 = sub_1023C((unsigned int *)v8, v9, v10);
  return sub_169C9C(a2, v11);
}

uint64_t sub_1182A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;

  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_39_11");
  v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_98_68");
  v9 = sub_1023C(v6, v7, v8);
  return sub_169C9C(a2, v9);
}

uint64_t sub_11831C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;

  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_40_12");
  v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_98_68");
  v9 = sub_1023C(v6, v7, v8);
  return sub_169C9C(a2, v9);
}

uint64_t sub_118398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;

  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_37_9");
  v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_102_72");
  v9 = sub_1023C(v6, v7, v8);
  return sub_169C9C(a2, v9);
}

uint64_t sub_118414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;

  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_38_10");
  v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_102_72");
  v9 = sub_1023C(v6, v7, v8);
  return sub_169C9C(a2, v9);
}

uint64_t sub_118490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;

  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_35_7");
  v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_104_74");
  v9 = sub_1023C(v6, v7, v8);
  return sub_169C9C(a2, v9);
}

uint64_t sub_11850C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;

  v6 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_36_8");
  v7 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_104_74");
  v9 = sub_1023C(v6, v7, v8);
  return sub_169C9C(a2, v9);
}

int *sub_118588(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "E2175386E8858E1E5273EB120A19C734896FE34E529B7720E38F90C3E66633CC");
  v3 = sub_BB28();
  return sub_138AC(v2, v3, v4);
}

int *sub_1185D8(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *))
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;

  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "E2175386E8858E1E5273EB120A19C734896FE34E529B7720E38F90C3E66633CC");
  v6 = sub_BB28();
  v8 = sub_1023C(v5, v6, v7);
  v9 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v11 = sub_11CB8((unsigned int *)v8, v9, v10);
  v12 = (unsigned int *)(**(uint64_t (***)(uint64_t, int *))a2)(a2, v11);
  v13 = sub_BB28();
  return sub_138AC(v12, v13, v14);
}

uint64_t sub_1186A8(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "F5B97BA71877E7014D8BB80B1B5750123154A26D4FD86B41AE0525EDEF44A41B");
  v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_141_110");
  v10 = sub_1023C(v7, v8, v9);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_140_109");
  v12 = v11;
  v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v14 = sub_BB88(a4, v12, v13);
  v16 = sub_11CB8((unsigned int *)v10, v14, v15);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
}

uint64_t sub_1187A4(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, char *), uint64_t (***a4)(_QWORD, const char *))
{
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;

  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "CBB7FC5C90F6950C90B30709E38AC295085E9F9A5D82EB5DF56E89752A1E0252");
  v8 = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_141_110");
  v10 = sub_1023C(v7, v8, v9);
  LODWORD(a4) = (**a4)(a4, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_140_109");
  v12 = v11;
  v13 = (**a3)(a3, kAGXPSCounterConstantNumCores);
  v14 = sub_BB88(a4, v12, v13);
  v16 = sub_11CB8((unsigned int *)v10, v14, v15);
  return (**(uint64_t (***)(uint64_t, int *))a2)(a2, v16);
}

uint64_t sub_1188A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "A5AD2AAF51022A15627C4C6C3F18D612BFF2CA7F01F65EC1C26965ED6DDC6563");
  return agxps_timeseries_copy(v2);
}

uint64_t sub_1188C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "D51129E2277ED8B7AE37E82DA9F8FEB9C3FDB71EC4E4B5548B4D3763A89AF1C2");
  return agxps_timeseries_copy(v2);
}

uint64_t sub_1188F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "6634D05466F515CAD98B1548EE7DCC52386712E059BE4C1A3FBB157892D9D61E");
  return agxps_timeseries_copy(v2);
}

uint64_t sub_118918@<X0>(uint64_t *a1@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  double v21;
  double v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BOOL4 v88;
  int v89;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BOOL4 v114;
  int v115;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _BOOL4 v140;
  int v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  BOOL v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _BOOL4 v173;
  int v174;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _BOOL4 v205;
  int v206;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  BOOL v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _BOOL4 v246;
  int v247;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t j;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t k;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  BOOL v290;
  double v291;
  _QWORD *v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t m;
  _BOOL4 v296;
  int v297;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  unint64_t v307;
  uint64_t v308;
  void *v309;
  uint64_t result;
  uint64_t v311;
  BOOL v312;
  int v313;
  uint64_t v314;
  _QWORD *v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t n;
  _BOOL4 v319;
  int v320;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  BOOL v331;
  int v332;
  double v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  void *v346[2];
  char v347;
  void *v348[2];
  char v349;
  void *v350[2];
  char v351;
  void *v352[2];
  char v353;
  void *v354[2];
  char v355;
  void *v356[2];
  char v357;
  void *v358[2];
  char v359;
  void *v360[2];
  char v361;
  void *v362[2];
  char v363;
  void *v364[2];
  char v365;
  void *v366[2];
  char v367;
  void *v368[2];
  char v369;
  void *v370[2];
  char v371;
  void *v372[2];
  char v373;
  void *v374[2];
  char v375;
  void *v376[2];
  char v377;
  void *v378[2];
  char v379;
  void *v380[2];
  char v381;
  void *v382[2];
  char v383;
  void *v384[2];
  char v385;
  void *v386[2];
  char v387;
  void *v388[2];
  char v389;
  void *v390[2];
  char v391;
  void *v392[2];
  char v393;
  void *v394[2];
  char v395;
  void *v396[2];
  char v397;
  void *v398[2];
  char v399;
  void *v400[2];
  char v401;
  void *v402[2];
  char v403;
  void *v404[2];
  char v405;
  void *v406[2];
  char v407;
  __int128 v408;
  char v409;
  void *v410[2];
  char v411;
  void *v412[2];
  char v413;
  void *v414[2];
  char v415;
  void *v416[2];
  char v417;
  void *v418[2];
  char v419;
  void *v420[2];
  char v421;
  void *v422[2];
  char v423;
  void *v424[2];
  char v425;
  void *v426[2];
  char v427;
  void *v428[2];
  char v429;
  void *v430[2];
  char v431;
  void *v432[2];
  char v433;
  void *v434[2];
  char v435;
  void *v436[2];
  char v437;
  void *v438[2];
  char v439;
  void *v440[2];
  char v441;
  void *v442[2];
  char v443;
  void *v444[2];
  char v445;
  void *v446[2];
  char v447;
  void *v448[2];
  char v449;
  void *v450[2];
  char v451;
  void *v452[2];
  char v453;
  void *v454[2];
  char v455;
  void *v456[2];
  char v457;
  void *v458[2];
  char v459;
  void *v460[2];
  char v461;
  void *v462[2];
  char v463;
  void *v464[2];
  char v465;
  void *v466[2];
  char v467;
  void *v468[2];
  char v469;
  void *v470[2];
  char v471;
  void *v472[2];
  char v473;
  void *v474[2];
  char v475;
  void *v476[2];
  char v477;
  void *v478[2];
  char v479;
  void *v480[2];
  char v481;
  void *v482[2];
  char v483;
  void *v484[2];
  char v485;
  void *v486[2];
  char v487;
  void *v488[2];
  char v489;
  void *v490[2];
  char v491;
  void *v492[2];
  char v493;
  void *v494[2];
  char v495;
  void *v496[2];
  char v497;
  void *v498[2];
  char v499;
  void *v500[2];
  char v501;
  void *v502[2];
  char v503;
  void *v504[2];
  char v505;
  void *v506[2];
  char v507;
  void *v508[2];
  char v509;
  void *v510[2];
  char v511;
  void *v512[2];
  char v513;
  void *v514[2];
  char v515;
  void *v516[2];
  char v517;
  void *v518[2];
  char v519;
  void *v520[2];
  char v521;
  void *v522[2];
  char v523;
  void *v524[2];
  char v525;
  void *v526[2];
  char v527;
  void *v528[2];
  char v529;
  void *v530[2];
  char v531;
  void *v532[2];
  char v533;
  void *v534[2];
  char v535;
  void *v536[2];
  char v537;
  void *v538[2];
  char v539;
  void *v540[2];
  char v541;
  void *v542[2];
  char v543;
  void *v544[2];
  char v545;
  void *v546[2];
  char v547;
  void *v548[2];
  char v549;
  void *v550[2];
  char v551;
  void *v552[2];
  char v553;
  void *v554[2];
  char v555;
  void *v556[2];
  char v557;
  void *v558[2];
  char v559;
  void *v560[2];
  char v561;
  void *v562[2];
  char v563;
  void *v564[2];
  char v565;
  void *v566[2];
  char v567;
  void *v568[2];
  char v569;
  void *v570[2];
  char v571;
  void *v572[2];
  char v573;
  void *v574[2];
  char v575;
  void *v576[2];
  char v577;
  void *v578[2];
  char v579;
  void *v580[2];
  char v581;
  void *v582[2];
  char v583;
  void *v584[2];
  char v585;
  void *v586[2];
  char v587;
  void *v588[2];
  char v589;
  void *v590[2];
  char v591;
  void *v592[2];
  char v593;
  void *v594[2];
  char v595;
  void *v596[2];
  char v597;
  void *v598[2];
  char v599;
  void *v600[2];
  char v601;
  void *v602[2];
  char v603;
  void *v604[2];
  char v605;
  void *v606[2];
  char v607;
  void *v608[2];
  char v609;
  void *v610[2];
  char v611;
  void *v612[2];
  char v613;
  void *v614[2];
  char v615;
  void *v616[2];
  char v617;
  void *v618[2];
  char v619;
  void *v620[2];
  char v621;
  void *v622[2];
  char v623;
  void *v624[2];
  char v625;
  void *v626[2];
  char v627;
  void *v628[2];
  char v629;
  void *v630[2];
  char v631;
  void *v632[2];
  char v633;
  void *v634[2];
  char v635;
  void *v636[2];
  char v637;
  void *v638[2];
  char v639;
  void *v640[2];
  char v641;
  void *v642[2];
  char v643;
  void *v644[2];
  char v645;
  void *v646[2];
  char v647;
  void *v648[2];
  char v649;
  void *v650[2];
  char v651;
  void *v652[2];
  char v653;
  void *v654[2];
  char v655;
  void *v656[2];
  char v657;
  void *v658[2];
  char v659;
  void *v660[2];
  char v661;
  void *v662[2];
  char v663;
  void *v664[2];
  char v665;
  void *v666[2];
  char v667;
  void *v668[2];
  char v669;
  void *v670[2];
  char v671;
  void *v672[2];
  char v673;
  void *v674[2];
  char v675;
  void *v676[2];
  char v677;
  void *v678[2];
  char v679;
  void *v680[2];
  char v681;
  void *v682[2];
  char v683;
  void *v684[2];
  char v685;
  void *v686[2];
  char v687;
  void *v688[2];
  char v689;
  void *v690[2];
  char v691;
  void *v692[2];
  char v693;
  void *v694[2];
  char v695;
  void *v696[2];
  char v697;
  void *v698[2];
  char v699;
  void *v700[2];
  char v701;
  void *v702[2];
  char v703;
  void *v704[2];
  char v705;
  void *v706[2];
  char v707;
  void *v708[2];
  char v709;
  void *v710[2];
  char v711;
  void *v712[2];
  char v713;
  void *v714[2];
  char v715;
  void *v716[2];
  char v717;
  void *v718[2];
  char v719;
  void *v720[2];
  char v721;
  void *v722[2];
  char v723;
  void *v724[2];
  char v725;
  void *v726[2];
  char v727;
  void *v728[2];
  char v729;
  void *v730[2];
  char v731;
  void *v732[2];
  char v733;
  void *v734[2];
  char v735;
  void *v736[2];
  char v737;
  void *v738[2];
  char v739;
  void *v740[2];
  char v741;
  void *v742[2];
  char v743;
  void *v744[2];
  char v745;
  void *v746[2];
  char v747;
  void *v748[2];
  char v749;
  void *v750[2];
  char v751;
  void *v752[2];
  char v753;
  void *v754[2];
  char v755;
  void *v756[2];
  char v757;
  void *v758[2];
  char v759;
  void *v760[2];
  char v761;
  void *v762[2];
  char v763;
  void *v764[2];
  char v765;
  void *v766[2];
  char v767;
  void *v768[2];
  char v769;
  void *v770[2];
  char v771;
  void *v772[2];
  char v773;
  void *v774[2];
  char v775;
  void *v776[2];
  char v777;
  void *v778[2];
  char v779;
  void *v780[2];
  char v781;
  void *v782[2];
  char v783;
  void *v784[2];
  char v785;
  void *v786[2];
  char v787;
  void *v788[2];
  char v789;
  void *v790[2];
  char v791;
  void *v792[2];
  char v793;
  void *v794[2];
  char v795;
  void *v796[2];
  char v797;
  void *v798[2];
  char v799;
  void *v800[2];
  char v801;
  void *v802[2];
  char v803;
  void *v804[2];
  char v805;
  void *v806[2];
  char v807;
  void *v808[2];
  char v809;
  void *v810[2];
  char v811;
  void *v812[2];
  char v813;
  void *v814[2];
  char v815;
  void *v816[2];
  char v817;
  void *v818[2];
  char v819;
  void *v820[2];
  char v821;
  void *v822[2];
  char v823;
  void *v824[2];
  char v825;
  void *v826[2];
  char v827;
  void *v828[2];
  char v829;
  void *v830[2];
  char v831;
  void *v832[2];
  char v833;
  void *v834[2];
  char v835;
  void *v836[2];
  char v837;
  void *v838[2];
  char v839;
  void *v840[2];
  char v841;
  void *v842[2];
  char v843;
  void *v844[2];
  char v845;
  void *v846[2];
  char v847;
  void *v848[2];
  char v849;
  void *v850[2];
  char v851;
  void *v852[2];
  char v853;
  void *v854[2];
  char v855;
  void *v856[2];
  char v857;
  void *v858[2];
  char v859;
  void *v860[2];
  char v861;
  void *v862[2];
  char v863;
  void *v864[2];
  char v865;
  void *v866[2];
  char v867;
  void *v868[2];
  char v869;
  void *v870[2];
  char v871;
  void *v872[2];
  char v873;
  void *v874[2];
  char v875;
  void *v876[2];
  char v877;
  void *v878[2];
  char v879;
  void *v880[2];
  char v881;
  void *v882[2];
  char v883;
  void *v884[2];
  char v885;
  void *v886[2];
  char v887;
  void *v888[2];
  char v889;
  void *v890[2];
  char v891;
  void *v892[2];
  char v893;
  void *v894[2];
  char v895;
  void *v896[2];
  char v897;
  void *v898[2];
  char v899;
  void *v900[2];
  char v901;
  void *v902[2];
  char v903;
  void *v904[2];
  char v905;
  void *v906[2];
  char v907;
  void *v908[2];
  char v909;
  void *v910[2];
  char v911;
  void *v912[2];
  char v913;
  void *v914[2];
  char v915;
  void *v916[2];
  char v917;
  void *v918[2];
  char v919;
  void *__p[2];
  char v921;
  void *v922[2];
  char v923;
  void *v924[2];
  char v925;
  void *v926[2];
  char v927;
  void *v928[2];
  char v929;
  void *v930[2];
  char v931;
  void *v932[2];
  char v933;
  void *v934[2];
  char v935;
  void *v936[2];
  char v937;
  uint64_t v938;
  _BYTE v939[40];
  _BYTE v940[48];
  _BYTE v941[40];
  _BYTE v942[48];
  uint64_t v943;
  int v944;
  char v945;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = 0x30000000FLL;
  while (2)
  {
    v3 = HIDWORD(v2);
    sub_4784((uint64_t)&v938, v2, SHIDWORD(v2));
    sub_96CC(&v943, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_129_99");
    v4 = sub_4BD8((uint64_t)&v938, (uint64_t)&v943, 64.0);
    sub_96CC(v936, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_130_100");
    v5 = sub_4BD8(v4, (uint64_t)v936, 196608.0);
    sub_96CC(v934, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_131_101");
    v6 = sub_4BD8(v5, (uint64_t)v934, 128.0);
    sub_96CC(v932, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_132_102");
    v7 = sub_4BD8(v6, (uint64_t)v932, 2.0);
    sub_96CC(v930, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_133_103");
    v8 = sub_4BD8(v7, (uint64_t)v930, 64.0);
    sub_96CC(v928, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_134_104");
    v9 = sub_4BD8(v8, (uint64_t)v928, 2.0);
    sub_96CC(v926, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_135_105");
    v10 = sub_4BD8(v9, (uint64_t)v926, 4.0);
    sub_96CC(v924, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_136_106");
    v11 = sub_4BD8(v10, (uint64_t)v924, 4.0);
    sub_96CC(v922, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_137_107");
    v12 = sub_4BD8(v11, (uint64_t)v922, 64.0);
    sub_96CC(__p, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_138_108");
    v13 = (_QWORD *)sub_4BD8(v12, (uint64_t)__p, 384.0);
    v14 = a1[1];
    if (v14 >= a1[2])
    {
      v15 = sub_11F97C(a1, v13);
    }
    else
    {
      sub_4988(a1[1], v13);
      v15 = v14 + 176;
      a1[1] = v14 + 176;
    }
    a1[1] = v15;
    if (v921 < 0)
      operator delete(__p[0]);
    if (v923 < 0)
      operator delete(v922[0]);
    if (v925 < 0)
      operator delete(v924[0]);
    if (v927 < 0)
      operator delete(v926[0]);
    if (v929 < 0)
      operator delete(v928[0]);
    if (v931 < 0)
      operator delete(v930[0]);
    if (v933 < 0)
      operator delete(v932[0]);
    if (v935 < 0)
      operator delete(v934[0]);
    if (v937 < 0)
      operator delete(v936[0]);
    if (v945 < 0)
      operator delete((void *)v943);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
    sub_6E30((uint64_t)v940);
    sub_6B2C((uint64_t)v939);
    switch(HIDWORD(v2))
    {
      case 1:
        LODWORD(v3) = 2;
        goto LABEL_31;
      case 2:
        LODWORD(v3) = 3;
        goto LABEL_31;
      case 3:
        LODWORD(v3) = 4;
        goto LABEL_31;
      case 4:
        LODWORD(v3) = 5;
        goto LABEL_31;
      case 5:
        LODWORD(v3) = 6;
        goto LABEL_31;
      case 6:
        switch((int)v2)
        {
          case 10:
            LODWORD(v3) = 1;
            LODWORD(v2) = 11;
            goto LABEL_31;
          case 11:
            LODWORD(v3) = 1;
            LODWORD(v2) = 12;
            goto LABEL_31;
          case 12:
            LODWORD(v3) = 1;
            LODWORD(v2) = 13;
            goto LABEL_31;
          case 13:
            LODWORD(v3) = 1;
            LODWORD(v2) = 14;
            goto LABEL_31;
          case 14:
            LODWORD(v3) = 1;
            LODWORD(v2) = 15;
            goto LABEL_31;
          case 15:
            LODWORD(v3) = 1;
            LODWORD(v2) = 16;
            goto LABEL_31;
          case 16:
            LODWORD(v3) = 1;
            LODWORD(v2) = 17;
            goto LABEL_31;
          case 17:
            goto LABEL_42;
          default:
            LODWORD(v3) = 1;
            goto LABEL_31;
        }
        goto LABEL_42;
      default:
LABEL_31:
        v2 = v2 | ((unint64_t)v3 << 32);
        if (v2 != 0x300000011)
          continue;
LABEL_42:
        v16 = 0;
        break;
    }
    break;
  }
  do
  {
    v17 = 0;
    v345 = v16;
    v18 = dword_4A40D8[v16];
    v19 = v18 - 1;
    do
    {
      v20 = dword_4A40F0[v17];
      if (v20 == 10)
        v21 = 64.0;
      else
        v21 = 96.0;
      if (v20 == 15 && v19 < 2 || v20 < 15)
        v24 = 0.0;
      else
        v24 = 48.0;
      sub_4784((uint64_t)&v938, v20, v18);
      sub_96CC(v918, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_82_52");
      v25 = sub_4BD8((uint64_t)&v938, (uint64_t)v918, 32.0);
      sub_96CC(v916, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_83_53");
      v26 = sub_4BD8(v25, (uint64_t)v916, v21 + v24);
      sub_96CC(v914, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_84_54");
      v27 = (_QWORD *)sub_4BD8(v26, (uint64_t)v914, v21);
      v28 = a1[1];
      if (v28 >= a1[2])
      {
        v29 = sub_11F97C(a1, v27);
      }
      else
      {
        sub_4988(a1[1], v27);
        v29 = v28 + 176;
        a1[1] = v28 + 176;
      }
      a1[1] = v29;
      if (v915 < 0)
        operator delete(v914[0]);
      if (v917 < 0)
        operator delete(v916[0]);
      if (v919 < 0)
        operator delete(v918[0]);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_6E30((uint64_t)v940);
      sub_6B2C((uint64_t)v939);
      ++v17;
    }
    while (v17 != 8);
    v30 = 0;
    v943 = 0xB0000000ALL;
    do
    {
      sub_4784((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v30), v18);
      sub_96CC(v912, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_28_0");
      sub_96CC(v910, "_90784375edce0b872bddf54d5fdc7e2419df531375843de0472b43e95edffe2b");
      v31 = sub_49CC((uint64_t)&v938, (__int128 *)v912, (__int128 *)v910);
      sub_96CC(v908, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_28_0");
      sub_96CC(v906, "_e5f2d8a6cf9651b49b3b00bebdf815a5269b8c89fc3bc02057a3a14e28733495");
      v32 = sub_49CC(v31, (__int128 *)v908, (__int128 *)v906);
      sub_96CC(v904, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_86_56");
      v33 = (_QWORD *)sub_4BD8(v32, (uint64_t)v904, 0.25);
      v34 = a1[1];
      if (v34 >= a1[2])
      {
        v35 = sub_11F97C(a1, v33);
      }
      else
      {
        sub_4988(a1[1], v33);
        v35 = v34 + 176;
        a1[1] = v34 + 176;
      }
      a1[1] = v35;
      if (v905 < 0)
        operator delete(v904[0]);
      if (v907 < 0)
        operator delete(v906[0]);
      if (v909 < 0)
        operator delete(v908[0]);
      if (v911 < 0)
        operator delete(v910[0]);
      if (v913 < 0)
        operator delete(v912[0]);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_6E30((uint64_t)v940);
      sub_6B2C((uint64_t)v939);
      v30 += 4;
    }
    while (v30 != 8);
    sub_4784((uint64_t)&v938, 12, v18);
    sub_96CC(v902, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_28_0");
    sub_96CC(v900, "_90784375edce0b872bddf54d5fdc7e2419df531375843de0472b43e95edffe2b");
    v36 = sub_49CC((uint64_t)&v938, (__int128 *)v902, (__int128 *)v900);
    sub_96CC(v898, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_28_0");
    sub_96CC(v896, "_e5f2d8a6cf9651b49b3b00bebdf815a5269b8c89fc3bc02057a3a14e28733495");
    v37 = sub_49CC(v36, (__int128 *)v898, (__int128 *)v896);
    sub_96CC(v894, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_86_56");
    v38 = (_QWORD *)sub_4BD8(v37, (uint64_t)v894, 1.0);
    v39 = a1[1];
    if (v39 >= a1[2])
    {
      v40 = sub_11F97C(a1, v38);
    }
    else
    {
      sub_4988(a1[1], v38);
      v40 = v39 + 176;
      a1[1] = v39 + 176;
    }
    a1[1] = v40;
    if (v895 < 0)
      operator delete(v894[0]);
    if (v897 < 0)
      operator delete(v896[0]);
    if (v899 < 0)
      operator delete(v898[0]);
    if (v901 < 0)
      operator delete(v900[0]);
    if (v903 < 0)
      operator delete(v902[0]);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
    sub_6E30((uint64_t)v940);
    sub_6B2C((uint64_t)v939);
    for (i = 0; i != 7; ++i)
    {
      sub_4784((uint64_t)&v938, dword_4A4110[i], v18);
      sub_96CC(v892, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_29_1");
      sub_96CC(v890, "_6d6a7c8efb15986fa71f8bf4a6a06f8942199b36680e516766e92490607c958d");
      v42 = sub_49CC((uint64_t)&v938, (__int128 *)v892, (__int128 *)v890);
      sub_96CC(v888, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_30_2");
      sub_96CC(v886, "_fdc48a2370f6885da6ac169661812057de2cf71fbbbcb5df8348a78f112992dc");
      v43 = (_QWORD *)sub_49CC(v42, (__int128 *)v888, (__int128 *)v886);
      v44 = a1[1];
      if (v44 >= a1[2])
      {
        v45 = sub_11F97C(a1, v43);
      }
      else
      {
        sub_4988(a1[1], v43);
        v45 = v44 + 176;
        a1[1] = v44 + 176;
      }
      a1[1] = v45;
      if (v887 < 0)
        operator delete(v886[0]);
      if (v889 < 0)
        operator delete(v888[0]);
      if (v891 < 0)
        operator delete(v890[0]);
      if (v893 < 0)
        operator delete(v892[0]);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_6E30((uint64_t)v940);
      sub_6B2C((uint64_t)v939);
    }
    v46 = 0;
    v943 = 0x100000000FLL;
    v944 = 17;
    do
    {
      v47 = v19 < 2;
      v48 = *(_DWORD *)((char *)&v943 + v46);
      if (v48 != 15)
        v47 = 0;
      if (v48 >= 15 && !v47)
      {
        sub_4784((uint64_t)&v938, v48, v18);
        sub_96CC(v884, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_87_57");
        v49 = sub_4BD8((uint64_t)&v938, (uint64_t)v884, 0.0833333333);
        sub_96CC(v882, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_88_58");
        v50 = (_QWORD *)sub_4BD8(v49, (uint64_t)v882, 0.0833333333);
        v51 = a1[1];
        if (v51 >= a1[2])
        {
          v52 = sub_11F97C(a1, v50);
        }
        else
        {
          sub_4988(a1[1], v50);
          v52 = v51 + 176;
          a1[1] = v51 + 176;
        }
        a1[1] = v52;
        if (v883 < 0)
          operator delete(v882[0]);
        if (v885 < 0)
          operator delete(v884[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        sub_6B2C((uint64_t)v939);
      }
      v46 += 4;
    }
    while (v46 != 12);
    v53 = 0;
    v943 = 0x100000000FLL;
    v944 = 17;
    do
    {
      v54 = v19 < 2;
      v55 = *(_DWORD *)((char *)&v943 + v53);
      if (v55 != 15)
        v54 = 0;
      if (v55 >= 15 && !v54)
      {
        sub_4784((uint64_t)&v938, v55, v18);
        sub_96CC(v880, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_37_9");
        sub_96CC(v878, "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174");
        v56 = sub_49CC((uint64_t)&v938, (__int128 *)v880, (__int128 *)v878);
        sub_96CC(v876, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_38_10");
        sub_96CC(v874, "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69");
        v57 = sub_49CC(v56, (__int128 *)v876, (__int128 *)v874);
        sub_96CC(v872, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_39_11");
        sub_96CC(v870, "E4079A9FE3685ED6370986B0373FFC91E49069A610571534C42255467036D7CD");
        v58 = sub_49CC(v57, (__int128 *)v872, (__int128 *)v870);
        sub_96CC(v868, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_40_12");
        sub_96CC(v866, "6060A012307BC0711368543129DC26F4493F2C5C30CAF9D4F782C065929930B3");
        v59 = sub_49CC(v58, (__int128 *)v868, (__int128 *)v866);
        sub_96CC(v864, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_41_13");
        sub_96CC(v862, "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A");
        v60 = sub_49CC(v59, (__int128 *)v864, (__int128 *)v862);
        sub_96CC(v860, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_42_14");
        sub_96CC(v858, "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472");
        v61 = sub_49CC(v60, (__int128 *)v860, (__int128 *)v858);
        sub_96CC(v856, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_89_59");
        v62 = sub_4BD8(v61, (uint64_t)v856, 0.03125);
        sub_96CC(v854, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_97_67");
        v63 = sub_4BD8(v62, (uint64_t)v854, 0.03125);
        sub_96CC(v852, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_98_68");
        v64 = sub_4BD8(v63, (uint64_t)v852, 8.0);
        sub_96CC(v850, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_99_69");
        v65 = sub_4BD8(v64, (uint64_t)v850, 0.03125);
        sub_96CC(v848, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_100_70");
        v66 = sub_4BD8(v65, (uint64_t)v848, 8.0);
        sub_96CC(v846, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_101_71");
        v67 = sub_4BD8(v66, (uint64_t)v846, 0.03125);
        sub_96CC(v844, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_102_72");
        v68 = sub_4BD8(v67, (uint64_t)v844, 8.0);
        sub_96CC(v842, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_103_73");
        v69 = sub_4BD8(v68, (uint64_t)v842, 0.03125);
        sub_96CC(v840, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_104_74");
        v70 = sub_4BD8(v69, (uint64_t)v840, 8.0);
        sub_96CC(v838, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_105_75");
        v71 = sub_4BD8(v70, (uint64_t)v838, 0.03125);
        sub_96CC(v836, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_106_76");
        v72 = sub_4BD8(v71, (uint64_t)v836, 8.0);
        sub_96CC(v834, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_107_77");
        v73 = sub_4BD8(v72, (uint64_t)v834, 0.03125);
        sub_96CC(v832, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_108_78");
        v74 = sub_4BD8(v73, (uint64_t)v832, 8.0);
        sub_96CC(v830, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_109_79");
        v75 = sub_4BD8(v74, (uint64_t)v830, 0.03125);
        sub_96CC(v828, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_110_80");
        v76 = (_QWORD *)sub_4BD8(v75, (uint64_t)v828, 8.0);
        v77 = a1[1];
        if (v77 >= a1[2])
        {
          v78 = sub_11F97C(a1, v76);
        }
        else
        {
          sub_4988(a1[1], v76);
          v78 = v77 + 176;
          a1[1] = v77 + 176;
        }
        a1[1] = v78;
        if (v829 < 0)
          operator delete(v828[0]);
        if (v831 < 0)
          operator delete(v830[0]);
        if (v833 < 0)
          operator delete(v832[0]);
        if (v835 < 0)
          operator delete(v834[0]);
        if (v837 < 0)
          operator delete(v836[0]);
        if (v839 < 0)
          operator delete(v838[0]);
        if (v841 < 0)
          operator delete(v840[0]);
        if (v843 < 0)
          operator delete(v842[0]);
        if (v845 < 0)
          operator delete(v844[0]);
        if (v847 < 0)
          operator delete(v846[0]);
        if (v849 < 0)
          operator delete(v848[0]);
        if (v851 < 0)
          operator delete(v850[0]);
        if (v853 < 0)
          operator delete(v852[0]);
        if (v855 < 0)
          operator delete(v854[0]);
        if (v857 < 0)
          operator delete(v856[0]);
        if (v859 < 0)
          operator delete(v858[0]);
        if (v861 < 0)
          operator delete(v860[0]);
        if (v863 < 0)
          operator delete(v862[0]);
        if (v865 < 0)
          operator delete(v864[0]);
        if (v867 < 0)
          operator delete(v866[0]);
        if (v869 < 0)
          operator delete(v868[0]);
        if (v871 < 0)
          operator delete(v870[0]);
        if (v873 < 0)
          operator delete(v872[0]);
        if (v875 < 0)
          operator delete(v874[0]);
        if (v877 < 0)
          operator delete(v876[0]);
        if (v879 < 0)
          operator delete(v878[0]);
        if (v881 < 0)
          operator delete(v880[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        sub_6B2C((uint64_t)v939);
      }
      v53 += 4;
    }
    while (v53 != 12);
    v79 = 0;
    v943 = 0x100000000FLL;
    v944 = 17;
    do
    {
      v80 = v19 < 2;
      v81 = *(_DWORD *)((char *)&v943 + v79);
      if (v81 != 15)
        v80 = 0;
      if (v81 >= 15 && !v80)
      {
        sub_4784((uint64_t)&v938, v81, v18);
        sub_96CC(v826, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_31_3");
        sub_96CC(v824, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D");
        v82 = sub_49CC((uint64_t)&v938, (__int128 *)v826, (__int128 *)v824);
        sub_96CC(v822, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_35_7");
        sub_96CC(v820, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D");
        v83 = sub_49CC(v82, (__int128 *)v822, (__int128 *)v820);
        sub_96CC(v818, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_90_60");
        v84 = (_QWORD *)sub_4BD8(v83, (uint64_t)v818, 0.03125);
        v85 = a1[1];
        if (v85 >= a1[2])
        {
          v86 = sub_11F97C(a1, v84);
        }
        else
        {
          sub_4988(a1[1], v84);
          v86 = v85 + 176;
          a1[1] = v85 + 176;
        }
        a1[1] = v86;
        if (v819 < 0)
          operator delete(v818[0]);
        if (v821 < 0)
          operator delete(v820[0]);
        if (v823 < 0)
          operator delete(v822[0]);
        if (v825 < 0)
          operator delete(v824[0]);
        if (v827 < 0)
          operator delete(v826[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        sub_6B2C((uint64_t)v939);
      }
      v79 += 4;
    }
    while (v79 != 12);
    v87 = 0;
    v943 = 0xE0000000DLL;
    v944 = 15;
    do
    {
      v88 = v19 < 2;
      v89 = *(_DWORD *)((char *)&v943 + v87);
      if (v89 != 15)
        v88 = 0;
      if (v89 < 15 || v88)
      {
        sub_4784((uint64_t)&v938, v89, v18);
        sub_96CC(v816, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_31_3");
        sub_96CC(v814, "_8cd74591f03ed3eb90e0c547b8bf21ae7eed4129053f40570cce56a39a690015");
        v91 = sub_49CC((uint64_t)&v938, (__int128 *)v816, (__int128 *)v814);
        sub_96CC(v812, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_32_4");
        sub_96CC(v810, "_d0699f5ce934818cd7248127feed214216e30183a27473bea81c3d3b90578ef9");
        v92 = sub_49CC(v91, (__int128 *)v812, (__int128 *)v810);
        sub_96CC(v808, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_90_60");
        v93 = (_QWORD *)sub_4BD8(v92, (uint64_t)v808, 0.5);
        v94 = a1[1];
        if (v94 >= a1[2])
        {
          v95 = sub_11F97C(a1, v93);
        }
        else
        {
          sub_4988(a1[1], v93);
          v95 = v94 + 176;
          a1[1] = v94 + 176;
        }
        a1[1] = v95;
        if (v809 < 0)
          operator delete(v808[0]);
        if (v811 < 0)
          operator delete(v810[0]);
        if (v813 < 0)
          operator delete(v812[0]);
        if (v815 < 0)
          operator delete(v814[0]);
        if (v817 < 0)
          operator delete(v816[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        sub_6B2C((uint64_t)v939);
      }
      v87 += 4;
    }
    while (v87 != 12);
    v96 = 0;
    v943 = 0xB0000000ALL;
    v944 = 12;
    do
    {
      sub_4784((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v96), v18);
      sub_96CC(v806, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_31_3");
      sub_96CC(v804, "_f3b0ac2ff165c0670b2240e2ab5a6536283a3731be38544cccd5d6393815b687");
      v97 = sub_49CC((uint64_t)&v938, (__int128 *)v806, (__int128 *)v804);
      sub_96CC(v802, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_31_3");
      sub_96CC(v800, "_84411edb65d08697e681f20b450ed1f7aef44dbed4cce93a02d28340bb3c9dce");
      v98 = sub_49CC(v97, (__int128 *)v802, (__int128 *)v800);
      sub_96CC(v798, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_32_4");
      sub_96CC(v796, "_5fae1ea71b71c15b2c88ee87572e9af5c8e106e76f225662b93ee1e39122f488");
      v99 = sub_49CC(v98, (__int128 *)v798, (__int128 *)v796);
      sub_96CC(v794, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_32_4");
      sub_96CC(v792, "_eae3a7dc81602f26730b05b79171aa4da4f5d67d10089b075090ac21392f8550");
      v100 = sub_49CC(v99, (__int128 *)v794, (__int128 *)v792);
      sub_96CC(v790, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_90_60");
      v101 = (_QWORD *)sub_4BD8(v100, (uint64_t)v790, 0.25);
      v102 = a1[1];
      if (v102 >= a1[2])
      {
        v103 = sub_11F97C(a1, v101);
      }
      else
      {
        sub_4988(a1[1], v101);
        v103 = v102 + 176;
        a1[1] = v102 + 176;
      }
      a1[1] = v103;
      if (v791 < 0)
        operator delete(v790[0]);
      if (v793 < 0)
        operator delete(v792[0]);
      if (v795 < 0)
        operator delete(v794[0]);
      if (v797 < 0)
        operator delete(v796[0]);
      if (v799 < 0)
        operator delete(v798[0]);
      if (v801 < 0)
        operator delete(v800[0]);
      if (v803 < 0)
        operator delete(v802[0]);
      if (v805 < 0)
        operator delete(v804[0]);
      if (v807 < 0)
        operator delete(v806[0]);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_6E30((uint64_t)v940);
      sub_6B2C((uint64_t)v939);
      v96 += 4;
    }
    while (v96 != 12);
    v104 = 0;
    v943 = 0x100000000FLL;
    v944 = 17;
    do
    {
      v105 = v19 < 2;
      v106 = *(_DWORD *)((char *)&v943 + v104);
      if (v106 != 15)
        v105 = 0;
      if (v106 >= 15 && !v105)
      {
        sub_4784((uint64_t)&v938, v106, v18);
        sub_96CC(v788, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_33_5");
        sub_96CC(v786, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85");
        v107 = sub_49CC((uint64_t)&v938, (__int128 *)v788, (__int128 *)v786);
        sub_96CC(v784, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_36_8");
        sub_96CC(v782, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85");
        v108 = sub_49CC(v107, (__int128 *)v784, (__int128 *)v782);
        sub_96CC(v780, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_92_62");
        v109 = sub_4BD8(v108, (uint64_t)v780, 0.03125);
        sub_96CC(v778, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_91_61");
        v110 = (_QWORD *)sub_4BD8(v109, (uint64_t)v778, 8.0);
        v111 = a1[1];
        if (v111 >= a1[2])
        {
          v112 = sub_11F97C(a1, v110);
        }
        else
        {
          sub_4988(a1[1], v110);
          v112 = v111 + 176;
          a1[1] = v111 + 176;
        }
        a1[1] = v112;
        if (v779 < 0)
          operator delete(v778[0]);
        if (v781 < 0)
          operator delete(v780[0]);
        if (v783 < 0)
          operator delete(v782[0]);
        if (v785 < 0)
          operator delete(v784[0]);
        if (v787 < 0)
          operator delete(v786[0]);
        if (v789 < 0)
          operator delete(v788[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        sub_6B2C((uint64_t)v939);
      }
      v104 += 4;
    }
    while (v104 != 12);
    v113 = 0;
    v943 = 0xE0000000DLL;
    v944 = 15;
    do
    {
      v114 = v19 < 2;
      v115 = *(_DWORD *)((char *)&v943 + v113);
      if (v115 != 15)
        v114 = 0;
      if (v115 < 15 || v114)
      {
        sub_4784((uint64_t)&v938, v115, v18);
        sub_96CC(v776, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_33_5");
        sub_96CC(v774, "_3dfa6da703ded5b65a76ddf0aa3f7f28f19b4a624ef77347a925f55bf66a82f5");
        v117 = sub_49CC((uint64_t)&v938, (__int128 *)v776, (__int128 *)v774);
        sub_96CC(v772, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_34_6");
        sub_96CC(v770, "_04619811825d9d1620326f0529902213ffb847ef304f2532afe9a5c8e581a633");
        v118 = sub_49CC(v117, (__int128 *)v772, (__int128 *)v770);
        sub_96CC(v768, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_92_62");
        v119 = (_QWORD *)sub_4BD8(v118, (uint64_t)v768, 1.0);
        v120 = a1[1];
        if (v120 >= a1[2])
        {
          v121 = sub_11F97C(a1, v119);
        }
        else
        {
          sub_4988(a1[1], v119);
          v121 = v120 + 176;
          a1[1] = v120 + 176;
        }
        a1[1] = v121;
        if (v769 < 0)
          operator delete(v768[0]);
        if (v771 < 0)
          operator delete(v770[0]);
        if (v773 < 0)
          operator delete(v772[0]);
        if (v775 < 0)
          operator delete(v774[0]);
        if (v777 < 0)
          operator delete(v776[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        sub_6B2C((uint64_t)v939);
      }
      v113 += 4;
    }
    while (v113 != 12);
    v122 = 0;
    v943 = 0xB0000000ALL;
    v944 = 12;
    do
    {
      sub_4784((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v122), v18);
      sub_96CC(v766, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_33_5");
      sub_96CC(v764, "_dcc19066dda99b0411d8c63a3e83f6f7f1d98ab35e1abb6ea67d0cc2c48fb902");
      v123 = sub_49CC((uint64_t)&v938, (__int128 *)v766, (__int128 *)v764);
      sub_96CC(v762, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_33_5");
      sub_96CC(v760, "_cc8474cdb602b06dfa72a727bfb5880343cf4aaf48fcac51ca52c95d2d822fec");
      v124 = sub_49CC(v123, (__int128 *)v762, (__int128 *)v760);
      sub_96CC(v758, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_34_6");
      sub_96CC(v756, "_1b0917f46330b000ef490421780d7f78dae3e7de9b1dca6b00ead766e1147535");
      v125 = sub_49CC(v124, (__int128 *)v758, (__int128 *)v756);
      sub_96CC(v754, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_34_6");
      sub_96CC(v752, "_a1a96bea3f99234f22bda56eb11aba0c4b12ca3186d95a0d9b789dfec4b86cd2");
      v126 = sub_49CC(v125, (__int128 *)v754, (__int128 *)v752);
      sub_96CC(v750, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_92_62");
      v127 = (_QWORD *)sub_4BD8(v126, (uint64_t)v750, 0.5);
      v128 = a1[1];
      if (v128 >= a1[2])
      {
        v129 = sub_11F97C(a1, v127);
      }
      else
      {
        sub_4988(a1[1], v127);
        v129 = v128 + 176;
        a1[1] = v128 + 176;
      }
      a1[1] = v129;
      if (v751 < 0)
        operator delete(v750[0]);
      if (v753 < 0)
        operator delete(v752[0]);
      if (v755 < 0)
        operator delete(v754[0]);
      if (v757 < 0)
        operator delete(v756[0]);
      if (v759 < 0)
        operator delete(v758[0]);
      if (v761 < 0)
        operator delete(v760[0]);
      if (v763 < 0)
        operator delete(v762[0]);
      if (v765 < 0)
        operator delete(v764[0]);
      if (v767 < 0)
        operator delete(v766[0]);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_6E30((uint64_t)v940);
      sub_6B2C((uint64_t)v939);
      v122 += 4;
    }
    while (v122 != 12);
    v130 = 0;
    v943 = 0x100000000FLL;
    v944 = 17;
    do
    {
      v131 = v19 < 2;
      v132 = *(_DWORD *)((char *)&v943 + v130);
      if (v132 != 15)
        v131 = 0;
      if (v132 >= 15 && !v131)
      {
        sub_4784((uint64_t)&v938, v132, v18);
        sub_96CC(v748, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_44_16");
        sub_96CC(v746, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7");
        v133 = sub_49CC((uint64_t)&v938, (__int128 *)v748, (__int128 *)v746);
        sub_96CC(v744, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_46_18");
        sub_96CC(v742, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7");
        v134 = sub_49CC(v133, (__int128 *)v744, (__int128 *)v742);
        sub_96CC(v740, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_93_63");
        v135 = sub_4BD8(v134, (uint64_t)v740, 0.03125);
        sub_96CC(v738, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_94_64");
        v136 = (_QWORD *)sub_4BD8(v135, (uint64_t)v738, 8.0);
        v137 = a1[1];
        if (v137 >= a1[2])
        {
          v138 = sub_11F97C(a1, v136);
        }
        else
        {
          sub_4988(a1[1], v136);
          v138 = v137 + 176;
          a1[1] = v137 + 176;
        }
        a1[1] = v138;
        if (v739 < 0)
          operator delete(v738[0]);
        if (v741 < 0)
          operator delete(v740[0]);
        if (v743 < 0)
          operator delete(v742[0]);
        if (v745 < 0)
          operator delete(v744[0]);
        if (v747 < 0)
          operator delete(v746[0]);
        if (v749 < 0)
          operator delete(v748[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        sub_6B2C((uint64_t)v939);
      }
      v130 += 4;
    }
    while (v130 != 12);
    v139 = 0;
    v943 = 0xE0000000DLL;
    v944 = 15;
    do
    {
      v140 = v19 < 2;
      v141 = *(_DWORD *)((char *)&v943 + v139);
      if (v141 != 15)
        v140 = 0;
      if (v141 < 15 || v140)
      {
        sub_4784((uint64_t)&v938, v141, v18);
        sub_96CC(v736, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_44_16");
        sub_96CC(v734, "_5d6a90a3c3f5d373b4784fb5f1f7aa7743084eba64d8294172d1185916b9bd1c");
        v143 = sub_49CC((uint64_t)&v938, (__int128 *)v736, (__int128 *)v734);
        sub_96CC(v732, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_44_16");
        sub_96CC(v730, "_7227f357f8a21cdbc5daa79f9084b3bc5cc765c17918eb28fb2cf4cc3a5781e2");
        v144 = sub_49CC(v143, (__int128 *)v732, (__int128 *)v730);
        sub_96CC(v728, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_45_17");
        sub_96CC(v726, "_e24075c611924196d3fa333bd6f2a6afab121c5355fbadd312da8989dd52ce15");
        v145 = sub_49CC(v144, (__int128 *)v728, (__int128 *)v726);
        sub_96CC(v724, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_45_17");
        sub_96CC(v722, "_16eb6d6baefae7585a774d494fadd8137c12d14e93540aecbcf238f844009d01");
        v146 = sub_49CC(v145, (__int128 *)v724, (__int128 *)v722);
        sub_96CC(v720, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_46_18");
        sub_96CC(v718, "_c83d8e1815183224c98c397c7f4c229e49bf0e3ff37dc1950a9728afbcb30048");
        v147 = sub_49CC(v146, (__int128 *)v720, (__int128 *)v718);
        sub_96CC(v716, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_46_18");
        sub_96CC(v714, "_3c3dc9a24c6f8ab640c0ea8f6372c66cec9c6d0ac7a42871c7d4ee9d78918fb2");
        v148 = sub_49CC(v147, (__int128 *)v716, (__int128 *)v714);
        sub_96CC(v712, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_93_63");
        v149 = sub_4BD8(v148, (uint64_t)v712, 1.0);
        sub_96CC(v710, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_94_64");
        v150 = (_QWORD *)sub_4BD8(v149, (uint64_t)v710, 128.0);
        v151 = a1[1];
        if (v151 >= a1[2])
        {
          v152 = sub_11F97C(a1, v150);
        }
        else
        {
          sub_4988(a1[1], v150);
          v152 = v151 + 176;
          a1[1] = v151 + 176;
        }
        a1[1] = v152;
        if (v711 < 0)
          operator delete(v710[0]);
        if (v713 < 0)
          operator delete(v712[0]);
        if (v715 < 0)
          operator delete(v714[0]);
        if (v717 < 0)
          operator delete(v716[0]);
        if (v719 < 0)
          operator delete(v718[0]);
        if (v721 < 0)
          operator delete(v720[0]);
        if (v723 < 0)
          operator delete(v722[0]);
        if (v725 < 0)
          operator delete(v724[0]);
        if (v727 < 0)
          operator delete(v726[0]);
        if (v729 < 0)
          operator delete(v728[0]);
        if (v731 < 0)
          operator delete(v730[0]);
        if (v733 < 0)
          operator delete(v732[0]);
        if (v735 < 0)
          operator delete(v734[0]);
        if (v737 < 0)
          operator delete(v736[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        sub_6B2C((uint64_t)v939);
      }
      v139 += 4;
    }
    while (v139 != 12);
    v153 = 0;
    v943 = 0xB0000000ALL;
    v944 = 12;
    do
    {
      sub_4784((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v153), v18);
      sub_96CC(v708, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_44_16");
      sub_96CC(v706, "_4f6aebbe216cd96fa4684995ac68478cbdb59c6706480ecbbb9f101d892bb540");
      v154 = sub_49CC((uint64_t)&v938, (__int128 *)v708, (__int128 *)v706);
      sub_96CC(v704, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_44_16");
      sub_96CC(v702, "_9cdfd7e41cd0f7bedf5e73de71cff7713d55d7876ed3ceb192b859bbeacd355c");
      v155 = sub_49CC(v154, (__int128 *)v704, (__int128 *)v702);
      sub_96CC(v700, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_45_17");
      sub_96CC(v698, "_6adb9f77137d1ea24fd389dc7b4ce3e0f4941ef6c4bd10a5a9069a0508c21096");
      v156 = sub_49CC(v155, (__int128 *)v700, (__int128 *)v698);
      sub_96CC(v696, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_45_17");
      sub_96CC(v694, "_28ec30e5d700201a445959b85812ddc5d67051822f1dedd35fcff019f9373467");
      v157 = sub_49CC(v156, (__int128 *)v696, (__int128 *)v694);
      sub_96CC(v692, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_43_15");
      sub_96CC(v690, "_7297c7ee63bc3f774b2e5f2e665cd87efcbf40dd3e6b66a9c08f8ebfdae4019e");
      v158 = sub_49CC(v157, (__int128 *)v692, (__int128 *)v690);
      sub_96CC(v688, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_43_15");
      sub_96CC(v686, "_302f5158ec17e76ab08ef2d34c39bb819212a714ce814287bfd08e80024ad038");
      v159 = sub_49CC(v158, (__int128 *)v688, (__int128 *)v686);
      sub_96CC(v684, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_93_63");
      v160 = (_QWORD *)sub_4BD8(v159, (uint64_t)v684, 0.25);
      v161 = a1[1];
      if (v161 >= a1[2])
      {
        v162 = sub_11F97C(a1, v160);
      }
      else
      {
        sub_4988(a1[1], v160);
        v162 = v161 + 176;
        a1[1] = v161 + 176;
      }
      a1[1] = v162;
      if (v685 < 0)
        operator delete(v684[0]);
      if (v687 < 0)
        operator delete(v686[0]);
      if (v689 < 0)
        operator delete(v688[0]);
      if (v691 < 0)
        operator delete(v690[0]);
      if (v693 < 0)
        operator delete(v692[0]);
      if (v695 < 0)
        operator delete(v694[0]);
      if (v697 < 0)
        operator delete(v696[0]);
      if (v699 < 0)
        operator delete(v698[0]);
      if (v701 < 0)
        operator delete(v700[0]);
      if (v703 < 0)
        operator delete(v702[0]);
      if (v705 < 0)
        operator delete(v704[0]);
      if (v707 < 0)
        operator delete(v706[0]);
      if (v709 < 0)
        operator delete(v708[0]);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_6E30((uint64_t)v940);
      sub_6B2C((uint64_t)v939);
      v153 += 4;
    }
    while (v153 != 12);
    v163 = 0;
    v943 = 0x100000000FLL;
    v944 = 17;
    do
    {
      v164 = v19 < 2;
      v165 = *(_DWORD *)((char *)&v943 + v163);
      if (v165 != 15)
        v164 = 0;
      if (v165 >= 15 && !v164)
      {
        sub_4784((uint64_t)&v938, v165, v18);
        sub_96CC(v682, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
        sub_96CC(v680, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D");
        v166 = sub_49CC((uint64_t)&v938, (__int128 *)v682, (__int128 *)v680);
        sub_96CC(v678, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_47_19");
        sub_96CC(v676, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D");
        v167 = sub_49CC(v166, (__int128 *)v678, (__int128 *)v676);
        sub_96CC(v674, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_95_65");
        v168 = sub_4BD8(v167, (uint64_t)v674, 0.03125);
        sub_96CC(v672, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_96_66");
        v169 = (_QWORD *)sub_4BD8(v168, (uint64_t)v672, 8.0);
        v170 = a1[1];
        if (v170 >= a1[2])
        {
          v171 = sub_11F97C(a1, v169);
        }
        else
        {
          sub_4988(a1[1], v169);
          v171 = v170 + 176;
          a1[1] = v170 + 176;
        }
        a1[1] = v171;
        if (v673 < 0)
          operator delete(v672[0]);
        if (v675 < 0)
          operator delete(v674[0]);
        if (v677 < 0)
          operator delete(v676[0]);
        if (v679 < 0)
          operator delete(v678[0]);
        if (v681 < 0)
          operator delete(v680[0]);
        if (v683 < 0)
          operator delete(v682[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        sub_6B2C((uint64_t)v939);
      }
      v163 += 4;
    }
    while (v163 != 12);
    v172 = 0;
    v943 = 0xE0000000DLL;
    v944 = 15;
    do
    {
      v173 = v19 < 2;
      v174 = *(_DWORD *)((char *)&v943 + v172);
      if (v174 != 15)
        v173 = 0;
      if (v174 < 15 || v173)
      {
        sub_4784((uint64_t)&v938, v174, v18);
        sub_96CC(v670, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
        sub_96CC(v668, "_a6959c95ec387b8177c7952dc2b0442397db237352d2eaac83f58ec8a91891b7");
        v176 = sub_49CC((uint64_t)&v938, (__int128 *)v670, (__int128 *)v668);
        sub_96CC(v666, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
        sub_96CC(v664, "_464535adf580fe38c8fab89c8ad5a40e7c554a788650a011f8466f784654dd52");
        v177 = sub_49CC(v176, (__int128 *)v666, (__int128 *)v664);
        sub_96CC(v662, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_50_22");
        sub_96CC(v660, "_9569b663f07ab9906139babb5dc9f9f6f4d1efb9d094eb0bacf3d139d1c7f5be");
        v178 = sub_49CC(v177, (__int128 *)v662, (__int128 *)v660);
        sub_96CC(v658, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_50_22");
        sub_96CC(v656, "_61da94edb1fd5147230f175dd36cb2c626394d3b2f750c7e3dad70653c868aba");
        v179 = sub_49CC(v178, (__int128 *)v658, (__int128 *)v656);
        sub_96CC(v654, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_47_19");
        sub_96CC(v652, "_5412071a0e3ec24e2f545d0476454725457124ae557a2da54285da8204d334db");
        v180 = sub_49CC(v179, (__int128 *)v654, (__int128 *)v652);
        sub_96CC(v650, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_47_19");
        sub_96CC(v648, "_77c64a76c3a1882e7551dd3fa1188c7e4a8a0872b57fd0cb1587664cab0899eb");
        v181 = sub_49CC(v180, (__int128 *)v650, (__int128 *)v648);
        sub_96CC(v646, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_95_65");
        v182 = sub_4BD8(v181, (uint64_t)v646, 1.0);
        sub_96CC(v644, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_96_66");
        v183 = (_QWORD *)sub_4BD8(v182, (uint64_t)v644, 128.0);
        v184 = a1[1];
        if (v184 >= a1[2])
        {
          v185 = sub_11F97C(a1, v183);
        }
        else
        {
          sub_4988(a1[1], v183);
          v185 = v184 + 176;
          a1[1] = v184 + 176;
        }
        a1[1] = v185;
        if (v645 < 0)
          operator delete(v644[0]);
        if (v647 < 0)
          operator delete(v646[0]);
        if (v649 < 0)
          operator delete(v648[0]);
        if (v651 < 0)
          operator delete(v650[0]);
        if (v653 < 0)
          operator delete(v652[0]);
        if (v655 < 0)
          operator delete(v654[0]);
        if (v657 < 0)
          operator delete(v656[0]);
        if (v659 < 0)
          operator delete(v658[0]);
        if (v661 < 0)
          operator delete(v660[0]);
        if (v663 < 0)
          operator delete(v662[0]);
        if (v665 < 0)
          operator delete(v664[0]);
        if (v667 < 0)
          operator delete(v666[0]);
        if (v669 < 0)
          operator delete(v668[0]);
        if (v671 < 0)
          operator delete(v670[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        sub_6B2C((uint64_t)v939);
      }
      v172 += 4;
    }
    while (v172 != 12);
    v186 = 0;
    v943 = 0xC0000000BLL;
    do
    {
      sub_4784((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v186), v18);
      sub_96CC(v642, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
      sub_96CC(v640, "_968353d331d798ff8c65ce5f1d5294c1f4bcd54f8004fe37c0ec8e0327bdb887");
      v187 = sub_49CC((uint64_t)&v938, (__int128 *)v642, (__int128 *)v640);
      sub_96CC(v638, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
      sub_96CC(v636, "_db7bf2f7b343f9696051ffea283afce6cecf26ab478ddb2f2d46e68f4e83a5f1");
      v188 = sub_49CC(v187, (__int128 *)v638, (__int128 *)v636);
      sub_96CC(v634, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_50_22");
      sub_96CC(v632, "_4ce8c39578a4732a6c0258355819e9fd7b199ccd3aee51f117a33230e1c23c2a");
      v189 = sub_49CC(v188, (__int128 *)v634, (__int128 *)v632);
      sub_96CC(v630, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_50_22");
      sub_96CC(v628, "_f695d9489766916cc7b4575aead0a5120678f6ac54c7940bc8837ee6f64f8c5a");
      v190 = sub_49CC(v189, (__int128 *)v630, (__int128 *)v628);
      sub_96CC(v626, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_48_20");
      sub_96CC(v624, "_192193e6c7ce23b86614fecbd983be5c3d4ea08d47c42ee19db85a736c0cbf7e");
      v191 = sub_49CC(v190, (__int128 *)v626, (__int128 *)v624);
      sub_96CC(v622, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_48_20");
      sub_96CC(v620, "_f803fbcc00ceb66df21019f6dba7192937dcd274bd128a72102021004bf1bbc5");
      v192 = sub_49CC(v191, (__int128 *)v622, (__int128 *)v620);
      sub_96CC(v618, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_95_65");
      v193 = (_QWORD *)sub_4BD8(v192, (uint64_t)v618, 0.25);
      v194 = a1[1];
      if (v194 >= a1[2])
      {
        v195 = sub_11F97C(a1, v193);
      }
      else
      {
        sub_4988(a1[1], v193);
        v195 = v194 + 176;
        a1[1] = v194 + 176;
      }
      a1[1] = v195;
      if (v619 < 0)
        operator delete(v618[0]);
      if (v621 < 0)
        operator delete(v620[0]);
      if (v623 < 0)
        operator delete(v622[0]);
      if (v625 < 0)
        operator delete(v624[0]);
      if (v627 < 0)
        operator delete(v626[0]);
      if (v629 < 0)
        operator delete(v628[0]);
      if (v631 < 0)
        operator delete(v630[0]);
      if (v633 < 0)
        operator delete(v632[0]);
      if (v635 < 0)
        operator delete(v634[0]);
      if (v637 < 0)
        operator delete(v636[0]);
      if (v639 < 0)
        operator delete(v638[0]);
      if (v641 < 0)
        operator delete(v640[0]);
      if (v643 < 0)
        operator delete(v642[0]);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_6E30((uint64_t)v940);
      sub_6B2C((uint64_t)v939);
      v186 += 4;
    }
    while (v186 != 8);
    v196 = 0;
    v943 = 0xC0000000BLL;
    do
    {
      sub_4784((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v196), v18);
      sub_96CC(v616, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
      sub_96CC(v614, "_968353d331d798ff8c65ce5f1d5294c1f4bcd54f8004fe37c0ec8e0327bdb887");
      v197 = sub_49CC((uint64_t)&v938, (__int128 *)v616, (__int128 *)v614);
      sub_96CC(v612, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_49_21");
      sub_96CC(v610, "_db7bf2f7b343f9696051ffea283afce6cecf26ab478ddb2f2d46e68f4e83a5f1");
      v198 = sub_49CC(v197, (__int128 *)v612, (__int128 *)v610);
      sub_96CC(v608, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_50_22");
      sub_96CC(v606, "_b22547623b585b14c5b8c85d49ccc42d6bfbb77f64e443ea518f37d34c0f1069");
      v199 = sub_49CC(v198, (__int128 *)v608, (__int128 *)v606);
      sub_96CC(v604, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_50_22");
      sub_96CC(v602, "_a128f99af1d196435cf6f78f481310a31f61ce52f25c5601cc30c563469d604c");
      v200 = sub_49CC(v199, (__int128 *)v604, (__int128 *)v602);
      sub_96CC(v600, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_93_63");
      v201 = (_QWORD *)sub_4BD8(v200, (uint64_t)v600, 0.25);
      v202 = a1[1];
      if (v202 >= a1[2])
      {
        v203 = sub_11F97C(a1, v201);
      }
      else
      {
        sub_4988(a1[1], v201);
        v203 = v202 + 176;
        a1[1] = v202 + 176;
      }
      a1[1] = v203;
      if (v601 < 0)
        operator delete(v600[0]);
      if (v603 < 0)
        operator delete(v602[0]);
      if (v605 < 0)
        operator delete(v604[0]);
      if (v607 < 0)
        operator delete(v606[0]);
      if (v609 < 0)
        operator delete(v608[0]);
      if (v611 < 0)
        operator delete(v610[0]);
      if (v613 < 0)
        operator delete(v612[0]);
      if (v615 < 0)
        operator delete(v614[0]);
      if (v617 < 0)
        operator delete(v616[0]);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_6E30((uint64_t)v940);
      sub_6B2C((uint64_t)v939);
      v196 += 4;
    }
    while (v196 != 8);
    v204 = 0;
    v943 = 0xE0000000DLL;
    v944 = 15;
    do
    {
      v205 = v19 < 2;
      v206 = *(_DWORD *)((char *)&v943 + v204);
      if (v206 != 15)
        v205 = 0;
      if (v206 < 15 || v205)
      {
        sub_4784((uint64_t)&v938, v206, v18);
        sub_96CC(v598, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_51_23");
        sub_96CC(v596, "_1e24b9b53884e278180f1249a5bb0bcbdabb20e50e98be9258f48dc3b8d601cd");
        v208 = sub_49CC((uint64_t)&v938, (__int128 *)v598, (__int128 *)v596);
        sub_96CC(v594, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_51_23");
        sub_96CC(v592, "_102d161027c9cd6bf8752b3bcbbe48ec7879b593c584521ed0be10b44ee0f74c");
        v209 = sub_49CC(v208, (__int128 *)v594, (__int128 *)v592);
        sub_96CC(v590, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_52_24");
        sub_96CC(v588, "_cc7546f381d9a442a4b723d9dd8d5ddf0bfca3942df436e95e607619d355ca59");
        v210 = sub_49CC(v209, (__int128 *)v590, (__int128 *)v588);
        sub_96CC(v586, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_52_24");
        sub_96CC(v584, "_f6aba336a7053251ccdb48a792232046e64961084645e162a508593a1676624d");
        v211 = (_QWORD *)sub_49CC(v210, (__int128 *)v586, (__int128 *)v584);
        v212 = a1[1];
        if (v212 >= a1[2])
        {
          v213 = sub_11F97C(a1, v211);
        }
        else
        {
          sub_4988(a1[1], v211);
          v213 = v212 + 176;
          a1[1] = v212 + 176;
        }
        a1[1] = v213;
        if (v585 < 0)
          operator delete(v584[0]);
        if (v587 < 0)
          operator delete(v586[0]);
        if (v589 < 0)
          operator delete(v588[0]);
        if (v591 < 0)
          operator delete(v590[0]);
        if (v593 < 0)
          operator delete(v592[0]);
        if (v595 < 0)
          operator delete(v594[0]);
        if (v597 < 0)
          operator delete(v596[0]);
        if (v599 < 0)
          operator delete(v598[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        sub_6B2C((uint64_t)v939);
      }
      v204 += 4;
    }
    while (v204 != 12);
    v214 = 0;
    v943 = 0x100000000FLL;
    v944 = 17;
    do
    {
      v215 = v19 < 2;
      v216 = *(_DWORD *)((char *)&v943 + v214);
      if (v216 != 15)
        v215 = 0;
      if (v216 >= 15 && !v215)
      {
        sub_4784((uint64_t)&v938, v216, v18);
        sub_96CC(v582, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_59_31");
        sub_96CC(v580, "79E88035C9BC883D403F17831B8C9264E643C6B76E9B3C1451B49B0F672C32BF");
        v217 = sub_49CC((uint64_t)&v938, (__int128 *)v582, (__int128 *)v580);
        sub_96CC(v578, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_60_32");
        sub_96CC(v576, "260130B343BA0695AB911D986B3870FA0CCD0EC58E6F55895A856F37201CE9F8");
        v218 = sub_49CC(v217, (__int128 *)v578, (__int128 *)v576);
        sub_96CC(v574, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_61_33");
        sub_96CC(v572, "AA1E812506867A5F2C54D3BA3268DB5C4BB2C6B0E4F500340DD23C4E1E637D9D");
        v219 = sub_49CC(v218, (__int128 *)v574, (__int128 *)v572);
        sub_96CC(v570, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_62_34");
        sub_96CC(v568, "100299043F027ADADB62685130C7FBE549E29F08B58C365844FF8EC25BAEEAB0");
        v220 = sub_49CC(v219, (__int128 *)v570, (__int128 *)v568);
        sub_96CC(v566, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_63_35");
        sub_96CC(v564, "3476066F46CC277DE7616AAAD8FCDF2C28DA42293B231F74A62159EB6EDAC78C");
        v221 = sub_49CC(v220, (__int128 *)v566, (__int128 *)v564);
        sub_96CC(v562, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_64_36");
        sub_96CC(v560, "5D4640C1160E691CF9E1DA7FE475482756D03567716B9856424469B31049A457");
        v222 = sub_49CC(v221, (__int128 *)v562, (__int128 *)v560);
        sub_96CC(v558, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_65_37");
        sub_96CC(v556, "295D65BB175E4E4EEF9003E008E093043C9B8CE43190BE0A2D8F1771F9837033");
        v223 = sub_49CC(v222, (__int128 *)v558, (__int128 *)v556);
        sub_96CC(v554, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_66_38");
        sub_96CC(v552, "547021D0E82D62B7841769A23FC7FE04F7A63B8A0528A3F6E4C67E8B9420360E");
        v224 = sub_49CC(v223, (__int128 *)v554, (__int128 *)v552);
        sub_96CC(v550, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_67_39");
        sub_96CC(v548, "4BF63E209F7D92B4E8341476C80013664D3299327C72E7A7F0D16E1CBD4904FC");
        v225 = sub_49CC(v224, (__int128 *)v550, (__int128 *)v548);
        sub_96CC(v546, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_68_40");
        sub_96CC(v544, "76F5A23AACC27615C980BE3E58B52994192195866836855BCA7C3F885796297B");
        v226 = sub_49CC(v225, (__int128 *)v546, (__int128 *)v544);
        sub_96CC(v542, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_69_41");
        sub_96CC(v540, "3856FBD8576C0AA988700D7EF5787AAAE94A3BBFBB393B0426FA9D379DA69C91");
        v227 = sub_49CC(v226, (__int128 *)v542, (__int128 *)v540);
        sub_96CC(v538, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_70_42");
        sub_96CC(v536, "1FFBA951E06F1A7810DC823264210F0C13273E454D699383F3D6265630FEDD53");
        v228 = sub_49CC(v227, (__int128 *)v538, (__int128 *)v536);
        sub_96CC(v534, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_53_25");
        sub_96CC(v532, "F89408CC4F2E499CED47E61E0AFD929E01C44D079ADF0B440EF845B984DE4956");
        v229 = sub_49CC(v228, (__int128 *)v534, (__int128 *)v532);
        sub_96CC(v530, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_54_26");
        sub_96CC(v528, "3EBB72814821E8E8DB302E61197BC3AC6B0A02119FCD0C86BCFA54EB1B511AD2");
        v230 = sub_49CC(v229, (__int128 *)v530, (__int128 *)v528);
        sub_96CC(v526, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_55_27");
        sub_96CC(v524, "7FD8B674D9FE018B3D64EA31CB94787780CD12317B2764B9BAFB60C975CDC8EB");
        v231 = sub_49CC(v230, (__int128 *)v526, (__int128 *)v524);
        sub_96CC(v522, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_56_28");
        sub_96CC(v520, "0DAB6425F1EAC005798A5E8220F97E433817AADFE2490BD4F4B762C38F20E22B");
        v232 = sub_49CC(v231, (__int128 *)v522, (__int128 *)v520);
        sub_96CC(v518, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_111_81");
        v233 = sub_4BD8(v232, (uint64_t)v518, 0.25);
        sub_96CC(v516, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_112_82");
        v234 = sub_4BD8(v233, (uint64_t)v516, 0.25);
        sub_96CC(v514, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_113_83");
        v235 = sub_4BD8(v234, (uint64_t)v514, 0.25);
        sub_96CC(v512, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_114_84");
        v236 = sub_4BD8(v235, (uint64_t)v512, 0.25);
        sub_96CC(v510, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_115_85");
        v237 = sub_4BD8(v236, (uint64_t)v510, 0.25);
        sub_96CC(v508, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_116_86");
        v238 = sub_4BD8(v237, (uint64_t)v508, 0.5);
        sub_96CC(v506, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_118_88");
        v239 = sub_4BD8(v238, (uint64_t)v506, 0.125);
        sub_96CC(v504, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_117_87");
        v240 = sub_4BD8(v239, (uint64_t)v504, 0.0625);
        sub_96CC(v502, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_119_89");
        v241 = sub_4BD8(v240, (uint64_t)v502, 32.0);
        sub_96CC(v500, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_120_90");
        v242 = (_QWORD *)sub_4BD8(v241, (uint64_t)v500, 0.5);
        v243 = a1[1];
        if (v243 >= a1[2])
        {
          v244 = sub_11F97C(a1, v242);
        }
        else
        {
          sub_4988(a1[1], v242);
          v244 = v243 + 176;
          a1[1] = v243 + 176;
        }
        a1[1] = v244;
        if (v501 < 0)
          operator delete(v500[0]);
        if (v503 < 0)
          operator delete(v502[0]);
        if (v505 < 0)
          operator delete(v504[0]);
        if (v507 < 0)
          operator delete(v506[0]);
        if (v509 < 0)
          operator delete(v508[0]);
        if (v511 < 0)
          operator delete(v510[0]);
        if (v513 < 0)
          operator delete(v512[0]);
        if (v515 < 0)
          operator delete(v514[0]);
        if (v517 < 0)
          operator delete(v516[0]);
        if (v519 < 0)
          operator delete(v518[0]);
        if (v521 < 0)
          operator delete(v520[0]);
        if (v523 < 0)
          operator delete(v522[0]);
        if (v525 < 0)
          operator delete(v524[0]);
        if (v527 < 0)
          operator delete(v526[0]);
        if (v529 < 0)
          operator delete(v528[0]);
        if (v531 < 0)
          operator delete(v530[0]);
        if (v533 < 0)
          operator delete(v532[0]);
        if (v535 < 0)
          operator delete(v534[0]);
        if (v537 < 0)
          operator delete(v536[0]);
        if (v539 < 0)
          operator delete(v538[0]);
        if (v541 < 0)
          operator delete(v540[0]);
        if (v543 < 0)
          operator delete(v542[0]);
        if (v545 < 0)
          operator delete(v544[0]);
        if (v547 < 0)
          operator delete(v546[0]);
        if (v549 < 0)
          operator delete(v548[0]);
        if (v551 < 0)
          operator delete(v550[0]);
        if (v553 < 0)
          operator delete(v552[0]);
        if (v555 < 0)
          operator delete(v554[0]);
        if (v557 < 0)
          operator delete(v556[0]);
        if (v559 < 0)
          operator delete(v558[0]);
        if (v561 < 0)
          operator delete(v560[0]);
        if (v563 < 0)
          operator delete(v562[0]);
        if (v565 < 0)
          operator delete(v564[0]);
        if (v567 < 0)
          operator delete(v566[0]);
        if (v569 < 0)
          operator delete(v568[0]);
        if (v571 < 0)
          operator delete(v570[0]);
        if (v573 < 0)
          operator delete(v572[0]);
        if (v575 < 0)
          operator delete(v574[0]);
        if (v577 < 0)
          operator delete(v576[0]);
        if (v579 < 0)
          operator delete(v578[0]);
        if (v581 < 0)
          operator delete(v580[0]);
        if (v583 < 0)
          operator delete(v582[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        sub_6B2C((uint64_t)v939);
      }
      v214 += 4;
    }
    while (v214 != 12);
    v245 = 0;
    v943 = 0xE0000000DLL;
    v944 = 15;
    do
    {
      v246 = v19 < 2;
      v247 = *(_DWORD *)((char *)&v943 + v245);
      if (v247 != 15)
        v246 = 0;
      if (v247 < 15 || v246)
      {
        sub_4784((uint64_t)&v938, v247, v18);
        sub_96CC(v498, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
        sub_96CC(v496, "_c4c7e4c8f7b6488a9a980bba9f849c9e5d8e4bbb1e2c134cef7620b6faf7d6a2");
        v249 = sub_49CC((uint64_t)&v938, (__int128 *)v498, (__int128 *)v496);
        sub_96CC(v494, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
        sub_96CC(v492, "_ce4b66ffe276175a6a391d11a059d703038b1a404e718e896201733b1a75da1a");
        v250 = sub_49CC(v249, (__int128 *)v494, (__int128 *)v492);
        sub_96CC(v490, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_58_30");
        sub_96CC(v488, "_d201fed97c60848e3714502b203a0ad4e2820937c140dbf6a9db1cb31be194dd");
        v251 = sub_49CC(v250, (__int128 *)v490, (__int128 *)v488);
        sub_96CC(v486, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_58_30");
        sub_96CC(v484, "_b6f09ea2a13fd988f6f30d7af8022025303b9324416c9447517205110fc3c18d");
        v252 = sub_49CC(v251, (__int128 *)v486, (__int128 *)v484);
        sub_96CC(v482, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_117_87");
        v253 = (_QWORD *)sub_4BD8(v252, (uint64_t)v482, 2.0);
        v254 = a1[1];
        if (v254 >= a1[2])
        {
          v255 = sub_11F97C(a1, v253);
        }
        else
        {
          sub_4988(a1[1], v253);
          v255 = v254 + 176;
          a1[1] = v254 + 176;
        }
        a1[1] = v255;
        if (v483 < 0)
          operator delete(v482[0]);
        if (v485 < 0)
          operator delete(v484[0]);
        if (v487 < 0)
          operator delete(v486[0]);
        if (v489 < 0)
          operator delete(v488[0]);
        if (v491 < 0)
          operator delete(v490[0]);
        if (v493 < 0)
          operator delete(v492[0]);
        if (v495 < 0)
          operator delete(v494[0]);
        if (v497 < 0)
          operator delete(v496[0]);
        if (v499 < 0)
          operator delete(v498[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        sub_6B2C((uint64_t)v939);
      }
      v245 += 4;
    }
    while (v245 != 12);
    sub_4784((uint64_t)&v938, 12, v18);
    sub_96CC(v480, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
    sub_96CC(v478, "_c4c7e4c8f7b6488a9a980bba9f849c9e5d8e4bbb1e2c134cef7620b6faf7d6a2");
    v256 = sub_49CC((uint64_t)&v938, (__int128 *)v480, (__int128 *)v478);
    sub_96CC(v476, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
    sub_96CC(v474, "_ce4b66ffe276175a6a391d11a059d703038b1a404e718e896201733b1a75da1a");
    v257 = sub_49CC(v256, (__int128 *)v476, (__int128 *)v474);
    sub_96CC(v472, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_58_30");
    sub_96CC(v470, "_d201fed97c60848e3714502b203a0ad4e2820937c140dbf6a9db1cb31be194dd");
    v258 = sub_49CC(v257, (__int128 *)v472, (__int128 *)v470);
    sub_96CC(v468, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_58_30");
    sub_96CC(v466, "_b6f09ea2a13fd988f6f30d7af8022025303b9324416c9447517205110fc3c18d");
    v259 = sub_49CC(v258, (__int128 *)v468, (__int128 *)v466);
    sub_96CC(v464, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_117_87");
    v260 = (_QWORD *)sub_4BD8(v259, (uint64_t)v464, 2.0);
    v261 = a1[1];
    if (v261 >= a1[2])
    {
      v262 = sub_11F97C(a1, v260);
    }
    else
    {
      sub_4988(a1[1], v260);
      v262 = v261 + 176;
      a1[1] = v261 + 176;
    }
    a1[1] = v262;
    if (v465 < 0)
      operator delete(v464[0]);
    if (v467 < 0)
      operator delete(v466[0]);
    if (v469 < 0)
      operator delete(v468[0]);
    if (v471 < 0)
      operator delete(v470[0]);
    if (v473 < 0)
      operator delete(v472[0]);
    if (v475 < 0)
      operator delete(v474[0]);
    if (v477 < 0)
      operator delete(v476[0]);
    if (v479 < 0)
      operator delete(v478[0]);
    if (v481 < 0)
      operator delete(v480[0]);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
    sub_6E30((uint64_t)v940);
    sub_6B2C((uint64_t)v939);
    sub_4784((uint64_t)&v938, 11, v18);
    sub_96CC(v462, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
    sub_96CC(v460, "_c4c7e4c8f7b6488a9a980bba9f849c9e5d8e4bbb1e2c134cef7620b6faf7d6a2");
    v263 = sub_49CC((uint64_t)&v938, (__int128 *)v462, (__int128 *)v460);
    sub_96CC(v458, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_57_29");
    sub_96CC(v456, "_ce4b66ffe276175a6a391d11a059d703038b1a404e718e896201733b1a75da1a");
    v264 = sub_49CC(v263, (__int128 *)v458, (__int128 *)v456);
    sub_96CC(v454, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_58_30");
    sub_96CC(v452, "_d201fed97c60848e3714502b203a0ad4e2820937c140dbf6a9db1cb31be194dd");
    v265 = sub_49CC(v264, (__int128 *)v454, (__int128 *)v452);
    sub_96CC(v450, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_58_30");
    sub_96CC(v448, "_b6f09ea2a13fd988f6f30d7af8022025303b9324416c9447517205110fc3c18d");
    v266 = sub_49CC(v265, (__int128 *)v450, (__int128 *)v448);
    sub_96CC(v446, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_117_87");
    v267 = (_QWORD *)sub_4BD8(v266, (uint64_t)v446, 0.5);
    v268 = a1[1];
    if (v268 >= a1[2])
    {
      v269 = sub_11F97C(a1, v267);
    }
    else
    {
      sub_4988(a1[1], v267);
      v269 = v268 + 176;
      a1[1] = v268 + 176;
    }
    a1[1] = v269;
    if (v447 < 0)
      operator delete(v446[0]);
    if (v449 < 0)
      operator delete(v448[0]);
    if (v451 < 0)
      operator delete(v450[0]);
    if (v453 < 0)
      operator delete(v452[0]);
    if (v455 < 0)
      operator delete(v454[0]);
    if (v457 < 0)
      operator delete(v456[0]);
    if (v459 < 0)
      operator delete(v458[0]);
    if (v461 < 0)
      operator delete(v460[0]);
    if (v463 < 0)
      operator delete(v462[0]);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
    sub_6E30((uint64_t)v940);
    sub_6B2C((uint64_t)v939);
    for (j = 0; j != 5; ++j)
    {
      sub_4784((uint64_t)&v938, dword_4A412C[j], v18);
      sub_96CC(v444, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_71_43");
      sub_96CC(v442, "_d54a22a6f6eb41ec901489f9e47263886645d322e2546360a6622d2c6bdeddb9");
      v271 = sub_49CC((uint64_t)&v938, (__int128 *)v444, (__int128 *)v442);
      sub_96CC(v440, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_72_44");
      sub_96CC(v438, "_426da530d7dc3093409acc82244bf8b45bf25ffbf6f37a2b37e2afcb9f76bde4");
      v272 = sub_49CC(v271, (__int128 *)v440, (__int128 *)v438);
      sub_96CC(v436, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_121_91");
      v273 = sub_4BD8(v272, (uint64_t)v436, 0.125);
      sub_96CC(v434, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_122_92");
      v274 = (_QWORD *)sub_4BD8(v273, (uint64_t)v434, 0.0625);
      v275 = a1[1];
      if (v275 >= a1[2])
      {
        v276 = sub_11F97C(a1, v274);
      }
      else
      {
        sub_4988(a1[1], v274);
        v276 = v275 + 176;
        a1[1] = v275 + 176;
      }
      a1[1] = v276;
      if (v435 < 0)
        operator delete(v434[0]);
      if (v437 < 0)
        operator delete(v436[0]);
      if (v439 < 0)
        operator delete(v438[0]);
      if (v441 < 0)
        operator delete(v440[0]);
      if (v443 < 0)
        operator delete(v442[0]);
      if (v445 < 0)
        operator delete(v444[0]);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_6E30((uint64_t)v940);
      sub_6B2C((uint64_t)v939);
    }
    v277 = 0;
    v943 = 0xB0000000ALL;
    v944 = 12;
    do
    {
      sub_4784((uint64_t)&v938, *(_DWORD *)((char *)&v943 + v277), v18);
      sub_96CC(v432, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_71_43");
      sub_96CC(v430, "_e04363b0193aecfc56d5f1c5edb7fc2147625522e4ecdb3a8d24ae32f45eaa5c");
      v278 = sub_49CC((uint64_t)&v938, (__int128 *)v432, (__int128 *)v430);
      sub_96CC(v428, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_72_44");
      sub_96CC(v426, "_f89636291d4d2848204d266a1eff5d7b231750cc967f91d005cb1fc30779b1cc");
      v279 = sub_49CC(v278, (__int128 *)v428, (__int128 *)v426);
      sub_96CC(v424, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_121_91");
      v280 = (_QWORD *)sub_4BD8(v279, (uint64_t)v424, 1.0);
      v281 = a1[1];
      if (v281 >= a1[2])
      {
        v282 = sub_11F97C(a1, v280);
      }
      else
      {
        sub_4988(a1[1], v280);
        v282 = v281 + 176;
        a1[1] = v281 + 176;
      }
      a1[1] = v282;
      if (v425 < 0)
        operator delete(v424[0]);
      if (v427 < 0)
        operator delete(v426[0]);
      if (v429 < 0)
        operator delete(v428[0]);
      if (v431 < 0)
        operator delete(v430[0]);
      if (v433 < 0)
        operator delete(v432[0]);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_6E30((uint64_t)v940);
      sub_6B2C((uint64_t)v939);
      v277 += 4;
    }
    while (v277 != 12);
    for (k = 0; k != 8; ++k)
    {
      v284 = dword_4A40F0[k];
      sub_4784((uint64_t)&v938, v284, v18);
      sub_96CC(v422, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_73_45");
      sub_96CC(v420, "_6d86d89a09a872e62b809325d49d6967e2327aa5d1d4ea471d700f29696b9560");
      v285 = sub_49CC((uint64_t)&v938, (__int128 *)v422, (__int128 *)v420);
      sub_96CC(v418, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_74_46");
      sub_96CC(v416, "_871eb7474b854b92c49783a16238fd7c52ef56150d0f4caa839424650bcb6f32");
      v286 = sub_49CC(v285, (__int128 *)v418, (__int128 *)v416);
      sub_96CC(v414, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_123_93");
      v287 = sub_4BD8(v286, (uint64_t)v414, 0.5);
      sub_96CC(v412, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_124_94");
      v288 = sub_4BD8(v287, (uint64_t)v412, 8.0);
      sub_96CC(v410, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_125_95");
      v290 = v284 == 15 && v19 < 2 || v284 < 15;
      v291 = 128.0;
      if (v290)
        v291 = 64.0;
      v292 = (_QWORD *)sub_4BD8(v288, (uint64_t)v410, v291);
      v293 = a1[1];
      if (v293 >= a1[2])
      {
        v294 = sub_11F97C(a1, v292);
      }
      else
      {
        sub_4988(a1[1], v292);
        v294 = v293 + 176;
        a1[1] = v293 + 176;
      }
      a1[1] = v294;
      if (v411 < 0)
        operator delete(v410[0]);
      if (v413 < 0)
        operator delete(v412[0]);
      if (v415 < 0)
        operator delete(v414[0]);
      if (v417 < 0)
        operator delete(v416[0]);
      if (v419 < 0)
        operator delete(v418[0]);
      if (v421 < 0)
        operator delete(v420[0]);
      if (v423 < 0)
        operator delete(v422[0]);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_6E30((uint64_t)v940);
      sub_6B2C((uint64_t)v939);
    }
    for (m = 0; m != 8; ++m)
    {
      v296 = v19 < 2;
      v297 = dword_4A40F0[m];
      if (v297 != 15)
        v296 = 0;
      if (v297 >= 15 && !v296)
      {
        sub_4784((uint64_t)&v938, v297, v18);
        sub_96CC(v398, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_75_47");
        sub_96CC(v396, "_8ff5f6e1c2e52558354049aef96f7abf429f223a3fc4e626292d894456e02fc2");
        v304 = sub_49CC((uint64_t)&v938, (__int128 *)v398, (__int128 *)v396);
        sub_96CC(v394, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_76_48");
        sub_96CC(v392, "_da0afb5d20fd710a2f7ce18da42b2a53dc3d3fcfe45ac35c28e75d4402986d37");
        v305 = sub_49CC(v304, (__int128 *)v394, (__int128 *)v392);
        sub_96CC(v390, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_126_96");
        v306 = (_QWORD *)sub_4BD8(v305, (uint64_t)v390, 1.0);
        v307 = a1[1];
        if (v307 >= a1[2])
        {
          v308 = sub_11F97C(a1, v306);
        }
        else
        {
          sub_4988(a1[1], v306);
          v308 = v307 + 176;
          a1[1] = v307 + 176;
        }
        a1[1] = v308;
        if (v391 < 0)
          operator delete(v390[0]);
        if (v393 < 0)
          operator delete(v392[0]);
        if (v395 < 0)
          operator delete(v394[0]);
        if (v397 < 0)
          operator delete(v396[0]);
        if (v399 < 0)
        {
          v309 = v398[0];
          goto LABEL_812;
        }
      }
      else
      {
        sub_4784((uint64_t)&v938, v297, v18);
        sub_96CC(&v408, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_75_47");
        sub_96CC(v406, "_bb9dbea90df77e54beebae872b35923d727fd2a59d6905410b32092d6d561402");
        v299 = sub_49CC((uint64_t)&v938, &v408, (__int128 *)v406);
        sub_96CC(v404, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_76_48");
        sub_96CC(v402, "_63b42fb9d33e39b5f913060438c759d841275b394631cb7a8145853e9a04ef67");
        v300 = sub_49CC(v299, (__int128 *)v404, (__int128 *)v402);
        sub_96CC(v400, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_126_96");
        v301 = (_QWORD *)sub_4BD8(v300, (uint64_t)v400, 1.0);
        v302 = a1[1];
        if (v302 >= a1[2])
        {
          v303 = sub_11F97C(a1, v301);
        }
        else
        {
          sub_4988(a1[1], v301);
          v303 = v302 + 176;
          a1[1] = v302 + 176;
        }
        a1[1] = v303;
        if (v401 < 0)
          operator delete(v400[0]);
        if (v403 < 0)
          operator delete(v402[0]);
        if (v405 < 0)
          operator delete(v404[0]);
        if (v407 < 0)
          operator delete(v406[0]);
        if (v409 < 0)
        {
          v309 = (void *)v408;
LABEL_812:
          operator delete(v309);
        }
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
      sub_6E30((uint64_t)v940);
      result = sub_6B2C((uint64_t)v939);
    }
    v311 = 0;
    v943 = 0x100000000FLL;
    v944 = 17;
    do
    {
      v312 = v19 < 2;
      v313 = *(_DWORD *)((char *)&v943 + v311);
      if (v313 != 15)
        v312 = 0;
      if (v313 >= 15 && !v312)
      {
        sub_4784((uint64_t)&v938, v313, v18);
        sub_96CC(v388, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_127_97");
        v314 = sub_4BD8((uint64_t)&v938, (uint64_t)v388, 8.0);
        sub_96CC(v386, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_128_98");
        v315 = (_QWORD *)sub_4BD8(v314, (uint64_t)v386, 128.0);
        v316 = a1[1];
        if (v316 >= a1[2])
        {
          v317 = sub_11F97C(a1, v315);
        }
        else
        {
          sub_4988(a1[1], v315);
          v317 = v316 + 176;
          a1[1] = v316 + 176;
        }
        a1[1] = v317;
        if (v387 < 0)
          operator delete(v386[0]);
        if (v389 < 0)
          operator delete(v388[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        result = sub_6B2C((uint64_t)v939);
      }
      v311 += 4;
    }
    while (v311 != 12);
    for (n = 0; n != 6; ++n)
    {
      v319 = v19 < 2;
      v320 = dword_4A4140[n];
      if (v320 != 15)
        v319 = 0;
      if (v320 < 15 || v319)
      {
        sub_4784((uint64_t)&v938, v320, v18);
        sub_96CC(v384, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_77_49");
        sub_96CC(v382, "_9492ca9a91eedcc95e1741334edf1a3855869e882d2b6adc820c2c5e1850532f");
        v322 = sub_49CC((uint64_t)&v938, (__int128 *)v384, (__int128 *)v382);
        sub_96CC(v380, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_77_49");
        sub_96CC(v378, "_4bb4a72bfa974f38e0143eef87e93ae69847e8612684f014350fb4a8c0692050");
        v323 = sub_49CC(v322, (__int128 *)v380, (__int128 *)v378);
        sub_96CC(v376, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_78_50");
        sub_96CC(v374, "_4309079a0b69c765325f6ac5313a4b1c75a2fa562cbb0c420ac0dd80de814ccd");
        v324 = sub_49CC(v323, (__int128 *)v376, (__int128 *)v374);
        sub_96CC(v372, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_78_50");
        sub_96CC(v370, "_367a60a3f4d39b45114c57a560ad1bad4f9f62798346ead3a98f790ad32537a6");
        v325 = sub_49CC(v324, (__int128 *)v372, (__int128 *)v370);
        sub_96CC(v368, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_79_51");
        sub_96CC(v366, "_4088b7c5932a1a8ba88b39e4d641d4f8c3b7ec56ebf78a9c3e7f5b8bffea84d6");
        v326 = sub_49CC(v325, (__int128 *)v368, (__int128 *)v366);
        sub_96CC(v364, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_79_51");
        sub_96CC(v362, "_6b3a9b25a65b692ad1039bcc4c052d5a85e40a9410946c0cdf5dc85d993e2131");
        v327 = (_QWORD *)sub_49CC(v326, (__int128 *)v364, (__int128 *)v362);
        v328 = a1[1];
        if (v328 >= a1[2])
        {
          v329 = sub_11F97C(a1, v327);
        }
        else
        {
          sub_4988(a1[1], v327);
          v329 = v328 + 176;
          a1[1] = v328 + 176;
        }
        a1[1] = v329;
        if (v363 < 0)
          operator delete(v362[0]);
        if (v365 < 0)
          operator delete(v364[0]);
        if (v367 < 0)
          operator delete(v366[0]);
        if (v369 < 0)
          operator delete(v368[0]);
        if (v371 < 0)
          operator delete(v370[0]);
        if (v373 < 0)
          operator delete(v372[0]);
        if (v375 < 0)
          operator delete(v374[0]);
        if (v377 < 0)
          operator delete(v376[0]);
        if (v379 < 0)
          operator delete(v378[0]);
        if (v381 < 0)
          operator delete(v380[0]);
        if (v383 < 0)
          operator delete(v382[0]);
        if (v385 < 0)
          operator delete(v384[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        result = sub_6B2C((uint64_t)v939);
      }
    }
    v330 = 0;
    v943 = 0x100000000FLL;
    v944 = 17;
    do
    {
      v331 = v19 < 2;
      v332 = *(_DWORD *)((char *)&v943 + v330);
      if (v332 != 15)
        v331 = 0;
      if (v332 >= 15 && !v331)
      {
        if (v332 == 16 && v18 == 3)
          v334 = 1024.0;
        else
          v334 = 768.0;
        sub_4784((uint64_t)&v938, v332, v18);
        sub_96CC(v360, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_141_110");
        v335 = sub_4BD8((uint64_t)&v938, (uint64_t)v360, 1.0);
        sub_96CC(v358, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_140_109");
        v336 = sub_4BD8(v335, (uint64_t)v358, v334);
        sub_96CC(v356, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_143_111");
        v337 = sub_4BD8(v336, (uint64_t)v356, 96.0);
        sub_96CC(v354, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_144_112");
        v338 = sub_4BD8(v337, (uint64_t)v354, 8.0);
        sub_96CC(v352, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_145_113");
        v339 = sub_4BD8(v338, (uint64_t)v352, 1.0);
        sub_96CC(v350, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_147_114");
        v340 = sub_4BD8(v339, (uint64_t)v350, 16.0);
        sub_96CC(v348, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_148_115");
        v341 = sub_4BD8(v340, (uint64_t)v348, 8.0);
        sub_96CC(v346, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_149_116");
        v342 = (_QWORD *)sub_4BD8(v341, (uint64_t)v346, 1.0);
        v343 = a1[1];
        if (v343 >= a1[2])
        {
          v344 = sub_11F97C(a1, v342);
        }
        else
        {
          sub_4988(a1[1], v342);
          v344 = v343 + 176;
          a1[1] = v343 + 176;
        }
        a1[1] = v344;
        if (v347 < 0)
          operator delete(v346[0]);
        if (v349 < 0)
          operator delete(v348[0]);
        if (v351 < 0)
          operator delete(v350[0]);
        if (v353 < 0)
          operator delete(v352[0]);
        if (v355 < 0)
          operator delete(v354[0]);
        if (v357 < 0)
          operator delete(v356[0]);
        if (v359 < 0)
          operator delete(v358[0]);
        if (v361 < 0)
          operator delete(v360[0]);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v942);
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table((uint64_t)v941);
        sub_6E30((uint64_t)v940);
        result = sub_6B2C((uint64_t)v939);
      }
      v330 += 4;
    }
    while (v330 != 12);
    v16 = v345 + 1;
  }
  while (v345 != 5);
  return result;
}

void sub_11D56C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 8) = v2;
  if (SLOBYTE(STACK[0x4D7]) < 0)
    operator delete((void *)STACK[0x4C0]);
  if (SLOBYTE(STACK[0x4EF]) < 0)
    operator delete((void *)STACK[0x4D8]);
  if (SLOBYTE(STACK[0x507]) < 0)
    operator delete((void *)STACK[0x4F0]);
  if (SLOBYTE(STACK[0x51F]) < 0)
    operator delete((void *)STACK[0x508]);
  if (SLOBYTE(STACK[0x537]) < 0)
    operator delete((void *)STACK[0x520]);
  if (SLOBYTE(STACK[0x54F]) < 0)
    operator delete((void *)STACK[0x538]);
  if (SLOBYTE(STACK[0x567]) < 0)
    operator delete((void *)STACK[0x550]);
  if (SLOBYTE(STACK[0x57F]) < 0)
    operator delete((void *)STACK[0x568]);
  if (SLOBYTE(STACK[0x597]) < 0)
    operator delete((void *)STACK[0x580]);
  sub_498C((uint64_t)&STACK[0x1BD0]);
  *(_QWORD *)(v3 - 192) = v1;
  sub_B774((void ***)(v3 - 192));
  _Unwind_Resume(a1);
}

int *sub_11F364(unsigned int *a1, uint64_t a2)
{
  int *v4;
  int *v5;

  v4 = sub_11F3A8(a1, a2);
  v5 = sub_11F5A4(a1, a2);
  return sub_C1F8((unsigned int *)v4, (unsigned int *)v5);
}

int *sub_11F3A8(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  int *v6;
  unsigned int *v7;
  int *v8;
  unsigned int *v9;
  int *v10;
  unsigned int *v11;
  int *v12;
  unsigned int *v13;
  int *v14;
  int gen;
  int variant;
  int rev;
  unsigned int *v18;
  BOOL v20;
  unsigned int *v21;
  int *v22;
  unsigned int *v23;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "EED11884758646FD70438F8D2661EC13F25DF1E40EC651E073736D2EFDAB9F0D");
  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "D1922B4CF1F4DC1E2062378D34EE4E6EAB398BD0417BC95E5EF60C5C1F53E035");
  v6 = sub_C1F8(v4, v5);
  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "DFF91EC9DAE4F9D14485F569D87B6AC75F93DD47C850ACF09E9DD7A3D0EFCE8A");
  v8 = sub_C1F8((unsigned int *)v6, v7);
  v9 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "3FAA4DE8275531852B39C91E52291523AEA993A6114D2CF7645F7C8AC1EF27CE");
  v10 = sub_C1F8((unsigned int *)v8, v9);
  v11 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "0AF6A9208DBB7C0C06A19C4C9090BF87CF00BBEE2BDFD9E0C49423DD641C1174");
  v12 = sub_C1F8((unsigned int *)v10, v11);
  v13 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "0D32627A10C5DB983D8E5DF466E154001CBB4E945D22A4E280A08C8D0F1701A7");
  v14 = sub_C1F8((unsigned int *)v12, v13);
  gen = agxps_gpu_get_gen(a1);
  variant = agxps_gpu_get_variant((uint64_t)a1);
  rev = agxps_gpu_get_rev((uint64_t)a1);
  if (gen != 15 || variant != 3 || rev != 1)
  {
    v18 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "3CCBBD2DBDE74F294638B5661472C6041FD802D082125437CB926C2F4E201182");
    v14 = sub_C1F8((unsigned int *)v14, v18);
  }
  v20 = gen == 15 && variant > 2;
  if (gen != 16 && !v20 && (gen != 17 || variant > 2))
    return v14;
  v21 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "E4079A9FE3685ED6370986B0373FFC91E49069A610571534C42255467036D7CD");
  v22 = sub_C1F8((unsigned int *)v14, v21);
  v23 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "11F678510139CFDE77DC68F07F633C61D28564C9B207D45849B5E6AB72B41E0A");
  return sub_C1F8((unsigned int *)v22, v23);
}

int *sub_11F5A4(unsigned int *a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  int *v6;
  unsigned int *v7;
  int *v8;
  unsigned int *v9;
  int *v10;
  unsigned int *v11;
  int *v12;
  unsigned int *v13;
  int *v14;
  int gen;
  int variant;
  int rev;
  unsigned int *v18;
  BOOL v20;
  unsigned int *v21;
  int *v22;
  unsigned int *v23;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "E01BD71065BD9CE02CFEEC935E09F6DE3C3B9EFAED8F187A533C6321069B4D85");
  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "7D8633F6EB10ABA43002BB46D28FA26BFFA1093AB39728908221CE3FD922C72D");
  v6 = sub_C1F8(v4, v5);
  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "8F37B8C186E20EAB68B65FA965112E8C106205370CA0829C3EBD548C49C99A46");
  v8 = sub_C1F8((unsigned int *)v6, v7);
  v9 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "6FFBFD65F64B0F892C812D9952748E8632E02C4DF155F5E233927E6D0DC88D38");
  v10 = sub_C1F8((unsigned int *)v8, v9);
  v11 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "6CFA2D1125EAFC658FDF0E2F1A1B4F8D315296A1AFB116D0A8ECF669C026FF69");
  v12 = sub_C1F8((unsigned int *)v10, v11);
  v13 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "B6C42286FD0AB628E79B9D4F5F10DC31C2DFD460570800BEB5C9E53651363C7D");
  v14 = sub_C1F8((unsigned int *)v12, v13);
  gen = agxps_gpu_get_gen(a1);
  variant = agxps_gpu_get_variant((uint64_t)a1);
  rev = agxps_gpu_get_rev((uint64_t)a1);
  if (gen != 15 || variant != 3 || rev != 1)
  {
    v18 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "0597494BBDA7FA995805FB01DD8AD6D81CC143C09F8EFB86702288F745E3F791");
    v14 = sub_C1F8((unsigned int *)v14, v18);
  }
  v20 = gen == 15 && variant > 2;
  if (gen != 16 && !v20 && (gen != 17 || variant > 2))
    return v14;
  v21 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "6060A012307BC0711368543129DC26F4493F2C5C30CAF9D4F782C065929930B3");
  v22 = sub_C1F8((unsigned int *)v14, v21);
  v23 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 16))(a2, "9C397DD48F0AD6AAD1F9B2ABA077E5808FA3D4E452B659013FF3CEC6D1EB1472");
  return sub_C1F8((unsigned int *)v22, v23);
}

BOOL sub_11F7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t length;
  _BOOL8 result;

  length = agxps_timeseries_get_length(a1);
  result = agxps_gpu_is_valid(a1);
  if (result)
  {
    result = agxps_gpu_is_valid(a2);
    if (result)
    {
      result = agxps_gpu_is_valid(a3);
      if (result)
      {
        result = agxps_gpu_is_valid(a4);
        if (result)
          return agxps_timeseries_get_length(a2) == length
              && agxps_timeseries_get_length(a3) == length
              && agxps_timeseries_get_length(a4) == length;
      }
    }
  }
  return result;
}

int *sub_11F848(uint64_t a1, uint64_t (***a2)(_QWORD, const char *))
{
  unsigned int *v4;
  unsigned int *v5;
  int *v6;
  unsigned int *v7;
  int *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  unsigned int *v14;
  int *v15;
  unsigned int *v16;

  v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a1 + 16))(a1, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_59_31");
  v5 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a1 + 16))(a1, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_61_33");
  v6 = sub_C1F8(v4, v5);
  v7 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a1 + 16))(a1, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_65_37");
  v8 = sub_C1F8((unsigned int *)v6, v7);
  v9 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a1 + 16))(a1, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_63_35");
  v10 = (**a2)(a2, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_120_90");
  v12 = sub_1023C(v9, v10, v11);
  v13 = sub_C1F8((unsigned int *)v8, (unsigned int *)v12);
  v14 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a1 + 16))(a1, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_67_39");
  v15 = sub_C1F8((unsigned int *)v13, v14);
  v16 = (unsigned int *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a1 + 16))(a1, "\"/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupport/DerivedCounters/AGXPSLimiters.cpp\"_69_41");
  return sub_C1F8((unsigned int *)v15, v16);
}

uint64_t sub_11F97C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x1745D1745D1745DLL)
    sub_4074();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xBA2E8BA2E8BA2ELL)
    v9 = 0x1745D1745D1745DLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_11FB0C(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[176 * v4];
  v16 = &v10[176 * v9];
  sub_4988((uint64_t)v14, a2);
  v15 = v14 + 176;
  sub_11FA98(a1, &v13);
  v11 = a1[1];
  sub_11FC90(&v13);
  return v11;
}

void sub_11FA84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_11FC90((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_11FA98(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_11FB54((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_11FB0C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL)
    sub_4130();
  return operator new(176 * a2);
}

uint64_t sub_11FB54(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 22;
      sub_4988(v7 - 176, v9);
      v7 = *((_QWORD *)&v15 + 1) - 176;
      *((_QWORD *)&v15 + 1) -= 176;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_11FC0C((uint64_t)v12);
  return v10;
}

void sub_11FBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_11FC0C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_11FC0C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_11FC40((uint64_t *)a1);
  return a1;
}

uint64_t *sub_11FC40(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_B7F8(v3, v1);
      v1 += 176;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_11FC90(void **a1)
{
  sub_11FCC0((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_11FCC0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 176;
      result = sub_B7F8(v4, v1 - 176);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_11FD04()
{
  return 0;
}

uint64_t sub_11FD0C()
{
  return raise(5);
}

void *sub_11FD14()
{
  return &_os_log_disabled;
}

unsigned int *sub_11FD20(unsigned int *result)
{
  unsigned int *v1;
  uint8x8_t v2;
  uint8x8_t v3;
  uint8x8_t v5;

  if (result)
  {
    v1 = result;
    result = 0;
    v2 = (uint8x8_t)vcnt_s8((int8x8_t)v1[2]);
    v2.i16[0] = vaddlv_u8(v2);
    if (v2.i32[0] == 1 && v1[2] - 2049 >= 0xFFFFF80F)
    {
      v3 = (uint8x8_t)vcnt_s8((int8x8_t)v1[3]);
      v3.i16[0] = vaddlv_u8(v3);
      if (v3.i32[0] == 1 && v1[3] - 8193 >= 0xFFFFE03F)
      {
        v5 = (uint8x8_t)vcnt_s8((int8x8_t)v1[4]);
        v5.i16[0] = vaddlv_u8(v5);
        if (v5.i32[0] == 1 && v1[4] - 32769 >= 0xFFFF807F)
          operator new();
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_11FDEC(uint64_t a1, __int128 *a2)
{
  _BYTE *v3;
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  int v22;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_723060;
  v3 = (_BYTE *)(a1 + 39500);
  v4 = *a2;
  v5 = a2[1];
  v6 = (_BYTE *)(a1 + 34256);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  v7 = (_BYTE *)(a1 + 376);
  v8 = 152;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  do
  {
    *(v7 - 216) = 0;
    *v7 = 0;
    v7 += 224;
    --v8;
  }
  while (v8);
  v9 = 8;
  do
  {
    *(v6 - 48) = 0;
    *v6 = 0;
    v6 += 56;
    --v9;
  }
  while (v9);
  v10 = (_BYTE *)(a1 + 34688);
  v11 = 16;
  do
  {
    *(v10 - 32) = 0;
    *v10 = 0;
    v10 += 40;
    --v11;
  }
  while (v11);
  v12 = (_BYTE *)(a1 + 35400);
  v13 = 255;
  do
  {
    *(v12 - 8) = 0;
    *v12 = 0;
    v12 += 16;
    --v13;
  }
  while (v13);
  v14 = 8;
  do
  {
    *(v3 - 12) = 0;
    *v3 = 0;
    v3 += 16;
    --v14;
  }
  while (v14);
  v15 = (_BYTE *)(a1 + 39628);
  v16 = 8;
  do
  {
    *(v15 - 12) = 0;
    *v15 = 0;
    v15 += 16;
    --v16;
  }
  while (v16);
  v17 = (_BYTE *)(a1 + 39756);
  v18 = 8;
  do
  {
    *(v17 - 12) = 0;
    *v17 = 0;
    v17 += 16;
    --v18;
  }
  while (v18);
  v19 = (_BYTE *)(a1 + 39880);
  v20 = 128;
  do
  {
    *(v19 - 8) = 0;
    *v19 = 0;
    v19 += 16;
    --v20;
  }
  while (v20);
  *(_OWORD *)(a1 + 39472) = 0u;
  bzero((void *)(a1 + 41920), 0x1CB0uLL);
  v21 = *(_DWORD *)(a1 + 28);
  if (v21 > 1023)
  {
    if (v21 > 4095)
    {
      if (v21 == 4096)
      {
        v22 = 6;
        goto LABEL_36;
      }
      if (v21 == 0x2000)
      {
        v22 = 7;
        goto LABEL_36;
      }
    }
    else
    {
      if (v21 == 1024)
      {
        v22 = 4;
        goto LABEL_36;
      }
      if (v21 == 2048)
      {
        v22 = 5;
        goto LABEL_36;
      }
    }
  }
  else if (v21 > 255)
  {
    if (v21 == 256)
    {
      v22 = 2;
      goto LABEL_36;
    }
    if (v21 == 512)
    {
      v22 = 3;
      goto LABEL_36;
    }
  }
  else
  {
    if (v21 == 64)
    {
      v22 = 0;
      goto LABEL_36;
    }
    if (v21 == 128)
    {
      v22 = 1;
LABEL_36:
      *(_DWORD *)(a1 + 100) = v22;
    }
  }
  return a1;
}

_QWORD *sub_11FFD0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _DWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  char **v21;
  int v22;
  unint64_t v23;
  _WORD *v24;
  _WORD *v25;
  unsigned int v26;
  int v27;
  __int16 v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  unint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  NSObject *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  NSObject *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  unsigned int v80;
  BOOL v81;
  unsigned int v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t *v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  _QWORD *v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  char *v106;
  unsigned int v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  BOOL v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  int64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  NSObject *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t *v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  _QWORD *v144;
  unint64_t *v145;
  unint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  void **v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  void *v163;
  void *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t *v176;
  unint64_t v177;
  _QWORD *v178;
  void **v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  NSObject *v192;
  unint64_t *v193;
  unint64_t v194;
  _QWORD *v195;
  uint64_t *v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  uint64_t *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t *v208;
  unint64_t v209;
  _QWORD *v210;
  void **v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  _QWORD *v224;
  int v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  char *v230;
  uint64_t *v231;
  char *v232;
  char *v233;
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  unint64_t *v242;
  char *v243;
  char *v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  void *v249;
  char *v250;
  char *v251;
  unint64_t v252;
  uint64_t *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  _QWORD *v257;
  _DWORD *v258;
  unint64_t v259;
  _DWORD *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  int v267;
  _QWORD *v268;
  __int16 *v269;
  unint64_t v270;
  _WORD *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  char *v277;
  char *v278;
  int v279;
  _WORD *v280;
  char *v281;
  char *v282;
  __int16 v283;
  __int16 *v284;
  __int16 v285;
  _QWORD *v286;
  _DWORD *v287;
  unint64_t v288;
  _DWORD *v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  char *v294;
  char *v295;
  int v296;
  _QWORD *v297;
  _QWORD *v298;
  unint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t *v312;
  unint64_t v313;
  _QWORD *v314;
  void **v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t *v321;
  char *v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  void **v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  char *v332;
  uint64_t *v333;
  uint64_t v334;
  unint64_t v335;
  char *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  char *v342;
  _QWORD *v343;
  char *v344;
  char *v345;
  char *v346;
  uint64_t v347;
  _QWORD *v348;
  _QWORD *v349;
  unint64_t v350;
  _QWORD *v351;
  void **v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  _QWORD *v358;
  char *v359;
  char *v360;
  uint64_t v361;
  _QWORD *v362;
  _DWORD *v363;
  unint64_t v364;
  _DWORD *v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  char *v370;
  char *v371;
  int v372;
  _QWORD *v373;
  _WORD *v374;
  unint64_t v375;
  _WORD *v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t v381;
  char *v382;
  char *v383;
  __int16 v384;
  _QWORD *v385;
  _DWORD *v386;
  unint64_t v387;
  _DWORD *v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  char *v393;
  char *v394;
  int v395;
  _QWORD *v396;
  _QWORD *v397;
  unint64_t v398;
  _QWORD *v399;
  uint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  char *v404;
  char *v405;
  uint64_t v406;
  _QWORD *v407;
  _QWORD *v408;
  unint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  char *v415;
  char *v416;
  uint64_t v417;
  unint64_t v418;
  char *v419;
  char *v420;
  char *v421;
  char *v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  char *v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  void *v433;
  unint64_t v434;
  char *v435;
  char *v436;
  uint64_t v437;
  char *v438;
  char *v439;
  uint64_t v440;
  char *v441;
  char *v442;
  uint64_t v443;
  char *v444;
  unsigned int v445;
  uint64_t v446;
  uint64_t v447;
  char *v448;
  int64_t v449;
  uint64_t v450;
  unint64_t v451;
  char *v452;
  char *v453;
  uint64_t v454;
  uint64_t v455;
  char *v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  __int128 v460;
  __int128 v461;
  int v462;
  uint64_t *v463;
  char *v464;
  char *v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t *v470;
  uint64_t *v471;
  unint64_t v472;
  char v473;
  char *v474;
  unint64_t v475;
  char *v476;
  uint64_t v477;
  uint64_t v478;
  char *v479;
  int64_t v480;
  char *v481;
  uint64_t v482;
  char *v483;
  char *v484;
  uint64_t v485;
  unsigned int v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  char *v490;
  void *v491;
  char *v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  char *v496;
  uint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  char *v500;
  unint64_t v501;
  char *v502;
  char *v503;
  char *v504;
  char *v505;
  uint64_t v506;
  unint64_t v507;
  unint64_t v508;
  char *v509;
  uint64_t v510;
  uint64_t v511;
  char *v512;
  char *v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  char *v517;
  uint64_t v518;
  _QWORD *v519;
  char *v520;
  uint64_t v521;
  char *v522;
  char *v523;
  uint64_t v524;
  char *v525;
  uint64_t v526;
  uint64_t v527;
  char *v528;
  int64_t v529;
  uint64_t v530;
  unsigned __int8 *v531;
  BOOL v532;
  unsigned int v533;
  unint64_t v534;
  unint64_t v535;
  char *v536;
  uint64_t v537;
  _QWORD *v538;
  uint64_t v539;
  uint64_t i;
  _QWORD *v541;
  uint64_t v542;
  uint64_t *v543;
  unint64_t v544;
  _QWORD *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t *v551;
  char *v552;
  char *v553;
  uint64_t v554;
  void *v555;
  uint64_t v556;
  unsigned int v557;
  unsigned int v558;
  uint64_t v559;
  uint64_t v560;
  _DWORD *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  char v568;
  uint64_t *v569;
  _BYTE *v570;
  uint64_t v571;
  unint64_t *v572;
  void **v573;
  uint64_t v574;
  uint64_t v577;
  uint64_t v578[4];
  uint64_t v579[4];
  uint64_t v580[4];
  uint64_t v581[4];
  uint64_t v582[4];
  uint64_t v583[4];
  uint64_t v584[4];
  uint64_t v585[4];
  uint64_t v586[4];
  uint64_t v587[4];
  uint64_t v588[4];
  uint64_t v589[4];
  uint64_t v590[4];
  uint64_t v591[4];
  uint64_t v592[4];
  uint64_t v593[4];
  uint64_t v594[3];
  uint64_t v595[3];
  uint64_t v596[3];
  uint64_t v597[3];
  uint64_t v598[3];
  uint64_t v599[3];
  uint64_t v600[3];
  uint64_t v601[3];
  uint64_t v602[3];
  uint64_t v603[3];
  uint64_t v604[3];
  uint64_t v605[3];
  uint64_t v606[3];
  uint64_t v607[3];
  uint64_t v608[3];
  uint64_t v609[3];
  char v610;
  unint64_t v611;
  _QWORD *v612;
  _BYTE __s1[104];
  __int128 v614;
  __int128 v615;
  __int128 __p;
  __int128 v617;
  char v618;
  void *v619;
  void *v620;
  char v621;
  int v622;
  unsigned __int8 v623;
  _DWORD v624[4];
  __int128 v625;
  __int128 v626;

  if (a2 && a3)
  {
    v612 = 0;
    v8 = *(_QWORD *)(a1 + 128);
    if (!v8)
      operator new();
    v612 = *(_QWORD **)(a1 + 128);
    if (*(_BYTE *)(a1 + 92))
      v9 = *(_QWORD *)(a1 + 56);
    else
      v9 = 0;
    if (*(_BYTE *)(a1 + 93))
      v11 = *(_QWORD *)(a1 + 72);
    else
      v11 = 0;
    sub_F2D64(v8, (uint64_t *)(a1 + 136), 1 << (*(_DWORD *)(a1 + 100) + 6), v9, v11);
    v574 = *(_QWORD *)(v8 + 26024);
    if (a5)
      *a5 = 0;
    v13 = 8 * a3;
    v611 = 0;
    if (8 * a3)
    {
      v568 = a4;
      v561 = a5;
      v14 = 0;
      v577 = 0;
      v573 = (void **)(a1 + 41920);
      v565 = a1 + 41968;
      v564 = a1 + 39472;
      v563 = a1 + 35392;
      v560 = a1 + 39872;
      v562 = a1 + 35296;
      v566 = a1 + 34208;
      v567 = a1 + 34656;
      v571 = a1 + 160;
      v572 = (unint64_t *)(a1 + 72);
      v569 = (uint64_t *)(a1 + 56);
      v570 = (_BYTE *)(a1 + 93);
      while (1)
      {
        if (v13 - v14 <= 0x340)
        {
          memset(__s1, 0, sizeof(__s1));
          v12 = memcmp(__s1, (const void *)(a2 + (v14 >> 3)), a3 - (v14 >> 3));
          if (!(_DWORD)v12)
            goto LABEL_875;
        }
        v610 = 0;
        v12 = sub_13C0F0((uint64_t)v624, a2, &v611, &v610);
        if (!v610)
          break;
        if (v624[0] >= 0x11u)
        {
          v17 = sub_11FD14();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__s1 = 136315650;
            *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/"
                                  "AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
            *(_WORD *)&__s1[12] = 1024;
            *(_DWORD *)&__s1[14] = 994;
            *(_WORD *)&__s1[18] = 2080;
            *(_QWORD *)&__s1[20] = "tokenTypeIndex < numTokenTypes";
            _os_log_error_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
          }
          v12 = sub_11FD04();
          if ((_DWORD)v12)
            v12 = sub_11FD0C();
        }
        else
        {
          v15 = (_QWORD *)(v574 + 16 * v624[0]);
          v16 = v15[1];
          ++*v15;
          v15[1] = v611 - v14 + v16;
        }
        switch(v624[0])
        {
          case 0:
            v18 = (unsigned __int16)v625;
            if (v625 <= 0x97u)
            {
              v19 = v571 + 224 * v625;
              v20 = v612;
              if (!*(_BYTE *)(v19 + 216))
              {
                *(_QWORD *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v625;
                v621 = 0;
                memset(&__s1[40], 0, 64);
                v614 = 0u;
                v615 = 0u;
                __p = 0u;
                v617 = 0u;
                v618 = 0;
                v622 = 0;
                sub_BF3A8(v19, (uint64_t)__s1);
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((_QWORD *)&v614 + 1))
                {
                  *(_QWORD *)&v615 = *((_QWORD *)&v614 + 1);
                  operator delete(*((void **)&v614 + 1));
                }
                if (*(_QWORD *)&__s1[88])
                {
                  *(_QWORD *)&__s1[96] = *(_QWORD *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(_QWORD *)&__s1[64])
                {
                  *(_QWORD *)&__s1[72] = *(_QWORD *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(_QWORD *)&__s1[40])
                {
                  *(_QWORD *)&__s1[48] = *(_QWORD *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                v20 = v612;
                v18 = (unsigned __int16)v625;
              }
              v21 = (char **)(v19 + 40);
              sub_4607C((_QWORD *)(v19 + 40), v20);
              sub_461CC(v19 + 40);
              v22 = (v18 >> 6) & 0x100 | (v18 >> 8) & 0x3F;
              v12 = v19 + 56;
              v23 = *(_QWORD *)(v19 + 56);
              v24 = *(_WORD **)(v19 + 48);
              if ((unint64_t)v24 >= v23)
              {
                v170 = (char *)v24 - *v21;
                if (v170 <= -3)
                  sub_4074();
                v171 = v170 >> 1;
                v172 = v23 - (_QWORD)*v21;
                if (v172 <= (v170 >> 1) + 1)
                  v173 = v171 + 1;
                else
                  v173 = v172;
                if (v172 >= 0x7FFFFFFFFFFFFFFELL)
                  v174 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v174 = v173;
                if (v174)
                  v12 = (uint64_t)sub_43B60(v12, v174);
                else
                  v12 = 0;
                v280 = (_WORD *)(v12 + 2 * v171);
                *v280 = v22;
                v25 = v280 + 1;
                v282 = *(char **)(v19 + 40);
                v281 = *(char **)(v19 + 48);
                if (v281 != v282)
                {
                  do
                  {
                    v283 = *((_WORD *)v281 - 1);
                    v281 -= 2;
                    *--v280 = v283;
                  }
                  while (v281 != v282);
                  v281 = *v21;
                }
                *(_QWORD *)(v19 + 40) = v280;
                *(_QWORD *)(v19 + 48) = v25;
                *(_QWORD *)(v19 + 56) = v12 + 2 * v174;
                if (v281)
                  operator delete(v281);
              }
              else
              {
                *v24 = v22;
                v25 = v24 + 1;
              }
              *(_QWORD *)(v19 + 48) = v25;
            }
            goto LABEL_856;
          case 1:
            v76 = *(unsigned int *)(a1 + 24);
            v77 = *(_QWORD *)(a1 + 72);
            if (v77 % v76)
            {
              v78 = (v77 + v76 - 1) / v76 * v76;
            }
            else
            {
              if (*(_QWORD *)(a1 + 80) == v77 && !*(_DWORD *)(a1 + 96) && *v570)
                goto LABEL_351;
              v78 = v77 + v76;
            }
            *v572 = v78;
            v144 = v612;
            v145 = (unint64_t *)v612[3259];
            v146 = v612[3260];
            if ((unint64_t)v145 >= v146)
            {
              v12 = v612[3258];
              v148 = ((uint64_t)v145 - v12) >> 3;
              if ((unint64_t)(v148 + 1) >> 61)
                sub_4074();
              v149 = v146 - v12;
              v150 = (uint64_t)(v146 - v12) >> 2;
              if (v150 <= v148 + 1)
                v150 = v148 + 1;
              if (v149 >= 0x7FFFFFFFFFFFFFF8)
                v151 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v151 = v150;
              if (v151)
              {
                v152 = (char *)sub_40FC((uint64_t)(v612 + 3260), v151);
                v145 = (unint64_t *)v144[3259];
                v12 = v144[3258];
              }
              else
              {
                v152 = 0;
              }
              v235 = (unint64_t *)&v152[8 * v148];
              *v235 = v78;
              v147 = v235 + 1;
              while (v145 != (unint64_t *)v12)
              {
                v236 = *--v145;
                *--v235 = v236;
              }
              v144[3258] = v235;
              v144[3259] = v147;
              v144[3260] = &v152[8 * v151];
              if (v12)
                operator delete((void *)v12);
            }
            else
            {
              *v145 = v78;
              v147 = v145 + 1;
            }
            v144[3259] = v147;
            if (!(v78 % v76))
              v144[3264] = ((((_QWORD)v147 - v144[3258]) << 29) - 0x100000000) | (((v144[3256]
                                                                                                  - v144[3255]) >> 3)
                                                                                  - 1);
LABEL_351:
            ++*(_DWORD *)(a1 + 96);
            goto LABEL_856;
          case 2:
            v45 = v612;
            v46 = v612[3259];
            v47 = v612[3258];
            if (v46 - v47 == 8 && !*(_QWORD *)(v46 - 8))
              v612[3259] = v47;
            v48 = *(_QWORD *)(a1 + 56) + (1 << (*(_DWORD *)(a1 + 100) + 6));
            v49 = sub_3D360(a1, (uint64_t)v45, v625 & 0xFFFFF, v48);
            v12 = sub_F33E4((uint64_t)v45, v570, *(unsigned int *)(a1 + 24), v572, v49);
            if (v49 < *(_QWORD *)(a1 + 72))
            {
              v50 = sub_11FD14();
              if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1091;
                *(_WORD *)&__s1[18] = 2080;
                *(_QWORD *)&__s1[20] = "uscTimestamp >= parser->lastUSCTimestamp";
                _os_log_error_impl(&dword_0, v50, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              v12 = sub_11FD04();
              if ((_DWORD)v12)
                v12 = sub_11FD0C();
            }
            v51 = v612;
            v52 = *(unsigned int *)(a1 + 24);
            v53 = (unint64_t *)v612[3259];
            v54 = v612[3260];
            if ((unint64_t)v53 >= v54)
            {
              v12 = v612[3258];
              v134 = ((uint64_t)v53 - v12) >> 3;
              if ((unint64_t)(v134 + 1) >> 61)
                sub_4074();
              v135 = v54 - v12;
              v136 = (uint64_t)(v54 - v12) >> 2;
              if (v136 <= v134 + 1)
                v136 = v134 + 1;
              if (v135 >= 0x7FFFFFFFFFFFFFF8)
                v137 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v137 = v136;
              if (v137)
              {
                v138 = (char *)sub_40FC((uint64_t)(v612 + 3260), v137);
                v53 = (unint64_t *)v51[3259];
                v12 = v51[3258];
              }
              else
              {
                v138 = 0;
              }
              v193 = (unint64_t *)&v138[8 * v134];
              *v193 = v49;
              v55 = v193 + 1;
              while (v53 != (unint64_t *)v12)
              {
                v194 = *--v53;
                *--v193 = v194;
              }
              v51[3258] = v193;
              v51[3259] = v55;
              v51[3260] = &v138[8 * v137];
              if (v12)
                operator delete((void *)v12);
            }
            else
            {
              *v53 = v49;
              v55 = v53 + 1;
            }
            v51[3259] = v55;
            if (!(v49 % v52))
              v51[3264] = ((((_QWORD)v55 - v51[3258]) << 29) - 0x100000000) | (((v51[3256] - v51[3255]) >> 3)
                                                                               - 1);
            *(_QWORD *)(a1 + 72) = v49;
            *(_QWORD *)(a1 + 80) = v49;
            *(_DWORD *)(a1 + 88) = v625 & 0xFFFFF;
            *(_DWORD *)(a1 + 96) = 0;
            v195 = v612;
            v196 = (uint64_t *)v612[3256];
            v197 = v612[3257];
            if ((unint64_t)v196 >= v197)
            {
              v12 = v612[3255];
              v199 = ((uint64_t)v196 - v12) >> 3;
              if ((unint64_t)(v199 + 1) >> 61)
                sub_4074();
              v200 = v197 - v12;
              v201 = (uint64_t)(v197 - v12) >> 2;
              if (v201 <= v199 + 1)
                v201 = v199 + 1;
              if (v200 >= 0x7FFFFFFFFFFFFFF8)
                v202 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v202 = v201;
              if (v202)
              {
                v203 = (char *)sub_40FC((uint64_t)(v612 + 3257), v202);
                v196 = (uint64_t *)v195[3256];
                v12 = v195[3255];
              }
              else
              {
                v203 = 0;
              }
              v204 = (uint64_t *)&v203[8 * v199];
              *v204 = v48;
              v198 = v204 + 1;
              while (v196 != (uint64_t *)v12)
              {
                v205 = *--v196;
                *--v204 = v205;
              }
              v195[3255] = v204;
              v195[3256] = v198;
              v195[3257] = &v203[8 * v202];
              if (v12)
                operator delete((void *)v12);
            }
            else
            {
              *v196 = v48;
              v198 = v196 + 1;
            }
            v195[3256] = v198;
            *v569 = v48;
            v206 = v612;
            v207 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                        - 1);
            v208 = (uint64_t *)v612[3262];
            v209 = v612[3263];
            if ((unint64_t)v208 >= v209)
            {
              v211 = (void **)(v612 + 3261);
              v212 = v612[3261];
              v213 = ((uint64_t)v208 - v212) >> 3;
              if ((unint64_t)(v213 + 1) >> 61)
                sub_4074();
              v214 = v209 - v212;
              v215 = v214 >> 2;
              if (v214 >> 2 <= (unint64_t)(v213 + 1))
                v215 = v213 + 1;
              if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF8)
                v216 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v216 = v215;
              if (v216)
                v12 = (uint64_t)sub_40FC((uint64_t)(v612 + 3263), v216);
              else
                v12 = 0;
              v231 = (uint64_t *)(v12 + 8 * v213);
              *v231 = v207;
              v210 = v231 + 1;
              v232 = (char *)v206[3262];
              v233 = (char *)v206[3261];
              if (v232 != v233)
              {
                do
                {
                  v234 = *((_QWORD *)v232 - 1);
                  v232 -= 8;
                  *--v231 = v234;
                }
                while (v232 != v233);
                v232 = (char *)*v211;
              }
              v206[3261] = v231;
              v206[3262] = v210;
              v206[3263] = v12 + 8 * v216;
              if (v232)
                operator delete(v232);
            }
            else
            {
              *v208 = v207;
              v210 = v208 + 1;
            }
            v206[3262] = v210;
            goto LABEL_856;
          case 3:
            v61 = v612;
            v62 = v612[3256];
            v63 = v612[3255];
            if (v62 - v63 == 8 && !*(_QWORD *)(v62 - 8))
              v612[3256] = v63;
            v64 = v61[3259];
            v65 = v61[3258];
            if (v64 - v65 == 8 && !*(_QWORD *)(v64 - 8))
              v61[3259] = v65;
            v66 = *((_QWORD *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            v67 = sub_3D360(a1, (uint64_t)v61, v625 & 0xFFFFF, *((_QWORD *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL);
            sub_F338C((uint64_t)v61, (_BYTE *)(a1 + 92), 1 << (*(_DWORD *)(a1 + 100) + 6), v569, v66);
            v12 = sub_F33E4((uint64_t)v612, v570, *(unsigned int *)(a1 + 24), v572, v67);
            if ((*((_QWORD *)&v625 + 1) & 0x3FFFFFFFFFFFFFuLL) <= *(_QWORD *)(a1 + 56))
            {
              v68 = sub_11FD14();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1035;
                *(_WORD *)&__s1[18] = 2080;
                *(_QWORD *)&__s1[20] = "token.bits.tok.timeStamp.systemTime > parser->lastSystemTimestamp";
                _os_log_error_impl(&dword_0, v68, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              v12 = sub_11FD04();
              if ((_DWORD)v12)
                v12 = sub_11FD0C();
            }
            v69 = v612;
            v70 = *((_QWORD *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            v71 = (uint64_t *)v612[3256];
            v72 = v612[3257];
            if ((unint64_t)v71 >= v72)
            {
              v12 = v612[3255];
              v139 = ((uint64_t)v71 - v12) >> 3;
              if ((unint64_t)(v139 + 1) >> 61)
                sub_4074();
              v140 = v72 - v12;
              v141 = (uint64_t)(v72 - v12) >> 2;
              if (v141 <= v139 + 1)
                v141 = v139 + 1;
              if (v140 >= 0x7FFFFFFFFFFFFFF8)
                v142 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v142 = v141;
              if (v142)
              {
                v143 = (char *)sub_40FC((uint64_t)(v612 + 3257), v142);
                v71 = (uint64_t *)v69[3256];
                v12 = v69[3255];
              }
              else
              {
                v143 = 0;
              }
              v217 = (uint64_t *)&v143[8 * v139];
              *v217 = v70;
              v73 = v217 + 1;
              while (v71 != (uint64_t *)v12)
              {
                v218 = *--v71;
                *--v217 = v218;
              }
              v69[3255] = v217;
              v69[3256] = v73;
              v69[3257] = &v143[8 * v142];
              if (v12)
                operator delete((void *)v12);
            }
            else
            {
              *v71 = v70;
              v73 = v71 + 1;
            }
            v69[3256] = v73;
            v219 = *v572;
            if (v67 <= *v572)
            {
              if (v67 >= *v572)
                goto LABEL_482;
              *(_QWORD *)(a1 + 80) = v219;
              v225 = (v625 & 0xFFFFF) + v67 - v219;
            }
            else
            {
              v220 = v612;
              v221 = *(unsigned int *)(a1 + 24);
              v222 = (unint64_t *)v612[3259];
              v223 = v612[3260];
              if ((unint64_t)v222 >= v223)
              {
                v12 = v612[3258];
                v226 = ((uint64_t)v222 - v12) >> 3;
                if ((unint64_t)(v226 + 1) >> 61)
                  sub_4074();
                v227 = v223 - v12;
                v228 = (uint64_t)(v223 - v12) >> 2;
                if (v228 <= v226 + 1)
                  v228 = v226 + 1;
                if (v227 >= 0x7FFFFFFFFFFFFFF8)
                  v229 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v229 = v228;
                if (v229)
                {
                  v230 = (char *)sub_40FC((uint64_t)(v612 + 3260), v229);
                  v222 = (unint64_t *)v220[3259];
                  v12 = v220[3258];
                }
                else
                {
                  v230 = 0;
                }
                v308 = (unint64_t *)&v230[8 * v226];
                *v308 = v67;
                v224 = v308 + 1;
                while (v222 != (unint64_t *)v12)
                {
                  v309 = *--v222;
                  *--v308 = v309;
                }
                v220[3258] = v308;
                v220[3259] = v224;
                v220[3260] = &v230[8 * v229];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v222 = v67;
                v224 = v222 + 1;
              }
              v220[3259] = v224;
              if (!(v67 % v221))
                v220[3264] = ((((_QWORD)v224 - v220[3258]) << 29) - 0x100000000) | (((v220[3256] - v220[3255]) >> 3)
                                                                                    - 1);
              *(_QWORD *)(a1 + 72) = v67;
              *(_QWORD *)(a1 + 80) = v67;
              v225 = v625 & 0xFFFFF;
            }
            *(_DWORD *)(a1 + 88) = v225;
LABEL_482:
            *(_DWORD *)(a1 + 96) = 0;
            v310 = v612;
            v311 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                        - 1);
            v312 = (uint64_t *)v612[3262];
            v313 = v612[3263];
            if ((unint64_t)v312 >= v313)
            {
              v315 = (void **)(v612 + 3261);
              v316 = v612[3261];
              v317 = ((uint64_t)v312 - v316) >> 3;
              if ((unint64_t)(v317 + 1) >> 61)
                sub_4074();
              v318 = v313 - v316;
              v319 = v318 >> 2;
              if (v318 >> 2 <= (unint64_t)(v317 + 1))
                v319 = v317 + 1;
              if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFF8)
                v320 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v320 = v319;
              if (v320)
                v12 = (uint64_t)sub_40FC((uint64_t)(v612 + 3263), v320);
              else
                v12 = 0;
              v321 = (uint64_t *)(v12 + 8 * v317);
              *v321 = v311;
              v314 = v321 + 1;
              v322 = (char *)v310[3262];
              v323 = (char *)v310[3261];
              if (v322 != v323)
              {
                do
                {
                  v324 = *((_QWORD *)v322 - 1);
                  v322 -= 8;
                  *--v321 = v324;
                }
                while (v322 != v323);
                v322 = (char *)*v315;
              }
              v310[3261] = v321;
              v310[3262] = v314;
              v310[3263] = v12 + 8 * v320;
              if (v322)
                operator delete(v322);
            }
            else
            {
              *v312 = v311;
              v314 = v312 + 1;
            }
            v310[3262] = v314;
            v325 = *((_QWORD *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(_QWORD *)(a1 + 56) = *((_QWORD *)&v625 + 1) & 0x3FFFFFFFFFFFFFLL;
            *(_QWORD *)(a1 + 64) = v325;
            *(_DWORD *)(a1 + 100) = v626;
            goto LABEL_856;
          case 4:
            v29 = sub_11FD14();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1153;
              *(_WORD *)&__s1[18] = 2080;
              *(_QWORD *)&__s1[20] = "false";
              _os_log_error_impl(&dword_0, v29, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            v12 = sub_11FD04();
            if ((_DWORD)v12)
              v12 = sub_11FD0C();
            goto LABEL_856;
          case 5:
            v79 = v625;
            v80 = BYTE4(v625);
            v81 = (_DWORD)v625 == 1;
            if ((_DWORD)v625 == 1)
              v82 = BYTE4(v625) & 7 | 0x60;
            else
              v82 = BYTE4(v625);
            if (v82 > 0x97)
              goto LABEL_856;
            v83 = BYTE5(v625);
            v84 = DWORD2(v625);
            v85 = v571 + 224 * v82;
            if (!*(_BYTE *)(v85 + 216))
              goto LABEL_120;
            if (*(_BYTE *)(v85 + 214))
            {
              sub_13BEF4(a1, v612, *(unsigned __int8 *)(v85 + 36), 1);
LABEL_120:
              *(_QWORD *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                     - 1);
              memset(&__s1[16], 255, 20);
              __s1[36] = v82;
              v621 = 0;
              memset(&__s1[40], 0, 64);
              v614 = 0u;
              v615 = 0u;
              __p = 0u;
              v617 = 0u;
              v618 = 0;
              v622 = 0;
              sub_BF3A8(v85, (uint64_t)__s1);
              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              if (*((_QWORD *)&v614 + 1))
              {
                *(_QWORD *)&v615 = *((_QWORD *)&v614 + 1);
                operator delete(*((void **)&v614 + 1));
              }
              if (*(_QWORD *)&__s1[88])
              {
                *(_QWORD *)&__s1[96] = *(_QWORD *)&__s1[88];
                operator delete(*(void **)&__s1[88]);
              }
              if (*(_QWORD *)&__s1[64])
              {
                *(_QWORD *)&__s1[72] = *(_QWORD *)&__s1[64];
                operator delete(*(void **)&__s1[64]);
              }
              v12 = *(_QWORD *)&__s1[40];
              if (*(_QWORD *)&__s1[40])
              {
                *(_QWORD *)&__s1[48] = *(_QWORD *)&__s1[40];
                operator delete(*(void **)&__s1[40]);
              }
            }
            if (!*(_BYTE *)(v85 + 216))
              sub_70A0();
            *(_BYTE *)(v85 + 215) = v81;
            *(_BYTE *)(v85 + 214) = 1;
            *(_BYTE *)(v85 + 36) = v82;
            if (v79)
            {
              v86 = *(_QWORD *)(a1 + 104);
              if (v86 == -1)
                v86 = 0;
              *(_QWORD *)(a1 + 104) = v86 + 1;
              *(_QWORD *)(v85 + 16) = v86;
              v87 = v560 + 16 * (v83 & 0x7F);
              *(_QWORD *)v87 = v86;
              *(_BYTE *)(v87 + 8) = 1;
              v80 = *(unsigned __int8 *)(v85 + 36);
            }
            else
            {
              *(_BYTE *)(v85 + 36) = v80;
              if (v84 <= 7)
              {
                v185 = *(_DWORD *)(v562 + 12 * v84);
                *(_DWORD *)(v85 + 208) = v185;
                if (v185 <= 7)
                {
                  v186 = v566 + 56 * v185;
                  if (*(_BYTE *)(v186 + 48))
                    *(_DWORD *)(v85 + 32) = *(_DWORD *)(v186 + 24);
                }
                v187 = v560 + 16 * (*(_BYTE *)(v562 + 12 * v84 + 8) & 0x7F);
                if (*(_BYTE *)(v187 + 8))
                  *(_QWORD *)(v85 + 16) = *(_QWORD *)v187;
                if (v84 - 4 <= 2)
                {
                  v188 = v567 + 40 * (v84 - 4);
                  if (*(_BYTE *)(v188 + 32))
                    *(_QWORD *)(v85 + 24) = *(_QWORD *)(v188 + 16);
                }
              }
            }
            if (v80 < 0x60)
              goto LABEL_273;
            if (v80 >= 0x68)
            {
              if (v80 <= 0x97)
                goto LABEL_856;
            }
            else if (*(_BYTE *)(v85 + 215))
            {
              goto LABEL_856;
            }
LABEL_273:
            if (*(_QWORD *)(v565 + 48 * v82 + 40))
            {
              v189 = v565 + 48 * v82;
              v191 = *(_QWORD *)(v189 + 8);
              v190 = (_QWORD *)(v189 + 8);
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v191 + ((v190[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * (v190[3] & 0x1FFLL))
                            + 32))
              {
                v192 = sub_11FD14();
                if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__s1 = 136315650;
                  *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSu"
                                        "pport/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                  *(_WORD *)&__s1[12] = 1024;
                  *(_DWORD *)&__s1[14] = 1429;
                  *(_WORD *)&__s1[18] = 2080;
                  *(_QWORD *)&__s1[20] = "!pendingPositionsForClique.front()->cliqueStartSeen";
                  _os_log_error_impl(&dword_0, v192, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
                }
                if (sub_11FD04())
                  sub_11FD0C();
              }
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v190 + ((v190[3] >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * (v190[3] & 0x1FFLL))
                       + 32) = 1;
              *(_BYTE *)(v85 + 213) = 1;
              sub_1429E0(a1, v612);
            }
            goto LABEL_856;
          case 6:
            sub_13BEF4(a1, v612, v625, 0);
            goto LABEL_856;
          case 7:
            if (DWORD1(v625) == 1)
            {
              v74 = (*((_QWORD *)&v625 + 1) >> 5) & 0x7FFFFFFFFFFLL;
              v75 = v563 + 16 * (BYTE8(v625) & 0x1F);
              *(_QWORD *)v75 = v74;
              *(_BYTE *)(v75 + 8) = 1;
            }
            else
            {
              if (BYTE8(v625) == 255)
                goto LABEL_856;
              v129 = v563 + 16 * BYTE8(v625);
              if (!*(_BYTE *)(v129 + 8))
                goto LABEL_856;
              v74 = *(_QWORD *)v129;
            }
            if (v625 <= 0x97uLL)
            {
              v130 = v571 + 224 * v625;
              if (!*(_BYTE *)(v130 + 216))
              {
                *(_QWORD *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v625;
                v621 = 0;
                memset(&__s1[40], 0, 64);
                v614 = 0u;
                v615 = 0u;
                __p = 0u;
                v617 = 0u;
                v618 = 0;
                v622 = 0;
                sub_BF3A8(v130, (uint64_t)__s1);
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((_QWORD *)&v614 + 1))
                {
                  *(_QWORD *)&v615 = *((_QWORD *)&v614 + 1);
                  operator delete(*((void **)&v614 + 1));
                }
                if (*(_QWORD *)&__s1[88])
                {
                  *(_QWORD *)&__s1[96] = *(_QWORD *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(_QWORD *)&__s1[64])
                {
                  *(_QWORD *)&__s1[72] = *(_QWORD *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                v12 = *(_QWORD *)&__s1[40];
                if (*(_QWORD *)&__s1[40])
                {
                  *(_QWORD *)&__s1[48] = *(_QWORD *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
              }
              v131 = *(_QWORD *)(v130 + 80);
              v132 = *(uint64_t **)(v130 + 72);
              if ((unint64_t)v132 >= v131)
              {
                v12 = *(_QWORD *)(v130 + 64);
                v237 = ((uint64_t)v132 - v12) >> 3;
                if ((unint64_t)(v237 + 1) >> 61)
                  sub_4074();
                v238 = v131 - v12;
                v239 = (uint64_t)(v131 - v12) >> 2;
                if (v239 <= v237 + 1)
                  v239 = v237 + 1;
                if (v238 >= 0x7FFFFFFFFFFFFFF8)
                  v240 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v240 = v239;
                if (v240)
                {
                  v241 = (char *)sub_40FC(v130 + 80, v240);
                  v12 = *(_QWORD *)(v130 + 64);
                  v132 = *(uint64_t **)(v130 + 72);
                }
                else
                {
                  v241 = 0;
                }
                v333 = (uint64_t *)&v241[8 * v237];
                *v333 = v74;
                v133 = v333 + 1;
                while (v132 != (uint64_t *)v12)
                {
                  v334 = *--v132;
                  *--v333 = v334;
                }
                *(_QWORD *)(v130 + 64) = v333;
                *(_QWORD *)(v130 + 72) = v133;
                *(_QWORD *)(v130 + 80) = &v241[8 * v240];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v132 = v74;
                v133 = v132 + 1;
              }
              *(_QWORD *)(v130 + 72) = v133;
            }
            goto LABEL_856;
          case 8:
            v105 = (_QWORD *)(a1 + 41920);
            v106 = *(char **)(a1 + 41936);
            v107 = v625;
            v108 = *(char **)(a1 + 41928);
            v109 = v106 - v108;
            *(_OWORD *)__s1 = v625;
            *(_OWORD *)&__s1[16] = v626;
            __s1[32] = 0;
            __s1[40] = 0;
            v623 = 0;
            if (v106 == v108)
              v110 = 0;
            else
              v110 = 2 * (v106 - v108) - 1;
            v111 = *(_QWORD *)(a1 + 41952);
            if (v110 != *(_QWORD *)(a1 + 41960) + v111)
              goto LABEL_750;
            v112 = v111 >= 0x10;
            v113 = v111 - 16;
            if (v112)
            {
              v105 = (_QWORD *)(a1 + 41920);
              *(_QWORD *)(a1 + 41952) = v113;
              v116 = *(_QWORD *)v108;
              v115 = v108 + 8;
              v114 = v116;
              *(_QWORD *)(a1 + 41928) = v115;
              if (v106 == *(char **)(a1 + 41944))
              {
                v117 = (char *)*v573;
                if (v115 <= *v573)
                {
                  if (v106 == v117)
                    v335 = 1;
                  else
                    v335 = (v106 - v117) >> 2;
                  if (v335 >> 61)
LABEL_916:
                    sub_4130();
                  v336 = (char *)operator new(8 * v335);
                  v337 = &v336[8 * (v335 >> 2)];
                  v338 = v106 - v115;
                  v532 = v106 == v115;
                  v106 = v337;
                  if (!v532)
                  {
                    v106 = &v337[v338 & 0xFFFFFFFFFFFFFFF8];
                    v339 = 8 * (v338 >> 3);
                    v340 = &v336[8 * (v335 >> 2)];
                    do
                    {
                      v341 = *(_QWORD *)v115;
                      v115 += 8;
                      *(_QWORD *)v340 = v341;
                      v340 += 8;
                      v339 -= 8;
                    }
                    while (v339);
                  }
                  v105 = (_QWORD *)(a1 + 41920);
                  *v573 = v336;
                  *(_QWORD *)(a1 + 41928) = v337;
                  *(_QWORD *)(a1 + 41936) = v106;
                  *(_QWORD *)(a1 + 41944) = &v336[8 * v335];
                  if (v117)
                  {
                    operator delete(v117);
                    v106 = *(char **)(a1 + 41936);
                  }
                }
                else
                {
                  v118 = (v115 - (_BYTE *)*v573) >> 3;
                  if (v118 >= -1)
                    v119 = v118 + 1;
                  else
                    v119 = v118 + 2;
                  v120 = &v115[-8 * (v119 >> 1)];
                  v121 = v106 - v115;
                  v105 = (_QWORD *)(a1 + 41920);
                  if (v106 != v115)
                  {
                    memmove(&v115[-8 * (v119 >> 1)], v115, v106 - v115);
                    v106 = *(char **)(a1 + 41928);
                  }
                  v122 = &v106[-8 * (v119 >> 1)];
                  v106 = &v120[v121];
                  *(_QWORD *)(a1 + 41928) = v122;
                  *(_QWORD *)(a1 + 41936) = &v120[v121];
                }
              }
              *(_QWORD *)v106 = v114;
              goto LABEL_749;
            }
            v159 = v109 >> 3;
            v160 = *(char **)(a1 + 41944);
            v161 = (char *)*v573;
            v162 = v160 - (_BYTE *)*v573;
            if (v109 >> 3 < (unint64_t)(v162 >> 3))
            {
              v163 = operator new(0x1080uLL);
              v164 = v163;
              if (v160 == v106)
              {
                if (v108 == v161)
                {
                  if (v106 == v108)
                    v434 = 1;
                  else
                    v434 = (v160 - v108) >> 2;
                  if (v434 >> 61)
                    goto LABEL_916;
                  v435 = (char *)operator new(8 * v434);
                  v342 = &v435[(2 * v434 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v436 = v342;
                  if (v106 != v108)
                  {
                    v437 = 8 * v159;
                    v438 = &v435[(2 * v434 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v439 = v108;
                    v436 = &v342[8 * v159];
                    do
                    {
                      v440 = *(_QWORD *)v439;
                      v439 += 8;
                      *(_QWORD *)v438 = v440;
                      v438 += 8;
                      v437 -= 8;
                    }
                    while (v437);
                  }
                  v343 = (_QWORD *)(a1 + 41920);
                  *v573 = v435;
                  *(_QWORD *)(a1 + 41928) = v342;
                  *(_QWORD *)(a1 + 41936) = v436;
                  *(_QWORD *)(a1 + 41944) = &v435[8 * v434];
                  if (v108)
                  {
                    operator delete(v108);
                    v342 = *(char **)(a1 + 41928);
                  }
                }
                else
                {
                  v342 = v108;
                  v343 = (_QWORD *)(a1 + 41920);
                }
                *((_QWORD *)v342 - 1) = v164;
                v442 = (char *)v343[1];
                v441 = (char *)v343[2];
                v343[1] = v442 - 8;
                v443 = *((_QWORD *)v442 - 1);
                v343[1] = v442;
                if (v441 == (char *)v343[3])
                {
                  v444 = (char *)*v573;
                  if (v442 <= *v573)
                  {
                    if (v441 == v444)
                      v451 = 1;
                    else
                      v451 = (v441 - v444) >> 2;
                    if (v451 >> 61)
                      goto LABEL_916;
                    v452 = (char *)operator new(8 * v451);
                    v453 = &v452[8 * (v451 >> 2)];
                    v454 = v441 - v442;
                    v532 = v441 == v442;
                    v441 = v453;
                    if (!v532)
                    {
                      v441 = &v453[v454 & 0xFFFFFFFFFFFFFFF8];
                      v455 = 8 * (v454 >> 3);
                      v456 = &v452[8 * (v451 >> 2)];
                      do
                      {
                        v457 = *(_QWORD *)v442;
                        v442 += 8;
                        *(_QWORD *)v456 = v457;
                        v456 += 8;
                        v455 -= 8;
                      }
                      while (v455);
                    }
                    *v573 = v452;
                    *(_QWORD *)(a1 + 41928) = v453;
                    *(_QWORD *)(a1 + 41936) = v441;
                    *(_QWORD *)(a1 + 41944) = &v452[8 * v451];
                    if (v444)
                    {
                      operator delete(v444);
                      v441 = *(char **)(a1 + 41936);
                    }
                  }
                  else
                  {
                    v445 = v107;
                    v446 = (v442 - (_BYTE *)*v573) >> 3;
                    if (v446 >= -1)
                      v447 = v446 + 1;
                    else
                      v447 = v446 + 2;
                    v448 = &v442[-8 * (v447 >> 1)];
                    v449 = v441 - v442;
                    if (v441 == v442)
                    {
                      v450 = a1 + 41920;
                    }
                    else
                    {
                      memmove(&v442[-8 * (v447 >> 1)], v442, v441 - v442);
                      v450 = a1 + 41920;
                      v442 = *(char **)(a1 + 41928);
                    }
                    v441 = &v448[v449];
                    *(_QWORD *)(v450 + 8) = &v442[-8 * (v447 >> 1)];
                    *(_QWORD *)(v450 + 16) = &v448[v449];
                    v107 = v445;
                  }
                }
                *(_QWORD *)v441 = v443;
              }
              else
              {
                *(_QWORD *)v106 = v163;
              }
              v105 = (_QWORD *)(a1 + 41920);
LABEL_749:
              v105[2] += 8;
              goto LABEL_750;
            }
            v246 = v162 >> 2;
            if (v160 == v161)
              v247 = 1;
            else
              v247 = v246;
            if (v247 >> 61)
              goto LABEL_916;
            v248 = (char *)operator new(8 * v247);
            v557 = v107;
            v249 = operator new(0x1080uLL);
            v250 = &v248[8 * v159];
            v251 = &v248[8 * v247];
            if (v159 == v247)
            {
              if (v109 < 1)
              {
                if (v106 == v108)
                  v418 = 1;
                else
                  v418 = v109 >> 2;
                if (v418 >> 61)
                  sub_4130();
                v419 = (char *)operator new(8 * v418);
                v250 = &v419[8 * (v418 >> 2)];
                v251 = &v419[8 * v418];
                operator delete(v248);
                v108 = *(char **)(a1 + 41928);
                v106 = *(char **)(a1 + 41936);
                v248 = v419;
              }
              else
              {
                v252 = v159 + 2;
                if (v159 >= -1)
                  v252 = v159 + 1;
                v250 -= 8 * (v252 >> 1);
              }
            }
            *(_QWORD *)v250 = v249;
            v420 = v250 + 8;
            if (v106 != v108)
            {
              do
              {
                if (v250 == v248)
                {
                  if (v420 >= v251)
                  {
                    if (v251 == v250)
                      v425 = 1;
                    else
                      v425 = (v251 - v250) >> 2;
                    if (v425 >> 61)
                      sub_4130();
                    v426 = (char *)operator new(8 * v425);
                    v248 = v426;
                    v421 = &v426[(2 * v425 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v422 = v421;
                    v427 = v420 - v250;
                    if (v420 != v250)
                    {
                      v422 = &v421[v427 & 0xFFFFFFFFFFFFFFF8];
                      v428 = 8 * (v427 >> 3);
                      v429 = &v426[(2 * v425 + 6) & 0xFFFFFFFFFFFFFFF8];
                      v430 = v250;
                      do
                      {
                        v431 = *(_QWORD *)v430;
                        v430 += 8;
                        *(_QWORD *)v429 = v431;
                        v429 += 8;
                        v428 -= 8;
                      }
                      while (v428);
                    }
                    v251 = &v426[8 * v425];
                    operator delete(v250);
                  }
                  else
                  {
                    v423 = (v251 - v420) >> 3;
                    if (v423 >= -1)
                      v424 = v423 + 1;
                    else
                      v424 = v423 + 2;
                    v422 = &v420[8 * (v424 >> 1)];
                    v421 = &v250[8 * (v424 >> 1)];
                    if (v420 == v250)
                    {
                      v248 = v420;
                    }
                    else
                    {
                      memmove(&v250[8 * (v424 >> 1)], v250, v420 - v250);
                      v248 = v250;
                    }
                  }
                }
                else
                {
                  v421 = v250;
                  v422 = v420;
                }
                v432 = *((_QWORD *)v106 - 1);
                v106 -= 8;
                *((_QWORD *)v421 - 1) = v432;
                v250 = v421 - 8;
                v420 = v422;
              }
              while (v106 != *(char **)(a1 + 41928));
            }
            v105 = (_QWORD *)(a1 + 41920);
            v433 = *v573;
            *v573 = v248;
            *(_QWORD *)(a1 + 41928) = v250;
            *(_QWORD *)(a1 + 41936) = v420;
            *(_QWORD *)(a1 + 41944) = v251;
            v107 = v557;
            if (v433)
              operator delete(v433);
LABEL_750:
            v458 = v105[5] + v105[4];
            v459 = *(_QWORD *)(v105[1] + ((v458 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 264 * (v458 & 0xF);
            v460 = *(_OWORD *)__s1;
            v461 = *(_OWORD *)&__s1[16];
            *(_BYTE *)(v459 + 32) = __s1[32];
            *(_OWORD *)v459 = v460;
            *(_OWORD *)(v459 + 16) = v461;
            *(_BYTE *)(v459 + 256) = 0;
            *(_BYTE *)(v459 + 40) = 0;
            v12 = v459 + 40;
            if (v623)
            {
              sub_BF450(v12, (__int128 *)&__s1[40]);
              v462 = v623;
              ++v105[5];
              if (v462)
              {
                if (v619)
                {
                  v620 = v619;
                  operator delete(v619);
                }
                if ((_QWORD)v617)
                  operator delete((void *)v617);
                if (*((_QWORD *)&v615 + 1))
                  operator delete(*((void **)&v615 + 1));
                if ((_QWORD)v614)
                  operator delete((void *)v614);
                v12 = *(_QWORD *)&__s1[80];
                if (*(_QWORD *)&__s1[80])
                  operator delete(*(void **)&__s1[80]);
              }
            }
            else
            {
              ++v105[5];
            }
            if (v107 > 0x97)
              goto LABEL_856;
            v463 = (uint64_t *)(v565 + 48 * v107);
            v464 = (char *)v463[2];
            v465 = (char *)v463[1];
            v466 = ((v464 - v465) << 6) - 1;
            v467 = v464 - v465;
            v468 = *(_QWORD *)(a1 + 41960) + *(_QWORD *)(a1 + 41952) - 1;
            v559 = *(_QWORD *)(*(_QWORD *)(a1 + 41928) + ((v468 >> 1) & 0x7FFFFFFFFFFFFFF8));
            v470 = (unint64_t *)(v463 + 4);
            v469 = v463[4];
            if (v464 == v465)
              v466 = 0;
            v471 = v463 + 5;
            if (v466 != v463[5] + v469)
              goto LABEL_849;
            v112 = v469 >= 0x200;
            v472 = v469 - 512;
            if (v112)
            {
              v473 = *(_BYTE *)(a1 + 41960) + *(_BYTE *)(a1 + 41952) - 1;
              *v470 = v472;
              v475 = *(_QWORD *)v465;
              v474 = v465 + 8;
              v468 = v475;
              v463[1] = (uint64_t)v474;
              if (v464 == (char *)v463[3])
              {
                v476 = (char *)*v463;
                if ((unint64_t)v474 <= *v463)
                {
                  if (v464 == v476)
                    v494 = 1;
                  else
                    v494 = (v464 - v476) >> 2;
                  if (v494 >> 61)
                    sub_4130();
                  v12 = (uint64_t)operator new(8 * v494);
                  v495 = v12 + 8 * (v494 >> 2);
                  v496 = (char *)v495;
                  if (v464 != v474)
                  {
                    v496 = (char *)(v495 + ((v464 - v474) & 0xFFFFFFFFFFFFFFF8));
                    v497 = 8 * ((v464 - v474) >> 3);
                    v498 = (_QWORD *)(v12 + 8 * (v494 >> 2));
                    do
                    {
                      v499 = *(_QWORD *)v474;
                      v474 += 8;
                      *v498++ = v499;
                      v497 -= 8;
                    }
                    while (v497);
                  }
                  *v463 = v12;
                  v463[1] = v495;
                  v463[2] = (uint64_t)v496;
                  v463[3] = v12 + 8 * v494;
                  v464 = v496;
                  v470 = (unint64_t *)(v463 + 4);
                  if (v476)
                  {
                    operator delete(v476);
                    v464 = (char *)v463[2];
                  }
                }
                else
                {
                  v477 = (uint64_t)&v474[-*v463] >> 3;
                  if (v477 >= -1)
                    v478 = v477 + 1;
                  else
                    v478 = v477 + 2;
                  v479 = &v474[-8 * (v478 >> 1)];
                  v480 = v464 - v474;
                  if (v464 != v474)
                  {
                    v12 = (uint64_t)memmove(&v474[-8 * (v478 >> 1)], v474, v464 - v474);
                    v464 = (char *)v463[1];
                  }
                  v481 = &v464[-8 * (v478 >> 1)];
                  v464 = &v479[v480];
                  v463[1] = (uint64_t)v481;
                  v463[2] = (uint64_t)&v479[v480];
                  v471 = v463 + 5;
                  v470 = (unint64_t *)(v463 + 4);
                }
              }
              *(_QWORD *)v464 = v468;
              v463[2] += 8;
              LOBYTE(v468) = v473;
            }
            else
            {
              v482 = v467 >> 3;
              v483 = (char *)v463[3];
              v484 = (char *)*v463;
              v485 = (uint64_t)&v483[-*v463];
              v556 = *(_QWORD *)(a1 + 41960) + *(_QWORD *)(a1 + 41952) - 1;
              if (v467 >> 3 < (unint64_t)(v485 >> 3))
              {
                v486 = v107;
                v12 = (uint64_t)operator new(0x1000uLL);
                v487 = v12;
                if (v483 != v464)
                {
                  *(_QWORD *)v464 = v12;
                  v470 = (unint64_t *)(v463 + 4);
                  LOBYTE(v468) = v556;
LABEL_848:
                  v463[2] += 8;
                  v471 = v463 + 5;
                  goto LABEL_849;
                }
                if (v465 == v484)
                {
                  if (v464 == v465)
                    v516 = 1;
                  else
                    v516 = (v483 - v465) >> 2;
                  if (v516 >> 61)
                    sub_4130();
                  v12 = (uint64_t)operator new(8 * v516);
                  v500 = (char *)(v12 + 8 * ((v516 + 3) >> 2));
                  v517 = v500;
                  if (v464 != v465)
                  {
                    v518 = 8 * v482;
                    v519 = (_QWORD *)(v12 + 8 * ((v516 + 3) >> 2));
                    v520 = v465;
                    v517 = &v500[8 * v482];
                    do
                    {
                      v521 = *(_QWORD *)v520;
                      v520 += 8;
                      *v519++ = v521;
                      v518 -= 8;
                    }
                    while (v518);
                  }
                  *v463 = v12;
                  v463[1] = (uint64_t)v500;
                  v463[2] = (uint64_t)v517;
                  v463[3] = v12 + 8 * v516;
                  if (v465)
                  {
                    operator delete(v465);
                    v500 = (char *)v463[1];
                  }
                }
                else
                {
                  v500 = v465;
                }
                *((_QWORD *)v500 - 1) = v487;
                v523 = (char *)v463[1];
                v522 = (char *)v463[2];
                v463[1] = (uint64_t)(v523 - 8);
                v524 = *((_QWORD *)v523 - 1);
                v463[1] = (uint64_t)v523;
                v470 = (unint64_t *)(v463 + 4);
                if (v522 == (char *)v463[3])
                {
                  v525 = (char *)*v463;
                  if ((unint64_t)v523 > *v463)
                  {
                    v526 = (uint64_t)&v523[-*v463] >> 3;
                    if (v526 >= -1)
                      v527 = v526 + 1;
                    else
                      v527 = v526 + 2;
                    v528 = &v523[-8 * (v527 >> 1)];
                    v529 = v522 - v523;
                    if (v522 != v523)
                    {
                      v12 = (uint64_t)memmove(&v523[-8 * (v527 >> 1)], v523, v522 - v523);
                      v523 = (char *)v463[1];
                    }
                    v522 = &v528[v529];
                    v463[1] = (uint64_t)&v523[-8 * (v527 >> 1)];
                    v463[2] = (uint64_t)&v528[v529];
                    v107 = v486;
                    goto LABEL_846;
                  }
                  if (v522 == v525)
                    v468 = 1;
                  else
                    v468 = (v522 - v525) >> 2;
                  if (v468 >> 61)
                    sub_4130();
                  v12 = (uint64_t)operator new(8 * v468);
                  v535 = v12 + 8 * (v468 >> 2);
                  v536 = (char *)v535;
                  v470 = (unint64_t *)(v463 + 4);
                  if (v522 != v523)
                  {
                    v536 = (char *)(v535 + ((v522 - v523) & 0xFFFFFFFFFFFFFFF8));
                    v537 = 8 * ((v522 - v523) >> 3);
                    v538 = (_QWORD *)(v12 + 8 * (v468 >> 2));
                    do
                    {
                      v539 = *(_QWORD *)v523;
                      v523 += 8;
                      *v538++ = v539;
                      v537 -= 8;
                    }
                    while (v537);
                  }
                  *v463 = v12;
                  v463[1] = v535;
                  v463[2] = (uint64_t)v536;
                  v463[3] = v12 + 8 * v468;
                  v522 = v536;
                  LOBYTE(v468) = v556;
                  if (v525)
                  {
                    operator delete(v525);
                    v522 = (char *)v463[2];
                  }
                }
                else
                {
LABEL_846:
                  LOBYTE(v468) = v556;
                }
                *(_QWORD *)v522 = v524;
                goto LABEL_848;
              }
              v558 = v107;
              v488 = v485 >> 2;
              if (v483 == v484)
                v489 = 1;
              else
                v489 = v488;
              if (v489 >> 61)
                sub_4130();
              v490 = (char *)operator new(8 * v489);
              v491 = operator new(0x1000uLL);
              v492 = &v490[8 * v482];
              v468 = (unint64_t)&v490[8 * v489];
              if (v482 == v489)
              {
                v555 = v491;
                v470 = (unint64_t *)(v463 + 4);
                if (v467 < 1)
                {
                  if (v464 == v465)
                    v501 = 1;
                  else
                    v501 = v467 >> 2;
                  if (v501 >> 61)
                    sub_4130();
                  v502 = (char *)operator new(8 * v501);
                  v492 = &v502[8 * (v501 >> 2)];
                  v468 = (unint64_t)&v502[8 * v501];
                  operator delete(v490);
                  v465 = (char *)v463[1];
                  v464 = (char *)v463[2];
                  v490 = v502;
                }
                else
                {
                  v493 = v482 + 2;
                  if (v482 >= -1)
                    v493 = v482 + 1;
                  v492 -= 8 * (v493 >> 1);
                }
                v491 = v555;
              }
              else
              {
                v470 = (unint64_t *)(v463 + 4);
              }
              *(_QWORD *)v492 = v491;
              v503 = v492 + 8;
              if (v464 != v465)
              {
                do
                {
                  if (v492 == v490)
                  {
                    if ((unint64_t)v503 >= v468)
                    {
                      if ((char *)v468 == v492)
                        v508 = 1;
                      else
                        v508 = (uint64_t)(v468 - (_QWORD)v492) >> 2;
                      if (v508 >> 61)
                        sub_4130();
                      v509 = (char *)operator new(8 * v508);
                      v490 = v509;
                      v504 = &v509[(2 * v508 + 6) & 0xFFFFFFFFFFFFFFF8];
                      v505 = v504;
                      v510 = v503 - v492;
                      if (v503 != v492)
                      {
                        v505 = &v504[v510 & 0xFFFFFFFFFFFFFFF8];
                        v511 = 8 * (v510 >> 3);
                        v512 = &v509[(2 * v508 + 6) & 0xFFFFFFFFFFFFFFF8];
                        v513 = v492;
                        do
                        {
                          v514 = *(_QWORD *)v513;
                          v513 += 8;
                          *(_QWORD *)v512 = v514;
                          v512 += 8;
                          v511 -= 8;
                        }
                        while (v511);
                      }
                      v468 = (unint64_t)&v509[8 * v508];
                      operator delete(v492);
                    }
                    else
                    {
                      v506 = (uint64_t)(v468 - (_QWORD)v503) >> 3;
                      if (v506 >= -1)
                        v507 = v506 + 1;
                      else
                        v507 = v506 + 2;
                      v505 = &v503[8 * (v507 >> 1)];
                      v504 = &v492[8 * (v507 >> 1)];
                      if (v503 == v492)
                      {
                        v490 = v503;
                      }
                      else
                      {
                        memmove(&v492[8 * (v507 >> 1)], v492, v503 - v492);
                        v490 = v492;
                      }
                    }
                  }
                  else
                  {
                    v504 = v492;
                    v505 = v503;
                  }
                  v515 = *((_QWORD *)v464 - 1);
                  v464 -= 8;
                  *((_QWORD *)v504 - 1) = v515;
                  v492 = v504 - 8;
                  v503 = v505;
                }
                while (v464 != (char *)v463[1]);
              }
              v12 = *v463;
              *v463 = (uint64_t)v490;
              v463[1] = (uint64_t)v492;
              v463[2] = (uint64_t)v503;
              v463[3] = v468;
              v107 = v558;
              LOBYTE(v468) = v556;
              v471 = v463 + 5;
              if (v12)
                operator delete((void *)v12);
            }
LABEL_849:
            v530 = *v471;
            *(_QWORD *)(*(_QWORD *)(v463[1] + (((*v470 + *v471) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*v470 + *v471) & 0x1FF)) = v559 + 264 * (v468 & 0xF);
            *v471 = v530 + 1;
            v531 = (unsigned __int8 *)(v571 + 224 * v107);
            if (v531[216])
              v532 = v531[214] == 0;
            else
              v532 = 1;
            if (v532 || v531[213])
              goto LABEL_856;
            v533 = v531[36];
            if (v533 < 0x60)
              goto LABEL_855;
            if (v533 >= 0x68)
            {
              if (v533 >= 0x98)
              {
LABEL_855:
                v534 = *(_QWORD *)(a1 + 41960) + *(_QWORD *)(a1 + 41952) - 1;
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 41928) + ((v534 >> 1) & 0x7FFFFFFFFFFFFFF8))
                         + 264 * (v534 & 0xF)
                         + 32) = 1;
                v531[213] = 1;
                sub_1429E0(a1, v612);
              }
            }
            else if (!v531[215])
            {
              goto LABEL_855;
            }
LABEL_856:
            ++v577;
            v14 = v611;
            v13 = 8 * a3;
            if (v611 >= 8 * a3)
              goto LABEL_875;
            break;
          case 9:
            if (v625 <= 0x97uLL)
            {
              v39 = v571 + 224 * v625;
              v40 = v612;
              if (!*(_BYTE *)(v39 + 216))
              {
                *(_QWORD *)__s1 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                       - 1);
                memset(&__s1[16], 255, 20);
                __s1[36] = v625;
                v621 = 0;
                memset(&__s1[40], 0, 64);
                v614 = 0u;
                v615 = 0u;
                __p = 0u;
                v617 = 0u;
                v618 = 0;
                v622 = 0;
                sub_BF3A8(v39, (uint64_t)__s1);
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (*((_QWORD *)&v614 + 1))
                {
                  *(_QWORD *)&v615 = *((_QWORD *)&v614 + 1);
                  operator delete(*((void **)&v614 + 1));
                }
                if (*(_QWORD *)&__s1[88])
                {
                  *(_QWORD *)&__s1[96] = *(_QWORD *)&__s1[88];
                  operator delete(*(void **)&__s1[88]);
                }
                if (*(_QWORD *)&__s1[64])
                {
                  *(_QWORD *)&__s1[72] = *(_QWORD *)&__s1[64];
                  operator delete(*(void **)&__s1[64]);
                }
                if (*(_QWORD *)&__s1[40])
                {
                  *(_QWORD *)&__s1[48] = *(_QWORD *)&__s1[40];
                  operator delete(*(void **)&__s1[40]);
                }
                v40 = v612;
              }
              v41 = DWORD1(v625);
              sub_4607C((_QWORD *)(v39 + 40), v40);
              sub_461CC(v39 + 40);
              v42 = *(_QWORD *)(v39 + 104);
              v43 = *(_DWORD **)(v39 + 96);
              if ((unint64_t)v43 >= v42)
              {
                v12 = *(_QWORD *)(v39 + 88);
                v165 = ((uint64_t)v43 - v12) >> 2;
                if ((unint64_t)(v165 + 1) >> 62)
                  sub_4074();
                v166 = v42 - v12;
                v167 = (uint64_t)(v42 - v12) >> 1;
                if (v167 <= v165 + 1)
                  v167 = v165 + 1;
                if (v166 >= 0x7FFFFFFFFFFFFFFCLL)
                  v168 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v168 = v167;
                if (v168)
                {
                  v169 = (char *)sub_43B2C(v39 + 104, v168);
                  v12 = *(_QWORD *)(v39 + 88);
                  v43 = *(_DWORD **)(v39 + 96);
                }
                else
                {
                  v169 = 0;
                }
                v278 = &v169[4 * v165];
                *(_DWORD *)v278 = v41;
                v44 = v278 + 4;
                while (v43 != (_DWORD *)v12)
                {
                  v279 = *--v43;
                  *((_DWORD *)v278 - 1) = v279;
                  v278 -= 4;
                }
                *(_QWORD *)(v39 + 88) = v278;
                *(_QWORD *)(v39 + 96) = v44;
                *(_QWORD *)(v39 + 104) = &v169[4 * v168];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v43 = v41;
                v44 = v43 + 1;
              }
              *(_QWORD *)(v39 + 96) = v44;
            }
            goto LABEL_856;
          case 0xA:
            v95 = v612[3264];
            v96 = v625;
            *(_DWORD *)__s1 = v625;
            v97 = &v612[3 * v625];
            v98 = (unint64_t *)v97[3097];
            v99 = (unint64_t *)v97[3098];
            if (v98 == v99
              || (v100 = v625,
                  *(_QWORD *)(v612[3258] + ((v95 >> 29) & 0x7FFFFFFF8))
                - *(_QWORD *)(v612[3258] + ((*(v99 - 1) >> 29) & 0x7FFFFFFF8)) >= (unint64_t)*(unsigned int *)(a1 + 32)))
            {
              v101 = (void **)(v97 + 3098);
              v102 = &v612[3 * v625];
              v103 = v102[3099];
              if ((unint64_t)v99 >= v103)
              {
                v153 = (void **)(v97 + 3097);
                v154 = v99 - v98;
                if ((unint64_t)(v154 + 1) >> 61)
                  sub_4074();
                v155 = v102 + 3099;
                v156 = v103 - (_QWORD)v98;
                v157 = v156 >> 2;
                if (v156 >> 2 <= (unint64_t)(v154 + 1))
                  v157 = v154 + 1;
                if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8)
                  v158 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v158 = v157;
                if (v158)
                  v12 = (uint64_t)sub_40FC((uint64_t)v155, v158);
                else
                  v12 = 0;
                v242 = (unint64_t *)(v12 + 8 * v154);
                *v242 = v95;
                v104 = v242 + 1;
                v243 = (char *)*v101;
                v244 = (char *)*v153;
                if (*v101 != *v153)
                {
                  do
                  {
                    v245 = *((_QWORD *)v243 - 1);
                    v243 -= 8;
                    *--v242 = v245;
                  }
                  while (v243 != v244);
                  v243 = (char *)*v153;
                }
                *v153 = v242;
                *v101 = v104;
                *v155 = v12 + 8 * v158;
                if (v243)
                  operator delete(v243);
              }
              else
              {
                *v99 = v95;
                v104 = v99 + 1;
              }
              *v101 = v104;
              v100 = *(unsigned int *)__s1;
              if (*(_DWORD *)__s1 <= 0xFu)
                *(_BYTE *)(v564 + *(unsigned int *)__s1) = 0;
            }
            if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
            {
              switch(v96)
              {
                case 0:
                  v609[0] = a1;
                  v609[1] = (uint64_t)&v612;
                  v609[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_143024(v609, (_BYTE *)(v564 + v100));
                  break;
                case 1:
                  v608[0] = a1;
                  v608[1] = (uint64_t)&v612;
                  v608[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_145520(v608, (_BYTE *)(v564 + v100));
                  break;
                case 2:
                  v607[0] = a1;
                  v607[1] = (uint64_t)&v612;
                  v607[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_146614(v607, (_BYTE *)(v564 + v100));
                  break;
                case 3:
                  v606[0] = a1;
                  v606[1] = (uint64_t)&v612;
                  v606[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1499AC(v606, (_BYTE *)(v564 + v100));
                  break;
                case 4:
                  v605[0] = a1;
                  v605[1] = (uint64_t)&v612;
                  v605[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_14AE74(v605, (_BYTE *)(v564 + v100));
                  break;
                case 5:
                  v604[0] = a1;
                  v604[1] = (uint64_t)&v612;
                  v604[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_14C498(v604, (_BYTE *)(v564 + v100));
                  break;
                case 6:
                  v603[0] = a1;
                  v603[1] = (uint64_t)&v612;
                  v603[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_14CBB4(v603, (_BYTE *)(v564 + v100));
                  break;
                case 7:
                  v602[0] = a1;
                  v602[1] = (uint64_t)&v612;
                  v602[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_14ED5C(v602, (_BYTE *)(v564 + v100));
                  break;
                case 8:
                  v601[0] = a1;
                  v601[1] = (uint64_t)&v612;
                  v601[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_150D5C(v601, (_BYTE *)(v564 + v100));
                  break;
                case 9:
                  v600[0] = a1;
                  v600[1] = (uint64_t)&v612;
                  v600[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1515B4(v600, (_BYTE *)(v564 + v100));
                  break;
                case 10:
                  v599[0] = a1;
                  v599[1] = (uint64_t)&v612;
                  v599[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_15494C(v599, (_BYTE *)(v564 + v100));
                  break;
                case 11:
                  v598[0] = a1;
                  v598[1] = (uint64_t)&v612;
                  v598[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1554E4(v598, (_BYTE *)(v564 + v100));
                  break;
                case 12:
                  v597[0] = a1;
                  v597[1] = (uint64_t)&v612;
                  v597[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_155890(v597, (_BYTE *)(v564 + v100));
                  break;
                case 13:
                  v596[0] = a1;
                  v596[1] = (uint64_t)&v612;
                  v596[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_156930(v596, (_BYTE *)(v564 + v100));
                  break;
                case 14:
                  v595[0] = a1;
                  v595[1] = (uint64_t)&v612;
                  v595[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_158FCC(v595, (_BYTE *)(v564 + v100));
                  break;
                case 15:
                  v594[0] = a1;
                  v594[1] = (uint64_t)&v612;
                  v594[2] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1596A8(v594, (_BYTE *)(v564 + v100));
                  break;
                default:
                  goto LABEL_856;
              }
            }
            else
            {
              switch(v96)
              {
                case 0:
                  v593[0] = a1;
                  v593[1] = (uint64_t)__s1;
                  v593[2] = (uint64_t)&v612;
                  v593[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_15A7B4(v593, (_BYTE *)(v564 + v100));
                  break;
                case 1:
                  v592[0] = a1;
                  v592[1] = (uint64_t)__s1;
                  v592[2] = (uint64_t)&v612;
                  v592[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_15BCDC(v592, (_BYTE *)(v564 + v100));
                  break;
                case 2:
                  v591[0] = a1;
                  v591[1] = (uint64_t)__s1;
                  v591[2] = (uint64_t)&v612;
                  v591[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_15C714(v591, (_BYTE *)(v564 + v100));
                  break;
                case 3:
                  v590[0] = a1;
                  v590[1] = (uint64_t)__s1;
                  v590[2] = (uint64_t)&v612;
                  v590[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_15E3D0(v590, (_BYTE *)(v564 + v100));
                  break;
                case 4:
                  v589[0] = a1;
                  v589[1] = (uint64_t)__s1;
                  v589[2] = (uint64_t)&v612;
                  v589[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_15EFE4(v589, (_BYTE *)(v564 + v100));
                  break;
                case 5:
                  v588[0] = a1;
                  v588[1] = (uint64_t)__s1;
                  v588[2] = (uint64_t)&v612;
                  v588[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_15FDE8(v588, (_BYTE *)(v564 + v100));
                  break;
                case 6:
                  v587[0] = a1;
                  v587[1] = (uint64_t)__s1;
                  v587[2] = (uint64_t)&v612;
                  v587[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1602C0(v587, (_BYTE *)(v564 + v100));
                  break;
                case 7:
                  v586[0] = a1;
                  v586[1] = (uint64_t)__s1;
                  v586[2] = (uint64_t)&v612;
                  v586[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1615D0(v586, (_BYTE *)(v564 + v100));
                  break;
                case 8:
                  v585[0] = a1;
                  v585[1] = (uint64_t)__s1;
                  v585[2] = (uint64_t)&v612;
                  v585[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_162840(v585, (_BYTE *)(v564 + v100));
                  break;
                case 9:
                  v584[0] = a1;
                  v584[1] = (uint64_t)__s1;
                  v584[2] = (uint64_t)&v612;
                  v584[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_162DB4(v584, (_BYTE *)(v564 + v100));
                  break;
                case 10:
                  v583[0] = a1;
                  v583[1] = (uint64_t)__s1;
                  v583[2] = (uint64_t)&v612;
                  v583[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_164A70(v583, (_BYTE *)(v564 + v100));
                  break;
                case 11:
                  v582[0] = a1;
                  v582[1] = (uint64_t)__s1;
                  v582[2] = (uint64_t)&v612;
                  v582[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1651A4(v582, (_BYTE *)(v564 + v100));
                  break;
                case 12:
                  v581[0] = a1;
                  v581[1] = (uint64_t)__s1;
                  v581[2] = (uint64_t)&v612;
                  v581[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_165468(v581, (_BYTE *)(v564 + v100));
                  break;
                case 13:
                  v580[0] = a1;
                  v580[1] = (uint64_t)__s1;
                  v580[2] = (uint64_t)&v612;
                  v580[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_165E60(v580, (_BYTE *)(v564 + v100));
                  break;
                case 14:
                  v579[0] = a1;
                  v579[1] = (uint64_t)__s1;
                  v579[2] = (uint64_t)&v612;
                  v579[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_167418(v579, (_BYTE *)(v564 + v100));
                  break;
                case 15:
                  v578[0] = a1;
                  v578[1] = (uint64_t)__s1;
                  v578[2] = (uint64_t)&v612;
                  v578[3] = (uint64_t)v624;
                  if (v100 <= 0xF)
                    sub_1678C0(v578, (_BYTE *)(v564 + v100));
                  break;
                default:
                  goto LABEL_856;
              }
            }
            goto LABEL_856;
          case 0xB:
            v26 = v625;
            if (v625 > 7)
            {
              v27 = 0;
              v28 = -1;
            }
            else
            {
              v27 = dword_4A445C[(int)v625];
              v28 = word_4A4EF0[(int)v625];
            }
            v123 = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                        - 1);
            v124 = *((_QWORD *)&v625 + 1);
            if (*(_DWORD *)(a1 + 120) == -1)
              v125 = 0;
            else
              v125 = *(_DWORD *)(a1 + 120);
            *(_DWORD *)(a1 + 120) = v125 + 1;
            if (v26 > 7)
              goto LABEL_252;
            v126 = v566 + 56 * v26;
            if (!*(_BYTE *)(v126 + 48))
            {
              *(_QWORD *)v126 = v123;
              *(_QWORD *)(v126 + 16) = v124;
              *(_DWORD *)(v126 + 24) = v125;
              *(_DWORD *)(v126 + 28) = v27;
              *(_WORD *)(v126 + 32) = v28;
              *(_QWORD *)(v126 + 40) = 0;
LABEL_251:
              *(_BYTE *)(v126 + 48) = 1;
              goto LABEL_252;
            }
            v127 = sub_11FD14();
            if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__s1 = 136315650;
              *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSuppor"
                                    "t/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
              *(_WORD *)&__s1[12] = 1024;
              *(_DWORD *)&__s1[14] = 1206;
              *(_WORD *)&__s1[18] = 2080;
              *(_QWORD *)&__s1[20] = "!currentKick";
              _os_log_error_impl(&dword_0, v127, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
            }
            v12 = sub_11FD04();
            if ((_DWORD)v12)
              v12 = sub_11FD0C();
            v128 = *(unsigned __int8 *)(v126 + 48);
            *(_QWORD *)v126 = v123;
            *(_QWORD *)(v126 + 16) = v124;
            *(_DWORD *)(v126 + 24) = v125;
            *(_DWORD *)(v126 + 28) = v27;
            *(_WORD *)(v126 + 32) = v28;
            *(_QWORD *)(v126 + 40) = 0;
            if (!v128)
              goto LABEL_251;
LABEL_252:
            if ((v568 & 2) != 0)
            {
              v175 = v612;
              v176 = (uint64_t *)v612[2];
              v12 = (uint64_t)(v612 + 3);
              v177 = v612[3];
              if ((unint64_t)v176 >= v177)
              {
                v179 = (void **)(v612 + 1);
                v180 = v612[1];
                v181 = ((uint64_t)v176 - v180) >> 3;
                if ((unint64_t)(v181 + 1) >> 61)
                  sub_4074();
                v182 = v177 - v180;
                v183 = v182 >> 2;
                if (v182 >> 2 <= (unint64_t)(v181 + 1))
                  v183 = v181 + 1;
                if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8)
                  v184 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v184 = v183;
                if (v184)
                  v12 = (uint64_t)sub_40FC(v12, v184);
                else
                  v12 = 0;
                v253 = (uint64_t *)(v12 + 8 * v181);
                *v253 = v123;
                v178 = v253 + 1;
                v255 = (char *)v175[1];
                v254 = (char *)v175[2];
                if (v254 != v255)
                {
                  do
                  {
                    v256 = *((_QWORD *)v254 - 1);
                    v254 -= 8;
                    *--v253 = v256;
                  }
                  while (v254 != v255);
                  v254 = (char *)*v179;
                }
                v175[1] = v253;
                v175[2] = v178;
                v175[3] = v12 + 8 * v184;
                if (v254)
                  operator delete(v254);
              }
              else
              {
                *v176 = v123;
                v178 = v176 + 1;
              }
              v175[2] = v178;
              v257 = v612;
              v258 = (_DWORD *)v612[14];
              v259 = v612[15];
              if ((unint64_t)v258 >= v259)
              {
                v12 = v612[13];
                v261 = ((uint64_t)v258 - v12) >> 2;
                if ((unint64_t)(v261 + 1) >> 62)
                  sub_4074();
                v262 = v259 - v12;
                v263 = (uint64_t)(v259 - v12) >> 1;
                if (v263 <= v261 + 1)
                  v263 = v261 + 1;
                if (v262 >= 0x7FFFFFFFFFFFFFFCLL)
                  v264 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v264 = v263;
                if (v264)
                {
                  v265 = (char *)sub_43B2C((uint64_t)(v612 + 15), v264);
                  v12 = v257[13];
                  v258 = (_DWORD *)v257[14];
                }
                else
                {
                  v265 = 0;
                }
                v266 = &v265[4 * v261];
                *(_DWORD *)v266 = v125;
                v260 = v266 + 4;
                while (v258 != (_DWORD *)v12)
                {
                  v267 = *--v258;
                  *((_DWORD *)v266 - 1) = v267;
                  v266 -= 4;
                }
                v257[13] = v266;
                v257[14] = v260;
                v257[15] = &v265[4 * v264];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v258 = v125;
                v260 = v258 + 1;
              }
              v257[14] = v260;
              v268 = v612;
              v269 = (__int16 *)v612[20];
              v270 = v612[21];
              if ((unint64_t)v269 >= v270)
              {
                v12 = v612[19];
                v272 = (uint64_t)v269 - v12;
                if ((uint64_t)v269 - v12 <= -3)
                  sub_4074();
                v273 = v272 >> 1;
                v274 = v270 - v12;
                if (v274 <= (v272 >> 1) + 1)
                  v275 = v273 + 1;
                else
                  v275 = v274;
                if (v274 >= 0x7FFFFFFFFFFFFFFELL)
                  v276 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v276 = v275;
                if (v276)
                {
                  v277 = (char *)sub_43B60((uint64_t)(v612 + 21), v276);
                  v12 = v268[19];
                  v269 = (__int16 *)v268[20];
                }
                else
                {
                  v277 = 0;
                }
                v284 = (__int16 *)&v277[2 * v273];
                *v284 = v28;
                v271 = v284 + 1;
                while (v269 != (__int16 *)v12)
                {
                  v285 = *--v269;
                  *--v284 = v285;
                }
                v268[19] = v284;
                v268[20] = v271;
                v268[21] = &v277[2 * v276];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v269 = v28;
                v271 = v269 + 1;
              }
              v268[20] = v271;
              v286 = v612;
              v287 = (_DWORD *)v612[17];
              v288 = v612[18];
              if ((unint64_t)v287 >= v288)
              {
                v12 = v612[16];
                v290 = ((uint64_t)v287 - v12) >> 2;
                if ((unint64_t)(v290 + 1) >> 62)
                  sub_4074();
                v291 = v288 - v12;
                v292 = (uint64_t)(v288 - v12) >> 1;
                if (v292 <= v290 + 1)
                  v292 = v290 + 1;
                if (v291 >= 0x7FFFFFFFFFFFFFFCLL)
                  v293 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v293 = v292;
                if (v293)
                {
                  v294 = (char *)sub_43B2C((uint64_t)(v612 + 18), v293);
                  v12 = v286[16];
                  v287 = (_DWORD *)v286[17];
                }
                else
                {
                  v294 = 0;
                }
                v295 = &v294[4 * v290];
                *(_DWORD *)v295 = v27;
                v289 = v295 + 4;
                while (v287 != (_DWORD *)v12)
                {
                  v296 = *--v287;
                  *((_DWORD *)v295 - 1) = v296;
                  v295 -= 4;
                }
                v286[16] = v295;
                v286[17] = v289;
                v286[18] = &v294[4 * v293];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v287 = v27;
                v289 = v287 + 1;
              }
              v286[17] = v289;
              v297 = v612;
              v298 = (_QWORD *)v612[8];
              v299 = v612[9];
              if ((unint64_t)v298 >= v299)
              {
                v12 = v612[7];
                v301 = ((uint64_t)v298 - v12) >> 3;
                if ((unint64_t)(v301 + 1) >> 61)
                  sub_4074();
                v302 = v299 - v12;
                v303 = (uint64_t)(v299 - v12) >> 2;
                if (v303 <= v301 + 1)
                  v303 = v301 + 1;
                if (v302 >= 0x7FFFFFFFFFFFFFF8)
                  v304 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v304 = v303;
                if (v304)
                {
                  v305 = (char *)sub_40FC((uint64_t)(v612 + 9), v304);
                  v12 = v297[7];
                  v298 = (_QWORD *)v297[8];
                }
                else
                {
                  v305 = 0;
                }
                v306 = &v305[8 * v301];
                *(_QWORD *)v306 = v124;
                v300 = v306 + 8;
                while (v298 != (_QWORD *)v12)
                {
                  v307 = *--v298;
                  *((_QWORD *)v306 - 1) = v307;
                  v306 -= 8;
                }
                v297[7] = v306;
                v297[8] = v300;
                v297[9] = &v305[8 * v304];
                if (v12)
                  operator delete((void *)v12);
              }
              else
              {
                *v298 = v124;
                v300 = v298 + 1;
              }
              v297[8] = v300;
            }
            goto LABEL_856;
          case 0xC:
            if (v625 <= 7)
            {
              v30 = v566 + 56 * v625;
              if (*(_BYTE *)(v30 + 48))
              {
                v31 = 0;
                *(_QWORD *)(v30 + 8) = (((v612[3259] - v612[3258]) << 29) - 0x100000000) | (((v612[3256] - v612[3255]) >> 3)
                                                                                            - 1);
                *(_QWORD *)(v30 + 40) = 0;
                *(_WORD *)(v30 + 40) = WORD2(v625);
                v32 = a1 + 192;
                do
                {
                  if (*(_BYTE *)(v32 + 184) && *(_DWORD *)v32 == *(_DWORD *)(v30 + 24))
                    sub_13BEF4(a1, v612, v31, 1);
                  ++v31;
                  v32 += 224;
                }
                while (v31 != 152);
                v33 = 0;
                v34 = (_BYTE *)(a1 + 34688);
                do
                {
                  if (*v34 && *((_DWORD *)v34 - 2) == *(_DWORD *)(v30 + 24))
                    sub_B6964(a1, v612, v33);
                  ++v33;
                  v34 += 40;
                }
                while (v33 != 16);
                if ((v568 & 2) == 0)
                {
                  v35 = v612;
                  v36 = (_QWORD *)v612[2];
                  v37 = v612[3];
                  if ((unint64_t)v36 >= v37)
                  {
                    v326 = (void **)(v612 + 1);
                    v327 = v612[1];
                    v328 = ((uint64_t)v36 - v327) >> 3;
                    if ((unint64_t)(v328 + 1) >> 61)
                      sub_4074();
                    v329 = v37 - v327;
                    v330 = v329 >> 2;
                    if (v329 >> 2 <= (unint64_t)(v328 + 1))
                      v330 = v328 + 1;
                    if ((unint64_t)v329 >= 0x7FFFFFFFFFFFFFF8)
                      v331 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v331 = v330;
                    if (v331)
                      v332 = (char *)sub_40FC((uint64_t)(v612 + 3), v331);
                    else
                      v332 = 0;
                    v344 = &v332[8 * v328];
                    *(_QWORD *)v344 = *(_QWORD *)v30;
                    v38 = v344 + 8;
                    v346 = (char *)v35[1];
                    v345 = (char *)v35[2];
                    if (v345 != v346)
                    {
                      do
                      {
                        v347 = *((_QWORD *)v345 - 1);
                        v345 -= 8;
                        *((_QWORD *)v344 - 1) = v347;
                        v344 -= 8;
                      }
                      while (v345 != v346);
                      v345 = (char *)*v326;
                    }
                    v35[1] = v344;
                    v35[2] = v38;
                    v35[3] = &v332[8 * v331];
                    if (v345)
                      operator delete(v345);
                  }
                  else
                  {
                    *v36 = *(_QWORD *)v30;
                    v38 = v36 + 1;
                  }
                  v35[2] = v38;
                  v348 = v612;
                  v349 = (_QWORD *)v612[5];
                  v12 = (uint64_t)(v612 + 6);
                  v350 = v612[6];
                  if ((unint64_t)v349 >= v350)
                  {
                    v352 = (void **)(v612 + 4);
                    v353 = v612[4];
                    v354 = ((uint64_t)v349 - v353) >> 3;
                    if ((unint64_t)(v354 + 1) >> 61)
                      sub_4074();
                    v355 = v350 - v353;
                    v356 = v355 >> 2;
                    if (v355 >> 2 <= (unint64_t)(v354 + 1))
                      v356 = v354 + 1;
                    if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFF8)
                      v357 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v357 = v356;
                    if (v357)
                      v12 = (uint64_t)sub_40FC(v12, v357);
                    else
                      v12 = 0;
                    v358 = (_QWORD *)(v12 + 8 * v354);
                    *v358 = *(_QWORD *)(v30 + 8);
                    v351 = v358 + 1;
                    v360 = (char *)v348[4];
                    v359 = (char *)v348[5];
                    if (v359 != v360)
                    {
                      do
                      {
                        v361 = *((_QWORD *)v359 - 1);
                        v359 -= 8;
                        *--v358 = v361;
                      }
                      while (v359 != v360);
                      v359 = (char *)*v352;
                    }
                    v348[4] = v358;
                    v348[5] = v351;
                    v348[6] = v12 + 8 * v357;
                    if (v359)
                      operator delete(v359);
                  }
                  else
                  {
                    *v349 = *(_QWORD *)(v30 + 8);
                    v351 = v349 + 1;
                  }
                  v348[5] = v351;
                  v362 = v612;
                  v363 = (_DWORD *)v612[14];
                  v364 = v612[15];
                  if ((unint64_t)v363 >= v364)
                  {
                    v12 = v612[13];
                    v366 = ((uint64_t)v363 - v12) >> 2;
                    if ((unint64_t)(v366 + 1) >> 62)
                      sub_4074();
                    v367 = v364 - v12;
                    v368 = (uint64_t)(v364 - v12) >> 1;
                    if (v368 <= v366 + 1)
                      v368 = v366 + 1;
                    if (v367 >= 0x7FFFFFFFFFFFFFFCLL)
                      v369 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v369 = v368;
                    if (v369)
                    {
                      v370 = (char *)sub_43B2C((uint64_t)(v612 + 15), v369);
                      v12 = v362[13];
                      v363 = (_DWORD *)v362[14];
                    }
                    else
                    {
                      v370 = 0;
                    }
                    v371 = &v370[4 * v366];
                    *(_DWORD *)v371 = *(_DWORD *)(v30 + 24);
                    v365 = v371 + 4;
                    while (v363 != (_DWORD *)v12)
                    {
                      v372 = *--v363;
                      *((_DWORD *)v371 - 1) = v372;
                      v371 -= 4;
                    }
                    v362[13] = v371;
                    v362[14] = v365;
                    v362[15] = &v370[4 * v369];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v363 = *(_DWORD *)(v30 + 24);
                    v365 = v363 + 1;
                  }
                  v362[14] = v365;
                  v373 = v612;
                  v374 = (_WORD *)v612[20];
                  v375 = v612[21];
                  if ((unint64_t)v374 >= v375)
                  {
                    v12 = v612[19];
                    v377 = (uint64_t)v374 - v12;
                    if ((uint64_t)v374 - v12 <= -3)
                      sub_4074();
                    v378 = v377 >> 1;
                    v379 = v375 - v12;
                    if (v379 <= (v377 >> 1) + 1)
                      v380 = v378 + 1;
                    else
                      v380 = v379;
                    if (v379 >= 0x7FFFFFFFFFFFFFFELL)
                      v381 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v381 = v380;
                    if (v381)
                    {
                      v382 = (char *)sub_43B60((uint64_t)(v612 + 21), v381);
                      v12 = v373[19];
                      v374 = (_WORD *)v373[20];
                    }
                    else
                    {
                      v382 = 0;
                    }
                    v383 = &v382[2 * v378];
                    *(_WORD *)v383 = *(_WORD *)(v30 + 32);
                    v376 = v383 + 2;
                    while (v374 != (_WORD *)v12)
                    {
                      v384 = *--v374;
                      *((_WORD *)v383 - 1) = v384;
                      v383 -= 2;
                    }
                    v373[19] = v383;
                    v373[20] = v376;
                    v373[21] = &v382[2 * v381];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v374 = *(_WORD *)(v30 + 32);
                    v376 = v374 + 1;
                  }
                  v373[20] = v376;
                  v385 = v612;
                  v386 = (_DWORD *)v612[17];
                  v387 = v612[18];
                  if ((unint64_t)v386 >= v387)
                  {
                    v12 = v612[16];
                    v389 = ((uint64_t)v386 - v12) >> 2;
                    if ((unint64_t)(v389 + 1) >> 62)
                      sub_4074();
                    v390 = v387 - v12;
                    v391 = (uint64_t)(v387 - v12) >> 1;
                    if (v391 <= v389 + 1)
                      v391 = v389 + 1;
                    if (v390 >= 0x7FFFFFFFFFFFFFFCLL)
                      v392 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v392 = v391;
                    if (v392)
                    {
                      v393 = (char *)sub_43B2C((uint64_t)(v612 + 18), v392);
                      v12 = v385[16];
                      v386 = (_DWORD *)v385[17];
                    }
                    else
                    {
                      v393 = 0;
                    }
                    v394 = &v393[4 * v389];
                    *(_DWORD *)v394 = *(_DWORD *)(v30 + 28);
                    v388 = v394 + 4;
                    while (v386 != (_DWORD *)v12)
                    {
                      v395 = *--v386;
                      *((_DWORD *)v394 - 1) = v395;
                      v394 -= 4;
                    }
                    v385[16] = v394;
                    v385[17] = v388;
                    v385[18] = &v393[4 * v392];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v386 = *(_DWORD *)(v30 + 28);
                    v388 = v386 + 1;
                  }
                  v385[17] = v388;
                  v396 = v612;
                  v397 = (_QWORD *)v612[8];
                  v398 = v612[9];
                  if ((unint64_t)v397 >= v398)
                  {
                    v12 = v612[7];
                    v400 = ((uint64_t)v397 - v12) >> 3;
                    if ((unint64_t)(v400 + 1) >> 61)
                      sub_4074();
                    v401 = v398 - v12;
                    v402 = (uint64_t)(v398 - v12) >> 2;
                    if (v402 <= v400 + 1)
                      v402 = v400 + 1;
                    if (v401 >= 0x7FFFFFFFFFFFFFF8)
                      v403 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v403 = v402;
                    if (v403)
                    {
                      v404 = (char *)sub_40FC((uint64_t)(v612 + 9), v403);
                      v12 = v396[7];
                      v397 = (_QWORD *)v396[8];
                    }
                    else
                    {
                      v404 = 0;
                    }
                    v405 = &v404[8 * v400];
                    *(_QWORD *)v405 = *(_QWORD *)(v30 + 16);
                    v399 = v405 + 8;
                    while (v397 != (_QWORD *)v12)
                    {
                      v406 = *--v397;
                      *((_QWORD *)v405 - 1) = v406;
                      v405 -= 8;
                    }
                    v396[7] = v405;
                    v396[8] = v399;
                    v396[9] = &v404[8 * v403];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v397 = *(_QWORD *)(v30 + 16);
                    v399 = v397 + 1;
                  }
                  v396[8] = v399;
                  v407 = v612;
                  v408 = (_QWORD *)v612[11];
                  v409 = v612[12];
                  if ((unint64_t)v408 >= v409)
                  {
                    v12 = v612[10];
                    v411 = ((uint64_t)v408 - v12) >> 3;
                    if ((unint64_t)(v411 + 1) >> 61)
                      sub_4074();
                    v412 = v409 - v12;
                    v413 = (uint64_t)(v409 - v12) >> 2;
                    if (v413 <= v411 + 1)
                      v413 = v411 + 1;
                    if (v412 >= 0x7FFFFFFFFFFFFFF8)
                      v414 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v414 = v413;
                    if (v414)
                    {
                      v415 = (char *)sub_40FC((uint64_t)(v612 + 12), v414);
                      v12 = v407[10];
                      v408 = (_QWORD *)v407[11];
                    }
                    else
                    {
                      v415 = 0;
                    }
                    v416 = &v415[8 * v411];
                    *(_QWORD *)v416 = *(_QWORD *)(v30 + 40);
                    v410 = v416 + 8;
                    while (v408 != (_QWORD *)v12)
                    {
                      v417 = *--v408;
                      *((_QWORD *)v416 - 1) = v417;
                      v416 -= 8;
                    }
                    v407[10] = v416;
                    v407[11] = v410;
                    v407[12] = &v415[8 * v414];
                    if (v12)
                      operator delete((void *)v12);
                  }
                  else
                  {
                    *v408 = *(_QWORD *)(v30 + 40);
                    v410 = v408 + 1;
                  }
                  v407[11] = v410;
                }
                if (*(_BYTE *)(v30 + 48))
                  *(_BYTE *)(v30 + 48) = 0;
              }
            }
            goto LABEL_856;
          case 0xD:
            v88 = v567 + 40 * (v625 & 3);
            if (*(_BYTE *)(v88 + 32))
            {
              v89 = sub_11FD14();
              if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__s1 = 136315650;
                *(_QWORD *)&__s1[4] = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupp"
                                      "ort/AGXProfilingSupport/APS/AGXPSAPSParserGen1.cpp";
                *(_WORD *)&__s1[12] = 1024;
                *(_DWORD *)&__s1[14] = 1287;
                *(_WORD *)&__s1[18] = 2080;
                *(_QWORD *)&__s1[20] = "!currentTile.has_value()";
                _os_log_error_impl(&dword_0, v89, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", __s1, 0x1Cu);
              }
              v12 = sub_11FD04();
              if ((_DWORD)v12)
                v12 = sub_11FD0C();
            }
            v90 = v612[3256];
            v91 = v612[3255];
            v92 = v612[3259];
            v93 = v612[3258];
            v94 = *(_QWORD *)(a1 + 112);
            if (v94 == -1)
              v94 = 0;
            *(_QWORD *)(a1 + 112) = v94 + 1;
            if (!*(_BYTE *)(v88 + 32))
              *(_BYTE *)(v88 + 32) = 1;
            *(_QWORD *)v88 = (((v92 - v93) << 29) - 0x100000000) | (((unint64_t)(v90 - v91) >> 3)
                                                                    - 1);
            *(_QWORD *)(v88 + 16) = v94;
            *(_DWORD *)(v88 + 24) = -1;
            goto LABEL_856;
          case 0xE:
            sub_B6964(a1, v612, v625 & 3);
            goto LABEL_856;
          case 0xF:
            v56 = DWORD1(v625);
            if (DWORD1(v625) <= 7)
            {
              v57 = v562 + 12 * DWORD1(v625);
              *(_QWORD *)v57 = v625;
              *(_DWORD *)(v57 + 8) = DWORD2(v625);
              v58 = v56 - 4;
              if (v58 <= 2)
              {
                v59 = v567 + 40 * v58;
                if (*(_BYTE *)(v59 + 32))
                {
                  if (v625 <= 7)
                  {
                    v60 = v566 + 56 * v625;
                    if (*(_BYTE *)(v60 + 48))
                      *(_DWORD *)(v59 + 24) = *(_DWORD *)(v60 + 24);
                  }
                }
              }
            }
            goto LABEL_856;
          case 0x10:
            v611 = (v611 & 0xFFFFFFFFFFFF8000) + 0x8000;
            goto LABEL_856;
          default:
            goto LABEL_856;
        }
      }
      if (v561)
        *v561 = 2;
    }
    else
    {
      v577 = 0;
    }
LABEL_875:
    for (i = 0; i != 229; ++i)
    {
      v541 = v612;
      if (v612[3 * i + 97] != v612[3 * i + 98])
      {
        v12 = (uint64_t)sub_13C094(v12, i);
        v542 = v12;
        v543 = (uint64_t *)v541[3248];
        v544 = v541[3249];
        if ((unint64_t)v543 >= v544)
        {
          v546 = v541[3247];
          v547 = ((uint64_t)v543 - v546) >> 3;
          if ((unint64_t)(v547 + 1) >> 61)
            sub_4074();
          v548 = v544 - v546;
          v549 = v548 >> 2;
          if (v548 >> 2 <= (unint64_t)(v547 + 1))
            v549 = v547 + 1;
          if ((unint64_t)v548 >= 0x7FFFFFFFFFFFFFF8)
            v550 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v550 = v549;
          if (v550)
            v12 = (uint64_t)sub_40FC((uint64_t)(v541 + 3249), v550);
          else
            v12 = 0;
          v551 = (uint64_t *)(v12 + 8 * v547);
          *v551 = v542;
          v545 = v551 + 1;
          v552 = (char *)v541[3248];
          v553 = (char *)v541[3247];
          if (v552 != v553)
          {
            do
            {
              v554 = *((_QWORD *)v552 - 1);
              v552 -= 8;
              *--v551 = v554;
            }
            while (v552 != v553);
            v552 = (char *)v541[3247];
          }
          v541[3247] = v551;
          v541[3248] = v545;
          v541[3249] = v12 + 8 * v550;
          if (v552)
            operator delete(v552);
        }
        else
        {
          *v543 = v12;
          v545 = v543 + 1;
        }
        v541[3248] = v545;
      }
    }
    result = v612;
    v612[3250] = v577;
    result[3251] = v611;
  }
  else
  {
    result = 0;
    if (a5)
      *a5 = 1;
  }
  return result;
}

void sub_1239A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p)
{
  void *v10;

  operator delete(__p);
  operator delete(v10);
  _Unwind_Resume(a1);
}

#error "123A70: too big function (funcsize=0)"

void sub_13AEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_13BD08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void **v24;

  *(_QWORD *)a1 = off_723060;
  if (*(_QWORD *)(a1 + 128))
  {
    sub_F2D60();
    operator delete();
  }
  v2 = a1 + 41968;
  v3 = a1 + 49264;
  do
  {
    v4 = *(void ***)(v3 - 40);
    v5 = *(void ***)(v3 - 32);
    *(_QWORD *)(v3 - 8) = 0;
    v6 = (char *)v5 - (char *)v4;
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
    {
      do
      {
        operator delete(*v4);
        v5 = *(void ***)(v3 - 32);
        v4 = (void **)(*(_QWORD *)(v3 - 40) + 8);
        *(_QWORD *)(v3 - 40) = v4;
        v6 = (char *)v5 - (char *)v4;
      }
      while ((unint64_t)((char *)v5 - (char *)v4) > 0x10);
    }
    v7 = v6 >> 3;
    if (v7 == 1)
    {
      v8 = 256;
      goto LABEL_10;
    }
    if (v7 == 2)
    {
      v8 = 512;
LABEL_10:
      *(_QWORD *)(v3 - 16) = v8;
    }
    if (v4 != v5)
    {
      do
      {
        v9 = *v4++;
        operator delete(v9);
      }
      while (v4 != v5);
      v11 = *(_QWORD *)(v3 - 40);
      v10 = *(_QWORD *)(v3 - 32);
      if (v10 != v11)
        *(_QWORD *)(v3 - 32) = v10 + ((v11 - v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    v13 = *(void **)(v3 - 48);
    v3 -= 48;
    v12 = v13;
    if (v13)
      operator delete(v12);
  }
  while (v3 != v2);
  sub_93158(a1 + 41920);
  v14 = 0;
  v15 = a1 + 34024;
  do
  {
    if (*(_BYTE *)(a1 + 34200 + v14))
    {
      v16 = v15 + v14;
      v17 = *(void **)(v15 + v14 + 96);
      if (v17)
      {
        *(_QWORD *)(v16 + 104) = v17;
        operator delete(v17);
      }
      v18 = *(void **)(v16 + 72);
      if (v18)
      {
        *(_QWORD *)(v15 + v14 + 80) = v18;
        operator delete(v18);
      }
      v19 = v15 + v14;
      v20 = *(void **)(v15 + v14 + 48);
      if (v20)
      {
        *(_QWORD *)(v19 + 56) = v20;
        operator delete(v20);
      }
      v21 = *(void **)(v19 + 24);
      if (v21)
      {
        *(_QWORD *)(v15 + v14 + 32) = v21;
        operator delete(v21);
      }
      v22 = *(void **)(v15 + v14);
      if (v22)
      {
        *(_QWORD *)(v15 + v14 + 8) = v22;
        operator delete(v22);
      }
    }
    v14 -= 224;
  }
  while (v14 != -34048);
  v24 = (void **)(a1 + 136);
  std::vector<std::vector<ProfileEvent>>::__destroy_vector::operator()[abi:nn180100](&v24);
  return a1;
}

void sub_13BED0(uint64_t a1)
{
  sub_13BD08(a1);
  operator delete();
}

void sub_13BEF4(uint64_t a1, _QWORD *a2, unsigned int a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int64x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  if (a3 > 0x97)
    return;
  v4 = a1 + 224 * a3;
  if (!*(_BYTE *)(v4 + 376))
    return;
  v7 = v4 + 160;
  v8 = *(unsigned __int8 *)(v4 + 196);
  if (v8 >= 0x60)
  {
    if (v8 >= 0x68)
    {
      if (v8 < 0x98)
        goto LABEL_13;
    }
    else if (*(_BYTE *)(v7 + 215))
    {
      goto LABEL_13;
    }
  }
  v9 = a1 + 41968;
  v10 = (int64x2_t *)(a1 + 41968 + 48 * a3);
  if (v10[2].i64[1])
  {
    v11 = *(_QWORD *)(v9 + 48 * a3 + 32);
    v12 = *(_QWORD *)(*(_QWORD *)(v10->i64[1] + ((v11 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v11 & 0x1FF));
    if (*(_BYTE *)(v12 + 32))
    {
      sub_4601C(v10);
      if (*(_BYTE *)(v7 + 216))
      {
        *(_QWORD *)(v7 + 8) = (((a2[3259] - a2[3258]) << 29) - 0x100000000) | (((a2[3256] - a2[3255]) >> 3)
                                                                               - 1);
        *(_BYTE *)(v7 + 212) = a4;
      }
      sub_BF3A8(v12 + 40, v7);
      goto LABEL_14;
    }
  }
LABEL_13:
  *(_QWORD *)(v7 + 8) = (((a2[3259] - a2[3258]) << 29) - 0x100000000) | (((a2[3256] - a2[3255]) >> 3) - 1);
  *(_BYTE *)(v7 + 212) = a4;
  sub_442AC(a2, v7);
LABEL_14:
  if (*(_BYTE *)(v7 + 216))
  {
    v13 = *(void **)(v7 + 136);
    if (v13)
    {
      *(_QWORD *)(v7 + 144) = v13;
      operator delete(v13);
    }
    v14 = *(void **)(v7 + 112);
    if (v14)
    {
      *(_QWORD *)(v7 + 120) = v14;
      operator delete(v14);
    }
    v15 = *(void **)(v7 + 88);
    if (v15)
    {
      *(_QWORD *)(v7 + 96) = v15;
      operator delete(v15);
    }
    v16 = *(void **)(v7 + 64);
    if (v16)
    {
      *(_QWORD *)(v7 + 72) = v16;
      operator delete(v16);
    }
    v17 = *(void **)(v7 + 40);
    if (v17)
    {
      *(_QWORD *)(v7 + 48) = v17;
      operator delete(v17);
    }
    *(_BYTE *)(v7 + 216) = 0;
  }
}

const char *sub_13C094(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  char **v3;
  char **v4;

  v2 = a2 - 128;
  if (a2 < 0x80)
  {
    v3 = &off_7230B8[a2];
    return *v3;
  }
  if (v2 < 0x40)
  {
    v4 = off_7234B8;
LABEL_7:
    v3 = &v4[v2];
    return *v3;
  }
  v2 = a2 - 192;
  if (a2 - 192 < 0x25)
  {
    v4 = off_7236B8;
    goto LABEL_7;
  }
  return "Invalid";
}

uint64_t sub_13C0F0(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *a4 = 1;
  v4 = *a3 & 7;
  v5 = *a3 >> 3;
  if (v4 == 7)
    v6 = *(unsigned __int16 *)(a2 + v5) >> 7;
  else
    v6 = *(unsigned __int8 *)(a2 + v5) >> v4;
  return ((uint64_t (*)(void))((char *)sub_13C150 + 4 * byte_4A41EA[v6 & 3]))();
}

uint64_t sub_13C150(uint64_t result, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;

  *(_WORD *)(result + 8) = 3;
  *(_QWORD *)result = 0;
  v3 = *a3 + 2;
  v4 = v3 >> 3;
  v5 = v3 & 7;
  if (v5)
    v6 = (*(unsigned __int16 *)(a2 + v4) >> v5);
  else
    v6 = *(unsigned __int8 *)(a2 + v4);
  v7 = *(unsigned __int16 *)(result + 16) | v6;
  *(_WORD *)(result + 16) = v7;
  v8 = *a3;
  if (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 10) >> 3)) >> ((*(_BYTE *)a3 + 10) & 7)) & 1) != 0)
  {
    v9 = v8 + 11;
    v10 = (v8 + 11) & 7;
    v11 = v9 >> 3;
    if (v10 > 2)
      v12 = *(_WORD *)(a2 + v11);
    else
      v12 = *(unsigned __int8 *)(a2 + v11);
    v18 = (((v12 >> v10) & 0x3F) << 8) | v7;
    *(_WORD *)(result + 16) = v18;
    if (((*(unsigned __int8 *)(a2 + ((unint64_t)(*a3 + 17) >> 3)) >> ((*(_BYTE *)a3 + 17) & 7)) & 1) != 0)
      v19 = v18 | 0x4000;
    else
      v19 = v18 & 0xBFFF;
    *(_WORD *)(result + 16) = v19;
    v20 = 18;
  }
  else
  {
    v13 = v7 & 0xBFFF;
    *(_WORD *)(result + 16) = v13;
    v14 = *a3 + 11;
    v15 = v14 & 7;
    v16 = v14 >> 3;
    if (v15 > 4)
      v17 = *(_WORD *)(a2 + v16);
    else
      v17 = *(unsigned __int8 *)(a2 + v16);
    *(_WORD *)(result + 16) = (((v17 >> v15) & 0xF) << 8) | v13;
    v20 = 15;
  }
  *a3 += v20;
  return result;
}

void sub_1429E0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  int64x2_t *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  char v17;
  uint64_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;

  v2 = a1 + 41928;
  if (*(_QWORD *)(a1 + 41960))
  {
    v15 = a1 + 160;
    v5 = a1 + 41968;
    v6 = *(_QWORD *)(a1 + 41952);
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)v2 + ((v6 >> 1) & 0x7FFFFFFFFFFFFFF8));
      v8 = v6 & 0xF;
      v9 = (unsigned __int8 *)(v7 + 264 * (v6 & 0xF));
      if (!v9[32])
        break;
      v18 = a1;
      v16[0] = v9;
      v16[1] = &v18;
      v16[2] = a1;
      v16[3] = &v17;
      v10 = v7 + 264 * v8;
      if (*(_BYTE *)(v10 + 256))
      {
        sub_142C28((unint64_t)v16, v10 + 40);
        if (!*(_BYTE *)(v10 + 256))
          sub_70A0();
        sub_442AC(a2, v10 + 40);
      }
      else
      {
        v11 = *v9;
        if (v11 <= 0x97)
        {
          sub_142C28((unint64_t)v16, v15 + 224 * *v9);
          v12 = (int64x2_t *)(v5 + 48 * v11);
          if (v12[2].i64[1])
            goto LABEL_14;
          v13 = sub_11FD14();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v20 = "/Library/Caches/com.apple.xbs/Sources/GPUToolsDevice/Dependencies/AGXProfilingSupport/AGXProfilingSupp"
                  "ort/APS/AGXPSAPSParserGen1.cpp";
            v21 = 1024;
            v22 = 806;
            v23 = 2080;
            v24 = "!pendingPositionsForClique.empty()";
            _os_log_error_impl(&dword_0, v13, OS_LOG_TYPE_ERROR, "%s:%u: failed assertion: %s", buf, 0x1Cu);
          }
          if (sub_11FD04())
            sub_11FD0C();
          if (v12[2].i64[1])
LABEL_14:
            sub_4601C(v12);
        }
      }
      sub_B6870(*(_QWORD *)(*(_QWORD *)v2 + ((*(_QWORD *)(v2 + 24) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 264 * (*(_QWORD *)(v2 + 24) & 0xFLL));
      v14 = *(_QWORD *)(v2 + 32) - 1;
      v6 = *(_QWORD *)(v2 + 24) + 1;
      *(_QWORD *)(v2 + 24) = v6;
      *(_QWORD *)(v2 + 32) = v14;
      if (v6 >= 0x20)
      {
        operator delete(**(void ***)v2);
        *(_QWORD *)v2 += 8;
        v14 = *(_QWORD *)(v2 + 32);
        v6 = *(_QWORD *)(v2 + 24) - 16;
        *(_QWORD *)(v2 + 24) = v6;
      }
    }
    while (v14);
  }
}

unint64_t sub_142C28(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  int32x2_t v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint8x8_t v29;
  uint8x8_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 4);
  v5 = result;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(unsigned int *)(a2 + 208);
  switch((int)v3)
  {
    case 0:
      result = sub_142F1C(*(uint64_t **)(result + 8), *(_QWORD *)(v2 + 20), *(_DWORD *)(v2 + 28), v7, v3);
      v9 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      v10 = ((v8 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v8) << 54) | *(unsigned int *)(*(_QWORD *)v5 + 16);
      if (v7 <= 7)
      {
        *((_QWORD *)&v11 + 1) = ((v8 & 0x7FF) << 43) | ((HIDWORD(result) & 0x7FF) << 32) | (HIDWORD(v8) << 54) | *(unsigned int *)(*(_QWORD *)v5 + 16);
        *(_QWORD *)&v11 = v9 & 0xFFFFFFFF00000000;
        v12 = v6 + 16 * v7 + 39616;
        *(_DWORD *)v12 = v9;
        *(int32x2_t *)(v12 + 4) = vzip1_s32((int32x2_t)(v11 >> 32), (int32x2_t)v10);
        *(_BYTE *)(v12 + 12) = 1;
      }
      v14 = *(unsigned __int8 *)(a2 + 204);
      v13 = (_BYTE *)(a2 + 204);
      *(_QWORD *)(v13 - 28) = v10;
      *(_QWORD *)(v13 - 36) = v9;
      *(v13 - 20) = ((v8 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v14)
        goto LABEL_23;
      break;
    case 1:
      result = sub_142F1C(*(uint64_t **)(result + 8), *(_QWORD *)(v2 + 12), *(_DWORD *)(v2 + 20), v7, v3);
      v16 = 0;
      v17 = ((HIDWORD(result) & 0x7FF) << 32) | ((v15 & 0x7FF) << 43) | (HIDWORD(v15) << 54);
      if (v7 <= 7)
      {
        v18 = (_DWORD *)(v6 + 16 * v7 + 39616);
        if (*(_BYTE *)(v6 + 16 * v7 + 39628))
        {
          v19 = *(unsigned __int16 *)(*(_QWORD *)v5 + 8);
          v20 = vadd_s32(*(int32x2_t *)(v6 + 16 * v7 + 39620), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v19), (uint32x2_t)0xFFFFFFF8FFFFFFFCLL), (int8x8_t)0xF0000000FLL));
          v21 = *v18 + (v19 & 0xF);
          v16 = v21 | ((unint64_t)v20.u32[0] << 32);
          v17 = v20.u32[1] | (unint64_t)v17;
          *v18 = v21;
          *(int32x2_t *)(v6 + 16 * v7 + 39620) = v20;
        }
      }
      v22 = *(unsigned __int8 *)(a2 + 204);
      v13 = (_BYTE *)(a2 + 204);
      *(_QWORD *)(v13 - 28) = v17;
      *(_QWORD *)(v13 - 36) = v16;
      *(v13 - 20) = ((v15 & 0x40000000000) != 0) | (2 * result) & 0x3F;
      if (!v22)
        goto LABEL_23;
      break;
    case 2:
      v23 = *(_WORD *)(v2 + 8);
      LODWORD(v24) = ((*(_WORD *)(v2 + 12) & 0x7FF) << 20) | ((*(_WORD *)(v2 + 10) & 0x3FF) << 10) | v23 & 0x3FF;
      v25 = *(uint8x8_t *)(v2 + 15);
      v26 = *(uint8x8_t *)(v2 + 23);
      if ((*(_BYTE *)(v2 + 14) & 1) != 0)
      {
        v31 = v25.u8[0];
        v27.i64[0] = vdupq_n_s16(v25.u8[0]).u64[0];
        v27.i64[1] = vdupq_n_s16(v31 + 1).i64[1];
        *(int16x4_t *)v28.i8 = vadd_s16(vdup_n_s16(v26.u8[0]), (int16x4_t)0x3000200010000);
        v28.i64[1] = v28.i64[0];
      }
      else
      {
        v27 = vmovl_u8(v25);
        v28 = vmovl_u8(v26);
      }
      if (v7 <= 7)
      {
        v32 = v6 + 16 * v7 + 39744;
        *(_DWORD *)v32 = v23 & 0x3FF;
        *(int8x8_t *)(v32 + 4) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v24), (uint32x2_t)0xFFFFFFECFFFFFFF6), (int8x8_t)0x7FF000003FFLL);
        *(_BYTE *)(v32 + 12) = 1;
      }
      goto LABEL_22;
    case 3:
      LODWORD(v24) = *(unsigned __int8 *)(v2 + 8);
      v29 = *(uint8x8_t *)(v2 + 9);
      v30 = *(uint8x8_t *)(v2 + 17);
      if ((v24 & 1) != 0)
      {
        v33 = v29.u8[0];
        v27.i64[0] = vdupq_n_s16(v29.u8[0]).u64[0];
        v27.i64[1] = vdupq_n_s16(v33 + 1).i64[1];
        v24 = (uint64_t)&unk_4A4000;
        *(int16x4_t *)v28.i8 = vadd_s16(vdup_n_s16(v30.u8[0]), (int16x4_t)0x3000200010000);
        v28.i64[1] = v28.i64[0];
      }
      else
      {
        v27 = vmovl_u8(v29);
        v28 = vmovl_u8(v30);
      }
      if (v7 <= 7)
      {
        v24 = v6 + 16 * v7 + 39744;
        if (*(_BYTE *)(v6 + 16 * v7 + 39756))
          LODWORD(v24) = *(_DWORD *)v24 & 0x3FF | ((*(_DWORD *)(v6 + 16 * v7 + 39748) & 0x3FF) << 10) & 0x800FFFFF | ((*(_DWORD *)(v6 + 16 * v7 + 39752) & 0x7FF) << 20);
      }
LABEL_22:
      v34 = *(unsigned __int8 *)(a2 + 204);
      v13 = (_BYTE *)(a2 + 204);
      *(uint16x8_t *)(a2 + 168) = v27;
      *(uint16x8_t *)(a2 + 184) = v28;
      *(_DWORD *)(a2 + 200) = v24;
      if (!v34)
LABEL_23:
        *v13 = 1;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_142F1C@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned int *v9;
  NSObject *v11;

  v5 = *a1;
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 == 1)
    {
      v6 = HIDWORD(a2) & 0x1F;
      v7 = HIWORD(a2) >> 12;
      a5 = (HIWORD(a2) & 0xFFF & ~(-1 << v7)) + 1;
      if (a4 <= 7)
      {
        v8 = v5 + 16 * a4 + 39488;
        *(_DWORD *)v8 = a5;
        *(_QWORD *)(v8 + 4) = ((((unsigned __int16)(HIWORD(a2) & 0xFFF) >> v7) & ~(-1 << (a3 & 0xF))) + 1) | ((unint64_t)((((unsigned __int16)(HIWORD(a2) & 0xFFF) >> v7) >> (a3 & 0xF)) + 1) << 32);
        *(_BYTE *)(v8 + 12) = 1;
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
  }
  else
  {
    v6 = HIDWORD(a2) & 0x1F;
    if (a4 <= 7)
    {
      v9 = (unsigned int *)(v5 + 16 * a4 + 39488);
      if (*((_BYTE *)v9 + 12))
      {
        a5 = *v9;
      }
      else
      {
        v11 = sub_11FD14();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          sub_1A73D0(v11);
        if (sub_11FD04())
          sub_11FD0C();
      }
    }
  }
  return v6 | (unint64_t)(a5 << 32);
}

void sub_143024(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  _QWORD *v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  _QWORD *v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t *v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  _QWORD *v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  unint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  char *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  _QWORD *v190;
  uint64_t v191;
  char *v192;
  unint64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  _QWORD *v212;
  uint64_t v213;
  char *v214;
  unint64_t v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  unint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  _QWORD *v234;
  uint64_t v235;
  char *v236;
  unint64_t v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  unint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  _QWORD *v256;
  uint64_t v257;
  char *v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  unint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  char *v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  _QWORD *v278;
  uint64_t v279;
  char *v280;
  unint64_t v281;
  char *v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  char *v287;
  unint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  char *v294;
  char *v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t *v302;
  unint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  char *v309;
  unint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  char *v316;
  uint64_t *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  _QWORD *v322;
  uint64_t v323;
  char *v324;
  unint64_t v325;
  char *v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  char *v331;
  unint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  char *v338;
  char *v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  _QWORD *v344;
  uint64_t v345;
  char *v346;
  unint64_t v347;
  char *v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  char *v353;
  unint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  char *v360;
  char *v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  _QWORD *v366;
  uint64_t v367;
  char *v368;
  unint64_t v369;
  char *v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  char *v375;
  unint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  char *v382;
  char *v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  _QWORD *v388;
  uint64_t v389;
  char *v390;
  unint64_t v391;
  char *v392;
  uint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  char *v397;
  unint64_t v398;
  _QWORD *v399;
  uint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  char *v404;
  char *v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  int v409;
  _QWORD *v410;
  uint64_t v411;
  char *v412;
  unint64_t v413;
  char *v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  char *v419;
  unint64_t v420;
  _QWORD *v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  char *v426;
  char *v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  _QWORD *v432;
  uint64_t v433;
  char *v434;
  unint64_t v435;
  char *v436;
  uint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  char *v441;
  unint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  char *v448;
  char *v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  _QWORD *v454;
  uint64_t v455;
  char *v456;
  unint64_t v457;
  char *v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  char *v463;
  unint64_t v464;
  _QWORD *v465;
  uint64_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  char *v470;
  char *v471;
  char *v472;
  uint64_t v473;
  uint64_t v474;
  int v475;
  uint64_t v476;
  _QWORD *v477;
  unint64_t v478;
  unint64_t *v479;
  unint64_t v480;
  unint64_t *v481;
  uint64_t v482;
  unint64_t v483;
  unint64_t v484;
  unint64_t v485;
  char *v486;
  uint64_t v487;
  unint64_t v488;
  _QWORD *v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  char *v494;
  unint64_t *v495;
  char *v496;
  unint64_t v497;
  unint64_t v498;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 58) & 0x3FFF;
      v8 = (char *)v6[530];
      v24 = v6[531];
      if ((unint64_t)v8 >= v24)
      {
        v10 = (char *)v6[529];
        v26 = (v8 - v10) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          goto LABEL_712;
        v27 = v24 - (_QWORD)v10;
        v28 = (uint64_t)(v24 - (_QWORD)v10) >> 2;
        if (v28 <= v26 + 1)
          v28 = v26 + 1;
        if (v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
        {
          v30 = (char *)sub_40FC((uint64_t)(v6 + 531), v29);
          v8 = (char *)v6[530];
          v10 = (char *)v6[529];
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[8 * v26];
        v32 = &v30[8 * v29];
        *(_QWORD *)v31 = v7;
        v25 = v31 + 8;
        while (v8 != v10)
        {
          v34 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v31 - 1) = v34;
          v31 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 58) & 0x3FFF;
      v8 = (char *)v6[530];
      v9 = v6[531];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[529];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_712;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 531), v14);
          v8 = (char *)v6[530];
          v10 = (char *)v6[529];
        }
        else
        {
          v15 = 0;
        }
        v31 = &v15[8 * v11];
        v32 = &v15[8 * v14];
        *(_QWORD *)v31 = v7;
        v25 = v31 + 8;
        while (v8 != v10)
        {
          v33 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v31 - 1) = v33;
          v31 -= 8;
        }
LABEL_35:
        v6[529] = v31;
        v6[530] = v25;
        v6[531] = v32;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v25 = v8 + 8;
LABEL_37:
    v6[530] = v25;
LABEL_38:
    v35 = 1 << *(_DWORD *)(v3 + 48);
    if (v35 == 2)
    {
      v36 = *(_QWORD **)a1[1];
      v37 = *(_WORD *)(a1[2] + 40) & 0x3FFF;
      v38 = (char *)v36[533];
      v46 = v36[534];
      if ((unint64_t)v38 >= v46)
      {
        v40 = (char *)v36[532];
        v48 = (v38 - v40) >> 3;
        if ((unint64_t)(v48 + 1) >> 61)
          goto LABEL_712;
        v49 = v46 - (_QWORD)v40;
        v50 = (uint64_t)(v46 - (_QWORD)v40) >> 2;
        if (v50 <= v48 + 1)
          v50 = v48 + 1;
        if (v49 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        if (v51)
        {
          v52 = (char *)sub_40FC((uint64_t)(v36 + 534), v51);
          v38 = (char *)v36[533];
          v40 = (char *)v36[532];
        }
        else
        {
          v52 = 0;
        }
        v53 = &v52[8 * v48];
        v54 = &v52[8 * v51];
        *(_QWORD *)v53 = v37;
        v47 = v53 + 8;
        while (v38 != v40)
        {
          v56 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *((_QWORD *)v53 - 1) = v56;
          v53 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v35 != 1)
        goto LABEL_70;
      v36 = *(_QWORD **)a1[1];
      v37 = *(_WORD *)(a1[2] + 40) & 0x3FFF;
      v38 = (char *)v36[533];
      v39 = v36[534];
      if ((unint64_t)v38 >= v39)
      {
        v40 = (char *)v36[532];
        v41 = (v38 - v40) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          goto LABEL_712;
        v42 = v39 - (_QWORD)v40;
        v43 = (uint64_t)(v39 - (_QWORD)v40) >> 2;
        if (v43 <= v41 + 1)
          v43 = v41 + 1;
        if (v42 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
        {
          v45 = (char *)sub_40FC((uint64_t)(v36 + 534), v44);
          v38 = (char *)v36[533];
          v40 = (char *)v36[532];
        }
        else
        {
          v45 = 0;
        }
        v53 = &v45[8 * v41];
        v54 = &v45[8 * v44];
        *(_QWORD *)v53 = v37;
        v47 = v53 + 8;
        while (v38 != v40)
        {
          v55 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *((_QWORD *)v53 - 1) = v55;
          v53 -= 8;
        }
LABEL_67:
        v36[532] = v53;
        v36[533] = v47;
        v36[534] = v54;
        if (v40)
          operator delete(v40);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v38 = v37;
    v47 = v38 + 8;
LABEL_69:
    v36[533] = v47;
LABEL_70:
    v57 = 1 << *(_DWORD *)(v3 + 48);
    if (v57 == 2)
    {
      v58 = *(_QWORD **)a1[1];
      v59 = *(_WORD *)(a1[2] + 60) & 0x3FFF;
      v60 = (char *)v58[536];
      v68 = v58[537];
      if ((unint64_t)v60 >= v68)
      {
        v62 = (char *)v58[535];
        v70 = (v60 - v62) >> 3;
        if ((unint64_t)(v70 + 1) >> 61)
          goto LABEL_712;
        v71 = v68 - (_QWORD)v62;
        v72 = (uint64_t)(v68 - (_QWORD)v62) >> 2;
        if (v72 <= v70 + 1)
          v72 = v70 + 1;
        if (v71 >= 0x7FFFFFFFFFFFFFF8)
          v73 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v73 = v72;
        if (v73)
        {
          v74 = (char *)sub_40FC((uint64_t)(v58 + 537), v73);
          v60 = (char *)v58[536];
          v62 = (char *)v58[535];
        }
        else
        {
          v74 = 0;
        }
        v75 = &v74[8 * v70];
        v76 = &v74[8 * v73];
        *(_QWORD *)v75 = v59;
        v69 = v75 + 8;
        while (v60 != v62)
        {
          v78 = *((_QWORD *)v60 - 1);
          v60 -= 8;
          *((_QWORD *)v75 - 1) = v78;
          v75 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v57 != 1)
        goto LABEL_102;
      v58 = *(_QWORD **)a1[1];
      v59 = *(_WORD *)(a1[2] + 60) & 0x3FFF;
      v60 = (char *)v58[536];
      v61 = v58[537];
      if ((unint64_t)v60 >= v61)
      {
        v62 = (char *)v58[535];
        v63 = (v60 - v62) >> 3;
        if ((unint64_t)(v63 + 1) >> 61)
          goto LABEL_712;
        v64 = v61 - (_QWORD)v62;
        v65 = (uint64_t)(v61 - (_QWORD)v62) >> 2;
        if (v65 <= v63 + 1)
          v65 = v63 + 1;
        if (v64 >= 0x7FFFFFFFFFFFFFF8)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v65;
        if (v66)
        {
          v67 = (char *)sub_40FC((uint64_t)(v58 + 537), v66);
          v60 = (char *)v58[536];
          v62 = (char *)v58[535];
        }
        else
        {
          v67 = 0;
        }
        v75 = &v67[8 * v63];
        v76 = &v67[8 * v66];
        *(_QWORD *)v75 = v59;
        v69 = v75 + 8;
        while (v60 != v62)
        {
          v77 = *((_QWORD *)v60 - 1);
          v60 -= 8;
          *((_QWORD *)v75 - 1) = v77;
          v75 -= 8;
        }
LABEL_99:
        v58[535] = v75;
        v58[536] = v69;
        v58[537] = v76;
        if (v62)
          operator delete(v62);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v60 = v59;
    v69 = v60 + 8;
LABEL_101:
    v58[536] = v69;
LABEL_102:
    v79 = 1 << *(_DWORD *)(v3 + 48);
    if (v79 == 2)
    {
      v80 = *(_QWORD **)a1[1];
      v81 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      v82 = (char *)v80[539];
      v90 = v80[540];
      if ((unint64_t)v82 >= v90)
      {
        v84 = (char *)v80[538];
        v92 = (v82 - v84) >> 3;
        if ((unint64_t)(v92 + 1) >> 61)
          goto LABEL_712;
        v93 = v90 - (_QWORD)v84;
        v94 = (uint64_t)(v90 - (_QWORD)v84) >> 2;
        if (v94 <= v92 + 1)
          v94 = v92 + 1;
        if (v93 >= 0x7FFFFFFFFFFFFFF8)
          v95 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v95 = v94;
        if (v95)
        {
          v96 = (char *)sub_40FC((uint64_t)(v80 + 540), v95);
          v82 = (char *)v80[539];
          v84 = (char *)v80[538];
        }
        else
        {
          v96 = 0;
        }
        v97 = &v96[8 * v92];
        v98 = &v96[8 * v95];
        *(_QWORD *)v97 = v81;
        v91 = v97 + 8;
        while (v82 != v84)
        {
          v100 = *((_QWORD *)v82 - 1);
          v82 -= 8;
          *((_QWORD *)v97 - 1) = v100;
          v97 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v79 != 1)
        goto LABEL_134;
      v80 = *(_QWORD **)a1[1];
      v81 = *(_WORD *)(a1[2] + 42) & 0x3FFF;
      v82 = (char *)v80[539];
      v83 = v80[540];
      if ((unint64_t)v82 >= v83)
      {
        v84 = (char *)v80[538];
        v85 = (v82 - v84) >> 3;
        if ((unint64_t)(v85 + 1) >> 61)
          goto LABEL_712;
        v86 = v83 - (_QWORD)v84;
        v87 = (uint64_t)(v83 - (_QWORD)v84) >> 2;
        if (v87 <= v85 + 1)
          v87 = v85 + 1;
        if (v86 >= 0x7FFFFFFFFFFFFFF8)
          v88 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v88 = v87;
        if (v88)
        {
          v89 = (char *)sub_40FC((uint64_t)(v80 + 540), v88);
          v82 = (char *)v80[539];
          v84 = (char *)v80[538];
        }
        else
        {
          v89 = 0;
        }
        v97 = &v89[8 * v85];
        v98 = &v89[8 * v88];
        *(_QWORD *)v97 = v81;
        v91 = v97 + 8;
        while (v82 != v84)
        {
          v99 = *((_QWORD *)v82 - 1);
          v82 -= 8;
          *((_QWORD *)v97 - 1) = v99;
          v97 -= 8;
        }
LABEL_131:
        v80[538] = v97;
        v80[539] = v91;
        v80[540] = v98;
        if (v84)
          operator delete(v84);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v82 = v81;
    v91 = v82 + 8;
LABEL_133:
    v80[539] = v91;
LABEL_134:
    v101 = 1 << *(_DWORD *)(v3 + 48);
    if (v101 == 2)
    {
      v102 = *(_QWORD **)a1[1];
      v103 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
      v104 = (char *)v102[542];
      v112 = v102[543];
      if ((unint64_t)v104 >= v112)
      {
        v106 = (char *)v102[541];
        v114 = (v104 - v106) >> 3;
        if ((unint64_t)(v114 + 1) >> 61)
          goto LABEL_712;
        v115 = v112 - (_QWORD)v106;
        v116 = (uint64_t)(v112 - (_QWORD)v106) >> 2;
        if (v116 <= v114 + 1)
          v116 = v114 + 1;
        if (v115 >= 0x7FFFFFFFFFFFFFF8)
          v117 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v117 = v116;
        if (v117)
        {
          v118 = (char *)sub_40FC((uint64_t)(v102 + 543), v117);
          v104 = (char *)v102[542];
          v106 = (char *)v102[541];
        }
        else
        {
          v118 = 0;
        }
        v119 = &v118[8 * v114];
        v120 = &v118[8 * v117];
        *(_QWORD *)v119 = v103;
        v113 = v119 + 8;
        while (v104 != v106)
        {
          v122 = *((_QWORD *)v104 - 1);
          v104 -= 8;
          *((_QWORD *)v119 - 1) = v122;
          v119 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v101 != 1)
        goto LABEL_166;
      v102 = *(_QWORD **)a1[1];
      v103 = *(_WORD *)(a1[2] + 62) & 0x3FFF;
      v104 = (char *)v102[542];
      v105 = v102[543];
      if ((unint64_t)v104 >= v105)
      {
        v106 = (char *)v102[541];
        v107 = (v104 - v106) >> 3;
        if ((unint64_t)(v107 + 1) >> 61)
          goto LABEL_712;
        v108 = v105 - (_QWORD)v106;
        v109 = (uint64_t)(v105 - (_QWORD)v106) >> 2;
        if (v109 <= v107 + 1)
          v109 = v107 + 1;
        if (v108 >= 0x7FFFFFFFFFFFFFF8)
          v110 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v110 = v109;
        if (v110)
        {
          v111 = (char *)sub_40FC((uint64_t)(v102 + 543), v110);
          v104 = (char *)v102[542];
          v106 = (char *)v102[541];
        }
        else
        {
          v111 = 0;
        }
        v119 = &v111[8 * v107];
        v120 = &v111[8 * v110];
        *(_QWORD *)v119 = v103;
        v113 = v119 + 8;
        while (v104 != v106)
        {
          v121 = *((_QWORD *)v104 - 1);
          v104 -= 8;
          *((_QWORD *)v119 - 1) = v121;
          v119 -= 8;
        }
LABEL_163:
        v102[541] = v119;
        v102[542] = v113;
        v102[543] = v120;
        if (v106)
          operator delete(v106);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v104 = v103;
    v113 = v104 + 8;
LABEL_165:
    v102[542] = v113;
LABEL_166:
    v123 = 1 << *(_DWORD *)(v3 + 48);
    if (v123 == 2)
    {
      v124 = *(_QWORD **)a1[1];
      v125 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      v126 = (char *)v124[545];
      v134 = v124[546];
      if ((unint64_t)v126 >= v134)
      {
        v128 = (char *)v124[544];
        v136 = (v126 - v128) >> 3;
        if ((unint64_t)(v136 + 1) >> 61)
          goto LABEL_712;
        v137 = v134 - (_QWORD)v128;
        v138 = (uint64_t)(v134 - (_QWORD)v128) >> 2;
        if (v138 <= v136 + 1)
          v138 = v136 + 1;
        if (v137 >= 0x7FFFFFFFFFFFFFF8)
          v139 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v139 = v138;
        if (v139)
        {
          v140 = (char *)sub_40FC((uint64_t)(v124 + 546), v139);
          v126 = (char *)v124[545];
          v128 = (char *)v124[544];
        }
        else
        {
          v140 = 0;
        }
        v141 = &v140[8 * v136];
        v142 = &v140[8 * v139];
        *(_QWORD *)v141 = v125;
        v135 = v141 + 8;
        while (v126 != v128)
        {
          v144 = *((_QWORD *)v126 - 1);
          v126 -= 8;
          *((_QWORD *)v141 - 1) = v144;
          v141 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v123 != 1)
        goto LABEL_198;
      v124 = *(_QWORD **)a1[1];
      v125 = *(_WORD *)(a1[2] + 44) & 0x3FFF;
      v126 = (char *)v124[545];
      v127 = v124[546];
      if ((unint64_t)v126 >= v127)
      {
        v128 = (char *)v124[544];
        v129 = (v126 - v128) >> 3;
        if ((unint64_t)(v129 + 1) >> 61)
          goto LABEL_712;
        v130 = v127 - (_QWORD)v128;
        v131 = (uint64_t)(v127 - (_QWORD)v128) >> 2;
        if (v131 <= v129 + 1)
          v131 = v129 + 1;
        if (v130 >= 0x7FFFFFFFFFFFFFF8)
          v132 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v132 = v131;
        if (v132)
        {
          v133 = (char *)sub_40FC((uint64_t)(v124 + 546), v132);
          v126 = (char *)v124[545];
          v128 = (char *)v124[544];
        }
        else
        {
          v133 = 0;
        }
        v141 = &v133[8 * v129];
        v142 = &v133[8 * v132];
        *(_QWORD *)v141 = v125;
        v135 = v141 + 8;
        while (v126 != v128)
        {
          v143 = *((_QWORD *)v126 - 1);
          v126 -= 8;
          *((_QWORD *)v141 - 1) = v143;
          v141 -= 8;
        }
LABEL_195:
        v124[544] = v141;
        v124[545] = v135;
        v124[546] = v142;
        if (v128)
          operator delete(v128);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v126 = v125;
    v135 = v126 + 8;
LABEL_197:
    v124[545] = v135;
LABEL_198:
    v145 = 1 << *(_DWORD *)(v3 + 48);
    if (v145 == 2)
    {
      v146 = *(_QWORD **)a1[1];
      v147 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      v148 = (uint64_t *)v146[548];
      v156 = v146[549];
      if ((unint64_t)v148 >= v156)
      {
        v150 = (uint64_t *)v146[547];
        v158 = v148 - v150;
        if ((unint64_t)(v158 + 1) >> 61)
          goto LABEL_712;
        v159 = v156 - (_QWORD)v150;
        v160 = (uint64_t)(v156 - (_QWORD)v150) >> 2;
        if (v160 <= v158 + 1)
          v160 = v158 + 1;
        if (v159 >= 0x7FFFFFFFFFFFFFF8)
          v161 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v161 = v160;
        if (v161)
        {
          v162 = (char *)sub_40FC((uint64_t)(v146 + 549), v161);
          v148 = (uint64_t *)v146[548];
          v150 = (uint64_t *)v146[547];
        }
        else
        {
          v162 = 0;
        }
        v163 = (uint64_t *)&v162[8 * v158];
        v164 = &v162[8 * v161];
        *v163 = v147;
        v157 = v163 + 1;
        while (v148 != v150)
        {
          v166 = *--v148;
          *--v163 = v166;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v145 != 1)
        goto LABEL_230;
      v146 = *(_QWORD **)a1[1];
      v147 = *(_DWORD *)(a1[2] + 28) & 0x3FFFFLL;
      v148 = (uint64_t *)v146[548];
      v149 = v146[549];
      if ((unint64_t)v148 >= v149)
      {
        v150 = (uint64_t *)v146[547];
        v151 = v148 - v150;
        if ((unint64_t)(v151 + 1) >> 61)
          goto LABEL_712;
        v152 = v149 - (_QWORD)v150;
        v153 = (uint64_t)(v149 - (_QWORD)v150) >> 2;
        if (v153 <= v151 + 1)
          v153 = v151 + 1;
        if (v152 >= 0x7FFFFFFFFFFFFFF8)
          v154 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v154 = v153;
        if (v154)
        {
          v155 = (char *)sub_40FC((uint64_t)(v146 + 549), v154);
          v148 = (uint64_t *)v146[548];
          v150 = (uint64_t *)v146[547];
        }
        else
        {
          v155 = 0;
        }
        v163 = (uint64_t *)&v155[8 * v151];
        v164 = &v155[8 * v154];
        *v163 = v147;
        v157 = v163 + 1;
        while (v148 != v150)
        {
          v165 = *--v148;
          *--v163 = v165;
        }
LABEL_227:
        v146[547] = v163;
        v146[548] = v157;
        v146[549] = v164;
        if (v150)
          operator delete(v150);
        goto LABEL_229;
      }
    }
    *v148 = v147;
    v157 = v148 + 1;
LABEL_229:
    v146[548] = v157;
LABEL_230:
    v167 = 1 << *(_DWORD *)(v3 + 48);
    if (v167 == 2)
    {
      v168 = *(_QWORD **)a1[1];
      v169 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
      v170 = (char *)v168[551];
      v178 = v168[552];
      if ((unint64_t)v170 >= v178)
      {
        v172 = (char *)v168[550];
        v180 = (v170 - v172) >> 3;
        if ((unint64_t)(v180 + 1) >> 61)
          goto LABEL_712;
        v181 = v178 - (_QWORD)v172;
        v182 = (uint64_t)(v178 - (_QWORD)v172) >> 2;
        if (v182 <= v180 + 1)
          v182 = v180 + 1;
        if (v181 >= 0x7FFFFFFFFFFFFFF8)
          v183 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v183 = v182;
        if (v183)
        {
          v184 = (char *)sub_40FC((uint64_t)(v168 + 552), v183);
          v170 = (char *)v168[551];
          v172 = (char *)v168[550];
        }
        else
        {
          v184 = 0;
        }
        v185 = &v184[8 * v180];
        v186 = &v184[8 * v183];
        *(_QWORD *)v185 = v169;
        v179 = v185 + 8;
        while (v170 != v172)
        {
          v188 = *((_QWORD *)v170 - 1);
          v170 -= 8;
          *((_QWORD *)v185 - 1) = v188;
          v185 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v167 != 1)
        goto LABEL_262;
      v168 = *(_QWORD **)a1[1];
      v169 = *(_WORD *)(a1[2] + 52) & 0x3FFF;
      v170 = (char *)v168[551];
      v171 = v168[552];
      if ((unint64_t)v170 >= v171)
      {
        v172 = (char *)v168[550];
        v173 = (v170 - v172) >> 3;
        if ((unint64_t)(v173 + 1) >> 61)
          goto LABEL_712;
        v174 = v171 - (_QWORD)v172;
        v175 = (uint64_t)(v171 - (_QWORD)v172) >> 2;
        if (v175 <= v173 + 1)
          v175 = v173 + 1;
        if (v174 >= 0x7FFFFFFFFFFFFFF8)
          v176 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v176 = v175;
        if (v176)
        {
          v177 = (char *)sub_40FC((uint64_t)(v168 + 552), v176);
          v170 = (char *)v168[551];
          v172 = (char *)v168[550];
        }
        else
        {
          v177 = 0;
        }
        v185 = &v177[8 * v173];
        v186 = &v177[8 * v176];
        *(_QWORD *)v185 = v169;
        v179 = v185 + 8;
        while (v170 != v172)
        {
          v187 = *((_QWORD *)v170 - 1);
          v170 -= 8;
          *((_QWORD *)v185 - 1) = v187;
          v185 -= 8;
        }
LABEL_259:
        v168[550] = v185;
        v168[551] = v179;
        v168[552] = v186;
        if (v172)
          operator delete(v172);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v170 = v169;
    v179 = v170 + 8;
LABEL_261:
    v168[551] = v179;
LABEL_262:
    v189 = 1 << *(_DWORD *)(v3 + 48);
    if (v189 == 2)
    {
      v190 = *(_QWORD **)a1[1];
      v191 = *(_WORD *)(a1[2] + 34) & 0x3FFF;
      v192 = (char *)v190[554];
      v200 = v190[555];
      if ((unint64_t)v192 >= v200)
      {
        v194 = (char *)v190[553];
        v202 = (v192 - v194) >> 3;
        if ((unint64_t)(v202 + 1) >> 61)
          goto LABEL_712;
        v203 = v200 - (_QWORD)v194;
        v204 = (uint64_t)(v200 - (_QWORD)v194) >> 2;
        if (v204 <= v202 + 1)
          v204 = v202 + 1;
        if (v203 >= 0x7FFFFFFFFFFFFFF8)
          v205 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v205 = v204;
        if (v205)
        {
          v206 = (char *)sub_40FC((uint64_t)(v190 + 555), v205);
          v192 = (char *)v190[554];
          v194 = (char *)v190[553];
        }
        else
        {
          v206 = 0;
        }
        v207 = &v206[8 * v202];
        v208 = &v206[8 * v205];
        *(_QWORD *)v207 = v191;
        v201 = v207 + 8;
        while (v192 != v194)
        {
          v210 = *((_QWORD *)v192 - 1);
          v192 -= 8;
          *((_QWORD *)v207 - 1) = v210;
          v207 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v189 != 1)
        goto LABEL_294;
      v190 = *(_QWORD **)a1[1];
      v191 = *(_WORD *)(a1[2] + 34) & 0x3FFF;
      v192 = (char *)v190[554];
      v193 = v190[555];
      if ((unint64_t)v192 >= v193)
      {
        v194 = (char *)v190[553];
        v195 = (v192 - v194) >> 3;
        if ((unint64_t)(v195 + 1) >> 61)
          goto LABEL_712;
        v196 = v193 - (_QWORD)v194;
        v197 = (uint64_t)(v193 - (_QWORD)v194) >> 2;
        if (v197 <= v195 + 1)
          v197 = v195 + 1;
        if (v196 >= 0x7FFFFFFFFFFFFFF8)
          v198 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v198 = v197;
        if (v198)
        {
          v199 = (char *)sub_40FC((uint64_t)(v190 + 555), v198);
          v192 = (char *)v190[554];
          v194 = (char *)v190[553];
        }
        else
        {
          v199 = 0;
        }
        v207 = &v199[8 * v195];
        v208 = &v199[8 * v198];
        *(_QWORD *)v207 = v191;
        v201 = v207 + 8;
        while (v192 != v194)
        {
          v209 = *((_QWORD *)v192 - 1);
          v192 -= 8;
          *((_QWORD *)v207 - 1) = v209;
          v207 -= 8;
        }
LABEL_291:
        v190[553] = v207;
        v190[554] = v201;
        v190[555] = v208;
        if (v194)
          operator delete(v194);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v192 = v191;
    v201 = v192 + 8;
LABEL_293:
    v190[554] = v201;
LABEL_294:
    v211 = 1 << *(_DWORD *)(v3 + 48);
    if (v211 == 2)
    {
      v212 = *(_QWORD **)a1[1];
      v213 = *(_WORD *)(a1[2] + 54) & 0x3FFF;
      v214 = (char *)v212[557];
      v222 = v212[558];
      if ((unint64_t)v214 >= v222)
      {
        v216 = (char *)v212[556];
        v224 = (v214 - v216) >> 3;
        if ((unint64_t)(v224 + 1) >> 61)
          goto LABEL_712;
        v225 = v222 - (_QWORD)v216;
        v226 = (uint64_t)(v222 - (_QWORD)v216) >> 2;
        if (v226 <= v224 + 1)
          v226 = v224 + 1;
        if (v225 >= 0x7FFFFFFFFFFFFFF8)
          v227 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v227 = v226;
        if (v227)
        {
          v228 = (char *)sub_40FC((uint64_t)(v212 + 558), v227);
          v214 = (char *)v212[557];
          v216 = (char *)v212[556];
        }
        else
        {
          v228 = 0;
        }
        v229 = &v228[8 * v224];
        v230 = &v228[8 * v227];
        *(_QWORD *)v229 = v213;
        v223 = v229 + 8;
        while (v214 != v216)
        {
          v232 = *((_QWORD *)v214 - 1);
          v214 -= 8;
          *((_QWORD *)v229 - 1) = v232;
          v229 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v211 != 1)
        goto LABEL_326;
      v212 = *(_QWORD **)a1[1];
      v213 = *(_WORD *)(a1[2] + 54) & 0x3FFF;
      v214 = (char *)v212[557];
      v215 = v212[558];
      if ((unint64_t)v214 >= v215)
      {
        v216 = (char *)v212[556];
        v217 = (v214 - v216) >> 3;
        if ((unint64_t)(v217 + 1) >> 61)
          goto LABEL_712;
        v218 = v215 - (_QWORD)v216;
        v219 = (uint64_t)(v215 - (_QWORD)v216) >> 2;
        if (v219 <= v217 + 1)
          v219 = v217 + 1;
        if (v218 >= 0x7FFFFFFFFFFFFFF8)
          v220 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v220 = v219;
        if (v220)
        {
          v221 = (char *)sub_40FC((uint64_t)(v212 + 558), v220);
          v214 = (char *)v212[557];
          v216 = (char *)v212[556];
        }
        else
        {
          v221 = 0;
        }
        v229 = &v221[8 * v217];
        v230 = &v221[8 * v220];
        *(_QWORD *)v229 = v213;
        v223 = v229 + 8;
        while (v214 != v216)
        {
          v231 = *((_QWORD *)v214 - 1);
          v214 -= 8;
          *((_QWORD *)v229 - 1) = v231;
          v229 -= 8;
        }
LABEL_323:
        v212[556] = v229;
        v212[557] = v223;
        v212[558] = v230;
        if (v216)
          operator delete(v216);
        goto LABEL_325;
      }
    }
    *(_QWORD *)v214 = v213;
    v223 = v214 + 8;
LABEL_325:
    v212[557] = v223;
LABEL_326:
    v233 = 1 << *(_DWORD *)(v3 + 48);
    if (v233 == 2)
    {
      v234 = *(_QWORD **)a1[1];
      v235 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
      v236 = (char *)v234[560];
      v244 = v234[561];
      if ((unint64_t)v236 >= v244)
      {
        v238 = (char *)v234[559];
        v246 = (v236 - v238) >> 3;
        if ((unint64_t)(v246 + 1) >> 61)
          goto LABEL_712;
        v247 = v244 - (_QWORD)v238;
        v248 = (uint64_t)(v244 - (_QWORD)v238) >> 2;
        if (v248 <= v246 + 1)
          v248 = v246 + 1;
        if (v247 >= 0x7FFFFFFFFFFFFFF8)
          v249 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v249 = v248;
        if (v249)
        {
          v250 = (char *)sub_40FC((uint64_t)(v234 + 561), v249);
          v236 = (char *)v234[560];
          v238 = (char *)v234[559];
        }
        else
        {
          v250 = 0;
        }
        v251 = &v250[8 * v246];
        v252 = &v250[8 * v249];
        *(_QWORD *)v251 = v235;
        v245 = v251 + 8;
        while (v236 != v238)
        {
          v254 = *((_QWORD *)v236 - 1);
          v236 -= 8;
          *((_QWORD *)v251 - 1) = v254;
          v251 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v233 != 1)
        goto LABEL_358;
      v234 = *(_QWORD **)a1[1];
      v235 = *(_WORD *)(a1[2] + 36) & 0x3FFF;
      v236 = (char *)v234[560];
      v237 = v234[561];
      if ((unint64_t)v236 >= v237)
      {
        v238 = (char *)v234[559];
        v239 = (v236 - v238) >> 3;
        if ((unint64_t)(v239 + 1) >> 61)
          goto LABEL_712;
        v240 = v237 - (_QWORD)v238;
        v241 = (uint64_t)(v237 - (_QWORD)v238) >> 2;
        if (v241 <= v239 + 1)
          v241 = v239 + 1;
        if (v240 >= 0x7FFFFFFFFFFFFFF8)
          v242 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v242 = v241;
        if (v242)
        {
          v243 = (char *)sub_40FC((uint64_t)(v234 + 561), v242);
          v236 = (char *)v234[560];
          v238 = (char *)v234[559];
        }
        else
        {
          v243 = 0;
        }
        v251 = &v243[8 * v239];
        v252 = &v243[8 * v242];
        *(_QWORD *)v251 = v235;
        v245 = v251 + 8;
        while (v236 != v238)
        {
          v253 = *((_QWORD *)v236 - 1);
          v236 -= 8;
          *((_QWORD *)v251 - 1) = v253;
          v251 -= 8;
        }
LABEL_355:
        v234[559] = v251;
        v234[560] = v245;
        v234[561] = v252;
        if (v238)
          operator delete(v238);
        goto LABEL_357;
      }
    }
    *(_QWORD *)v236 = v235;
    v245 = v236 + 8;
LABEL_357:
    v234[560] = v245;
LABEL_358:
    v255 = 1 << *(_DWORD *)(v3 + 48);
    if (v255 == 2)
    {
      v256 = *(_QWORD **)a1[1];
      v257 = *(_WORD *)(a1[2] + 56) & 0x3FFF;
      v258 = (char *)v256[563];
      v266 = v256[564];
      if ((unint64_t)v258 >= v266)
      {
        v260 = (char *)v256[562];
        v268 = (v258 - v260) >> 3;
        if ((unint64_t)(v268 + 1) >> 61)
          goto LABEL_712;
        v269 = v266 - (_QWORD)v260;
        v270 = (uint64_t)(v266 - (_QWORD)v260) >> 2;
        if (v270 <= v268 + 1)
          v270 = v268 + 1;
        if (v269 >= 0x7FFFFFFFFFFFFFF8)
          v271 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v271 = v270;
        if (v271)
        {
          v272 = (char *)sub_40FC((uint64_t)(v256 + 564), v271);
          v258 = (char *)v256[563];
          v260 = (char *)v256[562];
        }
        else
        {
          v272 = 0;
        }
        v273 = &v272[8 * v268];
        v274 = &v272[8 * v271];
        *(_QWORD *)v273 = v257;
        v267 = v273 + 8;
        while (v258 != v260)
        {
          v276 = *((_QWORD *)v258 - 1);
          v258 -= 8;
          *((_QWORD *)v273 - 1) = v276;
          v273 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v255 != 1)
        goto LABEL_390;
      v256 = *(_QWORD **)a1[1];
      v257 = *(_WORD *)(a1[2] + 56) & 0x3FFF;
      v258 = (char *)v256[563];
      v259 = v256[564];
      if ((unint64_t)v258 >= v259)
      {
        v260 = (char *)v256[562];
        v261 = (v258 - v260) >> 3;
        if ((unint64_t)(v261 + 1) >> 61)
          goto LABEL_712;
        v262 = v259 - (_QWORD)v260;
        v263 = (uint64_t)(v259 - (_QWORD)v260) >> 2;
        if (v263 <= v261 + 1)
          v263 = v261 + 1;
        if (v262 >= 0x7FFFFFFFFFFFFFF8)
          v264 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v264 = v263;
        if (v264)
        {
          v265 = (char *)sub_40FC((uint64_t)(v256 + 564), v264);
          v258 = (char *)v256[563];
          v260 = (char *)v256[562];
        }
        else
        {
          v265 = 0;
        }
        v273 = &v265[8 * v261];
        v274 = &v265[8 * v264];
        *(_QWORD *)v273 = v257;
        v267 = v273 + 8;
        while (v258 != v260)
        {
          v275 = *((_QWORD *)v258 - 1);
          v258 -= 8;
          *((_QWORD *)v273 - 1) = v275;
          v273 -= 8;
        }
LABEL_387:
        v256[562] = v273;
        v256[563] = v267;
        v256[564] = v274;
        if (v260)
          operator delete(v260);
        goto LABEL_389;
      }
    }
    *(_QWORD *)v258 = v257;
    v267 = v258 + 8;
LABEL_389:
    v256[563] = v267;
LABEL_390:
    v277 = 1 << *(_DWORD *)(v3 + 48);
    if (v277 == 2)
    {
      v278 = *(_QWORD **)a1[1];
      v279 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
      v280 = (char *)v278[566];
      v288 = v278[567];
      if ((unint64_t)v280 >= v288)
      {
        v282 = (char *)v278[565];
        v290 = (v280 - v282) >> 3;
        if ((unint64_t)(v290 + 1) >> 61)
          goto LABEL_712;
        v291 = v288 - (_QWORD)v282;
        v292 = (uint64_t)(v288 - (_QWORD)v282) >> 2;
        if (v292 <= v290 + 1)
          v292 = v290 + 1;
        if (v291 >= 0x7FFFFFFFFFFFFFF8)
          v293 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v293 = v292;
        if (v293)
        {
          v294 = (char *)sub_40FC((uint64_t)(v278 + 567), v293);
          v280 = (char *)v278[566];
          v282 = (char *)v278[565];
        }
        else
        {
          v294 = 0;
        }
        v295 = &v294[8 * v290];
        v296 = &v294[8 * v293];
        *(_QWORD *)v295 = v279;
        v289 = v295 + 8;
        while (v280 != v282)
        {
          v298 = *((_QWORD *)v280 - 1);
          v280 -= 8;
          *((_QWORD *)v295 - 1) = v298;
          v295 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v277 != 1)
        goto LABEL_422;
      v278 = *(_QWORD **)a1[1];
      v279 = *(_WORD *)(a1[2] + 38) & 0x3FFF;
      v280 = (char *)v278[566];
      v281 = v278[567];
      if ((unint64_t)v280 >= v281)
      {
        v282 = (char *)v278[565];
        v283 = (v280 - v282) >> 3;
        if ((unint64_t)(v283 + 1) >> 61)
          goto LABEL_712;
        v284 = v281 - (_QWORD)v282;
        v285 = (uint64_t)(v281 - (_QWORD)v282) >> 2;
        if (v285 <= v283 + 1)
          v285 = v283 + 1;
        if (v284 >= 0x7FFFFFFFFFFFFFF8)
          v286 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v286 = v285;
        if (v286)
        {
          v287 = (char *)sub_40FC((uint64_t)(v278 + 567), v286);
          v280 = (char *)v278[566];
          v282 = (char *)v278[565];
        }
        else
        {
          v287 = 0;
        }
        v295 = &v287[8 * v283];
        v296 = &v287[8 * v286];
        *(_QWORD *)v295 = v279;
        v289 = v295 + 8;
        while (v280 != v282)
        {
          v297 = *((_QWORD *)v280 - 1);
          v280 -= 8;
          *((_QWORD *)v295 - 1) = v297;
          v295 -= 8;
        }
LABEL_419:
        v278[565] = v295;
        v278[566] = v289;
        v278[567] = v296;
        if (v282)
          operator delete(v282);
        goto LABEL_421;
      }
    }
    *(_QWORD *)v280 = v279;
    v289 = v280 + 8;
LABEL_421:
    v278[566] = v289;
LABEL_422:
    v299 = 1 << *(_DWORD *)(v3 + 48);
    if (v299 == 2)
    {
      v300 = *(_QWORD **)a1[1];
      v301 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      v302 = (uint64_t *)v300[569];
      v310 = v300[570];
      if ((unint64_t)v302 >= v310)
      {
        v304 = (uint64_t *)v300[568];
        v312 = v302 - v304;
        if ((unint64_t)(v312 + 1) >> 61)
          goto LABEL_712;
        v313 = v310 - (_QWORD)v304;
        v314 = (uint64_t)(v310 - (_QWORD)v304) >> 2;
        if (v314 <= v312 + 1)
          v314 = v312 + 1;
        if (v313 >= 0x7FFFFFFFFFFFFFF8)
          v315 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v315 = v314;
        if (v315)
        {
          v316 = (char *)sub_40FC((uint64_t)(v300 + 570), v315);
          v302 = (uint64_t *)v300[569];
          v304 = (uint64_t *)v300[568];
        }
        else
        {
          v316 = 0;
        }
        v317 = (uint64_t *)&v316[8 * v312];
        v318 = &v316[8 * v315];
        *v317 = v301;
        v311 = v317 + 1;
        while (v302 != v304)
        {
          v320 = *--v302;
          *--v317 = v320;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v299 != 1)
        goto LABEL_454;
      v300 = *(_QWORD **)a1[1];
      v301 = *(_DWORD *)(a1[2] + 24) & 0x3FFFFLL;
      v302 = (uint64_t *)v300[569];
      v303 = v300[570];
      if ((unint64_t)v302 >= v303)
      {
        v304 = (uint64_t *)v300[568];
        v305 = v302 - v304;
        if ((unint64_t)(v305 + 1) >> 61)
          goto LABEL_712;
        v306 = v303 - (_QWORD)v304;
        v307 = (uint64_t)(v303 - (_QWORD)v304) >> 2;
        if (v307 <= v305 + 1)
          v307 = v305 + 1;
        if (v306 >= 0x7FFFFFFFFFFFFFF8)
          v308 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v308 = v307;
        if (v308)
        {
          v309 = (char *)sub_40FC((uint64_t)(v300 + 570), v308);
          v302 = (uint64_t *)v300[569];
          v304 = (uint64_t *)v300[568];
        }
        else
        {
          v309 = 0;
        }
        v317 = (uint64_t *)&v309[8 * v305];
        v318 = &v309[8 * v308];
        *v317 = v301;
        v311 = v317 + 1;
        while (v302 != v304)
        {
          v319 = *--v302;
          *--v317 = v319;
        }
LABEL_451:
        v300[568] = v317;
        v300[569] = v311;
        v300[570] = v318;
        if (v304)
          operator delete(v304);
        goto LABEL_453;
      }
    }
    *v302 = v301;
    v311 = v302 + 1;
LABEL_453:
    v300[569] = v311;
LABEL_454:
    v321 = 1 << *(_DWORD *)(v3 + 48);
    if (v321 == 2)
    {
      v322 = *(_QWORD **)a1[1];
      v323 = *(_WORD *)(a1[2] + 68) & 0x7FF;
      v324 = (char *)v322[572];
      v332 = v322[573];
      if ((unint64_t)v324 >= v332)
      {
        v326 = (char *)v322[571];
        v334 = (v324 - v326) >> 3;
        if ((unint64_t)(v334 + 1) >> 61)
          goto LABEL_712;
        v335 = v332 - (_QWORD)v326;
        v336 = (uint64_t)(v332 - (_QWORD)v326) >> 2;
        if (v336 <= v334 + 1)
          v336 = v334 + 1;
        if (v335 >= 0x7FFFFFFFFFFFFFF8)
          v337 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v337 = v336;
        if (v337)
        {
          v338 = (char *)sub_40FC((uint64_t)(v322 + 573), v337);
          v324 = (char *)v322[572];
          v326 = (char *)v322[571];
        }
        else
        {
          v338 = 0;
        }
        v339 = &v338[8 * v334];
        v340 = &v338[8 * v337];
        *(_QWORD *)v339 = v323;
        v333 = v339 + 8;
        while (v324 != v326)
        {
          v342 = *((_QWORD *)v324 - 1);
          v324 -= 8;
          *((_QWORD *)v339 - 1) = v342;
          v339 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v321 != 1)
        goto LABEL_486;
      v322 = *(_QWORD **)a1[1];
      v323 = *(_WORD *)(a1[2] + 68) & 0x7FF;
      v324 = (char *)v322[572];
      v325 = v322[573];
      if ((unint64_t)v324 >= v325)
      {
        v326 = (char *)v322[571];
        v327 = (v324 - v326) >> 3;
        if ((unint64_t)(v327 + 1) >> 61)
          goto LABEL_712;
        v328 = v325 - (_QWORD)v326;
        v329 = (uint64_t)(v325 - (_QWORD)v326) >> 2;
        if (v329 <= v327 + 1)
          v329 = v327 + 1;
        if (v328 >= 0x7FFFFFFFFFFFFFF8)
          v330 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v330 = v329;
        if (v330)
        {
          v331 = (char *)sub_40FC((uint64_t)(v322 + 573), v330);
          v324 = (char *)v322[572];
          v326 = (char *)v322[571];
        }
        else
        {
          v331 = 0;
        }
        v339 = &v331[8 * v327];
        v340 = &v331[8 * v330];
        *(_QWORD *)v339 = v323;
        v333 = v339 + 8;
        while (v324 != v326)
        {
          v341 = *((_QWORD *)v324 - 1);
          v324 -= 8;
          *((_QWORD *)v339 - 1) = v341;
          v339 -= 8;
        }
LABEL_483:
        v322[571] = v339;
        v322[572] = v333;
        v322[573] = v340;
        if (v326)
          operator delete(v326);
        goto LABEL_485;
      }
    }
    *(_QWORD *)v324 = v323;
    v333 = v324 + 8;
LABEL_485:
    v322[572] = v333;
LABEL_486:
    v343 = 1 << *(_DWORD *)(v3 + 48);
    if (v343 == 2)
    {
      v344 = *(_QWORD **)a1[1];
      v345 = *(_WORD *)(a1[2] + 50) & 0x7FF;
      v346 = (char *)v344[575];
      v354 = v344[576];
      if ((unint64_t)v346 >= v354)
      {
        v348 = (char *)v344[574];
        v356 = (v346 - v348) >> 3;
        if ((unint64_t)(v356 + 1) >> 61)
          goto LABEL_712;
        v357 = v354 - (_QWORD)v348;
        v358 = (uint64_t)(v354 - (_QWORD)v348) >> 2;
        if (v358 <= v356 + 1)
          v358 = v356 + 1;
        if (v357 >= 0x7FFFFFFFFFFFFFF8)
          v359 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v359 = v358;
        if (v359)
        {
          v360 = (char *)sub_40FC((uint64_t)(v344 + 576), v359);
          v346 = (char *)v344[575];
          v348 = (char *)v344[574];
        }
        else
        {
          v360 = 0;
        }
        v361 = &v360[8 * v356];
        v362 = &v360[8 * v359];
        *(_QWORD *)v361 = v345;
        v355 = v361 + 8;
        while (v346 != v348)
        {
          v364 = *((_QWORD *)v346 - 1);
          v346 -= 8;
          *((_QWORD *)v361 - 1) = v364;
          v361 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v343 != 1)
        goto LABEL_518;
      v344 = *(_QWORD **)a1[1];
      v345 = *(_WORD *)(a1[2] + 50) & 0x7FF;
      v346 = (char *)v344[575];
      v347 = v344[576];
      if ((unint64_t)v346 >= v347)
      {
        v348 = (char *)v344[574];
        v349 = (v346 - v348) >> 3;
        if ((unint64_t)(v349 + 1) >> 61)
          goto LABEL_712;
        v350 = v347 - (_QWORD)v348;
        v351 = (uint64_t)(v347 - (_QWORD)v348) >> 2;
        if (v351 <= v349 + 1)
          v351 = v349 + 1;
        if (v350 >= 0x7FFFFFFFFFFFFFF8)
          v352 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v352 = v351;
        if (v352)
        {
          v353 = (char *)sub_40FC((uint64_t)(v344 + 576), v352);
          v346 = (char *)v344[575];
          v348 = (char *)v344[574];
        }
        else
        {
          v353 = 0;
        }
        v361 = &v353[8 * v349];
        v362 = &v353[8 * v352];
        *(_QWORD *)v361 = v345;
        v355 = v361 + 8;
        while (v346 != v348)
        {
          v363 = *((_QWORD *)v346 - 1);
          v346 -= 8;
          *((_QWORD *)v361 - 1) = v363;
          v361 -= 8;
        }
LABEL_515:
        v344[574] = v361;
        v344[575] = v355;
        v344[576] = v362;
        if (v348)
          operator delete(v348);
        goto LABEL_517;
      }
    }
    *(_QWORD *)v346 = v345;
    v355 = v346 + 8;
LABEL_517:
    v344[575] = v355;
LABEL_518:
    v365 = 1 << *(_DWORD *)(v3 + 48);
    if (v365 == 2)
    {
      v366 = *(_QWORD **)a1[1];
      v367 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      v368 = (char *)v366[578];
      v376 = v366[579];
      if ((unint64_t)v368 >= v376)
      {
        v370 = (char *)v366[577];
        v378 = (v368 - v370) >> 3;
        if ((unint64_t)(v378 + 1) >> 61)
          goto LABEL_712;
        v379 = v376 - (_QWORD)v370;
        v380 = (uint64_t)(v376 - (_QWORD)v370) >> 2;
        if (v380 <= v378 + 1)
          v380 = v378 + 1;
        if (v379 >= 0x7FFFFFFFFFFFFFF8)
          v381 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v381 = v380;
        if (v381)
        {
          v382 = (char *)sub_40FC((uint64_t)(v366 + 579), v381);
          v368 = (char *)v366[578];
          v370 = (char *)v366[577];
        }
        else
        {
          v382 = 0;
        }
        v383 = &v382[8 * v378];
        v384 = &v382[8 * v381];
        *(_QWORD *)v383 = v367;
        v377 = v383 + 8;
        while (v368 != v370)
        {
          v386 = *((_QWORD *)v368 - 1);
          v368 -= 8;
          *((_QWORD *)v383 - 1) = v386;
          v383 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v365 != 1)
        goto LABEL_550;
      v366 = *(_QWORD **)a1[1];
      v367 = *(_WORD *)(a1[2] + 32) & 0x1FFF;
      v368 = (char *)v366[578];
      v369 = v366[579];
      if ((unint64_t)v368 >= v369)
      {
        v370 = (char *)v366[577];
        v371 = (v368 - v370) >> 3;
        if ((unint64_t)(v371 + 1) >> 61)
          goto LABEL_712;
        v372 = v369 - (_QWORD)v370;
        v373 = (uint64_t)(v369 - (_QWORD)v370) >> 2;
        if (v373 <= v371 + 1)
          v373 = v371 + 1;
        if (v372 >= 0x7FFFFFFFFFFFFFF8)
          v374 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v374 = v373;
        if (v374)
        {
          v375 = (char *)sub_40FC((uint64_t)(v366 + 579), v374);
          v368 = (char *)v366[578];
          v370 = (char *)v366[577];
        }
        else
        {
          v375 = 0;
        }
        v383 = &v375[8 * v371];
        v384 = &v375[8 * v374];
        *(_QWORD *)v383 = v367;
        v377 = v383 + 8;
        while (v368 != v370)
        {
          v385 = *((_QWORD *)v368 - 1);
          v368 -= 8;
          *((_QWORD *)v383 - 1) = v385;
          v383 -= 8;
        }
LABEL_547:
        v366[577] = v383;
        v366[578] = v377;
        v366[579] = v384;
        if (v370)
          operator delete(v370);
        goto LABEL_549;
      }
    }
    *(_QWORD *)v368 = v367;
    v377 = v368 + 8;
LABEL_549:
    v366[578] = v377;
LABEL_550:
    v387 = 1 << *(_DWORD *)(v3 + 48);
    if (v387 == 2)
    {
      v388 = *(_QWORD **)a1[1];
      v389 = *(_WORD *)(a1[2] + 64) & 0x1FF;
      v390 = (char *)v388[581];
      v398 = v388[582];
      if ((unint64_t)v390 >= v398)
      {
        v392 = (char *)v388[580];
        v400 = (v390 - v392) >> 3;
        if ((unint64_t)(v400 + 1) >> 61)
          goto LABEL_712;
        v401 = v398 - (_QWORD)v392;
        v402 = (uint64_t)(v398 - (_QWORD)v392) >> 2;
        if (v402 <= v400 + 1)
          v402 = v400 + 1;
        if (v401 >= 0x7FFFFFFFFFFFFFF8)
          v403 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v403 = v402;
        if (v403)
        {
          v404 = (char *)sub_40FC((uint64_t)(v388 + 582), v403);
          v390 = (char *)v388[581];
          v392 = (char *)v388[580];
        }
        else
        {
          v404 = 0;
        }
        v405 = &v404[8 * v400];
        v406 = &v404[8 * v403];
        *(_QWORD *)v405 = v389;
        v399 = v405 + 8;
        while (v390 != v392)
        {
          v408 = *((_QWORD *)v390 - 1);
          v390 -= 8;
          *((_QWORD *)v405 - 1) = v408;
          v405 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v387 != 1)
        goto LABEL_582;
      v388 = *(_QWORD **)a1[1];
      v389 = *(_WORD *)(a1[2] + 64) & 0x1FF;
      v390 = (char *)v388[581];
      v391 = v388[582];
      if ((unint64_t)v390 >= v391)
      {
        v392 = (char *)v388[580];
        v393 = (v390 - v392) >> 3;
        if ((unint64_t)(v393 + 1) >> 61)
          goto LABEL_712;
        v394 = v391 - (_QWORD)v392;
        v395 = (uint64_t)(v391 - (_QWORD)v392) >> 2;
        if (v395 <= v393 + 1)
          v395 = v393 + 1;
        if (v394 >= 0x7FFFFFFFFFFFFFF8)
          v396 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v396 = v395;
        if (v396)
        {
          v397 = (char *)sub_40FC((uint64_t)(v388 + 582), v396);
          v390 = (char *)v388[581];
          v392 = (char *)v388[580];
        }
        else
        {
          v397 = 0;
        }
        v405 = &v397[8 * v393];
        v406 = &v397[8 * v396];
        *(_QWORD *)v405 = v389;
        v399 = v405 + 8;
        while (v390 != v392)
        {
          v407 = *((_QWORD *)v390 - 1);
          v390 -= 8;
          *((_QWORD *)v405 - 1) = v407;
          v405 -= 8;
        }
LABEL_579:
        v388[580] = v405;
        v388[581] = v399;
        v388[582] = v406;
        if (v392)
          operator delete(v392);
        goto LABEL_581;
      }
    }
    *(_QWORD *)v390 = v389;
    v399 = v390 + 8;
LABEL_581:
    v388[581] = v399;
LABEL_582:
    v409 = 1 << *(_DWORD *)(v3 + 48);
    if (v409 == 2)
    {
      v410 = *(_QWORD **)a1[1];
      v411 = *(_WORD *)(a1[2] + 46) & 0x1FF;
      v412 = (char *)v410[584];
      v420 = v410[585];
      if ((unint64_t)v412 >= v420)
      {
        v414 = (char *)v410[583];
        v422 = (v412 - v414) >> 3;
        if ((unint64_t)(v422 + 1) >> 61)
          goto LABEL_712;
        v423 = v420 - (_QWORD)v414;
        v424 = (uint64_t)(v420 - (_QWORD)v414) >> 2;
        if (v424 <= v422 + 1)
          v424 = v422 + 1;
        if (v423 >= 0x7FFFFFFFFFFFFFF8)
          v425 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v425 = v424;
        if (v425)
        {
          v426 = (char *)sub_40FC((uint64_t)(v410 + 585), v425);
          v412 = (char *)v410[584];
          v414 = (char *)v410[583];
        }
        else
        {
          v426 = 0;
        }
        v427 = &v426[8 * v422];
        v428 = &v426[8 * v425];
        *(_QWORD *)v427 = v411;
        v421 = v427 + 8;
        while (v412 != v414)
        {
          v430 = *((_QWORD *)v412 - 1);
          v412 -= 8;
          *((_QWORD *)v427 - 1) = v430;
          v427 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v409 != 1)
        goto LABEL_614;
      v410 = *(_QWORD **)a1[1];
      v411 = *(_WORD *)(a1[2] + 46) & 0x1FF;
      v412 = (char *)v410[584];
      v413 = v410[585];
      if ((unint64_t)v412 >= v413)
      {
        v414 = (char *)v410[583];
        v415 = (v412 - v414) >> 3;
        if ((unint64_t)(v415 + 1) >> 61)
          goto LABEL_712;
        v416 = v413 - (_QWORD)v414;
        v417 = (uint64_t)(v413 - (_QWORD)v414) >> 2;
        if (v417 <= v415 + 1)
          v417 = v415 + 1;
        if (v416 >= 0x7FFFFFFFFFFFFFF8)
          v418 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v418 = v417;
        if (v418)
        {
          v419 = (char *)sub_40FC((uint64_t)(v410 + 585), v418);
          v412 = (char *)v410[584];
          v414 = (char *)v410[583];
        }
        else
        {
          v419 = 0;
        }
        v427 = &v419[8 * v415];
        v428 = &v419[8 * v418];
        *(_QWORD *)v427 = v411;
        v421 = v427 + 8;
        while (v412 != v414)
        {
          v429 = *((_QWORD *)v412 - 1);
          v412 -= 8;
          *((_QWORD *)v427 - 1) = v429;
          v427 -= 8;
        }
LABEL_611:
        v410[583] = v427;
        v410[584] = v421;
        v410[585] = v428;
        if (v414)
          operator delete(v414);
        goto LABEL_613;
      }
    }
    *(_QWORD *)v412 = v411;
    v421 = v412 + 8;
LABEL_613:
    v410[584] = v421;
LABEL_614:
    v431 = 1 << *(_DWORD *)(v3 + 48);
    if (v431 == 2)
    {
      v432 = *(_QWORD **)a1[1];
      v433 = *(_WORD *)(a1[2] + 66) & 0x1FF;
      v434 = (char *)v432[587];
      v442 = v432[588];
      if ((unint64_t)v434 >= v442)
      {
        v436 = (char *)v432[586];
        v444 = (v434 - v436) >> 3;
        if ((unint64_t)(v444 + 1) >> 61)
          goto LABEL_712;
        v445 = v442 - (_QWORD)v436;
        v446 = (uint64_t)(v442 - (_QWORD)v436) >> 2;
        if (v446 <= v444 + 1)
          v446 = v444 + 1;
        if (v445 >= 0x7FFFFFFFFFFFFFF8)
          v447 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v447 = v446;
        if (v447)
        {
          v448 = (char *)sub_40FC((uint64_t)(v432 + 588), v447);
          v434 = (char *)v432[587];
          v436 = (char *)v432[586];
        }
        else
        {
          v448 = 0;
        }
        v449 = &v448[8 * v444];
        v450 = &v448[8 * v447];
        *(_QWORD *)v449 = v433;
        v443 = v449 + 8;
        while (v434 != v436)
        {
          v452 = *((_QWORD *)v434 - 1);
          v434 -= 8;
          *((_QWORD *)v449 - 1) = v452;
          v449 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v431 != 1)
        goto LABEL_646;
      v432 = *(_QWORD **)a1[1];
      v433 = *(_WORD *)(a1[2] + 66) & 0x1FF;
      v434 = (char *)v432[587];
      v435 = v432[588];
      if ((unint64_t)v434 >= v435)
      {
        v436 = (char *)v432[586];
        v437 = (v434 - v436) >> 3;
        if ((unint64_t)(v437 + 1) >> 61)
          goto LABEL_712;
        v438 = v435 - (_QWORD)v436;
        v439 = (uint64_t)(v435 - (_QWORD)v436) >> 2;
        if (v439 <= v437 + 1)
          v439 = v437 + 1;
        if (v438 >= 0x7FFFFFFFFFFFFFF8)
          v440 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v440 = v439;
        if (v440)
        {
          v441 = (char *)sub_40FC((uint64_t)(v432 + 588), v440);
          v434 = (char *)v432[587];
          v436 = (char *)v432[586];
        }
        else
        {
          v441 = 0;
        }
        v449 = &v441[8 * v437];
        v450 = &v441[8 * v440];
        *(_QWORD *)v449 = v433;
        v443 = v449 + 8;
        while (v434 != v436)
        {
          v451 = *((_QWORD *)v434 - 1);
          v434 -= 8;
          *((_QWORD *)v449 - 1) = v451;
          v449 -= 8;
        }
LABEL_643:
        v432[586] = v449;
        v432[587] = v443;
        v432[588] = v450;
        if (v436)
          operator delete(v436);
        goto LABEL_645;
      }
    }
    *(_QWORD *)v434 = v433;
    v443 = v434 + 8;
LABEL_645:
    v432[587] = v443;
LABEL_646:
    v453 = 1 << *(_DWORD *)(v3 + 48);
    if (v453 == 2)
    {
      v454 = *(_QWORD **)a1[1];
      v455 = *(_WORD *)(a1[2] + 48) & 0x1FF;
      v456 = (char *)v454[590];
      v464 = v454[591];
      if ((unint64_t)v456 >= v464)
      {
        v458 = (char *)v454[589];
        v466 = (v456 - v458) >> 3;
        if ((unint64_t)(v466 + 1) >> 61)
          goto LABEL_712;
        v467 = v464 - (_QWORD)v458;
        v468 = (uint64_t)(v464 - (_QWORD)v458) >> 2;
        if (v468 <= v466 + 1)
          v468 = v466 + 1;
        if (v467 >= 0x7FFFFFFFFFFFFFF8)
          v469 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v469 = v468;
        if (v469)
        {
          v470 = (char *)sub_40FC((uint64_t)(v454 + 591), v469);
          v456 = (char *)v454[590];
          v458 = (char *)v454[589];
        }
        else
        {
          v470 = 0;
        }
        v471 = &v470[8 * v466];
        v472 = &v470[8 * v469];
        *(_QWORD *)v471 = v455;
        v465 = v471 + 8;
        while (v456 != v458)
        {
          v474 = *((_QWORD *)v456 - 1);
          v456 -= 8;
          *((_QWORD *)v471 - 1) = v474;
          v471 -= 8;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v453 != 1)
        goto LABEL_678;
      v454 = *(_QWORD **)a1[1];
      v455 = *(_WORD *)(a1[2] + 48) & 0x1FF;
      v456 = (char *)v454[590];
      v457 = v454[591];
      if ((unint64_t)v456 >= v457)
      {
        v458 = (char *)v454[589];
        v459 = (v456 - v458) >> 3;
        if ((unint64_t)(v459 + 1) >> 61)
          goto LABEL_712;
        v460 = v457 - (_QWORD)v458;
        v461 = (uint64_t)(v457 - (_QWORD)v458) >> 2;
        if (v461 <= v459 + 1)
          v461 = v459 + 1;
        if (v460 >= 0x7FFFFFFFFFFFFFF8)
          v462 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v462 = v461;
        if (v462)
        {
          v463 = (char *)sub_40FC((uint64_t)(v454 + 591), v462);
          v456 = (char *)v454[590];
          v458 = (char *)v454[589];
        }
        else
        {
          v463 = 0;
        }
        v471 = &v463[8 * v459];
        v472 = &v463[8 * v462];
        *(_QWORD *)v471 = v455;
        v465 = v471 + 8;
        while (v456 != v458)
        {
          v473 = *((_QWORD *)v456 - 1);
          v456 -= 8;
          *((_QWORD *)v471 - 1) = v473;
          v471 -= 8;
        }
LABEL_675:
        v454[589] = v471;
        v454[590] = v465;
        v454[591] = v472;
        if (v458)
          operator delete(v458);
        goto LABEL_677;
      }
    }
    *(_QWORD *)v456 = v455;
    v465 = v456 + 8;
LABEL_677:
    v454[590] = v465;
LABEL_678:
    v475 = 1 << *(_DWORD *)(v3 + 48);
    if (v475 == 2)
    {
      v487 = a1[2];
      v477 = *(_QWORD **)a1[1];
      v478 = (unint64_t)*(unsigned int *)(v487 + 28) >> 18;
      v479 = (unint64_t *)v477[593];
      v488 = v477[594];
      if ((unint64_t)v479 >= v488)
      {
        v481 = (unint64_t *)v477[592];
        v490 = v479 - v481;
        if (!((unint64_t)(v490 + 1) >> 61))
        {
          v491 = v488 - (_QWORD)v481;
          v492 = (uint64_t)(v488 - (_QWORD)v481) >> 2;
          if (v492 <= v490 + 1)
            v492 = v490 + 1;
          if (v491 >= 0x7FFFFFFFFFFFFFF8)
            v493 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v493 = v492;
          if (v493)
          {
            v494 = (char *)sub_40FC((uint64_t)(v477 + 594), v493);
            v479 = (unint64_t *)v477[593];
            v481 = (unint64_t *)v477[592];
          }
          else
          {
            v494 = 0;
          }
          v495 = (unint64_t *)&v494[8 * v490];
          v496 = &v494[8 * v493];
          *v495 = v478;
          v489 = v495 + 1;
          while (v479 != v481)
          {
            v498 = *--v479;
            *--v495 = v498;
          }
          goto LABEL_707;
        }
LABEL_712:
        sub_4074();
      }
    }
    else
    {
      if (v475 != 1)
      {
LABEL_710:
        *a2 = 1;
        return;
      }
      v476 = a1[2];
      v477 = *(_QWORD **)a1[1];
      v478 = (unint64_t)*(unsigned int *)(v476 + 28) >> 18;
      v479 = (unint64_t *)v477[593];
      v480 = v477[594];
      if ((unint64_t)v479 >= v480)
      {
        v481 = (unint64_t *)v477[592];
        v482 = v479 - v481;
        if (!((unint64_t)(v482 + 1) >> 61))
        {
          v483 = v480 - (_QWORD)v481;
          v484 = (uint64_t)(v480 - (_QWORD)v481) >> 2;
          if (v484 <= v482 + 1)
            v484 = v482 + 1;
          if (v483 >= 0x7FFFFFFFFFFFFFF8)
            v485 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v485 = v484;
          if (v485)
          {
            v486 = (char *)sub_40FC((uint64_t)(v477 + 594), v485);
            v479 = (unint64_t *)v477[593];
            v481 = (unint64_t *)v477[592];
          }
          else
          {
            v486 = 0;
          }
          v495 = (unint64_t *)&v486[8 * v482];
          v496 = &v486[8 * v485];
          *v495 = v478;
          v489 = v495 + 1;
          while (v479 != v481)
          {
            v497 = *--v479;
            *--v495 = v497;
          }
LABEL_707:
          v477[592] = v495;
          v477[593] = v489;
          v477[594] = v496;
          if (v481)
            operator delete(v481);
          goto LABEL_709;
        }
        goto LABEL_712;
      }
    }
    *v479 = v478;
    v489 = v479 + 1;
LABEL_709:
    v477[593] = v489;
    goto LABEL_710;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[530] - 8) += *(_WORD *)(v17 + 58) & 0x3FFF;
    *(_QWORD *)(v19[533] - 8) += *(_WORD *)(v17 + 40) & 0x3FFF;
    *(_QWORD *)(v19[536] - 8) += *(_WORD *)(v17 + 60) & 0x3FFF;
    *(_QWORD *)(v19[539] - 8) += *(_WORD *)(v17 + 42) & 0x3FFF;
    *(_QWORD *)(v19[542] - 8) += *(_WORD *)(v17 + 62) & 0x3FFF;
    *(_QWORD *)(v19[545] - 8) += *(_WORD *)(v17 + 44) & 0x3FFF;
    *(_QWORD *)(v19[548] - 8) += *(_DWORD *)(v17 + 28) & 0x3FFFF;
    *(_QWORD *)(v19[551] - 8) += *(_WORD *)(v17 + 52) & 0x3FFF;
    *(_QWORD *)(v19[554] - 8) += *(_WORD *)(v17 + 34) & 0x3FFF;
    *(_QWORD *)(v19[557] - 8) += *(_WORD *)(v17 + 54) & 0x3FFF;
    v20 = a1[2];
    v21 = *(_QWORD **)a1[1];
    *(_QWORD *)(v21[560] - 8) += *(_WORD *)(v20 + 36) & 0x3FFF;
    *(_QWORD *)(v21[563] - 8) += *(_WORD *)(v20 + 56) & 0x3FFF;
    *(_QWORD *)(v21[566] - 8) += *(_WORD *)(v20 + 38) & 0x3FFF;
    *(_QWORD *)(v21[569] - 8) += *(_DWORD *)(v20 + 24) & 0x3FFFF;
    *(_QWORD *)(v21[572] - 8) += *(_WORD *)(v20 + 68) & 0x7FF;
    *(_QWORD *)(v21[575] - 8) += *(_WORD *)(v20 + 50) & 0x7FF;
    *(_QWORD *)(v21[578] - 8) += *(_WORD *)(v20 + 32) & 0x1FFF;
    *(_QWORD *)(v21[581] - 8) += *(_WORD *)(v20 + 64) & 0x1FF;
    *(_QWORD *)(v21[584] - 8) += *(_WORD *)(v20 + 46) & 0x1FF;
    *(_QWORD *)(v21[587] - 8) += *(_WORD *)(v20 + 66) & 0x1FF;
    v22 = a1[2];
    v23 = (_QWORD *)*v18;
    *(_QWORD *)(v23[590] - 8) += *(_WORD *)(v22 + 48) & 0x1FF;
    *(_QWORD *)(v23[593] - 8) += (unint64_t)*(unsigned int *)(v22 + 28) >> 18;
  }
}

void sub_145520(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t *v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t *v169;
  unint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  unint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  char *v183;
  uint64_t *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t *v191;
  unint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  unint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t *v214;
  unint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  uint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  uint64_t *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 44) & 0xFFFFFLL;
      v8 = (uint64_t *)v6[626];
      v19 = v6[627];
      if ((unint64_t)v8 >= v19)
      {
        v10 = (uint64_t *)v6[625];
        v21 = v8 - v10;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_328;
        v22 = v19 - (_QWORD)v10;
        v23 = (uint64_t)(v19 - (_QWORD)v10) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
        {
          v25 = (char *)sub_40FC((uint64_t)(v6 + 627), v24);
          v8 = (uint64_t *)v6[626];
          v10 = (uint64_t *)v6[625];
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v29 = *--v8;
          *--v26 = v29;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_DWORD *)(a1[2] + 44) & 0xFFFFFLL;
      v8 = (uint64_t *)v6[626];
      v9 = v6[627];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (uint64_t *)v6[625];
        v11 = v8 - v10;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_328;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 627), v14);
          v8 = (uint64_t *)v6[626];
          v10 = (uint64_t *)v6[625];
        }
        else
        {
          v15 = 0;
        }
        v26 = (uint64_t *)&v15[8 * v11];
        v27 = &v15[8 * v14];
        *v26 = v7;
        v20 = v26 + 1;
        while (v8 != v10)
        {
          v28 = *--v8;
          *--v26 = v28;
        }
LABEL_35:
        v6[625] = v26;
        v6[626] = v20;
        v6[627] = v27;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *v8 = v7;
    v20 = v8 + 1;
LABEL_37:
    v6[626] = v20;
LABEL_38:
    v30 = 1 << *(_DWORD *)(v3 + 48);
    if (v30 == 2)
    {
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
      v33 = (uint64_t *)v31[629];
      v41 = v31[630];
      if ((unint64_t)v33 >= v41)
      {
        v35 = (uint64_t *)v31[628];
        v43 = v33 - v35;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_328;
        v44 = v41 - (_QWORD)v35;
        v45 = (uint64_t)(v41 - (_QWORD)v35) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v31 + 630), v46);
          v33 = (uint64_t *)v31[629];
          v35 = (uint64_t *)v31[628];
        }
        else
        {
          v47 = 0;
        }
        v48 = (uint64_t *)&v47[8 * v43];
        v49 = &v47[8 * v46];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v51 = *--v33;
          *--v48 = v51;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v30 != 1)
        goto LABEL_70;
      v31 = *(_QWORD **)a1[1];
      v32 = *(_DWORD *)(a1[2] + 48) & 0xFFFFFLL;
      v33 = (uint64_t *)v31[629];
      v34 = v31[630];
      if ((unint64_t)v33 >= v34)
      {
        v35 = (uint64_t *)v31[628];
        v36 = v33 - v35;
        if ((unint64_t)(v36 + 1) >> 61)
          goto LABEL_328;
        v37 = v34 - (_QWORD)v35;
        v38 = (uint64_t)(v34 - (_QWORD)v35) >> 2;
        if (v38 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_40FC((uint64_t)(v31 + 630), v39);
          v33 = (uint64_t *)v31[629];
          v35 = (uint64_t *)v31[628];
        }
        else
        {
          v40 = 0;
        }
        v48 = (uint64_t *)&v40[8 * v36];
        v49 = &v40[8 * v39];
        *v48 = v32;
        v42 = v48 + 1;
        while (v33 != v35)
        {
          v50 = *--v33;
          *--v48 = v50;
        }
LABEL_67:
        v31[628] = v48;
        v31[629] = v42;
        v31[630] = v49;
        if (v35)
          operator delete(v35);
        goto LABEL_69;
      }
    }
    *v33 = v32;
    v42 = v33 + 1;
LABEL_69:
    v31[629] = v42;
LABEL_70:
    v52 = 1 << *(_DWORD *)(v3 + 48);
    if (v52 == 2)
    {
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
      v55 = (uint64_t *)v53[632];
      v63 = v53[633];
      if ((unint64_t)v55 >= v63)
      {
        v57 = (uint64_t *)v53[631];
        v65 = v55 - v57;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_328;
        v66 = v63 - (_QWORD)v57;
        v67 = (uint64_t)(v63 - (_QWORD)v57) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v53 + 633), v68);
          v55 = (uint64_t *)v53[632];
          v57 = (uint64_t *)v53[631];
        }
        else
        {
          v69 = 0;
        }
        v70 = (uint64_t *)&v69[8 * v65];
        v71 = &v69[8 * v68];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v73 = *--v55;
          *--v70 = v73;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v52 != 1)
        goto LABEL_102;
      v53 = *(_QWORD **)a1[1];
      v54 = *(_DWORD *)(a1[2] + 52) & 0xFFFFFLL;
      v55 = (uint64_t *)v53[632];
      v56 = v53[633];
      if ((unint64_t)v55 >= v56)
      {
        v57 = (uint64_t *)v53[631];
        v58 = v55 - v57;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_328;
        v59 = v56 - (_QWORD)v57;
        v60 = (uint64_t)(v56 - (_QWORD)v57) >> 2;
        if (v60 <= v58 + 1)
          v60 = v58 + 1;
        if (v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          v62 = (char *)sub_40FC((uint64_t)(v53 + 633), v61);
          v55 = (uint64_t *)v53[632];
          v57 = (uint64_t *)v53[631];
        }
        else
        {
          v62 = 0;
        }
        v70 = (uint64_t *)&v62[8 * v58];
        v71 = &v62[8 * v61];
        *v70 = v54;
        v64 = v70 + 1;
        while (v55 != v57)
        {
          v72 = *--v55;
          *--v70 = v72;
        }
LABEL_99:
        v53[631] = v70;
        v53[632] = v64;
        v53[633] = v71;
        if (v57)
          operator delete(v57);
        goto LABEL_101;
      }
    }
    *v55 = v54;
    v64 = v55 + 1;
LABEL_101:
    v53[632] = v64;
LABEL_102:
    v74 = 1 << *(_DWORD *)(v3 + 48);
    if (v74 == 2)
    {
      v86 = a1[1];
      v76 = *(_QWORD **)v86;
      v77 = *(unsigned __int16 *)(a1[2] + 58);
      v78 = *(char **)(*(_QWORD *)v86 + 5080);
      v87 = *(_QWORD *)(*(_QWORD *)v86 + 5088);
      if ((unint64_t)v78 >= v87)
      {
        v80 = (char *)v76[634];
        v89 = (v78 - v80) >> 3;
        if ((unint64_t)(v89 + 1) >> 61)
          goto LABEL_328;
        v90 = v87 - (_QWORD)v80;
        v91 = (uint64_t)(v87 - (_QWORD)v80) >> 2;
        if (v91 <= v89 + 1)
          v91 = v89 + 1;
        if (v90 >= 0x7FFFFFFFFFFFFFF8)
          v92 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v92 = v91;
        if (v92)
        {
          v93 = (char *)sub_40FC((uint64_t)(v76 + 636), v92);
          v78 = (char *)v76[635];
          v80 = (char *)v76[634];
        }
        else
        {
          v93 = 0;
        }
        v94 = &v93[8 * v89];
        v95 = &v93[8 * v92];
        *(_QWORD *)v94 = v77;
        v88 = v94 + 8;
        while (v78 != v80)
        {
          v97 = *((_QWORD *)v78 - 1);
          v78 -= 8;
          *((_QWORD *)v94 - 1) = v97;
          v94 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v74 != 1)
        goto LABEL_134;
      v75 = a1[1];
      v76 = *(_QWORD **)v75;
      v77 = *(unsigned __int16 *)(a1[2] + 58);
      v78 = *(char **)(*(_QWORD *)v75 + 5080);
      v79 = *(_QWORD *)(*(_QWORD *)v75 + 5088);
      if ((unint64_t)v78 >= v79)
      {
        v80 = (char *)v76[634];
        v81 = (v78 - v80) >> 3;
        if ((unint64_t)(v81 + 1) >> 61)
          goto LABEL_328;
        v82 = v79 - (_QWORD)v80;
        v83 = (uint64_t)(v79 - (_QWORD)v80) >> 2;
        if (v83 <= v81 + 1)
          v83 = v81 + 1;
        if (v82 >= 0x7FFFFFFFFFFFFFF8)
          v84 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v84 = v83;
        if (v84)
        {
          v85 = (char *)sub_40FC((uint64_t)(v76 + 636), v84);
          v78 = (char *)v76[635];
          v80 = (char *)v76[634];
        }
        else
        {
          v85 = 0;
        }
        v94 = &v85[8 * v81];
        v95 = &v85[8 * v84];
        *(_QWORD *)v94 = v77;
        v88 = v94 + 8;
        while (v78 != v80)
        {
          v96 = *((_QWORD *)v78 - 1);
          v78 -= 8;
          *((_QWORD *)v94 - 1) = v96;
          v94 -= 8;
        }
LABEL_131:
        v76[634] = v94;
        v76[635] = v88;
        v76[636] = v95;
        if (v80)
          operator delete(v80);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v78 = v77;
    v88 = v78 + 8;
LABEL_133:
    v76[635] = v88;
LABEL_134:
    v98 = 1 << *(_DWORD *)(v3 + 48);
    if (v98 == 2)
    {
      v110 = a1[1];
      v100 = *(_QWORD **)v110;
      v101 = *(unsigned __int16 *)(a1[2] + 56);
      v102 = *(char **)(*(_QWORD *)v110 + 5104);
      v111 = *(_QWORD *)(*(_QWORD *)v110 + 5112);
      if ((unint64_t)v102 >= v111)
      {
        v104 = (char *)v100[637];
        v113 = (v102 - v104) >> 3;
        if ((unint64_t)(v113 + 1) >> 61)
          goto LABEL_328;
        v114 = v111 - (_QWORD)v104;
        v115 = (uint64_t)(v111 - (_QWORD)v104) >> 2;
        if (v115 <= v113 + 1)
          v115 = v113 + 1;
        if (v114 >= 0x7FFFFFFFFFFFFFF8)
          v116 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v116 = v115;
        if (v116)
        {
          v117 = (char *)sub_40FC((uint64_t)(v100 + 639), v116);
          v102 = (char *)v100[638];
          v104 = (char *)v100[637];
        }
        else
        {
          v117 = 0;
        }
        v118 = &v117[8 * v113];
        v119 = &v117[8 * v116];
        *(_QWORD *)v118 = v101;
        v112 = v118 + 8;
        while (v102 != v104)
        {
          v121 = *((_QWORD *)v102 - 1);
          v102 -= 8;
          *((_QWORD *)v118 - 1) = v121;
          v118 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v98 != 1)
        goto LABEL_166;
      v99 = a1[1];
      v100 = *(_QWORD **)v99;
      v101 = *(unsigned __int16 *)(a1[2] + 56);
      v102 = *(char **)(*(_QWORD *)v99 + 5104);
      v103 = *(_QWORD *)(*(_QWORD *)v99 + 5112);
      if ((unint64_t)v102 >= v103)
      {
        v104 = (char *)v100[637];
        v105 = (v102 - v104) >> 3;
        if ((unint64_t)(v105 + 1) >> 61)
          goto LABEL_328;
        v106 = v103 - (_QWORD)v104;
        v107 = (uint64_t)(v103 - (_QWORD)v104) >> 2;
        if (v107 <= v105 + 1)
          v107 = v105 + 1;
        if (v106 >= 0x7FFFFFFFFFFFFFF8)
          v108 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v108 = v107;
        if (v108)
        {
          v109 = (char *)sub_40FC((uint64_t)(v100 + 639), v108);
          v102 = (char *)v100[638];
          v104 = (char *)v100[637];
        }
        else
        {
          v109 = 0;
        }
        v118 = &v109[8 * v105];
        v119 = &v109[8 * v108];
        *(_QWORD *)v118 = v101;
        v112 = v118 + 8;
        while (v102 != v104)
        {
          v120 = *((_QWORD *)v102 - 1);
          v102 -= 8;
          *((_QWORD *)v118 - 1) = v120;
          v118 -= 8;
        }
LABEL_163:
        v100[637] = v118;
        v100[638] = v112;
        v100[639] = v119;
        if (v104)
          operator delete(v104);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v102 = v101;
    v112 = v102 + 8;
LABEL_165:
    v100[638] = v112;
LABEL_166:
    v122 = 1 << *(_DWORD *)(v3 + 48);
    if (v122 == 2)
    {
      v123 = *(_QWORD **)a1[1];
      v124 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      v125 = (uint64_t *)v123[641];
      v133 = v123[642];
      if ((unint64_t)v125 >= v133)
      {
        v127 = (uint64_t *)v123[640];
        v135 = v125 - v127;
        if ((unint64_t)(v135 + 1) >> 61)
          goto LABEL_328;
        v136 = v133 - (_QWORD)v127;
        v137 = (uint64_t)(v133 - (_QWORD)v127) >> 2;
        if (v137 <= v135 + 1)
          v137 = v135 + 1;
        if (v136 >= 0x7FFFFFFFFFFFFFF8)
          v138 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v138 = v137;
        if (v138)
        {
          v139 = (char *)sub_40FC((uint64_t)(v123 + 642), v138);
          v125 = (uint64_t *)v123[641];
          v127 = (uint64_t *)v123[640];
        }
        else
        {
          v139 = 0;
        }
        v140 = (uint64_t *)&v139[8 * v135];
        v141 = &v139[8 * v138];
        *v140 = v124;
        v134 = v140 + 1;
        while (v125 != v127)
        {
          v143 = *--v125;
          *--v140 = v143;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v122 != 1)
        goto LABEL_198;
      v123 = *(_QWORD **)a1[1];
      v124 = *(_DWORD *)(a1[2] + 32) & 0xFFFFFLL;
      v125 = (uint64_t *)v123[641];
      v126 = v123[642];
      if ((unint64_t)v125 >= v126)
      {
        v127 = (uint64_t *)v123[640];
        v128 = v125 - v127;
        if ((unint64_t)(v128 + 1) >> 61)
          goto LABEL_328;
        v129 = v126 - (_QWORD)v127;
        v130 = (uint64_t)(v126 - (_QWORD)v127) >> 2;
        if (v130 <= v128 + 1)
          v130 = v128 + 1;
        if (v129 >= 0x7FFFFFFFFFFFFFF8)
          v131 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v131 = v130;
        if (v131)
        {
          v132 = (char *)sub_40FC((uint64_t)(v123 + 642), v131);
          v125 = (uint64_t *)v123[641];
          v127 = (uint64_t *)v123[640];
        }
        else
        {
          v132 = 0;
        }
        v140 = (uint64_t *)&v132[8 * v128];
        v141 = &v132[8 * v131];
        *v140 = v124;
        v134 = v140 + 1;
        while (v125 != v127)
        {
          v142 = *--v125;
          *--v140 = v142;
        }
LABEL_195:
        v123[640] = v140;
        v123[641] = v134;
        v123[642] = v141;
        if (v127)
          operator delete(v127);
        goto LABEL_197;
      }
    }
    *v125 = v124;
    v134 = v125 + 1;
LABEL_197:
    v123[641] = v134;
LABEL_198:
    v144 = 1 << *(_DWORD *)(v3 + 48);
    if (v144 == 2)
    {
      v145 = *(_QWORD **)a1[1];
      v146 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      v147 = (uint64_t *)v145[644];
      v155 = v145[645];
      if ((unint64_t)v147 >= v155)
      {
        v149 = (uint64_t *)v145[643];
        v157 = v147 - v149;
        if ((unint64_t)(v157 + 1) >> 61)
          goto LABEL_328;
        v158 = v155 - (_QWORD)v149;
        v159 = (uint64_t)(v155 - (_QWORD)v149) >> 2;
        if (v159 <= v157 + 1)
          v159 = v157 + 1;
        if (v158 >= 0x7FFFFFFFFFFFFFF8)
          v160 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v160 = v159;
        if (v160)
        {
          v161 = (char *)sub_40FC((uint64_t)(v145 + 645), v160);
          v147 = (uint64_t *)v145[644];
          v149 = (uint64_t *)v145[643];
        }
        else
        {
          v161 = 0;
        }
        v162 = (uint64_t *)&v161[8 * v157];
        v163 = &v161[8 * v160];
        *v162 = v146;
        v156 = v162 + 1;
        while (v147 != v149)
        {
          v165 = *--v147;
          *--v162 = v165;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v144 != 1)
        goto LABEL_230;
      v145 = *(_QWORD **)a1[1];
      v146 = *(_DWORD *)(a1[2] + 36) & 0xFFFFFLL;
      v147 = (uint64_t *)v145[644];
      v148 = v145[645];
      if ((unint64_t)v147 >= v148)
      {
        v149 = (uint64_t *)v145[643];
        v150 = v147 - v149;
        if ((unint64_t)(v150 + 1) >> 61)
          goto LABEL_328;
        v151 = v148 - (_QWORD)v149;
        v152 = (uint64_t)(v148 - (_QWORD)v149) >> 2;
        if (v152 <= v150 + 1)
          v152 = v150 + 1;
        if (v151 >= 0x7FFFFFFFFFFFFFF8)
          v153 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v153 = v152;
        if (v153)
        {
          v154 = (char *)sub_40FC((uint64_t)(v145 + 645), v153);
          v147 = (uint64_t *)v145[644];
          v149 = (uint64_t *)v145[643];
        }
        else
        {
          v154 = 0;
        }
        v162 = (uint64_t *)&v154[8 * v150];
        v163 = &v154[8 * v153];
        *v162 = v146;
        v156 = v162 + 1;
        while (v147 != v149)
        {
          v164 = *--v147;
          *--v162 = v164;
        }
LABEL_227:
        v145[643] = v162;
        v145[644] = v156;
        v145[645] = v163;
        if (v149)
          operator delete(v149);
        goto LABEL_229;
      }
    }
    *v147 = v146;
    v156 = v147 + 1;
LABEL_229:
    v145[644] = v156;
LABEL_230:
    v166 = 1 << *(_DWORD *)(v3 + 48);
    if (v166 == 2)
    {
      v167 = *(_QWORD **)a1[1];
      v168 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
      v169 = (uint64_t *)v167[647];
      v177 = v167[648];
      if ((unint64_t)v169 >= v177)
      {
        v171 = (uint64_t *)v167[646];
        v179 = v169 - v171;
        if ((unint64_t)(v179 + 1) >> 61)
          goto LABEL_328;
        v180 = v177 - (_QWORD)v171;
        v181 = (uint64_t)(v177 - (_QWORD)v171) >> 2;
        if (v181 <= v179 + 1)
          v181 = v179 + 1;
        if (v180 >= 0x7FFFFFFFFFFFFFF8)
          v182 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v182 = v181;
        if (v182)
        {
          v183 = (char *)sub_40FC((uint64_t)(v167 + 648), v182);
          v169 = (uint64_t *)v167[647];
          v171 = (uint64_t *)v167[646];
        }
        else
        {
          v183 = 0;
        }
        v184 = (uint64_t *)&v183[8 * v179];
        v185 = &v183[8 * v182];
        *v184 = v168;
        v178 = v184 + 1;
        while (v169 != v171)
        {
          v187 = *--v169;
          *--v184 = v187;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v166 != 1)
        goto LABEL_262;
      v167 = *(_QWORD **)a1[1];
      v168 = *(_DWORD *)(a1[2] + 40) & 0xFFFFFLL;
      v169 = (uint64_t *)v167[647];
      v170 = v167[648];
      if ((unint64_t)v169 >= v170)
      {
        v171 = (uint64_t *)v167[646];
        v172 = v169 - v171;
        if ((unint64_t)(v172 + 1) >> 61)
          goto LABEL_328;
        v173 = v170 - (_QWORD)v171;
        v174 = (uint64_t)(v170 - (_QWORD)v171) >> 2;
        if (v174 <= v172 + 1)
          v174 = v172 + 1;
        if (v173 >= 0x7FFFFFFFFFFFFFF8)
          v175 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v175 = v174;
        if (v175)
        {
          v176 = (char *)sub_40FC((uint64_t)(v167 + 648), v175);
          v169 = (uint64_t *)v167[647];
          v171 = (uint64_t *)v167[646];
        }
        else
        {
          v176 = 0;
        }
        v184 = (uint64_t *)&v176[8 * v172];
        v185 = &v176[8 * v175];
        *v184 = v168;
        v178 = v184 + 1;
        while (v169 != v171)
        {
          v186 = *--v169;
          *--v184 = v186;
        }
LABEL_259:
        v167[646] = v184;
        v167[647] = v178;
        v167[648] = v185;
        if (v171)
          operator delete(v171);
        goto LABEL_261;
      }
    }
    *v169 = v168;
    v178 = v169 + 1;
LABEL_261:
    v167[647] = v178;
LABEL_262:
    v188 = 1 << *(_DWORD *)(v3 + 48);
    if (v188 == 2)
    {
      v189 = *(_QWORD **)a1[1];
      v190 = *(_DWORD *)(a1[2] + 24) & 0xFFFFFLL;
      v191 = (uint64_t *)v189[650];
      v199 = v189[651];
      if ((unint64_t)v191 >= v199)
      {
        v193 = (uint64_t *)v189[649];
        v201 = v191 - v193;
        if ((unint64_t)(v201 + 1) >> 61)
          goto LABEL_328;
        v202 = v199 - (_QWORD)v193;
        v203 = (uint64_t)(v199 - (_QWORD)v193) >> 2;
        if (v203 <= v201 + 1)
          v203 = v201 + 1;
        if (v202 >= 0x7FFFFFFFFFFFFFF8)
          v204 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v204 = v203;
        if (v204)
        {
          v205 = (char *)sub_40FC((uint64_t)(v189 + 651), v204);
          v191 = (uint64_t *)v189[650];
          v193 = (uint64_t *)v189[649];
        }
        else
        {
          v205 = 0;
        }
        v206 = (uint64_t *)&v205[8 * v201];
        v207 = &v205[8 * v204];
        *v206 = v190;
        v200 = v206 + 1;
        while (v191 != v193)
        {
          v209 = *--v191;
          *--v206 = v209;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v188 != 1)
        goto LABEL_294;
      v189 = *(_QWORD **)a1[1];
      v190 = *(_DWORD *)(a1[2] + 24) & 0xFFFFFLL;
      v191 = (uint64_t *)v189[650];
      v192 = v189[651];
      if ((unint64_t)v191 >= v192)
      {
        v193 = (uint64_t *)v189[649];
        v194 = v191 - v193;
        if ((unint64_t)(v194 + 1) >> 61)
          goto LABEL_328;
        v195 = v192 - (_QWORD)v193;
        v196 = (uint64_t)(v192 - (_QWORD)v193) >> 2;
        if (v196 <= v194 + 1)
          v196 = v194 + 1;
        if (v195 >= 0x7FFFFFFFFFFFFFF8)
          v197 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v197 = v196;
        if (v197)
        {
          v198 = (char *)sub_40FC((uint64_t)(v189 + 651), v197);
          v191 = (uint64_t *)v189[650];
          v193 = (uint64_t *)v189[649];
        }
        else
        {
          v198 = 0;
        }
        v206 = (uint64_t *)&v198[8 * v194];
        v207 = &v198[8 * v197];
        *v206 = v190;
        v200 = v206 + 1;
        while (v191 != v193)
        {
          v208 = *--v191;
          *--v206 = v208;
        }
LABEL_291:
        v189[649] = v206;
        v189[650] = v200;
        v189[651] = v207;
        if (v193)
          operator delete(v193);
        goto LABEL_293;
      }
    }
    *v191 = v190;
    v200 = v191 + 1;
LABEL_293:
    v189[650] = v200;
LABEL_294:
    v210 = 1 << *(_DWORD *)(v3 + 48);
    if (v210 == 2)
    {
      v222 = a1[2];
      v212 = *(_QWORD **)a1[1];
      v213 = *(_DWORD *)(v222 + 28) & 0xFFFFFLL;
      v214 = (uint64_t *)v212[653];
      v223 = v212[654];
      if ((unint64_t)v214 >= v223)
      {
        v216 = (uint64_t *)v212[652];
        v225 = v214 - v216;
        if (!((unint64_t)(v225 + 1) >> 61))
        {
          v226 = v223 - (_QWORD)v216;
          v227 = (uint64_t)(v223 - (_QWORD)v216) >> 2;
          if (v227 <= v225 + 1)
            v227 = v225 + 1;
          if (v226 >= 0x7FFFFFFFFFFFFFF8)
            v228 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v228 = v227;
          if (v228)
          {
            v229 = (char *)sub_40FC((uint64_t)(v212 + 654), v228);
            v214 = (uint64_t *)v212[653];
            v216 = (uint64_t *)v212[652];
          }
          else
          {
            v229 = 0;
          }
          v230 = (uint64_t *)&v229[8 * v225];
          v231 = &v229[8 * v228];
          *v230 = v213;
          v224 = v230 + 1;
          while (v214 != v216)
          {
            v233 = *--v214;
            *--v230 = v233;
          }
          goto LABEL_323;
        }
LABEL_328:
        sub_4074();
      }
    }
    else
    {
      if (v210 != 1)
      {
LABEL_326:
        *a2 = 1;
        return;
      }
      v211 = a1[2];
      v212 = *(_QWORD **)a1[1];
      v213 = *(_DWORD *)(v211 + 28) & 0xFFFFFLL;
      v214 = (uint64_t *)v212[653];
      v215 = v212[654];
      if ((unint64_t)v214 >= v215)
      {
        v216 = (uint64_t *)v212[652];
        v217 = v214 - v216;
        if (!((unint64_t)(v217 + 1) >> 61))
        {
          v218 = v215 - (_QWORD)v216;
          v219 = (uint64_t)(v215 - (_QWORD)v216) >> 2;
          if (v219 <= v217 + 1)
            v219 = v217 + 1;
          if (v218 >= 0x7FFFFFFFFFFFFFF8)
            v220 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v220 = v219;
          if (v220)
          {
            v221 = (char *)sub_40FC((uint64_t)(v212 + 654), v220);
            v214 = (uint64_t *)v212[653];
            v216 = (uint64_t *)v212[652];
          }
          else
          {
            v221 = 0;
          }
          v230 = (uint64_t *)&v221[8 * v217];
          v231 = &v221[8 * v220];
          *v230 = v213;
          v224 = v230 + 1;
          while (v214 != v216)
          {
            v232 = *--v214;
            *--v230 = v232;
          }
LABEL_323:
          v212[652] = v230;
          v212[653] = v224;
          v212[654] = v231;
          if (v216)
            operator delete(v216);
          goto LABEL_325;
        }
        goto LABEL_328;
      }
    }
    *v214 = v213;
    v224 = v214 + 1;
LABEL_325:
    v212[653] = v224;
    goto LABEL_326;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v17 = a1[2];
    v18 = *(_QWORD **)a1[1];
    *(_QWORD *)(v18[626] - 8) += *(_DWORD *)(v17 + 44) & 0xFFFFF;
    *(_QWORD *)(v18[629] - 8) += *(_DWORD *)(v17 + 48) & 0xFFFFF;
    *(_QWORD *)(v18[632] - 8) += *(_DWORD *)(v17 + 52) & 0xFFFFF;
    *(_QWORD *)(v18[635] - 8) += *(unsigned __int16 *)(v17 + 58);
    *(_QWORD *)(v18[638] - 8) += *(unsigned __int16 *)(v17 + 56);
    *(_QWORD *)(v18[641] - 8) += *(_DWORD *)(v17 + 32) & 0xFFFFF;
    *(_QWORD *)(v18[644] - 8) += *(_DWORD *)(v17 + 36) & 0xFFFFF;
    *(_QWORD *)(v18[647] - 8) += *(_DWORD *)(v17 + 40) & 0xFFFFF;
    *(_QWORD *)(v18[650] - 8) += *(_DWORD *)(v17 + 24) & 0xFFFFF;
    *(_QWORD *)(v18[653] - 8) += *(_DWORD *)(v17 + 28) & 0xFFFFF;
  }
}

void sub_146614(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  _WORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _WORD *v20;
  _QWORD *v21;
  _WORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  _QWORD *v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  unint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  _QWORD *v148;
  uint64_t v149;
  char *v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  _QWORD *v170;
  uint64_t v171;
  char *v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  _QWORD *v192;
  uint64_t v193;
  char *v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  unint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  _QWORD *v214;
  uint64_t v215;
  char *v216;
  unint64_t v217;
  char *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char *v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  _QWORD *v236;
  uint64_t v237;
  char *v238;
  unint64_t v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  unint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  char *v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  _QWORD *v258;
  uint64_t v259;
  char *v260;
  unint64_t v261;
  char *v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  char *v267;
  unint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  char *v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  _QWORD *v280;
  uint64_t v281;
  char *v282;
  unint64_t v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  unint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  char *v296;
  char *v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  _QWORD *v302;
  uint64_t v303;
  char *v304;
  unint64_t v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  char *v311;
  unint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  char *v318;
  char *v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  _QWORD *v324;
  uint64_t v325;
  char *v326;
  unint64_t v327;
  char *v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  char *v333;
  unint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  char *v340;
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  _QWORD *v346;
  uint64_t v347;
  char *v348;
  unint64_t v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  char *v355;
  unint64_t v356;
  _QWORD *v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  char *v362;
  char *v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  _QWORD *v368;
  uint64_t v369;
  char *v370;
  unint64_t v371;
  char *v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  char *v377;
  unint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  char *v384;
  char *v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  _QWORD *v390;
  uint64_t v391;
  char *v392;
  unint64_t v393;
  char *v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  unint64_t v398;
  char *v399;
  unint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  char *v406;
  char *v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  _QWORD *v412;
  uint64_t v413;
  char *v414;
  unint64_t v415;
  char *v416;
  uint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  char *v421;
  unint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  char *v428;
  char *v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  _QWORD *v434;
  uint64_t v435;
  char *v436;
  unint64_t v437;
  char *v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  char *v443;
  unint64_t v444;
  _QWORD *v445;
  uint64_t v446;
  unint64_t v447;
  unint64_t v448;
  unint64_t v449;
  char *v450;
  char *v451;
  char *v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  _QWORD *v456;
  uint64_t v457;
  char *v458;
  unint64_t v459;
  char *v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  char *v465;
  unint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  char *v472;
  char *v473;
  char *v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  _QWORD *v478;
  uint64_t v479;
  char *v480;
  unint64_t v481;
  char *v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  char *v487;
  unint64_t v488;
  _QWORD *v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  char *v494;
  char *v495;
  char *v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  _QWORD *v500;
  uint64_t v501;
  char *v502;
  unint64_t v503;
  char *v504;
  uint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t v508;
  char *v509;
  unint64_t v510;
  _QWORD *v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  char *v516;
  char *v517;
  char *v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  _QWORD *v522;
  uint64_t v523;
  char *v524;
  unint64_t v525;
  char *v526;
  uint64_t v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  char *v531;
  unint64_t v532;
  _QWORD *v533;
  uint64_t v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t v537;
  char *v538;
  char *v539;
  char *v540;
  uint64_t v541;
  uint64_t v542;
  int v543;
  _QWORD *v544;
  uint64_t v545;
  char *v546;
  unint64_t v547;
  char *v548;
  uint64_t v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  char *v553;
  unint64_t v554;
  _QWORD *v555;
  uint64_t v556;
  unint64_t v557;
  unint64_t v558;
  unint64_t v559;
  char *v560;
  char *v561;
  char *v562;
  uint64_t v563;
  uint64_t v564;
  int v565;
  _QWORD *v566;
  uint64_t v567;
  char *v568;
  unint64_t v569;
  char *v570;
  uint64_t v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  char *v575;
  unint64_t v576;
  _QWORD *v577;
  uint64_t v578;
  unint64_t v579;
  unint64_t v580;
  unint64_t v581;
  char *v582;
  char *v583;
  char *v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  _QWORD *v588;
  uint64_t v589;
  char *v590;
  unint64_t v591;
  char *v592;
  uint64_t v593;
  unint64_t v594;
  unint64_t v595;
  unint64_t v596;
  char *v597;
  unint64_t v598;
  _QWORD *v599;
  uint64_t v600;
  unint64_t v601;
  unint64_t v602;
  unint64_t v603;
  char *v604;
  char *v605;
  char *v606;
  uint64_t v607;
  uint64_t v608;
  int v609;
  _QWORD *v610;
  uint64_t v611;
  char *v612;
  unint64_t v613;
  char *v614;
  uint64_t v615;
  unint64_t v616;
  unint64_t v617;
  unint64_t v618;
  char *v619;
  unint64_t v620;
  _QWORD *v621;
  uint64_t v622;
  unint64_t v623;
  unint64_t v624;
  unint64_t v625;
  char *v626;
  char *v627;
  char *v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  _QWORD *v632;
  uint64_t v633;
  char *v634;
  unint64_t v635;
  char *v636;
  uint64_t v637;
  unint64_t v638;
  unint64_t v639;
  unint64_t v640;
  char *v641;
  unint64_t v642;
  _QWORD *v643;
  uint64_t v644;
  unint64_t v645;
  unint64_t v646;
  unint64_t v647;
  char *v648;
  char *v649;
  char *v650;
  uint64_t v651;
  uint64_t v652;
  int v653;
  _QWORD *v654;
  uint64_t v655;
  char *v656;
  unint64_t v657;
  char *v658;
  uint64_t v659;
  unint64_t v660;
  unint64_t v661;
  unint64_t v662;
  char *v663;
  unint64_t v664;
  _QWORD *v665;
  uint64_t v666;
  unint64_t v667;
  unint64_t v668;
  unint64_t v669;
  char *v670;
  char *v671;
  char *v672;
  uint64_t v673;
  uint64_t v674;
  int v675;
  _QWORD *v676;
  uint64_t v677;
  char *v678;
  unint64_t v679;
  char *v680;
  uint64_t v681;
  unint64_t v682;
  unint64_t v683;
  unint64_t v684;
  char *v685;
  unint64_t v686;
  _QWORD *v687;
  uint64_t v688;
  unint64_t v689;
  unint64_t v690;
  unint64_t v691;
  char *v692;
  char *v693;
  char *v694;
  uint64_t v695;
  uint64_t v696;
  int v697;
  uint64_t v698;
  _QWORD *v699;
  uint64_t v700;
  char *v701;
  unint64_t v702;
  char *v703;
  uint64_t v704;
  unint64_t v705;
  unint64_t v706;
  unint64_t v707;
  char *v708;
  uint64_t v709;
  unint64_t v710;
  _QWORD *v711;
  uint64_t v712;
  unint64_t v713;
  unint64_t v714;
  unint64_t v715;
  char *v716;
  char *v717;
  char *v718;
  uint64_t v719;
  uint64_t v720;

  v3 = *a1;
  if (*a2 != 1)
  {
    if (*a2)
      return;
    v5 = 1 << *(_DWORD *)(v3 + 48);
    if (v5 == 2)
    {
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      v8 = (char *)v6[197];
      v26 = v6[198];
      if ((unint64_t)v8 >= v26)
      {
        v10 = (char *)v6[196];
        v28 = (v8 - v10) >> 3;
        if ((unint64_t)(v28 + 1) >> 61)
          goto LABEL_1032;
        v29 = v26 - (_QWORD)v10;
        v30 = (uint64_t)(v26 - (_QWORD)v10) >> 2;
        if (v30 <= v28 + 1)
          v30 = v28 + 1;
        if (v29 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
        {
          v32 = (char *)sub_40FC((uint64_t)(v6 + 198), v31);
          v8 = (char *)v6[197];
          v10 = (char *)v6[196];
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[8 * v28];
        v34 = &v32[8 * v31];
        *(_QWORD *)v33 = v7;
        v27 = v33 + 8;
        while (v8 != v10)
        {
          v36 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v33 - 1) = v36;
          v33 -= 8;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (v5 != 1)
        goto LABEL_38;
      v6 = *(_QWORD **)a1[1];
      v7 = *(_WORD *)(a1[2] + 34) & 0x7FFF;
      v8 = (char *)v6[197];
      v9 = v6[198];
      if ((unint64_t)v8 >= v9)
      {
        v10 = (char *)v6[196];
        v11 = (v8 - v10) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_1032;
        v12 = v9 - (_QWORD)v10;
        v13 = (uint64_t)(v9 - (_QWORD)v10) >> 2;
        if (v13 <= v11 + 1)
          v13 = v11 + 1;
        if (v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)sub_40FC((uint64_t)(v6 + 198), v14);
          v8 = (char *)v6[197];
          v10 = (char *)v6[196];
        }
        else
        {
          v15 = 0;
        }
        v33 = &v15[8 * v11];
        v34 = &v15[8 * v14];
        *(_QWORD *)v33 = v7;
        v27 = v33 + 8;
        while (v8 != v10)
        {
          v35 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v33 - 1) = v35;
          v33 -= 8;
        }
LABEL_35:
        v6[196] = v33;
        v6[197] = v27;
        v6[198] = v34;
        if (v10)
          operator delete(v10);
        goto LABEL_37;
      }
    }
    *(_QWORD *)v8 = v7;
    v27 = v8 + 8;
LABEL_37:
    v6[197] = v27;
LABEL_38:
    v37 = 1 << *(_DWORD *)(v3 + 48);
    if (v37 == 2)
    {
      v38 = *(_QWORD **)a1[1];
      v39 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v40 = (char *)v38[200];
      v48 = v38[201];
      if ((unint64_t)v40 >= v48)
      {
        v42 = (char *)v38[199];
        v50 = (v40 - v42) >> 3;
        if ((unint64_t)(v50 + 1) >> 61)
          goto LABEL_1032;
        v51 = v48 - (_QWORD)v42;
        v52 = (uint64_t)(v48 - (_QWORD)v42) >> 2;
        if (v52 <= v50 + 1)
          v52 = v50 + 1;
        if (v51 >= 0x7FFFFFFFFFFFFFF8)
          v53 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
        {
          v54 = (char *)sub_40FC((uint64_t)(v38 + 201), v53);
          v40 = (char *)v38[200];
          v42 = (char *)v38[199];
        }
        else
        {
          v54 = 0;
        }
        v55 = &v54[8 * v50];
        v56 = &v54[8 * v53];
        *(_QWORD *)v55 = v39;
        v49 = v55 + 8;
        while (v40 != v42)
        {
          v58 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *((_QWORD *)v55 - 1) = v58;
          v55 -= 8;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if (v37 != 1)
        goto LABEL_70;
      v38 = *(_QWORD **)a1[1];
      v39 = *(_WORD *)(a1[2] + 26) & 0x7FFF;
      v40 = (char *)v38[200];
      v41 = v38[201];
      if ((unint64_t)v40 >= v41)
      {
        v42 = (char *)v38[199];
        v43 = (v40 - v42) >> 3;
        if ((unint64_t)(v43 + 1) >> 61)
          goto LABEL_1032;
        v44 = v41 - (_QWORD)v42;
        v45 = (uint64_t)(v41 - (_QWORD)v42) >> 2;
        if (v45 <= v43 + 1)
          v45 = v43 + 1;
        if (v44 >= 0x7FFFFFFFFFFFFFF8)
          v46 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)sub_40FC((uint64_t)(v38 + 201), v46);
          v40 = (char *)v38[200];
          v42 = (char *)v38[199];
        }
        else
        {
          v47 = 0;
        }
        v55 = &v47[8 * v43];
        v56 = &v47[8 * v46];
        *(_QWORD *)v55 = v39;
        v49 = v55 + 8;
        while (v40 != v42)
        {
          v57 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *((_QWORD *)v55 - 1) = v57;
          v55 -= 8;
        }
LABEL_67:
        v38[199] = v55;
        v38[200] = v49;
        v38[201] = v56;
        if (v42)
          operator delete(v42);
        goto LABEL_69;
      }
    }
    *(_QWORD *)v40 = v39;
    v49 = v40 + 8;
LABEL_69:
    v38[200] = v49;
LABEL_70:
    v59 = 1 << *(_DWORD *)(v3 + 48);
    if (v59 == 2)
    {
      v60 = *(_QWORD **)a1[1];
      v61 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      v62 = (char *)v60[203];
      v70 = v60[204];
      if ((unint64_t)v62 >= v70)
      {
        v64 = (char *)v60[202];
        v72 = (v62 - v64) >> 3;
        if ((unint64_t)(v72 + 1) >> 61)
          goto LABEL_1032;
        v73 = v70 - (_QWORD)v64;
        v74 = (uint64_t)(v70 - (_QWORD)v64) >> 2;
        if (v74 <= v72 + 1)
          v74 = v72 + 1;
        if (v73 >= 0x7FFFFFFFFFFFFFF8)
          v75 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v75 = v74;
        if (v75)
        {
          v76 = (char *)sub_40FC((uint64_t)(v60 + 204), v75);
          v62 = (char *)v60[203];
          v64 = (char *)v60[202];
        }
        else
        {
          v76 = 0;
        }
        v77 = &v76[8 * v72];
        v78 = &v76[8 * v75];
        *(_QWORD *)v77 = v61;
        v71 = v77 + 8;
        while (v62 != v64)
        {
          v80 = *((_QWORD *)v62 - 1);
          v62 -= 8;
          *((_QWORD *)v77 - 1) = v80;
          v77 -= 8;
        }
        goto LABEL_99;
      }
    }
    else
    {
      if (v59 != 1)
        goto LABEL_102;
      v60 = *(_QWORD **)a1[1];
      v61 = *(_WORD *)(a1[2] + 36) & 0x7FFF;
      v62 = (char *)v60[203];
      v63 = v60[204];
      if ((unint64_t)v62 >= v63)
      {
        v64 = (char *)v60[202];
        v65 = (v62 - v64) >> 3;
        if ((unint64_t)(v65 + 1) >> 61)
          goto LABEL_1032;
        v66 = v63 - (_QWORD)v64;
        v67 = (uint64_t)(v63 - (_QWORD)v64) >> 2;
        if (v67 <= v65 + 1)
          v67 = v65 + 1;
        if (v66 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          v69 = (char *)sub_40FC((uint64_t)(v60 + 204), v68);
          v62 = (char *)v60[203];
          v64 = (char *)v60[202];
        }
        else
        {
          v69 = 0;
        }
        v77 = &v69[8 * v65];
        v78 = &v69[8 * v68];
        *(_QWORD *)v77 = v61;
        v71 = v77 + 8;
        while (v62 != v64)
        {
          v79 = *((_QWORD *)v62 - 1);
          v62 -= 8;
          *((_QWORD *)v77 - 1) = v79;
          v77 -= 8;
        }
LABEL_99:
        v60[202] = v77;
        v60[203] = v71;
        v60[204] = v78;
        if (v64)
          operator delete(v64);
        goto LABEL_101;
      }
    }
    *(_QWORD *)v62 = v61;
    v71 = v62 + 8;
LABEL_101:
    v60[203] = v71;
LABEL_102:
    v81 = 1 << *(_DWORD *)(v3 + 48);
    if (v81 == 2)
    {
      v82 = *(_QWORD **)a1[1];
      v83 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v84 = (char *)v82[206];
      v92 = v82[207];
      if ((unint64_t)v84 >= v92)
      {
        v86 = (char *)v82[205];
        v94 = (v84 - v86) >> 3;
        if ((unint64_t)(v94 + 1) >> 61)
          goto LABEL_1032;
        v95 = v92 - (_QWORD)v86;
        v96 = (uint64_t)(v92 - (_QWORD)v86) >> 2;
        if (v96 <= v94 + 1)
          v96 = v94 + 1;
        if (v95 >= 0x7FFFFFFFFFFFFFF8)
          v97 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v97 = v96;
        if (v97)
        {
          v98 = (char *)sub_40FC((uint64_t)(v82 + 207), v97);
          v84 = (char *)v82[206];
          v86 = (char *)v82[205];
        }
        else
        {
          v98 = 0;
        }
        v99 = &v98[8 * v94];
        v100 = &v98[8 * v97];
        *(_QWORD *)v99 = v83;
        v93 = v99 + 8;
        while (v84 != v86)
        {
          v102 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *((_QWORD *)v99 - 1) = v102;
          v99 -= 8;
        }
        goto LABEL_131;
      }
    }
    else
    {
      if (v81 != 1)
        goto LABEL_134;
      v82 = *(_QWORD **)a1[1];
      v83 = *(_WORD *)(a1[2] + 28) & 0x7FFF;
      v84 = (char *)v82[206];
      v85 = v82[207];
      if ((unint64_t)v84 >= v85)
      {
        v86 = (char *)v82[205];
        v87 = (v84 - v86) >> 3;
        if ((unint64_t)(v87 + 1) >> 61)
          goto LABEL_1032;
        v88 = v85 - (_QWORD)v86;
        v89 = (uint64_t)(v85 - (_QWORD)v86) >> 2;
        if (v89 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v91 = (char *)sub_40FC((uint64_t)(v82 + 207), v90);
          v84 = (char *)v82[206];
          v86 = (char *)v82[205];
        }
        else
        {
          v91 = 0;
        }
        v99 = &v91[8 * v87];
        v100 = &v91[8 * v90];
        *(_QWORD *)v99 = v83;
        v93 = v99 + 8;
        while (v84 != v86)
        {
          v101 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *((_QWORD *)v99 - 1) = v101;
          v99 -= 8;
        }
LABEL_131:
        v82[205] = v99;
        v82[206] = v93;
        v82[207] = v100;
        if (v86)
          operator delete(v86);
        goto LABEL_133;
      }
    }
    *(_QWORD *)v84 = v83;
    v93 = v84 + 8;
LABEL_133:
    v82[206] = v93;
LABEL_134:
    v103 = 1 << *(_DWORD *)(v3 + 48);
    if (v103 == 2)
    {
      v104 = *(_QWORD **)a1[1];
      v105 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      v106 = (char *)v104[209];
      v114 = v104[210];
      if ((unint64_t)v106 >= v114)
      {
        v108 = (char *)v104[208];
        v116 = (v106 - v108) >> 3;
        if ((unint64_t)(v116 + 1) >> 61)
          goto LABEL_1032;
        v117 = v114 - (_QWORD)v108;
        v118 = (uint64_t)(v114 - (_QWORD)v108) >> 2;
        if (v118 <= v116 + 1)
          v118 = v116 + 1;
        if (v117 >= 0x7FFFFFFFFFFFFFF8)
          v119 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v119 = v118;
        if (v119)
        {
          v120 = (char *)sub_40FC((uint64_t)(v104 + 210), v119);
          v106 = (char *)v104[209];
          v108 = (char *)v104[208];
        }
        else
        {
          v120 = 0;
        }
        v121 = &v120[8 * v116];
        v122 = &v120[8 * v119];
        *(_QWORD *)v121 = v105;
        v115 = v121 + 8;
        while (v106 != v108)
        {
          v124 = *((_QWORD *)v106 - 1);
          v106 -= 8;
          *((_QWORD *)v121 - 1) = v124;
          v121 -= 8;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (v103 != 1)
        goto LABEL_166;
      v104 = *(_QWORD **)a1[1];
      v105 = *(_WORD *)(a1[2] + 38) & 0x7FFF;
      v106 = (char *)v104[209];
      v107 = v104[210];
      if ((unint64_t)v106 >= v107)
      {
        v108 = (char *)v104[208];
        v109 = (v106 - v108) >> 3;
        if ((unint64_t)(v109 + 1) >> 61)
          goto LABEL_1032;
        v110 = v107 - (_QWORD)v108;
        v111 = (uint64_t)(v107 - (_QWORD)v108) >> 2;
        if (v111 <= v109 + 1)
          v111 = v109 + 1;
        if (v110 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v111;
        if (v112)
        {
          v113 = (char *)sub_40FC((uint64_t)(v104 + 210), v112);
          v106 = (char *)v104[209];
          v108 = (char *)v104[208];
        }
        else
        {
          v113 = 0;
        }
        v121 = &v113[8 * v109];
        v122 = &v113[8 * v112];
        *(_QWORD *)v121 = v105;
        v115 = v121 + 8;
        while (v106 != v108)
        {
          v123 = *((_QWORD *)v106 - 1);
          v106 -= 8;
          *((_QWORD *)v121 - 1) = v123;
          v121 -= 8;
        }
LABEL_163:
        v104[208] = v121;
        v104[209] = v115;
        v104[210] = v122;
        if (v108)
          operator delete(v108);
        goto LABEL_165;
      }
    }
    *(_QWORD *)v106 = v105;
    v115 = v106 + 8;
LABEL_165:
    v104[209] = v115;
LABEL_166:
    v125 = 1 << *(_DWORD *)(v3 + 48);
    if (v125 == 2)
    {
      v126 = *(_QWORD **)a1[1];
      v127 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v128 = (char *)v126[212];
      v136 = v126[213];
      if ((unint64_t)v128 >= v136)
      {
        v130 = (char *)v126[211];
        v138 = (v128 - v130) >> 3;
        if ((unint64_t)(v138 + 1) >> 61)
          goto LABEL_1032;
        v139 = v136 - (_QWORD)v130;
        v140 = (uint64_t)(v136 - (_QWORD)v130) >> 2;
        if (v140 <= v138 + 1)
          v140 = v138 + 1;
        if (v139 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v140;
        if (v141)
        {
          v142 = (char *)sub_40FC((uint64_t)(v126 + 213), v141);
          v128 = (char *)v126[212];
          v130 = (char *)v126[211];
        }
        else
        {
          v142 = 0;
        }
        v143 = &v142[8 * v138];
        v144 = &v142[8 * v141];
        *(_QWORD *)v143 = v127;
        v137 = v143 + 8;
        while (v128 != v130)
        {
          v146 = *((_QWORD *)v128 - 1);
          v128 -= 8;
          *((_QWORD *)v143 - 1) = v146;
          v143 -= 8;
        }
        goto LABEL_195;
      }
    }
    else
    {
      if (v125 != 1)
        goto LABEL_198;
      v126 = *(_QWORD **)a1[1];
      v127 = *(_WORD *)(a1[2] + 30) & 0x7FFF;
      v128 = (char *)v126[212];
      v129 = v126[213];
      if ((unint64_t)v128 >= v129)
      {
        v130 = (char *)v126[211];
        v131 = (v128 - v130) >> 3;
        if ((unint64_t)(v131 + 1) >> 61)
          goto LABEL_1032;
        v132 = v129 - (_QWORD)v130;
        v133 = (uint64_t)(v129 - (_QWORD)v130) >> 2;
        if (v133 <= v131 + 1)
          v133 = v131 + 1;
        if (v132 >= 0x7FFFFFFFFFFFFFF8)
          v134 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v134 = v133;
        if (v134)
        {
          v135 = (char *)sub_40FC((uint64_t)(v126 + 213), v134);
          v128 = (char *)v126[212];
          v130 = (char *)v126[211];
        }
        else
        {
          v135 = 0;
        }
        v143 = &v135[8 * v131];
        v144 = &v135[8 * v134];
        *(_QWORD *)v143 = v127;
        v137 = v143 + 8;
        while (v128 != v130)
        {
          v145 = *((_QWORD *)v128 - 1);
          v128 -= 8;
          *((_QWORD *)v143 - 1) = v145;
          v143 -= 8;
        }
LABEL_195:
        v126[211] = v143;
        v126[212] = v137;
        v126[213] = v144;
        if (v130)
          operator delete(v130);
        goto LABEL_197;
      }
    }
    *(_QWORD *)v128 = v127;
    v137 = v128 + 8;
LABEL_197:
    v126[212] = v137;
LABEL_198:
    v147 = 1 << *(_DWORD *)(v3 + 48);
    if (v147 == 2)
    {
      v148 = *(_QWORD **)a1[1];
      v149 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v150 = (char *)v148[215];
      v158 = v148[216];
      if ((unint64_t)v150 >= v158)
      {
        v152 = (char *)v148[214];
        v160 = (v150 - v152) >> 3;
        if ((unint64_t)(v160 + 1) >> 61)
          goto LABEL_1032;
        v161 = v158 - (_QWORD)v152;
        v162 = (uint64_t)(v158 - (_QWORD)v152) >> 2;
        if (v162 <= v160 + 1)
          v162 = v160 + 1;
        if (v161 >= 0x7FFFFFFFFFFFFFF8)
          v163 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v163 = v162;
        if (v163)
        {
          v164 = (char *)sub_40FC((uint64_t)(v148 + 216), v163);
          v150 = (char *)v148[215];
          v152 = (char *)v148[214];
        }
        else
        {
          v164 = 0;
        }
        v165 = &v164[8 * v160];
        v166 = &v164[8 * v163];
        *(_QWORD *)v165 = v149;
        v159 = v165 + 8;
        while (v150 != v152)
        {
          v168 = *((_QWORD *)v150 - 1);
          v150 -= 8;
          *((_QWORD *)v165 - 1) = v168;
          v165 -= 8;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (v147 != 1)
        goto LABEL_230;
      v148 = *(_QWORD **)a1[1];
      v149 = *(_WORD *)(a1[2] + 40) & 0x7FFF;
      v150 = (char *)v148[215];
      v151 = v148[216];
      if ((unint64_t)v150 >= v151)
      {
        v152 = (char *)v148[214];
        v153 = (v150 - v152) >> 3;
        if ((unint64_t)(v153 + 1) >> 61)
          goto LABEL_1032;
        v154 = v151 - (_QWORD)v152;
        v155 = (uint64_t)(v151 - (_QWORD)v152) >> 2;
        if (v155 <= v153 + 1)
          v155 = v153 + 1;
        if (v154 >= 0x7FFFFFFFFFFFFFF8)
          v156 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v156 = v155;
        if (v156)
        {
          v157 = (char *)sub_40FC((uint64_t)(v148 + 216), v156);
          v150 = (char *)v148[215];
          v152 = (char *)v148[214];
        }
        else
        {
          v157 = 0;
        }
        v165 = &v157[8 * v153];
        v166 = &v157[8 * v156];
        *(_QWORD *)v165 = v149;
        v159 = v165 + 8;
        while (v150 != v152)
        {
          v167 = *((_QWORD *)v150 - 1);
          v150 -= 8;
          *((_QWORD *)v165 - 1) = v167;
          v165 -= 8;
        }
LABEL_227:
        v148[214] = v165;
        v148[215] = v159;
        v148[216] = v166;
        if (v152)
          operator delete(v152);
        goto LABEL_229;
      }
    }
    *(_QWORD *)v150 = v149;
    v159 = v150 + 8;
LABEL_229:
    v148[215] = v159;
LABEL_230:
    v169 = 1 << *(_DWORD *)(v3 + 48);
    if (v169 == 2)
    {
      v170 = *(_QWORD **)a1[1];
      v171 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      v172 = (char *)v170[218];
      v180 = v170[219];
      if ((unint64_t)v172 >= v180)
      {
        v174 = (char *)v170[217];
        v182 = (v172 - v174) >> 3;
        if ((unint64_t)(v182 + 1) >> 61)
          goto LABEL_1032;
        v183 = v180 - (_QWORD)v174;
        v184 = (uint64_t)(v180 - (_QWORD)v174) >> 2;
        if (v184 <= v182 + 1)
          v184 = v182 + 1;
        if (v183 >= 0x7FFFFFFFFFFFFFF8)
          v185 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v185 = v184;
        if (v185)
        {
          v186 = (char *)sub_40FC((uint64_t)(v170 + 219), v185);
          v172 = (char *)v170[218];
          v174 = (char *)v170[217];
        }
        else
        {
          v186 = 0;
        }
        v187 = &v186[8 * v182];
        v188 = &v186[8 * v185];
        *(_QWORD *)v187 = v171;
        v181 = v187 + 8;
        while (v172 != v174)
        {
          v190 = *((_QWORD *)v172 - 1);
          v172 -= 8;
          *((_QWORD *)v187 - 1) = v190;
          v187 -= 8;
        }
        goto LABEL_259;
      }
    }
    else
    {
      if (v169 != 1)
        goto LABEL_262;
      v170 = *(_QWORD **)a1[1];
      v171 = *(_WORD *)(a1[2] + 32) & 0x7FFF;
      v172 = (char *)v170[218];
      v173 = v170[219];
      if ((unint64_t)v172 >= v173)
      {
        v174 = (char *)v170[217];
        v175 = (v172 - v174) >> 3;
        if ((unint64_t)(v175 + 1) >> 61)
          goto LABEL_1032;
        v176 = v173 - (_QWORD)v174;
        v177 = (uint64_t)(v173 - (_QWORD)v174) >> 2;
        if (v177 <= v175 + 1)
          v177 = v175 + 1;
        if (v176 >= 0x7FFFFFFFFFFFFFF8)
          v178 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v178 = v177;
        if (v178)
        {
          v179 = (char *)sub_40FC((uint64_t)(v170 + 219), v178);
          v172 = (char *)v170[218];
          v174 = (char *)v170[217];
        }
        else
        {
          v179 = 0;
        }
        v187 = &v179[8 * v175];
        v188 = &v179[8 * v178];
        *(_QWORD *)v187 = v171;
        v181 = v187 + 8;
        while (v172 != v174)
        {
          v189 = *((_QWORD *)v172 - 1);
          v172 -= 8;
          *((_QWORD *)v187 - 1) = v189;
          v187 -= 8;
        }
LABEL_259:
        v170[217] = v187;
        v170[218] = v181;
        v170[219] = v188;
        if (v174)
          operator delete(v174);
        goto LABEL_261;
      }
    }
    *(_QWORD *)v172 = v171;
    v181 = v172 + 8;
LABEL_261:
    v170[218] = v181;
LABEL_262:
    v191 = 1 << *(_DWORD *)(v3 + 48);
    if (v191 == 2)
    {
      v192 = *(_QWORD **)a1[1];
      v193 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
      v194 = (char *)v192[221];
      v202 = v192[222];
      if ((unint64_t)v194 >= v202)
      {
        v196 = (char *)v192[220];
        v204 = (v194 - v196) >> 3;
        if ((unint64_t)(v204 + 1) >> 61)
          goto LABEL_1032;
        v205 = v202 - (_QWORD)v196;
        v206 = (uint64_t)(v202 - (_QWORD)v196) >> 2;
        if (v206 <= v204 + 1)
          v206 = v204 + 1;
        if (v205 >= 0x7FFFFFFFFFFFFFF8)
          v207 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v207 = v206;
        if (v207)
        {
          v208 = (char *)sub_40FC((uint64_t)(v192 + 222), v207);
          v194 = (char *)v192[221];
          v196 = (char *)v192[220];
        }
        else
        {
          v208 = 0;
        }
        v209 = &v208[8 * v204];
        v210 = &v208[8 * v207];
        *(_QWORD *)v209 = v193;
        v203 = v209 + 8;
        while (v194 != v196)
        {
          v212 = *((_QWORD *)v194 - 1);
          v194 -= 8;
          *((_QWORD *)v209 - 1) = v212;
          v209 -= 8;
        }
        goto LABEL_291;
      }
    }
    else
    {
      if (v191 != 1)
        goto LABEL_294;
      v192 = *(_QWORD **)a1[1];
      v193 = *(_WORD *)(a1[2] + 50) & 0x7FFF;
      v194 = (char *)v192[221];
      v195 = v192[222];
      if ((unint64_t)v194 >= v195)
      {
        v196 = (char *)v192[220];
        v197 = (v194 - v196) >> 3;
        if ((unint64_t)(v197 + 1) >> 61)
          goto LABEL_1032;
        v198 = v195 - (_QWORD)v196;
        v199 = (uint64_t)(v195 - (_QWORD)v196) >> 2;
        if (v199 <= v197 + 1)
          v199 = v197 + 1;
        if (v198 >= 0x7FFFFFFFFFFFFFF8)
          v200 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v200 = v199;
        if (v200)
        {
          v201 = (char *)sub_40FC((uint64_t)(v192 + 222), v200);
          v194 = (char *)v192[221];
          v196 = (char *)v192[220];
        }
        else
        {
          v201 = 0;
        }
        v209 = &v201[8 * v197];
        v210 = &v201[8 * v200];
        *(_QWORD *)v209 = v193;
        v203 = v209 + 8;
        while (v194 != v196)
        {
          v211 = *((_QWORD *)v194 - 1);
          v194 -= 8;
          *((_QWORD *)v209 - 1) = v211;
          v209 -= 8;
        }
LABEL_291:
        v192[220] = v209;
        v192[221] = v203;
        v192[222] = v210;
        if (v196)
          operator delete(v196);
        goto LABEL_293;
      }
    }
    *(_QWORD *)v194 = v193;
    v203 = v194 + 8;
LABEL_293:
    v192[221] = v203;
LABEL_294:
    v213 = 1 << *(_DWORD *)(v3 + 48);
    if (v213 == 2)
    {
      v214 = *(_QWORD **)a1[1];
      v215 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      v216 = (char *)v214[224];
      v224 = v214[225];
      if ((unint64_t)v216 >= v224)
      {
        v218 = (char *)v214[223];
        v226 = (v216 - v218) >> 3;
        if ((unint64_t)(v226 + 1) >> 61)
          goto LABEL_1032;
        v227 = v224 - (_QWORD)v218;
        v228 = (uint64_t)(v224 - (_QWORD)v218) >> 2;
        if (v228 <= v226 + 1)
          v228 = v226 + 1;
        if (v227 >= 0x7FFFFFFFFFFFFFF8)
          v229 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v229 = v228;
        if (v229)
        {
          v230 = (char *)sub_40FC((uint64_t)(v214 + 225), v229);
          v216 = (char *)v214[224];
          v218 = (char *)v214[223];
        }
        else
        {
          v230 = 0;
        }
        v231 = &v230[8 * v226];
        v232 = &v230[8 * v229];
        *(_QWORD *)v231 = v215;
        v225 = v231 + 8;
        while (v216 != v218)
        {
          v234 = *((_QWORD *)v216 - 1);
          v216 -= 8;
          *((_QWORD *)v231 - 1) = v234;
          v231 -= 8;
        }
        goto LABEL_323;
      }
    }
    else
    {
      if (v213 != 1)
        goto LABEL_326;
      v214 = *(_QWORD **)a1[1];
      v215 = *(_WORD *)(a1[2] + 42) & 0x7FFF;
      v216 = (char *)v214[224];
      v217 = v214[225];
      if ((unint64_t)v216 >= v217)
      {
        v218 = (char *)v214[223];
        v219 = (v216 - v218) >> 3;
        if ((unint64_t)(v219 + 1) >> 61)
          goto LABEL_1032;
        v220 = v217 - (_QWORD)v218;
        v221 = (uint64_t)(v217 - (_QWORD)v218) >> 2;
        if (v221 <= v219 + 1)
          v221 = v219 + 1;
        if (v220 >= 0x7FFFFFFFFFFFFFF8)
          v222 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v222 = v221;
        if (v222)
        {
          v223 = (char *)sub_40FC((uint64_t)(v214 + 225), v222);
          v216 = (char *)v214[224];
          v218 = (char *)v214[223];
        }
        else
        {
          v223 = 0;
        }
        v231 = &v223[8 * v219];
        v232 = &v223[8 * v222];
        *(_QWORD *)v231 = v215;
        v225 = v231 + 8;
        while (v216 != v218)
        {
          v233 = *((_QWORD *)v216 - 1);
          v216 -= 8;
          *((_QWORD *)v231 - 1) = v233;
          v231 -= 8;
        }
LABEL_323:
        v214[223] = v231;
        v214[224] = v225;
        v214[225] = v232;
        if (v218)
          operator delete(v218);
        goto LABEL_325;
      }
    }
    *(_QWORD *)v216 = v215;
    v225 = v216 + 8;
LABEL_325:
    v214[224] = v225;
LABEL_326:
    v235 = 1 << *(_DWORD *)(v3 + 48);
    if (v235 == 2)
    {
      v236 = *(_QWORD **)a1[1];
      v237 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
      v238 = (char *)v236[227];
      v246 = v236[228];
      if ((unint64_t)v238 >= v246)
      {
        v240 = (char *)v236[226];
        v248 = (v238 - v240) >> 3;
        if ((unint64_t)(v248 + 1) >> 61)
          goto LABEL_1032;
        v249 = v246 - (_QWORD)v240;
        v250 = (uint64_t)(v246 - (_QWORD)v240) >> 2;
        if (v250 <= v248 + 1)
          v250 = v248 + 1;
        if (v249 >= 0x7FFFFFFFFFFFFFF8)
          v251 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v251 = v250;
        if (v251)
        {
          v252 = (char *)sub_40FC((uint64_t)(v236 + 228), v251);
          v238 = (char *)v236[227];
          v240 = (char *)v236[226];
        }
        else
        {
          v252 = 0;
        }
        v253 = &v252[8 * v248];
        v254 = &v252[8 * v251];
        *(_QWORD *)v253 = v237;
        v247 = v253 + 8;
        while (v238 != v240)
        {
          v256 = *((_QWORD *)v238 - 1);
          v238 -= 8;
          *((_QWORD *)v253 - 1) = v256;
          v253 -= 8;
        }
        goto LABEL_355;
      }
    }
    else
    {
      if (v235 != 1)
        goto LABEL_358;
      v236 = *(_QWORD **)a1[1];
      v237 = *(_WORD *)(a1[2] + 52) & 0x7FFF;
      v238 = (char *)v236[227];
      v239 = v236[228];
      if ((unint64_t)v238 >= v239)
      {
        v240 = (char *)v236[226];
        v241 = (v238 - v240) >> 3;
        if ((unint64_t)(v241 + 1) >> 61)
          goto LABEL_1032;
        v242 = v239 - (_QWORD)v240;
        v243 = (uint64_t)(v239 - (_QWORD)v240) >> 2;
        if (v243 <= v241 + 1)
          v243 = v241 + 1;
        if (v242 >= 0x7FFFFFFFFFFFFFF8)
          v244 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v244 = v243;
        if (v244)
        {
          v245 = (char *)sub_40FC((uint64_t)(v236 + 228), v244);
          v238 = (char *)v236[227];
          v240 = (char *)v236[226];
        }
        else
        {
          v245 = 0;
        }
        v253 = &v245[8 * v241];
        v254 = &v245[8 * v244];
        *(_QWORD *)v253 = v237;
        v247 = v253 + 8;
        while (v238 != v240)
        {
          v255 = *((_QWORD *)v238 - 1);
          v238 -= 8;
          *((_QWORD *)v253 - 1) = v255;
          v253 -= 8;
        }
LABEL_355:
        v236[226] = v253;
        v236[227] = v247;
        v236[228] = v254;
        if (v240)
          operator delete(v240);
        goto LABEL_357;
      }
    }
    *(_QWORD *)v238 = v237;
    v247 = v238 + 8;
LABEL_357:
    v236[227] = v247;
LABEL_358:
    v257 = 1 << *(_DWORD *)(v3 + 48);
    if (v257 == 2)
    {
      v258 = *(_QWORD **)a1[1];
      v259 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      v260 = (char *)v258[230];
      v268 = v258[231];
      if ((unint64_t)v260 >= v268)
      {
        v262 = (char *)v258[229];
        v270 = (v260 - v262) >> 3;
        if ((unint64_t)(v270 + 1) >> 61)
          goto LABEL_1032;
        v271 = v268 - (_QWORD)v262;
        v272 = (uint64_t)(v268 - (_QWORD)v262) >> 2;
        if (v272 <= v270 + 1)
          v272 = v270 + 1;
        if (v271 >= 0x7FFFFFFFFFFFFFF8)
          v273 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v273 = v272;
        if (v273)
        {
          v274 = (char *)sub_40FC((uint64_t)(v258 + 231), v273);
          v260 = (char *)v258[230];
          v262 = (char *)v258[229];
        }
        else
        {
          v274 = 0;
        }
        v275 = &v274[8 * v270];
        v276 = &v274[8 * v273];
        *(_QWORD *)v275 = v259;
        v269 = v275 + 8;
        while (v260 != v262)
        {
          v278 = *((_QWORD *)v260 - 1);
          v260 -= 8;
          *((_QWORD *)v275 - 1) = v278;
          v275 -= 8;
        }
        goto LABEL_387;
      }
    }
    else
    {
      if (v257 != 1)
        goto LABEL_390;
      v258 = *(_QWORD **)a1[1];
      v259 = *(_WORD *)(a1[2] + 44) & 0x7FFF;
      v260 = (char *)v258[230];
      v261 = v258[231];
      if ((unint64_t)v260 >= v261)
      {
        v262 = (char *)v258[229];
        v263 = (v260 - v262) >> 3;
        if ((unint64_t)(v263 + 1) >> 61)
          goto LABEL_1032;
        v264 = v261 - (_QWORD)v262;
        v265 = (uint64_t)(v261 - (_QWORD)v262) >> 2;
        if (v265 <= v263 + 1)
          v265 = v263 + 1;
        if (v264 >= 0x7FFFFFFFFFFFFFF8)
          v266 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v266 = v265;
        if (v266)
        {
          v267 = (char *)sub_40FC((uint64_t)(v258 + 231), v266);
          v260 = (char *)v258[230];
          v262 = (char *)v258[229];
        }
        else
        {
          v267 = 0;
        }
        v275 = &v267[8 * v263];
        v276 = &v267[8 * v266];
        *(_QWORD *)v275 = v259;
        v269 = v275 + 8;
        while (v260 != v262)
        {
          v277 = *((_QWORD *)v260 - 1);
          v260 -= 8;
          *((_QWORD *)v275 - 1) = v277;
          v275 -= 8;
        }
LABEL_387:
        v258[229] = v275;
        v258[230] = v269;
        v258[231] = v276;
        if (v262)
          operator delete(v262);
        goto LABEL_389;
      }
    }
    *(_QWORD *)v260 = v259;
    v269 = v260 + 8;
LABEL_389:
    v258[230] = v269;
LABEL_390:
    v279 = 1 << *(_DWORD *)(v3 + 48);
    if (v279 == 2)
    {
      v280 = *(_QWORD **)a1[1];
      v281 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
      v282 = (char *)v280[233];
      v290 = v280[234];
      if ((unint64_t)v282 >= v290)
      {
        v284 = (char *)v280[232];
        v292 = (v282 - v284) >> 3;
        if ((unint64_t)(v292 + 1) >> 61)
          goto LABEL_1032;
        v293 = v290 - (_QWORD)v284;
        v294 = (uint64_t)(v290 - (_QWORD)v284) >> 2;
        if (v294 <= v292 + 1)
          v294 = v292 + 1;
        if (v293 >= 0x7FFFFFFFFFFFFFF8)
          v295 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v295 = v294;
        if (v295)
        {
          v296 = (char *)sub_40FC((uint64_t)(v280 + 234), v295);
          v282 = (char *)v280[233];
          v284 = (char *)v280[232];
        }
        else
        {
          v296 = 0;
        }
        v297 = &v296[8 * v292];
        v298 = &v296[8 * v295];
        *(_QWORD *)v297 = v281;
        v291 = v297 + 8;
        while (v282 != v284)
        {
          v300 = *((_QWORD *)v282 - 1);
          v282 -= 8;
          *((_QWORD *)v297 - 1) = v300;
          v297 -= 8;
        }
        goto LABEL_419;
      }
    }
    else
    {
      if (v279 != 1)
        goto LABEL_422;
      v280 = *(_QWORD **)a1[1];
      v281 = *(_WORD *)(a1[2] + 54) & 0x7FFF;
      v282 = (char *)v280[233];
      v283 = v280[234];
      if ((unint64_t)v282 >= v283)
      {
        v284 = (char *)v280[232];
        v285 = (v282 - v284) >> 3;
        if ((unint64_t)(v285 + 1) >> 61)
          goto LABEL_1032;
        v286 = v283 - (_QWORD)v284;
        v287 = (uint64_t)(v283 - (_QWORD)v284) >> 2;
        if (v287 <= v285 + 1)
          v287 = v285 + 1;
        if (v286 >= 0x7FFFFFFFFFFFFFF8)
          v288 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v288 = v287;
        if (v288)
        {
          v289 = (char *)sub_40FC((uint64_t)(v280 + 234), v288);
          v282 = (char *)v280[233];
          v284 = (char *)v280[232];
        }
        else
        {
          v289 = 0;
        }
        v297 = &v289[8 * v285];
        v298 = &v289[8 * v288];
        *(_QWORD *)v297 = v281;
        v291 = v297 + 8;
        while (v282 != v284)
        {
          v299 = *((_QWORD *)v282 - 1);
          v282 -= 8;
          *((_QWORD *)v297 - 1) = v299;
          v297 -= 8;
        }
LABEL_419:
        v280[232] = v297;
        v280[233] = v291;
        v280[234] = v298;
        if (v284)
          operator delete(v284);
        goto LABEL_421;
      }
    }
    *(_QWORD *)v282 = v281;
    v291 = v282 + 8;
LABEL_421:
    v280[233] = v291;
LABEL_422:
    v301 = 1 << *(_DWORD *)(v3 + 48);
    if (v301 == 2)
    {
      v302 = *(_QWORD **)a1[1];
      v303 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
      v304 = (char *)v302[236];
      v312 = v302[237];
      if ((unint64_t)v304 >= v312)
      {
        v306 = (char *)v302[235];
        v314 = (v304 - v306) >> 3;
        if ((unint64_t)(v314 + 1) >> 61)
          goto LABEL_1032;
        v315 = v312 - (_QWORD)v306;
        v316 = (uint64_t)(v312 - (_QWORD)v306) >> 2;
        if (v316 <= v314 + 1)
          v316 = v314 + 1;
        if (v315 >= 0x7FFFFFFFFFFFFFF8)
          v317 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v317 = v316;
        if (v317)
        {
          v318 = (char *)sub_40FC((uint64_t)(v302 + 237), v317);
          v304 = (char *)v302[236];
          v306 = (char *)v302[235];
        }
        else
        {
          v318 = 0;
        }
        v319 = &v318[8 * v314];
        v320 = &v318[8 * v317];
        *(_QWORD *)v319 = v303;
        v313 = v319 + 8;
        while (v304 != v306)
        {
          v322 = *((_QWORD *)v304 - 1);
          v304 -= 8;
          *((_QWORD *)v319 - 1) = v322;
          v319 -= 8;
        }
        goto LABEL_451;
      }
    }
    else
    {
      if (v301 != 1)
        goto LABEL_454;
      v302 = *(_QWORD **)a1[1];
      v303 = *(_WORD *)(a1[2] + 46) & 0x7FFF;
      v304 = (char *)v302[236];
      v305 = v302[237];
      if ((unint64_t)v304 >= v305)
      {
        v306 = (char *)v302[235];
        v307 = (v304 - v306) >> 3;
        if ((unint64_t)(v307 + 1) >> 61)
          goto LABEL_1032;
        v308 = v305 - (_QWORD)v306;
        v309 = (uint64_t)(v305 - (_QWORD)v306) >> 2;
        if (v309 <= v307 + 1)
          v309 = v307 + 1;
        if (v308 >= 0x7FFFFFFFFFFFFFF8)
          v310 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v310 = v309;
        if (v310)
        {
          v311 = (char *)sub_40FC((uint64_t)(v302 + 237), v310);
          v304 = (char *)v302[236];
          v306 = (char *)v302[235];
        }
        else
        {
          v311 = 0;
        }
        v319 = &v311[8 * v307];
        v320 = &v311[8 * v310];
        *(_QWORD *)v319 = v303;
        v313 = v319 + 8;
        while (v304 != v306)
        {
          v321 = *((_QWORD *)v304 - 1);
          v304 -= 8;
          *((_QWORD *)v319 - 1) = v321;
          v319 -= 8;
        }
LABEL_451:
        v302[235] = v319;
        v302[236] = v313;
        v302[237] = v320;
        if (v306)
          operator delete(v306);
        goto LABEL_453;
      }
    }
    *(_QWORD *)v304 = v303;
    v313 = v304 + 8;
LABEL_453:
    v302[236] = v313;
LABEL_454:
    v323 = 1 << *(_DWORD *)(v3 + 48);
    if (v323 == 2)
    {
      v324 = *(_QWORD **)a1[1];
      v325 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
      v326 = (char *)v324[239];
      v334 = v324[240];
      if ((unint64_t)v326 >= v334)
      {
        v328 = (char *)v324[238];
        v336 = (v326 - v328) >> 3;
        if ((unint64_t)(v336 + 1) >> 61)
          goto LABEL_1032;
        v337 = v334 - (_QWORD)v328;
        v338 = (uint64_t)(v334 - (_QWORD)v328) >> 2;
        if (v338 <= v336 + 1)
          v338 = v336 + 1;
        if (v337 >= 0x7FFFFFFFFFFFFFF8)
          v339 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v339 = v338;
        if (v339)
        {
          v340 = (char *)sub_40FC((uint64_t)(v324 + 240), v339);
          v326 = (char *)v324[239];
          v328 = (char *)v324[238];
        }
        else
        {
          v340 = 0;
        }
        v341 = &v340[8 * v336];
        v342 = &v340[8 * v339];
        *(_QWORD *)v341 = v325;
        v335 = v341 + 8;
        while (v326 != v328)
        {
          v344 = *((_QWORD *)v326 - 1);
          v326 -= 8;
          *((_QWORD *)v341 - 1) = v344;
          v341 -= 8;
        }
        goto LABEL_483;
      }
    }
    else
    {
      if (v323 != 1)
        goto LABEL_486;
      v324 = *(_QWORD **)a1[1];
      v325 = *(_WORD *)(a1[2] + 56) & 0x7FFF;
      v326 = (char *)v324[239];
      v327 = v324[240];
      if ((unint64_t)v326 >= v327)
      {
        v328 = (char *)v324[238];
        v329 = (v326 - v328) >> 3;
        if ((unint64_t)(v329 + 1) >> 61)
          goto LABEL_1032;
        v330 = v327 - (_QWORD)v328;
        v331 = (uint64_t)(v327 - (_QWORD)v328) >> 2;
        if (v331 <= v329 + 1)
          v331 = v329 + 1;
        if (v330 >= 0x7FFFFFFFFFFFFFF8)
          v332 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v332 = v331;
        if (v332)
        {
          v333 = (char *)sub_40FC((uint64_t)(v324 + 240), v332);
          v326 = (char *)v324[239];
          v328 = (char *)v324[238];
        }
        else
        {
          v333 = 0;
        }
        v341 = &v333[8 * v329];
        v342 = &v333[8 * v332];
        *(_QWORD *)v341 = v325;
        v335 = v341 + 8;
        while (v326 != v328)
        {
          v343 = *((_QWORD *)v326 - 1);
          v326 -= 8;
          *((_QWORD *)v341 - 1) = v343;
          v341 -= 8;
        }
LABEL_483:
        v324[238] = v341;
        v324[239] = v335;
        v324[240] = v342;
        if (v328)
          operator delete(v328);
        goto LABEL_485;
      }
    }
    *(_QWORD *)v326 = v325;
    v335 = v326 + 8;
LABEL_485:
    v324[239] = v335;
LABEL_486:
    v345 = 1 << *(_DWORD *)(v3 + 48);
    if (v345 == 2)
    {
      v346 = *(_QWORD **)a1[1];
      v347 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      v348 = (char *)v346[242];
      v356 = v346[243];
      if ((unint64_t)v348 >= v356)
      {
        v350 = (char *)v346[241];
        v358 = (v348 - v350) >> 3;
        if ((unint64_t)(v358 + 1) >> 61)
          goto LABEL_1032;
        v359 = v356 - (_QWORD)v350;
        v360 = (uint64_t)(v356 - (_QWORD)v350) >> 2;
        if (v360 <= v358 + 1)
          v360 = v358 + 1;
        if (v359 >= 0x7FFFFFFFFFFFFFF8)
          v361 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v361 = v360;
        if (v361)
        {
          v362 = (char *)sub_40FC((uint64_t)(v346 + 243), v361);
          v348 = (char *)v346[242];
          v350 = (char *)v346[241];
        }
        else
        {
          v362 = 0;
        }
        v363 = &v362[8 * v358];
        v364 = &v362[8 * v361];
        *(_QWORD *)v363 = v347;
        v357 = v363 + 8;
        while (v348 != v350)
        {
          v366 = *((_QWORD *)v348 - 1);
          v348 -= 8;
          *((_QWORD *)v363 - 1) = v366;
          v363 -= 8;
        }
        goto LABEL_515;
      }
    }
    else
    {
      if (v345 != 1)
        goto LABEL_518;
      v346 = *(_QWORD **)a1[1];
      v347 = *(_WORD *)(a1[2] + 48) & 0x7FFF;
      v348 = (char *)v346[242];
      v349 = v346[243];
      if ((unint64_t)v348 >= v349)
      {
        v350 = (char *)v346[241];
        v351 = (v348 - v350) >> 3;
        if ((unint64_t)(v351 + 1) >> 61)
          goto LABEL_1032;
        v352 = v349 - (_QWORD)v350;
        v353 = (uint64_t)(v349 - (_QWORD)v350) >> 2;
        if (v353 <= v351 + 1)
          v353 = v351 + 1;
        if (v352 >= 0x7FFFFFFFFFFFFFF8)
          v354 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v354 = v353;
        if (v354)
        {
          v355 = (char *)sub_40FC((uint64_t)(v346 + 243), v354);
          v348 = (char *)v346[242];
          v350 = (char *)v346[241];
        }
        else
        {
          v355 = 0;
        }
        v363 = &v355[8 * v351];
        v364 = &v355[8 * v354];
        *(_QWORD *)v363 = v347;
        v357 = v363 + 8;
        while (v348 != v350)
        {
          v365 = *((_QWORD *)v348 - 1);
          v348 -= 8;
          *((_QWORD *)v363 - 1) = v365;
          v363 -= 8;
        }
LABEL_515:
        v346[241] = v363;
        v346[242] = v357;
        v346[243] = v364;
        if (v350)
          operator delete(v350);
        goto LABEL_517;
      }
    }
    *(_QWORD *)v348 = v347;
    v357 = v348 + 8;
LABEL_517:
    v346[242] = v357;
LABEL_518:
    v367 = 1 << *(_DWORD *)(v3 + 48);
    if (v367 == 2)
    {
      v368 = *(_QWORD **)a1[1];
      v369 = *(_WORD *)(a1[2] + 66) & 0x7FFF;
      v370 = (char *)v368[245];
      v378 = v368[246];
      if ((unint64_t)v370 >= v378)
      {
        v372 = (char *)v368[244];
        v380 = (v370 - v372) >> 3;
        if ((unint64_t)(v380 + 1) >> 61)
          goto LABEL_1032;
        v381 = v378 - (_QWORD)v372;
        v382 = (uint64_t)(v378 - (_QWORD)v372) >> 2;
        if (v382 <= v380 + 1)
          v382 = v380 + 1;
        if (v381 >= 0x7FFFFFFFFFFFFFF8)
          v383 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v383 = v382;
        if (v383)
        {
          v384 = (char *)sub_40FC((uint64_t)(v368 + 246), v383);
          v370 = (char *)v368[245];
          v372 = (char *)v368[244];
        }
        else
        {
          v384 = 0;
        }
        v385 = &v384[8 * v380];
        v386 = &v384[8 * v383];
        *(_QWORD *)v385 = v369;
        v379 = v385 + 8;
        while (v370 != v372)
        {
          v388 = *((_QWORD *)v370 - 1);
          v370 -= 8;
          *((_QWORD *)v385 - 1) = v388;
          v385 -= 8;
        }
        goto LABEL_547;
      }
    }
    else
    {
      if (v367 != 1)
        goto LABEL_550;
      v368 = *(_QWORD **)a1[1];
      v369 = *(_WORD *)(a1[2] + 66) & 0x7FFF;
      v370 = (char *)v368[245];
      v371 = v368[246];
      if ((unint64_t)v370 >= v371)
      {
        v372 = (char *)v368[244];
        v373 = (v370 - v372) >> 3;
        if ((unint64_t)(v373 + 1) >> 61)
          goto LABEL_1032;
        v374 = v371 - (_QWORD)v372;
        v375 = (uint64_t)(v371 - (_QWORD)v372) >> 2;
        if (v375 <= v373 + 1)
          v375 = v373 + 1;
        if (v374 >= 0x7FFFFFFFFFFFFFF8)
          v376 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v376 = v375;
        if (v376)
        {
          v377 = (char *)sub_40FC((uint64_t)(v368 + 246), v376);
          v370 = (char *)v368[245];
          v372 = (char *)v368[244];
        }
        else
        {
          v377 = 0;
        }
        v385 = &v377[8 * v373];
        v386 = &v377[8 * v376];
        *(_QWORD *)v385 = v369;
        v379 = v385 + 8;
        while (v370 != v372)
        {
          v387 = *((_QWORD *)v370 - 1);
          v370 -= 8;
          *((_QWORD *)v385 - 1) = v387;
          v385 -= 8;
        }
LABEL_547:
        v368[244] = v385;
        v368[245] = v379;
        v368[246] = v386;
        if (v372)
          operator delete(v372);
        goto LABEL_549;
      }
    }
    *(_QWORD *)v370 = v369;
    v379 = v370 + 8;
LABEL_549:
    v368[245] = v379;
LABEL_550:
    v389 = 1 << *(_DWORD *)(v3 + 48);
    if (v389 == 2)
    {
      v390 = *(_QWORD **)a1[1];
      v391 = *(_WORD *)(a1[2] + 58) & 0x7FFF;
      v392 = (char *)v390[248];
      v400 = v390[249];
      if ((unint64_t)v392 >= v400)
      {
        v394 = (char *)v390[247];
        v402 = (v392 - v394) >> 3;
        if ((unint64_t)(v402 + 1) >> 61)
          goto LABEL_1032;
        v403 = v400 - (_QWORD)v394;
        v404 = (uint64_t)(v400 - (_QWORD)v394) >> 2;
        if (v404 <= v402 + 1)
          v404 = v402 + 1;
        if (v403 >= 0x7FFFFFFFFFFFFFF8)
          v405 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v405 = v404;
        if (v405)
        {
          v406 = (char *)sub_40FC((uint64_t)(v390 + 249), v405);
          v392 = (char *)v390[248];
          v394 = (char *)v390[247];
        }
        else
        {
          v406 = 0;
        }
        v407 = &v406[8 * v402];
        v408 = &v406[8 * v405];
        *(_QWORD *)v407 = v391;
        v401 = v407 + 8;
        while (v392 != v394)
        {
          v410 = *((_QWORD *)v392 - 1);
          v392 -= 8;
          *((_QWORD *)v407 - 1) = v410;
          v407 -= 8;
        }
        goto LABEL_579;
      }
    }
    else
    {
      if (v389 != 1)
        goto LABEL_582;
      v390 = *(_QWORD **)a1[1];
      v391 = *(_WORD *)(a1[2] + 58) & 0x7FFF;
      v392 = (char *)v390[248];
      v393 = v390[249];
      if ((unint64_t)v392 >= v393)
      {
        v394 = (char *)v390[247];
        v395 = (v392 - v394) >> 3;
        if ((unint64_t)(v395 + 1) >> 61)
          goto LABEL_1032;
        v396 = v393 - (_QWORD)v394;
        v397 = (uint64_t)(v393 - (_QWORD)v394) >> 2;
        if (v397 <= v395 + 1)
          v397 = v395 + 1;
        if (v396 >= 0x7FFFFFFFFFFFFFF8)
          v398 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v398 = v397;
        if (v398)
        {
          v399 = (char *)sub_40FC((uint64_t)(v390 + 249), v398);
          v392 = (char *)v390[248];
          v394 = (char *)v390[247];
        }
        else
        {
          v399 = 0;
        }
        v407 = &v399[8 * v395];
        v408 = &v399[8 * v398];
        *(_QWORD *)v407 = v391;
        v401 = v407 + 8;
        while (v392 != v394)
        {
          v409 = *((_QWORD *)v392 - 1);
          v392 -= 8;
          *((_QWORD *)v407 - 1) = v409;
          v407 -= 8;
        }
LABEL_579:
        v390[247] = v407;
        v390[248] = v401;
        v390[249] = v408;
        if (v394)
          operator delete(v394);
        goto LABEL_581;
      }
    }
    *(_QWORD *)v392 = v391;
    v401 = v392 + 8;
LABEL_581:
    v390[248] = v401;
LABEL_582:
    v411 = 1 << *(_DWORD *)(v3 + 48);
    if (v411 == 2)
    {
      v412 = *(_QWORD **)a1[1];
      v413 = *(_WORD *)(a1[2] + 68) & 0x7FFF;
      v414 = (char *)v412[251];
      v422 = v412[252];
      if ((unint64_t)v414 >= v422)
      {
        v416 = (char *)v412[250];
        v424 = (v414 - v416) >> 3;
        if ((unint64_t)(v424 + 1) >> 61)
          goto LABEL_1032;
        v425 = v422 - (_QWORD)v416;
        v426 = (uint64_t)(v422 - (_QWORD)v416) >> 2;
        if (v426 <= v424 + 1)
          v426 = v424 + 1;
        if (v425 >= 0x7FFFFFFFFFFFFFF8)
          v427 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v427 = v426;
        if (v427)
        {
          v428 = (char *)sub_40FC((uint64_t)(v412 + 252), v427);
          v414 = (char *)v412[251];
          v416 = (char *)v412[250];
        }
        else
        {
          v428 = 0;
        }
        v429 = &v428[8 * v424];
        v430 = &v428[8 * v427];
        *(_QWORD *)v429 = v413;
        v423 = v429 + 8;
        while (v414 != v416)
        {
          v432 = *((_QWORD *)v414 - 1);
          v414 -= 8;
          *((_QWORD *)v429 - 1) = v432;
          v429 -= 8;
        }
        goto LABEL_611;
      }
    }
    else
    {
      if (v411 != 1)
        goto LABEL_614;
      v412 = *(_QWORD **)a1[1];
      v413 = *(_WORD *)(a1[2] + 68) & 0x7FFF;
      v414 = (char *)v412[251];
      v415 = v412[252];
      if ((unint64_t)v414 >= v415)
      {
        v416 = (char *)v412[250];
        v417 = (v414 - v416) >> 3;
        if ((unint64_t)(v417 + 1) >> 61)
          goto LABEL_1032;
        v418 = v415 - (_QWORD)v416;
        v419 = (uint64_t)(v415 - (_QWORD)v416) >> 2;
        if (v419 <= v417 + 1)
          v419 = v417 + 1;
        if (v418 >= 0x7FFFFFFFFFFFFFF8)
          v420 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v420 = v419;
        if (v420)
        {
          v421 = (char *)sub_40FC((uint64_t)(v412 + 252), v420);
          v414 = (char *)v412[251];
          v416 = (char *)v412[250];
        }
        else
        {
          v421 = 0;
        }
        v429 = &v421[8 * v417];
        v430 = &v421[8 * v420];
        *(_QWORD *)v429 = v413;
        v423 = v429 + 8;
        while (v414 != v416)
        {
          v431 = *((_QWORD *)v414 - 1);
          v414 -= 8;
          *((_QWORD *)v429 - 1) = v431;
          v429 -= 8;
        }
LABEL_611:
        v412[250] = v429;
        v412[251] = v423;
        v412[252] = v430;
        if (v416)
          operator delete(v416);
        goto LABEL_613;
      }
    }
    *(_QWORD *)v414 = v413;
    v423 = v414 + 8;
LABEL_613:
    v412[251] = v423;
LABEL_614:
    v433 = 1 << *(_DWORD *)(v3 + 48);
    if (v433 == 2)
    {
      v434 = *(_QWORD **)a1[1];
      v435 = *(_WORD *)(a1[2] + 60) & 0x7FFF;
      v436 = (char *)v434[254];
      v444 = v434[255];
      if ((unint64_t)v436 >= v444)
      {
        v438 = (char *)v434[253];
        v446 = (v436 - v438) >> 3;
        if ((unint64_t)(v446 + 1) >> 61)
          goto LABEL_1032;
        v447 = v444 - (_QWORD)v438;
        v448 = (uint64_t)(v444 - (_QWORD)v438) >> 2;
        if (v448 <= v446 + 1)
          v448 = v446 + 1;
        if (v447 >= 0x7FFFFFFFFFFFFFF8)
          v449 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v449 = v448;
        if (v449)
        {
          v450 = (char *)sub_40FC((uint64_t)(v434 + 255), v449);
          v436 = (char *)v434[254];
          v438 = (char *)v434[253];
        }
        else
        {
          v450 = 0;
        }
        v451 = &v450[8 * v446];
        v452 = &v450[8 * v449];
        *(_QWORD *)v451 = v435;
        v445 = v451 + 8;
        while (v436 != v438)
        {
          v454 = *((_QWORD *)v436 - 1);
          v436 -= 8;
          *((_QWORD *)v451 - 1) = v454;
          v451 -= 8;
        }
        goto LABEL_643;
      }
    }
    else
    {
      if (v433 != 1)
        goto LABEL_646;
      v434 = *(_QWORD **)a1[1];
      v435 = *(_WORD *)(a1[2] + 60) & 0x7FFF;
      v436 = (char *)v434[254];
      v437 = v434[255];
      if ((unint64_t)v436 >= v437)
      {
        v438 = (char *)v434[253];
        v439 = (v436 - v438) >> 3;
        if ((unint64_t)(v439 + 1) >> 61)
          goto LABEL_1032;
        v440 = v437 - (_QWORD)v438;
        v441 = (uint64_t)(v437 - (_QWORD)v438) >> 2;
        if (v441 <= v439 + 1)
          v441 = v439 + 1;
        if (v440 >= 0x7FFFFFFFFFFFFFF8)
          v442 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v442 = v441;
        if (v442)
        {
          v443 = (char *)sub_40FC((uint64_t)(v434 + 255), v442);
          v436 = (char *)v434[254];
          v438 = (char *)v434[253];
        }
        else
        {
          v443 = 0;
        }
        v451 = &v443[8 * v439];
        v452 = &v443[8 * v442];
        *(_QWORD *)v451 = v435;
        v445 = v451 + 8;
        while (v436 != v438)
        {
          v453 = *((_QWORD *)v436 - 1);
          v436 -= 8;
          *((_QWORD *)v451 - 1) = v453;
          v451 -= 8;
        }
LABEL_643:
        v434[253] = v451;
        v434[254] = v445;
        v434[255] = v452;
        if (v438)
          operator delete(v438);
        goto LABEL_645;
      }
    }
    *(_QWORD *)v436 = v435;
    v445 = v436 + 8;
LABEL_645:
    v434[254] = v445;
LABEL_646:
    v455 = 1 << *(_DWORD *)(v3 + 48);
    if (v455 == 2)
    {
      v456 = *(_QWORD **)a1[1];
      v457 = *(_WORD *)(a1[2] + 70) & 0x7FFF;
      v458 = (char *)v456[257];
      v466 = v456[258];
      if ((unint64_t)v458 >= v466)
      {
        v460 = (char *)v456[256];
        v468 = (v458 - v460) >> 3;
        if ((unint64_t)(v468 + 1) >> 61)
          goto LABEL_1032;
        v469 = v466 - (_QWORD)v460;
        v470 = (uint64_t)(v466 - (_QWORD)v460) >> 2;
        if (v470 <= v468 + 1)
          v470 = v468 + 1;
        if (v469 >= 0x7FFFFFFFFFFFFFF8)
          v471 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v471 = v470;
        if (v471)
        {
          v472 = (char *)sub_40FC((uint64_t)(v456 + 258), v471);
          v458 = (char *)v456[257];
          v460 = (char *)v456[256];
        }
        else
        {
          v472 = 0;
        }
        v473 = &v472[8 * v468];
        v474 = &v472[8 * v471];
        *(_QWORD *)v473 = v457;
        v467 = v473 + 8;
        while (v458 != v460)
        {
          v476 = *((_QWORD *)v458 - 1);
          v458 -= 8;
          *((_QWORD *)v473 - 1) = v476;
          v473 -= 8;
        }
        goto LABEL_675;
      }
    }
    else
    {
      if (v455 != 1)
        goto LABEL_678;
      v456 = *(_QWORD **)a1[1];
      v457 = *(_WORD *)(a1[2] + 70) & 0x7FFF;
      v458 = (char *)v456[257];
      v459 = v456[258];
      if ((unint64_t)v458 >= v459)
      {
        v460 = (char *)v456[256];
        v461 = (v458 - v460) >> 3;
        if ((unint64_t)(v461 + 1) >> 61)
          goto LABEL_1032;
        v462 = v459 - (_QWORD)v460;
        v463 = (uint64_t)(v459 - (_QWORD)v460) >> 2;
        if (v463 <= v461 + 1)
          v463 = v461 + 1;
        if (v462 >= 0x7FFFFFFFFFFFFFF8)
          v464 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v464 = v463;
        if (v464)
        {
          v465 = (char *)sub_40FC((uint64_t)(v456 + 258), v464);
          v458 = (char *)v456[257];
          v460 = (char *)v456[256];
        }
        else
        {
          v465 = 0;
        }
        v473 = &v465[8 * v461];
        v474 = &v465[8 * v464];
        *(_QWORD *)v473 = v457;
        v467 = v473 + 8;
        while (v458 != v460)
        {
          v475 = *((_QWORD *)v458 - 1);
          v458 -= 8;
          *((_QWORD *)v473 - 1) = v475;
          v473 -= 8;
        }
LABEL_675:
        v456[256] = v473;
        v456[257] = v467;
        v456[258] = v474;
        if (v460)
          operator delete(v460);
        goto LABEL_677;
      }
    }
    *(_QWORD *)v458 = v457;
    v467 = v458 + 8;
LABEL_677:
    v456[257] = v467;
LABEL_678:
    v477 = 1 << *(_DWORD *)(v3 + 48);
    if (v477 == 2)
    {
      v478 = *(_QWORD **)a1[1];
      v479 = *(_WORD *)(a1[2] + 62) & 0x7FFF;
      v480 = (char *)v478[260];
      v488 = v478[261];
      if ((unint64_t)v480 >= v488)
      {
        v482 = (char *)v478[259];
        v490 = (v480 - v482) >> 3;
        if ((unint64_t)(v490 + 1) >> 61)
          goto LABEL_1032;
        v491 = v488 - (_QWORD)v482;
        v492 = (uint64_t)(v488 - (_QWORD)v482) >> 2;
        if (v492 <= v490 + 1)
          v492 = v490 + 1;
        if (v491 >= 0x7FFFFFFFFFFFFFF8)
          v493 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v493 = v492;
        if (v493)
        {
          v494 = (char *)sub_40FC((uint64_t)(v478 + 261), v493);
          v480 = (char *)v478[260];
          v482 = (char *)v478[259];
        }
        else
        {
          v494 = 0;
        }
        v495 = &v494[8 * v490];
        v496 = &v494[8 * v493];
        *(_QWORD *)v495 = v479;
        v489 = v495 + 8;
        while (v480 != v482)
        {
          v498 = *((_QWORD *)v480 - 1);
          v480 -= 8;
          *((_QWORD *)v495 - 1) = v498;
          v495 -= 8;
        }
        goto LABEL_707;
      }
    }
    else
    {
      if (v477 != 1)
        goto LABEL_710;
      v478 = *(_QWORD **)a1[1];
      v479 = *(_WORD *)(a1[2] + 62) & 0x7FFF;
      v480 = (char *)v478[260];
      v481 = v478[261];
      if ((unint64_t)v480 >= v481)
      {
        v482 = (char *)v478[259];
        v483 = (v480 - v482) >> 3;
        if ((unint64_t)(v483 + 1) >> 61)
          goto LABEL_1032;
        v484 = v481 - (_QWORD)v482;
        v485 = (uint64_t)(v481 - (_QWORD)v482) >> 2;
        if (v485 <= v483 + 1)
          v485 = v483 + 1;
        if (v484 >= 0x7FFFFFFFFFFFFFF8)
          v486 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v486 = v485;
        if (v486)
        {
          v487 = (char *)sub_40FC((uint64_t)(v478 + 261), v486);
          v480 = (char *)v478[260];
          v482 = (char *)v478[259];
        }
        else
        {
          v487 = 0;
        }
        v495 = &v487[8 * v483];
        v496 = &v487[8 * v486];
        *(_QWORD *)v495 = v479;
        v489 = v495 + 8;
        while (v480 != v482)
        {
          v497 = *((_QWORD *)v480 - 1);
          v480 -= 8;
          *((_QWORD *)v495 - 1) = v497;
          v495 -= 8;
        }
LABEL_707:
        v478[259] = v495;
        v478[260] = v489;
        v478[261] = v496;
        if (v482)
          operator delete(v482);
        goto LABEL_709;
      }
    }
    *(_QWORD *)v480 = v479;
    v489 = v480 + 8;
LABEL_709:
    v478[260] = v489;
LABEL_710:
    v499 = 1 << *(_DWORD *)(v3 + 48);
    if (v499 == 2)
    {
      v500 = *(_QWORD **)a1[1];
      v501 = *(_WORD *)(a1[2] + 72) & 0x7FFF;
      v502 = (char *)v500[263];
      v510 = v500[264];
      if ((unint64_t)v502 >= v510)
      {
        v504 = (char *)v500[262];
        v512 = (v502 - v504) >> 3;
        if ((unint64_t)(v512 + 1) >> 61)
          goto LABEL_1032;
        v513 = v510 - (_QWORD)v504;
        v514 = (uint64_t)(v510 - (_QWORD)v504) >> 2;
        if (v514 <= v512 + 1)
          v514 = v512 + 1;
        if (v513 >= 0x7FFFFFFFFFFFFFF8)
          v515 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v515 = v514;
        if (v515)
        {
          v516 = (char *)sub_40FC((uint64_t)(v500 + 264), v515);
          v502 = (char *)v500[263];
          v504 = (char *)v500[262];
        }
        else
        {
          v516 = 0;
        }
        v517 = &v516[8 * v512];
        v518 = &v516[8 * v515];
        *(_QWORD *)v517 = v501;
        v511 = v517 + 8;
        while (v502 != v504)
        {
          v520 = *((_QWORD *)v502 - 1);
          v502 -= 8;
          *((_QWORD *)v517 - 1) = v520;
          v517 -= 8;
        }
        goto LABEL_739;
      }
    }
    else
    {
      if (v499 != 1)
        goto LABEL_742;
      v500 = *(_QWORD **)a1[1];
      v501 = *(_WORD *)(a1[2] + 72) & 0x7FFF;
      v502 = (char *)v500[263];
      v503 = v500[264];
      if ((unint64_t)v502 >= v503)
      {
        v504 = (char *)v500[262];
        v505 = (v502 - v504) >> 3;
        if ((unint64_t)(v505 + 1) >> 61)
          goto LABEL_1032;
        v506 = v503 - (_QWORD)v504;
        v507 = (uint64_t)(v503 - (_QWORD)v504) >> 2;
        if (v507 <= v505 + 1)
          v507 = v505 + 1;
        if (v506 >= 0x7FFFFFFFFFFFFFF8)
          v508 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v508 = v507;
        if (v508)
        {
          v509 = (char *)sub_40FC((uint64_t)(v500 + 264), v508);
          v502 = (char *)v500[263];
          v504 = (char *)v500[262];
        }
        else
        {
          v509 = 0;
        }
        v517 = &v509[8 * v505];
        v518 = &v509[8 * v508];
        *(_QWORD *)v517 = v501;
        v511 = v517 + 8;
        while (v502 != v504)
        {
          v519 = *((_QWORD *)v502 - 1);
          v502 -= 8;
          *((_QWORD *)v517 - 1) = v519;
          v517 -= 8;
        }
LABEL_739:
        v500[262] = v517;
        v500[263] = v511;
        v500[264] = v518;
        if (v504)
          operator delete(v504);
        goto LABEL_741;
      }
    }
    *(_QWORD *)v502 = v501;
    v511 = v502 + 8;
LABEL_741:
    v500[263] = v511;
LABEL_742:
    v521 = 1 << *(_DWORD *)(v3 + 48);
    if (v521 == 2)
    {
      v522 = *(_QWORD **)a1[1];
      v523 = *(_WORD *)(a1[2] + 64) & 0x7FFF;
      v524 = (char *)v522[266];
      v532 = v522[267];
      if ((unint64_t)v524 >= v532)
      {
        v526 = (char *)v522[265];
        v534 = (v524 - v526) >> 3;
        if ((unint64_t)(v534 + 1) >> 61)
          goto LABEL_1032;
        v535 = v532 - (_QWORD)v526;
        v536 = (uint64_t)(v532 - (_QWORD)v526) >> 2;
        if (v536 <= v534 + 1)
          v536 = v534 + 1;
        if (v535 >= 0x7FFFFFFFFFFFFFF8)
          v537 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v537 = v536;
        if (v537)
        {
          v538 = (char *)sub_40FC((uint64_t)(v522 + 267), v537);
          v524 = (char *)v522[266];
          v526 = (char *)v522[265];
        }
        else
        {
          v538 = 0;
        }
        v539 = &v538[8 * v534];
        v540 = &v538[8 * v537];
        *(_QWORD *)v539 = v523;
        v533 = v539 + 8;
        while (v524 != v526)
        {
          v542 = *((_QWORD *)v524 - 1);
          v524 -= 8;
          *((_QWORD *)v539 - 1) = v542;
          v539 -= 8;
        }
        goto LABEL_771;
      }
    }
    else
    {
      if (v521 != 1)
        goto LABEL_774;
      v522 = *(_QWORD **)a1[1];
      v523 = *(_WORD *)(a1[2] + 64) & 0x7FFF;
      v524 = (char *)v522[266];
      v525 = v522[267];
      if ((unint64_t)v524 >= v525)
      {
        v526 = (char *)v522[265];
        v527 = (v524 - v526) >> 3;
        if ((unint64_t)(v527 + 1) >> 61)
          goto LABEL_1032;
        v528 = v525 - (_QWORD)v526;
        v529 = (uint64_t)(v525 - (_QWORD)v526) >> 2;
        if (v529 <= v527 + 1)
          v529 = v527 + 1;
        if (v528 >= 0x7FFFFFFFFFFFFFF8)
          v530 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v530 = v529;
        if (v530)
        {
          v531 = (char *)sub_40FC((uint64_t)(v522 + 267), v530);
          v524 = (char *)v522[266];
          v526 = (char *)v522[265];
        }
        else
        {
          v531 = 0;
        }
        v539 = &v531[8 * v527];
        v540 = &v531[8 * v530];
        *(_QWORD *)v539 = v523;
        v533 = v539 + 8;
        while (v524 != v526)
        {
          v541 = *((_QWORD *)v524 - 1);
          v524 -= 8;
          *((_QWORD *)v539 - 1) = v541;
          v539 -= 8;
        }
LABEL_771:
        v522[265] = v539;
        v522[266] = v533;
        v522[267] = v540;
        if (v526)
          operator delete(v526);
        goto LABEL_773;
      }
    }
    *(_QWORD *)v524 = v523;
    v533 = v524 + 8;
LABEL_773:
    v522[266] = v533;
LABEL_774:
    v543 = 1 << *(_DWORD *)(v3 + 48);
    if (v543 == 2)
    {
      v544 = *(_QWORD **)a1[1];
      v545 = *(_WORD *)(a1[2] + 82) & 0x7FFF;
      v546 = (char *)v544[269];
      v554 = v544[270];
      if ((unint64_t)v546 >= v554)
      {
        v548 = (char *)v544[268];
        v556 = (v546 - v548) >> 3;
        if ((unint64_t)(v556 + 1) >> 61)
          goto LABEL_1032;
        v557 = v554 - (_QWORD)v548;
        v558 = (uint64_t)(v554 - (_QWORD)v548) >> 2;
        if (v558 <= v556 + 1)
          v558 = v556 + 1;
        if (v557 >= 0x7FFFFFFFFFFFFFF8)
          v559 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v559 = v558;
        if (v559)
        {
          v560 = (char *)sub_40FC((uint64_t)(v544 + 270), v559);
          v546 = (char *)v544[269];
          v548 = (char *)v544[268];
        }
        else
        {
          v560 = 0;
        }
        v561 = &v560[8 * v556];
        v562 = &v560[8 * v559];
        *(_QWORD *)v561 = v545;
        v555 = v561 + 8;
        while (v546 != v548)
        {
          v564 = *((_QWORD *)v546 - 1);
          v546 -= 8;
          *((_QWORD *)v561 - 1) = v564;
          v561 -= 8;
        }
        goto LABEL_803;
      }
    }
    else
    {
      if (v543 != 1)
        goto LABEL_806;
      v544 = *(_QWORD **)a1[1];
      v545 = *(_WORD *)(a1[2] + 82) & 0x7FFF;
      v546 = (char *)v544[269];
      v547 = v544[270];
      if ((unint64_t)v546 >= v547)
      {
        v548 = (char *)v544[268];
        v549 = (v546 - v548) >> 3;
        if ((unint64_t)(v549 + 1) >> 61)
          goto LABEL_1032;
        v550 = v547 - (_QWORD)v548;
        v551 = (uint64_t)(v547 - (_QWORD)v548) >> 2;
        if (v551 <= v549 + 1)
          v551 = v549 + 1;
        if (v550 >= 0x7FFFFFFFFFFFFFF8)
          v552 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v552 = v551;
        if (v552)
        {
          v553 = (char *)sub_40FC((uint64_t)(v544 + 270), v552);
          v546 = (char *)v544[269];
          v548 = (char *)v544[268];
        }
        else
        {
          v553 = 0;
        }
        v561 = &v553[8 * v549];
        v562 = &v553[8 * v552];
        *(_QWORD *)v561 = v545;
        v555 = v561 + 8;
        while (v546 != v548)
        {
          v563 = *((_QWORD *)v546 - 1);
          v546 -= 8;
          *((_QWORD *)v561 - 1) = v563;
          v561 -= 8;
        }
LABEL_803:
        v544[268] = v561;
        v544[269] = v555;
        v544[270] = v562;
        if (v548)
          operator delete(v548);
        goto LABEL_805;
      }
    }
    *(_QWORD *)v546 = v545;
    v555 = v546 + 8;
LABEL_805:
    v544[269] = v555;
LABEL_806:
    v565 = 1 << *(_DWORD *)(v3 + 48);
    if (v565 == 2)
    {
      v566 = *(_QWORD **)a1[1];
      v567 = *(_WORD *)(a1[2] + 74) & 0x7FFF;
      v568 = (char *)v566[272];
      v576 = v566[273];
      if ((unint64_t)v568 >= v576)
      {
        v570 = (char *)v566[271];
        v578 = (v568 - v570) >> 3;
        if ((unint64_t)(v578 + 1) >> 61)
          goto LABEL_1032;
        v579 = v576 - (_QWORD)v570;
        v580 = (uint64_t)(v576 - (_QWORD)v570) >> 2;
        if (v580 <= v578 + 1)
          v580 = v578 + 1;
        if (v579 >= 0x7FFFFFFFFFFFFFF8)
          v581 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v581 = v580;
        if (v581)
        {
          v582 = (char *)sub_40FC((uint64_t)(v566 + 273), v581);
          v568 = (char *)v566[272];
          v570 = (char *)v566[271];
        }
        else
        {
          v582 = 0;
        }
        v583 = &v582[8 * v578];
        v584 = &v582[8 * v581];
        *(_QWORD *)v583 = v567;
        v577 = v583 + 8;
        while (v568 != v570)
        {
          v586 = *((_QWORD *)v568 - 1);
          v568 -= 8;
          *((_QWORD *)v583 - 1) = v586;
          v583 -= 8;
        }
        goto LABEL_835;
      }
    }
    else
    {
      if (v565 != 1)
        goto LABEL_838;
      v566 = *(_QWORD **)a1[1];
      v567 = *(_WORD *)(a1[2] + 74) & 0x7FFF;
      v568 = (char *)v566[272];
      v569 = v566[273];
      if ((unint64_t)v568 >= v569)
      {
        v570 = (char *)v566[271];
        v571 = (v568 - v570) >> 3;
        if ((unint64_t)(v571 + 1) >> 61)
          goto LABEL_1032;
        v572 = v569 - (_QWORD)v570;
        v573 = (uint64_t)(v569 - (_QWORD)v570) >> 2;
        if (v573 <= v571 + 1)
          v573 = v571 + 1;
        if (v572 >= 0x7FFFFFFFFFFFFFF8)
          v574 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v574 = v573;
        if (v574)
        {
          v575 = (char *)sub_40FC((uint64_t)(v566 + 273), v574);
          v568 = (char *)v566[272];
          v570 = (char *)v566[271];
        }
        else
        {
          v575 = 0;
        }
        v583 = &v575[8 * v571];
        v584 = &v575[8 * v574];
        *(_QWORD *)v583 = v567;
        v577 = v583 + 8;
        while (v568 != v570)
        {
          v585 = *((_QWORD *)v568 - 1);
          v568 -= 8;
          *((_QWORD *)v583 - 1) = v585;
          v583 -= 8;
        }
LABEL_835:
        v566[271] = v583;
        v566[272] = v577;
        v566[273] = v584;
        if (v570)
          operator delete(v570);
        goto LABEL_837;
      }
    }
    *(_QWORD *)v568 = v567;
    v577 = v568 + 8;
LABEL_837:
    v566[272] = v577;
LABEL_838:
    v587 = 1 << *(_DWORD *)(v3 + 48);
    if (v587 == 2)
    {
      v588 = *(_QWORD **)a1[1];
      v589 = *(_WORD *)(a1[2] + 84) & 0x7FFF;
      v590 = (char *)v588[275];
      v598 = v588[276];
      if ((unint64_t)v590 >= v598)
      {
        v592 = (char *)v588[274];
        v600 = (v590 - v592) >> 3;
        if ((unint64_t)(v600 + 1) >> 61)
          goto LABEL_1032;
        v601 = v598 - (_QWORD)v592;
        v602 = (uint64_t)(v598 - (_QWORD)v592) >> 2;
        if (v602 <= v600 + 1)
          v602 = v600 + 1;
        if (v601 >= 0x7FFFFFFFFFFFFFF8)
          v603 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v603 = v602;
        if (v603)
        {
          v604 = (char *)sub_40FC((uint64_t)(v588 + 276), v603);
          v590 = (char *)v588[275];
          v592 = (char *)v588[274];
        }
        else
        {
          v604 = 0;
        }
        v605 = &v604[8 * v600];
        v606 = &v604[8 * v603];
        *(_QWORD *)v605 = v589;
        v599 = v605 + 8;
        while (v590 != v592)
        {
          v608 = *((_QWORD *)v590 - 1);
          v590 -= 8;
          *((_QWORD *)v605 - 1) = v608;
          v605 -= 8;
        }
        goto LABEL_867;
      }
    }
    else
    {
      if (v587 != 1)
        goto LABEL_870;
      v588 = *(_QWORD **)a1[1];
      v589 = *(_WORD *)(a1[2] + 84) & 0x7FFF;
      v590 = (char *)v588[275];
      v591 = v588[276];
      if ((unint64_t)v590 >= v591)
      {
        v592 = (char *)v588[274];
        v593 = (v590 - v592) >> 3;
        if ((unint64_t)(v593 + 1) >> 61)
          goto LABEL_1032;
        v594 = v591 - (_QWORD)v592;
        v595 = (uint64_t)(v591 - (_QWORD)v592) >> 2;
        if (v595 <= v593 + 1)
          v595 = v593 + 1;
        if (v594 >= 0x7FFFFFFFFFFFFFF8)
          v596 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v596 = v595;
        if (v596)
        {
          v597 = (char *)sub_40FC((uint64_t)(v588 + 276), v596);
          v590 = (char *)v588[275];
          v592 = (char *)v588[274];
        }
        else
        {
          v597 = 0;
        }
        v605 = &v597[8 * v593];
        v606 = &v597[8 * v596];
        *(_QWORD *)v605 = v589;
        v599 = v605 + 8;
        while (v590 != v592)
        {
          v607 = *((_QWORD *)v590 - 1);
          v590 -= 8;
          *((_QWORD *)v605 - 1) = v607;
          v605 -= 8;
        }
LABEL_867:
        v588[274] = v605;
        v588[275] = v599;
        v588[276] = v606;
        if (v592)
          operator delete(v592);
        goto LABEL_869;
      }
    }
    *(_QWORD *)v590 = v589;
    v599 = v590 + 8;
LABEL_869:
    v588[275] = v599;
LABEL_870:
    v609 = 1 << *(_DWORD *)(v3 + 48);
    if (v609 == 2)
    {
      v610 = *(_QWORD **)a1[1];
      v611 = *(_WORD *)(a1[2] + 76) & 0x7FFF;
      v612 = (char *)v610[278];
      v620 = v610[279];
      if ((unint64_t)v612 >= v620)
      {
        v614 = (char *)v610[277];
        v622 = (v612 - v614) >> 3;
        if ((unint64_t)(v622 + 1) >> 61)
          goto LABEL_1032;
        v623 = v620 - (_QWORD)v614;
        v624 = (uint64_t)(v620 - (_QWORD)v614) >> 2;
        if (v624 <= v622 + 1)
          v624 = v622 + 1;
        if (v623 >= 0x7FFFFFFFFFFFFFF8)
          v625 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v625 = v624;
        if (v625)
        {
          v626 = (char *)sub_40FC((uint64_t)(v610 + 279), v625);
          v612 = (char *)v610[278];
          v614 = (char *)v610[277];
        }
        else
        {
          v626 = 0;
        }
        v627 = &v626[8 * v622];
        v628 = &v626[8 * v625];
        *(_QWORD *)v627 = v611;
        v621 = v627 + 8;
        while (v612 != v614)
        {
          v630 = *((_QWORD *)v612 - 1);
          v612 -= 8;
          *((_QWORD *)v627 - 1) = v630;
          v627 -= 8;
        }
        goto LABEL_899;
      }
    }
    else
    {
      if (v609 != 1)
        goto LABEL_902;
      v610 = *(_QWORD **)a1[1];
      v611 = *(_WORD *)(a1[2] + 76) & 0x7FFF;
      v612 = (char *)v610[278];
      v613 = v610[279];
      if ((unint64_t)v612 >= v613)
      {
        v614 = (char *)v610[277];
        v615 = (v612 - v614) >> 3;
        if ((unint64_t)(v615 + 1) >> 61)
          goto LABEL_1032;
        v616 = v613 - (_QWORD)v614;
        v617 = (uint64_t)(v613 - (_QWORD)v614) >> 2;
        if (v617 <= v615 + 1)
          v617 = v615 + 1;
        if (v616 >= 0x7FFFFFFFFFFFFFF8)
          v618 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v618 = v617;
        if (v618)
        {
          v619 = (char *)sub_40FC((uint64_t)(v610 + 279), v618);
          v612 = (char *)v610[278];
          v614 = (char *)v610[277];
        }
        else
        {
          v619 = 0;
        }
        v627 = &v619[8 * v615];
        v628 = &v619[8 * v618];
        *(_QWORD *)v627 = v611;
        v621 = v627 + 8;
        while (v612 != v614)
        {
          v629 = *((_QWORD *)v612 - 1);
          v612 -= 8;
          *((_QWORD *)v627 - 1) = v629;
          v627 -= 8;
        }
LABEL_899:
        v610[277] = v627;
        v610[278] = v621;
        v610[279] = v628;
        if (v614)
          operator delete(v614);
        goto LABEL_901;
      }
    }
    *(_QWORD *)v612 = v611;
    v621 = v612 + 8;
LABEL_901:
    v610[278] = v621;
LABEL_902:
    v631 = 1 << *(_DWORD *)(v3 + 48);
    if (v631 == 2)
    {
      v632 = *(_QWORD **)a1[1];
      v633 = *(_WORD *)(a1[2] + 86) & 0x7FFF;
      v634 = (char *)v632[281];
      v642 = v632[282];
      if ((unint64_t)v634 >= v642)
      {
        v636 = (char *)v632[280];
        v644 = (v634 - v636) >> 3;
        if ((unint64_t)(v644 + 1) >> 61)
          goto LABEL_1032;
        v645 = v642 - (_QWORD)v636;
        v646 = (uint64_t)(v642 - (_QWORD)v636) >> 2;
        if (v646 <= v644 + 1)
          v646 = v644 + 1;
        if (v645 >= 0x7FFFFFFFFFFFFFF8)
          v647 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v647 = v646;
        if (v647)
        {
          v648 = (char *)sub_40FC((uint64_t)(v632 + 282), v647);
          v634 = (char *)v632[281];
          v636 = (char *)v632[280];
        }
        else
        {
          v648 = 0;
        }
        v649 = &v648[8 * v644];
        v650 = &v648[8 * v647];
        *(_QWORD *)v649 = v633;
        v643 = v649 + 8;
        while (v634 != v636)
        {
          v652 = *((_QWORD *)v634 - 1);
          v634 -= 8;
          *((_QWORD *)v649 - 1) = v652;
          v649 -= 8;
        }
        goto LABEL_931;
      }
    }
    else
    {
      if (v631 != 1)
        goto LABEL_934;
      v632 = *(_QWORD **)a1[1];
      v633 = *(_WORD *)(a1[2] + 86) & 0x7FFF;
      v634 = (char *)v632[281];
      v635 = v632[282];
      if ((unint64_t)v634 >= v635)
      {
        v636 = (char *)v632[280];
        v637 = (v634 - v636) >> 3;
        if ((unint64_t)(v637 + 1) >> 61)
          goto LABEL_1032;
        v638 = v635 - (_QWORD)v636;
        v639 = (uint64_t)(v635 - (_QWORD)v636) >> 2;
        if (v639 <= v637 + 1)
          v639 = v637 + 1;
        if (v638 >= 0x7FFFFFFFFFFFFFF8)
          v640 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v640 = v639;
        if (v640)
        {
          v641 = (char *)sub_40FC((uint64_t)(v632 + 282), v640);
          v634 = (char *)v632[281];
          v636 = (char *)v632[280];
        }
        else
        {
          v641 = 0;
        }
        v649 = &v641[8 * v637];
        v650 = &v641[8 * v640];
        *(_QWORD *)v649 = v633;
        v643 = v649 + 8;
        while (v634 != v636)
        {
          v651 = *((_QWORD *)v634 - 1);
          v634 -= 8;
          *((_QWORD *)v649 - 1) = v651;
          v649 -= 8;
        }
LABEL_931:
        v632[280] = v649;
        v632[281] = v643;
        v632[282] = v650;
        if (v636)
          operator delete(v636);
        goto LABEL_933;
      }
    }
    *(_QWORD *)v634 = v633;
    v643 = v634 + 8;
LABEL_933:
    v632[281] = v643;
LABEL_934:
    v653 = 1 << *(_DWORD *)(v3 + 48);
    if (v653 == 2)
    {
      v654 = *(_QWORD **)a1[1];
      v655 = *(_WORD *)(a1[2] + 78) & 0x7FFF;
      v656 = (char *)v654[284];
      v664 = v654[285];
      if ((unint64_t)v656 >= v664)
      {
        v658 = (char *)v654[283];
        v666 = (v656 - v658) >> 3;
        if ((unint64_t)(v666 + 1) >> 61)
          goto LABEL_1032;
        v667 = v664 - (_QWORD)v658;
        v668 = (uint64_t)(v664 - (_QWORD)v658) >> 2;
        if (v668 <= v666 + 1)
          v668 = v666 + 1;
        if (v667 >= 0x7FFFFFFFFFFFFFF8)
          v669 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v669 = v668;
        if (v669)
        {
          v670 = (char *)sub_40FC((uint64_t)(v654 + 285), v669);
          v656 = (char *)v654[284];
          v658 = (char *)v654[283];
        }
        else
        {
          v670 = 0;
        }
        v671 = &v670[8 * v666];
        v672 = &v670[8 * v669];
        *(_QWORD *)v671 = v655;
        v665 = v671 + 8;
        while (v656 != v658)
        {
          v674 = *((_QWORD *)v656 - 1);
          v656 -= 8;
          *((_QWORD *)v671 - 1) = v674;
          v671 -= 8;
        }
        goto LABEL_963;
      }
    }
    else
    {
      if (v653 != 1)
        goto LABEL_966;
      v654 = *(_QWORD **)a1[1];
      v655 = *(_WORD *)(a1[2] + 78) & 0x7FFF;
      v656 = (char *)v654[284];
      v657 = v654[285];
      if ((unint64_t)v656 >= v657)
      {
        v658 = (char *)v654[283];
        v659 = (v656 - v658) >> 3;
        if ((unint64_t)(v659 + 1) >> 61)
          goto LABEL_1032;
        v660 = v657 - (_QWORD)v658;
        v661 = (uint64_t)(v657 - (_QWORD)v658) >> 2;
        if (v661 <= v659 + 1)
          v661 = v659 + 1;
        if (v660 >= 0x7FFFFFFFFFFFFFF8)
          v662 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v662 = v661;
        if (v662)
        {
          v663 = (char *)sub_40FC((uint64_t)(v654 + 285), v662);
          v656 = (char *)v654[284];
          v658 = (char *)v654[283];
        }
        else
        {
          v663 = 0;
        }
        v671 = &v663[8 * v659];
        v672 = &v663[8 * v662];
        *(_QWORD *)v671 = v655;
        v665 = v671 + 8;
        while (v656 != v658)
        {
          v673 = *((_QWORD *)v656 - 1);
          v656 -= 8;
          *((_QWORD *)v671 - 1) = v673;
          v671 -= 8;
        }
LABEL_963:
        v654[283] = v671;
        v654[284] = v665;
        v654[285] = v672;
        if (v658)
          operator delete(v658);
        goto LABEL_965;
      }
    }
    *(_QWORD *)v656 = v655;
    v665 = v656 + 8;
LABEL_965:
    v654[284] = v665;
LABEL_966:
    v675 = 1 << *(_DWORD *)(v3 + 48);
    if (v675 == 2)
    {
      v676 = *(_QWORD **)a1[1];
      v677 = *(_WORD *)(a1[2] + 88) & 0x7FFF;
      v678 = (char *)v676[287];
      v686 = v676[288];
      if ((unint64_t)v678 >= v686)
      {
        v680 = (char *)v676[286];
        v688 = (v678 - v680) >> 3;
        if ((unint64_t)(v688 + 1) >> 61)
          goto LABEL_1032;
        v689 = v686 - (_QWORD)v680;
        v690 = (uint64_t)(v686 - (_QWORD)v680) >> 2;
        if (v690 <= v688 + 1)
          v690 = v688 + 1;
        if (v689 >= 0x7FFFFFFFFFFFFFF8)
          v691 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v691 = v690;
        if (v691)
        {
          v692 = (char *)sub_40FC((uint64_t)(v676 + 288), v691);
          v678 = (char *)v676[287];
          v680 = (char *)v676[286];
        }
        else
        {
          v692 = 0;
        }
        v693 = &v692[8 * v688];
        v694 = &v692[8 * v691];
        *(_QWORD *)v693 = v677;
        v687 = v693 + 8;
        while (v678 != v680)
        {
          v696 = *((_QWORD *)v678 - 1);
          v678 -= 8;
          *((_QWORD *)v693 - 1) = v696;
          v693 -= 8;
        }
        goto LABEL_995;
      }
    }
    else
    {
      if (v675 != 1)
        goto LABEL_998;
      v676 = *(_QWORD **)a1[1];
      v677 = *(_WORD *)(a1[2] + 88) & 0x7FFF;
      v678 = (char *)v676[287];
      v679 = v676[288];
      if ((unint64_t)v678 >= v679)
      {
        v680 = (char *)v676[286];
        v681 = (v678 - v680) >> 3;
        if ((unint64_t)(v681 + 1) >> 61)
          goto LABEL_1032;
        v682 = v679 - (_QWORD)v680;
        v683 = (uint64_t)(v679 - (_QWORD)v680) >> 2;
        if (v683 <= v681 + 1)
          v683 = v681 + 1;
        if (v682 >= 0x7FFFFFFFFFFFFFF8)
          v684 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v684 = v683;
        if (v684)
        {
          v685 = (char *)sub_40FC((uint64_t)(v676 + 288), v684);
          v678 = (char *)v676[287];
          v680 = (char *)v676[286];
        }
        else
        {
          v685 = 0;
        }
        v693 = &v685[8 * v681];
        v694 = &v685[8 * v684];
        *(_QWORD *)v693 = v677;
        v687 = v693 + 8;
        while (v678 != v680)
        {
          v695 = *((_QWORD *)v678 - 1);
          v678 -= 8;
          *((_QWORD *)v693 - 1) = v695;
          v693 -= 8;
        }
LABEL_995:
        v676[286] = v693;
        v676[287] = v687;
        v676[288] = v694;
        if (v680)
          operator delete(v680);
        goto LABEL_997;
      }
    }
    *(_QWORD *)v678 = v677;
    v687 = v678 + 8;
LABEL_997:
    v676[287] = v687;
LABEL_998:
    v697 = 1 << *(_DWORD *)(v3 + 48);
    if (v697 == 2)
    {
      v709 = a1[2];
      v699 = *(_QWORD **)a1[1];
      v700 = *(_WORD *)(v709 + 80) & 0x7FFF;
      v701 = (char *)v699[290];
      v710 = v699[291];
      if ((unint64_t)v701 >= v710)
      {
        v703 = (char *)v699[289];
        v712 = (v701 - v703) >> 3;
        if (!((unint64_t)(v712 + 1) >> 61))
        {
          v713 = v710 - (_QWORD)v703;
          v714 = (uint64_t)(v710 - (_QWORD)v703) >> 2;
          if (v714 <= v712 + 1)
            v714 = v712 + 1;
          if (v713 >= 0x7FFFFFFFFFFFFFF8)
            v715 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v715 = v714;
          if (v715)
          {
            v716 = (char *)sub_40FC((uint64_t)(v699 + 291), v715);
            v701 = (char *)v699[290];
            v703 = (char *)v699[289];
          }
          else
          {
            v716 = 0;
          }
          v717 = &v716[8 * v712];
          v718 = &v716[8 * v715];
          *(_QWORD *)v717 = v700;
          v711 = v717 + 8;
          while (v701 != v703)
          {
            v720 = *((_QWORD *)v701 - 1);
            v701 -= 8;
            *((_QWORD *)v717 - 1) = v720;
            v717 -= 8;
          }
          goto LABEL_1027;
        }
LABEL_1032:
        sub_4074();
      }
    }
    else
    {
      if (v697 != 1)
      {
LABEL_1030:
        *a2 = 1;
        return;
      }
      v698 = a1[2];
      v699 = *(_QWORD **)a1[1];
      v700 = *(_WORD *)(v698 + 80) & 0x7FFF;
      v701 = (char *)v699[290];
      v702 = v699[291];
      if ((unint64_t)v701 >= v702)
      {
        v703 = (char *)v699[289];
        v704 = (v701 - v703) >> 3;
        if (!((unint64_t)(v704 + 1) >> 61))
        {
          v705 = v702 - (_QWORD)v703;
          v706 = (uint64_t)(v702 - (_QWORD)v703) >> 2;
          if (v706 <= v704 + 1)
            v706 = v704 + 1;
          if (v705 >= 0x7FFFFFFFFFFFFFF8)
            v707 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v707 = v706;
          if (v707)
          {
            v708 = (char *)sub_40FC((uint64_t)(v699 + 291), v707);
            v701 = (char *)v699[290];
            v703 = (char *)v699[289];
          }
          else
          {
            v708 = 0;
          }
          v717 = &v708[8 * v704];
          v718 = &v708[8 * v707];
          *(_QWORD *)v717 = v700;
          v711 = v717 + 8;
          while (v701 != v703)
          {
            v719 = *((_QWORD *)v701 - 1);
            v701 -= 8;
            *((_QWORD *)v717 - 1) = v719;
            v717 -= 8;
          }
LABEL_1027:
          v699[289] = v717;
          v699[290] = v711;
          v699[291] = v718;
          if (v703)
            operator delete(v703);
          goto LABEL_1029;
        }
        goto LABEL_1032;
      }
    }
    *(_QWORD *)v701 = v700;
    v711 = v701 + 8;
LABEL_1029:
    v699[290] = v711;
    goto LABEL_1030;
  }
  v16 = 1 << *(_DWORD *)(v3 + 48);
  if (v16 == 2 || v16 == 1)
  {
    v18 = (_QWORD *)a1[1];
    v17 = (_WORD *)a1[2];
    v19 = (_QWORD *)*v18;
    *(_QWORD *)(v19[197] - 8) += v17[17] & 0x7FFF;
    *(_QWORD *)(v19[200] - 8) += v17[13] & 0x7FFF;
    *(_QWORD *)(v19[203] - 8) += v17[18] & 0x7FFF;
    *(_QWORD *)(v19[206] - 8) += v17[14] & 0x7FFF;
    *(_QWORD *)(v19[209] - 8) += v17[19] & 0x7FFF;
    *(_QWORD *)(v19[212] - 8) += v17[15] & 0x7FFF;
    *(_QWORD *)(v19[215] - 8) += v17[20] & 0x7FFF;
    *(_QWORD *)(v19[218] - 8) += v17[16] & 0x7FFF;
    *(_QWORD *)(v19[221] - 8) += v17[25] & 0x7FFF;
    *(_QWORD *)(v19[224] - 8) += v17[21] & 0x7FFF;
    v20 = (_WORD *)a1[2];
    v21 = *(_QWORD **)a1[1];
    *(_QWORD *)(v21[227] - 8) += v20[26] & 0x7FFF;
    *(_QWORD *)(v21[230] - 8) += v20[22] & 0x7FFF;
    *(_QWORD *)(v21[233] - 8) += v20[27] & 0x7FFF;
    *(_QWORD *)(v21[236] - 8) += v20[23] & 0x7FFF;
    *(_QWORD *)(v21[239] - 8) += v20[28] & 0x7FFF;
    *(_QWORD *)(v21[242] - 8) += v20[24] & 0x7FFF;
    *(_QWORD *)(v21[245] - 8) += v20[33] & 0x7FFF;
    *(_QWORD *)(v21[248] - 8) += v20[29] & 0x7FFF;
    *(_QWORD *)(v21[251] - 8) += v20[34] & 0x7FFF;
    *(_QWORD *)(v21[254] - 8) += v20[30] & 0x7FFF;
    v22 = (_WORD *)a1[2];
    v23 = *(_QWORD **)a1[1];
    *(_QWORD *)(v23[257] - 8) += v22[35] & 0x7FFF;
    *(_QWORD *)(v23[260] - 8) += v22[31] & 0x7FFF;
    *(_QWORD *)(v23[263] - 8) += v22[36] & 0x7FFF;
    *(_QWORD *)(v23[266] - 8) += v22[32] & 0x7FFF;
    *(_QWORD *)(v23[269] - 8) += v22[41] & 0x7FFF;
    *(_QWORD *)(v23[272] - 8) += v22[37] & 0x7FFF;
    *(_QWORD *)(v23[275] - 8) += v22[42] & 0x7FFF;
    *(_QWORD *)(v23[278] - 8) += v22[38] & 0x7FFF;
    *(_QWORD *)(v23[281] - 8) += v22[43] & 0x7FFF;
    *(_QWORD *)(v23[284] - 8) += v22[39] & 0x7FFF;
    v24 = a1[2];
    v25 = (_QWORD *)*v18;
    *(_QWORD *)(v25[287] - 8) += *(_WORD *)(v24 + 88) & 0x7FFF;
    *(_QWORD *)(v25[290] - 8) += *(_WORD *)(v24 + 80) & 0x7FFF;
  }
}

