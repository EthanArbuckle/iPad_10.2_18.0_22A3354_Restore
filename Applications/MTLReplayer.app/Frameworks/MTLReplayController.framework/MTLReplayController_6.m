void GPUToolsPlatformLLVMShaderProfilerHelper::GPUToolsPlatformLLVMShaderProfilerHelper(GPUToolsPlatformLLVMShaderProfilerHelper *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = 0;
  v1 = LLVMInitializeAGX2TargetInfo();
  v2 = LLVMInitializeAGX2TargetMC(v1);
  v3 = LLVMInitializeAGX2Disassembler(v2);
  LLVMInitializeAGX2ClauseAnalyzer(v3);
}

uint64_t *std::unique_ptr<GPUToolsPlatformLLVMShaderProfilerHelperImpl>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 136);
    *(_QWORD *)(v2 + 136) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *(uint64_t **)(v2 + 128);
    *(_QWORD *)(v2 + 128) = 0;
    if (v4)
      std::default_delete<TargetClauseAnalysis>::operator()[abi:nn180100](v4);
    v5 = *(_QWORD *)(v2 + 120);
    *(_QWORD *)(v2 + 120) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *(_QWORD *)(v2 + 112);
    *(_QWORD *)(v2 + 112) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *(_QWORD *)(v2 + 104);
    *(_QWORD *)(v2 + 104) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    std::unique_ptr<llvm::MCContext>::reset[abi:nn180100]((llvm::MCContext **)(v2 + 96), 0);
    v11 = *(_QWORD *)(v2 + 88);
    *(_QWORD *)(v2 + 88) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *(_QWORD *)(v2 + 80);
    *(_QWORD *)(v2 + 80) = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(_QWORD *)(v2 + 72);
    *(_QWORD *)(v2 + 72) = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(v2 + 64) = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v16)
      operator delete();
    v17 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    if (v18)
      std::default_delete<llvm::MCRegisterInfo const>::operator()[abi:nn180100](v18, v8, v9, v10);
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  return result;
}

void std::default_delete<TargetClauseAnalysis>::operator()[abi:nn180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void **v14;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    v14 = (void **)(v1 + 224);
    std::vector<TargetBlock>::__destroy_vector::operator()[abi:nn180100](&v14);
    v2 = *(_QWORD *)(v1 + 200);
    if (v2)
    {
      v3 = *(_QWORD *)(v1 + 208);
      v4 = *(void **)(v1 + 200);
      if (v3 != v2)
      {
        do
        {
          v5 = *(void **)(v3 - 24);
          if (v5)
          {
            *(_QWORD *)(v3 - 16) = v5;
            operator delete(v5);
          }
          v3 -= 32;
        }
        while (v3 != v2);
        v4 = *(void **)(v1 + 200);
      }
      *(_QWORD *)(v1 + 208) = v2;
      operator delete(v4);
    }
    v6 = *(_QWORD **)(v1 + 176);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    v8 = *(void **)(v1 + 160);
    *(_QWORD *)(v1 + 160) = 0;
    if (v8)
      operator delete(v8);
    v9 = *(void **)(v1 + 136);
    if (v9)
    {
      *(_QWORD *)(v1 + 144) = v9;
      operator delete(v9);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1 + 96);
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::~__hash_table(v1 + 56);
    v10 = *(void **)(v1 + 24);
    if (v10)
    {
      *(_QWORD *)(v1 + 32) = v10;
      operator delete(v10);
    }
    v11 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      v12 = *(_QWORD *)(v1 + 8);
      v13 = *(void **)v1;
      if ((void *)v12 != v11)
      {
        do
        {
          v12 -= 88;
          std::allocator<TargetClause>::destroy[abi:nn180100](v12);
        }
        while ((void *)v12 != v11);
        v13 = *(void **)v1;
      }
      *(_QWORD *)(v1 + 8) = v11;
      operator delete(v13);
    }
    operator delete();
  }
  operator delete();
}

llvm::MCContext *std::unique_ptr<llvm::MCContext>::reset[abi:nn180100](llvm::MCContext **a1, llvm::MCContext *a2)
{
  llvm::MCContext *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::MCContext::~MCContext(result);
    operator delete();
  }
  return result;
}

void std::default_delete<llvm::MCRegisterInfo const>::operator()[abi:nn180100](uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5;

  llvm::deallocate_buffer(*(llvm **)(a1 + 184), (void *)(8 * *(unsigned int *)(a1 + 200)), 4uLL, a4);
  llvm::deallocate_buffer(*(llvm **)(a1 + 160), (void *)(8 * *(unsigned int *)(a1 + 176)), 4uLL, v5);
  operator delete();
}

void GPUToolsPlatformLLVMShaderProfilerHelper::SetFileForAnalysis(GPUToolsPlatformLLVMShaderProfilerHelper *this, const char *a2, int a3, __sFILE *a4)
{
  operator new();
}

uint64_t GPUToolsPlatformLLVMShaderProfilerHelperImpl::_CompleteSetupForAnalysis(GPUToolsPlatformLLVMShaderProfilerHelperImpl *this, int a2)
{
  int v4;
  std::string *v5;
  std::string::size_type size;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  __int128 *v11;
  uint64_t v12;
  uint64_t (*MCRegInfo)(void **);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t MCAsmInfo;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  std::string *v24;
  std::string::size_type v25;
  void **v26;
  uint64_t v27;
  uint64_t MCSubtargetInfo;
  uint64_t v29;
  std::string v31;
  _OWORD v32[52];
  uint64_t v33;
  char v34;
  char v35;
  __int128 v36;
  void **v37[4];
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *__p;
  char v44;
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *v48[2];
  unsigned __int8 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  std::string v53;

  v4 = a2 + 10;
  std::string::basic_string[abi:nn180100]<0>(&v53, "g");
  std::to_string(&v31, v4);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v31;
  else
    v5 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  else
    size = v31.__r_.__value_.__l.__size_;
  std::string::append(&v53, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  v7 = (_DWORD *)*((_QWORD *)this + 13);
  if (v7 && (v7[2] - 24) > 0xFFFFFFF0)
  {
    v51 = 0u;
    v52 = 0u;
    if (a2 <= 4)
      v8 = 28;
    else
      v8 = 29;
    v50 = 0uLL;
    llvm::Triple::setArch(&v50, v8, 0);
    (*(void (**)(std::string *__return_ptr, _DWORD *))(*(_QWORD *)v7 + 384))(&v31, v7);
    llvm::SubtargetFeatures::getString((llvm::SubtargetFeatures *)&v31);
    v37[0] = (void **)&v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v37);
    v46[0] = 0;
    v46[1] = 0;
    v47 = 0;
    v9 = llvm::TargetRegistry::lookupTarget(&v50, v46);
    *((_QWORD *)this + 3) = v9;
    if (!v9)
      goto LABEL_58;
    v10 = *(void (**)(void))(v9 + 288);
    if (v10)
    {
      v10();
      v9 = *((_QWORD *)this + 3);
    }
    if ((SBYTE7(v51) & 0x80u) == 0)
      v11 = &v50;
    else
      v11 = (__int128 *)v50;
    if ((SBYTE7(v51) & 0x80u) == 0)
      v12 = BYTE7(v51);
    else
      v12 = *((_QWORD *)&v50 + 1);
    MCRegInfo = llvm::Target::createMCRegInfo(*(uint64_t (**)(void **))(v9 + 80), (uint64_t)v11, v12);
    v17 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = MCRegInfo;
    if (v17)
      std::default_delete<llvm::MCRegisterInfo const>::operator()[abi:nn180100](v17, v14, v15, v16);
    if (MCRegInfo)
    {
      llvm::MCTargetOptions::MCTargetOptions((llvm::MCTargetOptions *)v37);
      if ((SBYTE7(v51) & 0x80u) == 0)
        v18 = &v50;
      else
        v18 = (__int128 *)v50;
      if ((SBYTE7(v51) & 0x80u) == 0)
        v19 = BYTE7(v51);
      else
        v19 = *((_QWORD *)&v50 + 1);
      MCAsmInfo = llvm::Target::createMCAsmInfo(*(uint64_t (**)(uint64_t, void **, uint64_t))(*((_QWORD *)this + 3) + 48), *((_QWORD *)this + 4), (uint64_t)v18, v19, (uint64_t)v37);
      v21 = *((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = MCAsmInfo;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      if ((SBYTE7(v51) & 0x80u) == 0)
        v22 = &v50;
      else
        v22 = (__int128 *)v50;
      if ((SBYTE7(v51) & 0x80u) == 0)
        v23 = BYTE7(v51);
      else
        v23 = *((_QWORD *)&v50 + 1);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v53;
      else
        v24 = (std::string *)v53.__r_.__value_.__r.__words[0];
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      else
        v25 = v53.__r_.__value_.__l.__size_;
      if ((v49 & 0x80u) == 0)
        v26 = v48;
      else
        v26 = (void **)v48[0];
      if ((v49 & 0x80u) == 0)
        v27 = v49;
      else
        v27 = (uint64_t)v48[1];
      MCSubtargetInfo = llvm::Target::createMCSubtargetInfo(*(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)this + 3)+ 88), (uint64_t)v22, v23, (uint64_t)v24, v25, (uint64_t)v26, v27);
      v29 = *((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = MCSubtargetInfo;
      if (v29)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        MCSubtargetInfo = *((_QWORD *)this + 8);
      }
      if (MCSubtargetInfo && *((_QWORD *)this + 5))
      {
        v35 = 0;
        v36 = 0u;
        v31.__r_.__value_.__l.__size_ = 0;
        LODWORD(v31.__r_.__value_.__r.__words[2]) = 0;
        bzero(v32, 0x329uLL);
        v32[51] = 0u;
        v34 = 0;
        v33 = 0;
        operator new();
      }
      *((_BYTE *)this + 152) = 0;
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v31);
      if (v44 < 0)
        operator delete(__p);
      if (v42 < 0)
        operator delete(v41);
      if (v40 < 0)
        operator delete(v39);
      if (v38 < 0)
        operator delete(v37[2]);
    }
    else
    {
LABEL_58:
      *((_BYTE *)this + 152) = 0;
    }
    if (SHIBYTE(v47) < 0)
      operator delete(v46[0]);
    if ((char)v49 < 0)
      operator delete(v48[0]);
    if (SBYTE7(v51) < 0)
      operator delete((void *)v50);
  }
  else
  {
    *((_BYTE *)this + 152) = 0;
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  return 0;
}

uint64_t (*llvm::Target::createMCRegInfo(uint64_t (*a1)(void **), uint64_t a2, uint64_t a3))(void **)
{
  uint64_t (*v3)(void **);
  _QWORD v5[4];
  __int16 v6;
  void *__p[2];
  char v8;

  v3 = a1;
  if (a1)
  {
    v6 = 261;
    v5[0] = a2;
    v5[1] = a3;
    llvm::Triple::Triple(__p, v5);
    v3 = (uint64_t (*)(void **))v3(__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return v3;
}

uint64_t llvm::Target::createMCAsmInfo(uint64_t (*a1)(uint64_t, void **, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[4];
  __int16 v11;
  void *__p[2];
  char v13;

  if (!a1)
    return 0;
  v11 = 261;
  v10[0] = a3;
  v10[1] = a4;
  llvm::Triple::Triple(__p, v10);
  v8 = a1(a2, __p, a5);
  if (v13 < 0)
    operator delete(__p[0]);
  return v8;
}

uint64_t llvm::Target::createMCSubtargetInfo(uint64_t (*a1)(void **, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  _QWORD v14[4];
  __int16 v15;
  void *__p[2];
  char v17;

  if (!a1)
    return 0;
  v15 = 261;
  v14[0] = a2;
  v14[1] = a3;
  llvm::Triple::Triple(__p, v14);
  v12 = a1(__p, a4, a5, a6, a7);
  if (v17 < 0)
    operator delete(__p[0]);
  return v12;
}

void GPUToolsPlatformLLVMShaderProfilerHelper::SetBinaryForAnalysis(GPUToolsPlatformLLVMShaderProfilerHelper *this, const char *a2)
{
  operator new();
}

uint64_t llvm::raw_ostream::SetUnbuffered(llvm::raw_ostream *this)
{
  if (*((_QWORD *)this + 4) != *((_QWORD *)this + 2))
    llvm::raw_ostream::flush_nonempty(this);
  return llvm::raw_ostream::SetBufferAndMode(this, 0, 0, 0);
}

_QWORD *GPUToolsPlatformLLVMShaderProfilerHelperImpl::_DumpInstructionsToOStream(_QWORD *this, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  _QWORD *v5;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _WORD *v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  uint64_t v19;

  v5 = (_QWORD *)this[15];
  v15 = v5;
  v16 = a3;
  if (a3 != a4)
  {
    v8 = this;
    this = v5;
    while (1)
    {
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*this + 24))(&v17, this, a3);
      v9 = v17;
      if ((v18 & 1) != 0)
        break;
      v10 = *v17;
      v17 = &off_727880;
      v18 = "%04x";
      v19 = v10;
      v11 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<(a2, &v17);
      v12 = (_WORD *)*((_QWORD *)v11 + 4);
      if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 1uLL)
      {
        *v12 = 8250;
        *((_QWORD *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, ": ", 2uLL);
      }
      v13 = v8[9];
      if (v13)
        (*(void (**)(uint64_t, _QWORD *, _QWORD, const char *, _QWORD, _QWORD, llvm::raw_ostream *))(*(_QWORD *)v13 + 32))(v13, v9 + 3, 0, "", 0, v8[8], a2);
      v14 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) == v14)
      {
        llvm::raw_ostream::write(a2, "\n", 1uLL);
      }
      else
      {
        *v14 = 10;
        ++*((_QWORD *)a2 + 4);
      }
      llvm::agxclauseanalyzer::AnalyzerInput::InstIteratorImpl<llvm::agxclauseanalyzer::AnalyzerInput>::operator++(&v15);
      this = v15;
      a3 = v16;
      if (v15 == v5 && v16 == a4)
        return this;
    }
    this = (_QWORD *)fwrite("Unexpected instruction found", 0x1CuLL, 1uLL, __stderrp);
    if (v9)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  }
  return this;
}

unsigned __int8 *std::remove[abi:nn180100]<std::__wrap_iter<char *>,char>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;
  unsigned __int8 *v6;
  int v8;

  result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (_BYTE *)a1);
  if (!result)
    result = a2;
  v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      v8 = *v6;
      if (v8 != *a3)
        *result++ = v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t llvm::format_object<unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t GPUToolsPlatformLLVMShaderProfilerHelperImpl::GetTargetClauseAnalysis(GPUToolsPlatformLLVMShaderProfilerHelperImpl *this)
{
  if (!*((_QWORD *)this + 16))
    operator new();
  return *((_QWORD *)this + 16);
}

void ***GPUToolsPlatformLLVMShaderProfilerHelper::ShaderInstructionInfoFromBinary(void ***this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void ***v4;
  uint64_t v5;
  uint64_t v6;
  void ***v7;
  void **v8;
  char *v9;
  int v10;
  int v11;
  uint64_t v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  std::string *v16;
  void **v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  void **v26;
  char *v27;
  std::string *v28;
  __int128 v29;
  void **v30;
  uint64_t v31;
  __int128 v32;
  void **v33;
  void ***v35;
  void *v38;
  void *__p[2];
  uint64_t v40;
  void ***v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  int v50;
  std::string *v51;

  *this = 0;
  this[1] = 0;
  this[2] = 0;
  v4 = *(void ****)(a2 + 120);
  v41 = v4;
  v42 = a3;
  if (a3 == a4)
    return this;
  v5 = a4;
  v6 = a2;
  v7 = this;
  v8 = 0;
  this = v4;
  v35 = v4;
  while (1)
  {
    ((void (*)(char **__return_ptr, void ***, uint64_t))(*this)[3])(&v43, this, a3);
    v9 = v43;
    if ((v44 & 1) != 0)
      break;
    if (v43)
    {
      v10 = (*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(v6 + 88) + 56))(*(_QWORD *)(v6 + 88), v43);
      v11 = (*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(v6 + 88) + 64))(*(_QWORD *)(v6 + 88), v9);
      __p[0] = 0;
      __p[1] = 0;
      v40 = 0;
      v44 = 0;
      v48 = 0;
      v49 = 0;
      v50 = 1;
      v46 = 0;
      v47 = 0;
      v45 = 0;
      v51 = (std::string *)__p;
      llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v43);
      v38 = *(void **)v9;
      v12 = *(_QWORD *)(v6 + 72);
      if (v12)
        (*(void (**)(uint64_t, char *, _QWORD, const char *, _QWORD, _QWORD, char **))(*(_QWORD *)v12 + 32))(v12, v9 + 24, 0, "", 0, *(_QWORD *)(v6 + 64), &v43);
      v13 = v51;
      if (SHIBYTE(v51->__r_.__value_.__r.__words[2]) < 0)
      {
        v15 = (std::string *)v51->__r_.__value_.__r.__words[0];
        size = v51->__r_.__value_.__l.__size_;
        if (!size)
          goto LABEL_17;
      }
      else
      {
        size = HIBYTE(v51->__r_.__value_.__r.__words[2]);
        v15 = v51;
        if (!*((_BYTE *)&v51->__r_.__value_.__s + 23))
          goto LABEL_17;
      }
      v16 = v15;
      while (v16->__r_.__value_.__s.__data_[0] == 9)
      {
        v16 = (std::string *)((char *)v16 + 1);
        if (!--size)
          goto LABEL_17;
      }
      if ((char *)v16 - (char *)v15 != -1)
        std::string::erase(v51, 0, (char *)v16 - (char *)v15);
LABEL_17:
      v17 = v7[2];
      if (v8 < v17)
      {
        *(_DWORD *)v8 = v10;
        *((_DWORD *)v8 + 1) = v11;
        v18 = (std::string *)(v8 + 1);
        if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v18, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
        }
        else
        {
          v19 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v8[3] = (void *)v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        }
        v8[4] = v38;
        v26 = v8 + 5;
        goto LABEL_47;
      }
      v20 = *v7;
      v21 = 0xCCCCCCCCCCCCCCCDLL * (v8 - *v7);
      v22 = v21 + 1;
      if (v21 + 1 > 0x666666666666666)
        abort();
      v23 = 0xCCCCCCCCCCCCCCCDLL * (v17 - v20);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x333333333333333)
        v24 = 0x666666666666666;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v25 = operator new(40 * v24);
      }
      else
      {
        v25 = 0;
      }
      v27 = (char *)&v25[5 * v21];
      *(_DWORD *)v27 = v10;
      *((_DWORD *)v27 + 1) = v11;
      v28 = (std::string *)(v27 + 8);
      if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v28, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
        v20 = *v7;
        v8 = v7[1];
      }
      else
      {
        v29 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        *((_QWORD *)v27 + 3) = *((_QWORD *)&v13->__r_.__value_.__l + 2);
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      }
      v30 = (void **)&v25[5 * v24];
      v25[5 * v21 + 4] = v38;
      v26 = (void **)(v27 + 40);
      if (v8 == v20)
      {
        *v7 = (void **)v27;
        v7[1] = v26;
        v7[2] = v30;
      }
      else
      {
        do
        {
          v31 = (uint64_t)*(v8 - 5);
          v8 -= 5;
          *((_QWORD *)v27 - 5) = v31;
          v27 -= 40;
          v32 = *(_OWORD *)(v8 + 1);
          *((_QWORD *)v27 + 3) = v8[3];
          *(_OWORD *)(v27 + 8) = v32;
          v8[2] = 0;
          v8[3] = 0;
          v8[1] = 0;
          *((_QWORD *)v27 + 4) = v8[4];
        }
        while (v8 != v20);
        v33 = *v7;
        v20 = v7[1];
        *v7 = (void **)v27;
        v7[1] = v26;
        v7[2] = v30;
        if (v20 != v33)
        {
          v6 = a2;
          v5 = a4;
          v4 = v35;
          do
          {
            if (*((char *)v20 - 9) < 0)
              operator delete(*(v20 - 4));
            v20 -= 5;
          }
          while (v20 != v33);
          v20 = v33;
          if (!v33)
            goto LABEL_47;
LABEL_46:
          operator delete(v20);
LABEL_47:
          v7[1] = v26;
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v43);
          if (SHIBYTE(v40) < 0)
            operator delete(__p[0]);
          v8 = v26;
          goto LABEL_50;
        }
      }
      v6 = a2;
      v5 = a4;
      v4 = v35;
      if (v20)
        goto LABEL_46;
      goto LABEL_47;
    }
LABEL_50:
    llvm::agxclauseanalyzer::AnalyzerInput::InstIteratorImpl<llvm::agxclauseanalyzer::AnalyzerInput>::operator++(&v41);
    this = v41;
    a3 = v42;
    if (v41 == v4 && v42 == v5)
      return this;
  }
  this = (void ***)fwrite("Unexpected instruction found", 0x1CuLL, 1uLL, __stderrp);
  if (v9)
    return (void ***)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 8))(v9);
  return this;
}

id GTShaderProfilerAnalyzeBinaryLLVM(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  llvm::MemoryBuffer *v10;
  std::string *v11;
  std::string::size_type size;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  void **v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  llvm::MemoryBuffer *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t MCSubtargetInfo;
  std::string v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *__p;
  char v46;
  uint64_t v47;
  void *v48[2];
  uint64_t v49;
  void *v50[2];
  unsigned __int8 v51;
  std::string v52;
  llvm::MemoryBuffer *v53;
  void *v54;
  std::string v55;
  _WORD v56[8];
  __int128 v57;
  uint64_t v58;
  char v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unsigned int v65[2];
  char v66;

  v5 = a1;
  v6 = a3;
  v7 = v6;
  if (a2 <= 0x7FFFFFFE)
  {
    v33 = v6;
    if (GTShaderProfilerAnalyzeBinaryLLVM::onceToken != -1)
      dispatch_once(&GTShaderProfilerAnalyzeBinaryLLVM::onceToken, &__block_literal_global_9317);
    MCSubtargetInfo = 0;
    v37 = 0u;
    v36 = 0u;
    v8 = objc_retainAutorelease(v5);
    v56[4] = 257;
    llvm::MemoryBuffer::getMemBufferCopy(&v53, objc_msgSend(v8, "bytes"), objc_msgSend(v8, "length"), &v55);
    llvm::MemoryBuffer::getMemBufferRef(v53);
    llvm::object::createBinary(v65, &v54, 0, 1);
    if ((v66 & 1) != 0)
    {
      v26 = 0;
    }
    else
    {
      v9 = *(_QWORD *)v65;
      *(_QWORD *)v65 = 0;
      v10 = v53;
      v53 = 0;
      *(_QWORD *)&v36 = v9;
      *((_QWORD *)&v36 + 1) = v10;
      std::string::basic_string[abi:nn180100]<0>(&v52, "g");
      std::to_string(&v55, a2 + 10);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v55;
      else
        v11 = (std::string *)v55.__r_.__value_.__r.__words[0];
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      else
        size = v55.__r_.__value_.__l.__size_;
      std::string::append(&v52, (const std::string::value_type *)v11, size);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      v13 = v36;
      if ((*(_DWORD *)(v36 + 8) - 9) >= 0xF)
        v13 = 0;
      v35 = v13;
      if (v13)
      {
        v63 = 0u;
        v64 = 0u;
        v62 = 0u;
        llvm::Triple::setArch(&v62, 28, 0);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v35 + 384))(&v55);
        llvm::SubtargetFeatures::getString((llvm::SubtargetFeatures *)&v55);
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v39);
        v48[0] = 0;
        v48[1] = 0;
        v49 = 0;
        v14 = llvm::TargetRegistry::lookupTarget(&v62, v48);
        v34 = v14;
        if (!v14)
          goto LABEL_54;
        v15 = *(void (**)(void))(v14 + 288);
        if (v15)
        {
          v15();
          v14 = v34;
        }
        v16 = (SBYTE7(v63) & 0x80u) == 0 ? &v62 : (__int128 *)v62;
        v17 = (SBYTE7(v63) & 0x80u) == 0 ? BYTE7(v63) : *((_QWORD *)&v62 + 1);
        *(_QWORD *)&v37 = llvm::Target::createMCRegInfo(*(uint64_t (**)(void **))(v14 + 80), (uint64_t)v16, v17);
        if ((_QWORD)v37)
        {
          llvm::MCTargetOptions::MCTargetOptions((llvm::MCTargetOptions *)&v39);
          if ((SBYTE7(v63) & 0x80u) == 0)
            v18 = &v62;
          else
            v18 = (__int128 *)v62;
          if ((SBYTE7(v63) & 0x80u) == 0)
            v19 = BYTE7(v63);
          else
            v19 = *((_QWORD *)&v62 + 1);
          *((_QWORD *)&v37 + 1) = llvm::Target::createMCAsmInfo(*(uint64_t (**)(uint64_t, void **, uint64_t))(v34 + 48), v37, (uint64_t)v18, v19, (uint64_t)&v39);
          if ((SBYTE7(v63) & 0x80u) == 0)
            v20 = &v62;
          else
            v20 = (__int128 *)v62;
          if ((SBYTE7(v63) & 0x80u) == 0)
            v21 = BYTE7(v63);
          else
            v21 = *((_QWORD *)&v62 + 1);
          if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = &v52;
          else
            v22 = (std::string *)v52.__r_.__value_.__r.__words[0];
          if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
          else
            v23 = v52.__r_.__value_.__l.__size_;
          if ((v51 & 0x80u) == 0)
            v24 = v50;
          else
            v24 = (void **)v50[0];
          if ((v51 & 0x80u) == 0)
            v25 = v51;
          else
            v25 = (uint64_t)v50[1];
          MCSubtargetInfo = llvm::Target::createMCSubtargetInfo(*(uint64_t (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 88), (uint64_t)v20, v21, (uint64_t)v22, v23, (uint64_t)v24, v25);
          v26 = DWORD2(v37);
          if (*((_QWORD *)&v37 + 1))
          {
            if (MCSubtargetInfo)
            {
              v60 = 0;
              v61 = 0u;
              v55.__r_.__value_.__l.__size_ = 0;
              LODWORD(v55.__r_.__value_.__r.__words[2]) = 0;
              bzero(v56, 0x329uLL);
              v57 = 0u;
              v59 = 0;
              v58 = 0;
              operator new();
            }
            v26 = 0;
          }
          v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
          std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v55);
          if (v46 < 0)
            operator delete(__p);
          if (v44 < 0)
            operator delete(v43);
          if (v42 < 0)
            operator delete(v41);
          if (v40 < 0)
            operator delete((void *)v39.__r_.__value_.__r.__words[2]);
        }
        else
        {
LABEL_54:
          v26 = 0;
        }
        if (SHIBYTE(v49) < 0)
          operator delete(v48[0]);
        if ((char)v51 < 0)
          operator delete(v50[0]);
        if (SBYTE7(v63) < 0)
          operator delete((void *)v62);
      }
      else
      {
        v26 = 0;
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
    }
    v27 = *(_QWORD *)v65;
    *(_QWORD *)v65 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = v53;
    v53 = 0;
    if (v28)
      (*(void (**)(llvm::MemoryBuffer *))(*(_QWORD *)v28 + 8))(v28);

    if (v26)
    {
      if ((objc_msgSend(v33, "setupBinary:targetIndex:", v8, a2) & 1) == 0)

      operator new();
    }
    v7 = v33;
    if (MCSubtargetInfo)
      (*(void (**)(uint64_t))(*(_QWORD *)MCSubtargetInfo + 8))(MCSubtargetInfo);
    if (*((_QWORD *)&v37 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 8))(*((_QWORD *)&v37 + 1));
    if ((_QWORD)v37)
      std::default_delete<llvm::MCRegisterInfo const>::operator()[abi:nn180100](v37, v29, v30, v31);
    if (*((_QWORD *)&v36 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 8))(*((_QWORD *)&v36 + 1));
    if ((_QWORD)v36)
      (*(void (**)(_QWORD))(*(_QWORD *)v36 + 8))(v36);
  }

  return 0;
}

uint64_t GTShaderProfilerLLVMTargetClauseAnalysis::addString(uint64_t a1, __int128 *a2)
{
  char v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  std::string *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  char **v22;
  char *j;
  unint64_t v24;
  _QWORD *v25;
  std::string *v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  int8x8_t prime;
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  std::string *v59;
  std::string *v60;
  __int128 v61;
  unint64_t v62;
  uint64_t v63;
  std::string *v64;
  __int128 v65;
  int64x2_t v66;
  std::string *v67;
  uint64_t v69;
  std::string *v70;
  void *v71;
  std::string::size_type v72;
  const std::string::value_type *v73;
  int v74;
  std::__split_buffer<std::string> v75;

  v4 = *((_BYTE *)a2 + 23);
  v74 = v4;
  v72 = *((_QWORD *)a2 + 1);
  v73 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v5 = (uint64_t *)a2;
  else
    v5 = *(uint64_t **)a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v5, v6);
  v8 = *(_QWORD *)(a1 + 168);
  if (v8)
  {
    v9 = v7;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v8)
        v12 = v7 % v8;
    }
    else
    {
      v12 = (v8 - 1) & v7;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)(a1 + 160) + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
            return *((unsigned int *)i + 10);
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v8)
              v15 %= v8;
          }
          else
          {
            v15 &= v8 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  v17 = *(_QWORD *)(a1 + 136);
  v16 = *(std::string **)(a1 + 144);
  v18 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v5, v6);
  v19 = v18;
  if (v8)
  {
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.u32[0];
    if (v20.u32[0] > 1uLL)
    {
      v6 = v18;
      if (v18 >= v8)
        v6 = v18 % v8;
    }
    else
    {
      v6 = (v8 - 1) & v18;
    }
    v22 = *(char ***)(*(_QWORD *)(a1 + 160) + 8 * v6);
    if (v22)
    {
      for (j = *v22; j; j = *(char **)j)
      {
        v24 = *((_QWORD *)j + 1);
        if (v24 == v19)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)j + 16, (unsigned __int8 *)a2))
          {
            v70 = v16;
            goto LABEL_99;
          }
        }
        else
        {
          if (v21 > 1)
          {
            if (v24 >= v8)
              v24 %= v8;
          }
          else
          {
            v24 &= v8 - 1;
          }
          if (v24 != v6)
            break;
        }
      }
    }
  }
  v25 = (_QWORD *)(a1 + 176);
  j = (char *)operator new(0x30uLL);
  *(_QWORD *)j = 0;
  *((_QWORD *)j + 1) = v19;
  v26 = (std::string *)(j + 16);
  if (v74 < 0)
  {
    std::string::__init_copy_ctor_external(v26, v73, v72);
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *a2;
    *((_QWORD *)j + 4) = *((_QWORD *)a2 + 2);
  }
  *((_DWORD *)j + 10) = 0;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 184) + 1);
  v28 = *(float *)(a1 + 192);
  if (!v8 || (float)(v28 * (float)v8) < v27)
  {
    v29 = 1;
    if (v8 >= 3)
      v29 = (v8 & (v8 - 1)) != 0;
    v30 = v29 | (2 * v8);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = (int8x8_t)v31;
    else
      prime = (int8x8_t)v30;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v8 = *(_QWORD *)(a1 + 168);
    if (*(_QWORD *)&prime > v8)
      goto LABEL_55;
    if (*(_QWORD *)&prime < v8)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 184) / *(float *)(a1 + 192));
      if (v8 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (*(_QWORD *)&prime <= v39)
        prime = (int8x8_t)v39;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *(_QWORD *)(a1 + 168);
      }
      else
      {
        if (prime)
        {
LABEL_55:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v33 = operator new(8 * *(_QWORD *)&prime);
          v34 = *(void **)(a1 + 160);
          *(_QWORD *)(a1 + 160) = v33;
          if (v34)
            operator delete(v34);
          v35 = 0;
          *(int8x8_t *)(a1 + 168) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v35++) = 0;
          while (*(_QWORD *)&prime != v35);
          v36 = (_QWORD *)*v25;
          if (*v25)
          {
            v37 = v36[1];
            v38 = (uint8x8_t)vcnt_s8(prime);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              if (v37 >= *(_QWORD *)&prime)
                v37 %= *(_QWORD *)&prime;
            }
            else
            {
              v37 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v37) = v25;
            v42 = (_QWORD *)*v36;
            if (*v36)
            {
              do
              {
                v43 = v42[1];
                if (v38.u32[0] > 1uLL)
                {
                  if (v43 >= *(_QWORD *)&prime)
                    v43 %= *(_QWORD *)&prime;
                }
                else
                {
                  v43 &= *(_QWORD *)&prime - 1;
                }
                if (v43 != v37)
                {
                  v44 = *(_QWORD *)(a1 + 160);
                  if (!*(_QWORD *)(v44 + 8 * v43))
                  {
                    *(_QWORD *)(v44 + 8 * v43) = v36;
                    goto LABEL_80;
                  }
                  *v36 = *v42;
                  *v42 = **(_QWORD **)(*(_QWORD *)(a1 + 160) + 8 * v43);
                  **(_QWORD **)(*(_QWORD *)(a1 + 160) + 8 * v43) = v42;
                  v42 = v36;
                }
                v43 = v37;
LABEL_80:
                v36 = v42;
                v42 = (_QWORD *)*v42;
                v37 = v43;
              }
              while (v42);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_84;
        }
        v71 = *(void **)(a1 + 160);
        *(_QWORD *)(a1 + 160) = 0;
        if (v71)
          operator delete(v71);
        v8 = 0;
        *(_QWORD *)(a1 + 168) = 0;
      }
    }
LABEL_84:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v19 >= v8)
        v6 = v19 % v8;
      else
        v6 = v19;
    }
    else
    {
      v6 = (v8 - 1) & v19;
    }
  }
  v45 = *(_QWORD *)(a1 + 160);
  v46 = *(_QWORD **)(v45 + 8 * v6);
  if (v46)
  {
    *(_QWORD *)j = *v46;
  }
  else
  {
    v47 = (_QWORD *)*v25;
    *(_QWORD *)j = *v25;
    *v25 = j;
    *(_QWORD *)(v45 + 8 * v6) = v25;
    if (!v47)
      goto LABEL_98;
    v48 = v47[1];
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v48 >= v8)
        v48 %= v8;
    }
    else
    {
      v48 &= v8 - 1;
    }
    v46 = (_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v48);
  }
  *v46 = j;
LABEL_98:
  ++*(_QWORD *)(a1 + 184);
  v70 = *(std::string **)(a1 + 144);
LABEL_99:
  v69 = -1431655765 * (((unint64_t)v16 - v17) >> 3);
  *((_DWORD *)j + 10) = v69;
  v49 = *(_QWORD *)(a1 + 152);
  if ((unint64_t)v70 >= v49)
  {
    v51 = *(_QWORD *)(a1 + 136);
    v52 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v70 - v51) >> 3);
    if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - v51) >> 3);
    v54 = 2 * v53;
    if (2 * v53 <= v52 + 1)
      v54 = v52 + 1;
    if (v53 >= 0x555555555555555)
      v55 = 0xAAAAAAAAAAAAAAALL;
    else
      v55 = v54;
    v75.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 152);
    if (v55)
    {
      v56 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<AccelerationStructureViewer::FilterToken>>(v55);
      v58 = v57;
    }
    else
    {
      v56 = 0;
      v58 = 0;
    }
    v60 = (std::string *)&v56[24 * v52];
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v60, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v61 = *a2;
      v60->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v61;
    }
    v63 = *(_QWORD *)(a1 + 136);
    v62 = *(_QWORD *)(a1 + 144);
    if (v62 == v63)
    {
      v66 = vdupq_n_s64(v62);
      v64 = v60;
    }
    else
    {
      v64 = v60;
      do
      {
        v65 = *(_OWORD *)(v62 - 24);
        v64[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v62 - 8);
        *(_OWORD *)&v64[-1].__r_.__value_.__l.__data_ = v65;
        --v64;
        *(_QWORD *)(v62 - 16) = 0;
        *(_QWORD *)(v62 - 8) = 0;
        *(_QWORD *)(v62 - 24) = 0;
        v62 -= 24;
      }
      while (v62 != v63);
      v66 = *(int64x2_t *)(a1 + 136);
    }
    v59 = v60 + 1;
    *(_QWORD *)(a1 + 136) = v64;
    *(_QWORD *)(a1 + 144) = v60 + 1;
    *(int64x2_t *)&v75.__begin_ = v66;
    v67 = *(std::string **)(a1 + 152);
    *(_QWORD *)(a1 + 152) = &v56[24 * v58];
    v75.__end_cap_.__value_ = v67;
    v75.__first_ = (std::__split_buffer<std::string>::pointer)v66.i64[0];
    std::__split_buffer<std::string>::~__split_buffer(&v75);
  }
  else
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v70, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v50 = *a2;
      v70->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v50;
    }
    v59 = v70 + 1;
  }
  *(_QWORD *)(a1 + 144) = v59;
  return v69;
}

BOOL llvm::isCompileUnit(uint64_t a1)
{
  return (*(_BYTE *)(*(_QWORD *)a1 + 96) & 0xFB) != 2;
}

void std::__function::__func<void (*)(llvm::Error),std::allocator<void (*)(llvm::Error)>,void ()(llvm::Error)>::~__func()
{
  operator delete();
}

_QWORD *std::__function::__func<void (*)(llvm::Error),std::allocator<void (*)(llvm::Error)>,void ()(llvm::Error)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_7278C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(llvm::Error),std::allocator<void (*)(llvm::Error)>,void ()(llvm::Error)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_7278C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(llvm::Error),std::allocator<void (*)(llvm::Error)>,void ()(llvm::Error)>::operator()(uint64_t a1, uint64_t *a2)
{
  void (*v2)(uint64_t *);
  uint64_t result;
  uint64_t v4;

  v2 = *(void (**)(uint64_t *))(a1 + 8);
  v4 = *a2;
  *a2 = 0;
  v2(&v4);
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

__n128 GTMTLGetTextureLevelInfoForDeviceWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __n128 result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  MTLGetTextureLevelInfoForDeviceWithOptions(&v23, a2, a3, a4, a5, a6, a7, a8, a9);
  v13 = a3 + 11;
  if ((unint64_t)(a3 - 501) <= 0x3E)
  {
    if (((1 << v13) & 0x2000000000100001) != 0)
    {
      *(_OWORD *)a1 = v23;
      v15 = *((_QWORD *)&v24 + 1);
      v14 = v24;
      v17 = *((_QWORD *)&v25 + 1);
      v16 = v25;
      result.n128_u64[0] = v26.n128_u64[0];
      *(__n128 *)(a1 + 48) = v26;
      v18 = v27;
      v19 = 2 * a7;
      goto LABEL_7;
    }
    if (((1 << v13) & 0x4000000000800008) != 0)
      goto LABEL_5;
  }
  if (a3 == 590)
  {
LABEL_5:
    *(_OWORD *)a1 = v23;
    v15 = *((_QWORD *)&v24 + 1);
    v14 = v24;
    v17 = *((_QWORD *)&v25 + 1);
    v16 = v25;
    result.n128_u64[0] = v26.n128_u64[0];
    *(__n128 *)(a1 + 48) = v26;
    v18 = v27;
    v19 = 4 * a7;
LABEL_7:
    v20 = v16 * v15 * v19;
    *(_QWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a1 + 24) = v15;
    *(_QWORD *)(a1 + 32) = v16;
    *(_QWORD *)(a1 + 40) = v17;
    *(_QWORD *)(a1 + 64) = v18;
    *(_QWORD *)(a1 + 72) = v19;
    *(_QWORD *)(a1 + 80) = v15 * v19;
    *(_QWORD *)(a1 + 88) = v20;
    *(_QWORD *)(a1 + 96) = v17 * v20;
    return result;
  }
  v21 = v28;
  *(_OWORD *)(a1 + 64) = v27;
  *(_OWORD *)(a1 + 80) = v21;
  *(_QWORD *)(a1 + 96) = v29;
  v22 = v24;
  *(_OWORD *)a1 = v23;
  *(_OWORD *)(a1 + 16) = v22;
  result = v26;
  *(_OWORD *)(a1 + 32) = v25;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t GTMTLPixelFormatGetInfoForDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  result = MTLPixelFormatGetInfoForDevice(a2, a3);
  v6 = a3 + 11;
  if ((unint64_t)(a3 - 501) > 0x3E)
    goto LABEL_4;
  if (((1 << v6) & 0x2000000000100001) != 0)
  {
    v7 = 2;
    goto LABEL_7;
  }
  if (((1 << v6) & 0x4000000000800008) == 0)
  {
LABEL_4:
    if (a3 != 590)
      return result;
  }
  v7 = 4;
LABEL_7:
  *(_QWORD *)(a1 + 24) = v7;
  return result;
}

id MTLHeap_backbuffer(void *a1)
{
  id v1;
  id v2;
  id v3;
  id v4;

  v1 = a1;
  v2 = objc_msgSend(v1, "currentAllocatedSize");
  v3 = objc_msgSend(v1, "resourceOptions");
  if (objc_msgSend(v1, "type"))
  {
    if (objc_msgSend(v1, "type") == (char *)&dword_0 + 1)
      v4 = objc_msgSend(v1, "newBufferWithLength:options:offset:", v2, v3, 0);
    else
      v4 = 0;
  }
  else
  {
    v4 = objc_msgSend(v1, "newBufferWithLength:options:", v2, v3);
    objc_msgSend(v4, "makeAliasable");
  }

  return v4;
}

apr_hash_t *__cdecl apr_hash_make(apr_pool_t *pool)
{
  __darwin_time_t tv_sec;
  _QWORD *v3;
  _OWORD *v4;
  timeval v6;

  v6.tv_sec = 0;
  *(_QWORD *)&v6.tv_usec = 0;
  gettimeofday(&v6, 0);
  v6.tv_sec = v6.tv_usec + 1000000 * v6.tv_sec;
  tv_sec = v6.tv_sec;
  v3 = apr_palloc(pool, 0x50uLL);
  *v3 = pool;
  v3[9] = 0;
  v3[6] = 0xF00000000;
  *((_DWORD *)v3 + 14) = (&v6 ^ pool ^ v3 ^ tv_sec ^ HIDWORD(tv_sec)) - 1;
  v4 = apr_palloc(pool, 0x80uLL);
  if (v4)
  {
    v4[6] = 0u;
    v4[7] = 0u;
    v4[4] = 0u;
    v4[5] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    *v4 = 0u;
    v4[1] = 0u;
  }
  v3[1] = v4;
  v3[8] = 0;
  return (apr_hash_t *)v3;
}

apr_hash_index_t *__cdecl apr_hash_next(apr_hash_index_t *hi)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (_QWORD *)*((_QWORD *)hi + 2);
  *((_QWORD *)hi + 1) = v1;
  if (v1)
  {
LABEL_5:
    *((_QWORD *)hi + 2) = *v1;
  }
  else
  {
    v2 = *(_QWORD *)hi;
    v3 = *(_DWORD *)(*(_QWORD *)hi + 52);
    v4 = *((_DWORD *)hi + 6);
    while (v4 <= v3)
    {
      v1 = *(_QWORD **)(*(_QWORD *)(v2 + 8) + 8 * v4++);
      *((_DWORD *)hi + 6) = v4;
      *((_QWORD *)hi + 1) = v1;
      if (v1)
        goto LABEL_5;
    }
    return 0;
  }
  return hi;
}

apr_hash_index_t *__cdecl apr_hash_first(apr_pool_t *p, apr_hash_t *ht)
{
  char *v3;

  if (p)
    v3 = (char *)apr_palloc(p, 0x20uLL);
  else
    v3 = (char *)ht + 16;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = ht;
  *((_DWORD *)v3 + 6) = 0;
  return apr_hash_next((apr_hash_index_t *)v3);
}

apr_hash_t *__cdecl apr_hash_copy(apr_pool_t *pool, const apr_hash_t *h)
{
  apr_hash_t *result;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char **v10;
  uint64_t *v11;
  char **v12;
  char *v13;
  char *v14;
  char *v15;

  result = (apr_hash_t *)apr_palloc(pool, 40 * *((unsigned int *)h + 12) + 8 * (*((_DWORD *)h + 13) + 1) + 80);
  v5 = 0;
  v6 = 0;
  *((_DWORD *)result + 12) = *((_DWORD *)h + 12);
  v7 = *(_QWORD *)((char *)h + 52);
  *(_QWORD *)((char *)result + 52) = v7;
  *((_QWORD *)result + 8) = *((_QWORD *)h + 8);
  *((_QWORD *)result + 9) = 0;
  *(_QWORD *)result = pool;
  *((_QWORD *)result + 1) = (char *)result + 80;
  v8 = (char *)result + 8 * (*((_DWORD *)h + 13) + 1) + 80;
  if ((v7 + 1) > 1)
    v9 = (v7 + 1);
  else
    v9 = 1;
  do
  {
    v10 = (char **)(*((_QWORD *)result + 1) + 8 * v5);
    v11 = *(uint64_t **)(*((_QWORD *)h + 1) + 8 * v5);
    if (v11)
    {
      do
      {
        v12 = (char **)((_DWORD)v6 + 1);
        v13 = &v8[40 * v6];
        *v10 = v13;
        *((_DWORD *)v13 + 2) = *((_DWORD *)v11 + 2);
        v14 = (char *)v11[3];
        *((_QWORD *)v13 + 2) = v11[2];
        v6 = (char **)*v10;
        v15 = (char *)v11[4];
        v6[3] = v14;
        v6[4] = v15;
        v10 = (char **)*v10;
        v11 = (uint64_t *)*v11;
        LODWORD(v6) = (_DWORD)v12;
      }
      while (v11);
    }
    else
    {
      v12 = v6;
    }
    *v10 = 0;
    ++v5;
    v6 = v12;
  }
  while (v5 != v9);
  return result;
}

_QWORD *find_entry(uint64_t a1, _BYTE *a2, size_t a3, uint64_t a4)
{
  uint64_t (*v7)(_BYTE *, size_t *);
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  _QWORD *v12;
  _DWORD *v13;
  unsigned __int8 *v14;
  int v15;
  size_t v16;
  int v18;
  _BYTE *v19;
  int v20;
  size_t __n;

  __n = a3;
  v7 = *(uint64_t (**)(_BYTE *, size_t *))(a1 + 64);
  if (v7)
  {
    v8 = v7(a2, &__n);
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 56);
    if (a3 == -1)
    {
      v18 = *a2;
      if (*a2)
      {
        v19 = a2;
        do
        {
          v8 = 33 * v8 + v18;
          v20 = *++v19;
          v18 = v20;
        }
        while (v20);
      }
      else
      {
        v19 = a2;
      }
      __n = v19 - a2;
    }
    else if (a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14++;
        v8 = 33 * v8 + v15;
        --a3;
      }
      while (a3);
    }
  }
  v9 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (*(_DWORD *)(a1 + 52) & v8));
  v10 = *v9;
  if (*v9)
  {
    v11 = __n;
    while (1)
    {
      v12 = v9;
      v9 = (_QWORD *)v10;
      if (*(_DWORD *)(v10 + 8) == v8 && *(_QWORD *)(v10 + 24) == v11 && !memcmp(*(const void **)(v10 + 16), a2, v11))
        break;
      v10 = *v9;
      if (!*v9)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    if (a4)
    {
      v13 = *(_DWORD **)(a1 + 72);
      if (v13)
        *(_QWORD *)(a1 + 72) = *(_QWORD *)v13;
      else
        v13 = apr_palloc(*(apr_pool_t **)a1, 0x28uLL);
      *(_QWORD *)v13 = 0;
      v13[2] = v8;
      v16 = __n;
      *((_QWORD *)v13 + 2) = a2;
      *((_QWORD *)v13 + 3) = v16;
      *((_QWORD *)v13 + 4) = a4;
      *v9 = v13;
      ++*(_DWORD *)(a1 + 48);
    }
    return v9;
  }
  return v12;
}

void apr_hash_set(apr_hash_t *ht, const void *key, apr_ssize_t klen, const void *val)
{
  _QWORD *entry;
  _QWORD *v7;
  unsigned int v8;
  int v9;
  apr_size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  apr_hash_index_t *v13;
  uint64_t v14;
  unsigned int v15;

  entry = find_entry((uint64_t)ht, key, klen, (uint64_t)val);
  v7 = (_QWORD *)*entry;
  if (*entry)
  {
    if (val)
    {
      v7[4] = val;
      v8 = *((_DWORD *)ht + 13);
      if (*((_DWORD *)ht + 12) > v8)
      {
        v9 = (2 * v8) | 1;
        v10 = 8 * (2 * v8 + 2);
        v11 = apr_palloc(*(apr_pool_t **)ht, v10);
        v12 = v11;
        if (v11)
          bzero(v11, v10);
        v13 = (apr_hash_t *)((char *)ht + 16);
        *((_QWORD *)ht + 3) = 0;
        *((_QWORD *)ht + 4) = 0;
        *((_QWORD *)ht + 2) = ht;
        *((_DWORD *)ht + 10) = 0;
        while (1)
        {
          v13 = apr_hash_next(v13);
          if (!v13)
            break;
          v14 = *((_QWORD *)v13 + 1);
          v15 = *(_DWORD *)(v14 + 8) & v9;
          *(_QWORD *)v14 = v12[v15];
          v12[v15] = v14;
        }
        *((_QWORD *)ht + 1) = v12;
        *((_DWORD *)ht + 13) = v9;
      }
    }
    else
    {
      *entry = *v7;
      *v7 = *((_QWORD *)ht + 9);
      *((_QWORD *)ht + 9) = v7;
      --*((_DWORD *)ht + 12);
    }
  }
}

void apr_hash_clear(apr_hash_t *ht)
{
  apr_hash_index_t *v2;
  apr_hash_index_t *v3;

  *((_QWORD *)ht + 4) = 0;
  *((_QWORD *)ht + 2) = ht;
  *((_QWORD *)ht + 3) = 0;
  *((_DWORD *)ht + 10) = 0;
  v2 = apr_hash_next((apr_hash_t *)((char *)ht + 16));
  if (v2)
  {
    v3 = v2;
    do
    {
      apr_hash_set(ht, *(const void **)(*((_QWORD *)v3 + 1) + 16), *(_QWORD *)(*((_QWORD *)v3 + 1) + 24), 0);
      v3 = apr_hash_next(v3);
    }
    while (v3);
  }
}

vm_address_t GTCoreAlloc(memory_object_size_t a1)
{
  mach_error_t memory_entry_64;
  mach_error_t v3;
  NSObject *v4;
  char *v5;
  const char *v6;
  mach_error_t v7;
  mach_error_t v8;
  char *v9;
  FILE *v10;
  FILE *v12;
  memory_object_size_t size;
  mach_port_t object_handle;
  vm_address_t address;
  uint8_t buf[4];
  mach_error_t v17;
  __int16 v18;
  char *v19;

  address = 0;
  object_handle = 0;
  size = a1;
  memory_entry_64 = mach_make_memory_entry_64(mach_task_self_, &size, 0, 139267, &object_handle, 0);
  if (memory_entry_64)
  {
    v3 = memory_entry_64;
    if (!s_logUsingOsLog)
    {
      v10 = __stderrp;
      mach_error_string(memory_entry_64);
      fprintf(v10, "warning: failed to create memory entry error 0x%x (%s)\n");
      return 0;
    }
    v4 = gt_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = mach_error_string(v3);
      *(_DWORD *)buf = 67109378;
      v17 = v3;
      v18 = 2080;
      v19 = v5;
      v6 = "warning: failed to create memory entry error 0x%x (%s)";
LABEL_9:
      _os_log_error_impl(&dword_0, v4, OS_LOG_TYPE_ERROR, v6, buf, 0x12u);
    }
  }
  else
  {
    v7 = vm_map(mach_task_self_, &address, a1, 0, 1, object_handle, 0, 0, 3, 3, 1u);
    if (!v7)
    {
      mach_port_deallocate(mach_task_self_, object_handle);
      return address;
    }
    v8 = v7;
    if (!s_logUsingOsLog)
    {
      v12 = __stderrp;
      mach_error_string(v7);
      fprintf(v12, "warning: failed to map memory error 0x%x (%s)\n");
      return 0;
    }
    v4 = gt_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v9 = mach_error_string(v8);
      *(_DWORD *)buf = 67109378;
      v17 = v8;
      v18 = 2080;
      v19 = v9;
      v6 = "warning: failed to map memory error 0x%x (%s)";
      goto LABEL_9;
    }
  }
  return 0;
}

uint64_t atomic_cleanup(uint64_t a1)
{
  if (hash_mutex == a1)
    hash_mutex = 0;
  return 0;
}

void apr_pool_destroy(apr_pool_t *p)
{
  uint64_t v1;
  apr_exit_why_e *v2;
  apr_wait_how_e v3;
  uint64_t i;
  apr_pool_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  vm_address_t v11;
  unint64_t v12;
  vm_address_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  vm_address_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v22;
  unint64_t v23;
  vm_address_t v24;

  for (i = *((_QWORD *)p + 14); i; i = *((_QWORD *)p + 14))
  {
    *((_QWORD *)p + 14) = *(_QWORD *)i;
    (*(void (**)(_QWORD))(i + 16))(*(_QWORD *)(i + 8));
  }
  *((_QWORD *)p + 14) = 0;
  while (1)
  {
    v6 = (apr_pool_t *)*((_QWORD *)p + 1);
    if (!v6)
      break;
    apr_pool_destroy(v6);
  }
  while (1)
  {
    v7 = *((_QWORD *)p + 4);
    if (!v7)
      break;
    *((_QWORD *)p + 4) = *(_QWORD *)v7;
    (*(void (**)(_QWORD))(v7 + 16))(*(_QWORD *)(v7 + 8));
  }
  free_proc_chain(*((unsigned int **)p + 7), v1, v2, v3);
  if (*(_QWORD *)p)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)p + 48) + 24);
    if (v8)
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 8));
    v9 = *((_QWORD *)p + 2);
    **((_QWORD **)p + 3) = v9;
    if (v9)
      *(_QWORD *)(*((_QWORD *)p + 2) + 24) = *((_QWORD *)p + 3);
    if (v8)
      pthread_mutex_unlock((pthread_mutex_t *)(v8 + 8));
  }
  v10 = (unint64_t *)*((_QWORD *)p + 6);
  v11 = *((_QWORD *)p + 12);
  **(_QWORD **)(v11 + 8) = 0;
  if ((apr_pool_t *)v10[4] == p)
  {
    v10[3] = 0;
  }
  else
  {
    v12 = v10[3];
    if (v12)
      pthread_mutex_lock((pthread_mutex_t *)(v12 + 8));
  }
  v13 = 0;
  v14 = *v10;
  v15 = v10[1];
  v16 = v10[2];
  do
  {
    while (1)
    {
      while (1)
      {
        v17 = v11;
        v11 = *(_QWORD *)v11;
        v18 = *(unsigned int *)(v17 + 16);
        if (!v15 || v16 > v18)
          break;
        *(_QWORD *)v17 = v13;
        v13 = v17;
        if (!v11)
          goto LABEL_38;
      }
      if (v18 > 0x13)
        break;
      v19 = (uint64_t *)&v10[v18];
      v20 = v19[5];
      *(_QWORD *)v17 = v20;
      if (v14 < v18 && v20 == 0)
        v14 = v18;
      v19[5] = v17;
      if (v16 <= v18)
      {
        v16 = 0;
        if (!v11)
          goto LABEL_38;
      }
      else
      {
        v16 += ~v18;
        if (!v11)
          goto LABEL_38;
      }
    }
    *(_QWORD *)v17 = v10[5];
    v10[5] = v17;
    v22 = v16 > v18;
    v16 += ~v18;
    if (!v22)
      v16 = 0;
  }
  while (v11);
LABEL_38:
  *v10 = v14;
  v10[2] = v16;
  v23 = v10[3];
  if (v23)
    pthread_mutex_unlock((pthread_mutex_t *)(v23 + 8));
  if (v13)
  {
    do
    {
      v24 = *(_QWORD *)v13;
      vm_deallocate(mach_task_self_, v13, ((*(_DWORD *)(v13 + 16) << 12) + 4096));
      v13 = v24;
    }
    while (v24);
  }
  if ((apr_pool_t *)v10[4] == p)
    apr_allocator_destroy((apr_allocator_t *)v10);
}

unsigned int *free_proc_chain(unsigned int *result, uint64_t a2, apr_exit_why_e *a3, apr_wait_how_e a4)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  __int128 v14;

  if (!result)
    return result;
  v4 = result;
  v5 = result;
  do
  {
    result = (unsigned int *)apr_proc_wait(*(apr_proc_t **)v5, (int *)((char *)&dword_0 + 1), a3, a4);
    if ((_DWORD)result != 70006)
      v5[2] = 0;
    v5 = (unsigned int *)*((_QWORD *)v5 + 2);
  }
  while (v5);
  v6 = v4;
  do
  {
    v7 = v6[2];
    if (v7 == 1)
    {
      result = (unsigned int *)apr_proc_kill((apr_proc_t *)**(unsigned int **)v6, 9);
    }
    else if (v7 == 4 || v7 == 2)
    {
      result = (unsigned int *)apr_proc_kill((apr_proc_t *)**(unsigned int **)v6, 15);
      if (!(_DWORD)result)
        LODWORD(v5) = 1;
    }
    v6 = (unsigned int *)*((_QWORD *)v6 + 2);
  }
  while (v6);
  v9 = v4;
  if (!(_DWORD)v5)
    goto LABEL_29;
  v14 = xmmword_4AA570;
  result = (unsigned int *)select(0, 0, 0, 0, (timeval *)&v14);
  v10 = 46875;
  while (2)
  {
    v11 = 0;
    v12 = v4;
    do
    {
      v13 = v11;
      if (v12[2] == 2)
      {
        v11 = 1;
        result = (unsigned int *)apr_proc_wait(*(apr_proc_t **)v12, (int *)((char *)&dword_0 + 1), a3, a4);
        if ((_DWORD)result == 70006)
          goto LABEL_24;
        v12[2] = 0;
      }
      v11 = v13;
LABEL_24:
      v12 = (unsigned int *)*((_QWORD *)v12 + 2);
    }
    while (v12);
    if ((_DWORD)v11 && v10 <= 0x2DC6BF)
    {
      *(_QWORD *)&v14 = v10 / 0xF4240;
      *((_QWORD *)&v14 + 1) = v10 % 0xF4240;
      result = (unsigned int *)select(0, 0, 0, 0, (timeval *)&v14);
      v10 *= 2;
      continue;
    }
    break;
  }
  v9 = v4;
  do
  {
LABEL_29:
    if (v9[2] == 2)
      result = (unsigned int *)apr_proc_kill((apr_proc_t *)**(unsigned int **)v9, 9);
    v9 = (unsigned int *)*((_QWORD *)v9 + 2);
  }
  while (v9);
  do
  {
    if (v4[2])
      result = (unsigned int *)apr_proc_wait(*(apr_proc_t **)v4, 0, a3, a4);
    v4 = (unsigned int *)*((_QWORD *)v4 + 2);
  }
  while (v4);
  return result;
}

void apr_allocator_destroy(apr_allocator_t *allocator)
{
  uint64_t i;
  char *v3;
  vm_address_t v4;
  vm_address_t *v5;
  vm_address_t v6;

  for (i = 0; i != 20; ++i)
  {
    v3 = (char *)allocator + 8 * i;
    v6 = *((_QWORD *)v3 + 5);
    v5 = (vm_address_t *)(v3 + 40);
    v4 = v6;
    if (v6)
    {
      do
      {
        *v5 = *(_QWORD *)v4;
        vm_deallocate(mach_task_self_, v4, ((*(_DWORD *)(v4 + 16) << 12) + 4096));
        v4 = *v5;
      }
      while (*v5);
    }
  }
  vm_deallocate(mach_task_self_, (vm_address_t)allocator, 0xC8uLL);
}

_QWORD *allocator_alloc(unint64_t *a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  memory_object_size_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  _QWORD *v21;
  BOOL v22;
  unint64_t v23;
  vm_address_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;

  v2 = 0;
  v3 = (a2 + 4135) & 0xFFFFFFFFFFFFF000;
  v4 = 0x2000;
  if (v3 > 0x2000)
    v4 = (a2 + 4135) & 0xFFFFFFFFFFFFF000;
  if (v3 >= a2)
    v5 = v4;
  else
    v5 = 0;
  if (v3 >= a2)
  {
    v6 = v4 >> 12;
    v7 = (v4 >> 12) - 1;
    if (HIDWORD(v7))
      return 0;
    v9 = *a1;
    if (v7 <= *a1)
    {
      v14 = a1[3];
      if (v14)
      {
        pthread_mutex_lock((pthread_mutex_t *)(v14 + 8));
        v9 = *a1;
      }
      v15 = &a1[v7];
      v17 = (_QWORD *)v15[5];
      v16 = v15 + 5;
      v2 = v17;
      v18 = v17 == 0;
      v19 = v7 < v9;
      if (v17)
        v20 = 1;
      else
        v20 = v7 >= v9;
      if (!v20)
      {
        do
        {
          v21 = (_QWORD *)v16[1];
          ++v16;
          v2 = v21;
          v18 = v21 == 0;
          v19 = v6 < v9;
          if (v21)
            v22 = 1;
          else
            v22 = v6 >= v9;
          ++v6;
        }
        while (!v22);
      }
      if (!v18)
      {
        v25 = *v2;
        *v16 = *v2;
        if (v25)
          v19 = 1;
        if (!v19)
        {
          v26 = v16 - 1;
          do
          {
            if (*v26--)
              v28 = 1;
            else
              v28 = v9 == 1;
            --v9;
          }
          while (!v28);
          *a1 = v9;
        }
        v13 = (*((_DWORD *)v2 + 4) + 1);
LABEL_43:
        v29 = a1[2] + v13;
        if (v29 >= a1[1])
          v29 = a1[1];
        a1[2] = v29;
        v30 = a1[3];
        if (v30)
          pthread_mutex_unlock((pthread_mutex_t *)(v30 + 8));
        goto LABEL_47;
      }
    }
    else
    {
      v2 = a1 + 5;
      if (!a1[5])
      {
LABEL_30:
        v24 = GTCoreAlloc(v5);
        v2 = (_QWORD *)v24;
        if (!v24)
          return v2;
        *(_DWORD *)(v24 + 16) = v7;
        *(_QWORD *)(v24 + 32) = v24 + v5;
LABEL_47:
        *v2 = 0;
        v2[3] = v2 + 5;
        return v2;
      }
      v10 = a1[3];
      if (v10)
        pthread_mutex_lock((pthread_mutex_t *)(v10 + 8));
      while (1)
      {
        v11 = v2;
        v2 = (_QWORD *)*v2;
        if (!v2)
          break;
        v12 = *((unsigned int *)v2 + 4);
        if (v7 <= v12)
        {
          *v11 = *v2;
          v13 = (v12 + 1);
          goto LABEL_43;
        }
      }
    }
    v23 = a1[3];
    if (v23)
      pthread_mutex_unlock((pthread_mutex_t *)(v23 + 8));
    goto LABEL_30;
  }
  return v2;
}

apr_status_t apr_pool_create_ex(apr_pool_t **newpool, apr_pool_t *parent, apr_abortfunc_t abort_fn, apr_allocator_t *allocator)
{
  unint64_t *v4;
  apr_pool_t *v6;
  apr_pool_t *v7;
  apr_pool_t *v8;
  apr_pool_t **v9;
  uint64_t v10;
  apr_pool_t *v11;
  apr_pool_t ***v12;
  apr_pool_t *v13;
  apr_status_t v14;

  v4 = (unint64_t *)abort_fn;
  *newpool = 0;
  if (parent)
    v6 = parent;
  else
    v6 = (apr_pool_t *)global_pool;
  if (v6)
  {
    v7 = (apr_pool_t *)*((_QWORD *)v6 + 8);
    if (abort_fn)
      goto LABEL_7;
    goto LABEL_6;
  }
  v7 = 0;
  if (!abort_fn)
LABEL_6:
    v4 = (unint64_t *)*((_QWORD *)v6 + 6);
LABEL_7:
  v8 = (apr_pool_t *)allocator_alloc(v4, 0x1FD8uLL);
  if (v8)
  {
    *(_QWORD *)v8 = v8;
    *((_QWORD *)v8 + 1) = v8;
    v9 = (apr_pool_t **)*((_QWORD *)v8 + 3);
    *((_QWORD *)v8 + 3) = v9 + 15;
    v9[12] = v8;
    v9[13] = (apr_pool_t *)(v9 + 15);
    v9[14] = 0;
    v9[6] = (apr_pool_t *)v4;
    v9[7] = 0;
    v9[4] = 0;
    v9[5] = 0;
    v9[10] = 0;
    v9[11] = v8;
    v9[8] = v7;
    v9[9] = 0;
    *v9 = v6;
    v9[1] = 0;
    if (v6)
    {
      v10 = *(_QWORD *)(*((_QWORD *)v6 + 6) + 24);
      if (v10)
        pthread_mutex_lock((pthread_mutex_t *)(v10 + 8));
      v13 = (apr_pool_t *)*((_QWORD *)v6 + 1);
      v12 = (apr_pool_t ***)((char *)v6 + 8);
      v11 = v13;
      v9[2] = v13;
      if (v13)
        *((_QWORD *)v11 + 3) = v9 + 2;
      *v12 = v9;
      v9[3] = (apr_pool_t *)v12;
      if (v10)
        pthread_mutex_unlock((pthread_mutex_t *)(v10 + 8));
    }
    else
    {
      v9[2] = 0;
      v9[3] = 0;
    }
    v14 = 0;
    *newpool = (apr_pool_t *)v9;
  }
  else
  {
    v14 = 12;
    if (v7)
      ((void (*)(uint64_t))v7)(12);
  }
  return v14;
}

void *__cdecl apr_palloc(apr_pool_t *p, apr_size_t size)
{
  apr_size_t v3;
  void (*v4)(uint64_t);
  void *result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;

  v3 = (size + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v3 < size)
  {
LABEL_2:
    v4 = (void (*)(uint64_t))*((_QWORD *)p + 8);
    if (v4)
      v4(12);
    return 0;
  }
  v6 = (_QWORD *)*((_QWORD *)p + 11);
  result = (void *)v6[3];
  if (v3 <= v6[4] - (_QWORD)result)
  {
    v6[3] = (char *)result + v3;
    return result;
  }
  v7 = (_QWORD *)*v6;
  if (v3 <= *(_QWORD *)(*v6 + 32) - *(_QWORD *)(*v6 + 24))
  {
    *(_QWORD *)v7[1] = *v7;
    *(_QWORD *)(*v7 + 8) = v7[1];
  }
  else
  {
    v7 = allocator_alloc(*((unint64_t **)p + 6), (size + 7) & 0xFFFFFFFFFFFFFFF8);
    if (!v7)
      goto LABEL_2;
  }
  *((_DWORD *)v7 + 5) = 0;
  result = (void *)v7[3];
  v7[3] = (char *)result + v3;
  v8 = (_QWORD *)v6[1];
  v7[1] = v8;
  *v8 = v7;
  *v7 = v6;
  v6[1] = v7;
  *((_QWORD *)p + 11) = v7;
  v9 = (uint64_t)(v6[4] - v6[3]) >> 12;
  *((_DWORD *)v6 + 5) = v9;
  if (v9 < *(unsigned int *)(*v6 + 20))
  {
    v10 = (uint64_t *)*v6;
    do
      v10 = (uint64_t *)*v10;
    while (*((_DWORD *)v10 + 5) > v9);
    *v7 = *v6;
    *(_QWORD *)(*v6 + 8) = v6[1];
    v11 = (_QWORD *)v10[1];
    v6[1] = v11;
    *v11 = v6;
    *v6 = v10;
    v10[1] = (uint64_t)v6;
  }
  return result;
}

void apr_pool_clear(apr_pool_t *p)
{
  uint64_t v1;
  apr_exit_why_e *v2;
  apr_wait_how_e v3;
  uint64_t i;
  apr_pool_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  vm_address_t *v12;
  unint64_t v13;
  vm_address_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  vm_address_t *v18;
  unint64_t v19;
  unint64_t *v20;
  vm_address_t v21;
  BOOL v23;
  unint64_t v24;
  vm_address_t v25;

  for (i = *((_QWORD *)p + 14); i; i = *((_QWORD *)p + 14))
  {
    *((_QWORD *)p + 14) = *(_QWORD *)i;
    (*(void (**)(_QWORD))(i + 16))(*(_QWORD *)(i + 8));
  }
  *((_QWORD *)p + 14) = 0;
  while (1)
  {
    v6 = (apr_pool_t *)*((_QWORD *)p + 1);
    if (!v6)
      break;
    apr_pool_destroy(v6);
  }
  v8 = (uint64_t *)((char *)p + 32);
  v7 = *((_QWORD *)p + 4);
  if (v7)
  {
    do
    {
      *v8 = *(_QWORD *)v7;
      (*(void (**)(_QWORD))(v7 + 16))(*(_QWORD *)(v7 + 8));
      v7 = *v8;
    }
    while (*v8);
  }
  *v8 = 0;
  *((_QWORD *)p + 5) = 0;
  free_proc_chain(*((unsigned int **)p + 7), v1, v2, v3);
  *((_QWORD *)p + 7) = 0;
  *((_QWORD *)p + 9) = 0;
  v10 = *((_QWORD *)p + 12);
  v9 = *((_QWORD *)p + 13);
  *((_QWORD *)p + 11) = v10;
  *(_QWORD *)(v10 + 24) = v9;
  if (*(_QWORD *)v10 != v10)
  {
    **(_QWORD **)(v10 + 8) = 0;
    v11 = (unint64_t *)*((_QWORD *)p + 6);
    v12 = *(vm_address_t **)v10;
    v13 = v11[3];
    if (v13)
      pthread_mutex_lock((pthread_mutex_t *)(v13 + 8));
    v14 = 0;
    v15 = *v11;
    v16 = v11[1];
    v17 = v11[2];
    do
    {
      while (1)
      {
        while (1)
        {
          v18 = v12;
          v12 = (vm_address_t *)*v12;
          v19 = *((unsigned int *)v18 + 4);
          if (!v16 || v17 > v19)
            break;
          *v18 = v14;
          v14 = (vm_address_t)v18;
          if (!v12)
            goto LABEL_30;
        }
        if (v19 > 0x13)
          break;
        v20 = &v11[v19];
        v21 = v20[5];
        *v18 = v21;
        if (v15 < v19 && v21 == 0)
          v15 = v19;
        v20[5] = (unint64_t)v18;
        if (v17 <= v19)
        {
          v17 = 0;
          if (!v12)
            goto LABEL_30;
        }
        else
        {
          v17 += ~v19;
          if (!v12)
            goto LABEL_30;
        }
      }
      *v18 = v11[5];
      v11[5] = (unint64_t)v18;
      v23 = v17 > v19;
      v17 += ~v19;
      if (!v23)
        v17 = 0;
    }
    while (v12);
LABEL_30:
    *v11 = v15;
    v11[2] = v17;
    v24 = v11[3];
    if (v24)
      pthread_mutex_unlock((pthread_mutex_t *)(v24 + 8));
    if (v14)
    {
      do
      {
        v25 = *(_QWORD *)v14;
        vm_deallocate(mach_task_self_, v14, ((*(_DWORD *)(v14 + 16) << 12) + 4096));
        v14 = v25;
      }
      while (v25);
    }
    *(_QWORD *)v10 = v10;
    *(_QWORD *)(v10 + 8) = v10;
  }
}

uint64_t psprintf_flush(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)a1 - *(_QWORD *)(v3 + 24);
  if (2 * v4 <= 0x20)
    v5 = 32;
  else
    v5 = 2 * v4;
  if (!*(_BYTE *)(a1 + 32))
  {
    v6 = *(_QWORD **)v3;
    if (v5 <= *(_QWORD *)(*(_QWORD *)v3 + 32) - *(_QWORD *)(*(_QWORD *)v3 + 24))
    {
      *(_QWORD *)v6[1] = *v6;
      *(_QWORD *)(*v6 + 8) = v6[1];
      v10 = *(_QWORD **)(v3 + 8);
      v6[1] = v10;
      *v10 = v6;
      *v6 = v3;
      *(_QWORD *)(v3 + 8) = v6;
      *((_DWORD *)v6 + 5) = 0;
      *(_QWORD *)(v2 + 88) = v6;
      v11 = (uint64_t)(*(_QWORD *)(v3 + 32) - *(_QWORD *)(v3 + 24)) >> 12;
      *(_DWORD *)(v3 + 20) = v11;
      if (v11 < *(unsigned int *)(*(_QWORD *)v3 + 20))
      {
        v12 = *(_QWORD **)v3;
        do
          v12 = (_QWORD *)*v12;
        while (*((_DWORD *)v12 + 5) > v11);
        *v6 = *(_QWORD *)v3;
        *(_QWORD *)(*(_QWORD *)v3 + 8) = *(_QWORD *)(v3 + 8);
        v13 = (_QWORD *)v12[1];
        *(_QWORD *)(v3 + 8) = v13;
        *v13 = v3;
        *(_QWORD *)v3 = v12;
        v12[1] = v3;
        v6 = *(_QWORD **)(v2 + 88);
      }
      goto LABEL_10;
    }
  }
  v7 = allocator_alloc(*(unint64_t **)(v2 + 48), v5);
  if (v7)
  {
    v6 = v7;
    if (*(_BYTE *)(a1 + 32))
    {
      *(_QWORD *)v3 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v3;
    }
    *(_BYTE *)(a1 + 32) = 1;
LABEL_10:
    memcpy((void *)v6[3], *(const void **)(v3 + 24), v4);
    result = 0;
    *(_QWORD *)(a1 + 16) = v6;
    v9 = v6[4] - 1;
    *(_QWORD *)a1 = v6[3] + v4;
    *(_QWORD *)(a1 + 8) = v9;
    return result;
  }
  return 0xFFFFFFFFLL;
}

char *apr_psprintf(apr_pool_t *p, const char *fmt, ...)
{
  char *v4;
  char *v5;
  char *v6;
  vm_address_t *v7;
  unint64_t *v8;
  unint64_t v9;
  vm_address_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  vm_address_t *v14;
  unint64_t v15;
  unint64_t *v16;
  vm_address_t v17;
  BOOL v19;
  unint64_t v20;
  vm_address_t v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  void (*v28)(uint64_t);
  vm_address_t *v29;
  unint64_t *v30;
  unint64_t v31;
  vm_address_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  vm_address_t *v36;
  unint64_t v37;
  unint64_t *v38;
  vm_address_t v39;
  unint64_t v41;
  vm_address_t v42;
  apr_vformatter_buff_t c;
  vm_address_t v45;
  apr_pool_t *v46;
  uint64_t v47;
  vm_address_t address;
  va_list va;

  va_start(va, fmt);
  v47 = 0;
  address = 0;
  v45 = *((_QWORD *)p + 11);
  v46 = p;
  v4 = *(char **)(v45 + 32);
  c.curpos = *(char **)(v45 + 24);
  c.endpos = v4 - 1;
  if (c.curpos == v4 && psprintf_flush((uint64_t)&c) == -1
    || apr_vformatter((int (__cdecl *)(apr_vformatter_buff_t *))psprintf_flush, &c, fmt, va) == -1)
  {
    v28 = (void (*)(uint64_t))*((_QWORD *)p + 8);
    if (v28)
      v28(12);
    if ((_BYTE)v47)
    {
      v29 = (vm_address_t *)v45;
      *(_QWORD *)v45 = address;
      v30 = (unint64_t *)*((_QWORD *)p + 6);
      v31 = v30[3];
      if (v31)
        pthread_mutex_lock((pthread_mutex_t *)(v31 + 8));
      v32 = 0;
      v33 = *v30;
      v34 = v30[1];
      v35 = v30[2];
      do
      {
        while (1)
        {
          while (1)
          {
            v36 = v29;
            v29 = (vm_address_t *)*v29;
            v37 = *((unsigned int *)v36 + 4);
            if (!v34 || v35 > v37)
              break;
            *v36 = v32;
            v32 = (vm_address_t)v36;
            if (!v29)
              goto LABEL_59;
          }
          if (v37 > 0x13)
            break;
          v38 = &v30[v37];
          v39 = v38[5];
          *v36 = v39;
          if (v33 < v37 && v39 == 0)
            v33 = v37;
          v38[5] = (unint64_t)v36;
          if (v35 <= v37)
          {
            v35 = 0;
            if (!v29)
              goto LABEL_59;
          }
          else
          {
            v35 += ~v37;
            if (!v29)
              goto LABEL_59;
          }
        }
        *v36 = v30[5];
        v30[5] = (unint64_t)v36;
        v19 = v35 > v37;
        v35 += ~v37;
        if (!v19)
          v35 = 0;
      }
      while (v29);
LABEL_59:
      *v30 = v33;
      v30[2] = v35;
      v41 = v30[3];
      if (v41)
        pthread_mutex_unlock((pthread_mutex_t *)(v41 + 8));
      if (v32)
      {
        do
        {
          v42 = *(_QWORD *)v32;
          vm_deallocate(mach_task_self_, v32, ((*(_DWORD *)(v32 + 16) << 12) + 4096));
          v32 = v42;
        }
        while (v42);
      }
    }
    return 0;
  }
  else
  {
    v5 = c.curpos++;
    *v5 = 0;
    v6 = *(char **)(v45 + 24);
    *(_QWORD *)(v45 + 24) = &v6[(c.curpos - v6 + 7) & 0xFFFFFFFFFFFFFFF8];
    v7 = (vm_address_t *)address;
    if (address)
    {
      v8 = (unint64_t *)*((_QWORD *)p + 6);
      v9 = v8[3];
      if (v9)
        pthread_mutex_lock((pthread_mutex_t *)(v9 + 8));
      v10 = 0;
      v11 = *v8;
      v12 = v8[1];
      v13 = v8[2];
      do
      {
        while (1)
        {
          while (1)
          {
            v14 = v7;
            v7 = (vm_address_t *)*v7;
            v15 = *((unsigned int *)v14 + 4);
            if (!v12 || v13 > v15)
              break;
            *v14 = v10;
            v10 = (vm_address_t)v14;
            if (!v7)
              goto LABEL_26;
          }
          if (v15 > 0x13)
            break;
          v16 = &v8[v15];
          v17 = v16[5];
          *v14 = v17;
          if (v11 < v15 && v17 == 0)
            v11 = v15;
          v16[5] = (unint64_t)v14;
          if (v13 <= v15)
          {
            v13 = 0;
            if (!v7)
              goto LABEL_26;
          }
          else
          {
            v13 += ~v15;
            if (!v7)
              goto LABEL_26;
          }
        }
        *v14 = v8[5];
        v8[5] = (unint64_t)v14;
        v19 = v13 > v15;
        v13 += ~v15;
        if (!v19)
          v13 = 0;
      }
      while (v7);
LABEL_26:
      *v8 = v11;
      v8[2] = v13;
      v20 = v8[3];
      if (v20)
        pthread_mutex_unlock((pthread_mutex_t *)(v20 + 8));
      if (v10)
      {
        do
        {
          v21 = *(_QWORD *)v10;
          vm_deallocate(mach_task_self_, v10, ((*(_DWORD *)(v10 + 16) << 12) + 4096));
          v10 = v21;
        }
        while (v21);
      }
    }
    if ((_BYTE)v47)
    {
      v22 = (uint64_t *)*((_QWORD *)p + 11);
      v23 = (_QWORD *)v45;
      *(_DWORD *)(v45 + 20) = 0;
      v24 = (_QWORD *)v22[1];
      v23[1] = v24;
      *v24 = v23;
      *v23 = v22;
      v22[1] = (uint64_t)v23;
      *((_QWORD *)p + 11) = v23;
      v25 = (v22[4] - v22[3]) >> 12;
      *((_DWORD *)v22 + 5) = v25;
      if (v25 < *(unsigned int *)(*v22 + 20))
      {
        v26 = (uint64_t *)*v22;
        do
          v26 = (uint64_t *)*v26;
        while (*((_DWORD *)v26 + 5) > v25);
        *v23 = *v22;
        *(_QWORD *)(*v22 + 8) = v22[1];
        v27 = (_QWORD *)v26[1];
        v22[1] = (uint64_t)v27;
        *v27 = v22;
        *v22 = (uint64_t)v26;
        v26[1] = (uint64_t)v22;
      }
    }
  }
  return v6;
}

void apr_pool_cleanup_register(apr_pool_t *p, const void *data, apr_status_t (__cdecl *plain_cleanup)(void *), apr_status_t (__cdecl *child_cleanup)(void *))
{
  _QWORD *v7;

  if (p)
  {
    v7 = (_QWORD *)*((_QWORD *)p + 5);
    if (v7)
      *((_QWORD *)p + 5) = *v7;
    else
      v7 = apr_palloc(p, 0x20uLL);
    v7[2] = plain_cleanup;
    v7[3] = apr_pool_cleanup_null;
    *v7 = *((_QWORD *)p + 4);
    v7[1] = data;
    *((_QWORD *)p + 4) = v7;
  }
}

apr_status_t apr_pool_cleanup_null(void *data)
{
  return 0;
}

apr_status_t apr_proc_wait(apr_proc_t *proc, int *exitcode, apr_exit_why_e *exitwhy, apr_wait_how_e waithow)
{
  int v5;
  pid_t v6;
  int v8;

  v8 = 0;
  if ((_DWORD)exitcode)
    v5 = 3;
  else
    v5 = 2;
  while (1)
  {
    v6 = waitpid(proc->pid, &v8, v5);
    if ((v6 & 0x80000000) == 0)
      break;
    if (*__error() != 4)
      return *__error();
  }
  if (!v6)
    return 70006;
  proc->pid = v6;
  if ((~v8 & 0x7F) != 0)
    return 70005;
  else
    return 20014;
}

int apr_vformatter(int (__cdecl *flush_func)(apr_vformatter_buff_t *), apr_vformatter_buff_t *c, const char *fmt, va_list ap)
{
  apr_vformatter_buff_t *v5;
  unint64_t v6;
  char *v7;
  int v8;
  char *curpos;
  int v10;
  const char *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  apr_size_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  _BOOL4 v32;
  const char *v33;
  BOOL v34;
  unsigned int *v35;
  int v36;
  int v37;
  int v38;
  _DWORD *v39;
  int (__cdecl *v40)(apr_vformatter_buff_t *);
  unsigned int **v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  _BYTE *v50;
  unsigned int v51;
  unsigned int v52;
  char *v53;
  unsigned int **v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t j;
  double *v58;
  long double v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unint64_t *v64;
  unint64_t v65;
  const char *v66;
  BOOL v67;
  unint64_t *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  long double v74;
  char *p_n_6;
  uint64_t v76;
  int v77;
  BOOL v78;
  int v79;
  char *v81;
  char v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  _DWORD *v87;
  _QWORD **v88;
  unint64_t *v89;
  unint64_t v90;
  const char *v91;
  const char **v92;
  size_t v93;
  unint64_t *v94;
  char v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unint64_t v101;
  int v102;
  char v103;
  char *v104;
  unsigned int *v105;
  unsigned int v106;
  const char *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t **v110;
  unint64_t *v111;
  int v112;
  unsigned int **v113;
  _BYTE *v114;
  unsigned int **v115;
  int v116;
  uint64_t v117;
  _BYTE *v118;
  int v119;
  unsigned int **v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  __int16 v127;
  unsigned int v128;
  _WORD **v129;
  unsigned int *v130;
  unsigned int v131;
  const char *v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v136;
  _BYTE *v137;
  char v138;
  _BYTE *v139;
  unint64_t v140;
  int v141;
  _BYTE *v142;
  const char *v143;
  uint64_t v144;
  size_t v145;
  _BYTE *v146;
  unint64_t v147;
  _DWORD **v148;
  const char *v149;
  size_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  int v156;
  size_t v157;
  size_t v158;
  char *v159;
  uint64_t i;
  const char *v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  const char *v165;
  const char *v166;
  int v167;
  char v168;
  unsigned __int8 *v169;
  int v170;
  int v171;
  int v172;
  unsigned int v173;
  uint64_t v174;
  _BYTE *v175;
  uint64_t v176;
  char v177;
  char *v178;
  _BYTE *v179;
  unint64_t v180;
  char v181;
  char v182;
  char *v183;
  uint64_t v184;
  int v185;
  int v187;
  int v188;
  apr_vformatter_buff_t *v189;
  unsigned int v190;
  unint64_t v192;
  char *endpos;
  int v194;
  int v195;
  unsigned int v196;
  _BYTE v197[2];
  _BYTE *v198;
  va_list v199;
  int __n;
  char __n_4[64];
  _BYTE __n_5[8];
  char __n_6;
  _BYTE __n_7[506];
  _BYTE v205[11];
  _BYTE v206[2];
  char __s[4];
  char v208;

  v5 = c;
  v192 = 0;
  v190 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v198 = 0;
  v199 = ap;
  v196 = 0;
  curpos = c->curpos;
  endpos = c->endpos;
LABEL_2:
  LOBYTE(v10) = *fmt;
  do
  {
    while (2)
    {
      if (v10 != 37)
      {
        if (!(_BYTE)v10)
        {
          v5->curpos = curpos;
          return v8;
        }
        if (curpos)
        {
          if (curpos >= endpos)
          {
            v5->curpos = curpos;
            if (((unsigned int (*)(apr_vformatter_buff_t *))flush_func)(v5))
              return -1;
            curpos = v5->curpos;
            v53 = v5->endpos;
            LOBYTE(v10) = *fmt;
          }
          else
          {
            v53 = endpos;
          }
          *curpos++ = v10;
        }
        else
        {
          v53 = endpos;
        }
        endpos = v53;
        ++v8;
LABEL_452:
        ++fmt;
        goto LABEL_2;
      }
      v12 = fmt[1];
      v11 = fmt + 1;
      v13 = v12;
      if (v12 < 0)
      {
        if (__maskrune(v13, 0x1000uLL))
        {
LABEL_6:
          v194 = 0;
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v17 = 1;
          v18 = 32;
          v19 = 1;
          goto LABEL_42;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[v13] & 0x1000) != 0)
      {
        goto LABEL_6;
      }
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v19 = 1;
      v18 = 32;
      while (1)
      {
        v20 = *(unsigned __int8 *)v11;
        if (v20 <= 0x2A)
          break;
        switch(v20)
        {
          case '0':
            v18 = 48;
            break;
          case '-':
            v19 = 0;
            break;
          case '+':
            v15 = 1;
            break;
          default:
            goto LABEL_21;
        }
LABEL_20:
        ++v11;
      }
      if (v20 == 32)
      {
        v14 = 1;
        goto LABEL_20;
      }
      if (v20 == 35)
      {
        v16 = 1;
        goto LABEL_20;
      }
LABEL_21:
      if (v20 - 48 > 9)
      {
        if (v20 == 42)
        {
          v23 = (unsigned int *)v199;
          v199 += 8;
          v24 = *v23;
          v25 = *(unsigned __int8 *)++v11;
          v20 = v25;
          if ((v24 & 0x80000000) == 0)
            v19 = v19;
          else
            v19 = 0;
          if ((v24 & 0x80000000) == 0)
            v6 = v24;
          else
            v6 = -(int)v24;
          goto LABEL_32;
        }
        v194 = 0;
      }
      else
      {
        v6 = *v11 - 48;
        v21 = *(unsigned __int8 *)++v11;
        v20 = v21;
        if (v21 - 48 <= 9)
        {
          do
          {
            v6 = 10 * v6 + (char)v20 - 48;
            v22 = *(unsigned __int8 *)++v11;
            v20 = v22;
          }
          while (v22 - 48 < 0xA);
        }
LABEL_32:
        v194 = 1;
      }
      if (v20 == 46)
      {
        v26 = *((unsigned __int8 *)v11 + 1);
        if ((v26 - 48) > 9)
        {
          v17 = 0;
          if ((char)v26 == 42)
          {
            v39 = v199;
            v199 += 8;
            v11 += 2;
            v192 = *v39 & ~((int)*v39 >> 31);
          }
          else
          {
            v192 = 0;
            ++v11;
          }
        }
        else
        {
          v28 = *((unsigned __int8 *)v11 + 2);
          v11 += 2;
          v27 = v28;
          v192 = (char)v26 - 48;
          if ((v28 - 48) <= 9)
          {
            v29 = (char)v26 - 48;
            do
            {
              v30 = *(unsigned __int8 *)++v11;
              v29 = 10 * v29 + v27 - 48;
              v27 = v30;
            }
            while ((v30 - 48) < 0xA);
            v192 = v29;
          }
          v17 = 0;
        }
      }
      else
      {
        v17 = 1;
      }
LABEL_42:
      v31 = *(unsigned __int8 *)v11;
      v32 = v31 == 108;
      if (v31 == 108)
        v33 = v11 + 1;
      else
        v33 = v11;
      if (v31 == 113)
      {
        v32 = 1;
        v33 = v11 + 1;
      }
      v34 = v31 == 104;
      if (v31 == 104)
        v32 = 0;
      LODWORD(v35) = v31 == 104;
      if (v34)
        fmt = v11 + 1;
      else
        fmt = v33;
      v36 = *fmt;
      v195 = v19;
      if (v36 > 70)
      {
        switch(*fmt)
        {
          case 'c':
            LOBYTE(v35) = 0;
            LOBYTE(v16) = 0;
            v87 = v199;
            v199 += 8;
            v86 = *v87;
            goto LABEL_142;
          case 'd':
          case 'i':
            if (v32)
            {
              v68 = (unint64_t *)v199;
              v199 += 8;
              v69 = v17;
              v70 = conv_10_quad(*v68, 0, &v196, (uint64_t)&v205[3], &v198);
              LODWORD(v19) = v195;
              v7 = (char *)v70;
              if ((v69 & 1) != 0)
                goto LABEL_171;
LABEL_167:
              v101 = 511;
              if (v192 + 1 < 0x200)
                v101 = v192;
              for (; (unint64_t)v198 < v101; ++v198)
                *--v7 = 48;
              goto LABEL_171;
            }
            v97 = (unsigned int *)v199;
            v199 += 8;
            v98 = *v97;
            if ((_DWORD)v35)
              v99 = (__int16)v98;
            else
              v99 = v98;
            v100 = v99 >> 31;
            if ((v99 & 0x80000000) != 0)
              v99 = -v99;
            v196 = v100;
            v7 = &v205[3];
            do
            {
              *--v7 = v99 % 0xA + 48;
              v78 = v99 > 9;
              v99 /= 0xAu;
            }
            while (v78);
            v198 = (_BYTE *)(&v205[3] - v7);
            if ((v17 & 1) == 0)
              goto LABEL_167;
LABEL_171:
            v189 = v5;
            if (v196)
            {
              v102 = 45;
            }
            else if (v15)
            {
              v102 = 43;
            }
            else
            {
              v102 = 32 * (v14 != 0);
            }
            v40 = flush_func;
            v104 = endpos;
            goto LABEL_408;
          case 'e':
          case 'f':
            goto LABEL_88;
          case 'g':
            goto LABEL_106;
          case 'h':
          case 'j':
          case 'k':
          case 'l':
          case 'm':
          case 'q':
          case 'r':
          case 't':
          case 'v':
          case 'w':
            goto LABEL_139;
          case 'n':
            if (v32)
            {
              LOBYTE(v35) = 0;
              v88 = (_QWORD **)v199;
              v199 += 8;
              **v88 = v8;
            }
            else if ((_DWORD)v35)
            {
              LOBYTE(v35) = 0;
              v129 = (_WORD **)v199;
              v199 += 8;
              **v129 = v8;
            }
            else
            {
              v148 = (_DWORD **)v199;
              v199 += 8;
              **v148 = v8;
            }
            LOBYTE(v16) = 1;
            goto LABEL_304;
          case 'o':
            if (v32)
            {
              v89 = (unint64_t *)v199;
              v199 += 8;
              v90 = *v89;
              v91 = "0123456789abcdef";
              if (*fmt == 88)
                v91 = "0123456789ABCDEF";
              if (HIDWORD(v90))
              {
                v7 = &v205[3];
                v40 = flush_func;
                do
                {
                  *--v7 = v91[v90 & 7];
                  v67 = v90 >= 8;
                  v90 >>= 3;
                }
                while (v67);
              }
              else
              {
                v7 = &v205[3];
                v40 = flush_func;
                do
                {
                  *--v7 = v91[v90 & 7];
                  v67 = v90 >= 8;
                  LODWORD(v90) = v90 >> 3;
                }
                while (v67);
              }
            }
            else
            {
              v130 = (unsigned int *)v199;
              v199 += 8;
              v131 = *v130;
              if ((_DWORD)v35)
                v131 = (unsigned __int16)v131;
              v132 = "0123456789abcdef";
              if (*fmt == 88)
                v132 = "0123456789ABCDEF";
              v190 = v131;
              v7 = &v205[3];
              do
              {
                *--v7 = v132[v131 & 7];
                v78 = v131 > 7;
                v131 >>= 3;
              }
              while (v78);
              v40 = flush_func;
            }
            v146 = (_BYTE *)(&v205[3] - v7);
            v198 = (_BYTE *)(&v205[3] - v7);
            if ((v17 & 1) == 0)
            {
              v147 = 511;
              if (v192 + 1 < 0x200)
                v147 = v192;
              while ((unint64_t)v146 < v147)
              {
                *--v7 = 48;
                v146 = ++v198;
              }
            }
            if (!v16)
            {
              LOBYTE(v35) = 0;
              goto LABEL_318;
            }
            if (*v7 == 48)
              goto LABEL_294;
            LOBYTE(v35) = 0;
            LOBYTE(v16) = 0;
            *--v7 = 48;
            v139 = v198 + 1;
            goto LABEL_301;
          case 'p':
            v38 = *++fmt;
            v37 = v38;
            v10 = v38;
            if (!v38)
              continue;
            if (v37 <= 83)
            {
              v40 = flush_func;
              switch(v37)
              {
                case 'A':
                  v41 = (unsigned int **)v199;
                  v199 += 8;
                  v35 = *v41;
                  if (!v35)
                    goto LABEL_217;
                  v42 = bswap32(*v35);
                  v43 = v42;
                  v44 = v205;
                  v45 = &v205[2];
                  v46 = &v205[4];
                  do
                  {
                    v47 = v45;
                    v48 = v44;
                    *(v46 - 2) = v43 % 0xA + 48;
                    --v46;
                    --v45;
                    --v44;
                    v78 = v43 > 9;
                    v43 /= 0xAu;
                  }
                  while (v78);
                  *(v46 - 2) = 46;
                  v49 = BYTE1(v42);
                  do
                  {
                    v50 = v48;
                    *(v47 - 2) = v49 % 0xA + 48;
                    --v47;
                    --v48;
                    v78 = v49 > 9;
                    v49 /= 0xAu;
                  }
                  while (v78);
                  *(v47 - 2) = 46;
                  v51 = BYTE2(v42);
                  do
                  {
                    *(v50 - 2) = v51 % 0xA + 48;
                    --v50;
                    v78 = v51 > 9;
                    v51 /= 0xAu;
                  }
                  while (v78);
                  *(v50 - 2) = 46;
                  v7 = v50 - 2;
                  v52 = HIBYTE(v42);
                  do
                  {
                    *--v7 = v52 % 0xA + 48;
                    v78 = v52 > 9;
                    v52 /= 0xAu;
                  }
                  while (v78);
                  goto LABEL_310;
                case 'B':
                case 'F':
                  goto LABEL_194;
                case 'C':
                case 'D':
                case 'E':
                case 'G':
                case 'H':
                  goto LABEL_207;
                case 'I':
                  v113 = (unsigned int **)v199;
                  v199 += 8;
                  v35 = *v113;
                  if (!v35)
                    goto LABEL_217;
                  LOBYTE(v35) = 0;
                  LOBYTE(v16) = 0;
                  v7 = 0;
                  v114 = v198;
                  goto LABEL_311;
                default:
                  v40 = flush_func;
                  if (v37 != 83)
                    goto LABEL_207;
LABEL_194:
                  if (v10 == 66)
                  {
                    v108 = (unint64_t *)v199;
                    v199 += 8;
                    v109 = *v108;
                    if (v109)
                      v109 = *(unsigned int *)v109;
                  }
                  else
                  {
                    v110 = (unint64_t **)v199;
                    v199 += 8;
                    v111 = *v110;
                    if (!v111)
                      goto LABEL_200;
                    v109 = *v111;
                    if ((v109 & 0x8000000000000000) != 0)
                    {
                      v143 = "  - ";
                      goto LABEL_322;
                    }
                  }
                  if (v109 < 0x3CD)
                  {
LABEL_200:
                    v112 = apr_snprintf(__s, v19, "%3d ");
                    goto LABEL_320;
                  }
                  v126 = "";
                  do
                  {
                    v127 = v109;
                    v109 >>= 10;
                    ++v126;
                  }
                  while (v109 > 0x3CC);
                  v128 = v127 & 0x3FF;
                  if (v109 < 9 || v109 == 9 && v128 <= 0x3CC)
                    v112 = apr_snprintf(__s, v19, "%d.%d%c");
                  else
                    v112 = apr_snprintf(__s, v19, "%3d%c");
LABEL_320:
                  if ((v112 & 0x80000000) == 0)
                    goto LABEL_323;
                  v143 = "****";
LABEL_322:
                  *(_DWORD *)__s = *(_DWORD *)v143;
                  v208 = v143[4];
LABEL_323:
                  v7 = __s;
                  v150 = strlen(__s);
                  LOBYTE(v35) = 0;
                  LOBYTE(v16) = 0;
                  v198 = (_BYTE *)v150;
                  v18 = 32;
                  v104 = endpos;
                  LODWORD(v19) = v195;
                  break;
              }
              goto LABEL_412;
            }
            if (v37 > 111)
            {
              if (v37 != 116)
              {
                v40 = flush_func;
                if (v37 != 112)
                {
LABEL_207:
                  LOBYTE(v35) = 0;
                  LOBYTE(v16) = 0;
                  v198 = (_BYTE *)&dword_8;
                  v199 += 8;
                  v7 = "bogus %p";
                  goto LABEL_318;
                }
                v83 = (unint64_t *)v199;
                v199 += 8;
                v84 = *v83;
                if (HIDWORD(v84))
                {
                  v7 = &v205[3];
                  do
                  {
                    *--v7 = conv_p2_low_digits[v84 & 0xF];
                    v78 = v84 > 0xF;
                    v84 >>= 4;
                  }
                  while (v78);
                }
                else
                {
                  v7 = &v205[3];
                  do
                  {
                    *--v7 = conv_p2_low_digits[v84 & 0xF];
                    v67 = v84 >= 0x10;
                    LODWORD(v84) = v84 >> 4;
                  }
                  while (v67);
                }
                LOBYTE(v35) = 0;
                LOBYTE(v16) = 0;
                v114 = (_BYTE *)(&v205[3] - v7);
                goto LABEL_316;
              }
              v120 = (unsigned int **)v199;
              v199 += 8;
              v35 = *v120;
              v40 = flush_func;
              if (!v35)
              {
LABEL_217:
                LOBYTE(v16) = 0;
                v198 = (_BYTE *)(&dword_4 + 2);
                v18 = 32;
                v7 = "(null)";
                goto LABEL_318;
              }
              v121 = *(_QWORD *)v35;
              if (HIDWORD(v121))
              {
                v7 = &v205[3];
                do
                {
                  *--v7 = conv_p2_low_digits[v121 & 0xF];
                  v78 = v121 > 0xF;
                  v121 >>= 4;
                }
                while (v78);
              }
              else
              {
                v7 = &v205[3];
                do
                {
                  *--v7 = conv_p2_low_digits[v121 & 0xF];
                  v67 = v121 >= 0x10;
                  LODWORD(v121) = v121 >> 4;
                }
                while (v67);
              }
LABEL_310:
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
              v114 = (_BYTE *)(&v205[3] - v7);
LABEL_311:
              v118 = (_BYTE *)v192;
              if (v192 >= (unint64_t)v114)
                v119 = 1;
              else
                v119 = v17;
            }
            else
            {
              if (v37 != 84)
              {
                v40 = flush_func;
                if (v37 != 109)
                  goto LABEL_207;
                v54 = (unsigned int **)v199;
                v199 += 8;
                v55 = *v54;
                if (v55)
                {
                  v56 = *v55;
                  if ((int)*v55 > 19999)
                  {
                    if (v56 >> 6 > 0x752)
                    {
                      if (v56 > 0xA392F)
                      {
                        if (v56 > 0xAFC7F)
                        {
                          v164 = 0;
                          v165 = "Unrecognized resolver error";
                          if (v56 == 720004)
                            v165 = "No address for host";
                          v166 = "Unknown host";
                          if (v56 != 720001)
                            v166 = v165;
                          while (1)
                          {
                            v167 = v166[v164];
                            __n_4[v164] = v167;
                            if (!v167)
                              break;
                            if (++v164 == 510)
                            {
LABEL_500:
                              v183 = &v205[1];
                              goto LABEL_501;
                            }
                          }
                        }
                        else
                        {
                          v161 = gai_strerror(v56 - 670000);
                          if (v161)
                          {
                            v162 = 0;
                            while (1)
                            {
                              v163 = v161[v162];
                              __n_4[v162] = v163;
                              if (!v163)
                                break;
                              if (++v162 == 510)
                                goto LABEL_500;
                            }
                          }
                          else
                          {
                            v183 = __n_4;
LABEL_501:
                            *v183 = 0;
                          }
                        }
                      }
                      else
                      {
                        for (i = 0; ; ++i)
                        {
                          __n_4[i] = aAprDoesNotUnde[i];
                          if (i == 39)
                            break;
                        }
                      }
                    }
                    else
                    {
                      v149 = "Could not perform a stat on the file.";
                      switch(v56)
                      {
                        case 0x4E21u:
                          break;
                        case 0x4E22u:
                          v149 = "A new pool could not be created.";
                          break;
                        case 0x4E23u:
                        case 0x4E32u:
LABEL_478:
                          v149 = "Error string not specified yet";
                          break;
                        case 0x4E24u:
                          v149 = "An invalid date has been provided";
                          break;
                        case 0x4E25u:
                          v149 = "An invalid socket was returned";
                          break;
                        case 0x4E26u:
                          v149 = "No process was provided and one was required.";
                          break;
                        case 0x4E27u:
                          v149 = "No time was provided and one was required.";
                          break;
                        case 0x4E28u:
                          v149 = "No directory was provided and one was required.";
                          break;
                        case 0x4E29u:
                          v149 = "No lock was provided and one was required.";
                          break;
                        case 0x4E2Au:
                          v149 = "No poll structure was provided and one was required.";
                          break;
                        case 0x4E2Bu:
                          v149 = "No socket was provided and one was required.";
                          break;
                        case 0x4E2Cu:
                          v149 = "No thread was provided and one was required.";
                          break;
                        case 0x4E2Du:
                          v149 = "No thread key structure was provided and one was required.";
                          break;
                        case 0x4E2Eu:
                          v149 = "Internal error (specific information not available)";
                          break;
                        case 0x4E2Fu:
                          v149 = "No shared memory is currently available";
                          break;
                        case 0x4E30u:
                          v149 = "The specified IP address is invalid.";
                          break;
                        case 0x4E31u:
                          v149 = "The specified network mask is invalid.";
                          break;
                        case 0x4E33u:
                          v149 = "DSO load failed";
                          break;
                        case 0x4E34u:
                          v149 = "The given path is absolute";
                          break;
                        case 0x4E35u:
                          v149 = "The given path is relative";
                          break;
                        case 0x4E36u:
                          v149 = "The given path is incomplete";
                          break;
                        case 0x4E37u:
                          v149 = "The given path was above the root path";
                          break;
                        case 0x4E38u:
                          v149 = "The given path is misformatted or contained invalid characters";
                          break;
                        case 0x4E39u:
                          v149 = "The given path contained wildcard characters";
                          break;
                        case 0x4E3Au:
                          v149 = "Could not find the requested symbol.";
                          break;
                        case 0x4E3Bu:
                          v149 = "The process is not recognized.";
                          break;
                        case 0x4E3Cu:
                          v149 = "Not enough entropy to continue.";
                          break;
                        default:
                          switch(v56)
                          {
                            case 0x11171u:
                              v149 = "Your code just forked, and you are currently executing in the child process";
                              break;
                            case 0x11172u:
                              v149 = "Your code just forked, and you are currently executing in the parent process";
                              break;
                            case 0x11173u:
                              v149 = "The specified thread is detached";
                              break;
                            case 0x11174u:
                              v149 = "The specified thread is not detached";
                              break;
                            case 0x11175u:
                              v149 = "The specified child process is done executing";
                              break;
                            case 0x11176u:
                              v149 = "The specified child process is not done executing";
                              break;
                            case 0x11177u:
                              v149 = "The timeout specified has expired";
                              break;
                            case 0x11178u:
                              v149 = "Partial results are valid but processing is incomplete";
                              break;
                            case 0x1117Cu:
                              v149 = "Bad character specified on command line";
                              break;
                            case 0x1117Du:
                              v149 = "Missing parameter for the specified command line option";
                              break;
                            case 0x1117Eu:
                              v149 = "End of file found";
                              break;
                            case 0x1117Fu:
                              v149 = "Could not find specified socket in poll list.";
                              break;
                            case 0x11183u:
                              v149 = "Shared memory is implemented anonymously";
                              break;
                            case 0x11184u:
                              v149 = "Shared memory is implemented using files";
                              break;
                            case 0x11185u:
                              v149 = "Shared memory is implemented using a key system";
                              break;
                            case 0x11186u:
                              v149 = "There is no error, this value signifies an initialized error code";
                              break;
                            case 0x11187u:
                              v149 = "This function has not been implemented on this platform";
                              break;
                            case 0x11188u:
                              v149 = "passwords do not match";
                              break;
                            case 0x11189u:
                              v149 = "The given lock was busy.";
                              break;
                            default:
                              goto LABEL_478;
                          }
                          break;
                      }
                      v184 = 0;
                      while (1)
                      {
                        v185 = v149[v184];
                        __n_4[v184] = v185;
                        if (!v185)
                          break;
                        if (++v184 == 510)
                          goto LABEL_500;
                      }
                    }
                  }
                  else if (strerror_r(v56, __n_4, 0x1FFuLL) < 0)
                  {
                    for (j = 0; ; ++j)
                    {
                      __n_4[j] = aAprDoesNotUnde[j];
                      if (j == 39)
                        break;
                    }
                  }
                  v7 = __n_4;
                  v145 = strlen(__n_4);
                  LODWORD(v19) = v195;
                }
                else
                {
                  v145 = 6;
                  v7 = "(null)";
                }
                v104 = endpos;
                LOBYTE(v35) = 0;
                LOBYTE(v16) = 0;
                v198 = (_BYTE *)v145;
                v18 = 32;
                goto LABEL_412;
              }
              v115 = (unsigned int **)v199;
              v199 += 8;
              v35 = *v115;
              v40 = flush_func;
              if (!v35)
                goto LABEL_217;
              v116 = v17;
              v117 = conv_10_quad(*(_QWORD *)v35, 1, __s, (uint64_t)&v205[3], &v198);
              LODWORD(v19) = v195;
              v7 = (char *)v117;
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
              v114 = v198;
              v118 = (_BYTE *)v192;
              if (v192 >= (unint64_t)v198)
                v119 = 1;
              else
                v119 = v116;
            }
            if (!v119)
              v114 = v118;
LABEL_316:
            v198 = v114;
LABEL_317:
            v18 = 32;
            goto LABEL_318;
          case 's':
            v92 = (const char **)v199;
            v199 += 8;
            v7 = (char *)*v92;
            if (!*v92)
            {
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
              v198 = (_BYTE *)(&dword_4 + 2);
              v18 = 32;
              v7 = "(null)";
              goto LABEL_304;
            }
            if ((v17 & 1) != 0)
            {
              v93 = strlen(*v92);
              LODWORD(v19) = v195;
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
              v198 = (_BYTE *)v93;
              goto LABEL_144;
            }
            v198 = 0;
            v40 = flush_func;
            LOBYTE(v35) = v192;
            if (v192)
            {
              v144 = 0;
              while (v7[v144])
              {
                v198 = (_BYTE *)++v144;
                v18 = 32;
                if (v192 == v144)
                  goto LABEL_294;
              }
              LOBYTE(v35) = 0;
            }
            else
            {
              v192 = 0;
            }
            LOBYTE(v16) = 0;
            goto LABEL_317;
          case 'u':
            if (v32)
            {
              v94 = (unint64_t *)v199;
              v199 += 8;
              v95 = v17;
              v96 = conv_10_quad(*v94, 1, &v196, (uint64_t)&v205[3], &v198);
              LOBYTE(v17) = v95;
              LODWORD(v19) = v195;
              v7 = (char *)v96;
            }
            else
            {
              v133 = (unsigned int *)v199;
              v199 += 8;
              v134 = *v133;
              if ((_DWORD)v35)
                v135 = (unsigned __int16)v134;
              else
                v135 = v134;
              v196 = 0;
              v7 = &v205[3];
              do
              {
                *--v7 = v135 % 0xA + 48;
                v78 = v135 > 9;
                v135 /= 0xAu;
              }
              while (v78);
              v198 = (_BYTE *)(&v205[3] - v7);
            }
            v40 = flush_func;
            if ((v17 & 1) != 0)
            {
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
            }
            else
            {
              v136 = 511;
              if (v192 + 1 < 0x200)
                v136 = v192;
              for (; (unint64_t)v198 < v136; ++v198)
                *--v7 = 48;
LABEL_294:
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
            }
            goto LABEL_318;
          case 'x':
            goto LABEL_96;
          default:
            if (v36 == 71)
            {
LABEL_106:
              v189 = v5;
              v71 = v192;
              if (v192 <= 1)
                v71 = 1;
              if (v17)
                v72 = 6;
              else
                v72 = v71;
              v73 = v199;
              v199 += 8;
              v74 = *(double *)v73;
              *(_DWORD *)&v205[3] = 0;
              __n = 0;
              apr_cvt(v72, &__n, &v205[3], 1, __s, v74);
              p_n_6 = __n_5;
              if (*(_DWORD *)&v205[3])
              {
                __n_5[0] = 45;
                p_n_6 = &__n_6;
              }
              v192 = v72;
              if ((int)v72 >= 2)
              {
                v72 = v72;
                do
                {
                  v76 = v72 - 1;
                  if (__s[(v72 - 1)] != 48)
                    goto LABEL_118;
                  --v72;
                }
                while ((unint64_t)(v76 + 1) > 2);
                LODWORD(v72) = 1;
              }
LABEL_118:
              v77 = __n;
              v78 = __n < 0 || __n - (int)v72 <= 4;
              v79 = !v78;
              if (__n >= -3 && v79 == 0)
              {
                if (__n <= 0)
                {
                  if (__s[0] != 48)
                    *p_n_6++ = 46;
                  if (v77 < 0)
                  {
                    do
                    {
                      __n = v77 + 1;
                      *p_n_6++ = 48;
                      v77 = __n;
                    }
                    while (__n < 0);
                  }
                  else
                  {
                    v77 = 0;
                  }
                }
                if ((int)v72 >= 1)
                {
                  v152 = 0;
                  do
                  {
                    *p_n_6 = __s[v152];
                    if ((_DWORD)v152 + 1 == __n)
                    {
                      p_n_6[1] = 46;
                      p_n_6 += 2;
                    }
                    else
                    {
                      ++p_n_6;
                    }
                    ++v152;
                  }
                  while ((v72 - 1) + 1 != v152);
                  v77 = __n;
                }
                if ((int)v72 < v77)
                {
                  do
                  {
                    v153 = p_n_6;
                    LODWORD(v72) = v72 + 1;
                    *p_n_6++ = 48;
                  }
                  while ((int)v72 < __n);
                  *p_n_6 = 46;
                  p_n_6 = v153 + 2;
                }
              }
              else
              {
                --__n;
                *p_n_6 = __s[0];
                v81 = p_n_6 + 2;
                p_n_6[1] = 46;
                if ((int)v72 > 1)
                {
                  v188 = v77;
                  memcpy(v81, &__s[1], (v72 - 1));
                  v77 = v188;
                  v81 = &p_n_6[(v72 - 2) + 3];
                }
                *v81 = 101;
                if (v77 < 1)
                {
                  __n = 1 - v77;
                  v82 = 45;
                }
                else
                {
                  v82 = 43;
                }
                v81[1] = v82;
                v141 = __n;
                if (__n < 100)
                {
                  v142 = v81 + 2;
                }
                else
                {
                  v142 = v81 + 3;
                  v81[2] = __n / 0x64u + 48;
                  v141 = __n;
                }
                if (v141 >= 10)
                {
                  *v142++ = ((103 * (v141 % 0x64u)) >> 10) | 0x30;
                  v141 = __n;
                }
                *v142 = v141 % 10 + 48;
                p_n_6 = v142 + 1;
              }
              v154 = p_n_6 - 1;
              if (*(p_n_6 - 1) != 46 || v16 != 0)
                v154 = p_n_6;
              *v154 = 0;
              v156 = 32 * (v14 != 0);
              if (v15)
                v156 = 43;
              if (__n_5[0] == 45)
                v102 = 45;
              else
                v102 = v156;
              if (__n_5[0] == 45)
                v7 = &__n_6;
              else
                v7 = __n_5;
              v157 = strlen(v7);
              v198 = (_BYTE *)v157;
              if (v16)
              {
                v158 = v157;
                if (!strchr(v7, 46))
                {
                  v198 = (_BYTE *)(v158 + 1);
                  *(_WORD *)&v7[v158] = 46;
                }
              }
              v40 = flush_func;
              if (*fmt == 71)
              {
                v159 = strchr(v7, 101);
                if (v159)
                  *v159 = 69;
              }
              v104 = endpos;
              LODWORD(v19) = v195;
              goto LABEL_408;
            }
            if (v36 != 88)
              goto LABEL_139;
LABEL_96:
            if (v32)
            {
              v64 = (unint64_t *)v199;
              v199 += 8;
              v65 = *v64;
              v66 = "0123456789abcdef";
              if (*fmt == 88)
                v66 = "0123456789ABCDEF";
              if (HIDWORD(v65))
              {
                v7 = &v205[3];
                v40 = flush_func;
                do
                {
                  *--v7 = v66[v65 & 0xF];
                  v67 = v65 >= 0x10;
                  v65 >>= 4;
                }
                while (v67);
              }
              else
              {
                v7 = &v205[3];
                v40 = flush_func;
                do
                {
                  *--v7 = v66[v65 & 0xF];
                  v67 = v65 >= 0x10;
                  LODWORD(v65) = v65 >> 4;
                }
                while (v67);
              }
            }
            else
            {
              v105 = (unsigned int *)v199;
              v199 += 8;
              v106 = *v105;
              if ((_DWORD)v35)
                v106 = (unsigned __int16)v106;
              v107 = "0123456789abcdef";
              if (*fmt == 88)
                v107 = "0123456789ABCDEF";
              v190 = v106;
              v7 = &v205[3];
              do
              {
                *--v7 = v107[v106 & 0xF];
                v78 = v106 > 0xF;
                v106 >>= 4;
              }
              while (v78);
              v40 = flush_func;
            }
            v137 = (_BYTE *)(&v205[3] - v7);
            v198 = (_BYTE *)(&v205[3] - v7);
            if ((v17 & 1) == 0)
            {
              v140 = 511;
              if (v192 + 1 < 0x200)
                v140 = v192;
              while ((unint64_t)v137 < v140)
              {
                *--v7 = 48;
                v137 = ++v198;
              }
            }
            LOBYTE(v35) = 0;
            if (v16 && v190)
            {
              LOBYTE(v35) = 0;
              LOBYTE(v16) = 0;
              v138 = *fmt;
              *(v7 - 2) = 48;
              v7 -= 2;
              v7[1] = v138;
              v139 = v198 + 2;
LABEL_301:
              v198 = v139;
            }
            else
            {
              LOBYTE(v16) = 0;
            }
            goto LABEL_318;
        }
      }
      break;
    }
    LOBYTE(v10) = *fmt;
  }
  while (!*fmt);
  if (v36 == 37)
  {
    LOBYTE(v35) = 0;
    LOBYTE(v16) = 0;
    LOBYTE(v86) = 37;
LABEL_142:
    v197[0] = v86;
    v85 = 1;
LABEL_143:
    v198 = (_BYTE *)v85;
    v7 = v197;
LABEL_144:
    v18 = 32;
LABEL_304:
    v40 = flush_func;
LABEL_318:
    v104 = endpos;
    goto LABEL_412;
  }
  if (v36 != 69)
  {
LABEL_139:
    LOBYTE(v35) = 0;
    LOBYTE(v16) = 0;
    v197[0] = 37;
    v197[1] = *fmt;
    v85 = 2;
    goto LABEL_143;
  }
LABEL_88:
  v58 = (double *)v199;
  v199 += 8;
  v59 = *v58;
  if (fabs(*v58) == INFINITY)
  {
    LOBYTE(v35) = 0;
    LOBYTE(v16) = 0;
    v198 = (_BYTE *)(&dword_0 + 3);
    v7 = "inf";
    goto LABEL_304;
  }
  v60 = *(unsigned __int8 *)fmt;
  if (v17)
    v61 = 6;
  else
    v61 = v192;
  __n = 0;
  v187 = v60;
  v189 = v5;
  if (v60 == 102)
  {
    v62 = v61;
    v63 = 0;
  }
  else
  {
    v62 = v61 + 1;
    v63 = 1;
  }
  apr_cvt(v62, &__n, &v196, v63, __s, v59);
  v103 = __s[0];
  if (__s[0] < 0)
  {
    if (__maskrune(__s[0], 0x100uLL))
      goto LABEL_177;
  }
  else if ((_DefaultRuneLocale.__runetype[__s[0]] & 0x100) != 0)
  {
LABEL_177:
    v198 = (_BYTE *)strlen(__s);
    v7 = __n_5;
    __memcpy_chk(__n_5, __s, v198 + 1, 511);
    v196 = 0;
    v104 = endpos;
    LODWORD(v19) = v195;
    goto LABEL_178;
  }
  v122 = v187;
  if (v187 == 102)
  {
    if (__n < 1)
    {
      __n_5[0] = 48;
      if (v61 < 1)
      {
        LODWORD(v19) = v195;
        if (v16)
        {
          __n_6 = 46;
          v124 = __s;
          v125 = __n_7;
        }
        else
        {
          v124 = __s;
          v125 = &__n_6;
        }
      }
      else
      {
        __n_6 = 46;
        v125 = __n_7;
        LODWORD(v19) = v195;
        if (__n < 0)
        {
          v151 = ~__n;
          memset(__n_7, 48, v151 + 1);
          v122 = 102;
          LODWORD(v19) = v195;
          v125 = &__n_5[v151 + 3];
        }
        __n = 1;
        v124 = __s;
      }
    }
    else
    {
      v123 = __n;
      memcpy(__n_5, __s, __n);
      v124 = &__s[v123];
      v125 = &__n_5[v123];
      __n = -1;
      if (v16 || v61 > 0)
      {
        *v125 = 46;
        v125 = &__n_7[(v123 - 1)];
      }
      LODWORD(v19) = v195;
      v122 = 102;
    }
  }
  else
  {
    __n_5[0] = v103;
    LODWORD(v19) = v195;
    if (v16 || (v125 = &__n_6, v124 = &__s[1], v61 >= 1))
    {
      __n_6 = 46;
      v125 = __n_7;
      v124 = &__s[1];
    }
  }
  v168 = *v124;
  if (*v124)
  {
    v169 = (unsigned __int8 *)(v124 + 1);
    do
    {
      *v125++ = v168;
      v170 = *v169++;
      v168 = v170;
    }
    while (v170);
  }
  v7 = __n_5;
  if (v122 != 102)
  {
    *v125 = v122;
    v171 = __n;
    v172 = --__n;
    if (__n)
    {
      if (v172 >= 0)
        v173 = v172;
      else
        v173 = -v172;
      v174 = -1;
      v175 = v206;
      do
      {
        v176 = v174;
        *--v175 = v173 % 0xA + 48;
        --v174;
        v78 = v173 > 9;
        v173 /= 0xAu;
      }
      while (v78);
      if (v171 <= 0)
        v177 = 45;
      else
        v177 = 43;
      v178 = v125 + 2;
      v125[1] = v177;
      v179 = (_BYTE *)(v206 - v175);
      if (v179)
      {
        if (v179 == (_BYTE *)&dword_0 + 1)
        {
          v178 = v125 + 3;
          v125[2] = 48;
        }
        do
        {
          *v178++ = v206[v176];
          v67 = __CFADD__(v176++, 1);
        }
        while (!v67);
      }
    }
    else
    {
      *(_WORD *)(v125 + 1) = 12331;
      v178 = v125 + 4;
      v125[3] = 48;
    }
    v125 = v178;
  }
  v198 = (_BYTE *)(v125 - __n_5);
  v104 = endpos;
  if (v196)
  {
    v102 = 45;
    goto LABEL_407;
  }
LABEL_178:
  if (v15)
    v102 = 43;
  else
    v102 = 32 * (v14 != 0);
LABEL_407:
  v40 = flush_func;
LABEL_408:
  LOBYTE(v16) = 0;
  LOBYTE(v35) = v102 != 0;
  if (v102 && v7 != "(null)")
  {
    LOBYTE(v16) = 0;
    *--v7 = v102;
    ++v198;
    LOBYTE(v35) = 1;
  }
  v5 = v189;
LABEL_412:
  v180 = (unint64_t)v198;
  if (!v194 || (_DWORD)v19 != 1 || v6 <= (unint64_t)v198)
    goto LABEL_430;
  v181 = v35 ^ 1;
  if (v18 != 48)
    v181 = 1;
  if ((v181 & 1) != 0)
  {
    do
    {
LABEL_424:
      if (curpos)
      {
        if (curpos >= v104)
        {
          v5->curpos = curpos;
          if (((unsigned int (*)(apr_vformatter_buff_t *))v40)(v5))
            return -1;
          curpos = v5->curpos;
          v104 = v5->endpos;
          LODWORD(v19) = v195;
        }
        *curpos++ = v18;
        v180 = (unint64_t)v198;
      }
      ++v8;
      --v6;
    }
    while (v6 > v180);
LABEL_430:
    if (v180)
      v182 = v16;
    else
      v182 = 1;
    if ((v182 & 1) == 0)
    {
      v8 += v180;
      do
      {
        if (curpos)
        {
          if (curpos >= v104)
          {
            v5->curpos = curpos;
            if (((unsigned int (*)(apr_vformatter_buff_t *))v40)(v5))
              return -1;
            curpos = v5->curpos;
            v104 = v5->endpos;
            LODWORD(v19) = v195;
          }
          *curpos++ = *v7;
        }
        ++v7;
        --v180;
      }
      while (v180);
      v180 = (unint64_t)v198;
    }
    if (v194 && !(_DWORD)v19)
    {
      while (v6 > v180)
      {
        if (curpos)
        {
          if (curpos >= v104)
          {
            v5->curpos = curpos;
            if (((unsigned int (*)(apr_vformatter_buff_t *))v40)(v5))
              return -1;
            curpos = v5->curpos;
            v104 = v5->endpos;
          }
          *curpos++ = v18;
          v180 = (unint64_t)v198;
        }
        ++v8;
        --v6;
      }
    }
    endpos = v104;
    goto LABEL_452;
  }
  if (!curpos)
    goto LABEL_423;
  if (curpos < v104)
    goto LABEL_422;
  v5->curpos = curpos;
  if (!((unsigned int (*)(apr_vformatter_buff_t *))v40)(v5))
  {
    curpos = v5->curpos;
    v104 = v5->endpos;
    LODWORD(v19) = v195;
LABEL_422:
    *curpos++ = *v7;
    v180 = (unint64_t)v198;
LABEL_423:
    ++v8;
    ++v7;
    v198 = (_BYTE *)--v180;
    --v6;
    goto LABEL_424;
  }
  return -1;
}

uint64_t conv_10_quad(unint64_t a1, int a2, _DWORD *a3, uint64_t a4, _QWORD *a5)
{
  int v5;
  int v6;
  unsigned int v7;
  uint64_t result;
  BOOL v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  BOOL v13;

  if ((HIDWORD(a1) || !a2) && (a1 != (int)a1 || a2))
  {
    if ((a1 & 0x8000000000000000) == 0)
      v10 = a1;
    else
      v10 = -(uint64_t)a1;
    if (a2)
      v11 = 0;
    else
      v11 = a1 >> 63;
    if (a2)
      v12 = a1;
    else
      v12 = v10;
    *a3 = v11;
    result = a4;
    do
    {
      *(_BYTE *)--result = v12 % 0xA + 48;
      v13 = v12 > 9;
      v12 /= 0xAuLL;
    }
    while (v13);
  }
  else
  {
    if ((a1 & 0x80000000) == 0)
      v5 = a1;
    else
      v5 = -(int)a1;
    if (a2)
      v6 = 0;
    else
      v6 = (a1 >> 31) & 1;
    if (a2)
      v7 = a1;
    else
      v7 = v5;
    *a3 = v6;
    result = a4;
    do
    {
      *(_BYTE *)--result = v7 % 0xA + 48;
      v9 = v7 >= 0xA;
      v7 /= 0xAu;
    }
    while (v9);
  }
  *a5 = a4 - result;
  return result;
}

char *apr_cvt(int a1, int *a2, _DWORD *a3, int a4, char *a5, long double a6)
{
  int v9;
  double v10;
  double v11;
  double v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  char *v20;
  double v21;
  int v22;
  uint64_t v23;
  char *v25;
  int v26;
  char *v27;
  char v28;
  char v29;
  double v31;
  double __y;

  if (a1 >= 78)
    v9 = 78;
  else
    v9 = a1;
  *a3 = 0;
  if (a6 < 0.0)
  {
    *a3 = 1;
    a6 = -a6;
  }
  v31 = 0.0;
  __y = 0.0;
  v10 = modf(a6, &__y);
  v11 = v10;
  v12 = __y;
  if (__y == 0.0)
  {
    if (v10 > 0.0)
    {
      v13 = 1;
      do
      {
        v21 = v11;
        v11 = v11 * 10.0;
        --v13;
      }
      while (v11 < 1.0);
      v19 = 0;
      v31 = v11;
      v11 = v21;
      goto LABEL_20;
    }
    v13 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 80;
    v15 = 1;
    do
    {
      v16 = v14;
      v17 = v15;
      v18 = modf(v12 / 10.0, &__y);
      ++v13;
      v14 = v16 - 1;
      a5[v16 - 1] = (int)((v18 + 0.03) * 10.0) + 48;
      if (v16 == 1)
        break;
      v12 = __y;
      v15 = v17 + 1;
    }
    while (__y != 0.0);
    v31 = v18;
    if (v16 <= 80)
    {
      v19 = 81 - v16;
      v20 = a5;
      do
      {
        *v20 = v20[v14];
        ++v20;
        --v17;
      }
      while (v17);
      goto LABEL_20;
    }
  }
  v19 = 0;
LABEL_20:
  if (a4)
    v22 = 0;
  else
    v22 = v13;
  v23 = v22 + (uint64_t)v9;
  if (v23 < 0)
  {
    *a2 = -v9;
    v27 = a5;
  }
  else
  {
    *a2 = v13;
    if ((uint64_t)v19 <= v23 && v19 <= 0x4F)
    {
      do
      {
        v11 = modf(v11 * 10.0, &v31);
        a5[v19] = (int)v31 + 48;
        if ((uint64_t)v19 >= v23)
          break;
      }
      while (v19++ < 0x4F);
    }
    if (v23 >= 80)
    {
      v27 = a5 + 79;
    }
    else
    {
      v25 = &a5[v23];
      v26 = (char)(a5[v23] + 5);
      a5[v23] += 5;
      if (v26 < 58)
      {
        v27 = &a5[v23];
      }
      else
      {
        v27 = &a5[v23];
        do
        {
          *v25 = 48;
          if (v25 <= a5)
          {
            *v25 = 49;
            ++*a2;
            if (!a4)
            {
              if (v27 > a5)
                *v27 = 48;
              ++v27;
            }
            v29 = *v25;
          }
          else
          {
            v28 = *--v25;
            v29 = v28 + 1;
            *v25 = v28 + 1;
          }
        }
        while (v29 > 57);
      }
    }
  }
  *v27 = 0;
  return a5;
}

int apr_snprintf(char *buf, apr_size_t len, const char *format, ...)
{
  int result;
  apr_vformatter_buff_t c;
  va_list v5;
  va_list va;

  va_start(va, format);
  c.curpos = buf;
  c.endpos = buf + 4;
  va_copy(v5, va);
  result = apr_vformatter((int (__cdecl *)(apr_vformatter_buff_t *))snprintf_flush, &c, format, va);
  *c.curpos = 0;
  if (result == -1)
    return 4;
  return result;
}

uint64_t snprintf_flush()
{
  return 0xFFFFFFFFLL;
}

char *__cdecl apr_pstrdup(apr_pool_t *p, const char *s)
{
  apr_size_t v4;
  void *v5;

  if (!s)
    return 0;
  v4 = strlen(s) + 1;
  v5 = apr_palloc(p, v4);
  memcpy(v5, s, v4);
  return (char *)v5;
}

apr_status_t apr_proc_kill(apr_proc_t *proc, int sig)
{
  if (kill((pid_t)proc, sig) == -1)
    return *__error();
  else
    return 0;
}

apr_array_header_t *__cdecl apr_array_make(apr_pool_t *p, int nelts, int elt_size)
{
  apr_array_header_t *v6;
  int v7;
  char *v8;
  char *v9;

  v6 = (apr_array_header_t *)apr_palloc(p, 0x20uLL);
  if (nelts <= 1)
    v7 = 1;
  else
    v7 = nelts;
  v8 = (char *)apr_palloc(p, v7 * elt_size);
  v9 = v8;
  if (v8)
    bzero(v8, v7 * elt_size);
  v6->elts = v9;
  v6->pool = p;
  v6->elt_size = elt_size;
  v6->nelts = 0;
  v6->nalloc = v7;
  return v6;
}

void *__cdecl apr_array_push(apr_array_header_t *arr)
{
  int nelts;
  int v3;
  char *elts;

  nelts = arr->nelts;
  if (nelts == arr->nalloc)
  {
    if (nelts < 1)
      v3 = 1;
    else
      v3 = 2 * nelts;
    elts = (char *)apr_palloc(arr->pool, arr->elt_size * (uint64_t)v3);
    memcpy(elts, arr->elts, arr->elt_size * (uint64_t)arr->nalloc);
    bzero(&elts[arr->elt_size * arr->nalloc], arr->elt_size * (v3 - arr->nalloc));
    arr->elts = elts;
    arr->nalloc = v3;
    nelts = arr->nelts;
  }
  else
  {
    elts = arr->elts;
  }
  arr->nelts = nelts + 1;
  return &elts[arr->elt_size * (uint64_t)nelts];
}

apr_array_header_t *__cdecl apr_array_copy(apr_pool_t *p, const apr_array_header_t *arr)
{
  apr_array_header_t *v4;
  int elt_size;
  int nalloc;
  char *v7;
  int nelts;

  v4 = (apr_array_header_t *)apr_palloc(p, 0x20uLL);
  elt_size = arr->elt_size;
  if (arr->nalloc <= 1)
    nalloc = 1;
  else
    nalloc = arr->nalloc;
  v7 = (char *)apr_palloc(p, nalloc * elt_size);
  v4->elts = v7;
  v4->pool = p;
  v4->elt_size = elt_size;
  v4->nelts = 0;
  v4->nalloc = nalloc;
  memcpy(v7, arr->elts, arr->nelts * (uint64_t)arr->elt_size);
  nelts = arr->nelts;
  v4->nelts = nelts;
  bzero(&v4->elts[v4->elt_size * nelts], (v4->nalloc - nelts) * v4->elt_size);
  return v4;
}

char *__cdecl apr_array_pstrcat(apr_pool_t *p, const apr_array_header_t *arr, const char sep)
{
  int nelts;
  int v5;
  char *elts;
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  char *v12;
  int v13;
  size_t v14;

  nelts = arr->nelts;
  v5 = nelts - 1;
  if (nelts >= 1)
  {
    elts = arr->elts;
    if (elts)
    {
      v8 = 0;
      while (1)
      {
        if (*(_QWORD *)elts)
          v8 += strlen(*(const char **)elts);
        if (!v5)
          break;
        elts += 8;
        --v5;
      }
      v10 = (char *)apr_palloc(p, v8 + 1);
      v12 = arr->elts;
      v13 = 1;
      v9 = v10;
      if (v12)
      {
LABEL_12:
        if (*(_QWORD *)v12)
        {
          v14 = strlen(*(const char **)v12);
          memcpy(v9, *(const void **)v12, v14);
          v9 += v14;
        }
      }
      while (v13 < arr->nelts)
      {
        v12 += 8;
        ++v13;
        if (v12)
          goto LABEL_12;
      }
      goto LABEL_9;
    }
  }
  v9 = apr_palloc(p, 1uLL);
  v10 = v9;
  if (v9)
LABEL_9:
    *v9 = 0;
  return v10;
}

apr_status_t apr_thread_mutex_create(apr_thread_mutex_t **mutex, unsigned int flags, apr_pool_t *pool)
{
  uint64_t v3;
  char *v5;
  apr_pool_t **v6;
  apr_status_t result;
  apr_status_t (__cdecl *v8)(void *);

  v3 = *(_QWORD *)&flags;
  v5 = (char *)apr_palloc(*(apr_pool_t **)&flags, 0x48uLL);
  v6 = (apr_pool_t **)v5;
  if (v5)
  {
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 8) = 0u;
  }
  *(_QWORD *)v5 = v3;
  result = pthread_mutex_init((pthread_mutex_t *)(v5 + 8), 0);
  if (!result)
  {
    apr_pool_cleanup_register(*v6, v6, (apr_status_t (__cdecl *)(void *))thread_mutex_cleanup, v8);
    result = 0;
    *mutex = (apr_thread_mutex_t *)v6;
  }
  return result;
}

uint64_t thread_mutex_cleanup(uint64_t a1)
{
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
}

char *gt_filepath_merge(const char *a1, const char *a2, apr_pool_t *a3)
{
  size_t v6;
  size_t v7;
  size_t v8;
  char *v9;

  v6 = strlen(a1);
  v7 = strlen(a2);
  v8 = v7;
  if (v6 && a1[v6 - 1] == 47)
    --v6;
  v9 = (char *)apr_palloc(a3, v7 + v6 + 2);
  memcpy(v9, a1, v6);
  v9[v6] = 47;
  memcpy(&v9[v6 + 1], a2, v8);
  v9[v8 + 1 + v6] = 0;
  return v9;
}

unint64_t MinBytesPerRow(int a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (a1 > 1885745711)
        {
          if (a1 <= 2016686639)
          {
            if (a1 != 1885745712)
            {
              if (a1 == 1999843442)
                goto LABEL_67;
              v4 = 1999908961;
              goto LABEL_56;
            }
          }
          else if (a1 <= 2019963439)
          {
            if (a1 != 2016686640)
              return 0;
          }
          else if (a1 != 2019963440)
          {
            if (a1 != 2037741171)
            {
              v3 = 2037741158;
              goto LABEL_62;
            }
LABEL_63:
            a2 *= 2;
            return a2;
          }
        }
        if (a1 <= 1815162993)
          break;
        if (a1 != 1882468912)
        {
          if (a1 == 1815162994)
            goto LABEL_67;
          v4 = 1815491698;
LABEL_56:
          if (a1 != v4)
            return 0;
LABEL_68:
          a2 *= 8;
          return a2;
        }
      }
      if (a1 <= 1380411456)
        break;
      if (a1 != 1751527984)
      {
        if (a1 == 1380411457)
          goto LABEL_68;
        v6 = 1667838256;
LABEL_66:
        if (a1 == v6)
          goto LABEL_67;
        return 0;
      }
    }
    if (a1 <= 846624101)
    {
      if (a1 > 828584239)
      {
        if (a1 > 843264103)
        {
          if (a1 == 843264104 || a1 == 843264310)
            goto LABEL_67;
          if (a1 != 845361456)
            return 0;
          v5 = 2 * a2 + 2;
        }
        else
        {
          if (a1 != 828584240)
          {
            if (a1 == 843264056)
              goto LABEL_63;
            v4 = 843264102;
            goto LABEL_56;
          }
          v5 = a2 + 2;
        }
        return (2 * ((2863311531u * (unint64_t)v5) >> 32)) & 0xFFFFFFFC;
      }
      if (a1 > 826486885)
      {
        if (a1 == 826486886)
          goto LABEL_67;
        if (a1 == 826486888)
          goto LABEL_63;
        v3 = 826487094;
LABEL_62:
        if (a1 == v3)
          goto LABEL_63;
        return 0;
      }
      if (a1 == 24)
      {
        a2 *= 3;
        return a2;
      }
      if (a1 == 32)
        goto LABEL_67;
      v2 = 826486840;
LABEL_46:
      if (a1 == v2)
        return a2;
      return 0;
    }
    if (a1 > 1094862673)
      break;
    if (a1 > 875704437)
    {
      if (a1 != 875704438 && a1 != 875836518 && a1 != 875836534)
        return 0;
    }
    else
    {
      if (a1 == 846624102 || a1 == 846624121)
        goto LABEL_63;
      if (a1 != 875704422)
        return 0;
    }
    a1 = 826486840;
  }
  if (a1 <= 1278226533)
  {
    if (a1 == 1094862674 || a1 == 1111970369)
      goto LABEL_67;
    v2 = 1278226488;
    goto LABEL_46;
  }
  if (a1 > 1278226741)
  {
    if (a1 == 1278226742)
      goto LABEL_63;
    v6 = 1380401729;
    goto LABEL_66;
  }
  if (a1 != 1278226534)
  {
    v3 = 1278226536;
    goto LABEL_62;
  }
LABEL_67:
  a2 *= 4;
  return a2;
}

uint64_t IsBiplanar(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= 875836517)
  {
    if (a1 > 645428783)
    {
      if (a1 != 645428784 && a1 != 875704422)
      {
        v3 = 875704438;
LABEL_18:
        if (a1 != v3)
          return 0;
      }
    }
    else if (a1 != 641230384 && a1 != 641234480)
    {
      v3 = 645424688;
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 > 1882468911)
    {
      if (a1 > 2016686639)
      {
        if (a1 == 2016686640)
          return result;
        v3 = 2019963440;
      }
      else
      {
        if (a1 == 1882468912)
          return result;
        v3 = 1885745712;
      }
      goto LABEL_18;
    }
    if (a1 != 875836518 && a1 != 875836534)
    {
      v3 = 1751527984;
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t BytesPerElement(int a1)
{
  uint64_t v1;
  int v2;
  int v3;

  v1 = 1;
  if (a1 <= 875836533)
  {
    if (a1 <= 828584239)
    {
      if (a1 <= 645428783)
      {
        if (a1 <= 641230383)
        {
          if (a1 == 24)
            return 3;
          if (a1 == 32)
            return 4;
        }
        return 0;
      }
      if (a1 <= 826486885)
      {
        if (a1 == 826486840)
          return v1;
        return 0;
      }
      if (a1 == 826486886)
        return 4;
      if (a1 == 826486888)
        return 2;
      v3 = 826487094;
    }
    else
    {
      if (a1 > 845361455)
      {
        if (a1 <= 875704421)
        {
          if (a1 != 845361456)
          {
            if (a1 != 846624102)
            {
              v2 = 846624121;
              goto LABEL_51;
            }
            return 4;
          }
          return 8;
        }
        return 0;
      }
      if (a1 > 843264101)
      {
        if (a1 != 843264102)
        {
          if (a1 == 843264104)
            return 4;
          v2 = 843264310;
          goto LABEL_51;
        }
        return 8;
      }
      if (a1 == 828584240)
        return 4;
      v3 = 843264056;
    }
    goto LABEL_57;
  }
  if (a1 > 1751527983)
  {
    if (a1 <= 1999843441)
    {
      if (a1 > 1815491697)
      {
        if (a1 != 1815491698)
          return 0;
        return 8;
      }
      if (a1 == 1751527984)
        return 0;
      v2 = 1815162994;
    }
    else
    {
      if (a1 <= 2019963439)
      {
        if (a1 == 1999843442)
          return 4;
        if (a1 == 1999908961)
          return 8;
        return 0;
      }
      if (a1 == 2019963440)
        return 0;
      if (a1 == 2037741158)
        return 4;
      v2 = 2037741171;
    }
LABEL_51:
    if (a1 == v2)
      return 4;
    return 0;
  }
  if (a1 > 1278226535)
  {
    if (a1 > 1380401728)
    {
      if (a1 == 1380401729)
        return 4;
      if (a1 != 1380411457)
      {
        v2 = 1667838256;
        goto LABEL_51;
      }
      return 8;
    }
    if (a1 == 1278226536)
      return 2;
    v3 = 1278226742;
LABEL_57:
    if (a1 != v3)
      return 0;
    return 2;
  }
  if (a1 <= 1111970368)
  {
    if (a1 == 875836534)
      return 0;
    v2 = 1094862674;
    goto LABEL_51;
  }
  if (a1 == 1111970369)
    return 4;
  if (a1 != 1278226488)
  {
    v2 = 1278226534;
    goto LABEL_51;
  }
  return v1;
}

uint64_t ElementWidth(int a1)
{
  uint64_t v1;
  int v2;

  v1 = 2;
  if (a1 <= 875704437)
  {
    if (a1 <= 828584239)
    {
      if (a1 > 645424687)
      {
        if (a1 != 645424688)
        {
          v2 = 645428784;
          return a1 != v2;
        }
      }
      else if (a1 != 641230384)
      {
        v2 = 641234480;
        return a1 != v2;
      }
      return 0;
    }
    if (a1 <= 846624101)
    {
      if (a1 != 828584240 && a1 != 845361456)
        return 1;
      return 3;
    }
    else if (a1 != 846624102 && a1 != 846624121)
    {
      v2 = 875704422;
      return a1 != v2;
    }
  }
  else
  {
    if (a1 <= 1885745711)
    {
      if (a1 > 875836533)
      {
        if (a1 == 875836534 || a1 == 1751527984)
          return 0;
        v2 = 1882468912;
        return a1 != v2;
      }
      if (a1 != 875704438)
      {
        v2 = 875836518;
        return a1 != v2;
      }
      return 0;
    }
    if (a1 <= 2019963439)
    {
      if (a1 != 1885745712)
      {
        v2 = 2016686640;
        return a1 != v2;
      }
      return 0;
    }
    if (a1 == 2019963440)
      return 0;
    if (a1 != 2037741158 && a1 != 2037741171)
      return 1;
  }
  return v1;
}

id gt_default_log()
{
  void *v0;

  v0 = s_defaultLog;
  if (s_defaultLog == &_os_log_default)
  {
    if (gt_default_log_onceToken != -1)
      dispatch_once(&gt_default_log_onceToken, &__block_literal_global_9764);
    v0 = s_defaultLog;
  }
  return v0;
}

void __gt_default_log_block_invoke(id a1)
{
  uint8_t v1[16];

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_0, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "GPUTOOLS(warning): Log uninitialized, please call GTCoreLogInit(), logging to OS_LOG_DEFAULT instead", v1, 2u);
  }
}

id gt_tagged_log(unint64_t a1)
{
  id v3;
  NSObject *v4;
  id *v5;
  id v6;
  int v7;
  void *v8;
  id v9;
  FILE *v11;
  id v12;
  id v13;
  __int128 buf;
  id v15;
  id v16;

  if (s_logCount != 1 || a1 >= 3)
  {
    if (s_logUsingOsLog)
    {
      v3 = gt_default_log();
      v4 = objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 134217984;
        *(_QWORD *)((char *)&buf + 4) = a1;
        _os_log_fault_impl(&dword_0, v4, OS_LOG_TYPE_FAULT, "fail: Invalid log tag: %llu", (uint8_t *)&buf, 0xCu);
      }

    }
    else
    {
      v11 = __stderrp;
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("fail: Invalid log tag: %llu"), a1)));
      fprintf(v11, "%s\n", (const char *)objc_msgSend(v12, "UTF8String"));

    }
    v13 = &_os_log_default;
    return &_os_log_default;
  }
  else
  {
    v5 = (id *)(s_logs + 32 * a1);
    *(_QWORD *)&buf = *v5;
    *((_QWORD *)&buf + 1) = v5[1];
    v15 = v5[2];
    v6 = v5[3];
    v16 = v6;
    v7 = GTCoreLog_enabled((uint64_t)&buf);
    v8 = &_os_log_disabled;
    if (v7)
      v8 = v6;
    v9 = v8;
    __destructor_8_s0_s8_s16_s24((id *)&buf);
    return v9;
  }
}

uint64_t GTCoreLog_enabled(uint64_t a1)
{
  void *v2;
  id v3;

  if (!*(_QWORD *)(a1 + 16))
    return 1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = objc_msgSend(v2, "BOOLForKey:", *(_QWORD *)(a1 + 16));

  return (uint64_t)v3;
}

id PrettifyFenumString(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (objc_msgSend(v1, "hasPrefix:", CFSTR("kDYFE")))
    {
      v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "substringFromIndex:", 5));

      v2 = (void *)v3;
    }
    v4 = objc_msgSend(v2, "rangeOfString:", CFSTR("_"));
    if (v4 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringByReplacingOccurrencesOfString:withString:options:range:", CFSTR("_"), CFSTR(" "), 0, v4, v5));

      v2 = (void *)v6;
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringByReplacingOccurrencesOfString:withString:", CFSTR("_"), CFSTR(":")));

    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@[%@%@]"), CFSTR("-"), v7, CFSTR(":")));
  }
  return v2;
}

void GTError_addError(int *a1, uint64_t a2)
{
  int v4;
  int v5;
  __int128 v6;
  __int128 v7;

  if (a1 && *(_DWORD *)(a2 + 4))
  {
    if (GTError_initialize_onceToken != -1)
      dispatch_once(&GTError_initialize_onceToken, &__block_literal_global_9903);
    if (a1[1])
    {
      v4 = *(_DWORD *)a2 | *a1 | 2;
    }
    else
    {
      v5 = *a1;
      v7 = *(_OWORD *)(a2 + 16);
      v6 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
      *((_OWORD *)a1 + 2) = v6;
      v4 = *a1 | v5;
    }
    *a1 = v4;
  }
}

uint64_t CalculateBindingsAccess(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;

  if (a2 >= 1)
  {
    v4 = result;
    v5 = a3 + 16;
    for (i = a2; i; --i)
    {
      if ((*(_BYTE *)(v4 + 19) & 1) == 0)
        goto LABEL_9;
      v7 = *(unsigned __int8 *)(v4 + 16);
      if ((v7 - 24) >= 4)
      {
        if (v7 == 2)
        {
          v8 = (_BYTE *)v4;
          v9 = v5;
          goto LABEL_8;
        }
        if (*(_BYTE *)(v4 + 16))
          goto LABEL_9;
      }
      v8 = (_BYTE *)v4;
      v9 = a3;
LABEL_8:
      result = (uint64_t)UpdateAccess(v8, v9);
LABEL_9:
      if (*(unsigned __int8 *)(v4 + 16) <= 1u)
      {
        result = *(_QWORD *)(v4 + 8);
        if (result)
        {
          v10 = *(unsigned __int8 *)result;
          if (v10 == 1 || v10 == 60 && *(_BYTE *)(result + 22) == 1 && (result = *(_QWORD *)(result + 8)) != 0)
          {
            result = GTMTLStructType_isArgumentBuffer(result);
            if ((_DWORD)result)
              *(_QWORD *)(a3 + (((unint64_t)*(unsigned __int8 *)(v4 + 18) >> 3) & 0x18) + 48) |= 1 << *(_BYTE *)(v4 + 18);
          }
        }
      }
      v4 += 56;
    }
  }
  return result;
}

_BYTE *UpdateAccess(_BYTE *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = result[18];
  if (result[16] != 2)
  {
    v3 = v2 + 1;
    goto LABEL_5;
  }
  if (result[26])
  {
    v3 = result[26] + v2;
LABEL_5:
    v4 = result[17];
    while (1)
    {
      v5 = v2 >> 6;
      if (v4 == 2)
        break;
      if (v4 == 1)
      {
        v6 = 1 << v2;
        v8 = (_QWORD *)(a2 + 16 * v5);
        *v8 |= 1 << v2;
        v7 = v8 + 1;
        goto LABEL_12;
      }
      if (!v4)
      {
        v6 = 1 << v2;
        v7 = (_QWORD *)(a2 + 16 * v5);
LABEL_12:
        *v7 |= v6;
      }
      if (v3 == ++v2)
        return result;
    }
    v6 = 1 << v2;
    v7 = (_QWORD *)(a2 + 16 * v5 + 8);
    goto LABEL_12;
  }
  return result;
}

BOOL GTMTLStructType_isArgumentBuffer(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  BOOL v9;

  if (a1)
  {
    v1 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v1)
    {
      v2 = 0;
      v3 = *(_QWORD *)(a1 + 8);
      v4 = 1;
      while (1)
      {
        v5 = *(unsigned __int8 *)(v3 + 32 * v2 + 24);
        if (v5 <= 1)
        {
          if (v5 == 1)
          {
            v6 = v3 + 32 * v2;
LABEL_17:
            if ((GTMTLStructType_isArgumentBuffer(*(_QWORD *)(v6 + 8)) & 1) != 0)
              return v4;
          }
        }
        else if (v5 == 2)
        {
          v6 = v3 + 32 * v2;
          do
          {
            v6 = *(_QWORD *)(v6 + 8);
            v7 = *(unsigned __int8 *)(v6 + 24);
          }
          while (v7 == 2);
          if ((v7 - 58) <= 0x3C && ((1 << (v7 - 58)) & 0x1E00000000700007) != 0)
            return v4;
          if (v7 == 1)
            goto LABEL_17;
        }
        else
        {
          v9 = v5 - 78 > 0x28 || ((1 << (v5 - 78)) & 0x1E000000007) == 0;
          if (!v9 || v5 - 58 < 3)
            return v4;
        }
        v4 = ++v2 < v1;
        if (v2 == v1)
          return v4;
      }
    }
  }
  return 0;
}

uint64_t GetFuncEnumConstructorType(int a1)
{
  uint64_t result;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  if (a1 <= -15716)
  {
    if (a1 > -16121)
    {
      if (a1 > -16015)
      {
        if (a1 <= -15892)
        {
          if (a1 > -15970)
          {
            switch(a1)
            {
              case -15922:
                return 59;
              case -15921:
                return 58;
              case -15920:
              case -15919:
              case -15918:
              case -15917:
              case -15916:
              case -15915:
              case -15911:
              case -15910:
                return 0;
              case -15914:
                return 22;
              case -15913:
                return 80;
              case -15912:
              case -15909:
                return 76;
              default:
                if (a1 == -15969)
                {
                  result = 57;
                }
                else
                {
                  if (a1 != -15900)
                    return 0;
                  result = 73;
                }
                break;
            }
            return result;
          }
          if (a1 <= -15997)
          {
            switch(a1)
            {
              case -16014:
                return 28;
              case -16013:
                return 82;
              case -15997:
                return 38;
            }
            return 0;
          }
          if ((a1 + 15980) >= 2)
          {
            if (a1 == -15996)
              return 76;
            v6 = -15972;
            goto LABEL_119;
          }
          return 80;
        }
        if (a1 <= -15778)
        {
          if (a1 <= -15848)
          {
            switch(a1)
            {
              case -15891:
                return 64;
              case -15870:
                return 74;
              case -15848:
                return 31;
            }
            return 0;
          }
          if (a1 > -15794)
          {
            if (a1 == -15793)
              return 68;
            v6 = -15778;
LABEL_119:
            if (a1 != v6)
              return 0;
            return 22;
          }
          if (a1 == -15847)
            return 62;
          if (a1 != -15830)
            return 0;
          return 43;
        }
        if (a1 > -15739)
        {
          if ((a1 + 15731) >= 2)
          {
            if (a1 == -15738)
              return 71;
            if (a1 == -15717)
              return 19;
            return 0;
          }
          return 43;
        }
        if (a1 == -15777 || a1 == -15775)
          return 80;
        v5 = -15740;
LABEL_67:
        if (a1 == v5)
          return 29;
        return 0;
      }
      if (a1 > -16054)
      {
        switch(a1)
        {
          case -16039:
          case -16029:
            return 62;
          case -16038:
            return 43;
          case -16037:
            return 18;
          case -16036:
          case -16035:
          case -16034:
          case -16033:
          case -16032:
            return 0;
          case -16031:
          case -16030:
            return 80;
          default:
            if ((a1 + 16053) < 3)
              return 18;
            if (a1 == -16018)
              return 62;
            return 0;
        }
      }
      switch(a1)
      {
        case -16120:
          result = 50;
          break;
        case -16119:
        case -16118:
        case -16115:
        case -16114:
        case -16113:
        case -16112:
        case -16111:
        case -16110:
        case -16109:
        case -16108:
        case -16105:
        case -16103:
        case -16102:
        case -16100:
        case -16097:
        case -16094:
        case -16093:
        case -16092:
        case -16087:
        case -16086:
        case -16085:
        case -16084:
        case -16083:
          return 0;
        case -16117:
          return 22;
        case -16116:
        case -16104:
        case -16098:
        case -16096:
          return 80;
        case -16107:
        case -16106:
        case -16082:
        case -16081:
          return 43;
        case -16101:
          return 29;
        case -16099:
          result = 81;
          break;
        case -16095:
          return 62;
        case -16091:
        case -16090:
        case -16089:
        case -16088:
          return 71;
        default:
          if (a1 != -16075)
            return 0;
          result = 67;
          break;
      }
      return result;
    }
    if (a1 > -16234)
    {
      if (a1 > -16197)
      {
        if (a1 > -16164)
        {
          if (a1 != -16163)
          {
            if (a1 == -16128)
              return 41;
            return 0;
          }
          return 22;
        }
        if (a1 != -16196)
        {
          if (a1 == -16165)
            return 27;
          return 0;
        }
        return 80;
      }
      if ((a1 + 16200) < 4)
        return 29;
      v3 = -16233;
    }
    else
    {
      if (a1 > -16355)
      {
        switch(a1)
        {
          case -16354:
            goto LABEL_39;
          case -16353:
          case -16286:
            result = 70;
            break;
          case -16352:
            return 28;
          case -16351:
            result = 65;
            break;
          case -16343:
          case -16342:
            return 25;
          case -16316:
          case -16315:
            return 27;
          case -16314:
          case -16313:
          case -16312:
            return 22;
          case -16311:
            result = 34;
            break;
          case -16310:
          case -16294:
            return 80;
          case -16309:
            result = 75;
            break;
          case -16308:
          case -16307:
          case -16306:
          case -16305:
          case -16304:
            return 62;
          case -16303:
          case -16302:
          case -16301:
          case -16300:
            return 71;
          case -16299:
          case -16298:
          case -16297:
          case -16296:
            return 29;
          case -16290:
            return 43;
          default:
            return 0;
        }
        return result;
      }
      if (a1 == -18432)
        return 39;
      if (a1 == -18431)
        return 40;
      v3 = -16368;
    }
LABEL_88:
    if (a1 == v3)
      return 80;
    return 0;
  }
  if (a1 > -15365)
  {
    if (a1 <= -12545)
    {
      if (a1 <= -15318)
      {
        switch(a1)
        {
          case -15359:
          case -15358:
          case -15356:
          case -15355:
          case -15354:
          case -15353:
          case -15352:
          case -15351:
LABEL_19:
            result = 16;
            break;
          case -15357:
          case -15349:
          case -15347:
          case -15346:
          case -15345:
          case -15344:
          case -15343:
          case -15342:
          case -15341:
          case -15340:
          case -15339:
          case -15338:
          case -15337:
          case -15336:
          case -15335:
          case -15334:
            return 0;
          case -15350:
            result = 52;
            break;
          case -15348:
            return 53;
          case -15333:
            return 51;
          default:
            v7 = -15364;
LABEL_148:
            if (a1 != v7)
              return 0;
            result = 17;
            break;
        }
        return result;
      }
      if (a1 > -15262)
      {
        if ((a1 + 15260) >= 2)
        {
          if (a1 == -15261)
            return 18;
          if (a1 == -15245)
            return 72;
          return 0;
        }
      }
      else
      {
        if (a1 <= -15300)
        {
          if (a1 == -15317)
            return 33;
          v2 = -15306;
          goto LABEL_48;
        }
        if (a1 == -15299)
          return 55;
        if (a1 != -15296)
          return 0;
      }
      return 53;
    }
    if (a1 > -6123)
    {
      v4 = a1 + 6122;
      result = 6;
      switch(v4)
      {
        case 0:
          result = 10;
          break;
        case 3:
        case 6:
LABEL_63:
          result = 8;
          break;
        case 11:
          return result;
        case 12:
          result = 9;
          break;
        case 13:
          result = 7;
          break;
        default:
          return 0;
      }
      return result;
    }
    if (a1 > -7167)
    {
      switch(a1)
      {
        case -6143:
        case -6131:
          result = 5;
          break;
        case -6142:
        case -6140:
        case -6139:
        case -6138:
        case -6137:
        case -6136:
        case -6135:
        case -6132:
        case -6130:
          return 0;
        case -6141:
        case -6133:
        case -6129:
          goto LABEL_63;
        case -6134:
          result = 11;
          break;
        default:
          if (a1 != -7166 && a1 != -6655)
            return 0;
          result = 2;
          break;
      }
      return result;
    }
    if (a1 > -10238)
    {
      if (a1 == -10237)
        return 22;
      v3 = -7167;
      goto LABEL_88;
    }
    if (a1 == -12544)
      return 25;
    v2 = -12543;
LABEL_48:
    if (a1 == v2)
      return 51;
    return 0;
  }
  if (a1 <= -15507)
  {
    if (a1 > -15588)
    {
      if (a1 > -15552)
      {
        if (a1 > -15541)
        {
          if (a1 == -15540)
            return 60;
          if (a1 == -15531)
            return 37;
          v6 = -15509;
          goto LABEL_119;
        }
        if ((a1 + 15551) < 2)
          return 43;
        v5 = -15541;
        goto LABEL_67;
      }
      switch(a1)
      {
        case -15587:
LABEL_39:
          result = 21;
          break;
        case -15586:
        case -15584:
          return 28;
        case -15585:
          return 74;
        case -15578:
LABEL_69:
          result = 83;
          break;
        case -15577:
          return 60;
        default:
          return 0;
      }
    }
    else
    {
      if (a1 <= -15674)
      {
        switch(a1)
        {
          case -15707:
          case -15705:
            return 22;
          case -15706:
          case -15704:
          case -15703:
          case -15702:
          case -15700:
          case -15699:
          case -15698:
          case -15697:
          case -15696:
          case -15694:
          case -15692:
          case -15691:
            return 0;
          case -15701:
            return 25;
          case -15695:
            return 37;
          case -15693:
            return 62;
          case -15690:
          case -15689:
          case -15688:
            return 80;
          default:
            if ((a1 + 15715) < 2)
              return 18;
            return 0;
        }
      }
      switch(a1)
      {
        case -15620:
LABEL_11:
          result = 44;
          break;
        case -15619:
        case -15618:
        case -15617:
        case -15616:
        case -15612:
        case -15611:
        case -15610:
          return 0;
        case -15615:
        case -15614:
          goto LABEL_19;
        case -15613:
          return 37;
        case -15609:
        case -15608:
          return 43;
        default:
          v7 = -15673;
          goto LABEL_148;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case -15464:
        goto LABEL_19;
      case -15463:
      case -15444:
      case -15437:
      case -15436:
        goto LABEL_11;
      case -15462:
      case -15443:
      case -15442:
      case -15441:
        return 60;
      case -15461:
      case -15406:
      case -15405:
      case -15404:
      case -15403:
        return 71;
      case -15460:
      case -15440:
      case -15439:
      case -15438:
        goto LABEL_69;
      case -15459:
      case -15458:
      case -15457:
      case -15456:
      case -15455:
      case -15454:
      case -15453:
      case -15452:
      case -15451:
      case -15450:
      case -15449:
      case -15448:
      case -15447:
      case -15446:
      case -15445:
      case -15433:
      case -15432:
      case -15431:
      case -15426:
      case -15424:
      case -15423:
      case -15422:
      case -15418:
      case -15417:
      case -15416:
      case -15415:
      case -15414:
      case -15413:
      case -15412:
      case -15411:
      case -15410:
      case -15409:
      case -15408:
      case -15407:
        return 0;
      case -15435:
      case -15434:
      case -15425:
      case -15421:
      case -15420:
      case -15419:
        return 62;
      case -15430:
      case -15429:
      case -15428:
      case -15427:
        return 43;
      default:
        if (a1 == -15506)
          goto LABEL_19;
        if (a1 != -15496)
          return 0;
        result = 61;
        break;
    }
  }
  return result;
}

uint64_t IsFuncEnumDestructor(int a1)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  result = 1;
  if (a1 <= -15894)
  {
    if (a1 <= -16294)
    {
      if (a1 > -16371)
      {
        v7 = a1 + 16370;
        if (v7 > 0x35)
          return 0;
        v4 = 1 << v7;
        v5 = 0x26000104000081;
        goto LABEL_29;
      }
      if (a1 == -20475 || a1 == -20458)
        return result;
      v10 = -16383;
    }
    else
    {
      if (a1 > -16119)
      {
        if ((a1 + 15973) <= 0x32 && ((1 << (a1 + 101)) & 0x4004000010001) != 0)
          return result;
        v9 = a1 + 16118;
        if (v9 > 0x38)
          return 0;
        v4 = 1 << v9;
        v5 = 0x100000000200001;
        goto LABEL_29;
      }
      if ((a1 + 16293) <= 0x37 && ((1 << (a1 - 91)) & 0x98000000002045) != 0)
        return result;
      v10 = -16127;
    }
LABEL_43:
    if (a1 == v10)
      return result;
    return 0;
  }
  if (a1 > -15496)
  {
    if (a1 <= -15232)
    {
      if ((a1 + 15341) > 0x34 || ((1 << (a1 - 19)) & 0x10000000201601) == 0)
      {
        v6 = a1 + 15495;
        if (v6 > 6 || ((1 << v6) & 0x43) == 0)
          return 0;
      }
      return result;
    }
    if (a1 <= -7162)
    {
      if (a1 == -15231)
        return result;
      v10 = -10206;
    }
    else
    {
      if (a1 == -7161 || a1 == -6652)
        return result;
      v10 = -6139;
    }
    goto LABEL_43;
  }
  if (a1 <= -15686)
  {
    if ((a1 + 15893) <= 0x1A && ((1 << (a1 + 21)) & 0x4004011) != 0)
      return result;
    v3 = a1 + 15801;
    if (v3 <= 0x3B)
    {
      v4 = 1 << v3;
      v5 = 0x800000100000801;
      goto LABEL_29;
    }
    return 0;
  }
  if ((a1 + 15685) <= 0x29 && ((1 << (a1 + 69)) & 0x20004000401) != 0)
    return result;
  v8 = a1 + 15610;
  if (v8 > 0x2A)
    return 0;
  v4 = 1 << v8;
  v5 = 0x40000000021;
LABEL_29:
  if ((v4 & v5) == 0)
    return 0;
  return result;
}

uint64_t IsFuncEnumDrawCall(int a1)
{
  uint64_t result;
  unsigned int v3;
  _BOOL4 v4;

  result = 1;
  if ((a1 + 16251) > 0x24 || ((1 << (a1 + 123)) & 0x1E0000000FLL) == 0)
  {
    v3 = a1 + 16147;
    v4 = (a1 + 15416) < 3;
    return v3 < 4 || v4;
  }
  return result;
}

BOOL IsFuncEnumSampledBlitCall(int a1)
{
  return (a1 + 16382) < 6 || (a1 + 16210) < 2 || (a1 + 15878) < 2;
}

BOOL IsFuncEnumSampledBlitCallAGX(int a1)
{
  _BOOL8 result;

  result = 1;
  if (((a1 + 15995) > 0x25 || ((1 << (a1 + 123)) & 0x38000C000FLL) == 0)
    && ((a1 + 15802) > 4 || ((1 << (a1 - 70)) & 0x15) == 0))
  {
    return (a1 + 15470) < 2;
  }
  return result;
}

BOOL IsFuncEnumGPUCommandCall(int a1)
{
  _BOOL8 result;

  if ((IsFuncEnumDrawCall(a1) & 1) != 0)
    return 1;
  result = 1;
  if ((a1 + 16079) >= 2 && a1 != -16327 && a1 != -16220)
  {
    if (IsFuncEnumSampledBlitCall(a1) || IsFuncEnumSampledBlitCallAGX(a1))
      return 1;
    result = 1;
    if (a1 != -16137 && a1 != -15486 && a1 != -15297)
      return (a1 + 15416) < 3;
  }
  return result;
}

uint64_t IsFuncEnumPushDebugGroup(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= -16066)
  {
    if (a1 > -16284)
    {
      if (a1 == -16283)
        return result;
      v3 = -16244;
    }
    else
    {
      if (a1 == -16374)
        return result;
      v3 = -16323;
    }
    goto LABEL_13;
  }
  if (a1 <= -15787)
  {
    if (a1 == -16065)
      return result;
    v3 = -15882;
    goto LABEL_13;
  }
  if (a1 != -15786 && a1 != -15639)
  {
    v3 = -15292;
LABEL_13:
    if (a1 != v3)
      return 0;
  }
  return result;
}

uint64_t IsFuncEnumPopDebugGroup(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= -16065)
  {
    if (a1 > -16283)
    {
      if (a1 == -16282)
        return result;
      v3 = -16243;
    }
    else
    {
      if (a1 == -16373)
        return result;
      v3 = -16322;
    }
    goto LABEL_13;
  }
  if (a1 <= -15788)
  {
    if (a1 == -16064)
      return result;
    v3 = -15881;
    goto LABEL_13;
  }
  if (a1 != -15787 && a1 != -15640)
  {
    v3 = -15293;
LABEL_13:
    if (a1 != v3)
      return 0;
  }
  return result;
}

uint64_t IsFuncEnumEndEncoding(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 > -16247)
  {
    if (a1 > -15790)
    {
      if (a1 == -15789)
        return result;
      v3 = -15642;
    }
    else
    {
      if (a1 == -16246)
        return result;
      v3 = -15884;
    }
    goto LABEL_10;
  }
  if (a1 != -16376 && a1 != -16325)
  {
    v3 = -16285;
LABEL_10:
    if (a1 != v3)
      return 0;
  }
  return result;
}

uint64_t IsFuncEnumUseResourceCall(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 <= -15822)
  {
    if ((a1 + 16047) < 8)
      return result;
    return 0;
  }
  if (a1 <= -15635)
  {
    if ((a1 + 15821) < 4)
      return result;
    return 0;
  }
  if ((a1 + 15634) >= 4 && a1 != -15510 && a1 != -15507)
    return 0;
  return result;
}

const char *GetFuncEnumAsString(int a1)
{
  int v1;
  const char *result;

  if (a1 > -12545)
  {
    if (a1 > -7169)
    {
      switch(a1)
      {
        case -6144:
          result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resul"
                   "tColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset";
          break;
        case -6143:
          result = "kDYFEMPSPlugin_newCNNConvolutionWithDescriptor_convolutionData";
          break;
        case -6142:
          result = "kDYFEMPSExternalCNNPoolingAverage_encodeBatchToCommandBuffer_computeCommandEncoder_options_sourceText"
                   "ures_sourceInfo_destinationTextures_destinationInfo_zeroPadSizeX_zeroPadSizeY_predicationBuffer_predicationOffset";
          break;
        case -6141:
          result = "kDYFEMPSPlugin_newCNNPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY";
          break;
        case -6140:
          result = "kDYFEMPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_mat"
                   "rixStructure_vector_vectorStructure_result_resultStructure_predicationBuffer_predicationOffset";
          break;
        case -6139:
          result = "kDYFEMPSExternalPluginBase_dealloc";
          break;
        case -6138:
          result = "kDYFEMPSExternalCNNUnary_maxBatchSize";
          break;
        case -6137:
          result = "kDYFEMPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_mat"
                   "rixStructure_vector_vectorStructure_result_resultStructure";
          break;
        case -6136:
          result = "kDYFEMPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_biases_predica"
                   "tionBuffer_predicationOffset";
          break;
        case -6135:
          result = "kDYFEMPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_sourceInfo"
                   "_destinationTexture_destinationInfo";
          break;
        case -6134:
          result = "kDYFEMPSPlugin_newMatrixVectorMultiplicationWithTranspose_rows_columns_alpha_beta";
          break;
        case -6133:
          result = "kDYFEMPSPlugin_newCNNNeuronWithNeuronType_neuronParameterA_neuronParameterB_neuronParameterC";
          break;
        case -6132:
          result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resul"
                   "tColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo";
          break;
        case -6131:
          result = "kDYFEMPSPlugin_newCNNConvolutionWithDescriptor_dataSource_fullyConnected";
          break;
        case -6130:
          result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_A_aInfo_B_bInfo_C_cInfo";
          break;
        case -6129:
          result = "kDYFEMPSPlugin_newCNNNeuronWithNeuronType_neuronParameterAArray_count";
          break;
        case -6128:
          result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_options_batchSize_inputMatrix_inpu"
                   "tMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alp"
                   "ha_numberOfFeatureVectors_inputFeatureChannels_outputFeatureChannels_neuronType_neuronParameterA_neur"
                   "onParameterB_neuronParameterC";
          break;
        case -6127:
          result = "kDYFEMPSExternalCNNConvolutionGradient_reloadWeights";
          break;
        case -6126:
          result = "kDYFEMPSExternalCNNPoolingAverage_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_s"
                   "ourceInfo_destinationTexture_destinationInfo";
          break;
        case -6125:
          result = "kDYFEMPSExternalCNNBinary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTe"
                   "xture_primaryInfo_secondaryTexture_secondaryInfo_destinationTexture_destinationInfo";
          break;
        case -6124:
          result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_options_batchSize_inputMatrix_inpu"
                   "tMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alp"
                   "ha_numberOfFeatureVectors_inputFeatureChannels_outputFeatureChannels_neuronType_neuronParameterA_neur"
                   "onParameterB_neuronParameterC_predicationBuffer_predicationOffset";
          break;
        case -6123:
          result = "kDYFEMPSExternalCNNBinary_maxBatchSize";
          break;
        case -6122:
          result = "kDYFEMPSPlugin_newMatrixMultiplicationWithTransposeLeft_transposeRight_resultRows_resultColumns_inter"
                   "iorColumns_alpha_beta";
          break;
        case -6121:
          result = "kDYFEMPSExternalCNNPoolingAverage_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_s"
                   "ourceInfo_destinationTexture_destinationInfo_zeroPadSizeX_zeroPadSizeY";
          break;
        case -6120:
          result = "kDYFEMPSExternalCNNConvolution_reloadWeightsAndBiases";
          break;
        case -6119:
          result = "kDYFEMPSPlugin_newCNNSoftMax";
          break;
        case -6118:
          result = "kDYFEMPSExternalCNNBinary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_prim"
                   "aryTextures_primaryInfo_secondaryTextures_secondaryInfo_destinationTextures_destinationInfo_predicati"
                   "onBuffer_predicationOffset";
          break;
        case -6117:
          result = "kDYFEMPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourceText"
                   "ure_sourceInfo_destinationTexture_destinationInfo";
          break;
        case -6116:
          result = "kDYFEMPSPlugin_newCNNDilatedPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_di"
                   "lationRateX_dilationRateY";
          break;
        case -6115:
          result = "kDYFEMPSExternalCNNUnary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourc"
                   "eTextures_sourceInfo_destinationTextures_destinationInfo_predicationBuffer_predicationOffset";
          break;
        case -6114:
          result = "kDYFEMPSExternalCNNConvolutionGradient_encodeBatchToCommandBuffer_computeCommandEncoder_options_plugi"
                   "nOptions_primaryTextures_primaryInfo_secondaryTextures_secondaryInfo_weightsGradient_biasesGradient_a"
                   "ccumulate_predicationBuffer_predicationOffset";
          break;
        case -6113:
          result = "kDYFEMPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_predicationBuff"
                   "er_predicationOffset";
          break;
        case -6112:
          result = "kDYFEMPSExternalCNNConvolution_exportWeightsAndBiasesWithCommandBuffer_encoder_weights_biases_predica"
                   "tionBuffer_predicationOffset";
          break;
        case -6111:
          result = "kDYFEMPSPlugin_newCNNConvolutionGradientWithDescriptor_convolutionData";
          break;
        case -6110:
          result = "kDYFEMPSPlugin_newMatrixFullyConnected";
          break;
        case -6109:
          result = "kDYFEMPSPlugin_newCNNPoolingAverageWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY";
          break;
        case -6108:
          result = "kDYFEMPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_weightsDataTyp"
                   "e_biases_predicationBuffer_predicationOffset";
          break;
        case -6107:
          result = "kDYFEMPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_weightsDataType"
                   "_predicationBuffer_predicationOffset";
          break;
        case -6106:
          result = "kDYFEMPSExternalCNNConvolution_exportWeightsAndBiasesWithCommandBuffer_encoder_weights_weightsDataTyp"
                   "e_biases_predicationBuffer_predicationOffset";
          break;
        case -6105:
          result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRowsAndRes"
                   "ultColumnsAndInteriorColumns_alphaAndBeta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset";
          break;
        case -6104:
          result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_in"
                   "putMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_a"
                   "lpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannels_neuronType_neuronParameters";
          break;
        case -6103:
          result = "kDYFEMPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_in"
                   "putMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_a"
                   "lpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannelsAndNeuronTypeAndPredication"
                   "Offset_neuronParameters_predicationBuffer";
          break;
        case -6102:
          result = "kDYFEMPSExternalNDArrayConvolution2DGradient_encodePrimaryGradientToCommandBuffer_encoder_options_plu"
                   "ginOptions_primary_primaryInfo_secondary_secondaryInfo_gradient_gradientInfo_destination_destinationI"
                   "nfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case -6101:
          result = "kDYFEMPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resul"
                   "tColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset_transA_transB";
          break;
        case -6100:
          result = "kDYFEMPSExternalNDArrayConvolution2DGradient_encodeSecondaryGradientToCommandBuffer_encoder_options_p"
                   "luginOptions_primary_primaryInfo_secondary_secondaryInfo_gradient_gradientInfo_destination_destinatio"
                   "nInfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case -6099:
          result = "kDYFEMPSExternalNDArrayBinaryGradient_encodePrimaryGradientToCommandBuffer_encoder_options_pluginOpti"
                   "ons_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_gradientBuffer_gradientInfo_destination_d"
                   "estinationInfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case -6098:
          result = "kDYFEMPSExternalNDArrayBinaryGradient_encodeSecondaryGradientToCommandBuffer_encoder_options_pluginOp"
                   "tions_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_gradientBuffer_gradientInfo_destination"
                   "_destinationInfo_accumulate_predicationBuffer_predicationOffset";
          break;
        case -6097:
          result = "kDYFEMPSExternalNDArrayBinary_encodeToCommandBuffer_encoder_options_pluginOptions_primaryBuffer_prima"
                   "ryInfo_secondaryBuffer_secondaryInfo_destinationBuffer_destinationInfo_predicationBuffer_predicationOffset";
          break;
        case -6096:
          result = "kDYFEMPSPlugin_newNDArrayConvolution2DGradientWithDescriptor";
          break;
        case -6095:
          result = "kDYFEMPSPlugin_newNDArrayConvolution2DWithDescriptor";
          break;
        default:
          switch(a1)
          {
            case -7168:
              result = "kDYFECAMetalLayer_setPresentsWithTransaction";
              break;
            case -7167:
              result = "kDYFECAMetalDrawable_texture";
              break;
            case -7166:
              result = "kDYFECAMetalLayer_nextDrawable";
              break;
            case -7165:
              result = "kDYFECAMetalLayer_setPixelFormat";
              break;
            case -7164:
              result = "kDYFECAMetalLayer_setDrawableSize";
              break;
            case -7163:
              result = "kDYFECAMetalLayer_setDevice";
              break;
            case -7162:
              result = "kDYFECAMetalLayer_setBounds_contentsScale";
              break;
            case -7161:
              result = "kDYFECAMetalDrawable_dealloc";
              break;
            case -7160:
              result = "kDYFECAMetalLayer_setFramebufferOnly";
              break;
            case -7159:
              result = "kDYFECAMetalLayer_setBounds_contentsScale_windowBounds_windowProperties";
              break;
            case -7158:
              result = "kDYFECAMetalDrawable_present";
              break;
            case -7157:
              result = "kDYFECAMetalDrawable_presentAtTime";
              break;
            case -7156:
              result = "kDYFECAMetalDrawable_presentAfterMinimumDuration";
              break;
            case -7155:
              result = "kDYFEUIScreen_setInterfaceOrientation";
              break;
            case -7154:
              result = "kDYFECAMetalLayer_setWantsExtendedDynamicRangeContent";
              break;
            case -7153:
              result = "kDYFECAMetalLayer_setColorspace";
              break;
            default:
              switch(a1)
              {
                case -6656:
                  result = "kDYFENSHMDMetalSession_setDrawablePixelFormat";
                  break;
                case -6655:
                  result = "kDYFENSHMDMetalSession_nextDrawable";
                  break;
                case -6654:
                  result = "kDYFENSHMDMetalSession_initWithMetalDevice_deviceReference_hmdName";
                  break;
                case -6653:
                  result = "kDYFENSHMDMetalSession_setDrawableSize";
                  break;
                case -6652:
                  result = "kDYFENSHMDMetalSession_dealloc";
                  break;
                default:
LABEL_1384:
                  result = 0;
                  break;
              }
              break;
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case -10240:
          result = "kDYFEMTLCommandBuffer_restoreMTLBufferContents";
          break;
        case -10239:
          result = "kDYFEMTLDevice_deviceReference";
          break;
        case -10238:
          result = "kDYFEMTLTexture_harvested_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage";
          break;
        case -10237:
          result = "kDYFEMTLDevice_harvested_newBufferWithBytes_length_options";
          break;
        case -10236:
          result = "kDYFEMTLTexture_harvested_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_totalBytes";
          break;
        case -10235:
          result = "kDYFEMTLBuffer_resourceUsage";
          break;
        case -10234:
          result = "kDYFEMTLTexture_resourceUsage";
          break;
        case -10233:
          result = "kDYFEMTLDevice_setSelectedCommandQueueAddress";
          break;
        case -10232:
          result = "kDYFEMTLTexture_restoreIOSurfaceData_length_forPlane";
          break;
        case -10231:
          result = "kDYFEMTLTexture_mipmapInfo";
          break;
        case -10230:
          result = "kDYFEMTLDevice_setCapturingCommandQueueAddress";
          break;
        case -10229:
          result = "kDYFEMTLCommandBuffer_indirectArgumentBufferData";
          break;
        case -10228:
          result = "kDYFEMTLBuffer_gpuVirtualAddress";
          break;
        case -10227:
          result = "kDYFEMTLTexture_uniqueIdentifier";
          break;
        case -10226:
          result = "kDYFEMTLSamplerState_uniqueIdentifier";
          break;
        case -10225:
          result = "kDYFEMTLCommandBuffer_encodeIndirectArgumentsForBuffer_data";
          break;
        case -10224:
          result = "kDYFEFrameEnd";
          break;
        case -10223:
          result = "kDYFEMTLBuffer_allocatedSize";
          break;
        case -10222:
          result = "kDYFEMTLTexture_allocatedSize";
          break;
        case -10221:
          result = "kDYFEMTLBuffer_indirectCommandBufferData";
          break;
        case -10220:
          result = "kDYFEMTLRenderPipelineState_uniqueIdentifier";
          break;
        case -10219:
          result = "kDYFEMTLIndirectCommandBuffer_restoreData";
          break;
        case -10218:
          result = "kDYFEMTLIndirectCommandBuffer_uniqueIdentifier";
          break;
        case -10217:
          result = "kDYFEMTLIndirectCommandBuffer_indirectCommandNop";
          break;
        case -10216:
          result = "kDYFEMTLIndirectCommandBuffer_restoreOptimizedRanges";
          break;
        case -10215:
          result = "kDYFEMTLIndirectCommandBuffer_allocatedSize";
          break;
        case -10214:
          result = "kDYFEMTLComputePipelineState_uniqueIdentifier";
          break;
        case -10213:
          result = "kDYFEMTLResourceStateCommandEncoder_harvested_updateTextureMapping_mode_region_mipLevel_slice";
          break;
        case -10212:
          result = "kDYFEMTLTexture_timeSinceTouched";
          break;
        case -10211:
          result = "kDYFEMTLHeap_timeSinceTouched";
          break;
        case -10210:
          result = "kDYFEMTLBuffer_timeSinceTouched";
          break;
        case -10209:
          result = "kDYFEMTLIndirectCommandBuffer_timeSinceTouched";
          break;
        case -10208:
          result = "kDYFEMTLHeap_usedSize";
          break;
        case -10207:
          result = "kDYFEMTLHeap_currentAllocatedSize";
          break;
        case -10206:
          result = "kDYFEMTLSharedEventHandle_dealloc";
          break;
        case -10205:
          result = "kDYFEMTLTexture_compressionFeedback";
          break;
        case -10204:
          result = "kDYFEMTLTexture_allocationID";
          break;
        case -10203:
          result = "kDYFEMTLBuffer_allocationID";
          break;
        case -10202:
          result = "kDYFEMTLIndirectCommandBuffer_allocationID";
          break;
        case -10201:
          result = "kDYFEMTLTexture_saveSlice_level_zPlane_normalize_blitOption_toPath";
          break;
        case -10200:
          result = "kDYFEMTLBuffer_saveContentsToPath";
          break;
        case -10199:
          result = "kDYFEMTLRenderPipelineState_resourceIndex";
          break;
        case -10198:
          result = "kDYFEMTLTexture_resourceIndex";
          break;
        case -10197:
          result = "kDYFEMTLAccelerationStructure_allocationID";
          break;
        case -10196:
          result = "kDYFEMTLAccelerationStructure_allocatedSize";
          break;
        case -10195:
          result = "kDYFEMTLAccelerationStructure_resourceUsage";
          break;
        case -10194:
          result = "kDYFEMTLAccelerationStructure_restoreMTLAccelerationStructure";
          break;
        case -10193:
          result = "kDYFEMTLVisibleFunctionTable_uniqueIdentifier";
          break;
        case -10192:
          result = "kDYFEMTLRenderPipelineState_allocatedSize";
          break;
        case -10191:
          result = "kDYFEMTLComputePipelineState_allocatedSize";
          break;
        case -10190:
          result = "kDYFEMTLAccelerationStructure_restoreMTLAccelerationStructure_instance";
          break;
        case -10189:
          result = "kDYFEMTLDynamicLibrary_installName";
          break;
        case -10188:
          result = "kDYFEMTLLibrary_libraryIdentifier";
          break;
        case -10187:
          result = "kDYFEMTLBuffer_heapOffset";
          break;
        case -10186:
          result = "kDYFEMTLBuffer_parentGPUAddress_parentGPUSize";
          break;
        case -10185:
          result = "kDYFEMTLTexture_heapOffset";
          break;
        case -10184:
          result = "kDYFEMTLRenderPipelineState_imageblockSampleLength";
          break;
        case -10183:
          result = "kDYFEMTLLibrary_type";
          break;
        case -10182:
          result = "kDYFEMTLAccelerationStructure_allocationInfo";
          break;
        case -10181:
          result = "kDYFEMTLAccelerationStructure_uniqueIdentifier";
          break;
        case -10180:
          result = "kDYFEMTLIntersectionFunctionTable_timeSinceTouched";
          break;
        case -10179:
          result = "kDYFEMTLIntersectionFunctionTable_allocatedSize";
          break;
        case -10178:
          result = "kDYFEMTLVisibleFunctionTable_timeSinceTouched";
          break;
        case -10177:
          result = "kDYFEMTLVisibleFunctionTable_allocationID";
          break;
        case -10176:
          result = "kDYFEMTLIntersectionFunctionTable_allocationID";
          break;
        case -10175:
          result = "kDYFEMTLIntersectionFunctionTable_uniqueIdentifier";
          break;
        case -10174:
          result = "kDYFEMTLVisibleFunctionTable_allocatedSize";
          break;
        case -10173:
          result = "kDYFEMTLAccelerationStructure_timeSinceTouched";
          break;
        case -10172:
          result = "kDYFEMTLRenderPipelineState_timeSinceTouched";
          break;
        case -10171:
          result = "kDYFEMTLComputePipelineState_timeSinceTouched";
          break;
        case -10170:
          result = "kDYFEMTLAccelerationStructure_resourceIndex";
          break;
        case -10169:
          result = "kDYFEMTLAccelerationStructure_heapOffset";
          break;
        case -10168:
          result = "kDYFEBoundary_Frame";
          break;
        case -10167:
          result = "kDYFEMTLAccelerationStructure_gpuResourceID";
          break;
        case -10166:
          result = "kDYFEMTLIndirectCommandBuffer_gpuResourceID";
          break;
        case -10165:
          result = "kDYFEMTLRenderPipelineState_gpuResourceID";
          break;
        case -10164:
          result = "kDYFEMTLTexture_gpuResourceID";
          break;
        case -10163:
          result = "kDYFEMTLSamplerState_gpuResourceID";
          break;
        case -10162:
          result = "kDYFEMTLComputePipelineState_gpuResourceID";
          break;
        case -10161:
          result = "kDYFEMTLIntersectionFunctionTable_gpuResourceID";
          break;
        case -10160:
          result = "kDYFEMTLVisibleFunctionTable_gpuResourceID";
          break;
        case -10159:
          result = "kDYFEMTLAccelerationStructure_state";
          break;
        case -10158:
          result = "kDYFEMTLAccelerationStructureCommandEncoder_setAccelerationStructureState";
          break;
        case -10157:
          result = "kDYFEMTLFunction_setDescriptor_library";
          break;
        case -10156:
          result = "kDYFEMTLAccelerationStructure_children";
          break;
        case -10155:
          result = "kDYFEMTLAccelerationStructureCommandEncoder_setAccelerationStructureChildren";
          break;
        case -10154:
          result = "kDYFEMTLAccelerationStructureCommandEncoder_setAccelerationStructureDescriptor";
          break;
        case -10153:
          result = "kDYFEMTLVisibleFunctionTable_gpuAddress";
          break;
        case -10152:
          result = "kDYFEMTLIntersectionFunctionTable_setBuffers";
          break;
        case -10151:
          result = "kDYFEMTLCaptureManager_sharedCaptureManager";
          break;
        default:
          if (a1 == -12544)
          {
            result = "kDYFEMTLCommandQueue_continueCommandBuffer_retainReferences";
          }
          else
          {
            if (a1 != -12543)
              goto LABEL_1384;
            result = "kDYFEMTLIOCommandQueue_continueCommandBuffer_retainReferences";
          }
          break;
      }
    }
  }
  else if (a1 <= -18431)
  {
    switch(a1)
    {
      case -20480:
        result = "kDYFEMTLFXSpatialScaler_setColorTexture";
        break;
      case -20479:
        result = "kDYFEMTLFXSpatialScaler_setFence";
        break;
      case -20478:
        result = "kDYFEMTLFXSpatialScaler_setInputContentHeight";
        break;
      case -20477:
        result = "kDYFEMTLFXSpatialScaler_setInputContentWidth";
        break;
      case -20476:
        result = "kDYFEMTLFXSpatialScaler_setOutputTexture";
        break;
      case -20475:
        result = "kDYFEMTLFXSpatialScaler_dealloc";
        break;
      case -20474:
        result = "kDYFEMTLFXSpatialScaler_encodeToCommandBuffer";
        break;
      case -20473:
        result = "kDYFEMTLFXTemporalScaler_setColorTexture";
        break;
      case -20472:
        result = "kDYFEMTLFXTemporalScaler_setDepthReversed";
        break;
      case -20471:
        result = "kDYFEMTLFXTemporalScaler_setDepthTexture";
        break;
      case -20470:
        result = "kDYFEMTLFXTemporalScaler_setExposureTexture";
        break;
      case -20469:
        result = "kDYFEMTLFXTemporalScaler_setFence";
        break;
      case -20468:
        result = "kDYFEMTLFXTemporalScaler_setInputContentHeight";
        break;
      case -20467:
        result = "kDYFEMTLFXTemporalScaler_setInputContentWidth";
        break;
      case -20466:
        result = "kDYFEMTLFXTemporalScaler_setJitterOffsetX";
        break;
      case -20465:
        result = "kDYFEMTLFXTemporalScaler_setJitterOffsetY";
        break;
      case -20464:
        result = "kDYFEMTLFXTemporalScaler_setMotionTexture";
        break;
      case -20463:
        result = "kDYFEMTLFXTemporalScaler_setMotionVectorScaleX";
        break;
      case -20462:
        result = "kDYFEMTLFXTemporalScaler_setMotionVectorScaleY";
        break;
      case -20461:
        result = "kDYFEMTLFXTemporalScaler_setOutputTexture";
        break;
      case -20460:
        result = "kDYFEMTLFXTemporalScaler_setPreExposure";
        break;
      case -20459:
        result = "kDYFEMTLFXTemporalScaler_setReset";
        break;
      case -20458:
        result = "kDYFEMTLFXTemporalScaler_dealloc";
        break;
      case -20457:
        result = "kDYFEMTLFXTemporalScaler_encodeToCommandBuffer";
        break;
      case -20456:
        result = "kDYFEMTLFXTemporalScaler_setReactiveMaskTexture";
        break;
      default:
        if (a1 == -18432)
        {
          result = "kDYFEMTLDevice_newSpatialScalerWithDescriptor";
        }
        else
        {
          if (a1 != -18431)
            goto LABEL_1384;
          result = "kDYFEMTLDevice_newTemporalScalerWithDescriptor";
        }
        break;
    }
  }
  else
  {
    v1 = a1 + 0x4000;
    result = "kDYFEMTLBlitCommandEncoder_setLabel";
    switch(v1)
    {
      case 0:
        return result;
      case 1:
        result = "kDYFEMTLBlitCommandEncoder_dealloc";
        break;
      case 2:
        result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_de"
                 "stinationSlice_destinationLevel_destinationOrigin";
        break;
      case 3:
        result = "kDYFEMTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize"
                 "_toTexture_destinationSlice_destinationLevel_destinationOrigin";
        break;
      case 4:
        result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_des"
                 "tinationOffset_destinationBytesPerRow_destinationBytesPerImage";
        break;
      case 5:
        result = "kDYFEMTLBlitCommandEncoder_generateMipmapsForTexture";
        break;
      case 6:
        result = "kDYFEMTLBlitCommandEncoder_fillBuffer_range_value";
        break;
      case 7:
        result = "kDYFEMTLBlitCommandEncoder_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size";
        break;
      case 8:
        result = "kDYFEMTLBlitCommandEncoder_endEncoding";
        break;
      case 9:
        result = "kDYFEMTLBlitCommandEncoder_insertDebugSignpost";
        break;
      case 10:
        result = "kDYFEMTLBlitCommandEncoder_pushDebugGroup";
        break;
      case 11:
        result = "kDYFEMTLBlitCommandEncoder_popDebugGroup";
        break;
      case 12:
        result = "kDYFEMTLBuffer_setLabel";
        break;
      case 13:
        result = "kDYFEMTLBuffer_setResponsibleProcess";
        break;
      case 14:
        result = "kDYFEMTLBuffer_dealloc";
        break;
      case 15:
        result = "kDYFEMTLBuffer_contents";
        break;
      case 16:
        result = "kDYFEMTLBuffer_newTextureWithDescriptor_offset_bytesPerRow";
        break;
      case 17:
        result = "kDYFEMTLBuffer_setPurgeableState";
        break;
      case 18:
        result = "kDYFEMTLBuffer_isPurgeable";
        break;
      case 19:
        result = "kDYFEMTLCommandBuffer_setLabel";
        break;
      case 20:
        result = "kDYFEMTLCommandBuffer_setProfilingEnabled";
        break;
      case 21:
        result = "kDYFEMTLCommandBuffer_dealloc";
        break;
      case 22:
        result = "kDYFEMTLCommandBuffer_enqueue";
        break;
      case 23:
        result = "kDYFEMTLCommandBuffer_commit";
        break;
      case 24:
        result = "kDYFEMTLCommandBuffer_addScheduledHandler";
        break;
      case 25:
        result = "kDYFEMTLCommandBuffer_presentDrawable";
        break;
      case 26:
        result = "kDYFEMTLCommandBuffer_presentDrawable_atTime";
        break;
      case 27:
        result = "kDYFEMTLCommandBuffer_waitUntilScheduled";
        break;
      case 28:
        result = "kDYFEMTLCommandBuffer_addCompletedHandler";
        break;
      case 29:
        result = "kDYFEMTLCommandBuffer_waitUntilCompleted";
        break;
      case 30:
        result = "kDYFEMTLCommandBuffer_blitCommandEncoder";
        break;
      case 31:
        result = "kDYFEMTLCommandBuffer_renderCommandEncoderWithDescriptor";
        break;
      case 32:
        result = "kDYFEMTLCommandBuffer_computeCommandEncoder";
        break;
      case 33:
        result = "kDYFEMTLCommandBuffer_parallelRenderCommandEncoderWithDescriptor";
        break;
      case 34:
        result = "kDYFEMTLCommandBuffer_debugCommandEncoder";
        break;
      case 35:
        result = "kDYFEMTLCommandQueue_setLabel";
        break;
      case 36:
        result = "kDYFEMTLCommandQueue_setBackgroundTrackingPID";
        break;
      case 37:
        result = "kDYFEMTLCommandQueue_setSkipRender";
        break;
      case 38:
        result = "kDYFEMTLCommandQueue_setExecutionEnabled";
        break;
      case 39:
        result = "kDYFEMTLCommandQueue_setProfilingEnabled";
        break;
      case 40:
        result = "kDYFEMTLCommandQueue_dealloc";
        break;
      case 41:
        result = "kDYFEMTLCommandQueue_commandBuffer";
        break;
      case 42:
        result = "kDYFEMTLCommandQueue_commandBufferWithUnretainedReferences";
        break;
      case 43:
        result = "kDYFEMTLCommandQueue_insertDebugCaptureBoundary";
        break;
      case 44:
        result = "kDYFEMTLCommandQueue_finish";
        break;
      case 45:
        result = "kDYFEMTLComputeCommandEncoder_setLabel";
        break;
      case 46:
        result = "kDYFEMTLComputeCommandEncoder_dealloc";
        break;
      case 47:
        result = "kDYFEMTLComputeCommandEncoder_setComputePipelineState";
        break;
      case 48:
        result = "kDYFEMTLComputeCommandEncoder_setBuffer_offset_atIndex";
        break;
      case 49:
        result = "kDYFEMTLComputeCommandEncoder_setBuffers_offsets_withRange";
        break;
      case 50:
        result = "kDYFEMTLComputeCommandEncoder_setTexture_atIndex";
        break;
      case 51:
        result = "kDYFEMTLComputeCommandEncoder_setTextures_withRange";
        break;
      case 52:
        result = "kDYFEMTLComputeCommandEncoder_setSamplerState_atIndex";
        break;
      case 53:
        result = "kDYFEMTLComputeCommandEncoder_setSamplerStates_withRange";
        break;
      case 54:
        result = "kDYFEMTLComputeCommandEncoder_setSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 55:
        result = "kDYFEMTLComputeCommandEncoder_setSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 56:
        result = "kDYFEMTLComputeCommandEncoder_setThreadgroupMemoryLength_atIndex";
        break;
      case 57:
        result = "kDYFEMTLComputeCommandEncoder_dispatchThreadgroups_threadsPerThreadgroup";
        break;
      case 58:
        result = "kDYFEMTLComputeCommandEncoder_executeBarrier";
        break;
      case 59:
        result = "kDYFEMTLComputeCommandEncoder_endEncoding";
        break;
      case 60:
        result = "kDYFEMTLComputeCommandEncoder_insertDebugSignpost";
        break;
      case 61:
        result = "kDYFEMTLComputeCommandEncoder_pushDebugGroup";
        break;
      case 62:
        result = "kDYFEMTLComputeCommandEncoder_popDebugGroup";
        break;
      case 63:
        result = "kDYFEMTLComputePipelineState_dealloc";
        break;
      case 64:
        result = "kDYFEMTLDepthStencilState_dealloc";
        break;
      case 65:
        result = "kDYFEMTLDevice_setShaderDebugInfoCaching";
        break;
      case 66:
        result = "kDYFEMTLDevice_setMetalAssertionsEnabled";
        break;
      case 67:
        result = "kDYFEMTLDevice_dealloc";
        break;
      case 68:
        result = "kDYFEMTLDevice_newCommandQueue";
        break;
      case 69:
        result = "kDYFEMTLDevice_newCommandQueueWithMaxCommandBufferCount";
        break;
      case 70:
        result = "kDYFEMTLDevice_newBufferWithLength_options";
        break;
      case 71:
        result = "kDYFEMTLDevice_newBufferWithBytes_length_options";
        break;
      case 72:
        result = "kDYFEMTLDevice_newBufferWithBytesNoCopy_length_options_deallocator";
        break;
      case 73:
        result = "kDYFEMTLDevice_newDepthStencilStateWithDescriptor";
        break;
      case 74:
        result = "kDYFEMTLDevice_newTextureWithDescriptor";
        break;
      case 75:
        result = "kDYFEMTLDevice_newSamplerStateWithDescriptor";
        break;
      case 76:
        result = "kDYFEMTLDevice_newDefaultLibrary";
        break;
      case 77:
        result = "kDYFEMTLDevice_newLibraryWithFile_error";
        break;
      case 78:
        result = "kDYFEMTLDevice_newLibraryWithData_error";
        break;
      case 79:
        result = "kDYFEMTLDevice_newLibraryWithSource_options_error";
        break;
      case 80:
        result = "kDYFEMTLDevice_newLibraryWithSource_options_completionHandler";
        break;
      case 81:
        result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_error";
        break;
      case 82:
        result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_options_reflection_error";
        break;
      case 83:
        result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_completionHandler";
        break;
      case 84:
        result = "kDYFEMTLDevice_newRenderPipelineStateWithDescriptor_options_completionHandler";
        break;
      case 85:
        result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_error";
        break;
      case 86:
        result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_options_reflection_error";
        break;
      case 87:
        result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_completionHandler";
        break;
      case 88:
        result = "kDYFEMTLDevice_newComputePipelineStateWithFunction_options_completionHandler";
        break;
      case 89:
        result = "kDYFEMTLDevice_unmapShaderSampleBuffer";
        break;
      case 90:
        result = "kDYFEMTLDevice_newTextureWithDescriptor_iosurface_plane";
        break;
      case 91:
        result = "kDYFEMTLFunction_dealloc";
        break;
      case 92:
        result = "kDYFEMTLLibrary_setLabel";
        break;
      case 93:
        result = "kDYFEMTLLibrary_dealloc";
        break;
      case 94:
        result = "kDYFEMTLLibrary_newFunctionWithName";
        break;
      case 95:
        result = "kDYFEMTLParallelRenderCommandEncoder_setSeparateCommits";
        break;
      case 96:
        result = "kDYFEMTLParallelRenderCommandEncoder_setLabel";
        break;
      case 97:
        result = "kDYFEMTLParallelRenderCommandEncoder_dealloc";
        break;
      case 98:
        result = "kDYFEMTLParallelRenderCommandEncoder_renderCommandEncoder";
        break;
      case 99:
        result = "kDYFEMTLParallelRenderCommandEncoder_endEncoding";
        break;
      case 100:
        result = "kDYFEMTLParallelRenderCommandEncoder_insertDebugSignpost";
        break;
      case 101:
        result = "kDYFEMTLParallelRenderCommandEncoder_pushDebugGroup";
        break;
      case 102:
        result = "kDYFEMTLParallelRenderCommandEncoder_popDebugGroup";
        break;
      case 103:
        result = "kDYFEMTLRenderCommandEncoder_setLabel";
        break;
      case 104:
        result = "kDYFEMTLRenderCommandEncoder_dealloc";
        break;
      case 105:
        result = "kDYFEMTLRenderCommandEncoder_setRenderPipelineState";
        break;
      case 106:
        result = "kDYFEMTLRenderCommandEncoder_setVertexBuffer_offset_atIndex";
        break;
      case 107:
        result = "kDYFEMTLRenderCommandEncoder_setVertexBuffers_offsets_withRange";
        break;
      case 108:
        result = "kDYFEMTLRenderCommandEncoder_setVertexTexture_atIndex";
        break;
      case 109:
        result = "kDYFEMTLRenderCommandEncoder_setVertexTextures_withRange";
        break;
      case 110:
        result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerState_atIndex";
        break;
      case 111:
        result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerStates_withRange";
        break;
      case 112:
        result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 113:
        result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 114:
        result = "kDYFEMTLRenderCommandEncoder_setViewport";
        break;
      case 115:
        result = "kDYFEMTLRenderCommandEncoder_setFrontFacingWinding";
        break;
      case 116:
        result = "kDYFEMTLRenderCommandEncoder_setCullMode";
        break;
      case 117:
        result = "kDYFEMTLRenderCommandEncoder_setDepthClipMode";
        break;
      case 118:
        result = "kDYFEMTLRenderCommandEncoder_setDepthBias_slopeScale_clamp";
        break;
      case 119:
        result = "kDYFEMTLRenderCommandEncoder_setScissorRect";
        break;
      case 120:
        result = "kDYFEMTLRenderCommandEncoder_setTriangleFillMode";
        break;
      case 121:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentBuffer_offset_atIndex";
        break;
      case 122:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentBuffers_offsets_withRange";
        break;
      case 123:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentTexture_atIndex";
        break;
      case 124:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentTextures_withRange";
        break;
      case 125:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerState_atIndex";
        break;
      case 126:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerStates_withRange";
        break;
      case 127:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 128:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 129:
        result = "kDYFEMTLRenderCommandEncoder_setBlendColorRed_green_blue_alpha";
        break;
      case 130:
        result = "kDYFEMTLRenderCommandEncoder_setDepthStencilState";
        break;
      case 131:
        result = "kDYFEMTLRenderCommandEncoder_setStencilReferenceValue";
        break;
      case 132:
        result = "kDYFEMTLRenderCommandEncoder_setVisibilityResultMode_offset";
        break;
      case 133:
        result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount";
        break;
      case 134:
        result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount";
        break;
      case 135:
        result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount";
        break;
      case 136:
        result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset";
        break;
      case 137:
        result = "kDYFEMTLRenderCommandEncoder_setLineWidth";
        break;
      case 138:
        result = "kDYFEMTLRenderCommandEncoder_endEncoding";
        break;
      case 139:
        result = "kDYFEMTLRenderCommandEncoder_insertDebugSignpost";
        break;
      case 140:
        result = "kDYFEMTLRenderCommandEncoder_pushDebugGroup";
        break;
      case 141:
        result = "kDYFEMTLRenderCommandEncoder_popDebugGroup";
        break;
      case 142:
        result = "kDYFEMTLRenderPipelineState_dealloc";
        break;
      case 143:
        result = "kDYFEMTLSamplerState_dealloc";
        break;
      case 144:
        result = "kDYFEMTLTexture_setLabel";
        break;
      case 145:
        result = "kDYFEMTLTexture_setResponsibleProcess";
        break;
      case 146:
        result = "kDYFEMTLTexture_dealloc";
        break;
      case 147:
        result = "kDYFEMTLTexture_getBytes_bytesPerRow_bytesPerImage_fromRegion_mipmapLevel_slice";
        break;
      case 148:
        result = "kDYFEMTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage";
        break;
      case 149:
        result = "kDYFEMTLTexture_getBytes_bytesPerRow_fromRegion_mipmapLevel";
        break;
      case 150:
        result = "kDYFEMTLTexture_replaceRegion_mipmapLevel_withBytes_bytesPerRow";
        break;
      case 151:
        result = "kDYFEMTLTexture_newTextureViewWithPixelFormat";
        break;
      case 152:
        result = "kDYFEMTLTexture_setPurgeableState";
        break;
      case 153:
        result = "kDYFEMTLTexture_isPurgeable";
        break;
      case 154:
        result = "kDYFEMTLBlitCommandEncoder_flushResource";
        break;
      case 155:
        result = "kDYFEMTLBlitCommandEncoder_flushTexture_slice_mipmapLevel";
        break;
      case 156:
        result = "kDYFEMTLBuffer_invalidateRange";
        break;
      case 157:
        result = "kDYFEMTLComputeCommandEncoder_setBytes_length_atIndex";
        break;
      case 158:
        result = "kDYFEMTLComputeCommandEncoder_setBufferOffset_atIndex";
        break;
      case 159:
        result = "kDYFEMTLRenderCommandEncoder_setVertexBytes_length_atIndex";
        break;
      case 160:
        result = "kDYFEMTLRenderCommandEncoder_setVertexBufferOffset_atIndex";
        break;
      case 161:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentBytes_length_atIndex";
        break;
      case 162:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentBufferOffset_atIndex";
        break;
      case 163:
        result = "kDYFEMTLTexture_invalidateRegion";
        break;
      case 164:
        result = "kDYFEMTLComputeCommandEncoder_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup";
        break;
      case 165:
        result = "kDYFEMTLRenderCommandEncoder_setStencilFrontReferenceValue_backReferenceValue";
        break;
      case 166:
        result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance";
        break;
      case 167:
        result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_i"
                 "nstanceCount_baseVertex_baseInstance";
        break;
      case 168:
        result = "kDYFEMTLRenderCommandEncoder_drawPrimitives_indirectBuffer_indirectBufferOffset";
        break;
      case 169:
        result = "kDYFEMTLRenderCommandEncoder_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuff"
                 "er_indirectBufferOffset";
        break;
      case 170:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentTexture_atTextureIndex_samplerState_atSamplerIndex";
        break;
      case 171:
        result = "kDYFEMTLBlitCommandEncoder_synchronizeResource";
        break;
      case 172:
        result = "kDYFEMTLBlitCommandEncoder_synchronizeTexture_slice_level";
        break;
      case 173:
        result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_de"
                 "stinationSlice_destinationLevel_destinationOrigin_options";
        break;
      case 174:
        result = "kDYFEMTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize"
                 "_toTexture_destinationSlice_destinationLevel_destinationOrigin_options";
        break;
      case 175:
        result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_des"
                 "tinationOffset_destinationBytesPerRow_destinationBytesPerImage_options";
        break;
      case 176:
        result = "kDYFEMTLBuffer_didModifyRange";
        break;
      case 177:
        result = "kDYFEMTLComputeCommandEncoder_setTexture_baseLevel_atIndex";
        break;
      case 178:
        result = "kDYFEMTLDevice_supportsFeatureSet";
        break;
      case 179:
        result = "kDYFEMTLDevice_supportsSampleCount";
        break;
      case 180:
        result = "kDYFEMTLRenderCommandEncoder_setVertexTexture_baseLevel_atIndex";
        break;
      case 181:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentTexture_baseLevel_atIndex";
        break;
      case 182:
        result = "kDYFEMTLCommandBuffer_commitAndHold";
        break;
      case 183:
        result = "kDYFEMTLRenderCommandEncoder_textureBarrier";
        break;
      case 184:
        result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_error";
        break;
      case 185:
        result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_options_reflection_error";
        break;
      case 186:
        result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_completionHandler";
        break;
      case 187:
        result = "kDYFEMTLDevice_newComputePipelineStateWithDescriptor_options_completionHandler";
        break;
      case 188:
        result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices";
        break;
      case 189:
        result = "kDYFEMTLCommandBuffer_fragmentRenderCommandEncoderWithDescriptor";
        break;
      case 190:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setLabel";
        break;
      case 191:
        result = "kDYFEMTLFragmentRenderCommandEncoder_dealloc";
        break;
      case 192:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setRenderPipelineState";
        break;
      case 193:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthBias_slopeScale_clamp";
        break;
      case 194:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setScissorRect";
        break;
      case 195:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBytes_length_atIndex";
        break;
      case 196:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBuffer_offset_atIndex";
        break;
      case 197:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBufferOffset_atIndex";
        break;
      case 198:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentBuffers_offsets_withRange";
        break;
      case 199:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTexture_atIndex";
        break;
      case 200:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTextures_withRange";
        break;
      case 201:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTexture_baseLevel_atIndex";
        break;
      case 202:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentTexture_atTextureIndex_samplerState_atSamplerIndex";
        break;
      case 203:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerState_atIndex";
        break;
      case 204:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerStates_withRange";
        break;
      case 205:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 206:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setFragmentSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 207:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setBlendColorRed_green_blue_alpha";
        break;
      case 208:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthStencilState";
        break;
      case 209:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilReferenceValue";
        break;
      case 210:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilFrontReferenceValue_backReferenceValue";
        break;
      case 211:
        result = "kDYFEMTLFragmentRenderCommandEncoder_drawTrianglesWithPositions_vertexCount_triangleIndices_triangleCount";
        break;
      case 212:
        result = "kDYFEMTLFragmentRenderCommandEncoder_drawTrianglesWithPositions_vertexCount_vertexVaryings_varyingCount"
                 "PerVertex_triangleIndices_triangleCount";
        break;
      case 213:
        result = "kDYFEMTLFragmentRenderCommandEncoder_drawTrianglesWithPositions_vertexCount_vertexVaryings_varyingCountPerVertex";
        break;
      case 214:
        result = "kDYFEMTLFragmentRenderCommandEncoder_endEncoding";
        break;
      case 215:
        result = "kDYFEMTLFragmentRenderCommandEncoder_insertDebugSignpost";
        break;
      case 216:
        result = "kDYFEMTLFragmentRenderCommandEncoder_pushDebugGroup";
        break;
      case 217:
        result = "kDYFEMTLFragmentRenderCommandEncoder_popDebugGroup";
        break;
      case 218:
        result = "kDYFEMTLDevice_supportsTextureSampleCount";
        break;
      case 219:
        result = "kDYFEMTLDevice_newCommandQueueWithDescriptor";
        break;
      case 220:
        result = "kDYFEMTLCommandBuffer_setListIndex";
        break;
      case 221:
        result = "kDYFEMTLDevice_newBufferWithIOSurface";
        break;
      case 222:
        result = "kDYFEMTLParallelRenderCommandEncoder_setColorStoreAction_atIndex";
        break;
      case 223:
        result = "kDYFEMTLParallelRenderCommandEncoder_setDepthStoreAction";
        break;
      case 224:
        result = "kDYFEMTLParallelRenderCommandEncoder_setStencilStoreAction";
        break;
      case 225:
        result = "kDYFEMTLRenderCommandEncoder_setColorStoreAction_atIndex";
        break;
      case 226:
        result = "kDYFEMTLRenderCommandEncoder_setDepthStoreAction";
        break;
      case 227:
        result = "kDYFEMTLRenderCommandEncoder_setStencilStoreAction";
        break;
      case 228:
        result = "kDYFEMTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_atIndex";
        break;
      case 229:
        result = "kDYFEMTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level";
        break;
      case 230:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setColorStoreAction_atIndex";
        break;
      case 231:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthStoreAction";
        break;
      case 232:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilStoreAction";
        break;
      case 233:
        result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithParallelExecution";
        break;
      case 234:
        result = "kDYFEMTLComputeCommandEncoder_dispatchBarrier";
        break;
      case 235:
        result = "kDYFEMTLComputeCommandEncoder_setImageblockWidth_height";
        break;
      case 236:
        result = "kDYFEMTLRenderCommandEncoder_setTessellationFactorBuffer_offset_instanceStride";
        break;
      case 237:
        result = "kDYFEMTLRenderCommandEncoder_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_"
                 "instanceCount_baseInstance";
        break;
      case 238:
        result = "kDYFEMTLRenderCommandEncoder_drawPatches_patchIndexBuffer_patchIndexBufferOffset_indirectBuffer_indirectBufferOffset";
        break;
      case 239:
        result = "kDYFEMTLRenderCommandEncoder_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffer"
                 "Offset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance";
        break;
      case 240:
        result = "kDYFEMTLRenderCommandEncoder_drawIndexedPatches_patchIndexBuffer_patchIndexBufferOffset_controlPointInd"
                 "exBuffer_controlPointIndexBufferOffset_indirectBuffer_indirectBufferOffset";
        break;
      case 241:
        result = "kDYFEMTLRenderCommandEncoder_setTileBytes_length_atIndex";
        break;
      case 242:
        result = "kDYFEMTLRenderCommandEncoder_setTileBuffer_offset_atIndex";
        break;
      case 243:
        result = "kDYFEMTLRenderCommandEncoder_setTileBufferOffset_atIndex";
        break;
      case 244:
        result = "kDYFEMTLRenderCommandEncoder_setTileTexture_atIndex";
        break;
      case 245:
        result = "kDYFEMTLRenderCommandEncoder_setTileSamplerState_atIndex";
        break;
      case 246:
        result = "kDYFEMTLRenderCommandEncoder_setTileSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 247:
        result = "kDYFEMTLRenderCommandEncoder_dispatchThreadsPerTile";
        break;
      case 248:
        result = "kDYFEMTLFence_setLabel";
        break;
      case 249:
        result = "kDYFEMTLFunction_functionConstantIndexByName_type";
        break;
      case 250:
        result = "kDYFEMTLCommandQueue_setIsOpenGLQueue";
        break;
      case 251:
        result = "kDYFEMTLCommandBuffer_presentDrawable_afterMinimumDuration";
        break;
      case 252:
        result = "kDYFEMTLRenderCommandEncoder_setTessellationFactorScale";
        break;
      case 253:
        result = "kDYFEMTLBlitCommandEncoder_waitForFence";
        break;
      case 254:
        result = "kDYFEMTLComputeCommandEncoder_updateFence";
        break;
      case 255:
        result = "kDYFEMTLComputeCommandEncoder_waitForFence";
        break;
      case 256:
        result = "kDYFEMTLDevice_newFence";
        break;
      case 257:
        result = "kDYFEMTLFence_dealloc";
        break;
      case 258:
        result = "kDYFEMTLRenderCommandEncoder_updateFence_afterStages";
        break;
      case 259:
        result = "kDYFEMTLRenderCommandEncoder_waitForFence_beforeStages";
        break;
      case 260:
        result = "kDYFEMTLBlitCommandEncoder_updateFence";
        break;
      case 261:
        result = "kDYFEMTLFunction_setLabel";
        break;
      case 262:
        result = "kDYFEMTLBuffer_makeAliasable";
        break;
      case 263:
        result = "kDYFEMTLDevice_heapTextureSizeWithDescriptor";
        break;
      case 264:
        result = "kDYFEMTLDevice_newHeapWithDescriptor";
        break;
      case 265:
        result = "kDYFEMTLHeap_setLabel";
        break;
      case 266:
        result = "kDYFEMTLHeap_dealloc";
        break;
      case 267:
        result = "kDYFEMTLHeap_newBufferWithLength_options";
        break;
      case 268:
        result = "kDYFEMTLHeap_newTextureWithDescriptor";
        break;
      case 269:
        result = "kDYFEMTLHeap_setPurgeableState";
        break;
      case 270:
        result = "kDYFEMTLTexture_makeAliasable";
        break;
      case 271:
        result = "kDYFEMTLBuffer_isAliasable";
        break;
      case 272:
        result = "kDYFEMTLDevice_heapTextureSizeAndAlignWithDescriptor";
        break;
      case 273:
        result = "kDYFEMTLDevice_heapBufferSizeAndAlignWithLength_options";
        break;
      case 274:
        result = "kDYFEMTLHeap_setResponsibleProcess";
        break;
      case 275:
        result = "kDYFEMTLHeap_isPurgeable";
        break;
      case 276:
        result = "kDYFEMTLTexture_isAliasable";
        break;
      case 277:
        result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_error";
        break;
      case 278:
        result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_completionHandler";
        break;
      case 279:
        result = "kDYFEMTLHeap_maxAvailableSizeWithAlignment";
        break;
      case 280:
        result = "kDYFEMTLBuffer_newTiledTextureWithDescriptor_offset_bytesPerRow";
        break;
      case 281:
        result = "kDYFEMTLBuffer_addDebugMarker_range";
        break;
      case 282:
        result = "kDYFEMTLBuffer_removeAllDebugMarkers";
        break;
      case 283:
        result = "kDYFEMTLDevice_newComputePipelineStateWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error";
        break;
      case 284:
        result = "kDYFEMTLComputeCommandEncoder_setStageInRegion";
        break;
      case 285:
        result = "kDYFEMTLDevice_newTextureLayoutWithDescriptor_isHeapOrBufferBacked";
        break;
      case 286:
        result = "kDYFEMTLBuffer_newLinearTextureWithDescriptor_offset_bytesPerRow_bytesPerImage";
        break;
      case 287:
        result = "kDYFEMTLTextureLayout_dealloc";
        break;
      case 288:
        result = "kDYFEMTLDevice_newTextureWithBytesNoCopy_length_descriptor_deallocator";
        break;
      case 289:
        result = "kDYFEMTLDevice_newDefaultLibraryWithBundle_error";
        break;
      case 290:
        result = "kDYFEMTLTexture_formattedDescription";
        break;
      case 291:
        result = "kDYFEMTLDevice_minLinearTextureAlignmentForPixelFormat";
        break;
      case 292:
        result = "kDYFEMTLComputePipelineState_getComputeKernelTelemetryID";
        break;
      case 293:
        result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_error";
        break;
      case 294:
        result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_options_reflection_error";
        break;
      case 295:
        result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_completionHandler";
        break;
      case 296:
        result = "kDYFEMTLDevice_newRenderPipelineStateWithTileDescriptor_options_completionHandler";
        break;
      case 297:
        result = "kDYFEMTLRenderCommandEncoder_setTileBuffers_offsets_withRange";
        break;
      case 298:
        result = "kDYFEMTLRenderCommandEncoder_setTileTextures_withRange";
        break;
      case 299:
        result = "kDYFEMTLRenderCommandEncoder_setTileSamplerStates_withRange";
        break;
      case 300:
        result = "kDYFEMTLRenderCommandEncoder_setTileSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 301:
        result = "kDYFEMTLLibrary_setOverrideTriple";
        break;
      case 302:
        result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_error";
        break;
      case 303:
        result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_completionHandler";
        break;
      case 304:
        result = "kDYFEMTLRenderCommandEncoder_setThreadgroupMemoryLength_atIndex";
        break;
      case 305:
        result = "kDYFEMTLComputeCommandEncoder_dispatchThreadsWithIndirectBuffer_indirectBufferOffset";
        break;
      case 306:
        result = "kDYFEMTLComputeCommandEncoder_dispatchThreads_threadsPerThreadgroup";
        break;
      case 307:
        result = "kDYFEMTLRenderCommandEncoder_setViewports_count";
        break;
      case 308:
        result = "kDYFEMTLRenderCommandEncoder_setScissorRects_count";
        break;
      case 309:
        result = "kDYFEMTLDevice_newPipelineLibraryWithFilePath_error";
        break;
      case 310:
        result = "kDYFEMTLRenderCommandEncoder_setThreadgroupMemoryLength_offset_atIndex";
        break;
      case 311:
        result = "kDYFEMTLCaptureScope_setLabel";
        break;
      case 312:
        result = "kDYFEMTLCaptureScope_dealloc";
        break;
      case 313:
        result = "kDYFEMTLCaptureScope_beginScope";
        break;
      case 314:
        result = "kDYFEMTLCaptureScope_endScope";
        break;
      case 315:
        result = "kDYFEMTLCaptureManager_startCaptureWithDevice";
        break;
      case 316:
        result = "kDYFEMTLCaptureManager_startCaptureWithCommandQueue";
        break;
      case 317:
        result = "kDYFEMTLCaptureManager_stopCapture";
        break;
      case 318:
        result = "kDYFEMTLDevice_startCollectingPipelineDescriptors";
        break;
      case 319:
        result = "kDYFEMTLCommandBuffer_pushDebugGroup";
        break;
      case 320:
        result = "kDYFEMTLCommandBuffer_popDebugGroup";
        break;
      case 321:
        result = "kDYFEMTLArgumentEncoder_setLabel";
        break;
      case 322:
        result = "kDYFEMTLArgumentEncoder_dealloc";
        break;
      case 323:
        result = "kDYFEMTLArgumentEncoder_setArgumentBuffer_offset";
        break;
      case 324:
        result = "kDYFEMTLArgumentEncoder_setBuffer_offset_atIndex";
        break;
      case 325:
        result = "kDYFEMTLArgumentEncoder_setBuffers_offsets_withRange";
        break;
      case 326:
        result = "kDYFEMTLArgumentEncoder_setTexture_atIndex";
        break;
      case 327:
        result = "kDYFEMTLArgumentEncoder_setTextures_withRange";
        break;
      case 328:
        result = "kDYFEMTLArgumentEncoder_setSamplerState_atIndex";
        break;
      case 329:
        result = "kDYFEMTLArgumentEncoder_setSamplerStates_withRange";
        break;
      case 330:
        result = "kDYFEMTLArgumentEncoder_constantDataAtIndex";
        break;
      case 331:
        result = "kDYFEMTLArgumentEncoder_newArgumentEncoderForBufferAtIndex";
        break;
      case 332:
        result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex";
        break;
      case 333:
        result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_reflection";
        break;
      case 334:
        result = "kDYFEMTLDevice_newArgumentEncoderWithArguments_count";
        break;
      case 335:
        result = "kDYFEMTLDevice_newArgumentBufferLayoutWithStructType";
        break;
      case 336:
        result = "kDYFEMTLDevice_newArgumentEncoderWithLayout";
        break;
      case 337:
        result = "kDYFEMTLComputeCommandEncoder_useResource_usage";
        break;
      case 338:
        result = "kDYFEMTLComputeCommandEncoder_useResources_count_usage";
        break;
      case 339:
        result = "kDYFEMTLComputeCommandEncoder_useHeap";
        break;
      case 340:
        result = "kDYFEMTLComputeCommandEncoder_useHeaps_count";
        break;
      case 341:
        result = "kDYFEMTLRenderCommandEncoder_useResource_usage";
        break;
      case 342:
        result = "kDYFEMTLRenderCommandEncoder_useResources_count_usage";
        break;
      case 343:
        result = "kDYFEMTLRenderCommandEncoder_useHeap";
        break;
      case 344:
        result = "kDYFEMTLRenderCommandEncoder_useHeaps_count";
        break;
      case 345:
        result = "kDYFEMTLDevice_newLibraryWithURL_error";
        break;
      case 346:
        result = "kDYFEMTLLibrary_newExternFunctionWithName";
        break;
      case 347:
        result = "kDYFEMTLDevice_newArgumentEncoderWithArguments";
        break;
      case 348:
        result = "kDYFEMTLDevice_indirectArgumentBufferDecodingData";
        break;
      case 349:
        result = "kDYFEMTLDevice_setIndirectArgumentBufferDecodingData";
        break;
      case 350:
        result = "kDYFEMTLCaptureManager_notifySubmissionForEyeSPI_iosurface_bounds_submitFlags";
        break;
      case 351:
        result = "kDYFEMTLArgumentEncoder_setArgumentBuffer_startOffset_arrayElement";
        break;
      case 352:
        result = "kDYFEMTLTextureLayout_initializeTextureMemory";
        break;
      case 353:
        result = "kDYFEMTLDevice_newTiledTextureWithBytesNoCopy_length_descriptor_offset_bytesPerRow";
        break;
      case 354:
        result = "kDYFEMTLDevice_newTiledTextureWithBytesNoCopy_length_deallocator_descriptor_offset_bytesPerRow";
        break;
      case 355:
        result = "kDYFEMTLDevice_newLibraryWithCIFilters_imageFilterFunctionInfo_error";
        break;
      case 356:
        result = "kDYFEMTLParallelRenderCommandEncoder_setColorStoreActionOptions_atIndex";
        break;
      case 357:
        result = "kDYFEMTLParallelRenderCommandEncoder_setDepthStoreActionOptions";
        break;
      case 358:
        result = "kDYFEMTLParallelRenderCommandEncoder_setStencilStoreActionOptions";
        break;
      case 359:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setColorStoreActionOptions_atIndex";
        break;
      case 360:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setDepthStoreActionOptions";
        break;
      case 361:
        result = "kDYFEMTLFragmentRenderCommandEncoder_setStencilStoreActionOptions";
        break;
      case 362:
        result = "kDYFEMTLRenderCommandEncoder_setColorStoreActionOptions_atIndex";
        break;
      case 363:
        result = "kDYFEMTLRenderCommandEncoder_setDepthStoreActionOptions";
        break;
      case 364:
        result = "kDYFEMTLRenderCommandEncoder_setStencilStoreActionOptions";
        break;
      case 365:
        result = "kDYFEMTLCaptureManager_notifyPostPresentHandoffSPI";
        break;
      case 366:
        result = "kDYFEMTLDevice_newLibraryWithCIFiltersForComputePipeline_imageFilterFunctionInfo_error";
        break;
      case 367:
        result = "kDYFEMTLComputeCommandEncoder_setStageInRegionWithIndirectBuffer_indirectBufferOffset";
        break;
      case 368:
        result = "kDYFEMTLDevice_newIndirectRenderCommandEncoderWithBuffer";
        break;
      case 369:
        result = "kDYFEMTLDevice_newIndirectComputeCommandEncoderWithBuffer";
        break;
      case 370:
        result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithDispatchType";
        break;
      case 371:
        result = "kDYFEMTLCommandBuffer_videoCommandEncoder";
        break;
      case 372:
        result = "kDYFEMTLCommandBuffer_doCorruptCBSPI";
        break;
      case 373:
        result = "kDYFEMTLComputeCommandEncoder_useComputePipelineState";
        break;
      case 374:
        result = "kDYFEMTLComputeCommandEncoder_useComputePipelineStates_count";
        break;
      case 375:
        result = "kDYFEMTLComputeCommandEncoder_memoryBarrierWithScope";
        break;
      case 376:
        result = "kDYFEMTLComputeCommandEncoder_memoryBarrierWithResources_count";
        break;
      case 377:
        result = "kDYFEMTLRenderCommandEncoder_useRenderPipelineState";
        break;
      case 378:
        result = "kDYFEMTLRenderCommandEncoder_useRenderPipelineStates_count";
        break;
      case 379:
        result = "kDYFEMTLRenderCommandEncoder_executeCommandsInBuffer_startIndex";
        break;
      case 380:
        result = "kDYFEMTLRenderCommandEncoder_memoryBarrierWithScope_afterStages_beforeStages";
        break;
      case 381:
        result = "kDYFEMTLRenderCommandEncoder_memoryBarrierWithResources_count_afterStages_beforeStages";
        break;
      case 382:
        result = "kDYFEMTLArgumentEncoder_setRenderPipelineState_atIndex";
        break;
      case 383:
        result = "kDYFEMTLArgumentEncoder_setRenderPipelineStates_withRange";
        break;
      case 384:
        result = "kDYFEMTLArgumentEncoder_setComputePipelineState_atIndex";
        break;
      case 385:
        result = "kDYFEMTLArgumentEncoder_setComputePipelineStates_withRange";
        break;
      case 386:
        result = "kDYFEMTLDevice_minimumTextureBufferAlignmentForPixelFormat";
        break;
      case 387:
        result = "kDYFEMTLDevice_newEvent";
        break;
      case 388:
        result = "kDYFEMTLDevice_newSharedEvent";
        break;
      case 389:
        result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForGPUAccess";
        break;
      case 390:
        result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForGPUAccess_slice_level";
        break;
      case 391:
        result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForCPUAccess";
        break;
      case 392:
        result = "kDYFEMTLBlitCommandEncoder_optimizeContentsForCPUAccess_slice_level";
        break;
      case 393:
        result = "kDYFEMTLCommandBuffer_encodeWaitForEvent_value";
        break;
      case 394:
        result = "kDYFEMTLCommandBuffer_encodeSignalEvent_value";
        break;
      case 395:
        result = "kDYFEMTLComputePipelineState_resourceIndex";
        break;
      case 396:
        result = "kDYFEMTLRenderCommandEncoder_setPointSize";
        break;
      case 397:
        result = "kDYFEMTLRenderCommandEncoder_setClipPlane_p2_p3_p4_atIndex";
        break;
      case 398:
        result = "kDYFEMTLRenderCommandEncoder_setVertexSamplerState_lodMinClamp_lodMaxClamp_lodBias_atIndex";
        break;
      case 399:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentSamplerState_lodMinClamp_lodMaxClamp_lodBias_atIndex";
        break;
      case 400:
        result = "kDYFEMTLRenderCommandEncoder_setPrimitiveRestartEnabled_index";
        break;
      case 401:
        result = "kDYFEMTLSamplerState_resourceIndex";
        break;
      case 402:
        result = "kDYFEMTLSharedTextureHandle_dealloc";
        break;
      case 403:
        result = "kDYFEMTLTexture_newSharedHandle";
        break;
      case 404:
        result = "kDYFEMTLDevice_newSharedTextureWithDescriptor";
        break;
      case 405:
        result = "kDYFEMTLDevice_newSharedTextureWithHandle";
        break;
      case 406:
        result = "kDYFEMTLDevice_tileSizeWithTextureType_pixelFormat_sampleCount";
        break;
      case 407:
        result = "kDYFEMTLBlitCommandEncoder_getTextureAccessCounters_region_mipLevel_slice_resetCounters_countersBuffer_"
                 "countersBufferOffset";
        break;
      case 408:
        result = "kDYFEMTLBlitCommandEncoder_resetTextureAccessCounters_region_mipLevel_slice";
        break;
      case 409:
        result = "kDYFEMTLSharedEvent_setSignaledValue";
        break;
      case 410:
        result = "kDYFEMTLSharedEvent_setLabel";
        break;
      case 411:
        result = "kDYFEMTLSharedEvent_dealloc";
        break;
      case 412:
        result = "kDYFEMTLDevice_newIndirectCommandBufferWithDescriptor_maxCount_options";
        break;
      case 413:
        result = "kDYFEMTLDevice_reserveResourceIndicesForResourceType_indices_indexCount";
        break;
      case 414:
        result = "kDYFEMTLRenderCommandEncoder_setPrimitiveRestartEnabled";
        break;
      case 415:
        result = "kDYFEMTLDevice_newIndirectCommandBufferWithDescriptor_maxCommandCount_options";
        break;
      case 416:
        result = "kDYFEMTLDevice_getIndirectCommandBufferHeaderSize";
        break;
      case 417:
        result = "kDYFEMTLCommandBuffer_addPurgedResource";
        break;
      case 418:
        result = "kDYFEMTLCommandBuffer_addPurgedHeap";
        break;
      case 419:
        result = "kDYFEMTLComputeCommandEncoder_executeCommandsInBuffer_startIndex";
        break;
      case 420:
        result = "kDYFEMTLComputeCommandEncoder_executeCommandsInBuffer_withRange";
        break;
      case 421:
        result = "kDYFEMTLComputeCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset";
        break;
      case 422:
        result = "kDYFEMTLRenderCommandEncoder_executeCommandsInBuffer_withRange";
        break;
      case 423:
        result = "kDYFEMTLRenderCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset";
        break;
      case 424:
        result = "kDYFEMTLBlitCommandEncoder_resetCommandsInBuffer_withRange";
        break;
      case 425:
        result = "kDYFEMTLBlitCommandEncoder_copyIndirectCommandBuffer_sourceRange_destination_destinationIndex";
        break;
      case 426:
        result = "kDYFEMTLBlitCommandEncoder_optimizeIndirectCommandBuffer_withRange";
        break;
      case 427:
        result = "kDYFEMTLIndirectRenderCommand_dealloc";
        break;
      case 428:
        result = "kDYFEMTLIndirectRenderCommand_setRenderPipelineState";
        break;
      case 429:
        result = "kDYFEMTLIndirectRenderCommand_setVertexBuffer_offset_atIndex";
        break;
      case 430:
        result = "kDYFEMTLIndirectRenderCommand_setFragmentBuffer_offset_atIndex";
        break;
      case 431:
        result = "kDYFEMTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset"
                 "_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorB"
                 "ufferInstanceStride_tessellationFactorBufferScale";
        break;
      case 432:
        result = "kDYFEMTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset"
                 "_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorB"
                 "ufferInstanceStride";
        break;
      case 433:
        result = "kDYFEMTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffe"
                 "rOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFa"
                 "ctorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride_tessellationFactorBufferScale";
        break;
      case 434:
        result = "kDYFEMTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffe"
                 "rOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFa"
                 "ctorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride";
        break;
      case 435:
        result = "kDYFEMTLIndirectRenderCommand_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance";
        break;
      case 436:
        result = "kDYFEMTLIndirectRenderCommand_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_"
                 "instanceCount_baseVertex_baseInstance";
        break;
      case 437:
        result = "kDYFEMTLIndirectRenderCommand_nop";
        break;
      case 438:
        result = "kDYFEMTLIndirectRenderCommand_end";
        break;
      case 439:
        result = "kDYFEMTLIndirectRenderCommand_setTessellationFactorBuffer_offset_instanceStride";
        break;
      case 440:
        result = "kDYFEMTLIndirectRenderCommand_setTessellationFactorScale";
        break;
      case 441:
        result = "kDYFEMTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset"
                 "_instanceCount_baseInstance";
        break;
      case 442:
        result = "kDYFEMTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBuffe"
                 "rOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance";
        break;
      case 443:
        result = "kDYFEMTLIndirectRenderCommand_dispatchThreadsPerTile";
        break;
      case 444:
        result = "kDYFEMTLIndirectRenderCommand_setVertexArgument_offset_atIndex";
        break;
      case 445:
        result = "kDYFEMTLIndirectRenderCommand_setFragmentArgument_offset_atIndex";
        break;
      case 446:
        result = "kDYFEMTLIndirectRenderCommand_setTileArgument_offset_atIndex";
        break;
      case 447:
        result = "kDYFEMTLIndirectRenderCommand_setThreadgroupMemoryLength_offset_atIndex";
        break;
      case 448:
        result = "kDYFEMTLIndirectRenderCommand_endIndirectCommandBuffer";
        break;
      case 449:
        result = "kDYFEMTLIndirectComputeCommand_dealloc";
        break;
      case 450:
        result = "kDYFEMTLIndirectComputeCommand_setComputePipelineState";
        break;
      case 451:
        result = "kDYFEMTLIndirectComputeCommand_setKernelBuffer_offset_atIndex";
        break;
      case 452:
        result = "kDYFEMTLIndirectComputeCommand_dispatchThreadgroups_threadsPerThreadgroup";
        break;
      case 453:
        result = "kDYFEMTLIndirectComputeCommand_concurrentDispatchThreadgroups_threadsPerThreadgroup";
        break;
      case 454:
        result = "kDYFEMTLIndirectComputeCommand_nop";
        break;
      case 455:
        result = "kDYFEMTLIndirectComputeCommand_endIndirectCommandBuffer";
        break;
      case 456:
        result = "kDYFEMTLIndirectComputeCommand_setKernelArgument_offset_atIndex";
        break;
      case 457:
        result = "kDYFEMTLIndirectComputeCommand_setThreadgroupMemoryLength_atIndex";
        break;
      case 458:
        result = "kDYFEMTLIndirectComputeCommand_setStageInRegion";
        break;
      case 459:
        result = "kDYFEMTLIndirectCommandBuffer_setLabel";
        break;
      case 460:
        result = "kDYFEMTLIndirectCommandBuffer_setResponsibleProcess";
        break;
      case 461:
        result = "kDYFEMTLIndirectCommandBuffer_dealloc";
        break;
      case 462:
        result = "kDYFEMTLIndirectCommandBuffer_indirectRenderCommandAtIndex";
        break;
      case 463:
        result = "kDYFEMTLIndirectCommandBuffer_indirectComputeCommandAtIndex";
        break;
      case 464:
        result = "kDYFEMTLIndirectCommandBuffer_setPurgeableState";
        break;
      case 465:
        result = "kDYFEMTLIndirectCommandBuffer_makeAliasable";
        break;
      case 466:
        result = "kDYFEMTLIndirectCommandBuffer_isAliasable";
        break;
      case 467:
        result = "kDYFEMTLIndirectCommandBuffer_isPurgeable";
        break;
      case 468:
        result = "kDYFEMTLArgumentEncoder_setIndirectCommandBuffer_atIndex";
        break;
      case 469:
        result = "kDYFEMTLArgumentEncoder_setIndirectCommandBuffers_withRange";
        break;
      case 470:
        result = "kDYFEMTLBuffer_newRemoteBufferViewForDevice";
        break;
      case 471:
        result = "kDYFEMTLTexture_newRemoteTextureViewForDevice";
        break;
      case 472:
        result = "kDYFEMTLDevice_newSharedEventWithMachPort";
        break;
      case 473:
        result = "kDYFEMTLSharedEvent_eventPort";
        break;
      case 474:
        result = "kDYFEMTLTexture_newSharedTextureHandle";
        break;
      case 475:
        result = "kDYFEMTLDevice_newSharedEventWithHandle";
        break;
      case 476:
        result = "kDYFEMTLCommandBuffer_commitAndWaitUntilSubmitted";
        break;
      case 477:
        result = "kDYFEMTLSharedEvent_newSharedEventHandle";
        break;
      case 478:
        result = "kDYFEMTLIndirectRenderCommand_reset";
        break;
      case 479:
        result = "kDYFEMTLIndirectComputeCommand_reset";
        break;
      case 480:
        result = "kDYFEMTLBuffer_containsResource";
        break;
      case 481:
        result = "kDYFEMTLTexture_containsResource";
        break;
      case 482:
        result = "kDYFEMTLDevice_supportsPrimitiveType";
        break;
      case 483:
        result = "kDYFEMTLDevice_startCollectingPipelineDescriptorsUsingPrefixForNames";
        break;
      case 484:
        result = "kDYFEMTLDevice_newResourceGroupFromResources_count";
        break;
      case 485:
        result = "kDYFEMTLCommandBuffer_sampledComputeCommandEncoderWithDispatchType_programInfoBuffer_capacity";
        break;
      case 486:
        result = "kDYFEMTLCommandBuffer_setResourceGroups_count";
        break;
      case 487:
        result = "kDYFEMTLCommandBuffer_dropResourceGroups_count";
        break;
      case 488:
        result = "kDYFEMTLIndirectCommandBuffer_resetWithRange";
        break;
      case 489:
        result = "kDYFEMTLIndirectCommandBuffer_containsResource";
        break;
      case 490:
        result = "kDYFEMTLTexture_isShareable";
        break;
      case 491:
        result = "kDYFEMTLMotionEstimationPipeline_dealloc";
        break;
      case 492:
        result = "kDYFEMTLDevice_motionEstimatorCapabilities";
        break;
      case 493:
        result = "kDYFEMTLDevice_newMotionEstimationPipelineWithDescriptor";
        break;
      case 494:
        result = "kDYFEMTLVideoCommandEncoder_setLabel";
        break;
      case 495:
        result = "kDYFEMTLVideoCommandEncoder_dealloc";
        break;
      case 496:
        result = "kDYFEMTLVideoCommandEncoder_setMotionEstimationPipeline";
        break;
      case 497:
        result = "kDYFEMTLVideoCommandEncoder_generateMotionVectorsForTexture_previousTexture_resultBuffer_bufferOffset";
        break;
      case 498:
        result = "kDYFEMTLVideoCommandEncoder_waitForFence";
        break;
      case 499:
        result = "kDYFEMTLVideoCommandEncoder_updateFence";
        break;
      case 500:
        result = "kDYFEMTLVideoCommandEncoder_endEncoding";
        break;
      case 501:
        result = "kDYFEMTLVideoCommandEncoder_insertDebugSignpost";
        break;
      case 502:
        result = "kDYFEMTLVideoCommandEncoder_pushDebugGroup";
        break;
      case 503:
        result = "kDYFEMTLVideoCommandEncoder_popDebugGroup";
        break;
      case 504:
        result = "kDYFEMTLEvent_setLabel";
        break;
      case 505:
        result = "kDYFEMTLEvent_dealloc";
        break;
      case 506:
        result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinati"
                 "onLevel_sliceCount_levelCount";
        break;
      case 507:
        result = "kDYFEMTLBlitCommandEncoder_copyFromTexture_toTexture";
        break;
      case 508:
        result = "kDYFEMTLBlitCommandEncoder_resolveCountersWithIndexRange_sampleBuffer_resolvedBuffer";
        break;
      case 509:
        result = "kDYFEMTLBlitCommandEncoder_sampleCountersInBuffer_atIndex_allowOverlap";
        break;
      case 510:
        result = "kDYFEMTLBuffer_setResourceIndex";
        break;
      case 511:
        result = "kDYFEMTLCommandBuffer_debugBufferContentsWithLength";
        break;
      case 512:
        result = "kDYFEMTLCommandBuffer_encodeCacheControlFinalizeOperation_resourceGroups_count";
        break;
      case 513:
        result = "kDYFEMTLCommandBuffer_encodeCacheControlTagOperation_resourceGroups_count";
        break;
      case 514:
        result = "kDYFEMTLCommandBuffer_resourceStateCommandEncoder";
        break;
      case 515:
        result = "kDYFEMTLComputeCommandEncoder_sampleCountersInBuffer_atIndex_allowOverlap";
        break;
      case 516:
        result = "kDYFEMTLComputePipelineState_setResourceIndex";
        break;
      case 517:
        result = "kDYFEMTLCounterSampleBuffer_dealloc";
        break;
      case 518:
        result = "kDYFEMTLDeserializationContext_dealloc";
        break;
      case 519:
        result = "kDYFEMTLDeserializationContext_functionWithFunctionRef";
        break;
      case 520:
        result = "kDYFEMTLDevice_setCurrentUtilityBufferIndex";
        break;
      case 521:
        result = "kDYFEMTLDevice_setResourceIndirectionEnabled";
        break;
      case 522:
        result = "kDYFEMTLDevice_setUtilityBuffers";
        break;
      case 523:
        result = "kDYFEMTLDevice_addBufferToGlobalResourceTable";
        break;
      case 524:
        result = "kDYFEMTLDevice_addComputePipelineStateToGlobalResourceTable";
        break;
      case 525:
        result = "kDYFEMTLDevice_addIndirectCommandBufferToGlobalResourceTable";
        break;
      case 526:
        result = "kDYFEMTLDevice_addRenderPipelineStateToGlobalResourceTable";
        break;
      case 527:
        result = "kDYFEMTLDevice_addSamplerStateToGlobalResourceTable";
        break;
      case 528:
        result = "kDYFEMTLDevice_addTextureToGlobalResourceTable";
        break;
      case 529:
        result = "kDYFEMTLDevice_allowLibrariesFromOtherPlatforms";
        break;
      case 530:
        result = "kDYFEMTLDevice_createNewUtilityBuffer";
        break;
      case 531:
        result = "kDYFEMTLDevice_describeCounter";
        break;
      case 532:
        result = "kDYFEMTLDevice_indirectBufferAddressForResourceIndex_offset";
        break;
      case 533:
        result = "kDYFEMTLDevice_newBufferWithBytes_length_options_atResourceIndex";
        break;
      case 534:
        result = "kDYFEMTLDevice_newBufferWithBytesNoCopy_length_options_atResourceIndex_deallocator";
        break;
      case 535:
        result = "kDYFEMTLDevice_newBufferWithLength_options_atResourceIndex";
        break;
      case 536:
        result = "kDYFEMTLDevice_newCounterSampleBufferWithDescriptor_error";
        break;
      case 537:
        result = "kDYFEMTLDevice_newLibraryWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error";
        break;
      case 538:
        result = "kDYFEMTLDevice_newRasterizationRateMapWithScreenSize_layerCount_layers";
        break;
      case 539:
        result = "kDYFEMTLDevice_newRenderPipelineDescriptorWithSerializedData_deserializationContext";
        break;
      case 540:
        result = "kDYFEMTLDevice_offsetFromIndirectBufferAddress";
        break;
      case 541:
        result = "kDYFEMTLDevice_pollSampleBuffer_resolvedBuffer";
        break;
      case 542:
        result = "kDYFEMTLDevice_removeResourceFromGlobalResourceTable_resourceType";
        break;
      case 543:
        result = "kDYFEMTLDevice_requiresIndirectionForAllResourceTypes";
        break;
      case 544:
        result = "kDYFEMTLDevice_resolveCountersWithIndexRange_sampleBuffer";
        break;
      case 545:
        result = "kDYFEMTLDevice_resourceIndexFromIndirectBufferAddress";
        break;
      case 546:
        result = "kDYFEMTLDevice_sampleCountersAtInterval_sampleBuffer_error";
        break;
      case 547:
        result = "kDYFEMTLDevice_sampleTimeStamps_gpuTimeStamp";
        break;
      case 548:
        result = "kDYFEMTLDevice_serializeRenderPipelineDescriptor";
        break;
      case 549:
        result = "kDYFEMTLDevice_setGPUAssertionsEnabled";
        break;
      case 550:
        result = "kDYFEMTLDevice_setResourcesPurgeableState_newState_oldState_count";
        break;
      case 551:
        result = "kDYFEMTLDevice_useDeviceResourceTableForType";
        break;
      case 552:
        result = "kDYFEMTLDevice_utilityBufferForComputeCommandEncoder";
        break;
      case 553:
        result = "kDYFEMTLDevice_utilityBufferForRenderCommandEncoder";
        break;
      case 554:
        result = "kDYFEMTLFunction_newFunctionWithPluginData_bitcodeType";
        break;
      case 555:
        result = "kDYFEMTLHeap_newBufferWithLength_options_atOffset";
        break;
      case 556:
        result = "kDYFEMTLHeap_newTextureWithDescriptor_atOffset";
        break;
      case 557:
        result = "kDYFEMTLIndirectComputeCommand_clearBarrier";
        break;
      case 558:
        result = "kDYFEMTLIndirectComputeCommand_concurrentDispatchThreads_threadsPerThreadgroup";
        break;
      case 559:
        result = "kDYFEMTLIndirectComputeCommand_setBarrier";
        break;
      case 560:
        result = "kDYFEMTLIndirectComputeCommand_setImageBlockWidth_height";
        break;
      case 561:
        result = "kDYFEMTLRenderCommandEncoder_sampleCountersInBuffer_atIndex_allowOverlap";
        break;
      case 562:
        result = "kDYFEMTLRenderCommandEncoder_setVertexAmplificationCount_viewMappings";
        break;
      case 563:
        result = "kDYFEMTLRenderCommandEncoder_useHeap_stages";
        break;
      case 564:
        result = "kDYFEMTLRenderCommandEncoder_useHeaps_count_stages";
        break;
      case 565:
        result = "kDYFEMTLRenderCommandEncoder_useResource_usage_stages";
        break;
      case 566:
        result = "kDYFEMTLRenderCommandEncoder_useResources_count_usage_stages";
        break;
      case 567:
        result = "kDYFEMTLRenderPipelineState_setResourceIndex";
        break;
      case 568:
        result = "kDYFEMTLSamplerState_setResourceIndex";
        break;
      case 569:
        result = "kDYFEMTLTexture_setResourceIndex";
        break;
      case 570:
        result = "kDYFEMTLDevice_newComputePipelineDescriptorWithSerializedData_deserializationContext";
        break;
      case 571:
        result = "kDYFEMTLDevice_serializeComputePipelineDescriptor";
        break;
      case 572:
        result = "kDYFEMTLRenderCommandEncoder_setVertexAmplificationMode_value";
        break;
      case 573:
        result = "kDYFEMTLCommandQueue_getBackgroundGPUPriority";
        break;
      case 574:
        result = "kDYFEMTLCommandQueue_getGPUPriority";
        break;
      case 575:
        result = "kDYFEMTLCommandQueue_setBackgroundGPUPriority";
        break;
      case 576:
        result = "kDYFEMTLCommandQueue_setBackgroundGPUPriority_offset";
        break;
      case 577:
        result = "kDYFEMTLCommandQueue_setCompletionQueue";
        break;
      case 578:
        result = "kDYFEMTLCommandQueue_setGPUPriority";
        break;
      case 579:
        result = "kDYFEMTLCommandQueue_setGPUPriority_offset";
        break;
      case 580:
        result = "kDYFEMTLCommandQueue_setSubmissionQueue";
        break;
      case 581:
        result = "kDYFEMTLRasterizationRateMap_copyParameterDataToBuffer_atOffset";
        break;
      case 582:
        result = "kDYFEMTLBlitCommandEncoder_updateTextureMapping_mode_indirectBuffer_indirectBufferOffset";
        break;
      case 583:
        result = "kDYFEMTLRasterizationRateMap_dealloc";
        break;
      case 584:
        result = "kDYFEMTLBlitCommandEncoder_updateTextureMapping_mode_region_mipLevel_slice";
        break;
      case 585:
        result = "kDYFEMTLRasterizationRateMap_physicalCoordinate_forLayer";
        break;
      case 586:
        result = "kDYFEMTLBlitCommandEncoder_updateTextureMappings_mode_regions_mipLevels_slices_numRegions";
        break;
      case 587:
        result = "kDYFEMTLRasterizationRateMap_physicalSizeForLayer";
        break;
      case 588:
        result = "kDYFEMTLDevice_tileSizeWithSparsePageSize_textureType_pixelFormat_sampleCount";
        break;
      case 589:
        result = "kDYFEMTLRasterizationRateMap_screenCoordinate_forLayer";
        break;
      case 590:
        result = "kDYFEMTLResourceStateCommandEncoder_setLabel";
        break;
      case 591:
        result = "kDYFEMTLDevice_newRasterizationRateMapWithDescriptor";
        break;
      case 592:
        result = "kDYFEMTLResourceStateCommandEncoder_copyMappingStateFromTexture_mipLevel_slice_toBuffer_offset_numTiles";
        break;
      case 593:
        result = "kDYFEMTLDevice_supportsRasterizationRateMapWithLayerCount";
        break;
      case 594:
        result = "kDYFEMTLResourceStateCommandEncoder_dealloc";
        break;
      case 595:
        result = "kDYFEMTLResourceStateCommandEncoder_endEncoding";
        break;
      case 596:
        result = "kDYFEMTLResourceStateCommandEncoder_insertDebugSignpost";
        break;
      case 597:
        result = "kDYFEMTLResourceStateCommandEncoder_popDebugGroup";
        break;
      case 598:
        result = "kDYFEMTLResourceStateCommandEncoder_pushDebugGroup";
        break;
      case 599:
        result = "kDYFEMTLResourceStateCommandEncoder_updateFence";
        break;
      case 600:
        result = "kDYFEMTLResourceStateCommandEncoder_updateTextureMapping_mode_indirectBuffer_indirectBufferOffset";
        break;
      case 601:
        result = "kDYFEMTLResourceStateCommandEncoder_updateTextureMapping_mode_region_mipLevel_slice";
        break;
      case 602:
        result = "kDYFEMTLResourceStateCommandEncoder_updateTextureMappings_mode_regions_mipLevels_slices_numRegions";
        break;
      case 603:
        result = "kDYFEMTLResourceStateCommandEncoder_waitForFence";
        break;
      case 604:
        result = "kDYFEMTLDevice_supportsFamily";
        break;
      case 605:
        result = "kDYFEMTLDevice_supportsVersion";
        break;
      case 606:
        result = "kDYFEMTLHeap_newBufferWithLength_options_offset";
        break;
      case 607:
        result = "kDYFEMTLHeap_newTextureWithDescriptor_offset";
        break;
      case 608:
        result = "kDYFEMTLRasterizationRateMap_copyParameterDataToBuffer_offset";
        break;
      case 609:
        result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle";
        break;
      case 610:
        result = "kDYFEMTLDevice_newPrecompiledComputePipelineStateWithDescriptor_options_pipelineCache_completionHandler";
        break;
      case 611:
        result = "kDYFEMTLIndirectComputeCommand_setImageblockWidth_height";
        break;
      case 612:
        result = "kDYFEMTLLibrary_newFunctionWithName_constantValues_functionCache_error";
        break;
      case 613:
        result = "kDYFEMTLRasterizationRateMap_mapPhysicalToScreenCoordinates_forLayer";
        break;
      case 614:
        result = "kDYFEMTLRasterizationRateMap_mapScreenToPhysicalCoordinates_forLayer";
        break;
      case 615:
        result = "kDYFEMTLResourceGroup_dealloc";
        break;
      case 616:
        result = "kDYFEMTLBuffer_isComplete";
        break;
      case 617:
        result = "kDYFEMTLBuffer_waitUntilComplete";
        break;
      case 618:
        result = "kDYFEMTLIndirectCommandBuffer_doesAliasAllResources_count";
        break;
      case 619:
        result = "kDYFEMTLIndirectCommandBuffer_doesAliasAnyResources_count";
        break;
      case 620:
        result = "kDYFEMTLIndirectCommandBuffer_doesAliasResource";
        break;
      case 621:
        result = "kDYFEMTLIndirectCommandBuffer_isComplete";
        break;
      case 622:
        result = "kDYFEMTLIndirectCommandBuffer_waitUntilComplete";
        break;
      case 623:
        result = "kDYFEMTLTexture_isComplete";
        break;
      case 624:
        result = "kDYFEMTLTexture_waitUntilComplete";
        break;
      case 625:
        result = "kDYFEMTLDevice_convertSparsePixelRegions_toTileRegions_withTileSize_alignmentMode_numRegions";
        break;
      case 626:
        result = "kDYFEMTLDevice_convertSparseTileRegions_toPixelRegions_withTileSize_numRegions";
        break;
      case 627:
        result = "kDYFEMTLDevice_supportsVertexAmplificationCount";
        break;
      case 628:
        result = "kDYFEMTLBlitCommandEncoder_resolveCounters_inRange_destinationBuffer_destinationOffset";
        break;
      case 629:
        result = "kDYFEMTLBlitCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 630:
        result = "kDYFEMTLComputeCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 631:
        result = "kDYFEMTLCounterSampleBuffer_resolveCounterRange";
        break;
      case 632:
        result = "kDYFEMTLCounterSet_dealloc";
        break;
      case 633:
        result = "kDYFEMTLDevice_sampleTimestamps_gpuTimestamp";
        break;
      case 634:
        result = "kDYFEMTLRenderCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 635:
        result = "kDYFEMTLCommandBuffer_encodeWaitForEvent_value_timeout";
        break;
      case 636:
        result = "kDYFEMTLCounter_dealloc";
        break;
      case 637:
        result = "kDYFEMTLDevice_copyShaderCacheToPath";
        break;
      case 638:
        result = "kDYFEMTLDevice_serializeStructType_version";
        break;
      case 639:
        result = "kDYFEMTLPipelineCache_dealloc";
        break;
      case 640:
        result = "kDYFEMTLPipelineLibrary_setDisableRunTimeCompilation";
        break;
      case 641:
        result = "kDYFEMTLPipelineLibrary_setLabel";
        break;
      case 642:
        result = "kDYFEMTLPipelineLibrary_dealloc";
        break;
      case 643:
        result = "kDYFEMTLPipelineLibrary_newComputePipelineDescriptorWithName_error";
        break;
      case 644:
        result = "kDYFEMTLPipelineLibrary_newComputePipelineStateWithName_options_reflection_error";
        break;
      case 645:
        result = "kDYFEMTLPipelineLibrary_newRenderPipelineDescriptorWithName_error";
        break;
      case 646:
        result = "kDYFEMTLPipelineLibrary_newRenderPipelineStateWithName_options_reflection_error";
        break;
      case 647:
        result = "kDYFEMTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount";
        break;
      case 648:
        result = "kDYFEMTLCaptureManager_startCaptureWithDescriptor_error";
        break;
      case 649:
        result = "kDYFEMTLCaptureManager_startCaptureWithScope";
        break;
      case 650:
        result = "kDYFEMTLCaptureManager_newCaptureScopeWithDevice";
        break;
      case 651:
        result = "kDYFEMTLCaptureManager_newCaptureScopeWithCommandQueue";
        break;
      case 652:
        result = "kDYFEMTLComputeCommandEncoder_enableNullBufferBinds";
        break;
      case 653:
        result = "kDYFEMTLDevice_newFunctionWithGLIR_functionType";
        break;
      case 654:
        result = "kDYFEMTLDevice_newFunctionWithGLIR_inputsDescription_functionType";
        break;
      case 655:
        result = "kDYFEMTLRenderCommandEncoder_setAlphaTestReferenceValue";
        break;
      case 656:
        result = "kDYFEMTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_yInvert_atIndex";
        break;
      case 657:
        result = "kDYFEMTLRenderCommandEncoder_setDepthCleared";
        break;
      case 658:
        result = "kDYFEMTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level_yInvert";
        break;
      case 659:
        result = "kDYFEMTLRenderCommandEncoder_setProvokingVertexMode";
        break;
      case 660:
        result = "kDYFEMTLRenderCommandEncoder_setStencilCleared";
        break;
      case 661:
        result = "kDYFEMTLRenderCommandEncoder_setStencilResolveTexture_slice_depthPlane_level";
        break;
      case 662:
        result = "kDYFEMTLRenderCommandEncoder_setStencilResolveTexture_slice_depthPlane_level_yInvert";
        break;
      case 663:
        result = "kDYFEMTLRenderCommandEncoder_setTriangleFrontFillMode_backFillMode";
        break;
      case 664:
        result = "kDYFEMTLRenderCommandEncoder_setViewportTransformEnabled";
        break;
      case 665:
        result = "kDYFEMTLDevice_minLinearTextureBaseAddressAlignmentForDescriptor";
        break;
      case 666:
        result = "kDYFEMTLDevice_minLinearTexturePitchAlignmentForDescriptor_mustMatchExactly";
        break;
      case 667:
        result = "kDYFEMTLDevice_newBinaryArchiveWithDescriptor_error";
        break;
      case 668:
        result = "kDYFEMTLDevice_requiredLinearTextureBytesPerRowForDescriptor";
        break;
      case 669:
        result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_pipelineLibrary";
        break;
      case 670:
        result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_reflection_pipelineLibrary";
        break;
      case 671:
        result = "kDYFEMTLFunction_reflectionWithOptions_pipelineLibrary";
        break;
      case 672:
        result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithDispatchType_substreamCount";
        break;
      case 673:
        result = "kDYFEMTLComputeCommandEncoder_setSubstream";
        break;
      case 674:
        result = "kDYFEMTLComputeCommandEncoder_signalProgress";
        break;
      case 675:
        result = "kDYFEMTLComputeCommandEncoder_waitForProgress";
        break;
      case 676:
        result = "kDYFEMTLDevice_maximumComputeSubstreams";
        break;
      case 677:
        result = "kDYFEMTLDevice_newBufferWithBytes_length_options_gpuAddress";
        break;
      case 678:
        result = "kDYFEMTLDevice_newBufferWithBytesNoCopy_length_options_gpuAddress_deallocator";
        break;
      case 679:
        result = "kDYFEMTLDevice_newBufferWithLength_options_gpuAddress";
        break;
      case 680:
        result = "kDYFEMTLDevice_reserveGPUAddressRange";
        break;
      case 681:
        result = "kDYFEMTLCommandBuffer_addLoggingForType_handler";
        break;
      case 682:
        result = "kDYFEMTLCommandBufferEncoderInfo_dealloc";
        break;
      case 683:
        result = "kDYFEMTLCommandQueue_commandBufferWithDescriptor";
        break;
      case 684:
        result = "kDYFEMTLComputePipelineState_functionPointerHandleWithFunction";
        break;
      case 685:
        result = "kDYFEMTLComputePipelineState_functionPointerHandlesWithFunctions_range";
        break;
      case 686:
        result = "kDYFEMTLDevice_setCommandBufferErrorOptions";
        break;
      case 687:
        result = "kDYFEMTLDevice_newBinaryLibraryWithOptions_url_error";
        break;
      case 688:
        result = "kDYFEMTLDevice_newDynamicLibrary_computeDescriptor_error";
        break;
      case 689:
        result = "kDYFEMTLDevice_newDynamicLibrary_error";
        break;
      case 690:
        result = "kDYFEMTLDevice_newDynamicLibraryFromURL_error";
        break;
      case 691:
        result = "kDYFEMTLDevice_newLibraryWithDAG_functions_error";
        break;
      case 692:
        result = "kDYFEMTLFunctionLog_dealloc";
        break;
      case 693:
        result = "kDYFEMTLStackTraceEntry_dealloc";
        break;
      case 694:
        result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_resourceIndex";
        break;
      case 695:
        result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_resourceIndex";
        break;
      case 696:
        result = "kDYFEMTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_resourceIndex";
        break;
      case 697:
        result = "kDYFEMTLBinaryArchive_addComputePipelineStateWithDescriptor_error";
        break;
      case 698:
        result = "kDYFEMTLBinaryArchive_addLibrary_computePipelineDescriptor_error";
        break;
      case 699:
        result = "kDYFEMTLBinaryArchive_dealloc";
        break;
      case 700:
        result = "kDYFEMTLBinaryArchive_writeToURL_error";
        break;
      case 701:
        result = "kDYFEMTLBinaryLibrary_setLabel";
        break;
      case 702:
        result = "kDYFEMTLBinaryLibrary_addBinaryEntry";
        break;
      case 703:
        result = "kDYFEMTLBinaryLibrary_addComputePipelineFunctionsWithDescriptor_error";
        break;
      case 704:
        result = "kDYFEMTLBinaryLibrary_dealloc";
        break;
      case 705:
        result = "kDYFEMTLBinaryLibrary_getBinaryDataWithKey";
        break;
      case 706:
        result = "kDYFEMTLBinaryLibrary_removeComputePipelineFunctionsWithDescriptor_error";
        break;
      case 707:
        result = "kDYFEMTLBinaryLibrary_serializeToURL_error";
        break;
      case 708:
        result = "kDYFEMTLDynamicLibrary_setLabel";
        break;
      case 709:
        result = "kDYFEMTLDynamicLibrary_dealloc";
        break;
      case 710:
        result = "kDYFEMTLDynamicLibrary_serializeToURL_error";
        break;
      case 711:
        result = "kDYFEMTLCommandBuffer_accelerationStructureCommandEncoder";
        break;
      case 712:
        result = "kDYFEMTLDevice_accelerationStructureSizesWithDescriptor";
        break;
      case 713:
        result = "kDYFEMTLDevice_loadDynamicLibrariesForComputeDescriptor_error";
        break;
      case 714:
        result = "kDYFEMTLFunction_newArgumentEncoderWithBufferIndex_reflection_binaryArchives";
        break;
      case 715:
        result = "kDYFEMTLFunction_reflectionWithOptions_binaryArchives";
        break;
      case 716:
        result = "kDYFEMTLBinaryArchive_setLabel";
        break;
      case 717:
        result = "kDYFEMTLBinaryArchive_addBinaryEntry_forKey";
        break;
      case 718:
        result = "kDYFEMTLBinaryArchive_addComputePipelineFunctionsWithDescriptor_error";
        break;
      case 719:
        result = "kDYFEMTLBinaryArchive_addRenderPipelineFunctionsWithDescriptor_error";
        break;
      case 720:
        result = "kDYFEMTLBinaryArchive_addTileRenderPipelineFunctionsWithDescriptor_error";
        break;
      case 721:
        result = "kDYFEMTLBinaryArchive_getBinaryDataForKey";
        break;
      case 722:
        result = "kDYFEMTLBinaryArchive_serializeToURL_error";
        break;
      case 723:
        result = "kDYFEMTLAccelerationStructure_setLabel";
        break;
      case 724:
        result = "kDYFEMTLAccelerationStructure_setResponsibleProcess";
        break;
      case 725:
        result = "kDYFEMTLAccelerationStructure_dealloc";
        break;
      case 726:
        result = "kDYFEMTLAccelerationStructure_doesAliasAllResources_count";
        break;
      case 727:
        result = "kDYFEMTLAccelerationStructure_doesAliasAnyResources_count";
        break;
      case 728:
        result = "kDYFEMTLAccelerationStructure_doesAliasResource";
        break;
      case 729:
        result = "kDYFEMTLAccelerationStructure_isAliasable";
        break;
      case 730:
        result = "kDYFEMTLAccelerationStructure_isComplete";
        break;
      case 731:
        result = "kDYFEMTLAccelerationStructure_isPurgeable";
        break;
      case 732:
        result = "kDYFEMTLAccelerationStructure_isWriteComplete";
        break;
      case 733:
        result = "kDYFEMTLAccelerationStructure_makeAliasable";
        break;
      case 734:
        result = "kDYFEMTLAccelerationStructure_setPurgeableState";
        break;
      case 735:
        result = "kDYFEMTLAccelerationStructure_waitUntilComplete";
        break;
      case 736:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_setLabel";
        break;
      case 737:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset";
        break;
      case 738:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_copyAccelerationStructure_toAccelerationStructure";
        break;
      case 739:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_copyAndCompactAccelerationStructure_toAccelerationStructure";
        break;
      case 740:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_dealloc";
        break;
      case 741:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeAccelerationStructure_fromBuffer_offset";
        break;
      case 742:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_endEncoding";
        break;
      case 743:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_insertDebugSignpost";
        break;
      case 744:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_popDebugGroup";
        break;
      case 745:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_pushDebugGroup";
        break;
      case 746:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBu"
                 "ffer_scratchBufferOffset";
        break;
      case 747:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier";
        break;
      case 748:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_serializeAccelerationStructure_toBuffer_offset";
        break;
      case 749:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_updateFence";
        break;
      case 750:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_useHeap";
        break;
      case 751:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_useHeaps_count";
        break;
      case 752:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_useResource_usage";
        break;
      case 753:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_useResources_count_usage";
        break;
      case 754:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_waitForFence";
        break;
      case 755:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset";
        break;
      case 756:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_writeSerializedAccelerationStructureSize_toBuffer_offset";
        break;
      case 757:
        result = "kDYFEMTLArgumentEncoder_setAccelerationStructure_atIndex";
        break;
      case 758:
        result = "kDYFEMTLArgumentEncoder_setFunctionTable_atIndex";
        break;
      case 759:
        result = "kDYFEMTLArgumentEncoder_setFunctionTables_withRange";
        break;
      case 760:
        result = "kDYFEMTLCommandQueue_getSPIStats";
        break;
      case 761:
        result = "kDYFEMTLComputeCommandEncoder_setAccelerationStructure_atBufferIndex";
        break;
      case 762:
        result = "kDYFEMTLComputeCommandEncoder_setFunctionTable_atIndex";
        break;
      case 763:
        result = "kDYFEMTLComputeCommandEncoder_setFunctionTables_withRange";
        break;
      case 764:
        result = "kDYFEMTLComputePipelineState_functionHandleWithFunction";
        break;
      case 765:
        result = "kDYFEMTLComputePipelineState_functionHandlesWithFunctions";
        break;
      case 766:
        result = "kDYFEMTLComputePipelineState_newComputePipelineStateWithAdditionalDynamicFunctions";
        break;
      case 767:
        result = "kDYFEMTLDevice_compileVisibleFunction_withDescriptor_completionHandler";
        break;
      case 768:
        result = "kDYFEMTLDevice_compileVisibleFunction_withDescriptor_error";
        break;
      case 769:
        result = "kDYFEMTLDevice_newAccelerationStructureWithDescriptor";
        break;
      case 770:
        result = "kDYFEMTLDevice_newAccelerationStructureWithSize";
        break;
      case 771:
        result = "kDYFEMTLDevice_newDynamicLibraryWithURL_error";
        break;
      case 772:
        result = "kDYFEMTLDevice_newVisibleFunctionTableWithDescriptor";
        break;
      case 773:
        result = "kDYFEMTLDynamicLibrary_serializeToURL_options_error";
        break;
      case 774:
        result = "kDYFEMTLFunctionHandle_dealloc";
        break;
      case 775:
        result = "kDYFEMTLLibrary_newFunctionWithDescriptor_completionHandler";
        break;
      case 776:
        result = "kDYFEMTLLibrary_newFunctionWithDescriptor_error";
        break;
      case 777:
        result = "kDYFEMTLVisibleFunctionTable_setLabel";
        break;
      case 778:
        result = "kDYFEMTLVisibleFunctionTable_setResponsibleProcess";
        break;
      case 779:
        result = "kDYFEMTLVisibleFunctionTable_dealloc";
        break;
      case 780:
        result = "kDYFEMTLVisibleFunctionTable_doesAliasAllResources_count";
        break;
      case 781:
        result = "kDYFEMTLVisibleFunctionTable_doesAliasAnyResources_count";
        break;
      case 782:
        result = "kDYFEMTLVisibleFunctionTable_doesAliasResource";
        break;
      case 783:
        result = "kDYFEMTLVisibleFunctionTable_isAliasable";
        break;
      case 784:
        result = "kDYFEMTLVisibleFunctionTable_isPurgeable";
        break;
      case 785:
        result = "kDYFEMTLVisibleFunctionTable_makeAliasable";
        break;
      case 786:
        result = "kDYFEMTLVisibleFunctionTable_setFunction_atIndex";
        break;
      case 787:
        result = "kDYFEMTLVisibleFunctionTable_setFunctions_withRange";
        break;
      case 788:
        result = "kDYFEMTLVisibleFunctionTable_setPurgeableState";
        break;
      case 789:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeAccelerationStructure_fromBuffer_serializedBufferOffset";
        break;
      case 790:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeAccelerationStructure_primitiveAccelerationStruc"
                 "tures_fromBuffer_serializedBufferOffset";
        break;
      case 791:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_serializeAccelerationStructure_toBuffer_serializedBufferOffset";
        break;
      case 792:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_writeDeserializedAccelerationStructureSize_serializedOffset"
                 "_toBuffer_sizeBufferOffset";
        break;
      case 793:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_writeDeserializedPrimitiveAccelerationStructureSizes_serial"
                 "izedOffset_toBuffer_sizesBufferOffset";
        break;
      case 794:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGeometryOfAccelerationStructure_toBuffer_geometryBufferOffset";
        break;
      case 795:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGeometrySizeOfAccelerationStructure_toBuffer_sizeBufferOffset";
        break;
      case 796:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_writeSerializedAccelerationStructureSize_toBuffer_sizeBufferOffset";
        break;
      case 797:
        result = "kDYFEMTLCommandBuffer_blitCommandEncoderWithDescriptor";
        break;
      case 798:
        result = "kDYFEMTLCommandBuffer_computeCommandEncoderWithDescriptor";
        break;
      case 799:
        result = "kDYFEMTLCommandBuffer_resourceStateCommandEncoderWithDescriptor";
        break;
      case 800:
        result = "kDYFEMTLCommandBuffer_sampledComputeCommandEncoderWithDescriptor_programInfoBuffer_capacity";
        break;
      case 801:
        result = "kDYFEMTLComputeCommandEncoder_setIntersectionFunctionTable_atBufferIndex";
        break;
      case 802:
        result = "kDYFEMTLComputeCommandEncoder_setIntersectionFunctionTables_withBufferRange";
        break;
      case 803:
        result = "kDYFEMTLComputeCommandEncoder_setVisibleFunctionTable_atBufferIndex";
        break;
      case 804:
        result = "kDYFEMTLComputeCommandEncoder_setVisibleFunctionTables_withBufferRange";
        break;
      case 805:
        result = "kDYFEMTLComputePipelineState_newComputePipelineStateWithAdditionalBinaryFunctions";
        break;
      case 806:
        result = "kDYFEMTLComputePipelineState_newVisibleFunctionTableWithDescriptor";
        break;
      case 807:
        result = "kDYFEMTLDevice_newIntersectionFunctionTableWithDescriptor";
        break;
      case 808:
        result = "kDYFEMTLDevice_supportsCounterSampling";
        break;
      case 809:
        result = "kDYFEMTLDevice_supportsTextureWriteFPRoundingMode";
        break;
      case 810:
        result = "kDYFEMTLVisibleFunctionTable_setGlobalBuffer";
        break;
      case 811:
        result = "kDYFEMTLVisibleFunctionTable_setGlobalBufferOffset";
        break;
      case 812:
        result = "kDYFEMTLIntersectionFunctionTable_setGlobalBuffer";
        break;
      case 813:
        result = "kDYFEMTLIntersectionFunctionTable_setGlobalBufferOffset";
        break;
      case 814:
        result = "kDYFEMTLIntersectionFunctionTable_setLabel";
        break;
      case 815:
        result = "kDYFEMTLIntersectionFunctionTable_setResponsibleProcess";
        break;
      case 816:
        result = "kDYFEMTLIntersectionFunctionTable_dealloc";
        break;
      case 817:
        result = "kDYFEMTLIntersectionFunctionTable_doesAliasAllResources_count";
        break;
      case 818:
        result = "kDYFEMTLIntersectionFunctionTable_doesAliasAnyResources_count";
        break;
      case 819:
        result = "kDYFEMTLIntersectionFunctionTable_doesAliasResource";
        break;
      case 820:
        result = "kDYFEMTLIntersectionFunctionTable_isAliasable";
        break;
      case 821:
        result = "kDYFEMTLIntersectionFunctionTable_isComplete";
        break;
      case 822:
        result = "kDYFEMTLIntersectionFunctionTable_isPurgeable";
        break;
      case 823:
        result = "kDYFEMTLIntersectionFunctionTable_isWriteComplete";
        break;
      case 824:
        result = "kDYFEMTLIntersectionFunctionTable_makeAliasable";
        break;
      case 825:
        result = "kDYFEMTLIntersectionFunctionTable_setFunction_atIndex";
        break;
      case 826:
        result = "kDYFEMTLIntersectionFunctionTable_setFunctions_withRange";
        break;
      case 827:
        result = "kDYFEMTLIntersectionFunctionTable_setPurgeableState";
        break;
      case 828:
        result = "kDYFEMTLIntersectionFunctionTable_waitUntilComplete";
        break;
      case 829:
        result = "kDYFEMTLBinaryArchive_addComputePipelineFunctionsWithDescriptor_options_error";
        break;
      case 830:
        result = "kDYFEMTLBinaryArchive_addRenderPipelineFunctionsWithDescriptor_options_error";
        break;
      case 831:
        result = "kDYFEMTLBinaryArchive_addTileRenderPipelineFunctionsWithDescriptor_options_error";
        break;
      case 832:
        result = "kDYFEMTLAccelerationStructure_setDescriptor";
        break;
      case 833:
        result = "kDYFEMTLLibrary_newIntersectionFunctionWithDescriptor_completionHandler";
        break;
      case 834:
        result = "kDYFEMTLLibrary_newIntersectionFunctionWithDescriptor_error";
        break;
      case 835:
        result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTable_atBufferIndex";
        break;
      case 836:
        result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTables_withBufferRange";
        break;
      case 837:
        result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTable_atBufferIndex";
        break;
      case 838:
        result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTables_withBufferRange";
        break;
      case 839:
        result = "kDYFEMTLIntersectionFunctionTable_setBuffer_offset_atIndex";
        break;
      case 840:
        result = "kDYFEMTLIntersectionFunctionTable_setBuffers_offsets_withRange";
        break;
      case 841:
        result = "kDYFEMTLVisibleFunctionTable_setBuffer_offset_atIndex";
        break;
      case 842:
        result = "kDYFEMTLVisibleFunctionTable_setBuffers_offsets_withRange";
        break;
      case 843:
        result = "kDYFEMTLComputePipelineState_newComputePipelineStateWithAdditionalBinaryFunctions_error";
        break;
      case 844:
        result = "kDYFEMTLComputePipelineState_newIntersectionFunctionTableWithDescriptor";
        break;
      case 845:
        result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTable_atIndex";
        break;
      case 846:
        result = "kDYFEMTLArgumentEncoder_setIntersectionFunctionTables_withRange";
        break;
      case 847:
        result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTable_atIndex";
        break;
      case 848:
        result = "kDYFEMTLArgumentEncoder_setVisibleFunctionTables_withRange";
        break;
      case 849:
        result = "kDYFEMTLDevice_supportsTextureWriteRoundingMode";
        break;
      case 850:
        result = "kDYFEMTLTexture_didModifyData";
        break;
      case 851:
        result = "kDYFEMTLCommandBuffer_setSharedIndirectionTable";
        break;
      case 852:
        result = "kDYFEMTLDevice_newPrecompiledRenderPipelineStateWithDescriptor_options_pipelineCache_completionHandler";
        break;
      case 853:
        result = "kDYFEMTLDevice_newDynamicLibraryWithURL_options_error";
        break;
      case 854:
        result = "kDYFEMTLIntersectionFunctionTable_setOpaqueTriangleIntersectionFunctionWithSignature_atIndex";
        break;
      case 855:
        result = "kDYFEMTLIntersectionFunctionTable_setOpaqueTriangleIntersectionFunctionWithSignature_withRange";
        break;
      case 856:
        result = "kDYFEMTLVisibleFunctionTable_setValue_atIndex";
        break;
      case 857:
        result = "kDYFEMTLVisibleFunctionTable_setValue_withRange";
        break;
      case 858:
        result = "kDYFEMTLIntersectionFunctionTable_setVisibleFunctionTable_atBufferIndex";
        break;
      case 859:
        result = "kDYFEMTLIntersectionFunctionTable_setVisibleFunctionTables_withBufferRange";
        break;
      case 860:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerat"
                 "ionStructures_fromBuffer_serializedBufferOffset";
        break;
      case 861:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serial"
                 "izedBufferOffset";
        break;
      case 862:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_serializeInstanceAccelerationStructure_primitiveAcceleratio"
                 "nStructures_toBuffer_serializedBufferOffset";
        break;
      case 863:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_serializePrimitiveAccelerationStructure_toBuffer_serializedBufferOffset";
        break;
      case 864:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGenericBVHStructureOfAccelerationStructure_headerBuffe"
                 "r_headerBufferOffset_innerNodeBuffer_innerNodeBufferOffset_leafNodeBuffer_leafNodeBufferOffset_primitiv"
                 "eBuffer_primitiveBufferOffset";
        break;
      case 865:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_writeGenericBVHStructureSizesOfAccelerationStructure_toBuff"
                 "er_sizesBufferOffset";
        break;
      case 866:
        result = "kDYFEMTLComputeCommandEncoder_encodeEndDoWhile_offset_comparison_referenceValue";
        break;
      case 867:
        result = "kDYFEMTLComputeCommandEncoder_encodeEndIf";
        break;
      case 868:
        result = "kDYFEMTLComputeCommandEncoder_encodeEndWhile";
        break;
      case 869:
        result = "kDYFEMTLComputeCommandEncoder_encodeStartDoWhile";
        break;
      case 870:
        result = "kDYFEMTLComputeCommandEncoder_encodeStartElse";
        break;
      case 871:
        result = "kDYFEMTLComputeCommandEncoder_encodeStartIf_offset_comparison_referenceValue";
        break;
      case 872:
        result = "kDYFEMTLComputeCommandEncoder_encodeStartWhile_offset_comparison_referenceValue";
        break;
      case 873:
        result = "kDYFEMTLComputeCommandEncoder_insertCompressedTextureReinterpretationFlush";
        break;
      case 874:
        result = "kDYFEMTLComputeCommandEncoder_useResourceGroup_usage";
        break;
      case 875:
        result = "kDYFEMTLDevice_newBufferWithDescriptor";
        break;
      case 876:
        result = "kDYFEMTLRelocation_dealloc";
        break;
      case 877:
        result = "kDYFEMTLRenderCommandEncoder_useResourceGroup_usage_stages";
        break;
      case 878:
        result = "kDYFEMTLDevice_newAccelerationStructureWithSize_resourceIndex";
        break;
      case 879:
        result = "kDYFEMTLBuffer_setParentGPUAddress";
        break;
      case 880:
        result = "kDYFEMTLBuffer_setParentGPUSize";
        break;
      case 881:
        result = "kDYFEMTLComputeCommandEncoder_insertUncompressedToCompressedFlush";
        break;
      case 882:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset_sizeDataType";
        break;
      case 883:
        result = "kDYFEMTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_value_forIndex";
        break;
      case 884:
        result = "kDYFEMTLCommandBuffer_encodeDashboardTagForResourceGroup";
        break;
      case 885:
        result = "kDYFEMTLDevice_setPluginData";
        break;
      case 886:
        result = "kDYFEMTLDevice_loadDynamicLibrariesForComputeDescriptor_options_error";
        break;
      case 887:
        result = "kDYFEMTLDevice_loadDynamicLibrariesForFunction_insertLibraries_options_error";
        break;
      case 888:
        result = "kDYFEMTLDevice_newLateEvalEvent";
        break;
      case 889:
        result = "kDYFEMTLFunctionPointerHandle_dealloc";
        break;
      case 890:
        result = "kDYFEMTLFunctionPrivateArgument_dealloc";
        break;
      case 891:
        result = "kDYFEMTLFunctionStitchingAttribute_dealloc";
        break;
      case 892:
        result = "kDYFEMTLFunctionStitchingNode_dealloc";
        break;
      case 893:
        result = "kDYFEMTLLateEvalEvent_setLabel";
        break;
      case 894:
        result = "kDYFEMTLLateEvalEvent_setSignaledValue";
        break;
      case 895:
        result = "kDYFEMTLLateEvalEvent_dealloc";
        break;
      case 896:
        result = "kDYFEMTLLateEvalEvent_newSharedEventHandle";
        break;
      case 897:
        result = "kDYFEMTLLibrary_setShaderValidationEnabled";
        break;
      case 898:
        result = "kDYFEMTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion";
        break;
      case 899:
        result = "kDYFEMTLRenderCommandEncoder_setMeshAccelerationStructure_atBufferIndex";
        break;
      case 900:
        result = "kDYFEMTLRenderCommandEncoder_setMeshIntersectionFunctionTable_atBufferIndex";
        break;
      case 901:
        result = "kDYFEMTLRenderCommandEncoder_setMeshIntersectionFunctionTables_withBufferRange";
        break;
      case 902:
        result = "kDYFEMTLRenderCommandEncoder_setMeshVisibleFunctionTable_atBufferIndex";
        break;
      case 903:
        result = "kDYFEMTLRenderCommandEncoder_setMeshVisibleFunctionTables_withBufferRange";
        break;
      case 904:
        result = "kDYFEMTLRenderCommandEncoder_setObjectAccelerationStructure_atBufferIndex";
        break;
      case 905:
        result = "kDYFEMTLRenderCommandEncoder_setObjectIntersectionFunctionTable_atBufferIndex";
        break;
      case 906:
        result = "kDYFEMTLRenderCommandEncoder_setObjectIntersectionFunctionTables_withBufferRange";
        break;
      case 907:
        result = "kDYFEMTLRenderCommandEncoder_setObjectVisibleFunctionTable_atBufferIndex";
        break;
      case 908:
        result = "kDYFEMTLRenderCommandEncoder_setObjectVisibleFunctionTables_withBufferRange";
        break;
      case 909:
        result = "kDYFEMTLDevice_compileVisibleFunction_withDescriptor_destinationBinaryArchive_error";
        break;
      case 910:
        result = "kDYFEMTLBlitCommandEncoder_fillBuffer_range_pattern4";
        break;
      case 911:
        result = "kDYFEMTLBlitCommandEncoder_fillTexture_level_slice_region_bytes_length";
        break;
      case 912:
        result = "kDYFEMTLBlitCommandEncoder_fillTexture_level_slice_region_color";
        break;
      case 913:
        result = "kDYFEMTLBlitCommandEncoder_fillTexture_level_slice_region_color_pixelFormat";
        break;
      case 914:
        result = "kDYFEMTLBlitCommandEncoder_invalidateCompressedTexture";
        break;
      case 915:
        result = "kDYFEMTLBlitCommandEncoder_invalidateCompressedTexture_slice_level";
        break;
      case 916:
        result = "kDYFEMTLDevice_newLibraryWithGraphs_functions_error";
        break;
      case 917:
        result = "kDYFEMTLDevice_newLibraryWithGraphsSPI_functions_error";
        break;
      case 918:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerat"
                 "ionStructures_fromBuffer_serializedBufferOffset_withDescriptor";
        break;
      case 919:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serial"
                 "izedBufferOffset_withDescriptor";
        break;
      case 920:
        result = "kDYFEMTLDevice_newAccelerationStructureWithBuffer_offset";
        break;
      case 921:
        result = "kDYFEMTLRenderPipelineState_functionHandleWithFunction_stage";
        break;
      case 922:
        result = "kDYFEMTLRenderPipelineState_newIntersectionFunctionTableWithDescriptor_stage";
        break;
      case 923:
        result = "kDYFEMTLRenderPipelineState_newRenderPipelineStateWithAdditionalBinaryFunctions_error";
        break;
      case 924:
        result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableWithDescriptor_stage";
        break;
      case 925:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentAccelerationStructure_atBufferIndex";
        break;
      case 926:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentIntersectionFunctionTable_atBufferIndex";
        break;
      case 927:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentIntersectionFunctionTables_withBufferRange";
        break;
      case 928:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentVisibleFunctionTable_atBufferIndex";
        break;
      case 929:
        result = "kDYFEMTLRenderCommandEncoder_setFragmentVisibleFunctionTables_withBufferRange";
        break;
      case 930:
        result = "kDYFEMTLRenderCommandEncoder_setTileAccelerationStructure_atBufferIndex";
        break;
      case 931:
        result = "kDYFEMTLRenderCommandEncoder_setTileIntersectionFunctionTable_atBufferIndex";
        break;
      case 932:
        result = "kDYFEMTLRenderCommandEncoder_setTileIntersectionFunctionTables_withBufferRange";
        break;
      case 933:
        result = "kDYFEMTLRenderCommandEncoder_setTileVisibleFunctionTable_atBufferIndex";
        break;
      case 934:
        result = "kDYFEMTLRenderCommandEncoder_setTileVisibleFunctionTables_withBufferRange";
        break;
      case 935:
        result = "kDYFEMTLRenderCommandEncoder_setVertexAccelerationStructure_atBufferIndex";
        break;
      case 936:
        result = "kDYFEMTLRenderCommandEncoder_setVertexIntersectionFunctionTable_atBufferIndex";
        break;
      case 937:
        result = "kDYFEMTLRenderCommandEncoder_setVertexIntersectionFunctionTables_withBufferRange";
        break;
      case 938:
        result = "kDYFEMTLRenderCommandEncoder_setVertexVisibleFunctionTable_atBufferIndex";
        break;
      case 939:
        result = "kDYFEMTLRenderCommandEncoder_setVertexVisibleFunctionTables_withBufferRange";
        break;
      case 940:
        result = "kDYFEMTLRenderPipelineState_fragmentFunctionHandleWithFunction";
        break;
      case 941:
        result = "kDYFEMTLRenderPipelineState_newFragmentIntersectionFunctionTableWithDescriptor";
        break;
      case 942:
        result = "kDYFEMTLRenderPipelineState_newTileIntersectionFunctionTableWithDescriptor";
        break;
      case 943:
        result = "kDYFEMTLRenderPipelineState_newVertexIntersectionFunctionTableWithDescriptor";
        break;
      case 944:
        result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromFragmentStageWithDescriptor";
        break;
      case 945:
        result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromTileStageWithDescriptor";
        break;
      case 946:
        result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromVertexStageWithDescriptor";
        break;
      case 947:
        result = "kDYFEMTLRenderPipelineState_tileFunctionHandleWithFunction";
        break;
      case 948:
        result = "kDYFEMTLRenderPipelineState_vertexFunctionHandleWithFunction";
        break;
      case 949:
        result = "kDYFEMTLDevice_newLibraryWithDescriptor_error";
        break;
      case 950:
        result = "kDYFEMTLDevice_newLibraryWithDescriptorSPI_error";
        break;
      case 951:
        result = "kDYFEMTLDevice_getBVHBuilderLock";
        break;
      case 952:
        result = "kDYFEMTLDevice_getRawBVHBuilderPtr";
        break;
      case 953:
        result = "kDYFEMTLDevice_setRawBVHBuilderPtr";
        break;
      case 954:
        result = "kDYFEMTLDevice_newFunctionWithGLCoreIR_functionType";
        break;
      case 955:
        result = "kDYFEMTLDevice_newFunctionWithGLCoreIR_inputsDescription_functionType";
        break;
      case 956:
        result = "kDYFEMTLDevice_newFunctionWithGLESIR_functionType";
        break;
      case 957:
        result = "kDYFEMTLDevice_newFunctionWithGLESIR_inputsDescription_functionType";
        break;
      case 958:
        result = "kDYFEMTLBinaryArchive_addLibraryWithDescriptor_error";
        break;
      case 959:
        result = "kDYFEMTLDevice_newLibraryWithDescriptor_completionHandler";
        break;
      case 960:
        result = "kDYFEMTLLateEvalEvent_waitUntilSignaledValue_timeoutMS";
        break;
      case 961:
        result = "kDYFEMTLLibrary_serializeToURL_error";
        break;
      case 962:
        result = "kDYFEMTLSharedEvent_waitUntilSignaledValue_timeoutMS";
        break;
      case 963:
        result = "kDYFEMTLDevice_newLibraryWithStitchedDescriptor_completionHandler";
        break;
      case 964:
        result = "kDYFEMTLDevice_newLibraryWithStitchedDescriptor_error";
        break;
      case 965:
        result = "kDYFEMTLDevice_newLibraryWithStitchedDescriptorSPI_error";
        break;
      case 966:
        result = "kDYFEMTLDevice_deserializeInstanceAccelerationStructureFromBytes_primitiveAccelerationStructures_withDescriptor";
        break;
      case 967:
        result = "kDYFEMTLDevice_deserializePrimitiveAccelerationStructureFromBytes_withDescriptor";
        break;
      case 968:
        result = "kDYFEMTLRenderCommandEncoder_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 969:
        result = "kDYFEMTLRenderCommandEncoder_drawMeshThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerObje"
                 "ctThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 970:
        result = "kDYFEMTLRenderCommandEncoder_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 971:
        result = "kDYFEMTLRenderPipelineState_setUsesMeshShaderEmulation";
        break;
      case 972:
        result = "kDYFEMTLRasterizationRateMap_formattedDescription";
        break;
      case 973:
        result = "kDYFEMTLRasterizationRateMap_resetUsingDescriptor";
        break;
      case 974:
        result = "kDYFEMTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_values_indices_count";
        break;
      case 975:
        result = "kDYFEMTLBinaryArchive_addMeshRenderPipelineFunctionsWithDescriptor_error";
        break;
      case 976:
        result = "kDYFEMTLBinaryArchive_addMeshRenderPipelineFunctionsWithDescriptor_options_error";
        break;
      case 977:
        result = "kDYFEMTLBinaryArchive_storeMeshRenderPipelineDescriptor";
        break;
      case 978:
        result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_completionHandler";
        break;
      case 979:
        result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_error";
        break;
      case 980:
        result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_options_completionHandler";
        break;
      case 981:
        result = "kDYFEMTLDevice_newRenderPipelineStateWithMeshDescriptor_options_reflection_error";
        break;
      case 982:
        result = "kDYFEMTLDevice_writeMeshShaderEmulatorDataStructureHeader_meshShaderPSO_scalingFactor";
        break;
      case 983:
        result = "kDYFEMTLRenderCommandEncoder_setMeshBuffer_offset_atIndex";
        break;
      case 984:
        result = "kDYFEMTLRenderCommandEncoder_setMeshBufferOffset_atIndex";
        break;
      case 985:
        result = "kDYFEMTLRenderCommandEncoder_setMeshBuffers_offsets_withRange";
        break;
      case 986:
        result = "kDYFEMTLRenderCommandEncoder_setMeshBytes_length_atIndex";
        break;
      case 987:
        result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerState_atIndex";
        break;
      case 988:
        result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 989:
        result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 990:
        result = "kDYFEMTLRenderCommandEncoder_setMeshSamplerStates_withRange";
        break;
      case 991:
        result = "kDYFEMTLRenderCommandEncoder_setMeshTexture_atIndex";
        break;
      case 992:
        result = "kDYFEMTLRenderCommandEncoder_setMeshTextures_withRange";
        break;
      case 993:
        result = "kDYFEMTLRenderCommandEncoder_setObjectBuffer_offset_atIndex";
        break;
      case 994:
        result = "kDYFEMTLRenderCommandEncoder_setObjectBufferOffset_atIndex";
        break;
      case 995:
        result = "kDYFEMTLRenderCommandEncoder_setObjectBuffers_offsets_withRange";
        break;
      case 996:
        result = "kDYFEMTLRenderCommandEncoder_setObjectBytes_length_atIndex";
        break;
      case 997:
        result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerState_atIndex";
        break;
      case 998:
        result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerState_lodMinClamp_lodMaxClamp_atIndex";
        break;
      case 999:
        result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerStates_lodMinClamps_lodMaxClamps_withRange";
        break;
      case 1000:
        result = "kDYFEMTLRenderCommandEncoder_setObjectSamplerStates_withRange";
        break;
      case 1001:
        result = "kDYFEMTLRenderCommandEncoder_setObjectTexture_atIndex";
        break;
      case 1002:
        result = "kDYFEMTLRenderCommandEncoder_setObjectTextures_withRange";
        break;
      case 1003:
        result = "kDYFEMTLRenderCommandEncoder_setObjectThreadgroupMemoryLength_atIndex";
        break;
      case 1004:
        result = "kDYFEMTLRenderPipelineState_setEmulationMeshMaxPrimitiveCount";
        break;
      case 1005:
        result = "kDYFEMTLRenderPipelineState_setEmulationMeshMaxVertexCount";
        break;
      case 1006:
        result = "kDYFEMTLRenderPipelineState_setEmulationMeshShaderIntermediateBufferSlot";
        break;
      case 1007:
        result = "kDYFEMTLRenderPipelineState_setEmulationMeshShaderPSO";
        break;
      case 1008:
        result = "kDYFEMTLRenderPipelineState_setEmulationMeshSize";
        break;
      case 1009:
        result = "kDYFEMTLRenderPipelineState_setEmulationObjectShaderIntermediateBufferSlot";
        break;
      case 1010:
        result = "kDYFEMTLRenderPipelineState_setEmulationObjectShaderPSO";
        break;
      case 1011:
        result = "kDYFEMTLRenderPipelineState_setEmulationVertexShaderIntermediateBufferSlot";
        break;
      case 1012:
        result = "kDYFEMTLRenderPipelineState_meshFunctionHandleWithFunction";
        break;
      case 1013:
        result = "kDYFEMTLRenderPipelineState_newMeshIntersectionFunctionTableWithDescriptor";
        break;
      case 1014:
        result = "kDYFEMTLRenderPipelineState_newObjectIntersectionFunctionTableWithDescriptor";
        break;
      case 1015:
        result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromMeshStageWithDescriptor";
        break;
      case 1016:
        result = "kDYFEMTLRenderPipelineState_newVisibleFunctionTableFromObjectStageWithDescriptor";
        break;
      case 1017:
        result = "kDYFEMTLRenderPipelineState_objectFunctionHandleWithFunction";
        break;
      case 1018:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBu"
                 "ffer_scratchBufferOffset_options";
        break;
      case 1019:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_writeAccelerationStructureSerializationData_toBuffer_offset";
        break;
      case 1020:
        result = "kDYFEMTLCommandBuffer_accelerationStructureCommandEncoderWithDescriptor";
        break;
      case 1021:
        result = "kDYFEMTLDevice_deserializeInstanceAccelerationStructure_fromBytes_primitiveAccelerationStructures_withDescriptor";
        break;
      case 1022:
        result = "kDYFEMTLDevice_deserializePrimitiveAccelerationStructure_fromBytes_withDescriptor";
        break;
      case 1023:
        result = "kDYFEMTLDevice_heapAccelerationStructureSizeAndAlignWithDescriptor";
        break;
      case 1024:
        result = "kDYFEMTLDevice_heapAccelerationStructureSizeAndAlignWithSize";
        break;
      case 1025:
        result = "kDYFEMTLDevice_newAccelerationStructureWithBuffer_offset_resourceIndex";
        break;
      case 1026:
        result = "kDYFEMTLDevice_newAccelerationStructureWithSize_withDescriptor";
        break;
      case 1027:
        result = "kDYFEMTLBuffer__aneIOSurface";
        break;
      case 1028:
        result = "kDYFEMTLHeap_newAccelerationStructureWithDescriptor";
        break;
      case 1029:
        result = "kDYFEMTLHeap_newAccelerationStructureWithDescriptor_offset";
        break;
      case 1030:
        result = "kDYFEMTLHeap_newAccelerationStructureWithSize";
        break;
      case 1031:
        result = "kDYFEMTLHeap_newAccelerationStructureWithSize_offset";
        break;
      case 1032:
        result = "kDYFEMTLHeap_newAccelerationStructureWithSize_offset_resourceIndex";
        break;
      case 1033:
        result = "kDYFEMTLHeap_newAccelerationStructureWithSize_resourceIndex";
        break;
      case 1034:
        result = "kDYFEMTLDevice_newIOCommandQueueWithDescriptor_error";
        break;
      case 1035:
        result = "kDYFEMTLDevice_newIOHandleWithURL_compressionType_error";
        break;
      case 1036:
        result = "kDYFEMTLDevice_newIOHandleWithURL_error";
        break;
      case 1037:
        result = "kDYFEMTLDevice_newPerformanceStateAssertion_error";
        break;
      case 1038:
        result = "kDYFEMTLIOCommandBuffer_setStatus";
        break;
      case 1039:
        result = "kDYFEMTLIOCommandBuffer_addCompletedHandler";
        break;
      case 1040:
        result = "kDYFEMTLIOCommandBuffer_barrier";
        break;
      case 1041:
        result = "kDYFEMTLIOCommandBuffer_commit";
        break;
      case 1042:
        result = "kDYFEMTLIOCommandBuffer_copyStatusToBuffer_offset";
        break;
      case 1043:
        result = "kDYFEMTLIOCommandBuffer_dealloc";
        break;
      case 1044:
        result = "kDYFEMTLIOCommandBuffer_encodeSignalEvent_value";
        break;
      case 1045:
        result = "kDYFEMTLIOCommandBuffer_encodeWaitForEvent_value";
        break;
      case 1046:
        result = "kDYFEMTLIOCommandBuffer_loadBuffer_offset_size_handle_handleOffset";
        break;
      case 1047:
        result = "kDYFEMTLIOCommandBuffer_loadTexture_slice_level_size_bytesPerRow_bytesPerImage_dstOrigin_handle_handleOffset";
        break;
      case 1048:
        result = "kDYFEMTLIOCommandBuffer_tryCancel";
        break;
      case 1049:
        result = "kDYFEMTLIOCommandBuffer_waitUntilCompleted";
        break;
      case 1050:
        result = "kDYFEMTLIOCommandQueue_barrier";
        break;
      case 1051:
        result = "kDYFEMTLIOCommandQueue_commandBuffer";
        break;
      case 1052:
        result = "kDYFEMTLIOCommandQueue_dealloc";
        break;
      case 1053:
        result = "kDYFEMTLIOScratchBuffer_dealloc";
        break;
      case 1054:
        result = "kDYFEMTLIOScratchBufferAllocator_allocateScratchBufferWithMinimumSize";
        break;
      case 1055:
        result = "kDYFEMTLIOScratchBufferAllocator_dealloc";
        break;
      case 1056:
        result = "kDYFEMTLIOHandle_dealloc";
        break;
      case 1057:
        result = "kDYFEMTLBinaryArchive_getArchiveIDWithError";
        break;
      case 1058:
        result = "kDYFEMTLCommandBuffer_presentDrawable_options";
        break;
      case 1059:
        result = "kDYFEMTLEvent_setEnableBarrier";
        break;
      case 1060:
        result = "kDYFEMTLLateEvalEvent_setEnableBarrier";
        break;
      case 1061:
        result = "kDYFEMTLLibrary_bitCodeListForFunctions";
        break;
      case 1062:
        result = "kDYFEMTLLibrary_bitCodeWithHash";
        break;
      case 1063:
        result = "kDYFEMTLSharedEvent_setEnableBarrier";
        break;
      case 1064:
        result = "kDYFEMTLDeadlineProfile_dealloc";
        break;
      case 1065:
        result = "kDYFEMTLRenderPipelineState_setEmulationPrimitiveTopology";
        break;
      case 1066:
        result = "kDYFEMTLCommandBuffer_commitWithDeadline";
        break;
      case 1067:
        result = "kDYFEMTLDevice_newProfileWithExecutionSize";
        break;
      case 1068:
        result = "kDYFEMTLCommandBuffer_commitAndWaitUntilSubmittedWithDeadline";
        break;
      case 1069:
        result = "kDYFEMTLDevice_sparseTileSizeInBytesForSparsePageSize";
        break;
      case 1070:
        result = "kDYFEMTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount_sparsePageSize";
        break;
      case 1071:
        result = "kDYFEMTLIOCommandBuffer_setLabel";
        break;
      case 1072:
        result = "kDYFEMTLIOCommandBuffer_enqueue";
        break;
      case 1073:
        result = "kDYFEMTLIOCommandBuffer_loadBuffer_offset_size_sourceHandle_sourceHandleOffset";
        break;
      case 1074:
        result = "kDYFEMTLIOCommandBuffer_loadTexture_slice_level_size_sourceBytesPerRow_sourceBytesPerImage_destinationO"
                 "rigin_sourceHandle_sourceHandleOffset";
        break;
      case 1075:
        result = "kDYFEMTLIOCommandBuffer_signalEvent_value";
        break;
      case 1076:
        result = "kDYFEMTLIOCommandBuffer_waitForEvent_value";
        break;
      case 1077:
        result = "kDYFEMTLIOCommandQueue_setLabel";
        break;
      case 1078:
        result = "kDYFEMTLIOCommandQueue_commandBufferWithUnretainedReferences";
        break;
      case 1079:
        result = "kDYFEMTLIOHandle_setLabel";
        break;
      case 1080:
        result = "kDYFEMTLIOHandle_decompress_size_offset_stagingBuffer_stagingBufferSize";
        break;
      case 1081:
        result = "kDYFEMTLIOHandle_getHandleOffset_offset";
        break;
      case 1082:
        result = "kDYFEMTLIOHandle_read_size_offset_stagingBuffer_stagingBufferSize";
        break;
      case 1083:
        result = "kDYFEMTLIOHandle_readIntoStagingBuffer_offset_stagingBuffer_stagingBufferSize";
        break;
      case 1084:
        result = "kDYFEMTLIOHandle_stagingBufferSize_offset";
        break;
      case 1085:
        result = "kDYFEMTLIOScratchBufferAllocator_newScratchBufferWithMinimumSize";
        break;
      case 1086:
        result = "kDYFEMTLDevice_getMostCompatibleArchitecture";
        break;
      case 1087:
        result = "kDYFEMTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion_withRenderTargetArrayIndex";
        break;
      case 1088:
        result = "kDYFEMTLDevice_newIOHandleWithURL_compressionMethod_error";
        break;
      case 1089:
        result = "kDYFEMTLIOCommandBuffer_addBarrier";
        break;
      case 1090:
        result = "kDYFEMTLIOCommandBuffer_loadBytes_size_sourceHandle_sourceHandleOffset";
        break;
      case 1091:
        result = "kDYFEMTLIOCommandBuffer_popDebugGroup";
        break;
      case 1092:
        result = "kDYFEMTLIOCommandBuffer_pushDebugGroup";
        break;
      case 1093:
        result = "kDYFEMTLIOCommandQueue_enqueueBarrier";
        break;
      case 1094:
        result = "kDYFEMTLIOFileHandle_setLabel";
        break;
      case 1095:
        result = "kDYFEMTLIOFileHandle_dealloc";
        break;
      case 1096:
        result = "kDYFEMTLRenderPipelineState_setEmulationPayloadMemoryLength";
        break;
      case 1097:
        result = "kDYFEMTLAccelerationStructureCommandEncoder_writeAccelerationStructureTraversalDepth_toBuffer_offset";
        break;
      case 1098:
        result = "kDYFEMTLCommandBuffer_encodeConditionalAbortEvent";
        break;
      case 1099:
        result = "kDYFEMTLCommandBuffer_encodeSignalEvent_value_agentMask";
        break;
      case 1100:
        result = "kDYFEMTLComputeCommandEncoder_setBuffer_offset_attributeStride_atIndex";
        break;
      case 1101:
        result = "kDYFEMTLComputeCommandEncoder_setBufferOffset_attributeStride_atIndex";
        break;
      case 1102:
        result = "kDYFEMTLComputeCommandEncoder_setBuffers_offsets_attributeStrides_withRange";
        break;
      case 1103:
        result = "kDYFEMTLComputeCommandEncoder_setBytes_length_attributeStride_atIndex";
        break;
      case 1104:
        result = "kDYFEMTLComputeCommandEncoder_setThreadgroupDistributionMode";
        break;
      case 1105:
        result = "kDYFEMTLComputeCommandEncoder_setThreadgroupDistributionModeWithClusterGroupIndex";
        break;
      case 1106:
        result = "kDYFEMTLComputeCommandEncoder_setThreadgroupPackingDisabled";
        break;
      case 1107:
        result = "kDYFEMTLIndirectComputeCommand_setKernelBuffer_offset_attributeStride_atIndex";
        break;
      case 1108:
        result = "kDYFEMTLIndirectRenderCommand_setVertexBuffer_offset_attributeStride_atIndex";
        break;
      case 1109:
        result = "kDYFEMTLRenderCommandEncoder_setVertexBuffer_offset_attributeStride_atIndex";
        break;
      case 1110:
        result = "kDYFEMTLRenderCommandEncoder_setVertexBufferOffset_attributeStride_atIndex";
        break;
      case 1111:
        result = "kDYFEMTLRenderCommandEncoder_setVertexBuffers_offsets_attributeStrides_withRange";
        break;
      case 1112:
        result = "kDYFEMTLRenderCommandEncoder_setVertexBytes_length_attributeStride_atIndex";
        break;
      case 1113:
        result = "kDYFEMTLResourceStateCommandEncoder_moveTextureMappingsFromTexture_sourceSlice_sourceLevel_sourceOrigin"
                 "_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin";
        break;
      case 1114:
        result = "kDYFEMTLDevice_setShouldMaximizeConcurrentCompilation";
        break;
      case 1115:
        result = "kDYFEMTLDevice_newEventWithOptions";
        break;
      case 1116:
        result = "kDYFEMTLDevice_newSharedEventWithOptions";
        break;
      case 1117:
        result = "kDYFEMTLDevice_setCompilerProcessesCount";
        break;
      case 1118:
        result = "kDYFEMTLIndirectRenderCommand_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 1119:
        result = "kDYFEMTLIndirectRenderCommand_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup";
        break;
      case 1120:
        result = "kDYFEMTLIndirectRenderCommand_setMeshBuffer_offset_atIndex";
        break;
      case 1121:
        result = "kDYFEMTLIndirectRenderCommand_setObjectBuffer_offset_atIndex";
        break;
      case 1122:
        result = "kDYFEMTLIndirectRenderCommand_setObjectThreadgroupMemoryLength_atIndex";
        break;
      case 1123:
        result = "kDYFEMTLDevice_newArgumentEncoderWithBufferBinding";
        break;
      case 1124:
        result = "kDYFEMTLDevice_newIOFileHandleWithURL_compressionMethod_error";
        break;
      case 1125:
        result = "kDYFEMTLDevice_newIOFileHandleWithURL_error";
        break;
      case 1126:
        result = "kDYFEMTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_atIndex";
        break;
      case 1127:
        result = "kDYFEMTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_withRange";
        break;
      case 1128:
        result = "kDYFEMTLCommandBuffer_setPrivateLoggingBuffer";
        break;
      case 1129:
        result = "kDYFEMTLCommandBuffer_setResponsibleTaskIDs_count";
        break;
      case 1130:
        result = "kDYFEMTLCommandBuffer_useResidencySet";
        break;
      case 1131:
        result = "kDYFEMTLCommandBuffer_useResidencySets_count";
        break;
      case 1132:
        result = "kDYFEMTLCommandQueue_addResidencySet";
        break;
      case 1133:
        result = "kDYFEMTLCommandQueue_addResidencySets_count";
        break;
      case 1134:
        result = "kDYFEMTLCommandQueue_removeResidencySet";
        break;
      case 1135:
        result = "kDYFEMTLCommandQueue_removeResidencySets_count";
        break;
      case 1136:
        result = "kDYFEMTLComputeCommandEncoder_useResidencySet";
        break;
      case 1137:
        result = "kDYFEMTLComputeCommandEncoder_useResidencySets_count";
        break;
      case 1138:
        result = "kDYFEMTLDevice_setWritableHeapsEnabled";
        break;
      case 1139:
        result = "kDYFEMTLDevice_newResidencySetWithDescriptor_error";
        break;
      case 1140:
        result = "kDYFEMTLRenderCommandEncoder_useResidencySet";
        break;
      case 1141:
        result = "kDYFEMTLRenderCommandEncoder_useResidencySets_count";
        break;
      case 1142:
        result = "kDYFEMTLResidencySet_addHeap";
        break;
      case 1143:
        result = "kDYFEMTLResidencySet_addHeaps_count";
        break;
      case 1144:
        result = "kDYFEMTLResidencySet_addResource";
        break;
      case 1145:
        result = "kDYFEMTLResidencySet_addResources_count";
        break;
      case 1146:
        result = "kDYFEMTLResidencySet_commitAdds";
        break;
      case 1147:
        result = "kDYFEMTLResidencySet_commitRemoves";
        break;
      case 1148:
        result = "kDYFEMTLResidencySet_commitResidency";
        break;
      case 1149:
        result = "kDYFEMTLResidencySet_containsHeap";
        break;
      case 1150:
        result = "kDYFEMTLResidencySet_containsResource";
        break;
      case 1151:
        result = "kDYFEMTLResidencySet_countForHeap";
        break;
      case 1152:
        result = "kDYFEMTLResidencySet_countForResource";
        break;
      case 1153:
        result = "kDYFEMTLResidencySet_dealloc";
        break;
      case 1154:
        result = "kDYFEMTLResidencySet_endResidency";
        break;
      case 1155:
        result = "kDYFEMTLResidencySet_removeAllHeaps";
        break;
      case 1156:
        result = "kDYFEMTLResidencySet_removeAllResources";
        break;
      case 1157:
        result = "kDYFEMTLResidencySet_removeHeap";
        break;
      case 1158:
        result = "kDYFEMTLResidencySet_removeHeaps_count";
        break;
      case 1159:
        result = "kDYFEMTLResidencySet_removeResource";
        break;
      case 1160:
        result = "kDYFEMTLResidencySet_removeResources_count";
        break;
      case 1161:
        result = "kDYFEMTLResidencySet_requestResidency";
        break;
      case 1162:
        result = "kDYFEMTLResidencySet_setCurrentGeneration";
        break;
      case 1163:
        result = "kDYFEMTLResidencySet_setExpiredGeneration";
        break;
      case 1164:
        result = "kDYFEMTLResidencySet_commit";
        break;
      case 1165:
        result = "kDYFEMTLResidencySet_generationForHeap";
        break;
      case 1166:
        result = "kDYFEMTLResidencySet_generationForResource";
        break;
      case 1167:
        result = "kDYFEMTLCommandBuffer_encodeSignalEventScheduled_value";
        break;
      case 1168:
        result = "kDYFEMTLCommandBuffer_setPrivateData";
        break;
      case 1169:
        result = "kDYFEMTLCommandBuffer_setPrivateDataOffset";
        break;
      case 1170:
        result = "kDYFEMTLDevice_newLogStateWithDescriptor_error";
        break;
      case 1171:
        result = "kDYFEMTLLogState_dealloc";
        break;
      case 1172:
        result = "kDYFEMTLResidencySet_addAllocation";
        break;
      case 1173:
        result = "kDYFEMTLResidencySet_addAllocations_count";
        break;
      case 1174:
        result = "kDYFEMTLResidencySet_containsAllocation";
        break;
      case 1175:
        result = "kDYFEMTLResidencySet_generationForAllocation";
        break;
      case 1176:
        result = "kDYFEMTLResidencySet_removeAllAllocations";
        break;
      case 1177:
        result = "kDYFEMTLResidencySet_removeAllocation";
        break;
      case 1178:
        result = "kDYFEMTLResidencySet_removeAllocations_count";
        break;
      default:
        if ("kDYFEMTLBlitCommandEncoder_setLabel" != -18430)
          goto LABEL_1384;
        result = "kDYFEMTLFXTemporalScaler_executionMode";
        break;
    }
  }
  return result;
}

uint64_t GetFuncEnumReceiverType(int a1)
{
  uint64_t result;
  int v2;

  if (a1 > -12545)
  {
    if (a1 > -7169)
    {
      switch(a1)
      {
        case -6144:
        case -6132:
        case -6130:
        case -6105:
        case -6101:
          result = 10;
          break;
        case -6143:
        case -6141:
        case -6134:
        case -6133:
        case -6131:
        case -6129:
        case -6122:
        case -6119:
        case -6116:
        case -6111:
        case -6110:
        case -6109:
        case -6096:
        case -6095:
LABEL_4:
          result = 36;
          break;
        case -6142:
        case -6126:
        case -6121:
          result = 7;
          break;
        case -6140:
        case -6137:
          result = 11;
          break;
        case -6139:
          result = 15;
          break;
        case -6138:
        case -6135:
        case -6117:
        case -6115:
          result = 8;
          break;
        case -6136:
        case -6120:
        case -6112:
        case -6108:
        case -6106:
          result = 5;
          break;
        case -6128:
        case -6124:
        case -6104:
        case -6103:
          result = 9;
          break;
        case -6127:
        case -6114:
        case -6113:
        case -6107:
          result = 6;
          break;
        case -6125:
        case -6123:
        case -6118:
          result = 4;
          break;
        case -6102:
        case -6100:
          result = 14;
          break;
        case -6099:
        case -6098:
          result = 13;
          break;
        case -6097:
          result = 12;
          break;
        default:
          switch(a1)
          {
            case -7168:
            case -7166:
            case -7165:
            case -7164:
            case -7163:
            case -7162:
            case -7160:
            case -7159:
            case -7154:
            case -7153:
              result = 3;
              break;
            case -7167:
            case -7161:
            case -7158:
            case -7157:
            case -7156:
              result = 2;
              break;
            case -7155:
              result = 85;
              break;
            default:
              switch(a1)
              {
                case -6656:
                case -6655:
                case -6654:
                case -6653:
                case -6652:
                  result = 84;
                  break;
                default:
LABEL_75:
                  result = 0;
                  break;
              }
              break;
          }
          break;
      }
    }
    else
    {
      v2 = a1 + 10240;
      result = 1;
      switch(v2)
      {
        case 0:
        case 11:
        case 15:
LABEL_12:
          result = 25;
          break;
        case 1:
        case 3:
        case 7:
        case 10:
          goto LABEL_4;
        case 2:
        case 4:
        case 6:
        case 8:
        case 9:
        case 13:
        case 18:
        case 28:
        case 35:
        case 36:
        case 39:
        case 42:
        case 55:
        case 76:
LABEL_8:
          result = 80;
          break;
        case 5:
        case 12:
        case 17:
        case 19:
        case 30:
        case 37:
        case 40:
        case 53:
        case 54:
LABEL_18:
          result = 22;
          break;
        case 14:
        case 77:
LABEL_50:
          result = 75;
          break;
        case 20:
        case 41:
        case 48:
        case 56:
        case 68:
        case 75:
LABEL_15:
          result = 71;
          break;
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 31:
        case 38:
        case 74:
LABEL_25:
          result = 57;
          break;
        case 26:
        case 49:
        case 69:
        case 78:
LABEL_34:
          result = 29;
          break;
        case 27:
LABEL_36:
          result = 74;
          break;
        case 29:
        case 32:
        case 33:
LABEL_30:
          result = 50;
          break;
        case 34:
          result = 77;
          break;
        case 43:
        case 44:
        case 45:
        case 46:
        case 50:
        case 58:
        case 59:
        case 67:
        case 70:
        case 71:
        case 73:
        case 81:
        case 84:
LABEL_24:
          result = 16;
          break;
        case 47:
        case 62:
        case 63:
        case 66:
        case 80:
        case 87:
LABEL_26:
          result = 83;
          break;
        case 51:
LABEL_49:
          result = 37;
          break;
        case 52:
        case 57:
LABEL_31:
          result = 62;
          break;
        case 60:
        case 61:
        case 64:
        case 65:
        case 79:
        case 88:
LABEL_19:
          result = 60;
          break;
        case 72:
          return result;
        case 82:
        case 85:
        case 86:
LABEL_14:
          result = 17;
          break;
        case 83:
LABEL_37:
          result = 43;
          break;
        case 89:
LABEL_40:
          result = 23;
          break;
        default:
          goto LABEL_75;
      }
    }
  }
  else if (a1 <= -18431)
  {
    switch(a1)
    {
      case -20480:
      case -20479:
      case -20478:
      case -20477:
      case -20476:
      case -20475:
      case -20474:
        result = 39;
        break;
      case -20473:
      case -20472:
      case -20471:
      case -20470:
      case -20469:
      case -20468:
      case -20467:
      case -20466:
      case -20465:
      case -20464:
      case -20463:
      case -20462:
      case -20461:
      case -20460:
      case -20459:
      case -20458:
      case -20457:
      case -20456:
LABEL_23:
        result = 40;
        break;
      default:
        if (a1 != -18432 && a1 != -18431)
          goto LABEL_75;
        goto LABEL_4;
    }
  }
  else
  {
    switch(a1)
    {
      case -16384:
      case -16383:
      case -16382:
      case -16381:
      case -16380:
      case -16379:
      case -16378:
      case -16377:
      case -16376:
      case -16375:
      case -16374:
      case -16373:
      case -16230:
      case -16229:
      case -16213:
      case -16212:
      case -16211:
      case -16210:
      case -16209:
      case -16131:
      case -16124:
      case -15995:
      case -15994:
      case -15993:
      case -15992:
      case -15977:
      case -15976:
      case -15960:
      case -15959:
      case -15958:
      case -15878:
      case -15877:
      case -15876:
      case -15875:
      case -15802:
      case -15800:
      case -15798:
      case -15756:
      case -15755:
      case -15474:
      case -15473:
      case -15472:
      case -15471:
      case -15470:
      case -15469:
        result = 21;
        break;
      case -16372:
      case -16371:
      case -16370:
      case -16369:
      case -16368:
      case -16367:
      case -16366:
      case -16228:
      case -16208:
      case -16122:
      case -16113:
      case -16104:
      case -16103:
      case -16102:
      case -16098:
      case -15914:
      case -15904:
      case -15874:
      case -15768:
      case -15767:
      case -15505:
      case -15504:
      case -15357:
        goto LABEL_18;
      case -16365:
      case -16364:
      case -16363:
      case -16362:
      case -16361:
      case -16360:
      case -16359:
      case -16358:
      case -16357:
      case -16356:
      case -16355:
      case -16354:
      case -16353:
      case -16352:
      case -16351:
      case -16350:
      case -16202:
      case -16195:
      case -16164:
      case -16151:
      case -16133:
      case -16065:
      case -16064:
      case -16014:
      case -16013:
      case -16012:
      case -15991:
      case -15990:
      case -15967:
      case -15966:
      case -15908:
      case -15899:
      case -15898:
      case -15897:
      case -15873:
      case -15872:
      case -15871:
      case -15870:
      case -15749:
      case -15712:
      case -15703:
      case -15673:
      case -15587:
      case -15586:
      case -15585:
      case -15584:
      case -15533:
      case -15501:
      case -15500:
      case -15410:
      case -15364:
      case -15326:
      case -15318:
      case -15316:
      case -15286:
      case -15285:
      case -15256:
      case -15255:
      case -15254:
      case -15253:
      case -15217:
      case -15216:
      case -15215:
        goto LABEL_12;
      case -16349:
      case -16348:
      case -16347:
      case -16346:
      case -16345:
      case -16344:
      case -16343:
      case -16342:
      case -16341:
      case -16340:
      case -16134:
      case -15811:
      case -15810:
      case -15809:
      case -15808:
      case -15807:
      case -15806:
      case -15805:
      case -15804:
      case -15701:
      case -15624:
      case -15252:
      case -15251:
      case -15250:
      case -15249:
        result = 27;
        break;
      case -16339:
      case -16338:
      case -16337:
      case -16336:
      case -16335:
      case -16334:
      case -16333:
      case -16332:
      case -16331:
      case -16330:
      case -16329:
      case -16328:
      case -16327:
      case -16326:
      case -16325:
      case -16324:
      case -16323:
      case -16322:
      case -16227:
      case -16226:
      case -16220:
      case -16207:
      case -16150:
      case -16149:
      case -16130:
      case -16129:
      case -16100:
      case -16079:
      case -16078:
      case -16047:
      case -16046:
      case -16045:
      case -16044:
      case -16017:
      case -16011:
      case -16010:
      case -16009:
      case -16008:
      case -15965:
      case -15964:
      case -15963:
      case -15869:
      case -15754:
      case -15732:
      case -15711:
      case -15710:
      case -15709:
      case -15623:
      case -15622:
      case -15621:
      case -15583:
      case -15582:
      case -15581:
      case -15580:
      case -15518:
      case -15517:
      case -15516:
      case -15515:
      case -15514:
      case -15513:
      case -15512:
      case -15511:
      case -15510:
      case -15503:
      case -15284:
      case -15283:
      case -15282:
      case -15281:
      case -15280:
      case -15279:
      case -15278:
      case -15248:
      case -15247:
        result = 28;
        break;
      case -16321:
      case -16092:
      case -15989:
      case -15868:
      case -15700:
      case -15699:
      case -15620:
      case -15619:
      case -15618:
      case -15579:
      case -15578:
      case -15541:
      case -15540:
        goto LABEL_34;
      case -16320:
        result = 34;
        break;
      case -16319:
      case -16318:
      case -16317:
      case -16316:
      case -16315:
      case -16314:
      case -16313:
      case -16312:
      case -16311:
      case -16310:
      case -16309:
      case -16308:
      case -16307:
      case -16306:
      case -16305:
      case -16304:
      case -16303:
      case -16302:
      case -16301:
      case -16300:
      case -16299:
      case -16298:
      case -16297:
      case -16296:
      case -16295:
      case -16294:
      case -16206:
      case -16205:
      case -16200:
      case -16199:
      case -16198:
      case -16197:
      case -16166:
      case -16165:
      case -16163:
      case -16128:
      case -16121:
      case -16120:
      case -16112:
      case -16111:
      case -16101:
      case -16099:
      case -16096:
      case -16095:
      case -16093:
      case -16091:
      case -16090:
      case -16089:
      case -16088:
      case -16075:
      case -16066:
      case -16050:
      case -16049:
      case -16048:
      case -16039:
      case -16037:
      case -16036:
      case -16035:
      case -16031:
      case -16030:
      case -16029:
      case -16018:
      case -16016:
      case -16015:
      case -15998:
      case -15997:
      case -15996:
      case -15980:
      case -15979:
      case -15978:
      case -15972:
      case -15971:
      case -15969:
      case -15968:
      case -15912:
      case -15909:
      case -15902:
      case -15901:
      case -15900:
      case -15892:
      case -15891:
      case -15864:
      case -15863:
      case -15862:
      case -15861:
      case -15860:
      case -15859:
      case -15858:
      case -15857:
      case -15856:
      case -15855:
      case -15854:
      case -15853:
      case -15852:
      case -15851:
      case -15850:
      case -15849:
      case -15848:
      case -15847:
      case -15846:
      case -15845:
      case -15844:
      case -15843:
      case -15842:
      case -15841:
      case -15840:
      case -15839:
      case -15838:
      case -15837:
      case -15836:
      case -15835:
      case -15834:
      case -15833:
      case -15832:
      case -15831:
      case -15814:
      case -15813:
      case -15796:
      case -15793:
      case -15791:
      case -15780:
      case -15779:
      case -15774:
      case -15759:
      case -15758:
      case -15757:
      case -15751:
      case -15747:
      case -15746:
      case -15737:
      case -15731:
      case -15730:
      case -15719:
      case -15718:
      case -15717:
      case -15716:
      case -15708:
      case -15707:
      case -15706:
      case -15705:
      case -15704:
      case -15698:
      case -15697:
      case -15696:
      case -15695:
      case -15694:
      case -15693:
      case -15672:
      case -15671:
      case -15617:
      case -15616:
      case -15615:
      case -15614:
      case -15613:
      case -15612:
      case -15577:
      case -15576:
      case -15575:
      case -15535:
      case -15532:
      case -15531:
      case -15509:
      case -15506:
      case -15499:
      case -15498:
      case -15497:
      case -15496:
      case -15475:
      case -15468:
      case -15467:
      case -15464:
      case -15435:
      case -15434:
      case -15433:
      case -15432:
      case -15431:
      case -15430:
      case -15429:
      case -15428:
      case -15427:
      case -15425:
      case -15421:
      case -15420:
      case -15419:
      case -15418:
      case -15417:
      case -15406:
      case -15405:
      case -15404:
      case -15403:
      case -15402:
      case -15363:
      case -15362:
      case -15361:
      case -15360:
      case -15359:
      case -15358:
      case -15350:
      case -15349:
      case -15348:
      case -15347:
      case -15317:
      case -15315:
      case -15314:
      case -15298:
      case -15296:
      case -15270:
      case -15269:
      case -15268:
      case -15267:
      case -15261:
      case -15260:
      case -15259:
      case -15246:
      case -15245:
      case -15214:
        goto LABEL_4;
      case -16293:
      case -16135:
      case -16123:
      case -16052:
      case -16051:
      case -15830:
      case -15715:
      case -15714:
      case -15713:
      case -15670:
      case -15669:
        goto LABEL_37;
      case -16292:
      case -16291:
      case -16290:
      case -16107:
      case -16106:
      case -16083:
      case -16082:
      case -16081:
      case -16038:
      case -15772:
      case -15609:
      case -15608:
      case -15551:
      case -15550:
      case -15487:
      case -15423:
      case -15323:
      case -15322:
        goto LABEL_31;
      case -16289:
      case -16288:
      case -16287:
      case -16286:
      case -16285:
      case -16284:
      case -16283:
      case -16282:
      case -16162:
      case -16161:
      case -16160:
      case -16028:
      case -16027:
      case -16026:
        result = 65;
        break;
      case -16281:
      case -16280:
      case -16279:
      case -16278:
      case -16277:
      case -16276:
      case -16275:
      case -16274:
      case -16273:
      case -16272:
      case -16271:
      case -16270:
      case -16269:
      case -16268:
      case -16267:
      case -16266:
      case -16265:
      case -16264:
      case -16263:
      case -16262:
      case -16261:
      case -16260:
      case -16259:
      case -16258:
      case -16257:
      case -16256:
      case -16255:
      case -16254:
      case -16253:
      case -16252:
      case -16251:
      case -16250:
      case -16249:
      case -16248:
      case -16247:
      case -16246:
      case -16245:
      case -16244:
      case -16243:
      case -16225:
      case -16224:
      case -16223:
      case -16222:
      case -16219:
      case -16218:
      case -16217:
      case -16216:
      case -16215:
      case -16214:
      case -16204:
      case -16203:
      case -16201:
      case -16159:
      case -16158:
      case -16157:
      case -16156:
      case -16155:
      case -16148:
      case -16147:
      case -16146:
      case -16145:
      case -16144:
      case -16143:
      case -16142:
      case -16141:
      case -16140:
      case -16139:
      case -16138:
      case -16137:
      case -16132:
      case -16126:
      case -16125:
      case -16087:
      case -16086:
      case -16085:
      case -16084:
      case -16080:
      case -16077:
      case -16076:
      case -16074:
      case -16043:
      case -16042:
      case -16041:
      case -16040:
      case -16022:
      case -16021:
      case -16020:
      case -16007:
      case -16006:
      case -16005:
      case -16004:
      case -16003:
      case -15988:
      case -15987:
      case -15986:
      case -15985:
      case -15984:
      case -15970:
      case -15962:
      case -15961:
      case -15823:
      case -15822:
      case -15821:
      case -15820:
      case -15819:
      case -15818:
      case -15812:
      case -15750:
      case -15729:
      case -15728:
      case -15727:
      case -15726:
      case -15725:
      case -15724:
      case -15723:
      case -15722:
      case -15721:
      case -15720:
      case -15507:
      case -15486:
      case -15485:
      case -15484:
      case -15483:
      case -15482:
      case -15481:
      case -15480:
      case -15479:
      case -15478:
      case -15477:
      case -15476:
      case -15459:
      case -15458:
      case -15457:
      case -15456:
      case -15455:
      case -15454:
      case -15453:
      case -15452:
      case -15451:
      case -15450:
      case -15449:
      case -15448:
      case -15447:
      case -15446:
      case -15445:
      case -15416:
      case -15415:
      case -15414:
      case -15401:
      case -15400:
      case -15399:
      case -15398:
      case -15397:
      case -15396:
      case -15395:
      case -15394:
      case -15393:
      case -15392:
      case -15391:
      case -15390:
      case -15389:
      case -15388:
      case -15387:
      case -15386:
      case -15385:
      case -15384:
      case -15383:
      case -15382:
      case -15381:
      case -15297:
      case -15275:
      case -15274:
      case -15273:
      case -15272:
      case -15244:
      case -15243:
        result = 70;
        break;
      case -16242:
      case -15817:
      case -15463:
      case -15462:
      case -15461:
      case -15460:
      case -15444:
      case -15443:
      case -15442:
      case -15441:
      case -15440:
      case -15439:
      case -15438:
      case -15437:
      case -15436:
      case -15413:
      case -15380:
      case -15379:
      case -15378:
      case -15377:
      case -15376:
      case -15375:
      case -15374:
      case -15373:
      case -15372:
      case -15371:
      case -15370:
      case -15369:
      case -15368:
      case -15367:
      case -15319:
      case -15288:
        goto LABEL_15;
      case -16241:
      case -15983:
      case -15816:
        goto LABEL_50;
      case -16240:
      case -16239:
      case -16238:
      case -16237:
      case -16236:
      case -16235:
      case -16234:
      case -16233:
      case -16232:
      case -16231:
      case -16221:
      case -16196:
      case -16114:
      case -16108:
      case -16094:
      case -15981:
      case -15913:
      case -15910:
      case -15903:
      case -15894:
      case -15815:
      case -15775:
      case -15761:
      case -15760:
      case -15690:
      case -15689:
      case -15688:
      case -15534:
        goto LABEL_8;
      case -16194:
      case -16193:
      case -16192:
      case -16191:
      case -16190:
      case -16189:
      case -16188:
      case -16187:
      case -16186:
      case -16185:
      case -16184:
      case -16183:
      case -16182:
      case -16181:
      case -16180:
      case -16179:
      case -16178:
      case -16177:
      case -16176:
      case -16175:
      case -16174:
      case -16173:
      case -16172:
      case -16171:
      case -16170:
      case -16169:
      case -16168:
      case -16167:
      case -16154:
      case -16153:
      case -16152:
      case -16025:
      case -16024:
      case -16023:
        result = 42;
        break;
      case -16136:
      case -16127:
        result = 41;
        break;
      case -16119:
      case -16118:
      case -16117:
      case -16116:
      case -16115:
      case -16110:
      case -16109:
      case -16105:
      case -15829:
      case -15828:
      case -15778:
      case -15777:
      case -15356:
      case -15355:
      case -15354:
      case -15353:
      case -15352:
      case -15351:
        goto LABEL_30;
      case -16097:
      case -16032:
        result = 81;
        break;
      case -16073:
      case -16072:
      case -16071:
      case -16070:
        result = 24;
        break;
      case -16069:
      case -16068:
      case -16067:
      case -16034:
      case -16019:
      case -15736:
      case -15735:
      case -15734:
      case -15733:
        goto LABEL_40;
      case -16063:
      case -16062:
      case -16061:
      case -16060:
      case -16059:
      case -16058:
      case -16057:
      case -16056:
      case -16055:
      case -16054:
      case -16053:
      case -16033:
      case -16002:
      case -16001:
      case -16000:
      case -15999:
      case -15916:
      case -15915:
      case -15627:
      case -15626:
      case -15625:
      case -15549:
      case -15548:
      case -15547:
      case -15546:
      case -15539:
      case -15538:
      case -15537:
      case -15536:
        result = 18;
        break;
      case -15982:
        result = 78;
        break;
      case -15975:
      case -15974:
      case -15973:
      case -15911:
      case -15907:
      case -15422:
      case -15321:
        result = 76;
        break;
      case -15957:
      case -15956:
      case -15955:
      case -15954:
      case -15953:
      case -15952:
      case -15951:
      case -15950:
      case -15949:
      case -15948:
      case -15947:
      case -15946:
      case -15945:
      case -15944:
      case -15943:
      case -15942:
      case -15941:
      case -15940:
      case -15939:
      case -15938:
      case -15937:
      case -15936:
      case -15906:
      case -15276:
      case -15266:
      case -15265:
      case -15264:
      case -15263:
      case -15262:
        result = 59;
        break;
      case -15935:
      case -15934:
      case -15933:
      case -15932:
      case -15931:
      case -15930:
      case -15929:
      case -15928:
      case -15927:
      case -15926:
      case -15905:
      case -15827:
      case -15826:
      case -15825:
      case -15824:
      case -15773:
      case -15277:
        result = 58;
        break;
      case -15925:
      case -15924:
      case -15923:
      case -15922:
      case -15921:
      case -15920:
      case -15919:
      case -15918:
      case -15917:
      case -15896:
      case -15895:
      case -15766:
      case -15765:
      case -15764:
      case -15763:
      case -15762:
        goto LABEL_25;
      case -15893:
        result = 64;
        break;
      case -15890:
      case -15889:
      case -15888:
      case -15887:
      case -15886:
      case -15885:
      case -15884:
      case -15883:
      case -15882:
      case -15881:
        result = 82;
        break;
      case -15880:
      case -15879:
      case -15325:
        result = 38;
        break;
      case -15867:
      case -15753:
        result = 31;
        break;
      case -15866:
      case -15865:
        result = 35;
        break;
      case -15803:
      case -15801:
      case -15799:
      case -15797:
      case -15795:
      case -15776:
      case -15771:
      case -15770:
      case -15412:
      case -15411:
        result = 68;
        break;
      case -15794:
      case -15792:
      case -15790:
      case -15789:
      case -15788:
      case -15787:
      case -15786:
      case -15785:
      case -15784:
      case -15783:
      case -15782:
      case -15781:
      case -15271:
        goto LABEL_36;
      case -15769:
        result = 73;
        break;
      case -15752:
        result = 32;
        break;
      case -15748:
        result = 30;
        break;
      case -15745:
        result = 66;
        break;
      case -15744:
      case -15743:
      case -15742:
      case -15741:
      case -15740:
      case -15739:
      case -15738:
        result = 67;
        break;
      case -15702:
        result = 26;
        break;
      case -15692:
        result = 45;
        break;
      case -15691:
        result = 79;
        break;
      case -15687:
      case -15686:
      case -15685:
      case -15684:
      case -15668:
      case -15667:
      case -15666:
      case -15665:
      case -15664:
      case -15663:
      case -15662:
      case -15555:
      case -15554:
      case -15553:
      case -15426:
      case -15409:
      case -15408:
      case -15407:
      case -15327:
        result = 19;
        break;
      case -15683:
      case -15682:
      case -15681:
      case -15680:
      case -15679:
      case -15678:
      case -15677:
        result = 20;
        break;
      case -15676:
      case -15675:
      case -15674:
      case -15611:
        goto LABEL_49;
      case -15661:
      case -15660:
      case -15659:
      case -15658:
      case -15657:
      case -15656:
      case -15655:
      case -15654:
      case -15653:
      case -15652:
      case -15651:
      case -15650:
      case -15649:
      case -15552:
        goto LABEL_24;
      case -15648:
      case -15647:
      case -15646:
      case -15645:
      case -15644:
      case -15643:
      case -15642:
      case -15641:
      case -15640:
      case -15639:
      case -15638:
      case -15637:
      case -15636:
      case -15635:
      case -15634:
      case -15633:
      case -15632:
      case -15631:
      case -15630:
      case -15629:
      case -15628:
      case -15595:
      case -15594:
      case -15593:
      case -15592:
      case -15591:
      case -15590:
      case -15589:
      case -15588:
      case -15524:
      case -15523:
      case -15522:
      case -15521:
      case -15520:
      case -15519:
      case -15502:
      case -15466:
      case -15465:
      case -15366:
      case -15365:
      case -15287:
        goto LABEL_14;
      case -15610:
        result = 44;
        break;
      case -15607:
      case -15606:
      case -15605:
      case -15604:
      case -15603:
      case -15602:
      case -15601:
      case -15600:
      case -15599:
      case -15598:
      case -15597:
      case -15596:
      case -15574:
      case -15573:
      case -15543:
      case -15542:
      case -15528:
      case -15527:
        goto LABEL_26;
      case -15572:
      case -15571:
      case -15570:
      case -15569:
      case -15568:
      case -15567:
      case -15566:
      case -15565:
      case -15564:
      case -15563:
      case -15562:
      case -15561:
      case -15560:
      case -15559:
      case -15558:
      case -15557:
      case -15556:
      case -15545:
      case -15544:
      case -15530:
      case -15529:
      case -15526:
      case -15525:
      case -15258:
      case -15257:
        goto LABEL_19;
      case -15508:
        result = 69;
        break;
      case -15495:
        result = 46;
        break;
      case -15494:
        result = 47;
        break;
      case -15493:
        result = 48;
        break;
      case -15492:
        result = 49;
        break;
      case -15491:
      case -15490:
      case -15489:
      case -15488:
      case -15424:
      case -15324:
        result = 61;
        break;
      case -15346:
      case -15345:
      case -15344:
      case -15343:
      case -15342:
      case -15341:
      case -15340:
      case -15339:
      case -15338:
      case -15337:
      case -15336:
      case -15335:
      case -15313:
      case -15312:
      case -15311:
      case -15310:
      case -15309:
      case -15308:
      case -15295:
      case -15294:
      case -15293:
      case -15292:
        result = 51;
        break;
      case -15334:
      case -15333:
      case -15332:
      case -15307:
      case -15306:
      case -15291:
        result = 52;
        break;
      case -15331:
        result = 55;
        break;
      case -15330:
      case -15329:
      case -15299:
        result = 56;
        break;
      case -15328:
      case -15305:
      case -15304:
      case -15303:
      case -15302:
      case -15301:
      case -15300:
        result = 54;
        break;
      case -15320:
        result = 33;
        break;
      case -15290:
      case -15289:
        result = 53;
        break;
      case -15242:
      case -15241:
      case -15240:
      case -15239:
      case -15238:
      case -15237:
      case -15236:
      case -15235:
      case -15234:
      case -15233:
      case -15232:
      case -15231:
      case -15230:
      case -15229:
      case -15228:
      case -15227:
      case -15226:
      case -15225:
      case -15224:
      case -15223:
      case -15222:
      case -15221:
      case -15220:
      case -15219:
      case -15218:
      case -15212:
      case -15211:
      case -15210:
      case -15209:
      case -15208:
      case -15207:
      case -15206:
        result = 72;
        break;
      case -15213:
        result = 63;
        break;
      default:
        if (a1 != -18430)
          goto LABEL_75;
        goto LABEL_23;
    }
  }
  return result;
}

BOOL IsFuncEnumCreateCommandEncoder(int a1)
{
  int FuncEnumConstructorType;
  _BOOL8 result;

  FuncEnumConstructorType = GetFuncEnumConstructorType(a1);
  result = 1;
  if ((FuncEnumConstructorType - 21) > 0x3D
    || ((1 << (FuncEnumConstructorType - 21)) & 0x2022100000000081) == 0)
  {
    return FuncEnumConstructorType == 17;
  }
  return result;
}

uint64_t IsFuncEnumSharedResourceConstructor(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= -16097)
  {
    if (a1 > -16164)
    {
      if (a1 == -16163)
        return result;
      v3 = -16104;
    }
    else
    {
      if (a1 == -16312)
        return result;
      v3 = -16294;
    }
    goto LABEL_11;
  }
  if (((a1 + 16031) > 0x34 || ((1 << (a1 - 97)) & 0x18000000000003) == 0)
    && (a1 + 15914) >= 2)
  {
    v3 = -16096;
LABEL_11:
    if (a1 != v3)
      return 0;
  }
  return result;
}

uint64_t IsFuncEnumParallelCommandEncoderCall(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 > -16163)
  {
    if ((a1 + 16162) >= 3 && (a1 + 16028) >= 3)
      return 0;
  }
  else if (((a1 + 16289) > 7 || a1 == -16286) && a1 != -16351)
  {
    return 0;
  }
  return result;
}

uint64_t GTTraceStoreAllocNode(int *a1, unint64_t a2, char a3, uint64_t a4)
{
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  pthread_mutex_t *v12;
  vm_address_t *v13;
  int v14;
  unint64_t v15;
  unint64_t i;
  memory_object_size_t v17;
  vm_address_t v18;
  int v19;
  int v20;
  int v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  int *v27;
  unint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;

  v7 = a2 + 64;
  if (a2 < 0xC1)
  {
    v12 = (pthread_mutex_t *)(a1 + 66);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 66));
    v11 = 0;
    goto LABEL_8;
  }
  v8 = -1;
  v9 = 256;
  do
  {
    v10 = v8;
    v9 *= 2;
    ++v8;
  }
  while (v9 < v7);
  v11 = v10 + 2;
  v12 = (pthread_mutex_t *)(a1 + 66);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 66));
  if (v8 <= 0x1D)
  {
LABEL_8:
    v13 = (vm_address_t *)v11;
    while (!*(_QWORD *)&a1[2 * (_QWORD)v13 + 4])
    {
      v13 = (vm_address_t *)((char *)v13 + 1);
      if (v13 == (vm_address_t *)((char *)&dword_1C + 3))
        goto LABEL_11;
    }
    goto LABEL_26;
  }
  if (v11 != 31)
  {
LABEL_30:
    v25 = v11;
    goto LABEL_31;
  }
  v11 = 31;
LABEL_11:
  v14 = 0;
  v15 = 0x800000;
  if (v7 > 0x800000)
    v15 = v7;
  for (i = 256; i < v15; i *= 2)
    ++v14;
  v17 = 256;
  do
  {
    v17 *= 2;
    --v14;
  }
  while (v14);
  v18 = GTCoreAlloc(v17);
  v19 = *a1;
  v20 = a1[1];
  if (v20 == *a1)
  {
    v21 = 2 * v20;
    if (!v20)
      v21 = 8;
    a1[1] = v21;
    v22 = (char *)malloc_type_realloc(*((void **)a1 + 1), 16 * v21, 0x10C004028F705ECuLL);
    *((_QWORD *)a1 + 1) = v22;
    v19 = *a1;
  }
  else
  {
    v22 = (char *)*((_QWORD *)a1 + 1);
  }
  *a1 = v19 + 1;
  v13 = (vm_address_t *)&v22[16 * v19];
  *v13 = v18;
  v13[1] = v17;
  *(_DWORD *)v18 = v17;
  *(_DWORD *)(v18 + 4) = 64;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = v18;
  *(_QWORD *)(v18 + 48) = 0;
  *(_QWORD *)(v18 + 56) = 0;
  *(_QWORD *)(v18 + 40) = 0;
  LODWORD(v13) = 0;
  if (v17)
  {
    v23 = 256;
    do
    {
      v23 *= 2;
      LODWORD(v13) = (_DWORD)v13 + 1;
    }
    while (v23 < v17);
  }
  *(_QWORD *)&a1[2 * (int)v13 + 4] = v18;
LABEL_26:
  if (v11 >= (int)v13)
    goto LABEL_30;
  v24 = (int)v13;
  v25 = v11;
  v26 = *(unsigned int **)&a1[2 * (int)v13 + 4];
  do
  {
    v27 = &a1[2 * v24];
    *((_QWORD *)v27 + 2) = *((_QWORD *)v26 + 5);
    v28 = (unint64_t)*v26 >> 1;
    *v26 >>= 1;
    v26[1] = 64;
    *((_QWORD *)v26 + 2) = 0;
    *((_QWORD *)v26 + 3) = 0;
    *((_QWORD *)v26 + 1) = 0;
    *((_QWORD *)v26 + 4) = v26;
    *((_QWORD *)v26 + 6) = 0;
    *((_QWORD *)v26 + 7) = 0;
    v29 = (char *)v26 + v28;
    *(_DWORD *)v29 = v28;
    *((_DWORD *)v29 + 1) = 64;
    *((_QWORD *)v29 + 1) = 0;
    *((_QWORD *)v29 + 2) = 0;
    *((_QWORD *)v29 + 3) = 0;
    *((_QWORD *)v29 + 4) = v29;
    *((_QWORD *)v29 + 6) = 0;
    *((_QWORD *)v29 + 7) = 0;
    *((_QWORD *)v29 + 5) = 0;
    *((_QWORD *)v26 + 5) = (char *)v26 + v28;
    --v24;
    *((_QWORD *)v27 + 1) = v26;
  }
  while (v24 > v11);
LABEL_31:
  v30 = &a1[2 * v25];
  v31 = *((_QWORD *)v30 + 2);
  *((_QWORD *)v30 + 2) = *(_QWORD *)(v31 + 40);
  *(_BYTE *)(v31 + 8) = a3;
  *(_QWORD *)(v31 + 16) = a4;
  *(_QWORD *)(v31 + 24) = a1;
  *(_QWORD *)(v31 + 40) = 0;
  pthread_mutex_unlock(v12);
  return v31;
}

char *GTTraceMemPool_allocateBytes(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *result;
  unsigned int *v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;

  v6 = (HIDWORD(a3) + 23) & 0x1FFFFFFF8;
  v7 = (unsigned int *)(a1 + 24);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  do
    v9 = atomic_load((unsigned int *)(a1 + 28));
  while (v9 != v8);
  v10 = *(unsigned int **)(a1 + 8);
  if (!v10)
    goto LABEL_16;
  v11 = v10 + 1;
  v12 = atomic_load(v10 + 1);
  while (1)
  {
    v13 = v12;
    v14 = v6 + v12;
    v15 = *v10;
    if (v14 > v15)
      break;
    v12 = __ldaxr(v11);
    if (v12 == v13)
    {
      if (!__stlxr(v14, v11))
      {
        v15 = *v10;
        break;
      }
    }
    else
    {
      __clrex();
    }
  }
  v16 = (char *)v10 + v13;
  result = v14 <= v15 ? v16 : 0;
  if (v14 > v15)
  {
LABEL_16:
    v18 = (unsigned int *)GTTraceStoreAllocNode(*(int **)a1, (HIDWORD(a3) + 23) & 0x1FFFFFFF8, 2, *(_QWORD *)(a1 + 32));
    v19 = *(_QWORD *)(a1 + 16);
    if (v19)
      v20 = (_QWORD *)(v19 + 40);
    else
      v20 = (_QWORD *)(a1 + 8);
    *v20 = v18;
    *(_QWORD *)(a1 + 16) = v18;
    *((_QWORD *)v18 + 5) = 0;
    v21 = v18 + 1;
    v22 = atomic_load(v18 + 1);
    while (1)
    {
      v23 = v22;
      v24 = v6 + v22;
      v25 = *v18;
      if (v24 > v25)
        break;
      v22 = __ldaxr(v21);
      if (v22 == v23)
      {
        if (!__stlxr(v24, v21))
        {
          v25 = *v18;
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
    v26 = (char *)v18 + v23;
    if (v24 <= v25)
      result = v26;
    else
      result = 0;
  }
  atomic_store(v8 + 1, (unsigned int *)(a1 + 28));
  *(_QWORD *)result = a2;
  *((_QWORD *)result + 1) = a3;
  return result;
}

uint64_t FBDecoder_DecodeArguments(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int v7;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  int v22;
  unsigned __int16 v23;
  int v24;
  char *v25;
  __int16 v26;
  char *v27;
  BOOL v28;
  int v29;
  int v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t result;
  unsigned int v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  int v39;
  _DWORD *v40;

  v7 = a2;
  v9 = a2 + a3;
  v10 = *a1;
  v11 = (char *)(a2 + v10);
  v12 = (char *)memchr((void *)(a2 + v10), 0, a3 - v10);
  if (!v12)
    return 0xFFFFFFFFLL;
  v13 = v12;
  v39 = v7;
  v40 = a1;
  v14 = a1[1];
  v15 = v12 + 1;
  if (v11 == v12)
  {
LABEL_36:
    result = 0;
    *v40 = (((_DWORD)v15 + 3) & 0xFFFFFFFC) - v39;
    v40[1] = v14;
    return result;
  }
  while (1)
  {
    v16 = v14;
    if (v14 >= a5)
      return 2;
    v17 = (unint64_t *)(a4 + 16 * v14);
    v18 = a4 + 16 * v16;
    *(_BYTE *)(v18 + 11) = 0;
    v19 = (char *)(v18 + 11);
    v20 = a4 + 16 * v16;
    *(_WORD *)(v20 + 8) = 1;
    v21 = (unsigned __int16 *)(v20 + 8);
    v22 = *v11;
    if (v22 == 64)
    {
      v23 = 0;
      v25 = v11 + 1;
      v24 = v11[1];
      if (v11 + 1 != v13)
      {
        v26 = v24 - 48;
        if ((v24 - 48) <= 9)
        {
          v23 = 0;
          v27 = v11 + 2;
          do
          {
            v23 = v26 + 10 * v23;
            v28 = v27 == v13;
            v30 = *v27++;
            v29 = v30;
            if (v28)
              break;
            v26 = v29 - 48;
          }
          while ((v29 - 48) < 0xA);
          v25 = v27 - 1;
        }
      }
      *v19 = 1;
      v31 = v23;
      *v21 = v23;
      v22 = *v25;
      v32 = 3;
      v11 = v25;
    }
    else
    {
      v32 = 2;
      v31 = 1;
    }
    if (v22 == 117)
    {
      *v19 = v32;
      v33 = *++v11;
      LOBYTE(v22) = v33;
    }
    *(_BYTE *)(a4 + 16 * v16 + 10) = v22;
    result = 0xFFFFFFFFLL;
    if ((char)v22 <= 97)
    {
      if ((char)v22 != 67)
      {
        if ((char)v22 != 83 && (char)v22 != 85)
          return result;
        if (v9 - (unint64_t)v15 >= 8 && *v15 == 0xFFFFFFFFLL)
        {
          *v17 = 0;
          *v21 = 0;
          ++v15;
        }
        else
        {
          *v17 = (unint64_t)v15;
          v37 = (char *)memchr(v15, 0, v9 - (_QWORD)v15);
          if (!v37)
            return 0xFFFFFFFFLL;
          *v21 = (_WORD)v37 - (_WORD)v15;
          v15 = v37 + 1;
        }
        goto LABEL_31;
      }
    }
    else
    {
      v35 = (char)v22 - 98;
      if (v35 > 0x15)
        return result;
      if (((1 << v35) & 0x244404) == 0)
      {
        if (((1 << v35) & 0x90) != 0)
        {
          v38 = ((unint64_t)v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          *v17 = v38;
          v15 = (_QWORD *)(v38 + 4 * v31);
        }
        else
        {
          if ((char)v22 != 98)
            return result;
          *v17 = (unint64_t)v15;
          v15 = (_QWORD *)((char *)v15 + v31);
        }
        goto LABEL_31;
      }
    }
    v36 = ((unint64_t)v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    *v17 = v36;
    v15 = (_QWORD *)(v36 + 8 * v31);
LABEL_31:
    if (v9 < (unint64_t)v15)
      return 0xFFFFFFFFLL;
    if ((unint64_t)(v11 + 1) < v9 && v11[1] == 60)
      v11 = (char *)memchr(v11 + 2, 62, v13 - (v11 + 2));
    v14 = v16 + 1;
    if (++v11 == v13)
      goto LABEL_36;
  }
}

uint64_t PerformanceStatisticsURL(unsigned int *a1)
{
  unsigned int *v2;
  uint64_t v4;
  _BYTE v5[16];
  _DWORD *v6;
  uint64_t v7;

  if ((*((_BYTE *)a1 + 33) & 0x10) != 0)
  {
    do
    {
      v2 = (unsigned int *)((char *)a1 + *a1);
      if (v2[1] != -12272)
        break;
      v4 = 0;
      if (FBDecoder_DecodeArguments((unsigned int *)&v4, (uint64_t)(v2 + 9), *v2 - 36, (uint64_t)v5, 0xDuLL)|| HIDWORD(v4) < 2)
      {
        break;
      }
      if (*v6 == 116)
        return v7;
      a1 = InternalDataArgumentChainEnd(v2, 0);
    }
    while ((*((_BYTE *)a1 + 33) & 0x20) == 0);
  }
  return 0;
}

unsigned int *InternalDataArgumentChainEnd(unsigned int *a1, int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  int v5;
  __int128 *v6;
  int v7;
  unsigned int v8;
  const char *v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _DWORD v29[2];
  const char *v30;
  __int128 v31;
  __int128 v32;

  v3 = a1;
  v4 = a1[1];
  if (a2)
  {
    if (v4 != -12272)
    {
      v5 = *a2;
      v31 = 0u;
      v32 = 0u;
      v29[0] = v5;
      v29[1] = 500;
      v30 = "header->fenum == kDYFEInternalData";
      v6 = (__int128 *)v29;
LABEL_21:
      GTError_addError(a2, (uint64_t)v6);
      return v3;
    }
  }
  else if (v4 != -12272)
  {
    return v3;
  }
  v28 = 0;
  v7 = FBDecoder_DecodeArguments((unsigned int *)&v28, (uint64_t)(a1 + 9), *a1 - 36, (uint64_t)v29, 0xDuLL) & 0xFFFFFFFD;
  if (a2)
  {
    if (v7)
    {
      v8 = *a2;
      v17 = 0u;
      v18 = 0u;
      *(_QWORD *)&v16 = v8 | 0x1F400000000;
      v9 = "err == 0 || err == 2";
LABEL_20:
      *((_QWORD *)&v16 + 1) = v9;
      v6 = &v16;
      goto LABEL_21;
    }
    if (HIDWORD(v28) <= 1)
    {
      v14 = *a2;
      v17 = 0u;
      v18 = 0u;
      *(_QWORD *)&v16 = v14 | 0x1F400000000;
      v9 = "2 <= parser.ntokens";
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  if (v7)
    v10 = 0;
  else
    v10 = HIDWORD(v28) > 1;
  if (v10)
  {
LABEL_14:
    v11 = *(_DWORD *)v31 - 102;
    v10 = v11 > 0x20;
    v12 = (1 << v11) & 0x1B008001FLL;
    if (!v10 && v12 != 0)
    {
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      return DecodeDYMTLBinding(0, v3, &v16, 0, a2);
    }
  }
  return v3;
}

unsigned int *DecodeDYMTLBinding(uint64_t a1, unsigned int *a2, _QWORD *a3, uint64_t a4, int *a5)
{
  uint64_t v6;
  unsigned int *v8;
  unsigned int v10;
  int v11;
  const char *v12;
  int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  char *v17;
  size_t v18;
  _QWORD *v19;
  char *v20;
  void *v21;
  size_t v22;
  int v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  void *v35;
  int v36;
  void *v37;
  char v38;
  char v39;
  char v40;
  int v41;
  void *v42;
  char v43;
  char v44;
  char v45;
  int v46;
  void *v47;
  char v48;
  char v49;
  char v50;
  int v51;
  void *v52;
  char v53;
  char v54;
  char v55;
  int v56;
  void *v57;
  char v58;
  char v59;
  char v60;
  int v61;
  void *v62;
  char v63;
  char v64;
  char v65;
  unint64_t v66;
  char v67;
  unsigned int *v68;
  unsigned int *v69;
  char v70;
  char v71;
  char v72;
  void *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int *v83;
  void *v84;
  char v85;
  char v86;
  char v87;
  unsigned int *v88;
  uint64_t v89;
  unint64_t v90;
  unsigned int *v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  void *v100;
  void *v101;
  void *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  int v109;
  int v110;
  const char *v111;
  __int128 v112;
  __int128 v113;
  __int16 v114;
  char v115;
  char v116[32];
  char *__s;
  _BYTE *v118;
  char *v119;
  _BYTE *v120;
  char *v121;
  _DWORD *v122;
  _QWORD *v123;
  unsigned int *v124;
  _DWORD *v125;
  char *v126;
  _QWORD *v127;

  v6 = a4;
  v8 = a2;
  v115 = 0;
  v114 = 0;
  v10 = a2[1];
  v107 = a4;
  if (a5)
  {
    if (v10 != -12272)
    {
      v11 = *a5;
      v112 = 0u;
      v113 = 0u;
      v109 = v11;
      v110 = 500;
      v12 = "it->fenum == kDYFEInternalData";
LABEL_18:
      v111 = v12;
      GTError_addError(a5, (uint64_t)&v109);
      goto LABEL_19;
    }
  }
  else if (v10 != -12272)
  {
LABEL_19:
    v24 = 0;
    LOWORD(v6) = 0;
    LOWORD(v25) = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    LOBYTE(v32) = 0;
    v33 = 0;
    v21 = 0;
    goto LABEL_20;
  }
  v108 = 0;
  v13 = FBDecoder_DecodeArguments((unsigned int *)&v108, (uint64_t)(a2 + 9), *a2 - 36, (uint64_t)v116, 0xDuLL);
  if (a5)
  {
    if (v13)
    {
      v14 = *a5;
      v112 = 0u;
      v113 = 0u;
      v109 = v14;
      v110 = 500;
      v12 = "err == FBUF_SUCCESS";
      goto LABEL_18;
    }
    v15 = HIDWORD(v108);
    if (HIDWORD(v108) <= 6)
    {
      v23 = *a5;
      v112 = 0u;
      v113 = 0u;
      v109 = v23;
      v110 = 500;
      v12 = "7 <= parser.ntokens";
      goto LABEL_18;
    }
  }
  else
  {
    v15 = HIDWORD(v108);
    if (v13)
      v16 = 0;
    else
      v16 = HIDWORD(v108) > 6;
    if (!v16)
      goto LABEL_19;
  }
  v17 = __s;
  if (!__s)
  {
    v22 = 0;
    v19 = a3 + 23;
    v20 = (char *)a3[23];
    goto LABEL_24;
  }
  v18 = strlen(__s);
  v19 = a3 + 23;
  v20 = (char *)a3[23];
  v21 = v20;
  v22 = v18 + 1;
  if (v18 == -1)
LABEL_24:
    v21 = 0;
  *v19 = &v20[v22];
  if ((_DWORD)v6)
  {
    v35 = v21;
    memcpy(v21, v17, v22);
    v21 = v35;
  }
  v26 = 0;
  v24 = 0;
  v32 = *v118;
  v31 = *v119;
  v29 = *v120 & 1;
  v30 = *v121;
  if (v32 > 0xF)
  {
    if (v32 != 16)
    {
      if (v32 != 17)
      {
        if (v32 != 35)
          goto LABEL_52;
        if (a5)
        {
          if (v15 <= 0xB)
          {
            v41 = *a5;
            v112 = 0u;
            v113 = 0u;
            v109 = v41;
            v110 = 500;
            v111 = "12 <= parser.ntokens";
            v42 = v21;
            v43 = v29;
            v44 = v31;
            v45 = v30;
            GTError_addError(a5, (uint64_t)&v109);
            v30 = v45;
            v31 = v44;
            v29 = v43;
            v21 = v42;
LABEL_59:
            v24 = 0;
            LOWORD(v6) = 0;
            LOWORD(v25) = 0;
            v26 = 0;
            v27 = 0;
            v28 = 0;
            goto LABEL_60;
          }
        }
        else if (v15 < 0xC)
        {
          goto LABEL_59;
        }
        v100 = v21;
        v103 = *(unsigned __int8 *)v122 | ((unint64_t)*(unsigned __int8 *)v123 << 8);
        v25 = *v124;
        LODWORD(v6) = *v125;
        v24 = *v126;
        v27 = a3[16];
        a3[16] = v27 + 24;
        v94 = v31;
        v97 = v29;
        v67 = v30;
        v68 = DecodeDYMTLStructType(v27, (unsigned int *)((char *)v8 + *v8), a3, v107, a5);
        v26 = a3[16];
        a3[16] = v26 + 24;
        v69 = DecodeDYMTLStructType(v26, (unsigned int *)((char *)v68 + *v68), a3, v107, a5);
        v21 = v100;
        v28 = v103;
        v30 = v67;
        v31 = v94;
        v29 = v97;
        v8 = v69;
LABEL_60:
        v33 = 0;
        LOBYTE(v32) = 35;
        goto LABEL_20;
      }
      if (a5)
      {
        if (v15 <= 0xC)
        {
          v61 = *a5;
          v112 = 0u;
          v113 = 0u;
          v109 = v61;
          v110 = 500;
          v111 = "13 <= parser.ntokens";
          v62 = v21;
          v63 = v29;
          v64 = v31;
          v65 = v30;
          GTError_addError(a5, (uint64_t)&v109);
          v30 = v65;
          v31 = v64;
          v29 = v63;
          v21 = v62;
LABEL_90:
          v24 = 0;
          LOWORD(v6) = 0;
          LOWORD(v25) = 0;
          v26 = 0;
          v27 = 0;
          v28 = 0;
          v33 = 0;
LABEL_91:
          LOBYTE(v32) = 17;
          goto LABEL_20;
        }
      }
      else if (v15 < 0xD)
      {
        goto LABEL_90;
      }
      v27 = *v124 | ((unint64_t)*v123 << 48) | ((unint64_t)*v126 << 40) | ((unint64_t)*v127 << 32);
      v81 = a3[16];
      if (*(_BYTE *)v125)
        v82 = a3[16];
      else
        v82 = 0;
      v106 = v82;
      if (*(_BYTE *)v125)
        v33 = 0;
      else
        v33 = a3[16];
      a3[16] = v81 + 24;
      v83 = (unsigned int *)((char *)v8 + *v8);
      v84 = v21;
      v85 = v29;
      v86 = v31;
      v87 = v30;
      v88 = DecodeDYMTLStructType(v81, v83, a3, v6, a5);
      v28 = v106;
      v30 = v87;
      v31 = v86;
      v29 = v85;
      v21 = v84;
      v8 = v88;
      v24 = 0;
      LOWORD(v6) = 0;
      LOWORD(v25) = 0;
      v26 = 0;
      goto LABEL_91;
    }
    if (a5)
    {
      if (v15 <= 9)
      {
        v56 = *a5;
        v112 = 0u;
        v113 = 0u;
        v109 = v56;
        v110 = 500;
        v111 = "10 <= parser.ntokens";
        v57 = v21;
        v58 = v29;
        v59 = v31;
        v60 = v30;
        GTError_addError(a5, (uint64_t)&v109);
        v30 = v60;
        v31 = v59;
        v29 = v58;
        v21 = v57;
LABEL_81:
        v24 = 0;
        LOWORD(v6) = 0;
        LOWORD(v25) = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v33 = 0;
        LOBYTE(v32) = 16;
        goto LABEL_20;
      }
    }
    else if (v15 < 0xA)
    {
      goto LABEL_81;
    }
    v102 = v21;
    v80 = *(unsigned int *)v123;
    v96 = *v119;
    v99 = *v120 & 1;
    v93 = *v121;
    if (v15 < 0xC)
      v27 = v80 | 0xFF00000000;
    else
      v27 = ((unint64_t)*(unsigned __int8 *)v125 << 40) | ((unint64_t)*(_QWORD *)v126 << 32) | v80;
    v89 = a3[16];
    if (*(_BYTE *)v124)
      v90 = a3[16];
    else
      v90 = 0;
    if (*(_BYTE *)v124)
      v33 = 0;
    else
      v33 = a3[16];
    a3[16] = v89 + 24;
    v91 = DecodeDYMTLStructType(v89, (unsigned int *)((char *)v8 + *v8), a3, v6, a5);
    v28 = v90;
    v8 = v91;
    v24 = 0;
    LOWORD(v6) = 0;
    LOWORD(v25) = 0;
    v26 = 0;
    LOBYTE(v32) = 16;
    v21 = v102;
    v31 = v96;
    v29 = v99;
    v30 = v93;
    goto LABEL_20;
  }
  if (*v118)
  {
    if (v32 != 1)
    {
      if (v32 == 2)
      {
        if (a5)
        {
          if (v15 <= 8)
          {
            v36 = *a5;
            v112 = 0u;
            v113 = 0u;
            v109 = v36;
            v110 = 500;
            v111 = "9 <= parser.ntokens";
            v37 = v21;
            v38 = v29;
            v39 = v31;
            v40 = v30;
            GTError_addError(a5, (uint64_t)&v109);
            v30 = v40;
            v31 = v39;
            v29 = v38;
            v21 = v37;
LABEL_56:
            v24 = 0;
            LOWORD(v6) = 0;
            LOWORD(v25) = 0;
            v26 = 0;
            v27 = 0;
            v28 = 0;
            v33 = 0;
LABEL_95:
            LOBYTE(v32) = 2;
            goto LABEL_20;
          }
        }
        else if (v15 < 9)
        {
          goto LABEL_56;
        }
        v66 = *(unsigned __int8 *)v123 | ((unint64_t)*v122 << 8);
        v24 = 0;
        LOWORD(v6) = 0;
        if (v15 < 0xB)
        {
          LOWORD(v25) = 0;
          v26 = 0;
          v27 = 0;
          v33 = 0;
          v28 = v66 | 0x10000;
        }
        else
        {
          LOWORD(v25) = 0;
          v26 = 0;
          v27 = 0;
          v33 = 0;
          v28 = ((unint64_t)*v124 << 16) | ((unint64_t)*(unsigned __int8 *)v125 << 24) | v66;
        }
        goto LABEL_95;
      }
LABEL_52:
      LOWORD(v6) = 0;
      LOWORD(v25) = 0;
      v27 = 0;
      v28 = 0;
      v33 = 0;
      goto LABEL_20;
    }
    if (a5)
    {
      if (v15 <= 8)
      {
        v51 = *a5;
        v112 = 0u;
        v113 = 0u;
        v109 = v51;
        v110 = 500;
        v111 = "9 <= parser.ntokens";
        v52 = v21;
        v53 = v29;
        v54 = v31;
        v55 = v30;
        GTError_addError(a5, (uint64_t)&v109);
        v30 = v55;
        v31 = v54;
        v29 = v53;
        v21 = v52;
LABEL_77:
        v24 = 0;
        LOWORD(v6) = 0;
        LOWORD(v25) = 0;
        v26 = 0;
        v27 = 0;
        v28 = 0;
LABEL_93:
        v33 = 0;
        LOBYTE(v32) = 1;
        goto LABEL_20;
      }
    }
    else if (v15 < 9)
    {
      goto LABEL_77;
    }
    v28 = *(unsigned int *)v123 | ((unint64_t)(unsigned __int16)*(_QWORD *)v122 << 32);
    if (v15 >= 0xC)
    {
      v75 = *(_QWORD *)v124;
      v28 = *(unsigned int *)v123 | ((unint64_t)(unsigned __int16)*(_QWORD *)v122 << 32) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)v124 << 48);
      if (*v126)
      {
        v101 = v21;
        v105 = *(unsigned int *)v123 | ((unint64_t)(unsigned __int16)*(_QWORD *)v122 << 32) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)v124 << 48);
        v92 = *v121;
        v95 = *v119;
        v98 = *v120 & 1;
        v76 = *(_QWORD *)v125;
        v33 = a3[15];
        v77 = a3[16];
        a3[15] = v33 + 24;
        a3[16] = v77 + 24;
        v8 = DecodeDYMTLStructType(v77, (unsigned int *)((char *)v8 + *v8), a3, v6, a5);
        if (!(_DWORD)v6)
          return v8;
        v78 = v77;
        *(_BYTE *)v33 = 60;
        *(_BYTE *)(v33 + 22) = v75;
        *(_DWORD *)(v33 + 16) = v76;
        if (a5 && v75 != 1)
        {
          v79 = *a5;
          v112 = 0u;
          v113 = 0u;
          v109 = v79;
          v110 = 500;
          v111 = "result.threadgroupMemory.dataType == GTMTLDataTypeStruct";
          GTError_addError(a5, (uint64_t)&v109);
        }
        v27 = 0;
        v26 = 0;
        LOWORD(v25) = 0;
        LOWORD(v6) = 0;
        v24 = 0;
        *(_QWORD *)(v33 + 8) = v78;
        LOBYTE(v32) = 1;
        v21 = v101;
        v28 = v105;
        v31 = v95;
        v29 = v98;
        v30 = v92;
        goto LABEL_21;
      }
    }
    v24 = 0;
    LOWORD(v6) = 0;
    LOWORD(v25) = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_93;
  }
  if (a5)
  {
    if (v15 <= 9)
    {
      v46 = *a5;
      v112 = 0u;
      v113 = 0u;
      v109 = v46;
      v110 = 500;
      v111 = "10 <= parser.ntokens";
      v47 = v21;
      v48 = v29;
      v49 = v31;
      v50 = v30;
      GTError_addError(a5, (uint64_t)&v109);
      v30 = v50;
      v31 = v49;
      v29 = v48;
      v21 = v47;
LABEL_68:
      v24 = 0;
      LOWORD(v6) = 0;
      LOWORD(v25) = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
LABEL_97:
      LOBYTE(v32) = 0;
      v33 = 0;
      goto LABEL_20;
    }
  }
  else if (v15 < 0xA)
  {
    goto LABEL_68;
  }
  v28 = *(unsigned int *)v123 | ((unint64_t)(unsigned __int16)*(_QWORD *)v122 << 32) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)v124 << 48);
  if (v15 < 0xC)
  {
    v24 = 0;
    LOWORD(v6) = 0;
    LOWORD(v25) = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_97;
  }
  if (*(_BYTE *)v125)
  {
    v104 = *(unsigned int *)v123 | ((unint64_t)(unsigned __int16)*(_QWORD *)v122 << 32) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)v124 << 48);
    v70 = *v121;
    v71 = *v119;
    v72 = *v120 & 1;
    v73 = v21;
    if (a5 && *(_QWORD *)v124 != 1)
    {
      v74 = *a5;
      v112 = 0u;
      v113 = 0u;
      v109 = v74;
      v110 = 500;
      v111 = "result.buffer.dataType == GTMTLDataTypeStruct";
      GTError_addError(a5, (uint64_t)&v109);
    }
    v33 = a3[16];
    a3[16] = v33 + 24;
    v8 = DecodeDYMTLStructType(v33, (unsigned int *)((char *)v8 + *v8), a3, v6, a5);
    v21 = v73;
    v29 = v72;
    v31 = v71;
    v30 = v70;
    v28 = v104;
  }
  else
  {
    v33 = 0;
  }
  v24 = 0;
  LOWORD(v6) = 0;
  LOWORD(v25) = 0;
  v26 = 0;
  v27 = 0;
  LOBYTE(v32) = 0;
  v28 |= (unint64_t)*v126 << 56;
LABEL_20:
  if (v107)
  {
LABEL_21:
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v33;
    *(_BYTE *)(a1 + 16) = v32;
    *(_BYTE *)(a1 + 17) = v31;
    *(_BYTE *)(a1 + 18) = v30;
    *(_BYTE *)(a1 + 19) = v29;
    *(_DWORD *)(a1 + 20) = 0;
    *(_QWORD *)(a1 + 24) = v28;
    *(_QWORD *)(a1 + 32) = v27;
    *(_QWORD *)(a1 + 40) = v26;
    *(_WORD *)(a1 + 48) = v25;
    *(_WORD *)(a1 + 50) = v6;
    *(_BYTE *)(a1 + 52) = v24;
    *(_WORD *)(a1 + 53) = v114;
    *(_BYTE *)(a1 + 55) = v115;
  }
  return v8;
}

unsigned int *DecodeDYMTLStructType(uint64_t a1, unsigned int *a2, _QWORD *a3, uint64_t a4, int *a5)
{
  unsigned int *v7;
  unsigned int v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  const char *v23;
  int v24;
  BOOL v25;
  const void *v26;
  int v27;
  size_t v28;
  char *v29;
  void *v30;
  size_t v31;
  int v32;
  char v33;
  __int16 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  _BOOL4 v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  _QWORD *v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  __int16 v77;
  char v78[16];
  int *v79;
  int v80;
  int v81;
  const char *v82;
  __int128 v83;
  __int128 __s;
  int *v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  __int16 *v88;
  _BYTE *v89;
  _BYTE *v90;

  v7 = a2;
  v9 = a2[1];
  if (a5)
  {
    if (v9 != -12272)
    {
      v10 = *a5;
      v83 = 0u;
      __s = 0u;
      v80 = v10;
      v81 = 500;
      v11 = "it->fenum == kDYFEInternalData";
LABEL_95:
      v82 = v11;
      GTError_addError(a5, (uint64_t)&v80);
      goto LABEL_96;
    }
    goto LABEL_5;
  }
  if (v9 == -12272)
  {
LABEL_5:
    v67 = 0;
    v12 = FBDecoder_DecodeArguments((unsigned int *)&v67, (uint64_t)(a2 + 9), *a2 - 36, (uint64_t)v78, 2uLL);
    if (a5)
    {
      if (v12)
      {
        v13 = *a5;
        v83 = 0u;
        __s = 0u;
        v80 = v13;
        v81 = 500;
        v11 = "err == FBUF_SUCCESS";
        goto LABEL_95;
      }
      if (HIDWORD(v67) <= 1)
      {
        v57 = *a5;
        v83 = 0u;
        __s = 0u;
        v80 = v57;
        v81 = 500;
        v11 = "2 <= parser.ntokens";
        goto LABEL_95;
      }
    }
    else
    {
      if (v12)
        v14 = 0;
      else
        v14 = HIDWORD(v67) > 1;
      if (!v14)
        goto LABEL_96;
    }
    v15 = *v79;
    v65 = a3[17];
    a3[17] = v65 + 32 * v15;
    v16 = v15;
    if ((int)v15 < 1)
      goto LABEL_97;
    v60 = v15;
    v61 = a1;
    v17 = 0;
    v66 = 32 * v15;
    while (1)
    {
      v7 = (unsigned int *)((char *)v7 + *v7);
      v77 = 0;
      v76 = 0;
      v18 = v7[1];
      if (a5)
      {
        if (v18 != -12272)
        {
          v19 = *a5;
          v83 = 0uLL;
          __s = 0uLL;
          v80 = v19;
          v81 = 500;
          v82 = "it->fenum == kDYFEInternalData";
          v20 = &v80;
LABEL_34:
          GTError_addError(a5, (uint64_t)v20);
          goto LABEL_35;
        }
      }
      else if (v18 != -12272)
      {
        goto LABEL_35;
      }
      v75 = 0;
      v21 = FBDecoder_DecodeArguments((unsigned int *)&v75, (uint64_t)(v7 + 9), *v7 - 36, (uint64_t)&v80, 9uLL);
      if (a5)
      {
        if (v21)
        {
          v22 = *a5;
          v71 = 0;
          v72 = 0;
          v73 = 0;
          v68 = v22;
          v69 = 500;
          v23 = "err == FBUF_SUCCESS";
        }
        else
        {
          v24 = HIDWORD(v75);
          if (HIDWORD(v75) > 5)
            goto LABEL_29;
          v32 = *a5;
          v71 = 0;
          v72 = 0;
          v73 = 0;
          v68 = v32;
          v69 = 500;
          v23 = "6 <= parser.ntokens";
        }
        v70 = v23;
        v74 = 0;
        v20 = &v68;
        goto LABEL_34;
      }
      v24 = HIDWORD(v75);
      if (v21)
        v25 = 0;
      else
        v25 = HIDWORD(v75) > 5;
      if (v25)
      {
LABEL_29:
        v26 = (const void *)__s;
        v27 = *(_DWORD *)v83;
        if ((_QWORD)__s)
        {
          v28 = strlen((const char *)__s);
          v29 = (char *)a3[23];
          v30 = v29;
          v31 = v28 + 1;
          if (v28 != -1)
          {
LABEL_42:
            a3[23] = &v29[v31];
            if ((_DWORD)a4)
              memcpy(v30, v26, v31);
            v35 = *v85;
            v38 = *v86;
            v39 = *v87;
            if (v24 != 6)
            {
              if (v24 != 7)
              {
                if (v24 == 8)
                {
                  v34 = *v88;
                  if (*v89)
                  {
                    v62 = *v87;
                    v63 = *v86;
                    goto LABEL_51;
                  }
LABEL_53:
                  v40 = 0;
LABEL_54:
                  v33 = 0;
LABEL_68:
                  switch(v27)
                  {
                    case 0x3Cu:
                      if (v40)
                      {
                        v36 = a3[15];
                        a3[15] = v36 + 24;
                        v7 = DecodeDYMTLPointerType(v36, (unsigned int *)((char *)v7 + *v7), (uint64_t)a3, a4, a5);
                      }
                      else
                      {
                        v36 = 0;
                      }
                      LOBYTE(v27) = 60;
                      goto LABEL_36;
                    case 2u:
                      if (a5)
                      {
                        if (v39)
                        {
                          v50 = a3;
                          v36 = a3[18];
                          a3[18] = v36 + 32;
                          v51 = (unsigned int *)((char *)v7 + *v7);
                          v52 = v36;
                          v53 = a4;
                          v54 = a5;
                          goto LABEL_87;
                        }
                        v56 = *a5;
                        v71 = 0;
                        v72 = 0;
                        v73 = 0;
                        v68 = v56;
                        v69 = 500;
                        v70 = "isArrayType";
                        v74 = 0;
                        GTError_addError(a5, (uint64_t)&v68);
LABEL_92:
                        v36 = 0;
                      }
                      else
                      {
                        if (!v39)
                          goto LABEL_92;
                        v50 = a3;
                        v36 = a3[18];
                        a3[18] = v36 + 32;
                        v51 = (unsigned int *)((char *)v7 + *v7);
                        v52 = v36;
                        v53 = a4;
                        v54 = 0;
LABEL_87:
                        v7 = DecodeDYMTLArrayType(v52, v51, v50, v53, v54);
                      }
                      LOBYTE(v27) = 2;
                      goto LABEL_36;
                    case 1u:
                      if (a5)
                      {
                        if (v38)
                        {
                          v45 = a3;
                          v36 = a3[16];
                          a3[16] = v36 + 24;
                          v46 = (char *)v7 + *v7;
                          v47 = v36;
                          v48 = a4;
                          v49 = a5;
                          goto LABEL_84;
                        }
                        v55 = *a5;
                        v71 = 0;
                        v72 = 0;
                        v73 = 0;
                        v68 = v55;
                        v69 = 500;
                        v70 = "isStructType";
                        v74 = 0;
                        GTError_addError(a5, (uint64_t)&v68);
LABEL_89:
                        v36 = 0;
                      }
                      else
                      {
                        if (!v38)
                          goto LABEL_89;
                        v45 = a3;
                        v36 = a3[16];
                        a3[16] = v36 + 24;
                        v46 = (char *)v7 + *v7;
                        v47 = v36;
                        v48 = a4;
                        v49 = 0;
LABEL_84:
                        v7 = (unsigned int *)DecodeDYMTLStructType(v47, v46, v45, v48, v49);
                      }
                      LOBYTE(v27) = 1;
                      goto LABEL_36;
                  }
LABEL_74:
                  v36 = 0;
                  goto LABEL_36;
                }
                v34 = *v88;
                v40 = *v90 != 0;
                if (!*v89)
                  goto LABEL_54;
                v62 = *v87;
                v63 = *v86;
LABEL_57:
                v7 = (unsigned int *)((char *)v7 + *v7);
                v75 = 0;
                v41 = FBDecoder_DecodeArguments((unsigned int *)&v75, (uint64_t)(v7 + 9), *v7 - 36, (uint64_t)&v80, 9uLL);
                if (a5)
                {
                  if (v41)
                  {
                    v42 = *a5;
                    v71 = 0;
                    v72 = 0;
                    v73 = 0;
                    v68 = v42;
                    v69 = 500;
                    v70 = "err == FBUF_SUCCESS";
                    v74 = 0;
                    GTError_addError(a5, (uint64_t)&v68);
LABEL_61:
                    v33 = 0;
                    goto LABEL_74;
                  }
                  if ((v27 - 62) > 0xFu)
                    v43 = 0;
                  else
                    v43 = asc_4A9374[(v27 - 62)];
                  if (*(_QWORD *)v83 != v43)
                  {
                    v44 = *a5;
                    v71 = 0;
                    v72 = 0;
                    v73 = 0;
                    v68 = v44;
                    v69 = 500;
                    v70 = "pixelFormat == DataTypeToPixelFormat(result.dataType)";
                    v74 = 0;
                    GTError_addError(a5, (uint64_t)&v68);
                  }
                }
                else if (v41)
                {
                  goto LABEL_61;
                }
                v33 = *(_BYTE *)__s;
                v39 = v62;
                v38 = v63;
                goto LABEL_68;
              }
              if (*(_BYTE *)v88)
              {
                v62 = *v87;
                v63 = *v86;
                v34 = 0;
LABEL_51:
                v40 = 0;
                goto LABEL_57;
              }
            }
            v34 = 0;
            goto LABEL_53;
          }
        }
        else
        {
          v31 = 0;
          v29 = (char *)a3[23];
        }
        v30 = 0;
        goto LABEL_42;
      }
LABEL_35:
      v33 = 0;
      LOBYTE(v27) = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v30 = 0;
LABEL_36:
      if ((_DWORD)a4)
      {
        v37 = v65 + v17;
        *(_QWORD *)v37 = v30;
        *(_QWORD *)(v37 + 8) = v36;
        *(_DWORD *)(v37 + 16) = v35;
        *(_WORD *)(v37 + 20) = 0;
        *(_WORD *)(v37 + 22) = v34;
        *(_BYTE *)(v37 + 24) = v27;
        *(_BYTE *)(v37 + 25) = v33;
        *(_DWORD *)(v37 + 26) = v76;
        *(_WORD *)(v37 + 30) = v77;
      }
      v17 += 32;
      if (v66 == v17)
      {
        v16 = v60;
        a1 = v61;
        goto LABEL_97;
      }
    }
  }
LABEL_96:
  v65 = 0;
  v16 = 0;
LABEL_97:
  if ((_DWORD)a4)
  {
    *(_BYTE *)a1 = 1;
    *(_DWORD *)(a1 + 16) = v16;
    v58 = v65;
    if (!v16)
      v58 = 0;
    *(_QWORD *)(a1 + 8) = v58;
  }
  return v7;
}

unsigned int *DecodeDYMTLArrayType(uint64_t a1, unsigned int *a2, _QWORD *a3, uint64_t a4, int *a5)
{
  unsigned int *v8;
  unsigned int v10;
  int v11;
  const char *v12;
  int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  char v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  __int16 v23;
  char v24;
  int v25;
  uint64_t v26;
  char v27;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  const char *v44;
  __int128 v45;
  __int128 v46;
  _DWORD v47[2];
  _BYTE v48[16];
  int *v49;
  char *v50;
  int *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  _BYTE *v54;
  __int16 *v55;
  _BYTE *v56;

  v8 = a2;
  memset(v47, 0, 7);
  v10 = a2[1];
  if (a5)
  {
    if (v10 != -12272)
    {
      v11 = *a5;
      v45 = 0u;
      v46 = 0u;
      v42 = v11;
      v43 = 500;
      v12 = "it->fenum == kDYFEInternalData";
LABEL_20:
      v44 = v12;
      GTError_addError(a5, (uint64_t)&v42);
      goto LABEL_21;
    }
  }
  else if (v10 != -12272)
  {
LABEL_21:
    v24 = 0;
    v18 = 0;
    v23 = 0;
    LOWORD(v17) = 0;
    v19 = 0;
    v26 = 0;
    v27 = 0;
    goto LABEL_22;
  }
  v41 = 0;
  v13 = FBDecoder_DecodeArguments((unsigned int *)&v41, (uint64_t)(a2 + 9), *a2 - 36, (uint64_t)v48, 9uLL);
  if (a5)
  {
    if (v13)
    {
      v14 = *a5;
      v45 = 0u;
      v46 = 0u;
      v42 = v14;
      v43 = 500;
      v12 = "err == FBUF_SUCCESS";
      goto LABEL_20;
    }
    v15 = HIDWORD(v41);
    if (HIDWORD(v41) <= 5)
    {
      v25 = *a5;
      v45 = 0u;
      v46 = 0u;
      v42 = v25;
      v43 = 500;
      v12 = "6 <= parser.ntokens";
      goto LABEL_20;
    }
  }
  else
  {
    v15 = HIDWORD(v41);
    if (v13)
      v16 = 0;
    else
      v16 = HIDWORD(v41) > 5;
    if (!v16)
      goto LABEL_21;
  }
  v17 = *v49;
  v18 = *v50;
  v19 = *v51;
  v20 = *v52;
  v21 = *v53;
  if (v15 < 7)
  {
    v23 = 0;
    v24 = 0;
    v22 = 1;
    goto LABEL_43;
  }
  if (v15 != 7)
  {
    v23 = *v55;
    if (v15 < 9)
    {
      v22 = 1;
      if (!*v54)
      {
LABEL_36:
        v24 = 0;
        goto LABEL_43;
      }
    }
    else
    {
      v22 = *v56 == 0;
      if (!*v54)
        goto LABEL_36;
    }
    v38 = *v53;
    v39 = *v52;
    v40 = *v49;
    goto LABEL_30;
  }
  v22 = 1;
  if (!*v54)
  {
    v23 = 0;
    goto LABEL_36;
  }
  v38 = *v53;
  v39 = *v52;
  v40 = *v49;
  v23 = 0;
LABEL_30:
  v8 = (unsigned int *)((char *)v8 + *v8);
  v41 = 0;
  v29 = FBDecoder_DecodeArguments((unsigned int *)&v41, (uint64_t)(v8 + 9), *v8 - 36, (uint64_t)v48, 9uLL);
  if (a5)
  {
    if (v29)
    {
      v30 = *a5;
      v45 = 0u;
      v46 = 0u;
      v42 = v30;
      v43 = 500;
      v44 = "err == FBUF_SUCCESS";
      GTError_addError(a5, (uint64_t)&v42);
LABEL_34:
      v24 = 0;
      v26 = 0;
LABEL_63:
      v27 = 2;
LABEL_66:
      LOWORD(v17) = v40;
      goto LABEL_22;
    }
    if ((v18 - 62) > 0xFu)
      v31 = 0;
    else
      v31 = asc_4A9374[(v18 - 62)];
    if (*(_QWORD *)v49 != v31)
    {
      v32 = *a5;
      v45 = 0u;
      v46 = 0u;
      v42 = v32;
      v43 = 500;
      v44 = "pixelFormat == DataTypeToPixelFormat(result.elementType)";
      GTError_addError(a5, (uint64_t)&v42);
    }
  }
  else if (v29)
  {
    goto LABEL_34;
  }
  v24 = *v50;
  v20 = v39;
  LOWORD(v17) = v40;
  v21 = v38;
LABEL_43:
  switch(v18)
  {
    case 60:
      if (v22)
      {
        v26 = 0;
      }
      else
      {
        v26 = a3[15];
        a3[15] = v26 + 24;
        v33 = v17;
        v8 = DecodeDYMTLPointerType(v26, (unsigned int *)((char *)v8 + *v8), (uint64_t)a3, a4, a5);
        LOWORD(v17) = v33;
      }
      v27 = 2;
      v18 = 60;
      goto LABEL_22;
    case 2:
      if (a5)
      {
        LOWORD(v40) = v17;
        if (v21)
        {
          v26 = a3[18];
          a3[18] = v26 + 32;
          v8 = (unsigned int *)DecodeDYMTLArrayType(v26, (char *)v8 + *v8, a3, a4, a5);
        }
        else
        {
          v36 = *a5;
          v45 = 0u;
          v46 = 0u;
          v42 = v36;
          v43 = 500;
          v44 = "isArrayType";
          GTError_addError(a5, (uint64_t)&v42);
          v26 = 0;
        }
        v18 = 2;
        goto LABEL_63;
      }
      if (v21)
      {
        v26 = a3[18];
        a3[18] = v26 + 32;
        v34 = v17;
        v8 = (unsigned int *)DecodeDYMTLArrayType(v26, (char *)v8 + *v8, a3, a4, 0);
        LOWORD(v17) = v34;
      }
      else
      {
        v26 = 0;
      }
      v18 = 2;
      break;
    case 1:
      if (!a5)
      {
        if (v20)
        {
          v26 = a3[16];
          a3[16] = v26 + 24;
          v35 = v17;
          v8 = (unsigned int *)DecodeDYMTLStructType(v26, (char *)v8 + *v8, a3, a4, 0);
          LOWORD(v17) = v35;
        }
        else
        {
          v26 = 0;
        }
        v27 = 2;
        v18 = 1;
        goto LABEL_22;
      }
      LOWORD(v40) = v17;
      if (v20)
      {
        v26 = a3[16];
        a3[16] = v26 + 24;
        v8 = (unsigned int *)DecodeDYMTLStructType(v26, (char *)v8 + *v8, a3, a4, a5);
      }
      else
      {
        v37 = *a5;
        v45 = 0u;
        v46 = 0u;
        v42 = v37;
        v43 = 500;
        v44 = "isStructType";
        GTError_addError(a5, (uint64_t)&v42);
        v26 = 0;
      }
      v27 = 2;
      v18 = 1;
      goto LABEL_66;
    default:
      v26 = 0;
      break;
  }
  v27 = 2;
LABEL_22:
  if ((_DWORD)a4)
  {
    *(_BYTE *)a1 = v27;
    *(_DWORD *)(a1 + 1) = v47[0];
    *(_DWORD *)(a1 + 4) = *(_DWORD *)((char *)v47 + 3);
    *(_QWORD *)(a1 + 8) = v26;
    *(_DWORD *)(a1 + 16) = v19;
    *(_WORD *)(a1 + 20) = v17;
    *(_WORD *)(a1 + 22) = v23;
    *(_BYTE *)(a1 + 24) = v18;
    *(_BYTE *)(a1 + 25) = v24;
    *(_DWORD *)(a1 + 26) = 0;
    *(_WORD *)(a1 + 30) = 0;
  }
  return v8;
}

unsigned int *DecodeDYMTLPointerType(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  unsigned int *v8;
  unsigned int v10;
  int v11;
  const char *v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  char v17;
  __int16 v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  char v27;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  const char *v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[16];
  unsigned __int8 *v43;
  char *v44;
  __int16 *v45;
  int *v46;
  _BYTE *v47;
  _BYTE *v48;

  v8 = a2;
  v10 = a2[1];
  if (a5)
  {
    if (v10 != -12272)
    {
      v11 = *a5;
      v40 = 0u;
      v41 = 0u;
      v37 = v11;
      v38 = 500;
      v12 = "it->fenum == kDYFEInternalData";
LABEL_20:
      v39 = v12;
      GTError_addError(a5, (uint64_t)&v37);
      goto LABEL_21;
    }
  }
  else if (v10 != -12272)
  {
LABEL_21:
    v17 = 0;
    LOBYTE(v16) = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v27 = 0;
    goto LABEL_22;
  }
  v36 = 0;
  v13 = FBDecoder_DecodeArguments((unsigned int *)&v36, (uint64_t)(a2 + 9), *a2 - 36, (uint64_t)v42, 8uLL);
  if (a5)
  {
    if (v13)
    {
      v14 = *a5;
      v40 = 0u;
      v41 = 0u;
      v37 = v14;
      v38 = 500;
      v12 = "err == FBUF_SUCCESS";
      goto LABEL_20;
    }
    if (HIDWORD(v36) <= 6)
    {
      v26 = *a5;
      v40 = 0u;
      v41 = 0u;
      v37 = v26;
      v38 = 500;
      v12 = "7 <= parser.ntokens";
      goto LABEL_20;
    }
  }
  else
  {
    if (v13)
      v15 = 0;
    else
      v15 = HIDWORD(v36) > 6;
    if (!v15)
      goto LABEL_21;
  }
  v16 = *v43;
  v17 = *v44;
  v18 = *v45;
  v19 = *v46;
  if (v16 != 2)
  {
    if (v16 != 1)
    {
      v20 = 0;
      v27 = 60;
      goto LABEL_22;
    }
    if (a5)
    {
      if (*v47)
      {
        v20 = *(_QWORD *)(a3 + 128);
        *(_QWORD *)(a3 + 128) = v20 + 24;
        v21 = (char *)v8 + *v8;
        v22 = v20;
        v23 = a3;
        v24 = a4;
        v25 = a5;
LABEL_31:
        v8 = (unsigned int *)DecodeDYMTLStructType(v22, v21, v23, v24, v25);
LABEL_37:
        v27 = 60;
        LOBYTE(v16) = 1;
        goto LABEL_22;
      }
      v34 = *a5;
      v40 = 0u;
      v41 = 0u;
      v37 = v34;
      v38 = 500;
      v39 = "isStructType";
      GTError_addError(a5, (uint64_t)&v37);
    }
    else if (*v47)
    {
      v20 = *(_QWORD *)(a3 + 128);
      *(_QWORD *)(a3 + 128) = v20 + 24;
      v21 = (char *)v8 + *v8;
      v22 = v20;
      v23 = a3;
      v24 = a4;
      v25 = 0;
      goto LABEL_31;
    }
    v20 = 0;
    goto LABEL_37;
  }
  if (!a5)
  {
    if (*v48)
    {
      v20 = *(_QWORD *)(a3 + 144);
      *(_QWORD *)(a3 + 144) = v20 + 32;
      v29 = (char *)v8 + *v8;
      v30 = v20;
      v31 = a3;
      v32 = a4;
      v33 = 0;
      goto LABEL_34;
    }
LABEL_39:
    v20 = 0;
    goto LABEL_40;
  }
  if (!*v48)
  {
    v35 = *a5;
    v40 = 0u;
    v41 = 0u;
    v37 = v35;
    v38 = 500;
    v39 = "isArrayType";
    GTError_addError(a5, (uint64_t)&v37);
    goto LABEL_39;
  }
  v20 = *(_QWORD *)(a3 + 144);
  *(_QWORD *)(a3 + 144) = v20 + 32;
  v29 = (char *)v8 + *v8;
  v30 = v20;
  v31 = a3;
  v32 = a4;
  v33 = a5;
LABEL_34:
  v8 = (unsigned int *)DecodeDYMTLArrayType(v30, v29, v31, v32, v33);
LABEL_40:
  v27 = 60;
  LOBYTE(v16) = 2;
LABEL_22:
  if ((_DWORD)a4)
  {
    *(_BYTE *)a1 = v27;
    *(_DWORD *)(a1 + 1) = 0;
    *(_DWORD *)(a1 + 4) = 0;
    *(_QWORD *)(a1 + 8) = v20;
    *(_DWORD *)(a1 + 16) = v19;
    *(_WORD *)(a1 + 20) = v18;
    *(_BYTE *)(a1 + 22) = v16;
    *(_BYTE *)(a1 + 23) = v17;
  }
  return v8;
}

uint64_t DecodeDYMTLComputePipelineReflection(unsigned int *a1, _QWORD *a2, uint64_t a3, int *a4)
{
  unsigned int *v7;
  unsigned int v8;
  int v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  unsigned __int16 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  size_t v50;
  char *v51;
  void *v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  size_t v57;
  char *v58;
  void *v59;
  size_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t result;
  int v65;
  int *v66;
  int v67;
  int v68;
  const char *v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  const char *v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  _OWORD v85[2];
  __int128 v86;
  __int128 v87;
  int v88;
  int v89;
  int v90;
  const char *v91;
  __int128 v92;
  __int128 __s;
  char *v94;

  v7 = a1;
  v86 = 0u;
  v87 = 0u;
  v88 = 0;
  v83 = 0u;
  v84 = 0u;
  memset(v85, 0, 26);
  v8 = a1[8];
  if (a4)
  {
    if ((v8 & 0x1000) == 0)
    {
      v9 = *a4;
      v92 = 0uLL;
      __s = 0uLL;
      v89 = v9;
      v90 = 500;
      v91 = "header->flags & 0x00001000";
      GTError_addError(a4, (uint64_t)&v89);
LABEL_5:
      v75 = 0;
      v10 = 0;
      v11 = a2[14];
      goto LABEL_35;
    }
  }
  else if ((v8 & 0x1000) == 0)
  {
    goto LABEL_5;
  }
  v12 = 0;
  v13 = 0;
  v10 = 0;
  while (1)
  {
    v14 = (unsigned int *)((char *)a1 + *a1);
    v15 = v14[1];
    if (a4)
    {
      if (v15 != -12272)
      {
        v19 = *a4;
        v92 = 0u;
        __s = 0u;
        v89 = v19;
        v90 = 500;
        v91 = "header->fenum == kDYFEInternalData";
        v20 = &v89;
        goto LABEL_30;
      }
    }
    else if (v15 != -12272)
    {
      goto LABEL_31;
    }
    v82 = 0;
    v16 = FBDecoder_DecodeArguments((unsigned int *)&v82, (uint64_t)(v14 + 9), *v14 - 36, (uint64_t)&v89, 0xDuLL) & 0xFFFFFFFD;
    if (!a4)
    {
      if (v16)
        v17 = 0;
      else
        v17 = HIDWORD(v82) > 1;
      if (!v17)
        goto LABEL_31;
      goto LABEL_20;
    }
    if (v16)
      break;
    if (HIDWORD(v82) <= 1)
    {
      v22 = *a4;
      v80 = 0u;
      v81 = 0u;
      v77 = v22;
      v78 = 500;
      v23 = "2 <= parser.ntokens";
      goto LABEL_29;
    }
LABEL_20:
    v18 = *(_DWORD *)v92;
    if (*(_DWORD *)v92 == 126)
    {
      ++v10;
    }
    else if (v18 == 106)
    {
      ++v13;
    }
    else if (v18 == 105)
    {
      ++v12;
    }
    a1 = InternalDataArgumentChainEnd(v14, a4);
    if ((*((_BYTE *)a1 + 33) & 0x20) != 0)
      goto LABEL_31;
  }
  v21 = *a4;
  v80 = 0u;
  v81 = 0u;
  v77 = v21;
  v78 = 500;
  v23 = "err == 0 || err == 2";
LABEL_29:
  v79 = v23;
  v20 = &v77;
LABEL_30:
  GTError_addError(a4, (uint64_t)v20);
LABEL_31:
  if (v12)
    v24 = a2[14];
  else
    v24 = 0;
  v11 = a2[14] + 56 * v12;
  v75 = v24;
  v76 = v11;
  if (!v13)
  {
LABEL_35:
    v13 = 0;
    v76 = 0;
  }
  a2[14] = v11 + 56 * v13;
  if (v10)
    v25 = a2[22];
  else
    v25 = 0;
  if (v10)
    v26 = a2[22] + 8 * v10;
  else
    v26 = 0;
  a2[22] += 8 * v10 + 8 * v10;
  v27 = v7[8];
  if ((v27 & 0x1000) == 0)
    goto LABEL_95;
  if (!a4)
  {
    if ((v27 & 0x2000) == 0)
      goto LABEL_47;
LABEL_95:
    LOWORD(v29) = 0;
    LOWORD(v30) = 0;
    LOWORD(v31) = 0;
    LOWORD(v32) = 0;
    v74 = 0;
LABEL_96:
    if (!(_DWORD)a3)
      goto LABEL_98;
LABEL_97:
    v61 = a2[11];
    *(_OWORD *)(v61 + 8) = 0uLL;
    v62 = v87;
    *(_OWORD *)(v61 + 56) = v86;
    *(_OWORD *)(v61 + 72) = v62;
    *(_OWORD *)(v61 + 144) = *(_OWORD *)((char *)v85 + 10);
    *(_OWORD *)(v61 + 134) = v85[0];
    v63 = v83;
    *(_OWORD *)(v61 + 118) = v84;
    *(_QWORD *)v61 = -1;
    *(_QWORD *)(v61 + 24) = v75;
    *(_QWORD *)(v61 + 32) = v76;
    *(_QWORD *)(v61 + 40) = v25;
    *(_QWORD *)(v61 + 48) = v26;
    *(_DWORD *)(v61 + 88) = v88;
    *(_WORD *)(v61 + 92) = v29;
    *(_WORD *)(v61 + 94) = v30;
    *(_WORD *)(v61 + 96) = v31;
    *(_WORD *)(v61 + 98) = v32;
    *(_WORD *)(v61 + 100) = v74;
    *(_OWORD *)(v61 + 102) = v63;
    goto LABEL_98;
  }
  if ((v27 & 0x2000) != 0)
  {
    v28 = *a4;
    v92 = 0u;
    __s = 0u;
    v89 = v28;
    v90 = 500;
    v91 = "!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
    GTError_addError(a4, (uint64_t)&v89);
    goto LABEL_95;
  }
LABEL_47:
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v74 = 0;
  while (2)
  {
    v7 = (unsigned int *)((char *)v7 + *v7);
    v33 = v7[1];
    if (a4)
    {
      if (v33 != -12272)
      {
        v65 = *a4;
        v92 = 0u;
        __s = 0u;
        v89 = v65;
        v90 = 500;
        v91 = "header->fenum == kDYFEInternalData";
        v66 = &v89;
        goto LABEL_102;
      }
    }
    else if (v33 != -12272)
    {
      goto LABEL_96;
    }
    v82 = 0;
    v34 = FBDecoder_DecodeArguments((unsigned int *)&v82, (uint64_t)(v7 + 9), *v7 - 36, (uint64_t)&v89, 0xDuLL);
    if (a4)
    {
      if (v34)
      {
        v67 = *a4;
        v80 = 0u;
        v81 = 0u;
        v77 = v67;
        v78 = 500;
        v69 = "err == FBUF_SUCCESS";
        goto LABEL_101;
      }
      v35 = HIDWORD(v82);
      if (HIDWORD(v82) <= 1)
      {
        v68 = *a4;
        v80 = 0u;
        v81 = 0u;
        v77 = v68;
        v78 = 500;
        v69 = "2 <= parser.ntokens";
        goto LABEL_101;
      }
    }
    else
    {
      v35 = HIDWORD(v82);
      if (v34)
        v36 = 0;
      else
        v36 = HIDWORD(v82) > 1;
      if (!v36)
        goto LABEL_96;
    }
    v37 = *(_DWORD *)v92;
    if (*(int *)v92 <= 106)
    {
      if (v37 == 105)
      {
        v39 = v29;
        v40 = v31;
        v41 = v32;
        v42 = v26;
        v43 = v25;
        v44 = v30;
        v45 = (v39 + 1);
        v7 = DecodeDYMTLBinding(v75 + 56 * (unsigned __int16)v39, v7, a2, a3, a4);
        v46 = v45;
        v30 = v44;
        v25 = v43;
        v26 = v42;
        v32 = v41;
        v31 = v40;
        v29 = v46;
      }
      else if (v37 == 106)
      {
        v38 = v30;
        v30 = (v30 + 1);
        v7 = DecodeDYMTLBinding(v76 + 56 * v38, v7, a2, a3, a4);
      }
      goto LABEL_93;
    }
    if (v37 != 107)
    {
      if (v37 != 126)
        goto LABEL_93;
      if (a4)
      {
        if (v35 <= 3)
          goto LABEL_100;
      }
      else if (v35 < 4)
      {
        goto LABEL_96;
      }
      v71 = v30;
      v72 = v32;
      v73 = v29;
      v47 = v31;
      v48 = (const void *)__s;
      if ((_QWORD)__s)
      {
        v49 = a3;
        v50 = strlen((const char *)__s);
        v51 = (char *)a2[23];
        v52 = v51;
        v53 = v50 + 1;
        if (v50 != -1)
        {
LABEL_82:
          v54 = v26;
          a2[23] = &v51[v53];
          if ((_DWORD)v49)
            memcpy(v52, v48, v53);
          v55 = v25;
          v56 = v94;
          if (v94)
          {
            v57 = strlen(v94);
            v58 = (char *)a2[23];
            v59 = v58;
            v60 = v57 + 1;
            if (v57 != -1)
              goto LABEL_89;
          }
          else
          {
            v60 = 0;
            v58 = (char *)a2[23];
          }
          v59 = 0;
LABEL_89:
          a2[23] = &v58[v60];
          if ((_DWORD)v49)
          {
            memcpy(v59, v56, v60);
            *(_QWORD *)(v55 + 8 * (unsigned __int16)v47) = v52;
            *(_QWORD *)(v54 + 8 * (unsigned __int16)v47) = v59;
            v25 = v55;
            v26 = v54;
            v31 = (v47 + 1);
            a3 = v49;
          }
          else
          {
            v25 = v55;
            v26 = v54;
            a3 = v49;
            v31 = v47;
          }
          v29 = v73;
          v32 = v72;
          v30 = v71;
LABEL_93:
          if ((*((_BYTE *)v7 + 33) & 0x20) != 0)
            goto LABEL_96;
          continue;
        }
      }
      else
      {
        v49 = a3;
        v53 = 0;
        v51 = (char *)a2[23];
      }
      v52 = 0;
      goto LABEL_82;
    }
    break;
  }
  if (!a4)
  {
    if (v35 < 4)
      goto LABEL_96;
    goto LABEL_79;
  }
  if (v35 > 3)
  {
LABEL_79:
    v32 = *(unsigned __int16 *)__s;
    v74 = *(_WORD *)v94;
    goto LABEL_93;
  }
LABEL_100:
  v70 = *a4;
  v80 = 0u;
  v81 = 0u;
  v77 = v70;
  v78 = 500;
  v69 = "4 <= parser.ntokens";
LABEL_101:
  v79 = v69;
  v66 = &v77;
LABEL_102:
  GTError_addError(a4, (uint64_t)v66);
  if ((_DWORD)a3)
    goto LABEL_97;
LABEL_98:
  result = a2[11];
  a2[11] = result + 160;
  return result;
}

uint64_t DecodeDYMTLRenderPipelineReflection(unsigned int *a1, _QWORD *a2, unsigned int a3, int *a4)
{
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  uint64_t v16;
  int v17;
  unsigned __int16 v18;
  unsigned int *v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int *v27;
  int v28;
  int v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int16 v48;
  unsigned __int16 v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  BOOL v55;
  int v56;
  int v57;
  const void *v58;
  size_t v59;
  _QWORD *v60;
  char *v61;
  void *v62;
  size_t v63;
  uint64_t v64;
  char *v65;
  size_t v66;
  char *v67;
  void *v68;
  size_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t result;
  int v76;
  int *v77;
  int v78;
  int v79;
  const char *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int16 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int16 v92;
  unsigned __int16 v94;
  unsigned __int16 v95;
  unsigned __int16 v96;
  unsigned __int16 v97;
  unsigned __int16 v98;
  unsigned __int16 v99;
  unsigned __int16 v100;
  uint64_t v101;
  _BYTE __src[280];
  __int128 v104;
  int v105;
  int v106;
  const char *v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _BYTE v115[22];
  int v116;
  int v117;
  const char *v118;
  __int128 v119;
  __int128 __s;
  char *v121;

  v5 = a2;
  v6 = a1;
  v104 = 0uLL;
  v111 = 0u;
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  memset(v115, 0, sizeof(v115));
  memset(__src, 0, sizeof(__src));
  v7 = a1[8];
  if (a4)
  {
    if ((v7 & 0x1000) == 0)
    {
      v8 = *a4;
      v119 = 0uLL;
      __s = 0uLL;
      v116 = v8;
      v117 = 500;
      v118 = "header->flags & 0x00001000";
      GTError_addError(a4, (uint64_t)&v116);
LABEL_5:
      v91 = 0;
      LOWORD(v9) = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = v5[14];
      goto LABEL_48;
    }
  }
  else if ((v7 & 0x1000) == 0)
  {
    goto LABEL_5;
  }
  v95 = 0;
  v17 = 0;
  v9 = 0;
  v97 = 0;
  v99 = 0;
  v11 = 0;
  v18 = 0;
  v13 = 0;
  v15 = 0;
  while (1)
  {
    v19 = (unsigned int *)((char *)a1 + *a1);
    v20 = v19[1];
    if (a4)
    {
      if (v20 != -12272)
      {
        v26 = *a4;
        v119 = 0u;
        __s = 0u;
        v116 = v26;
        v117 = 500;
        v118 = "header->fenum == kDYFEInternalData";
        v27 = &v116;
        goto LABEL_43;
      }
    }
    else if (v20 != -12272)
    {
      goto LABEL_44;
    }
    v110 = 0;
    v21 = FBDecoder_DecodeArguments((unsigned int *)&v110, (uint64_t)(v19 + 9), *v19 - 36, (uint64_t)&v116, 0xDuLL);
    if (!a4)
    {
      if (v21)
        v22 = 0;
      else
        v22 = HIDWORD(v110) > 1;
      if (!v22)
        goto LABEL_44;
      goto LABEL_20;
    }
    if (v21)
      break;
    if (HIDWORD(v110) <= 1)
    {
      v29 = *a4;
      v108 = 0u;
      v109 = 0u;
      v105 = v29;
      v106 = 500;
      v30 = "2 <= parser.ntokens";
      goto LABEL_42;
    }
LABEL_20:
    v23 = *(_DWORD *)v119;
    if (*(int *)v119 <= 120)
    {
      if (v23 == 104)
        v24 = v9 + 1;
      else
        v24 = v9;
      if (v23 == 103)
        v25 = v17 + 1;
      else
        v25 = v17;
      if (v23 == 103)
        v24 = v9;
      if (v23 == 102)
      {
        ++v18;
      }
      else
      {
        v17 = v25;
        v9 = v24;
      }
    }
    else
    {
      switch(v23)
      {
        case 121:
          ++v99;
          break;
        case 126:
          ++v15;
          break;
        case 130:
          ++v11;
          break;
        case 131:
          ++v95;
          break;
        case 133:
          ++v13;
          break;
        case 134:
          ++v97;
          break;
        default:
          break;
      }
    }
    a1 = InternalDataArgumentChainEnd(v19, a4);
    if ((*((_BYTE *)a1 + 33) & 0x20) != 0)
      goto LABEL_44;
  }
  v28 = *a4;
  v108 = 0u;
  v109 = 0u;
  v105 = v28;
  v106 = 500;
  v30 = "err == 0";
LABEL_42:
  v107 = v30;
  v27 = &v105;
LABEL_43:
  GTError_addError(a4, (uint64_t)v27);
LABEL_44:
  v5 = a2;
  v12 = v95;
  if ((_WORD)v17)
    v31 = a2[14];
  else
    v31 = 0;
  v91 = v31;
  v16 = a2[14] + 56 * (unsigned __int16)v17;
  v101 = v16;
  v14 = v97;
  v10 = v99;
  if (!v18)
  {
LABEL_48:
    v18 = 0;
    v101 = 0;
  }
  v32 = v16 + 56 * v18;
  if (v11)
    v33 = v32;
  else
    v33 = 0;
  v34 = v32 + 56 * v11;
  if (v13)
    v35 = v34;
  else
    v35 = 0;
  v36 = v34 + 56 * v13;
  if (v12)
    v37 = v36;
  else
    v37 = 0;
  v89 = v37;
  v38 = v36 + 56 * v12;
  if (v14)
    v39 = v38;
  else
    v39 = 0;
  v88 = v39;
  v40 = v38 + 56 * v14;
  if ((_WORD)v9)
    v41 = v40;
  else
    v41 = 0;
  v90 = v41;
  v42 = v40 + 56 * (unsigned __int16)v9;
  if (v10)
    v43 = v42;
  else
    v43 = 0;
  v87 = v43;
  v5[14] = v42 + 56 * v10;
  if (v15)
    v44 = v5[22];
  else
    v44 = 0;
  if (v15)
    v45 = v5[22] + 8 * v15;
  else
    v45 = 0;
  v84 = v45;
  v85 = v44;
  v5[22] += 8 * v15 + 8 * v15;
  v46 = v6[8];
  if ((v46 & 0x1000) == 0)
  {
    LOWORD(v47) = 0;
    v48 = 0;
    v98 = 0;
    v100 = 0;
    v94 = 0;
    v96 = 0;
    v49 = 0;
    v92 = 0;
    v86 = 0;
    if (!a3)
      goto LABEL_134;
    goto LABEL_133;
  }
  if (!a4)
  {
    v50 = a3;
    if ((v46 & 0x2000) == 0)
      goto LABEL_80;
LABEL_131:
    LOWORD(v47) = 0;
    v48 = 0;
    v98 = 0;
    v100 = 0;
    v94 = 0;
    v96 = 0;
    v49 = 0;
    v92 = 0;
    v86 = 0;
LABEL_132:
    if (!(_DWORD)v50)
      goto LABEL_134;
    goto LABEL_133;
  }
  v50 = a3;
  if ((v46 & 0x2000) != 0)
  {
    v51 = *a4;
    v119 = 0u;
    __s = 0u;
    v116 = v51;
    v117 = 500;
    v118 = "!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
    GTError_addError(a4, (uint64_t)&v116);
    goto LABEL_131;
  }
LABEL_80:
  v47 = 0;
  v48 = 0;
  v98 = 0;
  v100 = 0;
  v94 = 0;
  v96 = 0;
  v49 = 0;
  v92 = 0;
  v86 = 0;
  while (2)
  {
    v6 = (unsigned int *)((char *)v6 + *v6);
    v52 = v6[1];
    if (a4)
    {
      if (v52 != -12272)
      {
        v76 = *a4;
        v119 = 0u;
        __s = 0u;
        v116 = v76;
        v117 = 500;
        v118 = "header->fenum == kDYFEInternalData";
        v77 = &v116;
        goto LABEL_137;
      }
    }
    else if (v52 != -12272)
    {
      goto LABEL_132;
    }
    v110 = 0;
    v53 = FBDecoder_DecodeArguments((unsigned int *)&v110, (uint64_t)(v6 + 9), *v6 - 36, (uint64_t)&v116, 0xDuLL);
    if (!a4)
    {
      v54 = HIDWORD(v110);
      if (v53)
        v55 = 0;
      else
        v55 = HIDWORD(v110) > 1;
      if (!v55)
        goto LABEL_132;
LABEL_94:
      v56 = *(_DWORD *)v119;
      if (*(int *)v119 <= 115)
      {
        switch(v56)
        {
          case 'f':
            v6 = DecodeDYMTLBinding(v101 + 56 * v49++, v6, v5, v50, a4);
            break;
          case 'g':
            v6 = DecodeDYMTLBinding(v91 + 56 * (unsigned __int16)v47, v6, v5, v50, a4);
            v47 = (v47 + 1);
            break;
          case 'h':
            v6 = DecodeDYMTLBinding(v90 + 56 * v48++, v6, v5, v50, a4);
            break;
          default:
LABEL_104:
            if (a4)
            {
              v57 = *a4;
              v108 = 0uLL;
              v109 = 0uLL;
              v105 = v57;
              v106 = 500;
              v107 = "0";
              GTError_addError(a4, (uint64_t)&v105);
            }
            break;
        }
      }
      else
      {
        switch(v56)
        {
          case 121:
            v6 = DecodeDYMTLBinding(v87 + 56 * v100++, v6, v5, v50, a4);
            break;
          case 122:
          case 123:
          case 124:
          case 125:
          case 127:
          case 128:
          case 129:
          case 132:
            goto LABEL_104;
          case 126:
            if (a4)
            {
              if (v54 <= 3)
              {
                v81 = *a4;
                v108 = 0u;
                v109 = 0u;
                v105 = v81;
                v106 = 500;
                v80 = "4 <= parser.ntokens";
                goto LABEL_136;
              }
            }
            else if (v54 < 4)
            {
              goto LABEL_132;
            }
            v82 = v47;
            v58 = (const void *)__s;
            if ((_QWORD)__s)
            {
              v59 = strlen((const char *)__s);
              v60 = v5;
              v61 = (char *)v5[23];
              v62 = v61;
              v63 = v59 + 1;
              if (v59 != -1)
                goto LABEL_119;
            }
            else
            {
              v63 = 0;
              v60 = v5;
              v61 = (char *)v5[23];
            }
            v62 = 0;
LABEL_119:
            v83 = v35;
            v60[23] = &v61[v63];
            if ((_DWORD)v50)
              memcpy(v62, v58, v63);
            v64 = v33;
            v65 = v121;
            if (v121)
            {
              v66 = strlen(v121);
              v67 = (char *)v60[23];
              v68 = v67;
              v69 = v66 + 1;
              if (v66 != -1)
                goto LABEL_126;
            }
            else
            {
              v69 = 0;
              v67 = (char *)v60[23];
            }
            v68 = 0;
LABEL_126:
            v60[23] = &v67[v69];
            if ((_DWORD)v50)
            {
              memcpy(v68, v65, v69);
              *(_QWORD *)(v85 + 8 * v86) = v62;
              *(_QWORD *)(v84 + 8 * v86++) = v68;
            }
            v5 = v60;
            v33 = v64;
            v47 = v82;
            v35 = v83;
            break;
          case 130:
            v6 = DecodeDYMTLBinding(v33 + 56 * v98++, v6, v5, v50, a4);
            break;
          case 131:
            v6 = DecodeDYMTLBinding(v89 + 56 * v96++, v6, v5, v50, a4);
            break;
          case 133:
            v6 = DecodeDYMTLBinding(v35 + 56 * v94++, v6, v5, v50, a4);
            break;
          case 134:
            v6 = DecodeDYMTLBinding(v88 + 56 * v92++, v6, v5, v50, a4);
            break;
          default:
            if (v56 != 116)
              goto LABEL_104;
            break;
        }
      }
      if ((*((_BYTE *)v6 + 33) & 0x20) != 0)
        goto LABEL_132;
      continue;
    }
    break;
  }
  if (!v53)
  {
    v54 = HIDWORD(v110);
    if (HIDWORD(v110) <= 1)
    {
      v79 = *a4;
      v108 = 0u;
      v109 = 0u;
      v105 = v79;
      v106 = 500;
      v80 = "2 <= parser.ntokens";
      goto LABEL_136;
    }
    goto LABEL_94;
  }
  v78 = *a4;
  v108 = 0u;
  v109 = 0u;
  v105 = v78;
  v106 = 500;
  v80 = "err == FBUF_SUCCESS";
LABEL_136:
  v107 = v80;
  v77 = &v105;
LABEL_137:
  GTError_addError(a4, (uint64_t)v77);
  if ((_DWORD)v50)
  {
LABEL_133:
    v70 = v5[12];
    *(_QWORD *)v70 = -1;
    *(_OWORD *)(v70 + 8) = v104;
    *(_QWORD *)(v70 + 24) = v91;
    *(_QWORD *)(v70 + 32) = v90;
    *(_QWORD *)(v70 + 40) = v33;
    *(_QWORD *)(v70 + 48) = v89;
    *(_QWORD *)(v70 + 56) = v87;
    *(_QWORD *)(v70 + 64) = 0;
    *(_QWORD *)(v70 + 72) = v101;
    *(_QWORD *)(v70 + 80) = v35;
    *(_QWORD *)(v70 + 88) = v88;
    *(_QWORD *)(v70 + 96) = v85;
    *(_QWORD *)(v70 + 104) = v84;
    v71 = v112;
    *(_OWORD *)(v70 + 112) = v111;
    *(_OWORD *)(v70 + 128) = v71;
    v72 = v113;
    v73 = v114;
    v74 = *(_OWORD *)v115;
    *(_QWORD *)(v70 + 190) = *(_QWORD *)&v115[14];
    *(_OWORD *)(v70 + 160) = v73;
    *(_OWORD *)(v70 + 176) = v74;
    *(_OWORD *)(v70 + 144) = v72;
    *(_WORD *)(v70 + 198) = v47;
    *(_WORD *)(v70 + 200) = v48;
    *(_WORD *)(v70 + 202) = v100;
    *(_WORD *)(v70 + 204) = v98;
    *(_WORD *)(v70 + 206) = v96;
    *(_WORD *)(v70 + 208) = v49;
    *(_WORD *)(v70 + 210) = v94;
    *(_WORD *)(v70 + 212) = v92;
    *(_WORD *)(v70 + 214) = v86;
    memcpy((void *)(v70 + 216), __src, 0x118uLL);
  }
LABEL_134:
  result = v5[12];
  v5[12] = result + 496;
  return result;
}

void DecodeDYMTLFunctionInfo(unsigned int *a1, _QWORD *a2, int a3, int *a4)
{
  unsigned int v4;
  unsigned int *v8;
  unsigned int v9;
  char v10;
  char v11;
  void *v12;
  unsigned int v13;
  char *v14;
  size_t v15;
  char *v16;
  size_t v17;
  char *v18;
  size_t v19;
  char *v20;
  void *v21;
  size_t v22;
  char *v23;
  size_t v24;
  char *v25;
  void *v26;
  size_t v27;
  char *v28;
  size_t v29;
  char *v30;
  size_t v31;
  void *v32;
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  uint64_t v37;
  int v38;
  char v39;
  char v40;
  size_t v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *__dst;
  __int128 v51;
  char *__s[2];
  char *v53[2];
  _DWORD v54[2];

  memset(v54, 0, 7);
  v4 = a1[8];
  if ((v4 & 0x1000) == 0)
    return;
  v8 = a1;
  if (a4)
  {
    if ((v4 & 0x2000) != 0)
    {
      v9 = *a4;
      *(_OWORD *)__s = 0u;
      *(_OWORD *)v53 = 0u;
      *(_QWORD *)&v51 = v9 | 0x1F400000000;
      *((_QWORD *)&v51 + 1) = "!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
      GTError_addError(a4, (uint64_t)&v51);
      goto LABEL_62;
    }
    goto LABEL_6;
  }
  if ((v4 & 0x2000) == 0)
  {
LABEL_6:
    v47 = 0;
    v48 = 0;
    v10 = 0;
    v11 = 0;
    v45 = 0;
    v46 = 0;
    v12 = 0;
    v49 = 0;
    __dst = 0;
    while (1)
    {
      v8 = (unsigned int *)((char *)v8 + *v8);
      v13 = v8[1];
      if (a4)
      {
        if (v13 != -12272)
        {
          v44 = *a4;
          *(_OWORD *)__s = 0u;
          *(_OWORD *)v53 = 0u;
          *(_QWORD *)&v51 = v44 | 0x1F400000000;
          *((_QWORD *)&v51 + 1) = "header->fenum == kDYFEInternalData";
          GTError_addError(a4, (uint64_t)&v51);
          if (!a3)
            goto LABEL_65;
LABEL_64:
          v43 = a2[3];
          *(_QWORD *)v43 = v49;
          *(_QWORD *)(v43 + 8) = __dst;
          *(_QWORD *)(v43 + 16) = v12;
          *(_QWORD *)(v43 + 24) = v45;
          *(_QWORD *)(v43 + 32) = v46;
          *(_WORD *)(v43 + 40) = WORD2(v47);
          *(_WORD *)(v43 + 42) = v47;
          *(_WORD *)(v43 + 44) = v48;
          *(_BYTE *)(v43 + 46) = v11;
          *(_BYTE *)(v43 + 47) = v10;
          *(_BYTE *)(v43 + 48) = BYTE4(v48);
          *(_DWORD *)(v43 + 49) = v54[0];
          *(_DWORD *)(v43 + 52) = *(_DWORD *)((char *)v54 + 3);
          goto LABEL_65;
        }
      }
      else if (v13 != -12272)
      {
        goto LABEL_63;
      }
      *(_OWORD *)__s = 0u;
      *(_OWORD *)v53 = 0u;
      v51 = 0u;
      DYTraceDecode_InternalData((uint64_t)&v51, (uint64_t)v8, *v8 - 36, 0);
      if (SDWORD2(v51) <= 109)
        break;
      switch(DWORD2(v51))
      {
        case 'n':
          LOWORD(v48) = __s[1];
          BYTE4(v48) = __s[0];
          break;
        case 'x':
          if (!v10)
            v46 = a2[21];
          v23 = v53[0];
          if (v53[0])
          {
            v24 = strlen(v53[0]);
            v25 = (char *)a2[23];
            v26 = v25;
            v27 = v24 + 1;
            if (v24 != -1)
              goto LABEL_45;
          }
          else
          {
            v27 = 0;
            v25 = (char *)a2[23];
          }
          v26 = 0;
LABEL_45:
          a2[23] = &v25[v27];
          if (a3)
          {
            memcpy(v26, v23, v27);
            v37 = a2[21];
            v38 = (int)__s[0];
            v39 = (char)__s[1];
            v40 = (char)v53[1];
            *(_QWORD *)v37 = v26;
            *(_DWORD *)(v37 + 8) = v38;
            *(_BYTE *)(v37 + 12) = v39;
            *(_BYTE *)(v37 + 13) = v40;
            *(_WORD *)(v37 + 14) = 0;
          }
          ++v10;
          a2[21] += 16;
          break;
        case 'u':
          v14 = __s[0];
          if (__s[0])
          {
            v15 = strlen(__s[0]);
            v16 = (char *)a2[23];
            v49 = v16;
            v17 = v15 + 1;
            if (v15 != -1)
            {
LABEL_36:
              a2[23] = &v16[v17];
              if (a3)
              {
                v32 = v49;
LABEL_59:
                memcpy(v32, v14, v17);
                break;
              }
              break;
            }
          }
          else
          {
            v17 = 0;
            v16 = (char *)a2[23];
          }
          v49 = 0;
          goto LABEL_36;
      }
LABEL_60:
      if ((*((_BYTE *)v8 + 33) & 0x20) != 0)
        goto LABEL_63;
    }
    if (DWORD2(v51) != 101)
    {
      if (DWORD2(v51) == 109)
      {
        if (!v11)
          v45 = a2[20];
        v18 = v53[0];
        if (v53[0])
        {
          v19 = strlen(v53[0]);
          v20 = (char *)a2[23];
          v21 = v20;
          v22 = v19 + 1;
          if (v19 != -1)
            goto LABEL_40;
        }
        else
        {
          v22 = 0;
          v20 = (char *)a2[23];
        }
        v21 = 0;
LABEL_40:
        a2[23] = &v20[v22];
        if (a3)
        {
          memcpy(v21, v18, v22);
          v33 = a2[20];
          v34 = (int)__s[0];
          v35 = (char)__s[1];
          v36 = (char)v53[1];
          *(_QWORD *)v33 = v21;
          *(_DWORD *)(v33 + 8) = v34;
          *(_BYTE *)(v33 + 12) = v35;
          *(_BYTE *)(v33 + 13) = v36;
          *(_WORD *)(v33 + 14) = 0;
        }
        ++v11;
        a2[20] += 16;
        goto LABEL_60;
      }
      goto LABEL_60;
    }
    v28 = v53[0];
    WORD2(v47) = __s[0];
    if (v53[0])
    {
      v29 = strlen(v53[0]);
      v30 = (char *)a2[23];
      __dst = v30;
      v31 = v29 + 1;
      if (v29 != -1)
      {
LABEL_50:
        a2[23] = &v30[v31];
        if (a3)
          memcpy(__dst, v28, v31);
        v14 = v53[1];
        LOWORD(v47) = __s[1];
        if (v53[1])
        {
          v41 = strlen(v53[1]);
          v42 = (char *)a2[23];
          v12 = v42;
          v17 = v41 + 1;
          if (v41 != -1)
          {
LABEL_57:
            a2[23] = &v42[v17];
            if (a3)
            {
              v32 = v12;
              goto LABEL_59;
            }
            goto LABEL_60;
          }
        }
        else
        {
          v17 = 0;
          v42 = (char *)a2[23];
        }
        v12 = 0;
        goto LABEL_57;
      }
    }
    else
    {
      v31 = 0;
      v30 = (char *)a2[23];
    }
    __dst = 0;
    goto LABEL_50;
  }
LABEL_62:
  v47 = 0;
  v48 = 0;
  v10 = 0;
  v11 = 0;
  v45 = 0;
  v46 = 0;
  v12 = 0;
  v49 = 0;
  __dst = 0;
LABEL_63:
  if (a3)
    goto LABEL_64;
LABEL_65:
  a2[3] += 56;
}

void DecodeDYMTLDynamicLibraryInfo(unsigned int *a1, _QWORD *a2, int a3, int *a4)
{
  unsigned int v4;
  unsigned int *v8;
  unsigned int v9;
  __int16 v10;
  void *v11;
  void *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  char *v17;
  size_t v18;
  char *v19;
  size_t v20;
  char *v21;
  size_t v22;
  char *v23;
  void *v24;
  size_t v25;
  size_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  char *__s[2];
  __int128 v34;
  int v35;
  __int16 v36;

  v36 = 0;
  v35 = 0;
  v4 = a1[8];
  if ((v4 & 0x1000) == 0)
    return;
  v8 = a1;
  if (a4)
  {
    if ((v4 & 0x2000) != 0)
    {
      v9 = *a4;
      *(_OWORD *)__s = 0u;
      v34 = 0u;
      *(_QWORD *)&v32 = v9 | 0x1F400000000;
      *((_QWORD *)&v32 + 1) = "!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
      GTError_addError(a4, (uint64_t)&v32);
      goto LABEL_43;
    }
    goto LABEL_6;
  }
  if ((v4 & 0x2000) == 0)
  {
LABEL_6:
    v10 = 0;
    v31 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v8 = (unsigned int *)((char *)v8 + *v8);
      v13 = v8[1];
      if (a4)
      {
        if (v13 != -12272)
        {
          v30 = *a4;
          *(_OWORD *)__s = 0u;
          v34 = 0u;
          *(_QWORD *)&v32 = v30 | 0x1F400000000;
          *((_QWORD *)&v32 + 1) = "header->fenum == kDYFEInternalData";
          GTError_addError(a4, (uint64_t)&v32);
          if (!a3)
            goto LABEL_46;
LABEL_45:
          v29 = a2[2];
          *(_QWORD *)v29 = v12;
          *(_QWORD *)(v29 + 8) = v11;
          *(_QWORD *)(v29 + 16) = v31;
          *(_WORD *)(v29 + 24) = v10;
          *(_DWORD *)(v29 + 26) = v35;
          *(_WORD *)(v29 + 30) = v36;
          goto LABEL_46;
        }
        *(_OWORD *)__s = 0u;
        v34 = 0u;
        v32 = 0u;
        v14 = *v8 - 36;
        v15 = (uint64_t)v8;
        v16 = a4;
      }
      else
      {
        if (v13 != -12272)
          goto LABEL_44;
        *(_OWORD *)__s = 0u;
        v34 = 0u;
        v32 = 0u;
        v14 = *v8 - 36;
        v15 = (uint64_t)v8;
        v16 = 0;
      }
      DYTraceDecode_InternalData((uint64_t)&v32, v15, v14, v16);
      if (DWORD2(v32) == 129)
      {
        if (!v10)
          v31 = a2[22];
        v21 = __s[0];
        if (__s[0])
        {
          v22 = strlen(__s[0]);
          v23 = (char *)a2[23];
          v24 = v23;
          v25 = v22 + 1;
          if (v22 != -1)
            goto LABEL_33;
        }
        else
        {
          v25 = 0;
          v23 = (char *)a2[23];
        }
        v24 = 0;
LABEL_33:
        a2[23] = &v23[v25];
        if (a3)
        {
          memcpy(v24, v21, v25);
          *(_QWORD *)a2[22] = v24;
        }
        ++v10;
        a2[22] += 8;
        goto LABEL_41;
      }
      if (DWORD2(v32) != 128)
      {
        if (DWORD2(v32) != 127)
          goto LABEL_41;
        v17 = __s[0];
        if (__s[0])
        {
          v18 = strlen(__s[0]);
          v19 = (char *)a2[23];
          v11 = v19;
          v20 = v18 + 1;
          if (v18 != -1)
          {
LABEL_29:
            a2[23] = &v19[v20];
            if (a3)
            {
              v28 = v11;
LABEL_40:
              memcpy(v28, v17, v20);
              goto LABEL_41;
            }
            goto LABEL_41;
          }
        }
        else
        {
          v20 = 0;
          v19 = (char *)a2[23];
        }
        v11 = 0;
        goto LABEL_29;
      }
      v17 = __s[0];
      if (!__s[0])
        break;
      v26 = strlen(__s[0]);
      v27 = (char *)a2[23];
      v12 = v27;
      v20 = v26 + 1;
      if (v26 == -1)
        goto LABEL_37;
LABEL_38:
      a2[23] = &v27[v20];
      if (a3)
      {
        v28 = v12;
        goto LABEL_40;
      }
LABEL_41:
      if ((*((_BYTE *)v8 + 33) & 0x20) != 0)
        goto LABEL_44;
    }
    v20 = 0;
    v27 = (char *)a2[23];
LABEL_37:
    v12 = 0;
    goto LABEL_38;
  }
LABEL_43:
  v10 = 0;
  v31 = 0;
  v11 = 0;
  v12 = 0;
LABEL_44:
  if (a3)
    goto LABEL_45;
LABEL_46:
  a2[2] += 32;
}

uint64_t DecodeDYMTLLibraryInfo(unsigned int *a1, uint64_t a2, int a3, int *a4)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int *v9;
  unsigned int v10;
  void *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  unsigned int v23;
  __int128 v24;
  char *__s[2];
  __int128 v26;
  __int128 v27;

  v27 = 0uLL;
  v4 = a1[8];
  if ((v4 & 0x1000) == 0)
    return 0;
  v9 = a1;
  if (a4)
  {
    if ((v4 & 0x2000) != 0)
    {
      v10 = *a4;
      *(_OWORD *)__s = 0u;
      v26 = 0u;
      *(_QWORD *)&v24 = v10 | 0x1F400000000;
      *((_QWORD *)&v24 + 1) = "!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
      GTError_addError(a4, (uint64_t)&v24);
      goto LABEL_27;
    }
    goto LABEL_7;
  }
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    v5 = 0;
    v11 = 0;
    while (1)
    {
      v9 = (unsigned int *)((char *)v9 + *v9);
      v12 = v9[1];
      if (a4)
      {
        if (v12 != -12272)
        {
          v23 = *a4;
          *(_OWORD *)__s = 0u;
          v26 = 0u;
          *(_QWORD *)&v24 = v23 | 0x1F400000000;
          *((_QWORD *)&v24 + 1) = "header->fenum == kDYFEInternalData";
          GTError_addError(a4, (uint64_t)&v24);
          if (!a3)
            goto LABEL_30;
LABEL_29:
          v21 = *(_QWORD *)(a2 + 48);
          *(_QWORD *)v21 = v11;
          *(_OWORD *)(v21 + 8) = v27;
          goto LABEL_30;
        }
        *(_OWORD *)__s = 0u;
        v26 = 0u;
        v24 = 0u;
        v13 = *v9 - 36;
        v14 = (uint64_t)v9;
        v15 = a4;
      }
      else
      {
        if (v12 != -12272)
          goto LABEL_28;
        *(_OWORD *)__s = 0u;
        v26 = 0u;
        v24 = 0u;
        v13 = *v9 - 36;
        v14 = (uint64_t)v9;
        v15 = 0;
      }
      DYTraceDecode_InternalData((uint64_t)&v24, v14, v13, v15);
      v16 = DWORD2(v24);
      if (DWORD2(v24) == 127)
        break;
      if (DWORD2(v24) == 108)
      {
        v17 = __s[1];
        if (__s[1])
          goto LABEL_17;
LABEL_20:
        v20 = 0;
        v17 = 0;
        v19 = *(char **)(a2 + 184);
        goto LABEL_21;
      }
LABEL_25:
      if ((*((_BYTE *)v9 + 33) & 0x20) != 0)
        goto LABEL_28;
    }
    v17 = __s[0];
    if (!__s[0])
      goto LABEL_20;
LABEL_17:
    v18 = strlen(v17);
    v19 = *(char **)(a2 + 184);
    v11 = v19;
    v20 = v18 + 1;
    if (v18 == -1)
LABEL_21:
      v11 = 0;
    *(_QWORD *)(a2 + 184) = &v19[v20];
    if (a3)
    {
      memcpy(v11, v17, v20);
      v5 = DWORD2(v24);
    }
    else
    {
      v5 = v16;
    }
    goto LABEL_25;
  }
LABEL_27:
  v5 = 0;
  v11 = 0;
LABEL_28:
  if (a3)
    goto LABEL_29;
LABEL_30:
  *(_QWORD *)(a2 + 48) += 24;
  return v5;
}

void DecodeDYMTLPipelineLibraryInfo(unsigned int *a1, _QWORD *a2, int a3, int *a4)
{
  unsigned int v4;
  unsigned int *v8;
  unsigned int v9;
  unsigned __int16 v10;
  _QWORD *v11;
  void *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  char *v17;
  size_t v18;
  char *v19;
  size_t v20;
  char *v21;
  size_t v22;
  char *v23;
  void *v24;
  size_t v25;
  char *v26;
  size_t v27;
  char *v28;
  void *v29;
  size_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _QWORD *v50;
  apr_pool_t *newpool[2];
  char *__s[2];
  __int128 v53;
  int v54;
  __int16 v55;

  v55 = 0;
  v54 = 0;
  v4 = a1[8];
  if ((v4 & 0x1000) == 0)
    return;
  v8 = a1;
  if (a4)
  {
    if ((v4 & 0x2000) != 0)
    {
      v9 = *a4;
      *(_OWORD *)__s = 0u;
      v53 = 0u;
      newpool[0] = (apr_pool_t *)(v9 | 0x1F400000000);
      newpool[1] = (apr_pool_t *)"!(header->flags & FBUF_ASSOCIATION_CHAIN_END)";
      GTError_addError(a4, (uint64_t)newpool);
LABEL_41:
      v10 = 0;
      v11 = 0;
      v50 = 0;
      v12 = 0;
LABEL_42:
      if (a3)
        goto LABEL_43;
      goto LABEL_55;
    }
  }
  else if ((v4 & 0x2000) != 0)
  {
    goto LABEL_41;
  }
  v10 = 0;
  v11 = 0;
  v50 = 0;
  v12 = 0;
  while (1)
  {
    v8 = (unsigned int *)((char *)v8 + *v8);
    v13 = v8[1];
    if (a4)
      break;
    if (v13 != -12272)
      goto LABEL_42;
    *(_OWORD *)__s = 0u;
    v53 = 0u;
    *(_OWORD *)newpool = 0u;
    v14 = *v8 - 36;
    v15 = (uint64_t)v8;
    v16 = 0;
LABEL_13:
    DYTraceDecode_InternalData((uint64_t)newpool, v15, v14, v16);
    if (LODWORD(newpool[1]) == 135)
    {
      if (!v10)
      {
        v50 = (_QWORD *)a2[22];
        v11 = v50 + 1;
      }
      v21 = __s[0];
      if (__s[0])
      {
        v22 = strlen(__s[0]);
        v23 = (char *)a2[23];
        v24 = v23;
        v25 = v22 + 1;
        if (v22 != -1)
        {
LABEL_29:
          a2[23] = &v23[v25];
          if (a3)
            memcpy(v24, v21, v25);
          v26 = __s[1];
          if (__s[1])
          {
            v27 = strlen(__s[1]);
            v28 = (char *)a2[23];
            v29 = v28;
            v30 = v27 + 1;
            if (v27 != -1)
              goto LABEL_36;
          }
          else
          {
            v30 = 0;
            v28 = (char *)a2[23];
          }
          v29 = 0;
LABEL_36:
          a2[23] = &v28[v30];
          if (a3)
          {
            memcpy(v29, v26, v30);
            *(_QWORD *)a2[22] = v24;
            *(_QWORD *)(a2[22] + 8) = v29;
          }
          ++v10;
          a2[22] += 16;
          goto LABEL_39;
        }
      }
      else
      {
        v25 = 0;
        v23 = (char *)a2[23];
      }
      v24 = 0;
      goto LABEL_29;
    }
    if (LODWORD(newpool[1]) == 132)
    {
      v17 = __s[0];
      if (__s[0])
      {
        v18 = strlen(__s[0]);
        v19 = (char *)a2[23];
        v12 = v19;
        v20 = v18 + 1;
        if (v18 != -1)
        {
LABEL_25:
          a2[23] = &v19[v20];
          if (a3)
            memcpy(v12, v17, v20);
          goto LABEL_39;
        }
      }
      else
      {
        v20 = 0;
        v19 = (char *)a2[23];
      }
      v12 = 0;
      goto LABEL_25;
    }
LABEL_39:
    if ((*((_BYTE *)v8 + 33) & 0x20) != 0)
      goto LABEL_42;
  }
  if (v13 == -12272)
  {
    *(_OWORD *)__s = 0u;
    v53 = 0u;
    *(_OWORD *)newpool = 0u;
    v14 = *v8 - 36;
    v15 = (uint64_t)v8;
    v16 = a4;
    goto LABEL_13;
  }
  v49 = *a4;
  *(_OWORD *)__s = 0u;
  v53 = 0u;
  newpool[0] = (apr_pool_t *)(v49 | 0x1F400000000);
  newpool[1] = (apr_pool_t *)"header->fenum == kDYFEInternalData";
  GTError_addError(a4, (uint64_t)newpool);
  if (!a3)
    goto LABEL_55;
LABEL_43:
  if (v10)
  {
    newpool[0] = 0;
    apr_pool_create_ex(newpool, 0, 0, (apr_allocator_t *)a4);
    v31 = v10;
    v32 = apr_palloc(newpool[0], 16 * v10);
    v33 = v50;
    v34 = v50;
    v35 = v32;
    v36 = v10;
    do
    {
      v37 = *v34;
      v34 += 2;
      *v35++ = v37;
      --v36;
    }
    while (v36);
    v38 = &v32[v10];
    v39 = v10;
    do
    {
      v40 = *v11;
      v11 += 2;
      *v38++ = v40;
      --v39;
    }
    while (v39);
    v41 = v32;
    v42 = v50;
    v43 = v10;
    do
    {
      v44 = *v41++;
      *v42++ = v44;
      --v43;
    }
    while (v43);
    v11 = &v50[v10];
    v45 = &v32[v10];
    v46 = v11;
    do
    {
      v47 = *v45++;
      *v46++ = v47;
      --v31;
    }
    while (v31);
    apr_pool_destroy(newpool[0]);
  }
  else
  {
    v33 = v50;
  }
  v48 = a2[7];
  *(_QWORD *)v48 = v12;
  *(_QWORD *)(v48 + 8) = v33;
  *(_QWORD *)(v48 + 16) = v11;
  *(_WORD *)(v48 + 24) = v10;
  *(_DWORD *)(v48 + 26) = v54;
  *(_WORD *)(v48 + 30) = v55;
LABEL_55:
  a2[7] += 32;
}

void *DecodeDYMTLRenderPassDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  int v8;
  void *result;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int16 v25;
  char v26;
  char v27;
  uint64_t *AliasStream2;
  uint64_t *v29;
  uint64_t *v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  __int16 v38;
  char v39;
  char v40;
  uint64_t *v41;
  uint64_t *v42;
  char v43;
  double v44;
  unsigned __int16 *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int16 v50;
  __int16 v51;
  char v52;
  __int16 v53;
  __int16 v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t *v58;
  uint64_t *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  unsigned __int16 *v69;
  _DWORD *v70;
  unint64_t v71;
  _DWORD *v72;
  uint64_t *i;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  _QWORD *v81;
  char *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  unsigned int v88;
  int v89;
  char v90;
  char v91;
  char v92;
  char v93;
  unsigned int v94;
  int v95;
  char v96;
  char v97;
  char v98;
  int v99;
  __int128 v100;
  char v101;
  char v102;
  uint64_t v103;
  __int128 v104;
  uint64_t *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD __dst[104];

  memcpy(__dst, &GTMTLRenderPassDescriptorDefaults, 0x338uLL);
  v8 = a4;
  result = a5;
  v10 = *(_DWORD *)a1;
  v11 = (uint64_t *)(a1 + 16);
  __dst[99] = *(_QWORD *)(a1 + 8);
  v108 = (uint64_t)result;
  v88 = v10;
  v89 = a4;
  while (1)
  {
    v12 = v11;
    v13 = *v11;
    v14 = v11[1];
    v15 = *((_BYTE *)v11 + 16);
    v16 = *((unsigned __int8 *)v11 + 24);
    v17 = *((unsigned __int8 *)v11 + 32);
    v18 = v11[5];
    v19 = *((_BYTE *)v11 + 48);
    v20 = *((_WORD *)v11 + 28);
    if (*v11 == -1)
      break;
    if (v10 <= 0x12)
    {
      v21 = 0;
      v24 = 0;
      v22 = *(_OWORD *)(v11 + 11);
      v23 = *(_OWORD *)(v11 + 13);
      v11 += 15;
      if (v8)
      {
LABEL_10:
        v25 = *((_WORD *)v12 + 32);
        v26 = *((_BYTE *)v12 + 72);
        v27 = *((_BYTE *)v12 + 80);
        if (result)
        {
          v90 = *((_BYTE *)v12 + 72);
          v91 = *((_BYTE *)v12 + 80);
          v92 = v24;
          v96 = v21;
          v100 = v23;
          v104 = v22;
          AliasStream2 = (uint64_t *)GetAliasStream2((uint64_t)result, v14);
          if (AliasStream2)
            v14 = *AliasStream2;
          else
            v14 = 0;
          v29 = (uint64_t *)GetAliasStream2(v108, v18);
          if (v29)
            v18 = *v29;
          else
            v18 = 0;
          result = (void *)v108;
          v10 = v88;
          v8 = v89;
          v23 = v100;
          v22 = v104;
          v24 = v92;
          v21 = v96;
          v26 = v90;
          v27 = v91;
        }
        v30 = &__dst[8 * v13];
        *v30 = v18;
        v30[1] = v14;
        *((_WORD *)v30 + 8) = v17;
        *((_WORD *)v30 + 9) = v25;
        *((_WORD *)v30 + 10) = v20;
        *((_WORD *)v30 + 11) = v16;
        *((_BYTE *)v30 + 24) = v15;
        *((_BYTE *)v30 + 25) = v26;
        *((_BYTE *)v30 + 26) = v19;
        *((_BYTE *)v30 + 27) = v27;
        *((_BYTE *)v30 + 28) = v21;
        *((_BYTE *)v30 + 29) = v24;
        *((_WORD *)v30 + 15) = 0;
        *((_OWORD *)v30 + 2) = v22;
        *((_OWORD *)v30 + 3) = v23;
      }
    }
    else
    {
      v21 = *((_BYTE *)v11 + 88);
      v22 = *((_OWORD *)v11 + 6);
      v23 = *((_OWORD *)v11 + 7);
      if (v10 < 0x27)
      {
        v24 = 0;
        v11 += 16;
        if (v8)
          goto LABEL_10;
      }
      else
      {
        v11 += 17;
        v24 = *((_BYTE *)v12 + 128);
        if (v8)
          goto LABEL_10;
      }
    }
  }
  if (v10 >= 0x13)
  {
    v31 = *((_BYTE *)v11 + 88);
    v32 = v11[12];
    if (v10 < 0x27)
    {
      v34 = 0;
      v33 = v11 + 16;
    }
    else
    {
      v33 = v11 + 17;
      v34 = *((_BYTE *)v11 + 128);
    }
    goto LABEL_26;
  }
  v34 = 0;
  v31 = 0;
  v35 = 0;
  v32 = v12[11];
  v33 = v12 + 15;
  if (v10 >= 5)
  {
LABEL_26:
    v36 = *v33++;
    v37 = v36;
    if (v36 == 255)
      v35 = 0;
    else
      v35 = v37;
    if (v8)
      goto LABEL_30;
  }
  else
  {
    if (!v8)
      goto LABEL_39;
LABEL_30:
    v38 = *((_WORD *)v12 + 32);
    v39 = *((_BYTE *)v12 + 72);
    v40 = *((_BYTE *)v12 + 80);
    if (result)
    {
      v93 = *((_BYTE *)v12 + 80);
      v97 = v34;
      v101 = v31;
      v105 = v33;
      v41 = (uint64_t *)GetAliasStream2((uint64_t)result, v14);
      if (v41)
        v14 = *v41;
      else
        v14 = 0;
      v42 = (uint64_t *)GetAliasStream2(v108, v18);
      if (v42)
        v18 = *v42;
      else
        v18 = 0;
      result = (void *)v108;
      v10 = v88;
      v8 = v89;
      v33 = v105;
      v34 = v97;
      v31 = v101;
      v40 = v93;
    }
    __dst[84] = v18;
    __dst[85] = v14;
    LOWORD(__dst[86]) = v17;
    WORD1(__dst[86]) = v38;
    WORD2(__dst[86]) = v20;
    HIWORD(__dst[86]) = v16;
    LOBYTE(__dst[87]) = v15;
    BYTE1(__dst[87]) = v39;
    BYTE2(__dst[87]) = v19;
    BYTE3(__dst[87]) = v40;
    BYTE4(__dst[87]) = v31;
    BYTE5(__dst[87]) = v34;
    HIWORD(__dst[87]) = 0;
    __dst[88] = v32;
    LOBYTE(__dst[89]) = v35;
    *(_DWORD *)((char *)&__dst[89] + 1) = 0;
    HIDWORD(__dst[89]) = 0;
  }
LABEL_39:
  if (v10 <= 0x12)
  {
    v43 = 0;
    v46 = 0;
    v44 = *((double *)v33 + 10);
    v45 = (unsigned __int16 *)(v33 + 14);
    if (v8)
      goto LABEL_46;
  }
  else
  {
    v43 = *((_BYTE *)v33 + 80);
    v44 = *((double *)v33 + 11);
    if (v10 < 0x27)
    {
      v46 = 0;
      v45 = (unsigned __int16 *)(v33 + 15);
      if (!v8)
        goto LABEL_55;
    }
    else
    {
      v45 = (unsigned __int16 *)(v33 + 16);
      v46 = *((_BYTE *)v33 + 120);
      if (!v8)
        goto LABEL_55;
    }
LABEL_46:
    v47 = *v33;
    v48 = v33[4];
    v49 = *((_BYTE *)v33 + 8);
    v50 = *((unsigned __int8 *)v33 + 16);
    v51 = *((unsigned __int8 *)v33 + 24);
    v52 = *((_BYTE *)v33 + 40);
    v53 = *((unsigned __int8 *)v33 + 48);
    v54 = *((unsigned __int8 *)v33 + 56);
    v55 = *((_BYTE *)v33 + 64);
    v56 = *((_BYTE *)v33 + 72);
    v57 = v44;
    if (result)
    {
      v94 = v44;
      v98 = v49;
      v102 = v46;
      v106 = v43;
      v58 = (uint64_t *)GetAliasStream2((uint64_t)result, v47);
      if (v58)
        v47 = *v58;
      else
        v47 = 0;
      v59 = (uint64_t *)GetAliasStream2(v108, v48);
      if (v59)
        v48 = *v59;
      else
        v48 = 0;
      result = (void *)v108;
      v10 = v88;
      v8 = v89;
      v43 = v106;
      v49 = v98;
      v46 = v102;
      v57 = v94;
    }
    __dst[90] = v48;
    __dst[91] = v47;
    LOWORD(__dst[92]) = v51;
    WORD1(__dst[92]) = v54;
    WORD2(__dst[92]) = v53;
    HIWORD(__dst[92]) = v50;
    LOBYTE(__dst[93]) = v49;
    BYTE1(__dst[93]) = v55;
    BYTE2(__dst[93]) = v52;
    BYTE3(__dst[93]) = v56;
    BYTE4(__dst[93]) = v43;
    BYTE5(__dst[93]) = v46;
    HIWORD(__dst[93]) = 0;
    __dst[94] = v57;
  }
LABEL_55:
  if (v10 >= 7)
  {
    v60 = *v45;
    HIWORD(__dst[100]) = *v45;
    if (v10 < 0xD)
    {
      v67 = 0;
      v66 = 0;
      v65 = 0;
      v64 = 0;
      v63 = 0;
      v62 = 0;
      v61 = 0;
    }
    else
    {
      v61 = v45[4];
      WORD2(__dst[100]) = v45[4];
      v62 = *((_DWORD *)v45 + 4);
      LODWORD(__dst[100]) = v62;
      v63 = v45[12];
      HIWORD(__dst[101]) = v45[12];
      v64 = v45[16];
      WORD2(__dst[101]) = v45[16];
      v65 = v45[20];
      WORD1(__dst[101]) = v45[20];
      v66 = v45[24];
      LOWORD(__dst[101]) = v45[24];
      v67 = *((unsigned __int8 *)v45 + 56);
      LOBYTE(__dst[102]) = *((_BYTE *)v45 + 56);
      if (v10 != 13)
      {
        v68 = *((_QWORD *)v45 + 8);
        v69 = v45 + 36;
        v70 = *(_DWORD **)(a3 + 408);
        __dst[95] = v70;
        __dst[96] = (int)v68;
        if (v68 << 32)
        {
          v71 = 2 * (int)v68;
          if (v71 <= 1)
            v71 = 1;
          v72 = v70;
          do
          {
            if (v8)
              *v72 = *(_DWORD *)v69;
            v69 += 4;
            ++v72;
            --v71;
          }
          while (v71);
        }
        *(_QWORD *)(a3 + 408) = &v70[2 * (_DWORD)v68];
        if (v10 >= 0x14)
        {
          BYTE4(__dst[94]) = *(_QWORD *)v69;
          if (v10 >= 0x18)
          {
            BYTE2(__dst[102]) = *((_QWORD *)v69 + 1);
            if (v10 >= 0x21)
            {
              __dst[98] = *((_QWORD *)v69 + 2);
              if (v10 >= 0x27)
              {
                BYTE1(__dst[102]) = *((_QWORD *)v69 + 3);
                if (v10 >= 0x2A)
                {
                  __dst[97] = *((_QWORD *)v69 + 4);
                  BYTE3(__dst[102]) = *((_QWORD *)v69 + 5);
                  if (v10 >= 0x32)
                  {
                    v95 = v66;
                    v99 = v67;
                    for (i = (uint64_t *)(v69 + 44); ; i += 6)
                    {
                      v74 = *(i - 5);
                      if (v74 == -1)
                        break;
                      if (v8)
                      {
                        v75 = *(i - 4);
                        v76 = *(i - 3);
                        v78 = *(i - 2);
                        v77 = *(i - 1);
                        v79 = *i;
                        if (result)
                        {
                          v103 = *(i - 1);
                          v107 = *(i - 3);
                          v80 = (uint64_t *)GetAliasStream2((uint64_t)result, v75);
                          if (v80)
                            v75 = *v80;
                          else
                            v75 = 0;
                          result = (void *)v108;
                          v10 = v88;
                          v8 = v89;
                          v76 = v107;
                          v77 = v103;
                        }
                        v81 = &__dst[5 * v74 + 64];
                        *v81 = v79;
                        v81[1] = v78;
                        v81[2] = v75;
                        v81[3] = v77;
                        v81[4] = v76;
                      }
                    }
                    v66 = v95;
                    v67 = v99;
                    if (v10 >= 0x43)
                      BYTE4(__dst[102]) = *(i - 4);
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v60 == 0xFFFF)
      HIWORD(__dst[100]) = 0;
    if (v61 == 0xFFFF)
      WORD2(__dst[100]) = 0;
    if (v62 == -1)
      LODWORD(__dst[100]) = 0;
    if (v63 == 0xFFFF)
      HIWORD(__dst[101]) = 0;
    if (v64 == 0xFFFF)
      WORD2(__dst[101]) = 0;
    if (v65 == 0xFFFF)
      WORD1(__dst[101]) = 0;
    if (v66 == 0xFFFF)
      LOWORD(__dst[101]) = 0;
    if (v67 == 255)
      LOBYTE(__dst[102]) = 0;
  }
  v82 = *(char **)(a3 + 240);
  *(_QWORD *)(a3 + 240) = v82 + 824;
  if (v8)
  {
    if (!result)
    {
      v85 = &__dst[98];
      goto LABEL_105;
    }
    v83 = (uint64_t *)GetAliasStream2((uint64_t)result, __dst[99]);
    if (v83)
      v84 = *v83;
    else
      v84 = 0;
    __dst[99] = v84;
    v85 = (uint64_t *)GetAliasStream2(v108, __dst[98]);
    if (v85)
LABEL_105:
      v86 = *v85;
    else
      v86 = 0;
    __dst[98] = v86;
    return memcpy(v82, __dst, 0x338uLL);
  }
  return result;
}

size_t DecodeDYMTLRenderPipelineDescriptor(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t result;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _BYTE *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  char *v47;
  const void *v48;
  size_t v49;
  _QWORD *v50;
  size_t v51;
  _QWORD *v52;
  void *v53;
  const void *v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  _BYTE *v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *AliasStream2;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t *v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[189];
  _QWORD *v102[2];
  _BYTE __src[744];

  v102[1] = a2;
  memcpy(v101, &GTMTLRenderPipelineDescriptorDefaults, sizeof(v101));
  v9 = *(_DWORD *)a1;
  v101[162] = *(_QWORD *)(a1 + 8);
  v101[147] = *(_QWORD *)(a1 + 16);
  bzero(__src, 0x2E8uLL);
  if (v9 < 0x1A)
  {
    v11 = (uint64_t *)(a1 + 24);
    v10 = 31;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24);
    v11 = (uint64_t *)(a1 + 32);
    if ((int)v10 < 1)
      goto LABEL_12;
    v10 = v10;
  }
  v12 = &__src[11];
  do
  {
    if (a4)
    {
      v13 = *v11;
      v14 = v11[1];
      v15 = v11[2];
      if (*v11 == 0xFFFFFFFFLL)
        v13 = -1;
      *(_QWORD *)(v12 - 11) = v13;
      *(_WORD *)(v12 - 3) = v14;
      *(v12 - 1) = v15;
      *(_DWORD *)v12 = 0;
      v12[4] = 0;
    }
    v11 += 3;
    v12 += 16;
    --v10;
  }
  while (v10);
  v102[0] = v11;
  if (v9 <= 0x19)
  {
    v16 = 31;
    goto LABEL_15;
  }
LABEL_12:
  v17 = *v11++;
  LODWORD(v16) = v17;
  v102[0] = v11;
  if ((int)v17 < 1)
    goto LABEL_19;
  v16 = v16;
LABEL_15:
  v18 = &__src[502];
  do
  {
    v19 = *v11;
    v20 = v11[1];
    v21 = v11[2];
    v11 += 3;
    v102[0] = v11;
    if (a4)
    {
      *(_DWORD *)(v18 - 3) = v20;
      *((_BYTE *)v18 - 2) = v21;
      *((_BYTE *)v18 - 1) = v19;
      *v18 = 0;
    }
    v18 += 4;
    --v16;
  }
  while (v16);
LABEL_19:
  if ((a4 & 1) != 0)
    memcpy(v101, __src, 0x2E8uLL);
  v101[159] = *v11;
  v101[161] = v11[1];
  HIDWORD(v101[166]) = *((_DWORD *)v11 + 4);
  LOBYTE(v101[185]) = v11[3];
  BYTE1(v101[185]) = v11[4];
  BYTE5(v101[186]) = v11[5];
  WORD2(v101[167]) = v11[6];
  LOWORD(v101[169]) = v11[7];
  v22 = v11[8];
  v23 = v11 + 9;
  v102[0] = v23;
  if (v22)
  {
    v24 = &v101[93];
    do
    {
      MakeDYMTLRenderPipelineColorAttachmentDescriptor(v102, (uint64_t)v24, a4);
      v24 += 2;
      --v22;
    }
    while (v22);
    v23 = v102[0];
  }
  result = strlen((const char *)v23);
  v102[0] = (_QWORD *)((char *)v23 + (result & 0xFFFFFFFFFFFFFFF8) + 8);
  v26 = *(unsigned __int8 *)v23;
  if (!*(_BYTE *)v23)
    v23 = 0;
  if (v26)
  {
    result = strlen((const char *)v23);
    v27 = a3 + 52;
    v28 = a3[52];
    v29 = result + 1;
    if (result != -1)
    {
      v30 = (void *)a3[52];
      goto LABEL_32;
    }
  }
  else
  {
    v27 = a3 + 52;
    v28 = a3[52];
  }
  v29 = 0;
  v30 = 0;
LABEL_32:
  *v27 = v28 + v29;
  if (a4)
    result = (size_t)memcpy(v30, v23, v29);
  v101[150] = v30;
  if (v9 > 6)
  {
    v31 = v102[0];
    BYTE5(v101[185]) = *v102[0];
    if (v9 >= 9)
    {
      BYTE1(v101[188]) = v102[0][1];
      v101[151] = v102[0][2];
      BYTE6(v101[187]) = v102[0][3];
      BYTE5(v101[187]) = v102[0][4];
      BYTE4(v101[187]) = v102[0][5];
      v32 = v102[0][6];
      v102[0] += 6;
      HIBYTE(v101[187]) = v32;
      LOBYTE(v101[188]) = v31[7];
      if (v9 >= 0x12)
      {
        v33 = v31[8];
        v34 = v31 + 9;
        if (v33)
        {
          v35 = (char *)&v101[180] + 7;
          do
          {
            if (a4)
              *v35 = *v34;
            ++v34;
            ++v35;
            --v33;
          }
          while (v33);
        }
        v38 = *v34;
        v36 = v34 + 1;
        v37 = v38;
        v102[0] = v36;
        if (v38)
        {
          v39 = (char *)&v101[169] + 2;
          do
          {
            v41 = *v36++;
            v40 = v41;
            v102[0] = v36;
            if (a4)
              *v39 = v40;
            ++v39;
            --v37;
          }
          while (v37);
        }
        if (v9 >= 0x17)
        {
          BYTE3(v101[187]) = *v36;
          if (v9 >= 0x20)
          {
            BYTE3(v101[188]) = v36[1];
            v42 = v36[2];
            v102[0] = v36 + 2;
            LODWORD(v101[166]) = v42;
            if (v9 >= 0x26)
            {
              v101[158] = v36[3];
              if (v9 != 38)
              {
                BYTE6(v101[185]) = v36[4];
                HIBYTE(v101[184]) = v36[5];
                LODWORD(v101[167]) = v36[6];
                HIDWORD(v101[165]) = v36[7];
                HIBYTE(v101[185]) = v36[8];
                BYTE1(v101[186]) = v36[9];
                BYTE2(v101[186]) = v36[10];
                BYTE3(v101[186]) = v36[11];
                BYTE2(v101[188]) = v36[12];
                BYTE6(v101[184]) = v36[13];
                BYTE4(v101[186]) = v36[14];
                BYTE2(v101[185]) = v36[15];
                if (v9 >= 0x29)
                {
                  v101[160] = v36[16];
                  if (v9 != 41)
                  {
                    v101[145] = v36[17];
                    v101[146] = v36[18];
                    BYTE6(v101[186]) = v36[19];
                    LOBYTE(v101[186]) = v36[20];
                    BYTE3(v101[185]) = v36[21];
                    BYTE4(v101[185]) = v36[22];
                    v43 = v36[23];
                    v44 = v36 + 24;
                    v45 = (uint64_t *)((char *)v36 + ((v43 + 7) & 0xFFFFFFFFFFFFFFF8) + 192);
                    v102[0] = v45;
                    if (v43)
                      v46 = (void *)a3[52];
                    else
                      v46 = 0;
                    v47 = (char *)(a3[52] + v43);
                    a3[52] = v47;
                    if (a4)
                    {
                      if (v43)
                        v48 = v44;
                      else
                        v48 = 0;
                      result = (size_t)memcpy(v46, v48, v43);
                      v47 = (char *)a3[52];
                    }
                    v101[143] = v46;
                    v101[144] = v43;
                    v51 = *v45;
                    v50 = v45 + 1;
                    v49 = v51;
                    v52 = (_QWORD *)((char *)v50 + ((v51 + 7) & 0xFFFFFFFFFFFFFFF8));
                    v102[0] = v52;
                    if (v51)
                      v53 = v47;
                    else
                      v53 = 0;
                    a3[52] = &v47[v49];
                    if (a4)
                    {
                      if (v49)
                        v54 = v50;
                      else
                        v54 = 0;
                      result = (size_t)memcpy(v53, v54, v49);
                    }
                    v101[141] = v53;
                    v101[142] = v49;
                    if (v9 >= 0x33)
                    {
                      v57 = *v52;
                      v56 = v52 + 1;
                      v55 = v57;
                      v102[0] = v56;
                      v101[164] = v57;
                      if (v57)
                      {
                        v58 = 0;
                        v59 = (uint64_t *)a3[50];
                        v101[163] = v59;
                        do
                        {
                          v61 = *v56++;
                          v60 = v61;
                          v102[0] = v56;
                          if (a4)
                          {
                            if (a5)
                            {
                              result = GetAliasStream2(a5, v60);
                              if (result)
                                v60 = *(_QWORD *)result;
                              else
                                v60 = 0;
                            }
                            v59 = (uint64_t *)a3[50];
                            *v59 = v60;
                            v55 = v101[164];
                          }
                          a3[50] = ++v59;
                          ++v58;
                        }
                        while (v55 > v58);
                      }
                      else
                      {
                        v101[163] = 0;
                      }
                      v62 = *v56;
                      v102[0] = v56 + 1;
                      v101[149] = v62;
                      if (v62)
                      {
                        v63 = 0;
                        v64 = (uint64_t *)a3[50];
                        v101[148] = v64;
                        v65 = v56 + 2;
                        do
                        {
                          v66 = *(v65 - 1);
                          v102[0] = v65;
                          if (a4)
                          {
                            if (a5)
                            {
                              result = GetAliasStream2(a5, v66);
                              if (result)
                                v66 = *(_QWORD *)result;
                              else
                                v66 = 0;
                            }
                            v64 = (uint64_t *)a3[50];
                            *v64 = v66;
                            v62 = v101[149];
                          }
                          ++v65;
                          a3[50] = ++v64;
                          ++v63;
                        }
                        while (v62 > v63);
                      }
                      else
                      {
                        v101[148] = 0;
                      }
                      if (v9 >= 0x37)
                      {
                        MakeDYMTLLinkedFunctions((size_t)v102, &v101[133], a3, a4, a5);
                        result = MakeDYMTLLinkedFunctions((size_t)v102, &v101[109], a3, a4, a5);
                        if (v9 >= 0x3C)
                        {
                          v101[155] = *v102[0];
                          v101[152] = v102[0][1];
                          v67 = v102[0][2];
                          v68 = v102[0] + 3;
                          if (v67)
                          {
                            v69 = &v101[177];
                            do
                            {
                              if (a4)
                                *v69 = *v68;
                              ++v68;
                              ++v69;
                              --v67;
                            }
                            while (v67);
                          }
                          v72 = *v68;
                          v71 = v68 + 1;
                          v70 = v72;
                          v102[0] = v71;
                          if (v72)
                          {
                            v73 = (char *)&v101[173] + 1;
                            do
                            {
                              v75 = *v71++;
                              v74 = v75;
                              v102[0] = v71;
                              if (a4)
                                *v73 = v74;
                              ++v73;
                              --v70;
                            }
                            while (v70);
                          }
                          v78 = *v71;
                          v77 = v71 + 1;
                          v76 = v78;
                          v102[0] = v77;
                          v101[157] = v78;
                          if (v78)
                          {
                            v79 = 0;
                            v80 = (uint64_t *)a3[50];
                            v101[156] = v80;
                            do
                            {
                              v82 = *v77++;
                              v81 = v82;
                              v102[0] = v77;
                              if (a4)
                              {
                                if (a5)
                                {
                                  AliasStream2 = (uint64_t *)GetAliasStream2(a5, v81);
                                  if (AliasStream2)
                                    v81 = *AliasStream2;
                                  else
                                    v81 = 0;
                                }
                                v80 = (uint64_t *)a3[50];
                                *v80 = v81;
                                v76 = v101[157];
                              }
                              a3[50] = ++v80;
                              ++v79;
                            }
                            while (v76 > v79);
                          }
                          else
                          {
                            v101[156] = 0;
                          }
                          v84 = *v77;
                          v102[0] = v77 + 1;
                          v101[154] = v84;
                          if (v84)
                          {
                            v85 = 0;
                            v86 = (uint64_t *)a3[50];
                            v101[153] = v86;
                            v87 = v77 + 2;
                            do
                            {
                              v88 = *(v87 - 1);
                              v102[0] = v87;
                              if (a4)
                              {
                                if (a5)
                                {
                                  v89 = (uint64_t *)GetAliasStream2(a5, v88);
                                  if (v89)
                                    v88 = *v89;
                                  else
                                    v88 = 0;
                                }
                                v86 = (uint64_t *)a3[50];
                                *v86 = v88;
                                v84 = v101[154];
                              }
                              ++v87;
                              a3[50] = ++v86;
                              ++v85;
                            }
                            while (v84 > v85);
                          }
                          else
                          {
                            v101[153] = 0;
                          }
                          MakeDYMTLLinkedFunctions((size_t)v102, &v101[125], a3, a4, a5);
                          result = MakeDYMTLLinkedFunctions((size_t)v102, &v101[117], a3, a4, a5);
                          if (v9 >= 0x42)
                          {
                            BYTE2(v101[187]) = *v102[0];
                            HIBYTE(v101[186]) = v102[0][1];
                            BYTE1(v101[187]) = v102[0][2];
                            LOBYTE(v101[187]) = v102[0][3];
                            if (v9 >= 0x44)
                            {
                              LODWORD(v101[165]) = v102[0][4];
                              if (v9 != 68)
                              {
                                HIWORD(v101[168]) = v102[0][5];
                                LOWORD(v101[168]) = v102[0][6];
                                WORD2(v101[168]) = v102[0][7];
                                WORD1(v101[168]) = v102[0][8];
                                if (v9 >= 0x4B)
                                  HIWORD(v101[167]) = v102[0][9];
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (BYTE5(v101[185]) == 255)
    BYTE5(v101[185]) = 0;
  if (LODWORD(v101[166]) == -1)
  {
    BYTE3(v101[188]) = 0;
    LODWORD(v101[166]) = 1;
  }
  v90 = (char *)a3[27];
  a3[27] = v90 + 1512;
  if (a4)
  {
    if (a5)
    {
      v91 = (uint64_t *)GetAliasStream2(a5, v101[162]);
      if (v91)
        v92 = *v91;
      else
        v92 = 0;
      v101[162] = v92;
      v94 = (uint64_t *)GetAliasStream2(a5, v101[147]);
      if (v94)
        v95 = *v94;
      else
        v95 = 0;
      v101[147] = v95;
      v96 = (uint64_t *)GetAliasStream2(a5, v101[158]);
      if (v96)
        v97 = *v96;
      else
        v97 = 0;
      v101[158] = v97;
      v98 = (uint64_t *)GetAliasStream2(a5, v101[155]);
      if (v98)
        v99 = *v98;
      else
        v99 = 0;
      v101[155] = v99;
      v93 = (uint64_t *)GetAliasStream2(a5, v101[152]);
      if (!v93)
      {
        v100 = 0;
        goto LABEL_153;
      }
    }
    else
    {
      v93 = &v101[152];
    }
    v100 = *v93;
LABEL_153:
    v101[152] = v100;
    return (size_t)memcpy(v90, v101, 0x5E8uLL);
  }
  return result;
}

_QWORD **MakeDYMTLRenderPipelineColorAttachmentDescriptor(_QWORD **result, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v4 = *(*result)++;
  v5 = v3[1];
  *result = v3 + 2;
  v6 = v3[2];
  *result = v3 + 3;
  v7 = v3[3];
  *result = v3 + 4;
  v8 = v3[4];
  *result = v3 + 5;
  v9 = v3[5];
  *result = v3 + 6;
  v10 = v3[6];
  *result = v3 + 7;
  v11 = v3[7];
  *result = v3 + 8;
  v12 = v3[8];
  *result = v3 + 9;
  if (a3)
  {
    *(_WORD *)a2 = v12;
    *(_BYTE *)(a2 + 2) = v10;
    *(_BYTE *)(a2 + 3) = v4;
    *(_BYTE *)(a2 + 4) = v9;
    *(_BYTE *)(a2 + 5) = v6;
    *(_BYTE *)(a2 + 6) = v7;
    *(_BYTE *)(a2 + 7) = v8;
    *(_BYTE *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 9) = v11;
    *(_DWORD *)(a2 + 10) = 0;
    *(_WORD *)(a2 + 14) = 0;
  }
  return result;
}

size_t MakeDYMTLLinkedFunctions(size_t result, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  const char **v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;

  v9 = (const char **)result;
  v10 = (const char *)(*(_QWORD *)result + 8);
  v11 = **(_QWORD **)result;
  *(_QWORD *)result = v10;
  if (v11)
  {
    v46 = a3[50];
    v12 = v11;
    do
    {
      v13 = *(uint64_t **)*v9;
      *v9 += 8;
      if ((a4 & 1) != 0)
      {
        if (a5)
        {
          result = GetAliasStream2(a5, (uint64_t)v13);
          if (result)
            v13 = *(uint64_t **)result;
          else
            v13 = 0;
        }
        v14 = (uint64_t **)a3[50];
        *v14 = v13;
      }
      else
      {
        v14 = (uint64_t **)a3[50];
      }
      a3[50] = v14 + 1;
      --v12;
    }
    while (v12);
    v10 = *v9;
  }
  else
  {
    v46 = 0;
  }
  v17 = *(_QWORD *)v10;
  v15 = v10 + 8;
  v16 = v17;
  *v9 = v15;
  v49 = v17;
  if (v17)
  {
    v45 = a3[50];
    v18 = v16;
    do
    {
      v19 = *(uint64_t **)*v9;
      *v9 += 8;
      if ((a4 & 1) != 0)
      {
        if (a5)
        {
          result = GetAliasStream2(a5, (uint64_t)v19);
          if (result)
            v19 = *(uint64_t **)result;
          else
            v19 = 0;
        }
        v20 = (uint64_t **)a3[50];
        *v20 = v19;
      }
      else
      {
        v20 = (uint64_t **)a3[50];
      }
      a3[50] = v20 + 1;
      --v18;
    }
    while (v18);
    v15 = *v9;
  }
  else
  {
    v45 = 0;
  }
  v22 = v15 + 8;
  v21 = *(_QWORD *)v15;
  *v9 = v15 + 8;
  v47 = v11;
  v48 = a2;
  if (v21)
  {
    v23 = *((_QWORD *)v15 + 1);
    v22 = v15 + 16;
    *v9 = v15 + 16;
    if (v23)
    {
      v24 = 0;
      v50 = a3[42];
      v51 = v15 + 16;
      *v9 = &v22[8 * v23];
      a3[42] += 24 * v23;
      while (1)
      {
        v25 = *v9;
        result = strlen(*v9);
        *v9 += (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if (*v25)
          v26 = v25;
        else
          v26 = 0;
        if (*v25)
        {
          result = strlen(v26);
          v27 = a3[52];
          v28 = result + 1;
          if (result != -1)
          {
            v29 = (void *)a3[52];
            goto LABEL_36;
          }
        }
        else
        {
          v27 = a3[52];
        }
        v28 = 0;
        v29 = 0;
LABEL_36:
        a3[52] = v27 + v28;
        if (a4)
          result = (size_t)memcpy(v29, v26, v28);
        v30 = *(_QWORD *)&v22[8 * v24];
        if ((_DWORD)v30)
        {
          v31 = v23;
          v32 = a3[50];
          v33 = v30;
          do
          {
            v34 = *(uint64_t **)*v9;
            *v9 += 8;
            if ((a4 & 1) != 0)
            {
              if (a5)
              {
                result = GetAliasStream2(a5, (uint64_t)v34);
                if (result)
                  v34 = *(uint64_t **)result;
                else
                  v34 = 0;
              }
              v35 = (uint64_t **)a3[50];
              *v35 = v34;
            }
            else
            {
              v35 = (uint64_t **)a3[50];
            }
            a3[50] = v35 + 1;
            --v33;
          }
          while (v33);
          v23 = v31;
          v22 = v51;
          if ((a4 & 1) == 0)
            goto LABEL_50;
        }
        else
        {
          v32 = 0;
          if ((a4 & 1) == 0)
            goto LABEL_50;
        }
        v36 = v50 + 24 * v24;
        *(_QWORD *)v36 = v29;
        *(_QWORD *)(v36 + 8) = v32;
        *(_DWORD *)(v36 + 16) = v30;
        *(_DWORD *)(v36 + 20) = 0;
LABEL_50:
        if (++v24 == v23)
        {
          v22 = *v9;
          v37 = v50;
          goto LABEL_56;
        }
      }
    }
    v37 = 0;
LABEL_56:
    if (a4)
      v38 = v37;
    else
      v38 = 0;
    if (a4)
      v39 = v23;
    else
      v39 = 0;
  }
  else
  {
    v38 = 0;
    v39 = 0;
  }
  v40 = *(_QWORD *)v22;
  *v9 = v22 + 8;
  if (v40)
  {
    v41 = a3[50];
    v42 = v40;
    do
    {
      v43 = *(uint64_t **)*v9;
      *v9 += 8;
      if ((a4 & 1) != 0)
      {
        if (a5)
        {
          result = GetAliasStream2(a5, (uint64_t)v43);
          if (result)
            v43 = *(uint64_t **)result;
          else
            v43 = 0;
        }
        v44 = (uint64_t **)a3[50];
        *v44 = v43;
      }
      else
      {
        v44 = (uint64_t **)a3[50];
      }
      a3[50] = v44 + 1;
      --v42;
    }
    while (v42);
  }
  else
  {
    v41 = 0;
  }
  if (a4)
  {
    *v48 = v45;
    v48[1] = v49;
    v48[2] = v46;
    v48[3] = v47;
    v48[4] = v38;
    v48[5] = v39;
    v48[6] = v41;
    v48[7] = v40;
  }
  return result;
}

size_t DecodeDYMTLMeshRenderPipelineDescriptor(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t a5)
{
  unsigned int v9;
  size_t result;
  int v11;
  const char *v12;
  _QWORD *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _QWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *AliasStream2;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[32];
  _QWORD *v47[2];

  v47[1] = a2;
  memcpy(v46, &GTMTLMeshRenderPipelineDescriptorDefaults, sizeof(v46));
  v9 = *(_DWORD *)a1;
  result = strlen((const char *)(a1 + 8));
  v47[0] = (_QWORD *)((result & 0xFFFFFFFFFFFFFFF8) + a1 + 8 + 8);
  v11 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
    v12 = (const char *)(a1 + 8);
  else
    v12 = 0;
  if (v11)
  {
    result = strlen(v12);
    v13 = a3 + 52;
    v14 = a3[52];
    v15 = result + 1;
    if (result != -1)
    {
      v16 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    v13 = a3 + 52;
    v14 = a3[52];
  }
  v15 = 0;
  v16 = 0;
LABEL_9:
  *v13 = v14 + v15;
  if (a4)
    result = (size_t)memcpy(v16, v12, v15);
  *(int8x16_t *)((char *)&v46[22] + 8) = vextq_s8(*(int8x16_t *)v47[0], *(int8x16_t *)v47[0], 8uLL);
  v17 = v47[0][2];
  WORD3(v46[25]) = v47[0][3];
  v18 = v47[0][5];
  WORD2(v46[25]) = v47[0][4];
  v19 = v47[0][7];
  v20 = *((_OWORD *)v47[0] + 4);
  v22 = v47[0][10];
  v21 = v47[0][11];
  v23 = v47[0] + 12;
  v24 = v47[0][6];
  v47[0] += 6;
  BYTE11(v46[31]) = v18;
  BYTE10(v46[31]) = v24;
  *((_QWORD *)&v46[21] + 1) = v17;
  *(_QWORD *)&v46[22] = v16;
  *((_QWORD *)&v46[23] + 1) = v19;
  v46[20] = v20;
  *(_QWORD *)&v46[21] = v22;
  if (v21)
  {
    v25 = (char *)&v46[29] + 8;
    do
    {
      if (a4)
        *v25 = *v23;
      ++v23;
      ++v25;
      --v21;
    }
    while (v21);
  }
  v28 = *v23;
  v26 = v23 + 1;
  v27 = v28;
  v47[0] = v26;
  if (v28)
  {
    v29 = (char *)&v46[27] + 9;
    do
    {
      if (a4)
        *v29 = *v26;
      ++v26;
      ++v29;
      --v27;
    }
    while (v27);
  }
  v32 = *v26;
  v30 = v26 + 1;
  v31 = v32;
  v47[0] = v30;
  if (v32)
  {
    v33 = (char *)&v46[25] + 10;
    do
    {
      if (a4)
        *v33 = *v30;
      ++v30;
      ++v33;
      --v31;
    }
    while (v31);
  }
  BYTE12(v46[31]) = *v30;
  BYTE7(v46[31]) = v30[1];
  BYTE8(v46[31]) = v30[2];
  BYTE13(v46[31]) = v30[3];
  BYTE9(v46[31]) = v30[4];
  HIDWORD(v46[24]) = v30[5];
  v34 = v30[6];
  v35 = v30 + 7;
  v47[0] = v35;
  if (v34)
  {
    v36 = v46;
    do
    {
      result = (size_t)MakeDYMTLRenderPipelineColorAttachmentDescriptor(v47, (uint64_t)v36++, a4);
      --v34;
    }
    while (v34);
    v35 = v47[0];
  }
  LOWORD(v46[25]) = *v35;
  WORD4(v46[25]) = v35[1];
  BYTE14(v46[31]) = v35[2];
  if (v9 > 0x43)
  {
    v37 = v35[3];
    v47[0] = v35 + 4;
    DWORD2(v46[24]) = v37;
    if (v9 >= 0x46)
    {
      MakeDYMTLLinkedFunctions((size_t)v47, &v46[16], a3, a4, a5);
      MakeDYMTLLinkedFunctions((size_t)v47, &v46[12], a3, a4, a5);
      result = MakeDYMTLLinkedFunctions((size_t)v47, &v46[8], a3, a4, a5);
      if (v9 >= 0x4B)
      {
        v38 = v47[0][1];
        WORD1(v46[25]) = *v47[0];
        *(_QWORD *)&v46[24] = v38;
      }
    }
  }
  v39 = (char *)a3[26];
  a3[26] = v39 + 512;
  if (a4)
  {
    if (a5)
    {
      AliasStream2 = (uint64_t *)GetAliasStream2(a5, *(uint64_t *)&v46[23]);
      if (AliasStream2)
        v41 = *AliasStream2;
      else
        v41 = 0;
      *(_QWORD *)&v46[23] = v41;
      v43 = (uint64_t *)GetAliasStream2(a5, *((uint64_t *)&v46[22] + 1));
      if (v43)
        v44 = *v43;
      else
        v44 = 0;
      *((_QWORD *)&v46[22] + 1) = v44;
      v42 = (uint64_t *)GetAliasStream2(a5, *((uint64_t *)&v46[21] + 1));
      if (!v42)
      {
        v45 = 0;
        goto LABEL_46;
      }
    }
    else
    {
      v42 = (uint64_t *)&v46[21] + 1;
    }
    v45 = *v42;
LABEL_46:
    *((_QWORD *)&v46[21] + 1) = v45;
    return (size_t)memcpy(v39, v46, 0x200uLL);
  }
  return result;
}

size_t DecodeDYMTLDepthStencilDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7;
  const char *v8;
  char v9;
  size_t result;
  size_t v11;
  int v12;
  const char *v13;
  _QWORD *v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int32x2_t v28;

  v7 = *(_BYTE *)(a1 + 8);
  v8 = (const char *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 16);
  result = strlen((const char *)(a1 + 24));
  v11 = result;
  v12 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24))
    v13 = v8;
  else
    v13 = 0;
  if (v12)
  {
    result = strlen(v13);
    v14 = (_QWORD *)(a3 + 416);
    v15 = *(_QWORD *)(a3 + 416);
    v16 = result + 1;
    if (result != -1)
    {
      v17 = *(void **)(a3 + 416);
      goto LABEL_9;
    }
  }
  else
  {
    v14 = (_QWORD *)(a3 + 416);
    v15 = *(_QWORD *)(a3 + 416);
  }
  v16 = 0;
  v17 = 0;
LABEL_9:
  *v14 = v15 + v16;
  if ((a4 & 1) != 0)
  {
    result = (size_t)memcpy(v17, v13, v16);
    v19 = *(_QWORD *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 32];
    v18 = *(_QWORD *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 40];
    v21 = *(_QWORD *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 16];
    v20 = *(_QWORD *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 24];
    v22 = vmovn_s64(*(int64x2_t *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 48]);
    v24 = *(_QWORD *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 88];
    v23 = *(_QWORD *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 96];
    v26 = *(_QWORD *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 72];
    v25 = *(_QWORD *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 80];
    v27 = *(_QWORD *)(a3 + 200);
    v28 = vmovn_s64(*(int64x2_t *)&v8[(v11 & 0xFFFFFFFFFFFFFFF8) + 104]);
    *(_QWORD *)(a3 + 200) = v27 + 48;
    *(int32x2_t *)v27 = v28;
    *(_BYTE *)(v27 + 8) = v24;
    *(_BYTE *)(v27 + 9) = v23;
    *(_BYTE *)(v27 + 10) = v26;
    *(_BYTE *)(v27 + 11) = v25;
    *(_DWORD *)(v27 + 12) = 0;
    *(int32x2_t *)(v27 + 16) = v22;
    *(_BYTE *)(v27 + 24) = v19;
    *(_BYTE *)(v27 + 25) = v18;
    *(_BYTE *)(v27 + 26) = v21;
    *(_BYTE *)(v27 + 27) = v20;
    *(_DWORD *)(v27 + 28) = 0;
    *(_QWORD *)(v27 + 32) = v17;
    *(_BYTE *)(v27 + 40) = v7;
    *(_BYTE *)(v27 + 41) = v9;
    *(_WORD *)(v27 + 46) = 0;
    *(_DWORD *)(v27 + 42) = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 200) += 48;
  }
  return result;
}

uint64_t DecodeDYMTLSamplerDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  const char *v12;
  int v13;
  size_t v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  int32x4_t v21;
  int v22;
  char v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  char v29;
  __int16 v30;
  uint64_t v31;
  uint64_t result;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v7 = *(_DWORD *)a1;
  v33 = *(_BYTE *)(a1 + 16);
  v34 = *(_BYTE *)(a1 + 24);
  v35 = *(_BYTE *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 32);
  v36 = *(_BYTE *)(a1 + 40);
  v37 = *(_BYTE *)(a1 + 48);
  v9 = *(_BYTE *)(a1 + 56);
  v10 = *(_BYTE *)(a1 + 64);
  v11 = *(_DWORD *)(a1 + 72);
  v12 = (const char *)(a1 + 88);
  v13 = *(_DWORD *)(a1 + 80);
  v14 = strlen((const char *)(a1 + 88));
  if (*(_BYTE *)(a1 + 88))
    v15 = v12;
  else
    v15 = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    v16 = strlen(v15);
    v17 = (_QWORD *)(a3 + 416);
    v18 = *(_QWORD *)(a3 + 416);
    v19 = v16 + 1;
    if (v16 != -1)
    {
      v20 = *(void **)(a3 + 416);
      goto LABEL_9;
    }
  }
  else
  {
    v17 = (_QWORD *)(a3 + 416);
    v18 = *(_QWORD *)(a3 + 416);
  }
  v19 = 0;
  v20 = 0;
LABEL_9:
  *v17 = v18 + v19;
  if (a4)
    memcpy(v20, v15, v19);
  v21 = 0uLL;
  if (v7 < 2)
  {
    v29 = 0;
    v24 = 0;
    v27 = 0;
    v26 = 0;
    v22 = 0;
LABEL_22:
    v23 = 0;
LABEL_23:
    v25 = 0;
LABEL_24:
    v28 = 0;
    goto LABEL_25;
  }
  v22 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 8];
  if (v7 < 8)
  {
    v29 = 0;
    v24 = 0;
    v27 = 0;
    v26 = 0;
    goto LABEL_22;
  }
  v23 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 16];
  if (v7 < 0xA)
  {
    v29 = 0;
    v24 = 0;
LABEL_41:
    v27 = 0;
    v26 = 0;
    goto LABEL_23;
  }
  v24 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 24];
  if (v7 < 0x11)
  {
    v29 = 0;
    goto LABEL_41;
  }
  v25 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 32];
  if (v7 < 0x16)
  {
    v29 = 0;
    v27 = 0;
    v26 = 0;
    goto LABEL_24;
  }
  v26 = *(_QWORD *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 40];
  v27 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 48];
  if (v7 < 0x1C)
  {
    v29 = 0;
    goto LABEL_24;
  }
  v28 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 56];
  if (v7 < 0x27)
  {
    v29 = 0;
  }
  else
  {
    v24 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 64];
    v21 = vuzp1q_s32(*(int32x4_t *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 72], *(int32x4_t *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 88]);
    v29 = v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 104];
    if (v7 >= 0x2A)
    {
      v30 = *(_WORD *)&v12[(v14 & 0xFFFFFFFFFFFFFFF8) + 112];
      goto LABEL_26;
    }
  }
LABEL_25:
  v30 = 0;
LABEL_26:
  v31 = *(_QWORD *)(a3 + 192);
  result = v31 + 64;
  *(_QWORD *)(a3 + 192) = v31 + 64;
  if (a4)
  {
    if (v27 == 255)
      LOBYTE(v27) = 0;
    *(_QWORD *)v31 = v20;
    *(_QWORD *)(v31 + 8) = v8;
    if (v26 == -1)
      v26 = 0;
    *(_QWORD *)(v31 + 16) = v26;
    if (v25 == 255)
      LOBYTE(v25) = 0;
    *(int32x4_t *)(v31 + 24) = v21;
    if (v24 == 255)
      LOBYTE(v24) = 0;
    if (v22 == 255)
      LOBYTE(v22) = 0;
    *(_DWORD *)(v31 + 40) = v13;
    *(_DWORD *)(v31 + 44) = v11;
    *(_WORD *)(v31 + 48) = v30;
    *(_BYTE *)(v31 + 50) = v24;
    *(_BYTE *)(v31 + 51) = v23;
    *(_BYTE *)(v31 + 52) = v27;
    *(_BYTE *)(v31 + 53) = v29;
    *(_BYTE *)(v31 + 54) = v22;
    *(_BYTE *)(v31 + 55) = v33;
    *(_BYTE *)(v31 + 56) = v35;
    *(_BYTE *)(v31 + 57) = v34;
    *(_BYTE *)(v31 + 58) = v10;
    *(_BYTE *)(v31 + 59) = v9;
    *(_BYTE *)(v31 + 60) = v28;
    *(_BYTE *)(v31 + 61) = v36;
    *(_BYTE *)(v31 + 62) = v25;
    *(_BYTE *)(v31 + 63) = v37;
  }
  return result;
}

unint64_t EncodeDYMTLSamplerDescriptor(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void *v6;
  size_t v7;
  size_t v8;
  const char *v9;
  size_t v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t result;

  if (a3 >= 8)
  {
    *(_QWORD *)a2 = 81;
    if (a3 >= 0x10)
    {
      *(_QWORD *)(a2 + 8) = *(unsigned __int8 *)(a1 + 56);
      if (a3 >= 0x18)
      {
        *(_QWORD *)(a2 + 16) = *(unsigned __int8 *)(a1 + 55);
        if (a3 >= 0x20)
        {
          *(_QWORD *)(a2 + 24) = *(unsigned __int8 *)(a1 + 57);
          if (a3 >= 0x28)
          {
            *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 8);
            if (a3 >= 0x30)
            {
              *(_QWORD *)(a2 + 40) = *(unsigned __int8 *)(a1 + 61);
              if (a3 >= 0x38)
              {
                *(_QWORD *)(a2 + 48) = *(unsigned __int8 *)(a1 + 63);
                if (a3 >= 0x40)
                {
                  *(_QWORD *)(a2 + 56) = *(unsigned __int8 *)(a1 + 59);
                  if (a3 >= 0x48)
                  {
                    *(_QWORD *)(a2 + 64) = *(unsigned __int8 *)(a1 + 58);
                    if (a3 >= 0x4C)
                    {
                      *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 44);
                      if (a3 >= 0x4D)
                      {
                        v6 = (void *)(a2 + 76);
                        v7 = a3 - 76 >= 4 ? 4 : a3 - 76;
                        bzero(v6, v7);
                        if (a3 >= 0x54)
                        {
                          *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 40);
                          if (a3 >= 0x55)
                          {
                            if (a3 - 84 >= 4)
                              v8 = 4;
                            else
                              v8 = a3 - 84;
                            bzero((void *)(a2 + 84), v8);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (*(_QWORD *)a1)
    v9 = *(const char **)a1;
  else
    v9 = "";
  v10 = strlen(v9);
  v11 = v10;
  v12 = v10 + 89;
  if (a3 >= v10 + 89)
    memcpy((void *)(a2 + 88), v9, v10 + 1);
  v13 = v11 & 0xFFFFFFFFFFFFFFF8;
  if (a3 > v12)
  {
    if (a3 - v12 >= v13 + ~v11 + 8)
      v14 = v13 + ~v11 + 8;
    else
      v14 = a3 - v12;
    bzero((void *)(a2 + v12), v14);
  }
  if (v13 + 104 <= a3)
    *(_QWORD *)(v13 + a2 + 96) = *(unsigned __int8 *)(a1 + 54);
  if (v13 + 112 <= a3)
    *(_QWORD *)(a2 + v13 + 104) = *(unsigned __int8 *)(a1 + 51);
  if (v13 + 120 <= a3)
    *(_QWORD *)(a2 + v13 + 112) = *(unsigned __int8 *)(a1 + 50);
  if (v13 + 128 <= a3)
    *(_QWORD *)(a2 + v13 + 120) = *(unsigned __int8 *)(a1 + 62);
  if (v13 + 136 <= a3)
    *(_QWORD *)(a2 + v13 + 128) = *(_QWORD *)(a1 + 16);
  if (v13 + 144 <= a3)
    *(_QWORD *)(a2 + v13 + 136) = *(unsigned __int8 *)(a1 + 52);
  if (v13 + 152 <= a3)
    *(_QWORD *)(a2 + v13 + 144) = *(unsigned __int8 *)(a1 + 60);
  if (v13 + 160 <= a3)
    *(_QWORD *)(a2 + v13 + 152) = *(unsigned __int8 *)(a1 + 50);
  if (v13 + 168 <= a3)
    *(_QWORD *)(a2 + v13 + 160) = *(unsigned int *)(a1 + 24);
  if (v13 + 176 <= a3)
    *(_QWORD *)(a2 + v13 + 168) = *(unsigned int *)(a1 + 28);
  if (v13 + 184 <= a3)
    *(_QWORD *)(a2 + v13 + 176) = *(unsigned int *)(a1 + 32);
  if (v13 + 192 <= a3)
    *(_QWORD *)(a2 + v13 + 184) = *(unsigned int *)(a1 + 36);
  if (v13 + 200 <= a3)
    *(_QWORD *)(a2 + v13 + 192) = *(unsigned __int8 *)(a1 + 53);
  result = v13 + 208;
  if (v13 + 208 <= a3)
    *(_QWORD *)(a2 + v13 + 200) = *(unsigned __int16 *)(a1 + 48);
  return result;
}

void DecodeDYMTLComputePipelineDescriptor(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, uint64_t a5)
{
  unsigned int v9;
  uint64_t v10;
  int v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *AliasStream2;
  size_t v40;
  _QWORD *v41;
  size_t *v42;
  void *v43;
  char *v44;
  const void *v45;
  size_t v46;
  _QWORD *v47;
  size_t v48;
  uint64_t *v49;
  void *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD v65[120];
  _QWORD v66[2];
  _BYTE __src[752];

  v66[1] = a2;
  memcpy(v65, &GTMTLComputePipelineDescriptorDefaults, sizeof(v65));
  v9 = *(_DWORD *)a1;
  v10 = *(_QWORD *)(a1 + 16);
  v65[106] = *(_QWORD *)(a1 + 8);
  BYTE6(v65[119]) = v10;
  v66[0] = (strlen((const char *)(a1 + 24)) & 0xFFFFFFFFFFFFFFF8) + a1 + 24 + 8;
  v11 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24))
    v12 = (const char *)(a1 + 24);
  else
    v12 = 0;
  if (v11)
  {
    v13 = strlen(v12);
    v14 = a3 + 52;
    v15 = a3[52];
    v16 = v13 + 1;
    if (v13 != -1)
    {
      v17 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    v14 = a3 + 52;
    v15 = a3[52];
  }
  v16 = 0;
  v17 = 0;
LABEL_9:
  *v14 = v15 + v16;
  if (a4)
    memcpy(v17, v12, v16);
  v65[109] = v17;
  if (v9 < 0xB)
    goto LABEL_87;
  bzero(__src, 0x2F0uLL);
  v18 = (uint64_t *)v66[0];
  if (v9 < 0x1A)
  {
    v19 = 31;
  }
  else
  {
    v18 = (uint64_t *)(v66[0] + 8);
    v19 = *(unsigned int *)v66[0];
    if (!*(_DWORD *)v66[0])
      goto LABEL_23;
  }
  v20 = &__src[11];
  do
  {
    if (a4)
    {
      v22 = v18[1];
      v21 = v18[2];
      v23 = *v18;
      if (*v18 == 0xFFFFFFFFLL)
        v23 = -1;
      *(_QWORD *)(v20 - 11) = v23;
      *(_WORD *)(v20 - 3) = v22;
      *(v20 - 1) = v21;
      *(_DWORD *)v20 = 0;
      v20[4] = 0;
    }
    v18 += 3;
    v20 += 16;
    --v19;
  }
  while (v19);
  v66[0] = v18;
  if (v9 > 0x19)
  {
LABEL_23:
    v25 = *(_DWORD *)v18++;
    v24 = v25;
    v66[0] = v18;
    if (!v25)
      goto LABEL_30;
    goto LABEL_26;
  }
  v24 = 31;
LABEL_26:
  v26 = &__src[502];
  do
  {
    if (a4)
    {
      v27 = v18[2];
      v28 = *v18;
      *(_DWORD *)(v26 - 3) = v18[1];
      *((_BYTE *)v26 - 2) = v27;
      *((_BYTE *)v26 - 1) = v28;
      *v26 = 0;
    }
    v18 += 3;
    v26 += 4;
    --v24;
  }
  while (v24);
LABEL_30:
  __src[745] = *v18;
  v29 = v18[1];
  v30 = v18 + 2;
  v66[0] = v18 + 2;
  __src[744] = v29;
  if ((a4 & 1) != 0)
    memcpy(v65, __src, 0x2F0uLL);
  HIBYTE(v65[118]) = -1;
  if (v9 >= 0x12)
  {
    if (v9 < 0x1A)
    {
      v31 = 31;
    }
    else
    {
      v31 = v18[2];
      v30 = v18 + 3;
      v66[0] = v18 + 3;
      if ((int)v31 < 1)
        goto LABEL_39;
      v31 = v31;
    }
    v32 = &v65[115];
    do
    {
      v33 = *v30++;
      *v32++ = v33;
      --v31;
    }
    while (v31);
LABEL_39:
    if (v9 >= 0x1B)
    {
      BYTE4(v65[119]) = *v30;
      if (v9 >= 0x25)
      {
        HIWORD(v65[114]) = v30[1];
        if (v9 != 37)
        {
          v65[110] = v30[2];
          if (v9 >= 0x28)
          {
            v34 = v30[3];
            v35 = v30 + 4;
            v66[0] = v35;
            v65[108] = v34;
            if (v34)
            {
              v36 = (uint64_t *)a3[50];
              v65[107] = v36;
              do
              {
                v38 = *v35++;
                v37 = v38;
                if (a4)
                {
                  if (a5)
                  {
                    AliasStream2 = (uint64_t *)GetAliasStream2(a5, v37);
                    if (AliasStream2)
                      v37 = *AliasStream2;
                    else
                      v37 = 0;
                  }
                  v36 = (uint64_t *)a3[50];
                  *v36 = v37;
                }
                a3[50] = ++v36;
                --v34;
              }
              while (v34);
            }
            else
            {
              v65[107] = 0;
            }
            if (v9 >= 0x29)
            {
              v65[113] = *v35;
              if (v9 != 41)
              {
                BYTE5(v65[119]) = v35[1];
                LOWORD(v65[114]) = v35[2];
                BYTE2(v65[119]) = v35[3];
                BYTE1(v65[119]) = v35[4];
                LOBYTE(v65[119]) = v35[5];
                v40 = v35[6];
                v41 = v35 + 7;
                v42 = (size_t *)((char *)v35 + ((v40 + 7) & 0xFFFFFFFFFFFFFFF8) + 56);
                v66[0] = v42;
                if (v40)
                  v43 = (void *)a3[52];
                else
                  v43 = 0;
                v44 = (char *)(a3[52] + v40);
                a3[52] = v44;
                if (a4)
                {
                  if (v40)
                    v45 = v41;
                  else
                    v45 = 0;
                  memcpy(v43, v45, v40);
                  v44 = (char *)a3[52];
                }
                v65[104] = v43;
                v65[105] = v40;
                v48 = *v42;
                v47 = v42 + 1;
                v46 = v48;
                v49 = (_QWORD *)((char *)v47 + ((v48 + 7) & 0xFFFFFFFFFFFFFFF8));
                v66[0] = v49;
                if (v48)
                  v50 = v44;
                else
                  v50 = 0;
                a3[52] = &v44[v46];
                if (a4)
                {
                  if (v46)
                    v51 = v47;
                  else
                    v51 = 0;
                  memcpy(v50, v51, v46);
                }
                v65[102] = v50;
                v65[103] = v46;
                if (v9 >= 0x2D)
                {
                  v52 = *v49;
                  v66[0] = v49 + 1;
                  WORD2(v65[114]) = v52;
                  v53 = v49[1];
                  v66[0] = v49 + 2;
                  BYTE3(v65[119]) = v53;
                  MakeDYMTLLinkedFunctions((size_t)v66, &v65[94], a3, a4, a5);
                  if (v9 >= 0x30)
                  {
                    v54 = (uint64_t *)(v66[0] + 8);
                    v55 = *(_QWORD *)v66[0];
                    v65[112] = v55;
                    if (v55)
                    {
                      v56 = (uint64_t *)a3[50];
                      v65[111] = v56;
                      do
                      {
                        v58 = *v54++;
                        v57 = v58;
                        if (a4)
                        {
                          if (a5)
                          {
                            v59 = (uint64_t *)GetAliasStream2(a5, v57);
                            if (v59)
                              v57 = *v59;
                            else
                              v57 = 0;
                          }
                          v56 = (uint64_t *)a3[50];
                          *v56 = v57;
                        }
                        a3[50] = ++v56;
                        --v55;
                      }
                      while (v55);
                    }
                    else
                    {
                      v65[111] = 0;
                    }
                    if (v9 >= 0x4B)
                      WORD1(v65[114]) = *v54;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_87:
  v60 = (char *)a3[21];
  a3[21] = v60 + 960;
  if (!a4)
    return;
  if (a5)
  {
    v61 = (uint64_t *)GetAliasStream2(a5, v65[106]);
    if (v61)
      v62 = *v61;
    else
      v62 = 0;
    v65[106] = v62;
    v63 = (uint64_t *)GetAliasStream2(a5, v65[110]);
    if (!v63)
    {
      v64 = 0;
      goto LABEL_96;
    }
  }
  else
  {
    v63 = &v65[110];
  }
  v64 = *v63;
LABEL_96:
  v65[110] = v64;
  memcpy(v60, v65, 0x3C0uLL);
}

double DecodeDYMTLTileRenderPipelineDescriptor(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, uint64_t a5)
{
  const char *v9;
  unsigned int v10;
  double result;
  int v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 *v23;
  uint64_t v24;
  size_t *v25;
  _BYTE *v26;
  _QWORD *v27;
  size_t v28;
  size_t v29;
  uint64_t *v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *AliasStream2;
  __int128 *v40;
  uint64_t v41;
  uint64_t *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _QWORD v59[2];

  v59[1] = a2;
  v56 = xmmword_4A9DE8;
  v57 = unk_4A9DF8;
  v58 = xmmword_4A9E08;
  v52 = xmmword_4A9DA8;
  v53 = unk_4A9DB8;
  v54 = xmmword_4A9DC8;
  v55 = unk_4A9DD8;
  v48 = GTMTLTileRenderPipelineDescriptorDefaults;
  v49 = unk_4A9D78;
  v50 = xmmword_4A9D88;
  v51 = unk_4A9D98;
  v9 = (const char *)(a1 + 8);
  v10 = *(_DWORD *)a1;
  v59[0] = (strlen((const char *)(a1 + 8)) & 0xFFFFFFFFFFFFFFF8) + a1 + 8 + 8;
  v12 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
    v13 = v9;
  else
    v13 = 0;
  if (v12)
  {
    v14 = strlen(v13);
    v15 = a3 + 52;
    v16 = a3[52];
    v17 = v14 + 1;
    if (v14 != -1)
    {
      v18 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    v15 = a3 + 52;
    v16 = a3[52];
  }
  v17 = 0;
  v18 = 0;
LABEL_9:
  *v15 = v16 + v17;
  if (a4)
    memcpy(v18, v13, v17);
  v19 = *(_QWORD *)v59[0];
  v20 = *(_QWORD *)(v59[0] + 8);
  *(_QWORD *)&v54 = v18;
  *((_QWORD *)&v55 + 1) = v19;
  WORD3(v56) = v20;
  v21 = *(_QWORD *)(v59[0] + 16);
  v22 = (_QWORD *)(v59[0] + 24);
  if (v21)
  {
    v23 = &v52;
    do
    {
      if (a4)
        *(_WORD *)v23 = *v22;
      ++v22;
      v23 = (__int128 *)((char *)v23 + 2);
      --v21;
    }
    while (v21);
  }
  BYTE9(v58) = *v22;
  v24 = v22[1];
  v25 = v22 + 2;
  v59[0] = v25;
  if (v24)
  {
    v26 = (char *)&v56 + 8;
    do
    {
      if (a4)
        *v26 = *v25;
      ++v25;
      ++v26;
      --v24;
    }
    while (v24);
  }
  if (v10 > 0x2D)
  {
    v29 = *v25;
    v27 = v25 + 1;
    v28 = v29;
    v30 = (_QWORD *)((char *)v27 + ((v29 + 7) & 0xFFFFFFFFFFFFFFF8));
    v59[0] = v30;
    if (v29)
      v31 = (void *)a3[52];
    else
      v31 = 0;
    a3[52] += v28;
    if (a4)
    {
      if (v28)
        v32 = v27;
      else
        v32 = 0;
      memcpy(v31, v32, v28);
    }
    *(_QWORD *)&v53 = v31;
    *((_QWORD *)&v53 + 1) = v28;
    if (v10 >= 0x33)
    {
      v35 = *v30;
      v34 = v30 + 1;
      v33 = v35;
      v59[0] = v34;
      *(_QWORD *)&v55 = v35;
      if (v35)
      {
        v36 = (uint64_t *)a3[50];
        *((_QWORD *)&v54 + 1) = v36;
        do
        {
          v38 = *v34++;
          v37 = v38;
          if (a4)
          {
            if (a5)
            {
              AliasStream2 = (uint64_t *)GetAliasStream2(a5, v37);
              if (AliasStream2)
                v37 = *AliasStream2;
              else
                v37 = 0;
            }
            v36 = (uint64_t *)a3[50];
            *v36 = v37;
          }
          a3[50] = ++v36;
          --v33;
        }
        while (v33);
        v59[0] = v34;
      }
      else
      {
        *((_QWORD *)&v54 + 1) = 0;
      }
      if (v10 >= 0x37)
      {
        MakeDYMTLLinkedFunctions((size_t)v59, &v48, a3, a4, a5);
        if (v10 >= 0x42)
        {
          BYTE8(v58) = *(_QWORD *)v59[0];
          if (v10 >= 0x45)
          {
            WORD1(v56) = *(_QWORD *)(v59[0] + 8);
            if (v10 >= 0x4B)
              LOWORD(v56) = *(_QWORD *)(v59[0] + 16);
          }
        }
      }
    }
  }
  v40 = (__int128 *)a3[20];
  a3[20] = v40 + 11;
  if (a4)
  {
    v41 = *((_QWORD *)&v55 + 1);
    if (a5)
    {
      v42 = (uint64_t *)GetAliasStream2(a5, *((uint64_t *)&v55 + 1));
      if (v42)
        v41 = *v42;
      else
        v41 = 0;
    }
    *((_QWORD *)&v55 + 1) = v41;
    v43 = v57;
    v40[8] = v56;
    v40[9] = v43;
    v40[10] = v58;
    v44 = v53;
    v40[4] = v52;
    v40[5] = v44;
    v45 = v49;
    *v40 = v48;
    v40[1] = v45;
    v46 = v51;
    v40[2] = v50;
    v40[3] = v46;
    result = *(double *)&v54;
    v47 = v55;
    v40[6] = v54;
    v40[7] = v47;
  }
  return result;
}

size_t DecodeDYMTLFunctionConstantValues(size_t result, uint64_t a2, _QWORD *a3, int a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  size_t v17;
  uint64_t *v18;
  size_t v19;
  char *v20;
  uint64_t v21;
  size_t v22;
  _QWORD *v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = result + 8;
  v28 = a3[40];
  if (*(_QWORD *)(result + 8) != -1)
  {
    v7 = 0;
    while (1)
    {
      v8 = a3[40];
      a3[40] = v8 + 32;
      v9 = *(_QWORD *)v6;
      v10 = v6 + 8;
      result = strlen((const char *)(v6 + 8));
      v11 = result;
      v12 = *(unsigned __int8 *)(v6 + 8);
      v13 = *(_BYTE *)(v6 + 8) ? (const char *)(v6 + 8) : 0;
      if (!v12)
        break;
      result = strlen(v13);
      v14 = a3[52];
      v15 = result + 1;
      if (result == -1)
        goto LABEL_10;
      v16 = (void *)a3[52];
LABEL_11:
      v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + v10;
      v18 = (uint64_t *)(v17 + 8);
      v19 = v14 + v15;
      a3[52] = v19;
      if ((a4 & 1) != 0)
      {
        memcpy(v16, v13, v15);
        v20 = (char *)a3[52];
        v21 = v18[1];
        v29 = *v18;
        v22 = v18[2];
        v23 = v18 + 3;
        v6 = (unint64_t)v18 + ((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
        a3[52] = &v20[v22];
        if (v22)
          v24 = v20;
        else
          v24 = 0;
        if (v22)
          v25 = v23;
        else
          v25 = 0;
        result = (size_t)memcpy(v24, v25, v22);
        *(_QWORD *)v8 = v24;
        *(_QWORD *)(v8 + 8) = v22;
        *(_QWORD *)(v8 + 16) = v16;
        *(_WORD *)(v8 + 24) = v9;
        *(_BYTE *)(v8 + 26) = v21;
        *(_BYTE *)(v8 + 27) = v29;
        *(_DWORD *)(v8 + 28) = 0;
      }
      else
      {
        v26 = *(_QWORD *)(v17 + 24);
        v6 = (unint64_t)v18 + ((v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
        a3[52] = v19 + v26;
      }
      ++v7;
      if (*(_QWORD *)v6 == -1)
        goto LABEL_23;
    }
    v14 = a3[52];
LABEL_10:
    v15 = 0;
    v16 = 0;
    goto LABEL_11;
  }
  v7 = 0;
LABEL_23:
  v27 = (_QWORD *)a3[15];
  a3[15] = v27 + 2;
  if (a4)
  {
    *v27 = v28;
    v27[1] = v7;
  }
  return result;
}

size_t DecodeDYMTLRasterizationRateMapDescriptor(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  unsigned int v7;
  const char *v8;
  size_t result;
  unint64_t v10;
  size_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  char v31;
  uint64_t v32;

  v7 = *(_DWORD *)a1;
  v8 = (const char *)(a1 + 8);
  result = strlen((const char *)(a1 + 8));
  v10 = (unint64_t)&v8[(result & 0xFFFFFFFFFFFFFFF8) + 8];
  if (*(_BYTE *)(a1 + 8))
  {
    result = strlen(v8);
    v13 = a3 + 52;
    v14 = a3[52];
    v11 = result + 1;
    if (result != -1)
    {
      v12 = (void *)a3[52];
      goto LABEL_6;
    }
  }
  else
  {
    v8 = 0;
    v13 = a3 + 52;
    v14 = a3[52];
  }
  v11 = 0;
  v12 = 0;
LABEL_6:
  *v13 = v14 + v11;
  if (a4)
    result = (size_t)memcpy(v12, v8, v11);
  v15 = *(_WORD *)v10;
  v16 = *(_WORD *)(v10 + 8);
  v17 = *(_WORD *)(v10 + 16);
  v18 = v10 + 32;
  v19 = *(_QWORD *)(v10 + 24);
  if (v19)
  {
    v20 = 0;
    v21 = a3[36];
    while (1)
    {
      v22 = a3[36];
      a3[36] = v22 + 24;
      v24 = *(_QWORD *)v18;
      v23 = *(_QWORD *)(v18 + 8);
      result = *(unsigned __int16 *)(v18 + 16);
      v18 += 24;
      if ((_WORD)v24)
      {
        v25 = 0;
        v26 = a3[51];
        do
        {
          if (a4)
            *(_DWORD *)(v26 + v25) = *(_DWORD *)v18;
          v18 += 8;
          a3[51] = v26 + v25 + 4;
          v25 += 4;
        }
        while (4 * (unsigned __int16)v24 != (_DWORD)v25);
      }
      else
      {
        v26 = 0;
      }
      if ((_WORD)v23)
      {
        v27 = 0;
        v28 = a3[51];
        do
        {
          if (a4)
            *(_DWORD *)(v28 + v27) = *(_DWORD *)v18;
          v18 += 8;
          a3[51] = v28 + v27 + 4;
          v27 += 4;
        }
        while (4 * (unsigned __int16)v23 != (_DWORD)v27);
        if ((a4 & 1) == 0)
          goto LABEL_24;
      }
      else
      {
        v28 = 0;
        if ((a4 & 1) == 0)
          goto LABEL_24;
      }
      *(_QWORD *)v22 = v26;
      *(_QWORD *)(v22 + 8) = v28;
      *(_WORD *)(v22 + 16) = v24;
      *(_WORD *)(v22 + 18) = result;
      *(_WORD *)(v22 + 20) = v23;
      *(_WORD *)(v22 + 22) = 0;
LABEL_24:
      if (++v20 == v19)
        goto LABEL_29;
    }
  }
  v21 = 0;
LABEL_29:
  if (v7 <= 0x39)
  {
    v31 = 0;
    v29 = 0;
    v30 = 2;
  }
  else
  {
    v29 = *(_DWORD *)v18;
    v30 = *(_BYTE *)(v18 + 8);
    if (v7 < 0x44)
      v31 = 0;
    else
      v31 = *(_BYTE *)(v18 + 16);
  }
  v32 = a3[13];
  a3[13] = v32 + 40;
  if (a4)
  {
    *(_QWORD *)v32 = v12;
    *(_QWORD *)(v32 + 8) = v21;
    *(_QWORD *)(v32 + 16) = v19;
    *(_DWORD *)(v32 + 24) = v29;
    *(_WORD *)(v32 + 28) = v17;
    *(_WORD *)(v32 + 30) = v16;
    *(_WORD *)(v32 + 32) = v15;
    *(_BYTE *)(v32 + 34) = v30;
    *(_BYTE *)(v32 + 35) = v31;
    *(_DWORD *)(v32 + 36) = 0;
  }
  return result;
}

size_t DecodeDYMTLFunctionDescriptor(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, uint64_t a5)
{
  const char *v9;
  size_t v10;
  const char *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  size_t result;
  unint64_t v19;
  const char *v20;
  const char *v21;
  _QWORD *v22;
  uint64_t v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char v38;
  unsigned int v39;
  uint64_t v40;

  v9 = (const char *)(a1 + 16);
  v38 = *(_BYTE *)(a1 + 8);
  v39 = *(_DWORD *)a1;
  v10 = strlen((const char *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF8;
  v11 = &v9[v10 + 8];
  if (*(_BYTE *)(a1 + 16))
    v12 = v9;
  else
    v12 = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    v13 = strlen(v12);
    v14 = a3 + 52;
    v15 = a3[52];
    v16 = v13 + 1;
    if (v13 != -1)
    {
      v17 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    v14 = a3 + 52;
    v15 = a3[52];
  }
  v16 = 0;
  v17 = 0;
LABEL_9:
  *v14 = v15 + v16;
  if (a4)
    memcpy(v17, v12, v16);
  result = strlen(v11);
  v19 = result & 0xFFFFFFFFFFFFFFF8;
  v20 = &v11[result & 0xFFFFFFFFFFFFFFF8];
  if (*v11)
    v21 = v11;
  else
    v21 = 0;
  v37 = v17;
  if (*v11)
  {
    result = strlen(v21);
    v22 = a3 + 52;
    v23 = a3[52];
    v24 = result + 1;
    if (result != -1)
    {
      v25 = (void *)a3[52];
      goto LABEL_19;
    }
  }
  else
  {
    v22 = a3 + 52;
    v23 = a3[52];
  }
  v24 = 0;
  v25 = 0;
LABEL_19:
  *v22 = v23 + v24;
  if (a4)
    result = (size_t)memcpy(v25, v21, v24);
  v27 = (size_t)(v20 + 16);
  v26 = *((_QWORD *)v20 + 1);
  if (v26)
  {
    v28 = a3[15];
    result = DecodeDYMTLFunctionConstantValues(v27, v26, a3, a4);
  }
  else
  {
    v28 = 0;
  }
  if (v39 < 0x3E)
  {
    v32 = 0;
    v30 = 0;
  }
  else
  {
    v29 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    v30 = *(_QWORD *)(v27 + v29);
    if (v30)
    {
      v40 = v28;
      v31 = 0;
      v32 = (uint64_t *)a3[50];
      v33 = v10 + v19 + v29 + a1 + 48;
      v34 = v32;
      do
      {
        if (a4)
        {
          v35 = *(_QWORD *)(v33 + 8 * v31);
          if (a5)
          {
            result = GetAliasStream2(a5, v35);
            if (result)
              v35 = *(_QWORD *)result;
            else
              v35 = 0;
          }
          v34 = (uint64_t *)a3[50];
          *v34 = v35;
        }
        a3[50] = ++v34;
        ++v31;
      }
      while (v30 != v31);
      v28 = v40;
    }
    else
    {
      v32 = 0;
    }
  }
  v36 = a3[12];
  a3[12] = v36 + 48;
  if (a4)
  {
    *(_QWORD *)v36 = v28;
    *(_QWORD *)(v36 + 8) = v37;
    *(_QWORD *)(v36 + 16) = v32;
    *(_QWORD *)(v36 + 24) = v30;
    *(_QWORD *)(v36 + 32) = v25;
    *(_BYTE *)(v36 + 40) = v38;
    *(_DWORD *)(v36 + 41) = 0;
    *(_DWORD *)(v36 + 44) = 0;
  }
  return result;
}

uint64_t DecodeDYMTLCompileOptions(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, uint64_t a5)
{
  unsigned int v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  const void *v12;
  char v13;
  BOOL v14;
  char v15;
  char v16;
  uint64_t result;
  char v18;
  char v19;
  __int16 v20;
  char v21;
  char v22;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  void *v27;
  char v28;
  int v29;
  unint64_t v30;
  size_t v31;
  int v32;
  const char *v33;
  size_t v34;
  uint64_t v35;
  size_t v36;
  unint64_t v37;
  size_t v38;
  int v39;
  const char *v40;
  size_t v41;
  uint64_t v42;
  size_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *AliasStream2;
  uint64_t v50;
  char v51;
  void *v52;
  char v53;
  void *__dst;
  unsigned int v55;
  char v56;
  BOOL v57;
  char v58;
  int v59;

  v8 = *(_DWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = a1 + 16 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v9)
    v11 = (void *)a3[52];
  else
    v11 = 0;
  a3[52] += v9;
  if (a4)
  {
    if (v9)
      v12 = (const void *)(a1 + 16);
    else
      v12 = 0;
    memcpy(v11, v12, v9);
  }
  v13 = *(_BYTE *)v10;
  v15 = *(_BYTE *)v10 == 0;
  v14 = *(_BYTE *)v10 != 0;
  v16 = 2 * v14;
  result = *(unsigned __int8 *)(v10 + 8);
  if (v8 <= 0xF)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    if (v8 < 6)
    {
      v29 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = *(_DWORD *)(v10 + 40);
    }
    goto LABEL_60;
  }
  v59 = *(_DWORD *)(v10 + 16);
  if (v8 < 0x28)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = *(_DWORD *)(v10 + 16);
    goto LABEL_60;
  }
  v55 = *(unsigned __int8 *)(v10 + 8);
  v56 = 2 * v14;
  v57 = *(_BYTE *)v10 == 0;
  v58 = *(_BYTE *)v10;
  v30 = v10 + 24;
  v31 = strlen((const char *)(v10 + 24));
  v32 = *(unsigned __int8 *)(v10 + 24);
  if (*(_BYTE *)(v10 + 24))
    v33 = (const char *)(v10 + 24);
  else
    v33 = 0;
  if (v32)
  {
    v34 = strlen(v33);
    v35 = a3[52];
    v36 = v34 + 1;
    if (v34 != -1)
    {
      __dst = (void *)a3[52];
      v15 = v57;
      v13 = v58;
      result = v55;
      v16 = v56;
      goto LABEL_23;
    }
  }
  else
  {
    v35 = a3[52];
  }
  v15 = v57;
  v13 = v58;
  result = v55;
  v16 = v56;
  v36 = 0;
  __dst = 0;
LABEL_23:
  a3[52] = v35 + v36;
  if (a4)
  {
    memcpy(__dst, v33, v36);
    result = v55;
    v16 = v56;
    v15 = v57;
    v13 = v58;
  }
  if (v8 < 0x2B)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = v59;
    v23 = __dst;
    goto LABEL_60;
  }
  v37 = (v31 & 0xFFFFFFFFFFFFFFF8) + v30 + 8;
  v53 = *(_BYTE *)v37;
  if (v8 < 0x30)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = v59;
    v23 = __dst;
    v22 = v53;
    goto LABEL_60;
  }
  v38 = (strlen((const char *)(v37 + 8)) & 0xFFFFFFFFFFFFFFF8) + v37 + 8 + 8;
  v39 = *(unsigned __int8 *)(v37 + 8);
  if (*(_BYTE *)(v37 + 8))
    v40 = (const char *)(v37 + 8);
  else
    v40 = 0;
  if (v39)
  {
    v41 = strlen(v40);
    v42 = a3[52];
    v43 = v41 + 1;
    if (v41 != -1)
    {
      v27 = (void *)a3[52];
      v15 = v57;
      v13 = v58;
      result = v55;
      v16 = v56;
      goto LABEL_37;
    }
  }
  else
  {
    v42 = a3[52];
  }
  v15 = v57;
  v13 = v58;
  result = v55;
  v16 = v56;
  v43 = 0;
  v27 = 0;
LABEL_37:
  v52 = v11;
  a3[52] = v42 + v43;
  if (a4)
  {
    memcpy(v27, v40, v43);
    result = v55;
    v16 = v56;
    v15 = v57;
    v13 = v58;
  }
  v51 = *(_BYTE *)v38;
  v25 = *(_QWORD *)(v38 + 8);
  v44 = v38 + 16;
  if (v25)
  {
    v24 = (uint64_t *)a3[50];
    v45 = v25;
    v46 = v24;
    do
    {
      v48 = *(_QWORD *)v44;
      v44 += 8;
      v47 = v48;
      if (a4)
      {
        if (a5)
        {
          AliasStream2 = (uint64_t *)GetAliasStream2(a5, v47);
          if (AliasStream2)
            v47 = *AliasStream2;
          else
            v47 = 0;
        }
        v46 = (uint64_t *)a3[50];
        *v46 = v47;
      }
      a3[50] = ++v46;
      --v45;
    }
    while (v45);
    v15 = v57;
    v13 = v58;
    result = v55;
    v16 = v56;
  }
  else
  {
    v24 = 0;
  }
  if (v8 < 0x3B)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
LABEL_58:
    v28 = 0;
LABEL_59:
    v11 = v52;
    v29 = v59;
    v23 = __dst;
    v22 = v53;
    v26 = v51;
    goto LABEL_60;
  }
  v21 = *(_BYTE *)v44;
  if (v8 < 0x40)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    goto LABEL_58;
  }
  v28 = *(_BYTE *)(v44 + 8);
  if (v8 < 0x47)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    goto LABEL_59;
  }
  v18 = *(_BYTE *)(v44 + 16);
  v19 = *(_BYTE *)(v44 + 24);
  v20 = *(_WORD *)(v44 + 32);
  v29 = v59;
  v23 = __dst;
  v22 = v53;
  v26 = v51;
  if (v8 >= 0x4C)
  {
    v15 = *(_BYTE *)(v44 + 40);
    v16 = *(_BYTE *)(v44 + 48);
  }
  v11 = v52;
LABEL_60:
  v50 = a3[11];
  a3[11] = v50 + 64;
  if (a4)
  {
    *(_QWORD *)v50 = v11;
    *(_QWORD *)(v50 + 8) = v9;
    *(_QWORD *)(v50 + 16) = v23;
    *(_QWORD *)(v50 + 24) = v27;
    *(_QWORD *)(v50 + 32) = v24;
    *(_QWORD *)(v50 + 40) = v25;
    *(_DWORD *)(v50 + 48) = v29;
    *(_WORD *)(v50 + 52) = v20;
    *(_BYTE *)(v50 + 54) = v19;
    *(_BYTE *)(v50 + 55) = v18;
    *(_BYTE *)(v50 + 56) = result;
    *(_BYTE *)(v50 + 57) = v13;
    *(_BYTE *)(v50 + 58) = v26;
    *(_BYTE *)(v50 + 59) = v15;
    *(_BYTE *)(v50 + 60) = v16;
    *(_BYTE *)(v50 + 61) = v28;
    *(_BYTE *)(v50 + 62) = v22;
    *(_BYTE *)(v50 + 63) = v21;
  }
  return result;
}

uint64_t *DecodeDYMTLRenderPipelineFunctionsDescriptor(uint64_t *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;

  v8 = result[1];
  v9 = result + 2;
  v46 = v8;
  if (v8)
  {
    v10 = *(uint64_t **)(a3 + 400);
    v45 = v10;
    do
    {
      v12 = *v9++;
      v11 = v12;
      if (a4)
      {
        if (a5)
        {
          result = (uint64_t *)GetAliasStream2(a5, v11);
          if (result)
            v11 = *result;
          else
            v11 = 0;
        }
        v10 = *(uint64_t **)(a3 + 400);
        *v10 = v11;
      }
      *(_QWORD *)(a3 + 400) = ++v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v45 = 0;
  }
  v15 = *v9;
  v14 = v9 + 1;
  v13 = v15;
  v44 = (uint64_t *)v15;
  if (v15)
  {
    v16 = *(uint64_t **)(a3 + 400);
    v43 = v16;
    do
    {
      v18 = *v14++;
      v17 = v18;
      if (a4)
      {
        if (a5)
        {
          result = (uint64_t *)GetAliasStream2(a5, v17);
          if (result)
            v17 = *result;
          else
            v17 = 0;
        }
        v16 = *(uint64_t **)(a3 + 400);
        *v16 = v17;
      }
      *(_QWORD *)(a3 + 400) = ++v16;
      --v13;
    }
    while (v13);
  }
  else
  {
    v43 = 0;
  }
  v21 = *v14;
  v19 = v14 + 1;
  v20 = (uint64_t *)v21;
  if (v21)
  {
    v22 = *(uint64_t **)(a3 + 400);
    v23 = v20;
    v42 = v22;
    do
    {
      v25 = *v19++;
      v24 = v25;
      if (a4)
      {
        if (a5)
        {
          result = (uint64_t *)GetAliasStream2(a5, v24);
          if (result)
            v24 = *result;
          else
            v24 = 0;
        }
        v22 = *(uint64_t **)(a3 + 400);
        *v22 = v24;
      }
      *(_QWORD *)(a3 + 400) = ++v22;
      v23 = (uint64_t *)((char *)v23 - 1);
    }
    while (v23);
  }
  else
  {
    v42 = 0;
  }
  v28 = *v19;
  v27 = v19 + 1;
  v26 = (uint64_t *)v28;
  if (v28)
  {
    v29 = *(uint64_t **)(a3 + 400);
    v30 = v26;
    v31 = v29;
    do
    {
      v33 = *v27++;
      v32 = v33;
      if (a4)
      {
        if (a5)
        {
          result = (uint64_t *)GetAliasStream2(a5, v32);
          if (result)
            v32 = *result;
          else
            v32 = 0;
        }
        v31 = *(uint64_t **)(a3 + 400);
        *v31 = v32;
      }
      *(_QWORD *)(a3 + 400) = ++v31;
      v30 = (uint64_t *)((char *)v30 - 1);
    }
    while (v30);
  }
  else
  {
    v29 = 0;
  }
  v34 = *v27;
  if (*v27)
  {
    v35 = *(uint64_t **)(a3 + 400);
    v36 = v27 + 1;
    v37 = v34;
    v38 = v35;
    do
    {
      v40 = *v36++;
      v39 = v40;
      if (a4)
      {
        if (a5)
        {
          result = (uint64_t *)GetAliasStream2(a5, v39);
          if (result)
            v39 = *result;
          else
            v39 = 0;
        }
        v38 = *(uint64_t **)(a3 + 400);
        *v38 = v39;
      }
      *(_QWORD *)(a3 + 400) = ++v38;
      --v37;
    }
    while (v37);
  }
  else
  {
    v35 = 0;
  }
  v41 = *(uint64_t ***)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v41 + 10;
  if ((a4 & 1) != 0)
  {
    *v41 = v43;
    v41[1] = v44;
    v41[2] = v29;
    v41[3] = v26;
    v41[4] = v35;
    v41[5] = (uint64_t *)v34;
    v41[6] = v42;
    v41[7] = v20;
    v41[8] = v45;
    v41[9] = (uint64_t *)v46;
  }
  return result;
}

size_t DecodeDYMTLIntersectionFunctionDescriptor(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  const char *v7;
  char v8;
  const char *v9;
  size_t v10;
  size_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  size_t result;
  uint64_t *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v7 = (const char *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 8);
  v9 = (const char *)((strlen((const char *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF8) + a1 + 16 + 8);
  if (*(_BYTE *)(a1 + 16))
  {
    v10 = strlen(v7);
    v13 = a3 + 52;
    v14 = a3[52];
    v11 = v10 + 1;
    if (v10 != -1)
    {
      v12 = (void *)a3[52];
      goto LABEL_6;
    }
  }
  else
  {
    v7 = 0;
    v13 = a3 + 52;
    v14 = a3[52];
  }
  v11 = 0;
  v12 = 0;
LABEL_6:
  *v13 = v14 + v11;
  if (a4)
    memcpy(v12, v7, v11);
  result = strlen(v9);
  v16 = (uint64_t *)&v9[(result & 0xFFFFFFFFFFFFFFF8) + 8];
  v17 = *(unsigned __int8 *)v9;
  if (!*v9)
    v9 = 0;
  if (v17)
  {
    result = strlen(v9);
    v18 = a3 + 52;
    v19 = a3[52];
    v20 = result + 1;
    if (result != -1)
    {
      v21 = (void *)a3[52];
      goto LABEL_15;
    }
  }
  else
  {
    v18 = a3 + 52;
    v19 = a3[52];
  }
  v20 = 0;
  v21 = 0;
LABEL_15:
  *v18 = v19 + v20;
  if (a4)
    result = (size_t)memcpy(v21, v9, v20);
  if (*v16)
  {
    v22 = a3[15];
    result = DecodeDYMTLFunctionConstantValues((size_t)(v16 + 1), *v16, a3, a4);
  }
  else
  {
    v22 = 0;
  }
  v23 = a3[1];
  a3[1] = v23 + 48;
  if (a4)
  {
    *(_QWORD *)v23 = v22;
    *(_QWORD *)(v23 + 8) = v12;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    *(_QWORD *)(v23 + 32) = v21;
    *(_BYTE *)(v23 + 40) = v8;
    *(_DWORD *)(v23 + 41) = 0;
    *(_DWORD *)(v23 + 44) = 0;
  }
  return result;
}

size_t DecodeDYMTLResidencySetDescriptor(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  size_t result;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;

  v8 = *(unsigned __int8 *)(a1 + 24);
  result = a1 + 24;
  v7 = v8;
  v9 = *(_QWORD *)(result - 16);
  v10 = *(_QWORD *)(result - 8);
  if (v8)
    v11 = (const char *)result;
  else
    v11 = 0;
  if (v7)
  {
    result = strlen(v11);
    v12 = a3 + 52;
    v13 = a3[52];
    v14 = result + 1;
    if (result != -1)
    {
      v15 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    v12 = a3 + 52;
    v13 = a3[52];
  }
  v14 = 0;
  v15 = 0;
LABEL_9:
  *v12 = v13 + v14;
  if ((a4 & 1) != 0)
  {
    result = (size_t)memcpy(v15, v11, v14);
    v16 = *a3;
    *a3 += 24;
    *(_QWORD *)v16 = v10;
    *(_QWORD *)(v16 + 8) = v15;
    *(_BYTE *)(v16 + 16) = v9;
    *(_DWORD *)(v16 + 17) = 0;
    *(_DWORD *)(v16 + 20) = 0;
  }
  else
  {
    *a3 += 24;
  }
  return result;
}

int16x4_t DecodeDYIOSurface(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v6;
  uint64_t v7;
  int16x4_t result;
  uint64_t v9;
  int32x4_t *v10;
  uint64_t v11;
  int16x4_t *v12;
  int32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  int32x4_t *v17;
  int32x4_t *v18;
  void *v19;
  const __CFData *v20;
  void *v21;
  const __CFString *v22;
  const __CFString *v23;
  id v24;
  NSObject *v25;
  const char *CStringPtr;
  FILE *v27;
  NSString *v28;
  void *v29;
  id v30;
  id v31;
  size_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];
  size_t v43;
  CFErrorRef error;
  uint8_t buf[4];
  const char *v46;

  memset(v42, 0, sizeof(v42));
  v43 = 0;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v6 = *(_DWORD *)a1;
  v37 = *(_OWORD *)(a1 + 8);
  WORD6(v42[0]) = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 48);
  result = vmovn_s32(vuzp1q_s32(*(int32x4_t *)(a1 + 32), *(int32x4_t *)(a1 + 56)));
  *(int16x4_t *)((char *)v42 + 14) = result;
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v42[0] = __PAIR64__(*(_QWORD *)(a1 + 72), v7);
  v10 = (int32x4_t *)(a1 + 88);
  BYTE6(v42[1]) = v9;
  v11 = v9;
  if ((_BYTE)v9)
  {
    v12 = (int16x4_t *)((char *)&v38 + 12);
    do
    {
      v13 = *v10;
      v12[-2].i32[1] = v10[1].i64[1];
      *(int32x2_t *)v13.i8 = vmovn_s64((int64x2_t)v13);
      LODWORD(v14) = v10[1].i32[0];
      HIDWORD(v14) = v10[2].i32[0];
      v13.i64[1] = v14;
      result = vmovn_s32(v13);
      v12[-1] = result;
      v15 = v10[2].i64[1];
      v10 += 3;
      v12->i16[0] = v15;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  DWORD2(v42[0]) = v10->i64[0];
  if (v6 <= 0x29)
  {
    v18 = (int32x4_t *)*((_QWORD *)&v42[1] + 1);
    v16 = v43;
  }
  else
  {
    v16 = v10->u64[1];
    v17 = v10 + 1;
    if (v16)
      v18 = v17;
    else
      v18 = 0;
    if (v6 >= 0x2E)
    {
      if (v16)
        v19 = *(void **)(a3 + 416);
      else
        v19 = 0;
      *(_QWORD *)(a3 + 416) += v16;
      if (a4)
        memcpy(v19, v18, v16);
      goto LABEL_30;
    }
  }
  if (!v18)
    goto LABEL_29;
  error = 0;
  v20 = (const __CFData *)objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", v18, v16, 0);
  v21 = (void *)CFPropertyListCreateWithData(0, v20, 0, 0, &error);
  if (error)
  {
    v22 = CFErrorCopyDescription(error);
    v23 = v22;
    if (s_logUsingOsLog)
    {
      v24 = gt_default_log();
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        CStringPtr = CFStringGetCStringPtr(v23, 0x8000100u);
        *(_DWORD *)buf = 136315138;
        v46 = CStringPtr;
        _os_log_error_impl(&dword_0, v25, OS_LOG_TYPE_ERROR, "warning: %s", buf, 0xCu);
      }
    }
    else
    {
      v27 = __stderrp;
      v28 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("warning: %s"), CFStringGetCStringPtr(v22, 0x8000100u));
      v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v28));
      fprintf(v27, "%s\n", (const char *)-[NSObject UTF8String](v25, "UTF8String"));
    }

    CFRelease(v23);
    CFRelease(error);
  }

  if (v21)
  {
    v29 = objc_autoreleasePoolPush();
    v30 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v21, 1, 0)));
    v31 = objc_msgSend(v30, "bytes");
    v32 = (size_t)objc_msgSend(v30, "length");
    v16 = v32;
    if (v32)
      v19 = *(void **)(a3 + 416);
    else
      v19 = 0;
    *(_QWORD *)(a3 + 416) += v32;
    if (a4)
      memcpy(v19, v31, v32);

    objc_autoreleasePoolPop(v29);
  }
  else
  {
LABEL_29:
    v19 = 0;
    v16 = 0;
  }
LABEL_30:
  *((_QWORD *)&v42[1] + 1) = v19;
  v43 = v16;
  v33 = *(_QWORD *)(a3 + 384);
  *(_QWORD *)(a3 + 384) = v33 + 120;
  if (a4)
  {
    v34 = v42[0];
    *(_OWORD *)(v33 + 64) = v41;
    *(_OWORD *)(v33 + 80) = v34;
    *(_OWORD *)(v33 + 96) = v42[1];
    *(_QWORD *)(v33 + 112) = v43;
    v35 = v38;
    *(_OWORD *)v33 = v37;
    *(_OWORD *)(v33 + 16) = v35;
    result = (int16x4_t)v39;
    v36 = v40;
    *(_OWORD *)(v33 + 32) = v39;
    *(_OWORD *)(v33 + 48) = v36;
  }
  return result;
}

size_t DecodeDYMTLDeviceDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  size_t v7;
  uint64_t v8;
  const char *v9;
  size_t result;
  const char *v11;
  int v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  char v18;
  const char *v19;
  char v20;
  char v21;
  const char *v22;
  const char *v23;
  int v24;
  const char *v25;
  int16x8_t v26;
  int32x2_t v27;
  const char *v28;
  _QWORD *v29;
  uint64_t v30;
  size_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  size_t v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  size_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int16x8_t v51;
  char v52;
  __int128 v53;
  char v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  char v58;
  __int128 v59;
  const char *v60;

  v7 = *(_QWORD *)a1;
  v8 = *(unsigned __int8 *)(a1 + 8);
  v9 = (const char *)(a1 + 16);
  result = strlen((const char *)(a1 + 16));
  v11 = &v9[result & 0xFFFFFFFFFFFFFFF8];
  v12 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    v13 = v9;
  else
    v13 = 0;
  v60 = v13;
  v14 = v11 + 40;
  v57 = *((_WORD *)v11 + 4);
  v58 = v11[32];
  v55 = *((_WORD *)v11 + 12);
  v56 = *((_WORD *)v11 + 8);
  if (v8 == 1)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v54 = 0;
  }
  else
  {
    v19 = &v14[strlen(v14) & 0xFFFFFFFFFFFFFFF8];
    if (*v14)
      v15 = v14;
    else
      v15 = 0;
    v20 = v8;
    v21 = v7;
    v7 = (size_t)&v19[(strlen(v19 + 8) & 0xFFFFFFFFFFFFFFF8) + 8];
    v22 = (const char *)(v7 + 8);
    if (v19[8])
      v16 = v19 + 8;
    else
      v16 = 0;
    result = strlen((const char *)(v7 + 8));
    v23 = &v22[result & 0xFFFFFFFFFFFFFFF8];
    v24 = *(unsigned __int8 *)(v7 + 8);
    LOBYTE(v7) = v21;
    LOBYTE(v8) = v20;
    if (v24)
      v17 = v22;
    else
      v17 = 0;
    v18 = v23[8];
    v14 = v23 + 24;
    v54 = v23[16];
  }
  if (v7 < 0xCu)
  {
    v47 = 0;
    v49 = 0;
    v50 = 0;
    v52 = 0;
    v48 = 0;
    v53 = 0u;
    v51 = 0u;
    v59 = 0u;
    if (v12)
      goto LABEL_34;
    goto LABEL_39;
  }
  v53 = *(_OWORD *)v14;
  if (v7 < 0xFu)
  {
    v47 = 0;
    BYTE4(v49) = 0;
    v52 = 0;
    goto LABEL_25;
  }
  v52 = v14[16];
  if (v7 < 0x19u)
  {
    v47 = 0;
    BYTE4(v49) = 0;
LABEL_25:
    v50 = 0;
    v48 = 0;
    LOBYTE(v49) = 0;
    v59 = 0u;
    v51 = 0u;
    if (v12)
      goto LABEL_34;
    goto LABEL_39;
  }
  v25 = v14 + 32;
  v26 = 0uLL;
  v59 = 0u;
  if (*((_QWORD *)v14 + 3) == -1)
  {
    v50 = 0;
  }
  else
  {
    v27.i32[0] = *((_QWORD *)v14 + 3);
    v27.i32[1] = *(_DWORD *)v25;
    v26 = vuzp1q_s16((int16x8_t)vmovn_hight_s64(v27, *(int64x2_t *)(v14 + 40)), (int16x8_t)vuzp1q_s32(*(int32x4_t *)(v14 + 56), *(int32x4_t *)(v14 + 72)));
    v25 = v14 + 104;
    LOWORD(v50) = *((_WORD *)v14 + 48);
    WORD2(v50) = *((_WORD *)v14 + 44);
  }
  v51 = v26;
  if (v7 < 0x1Cu)
  {
    v47 = 0;
    BYTE4(v49) = 0;
    goto LABEL_32;
  }
  BYTE4(v49) = *v25;
  if (v7 == 28)
  {
    v47 = 0;
LABEL_32:
    LOBYTE(v49) = 0;
    goto LABEL_33;
  }
  LOBYTE(v49) = v25[8];
  if (v7 < 0x2Cu)
  {
    v47 = 0;
LABEL_33:
    v48 = 0;
    if (v12)
      goto LABEL_34;
LABEL_39:
    v29 = (_QWORD *)(a3 + 416);
    v30 = *(_QWORD *)(a3 + 416);
    v28 = v60;
    goto LABEL_40;
  }
  v47 = *((_QWORD *)v25 + 2);
  if (v7 < 0x35u)
    goto LABEL_33;
  v59 = *(_OWORD *)(v25 + 24);
  v48 = v25[40];
  if (!v12)
    goto LABEL_39;
LABEL_34:
  v28 = v60;
  result = strlen(v60);
  v29 = (_QWORD *)(a3 + 416);
  v30 = *(_QWORD *)(a3 + 416);
  v31 = result + 1;
  if (result != -1)
  {
    v32 = *(void **)(a3 + 416);
    goto LABEL_41;
  }
LABEL_40:
  v31 = 0;
  v32 = 0;
LABEL_41:
  *v29 = v30 + v31;
  if (a4)
    result = (size_t)memcpy(v32, v28, v31);
  if (v15)
  {
    result = strlen(v15);
    v33 = (_QWORD *)(a3 + 416);
    v34 = *(_QWORD *)(a3 + 416);
    v35 = v18;
    v36 = result + 1;
    if (result != -1)
    {
      v37 = *(void **)(a3 + 416);
      goto LABEL_48;
    }
  }
  else
  {
    v35 = v18;
    v33 = (_QWORD *)(a3 + 416);
    v34 = *(_QWORD *)(a3 + 416);
  }
  v36 = 0;
  v37 = 0;
LABEL_48:
  *v33 = v34 + v36;
  if (a4)
    result = (size_t)memcpy(v37, v15, v36);
  if (v16)
  {
    result = strlen(v16);
    v38 = (_QWORD *)(a3 + 416);
    v39 = *(_QWORD *)(a3 + 416);
    v40 = result + 1;
    if (result != -1)
    {
      v41 = *(void **)(a3 + 416);
      goto LABEL_55;
    }
  }
  else
  {
    v38 = (_QWORD *)(a3 + 416);
    v39 = *(_QWORD *)(a3 + 416);
  }
  v40 = 0;
  v41 = 0;
LABEL_55:
  *v38 = v39 + v40;
  if (a4)
    result = (size_t)memcpy(v41, v16, v40);
  if (v17)
  {
    result = strlen(v17);
    v42 = (_QWORD *)(a3 + 416);
    v43 = *(_QWORD *)(a3 + 416);
    v44 = result + 1;
    if (result != -1)
    {
      v45 = *(void **)(a3 + 416);
      goto LABEL_62;
    }
  }
  else
  {
    v42 = (_QWORD *)(a3 + 416);
    v43 = *(_QWORD *)(a3 + 416);
  }
  v44 = 0;
  v45 = 0;
LABEL_62:
  *v42 = v43 + v44;
  if ((a4 & 1) != 0)
  {
    result = (size_t)memcpy(v45, v17, v44);
    v46 = *(_QWORD *)(a3 + 312);
    *(_QWORD *)(a3 + 312) = v46 + 112;
    *(_OWORD *)v46 = v53;
    *(_QWORD *)(v46 + 16) = v47;
    *(_OWORD *)(v46 + 24) = v59;
    *(int16x8_t *)(v46 + 40) = v51;
    *(_WORD *)(v46 + 56) = WORD2(v50);
    *(_WORD *)(v46 + 58) = v50;
    *(_DWORD *)(v46 + 60) = 0;
    *(_QWORD *)(v46 + 64) = v32;
    *(_QWORD *)(v46 + 72) = v37;
    *(_QWORD *)(v46 + 80) = v41;
    *(_QWORD *)(v46 + 88) = v45;
    *(_WORD *)(v46 + 96) = v57;
    *(_WORD *)(v46 + 98) = v56;
    *(_WORD *)(v46 + 100) = v55;
    *(_BYTE *)(v46 + 102) = v8;
    *(_BYTE *)(v46 + 103) = BYTE4(v49);
    *(_BYTE *)(v46 + 104) = v7;
    *(_BYTE *)(v46 + 105) = v58;
    *(_BYTE *)(v46 + 106) = v35;
    *(_BYTE *)(v46 + 107) = v54;
    *(_BYTE *)(v46 + 108) = v52;
    *(_BYTE *)(v46 + 109) = v49;
    *(_BYTE *)(v46 + 110) = v48;
    *(_BYTE *)(v46 + 111) = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 312) += 112;
  }
  return result;
}

size_t DecodeDYMTLCounterSampleBufferDescriptor(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  char *v7;
  size_t v8;
  int v9;
  char *v10;
  size_t v11;
  char *v12;
  unsigned int v13;
  const char *v14;
  const char *v15;
  const char *v16;
  int v17;
  const char *v18;
  size_t v19;
  int v20;
  const char *v21;
  size_t v22;
  uint64_t v23;
  size_t v24;
  void *v25;
  size_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  _QWORD *v30;
  size_t result;
  const char *v32;
  int v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  void *v40;
  const char *v41;
  _QWORD *v42;
  uint64_t v43;
  size_t v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  size_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  char *__s;
  char *v55;

  v7 = (char *)(a1 + 8);
  v8 = (strlen((const char *)(a1 + 8)) & 0xFFFFFFFFFFFFFFF8) + a1 + 8;
  v9 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
    v10 = v7;
  else
    v10 = 0;
  __s = v10;
  v11 = (strlen((const char *)(v8 + 8)) & 0xFFFFFFFFFFFFFFF8) + v8 + 8;
  v53 = *(unsigned __int8 *)(v8 + 8);
  if (*(_BYTE *)(v8 + 8))
    v12 = (char *)(v8 + 8);
  else
    v12 = 0;
  v55 = v12;
  v13 = *(_DWORD *)(v11 + 16);
  v14 = (const char *)(v11 + 24);
  v52 = v13;
  if (v13)
  {
    v51 = a3[49];
    while (1)
    {
      v15 = &v14[strlen(v14) & 0xFFFFFFFFFFFFFFF8];
      v16 = v15 + 8;
      v17 = *(unsigned __int8 *)v14;
      if (*v14)
        v18 = v14;
      else
        v18 = 0;
      v19 = strlen(v15 + 8);
      v20 = *((unsigned __int8 *)v15 + 8);
      if (v20)
        v21 = v16;
      else
        v21 = 0;
      if (v17)
      {
        v22 = strlen(v18);
        v23 = a3[52];
        v24 = v22 + 1;
        if (v22 != -1)
        {
          v25 = (void *)a3[52];
          goto LABEL_20;
        }
      }
      else
      {
        v23 = a3[52];
      }
      v24 = 0;
      v25 = 0;
LABEL_20:
      a3[52] = v23 + v24;
      if (a4)
        memcpy(v25, v18, v24);
      if (!v20)
      {
        v27 = a3[52];
LABEL_26:
        v28 = 0;
        v29 = 0;
        goto LABEL_27;
      }
      v26 = strlen(v21);
      v27 = a3[52];
      v28 = v26 + 1;
      if (v26 == -1)
        goto LABEL_26;
      v29 = (void *)a3[52];
LABEL_27:
      a3[52] = v27 + v28;
      if ((a4 & 1) != 0)
      {
        memcpy(v29, v21, v28);
        v30 = (_QWORD *)a3[49];
        a3[49] = v30 + 2;
        *v30 = v25;
        v30[1] = v29;
      }
      else
      {
        a3[49] += 16;
      }
      v14 = &v16[(v19 & 0xFFFFFFFFFFFFFFF8) + 8];
      if (!--v13)
        goto LABEL_33;
    }
  }
  v51 = 0;
LABEL_33:
  result = strlen(v14);
  v32 = &v14[result & 0xFFFFFFFFFFFFFFF8];
  v33 = *(unsigned __int8 *)v14;
  if (*v14)
    v34 = v14;
  else
    v34 = 0;
  v35 = *((_QWORD *)v32 + 1);
  v36 = *((_QWORD *)v32 + 2);
  if (v9)
  {
    result = strlen(__s);
    v37 = a3 + 52;
    v38 = a3[52];
    v39 = result + 1;
    if (result != -1)
    {
      v40 = (void *)a3[52];
      v41 = v55;
      goto LABEL_41;
    }
  }
  else
  {
    v37 = a3 + 52;
    v38 = a3[52];
  }
  v41 = v55;
  v39 = 0;
  v40 = 0;
LABEL_41:
  *v37 = v38 + v39;
  if (a4)
    result = (size_t)memcpy(v40, __s, v39);
  if (v53)
  {
    result = strlen(v41);
    v42 = a3 + 52;
    v43 = a3[52];
    v44 = result + 1;
    if (result != -1)
    {
      v45 = (void *)a3[52];
      goto LABEL_48;
    }
  }
  else
  {
    v42 = a3 + 52;
    v43 = a3[52];
  }
  v44 = 0;
  v45 = 0;
LABEL_48:
  *v42 = v43 + v44;
  if (a4)
    result = (size_t)memcpy(v45, v41, v44);
  if (v33)
  {
    result = strlen(v34);
    v46 = a3 + 52;
    v47 = a3[52];
    v48 = result + 1;
    if (result != -1)
    {
      v49 = (void *)a3[52];
      goto LABEL_55;
    }
  }
  else
  {
    v46 = a3 + 52;
    v47 = a3[52];
  }
  v48 = 0;
  v49 = 0;
LABEL_55:
  *v46 = v47 + v48;
  if ((a4 & 1) != 0)
  {
    result = (size_t)memcpy(v49, v34, v48);
    v50 = a3[38];
    a3[38] = v50 + 48;
    *(_QWORD *)v50 = v49;
    *(_QWORD *)(v50 + 8) = v40;
    *(_QWORD *)(v50 + 16) = v45;
    *(_QWORD *)(v50 + 24) = v51;
    *(_QWORD *)(v50 + 32) = v52;
    *(_DWORD *)(v50 + 40) = v36;
    *(_BYTE *)(v50 + 44) = v35;
    *(_WORD *)(v50 + 45) = 0;
    *(_BYTE *)(v50 + 47) = 0;
  }
  else
  {
    a3[38] += 48;
  }
  return result;
}

size_t DecodeDYMTLAccelerationStructureDescriptor(size_t result, uint64_t a2, _QWORD *a3, int a4, uint64_t a5)
{
  unsigned int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  int32x2_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int32x2_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int32x2_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int32x2_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  int32x2_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  const char *v57;
  uint64_t v58;
  size_t v59;
  void *v60;
  uint64_t v61;
  int32x2_t v62;
  int32x2_t v63;
  int64x2_t v64;
  unint64_t v65;
  char v66;
  char v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int64x2_t v95;
  uint64_t *AliasStream2;
  uint64_t v97;
  int32x2_t v98;
  unint64_t *v99;
  uint64_t *v100;
  unint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  char v105;
  int32x2_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int32 v113;
  __int8 v114;
  __int8 v115;
  __int8 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int32x2_t v122;
  uint64_t v123;
  int64x2_t v124;
  int64x2_t v125;
  unsigned int v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  int32x2_t v130;
  int32x2_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;

  v8 = *(_DWORD *)result;
  v9 = *(unsigned __int8 *)(result + 8);
  v104 = *(unsigned __int8 *)(result + 16);
  v105 = *(_BYTE *)(result + 8);
  if (v9 == 3)
  {
    if (v8 < 0x4E)
    {
      v65 = 0;
      v66 = 0;
      v67 = 0;
      if (!a4)
        goto LABEL_193;
    }
    else
    {
      v65 = *(_QWORD *)(result + 120);
      v66 = *(_BYTE *)(result + 128);
      v67 = *(_BYTE *)(result + 136);
      if (!a4)
        goto LABEL_193;
    }
    v94 = *(_QWORD *)(result + 24);
    v107 = *(_QWORD *)(result + 32);
    v92 = *(_QWORD *)(result + 40);
    v90 = *(_QWORD *)(result + 48);
    v86 = *(_QWORD *)(result + 56);
    v85 = *(_QWORD *)(result + 64);
    v70 = *(_QWORD *)(result + 72);
    v69 = *(_QWORD *)(result + 80);
    v95 = *(int64x2_t *)(result + 88);
    v79 = *(_DWORD *)(result + 104);
    v78 = *(_BYTE *)(result + 112);
    if (a5)
    {
      v125 = *(int64x2_t *)(result + 88);
      v127 = *(_BYTE *)(result + 112);
      v129 = *(_QWORD *)(result + 64);
      v132 = v67;
      AliasStream2 = (uint64_t *)GetAliasStream2(a5, v94);
      v136 = v66;
      if (AliasStream2)
        v97 = *AliasStream2;
      else
        v97 = 0;
      v99 = (unint64_t *)GetAliasStream2(a5, v92);
      if (v99)
        v92 = *v99;
      else
        v92 = 0;
      v100 = (uint64_t *)GetAliasStream2(a5, v86);
      if (v100)
        v86 = *v100;
      else
        v86 = 0;
      v101 = (unint64_t *)GetAliasStream2(a5, v70);
      if (v101)
        v70 = *v101;
      else
        v70 = 0;
      result = v104;
      v93 = v97;
      v66 = v136;
      v67 = v132;
      v85 = v129;
      v78 = v127;
      v95 = v125;
    }
    else
    {
      result = *(unsigned __int8 *)(result + 16);
      v93 = v94;
    }
    v98 = vmovn_s64(v95);
    v91 = HIDWORD(v92);
    v89 = HIDWORD(v90);
    v88 = v90 >> 40;
    v87 = HIWORD(v90);
    v84 = HIDWORD(v70);
    v83 = HIDWORD(v69);
    v82 = v65 >> 8;
    v80 = v65 & 0xFFFFFFFFFF000000;
    v81 = v65 >> 16;
    goto LABEL_192;
  }
  v126 = *(_DWORD *)result;
  if (v9 == 2)
  {
    v107 = *(_QWORD *)(result + 24);
    v135 = *(_QWORD *)(result + 32);
    v68 = *(_DWORD *)(result + 40);
    LODWORD(v69) = *(_DWORD *)(result + 48);
    v70 = *(unsigned int *)(result + 56);
    v71 = (uint64_t *)(result + 64);
    v72 = (uint64_t *)a3[50];
    a3[50] = &v72[v70];
    if (!a4)
      goto LABEL_151;
    if (a5)
    {
      result = GetAliasStream2(a5, v107);
      if (!result)
      {
        v107 = 0;
        if (!v70)
          goto LABEL_151;
        goto LABEL_145;
      }
      v107 = *(_QWORD *)result;
    }
    if (!v70)
      goto LABEL_151;
LABEL_145:
    v73 = v72;
    v74 = v70;
    do
    {
      v76 = *v71++;
      v75 = v76;
      if (a5)
      {
        result = GetAliasStream2(a5, v75);
        if (result)
          v75 = *(_QWORD *)result;
        else
          v75 = 0;
      }
      *v73++ = v75;
      --v74;
    }
    while (v74);
LABEL_151:
    if (v126 < 0x39)
    {
      LOBYTE(v65) = 0;
      LODWORD(v83) = 0;
      v86 = 0;
      v77 = 0;
      v85 = 0;
      LOBYTE(v82) = 0;
      LOBYTE(v81) = 0;
      v93 = (uint64_t)v72;
      LODWORD(v84) = v68;
      if (!a4)
        goto LABEL_193;
    }
    else
    {
      LOBYTE(v65) = *(_BYTE *)v71;
      v77 = v71[1];
      if (a5)
      {
        result = GetAliasStream2(a5, v77);
        if (result)
          v77 = *(_QWORD *)result;
        else
          v77 = 0;
      }
      v93 = (uint64_t)v72;
      LODWORD(v84) = v68;
      v86 = v71[2];
      v83 = v71[3];
      if (v126 < 0x4E)
      {
        v85 = 0;
        LOBYTE(v82) = 0;
        LOBYTE(v81) = 0;
        if (!a4)
          goto LABEL_193;
      }
      else
      {
        v85 = v71[4];
        v82 = v71[5];
        v81 = v71[6];
        if (!a4)
          goto LABEL_193;
      }
    }
    v67 = 0;
    v66 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v91 = HIDWORD(v77);
    LODWORD(v90) = v135;
    v89 = HIDWORD(v135);
    v88 = v135 >> 40;
    v87 = HIWORD(v135);
    v98 = 0;
    LODWORD(v92) = v77;
    goto LABEL_179;
  }
  if (v9 == 1)
  {
    v10 = result + 32;
    v107 = *(_QWORD *)(result + 24);
    if (v107)
    {
      v11 = 0;
      v103 = a3[37];
      while (2)
      {
        v12 = (int32x2_t *)a3[37];
        a3[37] = v12 + 17;
        v115 = *(_BYTE *)(v10 + 16);
        v116 = *(_BYTE *)v10;
        v113 = *(_DWORD *)(v10 + 8);
        v114 = *(_BYTE *)(v10 + 24);
        switch(*(_BYTE *)v10)
        {
          case 1:
            if (v8 < 0x3C)
            {
              v14 = 0;
              v15 = 0;
              v16 = 0;
              v17 = (const char *)(v10 + 88);
              v13 = 30;
              if (!a4)
                goto LABEL_85;
            }
            else
            {
              v13 = *(unsigned __int8 *)(v10 + 88);
              v15 = *(_QWORD *)(v10 + 96);
              v14 = *(_QWORD *)(v10 + 104);
              if (v8 < 0x4E)
              {
                v16 = 0;
                v17 = (const char *)(v10 + 112);
                if (!a4)
                  goto LABEL_85;
              }
              else
              {
                v16 = *(unsigned __int8 *)(v10 + 112);
                v17 = (const char *)(v10 + 120);
                if (!a4)
                  goto LABEL_85;
              }
            }
            v119 = v13;
            v117 = v16;
            v128 = v15;
            v120 = v14;
            v130 = *(int32x2_t *)(v10 + 40);
            v48 = *(_QWORD *)(v10 + 56);
            v121 = *(_QWORD *)(v10 + 48);
            v124.i8[0] = *(_BYTE *)(v10 + 72);
            v122 = *(int32x2_t *)(v10 + 64);
            v123 = *(_QWORD *)(v10 + 80);
            if (!a5)
            {
              v118 = *(_QWORD *)(v10 + 32);
              v133 = *(_QWORD *)(v10 + 56);
              goto LABEL_87;
            }
            v49 = (uint64_t *)GetAliasStream2(a5, *(_QWORD *)(v10 + 32));
            if (v49)
              v118 = *v49;
            else
              v118 = 0;
            v52 = (uint64_t *)GetAliasStream2(a5, v48);
            if (v52)
              v53 = *v52;
            else
              v53 = 0;
            v55 = v128;
            v133 = v53;
            v54 = a5;
            goto LABEL_109;
          case 2:
            v17 = (const char *)(v10 + 64);
            if (!a4)
              goto LABEL_85;
            v122 = *(int32x2_t *)(v10 + 40);
            v120 = *(_QWORD *)(v10 + 48);
            v128 = *(_QWORD *)(v10 + 56);
            if (a5)
            {
              result = GetAliasStream2(a5, *(_QWORD *)(v10 + 32));
              if (result)
              {
                v123 = 0;
                v118 = 0;
                v130 = 0;
                v121 = 0;
                v124.i8[0] = 0;
                v117 = 0;
                v119 = 0;
                v18 = 0;
                v111 = 0;
                v112 = 0;
                v109 = 0;
                v110 = 0;
                v108 = 0;
                v133 = *(_QWORD *)result;
                goto LABEL_111;
              }
              v133 = 0;
            }
            else
            {
              v133 = *(_QWORD *)(v10 + 32);
            }
            goto LABEL_86;
          case 3:
            v19 = *(int32x2_t *)(v10 + 32);
            v20 = v10 + 40;
            v130 = v19;
            if (v19)
            {
              v118 = a3[43];
              do
              {
                v21 = (uint64_t *)a3[43];
                a3[43] = v21 + 2;
                if (a4)
                {
                  v22 = *(_QWORD *)v20;
                  v23 = *(_QWORD *)(v20 + 8);
                  if (a5)
                  {
                    result = GetAliasStream2(a5, v22);
                    if (result)
                      v22 = *(_QWORD *)result;
                    else
                      v22 = 0;
                  }
                  *v21 = v22;
                  v21[1] = v23;
                }
                v20 += 16;
                --*(_QWORD *)&v19;
              }
              while (v19);
            }
            else
            {
              v118 = 0;
            }
            v121 = *(_QWORD *)(v20 + 8);
            v133 = *(_QWORD *)(v20 + 16);
            v124.i8[0] = *(_BYTE *)(v20 + 32);
            v123 = *(_QWORD *)(v20 + 40);
            if (v8 <= 0x3B)
            {
              v120 = 0;
              v128 = 0;
              v117 = 0;
              v17 = (const char *)(v20 + 48);
              v119 = 30;
              if (!a4)
                goto LABEL_85;
            }
            else
            {
              v119 = *(unsigned __int8 *)(v20 + 48);
              v128 = *(_QWORD *)(v20 + 56);
              v120 = *(_QWORD *)(v20 + 64);
              if (v8 < 0x4E)
              {
                v117 = 0;
                v17 = (const char *)(v20 + 72);
                if (!a4)
                {
LABEL_85:
                  v133 = 0;
                  v122 = 0;
                  v128 = 0;
                  v120 = 0;
LABEL_86:
                  v123 = 0;
                  v118 = 0;
                  v130 = 0;
                  v121 = 0;
                  v124.i8[0] = 0;
                  v117 = 0;
                  v119 = 0;
                  goto LABEL_87;
                }
              }
              else
              {
                v117 = *(unsigned __int8 *)(v20 + 72);
                v17 = (const char *)(v20 + 80);
                if (!a4)
                  goto LABEL_85;
              }
            }
            v122 = *(int32x2_t *)(v20 + 24);
            if (!a5)
              goto LABEL_87;
            v50 = (uint64_t *)GetAliasStream2(a5, v133);
            if (v50)
              v133 = *v50;
            else
              v133 = 0;
            v54 = a5;
            v55 = v128;
LABEL_109:
            result = GetAliasStream2(v54, v55);
            if (!result)
            {
              v128 = 0;
LABEL_87:
              v18 = 0;
              v111 = 0;
              v112 = 0;
              v109 = 0;
              v110 = 0;
              v108 = 0;
              goto LABEL_111;
            }
            v18 = 0;
            v111 = 0;
            v112 = 0;
            v109 = 0;
            v110 = 0;
            v108 = 0;
            v128 = *(_QWORD *)result;
LABEL_111:
            if (v8 < 0x38)
            {
              v60 = 0;
              v61 = 0;
              v62 = 0;
              v63 = 0;
              v10 = (unint64_t)v17;
              if (!a4)
                goto LABEL_134;
              goto LABEL_128;
            }
            result = strlen(v17);
            v56 = result;
            if (*v17)
              v57 = v17;
            else
              v57 = 0;
            if (*v17)
            {
              result = strlen(v57);
              v58 = a3[52];
              v59 = result + 1;
              if (result != -1)
              {
                v60 = (void *)a3[52];
                goto LABEL_122;
              }
            }
            else
            {
              v58 = a3[52];
            }
            v59 = 0;
            v60 = 0;
LABEL_122:
            a3[52] = v58 + v59;
            if (a4)
              result = (size_t)memcpy(v60, v57, v59);
            v10 = (unint64_t)&v17[(v56 & 0xFFFFFFFFFFFFFFF8) + 8];
            if (v126 < 0x3D)
            {
              v61 = 0;
              v62 = 0;
              v63 = 0;
              if (!a4)
                goto LABEL_134;
            }
            else
            {
              v61 = *(_QWORD *)v10;
              v62 = *(int32x2_t *)&v17[(v56 & 0xFFFFFFFFFFFFFFF8) + 16];
              v64 = *(int64x2_t *)(v10 + 16);
              v10 += 32;
              v63 = vmovn_s64(v64);
              if (!a4)
                goto LABEL_134;
            }
LABEL_128:
            if (a5)
            {
              v106 = v63;
              result = GetAliasStream2(a5, v61);
              if (result)
                v61 = *(_QWORD *)result;
              else
                v61 = 0;
              v63 = v106;
            }
            *v12 = (int32x2_t)v60;
            v12[1] = (int32x2_t)v61;
            v12[2] = v62;
            v12[3] = v63;
            v12[4].i32[0] = v113;
            v12[4].i8[4] = v116;
            v12[4].i8[5] = v115;
            v12[4].i8[6] = v114;
            v12[4].i8[7] = 0;
            v12[5] = (int32x2_t)v133;
            v12[6] = v122;
            v12[7] = (int32x2_t)v128;
            v12[8] = (int32x2_t)v120;
            v12[9] = (int32x2_t)v123;
            v12[10] = (int32x2_t)v118;
            v12[11] = v130;
            v12[12] = (int32x2_t)v121;
            v12[13] = (int32x2_t)(v18 | (v119 << 16) | (v117 << 8) | v124.u8[0]);
            v12[14] = (int32x2_t)v112;
            v12[15] = (int32x2_t)v111;
            v12[16].i8[0] = BYTE4(v110);
            v12[16].i8[1] = v110;
            v12[16].i8[2] = BYTE4(v109);
            v12[16].i8[3] = v109;
            v12[16].i8[4] = BYTE4(v108);
            v12[16].i8[5] = v108;
            v12[16].i16[3] = 0;
LABEL_134:
            ++v11;
            v8 = v126;
            if (v11 != v107)
              continue;
            v93 = v103;
            break;
          case 4:
            v24 = *(int32x2_t *)(v10 + 32);
            v25 = (uint64_t *)(v10 + 40);
            v122 = v24;
            if (v24)
            {
              v133 = a3[43];
              do
              {
                v26 = (uint64_t *)a3[43];
                a3[43] = v26 + 2;
                if (a4)
                {
                  v27 = *v25;
                  v28 = v25[1];
                  if (a5)
                  {
                    result = GetAliasStream2(a5, v27);
                    if (result)
                      v27 = *(_QWORD *)result;
                    else
                      v27 = 0;
                  }
                  *v26 = v27;
                  v26[1] = v28;
                }
                v25 += 2;
                --*(_QWORD *)&v24;
              }
              while (v24);
            }
            else
            {
              v133 = 0;
            }
            v17 = (const char *)(v25 + 3);
            if ((a4 & 1) == 0)
              goto LABEL_85;
            v123 = 0;
            v118 = 0;
            v130 = 0;
            v121 = 0;
            v124.i8[0] = 0;
            v117 = 0;
            v119 = 0;
            v18 = 0;
            v111 = 0;
            v112 = 0;
            v109 = 0;
            v110 = 0;
            v108 = 0;
            v128 = v25[2];
            v120 = v25[1];
            goto LABEL_111;
          case 5:
            v17 = (const char *)(v10 + 168);
            if (!a4)
              goto LABEL_85;
            v29 = *(_QWORD *)(v10 + 32);
            v124.i64[0] = *(_QWORD *)(v10 + 80);
            result = *(unsigned __int8 *)(v10 + 144);
            v121 = *(_QWORD *)(v10 + 56);
            v122 = *(int32x2_t *)(v10 + 40);
            v120 = *(_QWORD *)(v10 + 72);
            v128 = *(_QWORD *)(v10 + 64);
            v118 = *(_QWORD *)(v10 + 96);
            v123 = *(_QWORD *)(v10 + 88);
            v111 = *(_QWORD *)(v10 + 104);
            v112 = *(_QWORD *)(v10 + 112);
            LOBYTE(v110) = *(_BYTE *)(v10 + 152);
            BYTE4(v110) = *(_BYTE *)(v10 + 120);
            LOBYTE(v109) = *(_BYTE *)(v10 + 160);
            BYTE4(v109) = *(_BYTE *)(v10 + 144);
            LOBYTE(v108) = *(_BYTE *)(v10 + 128);
            BYTE4(v108) = *(_BYTE *)(v10 + 136);
            if (!a5)
            {
              v130 = *(int32x2_t *)(v10 + 48);
              v133 = *(_QWORD *)(v10 + 32);
              goto LABEL_106;
            }
            v30 = *(_QWORD *)(v10 + 48);
            v31 = (uint64_t *)GetAliasStream2(a5, v29);
            if (v31)
              v32 = *v31;
            else
              v32 = 0;
            v51 = (int32x2_t *)GetAliasStream2(a5, v30);
            if (v51)
              v130 = *v51;
            else
              v130 = 0;
            v133 = v32;
            v47 = a5;
            v46 = v123;
            goto LABEL_103;
          case 6:
            v33 = *(int32x2_t *)(v10 + 32);
            v34 = (uint64_t *)(v10 + 40);
            v122 = v33;
            if (v33)
            {
              v134 = a3[43];
              do
              {
                v35 = (uint64_t *)a3[43];
                a3[43] = v35 + 2;
                if (a4)
                {
                  v36 = *v34;
                  v37 = v34[1];
                  if (a5)
                  {
                    result = GetAliasStream2(a5, v36);
                    if (result)
                      v36 = *(_QWORD *)result;
                    else
                      v36 = 0;
                  }
                  *v35 = v36;
                  v35[1] = v37;
                }
                v34 += 2;
                --*(_QWORD *)&v33;
              }
              while (v33);
              v38 = v134;
            }
            else
            {
              v38 = 0;
            }
            v41 = *v34;
            v39 = v34 + 1;
            v40 = v41;
            v133 = v38;
            v121 = v41;
            if (v41)
            {
              v131 = (int32x2_t)a3[43];
              do
              {
                v42 = (uint64_t *)a3[43];
                a3[43] = v42 + 2;
                if (a4)
                {
                  v43 = *v39;
                  v44 = v39[1];
                  if (a5)
                  {
                    result = GetAliasStream2(a5, v43);
                    if (result)
                      v43 = *(_QWORD *)result;
                    else
                      v43 = 0;
                  }
                  *v42 = v43;
                  v42[1] = v44;
                }
                v39 += 2;
                --v40;
              }
              while (v40);
              v45 = v131;
            }
            else
            {
              v45 = 0;
            }
            v17 = (const char *)(v39 + 13);
            if ((a4 & 1) == 0)
              goto LABEL_85;
            v128 = *v39;
            v124.i64[0] = v39[2];
            v46 = v39[3];
            v118 = v39[4];
            BYTE4(v110) = *((_BYTE *)v39 + 48);
            LOBYTE(v108) = *((_BYTE *)v39 + 56);
            BYTE4(v108) = *((_BYTE *)v39 + 64);
            v111 = v39[5];
            v112 = v39[9];
            BYTE4(v109) = *((_BYTE *)v39 + 80);
            LOBYTE(v110) = *((_BYTE *)v39 + 88);
            LOBYTE(v109) = *((_BYTE *)v39 + 96);
            v130 = v45;
            v120 = v39[1];
            if (a5)
            {
              v47 = a5;
LABEL_103:
              result = GetAliasStream2(v47, v46);
              if (result)
                v123 = *(_QWORD *)result;
              else
                v123 = 0;
            }
            else
            {
              v123 = v39[3];
            }
LABEL_106:
            v117 = v124.u8[1];
            v119 = v124.u8[2];
            v18 = v124.i64[0] & 0xFFFFFFFFFF000000;
            goto LABEL_111;
          default:
            v133 = 0;
            v122 = 0;
            v128 = 0;
            v120 = 0;
            v123 = 0;
            v118 = 0;
            v130 = 0;
            v121 = 0;
            v124.i8[0] = 0;
            v117 = 0;
            v119 = 0;
            v18 = 0;
            v111 = 0;
            v112 = 0;
            v109 = 0;
            v110 = 0;
            v108 = 0;
            v17 = (const char *)(v10 + 32);
            goto LABEL_111;
        }
        break;
      }
    }
    else
    {
      v93 = 0;
    }
    if (v8 > 0x38)
    {
      LODWORD(v90) = *(_DWORD *)v10;
      LODWORD(v92) = *(_DWORD *)(v10 + 8);
      LOBYTE(v88) = *(_BYTE *)(v10 + 16);
      LOBYTE(v89) = *(_BYTE *)(v10 + 24);
      LODWORD(v91) = *(_DWORD *)(v10 + 32);
      if ((a4 & 1) == 0)
        goto LABEL_193;
      goto LABEL_168;
    }
    LODWORD(v92) = 0;
    LODWORD(v90) = 0;
    LOBYTE(v89) = 0;
    LOBYTE(v88) = 0;
    LODWORD(v91) = 1;
    if ((a4 & 1) != 0)
    {
LABEL_168:
      v67 = 0;
      v66 = 0;
      v78 = 0;
      v79 = 0;
      v80 = 0;
      LOBYTE(v81) = 0;
      LOBYTE(v82) = 0;
      LOBYTE(v65) = 0;
      LODWORD(v83) = 0;
      LODWORD(v69) = 0;
      LODWORD(v84) = 0;
      LODWORD(v70) = 0;
      v85 = 0;
      v86 = 0;
      LOWORD(v87) = 0;
      goto LABEL_169;
    }
  }
  else if (a4)
  {
    v67 = 0;
    v66 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    LOBYTE(v81) = 0;
    LOBYTE(v82) = 0;
    LOBYTE(v65) = 0;
    LODWORD(v83) = 0;
    LODWORD(v69) = 0;
    LODWORD(v84) = 0;
    LODWORD(v70) = 0;
    v85 = 0;
    v86 = 0;
    LOWORD(v87) = 0;
    LOBYTE(v88) = 0;
    LOBYTE(v89) = 0;
    LODWORD(v90) = 0;
    LODWORD(v91) = 0;
    LODWORD(v92) = 0;
    v107 = 0;
    v93 = 0;
LABEL_169:
    v98 = 0;
LABEL_179:
    result = v104;
LABEL_192:
    v102 = a3[10];
    *(_BYTE *)v102 = v105;
    *(_BYTE *)(v102 + 1) = result;
    *(_DWORD *)(v102 + 2) = 0;
    *(_WORD *)(v102 + 6) = 0;
    *(_QWORD *)(v102 + 8) = v93;
    *(_QWORD *)(v102 + 16) = v107;
    *(_DWORD *)(v102 + 24) = v92;
    *(_DWORD *)(v102 + 28) = v91;
    *(_DWORD *)(v102 + 32) = v90;
    *(_BYTE *)(v102 + 36) = v89;
    *(_BYTE *)(v102 + 37) = v88;
    *(_WORD *)(v102 + 38) = v87;
    *(_QWORD *)(v102 + 40) = v86;
    *(_QWORD *)(v102 + 48) = v85;
    *(_QWORD *)(v102 + 56) = v70 | ((unint64_t)v84 << 32);
    *(_QWORD *)(v102 + 64) = v69 | ((unint64_t)v83 << 32);
    *(_QWORD *)(v102 + 72) = ((unint64_t)v81 << 16) | v80 | ((unint64_t)v82 << 8) | v65;
    *(int32x2_t *)(v102 + 80) = v98;
    *(_DWORD *)(v102 + 88) = v79;
    *(_BYTE *)(v102 + 92) = v78;
    *(_BYTE *)(v102 + 93) = v66;
    *(_BYTE *)(v102 + 94) = v67;
    *(_BYTE *)(v102 + 95) = 0;
  }
LABEL_193:
  a3[10] += 96;
  return result;
}

uint64_t DecodeDYMTLImageFilterFunctionInfoSPI(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v6 = 0;
    v7 = (char *)(a1 + 16);
    do
    {
      v8 = *v7;
      v9 = *((_QWORD *)v7 + 1);
      v7 += 16;
      v10 = *(_QWORD *)(a3 + 328);
      v11 = v9;
      for (i = v10; v11; --v11)
      {
        if (a4)
        {
          v13 = *((_QWORD *)v7 + 2);
          *(_OWORD *)i = *(_OWORD *)v7;
          *(_QWORD *)(i + 16) = v13;
          i = *(_QWORD *)(a3 + 328);
        }
        v7 += 24;
        i += 24;
        *(_QWORD *)(a3 + 328) = i;
      }
      v14 = *(_QWORD *)(a3 + 256);
      if ((a4 & 1) != 0)
      {
        *(_BYTE *)v14 = v8;
        *(_DWORD *)(v14 + 4) = 0;
        *(_DWORD *)(v14 + 1) = 0;
        *(_QWORD *)(v14 + 8) = v9;
        *(_QWORD *)(v14 + 16) = v10;
        v14 = *(_QWORD *)(a3 + 256);
      }
      *(_QWORD *)(a3 + 256) = v14 + 24;
      ++v6;
    }
    while (v6 != result);
  }
  return result;
}

size_t DecodeDYMTLStitchedLibraryDescriptor(size_t result, uint64_t a2, _QWORD *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  _DWORD *v8;
  unsigned int v9;
  char v10;
  const char *v11;
  int v12;
  int v13;
  const char *v14;
  const char *v15;
  char v16;
  const char *v17;
  int v18;
  const char *v19;
  uint64_t v20;
  size_t v21;
  void *v22;
  const char *v23;
  __int16 v24;
  uint64_t v25;
  _OWORD *v26;
  int v27;
  _OWORD *v28;
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  const char *v33;
  int v34;
  _OWORD *v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  const char *v59;

  v5 = a5;
  v8 = (_DWORD *)(result + 8);
  v9 = *(_DWORD *)result;
  if (*(_DWORD *)result < 0x4Fu)
  {
    v10 = 4;
  }
  else
  {
    v8 = (_DWORD *)(result + 32);
    v10 = *(_BYTE *)(result + 24);
  }
  v12 = *v8;
  v11 = (const char *)(v8 + 2);
  v59 = v11;
  v54 = v12;
  v55 = (unsigned __int16)v12;
  if ((_WORD)v12)
  {
    v52 = v10;
    v13 = 0;
    v53 = a3[45];
    while (1)
    {
      v14 = v59;
      v15 = v59 + 8;
      v16 = *v59;
      v59 = v15;
      result = strlen(v15);
      v17 = &v15[(result & 0xFFFFFFFFFFFFFFF8) + 8];
      v59 = v17;
      v18 = *((unsigned __int8 *)v14 + 8);
      v19 = v14[8] ? v15 : 0;
      if (!v18)
        break;
      result = strlen(v19);
      v20 = a3[52];
      v21 = result + 1;
      if (result == -1)
        goto LABEL_13;
      v22 = (void *)a3[52];
LABEL_14:
      a3[52] = v20 + v21;
      if (a4)
      {
        result = (size_t)memcpy(v22, v19, v21);
        v17 = v59;
      }
      v25 = *(_QWORD *)v17;
      v23 = v17 + 8;
      v24 = v25;
      v59 = v23;
      v26 = (_OWORD *)a3[46];
      a3[46] = &v26[3 * (unsigned __int16)v25];
      v27 = (unsigned __int16)v25;
      if ((_WORD)v25)
      {
        v28 = v26;
        do
        {
          v57 = 0u;
          v58 = 0u;
          v56 = 0u;
          v29 = *(unsigned __int8 *)v59;
          v59 += 8;
          result = DecodeDYMTLFunctionStitchingFunctionNode((uint64_t)&v56, &v59, v29, v9, (uint64_t)a3, a4);
          if (a4)
          {
            v30 = v56;
            v31 = v58;
            v28[1] = v57;
            v28[2] = v31;
            *v28 = v30;
            v28 += 3;
          }
          --v27;
        }
        while (v27);
        v23 = v59;
      }
      else
      {
        v26 = 0;
      }
      v34 = *(unsigned __int8 *)v23;
      v33 = v23 + 8;
      v32 = v34;
      v59 = v33;
      if (v34)
      {
        v35 = (_OWORD *)a3[46];
        a3[46] = v35 + 3;
        v57 = 0u;
        v58 = 0u;
        v56 = 0u;
        result = DecodeDYMTLFunctionStitchingFunctionNode((uint64_t)&v56, &v59, v32, v9, (uint64_t)a3, a4);
        if (a4)
        {
          v36 = v57;
          *v35 = v56;
          v35[1] = v36;
          v35[2] = v58;
        }
        v33 = v59;
      }
      else
      {
        v35 = 0;
      }
      v37 = *(_DWORD *)v33;
      v59 = v33 + 8;
      v38 = a3[47];
      v39 = (unsigned __int16)v37;
      if ((_WORD)v37)
      {
        v40 = v38 + 8;
        v41 = v33 + 16;
        do
        {
          v42 = *((_QWORD *)v41 - 1);
          v59 = v41;
          if (a4)
            *(_BYTE *)(v40 - 8) = v42;
          v41 += 8;
          a3[47] = v40;
          v40 += 8;
          --v39;
        }
        while (v39);
      }
      v43 = a3[45];
      if ((a4 & 1) != 0)
      {
        *(_QWORD *)v43 = v22;
        *(_QWORD *)(v43 + 8) = v26;
        *(_QWORD *)(v43 + 16) = v35;
        *(_QWORD *)(v43 + 24) = v38;
        *(_WORD *)(v43 + 32) = v24;
        *(_WORD *)(v43 + 34) = v37;
        *(_BYTE *)(v43 + 36) = v16;
        *(_WORD *)(v43 + 37) = 0;
        *(_BYTE *)(v43 + 39) = 0;
        v43 = a3[45];
      }
      a3[45] = v43 + 40;
      if (++v13 == v55)
      {
        v11 = v59;
        v10 = v52;
        v5 = a5;
        goto LABEL_38;
      }
    }
    v20 = a3[52];
LABEL_13:
    v21 = 0;
    v22 = 0;
    goto LABEL_14;
  }
  v53 = 0;
LABEL_38:
  v45 = *(_DWORD *)v11;
  v44 = *(_DWORD *)v11;
  v59 = v11 + 8;
  v46 = (unsigned __int16)v45;
  if (!(_WORD)v45)
  {
    v47 = 0;
    if ((a4 & 1) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
  v47 = (uint64_t *)a3[50];
  v48 = v47;
  do
  {
    v49 = *(_QWORD *)v59;
    v59 += 8;
    if (a4)
    {
      if (v5)
      {
        result = GetAliasStream2(v5, v49);
        if (result)
          v49 = *(_QWORD *)result;
        else
          v49 = 0;
      }
      v48 = (uint64_t *)a3[50];
      *v48 = v49;
    }
    a3[50] = ++v48;
    --v46;
  }
  while (v46);
  if ((a4 & 1) != 0)
  {
LABEL_48:
    v50 = a3[33];
    *(_QWORD *)v50 = v53;
    *(_QWORD *)(v50 + 8) = v47;
    *(_WORD *)(v50 + 16) = v54;
    *(_WORD *)(v50 + 18) = v44;
    *(_BYTE *)(v50 + 20) = v10;
    *(_WORD *)(v50 + 21) = 0;
    *(_BYTE *)(v50 + 23) = 0;
  }
LABEL_49:
  a3[33] += 24;
  return result;
}

uint64_t DecodeDYMTLFunctionStitchingFunctionNode(uint64_t a1, const char **a2, int a3, unsigned int a4, uint64_t a5, int a6)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t result;
  size_t v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  int v22;
  const char *v23;
  int v24;
  __int16 v25;
  char v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  _OWORD *v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  _DWORD v35[2];
  _OWORD v36[3];
  __int128 v37;
  __int128 v38;
  char v39;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)a1 = a3;
  v10 = *a2;
  if (a4 >= 0x4F)
  {
    v11 = *(_QWORD *)v10;
    v10 += 8;
    *a2 = v10;
    *(_QWORD *)(a1 + 32) = v11;
  }
  if (a3 == 2)
  {
    v12 = *(_QWORD *)v10;
    v10 += 8;
    *a2 = v10;
    *(_BYTE *)(a1 + 44) = v12;
  }
  *a2 = &v10[(strlen(v10) & 0xFFFFFFFFFFFFFFF8) + 8];
  if (*v10)
    v13 = v10;
  else
    v13 = "";
  result = strlen(v13);
  v15 = result + 1;
  if (result == -1)
    v16 = 0;
  else
    v16 = *(void **)(a5 + 416);
  *(_QWORD *)(a5 + 416) += v15;
  if (a6)
    result = (uint64_t)memcpy(v16, v13, v15);
  v17 = *(_QWORD *)*a2;
  *a2 += 8;
  v18 = (unsigned __int16)v17;
  *(_WORD *)(a1 + 40) = v17;
  if ((_WORD)v17)
    v19 = *(_QWORD *)(a5 + 368);
  else
    v19 = 0;
  *(_QWORD *)(a5 + 368) += 48 * (unsigned __int16)v17;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v19;
  if ((_WORD)v17)
  {
    v20 = 0;
    v21 = 0uLL;
    while (2)
    {
      v22 = 0;
      memset(v35, 0, 7);
      v37 = v21;
      v38 = v21;
      v39 = 0;
      v23 = *a2;
      v24 = *(unsigned __int8 *)*a2;
      *a2 += 8;
      v25 = 0;
      v26 = 0;
      switch(v24)
      {
        case 1:
        case 2:
        case 12:
          result = DecodeDYMTLFunctionStitchingFunctionNode(v36, a2);
          v21 = 0uLL;
          LOBYTE(v24) = v36[0];
          v35[0] = *(_DWORD *)((char *)v36 + 1);
          *(_DWORD *)((char *)v35 + 3) = DWORD1(v36[0]);
          v22 = DWORD2(v36[0]);
          v25 = WORD6(v36[0]);
          v26 = BYTE14(v36[0]);
          v37 = *(_OWORD *)((char *)v36 + 15);
          v38 = *(_OWORD *)((char *)&v36[1] + 15);
          v39 = HIBYTE(v36[2]);
          if (a6)
            goto LABEL_27;
          goto LABEL_28;
        case 3:
          v22 = 0;
          v26 = 0;
          v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          LOBYTE(v24) = 3;
          if (a6)
            goto LABEL_27;
          goto LABEL_28;
        case 4:
        case 6:
        case 7:
        case 8:
        case 9:
          v22 = 0;
          v26 = 0;
          v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          if (a6)
            goto LABEL_27;
          goto LABEL_28;
        case 5:
          v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          v22 = *((_DWORD *)v23 + 4);
          *a2 = v23 + 24;
          v26 = v23[24];
          *a2 = v23 + 32;
          LOBYTE(v24) = 5;
          goto LABEL_26;
        case 10:
        case 11:
LABEL_26:
          if (a6)
            goto LABEL_27;
          goto LABEL_28;
        default:
          v25 = 0;
          v26 = 0;
          if (!a6)
            goto LABEL_28;
LABEL_27:
          *(_BYTE *)v19 = v24;
          *(_DWORD *)(v19 + 4) = *(_DWORD *)((char *)v35 + 3);
          *(_DWORD *)(v19 + 8) = v22;
          *(_DWORD *)(v19 + 1) = v35[0];
          *(_WORD *)(v19 + 12) = v25;
          *(_BYTE *)(v19 + 14) = v26;
          v27 = v37;
          v28 = v38;
          *(_BYTE *)(v19 + 47) = v39;
          *(_OWORD *)(v19 + 31) = v28;
          *(_OWORD *)(v19 + 15) = v27;
          v19 += 48;
          v18 = *(unsigned __int16 *)(a1 + 40);
LABEL_28:
          if (++v20 >= v18)
            break;
          continue;
      }
      break;
    }
  }
  v29 = *(_QWORD *)*a2;
  *a2 += 8;
  v30 = (unsigned __int16)v29;
  *(_WORD *)(a1 + 42) = v29;
  if ((_WORD)v29)
    v31 = *(_OWORD **)(a5 + 368);
  else
    v31 = 0;
  *(_QWORD *)(a5 + 368) += 48 * (unsigned __int16)v29;
  *(_QWORD *)(a1 + 24) = v31;
  if ((_WORD)v29)
  {
    v32 = 0;
    do
    {
      memset(v36, 0, sizeof(v36));
      *a2 += 8;
      result = DecodeDYMTLFunctionStitchingFunctionNode(v36, a2);
      if (a6)
      {
        v33 = v36[0];
        v34 = v36[2];
        v31[1] = v36[1];
        v31[2] = v34;
        *v31 = v33;
        v31 += 3;
        v30 = *(unsigned __int16 *)(a1 + 42);
      }
      ++v32;
    }
    while (v32 < v30);
  }
  return result;
}

_QWORD *DecodeDYMPSPluginCNNConvolutionDescriptor(_QWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  size_t v9;
  unint64_t v10;
  int32x4_t v11;
  int64x2_t v12;
  int32x4_t v13;
  int64x2_t v14;
  uint64_t v15;
  int64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  const void *v21;
  int16x8_t v22;
  int32x2_t v23;
  uint64_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int32x4_t v28;
  int32x4_t v29;

  v5 = result[1];
  v6 = *((_DWORD *)result + 4);
  v7 = *((_DWORD *)result + 6);
  v8 = *((_DWORD *)result + 8);
  v9 = result[5];
  v10 = (unint64_t)result + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 48;
  v11 = *(int32x4_t *)v10;
  v12 = *(int64x2_t *)(v10 + 16);
  v13 = *(int32x4_t *)(v10 + 32);
  v14 = *(int64x2_t *)(v10 + 48);
  v15 = *(_QWORD *)(v10 + 64);
  v16 = *(int64x2_t *)(v10 + 72);
  v18 = *(_QWORD *)(v10 + 88);
  v17 = *(_QWORD *)(v10 + 96);
  v19 = *(char **)(a3 + 72);
  *(_QWORD *)(a3 + 72) = &v19[v9];
  if (a4)
  {
    if (v9)
      v20 = v19;
    else
      v20 = 0;
    if (v9)
      v21 = result + 6;
    else
      v21 = 0;
    v28 = v13;
    v29 = v11;
    v26 = v12;
    v27 = v14;
    v25 = v16;
    result = memcpy(v20, v21, v9);
    v22.i64[1] = v26.i64[1];
    v23 = vmovn_s64(v25);
    *(int32x2_t *)v22.i8 = vmovn_s64(v26);
    v24 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)v24 = v20;
    *(_DWORD *)(v24 + 8) = v9;
    *(_DWORD *)(v24 + 12) = v6;
    *(_DWORD *)(v24 + 16) = v7;
    *(_DWORD *)(v24 + 20) = v8;
    *(int32x4_t *)(v24 + 24) = vuzp1q_s32(v29, v28);
    *(int32x2_t *)(v24 + 40) = vmovn_s64(v27);
    *(_DWORD *)(v24 + 48) = v15;
    *(_BYTE *)(v24 + 52) = v5;
    v22.i16[1] = v22.i16[2];
    v22.i16[2] = v23.i16[0];
    v22.i16[3] = v23.i16[2];
    *(_DWORD *)(v24 + 53) = vmovn_s16(v22).u32[0];
    *(_BYTE *)(v24 + 57) = v18;
    *(_BYTE *)(v24 + 58) = v17;
    *(_BYTE *)(v24 + 63) = 0;
    *(_DWORD *)(v24 + 59) = 0;
  }
  *(_QWORD *)(a3 + 16) += 64;
  return result;
}

void *DecodeDYMPSPluginCNNConvolutionData(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  int32x2_t v6;
  __int32 v7;
  size_t v8;
  const void *v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *result;
  const void *v35;
  const void *v36;
  uint64_t v37;
  void *v38;
  int32x2_t v39;
  void *v40;
  char *v41;
  int32x2_t v42;
  char *v43;
  char *v44;
  void *v45;
  void *v46;
  _QWORD *v47;
  int32x2_t *v48;
  void *__src;
  void *v50;
  int32x2_t v51;
  int32x2_t v52;
  __int32 v53;
  int32x2_t v54;

  v6 = vmovn_s64(*(int64x2_t *)(a1 + 8));
  v7 = *(_DWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = (const void *)(a1 + 40);
  v10 = (unint64_t *)(a1 + 40 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  v13 = *v10;
  v11 = v10 + 1;
  v12 = v13;
  v14 = (_QWORD *)((char *)v11 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8));
  v17 = *v14;
  v15 = v14 + 1;
  v16 = v17;
  if (v17)
    v18 = v15;
  else
    v18 = 0;
  v19 = (_QWORD *)((char *)v15 + ((v16 + 7) & 0xFFFFFFFFFFFFFFF8));
  v22 = *v19;
  v20 = v19 + 1;
  v21 = v22;
  if (v22)
    v23 = v20;
  else
    v23 = 0;
  v24 = (_QWORD *)((char *)v20 + ((v21 + 7) & 0xFFFFFFFFFFFFFFF8));
  v27 = *v24;
  v25 = v24 + 1;
  v26 = v27;
  if (v27)
    v28 = v25;
  else
    v28 = 0;
  v29 = (_QWORD *)((char *)v25 + ((v26 + 7) & 0xFFFFFFFFFFFFFFF8));
  v32 = *v29;
  v30 = v29 + 1;
  v31 = v32;
  if (v32)
    v33 = v30;
  else
    v33 = 0;
  if (v8)
    result = (void *)a3[9];
  else
    result = 0;
  a3[9] += v8;
  v53 = v7;
  v54 = v6;
  v52 = (int32x2_t)result;
  __src = v28;
  v50 = v33;
  if ((a4 & 1) != 0)
  {
    if (v12)
      v35 = v11;
    else
      v35 = 0;
    if (v8)
      v36 = v9;
    else
      v36 = 0;
    memcpy(result, v36, v8);
    v37 = (v12 >> 2);
    if ((v12 >> 2))
      v38 = (void *)a3[8];
    else
      v38 = 0;
    a3[8] += 4 * v37;
    v51 = (int32x2_t)v38;
    result = memcpy(v38, v35, 4 * v37);
    v6 = v54;
  }
  else
  {
    v37 = (v12 >> 2);
    if ((v12 >> 2))
      v39 = (int32x2_t)a3[8];
    else
      v39 = 0;
    v51 = v39;
    a3[8] += 4 * v37;
  }
  if (v6.i32[0] == 2)
  {
    v41 = (char *)a3[8];
    a3[8] = v41 + 1024;
    if (a4)
    {
      result = memcpy(v41, v18, 0x400uLL);
      v6 = v54;
    }
    goto LABEL_42;
  }
  if (v6.i32[0] != 1)
  {
    v41 = 0;
LABEL_42:
    v40 = 0;
    goto LABEL_43;
  }
  if (v37)
    v40 = (void *)a3[7];
  else
    v40 = 0;
  a3[7] += 8 * v37;
  if (a4)
  {
    result = memcpy(v40, v23, 8 * v37);
    v6 = v54;
  }
  v41 = 0;
LABEL_43:
  if (!(v26 + v31))
  {
    v42 = 0;
    if (!a4)
      goto LABEL_57;
    goto LABEL_56;
  }
  v43 = (char *)a3[8];
  v44 = &v43[4 * v37];
  a3[8] = v44;
  if ((a4 & 1) != 0)
  {
    if (v37)
      v45 = v43;
    else
      v45 = 0;
    memcpy(v45, __src, 4 * v37);
    if (v37)
      v46 = (void *)a3[8];
    else
      v46 = 0;
    a3[8] += 4 * v37;
    result = memcpy(v46, v50, 4 * v37);
    v6 = v54;
    v47 = (_QWORD *)a3[6];
    *v47 = v45;
    v47[1] = v46;
  }
  else
  {
    a3[8] = &v44[4 * v37];
  }
  v42 = (int32x2_t)a3[6];
  a3[6] = *(_QWORD *)&v42 + 16;
  if (a4)
  {
LABEL_56:
    v48 = (int32x2_t *)a3[3];
    *v48 = v6;
    v48[1].i32[0] = v53;
    v48[1].i32[1] = 0;
    v48[2] = v52;
    v48[3] = v51;
    v48[4] = (int32x2_t)v41;
    v48[5] = (int32x2_t)v40;
    v48[6] = v42;
    v48[7].i32[0] = v8;
    v48[7].i32[1] = v12 >> 2;
  }
LABEL_57:
  a3[3] += 64;
  return result;
}

void GroupBuilder_popGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD v12[2];
  const char *v13;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2
    && (v3 = *(int *)(v2 + 12), (_DWORD)v3)
    && (v4 = *(_QWORD *)(v2 + 24), v5 = *(int *)(v2 + 8), v6 = v3 - 1, *(_DWORD *)(v2 + 12) = v6, v4))
  {
    v7 = v6 * v5;
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(int *)(v4 + v7);
    v10 = *(_QWORD *)(v8 + 24) + 32 * v9;
    *(_QWORD *)(v10 + 8) = a2;
    *(_DWORD *)(v10 + 20) = *(_DWORD *)(v8 + 12) + ~(_DWORD)v9;
  }
  else
  {
    v11 = *(_DWORD *)a1;
    v14 = 0u;
    v15 = 0u;
    v12[0] = v11;
    v12[1] = 500;
    v13 = "last != ((void *)0)";
    GTError_addError((int *)a1, (uint64_t)v12);
  }
}

_QWORD *GroupBuilder_findInclusiveRange(int a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v3;
  unint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *result;
  uint64_t v8;
  BOOL v9;

  if (a1 < 1)
    return 0;
  v3 = a2;
  do
  {
    v4 = &v3[4 * (a1 >> 1)];
    v6 = *v4;
    v5 = v4 + 4;
    if (v6 > a3)
    {
      a1 = a1 >> 1;
    }
    else
    {
      v3 = v5;
      a1 += ~(a1 >> 1);
    }
  }
  while (a1 > 0);
  if (v3 == a2)
    return 0;
  result = v3 - 4;
  while (result[1] < a3)
  {
    v8 = *((unsigned int *)result + 4);
    if ((_DWORD)v8)
      v9 = result == 0;
    else
      v9 = 1;
    result -= 4 * v8;
    if (v9)
      return 0;
  }
  return result;
}

_QWORD *GroupBuilder_findExclusiveRange(int a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *result;
  uint64_t v5;
  BOOL v6;

  result = GroupBuilder_findInclusiveRange(a1, a2, a3);
  if (result)
  {
    while (result[1] <= a3)
    {
      v5 = *((unsigned int *)result + 4);
      if ((_DWORD)v5)
        v6 = result == 0;
      else
        v6 = 1;
      result -= 4 * v5;
      if (v6)
        return 0;
    }
  }
  return result;
}

_QWORD *GroupBuilder_getCommandBuffer(int a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  int FuncEnumConstructorType;
  uint64_t v7;

  result = GroupBuilder_findInclusiveRange(a1, a2, a3);
  if (result)
  {
    v4 = result;
    while (1)
    {
      v5 = v4;
      FuncEnumConstructorType = GetFuncEnumConstructorType(*((_DWORD *)v4 + 7));
      if (FuncEnumConstructorType == 25 || FuncEnumConstructorType == 51)
        break;
      result = 0;
      v7 = *((unsigned int *)v5 + 4);
      if ((_DWORD)v7)
      {
        v4 = &v5[-4 * v7];
        if (v5)
          continue;
      }
      return result;
    }
    return v5;
  }
  return result;
}

uint64_t GroupRange_encoderWithIndirectResources(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v8;

  if (result)
  {
    v1 = result;
    while (1)
    {
      v2 = v1;
      v3 = *(_DWORD *)(v1 + 28);
      if (v3 > -15674)
      {
        if (v3 == -15673 || v3 == -15586 || v3 == -15364)
          return v2;
      }
      else if ((v3 + 16353) < 2 || v3 == -16014 || v3 == -15712)
      {
        return v2;
      }
      result = 0;
      v8 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v8)
      {
        v1 = v2 - 32 * v8;
        if (v2)
          continue;
      }
      return result;
    }
  }
  return result;
}

uint64_t GetAliasStream(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  v6 = a2;
  v4 = (_QWORD *)*find_entry(a1, &v6, 8uLL, 0);
  if (v4)
  {
    while (1)
    {
      v4 = (_QWORD *)v4[4];
      if (!v4)
        break;
      if (v4[2] <= a3)
      {
        if (v4[3] < a3)
          return 0;
        return v4[1];
      }
    }
  }
  return 0;
}

#error "33CDF8: too big function (funcsize=0)"

void CloseStream(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  __int128 v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t i;
  unsigned int *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35[4];

  if (!a2)
    return;
  v4 = *(_QWORD *)(*find_entry(*(_QWORD *)(a1 + 24), (_BYTE *)a2 + 8, 8uLL, 0) + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = atomic_load((unint64_t *)(v5 + 72));
  *(_QWORD *)(v4 + 24) = v6;
  pthread_mutex_lock((pthread_mutex_t *)v5);
  v7 = atomic_load((unsigned int *)(v5 + 104));
  if (v7 == 1 || v7 == 2 && (v8 = atomic_load(a2 + 7), (v8 & 0x10) != 0))
  {
    v14 = a2 + 7;
    v15 = atomic_load(a2 + 7);
    while (1)
    {
      v16 = __ldaxr(v14);
      if (v16 != v15)
        break;
      if (__stlxr(v15 | 4, v14))
        goto LABEL_14;
      v17 = 1;
LABEL_15:
      v15 = v16;
      if (v17)
      {
        pthread_mutex_unlock((pthread_mutex_t *)v5);
        return;
      }
    }
    __clrex();
LABEL_14:
    v17 = 0;
    goto LABEL_15;
  }
  v34 = 0uLL;
  *(_QWORD *)v35 = 0;
  apr_hash_set(*(apr_hash_t **)(v5 + 88), a2, 8, 0);
  v9 = *(_DWORD *)(*(_QWORD *)(v5 + 88) + 48);
  v10 = a2[3];
  v11 = (unsigned int *)(v10 + 40);
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    v18 = *(_OWORD *)(v10 + 8);
    *(_QWORD *)v35 = *(_QWORD *)(v10 + 24);
    v34 = v18;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)v10 = *(_QWORD *)(v5 + 96);
    *(_QWORD *)(v5 + 96) = v10;
  }
  v19 = a2 + 4;
  if (*((_QWORD *)&v34 + 1))
  {
    v20 = atomic_load((unsigned int *)a2 + 12);
    do
      v21 = __ldaxr(v35);
    while (__stlxr(v21 + v20, v35));
    v22 = atomic_load((unsigned int *)a2 + 13);
    do
      v23 = __ldaxr(&v35[1]);
    while (__stlxr(v23 + v22, &v35[1]));
    *(_QWORD *)(*((_QWORD *)&v34 + 1) + 40) = *v19;
  }
  else
  {
    v34 = *(_OWORD *)v19;
    *(_QWORD *)v35 = a2[6];
  }
  *v19 = 0;
  a2[5] = 0;
  a2[6] = 0;
  *a2 = *(_QWORD *)(v5 + 96);
  *(_QWORD *)(v5 + 96) = a2;
  pthread_mutex_unlock((pthread_mutex_t *)v5);
  v24 = (unsigned int *)v34;
  if ((_QWORD)v34)
  {
    v25 = *(_QWORD *)(v5 + 64);
    pthread_mutex_lock((pthread_mutex_t *)(v25 + 264));
    do
    {
      v26 = *v24;
      if (v26 < 0x101)
      {
        v27 = 0;
      }
      else
      {
        v27 = 0;
        for (i = 256; i < v26; i *= 2)
          ++v27;
      }
      v29 = (unsigned int *)*((_QWORD *)v24 + 5);
      v24[1] = 64;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *((_QWORD *)v24 + 3) = 0;
      *((_QWORD *)v24 + 4) = v24;
      *((_QWORD *)v24 + 6) = 0;
      *((_QWORD *)v24 + 7) = 0;
      *((_QWORD *)v24 + 5) = 0;
      v30 = v25 + 8 * v27;
      *((_QWORD *)v24 + 5) = *(_QWORD *)(v30 + 16);
      *(_QWORD *)(v30 + 16) = v24;
      v24 = v29;
    }
    while (v29);
    pthread_mutex_unlock((pthread_mutex_t *)(v25 + 264));
  }
  if (!v9)
  {
    pthread_mutex_destroy((pthread_mutex_t *)v5);
    v31 = *(int **)(v5 + 64);
    if (*v31 >= 1)
    {
      v32 = 0;
      v33 = 0;
      do
      {
        vm_deallocate(mach_task_self_, *(_QWORD *)(*((_QWORD *)v31 + 1) + v32), *(_QWORD *)(*((_QWORD *)v31 + 1) + v32 + 8));
        ++v33;
        v32 += 16;
      }
      while (v33 < *v31);
    }
    pthread_mutex_destroy((pthread_mutex_t *)(v31 + 66));
    free(*((void **)v31 + 1));
    vm_deallocate(mach_task_self_, (vm_address_t)v31, 0x148uLL);
    apr_pool_destroy(**(apr_pool_t ***)(v5 + 88));
    if ((shared_initialized & 1) == 0
      && !--initialized
      && (apr_pools_shared_initialized & 1) == 0
      && apr_pools_initialized
      && !--apr_pools_initialized)
    {
      apr_pool_destroy((apr_pool_t *)global_pool);
      global_pool = 0;
      global_allocator = 0;
    }
  }
}

unint64_t *OpenStream(uint64_t a1, unint64_t a2)
{
  unint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v9 = a2;
  if (!a2)
    return 0;
  v4 = GTTraceContext_openStream(*(_QWORD *)(a1 + 16), a2);
  v5 = apr_palloc(**(apr_pool_t ***)(a1 + 24), 0x28uLL);
  *v5 = a2;
  v5[1] = v4;
  v6 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 16) + 72));
  v5[2] = v6;
  v5[3] = -1;
  v7 = *find_entry(*(_QWORD *)(a1 + 24), &v9, 8uLL, 0);
  if (v7)
    v7 = *(_QWORD *)(v7 + 32);
  v5[4] = v7;
  apr_hash_set(*(apr_hash_t **)(a1 + 24), v5, 8, v5);
  return v4;
}

uint64_t StoreBlob(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t v7;
  uint64_t v8;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v8 = GTTraceEncoder_storeBlob(a2, Data, v7);
  apr_pool_clear(v5);
  return v8;
}

uint64_t UnwrapMTLAccelerationStructureDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  char *Data;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t DescriptorWithCount;
  _OWORD v13[26];
  uint64_t v14;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v9 = (size_t)Data;
  v10 = v8;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLAccelerationStructureDescriptor((size_t)Data, v8, v13, 0, a1);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x5Bu, 1u);
  DecodeDYMTLAccelerationStructureDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StreamNSArray(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned int *v5;
  char *Data;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t DescriptorWithCount;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *AliasStream2;
  uint64_t v18;
  unsigned int v19;
  const char *v20;
  unsigned int v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v5 = (unsigned int *)(a1 + 48);
  Data = GTCaptureArchive_readData(*(const char ***)a1, *(apr_pool_t ***)(a1 + 8), a3, **(apr_pool_t ***)(a1 + 8), (int *)(a1 + 48));
  if (v7 <= 0xF)
  {
    v19 = *v5;
    v24 = 0u;
    v25 = 0u;
    *(_QWORD *)&v23 = v19 | 0x1F400000000;
    v20 = "sizeof(uint64_t) * 2 <= data.length";
LABEL_12:
    *((_QWORD *)&v23 + 1) = v20;
    GTError_addError((int *)(a1 + 48), (uint64_t)&v23);
    return 0;
  }
  v8 = Data;
  v9 = *((_QWORD *)Data + 1);
  if (v7 != ((v9 << 32) + 0x200000000) >> 29)
  {
    v21 = *v5;
    v24 = 0u;
    v25 = 0u;
    *(_QWORD *)&v23 = v21 | 0x1F400000000;
    v20 = "sizeof(uint64_t) * (2 + count) == data.length";
    goto LABEL_12;
  }
  v10 = *((_QWORD *)Data + 1);
  v11 = v9 << 32;
  v47 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v49 = 0;
  v48 = (unint64_t)(((v9 << 32) + 0x100000000) >> 29);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)&v23, 0, 1u);
  v13 = v48;
  *(_QWORD *)v48 = v11 >> 32;
  if ((int)v10 >= 1)
  {
    v14 = (_QWORD *)(v13 + 8);
    v15 = (uint64_t *)(v8 + 16);
    do
    {
      v16 = *v15++;
      AliasStream2 = (uint64_t *)GetAliasStream2(a1, v16);
      if (AliasStream2)
        v18 = *AliasStream2;
      else
        v18 = 0;
      *v14++ = v18;
      --v10;
    }
    while (v10);
  }
  return DescriptorWithCount;
}

uint64_t StreamArray(uint64_t a1, uint64_t a2, _QWORD *__src, uint64_t *a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *AliasStream2;
  uint64_t v14;

  if (a5)
  {
    v10 = __src;
    v11 = a5;
    do
    {
      v12 = *a4++;
      AliasStream2 = (uint64_t *)GetAliasStream2(a1, v12);
      if (AliasStream2)
        v14 = *AliasStream2;
      else
        v14 = 0;
      *v10++ = v14;
      --v11;
    }
    while (v11);
  }
  return GTTraceEncoder_storeBytes(a2, __src, 8 * a5);
}

uint64_t UnwrapMTLComputePipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  char *Data;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DescriptorWithCount;
  _OWORD v13[26];
  uint64_t v14;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v9 = (uint64_t)Data;
  v10 = v8;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLComputePipelineDescriptor((uint64_t)Data, v8, v13, 0, a1);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x3Du, 1u);
  DecodeDYMTLComputePipelineDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLStitchedLibraryDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  char *Data;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t DescriptorWithCount;
  _OWORD v13[26];
  uint64_t v14;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v9 = (size_t)Data;
  v10 = v8;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLStitchedLibraryDescriptor((size_t)Data, v8, v13, 0, a1);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x66u, 1u);
  DecodeDYMTLStitchedLibraryDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLRenderPipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  char *Data;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t DescriptorWithCount;
  _OWORD v13[26];
  uint64_t v14;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v9 = (uint64_t)Data;
  v10 = v8;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLRenderPipelineDescriptor((uint64_t)Data, v8, v13, 0, a1);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x32u, 1u);
  DecodeDYMTLRenderPipelineDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLTileRenderPipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  char *Data;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DescriptorWithCount;
  _OWORD v13[26];
  uint64_t v14;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v9 = (uint64_t)Data;
  v10 = v8;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLTileRenderPipelineDescriptor((uint64_t)Data, v8, v13, 0, a1);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x39u, 1u);
  DecodeDYMTLTileRenderPipelineDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StoreMTLTextureDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t DescriptorWithCount;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  _OWORD v16[14];
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v17 = 0;
  v19 = 0u;
  memset(v16, 0, sizeof(v16));
  v18 = 56;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v16, 0x29u, 1u);
  v8 = v18;
  v18 += 56;
  *(_QWORD *)(v8 + 48) = 512;
  *(_OWORD *)v8 = GTMTLTextureDescriptorDefaults;
  *(_OWORD *)(v8 + 16) = xmmword_4A9D40;
  *(_OWORD *)(v8 + 32) = xmmword_4A9D50;
  v9 = *(_DWORD *)Data;
  *(_BYTE *)(v8 + 49) = *((_QWORD *)Data + 1);
  *(_WORD *)(v8 + 34) = *((_QWORD *)Data + 2);
  *(_DWORD *)(v8 + 24) = *((_QWORD *)Data + 3);
  *(_WORD *)(v8 + 32) = *((_QWORD *)Data + 4);
  *(_WORD *)(v8 + 30) = *((_QWORD *)Data + 5);
  *(_BYTE *)(v8 + 45) = *((_QWORD *)Data + 6);
  *(_BYTE *)(v8 + 47) = *((_QWORD *)Data + 7);
  *(_WORD *)(v8 + 28) = *((_QWORD *)Data + 8);
  v10 = 72;
  if (v9 < 3)
    v10 = 80;
  v11 = &Data[v10];
  *(_BYTE *)(v8 + 43) = *(_QWORD *)v11;
  *(_BYTE *)(v8 + 44) = *((_QWORD *)v11 + 1);
  if (v9)
  {
    *(_DWORD *)(v8 + 20) = *((_QWORD *)v11 + 2);
    if (v9 <= 3)
    {
      if (v9 == 3)
        *(_WORD *)(v8 + 36) = *((_WORD *)v11 + 16) | (16 * *((_WORD *)v11 + 12));
    }
    else
    {
      v12 = v11[24];
      *(_BYTE *)(v8 + 46) = v12;
      v13 = *((_DWORD *)v11 + 10);
      v14 = v13 | (16 * *((_DWORD *)v11 + 8));
      *(_WORD *)(v8 + 36) = v13 | (16 * *((_WORD *)v11 + 16));
      if (v9 >= 0x15)
      {
        *(_BYTE *)(v8 + 38) = *((_QWORD *)v11 + 6);
        *(_BYTE *)(v8 + 40) = *((_QWORD *)v11 + 7);
        if (v9 != 21)
        {
          *(_QWORD *)(v8 + 8) = *((_QWORD *)v11 + 8);
          *(_BYTE *)(v8 + 42) = *((_QWORD *)v11 + 9);
          if (v9 >= 0x23)
          {
            *(_DWORD *)(v8 + 16) = v11[80] | (unsigned __int16)(*((_DWORD *)v11 + 22) << 8) | (*((_DWORD *)v11 + 24) << 16) | (*((_DWORD *)v11 + 26) << 24);
            if (v9 >= 0x27)
            {
              *(_DWORD *)(v8 + 16) = *((_QWORD *)v11 + 14);
              if (v9 >= 0x2A)
              {
                *(_WORD *)(v8 + 36) = v14 | (*((_WORD *)v11 + 60) << 8);
                *(_QWORD *)v8 = *((_QWORD *)v11 + 16);
                *(_BYTE *)(v8 + 48) = *((_QWORD *)v11 + 17);
                *(_BYTE *)(v8 + 50) = *((_QWORD *)v11 + 18);
                if (v9 >= 0x31)
                {
                  *(_BYTE *)(v8 + 41) = *((_QWORD *)v11 + 19);
                  *(_BYTE *)(v8 + 39) = *((_QWORD *)v11 + 20);
                }
              }
            }
          }
        }
      }
      if (v12 == 255)
        *(_BYTE *)(v8 + 46) = 0;
    }
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

unint64_t *OpenEncoderStream(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t AliasStream2;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD v21[2];
  const char *v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;

  v25 = a2;
  AliasStream2 = GetAliasStream2(a1, a3);
  if (a4)
  {
    if (!AliasStream2)
    {
      v8 = *a4;
      v23 = 0u;
      v24 = 0u;
      v21[0] = v8;
      v21[1] = 500;
      v22 = "stream != ((void *)0)";
      GTError_addError(a4, (uint64_t)v21);
      return 0;
    }
  }
  else if (!AliasStream2)
  {
    return 0;
  }
  v9 = *(_QWORD *)(AliasStream2 + 24);
  v10 = *(_QWORD *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)v10);
  RetainFreeNode(v10);
  v12 = v11;
  v13 = (unint64_t *)(v10 + 80);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *v11 = v14;
  v11[1] = a2;
  v15 = (unsigned int *)(v9 + 40);
  v11[3] = v9;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  atomic_store(0, v11 + 7);
  apr_hash_set(*(apr_hash_t **)(v10 + 88), v11, 8, v11);
  pthread_mutex_unlock((pthread_mutex_t *)v10);
  v17 = apr_palloc(**(apr_pool_t ***)(a1 + 24), 0x28uLL);
  *v17 = a2;
  v17[1] = v12;
  v18 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 16) + 72));
  v17[2] = v18;
  v17[3] = -1;
  v19 = *find_entry(*(_QWORD *)(a1 + 24), &v25, 8uLL, 0);
  if (v19)
    v19 = *(_QWORD *)(v19 + 32);
  v17[4] = v19;
  apr_hash_set(*(apr_hash_t **)(a1 + 24), v17, 8, v17);
  return v12;
}

uint64_t UnwrapMTLAccelerationStructurePassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  char *Data;
  char *v8;
  uint64_t DescriptorWithCount;
  _OWORD *v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *AliasStream2;
  uint64_t v16;
  _QWORD *v17;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v8 = Data;
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v20 = 0;
  v22 = 0u;
  memset(v19, 0, sizeof(v19));
  v21 = (_OWORD *)(&stru_20 + 64);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v19, 0x86u, 1u);
  v10 = v21;
  *v21 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  for (i = (uint64_t *)(v8 + 8); ; i += 4)
  {
    v12 = *i;
    if (*i == -1)
      break;
    v13 = i[2];
    v14 = i[3];
    AliasStream2 = (uint64_t *)GetAliasStream2(a1, i[1]);
    if (AliasStream2)
      v16 = *AliasStream2;
    else
      v16 = 0;
    v17 = (_QWORD *)v10 + 3 * v12;
    *v17 = v14;
    v17[1] = v16;
    v17[2] = v13;
  }
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLBlitPassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  char *Data;
  char *v8;
  uint64_t DescriptorWithCount;
  _OWORD *v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *AliasStream2;
  uint64_t v16;
  _QWORD *v17;
  _OWORD v19[4];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v8 = Data;
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  memset(v19, 0, sizeof(v19));
  v20 = 0x60uLL;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v19, 0x24u, 1u);
  v10 = (_OWORD *)v20;
  *(_OWORD *)v20 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  for (i = (uint64_t *)(v8 + 8); ; i += 4)
  {
    v12 = *i;
    if (*i == -1)
      break;
    v13 = i[2];
    v14 = i[3];
    AliasStream2 = (uint64_t *)GetAliasStream2(a1, i[1]);
    if (AliasStream2)
      v16 = *AliasStream2;
    else
      v16 = 0;
    v17 = (_QWORD *)v10 + 3 * v12;
    *v17 = v14;
    v17[1] = v16;
    v17[2] = v13;
  }
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLComputePassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  char *Data;
  char *v8;
  uint64_t DescriptorWithCount;
  _OWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *AliasStream2;
  uint64_t v17;
  _QWORD *v18;
  _OWORD v20[3];
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v8 = Data;
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v22 = (_OWORD *)&stru_68;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v20, 0x26u, 1u);
  v10 = v22;
  *v22 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  *((_QWORD *)v10 + 12) = 0;
  v11 = *((_QWORD *)v8 + 1);
  v12 = (uint64_t *)(v8 + 16);
  *((_BYTE *)v10 + 96) = v11;
  while (1)
  {
    v13 = *v12;
    if (*v12 == -1)
      break;
    v14 = v12[2];
    v15 = v12[3];
    AliasStream2 = (uint64_t *)GetAliasStream2(a1, v12[1]);
    if (AliasStream2)
      v17 = *AliasStream2;
    else
      v17 = 0;
    v18 = (_QWORD *)v10 + 3 * v13;
    *v18 = v15;
    v18[1] = v17;
    v18[2] = v14;
    v12 += 4;
  }
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLRenderPassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  char *Data;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DescriptorWithCount;
  _OWORD v13[26];
  uint64_t v14;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v9 = (uint64_t)Data;
  v10 = v8;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLRenderPassDescriptor((uint64_t)Data, v8, (uint64_t)v13, 0, (void *)a1);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x22u, 1u);
  DecodeDYMTLRenderPassDescriptor(v9, v10, (uint64_t)v13, 1, (void *)a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLResourceStatePassDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  char *Data;
  char *v8;
  uint64_t DescriptorWithCount;
  _OWORD *v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *AliasStream2;
  uint64_t v16;
  _QWORD *v17;
  _OWORD v19[3];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v8 = Data;
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  memset(v19, 0, sizeof(v19));
  v20 = 0x60uLL;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v19, 0x28u, 1u);
  v10 = (_OWORD *)v20;
  *(_OWORD *)v20 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  for (i = (uint64_t *)(v8 + 8); ; i += 4)
  {
    v12 = *i;
    if (*i == -1)
      break;
    v13 = i[2];
    v14 = i[3];
    AliasStream2 = (uint64_t *)GetAliasStream2(a1, i[1]);
    if (AliasStream2)
      v16 = *AliasStream2;
    else
      v16 = 0;
    v17 = (_QWORD *)v10 + 3 * v12;
    *v17 = v14;
    v17[1] = v16;
    v17[2] = v13;
  }
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLCommandBufferDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  char *Data;
  char *v8;
  uint64_t DescriptorWithCount;
  uint64_t v10;
  uint64_t v11;
  uint64_t *AliasStream2;
  uint64_t v13;
  _OWORD v15[8];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v8 = Data;
  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  memset(v15, 0, sizeof(v15));
  v16 = 0x10uLL;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v15, 0x4Eu, 1u);
  v10 = v16;
  *(_OWORD *)v16 = GTMTLCommandBufferDescriptorDefaults;
  *(_BYTE *)(v10 + 8) = *((_QWORD *)v8 + 1);
  *(_BYTE *)(v10 + 9) = *((_QWORD *)v8 + 2);
  v11 = *((_QWORD *)v8 + 3);
  *(_QWORD *)v10 = v11;
  AliasStream2 = (uint64_t *)GetAliasStream2(a1, v11);
  if (AliasStream2)
    v13 = *AliasStream2;
  else
    v13 = 0;
  *(_QWORD *)v10 = v13;
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

double SaveMTLComputePipelineReflection_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int *v6;
  char *v7;
  unsigned int *FileWithFilename;
  unsigned int *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  apr_pool_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  double result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[11];
  __int128 v26;

  v26 = 0u;
  v6 = (int *)(a1 + 48);
  memset(v25, 0, sizeof(v25));
  DecodeDYMTLComputePipelineReflection(a3, v25, 0, (int *)(a1 + 48));
  v7 = (char *)PerformanceStatisticsURL(a3);
  if (v7)
  {
    FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename(*(_QWORD *)a1, v7);
    v9 = FileWithFilename;
    if (FileWithFilename)
    {
      v10 = 0;
      v11 = *FileWithFilename;
      goto LABEL_6;
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = 0;
  v10 = 1;
LABEL_6:
  *((_QWORD *)&v26 + 1) += v11;
  *(_BYTE *)(*(_QWORD *)(a2 + 16) + 14) = AllocatePipelineReflectionWithType(a2, (uint64_t)v25, 0x78u);
  v12 = DecodeDYMTLComputePipelineReflection(a3, v25, 1, v6);
  if ((v10 & 1) == 0)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(apr_pool_t ***)(a1 + 8);
    v15 = *((_QWORD *)&v26 + 1);
    GTCaptureArchive_fillBuffer(v13, v14, v7, *((char **)&v26 + 1), *v9, v6);
    v16 = *v9;
    *(_QWORD *)(v12 + 56) = v15;
    *(_QWORD *)(v12 + 64) = v16;
  }
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  v17 = *(_QWORD *)(v12 + 24);
  if (v17)
    CalculateBindingsAccess(v17, *(unsigned __int16 *)(v12 + 92), (uint64_t)&v21);
  v18 = *(_QWORD *)(v12 + 32);
  if (v18)
    CalculateBindingsAccess(v18, *(unsigned __int16 *)(v12 + 94), (uint64_t)&v21);
  v19 = v22;
  *(_OWORD *)(v12 + 104) = v21;
  *(_OWORD *)(v12 + 120) = v19;
  result = *(double *)&v23;
  *(_OWORD *)(v12 + 136) = v23;
  *(_QWORD *)(v12 + 152) = v24;
  return result;
}

uint64_t StoreMTLIntersectionFunctionTableDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t DescriptorWithCount;
  uint64_t v8;
  unsigned int v9;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  memset(v11, 0, sizeof(v11));
  v12 = 0x10uLL;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x5Cu, 1u);
  v8 = v12;
  v9 = *(_DWORD *)Data;
  *(_DWORD *)(v12 + 8) = *((_QWORD *)Data + 1);
  if (v9 >= 0x36)
  {
    *(_QWORD *)v8 = *((_QWORD *)Data + 2);
    *(_BYTE *)(v8 + 12) = *((_QWORD *)Data + 3);
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLVisibleFunctionTableDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t DescriptorWithCount;
  uint64_t v8;
  unsigned int v9;
  _OWORD v11[7];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  memset(v11, 0, sizeof(v11));
  v12 = 0x18uLL;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x52u, 1u);
  v8 = v12;
  v9 = *(_DWORD *)Data;
  *(_QWORD *)v12 = *((_QWORD *)Data + 1);
  if (v9 >= 0x2F)
  {
    *(_QWORD *)(v8 + 8) = *((_QWORD *)Data + 2);
    if (v9 >= 0x36)
      *(_BYTE *)(v8 + 16) = *((_QWORD *)Data + 3);
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLFunctionDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  char *Data;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DescriptorWithCount;
  _OWORD v13[26];
  uint64_t v14;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v9 = (uint64_t)Data;
  v10 = v8;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLFunctionDescriptor((uint64_t)Data, v8, v13, 0, a1);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x51u, 1u);
  DecodeDYMTLFunctionDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

void SaveMTLFunctionInfo_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int *v5;
  _OWORD v6[12];

  v5 = (int *)(a1 + 48);
  memset(v6, 0, sizeof(v6));
  DecodeDYMTLFunctionInfo(a3, v6, 0, (int *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(a2 + 16) + 14) = AllocatePipelineReflectionWithType(a2, (uint64_t)v6, 0x7Bu);
  DecodeDYMTLFunctionInfo(a3, v6, 1, v5);
}

uint64_t StoreMTLAccelerationStructureAllocationDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t DescriptorWithCount;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0x10uLL;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)&v10, 0x87u, 1u);
  v8 = v11;
  *(_BYTE *)(v11 + 9) = *((_QWORD *)Data + 1);
  *(_BYTE *)(v8 + 8) = *((_QWORD *)Data + 2);
  *(_QWORD *)v8 = *((_QWORD *)Data + 3);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLBufferDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t DescriptorWithCount;
  uint64_t v8;
  _OWORD v10[14];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  memset(v10, 0, sizeof(v10));
  v11 = 0x28uLL;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v10, 0x2Au, 1u);
  v8 = v11;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)v8 = *((_QWORD *)Data + 1);
  *(_WORD *)(v8 + 32) = *((_QWORD *)Data + 2);
  *(_BYTE *)(v8 + 34) = *((_QWORD *)Data + 6);
  *(_QWORD *)(v8 + 24) = *((_QWORD *)Data + 8);
  *(_QWORD *)(v8 + 8) = *((_QWORD *)Data + 9);
  *(_QWORD *)(v8 + 16) = *((_QWORD *)Data + 10);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreIOSurfaceUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t v7;
  uint64_t v8;
  uint64_t DescriptorWithCount;
  _OWORD v11[26];
  uint64_t v12;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v8 = v7;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYIOSurface((uint64_t)Data, v7, (uint64_t)v11, 0);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x3Fu, 1u);
  DecodeDYIOSurface((uint64_t)Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLCommandQueueDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t DescriptorWithCount;
  uint64_t v8;
  unsigned int v9;
  _OWORD v11[9];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  memset(v11, 0, sizeof(v11));
  v12 = 0x10uLL;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x43u, 1u);
  v8 = v12;
  *(_OWORD *)v12 = GTMTLCommandQueueDescriptorDefaults;
  v9 = *(_DWORD *)Data;
  *(_DWORD *)v8 = *((_QWORD *)Data + 1);
  *(_BYTE *)(v8 + 8) = *((_QWORD *)Data + 2);
  *(_BYTE *)(v8 + 4) = *((_QWORD *)Data + 3);
  *(_BYTE *)(v8 + 7) = *((_QWORD *)Data + 4);
  if (v9 >= 0x2A)
  {
    *(_BYTE *)(v8 + 6) = *((_QWORD *)Data + 5);
    if (v9 >= 0x51)
      *(_BYTE *)(v8 + 5) = *((_QWORD *)Data + 6);
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLImageFilterFunctionInfoSPIUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t DescriptorWithCount;
  _OWORD v12[26];
  uint64_t v13;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v8 = v7;
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v9 = DecodeDYMTLImageFilterFunctionInfoSPI((uint64_t)Data, v7, (uint64_t)v12, 0);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v12, 0x14u, v9);
  DecodeDYMTLImageFilterFunctionInfoSPI((uint64_t)Data, v8, (uint64_t)v12, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLCounterSampleBufferDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t v7;
  uint64_t v8;
  uint64_t DescriptorWithCount;
  _OWORD v11[26];
  uint64_t v12;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v8 = v7;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLCounterSampleBufferDescriptor((uint64_t)Data, v7, v11, 0);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x48u, 1u);
  DecodeDYMTLCounterSampleBufferDescriptor((uint64_t)Data, v8, v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLDepthStencilDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t v7;
  uint64_t v8;
  uint64_t DescriptorWithCount;
  _OWORD v11[26];
  uint64_t v12;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v8 = v7;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLDepthStencilDescriptor((uint64_t)Data, v7, (uint64_t)v11, 0);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x34u, 1u);
  DecodeDYMTLDepthStencilDescriptor((uint64_t)Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

void SaveMTLDynamicLibraryInfo_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int *v5;
  _OWORD v6[12];

  v5 = (int *)(a1 + 48);
  memset(v6, 0, sizeof(v6));
  DecodeDYMTLDynamicLibraryInfo(a3, v6, 0, (int *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(a2 + 16) + 14) = AllocatePipelineReflectionWithType(a2, (uint64_t)v6, 0x7Cu);
  DecodeDYMTLDynamicLibraryInfo(a3, v6, 1, v5);
}

uint64_t StoreMTLIOCommandQueueDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t DescriptorWithCount;
  _QWORD *v8;
  _OWORD v10[8];
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v11 = 0;
  v13 = 0u;
  memset(v10, 0, sizeof(v10));
  v12 = (_QWORD *)&dword_8;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v10, 0x89u, 1u);
  v8 = v12;
  *v12 = 64;
  *(_DWORD *)v8 = *((_QWORD *)Data + 1);
  *((_BYTE *)v8 + 4) = *((_QWORD *)Data + 2);
  *((_BYTE *)v8 + 5) = *((_QWORD *)Data + 3);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLIndirectCommandBufferDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t DescriptorWithCount;
  uint64_t v8;
  unsigned int v9;
  _OWORD v11[11];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  memset(v11, 0, sizeof(v11));
  v12 = 0x18uLL;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x37u, 1u);
  v8 = v12;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = 0;
  v9 = *(_DWORD *)Data;
  *(_WORD *)(v8 + 8) = *((_QWORD *)Data + 1);
  *(_BYTE *)(v8 + 11) = *((_QWORD *)Data + 2);
  *(_BYTE *)(v8 + 10) = *((_QWORD *)Data + 3);
  *(_BYTE *)(v8 + 18) = *((_QWORD *)Data + 4);
  *(_BYTE *)(v8 + 12) = *((_QWORD *)Data + 5);
  if (v9 >= 0x1B)
  {
    *(_BYTE *)(v8 + 13) = *((_QWORD *)Data + 6);
    *(_BYTE *)(v8 + 14) = *((_QWORD *)Data + 7);
    if (v9 >= 0x29)
    {
      *(_QWORD *)v8 = *((_QWORD *)Data + 8);
      if (v9 >= 0x3C)
      {
        *(_BYTE *)(v8 + 20) = *((_QWORD *)Data + 9);
        if (v9 >= 0x48)
        {
          *(_BYTE *)(v8 + 16) = *((_QWORD *)Data + 10);
          *(_BYTE *)(v8 + 15) = *((_QWORD *)Data + 11);
          *(_BYTE *)(v8 + 17) = *((_QWORD *)Data + 12);
          if (v9 != 72)
          {
            *(_BYTE *)(v8 + 19) = *((_QWORD *)Data + 13);
            if (v9 >= 0x4A)
              *(_BYTE *)(v8 + 21) = *((_QWORD *)Data + 14);
          }
        }
      }
    }
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLMotionEstimationPipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t DescriptorWithCount;
  _WORD *v8;
  _OWORD v10[9];
  uint64_t v11;
  _DWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v12 = &dword_4;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v10, 0x42u, 1u);
  v8 = v12;
  *v12 = 0;
  v8[1] = *((_QWORD *)Data + 1);
  *v8 = *((_QWORD *)Data + 2);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

void SaveMTLPipelineLibraryInfo_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int *v5;
  _OWORD v6[12];

  v5 = (int *)(a1 + 48);
  memset(v6, 0, sizeof(v6));
  DecodeDYMTLPipelineLibraryInfo(a3, v6, 0, (int *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(a2 + 16) + 14) = AllocatePipelineReflectionWithType(a2, (uint64_t)v6, 0x8Au);
  DecodeDYMTLPipelineLibraryInfo(a3, v6, 1, v5);
}

uint64_t StoreMTLRasterizationRateMapDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t v7;
  uint64_t v8;
  uint64_t DescriptorWithCount;
  _OWORD v11[26];
  uint64_t v12;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v8 = v7;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLRasterizationRateMapDescriptor((uint64_t)Data, v7, v11, 0);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x45u, 1u);
  DecodeDYMTLRasterizationRateMapDescriptor((uint64_t)Data, v8, v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

void *SaveMTLRenderPipelineReflection_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int *v6;
  char *v7;
  unsigned int *FileWithFilename;
  unsigned int *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  apr_pool_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v26[18];
  _OWORD v27[11];
  __int128 v28;

  v28 = 0u;
  v6 = (int *)(a1 + 48);
  memset(v27, 0, sizeof(v27));
  DecodeDYMTLRenderPipelineReflection(a3, v27, 0, (int *)(a1 + 48));
  v7 = (char *)PerformanceStatisticsURL(a3);
  if (v7)
  {
    FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename(*(_QWORD *)a1, v7);
    v9 = FileWithFilename;
    if (FileWithFilename)
    {
      v10 = 0;
      v11 = *FileWithFilename;
      goto LABEL_6;
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = 0;
  v10 = 1;
LABEL_6:
  *((_QWORD *)&v28 + 1) += v11;
  *(_BYTE *)(*(_QWORD *)(a2 + 16) + 14) = AllocatePipelineReflectionWithType(a2, (uint64_t)v27, 0x77u);
  v12 = DecodeDYMTLRenderPipelineReflection(a3, v27, 1u, v6);
  if ((v10 & 1) == 0)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(apr_pool_t ***)(a1 + 8);
    v15 = *((_QWORD *)&v28 + 1);
    GTCaptureArchive_fillBuffer(v13, v14, v7, *((char **)&v28 + 1), *v9, v6);
    v16 = *v9;
    *(_QWORD *)(v12 + 112) = v15;
    *(_QWORD *)(v12 + 120) = v16;
  }
  memset(v26, 0, 280);
  v17 = *(_QWORD *)(v12 + 72);
  if (v17)
    CalculateBindingsAccess(v17, *(unsigned __int16 *)(v12 + 208), (uint64_t)v26);
  v18 = *(_QWORD *)(v12 + 24);
  if (v18)
    CalculateBindingsAccess(v18, *(unsigned __int16 *)(v12 + 198), (uint64_t)v26);
  v19 = *(_QWORD *)(v12 + 32);
  if (v19)
    CalculateBindingsAccess(v19, *(unsigned __int16 *)(v12 + 200), (uint64_t)&v26[3] + 8);
  v20 = *(_QWORD *)(v12 + 40);
  if (v20)
    CalculateBindingsAccess(v20, *(unsigned __int16 *)(v12 + 204), (uint64_t)&v26[7]);
  v21 = *(_QWORD *)(v12 + 80);
  if (v21)
    CalculateBindingsAccess(v21, *(unsigned __int16 *)(v12 + 210), (uint64_t)&v26[7]);
  v22 = *(_QWORD *)(v12 + 48);
  if (v22)
    CalculateBindingsAccess(v22, *(unsigned __int16 *)(v12 + 206), (uint64_t)&v26[10] + 8);
  v23 = *(_QWORD *)(v12 + 88);
  if (v23)
    CalculateBindingsAccess(v23, *(unsigned __int16 *)(v12 + 212), (uint64_t)&v26[10] + 8);
  v24 = *(_QWORD *)(v12 + 56);
  if (v24)
    CalculateBindingsAccess(v24, *(unsigned __int16 *)(v12 + 202), (uint64_t)&v26[14]);
  return memcpy((void *)(v12 + 216), v26, 0x118uLL);
}

uint64_t UnwrapMTLMeshRenderPipelineDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  char *Data;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t DescriptorWithCount;
  _OWORD v13[26];
  uint64_t v14;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v9 = (uint64_t)Data;
  v10 = v8;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLMeshRenderPipelineDescriptor((uint64_t)Data, v8, v13, 0, a1);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x88u, 1u);
  DecodeDYMTLMeshRenderPipelineDescriptor(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StoreMTLResidencySetDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t v7;
  uint64_t v8;
  uint64_t DescriptorWithCount;
  _OWORD v11[26];
  uint64_t v12;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v8 = v7;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLResidencySetDescriptor((uint64_t)Data, v7, (uint64_t *)v11, 0);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x8Eu, 1u);
  DecodeDYMTLResidencySetDescriptor((uint64_t)Data, v8, (uint64_t *)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLSamplerDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t v7;
  uint64_t v8;
  uint64_t DescriptorWithCount;
  _OWORD v11[26];
  uint64_t v12;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v8 = v7;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLSamplerDescriptor((uint64_t)Data, v7, (uint64_t)v11, 0);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x35u, 1u);
  DecodeDYMTLSamplerDescriptor((uint64_t)Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLFunctionConstantValuesUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t v7;
  uint64_t v8;
  uint64_t DescriptorWithCount;
  _OWORD v11[26];
  uint64_t v12;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v8 = v7;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLFunctionConstantValues((size_t)Data, v7, v11, 0);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x50u, 1u);
  DecodeDYMTLFunctionConstantValues((size_t)Data, v8, v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t UnwrapMTLIntersectionFunctionDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t DescriptorWithCount;
  _OWORD v12[26];
  uint64_t v13;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v8 = (uint64_t)Data;
  v9 = v7;
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  DecodeDYMTLIntersectionFunctionDescriptor((uint64_t)Data, v7, v12, 0);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v12, 0x5Du, 1u);
  DecodeDYMTLIntersectionFunctionDescriptor(v8, v9, v12, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreBlobWithoutCaptureVersion(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  int *v6;
  char *Data;
  unint64_t v8;
  uint64_t v9;
  int v11;
  _DWORD v12[2];
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a3)
  {
    v4 = *(apr_pool_t ***)(a1 + 8);
    v5 = *v4;
    v6 = (int *)(a1 + 48);
    Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
    if (v8 >= 8)
    {
      v9 = GTTraceEncoder_storeBlob(a2, Data + 8, v8 - 8);
      apr_pool_clear(v5);
      return v9;
    }
    v11 = *v6;
    v14 = 0u;
    v15 = 0u;
    v12[0] = v11;
    v12[1] = 500;
    v13 = "data.length >= sizeof(uint64_t)";
    GTError_addError(v6, (uint64_t)v12);
  }
  return 0;
}

uint64_t UnwrapMTLRenderPipelineFunctionsDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  uint64_t *Data;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t DescriptorWithCount;
  _OWORD v13[26];
  uint64_t v14;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = (uint64_t *)GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v9 = Data;
  v10 = v8;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLRenderPipelineFunctionsDescriptor(Data, v8, (uint64_t)v13, 0, a1);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x60u, 1u);
  DecodeDYMTLRenderPipelineFunctionsDescriptor(v9, v10, (uint64_t)v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StoreMTLDeviceDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t v7;
  uint64_t v8;
  uint64_t DescriptorWithCount;
  _OWORD v11[26];
  uint64_t v12;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v8 = v7;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  DecodeDYMTLDeviceDescriptor((uint64_t)Data, v7, (uint64_t)v11, 0);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x41u, 1u);
  DecodeDYMTLDeviceDescriptor((uint64_t)Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMPSPluginCNNConvolutionDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t v7;
  uint64_t v8;
  uint64_t MPSDescriptorWithType;
  _OWORD v11[5];

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v8 = v7;
  memset(v11, 0, sizeof(v11));
  DecodeDYMPSPluginCNNConvolutionDescriptor(Data, v7, (uint64_t)v11, 0);
  MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)v11, 0x4Au);
  DecodeDYMPSPluginCNNConvolutionDescriptor(Data, v8, (uint64_t)v11, 1);
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSPluginCNNConvolutionDataUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t v7;
  uint64_t v8;
  uint64_t MPSDescriptorWithType;
  _OWORD v11[5];

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v8 = v7;
  memset(v11, 0, sizeof(v11));
  DecodeDYMPSPluginCNNConvolutionData((uint64_t)Data, v7, v11, 0);
  MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)v11, 0x1Bu);
  DecodeDYMPSPluginCNNConvolutionData((uint64_t)Data, v8, v11, 1);
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSPluginNDArrayConvolutionDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t MPSDescriptorWithType;
  uint64_t v8;
  _BYTE *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v21 = 0u;
  v22 = 0u;
  memset(v19, 0, sizeof(v19));
  v20 = 0x2CuLL;
  MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)v19, 0x4Cu);
  v8 = 0;
  v9 = (_BYTE *)v20;
  *(_QWORD *)&v20 = v20 + 44;
  v10 = (uint64_t *)(Data + 8);
  do
  {
    v11 = v10;
    v12 = *v10++;
    *(_DWORD *)&v9[v8] = v12;
    v8 += 4;
  }
  while (v8 != 12);
  v13 = 0;
  v9[36] = *v10;
  v14 = v11 + 3;
  v9[37] = v10[1];
  do
  {
    v15 = *v14++;
    *(_DWORD *)&v9[v13 + 12] = v15;
    v13 += 4;
  }
  while (v13 != 12);
  for (i = 0; i != 12; i += 4)
  {
    v17 = *v14++;
    *(_DWORD *)&v9[i + 24] = v17;
  }
  v9[38] = *v14;
  v9[39] = v14[1];
  v9[40] = v14[2];
  v9[41] = v14[3];
  v9[42] = v14[4];
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSSourceTextureInfoUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t MPSDescriptorWithType;
  _QWORD *v8;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v15 = 0;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v11 = 0u;
  v10 = (_QWORD *)(&stru_20 + 48);
  MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)&v10, 0x18u);
  v8 = v10;
  *v10 = *((_QWORD *)Data + 1);
  v8[1] = *((_QWORD *)Data + 2);
  v8[2] = *((_QWORD *)Data + 3);
  v8[3] = *((_QWORD *)Data + 4);
  v8[4] = *((_QWORD *)Data + 5);
  v8[5] = *((_QWORD *)Data + 6);
  v8[6] = *((_QWORD *)Data + 7);
  v8[7] = *((_QWORD *)Data + 8);
  v8[8] = *((_QWORD *)Data + 9);
  v8[9] = *((_QWORD *)Data + 10);
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSDestinationTextureInfoUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t MPSDescriptorWithType;
  _QWORD *v8;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0;
  v11 = (_QWORD *)(&stru_20 + 48);
  MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)&v10, 0x19u);
  v8 = v11;
  *v11 = *((_QWORD *)Data + 1);
  v8[1] = *((_QWORD *)Data + 2);
  v8[2] = *((_QWORD *)Data + 3);
  v8[3] = *((_QWORD *)Data + 4);
  v8[4] = *((_QWORD *)Data + 5);
  v8[5] = *((_QWORD *)Data + 6);
  v8[6] = *((_QWORD *)Data + 7);
  v8[7] = *((_QWORD *)Data + 8);
  v8[8] = *((_QWORD *)Data + 9);
  v8[9] = *((_QWORD *)Data + 10);
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMPSNDArrayStructureUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t MPSDescriptorWithType;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _OWORD v16[2];
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v19 = 0u;
  v20 = 0u;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v18 = (_QWORD *)(&stru_20 + 16);
  MPSDescriptorWithType = AllocateMPSDescriptorWithType(a2, (uint64_t)v16, 0x1Cu);
  v8 = 0;
  v9 = v18;
  v10 = v18;
  *v18 = *((_QWORD *)Data + 1);
  v18 = v10 + 6;
  v11 = (uint64_t *)(Data + 16);
  do
  {
    v12 = *v11++;
    *(_DWORD *)((char *)v9 + v8 + 8) = v12;
    v8 += 4;
  }
  while (v8 != 16);
  v13 = 0;
  v14 = v9 + 3;
  do
    *v14++ = v11[v13++];
  while (v13 != 4);
  *((_DWORD *)v9 + 10) = v11[4];
  apr_pool_clear(v5);
  return MPSDescriptorWithType;
}

uint64_t StoreMTLFXSpatialScalerDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t DescriptorWithCount;
  uint64_t v8;
  _OWORD v10[17];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  memset(v10, 0, sizeof(v10));
  v11 = 0x28uLL;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v10, 0x8Bu, 1u);
  v8 = v11;
  *(_QWORD *)v11 = *((_QWORD *)Data + 1);
  *(_QWORD *)(v8 + 8) = *((_QWORD *)Data + 2);
  *(_QWORD *)(v8 + 16) = *((_QWORD *)Data + 3);
  *(_QWORD *)(v8 + 24) = *((_QWORD *)Data + 4);
  *(_WORD *)(v8 + 32) = *((_QWORD *)Data + 5);
  *(_WORD *)(v8 + 34) = *((_QWORD *)Data + 6);
  *(_BYTE *)(v8 + 36) = *((_QWORD *)Data + 7);
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreMTLFXTemporalScalerDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t DescriptorWithCount;
  unsigned int v8;
  _WORD *v9;
  _OWORD v11[17];
  uint64_t v12;
  _WORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v13 = (_WORD *)(&stru_20 + 32);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x8Cu, 1u);
  v8 = *(_DWORD *)Data;
  v9 = v13;
  *v13 = *((_QWORD *)Data + 1);
  v9[1] = *((_QWORD *)Data + 2);
  v9[2] = *((_QWORD *)Data + 3);
  v9[3] = *((_QWORD *)Data + 4);
  *((_QWORD *)v9 + 2) = *((_QWORD *)Data + 5);
  *((_QWORD *)v9 + 3) = *((_QWORD *)Data + 6);
  *((_QWORD *)v9 + 4) = *((_QWORD *)Data + 7);
  *((_QWORD *)v9 + 5) = *((_QWORD *)Data + 8);
  *((_DWORD *)v9 + 12) = *((_DWORD *)Data + 18);
  *((_DWORD *)v9 + 13) = *((_DWORD *)Data + 20);
  *((_BYTE *)v9 + 56) = *((_QWORD *)Data + 11);
  *((_BYTE *)v9 + 57) = *((_QWORD *)Data + 12);
  if (v8 >= 0x4D)
  {
    *((_BYTE *)v9 + 58) = *((_QWORD *)Data + 13);
    v9[4] = *((_QWORD *)Data + 14);
    if (v8 >= 0x50)
      *((_BYTE *)v9 + 59) = *((_QWORD *)Data + 15);
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StoreSnapshot(uint64_t a1, uint64_t a2, char *__s, _QWORD *a4)
{
  apr_pool_t *v8;
  size_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  char *Data;
  unint64_t v14;
  void *v15;
  int v16;
  _DWORD v18[2];
  const char *v19;
  __int128 v20;
  __int128 v21;

  v8 = *(apr_pool_t **)(a1 + 40);
  v9 = strlen(__s);
  v10 = *find_entry(*(_QWORD *)(a1 + 32), __s, v9, 0);
  if (v10)
  {
    v11 = *(unsigned __int8 **)(v10 + 32);
    if (v11)
    {
      v12 = v11[8];
      if (!a4)
        return v12;
      goto LABEL_11;
    }
  }
  Data = GTCaptureArchive_readData(*(const char ***)a1, *(apr_pool_t ***)(a1 + 8), __s, v8, (int *)(a1 + 48));
  if (v14 < 8)
  {
    v16 = *(_DWORD *)(a1 + 48);
    v20 = 0u;
    v21 = 0u;
    v18[0] = v16;
    v18[1] = 500;
    v19 = "data.length >= sizeof(uint64_t)";
    GTError_addError((int *)(a1 + 48), (uint64_t)v18);
    return 0;
  }
  else
  {
    v12 = GTTraceEncoder_storeBlob(a2, Data, v14);
    v11 = (unsigned __int8 *)apr_palloc(v8, 0x10uLL);
    *(_QWORD *)v11 = **(_QWORD **)(a2 + 16);
    v11[8] = v12;
    if (__s)
    {
      v15 = apr_palloc(v8, v9 + 1);
      memcpy(v15, __s, v9 + 1);
    }
    else
    {
      v15 = 0;
    }
    apr_hash_set(*(apr_hash_t **)(a1 + 32), v15, v9, v11);
    if (a4)
LABEL_11:
      *a4 = *(_QWORD *)v11;
  }
  return v12;
}

uint64_t StoreMTLHeapDescriptorUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t DescriptorWithCount;
  uint64_t v8;
  unsigned int v9;
  _OWORD v11[11];
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v13 = 24;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v11, 0x36u, 1u);
  v8 = v13;
  *(_QWORD *)(v13 + 16) = 32;
  *(_OWORD *)v8 = GTMTLHeapDescriptorDefaults;
  v9 = *(_DWORD *)Data;
  *(_QWORD *)(v8 + 8) = *((_QWORD *)Data + 1);
  *(_BYTE *)(v8 + 19) = *((_QWORD *)Data + 4);
  *(_WORD *)(v8 + 16) = *((_QWORD *)Data + 7);
  if (v9 >= 0x2A)
  {
    *(_BYTE *)(v8 + 18) = *((_QWORD *)Data + 8);
    if (v9 >= 0x34)
      *(_QWORD *)v8 = *((_QWORD *)Data + 9);
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t SaveMTLLibraryInfo_(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int *v5;
  _OWORD v7[12];

  v5 = (int *)(a1 + 48);
  memset(v7, 0, sizeof(v7));
  DecodeDYMTLLibraryInfo(a3, (uint64_t)v7, 0, (int *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(a2 + 16) + 14) = AllocatePipelineReflectionWithType(a2, (uint64_t)v7, 0x85u);
  return DecodeDYMTLLibraryInfo(a3, (uint64_t)v7, 1, v5);
}

uint64_t UnwrapMTLCompileOptionsUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v5;
  apr_pool_t *v6;
  char *Data;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DescriptorWithCount;
  _OWORD v13[26];
  uint64_t v14;

  v5 = *(apr_pool_t ***)(a1 + 8);
  v6 = *v5;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v5, a3, *v5, (int *)(a1 + 48));
  if (!Data)
    return 0;
  v9 = (uint64_t)Data;
  v10 = v8;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  DecodeDYMTLCompileOptions((uint64_t)Data, v8, v13, 0, a1);
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v13, 0x49u, 1u);
  DecodeDYMTLCompileOptions(v9, v10, v13, 1, a1);
  apr_pool_clear(v6);
  return DescriptorWithCount;
}

uint64_t StoreMTLTextureMipmapInfoUsingDecode(uint64_t a1, uint64_t a2, char *a3)
{
  apr_pool_t **v4;
  apr_pool_t *v5;
  char *Data;
  uint64_t v7;
  uint64_t DescriptorWithCount;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  _OWORD v17[15];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v4 = *(apr_pool_t ***)(a1 + 8);
  v5 = *v4;
  Data = GTCaptureArchive_readData(*(const char ***)a1, v4, a3, *v4, (int *)(a1 + 48));
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  v7 = Data[8];
  *((_QWORD *)&v18 + 1) = 16;
  *(_QWORD *)&v25 = 16 * v7;
  DescriptorWithCount = AllocateDescriptorWithCount(a2, (uint64_t)v17, 0x5Fu, 1u);
  v9 = *((_QWORD *)Data + 1);
  v10 = (_QWORD *)*((_QWORD *)&v18 + 1);
  v11 = v25;
  *(_BYTE *)(*((_QWORD *)&v18 + 1) + 8) = *((_QWORD *)Data + 1);
  if (v9)
    v12 = v11;
  else
    v12 = 0;
  *v10 = v12;
  if (v9)
  {
    v13 = (_DWORD *)(v11 + 8);
    v14 = (uint64_t *)(Data + 40);
    do
    {
      *(v13 - 2) = *(v14 - 2);
      *(v13 - 1) = *(v14 - 1);
      v15 = *v14;
      v14 += 4;
      *v13 = v15;
      v13 += 4;
      --v9;
    }
    while (v9);
  }
  apr_pool_clear(v5);
  return DescriptorWithCount;
}

uint64_t StreamArrayFromFile(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  int *v7;
  char *Data;
  unint64_t v9;
  int v10;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  _DWORD v17[2];
  const char *v18;
  __int128 v19;
  __int128 v20;

  v7 = (int *)(a1 + 48);
  Data = GTCaptureArchive_readData(*(const char ***)a1, *(apr_pool_t ***)(a1 + 8), a3, **(apr_pool_t ***)(a1 + 8), (int *)(a1 + 48));
  if (v9 >= 8 * a4)
  {
    v12 = (uint64_t *)Data;
    v13 = a4;
    __chkstk_darwin();
    v15 = (char *)&v17[-2] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v15, v14);
    return StreamArray(a1, a2, v15, v12, v13);
  }
  else
  {
    v10 = *v7;
    v19 = 0u;
    v20 = 0u;
    v17[0] = v10;
    v17[1] = 500;
    v18 = "data.length >= count * sizeof(uint64_t)";
    GTError_addError((int *)(a1 + 48), (uint64_t)v17);
    return 0;
  }
}

uint64_t AllocateDescriptorWithCount(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *Bytes;
  uint64_t v11;
  char *v12;
  char *v13;

  v5 = 0;
  v6 = 0;
  do
  {
    v6 += (*(_QWORD *)(a2 + v5) + 7) & 0xFFFFFFFFFFFFFFF8;
    v5 += 8;
  }
  while (v5 != 424);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(unsigned __int8 *)(a1 + 42);
  *(_BYTE *)(a1 + 42) = v9 + 1;
  Bytes = GTTraceMemPool_allocateBytes(v7, v8, (v6 << 32) | ((unint64_t)a3 << 16) | ((unint64_t)a4 << 8) | v9);
  v11 = 0;
  v12 = Bytes + 16;
  do
  {
    if (((*(_QWORD *)(a2 + v11) + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
      v13 = v12;
    else
      v13 = 0;
    v12 += (*(_QWORD *)(a2 + v11) + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + v11) = v13;
    v11 += 8;
  }
  while (v11 != 424);
  return Bytes[8];
}

uint64_t AllocatePipelineReflectionWithType(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *Bytes;
  uint64_t v13;
  char *v14;
  char *v15;

  v4 = 0;
  v5 = 0uLL;
  v6 = vdupq_n_s64(7uLL);
  v7 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF8);
  do
  {
    v5 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(*(int64x2_t *)(a2 + v4), v6), v7), v5);
    v4 += 16;
  }
  while (v4 != 192);
  v8 = vaddvq_s64(v5);
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(unsigned __int8 *)(a1 + 42);
  *(_BYTE *)(a1 + 42) = v11 + 1;
  Bytes = GTTraceMemPool_allocateBytes(v9, v10, (v8 << 32) | ((unint64_t)a3 << 16) | v11 | 0x100);
  v13 = 0;
  v14 = Bytes + 16;
  do
  {
    if (((*(_QWORD *)(a2 + v13) + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
      v15 = v14;
    else
      v15 = 0;
    v14 += (*(_QWORD *)(a2 + v13) + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + v13) = v15;
    v13 += 8;
  }
  while (v13 != 192);
  return Bytes[8];
}

uint64_t AllocateMPSDescriptorWithType(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *Bytes;
  uint64_t v12;
  char *v13;
  char *v14;

  v4 = 0;
  v5 = 0uLL;
  v6 = vdupq_n_s64(0xFuLL);
  v7 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF0);
  do
  {
    v5 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(*(int64x2_t *)(a2 + v4), v6), v7), v5);
    v4 += 16;
  }
  while (v4 != 80);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(unsigned __int8 *)(a1 + 42);
  *(_BYTE *)(a1 + 42) = v10 + 1;
  Bytes = GTTraceMemPool_allocateBytes(v8, v9, (vaddvq_s64(v5) << 32) | ((unint64_t)a3 << 16) | v10 | 0x100);
  v12 = 0;
  v13 = Bytes + 16;
  do
  {
    if (((*(_QWORD *)(a2 + v12) + 15) & 0xFFFFFFFFFFFFFFF0) != 0)
      v14 = v13;
    else
      v14 = 0;
    v13 += (*(_QWORD *)(a2 + v12) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(a2 + v12) = v14;
    v12 += 8;
  }
  while (v12 != 80);
  return Bytes[8];
}

unint64_t *GTTraceContext_openStream(uint64_t a1, unint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  RetainFreeNode(a1);
  v5 = v4;
  RetainFreeNode(a1);
  v5[3] = v6;
  v7 = (unint64_t *)(a1 + 80);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  *v5 = v8;
  v5[1] = a2;
  v5[2] = 0;
  v9 = (_QWORD *)v5[3];
  *v9 = *(_QWORD *)(a1 + 64);
  v9[4] = v8;
  v10 = (unsigned int *)(v9 + 5);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  atomic_store(0, v5 + 7);
  apr_hash_set(*(apr_hash_t **)(a1 + 88), v5, 8, v5);
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v5;
}

double RetainFreeNode(uint64_t a1)
{
  _QWORD *v2;
  uint64_t i;
  double result;

  v2 = *(_QWORD **)(a1 + 96);
  if (!v2)
  {
    v2 = apr_palloc(**(apr_pool_t ***)(a1 + 88), 0x1000uLL);
    for (i = 0; i != 504; i += 8)
      v2[i] = &v2[i + 8];
    v2[504] = 0;
    *(_QWORD *)(a1 + 96) = v2;
  }
  *(_QWORD *)(a1 + 96) = *v2;
  result = 0.0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  return result;
}

uint64_t GTTraceFunc_argumentBlobWithMap(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *entry;
  _QWORD v7[4];

  if (a2 < 0x40)
    return 0;
  v7[2] = v3;
  v7[3] = v4;
  v7[0] = *a1;
  v7[1] = a2;
  entry = find_entry(a3, v7, 9uLL, 0);
  if (*entry)
    return *(_QWORD *)(*entry + 32);
  else
    return 0;
}

char *GTTraceFunc_argumentBytesWithPool(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  signed int v8;
  BOOL v9;
  char *result;

  if (!a2)
    return 0;
  if (a2 < 0x40)
    return (char *)a1 + a2;
  v3 = *(_QWORD *)(a3 + 8);
  if (!v3)
    return 0;
  v4 = *a1;
  while (1)
  {
    v5 = atomic_load((unsigned int *)(v3 + 4));
    v6 = v5 - 64;
    if (v6 >= 1)
      break;
LABEL_11:
    result = 0;
    v3 = *(_QWORD *)(v3 + 40);
    if (!v3)
      return result;
  }
  v7 = v3 + 64;
  while (v4 != *(_QWORD *)v7 || *(unsigned __int8 *)(v7 + 8) != a2)
  {
    v8 = (*(_DWORD *)(v7 + 12) + 23) & 0xFFFFFFF8;
    v7 += v8;
    v9 = __OFSUB__(v6, v8);
    v6 -= v8;
    if ((v6 < 0) ^ v9 | (v6 == 0))
      goto LABEL_11;
  }
  return (char *)(v7 + 16);
}

char *GTTraceFunc_argumentBytesWithMap(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *entry;
  uint64_t v6;
  _QWORD v8[4];

  if (!a2)
    return 0;
  if (a2 < 0x40)
    return (char *)a1 + a2;
  v8[2] = v3;
  v8[3] = v4;
  v8[0] = *a1;
  v8[1] = a2;
  entry = find_entry(a3, v8, 9uLL, 0);
  if (!*entry)
    return 0;
  v6 = *(_QWORD *)(*entry + 32);
  if (v6)
    return (char *)(v6 + 16);
  else
    return 0;
}

char *GTTraceFunc_targetContext(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  char *result;

  v2 = *(_DWORD *)(a1 + 8);
  result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a1, *(unsigned __int8 *)(a1 + 13), a2);
  if (v2 >> 1 == 2147475691)
  {
    result += 16;
  }
  else if (!result)
  {
    return result;
  }
  return *(char **)result;
}

uint64_t GTTraceMemoryMap_argumentBlobAtIndex(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *entry;
  _QWORD v7[4];

  if (a1 < 0x40)
    return 0;
  v7[2] = v3;
  v7[3] = v4;
  v7[0] = a3;
  v7[1] = a1;
  entry = find_entry(a2, v7, 9uLL, 0);
  if (*entry)
    return *(_QWORD *)(*entry + 32);
  else
    return 0;
}

void GTTraceContext_pushEncoderWithStream(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;
  int v17;
  uint64_t v18;
  size_t v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned int *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __uint64_t v45;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = (unint64_t *)(a2 + 72);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 24) = v5;
  s();
  v8 = *v7;
  *(_QWORD *)(a1 + 32) = *v7;
  *v7 = v5;
  v9 = *((_BYTE *)v7 + 8);
  *(_BYTE *)(a1 + 40) = v9;
  *(_WORD *)(a1 + 41) = 16400;
  *(_DWORD *)(a1 + 43) = 0;
  *(_BYTE *)(a1 + 47) = 0;
  if (!v6)
    v6 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 8) = v6;
  PushFunc(v6);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)v10 = v5;
  *(_DWORD *)(v10 + 11) = 0;
  *(_DWORD *)(v10 + 8) = 0;
  *(_BYTE *)(v10 + 15) = v9;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  if (v8)
  {
    v11 = GTTraceEncoder_storeBytes(a1, (void *)(a1 + 32), 8uLL);
    v10 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v11 = 0;
  }
  *(_BYTE *)(v10 + 12) = v11;
  v12 = atomic_load((unsigned __int8 *)(a2 + 120));
  if ((v12 & 1) != 0)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(_QWORD *)(a1 + 24);
    GTTraceContext_backtrace_callstack();
    v16 = v15;
    v17 = backtrace(v15, 512);
    if (v17 >= 1)
    {
      v18 = v17 - 2;
      v19 = 8 * v18;
      v45 = 0;
      pthread_threadid_np(0, &v45);
      v20 = v45 & 0xF;
      v21 = (unsigned int *)(v13 + 24 * (v45 & 0xF) + 144);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      v23 = (unsigned int *)(v13 + 24 * v20 + 148);
      do
        v24 = atomic_load(v23);
      while (v24 != v22);
      v25 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
      v26 = v13 + 24 * v20;
      v29 = *(unsigned int **)(v26 + 128);
      v28 = (_QWORD *)(v26 + 128);
      v27 = v29;
      if (!v29)
        goto LABEL_23;
      v30 = v27 + 1;
      v31 = atomic_load(v27 + 1);
      while (1)
      {
        v32 = v31;
        v33 = v25 + v31;
        v34 = *v27;
        if (v33 > v34)
          break;
        v31 = __ldaxr(v30);
        if (v31 == v32)
        {
          if (!__stlxr(v33, v30))
          {
            v34 = *v27;
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
      v35 = (_QWORD *)((char *)v27 + v32);
      if (v33 > v34)
      {
LABEL_23:
        v36 = (unsigned int *)GTTraceStoreAllocNode(*(int **)(v13 + 64), 0x3FC0uLL, 3, 0);
        *((_QWORD *)v36 + 5) = *v28;
        *v28 = v36;
        v37 = v13 + 24 * v20;
        v39 = *(_QWORD *)(v37 + 136);
        v38 = (_QWORD *)(v37 + 136);
        if (!v39)
          *v38 = v36;
        v40 = v36 + 1;
        v41 = atomic_load(v36 + 1);
        while (1)
        {
          v42 = v41;
          v43 = v25 + v41;
          v44 = *v36;
          if (v43 > v44)
            break;
          v41 = __ldaxr(v40);
          if (v41 == v42)
          {
            if (!__stlxr(v43, v40))
            {
              v44 = *v36;
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
        v35 = (_QWORD *)((char *)v36 + v42);
        if (v43 > v44)
          v35 = 0;
      }
      atomic_store(v22 + 1, v23);
      *v35 = v14;
      v35[1] = v18 | 0x800000000;
      memcpy(v35 + 2, v16 + 2, v19);
    }
  }
}

double PushFunc(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  signed int v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  double result;

  v2 = (unsigned int *)(a1 + 48);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  do
    v4 = atomic_load((unsigned int *)(a1 + 52));
  while (v4 != v3);
  v5 = *(unsigned int **)(a1 + 40);
  if (!v5)
    goto LABEL_13;
  v6 = v5 + 1;
  v7 = atomic_load(v5 + 1);
  while (1)
  {
    v8 = v7;
    v9 = v7 + 64;
    v10 = *v5;
    if (v9 > v10)
      break;
    v7 = __ldaxr(v6);
    if (v7 == v8)
    {
      if (!__stlxr(v9, v6))
      {
        v10 = *v5;
        break;
      }
    }
    else
    {
      __clrex();
    }
  }
  if (v9 <= v10)
  {
    v22 = (_OWORD *)((char *)v5 + v8);
    v11 = v3 + 1;
  }
  else
  {
LABEL_13:
    v11 = v3 + 1;
    if ((unint64_t)((uint64_t)(int)(v3 + 1) << 7) >= 0x3FC0)
      v12 = 16320;
    else
      v12 = (uint64_t)v11 << 7;
    v13 = (unsigned int *)GTTraceStoreAllocNode(**(int ***)(a1 + 24), v12, 1, *(_QWORD *)a1);
    v14 = *(_QWORD *)(a1 + 40);
    if (v14)
      v15 = (_QWORD *)(v14 + 40);
    else
      v15 = (_QWORD *)(a1 + 32);
    *v15 = v13;
    *(_QWORD *)(a1 + 40) = v13;
    *((_QWORD *)v13 + 5) = 0;
    v16 = v13 + 1;
    v17 = atomic_load(v13 + 1);
    while (1)
    {
      v18 = v17;
      v19 = v17 + 64;
      v20 = *v13;
      if (v19 > v20)
        break;
      v17 = __ldaxr(v16);
      if (v17 == v18)
      {
        if (!__stlxr(v19, v16))
        {
          v20 = *v13;
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
    v21 = (_OWORD *)((char *)v13 + v18);
    if (v19 <= v20)
      v22 = v21;
    else
      v22 = 0;
  }
  result = 0.0;
  v22[2] = 0u;
  v22[3] = 0u;
  *v22 = 0u;
  v22[1] = 0u;
  atomic_store(v11, (unsigned int *)(a1 + 52));
  return result;
}

uint64_t GTTraceEncoder_storeBytes(uint64_t a1, void *__src, size_t __n)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v7;
  char *Bytes;

  v3 = 0;
  if (__src)
  {
    v4 = __n;
    if (__n)
    {
      v3 = *(unsigned __int8 *)(a1 + 41);
      if (v3 + __n > 0x40)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
        v3 = *(unsigned __int8 *)(a1 + 42);
        *(_BYTE *)(a1 + 42) = v3 + 1;
        if ((_DWORD)__n)
        {
          Bytes = GTTraceMemPool_allocateBytes(v7, *(_QWORD *)(a1 + 24), v3 | ((unint64_t)__n << 32));
          memcpy(Bytes + 16, __src, v4);
        }
      }
      else
      {
        memcpy((void *)(*(_QWORD *)(a1 + 16) + v3), __src, __n);
        *(_BYTE *)(a1 + 41) += (v4 + 7) & 0xF8;
      }
    }
  }
  return v3;
}

char *GTTraceEncoder_allocateArguments(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v3 + 8) = a2;
  v4 = *(unsigned __int8 *)(a1 + 41);
  if ((unint64_t)(v4 + a3) > 0x40)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    v7 = *(unsigned __int8 *)(a1 + 42);
    *(_BYTE *)(a1 + 42) = v7 + 1;
    v5 = GTTraceMemPool_allocateBytes(v6, *(_QWORD *)(a1 + 24), v7 | (a3 << 32)) + 16;
    LOBYTE(v4) = v7;
  }
  else
  {
    v5 = (char *)(v3 + v4);
    *(_BYTE *)(a1 + 41) = v4 + a3;
  }
  *(_BYTE *)(v3 + 13) = v4;
  return v5;
}

uint64_t GTTraceEncoder_storeBlob(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  size_t v6;
  char *Bytes;

  v3 = 0;
  if (a2)
  {
    if (a3)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
      v3 = *(unsigned __int8 *)(a1 + 42);
      *(_BYTE *)(a1 + 42) = v3 + 1;
      if ((_DWORD)a3)
      {
        v6 = a3;
        Bytes = GTTraceMemPool_allocateBytes(v4, *(_QWORD *)(a1 + 24), v3 | ((unint64_t)a3 << 32));
        memcpy(Bytes + 16, a2, v6);
      }
    }
  }
  return v3;
}

uint64_t GTTraceStream_lastFunc(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = atomic_load((unsigned int *)(v1 + 4));
    if (v2 < 0x80)
    {
LABEL_7:
      v1 = *(_QWORD *)(a1 + 32);
      if (v1)
      {
        v6 = 0;
        while (1)
        {
          v7 = atomic_load((unsigned int *)(v1 + 4));
          v8 = v6 + (v7 >> 6) - 1;
          if (v8 > 0)
            break;
          v1 = *(_QWORD *)(v1 + 40);
          v6 = v8;
          if (!v1)
            return v1;
        }
        v9 = v6;
        v10 = (uint64_t)(0xFFFFFFFF00000001 * v6) >> 32;
        if ((*(_BYTE *)(v1 + (v10 << 6) + 79) & 8) != 0)
        {
          do
          {
            v11 = v1;
            v12 = v10;
            v13 = atomic_load((unsigned int *)(v1 + 4));
            v14 = (HIDWORD(v9) + 1);
            if ((_DWORD)v14 == (_DWORD)v9 + (v13 >> 6) - 1)
            {
              v1 = *(_QWORD *)(v11 + 40);
              if (!v1)
                return v11 + (v12 << 6) + 64;
              v9 = (HIDWORD(v9) + 1);
            }
            else
            {
              v9 = v9;
              v1 = v11;
            }
            v9 |= v14 << 32;
            v10 = (uint64_t)(0xFFFFFFFF00000001 * v9) >> 32;
          }
          while ((*(_BYTE *)(v1 + (v10 << 6) + 79) & 8) != 0);
          return v11 + (v12 << 6) + 64;
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      v3 = (v2 >> 6) - 2;
      v4 = v1 + 64;
      while (1)
      {
        v1 = v4 + ((unint64_t)v3 << 6);
        if ((*(_BYTE *)(v1 + 15) & 8) != 0)
          break;
        v5 = __OFSUB__(v3--, 1);
        if (v3 < 0 != v5)
          goto LABEL_7;
      }
    }
  }
  return v1;
}

uint64_t GTMTLGPUAddressResource_compare(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 != *a2;
}

_QWORD *GTMTLGPUAddressResource_resourceForGPUAddress(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  unint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;

  if (!a2)
    return 0;
  v3 = a1;
  do
  {
    v4 = &a1[3 * (a2 >> 1)];
    v6 = *v4;
    v5 = v4 + 3;
    v7 = v6 > a3;
    if (v6 <= a3)
      a2 += ~(a2 >> 1);
    else
      a2 >>= 1;
    if (!v7)
      a1 = v5;
  }
  while (a2);
  if (a1 == v3)
    return 0;
  v9 = *(a1 - 3);
  v10 = *(a1 - 2);
  result = a1 - 3;
  if (v10 + v9 <= a3)
    return 0;
  return result;
}

uint64_t GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(uint64_t a1, uint64_t a2)
{
  _QWORD *entry;
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  entry = find_entry(a1, &v5, 8uLL, 0);
  if (*entry && (v3 = *(_QWORD *)(*entry + 32)) != 0)
    return *(_QWORD *)(v3 + 8);
  else
    return 0;
}

void GTMTLIndirectResources_optimizeByKey(uint64_t *a1, uint64_t *a2, int a3, apr_pool_t *pool)
{
  apr_hash_t *v7;
  apr_hash_t *v8;
  apr_hash_t *v9;
  apr_hash_t *v10;
  apr_hash_t *v11;
  apr_hash_t *v12;
  apr_hash_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  const void *v48;
  uint64_t v49;
  apr_hash_t *v50;
  apr_hash_t *ht;

  v49 = *a2;
  *a1 = *a2;
  v7 = apr_hash_make(pool);
  a1[1] = (uint64_t)v7;
  v8 = apr_hash_make(pool);
  a1[2] = (uint64_t)v8;
  v9 = apr_hash_make(pool);
  a1[3] = (uint64_t)v9;
  v10 = apr_hash_make(pool);
  a1[4] = (uint64_t)v10;
  v11 = apr_hash_make(pool);
  a1[5] = (uint64_t)v11;
  v12 = apr_hash_make(pool);
  a1[6] = (uint64_t)v12;
  v13 = apr_hash_make(pool);
  a1[7] = (uint64_t)v13;
  ht = apr_hash_make(pool);
  a1[8] = (uint64_t)ht;
  v50 = apr_hash_make(pool);
  a1[9] = (uint64_t)v50;
  a1[10] = 0;
  qsort(*(void **)(v49 + 24), *(int *)(v49 + 12), *(int *)(v49 + 8), (int (__cdecl *)(const void *, const void *))GTMTLGPUAddressResource_compare);
  v14 = a2[1];
  v15 = *(unsigned int *)(v14 + 12);
  if ((int)v15 >= 1)
  {
    v16 = *(char **)(v14 + 24);
    do
    {
      if (a3 == 1)
        v17 = v16 + 16;
      else
        v17 = v16;
      apr_hash_set(v7, v17, 8, v16);
      v16 += 32;
      --v15;
    }
    while (v15);
  }
  v18 = a2[2];
  v19 = *(unsigned int *)(v18 + 12);
  if ((int)v19 >= 1)
  {
    v20 = *(char **)(v18 + 24);
    do
    {
      if (a3 == 1)
        v21 = v20 + 16;
      else
        v21 = v20;
      apr_hash_set(v8, v21, 8, v20);
      v20 += 32;
      --v19;
    }
    while (v19);
  }
  v22 = a2[3];
  v23 = *(unsigned int *)(v22 + 12);
  if ((int)v23 >= 1)
  {
    v24 = *(char **)(v22 + 24);
    do
    {
      if (a3 == 1)
        v25 = v24 + 16;
      else
        v25 = v24;
      apr_hash_set(v9, v25, 8, v24);
      v24 += 32;
      --v23;
    }
    while (v23);
  }
  v26 = a2[4];
  v27 = *(unsigned int *)(v26 + 12);
  if ((int)v27 >= 1)
  {
    v28 = *(char **)(v26 + 24);
    do
    {
      if (a3 == 1)
        v29 = v28 + 16;
      else
        v29 = v28;
      apr_hash_set(v10, v29, 8, v28);
      v28 += 32;
      --v27;
    }
    while (v27);
  }
  v30 = a2[5];
  v31 = *(unsigned int *)(v30 + 12);
  if ((int)v31 >= 1)
  {
    v32 = *(char **)(v30 + 24);
    do
    {
      if (a3 == 1)
        v33 = v32 + 16;
      else
        v33 = v32;
      apr_hash_set(v11, v33, 8, v32);
      v32 += 32;
      --v31;
    }
    while (v31);
  }
  v34 = a2[6];
  v35 = *(unsigned int *)(v34 + 12);
  if ((int)v35 >= 1)
  {
    v36 = *(char **)(v34 + 24);
    do
    {
      if (a3 == 1)
        v37 = v36 + 16;
      else
        v37 = v36;
      apr_hash_set(v12, v37, 8, v36);
      v36 += 32;
      --v35;
    }
    while (v35);
    v38 = a2[6];
    v39 = *(unsigned int *)(v38 + 12);
    if ((int)v39 >= 1)
    {
      v40 = *(_QWORD *)(v38 + 24);
      do
      {
        apr_hash_set(v50, (const void *)(v40 + 24), 8, (const void *)v40);
        v40 += 32;
        --v39;
      }
      while (v39);
    }
  }
  v41 = a2[7];
  v42 = *(unsigned int *)(v41 + 12);
  if ((int)v42 >= 1)
  {
    v43 = *(char **)(v41 + 24);
    do
    {
      if (a3 == 1)
        v44 = v43 + 16;
      else
        v44 = v43;
      apr_hash_set(v13, v44, 8, v43);
      v43 += 32;
      --v42;
    }
    while (v42);
  }
  v45 = a2[8];
  v46 = *(unsigned int *)(v45 + 12);
  if ((int)v46 >= 1)
  {
    v47 = *(char **)(v45 + 24);
    do
    {
      if (a3 == 1)
        v48 = v47 + 16;
      else
        v48 = v47;
      apr_hash_set(ht, v48, 8, v47);
      v47 += 32;
      --v46;
    }
    while (v46);
  }
}

void GTMTLIndirectResources_allResourcesByKey(uint64_t *a1, _DWORD **a2, unint64_t a3, int a4, apr_pool_t *p)
{
  apr_array_header_t *v10;
  apr_array_header_t *v11;
  apr_array_header_t *v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *v15;
  apr_array_header_t *v16;
  apr_array_header_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  apr_array_header_t *v21;
  int nelts;
  apr_array_header_t *v23;
  uint64_t i;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  apr_array_header_t *v28;
  int v29;
  apr_array_header_t *v30;
  uint64_t j;
  _QWORD *v32;
  _QWORD *v33;
  apr_array_header_t *v34;
  int v35;
  apr_array_header_t *v36;
  uint64_t k;
  _QWORD *v38;
  _QWORD *v39;
  apr_array_header_t *v40;
  apr_array_header_t *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  apr_array_header_t *v45;
  apr_array_header_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  apr_array_header_t *v50;
  apr_array_header_t *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  apr_array_header_t *v55;
  apr_array_header_t *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60[6];
  apr_array_header_t *v61;
  apr_array_header_t *v62;
  apr_array_header_t *v63;

  v10 = apr_array_make(p, 32, 8);
  v10->nelts = 0;
  GTMTLSMContext_getObjects(a2[1], a3, v10);
  v11 = apr_array_make(p, v10->nelts, 24);
  v60[0] = (uint64_t)v11;
  if (v10->nelts >= 1)
  {
    v12 = v11;
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)&v10->elts[8 * v13];
      v15 = (int8x16_t *)apr_array_push(v12);
      *v15 = vextq_s8(*(int8x16_t *)(v14 + 104), *(int8x16_t *)(v14 + 104), 8uLL);
      v15[1].i64[0] = *(_QWORD *)(v14 + 8);
      ++v13;
    }
    while (v13 < v10->nelts);
  }
  v10->nelts = 0;
  GTMTLSMContext_getObjects(a2[2], a3, v10);
  v16 = apr_array_make(p, v10->nelts, 32);
  v60[1] = (uint64_t)v16;
  if (v10->nelts >= 1)
  {
    v17 = v16;
    v18 = 0;
    do
    {
      v19 = *(_QWORD **)&v10->elts[8 * v18];
      v20 = apr_array_push(v17);
      v20[1] = v19[1];
      *v20 = v19[21];
      v20[2] = v19[25];
      ++v18;
    }
    while (v18 < v10->nelts);
  }
  v10->nelts = 0;
  GTMTLSMContext_getObjects(a2[3], a3, v10);
  v21 = apr_array_make(p, v10->nelts, 32);
  v60[2] = (uint64_t)v21;
  nelts = v10->nelts;
  if (nelts >= 1)
  {
    v23 = v21;
    for (i = 0; i < nelts; ++i)
    {
      v25 = *(_QWORD **)&v10->elts[8 * i];
      v26 = v25[6];
      if (v26 && *(_BYTE *)(v26 + 62))
      {
        v27 = apr_array_push(v23);
        v27[1] = v25[1];
        *v27 = v25[8];
        v27[2] = v25[9];
        nelts = v10->nelts;
      }
    }
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v10->nelts = 0;
  GTMTLSMContext_getObjects(a2[4], a3, v10);
  v28 = apr_array_make(p, v10->nelts, 32);
  v60[3] = (uint64_t)v28;
  v29 = v10->nelts;
  if (v29 >= 1)
  {
    v30 = v28;
    for (j = 0; j < v29; ++j)
    {
      v32 = *(_QWORD **)&v10->elts[8 * j];
      if (GTMTLSMPipelineState_supportsIndirectCommandBuffers((uint64_t)v32))
      {
        v33 = apr_array_push(v30);
        v33[1] = v32[1];
        *v33 = v32[12];
        v33[2] = v32[14];
        v29 = v10->nelts;
      }
    }
  }
  v10->nelts = 0;
  GTMTLSMContext_getObjects(a2[5], a3, v10);
  v34 = apr_array_make(p, v10->nelts, 32);
  v60[4] = (uint64_t)v34;
  v35 = v10->nelts;
  if (v35 >= 1)
  {
    v36 = v34;
    for (k = 0; k < v35; ++k)
    {
      v38 = *(_QWORD **)&v10->elts[8 * k];
      if (GTMTLSMPipelineState_supportsIndirectCommandBuffers((uint64_t)v38))
      {
        v39 = apr_array_push(v36);
        v39[1] = v38[1];
        *v39 = v38[12];
        v39[2] = v38[14];
        v35 = v10->nelts;
      }
    }
  }
  v10->nelts = 0;
  GTMTLSMContext_getObjects(a2[6], a3, v10);
  v40 = apr_array_make(p, v10->nelts, 32);
  v60[5] = (uint64_t)v40;
  if (v10->nelts >= 1)
  {
    v41 = v40;
    v42 = 0;
    do
    {
      v43 = *(_QWORD **)&v10->elts[8 * v42];
      v44 = apr_array_push(v41);
      v44[1] = v43[1];
      *v44 = v43[15];
      v44[2] = v43[16];
      ++v42;
    }
    while (v42 < v10->nelts);
  }
  v10->nelts = 0;
  GTMTLSMContext_getObjects(a2[7], a3, v10);
  v45 = apr_array_make(p, v10->nelts, 32);
  v61 = v45;
  if (v10->nelts >= 1)
  {
    v46 = v45;
    v47 = 0;
    do
    {
      v48 = *(_QWORD *)&v10->elts[8 * v47];
      v49 = apr_array_push(v46);
      v49[1] = *(_QWORD *)(v48 + 8);
      *v49 = *(_QWORD *)(v48 + 136);
      *((_OWORD *)v49 + 1) = *(_OWORD *)(v48 + 152);
      ++v47;
    }
    while (v47 < v10->nelts);
  }
  v10->nelts = 0;
  GTMTLSMContext_getObjects(a2[8], a3, v10);
  v50 = apr_array_make(p, v10->nelts, 32);
  v62 = v50;
  if (v10->nelts >= 1)
  {
    v51 = v50;
    v52 = 0;
    do
    {
      v53 = *(_QWORD **)&v10->elts[8 * v52];
      v54 = apr_array_push(v51);
      v54[1] = v53[1];
      *v54 = v53[18];
      v54[2] = v53[19];
      ++v52;
    }
    while (v52 < v10->nelts);
  }
  v10->nelts = 0;
  GTMTLSMContext_getObjects(a2[9], a3, v10);
  v55 = apr_array_make(p, v10->nelts, 32);
  v63 = v55;
  if (v10->nelts >= 1)
  {
    v56 = v55;
    v57 = 0;
    do
    {
      v58 = *(_QWORD **)&v10->elts[8 * v57];
      v59 = apr_array_push(v56);
      v59[1] = v58[1];
      *v59 = v58[16];
      v59[2] = v58[17];
      ++v57;
    }
    while (v57 < v10->nelts);
  }
  GTMTLIndirectResources_optimizeByKey(a1, v60, a4, p);
}

apr_hash_index_t *GTMTLIndirectResources_rehash(apr_hash_index_t *result, uint64_t a2, int a3, apr_pool_t *p)
{
  apr_hash_index_t *v5;
  __int128 v6;
  __int128 v7;
  apr_hash_t *v10;
  apr_hash_t *v11;
  apr_hash_t *v12;
  apr_hash_t *v13;
  apr_hash_t *v14;
  apr_hash_t *v15;
  apr_hash_t *v16;
  apr_hash_t *v17;
  apr_hash_t *v18;

  v5 = result;
  if (*(unsigned __int8 *)(a2 + 80) == a3)
  {
    v6 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)result + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)result + 3) = v6;
    *((_OWORD *)result + 4) = *(_OWORD *)(a2 + 64);
    *((_QWORD *)result + 10) = *(_QWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_OWORD *)result + 1) = v7;
  }
  else
  {
    *(_QWORD *)result = apr_array_copy(p, *(const apr_array_header_t **)a2);
    v10 = apr_hash_make(p);
    *((_QWORD *)v5 + 1) = v10;
    v11 = apr_hash_make(p);
    *((_QWORD *)v5 + 2) = v11;
    v12 = apr_hash_make(p);
    *((_QWORD *)v5 + 3) = v12;
    v13 = apr_hash_make(p);
    *((_QWORD *)v5 + 4) = v13;
    v14 = apr_hash_make(p);
    *((_QWORD *)v5 + 5) = v14;
    v15 = apr_hash_make(p);
    *((_QWORD *)v5 + 6) = v15;
    v18 = apr_hash_make(p);
    *((_QWORD *)v5 + 7) = v18;
    v17 = apr_hash_make(p);
    *((_QWORD *)v5 + 8) = v17;
    v16 = apr_hash_make(p);
    *((_QWORD *)v5 + 9) = v16;
    *((_BYTE *)v5 + 80) = a3;
    *(_DWORD *)((char *)v5 + 81) = 0;
    *((_DWORD *)v5 + 21) = 0;
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(_QWORD *)(a2 + 8), a3, v10);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(_QWORD *)(a2 + 16), a3, v11);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(_QWORD *)(a2 + 24), a3, v12);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(_QWORD *)(a2 + 32), a3, v13);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(_QWORD *)(a2 + 40), a3, v14);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(_QWORD *)(a2 + 48), a3, v15);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(_QWORD *)(a2 + 72), 2, v16);
    GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(_QWORD *)(a2 + 56), a3, v18);
    return GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(*(_QWORD *)(a2 + 64), a3, v17);
  }
  return result;
}

apr_hash_index_t *GTMTLUniqueIdentifierResource_fillHashMapByKey_apr_ht(uint64_t a1, int a2, apr_hash_t *a3)
{
  apr_pool_t *v5;
  apr_hash_index_t *result;
  apr_hash_index_t *v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  _OWORD *v11;
  const void *v12;

  v5 = *(apr_pool_t **)a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = a1;
  *(_DWORD *)(a1 + 40) = 0;
  result = apr_hash_next((apr_hash_index_t *)(a1 + 16));
  if (result)
  {
    v7 = result;
    do
    {
      v8 = *(_OWORD **)(*((_QWORD *)v7 + 1) + 32);
      v9 = apr_palloc(v5, 0x20uLL);
      v10 = v8[1];
      *v9 = *v8;
      v9[1] = v10;
      v11 = v9 + 1;
      if (a2 != 1)
        v11 = v9;
      if (a2 == 2)
        v12 = (char *)v9 + 24;
      else
        v12 = v11;
      apr_hash_set(a3, v12, 8, v9);
      result = apr_hash_next(v7);
      v7 = result;
    }
    while (result);
  }
  return result;
}

uint64_t GTCaptureArchive_cleanup(uint64_t a1)
{
  munmap(*(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
  return 0;
}

size_t GTCaptureArchive_getFileWithFilename(uint64_t a1, char *a2)
{
  uint64_t v4;
  size_t result;
  unsigned int v6;
  size_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *i;

  v4 = *find_entry(*(_QWORD *)(a1 + 88), a2, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (!v4 || (result = *(_QWORD *)(v4 + 32)) == 0)
  {
    result = strlen(a2);
    if (result)
    {
      v6 = -1640531527;
      v7 = result - 1;
      if (result == 1)
        goto LABEL_8;
      v8 = 0;
      do
      {
        v9 = v6 + a2[v8];
        v10 = (v9 << 16) ^ (a2[v8 + 1] << 11);
        v6 = (v10 ^ v9) + ((v10 ^ v9) >> 11);
        v8 += 2;
      }
      while (v8 < v7);
      if ((result & 1) != 0)
LABEL_8:
        v6 = ((v6 + a2[v7]) ^ ((v6 + a2[v7]) << 11))
           + (((v6 + a2[v7]) ^ ((v6 + a2[v7]) << 11)) >> 17);
      v11 = (v6 ^ (8 * v6)) + ((v6 ^ (8 * v6)) >> 5);
      v12 = (v11 ^ (4 * v11)) + ((v11 ^ (4 * v11)) >> 15);
      v13 = v12 ^ (v12 << 10);
      if (!v13)
        v13 = 0x40000000;
      v14 = *(_DWORD *)(a1 + 56);
      v15 = *(_QWORD *)(a1 + 32);
      v16 = v13 % v14;
      v17 = (int)(v13 % v14);
      while (1)
      {
        v18 = *(_DWORD *)(v15 + 12 * v17);
        if (v18 == -1)
          return 0;
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
        if (!strcmp(a2, *(const char **)(v19 + 8 * *(unsigned int *)(v15 + 12 * v17 + 4))))
          break;
        if (v14 <= ++v17)
        {
          if (v16)
          {
            v20 = 0;
            for (i = (unsigned int *)(v15 + 4); ; i += 3)
            {
              v18 = *(i - 1);
              if (v18 == -1)
                break;
              if (!strcmp(a2, *(const char **)(v19 + 8 * *i)))
                return *(_QWORD *)(a1 + 40) + 24 * v18;
              result = 0;
              if (++v20 >= (unint64_t)v16)
                return result;
            }
          }
          return 0;
        }
      }
      return *(_QWORD *)(a1 + 40) + 24 * v18;
    }
  }
  return result;
}

_QWORD *GTCaptureArchiveDecompressor_create(apr_pool_t *a1)
{
  _QWORD *v2;
  apr_allocator_t *v3;
  _QWORD *v4;
  apr_size_t v5;

  v2 = apr_palloc(a1, 0x10uLL);
  v4 = v2;
  if (v2)
  {
    *v2 = 0;
    v2[1] = 0;
  }
  apr_pool_create_ex((apr_pool_t **)v2, a1, 0, v3);
  v5 = compression_decode_scratch_buffer_size(COMPRESSION_ZLIB);
  v4[1] = apr_palloc(a1, v5);
  return v4;
}

void *GTCaptureArchive_mapDataSeperateFile(uint64_t a1, unsigned int *a2, apr_pool_t *a3, int *a4)
{
  unsigned int v7;
  int v8;
  const char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v19;
  _QWORD *v20;
  apr_status_t (__cdecl *v21)(void *);
  int v22;
  int v23;
  const char *v24;
  __int128 v25;
  __int128 v26;

  v7 = a2[4];
  if (!a4)
  {
    if ((v7 & 2) == 0)
      return 0;
    v10 = a2[1];
    v11 = *(_QWORD *)(a1 + 48);
    if (v10 >= *(_DWORD *)(v11 + 12))
      return 0;
    goto LABEL_8;
  }
  if ((v7 & 2) != 0)
  {
    v10 = a2[1];
    v11 = *(_QWORD *)(a1 + 48);
    if (v10 >= *(_DWORD *)(v11 + 12))
    {
      v16 = *a4;
      v25 = 0u;
      v26 = 0u;
      v22 = v16;
      v23 = 500;
      v9 = "0 <= entry->name_entry && entry->name_entry < self->index.string_table->nelts";
      goto LABEL_12;
    }
LABEL_8:
    v12 = gt_filepath_merge(*(const char **)a1, *(const char **)(*(_QWORD *)(v11 + 24) + 8 * v10), a3);
    v13 = open(v12, 0);
    v14 = v13;
    if (a4)
    {
      if (v13 < 0)
      {
        v15 = *a4;
        v25 = 0u;
        v26 = 0u;
        v22 = v15;
        v23 = 500;
        v9 = "0 <= fd";
        goto LABEL_12;
      }
    }
    else if (v13 < 0)
    {
      return 0;
    }
    v17 = mmap(0, *a2, 1, 2, v13, 0);
    v19 = *a2;
    close(v14);
    v20 = apr_palloc(a3, 0x10uLL);
    *v20 = v17;
    v20[1] = v19;
    apr_pool_cleanup_register(a3, v20, (apr_status_t (__cdecl *)(void *))GTData_munmap, v21);
    return v17;
  }
  v8 = *a4;
  v25 = 0u;
  v26 = 0u;
  v22 = v8;
  v23 = 500;
  v9 = "entry->flags & 0x00000002";
LABEL_12:
  v24 = v9;
  GTError_addError(a4, (uint64_t)&v22);
  return 0;
}

uint64_t GTData_munmap(uint64_t a1)
{
  munmap(*(void **)a1, *(_QWORD *)(a1 + 8));
  return 0;
}

unint64_t GTCaptureArchive_fileBackingStore(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  unint64_t v4;
  int v5;
  const char *v6;
  int v8;
  int v9;
  int v10;
  const char *v11;
  __int128 v12;
  __int128 v13;

  v3 = *(_DWORD *)(a2 + 16);
  if (!a3)
  {
    if ((v3 & 2) != 0)
      return 0;
    v4 = *(_QWORD *)(a2 + 8);
    if (v4 > *(_QWORD *)(a1 + 72))
      return 0;
    return *(_QWORD *)(a1 + 64) + v4;
  }
  if ((v3 & 2) != 0)
  {
    v8 = *a3;
    v12 = 0u;
    v13 = 0u;
    v9 = v8;
    v10 = 500;
    v6 = "!(entry->flags & 0x00000002)";
    goto LABEL_9;
  }
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 <= *(_QWORD *)(a1 + 72))
    return *(_QWORD *)(a1 + 64) + v4;
  v5 = *a3;
  v12 = 0u;
  v13 = 0u;
  v9 = v5;
  v10 = 500;
  v6 = "entry->storage_offset <= archive->backingStore.length";
LABEL_9:
  v11 = v6;
  GTError_addError(a3, (uint64_t)&v9);
  return 0;
}

void GTCaptureArchive_fillBufferCompressedDeflate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5, int *a6)
{
  int v12;
  int v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  __int128 v21;
  __int128 v22;

  if (!a2 && a6)
  {
    v12 = *a6;
    v21 = 0u;
    v22 = 0u;
    v18 = v12;
    v19 = 500;
    v20 = "decompressor != NULL";
    GTError_addError(a6, (uint64_t)&v18);
LABEL_14:
    bzero(a4, a5);
    return;
  }
  if (!a2)
    goto LABEL_14;
  if (a6 && *(_DWORD *)(a3 + 4) <= 5u)
  {
    v13 = *a6;
    v21 = 0u;
    v22 = 0u;
    v18 = v13;
    v19 = 500;
    v20 = "ZLIB_HEADER_SIZE + ZLIB_ADLER_SIZE <= entry->storage_size";
    GTError_addError(a6, (uint64_t)&v18);
  }
  if (*(_DWORD *)(a3 + 4) < 6u)
    goto LABEL_14;
  v14 = GTCaptureArchive_fileBackingStore(a1, a3, a6);
  if (!v14)
    goto LABEL_14;
  v15 = compression_decode_buffer((uint8_t *)a4, a5, (const uint8_t *)(v14 + 2), (*(_DWORD *)(a3 + 4) - 6), *(void **)(a2 + 8), COMPRESSION_ZLIB);
  v16 = v15;
  if (a6)
  {
    if (v15 != a5)
    {
      v17 = *a6;
      v21 = 0u;
      v22 = 0u;
      v18 = v17;
      v19 = 500;
      v20 = "total_out == destSize";
      GTError_addError(a6, (uint64_t)&v18);
    }
  }
  if (v16 != a5)
    goto LABEL_14;
}

void GTCaptureArchive_fillBuffer(uint64_t a1, apr_pool_t **a2, char *a3, char *a4, size_t a5, int *a6)
{
  unsigned int *FileWithFilename;
  size_t v12;
  int v13;
  _DWORD v14[2];
  const char *v15;
  __int128 v16;
  __int128 v17;

  FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename(a1, a3);
  v12 = *FileWithFilename;
  if (a6 && v12 < a5)
  {
    v13 = *a6;
    v16 = 0u;
    v17 = 0u;
    v14[0] = v13;
    v14[1] = 500;
    v15 = "destSize <= entry->size";
    GTError_addError(a6, (uint64_t)v14);
    v12 = *FileWithFilename;
  }
  if (v12 >= a5)
  {
    if ((FileWithFilename[4] & 2) != 0)
      GTCaptureArchive_fillBufferSeperateFile(*(const char **)a1, *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 8 * FileWithFilename[1]), a4, a5, *a2, a6);
    else
      GTCaptureArchive_fillBufferCompressedDeflate(a1, (uint64_t)a2, (uint64_t)FileWithFilename, a4, a5, a6);
  }
  else
  {
    bzero(a4, a5);
  }
}

void GTCaptureArchive_fillBufferSeperateFile(const char *a1, const char *a2, char *a3, size_t a4, apr_pool_t *a5, int *a6)
{
  char *v9;
  int v10;
  int v11;
  uint64_t v12;
  size_t v13;
  ssize_t v14;
  char v15;
  int v16;
  _DWORD v17[2];
  const char *v18;
  __int128 v19;
  __int128 v20;

  v9 = gt_filepath_merge(a1, a2, a5);
  v10 = open(v9, 0, 0);
  if (v10 < 0)
  {
    v15 = 0;
    if (!a6)
      goto LABEL_15;
    goto LABEL_13;
  }
  v11 = v10;
  v12 = 0;
  while (1)
  {
    v13 = a4 - v12 >= 0x100000 ? 0x100000 : a4 - v12;
    v14 = read(v11, &a3[v12], v13);
    if ((unint64_t)(v14 + 1) < 2)
      break;
    v12 += v14;
    if (v12 == a4)
    {
      v15 = 1;
      goto LABEL_10;
    }
  }
  v15 = 0;
LABEL_10:
  close(v11);
  if (a6)
  {
LABEL_13:
    if ((v15 & 1) == 0)
    {
      v16 = *a6;
      v19 = 0u;
      v20 = 0u;
      v17[0] = v16;
      v17[1] = 500;
      v18 = "mapped";
      GTError_addError(a6, (uint64_t)v17);
    }
  }
LABEL_15:
  if ((v15 & 1) == 0)
    bzero(a3, a4);
}

char *GTCaptureArchive_readData(const char **a1, apr_pool_t **a2, char *a3, apr_pool_t *a4, int *a5)
{
  unsigned int *FileWithFilename;
  uint64_t v11;
  unsigned int v12;
  apr_size_t v13;
  char *v14;
  _OWORD v16[3];
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (!a3)
    return 0;
  FileWithFilename = (unsigned int *)GTCaptureArchive_getFileWithFilename((uint64_t)a1, a3);
  if (!FileWithFilename)
    return 0;
  v11 = (uint64_t)FileWithFilename;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  v12 = FileWithFilename[4];
  v13 = *FileWithFilename;
  v14 = (char *)apr_palloc(a4, v13);
  if ((v12 & 2) != 0)
    GTCaptureArchive_fillBufferSeperateFile(*a1, a3, v14, v13, *a2, (int *)&v17);
  else
    GTCaptureArchive_fillBufferCompressedDeflate((uint64_t)a1, (uint64_t)a2, v11, v14, v13, (int *)&v17);
  if (DWORD1(v17))
  {
    v16[0] = v17;
    v16[1] = v18;
    v16[2] = v19;
    GTError_addError(a5, (uint64_t)v16);
    return 0;
  }
  return v14;
}

unsigned int *GTCaptureArchive_mapData(uint64_t a1, uint64_t a2, char *a3, apr_pool_t *a4)
{
  unsigned int *result;
  uint64_t v8;
  apr_size_t v9;
  void *v10;
  _OWORD v11[3];

  result = (unsigned int *)GTCaptureArchive_getFileWithFilename(a1, a3);
  if (result)
  {
    v8 = (uint64_t)result;
    memset(v11, 0, sizeof(v11));
    if ((result[4] & 2) != 0)
    {
      v10 = GTCaptureArchive_mapDataSeperateFile(a1, result, a4, (int *)v11);
    }
    else
    {
      v9 = *result;
      v10 = apr_palloc(a4, v9);
      GTCaptureArchive_fillBufferCompressedDeflate(a1, a2, v8, v10, v9, (int *)v11);
    }
    if (DWORD1(v11[0]))
      return 0;
    else
      return (unsigned int *)v10;
  }
  return result;
}

uint64_t GTCaptureArchive_strcmp(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t GTCaptureArchive_filenamesWithPrefix(int a1, const char **a2, char *__s, apr_array_header_t *a4)
{
  uint64_t result;
  size_t v9;
  const char **v10;
  unint64_t v11;
  const char **v12;
  const char **v13;
  const char *v14;
  const char *v15;

  result = strlen(__s);
  v9 = result;
  v10 = &a2[a1];
  if (a1 >= 1)
  {
    v11 = a1;
    do
    {
      v12 = &a2[v11 >> 1];
      v14 = *v12;
      v13 = v12 + 1;
      result = strncmp(v14, __s, v9);
      if ((int)result >= 0)
      {
        v11 >>= 1;
      }
      else
      {
        a2 = v13;
        v11 += ~(v11 >> 1);
      }
    }
    while ((uint64_t)v11 > 0);
  }
  while (a2 != v10)
  {
    v15 = *a2;
    result = strncmp(*a2, __s, v9);
    if ((_DWORD)result)
      break;
    result = (uint64_t)apr_array_push(a4);
    *(_QWORD *)result = v15;
    ++a2;
  }
  return result;
}

__n128 DYTraceDecode_CALayer_setAnchorPoint(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  __n128 result;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if ((*(unsigned __int8 *)(a2 + 36) | 4) != 0x74)
    {
      v8 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v8;
      v13 = 500;
      v14 = "*(const char*)bytes == 'p' || *(const char*)bytes == 't'";
      GTError_addError(a4, (uint64_t)&v12);
    }
    if (*(_DWORD *)(a2 + 37) != 6566464)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "(memcmp((const char*)bytes + offset + 1, (\"p@2d\") + 1, sizeof(\"p@2d\") - 1) == 0)";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x1F)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_CALayer_setTransform(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  __int128 v21;
  __int128 v22;

  if (a4)
  {
    if ((*(unsigned __int8 *)(a2 + 36) | 4) != 0x74)
    {
      v8 = *a4;
      v21 = 0u;
      v22 = 0u;
      v18 = v8;
      v19 = 500;
      v20 = "*(const char*)bytes == 'p' || *(const char*)bytes == 't'";
      GTError_addError(a4, (uint64_t)&v18);
    }
    if (*(_DWORD *)(a2 + 37) != 1681273152 || *(_DWORD *)(a2 + 40) != 6579300)
    {
      v10 = *a4;
      v21 = 0u;
      v22 = 0u;
      v18 = v10;
      v19 = 500;
      v20 = "(memcmp((const char*)bytes + offset + 1, (\"p@16ddd\") + 1, sizeof(\"p@16ddd\") - 1) == 0)";
      GTError_addError(a4, (uint64_t)&v18);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v11 = *(_OWORD *)(a2 + 52);
  v12 = *(_OWORD *)(a2 + 68);
  v13 = *(_OWORD *)(a2 + 84);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 8) = v11;
  v14 = *(_OWORD *)(a2 + 116);
  v15 = *(_OWORD *)(a2 + 132);
  v16 = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 104) = v16;
  *(_OWORD *)(a1 + 88) = v15;
  *(_OWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 180);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 188);
  if (a4)
  {
    if (a3 <= 0x9F)
    {
      v17 = *a4;
      v21 = 0u;
      v22 = 0u;
      v18 = v17;
      v19 = 500;
      v20 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v18);
    }
  }
}

void DYTraceDecode_CAMetalLayer_setBounds_contentsScale_windowBounds_windowProperties(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7;
  int v8;
  int v10;
  uint64_t v11;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  __int128 v22;
  __int128 v23;

  v7 = a2 + 36;
  v8 = strcmp((const char *)(a2 + 36), "C@4dd@4dulil");
  if (v8)
  {
    if (a4)
    {
      if (*(_QWORD *)v7 != 0x6434406464344043 || *(_DWORD *)(v7 + 8) != 7105653)
      {
        v10 = *a4;
        v22 = 0u;
        v23 = 0u;
        v19 = v10;
        v20 = 500;
        v21 = "memcmp((const char*)bytes + offset, (\"C@4dd@4dull\"), sizeof(\"C@4dd@4dull\")) == 0";
        GTError_addError(a4, (uint64_t)&v19);
      }
    }
    v11 = 12;
  }
  else
  {
    if (a4)
    {
      if (*(_QWORD *)v7 != 0x6434406464344043 || *(_QWORD *)(v7 + 5) != 0x6C696C75643440)
      {
        v13 = *a4;
        v22 = 0u;
        v23 = 0u;
        v19 = v13;
        v20 = 500;
        v21 = "memcmp((const char*)bytes + offset, (\"C@4dd@4dulil\"), sizeof(\"C@4dd@4dulil\")) == 0";
        GTError_addError(a4, (uint64_t)&v19);
      }
    }
    v11 = 16;
  }
  *(_QWORD *)a1 = *(_QWORD *)(v7 + v11);
  v14 = *(_OWORD *)(v7 + v11 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 + v11 + 24);
  *(_OWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 + v11 + 40);
  v15 = *(_OWORD *)(v7 + v11 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v7 + v11 + 48);
  *(_OWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(v7 + v11 + 80);
  v16 = v11 + 88;
  if (v8)
  {
    v17 = v11 | 0x60;
    *(_DWORD *)(a1 + 96) = *(_QWORD *)(v7 + v16);
    if (!a4)
      return;
  }
  else
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v7 + v16);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(v11 + v7 + 92);
    v17 = v11 + 100;
    if (!a4)
      return;
  }
  if (v17 > a3)
  {
    v18 = *a4;
    v22 = 0u;
    v23 = 0u;
    v19 = v18;
    v20 = 500;
    v21 = "offset <= length";
    GTError_addError(a4, (uint64_t)&v19);
  }
}

const char *AppendString_11072(const char **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  const char *v5;
  size_t v6;

  v4 = *a3;
  if (*(_QWORD *)(a2 + *a3) == g_null_string_token_11073)
    v5 = 0;
  else
    v5 = (const char *)(a2 + *a3);
  *a1 = v5;
  if (v5)
    v6 = strlen(v5) + 1;
  else
    v6 = 8;
  *a3 = v6 + v4;
  return v5;
}

void DYTraceDecode_InternalData(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  unsigned __int16 *v8;
  size_t v9;
  int v10;
  int v11;
  const char *v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v22;
  const char *v23;
  int v25;
  int v26;
  unint64_t v27;
  int v29;
  int v30;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  int v43;
  int v44;
  const char *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v8 = (unsigned __int16 *)(a2 + 36);
  v9 = (strlen((const char *)(a2 + 36)) & 0xFFFFFFFFFFFFFFFCLL) + a2 + 36;
  *(_QWORD *)a1 = *(_QWORD *)(v9 + 4);
  v10 = *(_DWORD *)(v9 + 12);
  *(_DWORD *)(a1 + 8) = v10;
  v48 = 0;
  switch(v10)
  {
    case 101:
      v20 = strcmp((const char *)v8, "CiulSlS");
      *(_QWORD *)(a1 + 40) = 0;
      if (v20)
      {
        if (!a4)
          goto LABEL_89;
        if (*(_DWORD *)v8 == 1819633987 && *(_DWORD *)((char *)v8 + 3) == 7099244)
          goto LABEL_89;
        v22 = *a4;
        v46 = 0u;
        v47 = 0u;
        v43 = v22;
        v44 = 500;
        v23 = "memcmp((const char*)bytes + offset, (\"CiulSl\"), sizeof(\"CiulSl\")) == 0";
      }
      else
      {
        if (!a4 || *(_QWORD *)v8 == 0x536C536C756943)
          goto LABEL_89;
        v41 = *a4;
        v46 = 0u;
        v47 = 0u;
        v43 = v41;
        v44 = 500;
        v23 = "memcmp((const char*)bytes + offset, (\"CiulSlS\"), sizeof(\"CiulSlS\")) == 0";
      }
      v45 = v23;
      GTError_addError(a4, (uint64_t)&v43);
LABEL_89:
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 56);
      v48 = 28;
      *(_QWORD *)(a1 + 32) = AppendString_11072((const char **)(a1 + 32), (uint64_t)v8, &v48);
      v42 = (v48 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v42);
      v39 = v42 + 8;
      v48 = v39;
      if (v20)
        goto LABEL_79;
      *(_QWORD *)(a1 + 40) = AppendString_11072((const char **)(a1 + 40), (uint64_t)v8, &v48);
      goto LABEL_78;
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 112:
    case 113:
    case 114:
    case 115:
    case 121:
    case 122:
    case 123:
    case 124:
    case 130:
    case 131:
    case 133:
    case 134:
      goto LABEL_16;
    case 107:
      if (a4)
      {
        if (*(_DWORD *)v8 != 1819633987 || *(_DWORD *)((char *)v8 + 3) != 7107948)
        {
          v25 = *a4;
          v46 = 0u;
          v47 = 0u;
          v43 = v25;
          v44 = 500;
          v45 = "memcmp((const char*)bytes + offset, (\"Ciulul\"), sizeof(\"Ciulul\")) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }
      }
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 64);
      v18 = 36;
      goto LABEL_81;
    case 108:
      if (a4 && *(_DWORD *)v8 ^ 0x53746943 | *((unsigned __int8 *)v8 + 4))
      {
        v26 = *a4;
        v46 = 0u;
        v47 = 0u;
        v43 = v26;
        v44 = 500;
        v45 = "memcmp((const char*)bytes + offset, (\"CitS\"), sizeof(\"CitS\")) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 56);
      v27 = 28;
      goto LABEL_76;
    case 109:
    case 120:
      if (a4 && *(_QWORD *)v8 ^ 0x626C756C75536943 | *((unsigned __int8 *)v8 + 8))
      {
        v13 = *a4;
        v46 = 0u;
        v47 = 0u;
        v43 = v13;
        v44 = 500;
        v45 = "memcmp((const char*)bytes + offset, (\"CiSululb\"), sizeof(\"CiSululb\")) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 56);
      v48 = 24;
      *(_QWORD *)(a1 + 32) = AppendString_11072((const char **)(a1 + 32), (uint64_t)v8, &v48);
      v14 = v48;
      v15 = (char *)v8 + ((v48 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)v15;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)v15 + 1);
      *(_BYTE *)(a1 + 40) = v15[16];
      v16 = v14 + 23;
      goto LABEL_80;
    case 110:
      if (a4)
      {
        if (*(_DWORD *)v8 != 1819633987 || v8[2] != 105)
        {
          v29 = *a4;
          v46 = 0u;
          v47 = 0u;
          v43 = v29;
          v44 = 500;
          v45 = "memcmp((const char*)bytes + offset, (\"Ciuli\"), sizeof(\"Ciuli\")) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }
      }
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 56);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 64);
      v18 = 32;
      goto LABEL_81;
    case 111:
      if (!a4 || *(_DWORD *)v8 == 5597507)
        goto LABEL_6;
      v30 = *a4;
      v46 = 0u;
      v47 = 0u;
      v43 = v30;
      v44 = 500;
      v12 = "memcmp((const char*)bytes + offset, (\"CiU\"), sizeof(\"CiU\")) == 0";
      goto LABEL_5;
    case 116:
      if (a4)
      {
        if (*(_DWORD *)v8 != 1968531779 || v8[2] != 108)
        {
          v32 = *a4;
          v46 = 0u;
          v47 = 0u;
          v43 = v32;
          v44 = 500;
          v45 = "memcmp((const char*)bytes + offset, (\"CiUul\"), sizeof(\"CiUul\")) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }
      }
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      v48 = 20;
      *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v48);
      v33 = (v48 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v33);
      v18 = v33 + 8;
      goto LABEL_81;
    case 117:
    case 127:
    case 128:
    case 129:
    case 132:
      if (!a4 || *(_DWORD *)v8 == 5466435)
        goto LABEL_6;
      v11 = *a4;
      v46 = 0u;
      v47 = 0u;
      v43 = v11;
      v44 = 500;
      v12 = "memcmp((const char*)bytes + offset, (\"CiS\"), sizeof(\"CiS\")) == 0";
LABEL_5:
      v45 = v12;
      GTError_addError(a4, (uint64_t)&v43);
LABEL_6:
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
      v48 = 16;
      *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v48);
      goto LABEL_78;
    case 118:
      if (a4 && *(_DWORD *)v8 ^ 0x6C756943 | *((unsigned __int8 *)v8 + 4))
      {
        v34 = *a4;
        v46 = 0u;
        v47 = 0u;
        v43 = v34;
        v44 = 500;
        v45 = "memcmp((const char*)bytes + offset, (\"Ciul\"), sizeof(\"Ciul\")) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 56);
      goto LABEL_67;
    case 119:
      if (a4 && *(_QWORD *)v8 != 0x53535369756943)
      {
        v35 = *a4;
        v46 = 0u;
        v47 = 0u;
        v43 = v35;
        v44 = 500;
        v45 = "memcmp((const char*)bytes + offset, (\"CiuiSSS\"), sizeof(\"CiuiSSS\")) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 56);
      v48 = 24;
      *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v48);
      *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v48);
      *(_QWORD *)(a1 + 32) = AppendString_11072((const char **)(a1 + 32), (uint64_t)v8, &v48);
      goto LABEL_78;
    case 125:
      if (a4 && *(_DWORD *)v8 ^ 0x6C756943 | *((unsigned __int8 *)v8 + 4))
      {
        v36 = *a4;
        v46 = 0u;
        v47 = 0u;
        v43 = v36;
        v44 = 500;
        v45 = "memcmp((const char*)bytes + offset, (\"Ciul\"), sizeof(\"Ciul\")) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 56);
LABEL_67:
      v18 = 28;
      goto LABEL_81;
    case 126:
      if (a4 && *(_DWORD *)v8 ^ 0x53536943 | *((unsigned __int8 *)v8 + 4))
      {
        v37 = *a4;
        v46 = 0u;
        v47 = 0u;
        v43 = v37;
        v44 = 500;
        v45 = "memcmp((const char*)bytes + offset, (\"CiSS\"), sizeof(\"CiSS\")) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      v48 = 20;
      *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v48);
      goto LABEL_77;
    case 135:
      if (a4 && *(_DWORD *)v8 ^ 0x53536943 | *((unsigned __int8 *)v8 + 4))
      {
        v38 = *a4;
        v46 = 0u;
        v47 = 0u;
        v43 = v38;
        v44 = 500;
        v45 = "memcmp((const char*)bytes + offset, (\"CiSS\"), sizeof(\"CiSS\")) == 0";
        GTError_addError(a4, (uint64_t)&v43);
      }
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
      v48 = 20;
      *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v48);
      v27 = (v48 + 3) & 0xFFFFFFFFFFFFFFFCLL;
LABEL_76:
      v48 = v27;
LABEL_77:
      *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v48);
LABEL_78:
      v39 = v48;
LABEL_79:
      v16 = v39 + 3;
LABEL_80:
      v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_81;
    default:
      if (v10 == 7)
      {
        if (a4 && *(_DWORD *)v8 ^ 0x69756943 | *((unsigned __int8 *)v8 + 4))
        {
          v17 = *a4;
          v46 = 0u;
          v47 = 0u;
          v43 = v17;
          v44 = 500;
          v45 = "memcmp((const char*)bytes + offset, (\"Ciui\"), sizeof(\"Ciui\")) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }
        *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 56);
        v18 = 24;
      }
      else
      {
LABEL_16:
        if (a4 && *v8 ^ 0x6943 | *((unsigned __int8 *)v8 + 2))
        {
          v19 = *a4;
          v46 = 0u;
          v47 = 0u;
          v43 = v19;
          v44 = 500;
          v45 = "memcmp((const char*)bytes + offset, (\"Ci\"), sizeof(\"Ci\")) == 0";
          GTError_addError(a4, (uint64_t)&v43);
        }
        *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
        v18 = 16;
      }
LABEL_81:
      if (a4)
      {
        if (v18 > a3)
        {
          v40 = *a4;
          v46 = 0u;
          v47 = 0u;
          v43 = v40;
          v44 = 500;
          v45 = "offset <= length";
          GTError_addError(a4, (uint64_t)&v43);
        }
      }
      return;
  }
}

void DYTraceDecode_MTLAccelerationStructure_allocatedSize(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;

  v8 = (_DWORD *)(a2 + 36);
  if (strcmp((const char *)(a2 + 36), "Cui"))
  {
    if (a4 && *v8 != 7107907)
    {
      v9 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v9;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"Cul\"), sizeof(\"Cul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    *a1 = *(_QWORD *)(a2 + 40);
    a1[1] = *(_QWORD *)(a2 + 48);
    v10 = 20;
    if (!a4)
      return;
LABEL_11:
    if (v10 > a3)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
    return;
  }
  if (a4 && *v8 != 6911299)
  {
    v11 = *a4;
    v16 = 0u;
    v17 = 0u;
    v13 = v11;
    v14 = 500;
    v15 = "memcmp((const char*)bytes + offset, (\"Cui\"), sizeof(\"Cui\")) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }
  *a1 = *(_QWORD *)(a2 + 40);
  a1[1] = *(unsigned int *)(a2 + 48);
  v10 = 16;
  if (a4)
    goto LABEL_11;
}

void DYTraceDecode_MTLBuffer_newTextureWithDescriptor_offset_bytesPerRow(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v7 = a2 + 36;
  if (!strcmp((const char *)(a2 + 36), "CUululul"))
  {
    if (a4 && *(_QWORD *)v7 ^ 0x6C756C756C755543 | *(unsigned __int8 *)(v7 + 8))
    {
      v12 = *a4;
      v21 = 0u;
      v22 = 0u;
      v18 = v12;
      v19 = 500;
      v20 = "memcmp((const char*)bytes + offset, (\"CUululul\"), sizeof(\"CUululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v18);
    }
    v10 = 12;
    v11 = 24;
  }
  else
  {
    if (a4)
    {
      if (*(_DWORD *)v7 != 1819628867 || *(_DWORD *)(v7 + 3) != 7107948)
      {
        v9 = *a4;
        v21 = 0u;
        v22 = 0u;
        v18 = v9;
        v19 = 500;
        v20 = "memcmp((const char*)bytes + offset, (\"CUulul\"), sizeof(\"CUulul\")) == 0";
        GTError_addError(a4, (uint64_t)&v18);
      }
    }
    v10 = 8;
    v11 = 16;
  }
  *(_QWORD *)a1 = *(_QWORD *)(v7 + v10);
  v23 = v10 + 8;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), v7, &v23);
  v13 = (v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v7 + v13);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 + v13 + 8);
  v14 = v13 + v11;
  if (a4 && *(_WORD *)(v7 + v14) != 116)
  {
    v15 = *a4;
    v21 = 0u;
    v22 = 0u;
    v18 = v15;
    v19 = 500;
    v20 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v18);
  }
  v16 = (v14 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v7 + v16);
  if (a4)
  {
    if (v16 + 8 > a3)
    {
      v17 = *a4;
      v21 = 0u;
      v22 = 0u;
      v18 = v17;
      v19 = 500;
      v20 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v18);
    }
  }
}

void DYTraceDecode_MTLBuffer_setPurgeableState(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      v8 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v8;
      v11 = 500;
      v12 = "memcmp((const char*)bytes + offset, (\"Cul\"), sizeof(\"Cul\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *a1 = *(_QWORD *)(a2 + 40);
    a1[2] = *(_QWORD *)(a2 + 48);
    if (a3 <= 0x13)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 40);
    a1[2] = *(_QWORD *)(a2 + 48);
  }
}

void DYTraceDecode_MTLCommandQueue_continueCommandBuffer_retainReferences(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 6911043)
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cti\"), sizeof(\"Cti\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 56);
    if (*(_WORD *)(a2 + 60) != 116)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 64);
    if (a3 <= 0x23)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 64);
  }
}

void DYTraceDecode_MTLComputePipelineState_resourceIndex(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7;
  size_t v8;
  int v9;
  _DWORD v10[2];
  const char *v11;
  __int128 v12;
  __int128 v13;

  v7 = a2 + 36;
  v8 = strlen((const char *)(a2 + 36));
  *a1 = *(_QWORD *)(v8 + v7 + 1);
  a1[1] = *(_QWORD *)(v8 + v7 + 9);
  if (a4)
  {
    if (v8 + 17 > a3)
    {
      v9 = *a4;
      v12 = 0u;
      v13 = 0u;
      v10[0] = v9;
      v10[1] = 500;
      v11 = "offset <= length";
      GTError_addError(a4, (uint64_t)v10);
    }
  }
}

void DYTraceDecode_MTLDevice_newBufferWithLength_options(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8;
  int v9;
  _QWORD *v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  __int128 v22;
  __int128 v23;

  v8 = a2 + 36;
  v9 = strcmp((const char *)(a2 + 36), "Culult");
  a1[4] = 0;
  v10 = a1 + 4;
  if (v9)
  {
    if (a4)
    {
      if (*(_DWORD *)v8 != 1970042179 || *(_WORD *)(v8 + 4) != 108)
      {
        v12 = *a4;
        v22 = 0u;
        v23 = 0u;
        v19 = v12;
        v20 = 500;
        v21 = "memcmp((const char*)bytes + offset, (\"Culul\"), sizeof(\"Culul\")) == 0";
        GTError_addError(a4, (uint64_t)&v19);
      }
    }
    *a1 = *(_QWORD *)(a2 + 44);
    a1[2] = *(_QWORD *)(a2 + 52);
    v10 = a1 + 3;
    v13 = 32;
    v14 = 60;
  }
  else
  {
    if (a4)
    {
      if (*(_DWORD *)v8 != 1970042179 || *(_DWORD *)(v8 + 3) != 7629941)
      {
        v16 = *a4;
        v22 = 0u;
        v23 = 0u;
        v19 = v16;
        v20 = 500;
        v21 = "memcmp((const char*)bytes + offset, (\"Culult\"), sizeof(\"Culult\")) == 0";
        GTError_addError(a4, (uint64_t)&v19);
      }
    }
    *a1 = *(_QWORD *)(a2 + 44);
    a1[2] = *(_QWORD *)(a2 + 52);
    a1[3] = *(_QWORD *)(a2 + 60);
    v13 = 40;
    v14 = 68;
  }
  *v10 = *(_QWORD *)(a2 + v14);
  if (a4)
  {
    if (*(_WORD *)(v8 + v13) != 116)
    {
      v17 = *a4;
      v22 = 0u;
      v23 = 0u;
      v19 = v17;
      v20 = 500;
      v21 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v19);
    }
    a1[1] = *(_QWORD *)(v8 + (v13 | 4));
    if (v13 + 12 > a3)
    {
      v18 = *a4;
      v22 = 0u;
      v23 = 0u;
      v19 = v18;
      v20 = 500;
      v21 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }
  else
  {
    a1[1] = *(_QWORD *)(v8 + (v13 | 4));
  }
}

void DYTraceDecode_MTLDevice_newBufferWithBytes_length_options(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8;
  int v9;
  int v11;
  const char *v12;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  const char *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v8 = a2 + 36;
  v9 = strcmp((const char *)(a2 + 36), "CU<b>ulult");
  *(_QWORD *)(a1 + 40) = 0;
  if (v9)
  {
    if (a4)
    {
      if (*(_QWORD *)v8 != 0x756C753E623C5543 || *(_WORD *)(v8 + 8) != 108)
      {
        v11 = *a4;
        v23 = 0u;
        v24 = 0u;
        v20 = v11;
        v21 = 500;
        v12 = "memcmp((const char*)bytes + offset, (\"CU<b>ulul\"), sizeof(\"CU<b>ulul\")) == 0";
LABEL_14:
        v22 = v12;
        GTError_addError(a4, (uint64_t)&v20);
      }
    }
  }
  else if (a4)
  {
    if (*(_QWORD *)v8 != 0x756C753E623C5543 || *(_QWORD *)(v8 + 3) != 0x746C756C753E62)
    {
      v14 = *a4;
      v23 = 0u;
      v24 = 0u;
      v20 = v14;
      v21 = 500;
      v12 = "memcmp((const char*)bytes + offset, (\"CU<b>ulult\"), sizeof(\"CU<b>ulult\")) == 0";
      goto LABEL_14;
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v25 = 20;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), v8, &v25);
  v15 = (v25 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + v15);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + v15 + 8);
  v16 = v15 + 16;
  if (!v9)
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v8 + v16);
    v16 = v15 + 24;
  }
  if (a4 && *(_WORD *)(v8 + v16) != 116)
  {
    v17 = *a4;
    v23 = 0u;
    v24 = 0u;
    v20 = v17;
    v21 = 500;
    v22 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v20);
  }
  v18 = (v16 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v8 + v18);
  if (a4)
  {
    if (v18 + 8 > a3)
    {
      v19 = *a4;
      v23 = 0u;
      v24 = 0u;
      v20 = v19;
      v21 = 500;
      v22 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v20);
    }
  }
}

void DYTraceDecode_MTLDevice_newComputePipelineStateWithDescriptor_options_reflection_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  *(_QWORD *)(a1 + 32) = 0;
  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628867 || *(_DWORD *)(a2 + 39) != 7631980)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"CUultt\"), sizeof(\"CUultt\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v20 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v20);
  v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)v8 + v11 + 16);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 24) != 116)
  {
    v12 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v12;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  v13 = (v11 + 29) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newComputePipelineStateWithFunction_options_reflection_error(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  a1[4] = 0;
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_DWORD *)(a2 + 39) != 7631980)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Ctultt\"), sizeof(\"Ctultt\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[2] = *(_QWORD *)(a2 + 52);
  a1[3] = *(_QWORD *)(a2 + 60);
  a1[5] = *(_QWORD *)(a2 + 76);
  if (a4)
  {
    if (*(_WORD *)(a2 + 84) != 116)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[1] = *(_QWORD *)(a2 + 88);
    if (a3 <= 0x3B)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    a1[1] = *(_QWORD *)(a2 + 88);
  }
}

void DYTraceDecode_MTLDevice_newComputePipelineStateWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v7;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v7 = a2 + 36;
  if (!strcmp((const char *)(a2 + 36), "CUUt"))
  {
    if (a4 && *(_DWORD *)v7 ^ 0x74555543 | *(unsigned __int8 *)(v7 + 4))
    {
      v11 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v11;
      v17 = 500;
      v18 = "memcmp((const char*)bytes + offset, (\"CUUt\"), sizeof(\"CUUt\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
    v10 = 8;
  }
  else
  {
    if (a4)
    {
      if (*(_QWORD *)v7 != 0x623C553E623C5543 || *(_QWORD *)(v7 + 3) != 0x743E623C553E62)
      {
        v9 = *a4;
        v19 = 0u;
        v20 = 0u;
        v16 = v9;
        v17 = 500;
        v18 = "memcmp((const char*)bytes + offset, (\"CU<b>U<b>t\"), sizeof(\"CU<b>U<b>t\")) == 0";
        GTError_addError(a4, (uint64_t)&v16);
      }
    }
    v10 = 12;
  }
  *(_QWORD *)a1 = *(_QWORD *)(v7 + v10);
  v21 = v10 + 8;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), v7, &v21);
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), v7, &v21);
  v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 + v12);
  if (a4 && *(_WORD *)(v12 + v7 + 8) != 116)
  {
    v13 = *a4;
    v19 = 0u;
    v20 = 0u;
    v16 = v13;
    v17 = 500;
    v18 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  v14 = (v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(v7 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      v15 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v15;
      v17 = 500;
      v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MTLDevice_newIndirectCommandBufferWithDescriptor_maxCommandCount_options(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543 || *(_WORD *)(a2 + 44) != 108)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"CU<b>ulul\"), sizeof(\"CU<b>ulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v20 = 20;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v20);
  v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 116)
  {
    v12 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v12;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  v13 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newLibraryWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;

  v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "C@%llutU<b>t", a1 + 24);
  v8 = strlen(v7);
  *(_QWORD *)a1 = *(_QWORD *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(_QWORD *)(a1 + 16) = &v7[v9];
  v19 = v9 + 8 * *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = AppendString_11072((const char **)(a1 + 32), (uint64_t)v7, (uint64_t *)&v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&v7[v10];
  if (a4 && *(_WORD *)&v7[v10 + 8] != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)&v7[v12];
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newLibraryWithFile_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 7624003)
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CUt\"), sizeof(\"CUt\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  v19 = 12;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newLibraryWithSource_options_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  int v10;
  const char *v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v8 = (_QWORD *)(a2 + 36);
  v9 = strcmp((const char *)(a2 + 36), "CU<b>tt");
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    if (!a4 || *v8 == 0x74553E623C5543)
      goto LABEL_9;
    v10 = *a4;
    v20 = 0u;
    v21 = 0u;
    v17 = v10;
    v18 = 500;
    v11 = "memcmp((const char*)bytes + offset, (\"CU<b>Ut\"), sizeof(\"CU<b>Ut\")) == 0";
  }
  else
  {
    if (!a4 || *v8 == 0x74743E623C5543)
      goto LABEL_9;
    v12 = *a4;
    v20 = 0u;
    v21 = 0u;
    v17 = v12;
    v18 = 500;
    v11 = "memcmp((const char*)bytes + offset, (\"CU<b>tt\"), sizeof(\"CU<b>tt\")) == 0";
  }
  v19 = v11;
  GTError_addError(a4, (uint64_t)&v17);
LABEL_9:
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v22 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v22);
  if (v9)
  {
    *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v22);
    v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  }
  else
  {
    v13 = ((v22 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 8;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v13);
  if (a4 && *(_WORD *)((char *)v8 + v13 + 8) != 116)
  {
    v14 = *a4;
    v20 = 0u;
    v21 = 0u;
    v17 = v14;
    v18 = 500;
    v19 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }
  v15 = (v13 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v15);
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      v16 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v16;
      v18 = 500;
      v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
}

void DYTraceDecode_MTLDevice_newTextureWithDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  unsigned __int16 *v8;
  int v9;
  int v10;
  const char *v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v8 = (unsigned __int16 *)(a2 + 36);
  v9 = strcmp((const char *)(a2 + 36), "CUt");
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    if (a4 && *v8 ^ 0x5543 | *((unsigned __int8 *)v8 + 2))
    {
      v10 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v10;
      v18 = 500;
      v11 = "memcmp((const char*)bytes + offset, (\"CU\"), sizeof(\"CU\")) == 0";
LABEL_8:
      v19 = v11;
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
  else if (a4 && *(_DWORD *)v8 != 7624003)
  {
    v12 = *a4;
    v20 = 0u;
    v21 = 0u;
    v17 = v12;
    v18 = 500;
    v11 = "memcmp((const char*)bytes + offset, (\"CUt\"), sizeof(\"CUt\")) == 0";
    goto LABEL_8;
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  v22 = 12;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v22);
  v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (!v9)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v13);
    v13 += 8;
  }
  if (a4 && *(unsigned __int16 *)((char *)v8 + v13) != 116)
  {
    v14 = *a4;
    v20 = 0u;
    v21 = 0u;
    v17 = v14;
    v18 = 500;
    v19 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }
  v15 = (v13 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v15);
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      v16 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v16;
      v18 = 500;
      v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
}

void DYTraceDecode_MTLFunction_newArgumentEncoderWithBufferIndex_reflection(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  a1[3] = 0;
  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x746C7543 | *(unsigned __int8 *)(a2 + 40))
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cult\"), sizeof(\"Cult\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(_QWORD *)(a2 + 41);
    a1[2] = *(_QWORD *)(a2 + 49);
    if (*(_WORD *)(a2 + 65) != 116)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(_QWORD *)(a2 + 68);
    if (a3 <= 0x27)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 41);
    a1[2] = *(_QWORD *)(a2 + 49);
    a1[1] = *(_QWORD *)(a2 + 68);
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setVertexAmplificationCount_viewMappings(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = a2 + 36;
  v9 = strcmp((const char *)(a2 + 36), "Cult");
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    if (a4 && *(_QWORD *)v8 != 0x3E623C556C7543)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"CulU<b>\"), sizeof(\"CulU<b>\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
    v20 = 24;
    *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), v8, &v20);
    v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  }
  else
  {
    if (a4 && *(_DWORD *)v8 ^ 0x746C7543 | *(unsigned __int8 *)(v8 + 4))
    {
      v12 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v12;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"Cult\"), sizeof(\"Cult\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
    v11 = 32;
    if (a4 && *(_QWORD *)(a2 + 60))
    {
      v13 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v13;
      v16 = 500;
      v17 = "viewMappings == 0";
      GTError_addError(a4, (uint64_t)&v15);
      v11 = 32;
    }
  }
  if (a4)
  {
    if (v11 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLLibrary_newFunctionWithName_constantValues_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x74555343 | *(unsigned __int8 *)(a2 + 40))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CSUt\"), sizeof(\"CSUt\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v19 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLLibrary_newIntersectionFunctionWithDescriptor_completionHandler(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1953781059 || *(_WORD *)(a2 + 40) != 116)
    {
      v10 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v10;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"CUttt\"), sizeof(\"CUttt\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 42);
  v18 = 14;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v18);
  v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11 + 16);
  if (a4)
  {
    if (v11 + 24 > a3)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLPipelineLibrary_newComputePipelineStateWithName_options_reflection_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  *(_QWORD *)(a1 + 32) = 0;
  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628355 || *(_DWORD *)(a2 + 39) != 7631980)
    {
      v10 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v10;
      v17 = 500;
      v18 = "memcmp((const char*)bytes + offset, (\"CSultt\"), sizeof(\"CSultt\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v21 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v21);
  v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  v12 = (v11 + 19) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)v8 + v12);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 8) != 116)
  {
    v13 = *a4;
    v19 = 0u;
    v20 = 0u;
    v16 = v13;
    v17 = 500;
    v18 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  v14 = (v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      v15 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v15;
      v17 = 500;
      v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

__n128 DYTraceDecode_MTLRenderCommandEncoder_setScissorRect(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  __n128 result;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x6C344043 | *(unsigned __int8 *)(a2 + 40))
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"C@4l\"), sizeof(\"C@4l\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    result = *(__n128 *)(a2 + 52);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 68);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x2F)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    result = *(__n128 *)(a2 + 52);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 68);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_MTLRenderCommandEncoder_setScissorRects_count(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x6C755543 | *(unsigned __int8 *)(a2 + 40))
  {
    v9 = *a4;
    v15 = 0u;
    v16 = 0u;
    v12 = v9;
    v13 = 500;
    v14 = "memcmp((const char*)bytes + offset, (\"CUul\"), sizeof(\"CUul\")) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v17 = 16;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v17);
  v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)((char *)v8 + v10);
  if (a4)
  {
    if (v10 + 8 > a3)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLTexture_getBytes_bytesPerRow_bytesPerImage_fromRegion_mipmapLevel_slice(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8;
  BOOL v9;
  int v11;
  uint64_t v12;
  BOOL v13;
  int v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  int v20;
  int v21;
  const char *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v8 = a2 + 36;
  if (!strcmp((const char *)(a2 + 36), "CU<b>ulul@6ulululul"))
  {
    if (a4)
    {
      v13 = *(_QWORD *)v8 == 0x756C753E623C5543 && *(_QWORD *)(v8 + 8) == 0x756C756C7536406CLL;
      if (!v13 || *(_DWORD *)(v8 + 16) != 7107948)
      {
        v15 = *a4;
        v23 = 0u;
        v24 = 0u;
        v20 = v15;
        v21 = 500;
        v22 = "memcmp((const char*)bytes + offset, (\"CU<b>ulul@6ulululul\"), sizeof(\"CU<b>ulul@6ulululul\")) == 0";
        GTError_addError(a4, (uint64_t)&v20);
      }
    }
    v12 = 88;
  }
  else
  {
    if (a4)
    {
      v9 = *(_QWORD *)v8 == 0x756C753E623C5543 && *(_QWORD *)(v8 + 8) == 0x756C756C7536406CLL;
      if (!v9 || *(_WORD *)(v8 + 16) != 108)
      {
        v11 = *a4;
        v23 = 0u;
        v24 = 0u;
        v20 = v11;
        v21 = 500;
        v22 = "memcmp((const char*)bytes + offset, (\"CU<b>ulul@6ululul\"), sizeof(\"CU<b>ulul@6ululul\")) == 0";
        GTError_addError(a4, (uint64_t)&v20);
      }
    }
    v12 = 80;
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 56);
  v25 = 28;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), v8, &v25);
  v16 = (v25 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 + v16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 + v16 + 8);
  v17 = *(_OWORD *)(v8 + v16 + 16);
  v18 = *(_OWORD *)(v8 + v16 + 48);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v8 + v16 + 32);
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 32) = v17;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(v8 + v16 + 64);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(v8 + v16 + 72);
  if (a4)
  {
    if (v16 + v12 > a3)
    {
      v19 = *a4;
      v23 = 0u;
      v24 = 0u;
      v20 = v19;
      v21 = 500;
      v22 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v20);
    }
  }
}

void DYTraceDecode_MTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  uint64_t v8;
  int v9;
  BOOL v10;
  int v12;
  const char *v13;
  BOOL v14;
  int v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  const char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v8 = a2 + 36;
  v9 = strcmp((const char *)(a2 + 36), "C@6ulululU<b>ulul");
  if (v9)
  {
    if (a4)
    {
      v10 = *(_QWORD *)v8 == 0x756C756C75364043 && *(_QWORD *)(v8 + 8) == 0x756C753E623C556CLL;
      if (!v10 || *(_DWORD *)(v8 + 16) != 7107948)
      {
        v12 = *a4;
        v25 = 0u;
        v26 = 0u;
        v22 = v12;
        v23 = 500;
        v13 = "memcmp((const char*)bytes + offset, (\"C@6ulululU<b>ululul\"), sizeof(\"C@6ulululU<b>ululul\")) == 0";
LABEL_20:
        v24 = v13;
        GTError_addError(a4, (uint64_t)&v22);
      }
    }
  }
  else if (a4)
  {
    v14 = *(_QWORD *)v8 == 0x756C756C75364043 && *(_QWORD *)(v8 + 8) == 0x756C753E623C556CLL;
    if (!v14 || *(_WORD *)(v8 + 16) != 108)
    {
      v16 = *a4;
      v25 = 0u;
      v26 = 0u;
      v22 = v16;
      v23 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"C@6ulululU<b>ulul\"), sizeof(\"C@6ulululU<b>ulul\")) == 0";
      goto LABEL_20;
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 56);
  v17 = *(_OWORD *)(a2 + 64);
  v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 24) = v18;
  *(_OWORD *)(a1 + 8) = v17;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 120);
  v27 = 92;
  *(_QWORD *)(a1 + 72) = AppendString_11072((const char **)(a1 + 72), v8, &v27);
  v19 = (v27 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(v8 + v19);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(v8 + v19 + 8);
  v20 = v19 + 16;
  if (v9)
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(v8 + v20);
    v20 = v19 + 24;
    if (!a4)
      return;
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
    if (!a4)
      return;
  }
  if (v20 > a3)
  {
    v21 = *a4;
    v25 = 0u;
    v26 = 0u;
    v22 = v21;
    v23 = 500;
    v24 = "offset <= length";
    GTError_addError(a4, (uint64_t)&v22);
  }
}

void DYTraceDecode_Boundary_Frame(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_QWORD *)(a2 + 36) != 0x74747474747443)
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Ctttttt\"), sizeof(\"Ctttttt\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[1] = *(_QWORD *)(a2 + 52);
  a1[2] = *(_QWORD *)(a2 + 60);
  a1[3] = *(_QWORD *)(a2 + 68);
  a1[4] = *(_QWORD *)(a2 + 76);
  a1[5] = *(_QWORD *)(a2 + 84);
  a1[6] = *(_QWORD *)(a2 + 92);
  if (a4)
  {
    if (a3 <= 0x3F)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_CAMetalDrawable_dealloc(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      v8 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v8;
      v11 = 500;
      v12 = "memcmp((const char*)bytes + offset, (\"C\"), sizeof(\"C\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *a1 = *(_QWORD *)(a2 + 40);
    if (a3 <= 0xB)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 40);
  }
}

void DYTraceDecode_CAMetalDrawable_presentAfterMinimumDuration(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x6443 | *(unsigned __int8 *)(a2 + 38))
    {
      v8 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v8;
      v11 = 500;
      v12 = "memcmp((const char*)bytes + offset, (\"Cd\"), sizeof(\"Cd\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *a1 = *(_QWORD *)(a2 + 40);
    a1[1] = *(_QWORD *)(a2 + 48);
    if (a3 <= 0x13)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 40);
    a1[1] = *(_QWORD *)(a2 + 48);
  }
}

void DYTraceDecode_CAMetalDrawable_texture(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"C\"), sizeof(\"C\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(_QWORD *)(a2 + 40);
    if (*(_WORD *)(a2 + 48) != 116)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(_QWORD *)(a2 + 52);
    if (a3 <= 0x17)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 40);
    a1[1] = *(_QWORD *)(a2 + 52);
  }
}

void DYTraceDecode_CAMetalLayer_setBounds_contentsScale(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1681145923 || *(_WORD *)(a2 + 40) != 100)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"C@4dd\"), sizeof(\"C@4dd\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v10 = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 84);
  if (a4)
  {
    if (a3 <= 0x37)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_CAMetalLayer_setColorspace(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  unsigned __int16 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5543 | *(unsigned __int8 *)(a2 + 38))
  {
    v9 = *a4;
    v14 = 0u;
    v15 = 0u;
    v11 = v9;
    v12 = 500;
    v13 = "memcmp((const char*)bytes + offset, (\"CU\"), sizeof(\"CU\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  v16 = 12;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_CAMetalLayer_setDevice(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 5600323)
  {
    v9 = *a4;
    v14 = 0u;
    v15 = 0u;
    v11 = v9;
    v12 = 500;
    v13 = "memcmp((const char*)bytes + offset, (\"CtU\"), sizeof(\"CtU\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 48);
  v16 = 20;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

__n128 DYTraceDecode_CAMetalLayer_setDrawableSize(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  __n128 result;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x64324043 | *(unsigned __int8 *)(a2 + 40))
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"C@2d\"), sizeof(\"C@2d\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x1F)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_CAMetalLayer_setFramebufferOnly(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 6911299)
    {
      v8 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v8;
      v11 = 500;
      v12 = "memcmp((const char*)bytes + offset, (\"Cui\"), sizeof(\"Cui\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
    if (a3 <= 0xF)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
  }
}

void DYTraceDecode_CAMetalLayer_setPixelFormat(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      v8 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v8;
      v11 = 500;
      v12 = "memcmp((const char*)bytes + offset, (\"Cul\"), sizeof(\"Cul\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *a1 = *(_QWORD *)(a2 + 40);
    a1[1] = *(_QWORD *)(a2 + 48);
    if (a3 <= 0x13)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 40);
    a1[1] = *(_QWORD *)(a2 + 48);
  }
}

void DYTraceDecode_MTLAccelerationStructure_allocationID(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7828803)
    {
      v8 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v8;
      v11 = 500;
      v12 = "memcmp((const char*)bytes + offset, (\"Cuw\"), sizeof(\"Cuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *a1 = *(_QWORD *)(a2 + 40);
    a1[1] = *(_QWORD *)(a2 + 48);
    if (a3 <= 0x13)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 40);
    a1[1] = *(_QWORD *)(a2 + 48);
  }
}

void DYTraceDecode_MTLAccelerationStructure_allocationInfo(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x7577757775777543 || *(_QWORD *)(a2 + 42) != 0x6C756C756C7577)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cuwuwuwululul\"), sizeof(\"Cuwuwuwululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 52);
  a1[1] = *(_QWORD *)(a2 + 60);
  a1[2] = *(_QWORD *)(a2 + 68);
  a1[3] = *(_QWORD *)(a2 + 76);
  a1[4] = *(_QWORD *)(a2 + 84);
  a1[5] = *(_QWORD *)(a2 + 92);
  a1[6] = *(_QWORD *)(a2 + 100);
  if (a4)
  {
    if (a3 <= 0x47)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructure_state(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x7569756975697543 || *(_WORD *)(a2 + 44) != 105)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cuiuiuiui\"), sizeof(\"Cuiuiuiui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x23)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructure_uniqueIdentifier(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"C\"), sizeof(\"C\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(_QWORD *)(a2 + 40);
    if (*(unsigned __int16 *)(a2 + 48) ^ 0x7775 | *(unsigned __int8 *)(a2 + 50))
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"uw\"), sizeof(\"uw\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(_QWORD *)(a2 + 52);
    if (a3 <= 0x17)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 40);
    a1[1] = *(_QWORD *)(a2 + 52);
  }
}

void DYTraceDecode_MTLAccelerationStructure_setLabel(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  unsigned __int16 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5343 | *(unsigned __int8 *)(a2 + 38))
  {
    v9 = *a4;
    v14 = 0u;
    v15 = 0u;
    v11 = v9;
    v12 = 500;
    v13 = "memcmp((const char*)bytes + offset, (\"CS\"), sizeof(\"CS\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  v16 = 12;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructure_setResponsibleProcess(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x6943 | *(unsigned __int8 *)(a2 + 38))
    {
      v8 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v8;
      v11 = 500;
      v12 = "memcmp((const char*)bytes + offset, (\"Ci\"), sizeof(\"Ci\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
    if (a3 <= 0xF)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
  }
}

void DYTraceDecode_MTLAccelerationStructure_setPurgeableState(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cul\"), sizeof(\"Cul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(_QWORD *)(a2 + 40);
    a1[2] = *(_QWORD *)(a2 + 48);
    if (*(unsigned __int16 *)(a2 + 56) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 58))
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(_QWORD *)(a2 + 60);
    if (a3 <= 0x1F)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 40);
    a1[2] = *(_QWORD *)(a2 + 48);
    a1[1] = *(_QWORD *)(a2 + 60);
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_setAccelerationStructureState(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x6975697569757443 || *(_QWORD *)(a2 + 39) != 0x69756975697569)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctuiuiuiui\"), sizeof(\"Ctuiuiuiui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 76);
  if (a4)
  {
    if (a3 <= 0x2B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1951757379 || *(_DWORD *)(a2 + 39) != 7107956)
    {
      v10 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v10;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"CtUtul\"), sizeof(\"CtUtul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
  v18 = 24;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v18);
  v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11 + 8);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_copyAccelerationStructure_toAccelerationStructure(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_DWORD *)(a2 + 36) != 7631939)
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Ctt\"), sizeof(\"Ctt\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(_QWORD *)(a2 + 40);
  a1[1] = *(_QWORD *)(a2 + 48);
  a1[2] = *(_QWORD *)(a2 + 56);
  if (a4)
  {
    if (a3 <= 0x1B)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerationStructures_fromBuffer_serializedBufferOffset_withDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 != 0x556C7574557443)
  {
    v9 = *a4;
    v15 = 0u;
    v16 = 0u;
    v12 = v9;
    v13 = 500;
    v14 = "memcmp((const char*)bytes + offset, (\"CtUtulU\"), sizeof(\"CtUtulU\")) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
  v17 = 24;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v17);
  v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v10);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v10 + 8);
  v17 = v10 + 16;
  *(_QWORD *)(a1 + 40) = AppendString_11072((const char **)(a1 + 40), (uint64_t)v8, (uint64_t *)&v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serializedBufferOffset(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970566211 || *(_WORD *)(a2 + 40) != 108)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cttul\"), sizeof(\"Cttul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[1] = *(_QWORD *)(a2 + 52);
  a1[2] = *(_QWORD *)(a2 + 60);
  a1[3] = *(_QWORD *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serializedBufferOffset_withDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1970566211 || *(_DWORD *)(a2 + 39) != 5598325)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"CttulU\"), sizeof(\"CttulU\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 68);
  v17 = 40;
  *(_QWORD *)(a1 + 32) = AppendString_11072((const char **)(a1 + 32), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 != 0x6C757474557443)
  {
    v9 = *a4;
    v15 = 0u;
    v16 = 0u;
    v12 = v9;
    v13 = 500;
    v14 = "memcmp((const char*)bytes + offset, (\"CtUttul\"), sizeof(\"CtUttul\")) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
  v17 = 24;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v17);
  v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v10);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v10 + 8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)v8 + v10 + 16);
  if (a4)
  {
    if (v10 + 24 > a3)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset_options(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C757474557443 || *(_WORD *)(a2 + 44) != 108)
    {
      v10 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v10;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"CtUttulul\"), sizeof(\"CtUttulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 56);
  v18 = 28;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v18);
  v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11 + 8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)v8 + v11 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)((char *)v8 + v11 + 24);
  if (a4)
  {
    if (v11 + 32 > a3)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_DWORD *)(a2 + 39) != 6911340)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctului\"), sizeof(\"Ctului\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x23)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_updateFence(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x7443 | *(unsigned __int8 *)(a2 + 38))
    {
      v8 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v8;
      v11 = 500;
      v12 = "memcmp((const char*)bytes + offset, (\"Ct\"), sizeof(\"Ct\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *a1 = *(_QWORD *)(a2 + 40);
    a1[1] = *(_QWORD *)(a2 + 48);
    if (a3 <= 0x13)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 40);
    a1[1] = *(_QWORD *)(a2 + 48);
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_useHeaps_count(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _DWORD v12[2];
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v7 = (const char *)(a2 + 36);
  v16 = 0;
  sscanf((const char *)(a2 + 36), "C@%zutul", &v16);
  v8 = strlen(v7);
  v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *a1 = *(_QWORD *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  a1[1] = &v7[v9];
  v10 = v9 + 8 * v16;
  a1[2] = *(_QWORD *)&v7[v10];
  if (a4)
  {
    if (v10 + 8 > a3)
    {
      v11 = *a4;
      v14 = 0u;
      v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_useResource_usage(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_DWORD *)(a2 + 36) ^ 0x6C757443 | *(unsigned __int8 *)(a2 + 40))
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Ctul\"), sizeof(\"Ctul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[1] = *(_QWORD *)(a2 + 52);
  a1[2] = *(_QWORD *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_useResources_count_usage(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _DWORD v12[2];
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v7 = (const char *)(a2 + 36);
  v16 = 0;
  sscanf((const char *)(a2 + 36), "C@%zutulul", &v16);
  v8 = strlen(v7);
  v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *a1 = *(_QWORD *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  a1[1] = &v7[v9];
  v10 = v9 + 8 * v16;
  a1[2] = *(_QWORD *)&v7[v10];
  a1[3] = *(_QWORD *)&v7[v10 + 8];
  if (a4)
  {
    if (v10 + 16 > a3)
    {
      v11 = *a4;
      v14 = 0u;
      v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset_sizeDataType(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_QWORD *)(a2 + 36) != 0x6C756C75747443)
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Cttulul\"), sizeof(\"Cttulul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[1] = *(_QWORD *)(a2 + 52);
  a1[2] = *(_QWORD *)(a2 + 60);
  a1[3] = *(_QWORD *)(a2 + 68);
  a1[4] = *(_QWORD *)(a2 + 76);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLAccelerationStructureCommandEncoder_writeDeserializedAccelerationStructureSize_serializedOffset_toBuffer_sizeBufferOffset(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_QWORD *)(a2 + 36) != 0x6C75746C757443)
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Ctultul\"), sizeof(\"Ctultul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[1] = *(_QWORD *)(a2 + 52);
  a1[2] = *(_QWORD *)(a2 + 60);
  a1[3] = *(_QWORD *)(a2 + 68);
  a1[4] = *(_QWORD *)(a2 + 76);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLArgumentEncoder_newArgumentEncoderForBufferAtIndex(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cul\"), sizeof(\"Cul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(_QWORD *)(a2 + 40);
    a1[2] = *(_QWORD *)(a2 + 48);
    if (*(_WORD *)(a2 + 56) != 116)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(_QWORD *)(a2 + 60);
    if (a3 <= 0x1F)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 40);
    a1[2] = *(_QWORD *)(a2 + 48);
    a1[1] = *(_QWORD *)(a2 + 60);
  }
}

void DYTraceDecode_MTLArgumentEncoder_setArgumentBuffer_startOffset_arrayElement(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_DWORD *)(a2 + 39) != 7107948)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctulul\"), sizeof(\"Ctulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[1] = *(_QWORD *)(a2 + 52);
  a1[2] = *(_QWORD *)(a2 + 60);
  a1[3] = *(_QWORD *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLArgumentEncoder_setBuffers_offsets_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _DWORD v13[2];
  const char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v7 = (const char *)(a2 + 36);
  v17 = 0;
  v18 = 0;
  sscanf((const char *)(a2 + 36), "C@%zut@%zuul@2ul", &v18, &v17);
  v8 = strlen(v7);
  v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(_QWORD *)a1 = *(_QWORD *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(_QWORD *)(a1 + 8) = &v7[v9];
  v10 = v18;
  *(_QWORD *)(a1 + 16) = &v7[8 * v18 + v9];
  v11 = v9 + 8 * (v10 + v17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v7[v11];
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      v12 = *a4;
      v15 = 0u;
      v16 = 0u;
      v13[0] = v12;
      v13[1] = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)v13);
    }
  }
}

void DYTraceDecode_MTLArgumentEncoder_setIndirectCommandBuffers_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _DWORD v12[2];
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v7 = (const char *)(a2 + 36);
  v16 = 0;
  sscanf((const char *)(a2 + 36), "C@%zut@2ul", &v16);
  v8 = strlen(v7);
  v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(_QWORD *)a1 = *(_QWORD *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(_QWORD *)(a1 + 8) = &v7[v9];
  v10 = v9 + 8 * v16;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&v7[v10];
  if (a4)
  {
    if (v10 + 16 > a3)
    {
      v11 = *a4;
      v14 = 0u;
      v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }
}

void DYTraceDecode_MTLBinaryArchive_addComputePipelineFunctionsWithDescriptor_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 7624003)
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CUt\"), sizeof(\"CUt\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  v19 = 12;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)((char *)v8 + v10);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10 + 8) ^ 0x6975 | *((unsigned __int8 *)v8 + v10 + 10))
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 14) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 4 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_resolveCounters_inRange_destinationBuffer_destinationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x75746C7532407443 || *(_QWORD *)(a2 + 42) != 0x3E623C556C7574)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Ct@2ultulU<b>\"), sizeof(\"Ct@2ultulU<b>\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 92);
  v17 = 64;
  *(_QWORD *)(a1 + 48) = AppendString_11072((const char **)(a1 + 48), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  int v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x6C756C756C757443 && *(_QWORD *)(a2 + 44) == 0x756C75746C753340;
    if (!v8 || *(_QWORD *)(a2 + 50) != 0x6C7533406C756CLL)
    {
      v10 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v10;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"Ctululul@3ultulul@3ul\"), sizeof(\"Ctululul@3ultulul@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 92);
  v11 = *(_OWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 116);
  *(_OWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 132);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 140);
  v12 = *(_OWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 88) = v12;
  if (a4)
  {
    if (a3 <= 0x87)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  int v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x6C756C756C757443 && *(_QWORD *)(a2 + 44) == 0x756C75746C753340;
    if (!v8 || *(_QWORD *)(a2 + 52) != 0x6C756C7533406CLL)
    {
      v10 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v10;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"Ctululul@3ultulul@3ulul\"), sizeof(\"Ctululul@3ultulul@3ulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 92);
  v11 = *(_OWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 116);
  *(_OWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 132);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 140);
  v12 = *(_OWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 172);
  if (a4)
  {
    if (a3 <= 0x8F)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x756C75746C757443 || *(_WORD *)(a2 + 44) != 108)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctultulul\"), sizeof(\"Ctultulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 48);
  a1[1] = *(_QWORD *)(a2 + 56);
  a1[2] = *(_QWORD *)(a2 + 64);
  a1[3] = *(_QWORD *)(a2 + 72);
  a1[4] = *(_QWORD *)(a2 + 80);
  a1[5] = *(_QWORD *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  int v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x33406C756C757443 && *(_QWORD *)(a2 + 44) == 0x75746C7533406C75;
    if (!v8 || *(_QWORD *)(a2 + 50) != 0x6C756C756C7574)
    {
      v10 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v10;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"Ctulul@3ul@3ultululul\"), sizeof(\"Ctulul@3ul@3ultululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 84);
  v11 = *(_OWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 32) = v11;
  v12 = *(_OWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 132);
  *(_OWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 156);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 164);
  if (a4)
  {
    if (a3 <= 0x87)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_options(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  int v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x33406C756C757443 && *(_QWORD *)(a2 + 44) == 0x75746C7533406C75;
    if (!v8 || *(_QWORD *)(a2 + 52) != 0x6C756C756C756CLL)
    {
      v10 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v10;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"Ctulul@3ul@3ultulululul\"), sizeof(\"Ctulul@3ul@3ultulululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 84);
  v11 = *(_OWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 32) = v11;
  v12 = *(_OWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 132);
  *(_OWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 156);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 172);
  if (a4)
  {
    if (a3 <= 0x8F)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x33406C756C757443 && *(_QWORD *)(a2 + 44) == 0x75746C7533406C75;
    if (!v8 || *(_QWORD *)(a2 + 52) != 0x6C7533406C756CLL)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"Ctulul@3ul@3ultulul@3ul\"), sizeof(\"Ctulul@3ul@3ultulul@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 84);
  v11 = *(_OWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 32) = v11;
  v12 = *(_OWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 132);
  *(_OWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 156);
  v13 = *(_OWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 180);
  *(_OWORD *)(a1 + 104) = v13;
  if (a4)
  {
    if (a3 <= 0x97)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  BOOL v9;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  __int128 v19;
  __int128 v20;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x33406C756C757443 && *(_QWORD *)(a2 + 44) == 0x75746C7533406C75;
    v9 = v8 && *(_QWORD *)(a2 + 52) == 0x756C7533406C756CLL;
    if (!v9 || *(_WORD *)(a2 + 60) != 108)
    {
      v11 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v11;
      v17 = 500;
      v18 = "memcmp((const char*)bytes + offset, (\"Ctulul@3ul@3ultulul@3ulul\"), sizeof(\"Ctulul@3ul@3ultulul@3ulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 88);
  v12 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 32) = v12;
  v13 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 160);
  v14 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 192);
  if (a4)
  {
    if (a3 <= 0xA3)
    {
      v15 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v15;
      v17 = 500;
      v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinationLevel_sliceCount_levelCount(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x75746C756C757443 || *(_QWORD *)(a2 + 44) != 0x6C756C756C756CLL)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctulultulululul\"), sizeof(\"Ctulultulululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 52);
  a1[1] = *(_QWORD *)(a2 + 60);
  a1[2] = *(_QWORD *)(a2 + 68);
  a1[3] = *(_QWORD *)(a2 + 76);
  a1[4] = *(_QWORD *)(a2 + 84);
  a1[5] = *(_QWORD *)(a2 + 92);
  a1[6] = *(_QWORD *)(a2 + 100);
  a1[7] = *(_QWORD *)(a2 + 108);
  a1[8] = *(_QWORD *)(a2 + 116);
  if (a4)
  {
    if (a3 <= 0x57)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_copyIndirectCommandBuffer_sourceRange_destination_destinationIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x75746C7532407443 || *(_WORD *)(a2 + 44) != 108)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ct@2ultul\"), sizeof(\"Ct@2ultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_fillBuffer_range_pattern4(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_QWORD *)(a2 + 36) ^ 0x69756C7532407443 | *(unsigned __int8 *)(a2 + 44))
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Ct@2ului\"), sizeof(\"Ct@2ului\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 80);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_fillBuffer_range_value(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_QWORD *)(a2 + 36) ^ 0x62756C7532407443 | *(unsigned __int8 *)(a2 + 44))
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Ct@2ulub\"), sizeof(\"Ct@2ulub\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 80);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_fillTexture_level_slice_region_bytes_length(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x36406C756C757443 | *(_QWORD *)(a2 + 44) ^ 0x6C753E623C556C75 | *(unsigned __int8 *)(a2 + 52))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"Ctulul@6ulU<b>ul\"), sizeof(\"Ctulul@6ulU<b>ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 88);
  v11 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  v19 = 100;
  *(_QWORD *)(a1 + 80) = AppendString_11072((const char **)(a1 + 80), (uint64_t)v8, &v19);
  v12 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_fillTexture_level_slice_region_color(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x36406C756C757443 || *(_QWORD *)(a2 + 42) != 0x6434406C753640)
    {
      v9 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v9;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"Ctulul@6ul@4d\"), sizeof(\"Ctulul@6ul@4d\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 76);
  v10 = *(_OWORD *)(a2 + 84);
  v11 = *(_OWORD *)(a2 + 116);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  v12 = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 132);
  *(_OWORD *)(a1 + 96) = v12;
  if (a4)
  {
    if (a3 <= 0x7F)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_fillTexture_level_slice_region_color_pixelFormat(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x36406C756C757443 || *(_QWORD *)(a2 + 44) != 0x6C756434406C75)
    {
      v9 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v9;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"Ctulul@6ul@4dul\"), sizeof(\"Ctulul@6ul@4dul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 76);
  v10 = *(_OWORD *)(a2 + 84);
  v11 = *(_OWORD *)(a2 + 116);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  v12 = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 132);
  *(_OWORD *)(a1 + 96) = v12;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 164);
  if (a4)
  {
    if (a3 <= 0x87)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_getTextureAccessCounters_region_mipLevel_slice_resetCounters_countersBuffer_countersBufferOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x6C756C7536407443 || *(_QWORD *)(a2 + 44) != 0x6C757469756C75)
    {
      v9 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v9;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"Ct@6ulululuitul\"), sizeof(\"Ct@6ulululuitul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 60);
  v10 = *(_OWORD *)(a2 + 68);
  v11 = *(_OWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 84);
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 132);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 144);
  if (a4)
  {
    if (a3 <= 0x73)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_optimizeIndirectCommandBuffer_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 843084867 || *(_DWORD *)(a2 + 39) != 7107890)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ct@2ul\"), sizeof(\"Ct@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLBlitCommandEncoder_resetTextureAccessCounters_region_mipLevel_slice(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x6C756C7536407443 || *(_QWORD *)(a2 + 39) != 0x6C756C756C7536)
    {
      v9 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v9;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"Ct@6ululul\"), sizeof(\"Ct@6ululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 56);
  v10 = *(_OWORD *)(a2 + 64);
  v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 120);
  if (a4)
  {
    if (a3 <= 0x5B)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLBuffer_parentGPUAddress_parentGPUSize(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970763075 || *(_WORD *)(a2 + 40) != 119)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cuwuw\"), sizeof(\"Cuwuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[1] = *(_QWORD *)(a2 + 52);
  a1[2] = *(_QWORD *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLBuffer_addDebugMarker_range(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 843076419 || *(_DWORD *)(a2 + 39) != 7107890)
    {
      v10 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v10;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"CS@2ul\"), sizeof(\"CS@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v18 = 16;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v18);
  v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)((char *)v8 + v11);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

__n128 DYTraceDecode_MTLBuffer_didModifyRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __n128 result;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1966227523 || *(_WORD *)(a2 + 40) != 108)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"C@2ul\"), sizeof(\"C@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x1F)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    result = *(__n128 *)(a2 + 52);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_MTLBuffer_isAliasable(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"C\"), sizeof(\"C\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    if (*(unsigned __int16 *)(a2 + 48) ^ 0x6975 | *(unsigned __int8 *)(a2 + 50))
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
    if (a3 <= 0x13)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
  }
}

void DYTraceDecode_MTLBuffer_newLinearTextureWithDescriptor_offset_bytesPerRow_bytesPerImage(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x6C756C756C755543 | *(unsigned __int8 *)(a2 + 44))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CUululul\"), sizeof(\"CUululul\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v19 = 20;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v10);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v10 + 8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)v8 + v10 + 16);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 24) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 29) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLBuffer_newRemoteBufferViewForDevice(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x7443 | *(unsigned __int8 *)(a2 + 38))
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ct\"), sizeof(\"Ct\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(_QWORD *)(a2 + 40);
    a1[2] = *(_QWORD *)(a2 + 48);
    if (*(_WORD *)(a2 + 56) != 116)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(_QWORD *)(a2 + 60);
    if (a3 <= 0x1F)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 40);
    a1[2] = *(_QWORD *)(a2 + 48);
    a1[1] = *(_QWORD *)(a2 + 60);
  }
}

void DYTraceDecode_MTLBuffer_newTiledTextureWithDescriptor_offset_bytesPerRow(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628867 || *(_DWORD *)(a2 + 39) != 7107948)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"CUulul\"), sizeof(\"CUulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v20 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v20);
  v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 116)
  {
    v12 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v12;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  v13 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLCaptureManager_notifySubmissionForEyeSPI_iosurface_bounds_submitFlags(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x75643440746C7543 || *(_WORD *)(a2 + 44) != 108)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Cult@4dul\"), sizeof(\"Cult@4dul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 104);
  if (a4)
  {
    if (a3 <= 0x4B)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

const char *DYTraceDecode_MTLCommandBuffer_restoreMTLBufferContents(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const char *result;
  _QWORD *v5;
  uint64_t v6;

  v3 = a2 + 36;
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 56);
  v6 = 28;
  result = AppendString_11072((const char **)(a1 + 16), a2 + 36, &v6);
  *(_QWORD *)(a1 + 16) = result;
  v5 = (_QWORD *)(v3 + ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL));
  *(_QWORD *)(a1 + 24) = *v5;
  *(_QWORD *)(a1 + 32) = v5[1];
  return result;
}

void DYTraceDecode_MTLCommandBuffer_accelerationStructureCommandEncoderWithDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  unsigned __int16 *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5543 | *(unsigned __int8 *)(a2 + 38))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CU\"), sizeof(\"CU\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  v19 = 12;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLCommandBuffer_commitAndWaitUntilSubmittedWithDeadline(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7828803)
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cuw\"), sizeof(\"Cuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 48);
    if (*(unsigned __int16 *)(a2 + 56) ^ 0x6975 | *(unsigned __int8 *)(a2 + 58))
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
    if (a3 <= 0x1B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
  }
}

void DYTraceDecode_MTLCommandBuffer_computeCommandEncoderWithDispatchType_substreamCount(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 105)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Cului\"), sizeof(\"Cului\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 60);
    if (*(_WORD *)(a2 + 64) != 116)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 68);
    if (a3 <= 0x27)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 60);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 68);
  }
}

void DYTraceDecode_MTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_value_forIndex(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_QWORD *)(a2 + 36) ^ 0x6C756C756C757443 | *(unsigned __int8 *)(a2 + 44))
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Ctululul\"), sizeof(\"Ctululul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(_QWORD *)(a2 + 48);
  a1[1] = *(_QWORD *)(a2 + 56);
  a1[2] = *(_QWORD *)(a2 + 64);
  a1[3] = *(_QWORD *)(a2 + 72);
  a1[4] = *(_QWORD *)(a2 + 80);
  if (a4)
  {
    if (a3 <= 0x33)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_values_indices_count(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  _DWORD v14[2];
  const char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v7 = (const char *)(a2 + 36);
  v18 = 0;
  v19 = 0;
  sscanf((const char *)(a2 + 36), "Ctul@%zuul@%zuulul", &v19, &v18);
  v8 = strlen(v7);
  v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *a1 = *(_QWORD *)(v9 + 4);
  a1[1] = *(_QWORD *)(v9 + 12);
  v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 28;
  a1[2] = *(_QWORD *)(v9 + 20);
  a1[3] = &v7[v10];
  v11 = v19;
  a1[4] = &v7[8 * v19 + v10];
  v12 = v10 + 8 * (v11 + v18);
  a1[5] = *(_QWORD *)&v7[v12];
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v16 = 0u;
      v17 = 0u;
      v14[0] = v13;
      v14[1] = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)v14);
    }
  }
}

void DYTraceDecode_MTLCommandBuffer_encodeSignalEvent_value(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_DWORD *)(a2 + 36) ^ 0x77757443 | *(unsigned __int8 *)(a2 + 40))
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Ctuw\"), sizeof(\"Ctuw\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[1] = *(_QWORD *)(a2 + 52);
  a1[2] = *(_QWORD *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLCommandBuffer_encodeWaitForEvent_value_timeout(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 2004186179 || *(_DWORD *)(a2 + 39) != 6911351)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctuwui\"), sizeof(\"Ctuwui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x23)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLCommandBuffer_presentDrawable_afterMinimumDuration(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_DWORD *)(a2 + 36) != 6583363)
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Ctd\"), sizeof(\"Ctd\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(_QWORD *)(a2 + 40);
  a1[1] = *(_QWORD *)(a2 + 48);
  a1[2] = *(_QWORD *)(a2 + 56);
  if (a4)
  {
    if (a3 <= 0x1B)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLCommandBuffer_sampledComputeCommandEncoderWithDescriptor_programInfoBuffer_capacity(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x6C753E623C555543 | *(unsigned __int8 *)(a2 + 44))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CUU<b>ul\"), sizeof(\"CUU<b>ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v19 = 20;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLCommandQueue_getSPIStats(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _WORD *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v8 = (_WORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 67)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"C\"), sizeof(\"C\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    if (*(_DWORD *)(a2 + 48) ^ 0x3E623C55 | *(unsigned __int8 *)(a2 + 52))
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"U<b>\"), sizeof(\"U<b>\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  }
  v17 = 20;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLCommandQueue_setBackgroundGPUPriority(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7107907)
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cul\"), sizeof(\"Cul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 48);
    if (*(unsigned __int16 *)(a2 + 56) ^ 0x6975 | *(unsigned __int8 *)(a2 + 58))
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
    if (a3 <= 0x1B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
  }
}

void DYTraceDecode_MTLCommandQueue_setBackgroundGPUPriority_offset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 115)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Culus\"), sizeof(\"Culus\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
    *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 60);
    if (*(unsigned __int16 *)(a2 + 64) ^ 0x6975 | *(unsigned __int8 *)(a2 + 66))
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 68);
    if (a3 <= 0x23)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
    *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 60);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 68);
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 != 0x55556C75747443)
  {
    v9 = *a4;
    v14 = 0u;
    v15 = 0u;
    v11 = v9;
    v12 = 500;
    v13 = "memcmp((const char*)bytes + offset, (\"CttulUU\"), sizeof(\"CttulUU\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 68);
  v16 = 40;
  *(_QWORD *)(a1 + 40) = AppendString_11072((const char **)(a1 + 40), (uint64_t)v8, &v16);
  *(_QWORD *)(a1 + 48) = AppendString_11072((const char **)(a1 + 48), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_executeCommandsInBuffer_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 != 0x556C7532407443)
  {
    v9 = *a4;
    v14 = 0u;
    v15 = 0u;
    v11 = v9;
    v12 = 500;
    v13 = "memcmp((const char*)bytes + offset, (\"Ct@2ulU\"), sizeof(\"Ct@2ulU\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 60);
  v16 = 40;
  *(_QWORD *)(a1 + 40) = AppendString_11072((const char **)(a1 + 40), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_dispatchThreadgroups_threadsPerThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x7533406C75334043 || *(_WORD *)(a2 + 44) != 108)
    {
      v9 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v9;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"C@3ul@3ul\"), sizeof(\"C@3ul@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v10 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = v10;
  v11 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 32) = v11;
  if (a4)
  {
    if (a3 <= 0x43)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  __int128 v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4 && *(_QWORD *)(a2 + 36) ^ 0x6C7533406C757443 | *(unsigned __int8 *)(a2 + 44))
  {
    v8 = *a4;
    v14 = 0u;
    v15 = 0u;
    v11 = v8;
    v12 = 500;
    v13 = "memcmp((const char*)bytes + offset, (\"Ctul@3ul\"), sizeof(\"Ctul@3ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = v9;
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_setBufferOffset_atIndex(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 108)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Culul\"), sizeof(\"Culul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[1] = *(_QWORD *)(a2 + 52);
  a1[2] = *(_QWORD *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_setBufferOffset_attributeStride_atIndex(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_QWORD *)(a2 + 36) != 0x6C756C756C7543)
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Cululul\"), sizeof(\"Cululul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[1] = *(_QWORD *)(a2 + 52);
  a1[2] = *(_QWORD *)(a2 + 60);
  a1[3] = *(_QWORD *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_setBuffers_offsets_attributeStrides_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _DWORD v12[2];
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;

  v7 = (const char *)(a2 + 36);
  v16 = 0;
  sscanf((const char *)(a2 + 36), "C@%zutU<b>U<b>@2ul", &v16);
  v8 = strlen(v7);
  v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(_QWORD *)a1 = *(_QWORD *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(_QWORD *)(a1 + 8) = &v7[v9];
  v17 = v9 + 8 * v16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v7, (uint64_t *)&v17);
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v7, (uint64_t *)&v17);
  v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v7[v10];
  if (a4)
  {
    if (v10 + 16 > a3)
    {
      v11 = *a4;
      v14 = 0u;
      v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_setBytes_length_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543 || *(_WORD *)(a2 + 44) != 108)
    {
      v10 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v10;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"CU<b>ulul\"), sizeof(\"CU<b>ulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v18 = 20;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v18);
  v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11 + 8);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_setBytes_length_attributeStride_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543 || *(_DWORD *)(a2 + 44) != 7107948)
    {
      v10 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v10;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"CU<b>ululul\"), sizeof(\"CU<b>ululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v18 = 20;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v18);
  v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11 + 16);
  if (a4)
  {
    if (v11 + 24 > a3)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_setSamplerState_lodMinClamp_lodMaxClamp_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1717990467 || *(_DWORD *)(a2 + 39) != 7107942)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctfful\"), sizeof(\"Ctfful\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLComputeCommandEncoder_setSamplerStates_lodMinClamps_lodMaxClamps_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  unint64_t v13;
  int v14;
  _DWORD v15[2];
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  v7 = (const char *)(a2 + 36);
  v19 = 0;
  sscanf((const char *)(a2 + 36), "C@%zut@%zuf@%zuf@2ul", &v21, &v20, &v19);
  v8 = strlen(v7);
  v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(_QWORD *)a1 = *(_QWORD *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(_QWORD *)(a1 + 8) = &v7[v9];
  v10 = v20;
  v11 = v9 + 8 * v21;
  v12 = &v7[4 * v20 + v11];
  *(_QWORD *)(a1 + 32) = &v7[v11];
  *(_QWORD *)(a1 + 40) = v12;
  v13 = v11 + 4 * (v10 + v19);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&v7[v13];
  if (a4)
  {
    if (v13 + 16 > a3)
    {
      v14 = *a4;
      v17 = 0u;
      v18 = 0u;
      v15[0] = v14;
      v15[1] = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)v15);
    }
  }
}

__n128 DYTraceDecode_MTLComputeCommandEncoder_setStageInRegion(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __n128 result;
  __int128 v11;
  int v12;
  __int128 v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1966489667 || *(_WORD *)(a2 + 40) != 108)
    {
      v9 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v9;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"C@6ul\"), sizeof(\"C@6ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    result = *(__n128 *)(a2 + 52);
    v11 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 24) = v11;
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x3F)
    {
      v12 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v12;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    result = *(__n128 *)(a2 + 52);
    v13 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 24) = v13;
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_MTLCounterSampleBuffer_resolveCounterRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1966227523 || *(_WORD *)(a2 + 40) != 108)
    {
      v10 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v10;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"C@2ul\"), sizeof(\"C@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 52);
    if (*(_DWORD *)(a2 + 68) ^ 0x3E623C55 | *(unsigned __int8 *)(a2 + 72))
    {
      v11 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v11;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"U<b>\"), sizeof(\"U<b>\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 52);
  }
  v18 = 40;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v18);
  if (a4)
  {
    if (((v18 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLDevice_compileVisibleFunction_withDescriptor_completionHandler(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x74557443 | *(unsigned __int8 *)(a2 + 40))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CtUt\"), sizeof(\"CtUt\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 52);
  v19 = 24;
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newBufferWithDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 5592387)
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CUU\"), sizeof(\"CUU\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  v19 = 12;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(_WORD *)((char *)v8 + v10) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newSharedEvent(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 6911299)
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cui\"), sizeof(\"Cui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 48);
    if (*(_WORD *)(a2 + 52) != 116)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 56);
    if (a3 <= 0x1B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 56);
  }
}

void DYTraceDecode_MTLDevice_newSharedEventWithHandle(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1769305155 || *(_DWORD *)(a2 + 39) != 7828841)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Ctuiuw\"), sizeof(\"Ctuiuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 64);
  if (a4)
  {
    if (*(_WORD *)(a2 + 72) != 116)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 76);
    if (a3 <= 0x2F)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 76);
  }
}

void DYTraceDecode_MTLDevice_newSharedEventWithMachPort(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1969845571 || *(_WORD *)(a2 + 40) != 119)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Cuiuw\"), sizeof(\"Cuiuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 52);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 56);
    if (*(_WORD *)(a2 + 64) != 116)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 68);
    if (a3 <= 0x27)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 52);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 68);
  }
}

void DYTraceDecode_MTLDevice_setPluginData(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1648121155 || *(_WORD *)(a2 + 40) != 62)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"CU<b>\"), sizeof(\"CU<b>\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v17 = 16;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLDevice_compileVisibleFunction_withDescriptor_destinationBinaryArchive_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1951757379 || *(_WORD *)(a2 + 40) != 116)
    {
      v10 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v10;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"CtUtt\"), sizeof(\"CtUtt\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
  v18 = 24;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v18);
  v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11 + 8);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLDevice_copyShaderCacheToPath(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  unsigned __int16 *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5343 | *(unsigned __int8 *)(a2 + 38))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CS\"), sizeof(\"CS\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  v19 = 12;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10) ^ 0x6975 | *((unsigned __int8 *)v8 + v10 + 2))
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 4 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_deserializeInstanceAccelerationStructure_fromBytes_primitiveAccelerationStructures_withDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x55553E623C557443 | *(unsigned __int8 *)(a2 + 44))
  {
    v9 = *a4;
    v14 = 0u;
    v15 = 0u;
    v11 = v9;
    v12 = 500;
    v13 = "memcmp((const char*)bytes + offset, (\"CtU<b>UU\"), sizeof(\"CtU<b>UU\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 56);
  v16 = 28;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v16);
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v16);
  *(_QWORD *)(a1 + 32) = AppendString_11072((const char **)(a1 + 32), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLDevice_deserializePrimitiveAccelerationStructure_fromBytes_withDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 != 0x553E623C557443)
  {
    v9 = *a4;
    v14 = 0u;
    v15 = 0u;
    v11 = v9;
    v12 = 500;
    v13 = "memcmp((const char*)bytes + offset, (\"CtU<b>U\"), sizeof(\"CtU<b>U\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
  v16 = 24;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v16);
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v16);
  if (a4)
  {
    if (((v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

__n128 DYTraceDecode_MTLDevice_heapBufferSizeAndAlignWithLength_options(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  __n128 result;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 108)
    {
      v9 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v9;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"Culul\"), sizeof(\"Culul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 52);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 60);
    if (*(_DWORD *)(a2 + 68) ^ 0x6C753240 | *(unsigned __int8 *)(a2 + 72))
    {
      v10 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v10;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"@2ul\"), sizeof(\"@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    result = *(__n128 *)(a2 + 76);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x37)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 52);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 60);
    result = *(__n128 *)(a2 + 76);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

__n128 DYTraceDecode_MTLDevice_heapTextureSizeAndAlignWithDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  unsigned __int16 *v8;
  int v9;
  unint64_t v10;
  int v11;
  __n128 result;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5543 | *(unsigned __int8 *)(a2 + 38))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CU\"), sizeof(\"CU\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  v19 = 12;
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4)
  {
    if (*(_DWORD *)((char *)v8 + v10) ^ 0x6C753240 | *((unsigned __int8 *)v8 + v10 + 4))
    {
      v11 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v11;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"@2ul\"), sizeof(\"@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
    result = *(__n128 *)((char *)v8 + v10 + 8);
    *(__n128 *)(a1 + 8) = result;
    if (v10 + 24 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  else
  {
    result = *(__n128 *)((char *)v8 + v10 + 8);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_MTLDevice_loadDynamicLibrariesForComputeDescriptor_options_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628867 || *(_WORD *)(a2 + 40) != 116)
    {
      v10 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v10;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"CUult\"), sizeof(\"CUult\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v19 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v19);
  v11 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 85)
  {
    v12 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v12;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"U\"), sizeof(\"U\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v19 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, (uint64_t *)&v19);
  if (a4)
  {
    if (((v19 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_loadDynamicLibrariesForFunction_insertLibraries_options_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x6C75553E623C5543 || *(_WORD *)(a2 + 44) != 116)
    {
      v10 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v10;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"CU<b>Uult\"), sizeof(\"CU<b>Uult\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v19 = 20;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v19);
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, (uint64_t *)&v19);
  v11 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 85)
  {
    v12 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v12;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"U\"), sizeof(\"U\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v19 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, (uint64_t *)&v19);
  if (a4)
  {
    if (((v19 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_minLinearTextureBaseAddressAlignmentForDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  unsigned __int16 *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5543 | *(unsigned __int8 *)(a2 + 38))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CU\"), sizeof(\"CU\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  v19 = 12;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10) ^ 0x6C75 | *((unsigned __int8 *)v8 + v10 + 2))
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newAccelerationStructureWithBuffer_offset(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x6C757443 | *(unsigned __int8 *)(a2 + 40))
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctul\"), sizeof(\"Ctul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(_QWORD *)(a2 + 44);
    a1[2] = *(_QWORD *)(a2 + 52);
    a1[3] = *(_QWORD *)(a2 + 60);
    if (*(_WORD *)(a2 + 68) != 116)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(_QWORD *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 44);
    a1[2] = *(_QWORD *)(a2 + 52);
    a1[3] = *(_QWORD *)(a2 + 60);
    a1[1] = *(_QWORD *)(a2 + 72);
  }
}

void DYTraceDecode_MTLDevice_newAccelerationStructureWithBuffer_offset_resourceIndex(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_DWORD *)(a2 + 39) != 7828844)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Ctuluw\"), sizeof(\"Ctuluw\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[2] = *(_QWORD *)(a2 + 52);
  a1[3] = *(_QWORD *)(a2 + 60);
  a1[4] = *(_QWORD *)(a2 + 68);
  if (a4)
  {
    if (*(_WORD *)(a2 + 76) != 116)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[1] = *(_QWORD *)(a2 + 80);
    if (a3 <= 0x33)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    a1[1] = *(_QWORD *)(a2 + 80);
  }
}

void DYTraceDecode_MTLDevice_newAccelerationStructureWithSize_resourceIndex(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 119)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Culuw\"), sizeof(\"Culuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *a1 = *(_QWORD *)(a2 + 44);
    a1[2] = *(_QWORD *)(a2 + 52);
    a1[3] = *(_QWORD *)(a2 + 60);
    if (*(_WORD *)(a2 + 68) != 116)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[1] = *(_QWORD *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 44);
    a1[2] = *(_QWORD *)(a2 + 52);
    a1[3] = *(_QWORD *)(a2 + 60);
    a1[1] = *(_QWORD *)(a2 + 72);
  }
}

void DYTraceDecode_MTLDevice_newAccelerationStructureWithSize_withDescriptor(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x556C7543 | *(unsigned __int8 *)(a2 + 40))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CulU\"), sizeof(\"CulU\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 52);
  v19 = 24;
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(_WORD *)((char *)v8 + v10) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newBufferWithBytes_length_options_gpuAddress(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543 || *(_DWORD *)(a2 + 44) != 7828844)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"CU<b>ululuw\"), sizeof(\"CU<b>ululuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v20 = 20;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v20);
  v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11 + 8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)v8 + v11 + 16);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 24) != 116)
  {
    v12 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v12;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  v13 = (v11 + 29) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newBufferWithBytesNoCopy_length_options_deallocator(uint64_t a1, _QWORD *a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = (_QWORD *)((char *)a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C753E623C5543 || *(_QWORD *)((char *)a2 + 39) != 0x746C756C753E62)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"CU<b>ulult\"), sizeof(\"CU<b>ulult\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = a2[6];
  v20 = 20;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v20);
  v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11 + 8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)v8 + v11 + 16);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 24) != 116)
  {
    v12 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v12;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  v13 = (v11 + 29) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newBufferWithLength_options_gpuAddress(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4 && *(_QWORD *)(a2 + 36) != 0x77756C756C7543)
  {
    v8 = *a4;
    v14 = 0u;
    v15 = 0u;
    v11 = v8;
    v12 = 500;
    v13 = "memcmp((const char*)bytes + offset, (\"Cululuw\"), sizeof(\"Cululuw\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[2] = *(_QWORD *)(a2 + 52);
  a1[3] = *(_QWORD *)(a2 + 60);
  a1[4] = *(_QWORD *)(a2 + 68);
  if (a4)
  {
    if (*(_WORD *)(a2 + 76) != 116)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(_QWORD *)(a2 + 80);
    if (a3 <= 0x33)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    a1[1] = *(_QWORD *)(a2 + 80);
  }
}

void DYTraceDecode_MTLDevice_newComputePipelineStateWithDescriptor_options_completionHandler(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1819628867 || *(_WORD *)(a2 + 40) != 116)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"CUult\"), sizeof(\"CUult\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v20 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v20);
  v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 16) != 116)
  {
    v12 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v12;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  v13 = (v11 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newComputePipelineStateWithFunction_completionHandler(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 7631939)
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctt\"), sizeof(\"Ctt\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(_QWORD *)(a2 + 40);
    a1[2] = *(_QWORD *)(a2 + 48);
    a1[3] = *(_QWORD *)(a2 + 56);
    if (*(_WORD *)(a2 + 64) != 116)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(_QWORD *)(a2 + 68);
    if (a3 <= 0x27)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 40);
    a1[2] = *(_QWORD *)(a2 + 48);
    a1[3] = *(_QWORD *)(a2 + 56);
    a1[1] = *(_QWORD *)(a2 + 68);
  }
}

void DYTraceDecode_MTLDevice_newComputePipelineStateWithFunction_options_completionHandler(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1819636803 || *(_WORD *)(a2 + 40) != 116)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Ctult\"), sizeof(\"Ctult\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[2] = *(_QWORD *)(a2 + 52);
  a1[3] = *(_QWORD *)(a2 + 60);
  a1[4] = *(_QWORD *)(a2 + 68);
  if (a4)
  {
    if (*(_WORD *)(a2 + 76) != 116)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[1] = *(_QWORD *)(a2 + 80);
    if (a3 <= 0x33)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    a1[1] = *(_QWORD *)(a2 + 80);
  }
}

void DYTraceDecode_MTLDevice_newDefaultLibraryWithBundle_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1648121155 || *(_DWORD *)(a2 + 39) != 7618146)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"CU<b>t\"), sizeof(\"CU<b>t\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v20 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v20);
  v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    v12 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v12;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newDynamicLibraryWithURL_options_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x746C753E623C5543 | *(unsigned __int8 *)(a2 + 44))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CU<b>ult\"), sizeof(\"CU<b>ult\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v19 = 20;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v10);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v10 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 16) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newFunctionWithGLCoreIR_functionType(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 != 0x6C753E623C5543)
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CU<b>ul\"), sizeof(\"CU<b>ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v19 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newFunctionWithGLCoreIR_inputsDescription_functionType(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x623C553E623C5543 || *(_DWORD *)(a2 + 44) != 7107902)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"CU<b>U<b>ul\"), sizeof(\"CU<b>U<b>ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v20 = 20;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v20);
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v20);
  v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    v12 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v12;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newLibraryWithCIFilters_imageFilterFunctionInfo_error(uint64_t a1, _QWORD *a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = (_QWORD *)((char *)a2 + 36);
  if (a4)
  {
    if (*v8 != 0x623C553E623C5543 || *(_QWORD *)((char *)a2 + 39) != 0x743E623C553E62)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"CU<b>U<b>t\"), sizeof(\"CU<b>U<b>t\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = a2[6];
  v20 = 20;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v20);
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v20);
  v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    v12 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v12;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newRenderPipelineStateWithMeshDescriptor_options_reflection_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x3E623C556C755543 || *(_WORD *)(a2 + 44) != 116)
    {
      v10 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v10;
      v17 = 500;
      v18 = "memcmp((const char*)bytes + offset, (\"CUulU<b>t\"), sizeof(\"CUulU<b>t\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v21 = 20;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v21);
  v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  v21 = v11 + 8;
  *(_QWORD *)(a1 + 32) = AppendString_11072((const char **)(a1 + 32), (uint64_t)v8, (uint64_t *)&v21);
  v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)v8 + v12);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 8) != 116)
  {
    v13 = *a4;
    v19 = 0u;
    v20 = 0u;
    v16 = v13;
    v17 = 500;
    v18 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  v14 = (v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      v15 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v15;
      v17 = 500;
      v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MTLDevice_newResourceGroupFromResources_count(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v7 = (const char *)(a2 + 36);
  v19 = 0;
  sscanf((const char *)(a2 + 36), "C@%zutul", &v19);
  v8 = strlen(v7);
  *a1 = *(_QWORD *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  a1[2] = &v7[v9];
  v10 = v9 + 8 * v19;
  a1[3] = *(_QWORD *)&v7[v10];
  if (a4 && *(_WORD *)&v7[v10 + 8] != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  a1[1] = *(_QWORD *)&v7[v12];
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newTextureLayoutWithDescriptor_isHeapOrBufferBacked(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x69755543 | *(unsigned __int8 *)(a2 + 40))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CUui\"), sizeof(\"CUui\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v19 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 4) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 9) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLDevice_newTextureWithBytesNoCopy_length_descriptor_deallocator(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x556C753E623C5543 || *(_WORD *)(a2 + 44) != 116)
    {
      v10 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v10;
      v17 = 500;
      v18 = "memcmp((const char*)bytes + offset, (\"CU<b>ulUt\"), sizeof(\"CU<b>ulUt\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v21 = 20;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v21);
  v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  v21 = v11 + 8;
  *(_QWORD *)(a1 + 32) = AppendString_11072((const char **)(a1 + 32), (uint64_t)v8, (uint64_t *)&v21);
  v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)v8 + v12);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 8) != 116)
  {
    v13 = *a4;
    v19 = 0u;
    v20 = 0u;
    v16 = v13;
    v17 = 500;
    v18 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  v14 = (v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      v15 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v15;
      v17 = 500;
      v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MTLDevice_newTextureWithDescriptor_iosurface_plane(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1968526659 || *(_WORD *)(a2 + 40) != 108)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"CUUul\"), sizeof(\"CUUul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v20 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v20);
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v20);
  v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    v12 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v12;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLDevice_newTiledTextureWithBytesNoCopy_length_deallocator_descriptor_offset_bytesPerRow(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x746C753E623C5543 || *(_QWORD *)(a2 + 42) != 0x6C756C7555746CLL)
    {
      v10 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v10;
      v17 = 500;
      v18 = "memcmp((const char*)bytes + offset, (\"CU<b>ultUulul\"), sizeof(\"CU<b>ultUulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  v21 = 24;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v21);
  v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11 + 8);
  v21 = v11 + 16;
  *(_QWORD *)(a1 + 40) = AppendString_11072((const char **)(a1 + 40), (uint64_t)v8, (uint64_t *)&v21);
  v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)((char *)v8 + v12);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)((char *)v8 + v12 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 16) != 116)
  {
    v13 = *a4;
    v19 = 0u;
    v20 = 0u;
    v16 = v13;
    v17 = 500;
    v18 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  v14 = (v12 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      v15 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v15;
      v17 = 500;
      v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MTLDevice_newTiledTextureWithBytesNoCopy_length_descriptor_offset_bytesPerRow(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x556C753E623C5543 || *(_QWORD *)(a2 + 41) != 0x6C756C75556C75)
    {
      v10 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v10;
      v17 = 500;
      v18 = "memcmp((const char*)bytes + offset, (\"CU<b>ulUulul\"), sizeof(\"CU<b>ulUulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  v21 = 24;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v21);
  v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11);
  v21 = v11 + 8;
  *(_QWORD *)(a1 + 32) = AppendString_11072((const char **)(a1 + 32), (uint64_t)v8, (uint64_t *)&v21);
  v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)v8 + v12);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)((char *)v8 + v12 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v12 + 16) != 116)
  {
    v13 = *a4;
    v19 = 0u;
    v20 = 0u;
    v16 = v13;
    v17 = 500;
    v18 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  v14 = (v12 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      v15 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v15;
      v17 = 500;
      v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MTLDevice_serializeStructType_version(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 != 0x69753E623C5543)
  {
    v9 = *a4;
    v16 = 0u;
    v17 = 0u;
    v13 = v9;
    v14 = 500;
    v15 = "memcmp((const char*)bytes + offset, (\"CU<b>ui\"), sizeof(\"CU<b>ui\")) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v18 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v18);
  v10 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)((char *)v8 + v10);
  if (a4 && *(_DWORD *)((char *)v8 + v10 + 4) ^ 0x3E623C55 | *((unsigned __int8 *)v8 + v10 + 8))
  {
    v11 = *a4;
    v16 = 0u;
    v17 = 0u;
    v13 = v11;
    v14 = 500;
    v15 = "memcmp((const char*)bytes + offset, (\"U<b>\"), sizeof(\"U<b>\")) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }
  v18 = v10 + 12;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, (uint64_t *)&v18);
  if (a4)
  {
    if (((v18 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

__n128 DYTraceDecode_MTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  __n128 result;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4 && *(_QWORD *)(a2 + 36) != 0x6C756C756C7543)
  {
    v8 = *a4;
    v15 = 0u;
    v16 = 0u;
    v12 = v8;
    v13 = 500;
    v14 = "memcmp((const char*)bytes + offset, (\"Cululul\"), sizeof(\"Cululul\")) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 68);
  if (a4)
  {
    if (*(_DWORD *)(a2 + 76) ^ 0x6C753340 | *(unsigned __int8 *)(a2 + 80))
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"@3ul\"), sizeof(\"@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    result = *(__n128 *)(a2 + 84);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 100);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x47)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    result = *(__n128 *)(a2 + 84);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 100);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

__n128 DYTraceDecode_MTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount_sparsePageSize(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  __n128 result;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x756C756C756C7543 || *(_WORD *)(a2 + 44) != 108)
    {
      v9 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v9;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"Culululul\"), sizeof(\"Culululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 80);
  if (a4)
  {
    if (*(_DWORD *)(a2 + 88) ^ 0x6C753340 | *(unsigned __int8 *)(a2 + 92))
    {
      v10 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v10;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"@3ul\"), sizeof(\"@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    result = *(__n128 *)(a2 + 96);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 112);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x53)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  else
  {
    result = *(__n128 *)(a2 + 96);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 112);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_MTLDynamicLibrary_serializeToURL_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1648121155 || *(_DWORD *)(a2 + 39) != 7618146)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"CU<b>t\"), sizeof(\"CU<b>t\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v20 = 16;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v20);
  v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)((char *)v8 + v11);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v11 + 8) ^ 0x6975 | *((unsigned __int8 *)v8 + v11 + 10))
  {
    v12 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v12;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  v13 = (v11 + 14) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 4 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLFunction_setDescriptor_library(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 7624003)
  {
    v9 = *a4;
    v15 = 0u;
    v16 = 0u;
    v12 = v9;
    v13 = 500;
    v14 = "memcmp((const char*)bytes + offset, (\"CUt\"), sizeof(\"CUt\")) == 0";
    GTError_addError(a4, (uint64_t)&v12);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  v17 = 12;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v17);
  v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)((char *)v8 + v10);
  if (a4)
  {
    if (v10 + 8 > a3)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLFunction_newArgumentEncoderWithBufferIndex_pipelineLibrary(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x746C7543 | *(unsigned __int8 *)(a2 + 40))
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cult\"), sizeof(\"Cult\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(_QWORD *)(a2 + 44);
    a1[2] = *(_QWORD *)(a2 + 52);
    a1[3] = *(_QWORD *)(a2 + 60);
    if (*(_WORD *)(a2 + 68) != 116)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(_QWORD *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 44);
    a1[2] = *(_QWORD *)(a2 + 52);
    a1[3] = *(_QWORD *)(a2 + 60);
    a1[1] = *(_QWORD *)(a2 + 72);
  }
}

void DYTraceDecode_MTLFunction_newArgumentEncoderWithBufferIndex_reflection_pipelineLibrary(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x743E623C556C7543 | *(unsigned __int8 *)(a2 + 44))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CulU<b>t\"), sizeof(\"CulU<b>t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 56);
  v19 = 28;
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLFunction_newFunctionWithPluginData_bitcodeType(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 != 0x62753E623C5543)
  {
    v9 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v9;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"CU<b>ub\"), sizeof(\"CU<b>ub\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v20 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v20);
  v10 = v20;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)v8 + v20);
  v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(_WORD *)((char *)v8 + v11 + 4) != 116)
  {
    v12 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v12;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  v13 = (v11 + 9) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLHeap_newAccelerationStructureWithDescriptor_offset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x6C755543 | *(unsigned __int8 *)(a2 + 40))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CUul\"), sizeof(\"CUul\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v19 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLHeap_newAccelerationStructureWithSize_offset(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970042179 || *(_WORD *)(a2 + 40) != 108)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Culul\"), sizeof(\"Culul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *a1 = *(_QWORD *)(a2 + 44);
    a1[2] = *(_QWORD *)(a2 + 52);
    a1[3] = *(_QWORD *)(a2 + 60);
    if (*(_WORD *)(a2 + 68) != 116)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[1] = *(_QWORD *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 44);
    a1[2] = *(_QWORD *)(a2 + 52);
    a1[3] = *(_QWORD *)(a2 + 60);
    a1[1] = *(_QWORD *)(a2 + 72);
  }
}

void DYTraceDecode_MTLHeap_newBufferWithLength_options_offset(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4 && *(_QWORD *)(a2 + 36) != 0x6C756C756C7543)
  {
    v8 = *a4;
    v14 = 0u;
    v15 = 0u;
    v11 = v8;
    v12 = 500;
    v13 = "memcmp((const char*)bytes + offset, (\"Cululul\"), sizeof(\"Cululul\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[2] = *(_QWORD *)(a2 + 52);
  a1[3] = *(_QWORD *)(a2 + 60);
  a1[4] = *(_QWORD *)(a2 + 68);
  if (a4)
  {
    if (*(_WORD *)(a2 + 76) != 116)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(_QWORD *)(a2 + 80);
    if (a3 <= 0x33)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    a1[1] = *(_QWORD *)(a2 + 80);
  }
}

void DYTraceDecode_MTLIOCommandBuffer_loadBuffer_offset_size_sourceHandle_sourceHandleOffset(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x75746C756C757443 || *(_WORD *)(a2 + 44) != 108)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctulultul\"), sizeof(\"Ctulultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 48);
  a1[1] = *(_QWORD *)(a2 + 56);
  a1[2] = *(_QWORD *)(a2 + 64);
  a1[3] = *(_QWORD *)(a2 + 72);
  a1[4] = *(_QWORD *)(a2 + 80);
  a1[5] = *(_QWORD *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLIOCommandBuffer_loadBytes_size_sourceHandle_sourceHandleOffset(uint64_t a1, _QWORD *a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v8 = (_QWORD *)((char *)a2 + 36);
  if (a4)
  {
    if (*v8 != 0x746C753E623C5543 || *(_QWORD *)((char *)a2 + 39) != 0x6C75746C753E62)
    {
      v10 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v10;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"CU<b>ultul\"), sizeof(\"CU<b>ultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = a2[6];
  v18 = 20;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v18);
  v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)((char *)v8 + v11);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v11 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11 + 16);
  if (a4)
  {
    if (v11 + 24 > a3)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLIOCommandBuffer_loadTexture_slice_level_size_sourceBytesPerRow_sourceBytesPerImage_destinationOrigin_sourceHandle_sourceHandleOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  int v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x33406C756C757443 && *(_QWORD *)(a2 + 44) == 0x33406C756C756C75;
    if (!v8 || *(_QWORD *)(a2 + 50) != 0x6C75746C753340)
    {
      v10 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v10;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"Ctulul@3ululul@3ultul\"), sizeof(\"Ctulul@3ululul@3ultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 84);
  v11 = *(_OWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 124);
  v12 = *(_OWORD *)(a2 + 132);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 156);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 164);
  if (a4)
  {
    if (a3 <= 0x87)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x746C756C756C7543 && *(_QWORD *)(a2 + 44) == 0x756C756C75746C75;
    if (!v8 || *(_QWORD *)(a2 + 51) != 0x6C756C75746C75)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Cululultultululultulul\"), sizeof(\"Cululultultululultulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(_QWORD *)(a2 + 60);
  a1[1] = *(_QWORD *)(a2 + 68);
  a1[2] = *(_QWORD *)(a2 + 76);
  a1[3] = *(_QWORD *)(a2 + 84);
  a1[4] = *(_QWORD *)(a2 + 92);
  a1[5] = *(_QWORD *)(a2 + 100);
  a1[6] = *(_QWORD *)(a2 + 108);
  a1[7] = *(_QWORD *)(a2 + 116);
  a1[8] = *(_QWORD *)(a2 + 124);
  a1[9] = *(_QWORD *)(a2 + 132);
  a1[10] = *(_QWORD *)(a2 + 140);
  a1[11] = *(_QWORD *)(a2 + 148);
  a1[12] = *(_QWORD *)(a2 + 156);
  if (a4)
  {
    if (a3 <= 0x7F)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLIndirectRenderCommand_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x746C756C756C7543 || *(_QWORD *)(a2 + 44) != 0x6C756C6C756C75)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cululultulullul\"), sizeof(\"Cululultulullul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 52);
  a1[1] = *(_QWORD *)(a2 + 60);
  a1[2] = *(_QWORD *)(a2 + 68);
  a1[3] = *(_QWORD *)(a2 + 76);
  a1[4] = *(_QWORD *)(a2 + 84);
  a1[5] = *(_QWORD *)(a2 + 92);
  a1[6] = *(_QWORD *)(a2 + 100);
  a1[7] = *(_QWORD *)(a2 + 108);
  a1[8] = *(_QWORD *)(a2 + 116);
  if (a4)
  {
    if (a3 <= 0x57)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLIndirectRenderCommand_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x7533406C75334043 || *(_QWORD *)(a2 + 42) != 0x6C7533406C7533)
    {
      v9 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v9;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"C@3ul@3ul@3ul\"), sizeof(\"C@3ul@3ul@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  v10 = *(_OWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 8) = v10;
  v11 = *(_OWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 32) = v11;
  v12 = *(_OWORD *)(a2 + 108);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 56) = v12;
  if (a4)
  {
    if (a3 <= 0x5F)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x746C756C756C7543 && *(_QWORD *)(a2 + 44) == 0x75746C756C756C75;
    if (!v8 || *(_DWORD *)(a2 + 52) != 7107948)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Cululultululultulul\"), sizeof(\"Cululultululultulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(_QWORD *)(a2 + 56);
  a1[1] = *(_QWORD *)(a2 + 64);
  a1[2] = *(_QWORD *)(a2 + 72);
  a1[3] = *(_QWORD *)(a2 + 80);
  a1[4] = *(_QWORD *)(a2 + 88);
  a1[5] = *(_QWORD *)(a2 + 96);
  a1[6] = *(_QWORD *)(a2 + 104);
  a1[7] = *(_QWORD *)(a2 + 112);
  a1[8] = *(_QWORD *)(a2 + 120);
  a1[9] = *(_QWORD *)(a2 + 128);
  a1[10] = *(_QWORD *)(a2 + 136);
  if (a4)
  {
    if (a3 <= 0x6B)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLIndirectRenderCommand_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x756C756C756C7543 || *(_DWORD *)(a2 + 44) != 7107948)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cululululul\"), sizeof(\"Cululululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 48);
  a1[1] = *(_QWORD *)(a2 + 56);
  a1[2] = *(_QWORD *)(a2 + 64);
  a1[3] = *(_QWORD *)(a2 + 72);
  a1[4] = *(_QWORD *)(a2 + 80);
  a1[5] = *(_QWORD *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_QWORD *)(a2 + 36) != 0x6C7532406C7543)
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Cul@2ul\"), sizeof(\"Cul@2ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLLateEvalEvent_waitUntilSignaledValue_timeoutMS(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1970763075 || *(_WORD *)(a2 + 40) != 119)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Cuwuw\"), sizeof(\"Cuwuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 60);
    if (*(unsigned __int16 *)(a2 + 68) ^ 0x6975 | *(unsigned __int8 *)(a2 + 70))
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"ui\"), sizeof(\"ui\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 72);
    if (a3 <= 0x27)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 52);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 60);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 72);
  }
}

void DYTraceDecode_MTLLibrary_type(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_WORD *)(a2 + 36) != 67)
    {
      v8 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v8;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"C\"), sizeof(\"C\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *a1 = *(_QWORD *)(a2 + 40);
    if (*(unsigned __int16 *)(a2 + 48) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 50))
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    a1[1] = *(_QWORD *)(a2 + 52);
    if (a3 <= 0x17)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 40);
    a1[1] = *(_QWORD *)(a2 + 52);
  }
}

void DYTraceDecode_MTLLibrary_newExternFunctionWithName(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  unsigned __int16 *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (unsigned __int16 *)(a2 + 36);
  if (a4 && *v8 ^ 0x5343 | *(unsigned __int8 *)(a2 + 38))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CS\"), sizeof(\"CS\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  v19 = 12;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v10) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLLibrary_newFunctionWithName_constantValues_completionHandler(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 != 0x743E623C555343)
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CSU<b>t\"), sizeof(\"CSU<b>t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v19 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_completionHandler(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x74743E623C555343 | *(unsigned __int8 *)(a2 + 44))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CSU<b>tt\"), sizeof(\"CSU<b>tt\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v19 = 20;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v10);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((char *)v8 + v10 + 8);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 16) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 21) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLPipelineLibrary_newComputePipelineDescriptorWithName_error(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;

  v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 != 7623491)
  {
    v9 = *a4;
    v16 = 0u;
    v17 = 0u;
    v13 = v9;
    v14 = 500;
    v15 = "memcmp((const char*)bytes + offset, (\"CSt\"), sizeof(\"CSt\")) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  v18 = 12;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, (uint64_t *)&v18);
  v10 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 8) != 85)
  {
    v11 = *a4;
    v16 = 0u;
    v17 = 0u;
    v13 = v11;
    v14 = 500;
    v15 = "memcmp((const char*)bytes + offset, (\"U\"), sizeof(\"U\")) == 0";
    GTError_addError(a4, (uint64_t)&v13);
  }
  v18 = (v10 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, (uint64_t *)&v18);
  if (a4)
  {
    if (((v18 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLRasterizationRateMap_mapScreenToPhysicalCoordinates_forLayer(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1714569283 || *(_DWORD *)(a2 + 39) != 7107942)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"C@2ful\"), sizeof(\"C@2ful\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *a1 = *(_QWORD *)(a2 + 44);
    a1[3] = *(_QWORD *)(a2 + 52);
    a1[1] = *(_QWORD *)(a2 + 60);
    if (*(_DWORD *)(a2 + 68) != 6697536)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"@2f\"), sizeof(\"@2f\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[2] = *(_QWORD *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *a1 = *(_QWORD *)(a2 + 44);
    a1[3] = *(_QWORD *)(a2 + 52);
    a1[1] = *(_QWORD *)(a2 + 60);
    a1[2] = *(_QWORD *)(a2 + 72);
  }
}

__n128 DYTraceDecode_MTLRasterizationRateMap_physicalSizeForLayer(uint64_t a1, __n128 *a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  __n128 result;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (a2[2].n128_u32[1] != 7107907)
    {
      v8 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v8;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Cul\"), sizeof(\"Cul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)a1 = a2[2].n128_u64[1];
    *(_QWORD *)(a1 + 32) = a2[3].n128_u64[0];
    if (a2[3].n128_u32[2] ^ 0x6C753340 | a2[3].n128_u8[12])
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"@3ul\"), sizeof(\"@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    result = a2[4];
    *(_QWORD *)(a1 + 24) = a2[5].n128_u64[0];
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x33)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(_QWORD *)a1 = a2[2].n128_u64[1];
    *(_QWORD *)(a1 + 32) = a2[3].n128_u64[0];
    result = a2[4];
    *(_QWORD *)(a1 + 24) = a2[5].n128_u64[0];
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

__n128 DYTraceDecode_MTLRenderCommandEncoder_dispatchThreadsPerTile(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __n128 result;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1966293059 || *(_WORD *)(a2 + 40) != 108)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"C@3ul\"), sizeof(\"C@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    result = *(__n128 *)(a2 + 52);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 68);
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x27)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    result = *(__n128 *)(a2 + 52);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 68);
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_MTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x7536406C75334043 || *(_WORD *)(a2 + 44) != 108)
    {
      v9 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v9;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"C@3ul@6ul\"), sizeof(\"C@3ul@6ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v10 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = v10;
  v11 = *(_OWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  if (a4)
  {
    if (a3 <= 0x5B)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion_withRenderTargetArrayIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x7536406C75334043 || *(_DWORD *)(a2 + 44) != 6911340)
    {
      v9 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v9;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"C@3ul@6ului\"), sizeof(\"C@3ul@6ului\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  v10 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = v10;
  v11 = *(_OWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 128);
  if (a4)
  {
    if (a3 <= 0x5F)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPatches_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_indirectBuffer_indirectBufferOffset(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x75746C75746C7543 || *(_QWORD *)(a2 + 41) != 0x6C75746C75746CLL)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cultultultul\"), sizeof(\"Cultultultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 52);
  a1[1] = *(_QWORD *)(a2 + 60);
  a1[2] = *(_QWORD *)(a2 + 68);
  a1[3] = *(_QWORD *)(a2 + 76);
  a1[4] = *(_QWORD *)(a2 + 84);
  a1[5] = *(_QWORD *)(a2 + 92);
  a1[6] = *(_QWORD *)(a2 + 100);
  a1[7] = *(_QWORD *)(a2 + 108);
  if (a4)
  {
    if (a3 <= 0x4F)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x746C756C756C7543 && *(_QWORD *)(a2 + 44) == 0x756C756C75746C75;
    if (!v8 || *(_WORD *)(a2 + 52) != 108)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Cululultultululul\"), sizeof(\"Cululultultululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(_QWORD *)(a2 + 56);
  a1[1] = *(_QWORD *)(a2 + 64);
  a1[2] = *(_QWORD *)(a2 + 72);
  a1[3] = *(_QWORD *)(a2 + 80);
  a1[4] = *(_QWORD *)(a2 + 88);
  a1[5] = *(_QWORD *)(a2 + 96);
  a1[6] = *(_QWORD *)(a2 + 104);
  a1[7] = *(_QWORD *)(a2 + 112);
  a1[8] = *(_QWORD *)(a2 + 120);
  a1[9] = *(_QWORD *)(a2 + 128);
  if (a4)
  {
    if (a3 <= 0x63)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset(_QWORD *a1, _QWORD *a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)((char *)a2 + 36) != 0x746C756C756C7543 || *(_QWORD *)((char *)a2 + 39) != 0x6C75746C756C75)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cululultul\"), sizeof(\"Cululultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = a2[6];
  a1[1] = a2[7];
  a1[2] = a2[8];
  a1[3] = a2[9];
  a1[4] = a2[10];
  a1[5] = a2[11];
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x746C756C756C7543 || *(_QWORD *)(a2 + 41) != 0x6C756C75746C75)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cululultulul\"), sizeof(\"Cululultulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 52);
  a1[1] = *(_QWORD *)(a2 + 60);
  a1[2] = *(_QWORD *)(a2 + 68);
  a1[3] = *(_QWORD *)(a2 + 76);
  a1[4] = *(_QWORD *)(a2 + 84);
  a1[5] = *(_QWORD *)(a2 + 92);
  a1[6] = *(_QWORD *)(a2 + 100);
  if (a4)
  {
    if (a3 <= 0x47)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuffer_indirectBufferOffset(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x6C75746C756C7543 || *(_DWORD *)(a2 + 44) != 7107956)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Culultultul\"), sizeof(\"Culultultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 48);
  a1[1] = *(_QWORD *)(a2 + 56);
  a1[2] = *(_QWORD *)(a2 + 64);
  a1[3] = *(_QWORD *)(a2 + 72);
  a1[4] = *(_QWORD *)(a2 + 80);
  a1[5] = *(_QWORD *)(a2 + 88);
  a1[6] = *(_QWORD *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawMeshThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x6C7533406C757443 || *(_QWORD *)(a2 + 41) != 0x6C7533406C7533)
    {
      v9 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v9;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"Ctul@3ul@3ul\"), sizeof(\"Ctul@3ul@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 68);
  v10 = *(_OWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 24) = v10;
  v11 = *(_OWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 116);
  *(_OWORD *)(a1 + 48) = v11;
  if (a4)
  {
    if (a3 <= 0x57)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawPatches_patchIndexBuffer_patchIndexBufferOffset_indirectBuffer_indirectBufferOffset(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x75746C75746C7543 || *(_WORD *)(a2 + 44) != 108)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cultultul\"), sizeof(\"Cultultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 48);
  a1[1] = *(_QWORD *)(a2 + 56);
  a1[2] = *(_QWORD *)(a2 + 64);
  a1[3] = *(_QWORD *)(a2 + 72);
  a1[4] = *(_QWORD *)(a2 + 80);
  a1[5] = *(_QWORD *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x746C756C756C7543 || *(_QWORD *)(a2 + 43) != 0x6C756C756C7574)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cululultululul\"), sizeof(\"Cululultululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 52);
  a1[1] = *(_QWORD *)(a2 + 60);
  a1[2] = *(_QWORD *)(a2 + 68);
  a1[3] = *(_QWORD *)(a2 + 76);
  a1[4] = *(_QWORD *)(a2 + 84);
  a1[5] = *(_QWORD *)(a2 + 92);
  a1[6] = *(_QWORD *)(a2 + 100);
  a1[7] = *(_QWORD *)(a2 + 108);
  if (a4)
  {
    if (a3 <= 0x4F)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawPrimitives_indirectBuffer_indirectBufferOffset(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1953264963 || *(_DWORD *)(a2 + 39) != 7107956)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cultul\"), sizeof(\"Cultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[1] = *(_QWORD *)(a2 + 52);
  a1[2] = *(_QWORD *)(a2 + 60);
  a1[3] = *(_QWORD *)(a2 + 68);
  if (a4)
  {
    if (a3 <= 0x27)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x756C756C756C7543 || *(_WORD *)(a2 + 44) != 108)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Culululul\"), sizeof(\"Culululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 48);
  a1[1] = *(_QWORD *)(a2 + 56);
  a1[2] = *(_QWORD *)(a2 + 64);
  a1[3] = *(_QWORD *)(a2 + 72);
  a1[4] = *(_QWORD *)(a2 + 80);
  if (a4)
  {
    if (a3 <= 0x33)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_memoryBarrierWithResources_count_afterStages_beforeStages(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _DWORD v12[2];
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v7 = (const char *)(a2 + 36);
  v16 = 0;
  sscanf((const char *)(a2 + 36), "C@%zutululul", &v16);
  v8 = strlen(v7);
  v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *a1 = *(_QWORD *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  a1[1] = &v7[v9];
  v10 = v9 + 8 * v16;
  a1[2] = *(_QWORD *)&v7[v10];
  a1[3] = *(_QWORD *)&v7[v10 + 8];
  a1[4] = *(_QWORD *)&v7[v10 + 16];
  if (a4)
  {
    if (v10 + 24 > a3)
    {
      v11 = *a4;
      v14 = 0u;
      v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setAlphaTestReferenceValue(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 36) ^ 0x6643 | *(unsigned __int8 *)(a2 + 38))
    {
      v8 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v8;
      v11 = 500;
      v12 = "memcmp((const char*)bytes + offset, (\"Cf\"), sizeof(\"Cf\")) == 0";
      GTError_addError(a4, (uint64_t)&v10);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
    if (a3 <= 0xF)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setBlendColorRed_green_blue_alpha(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1717986883 || *(_WORD *)(a2 + 40) != 102)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cffff\"), sizeof(\"Cffff\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 64);
  if (a4)
  {
    if (a3 <= 0x1F)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_atIndex(_QWORD *a1, _QWORD *a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)((char *)a2 + 36) != 0x6C756C756C757443 || *(_QWORD *)((char *)a2 + 39) != 0x6C756C756C756CLL)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctulululul\"), sizeof(\"Ctulululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = a2[6];
  a1[1] = a2[7];
  a1[2] = a2[8];
  a1[3] = a2[9];
  a1[4] = a2[10];
  a1[5] = a2[11];
  if (a4)
  {
    if (a3 <= 0x3B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_yInvert_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x6C756C756C757443 || *(_QWORD *)(a2 + 41) != 0x6C7569756C756CLL)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctulululuiul\"), sizeof(\"Ctulululuiul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setDepthBias_slopeScale_clamp(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_DWORD *)(a2 + 36) ^ 0x66666643 | *(unsigned __int8 *)(a2 + 40))
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Cfff\"), sizeof(\"Cfff\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 60);
  if (a4)
  {
    if (a3 <= 0x1B)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level_yInvert(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x6C756C756C757443 || *(_QWORD *)(a2 + 39) != 0x69756C756C756CLL)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctululului\"), sizeof(\"Ctululului\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 88);
  if (a4)
  {
    if (a3 <= 0x37)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setMeshBuffers_offsets_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _DWORD v12[2];
  const char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;

  v7 = (const char *)(a2 + 36);
  v16 = 0;
  sscanf((const char *)(a2 + 36), "C@%zutU<b>@2ul", &v16);
  v8 = strlen(v7);
  v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  *(_QWORD *)a1 = *(_QWORD *)&v7[(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4];
  *(_QWORD *)(a1 + 8) = &v7[v9];
  v17 = v9 + 8 * v16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v7, (uint64_t *)&v17);
  v10 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v7[v10];
  if (a4)
  {
    if (v10 + 16 > a3)
    {
      v11 = *a4;
      v14 = 0u;
      v15 = 0u;
      v12[0] = v11;
      v12[1] = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)v12);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setPrimitiveRestartEnabled_index(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1969845571 || *(_WORD *)(a2 + 40) != 108)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cuiul\"), sizeof(\"Cuiul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 56);
  if (a4)
  {
    if (a3 <= 0x1B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLRenderCommandEncoder_setStencilFrontReferenceValue_backReferenceValue(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1969845571 || *(_WORD *)(a2 + 40) != 105)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Cuiui\"), sizeof(\"Cuiui\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 56);
  if (a4)
  {
    if (a3 <= 0x17)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

__n128 DYTraceDecode_MTLRenderCommandEncoder_setViewport(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  __n128 result;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) ^ 0x64364043 | *(unsigned __int8 *)(a2 + 40))
    {
      v8 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v8;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"C@6d\"), sizeof(\"C@6d\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    result = *(__n128 *)(a2 + 52);
    v10 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 24) = v10;
    *(__n128 *)(a1 + 8) = result;
    if (a3 <= 0x3F)
    {
      v11 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v11;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
    result = *(__n128 *)(a2 + 52);
    v12 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 84);
    *(_OWORD *)(a1 + 24) = v12;
    *(__n128 *)(a1 + 8) = result;
  }
  return result;
}

void DYTraceDecode_MTLResourceStateCommandEncoder_copyMappingStateFromTexture_mipLevel_slice_toBuffer_offset_numTiles(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x75746C756C757443 || *(_DWORD *)(a2 + 44) != 7107948)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctulultulul\"), sizeof(\"Ctulultulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 48);
  a1[1] = *(_QWORD *)(a2 + 56);
  a1[2] = *(_QWORD *)(a2 + 64);
  a1[3] = *(_QWORD *)(a2 + 72);
  a1[4] = *(_QWORD *)(a2 + 80);
  a1[5] = *(_QWORD *)(a2 + 88);
  a1[6] = *(_QWORD *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLResourceStateCommandEncoder_updateTextureMapping_mode_region_mipLevel_slice(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x6C7536406C757443 || *(_QWORD *)(a2 + 41) != 0x6C756C756C7536)
    {
      v9 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v9;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"Ctul@6ululul\"), sizeof(\"Ctul@6ululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 68);
  v10 = *(_OWORD *)(a2 + 76);
  v11 = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 132);
  if (a4)
  {
    if (a3 <= 0x67)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_MTLResourceStateCommandEncoder_updateTextureMappings_mode_regions_mipLevels_slices_numRegions(uint64_t a1, _QWORD *a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  BOOL v9;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_QWORD *)((char *)a2 + 36);
  if (a4)
  {
    v9 = *v8 == 0x3E623C556C757443 && *(_QWORD *)((char *)a2 + 44) == 0x3E623C553E623C55;
    if (!v9 || *(_QWORD *)((char *)a2 + 47) != 0x6C753E623C553ELL)
    {
      v11 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v11;
      v15 = 500;
      v16 = "memcmp((const char*)bytes + offset, (\"CtulU<b>U<b>U<b>ul\"), sizeof(\"CtulU<b>U<b>U<b>ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
  *(_QWORD *)a1 = a2[7];
  *(_QWORD *)(a1 + 8) = a2[8];
  *(_QWORD *)(a1 + 16) = a2[9];
  v19 = 44;
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v19);
  *(_QWORD *)(a1 + 32) = AppendString_11072((const char **)(a1 + 32), (uint64_t)v8, &v19);
  *(_QWORD *)(a1 + 40) = AppendString_11072((const char **)(a1 + 40), (uint64_t)v8, &v19);
  v12 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MTLTexture_saveSlice_level_zPlane_normalize_blitOption_toPath(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x756C756C756C7543 || *(_QWORD *)(a2 + 41) != 0x536C7569756C75)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"CulululuiulS\"), sizeof(\"CulululuiulS\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 88);
  v17 = 60;
  *(_QWORD *)(a1 + 40) = AppendString_11072((const char **)(a1 + 40), (uint64_t)v8, &v17);
  if (a4)
  {
    if (((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) > a3)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
}

void DYTraceDecode_MTLTexture_getBytes_bytesPerRow_fromRegion_mipmapLevel(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x406C753E623C5543 || *(_QWORD *)(a2 + 42) != 0x6C756C7536406CLL)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"CU<b>ul@6ulul\"), sizeof(\"CU<b>ul@6ulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  v20 = 24;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v20);
  v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)((char *)v8 + v11);
  v12 = *(_OWORD *)((char *)v8 + v11 + 24);
  v13 = *(_OWORD *)((char *)v8 + v11 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)v8 + v11 + 8);
  *(_OWORD *)(a1 + 56) = v13;
  *(_OWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)((char *)v8 + v11 + 56);
  if (a4)
  {
    if (v11 + 64 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x7532406C756C7543 || *(_QWORD *)(a2 + 42) != 0x6C7532406C7532)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Culul@2ul@2ul\"), sizeof(\"Culul@2ul@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 92);
  if (a4)
  {
    if (*(_WORD *)(a2 + 108) != 116)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 112);
    if (a3 <= 0x53)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 112);
  }
}

void DYTraceDecode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_resourceIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x7532406C756C7543 || *(_QWORD *)(a2 + 44) != 0x77756C7532406CLL)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Culul@2ul@2uluw\"), sizeof(\"Culul@2ul@2uluw\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 68);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 108);
  if (a4)
  {
    if (*(_WORD *)(a2 + 116) != 116)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 120);
    if (a3 <= 0x5B)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 120);
  }
}

void DYTraceDecode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x7532406C756C7543 && *(_QWORD *)(a2 + 44) == 0x7534406C7532406CLL;
    if (!v8 || *(_WORD *)(a2 + 52) != 98)
    {
      v10 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v10;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"Culul@2ul@2ul@4ub\"), sizeof(\"Culul@2ul@2ul@4ub\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 112);
  if (a4)
  {
    if (*(_WORD *)(a2 + 116) != 116)
    {
      v11 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v11;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 120);
    if (a3 <= 0x5B)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 120);
  }
}

void DYTraceDecode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_resourceIndex(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x7532406C756C7543 && *(_QWORD *)(a2 + 44) == 0x7534406C7532406CLL;
    if (!v8 || *(_DWORD *)(a2 + 52) != 7828834)
    {
      v10 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v10;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"Culul@2ul@2ul@4ubuw\"), sizeof(\"Culul@2ul@2ul@4ubuw\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 116);
  if (a4)
  {
    if (*(_WORD *)(a2 + 124) != 116)
    {
      v11 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v11;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 128);
    if (a3 <= 0x63)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 128);
  }
}

void DYTraceDecode_MTLTexture_replaceRegion_mipmapLevel_withBytes_bytesPerRow(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x556C756C75364043 || *(_QWORD *)(a2 + 42) != 0x6C753E623C556CLL)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"C@6ululU<b>ul\"), sizeof(\"C@6ululU<b>ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  v11 = *(_OWORD *)(a2 + 60);
  v12 = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 108);
  v20 = 80;
  *(_QWORD *)(a1 + 64) = AppendString_11072((const char **)(a1 + 64), (uint64_t)v8, &v20);
  v13 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MTLVideoCommandEncoder_generateMotionVectorsForTexture_previousTexture_resultBuffer_bufferOffset(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1953788995 || *(_DWORD *)(a2 + 39) != 7107956)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctttul\"), sizeof(\"Ctttul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[1] = *(_QWORD *)(a2 + 52);
  a1[2] = *(_QWORD *)(a2 + 60);
  a1[3] = *(_QWORD *)(a2 + 68);
  a1[4] = *(_QWORD *)(a2 + 76);
  if (a4)
  {
    if (a3 <= 0x2F)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MTLVisibleFunctionTable_setFunctions_withRange(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 843076931 || *(_DWORD *)(a2 + 39) != 7107890)
    {
      v10 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v10;
      v14 = 500;
      v15 = "memcmp((const char*)bytes + offset, (\"CU@2ul\"), sizeof(\"CU@2ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v18 = 16;
  *(_QWORD *)(a1 + 8) = AppendString_11072((const char **)(a1 + 8), (uint64_t)v8, &v18);
  v11 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)((char *)v8 + v11);
  if (a4)
  {
    if (v11 + 16 > a3)
    {
      v12 = *a4;
      v16 = 0u;
      v17 = 0u;
      v13 = v12;
      v14 = 500;
      v15 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v13);
    }
  }
}

void DYTraceDecode_NSHMDMetalSession_initWithMetalDevice_deviceReference_hmdName(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x53557443 | *(unsigned __int8 *)(a2 + 40))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CtUS\"), sizeof(\"CtUS\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 52);
  v19 = 24;
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v19);
  *(_QWORD *)(a1 + 32) = AppendString_11072((const char **)(a1 + 32), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(_WORD *)((char *)v8 + v10) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MPSPlugin_newCNNConvolutionWithDescriptor_dataSource_fullyConnected(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v8 = (_DWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x69555543 | *(unsigned __int8 *)(a2 + 40))
  {
    v9 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v9;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"CUUi\"), sizeof(\"CUUi\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  v19 = 16;
  *(_QWORD *)(a1 + 16) = AppendString_11072((const char **)(a1 + 16), (uint64_t)v8, &v19);
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v19);
  v10 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)((char *)v8 + v10);
  if (a4 && *(_WORD *)((char *)v8 + v10 + 4) != 116)
  {
    v11 = *a4;
    v17 = 0u;
    v18 = 0u;
    v14 = v11;
    v15 = 500;
    v16 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v14);
  }
  v12 = (v10 + 9) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v12);
  if (a4)
  {
    if (v12 + 8 > a3)
    {
      v13 = *a4;
      v17 = 0u;
      v18 = 0u;
      v14 = v13;
      v15 = 500;
      v16 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v14);
    }
  }
}

void DYTraceDecode_MPSPlugin_newCNNNeuronWithNeuronType_neuronParameterA_neuronParameterB_neuronParameterC(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_DWORD *)(a2 + 36) != 1717987651 || *(_WORD *)(a2 + 40) != 102)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Cifff\"), sizeof(\"Cifff\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 64);
  if (a4)
  {
    if (*(_WORD *)(a2 + 68) != 116)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 72);
    if (a3 <= 0x2B)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 72);
  }
}

void DYTraceDecode_MPSPlugin_newCNNNeuronWithNeuronType_neuronParameterAArray_count(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _DWORD *v8;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v8 = (_DWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 1968531779 || *(_WORD *)(a2 + 40) != 108)
    {
      v10 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v10;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"CiUul\"), sizeof(\"CiUul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 52);
  v20 = 20;
  *(_QWORD *)(a1 + 24) = AppendString_11072((const char **)(a1 + 24), (uint64_t)v8, &v20);
  v11 = (v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((char *)v8 + v11);
  if (a4 && *(_WORD *)((char *)v8 + v11 + 8) != 116)
  {
    v12 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v12;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  v13 = (v11 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v13);
  if (a4)
  {
    if (v13 + 8 > a3)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
}

void DYTraceDecode_MPSPlugin_newMatrixMultiplicationWithTransposeLeft_transposeRight_resultRows_resultColumns_interiorColumns_alpha_beta(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x756C756C75696943 || *(_DWORD *)(a2 + 44) != 6579308)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Ciiulululdd\"), sizeof(\"Ciiulululdd\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 96);
  if (a4)
  {
    if (*(_WORD *)(a2 + 104) != 116)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 108);
    if (a3 <= 0x4F)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 108);
  }
}

void DYTraceDecode_MPSPlugin_newMatrixVectorMultiplicationWithTranspose_rows_columns_alpha_beta(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4 && *(_QWORD *)(a2 + 36) ^ 0x64646C756C756943 | *(unsigned __int8 *)(a2 + 44))
  {
    v8 = *a4;
    v14 = 0u;
    v15 = 0u;
    v11 = v8;
    v12 = 500;
    v13 = "memcmp((const char*)bytes + offset, (\"Ciululdd\"), sizeof(\"Ciululdd\")) == 0";
    GTError_addError(a4, (uint64_t)&v11);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 84);
  if (a4)
  {
    if (*(_WORD *)(a2 + 92) != 116)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 96);
    if (a3 <= 0x43)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 96);
  }
}

void DYTraceDecode_MPSPlugin_newCNNPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x756C756C756C7543 || *(_WORD *)(a2 + 44) != 108)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Culululul\"), sizeof(\"Culululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(_QWORD *)(a2 + 48);
  a1[2] = *(_QWORD *)(a2 + 56);
  a1[3] = *(_QWORD *)(a2 + 64);
  a1[4] = *(_QWORD *)(a2 + 72);
  a1[5] = *(_QWORD *)(a2 + 80);
  if (a4)
  {
    if (*(_WORD *)(a2 + 88) != 116)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[1] = *(_QWORD *)(a2 + 92);
    if (a3 <= 0x3F)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    a1[1] = *(_QWORD *)(a2 + 92);
  }
}

void DYTraceDecode_MPSPlugin_newCNNDilatedPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_dilationRateX_dilationRateY(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  __int128 v15;
  __int128 v16;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x756C756C756C7543 || *(_QWORD *)(a2 + 42) != 0x6C756C756C756CLL)
    {
      v9 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v9;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"Culululululul\"), sizeof(\"Culululululul\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  *a1 = *(_QWORD *)(a2 + 52);
  a1[2] = *(_QWORD *)(a2 + 60);
  a1[3] = *(_QWORD *)(a2 + 68);
  a1[4] = *(_QWORD *)(a2 + 76);
  a1[5] = *(_QWORD *)(a2 + 84);
  a1[6] = *(_QWORD *)(a2 + 92);
  a1[7] = *(_QWORD *)(a2 + 100);
  if (a4)
  {
    if (*(_WORD *)(a2 + 108) != 116)
    {
      v10 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v10;
      v13 = 500;
      v14 = "memcmp((const char*)bytes + offset, (\"t\"), sizeof(\"t\")) == 0";
      GTError_addError(a4, (uint64_t)&v12);
    }
    a1[1] = *(_QWORD *)(a2 + 112);
    if (a3 <= 0x53)
    {
      v11 = *a4;
      v15 = 0u;
      v16 = 0u;
      v12 = v11;
      v13 = 500;
      v14 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v12);
    }
  }
  else
  {
    a1[1] = *(_QWORD *)(a2 + 112);
  }
}

void DYTraceDecode_MPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_sourceInfo_destinationTexture_destinationInfo(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x7455746C75747443 || *(_WORD *)(a2 + 44) != 85)
    {
      v10 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v10;
      v17 = 500;
      v18 = "memcmp((const char*)bytes + offset, (\"CttultUtU\"), sizeof(\"CttultUtU\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 80);
  v21 = 52;
  *(_QWORD *)(a1 + 48) = AppendString_11072((const char **)(a1 + 48), (uint64_t)v8, (uint64_t *)&v21);
  v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)((char *)v8 + v11);
  v21 = v11 + 8;
  *(_QWORD *)(a1 + 64) = AppendString_11072((const char **)(a1 + 64), (uint64_t)v8, (uint64_t *)&v21);
  v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v12) ^ 0x6C75 | *((unsigned __int8 *)v8 + v12 + 2))
  {
    v13 = *a4;
    v19 = 0u;
    v20 = 0u;
    v16 = v13;
    v17 = 500;
    v18 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  v14 = (v12 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      v15 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v15;
      v17 = 500;
      v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourceTexture_sourceInfo_destinationTexture_destinationInfo(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x746C756C75747443 || *(_DWORD *)(a2 + 44) != 5600341)
    {
      v10 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v10;
      v17 = 500;
      v18 = "memcmp((const char*)bytes + offset, (\"CttulultUtU\"), sizeof(\"CttulultUtU\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 88);
  v21 = 60;
  *(_QWORD *)(a1 + 56) = AppendString_11072((const char **)(a1 + 56), (uint64_t)v8, (uint64_t *)&v21);
  v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)((char *)v8 + v11);
  v21 = v11 + 8;
  *(_QWORD *)(a1 + 72) = AppendString_11072((const char **)(a1 + 72), (uint64_t)v8, (uint64_t *)&v21);
  v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v12) ^ 0x6C75 | *((unsigned __int8 *)v8 + v12 + 2))
  {
    v13 = *a4;
    v19 = 0u;
    v20 = 0u;
    v16 = v13;
    v17 = 500;
    v18 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  v14 = (v12 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      v15 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v15;
      v17 = 500;
      v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MPSExternalCNNUnary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourceTextures_sourceInfo_destinationTextures_destinationInfo_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  const char *v9;
  unint64_t v10;
  const char *appended;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;

  v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "Cttulul@%llutU@%llutUtul", a1 + 56, a1 + 80);
  v8 = strlen(v7);
  v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *(_QWORD *)a1 = *(_QWORD *)(v9 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 12);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v9 + 20);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 + 28);
  v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 44;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v9 + 36);
  *(_QWORD *)(a1 + 48) = &v7[v10];
  v22 = v10 + 8 * *(_QWORD *)(a1 + 56);
  appended = AppendString_11072((const char **)(a1 + 64), (uint64_t)v7, (uint64_t *)&v22);
  v12 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 64) = appended;
  *(_QWORD *)(a1 + 72) = &v7[v12];
  v22 = v12 + 8 * *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 88) = AppendString_11072((const char **)(a1 + 88), (uint64_t)v7, (uint64_t *)&v22);
  v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)&v7[v13];
  *(_QWORD *)(a1 + 104) = *(_QWORD *)&v7[v13 + 8];
  if (a4 && *(unsigned __int16 *)&v7[v13 + 16] ^ 0x6C75 | v7[v13 + 18])
  {
    v14 = *a4;
    v20 = 0u;
    v21 = 0u;
    v17 = v14;
    v18 = 500;
    v19 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }
  v15 = (v13 + 22) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)&v7[v15];
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      v16 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v16;
      v18 = 500;
      v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
}

void DYTraceDecode_MPSExternalCNNBinary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTexture_primaryInfo_secondaryTexture_secondaryInfo_destinationTexture_destinationInfo(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x746C756C75747443 || *(_QWORD *)(a2 + 42) != 0x5574557455746CLL)
    {
      v10 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v10;
      v18 = 500;
      v19 = "memcmp((const char*)bytes + offset, (\"CttulultUtUtU\"), sizeof(\"CttulultUtUtU\")) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 92);
  v22 = 64;
  *(_QWORD *)(a1 + 56) = AppendString_11072((const char **)(a1 + 56), (uint64_t)v8, (uint64_t *)&v22);
  v11 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)((char *)v8 + v11);
  v22 = v11 + 8;
  *(_QWORD *)(a1 + 72) = AppendString_11072((const char **)(a1 + 72), (uint64_t)v8, (uint64_t *)&v22);
  v12 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)((char *)v8 + v12);
  v22 = v12 + 8;
  *(_QWORD *)(a1 + 88) = AppendString_11072((const char **)(a1 + 88), (uint64_t)v8, (uint64_t *)&v22);
  v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (a4 && *(unsigned __int16 *)((char *)v8 + v13) ^ 0x6C75 | *((unsigned __int8 *)v8 + v13 + 2))
  {
    v14 = *a4;
    v20 = 0u;
    v21 = 0u;
    v17 = v14;
    v18 = 500;
    v19 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }
  v15 = (v13 + 6) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v15);
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      v16 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v16;
      v18 = 500;
      v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
}

void DYTraceDecode_MPSExternalCNNBinary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTextures_primaryInfo_secondaryTextures_secondaryInfo_destinationTextures_destinationInfo_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  const char *v9;
  unint64_t v10;
  const char *appended;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;

  v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "Cttulul@%llutU@%llutU@%llutUtul", a1 + 56, a1 + 80, a1 + 104);
  v8 = strlen(v7);
  v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *(_QWORD *)a1 = *(_QWORD *)(v9 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 12);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v9 + 20);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 + 28);
  v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 44;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v9 + 36);
  *(_QWORD *)(a1 + 48) = &v7[v10];
  v24 = v10 + 8 * *(_QWORD *)(a1 + 56);
  appended = AppendString_11072((const char **)(a1 + 64), (uint64_t)v7, (uint64_t *)&v24);
  v12 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 64) = appended;
  *(_QWORD *)(a1 + 72) = &v7[v12];
  v24 = v12 + 8 * *(_QWORD *)(a1 + 80);
  v13 = AppendString_11072((const char **)(a1 + 88), (uint64_t)v7, (uint64_t *)&v24);
  v14 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = &v7[v14];
  v24 = v14 + 8 * *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 112) = AppendString_11072((const char **)(a1 + 112), (uint64_t)v7, (uint64_t *)&v24);
  v15 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)&v7[v15];
  *(_QWORD *)(a1 + 128) = *(_QWORD *)&v7[v15 + 8];
  if (a4 && *(unsigned __int16 *)&v7[v15 + 16] ^ 0x6C75 | v7[v15 + 18])
  {
    v16 = *a4;
    v22 = 0u;
    v23 = 0u;
    v19 = v16;
    v20 = 500;
    v21 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v19);
  }
  v17 = (v15 + 22) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)&v7[v17];
  if (a4)
  {
    if (v17 + 8 > a3)
    {
      v18 = *a4;
      v22 = 0u;
      v23 = 0u;
      v19 = v18;
      v20 = 500;
      v21 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }
}

void DYTraceDecode_MPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_biases_predicationBuffer_predicationOffset(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_QWORD *)(a2 + 36) ^ 0x6C75747474747443 | *(unsigned __int8 *)(a2 + 44))
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Ctttttul\"), sizeof(\"Ctttttul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(_QWORD *)(a2 + 48);
  a1[1] = *(_QWORD *)(a2 + 56);
  a1[2] = *(_QWORD *)(a2 + 64);
  a1[3] = *(_QWORD *)(a2 + 72);
  a1[4] = *(_QWORD *)(a2 + 80);
  a1[5] = *(_QWORD *)(a2 + 88);
  a1[6] = *(_QWORD *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_weightsDataType_biases_predicationBuffer_predicationOffset(_QWORD *a1, _QWORD *a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)((char *)a2 + 36) != 0x74746C7574747443 || *(_QWORD *)((char *)a2 + 39) != 0x6C7574746C7574)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctttulttul\"), sizeof(\"Ctttulttul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = a2[6];
  a1[1] = a2[7];
  a1[2] = a2[8];
  a1[3] = a2[9];
  a1[4] = a2[10];
  a1[5] = a2[11];
  a1[6] = a2[12];
  a1[7] = a2[13];
  if (a4)
  {
    if (a3 <= 0x4B)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_predicationBuffer_predicationOffset(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  __int128 v13;
  __int128 v14;

  if (a4 && *(_QWORD *)(a2 + 36) != 0x6C757474747443)
  {
    v8 = *a4;
    v13 = 0u;
    v14 = 0u;
    v10 = v8;
    v11 = 500;
    v12 = "memcmp((const char*)bytes + offset, (\"Cttttul\"), sizeof(\"Cttttul\")) == 0";
    GTError_addError(a4, (uint64_t)&v10);
  }
  *a1 = *(_QWORD *)(a2 + 44);
  a1[1] = *(_QWORD *)(a2 + 52);
  a1[2] = *(_QWORD *)(a2 + 60);
  a1[3] = *(_QWORD *)(a2 + 68);
  a1[4] = *(_QWORD *)(a2 + 76);
  a1[5] = *(_QWORD *)(a2 + 84);
  if (a4)
  {
    if (a3 <= 0x37)
    {
      v9 = *a4;
      v13 = 0u;
      v14 = 0u;
      v10 = v9;
      v11 = 500;
      v12 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v10);
    }
  }
}

void DYTraceDecode_MPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_weightsDataType_predicationBuffer_predicationOffset(_QWORD *a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int128 v14;
  __int128 v15;

  if (a4)
  {
    if (*(_QWORD *)(a2 + 36) != 0x75746C7574747443 || *(_WORD *)(a2 + 44) != 108)
    {
      v9 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v9;
      v12 = 500;
      v13 = "memcmp((const char*)bytes + offset, (\"Ctttultul\"), sizeof(\"Ctttultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
  *a1 = *(_QWORD *)(a2 + 48);
  a1[1] = *(_QWORD *)(a2 + 56);
  a1[2] = *(_QWORD *)(a2 + 64);
  a1[3] = *(_QWORD *)(a2 + 72);
  a1[4] = *(_QWORD *)(a2 + 80);
  a1[5] = *(_QWORD *)(a2 + 88);
  a1[6] = *(_QWORD *)(a2 + 96);
  if (a4)
  {
    if (a3 <= 0x43)
    {
      v10 = *a4;
      v14 = 0u;
      v15 = 0u;
      v11 = v10;
      v12 = 500;
      v13 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v11);
    }
  }
}

void DYTraceDecode_MPSExternalCNNConvolutionGradient_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTextures_primaryInfo_secondaryTextures_secondaryInfo_weightsGradient_biasesGradient_accumulate_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  const char *v9;
  unint64_t v10;
  const char *appended;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;

  v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "Cttulul@%llutU@%llutUttitul", a1 + 56, a1 + 80);
  v8 = strlen(v7);
  v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *(_QWORD *)a1 = *(_QWORD *)(v9 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 12);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v9 + 20);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 + 28);
  v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 44;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v9 + 36);
  *(_QWORD *)(a1 + 48) = &v7[v10];
  v22 = v10 + 8 * *(_QWORD *)(a1 + 56);
  appended = AppendString_11072((const char **)(a1 + 64), (uint64_t)v7, (uint64_t *)&v22);
  v12 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 64) = appended;
  *(_QWORD *)(a1 + 72) = &v7[v12];
  v22 = v12 + 8 * *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 88) = AppendString_11072((const char **)(a1 + 88), (uint64_t)v7, (uint64_t *)&v22);
  v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)&v7[v13];
  *(_QWORD *)(a1 + 104) = *(_QWORD *)&v7[v13 + 8];
  *(_DWORD *)(a1 + 112) = *(_DWORD *)&v7[v13 + 16];
  *(_QWORD *)(a1 + 120) = *(_QWORD *)&v7[v13 + 20];
  *(_QWORD *)(a1 + 128) = *(_QWORD *)&v7[v13 + 28];
  if (a4 && *(unsigned __int16 *)&v7[v13 + 36] ^ 0x6C75 | v7[v13 + 38])
  {
    v14 = *a4;
    v20 = 0u;
    v21 = 0u;
    v17 = v14;
    v18 = 500;
    v19 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }
  v15 = (v13 + 42) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)&v7[v15];
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      v16 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v16;
      v18 = 500;
      v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
}

void DYTraceDecode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_A_aInfo_B_bInfo_C_cInfo(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  __int128 v19;
  __int128 v20;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x746C756C75747443 && *(_QWORD *)(a2 + 44) == 0x753440746C753440;
    if (!v8 || *(_QWORD *)(a2 + 51) != 0x6C753440746C75)
    {
      v10 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v10;
      v17 = 500;
      v18 = "memcmp((const char*)bytes + offset, (\"Cttulult@4ult@4ult@4ul\"), sizeof(\"Cttulult@4ult@4ult@4ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 100);
  v11 = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 140);
  v12 = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 148);
  *(_OWORD *)(a1 + 112) = v12;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 180);
  v13 = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 204);
  *(_OWORD *)(a1 + 136) = v13;
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 220) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 222))
    {
      v14 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v14;
      v17 = 500;
      v18 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 224);
    if (a3 <= 0xC3)
    {
      v15 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v15;
      v17 = 500;
      v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 224);
  }
}

void DYTraceDecode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resultColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  BOOL v9;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  __int128 v20;
  __int128 v21;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x756C756C75747443 && *(_QWORD *)(a2 + 44) == 0x7464646C756C756CLL;
    v9 = v8 && *(_QWORD *)(a2 + 52) == 0x753440746C753440;
    if (!v9 || *(_QWORD *)(a2 + 59) != 0x6C753440746C75)
    {
      v11 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v11;
      v18 = 500;
      v19 = "memcmp((const char*)bytes + offset, (\"Cttulululululddt@4ult@4ult@4ul\"), sizeof(\"Cttulululululddt@4ult@4ult@4ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 108);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 132);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 148);
  v12 = *(_OWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 156);
  *(_OWORD *)(a1 + 112) = v12;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 188);
  v13 = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 212);
  *(_OWORD *)(a1 + 136) = v13;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 228);
  v14 = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 236);
  *(_OWORD *)(a1 + 192) = v14;
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 268) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 270))
    {
      v15 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v15;
      v18 = 500;
      v19 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 272);
    if (a3 <= 0xF3)
    {
      v16 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v16;
      v18 = 500;
      v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 272);
  }
}

void DYTraceDecode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRowsAndResultColumnsAndInteriorColumns_alphaAndBeta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;

  if (a4 && strcmp((const char *)(a2 + 36), "Cttulul@3ul@2dt@4ult@4ult@4ultul"))
  {
    v8 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v8;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"Cttulul@3ul@2dt@4ult@4ult@4ultul\"), sizeof(\"Cttulul@3ul@2dt@4ult@4ult"
          "@4ultul\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 104);
  v9 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 152);
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 192);
  v11 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 136) = v11;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 232);
  v12 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 192) = v12;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 280);
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 288) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 290))
    {
      v13 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v13;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 292);
    if (a3 <= 0x107)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 292);
  }
}

void DYTraceDecode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resultColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset_transA_transB(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  const char *v17;
  __int128 v18;
  __int128 v19;

  if (a4 && strcmp((const char *)(a2 + 36), "Cttulul@3ul@2dt@4ult@4ult@4ultulii"))
  {
    v8 = *a4;
    v18 = 0u;
    v19 = 0u;
    v15 = v8;
    v16 = 500;
    v17 = "memcmp((const char*)bytes + offset, (\"Cttulul@3ul@2dt@4ult@4ult@4ultulii\"), sizeof(\"Cttulul@3ul@2dt@4ult@4u"
          "lt@4ultulii\")) == 0";
    GTError_addError(a4, (uint64_t)&v15);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 104);
  v9 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 152);
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 192);
  v11 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 136) = v11;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 232);
  v12 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 192) = v12;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 292);
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 296) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 298))
    {
      v13 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v13;
      v16 = 500;
      v17 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v15);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 300);
    if (a3 <= 0x10F)
    {
      v14 = *a4;
      v18 = 0u;
      v19 = 0u;
      v15 = v14;
      v16 = 500;
      v17 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v15);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 300);
  }
}

void DYTraceDecode_MPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_matrixStructure_vector_vectorStructure_result_resultStructure(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  __int128 v19;
  __int128 v20;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x746C756C75747443 && *(_QWORD *)(a2 + 44) == 0x753340746C753440;
    if (!v8 || *(_QWORD *)(a2 + 51) != 0x6C753340746C75)
    {
      v10 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v10;
      v17 = 500;
      v18 = "memcmp((const char*)bytes + offset, (\"Cttulult@4ult@3ult@3ul\"), sizeof(\"Cttulult@4ult@3ult@3ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 100);
  v11 = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 140);
  v12 = *(_OWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 96) = v12;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 172);
  v13 = *(_OWORD *)(a2 + 180);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 128) = v13;
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 204) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 206))
    {
      v14 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v14;
      v17 = 500;
      v18 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 208);
    if (a3 <= 0xB3)
    {
      v15 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v15;
      v17 = 500;
      v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 208);
  }
}

void DYTraceDecode_MPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_matrixStructure_vector_vectorStructure_result_resultStructure_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  BOOL v8;
  BOOL v9;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  __int128 v20;
  __int128 v21;

  if (a4)
  {
    v8 = *(_QWORD *)(a2 + 36) == 0x746C756C75747443 && *(_QWORD *)(a2 + 44) == 0x753340746C753440;
    v9 = v8 && *(_QWORD *)(a2 + 52) == 0x75746C753340746CLL;
    if (!v9 || *(_WORD *)(a2 + 60) != 108)
    {
      v11 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v11;
      v18 = 500;
      v19 = "memcmp((const char*)bytes + offset, (\"Cttulult@4ult@3ult@3ultul\"), sizeof(\"Cttulult@4ult@3ult@3ultul\")) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 104);
  v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 144);
  v13 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 176);
  v14 = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 216);
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 224) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 226))
    {
      v15 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v15;
      v18 = 500;
      v19 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 228);
    if (a3 <= 0xC7)
    {
      v16 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v16;
      v18 = 500;
      v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 228);
  }
}

void DYTraceDecode_MPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_inputMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannels_neuronType_neuronParameters(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  __int128 v20;
  __int128 v21;

  if (a4 && strcmp((const char *)(a2 + 36), "Ctt@2ult@4ult@4ult@3ult@4uld@3uli@3f"))
  {
    v8 = *a4;
    v20 = 0u;
    v21 = 0u;
    v17 = v8;
    v18 = 500;
    v19 = "memcmp((const char*)bytes + offset, (\"Ctt@2ult@4ult@4ult@3ult@4uld@3uli@3f\"), sizeof(\"Ctt@2ult@4ult@4ult@3u"
          "lt@4uld@3uli@3f\")) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 116);
  v9 = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 156);
  v10 = *(_OWORD *)(a2 + 180);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 196);
  v11 = *(_OWORD *)(a2 + 204);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 220);
  *(_OWORD *)(a1 + 136) = v11;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 228);
  v12 = *(_OWORD *)(a2 + 236);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(a1 + 168) = v12;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 268);
  v13 = *(_OWORD *)(a2 + 276);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 292);
  *(_OWORD *)(a1 + 208) = v13;
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 300);
  v14 = *(_QWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 236) = v14;
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 316) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 318))
    {
      v15 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v15;
      v18 = 500;
      v19 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v17);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 320);
    if (a3 <= 0x123)
    {
      v16 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v16;
      v18 = 500;
      v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 320);
  }
}

void DYTraceDecode_MPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_inputMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannelsAndNeuronTypeAndPredicationOffset_neuronParameters_predicationBuffer(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  __int128 v22;
  __int128 v23;

  v8 = (_QWORD *)(a2 + 268);
  if (a4 && strcmp((const char *)(a2 + 36), "Ctt@2ult@4ult@4ult@3ult@4uld@5ul@3ft"))
  {
    v9 = *a4;
    v22 = 0u;
    v23 = 0u;
    v19 = v9;
    v20 = 500;
    v21 = "memcmp((const char*)bytes + offset, (\"Ctt@2ult@4ult@4ult@3ult@4uld@5ul@3ft\"), sizeof(\"Ctt@2ult@4ult@4ult@3u"
          "lt@4uld@5ul@3ft\")) == 0";
    GTError_addError(a4, (uint64_t)&v19);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 116);
  v10 = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 156);
  v11 = *(_OWORD *)(a2 + 180);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 112) = v11;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 196);
  v12 = *(_OWORD *)(a2 + 204);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 220);
  *(_OWORD *)(a1 + 136) = v12;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 228);
  v13 = *(_OWORD *)(a2 + 236);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(a1 + 168) = v13;
  *(_QWORD *)(a1 + 200) = *v8;
  v14 = *(_OWORD *)(a2 + 276);
  v15 = *(_OWORD *)(a2 + 292);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 308);
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 224) = v15;
  v16 = *(_QWORD *)(a2 + 316);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 324);
  *(_QWORD *)(a1 + 248) = v16;
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 328);
  if (a4)
  {
    if (*(unsigned __int16 *)(a2 + 336) ^ 0x6C75 | *(unsigned __int8 *)(a2 + 338))
    {
      v17 = *a4;
      v22 = 0u;
      v23 = 0u;
      v19 = v17;
      v20 = 500;
      v21 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
      GTError_addError(a4, (uint64_t)&v19);
    }
    *(_QWORD *)(a1 + 8) = v8[9];
    if (a3 <= 0x137)
    {
      v18 = *a4;
      v22 = 0u;
      v23 = 0u;
      v19 = v18;
      v20 = 500;
      v21 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v8[9];
  }
}

void DYTraceDecode_MPSExternalCNNPoolingAverage_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_sourceInfo_destinationTexture_destinationInfo_zeroPadSizeX_zeroPadSizeY(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    if (*v8 != 0x7455746C75747443 || *(_QWORD *)(a2 + 42) != 0x6C756C75557455)
    {
      v10 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v10;
      v17 = 500;
      v18 = "memcmp((const char*)bytes + offset, (\"CttultUtUulul\"), sizeof(\"CttultUtUulul\")) == 0";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 84);
  v21 = 56;
  *(_QWORD *)(a1 + 48) = AppendString_11072((const char **)(a1 + 48), (uint64_t)v8, (uint64_t *)&v21);
  v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)((char *)v8 + v11);
  v21 = v11 + 8;
  *(_QWORD *)(a1 + 64) = AppendString_11072((const char **)(a1 + 64), (uint64_t)v8, (uint64_t *)&v21);
  v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)((char *)v8 + v12);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)((char *)v8 + v12 + 8);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v12 + 16) ^ 0x6C75 | *((unsigned __int8 *)v8 + v12 + 18))
  {
    v13 = *a4;
    v19 = 0u;
    v20 = 0u;
    v16 = v13;
    v17 = 500;
    v18 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  v14 = (v12 + 22) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      v15 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v15;
      v17 = 500;
      v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MPSExternalCNNPoolingAverage_encodeBatchToCommandBuffer_computeCommandEncoder_options_sourceTextures_sourceInfo_destinationTextures_destinationInfo_zeroPadSizeX_zeroPadSizeY_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  const char *v7;
  size_t v8;
  const char *v9;
  unint64_t v10;
  const char *appended;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;

  v7 = (const char *)(a2 + 36);
  sscanf((const char *)(a2 + 36), "Cttul@%llutU@%llutUulultul", a1 + 48, a1 + 72);
  v8 = strlen(v7);
  v9 = &v7[v8 & 0xFFFFFFFFFFFFFFFCLL];
  *(_QWORD *)a1 = *(_QWORD *)(v9 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 12);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v9 + 20);
  v10 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 36;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 + 28);
  *(_QWORD *)(a1 + 40) = &v7[v10];
  v22 = v10 + 8 * *(_QWORD *)(a1 + 48);
  appended = AppendString_11072((const char **)(a1 + 56), (uint64_t)v7, (uint64_t *)&v22);
  v12 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 56) = appended;
  *(_QWORD *)(a1 + 64) = &v7[v12];
  v22 = v12 + 8 * *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 80) = AppendString_11072((const char **)(a1 + 80), (uint64_t)v7, (uint64_t *)&v22);
  v13 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)&v7[v13];
  *(_QWORD *)(a1 + 96) = *(_QWORD *)&v7[v13 + 8];
  *(_QWORD *)(a1 + 104) = *(_QWORD *)&v7[v13 + 16];
  *(_QWORD *)(a1 + 112) = *(_QWORD *)&v7[v13 + 24];
  if (a4 && *(unsigned __int16 *)&v7[v13 + 32] ^ 0x6C75 | v7[v13 + 34])
  {
    v14 = *a4;
    v20 = 0u;
    v21 = 0u;
    v17 = v14;
    v18 = 500;
    v19 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v17);
  }
  v15 = (v13 + 38) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)&v7[v15];
  if (a4)
  {
    if (v15 + 8 > a3)
    {
      v16 = *a4;
      v20 = 0u;
      v21 = 0u;
      v17 = v16;
      v18 = 500;
      v19 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v17);
    }
  }
}

void DYTraceDecode_MPSExternalNDArrayBinary_encodeToCommandBuffer_encoder_options_pluginOptions_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_destinationBuffer_destinationInfo_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;

  v8 = (_QWORD *)(a2 + 36);
  if (a4 && *v8 ^ 0x746C756C75747443 | *(_QWORD *)(a2 + 44) ^ 0x6C75745574557455 | *(unsigned __int8 *)(a2 + 52))
  {
    v9 = *a4;
    v19 = 0u;
    v20 = 0u;
    v16 = v9;
    v17 = 500;
    v18 = "memcmp((const char*)bytes + offset, (\"CttulultUtUtUtul\"), sizeof(\"CttulultUtUtUtul\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 96);
  v21 = 68;
  *(_QWORD *)(a1 + 56) = AppendString_11072((const char **)(a1 + 56), (uint64_t)v8, (uint64_t *)&v21);
  v10 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)((char *)v8 + v10);
  v21 = v10 + 8;
  *(_QWORD *)(a1 + 72) = AppendString_11072((const char **)(a1 + 72), (uint64_t)v8, (uint64_t *)&v21);
  v11 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)((char *)v8 + v11);
  v21 = v11 + 8;
  *(_QWORD *)(a1 + 88) = AppendString_11072((const char **)(a1 + 88), (uint64_t)v8, (uint64_t *)&v21);
  v12 = (v21 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)((char *)v8 + v12);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)((char *)v8 + v12 + 8);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v12 + 16) ^ 0x6C75 | *((unsigned __int8 *)v8 + v12 + 18))
  {
    v13 = *a4;
    v19 = 0u;
    v20 = 0u;
    v16 = v13;
    v17 = 500;
    v18 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v16);
  }
  v14 = (v12 + 22) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v14);
  if (a4)
  {
    if (v14 + 8 > a3)
    {
      v15 = *a4;
      v19 = 0u;
      v20 = 0u;
      v16 = v15;
      v17 = 500;
      v18 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v16);
    }
  }
}

void DYTraceDecode_MPSExternalNDArrayBinaryGradient_encodePrimaryGradientToCommandBuffer_encoder_options_pluginOptions_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_gradientBuffer_gradientInfo_destination_destinationInfo_accumulate_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  BOOL v9;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;

  v8 = (_QWORD *)(a2 + 36);
  if (a4)
  {
    v9 = *v8 == 0x746C756C75747443 && *(_QWORD *)(a2 + 44) == 0x6955745574557455;
    if (!v9 || *(_DWORD *)(a2 + 52) != 7107956)
    {
      v11 = *a4;
      v22 = 0u;
      v23 = 0u;
      v19 = v11;
      v20 = 500;
      v21 = "memcmp((const char*)bytes + offset, (\"CttulultUtUtUtUitul\"), sizeof(\"CttulultUtUtUtUitul\")) == 0";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 96);
  v24 = 68;
  *(_QWORD *)(a1 + 56) = AppendString_11072((const char **)(a1 + 56), (uint64_t)v8, (uint64_t *)&v24);
  v12 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)((char *)v8 + v12);
  v24 = v12 + 8;
  *(_QWORD *)(a1 + 72) = AppendString_11072((const char **)(a1 + 72), (uint64_t)v8, (uint64_t *)&v24);
  v13 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)((char *)v8 + v13);
  v24 = v13 + 8;
  *(_QWORD *)(a1 + 88) = AppendString_11072((const char **)(a1 + 88), (uint64_t)v8, (uint64_t *)&v24);
  v14 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)((char *)v8 + v14);
  v24 = v14 + 8;
  *(_QWORD *)(a1 + 104) = AppendString_11072((const char **)(a1 + 104), (uint64_t)v8, (uint64_t *)&v24);
  v15 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)((char *)v8 + v15);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)((char *)v8 + v15 + 4);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)((char *)v8 + v15 + 12);
  if (a4 && *(unsigned __int16 *)((char *)v8 + v15 + 20) ^ 0x6C75 | *((unsigned __int8 *)v8 + v15 + 22))
  {
    v16 = *a4;
    v22 = 0u;
    v23 = 0u;
    v19 = v16;
    v20 = 500;
    v21 = "memcmp((const char*)bytes + offset, (\"ul\"), sizeof(\"ul\")) == 0";
    GTError_addError(a4, (uint64_t)&v19);
  }
  v17 = (v15 + 26) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)((char *)v8 + v17);
  if (a4)
  {
    if (v17 + 8 > a3)
    {
      v18 = *a4;
      v22 = 0u;
      v23 = 0u;
      v19 = v18;
      v20 = 500;
      v21 = "offset <= length";
      GTError_addError(a4, (uint64_t)&v19);
    }
  }
}

_QWORD *GTMTLSMContext_getObject(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *entry;
  _QWORD *v5;
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;

  v8 = a2;
  entry = find_entry(a1, &v8, 8uLL, 0);
  if (!*entry)
    return 0;
  v5 = *(_QWORD **)(*entry + 32);
  if (!v5)
    return 0;
  result = 0;
  do
  {
    if (v5[2] > a3 || (v7 = v5, v5[3] <= a3))
    {
      if (result)
        return result;
      v7 = 0;
    }
    v5 = (_QWORD *)v5[4];
    result = v7;
  }
  while (v5);
  return result;
}

uint64_t GTMTLSMContext_lastObject(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *entry;
  uint64_t result;
  uint64_t v6;

  v6 = a2;
  entry = find_entry(a1, &v6, 8uLL, 0);
  if (!*entry)
    return 0;
  for (result = *(_QWORD *)(*entry + 32); result; result = *(_QWORD *)(result + 32))
  {
    if (*(_QWORD *)(result + 16) <= a3)
      break;
  }
  return result;
}

uint64_t GTMTLSMContext_getDrawableTexture(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *entry;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v9 = *(_QWORD *)(a2 + 48);
  entry = find_entry(a1, &v9, 8uLL, 0);
  if (!*entry)
    return 0;
  v6 = *(_QWORD *)(*entry + 32);
  if (!v6)
    return 0;
  result = 0;
  do
  {
    if (*(_QWORD *)(a2 + 16) > a3 || (v8 = v6, *(_QWORD *)(v6 + 24) <= a3))
    {
      if (result)
        return result;
      v8 = 0;
    }
    v6 = *(_QWORD *)(v6 + 32);
    result = v8;
  }
  while (v6);
  return result;
}

_DWORD *GTMTLSMContext_getObjects(_DWORD *result, unint64_t a2, apr_array_header_t *arr)
{
  int v3;
  void *v6;
  uint64_t i;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = result[3];
  if (v3 >= 1)
  {
    v6 = result;
    for (i = 0; i < v3; ++i)
    {
      v8 = *(_QWORD **)(*((_QWORD *)v6 + 3) + 8 * i);
      if (v8[2] > a2)
        break;
      if (v8[3] > a2)
      {
        v9 = 0;
        do
        {
          if (v8[2] > a2 || (v10 = v8, v8[3] <= a2))
          {
            if (v9)
              break;
            v10 = 0;
          }
          v8 = (_QWORD *)v8[4];
          v9 = v10;
        }
        while (v8);
        result = apr_array_push(arr);
        *(_QWORD *)result = v9;
        v3 = *((_DWORD *)v6 + 3);
      }
    }
  }
  return result;
}

uint64_t GTMTLSMObjectPtr_compare(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 != *a2;
}

void GTMTLSMContext_buildResourceChildrenMap2(uint64_t *a1, uint64_t a2, unint64_t a3, apr_hash_t *a4)
{
  apr_pool_t *v6;
  apr_array_header_t *v7;
  apr_array_header_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  apr_array_header_t *v15;
  apr_array_header_t *v16;

  v6 = *(apr_pool_t **)a4;
  v7 = apr_array_make(*(apr_pool_t **)a2, 4, 8);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = v7;
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v9);
      v11 = *find_entry((uint64_t)a4, (_BYTE *)(v10 + 8), 8uLL, 0);
      if (!v11 || !*(_QWORD *)(v11 + 32))
      {
        v8->nelts = 0;
        AddObjectAncestors(a1, (_QWORD *)v10, a3, v8);
        if (v8->nelts >= 2)
        {
          v12 = 1;
          while (1)
          {
            v13 = *(_QWORD *)&v8->elts[8 * v12];
            v14 = *find_entry((uint64_t)a4, (_BYTE *)(v13 + 8), 8uLL, 0);
            if (v14)
            {
              v15 = *(apr_array_header_t **)(v14 + 32);
              if (v15)
                break;
            }
            v16 = apr_array_make(v6, 1, 8);
            *(_QWORD *)apr_array_push(v16) = v10;
            apr_hash_set(a4, (const void *)(v13 + 8), 8, v16);
            ++v12;
            v10 = v13;
            if (v12 >= v8->nelts)
              goto LABEL_12;
          }
          *(_QWORD *)apr_array_push(v15) = v10;
        }
      }
LABEL_12:
      ++v9;
    }
    while (v9 < *(int *)(a2 + 12));
  }
}

_QWORD *AddObjectAncestors(uint64_t *a1, _QWORD *a2, unint64_t a3, apr_array_header_t *a4)
{
  _QWORD *result;
  int v9;
  uint64_t v10;
  _QWORD *Object;
  uint64_t v12;

  while (1)
  {
    result = apr_array_push(a4);
    *result = a2;
    v9 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 == 16)
    {
      v10 = a2[18];
      if (v10)
      {
        Object = GTMTLSMContext_getObject(*a1, v10, a3);
        result = (_QWORD *)AddObjectAncestors(a1, Object, a3, a4);
      }
      goto LABEL_7;
    }
    if (v9 != 80)
      break;
    v12 = a2[17];
    if (!v12)
    {
      v12 = a2[18];
      if (!v12)
        goto LABEL_7;
    }
LABEL_11:
    a2 = GTMTLSMContext_getObject(*a1, v12, a3);
  }
  if (v9 != 22)
    return result;
LABEL_7:
  v12 = a2[6];
  if (v12)
    goto LABEL_11;
  return result;
}

apr_hash_index_t *GTMTLSMContext_buildResourceChildrenMap(uint64_t *a1, unint64_t a2, uint64_t a3, apr_allocator_t *a4)
{
  apr_pool_t *v7;
  int v8;
  int v9;
  apr_array_header_t *v10;
  apr_hash_index_t *result;
  apr_hash_index_t *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  apr_pool_t *newpool;

  newpool = 0;
  apr_pool_create_ex(&newpool, *(apr_pool_t **)a3, 0, a4);
  v7 = newpool;
  v8 = *(_DWORD *)(a1[1] + 12);
  if (v8 <= *(_DWORD *)(a1[2] + 12))
    v8 = *(_DWORD *)(a1[2] + 12);
  if (v8 <= *(_DWORD *)(a1[9] + 12))
    v9 = *(_DWORD *)(a1[9] + 12);
  else
    v9 = v8;
  v10 = apr_array_make(newpool, v9, 8);
  GTMTLSMContext_getObjects((_DWORD *)a1[1], a2, v10);
  GTMTLSMContext_buildResourceChildrenMap2(a1, (uint64_t)v10, a2, (apr_hash_t *)a3);
  v10->nelts = 0;
  GTMTLSMContext_getObjects((_DWORD *)a1[2], a2, v10);
  GTMTLSMContext_buildResourceChildrenMap2(a1, (uint64_t)v10, a2, (apr_hash_t *)a3);
  v10->nelts = 0;
  GTMTLSMContext_getObjects((_DWORD *)a1[9], a2, v10);
  GTMTLSMContext_buildResourceChildrenMap2(a1, (uint64_t)v10, a2, (apr_hash_t *)a3);
  apr_pool_destroy(v7);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = a3;
  *(_DWORD *)(a3 + 40) = 0;
  result = apr_hash_next((apr_hash_index_t *)(a3 + 16));
  if (result)
  {
    v12 = result;
    do
    {
      v13 = *(_QWORD *)(*((_QWORD *)v12 + 1) + 32);
      v14 = *(unsigned int *)(v13 + 12);
      if ((int)v14 >= 2)
      {
        qsort(*(void **)(v13 + 24), v14, *(int *)(v13 + 8), (int (__cdecl *)(const void *, const void *))GTMTLSMObjectPtr_compare);
        v15 = *(unsigned int *)(v13 + 12);
        if ((int)v15 < 2)
        {
          v20 = 1;
        }
        else
        {
          v16 = *(uint64_t **)(v13 + 24);
          v17 = v16 + 1;
          v18 = *v16;
          v19 = v15 - 1;
          v20 = 1;
          do
          {
            v21 = v18;
            v18 = *v17;
            if (*v17 != v21)
            {
              v22 = v16[v20];
              v16[v20++] = v18;
              *v17 = v22;
            }
            ++v17;
            --v19;
          }
          while (v19);
        }
        *(_DWORD *)(v13 + 12) = v20;
      }
      result = apr_hash_next(v12);
      v12 = result;
    }
    while (result);
  }
  return result;
}

_QWORD *GTMTLSMContext_getTextureDescriptor(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *result;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  _BOOL4 v20;

  *(_QWORD *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  result = GTMTLSMContext_getObject(*a1, a2, a3);
  if (result)
  {
    v8 = result;
    v9 = result[18];
    if (v9)
    {
      result = (_QWORD *)GTMTLSMContext_getTextureDescriptor(a1, v9, a3, a4);
      *(_WORD *)(a4 + 34) = *((_WORD *)v8 + 76);
      v10 = *((unsigned __int8 *)v8 + 158);
      *(_BYTE *)(a4 + 49) = v10;
      if (*((_BYTE *)v8 + 160))
        *(_BYTE *)(a4 + 45) = *((_BYTE *)v8 + 160);
      v11 = *((_DWORD *)v8 + 52);
      if (v11 != -1)
        *(_DWORD *)(a4 + 16) = v11;
      v12 = *((unsigned __int16 *)v8 + 78);
      if (*((_WORD *)v8 + 78))
      {
        if ((v10 - 5) > 1)
        {
          *(_WORD *)(a4 + 28) = v12;
        }
        else
        {
          v13 = *((unsigned __int16 *)v8 + 78) / 6;
          if (v12 < 6)
            LOWORD(v13) = 1;
          *(_WORD *)(a4 + 28) = v13;
        }
      }
    }
    else
    {
      v14 = (__int128 *)result[13];
      if (v14)
      {
        v15 = *v14;
        v16 = v14[1];
        v17 = v14[2];
        *(_QWORD *)(a4 + 48) = *((_QWORD *)v14 + 6);
        *(_OWORD *)(a4 + 16) = v16;
        *(_OWORD *)(a4 + 32) = v17;
        *(_OWORD *)a4 = v15;
      }
      else
      {
        v18 = result[24];
        if (v18)
        {
          *(_BYTE *)(a4 + 49) = 2;
          *(_BYTE *)(a4 + 47) = 1;
          *(_DWORD *)(a4 + 28) = 65537;
          *(_WORD *)(a4 + 44) = 257;
          *(_DWORD *)(a4 + 16) = 84148994;
          result = GTMTLSMContext_getObject(*a1, v18, result[2]);
          if (result)
          {
            result = GTMTLSMContext_getObject(*a1, result[5], result[2]);
            if (result)
            {
              *(_WORD *)(a4 + 34) = *((_WORD *)result + 136);
              v19 = (unint64_t)*((double *)result + 22);
              *(_WORD *)(a4 + 32) = (unint64_t)*((double *)result + 23);
              v20 = *((_BYTE *)result + 274) != 0;
              *(_BYTE *)(a4 + 43) = *((_BYTE *)result + 274);
              *(_DWORD *)(a4 + 20) = 4 * v20;
              *(_DWORD *)(a4 + 24) = v19;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *GTMTLSMComputePipelineState_computePipelineDescriptor(uint64_t *result, uint64_t a2, _QWORD *a3, apr_pool_t *a4)
{
  const void *v6;
  uint64_t v7;
  uint64_t *v9;
  _QWORD *Object;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v6 = *(const void **)(a2 + 56);
  if (v6)
    return (uint64_t *)memcpy(a3, v6, 0x3C0uLL);
  if (*(_QWORD *)(a2 + 48))
  {
    result = (uint64_t *)memcpy(a3, &GTMTLComputePipelineDescriptorDefaults, 0x3C0uLL);
    a3[106] = *(_QWORD *)(a2 + 48);
LABEL_5:
    a3[113] = *(_QWORD *)(a2 + 104);
    return result;
  }
  v7 = *(_QWORD *)(a2 + 40);
  if (v7 && *(_QWORD *)(a2 + 184))
  {
    v9 = result;
    Object = GTMTLSMContext_getObject(*result, v7, *(_QWORD *)(a2 + 16));
    result = (uint64_t *)GTMTLSMComputePipelineState_computePipelineDescriptor(v9, Object, a3, a4);
    v11 = **(_QWORD **)(a2 + 184);
    if (v11)
    {
      v12 = a3[95] + v11;
      result = (uint64_t *)apr_palloc(a4, 8 * v12);
      if (a3[95])
      {
        v13 = 0;
        v14 = a3[94];
        do
        {
          result[v13] = *(_QWORD *)(v14 + 8 * v13);
          ++v13;
        }
        while (a3[95] > v13);
      }
      v15 = *(unint64_t **)(a2 + 184);
      if (*v15)
      {
        v16 = 0;
        do
        {
          result[v16 + a3[95]] = v15[v16 + 1];
          ++v16;
        }
        while (*v15 > v16);
      }
      a3[94] = result;
      a3[95] = v12;
    }
    goto LABEL_5;
  }
  if (*(_DWORD *)(a2 + 4) == -16101)
  {
    result = (uint64_t *)memcpy(a3, &GTMTLComputePipelineDescriptorDefaults, 0x3C0uLL);
    goto LABEL_5;
  }
  return result;
}

uint64_t GTMTLSMRenderPipelineState_renderPipelineDescriptorType(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  unint64_t i;
  _QWORD *Object;

  v2 = a2;
  if (a1)
  {
    v4 = a2[5];
    for (i = v2[2]; ; i = Object[2])
    {
      Object = GTMTLSMContext_getObject(*a1, v4, i);
      if (!Object || *(_DWORD *)Object != 71)
        break;
      v2 = Object;
      v4 = Object[5];
    }
  }
  if (v2[6])
    return 1;
  if (v2[8])
    return 2;
  if (v2[9])
    return 3;
  return 0;
}

_DWORD *GTMTLSMRenderPipelineState_renderPipelineDescriptor(uint64_t *a1, _QWORD *a2, uint64_t a3, apr_pool_t *a4)
{
  const void *v6;
  _DWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;

  v6 = (const void *)a2[6];
  if (v6)
    return memcpy((void *)a3, v6, 0x5E8uLL);
  result = GTMTLSMContext_getObject(*a1, a2[5], a2[2]);
  if (result && *result == 71)
  {
    result = (_DWORD *)GTMTLSMRenderPipelineState_renderPipelineDescriptor(a1, result, a3, a4);
    v10 = (_QWORD *)a2[10];
    v11 = v10[9];
    if (v11)
    {
      v12 = (unsigned __int16)(*(_WORD *)(a3 + 1072) + v11);
      result = apr_palloc(a4, 8 * v12);
      if (*(_QWORD *)(a3 + 1072))
      {
        v13 = 0;
        v14 = *(_QWORD *)(a3 + 1064);
        do
        {
          *(_QWORD *)&result[2 * v13] = *(_QWORD *)(v14 + 8 * v13);
          ++v13;
        }
        while (*(_QWORD *)(a3 + 1072) > v13);
      }
      v10 = (_QWORD *)a2[10];
      if (v10[9])
      {
        v15 = 0;
        v16 = v10[8];
        do
        {
          *(_QWORD *)&result[2 * v15 + 2 * *(_QWORD *)(a3 + 1072)] = *(_QWORD *)(v16 + 8 * v15);
          ++v15;
        }
        while (v10[9] > v15);
      }
      *(_QWORD *)(a3 + 1064) = result;
      *(_QWORD *)(a3 + 1072) = v12;
    }
    v17 = v10[1];
    if (v17)
    {
      v18 = (unsigned __int16)(*(_DWORD *)(a3 + 880) + v17);
      result = apr_palloc(a4, 8 * v18);
      if (*(_QWORD *)(a3 + 880))
      {
        v19 = 0;
        v20 = *(_QWORD *)(a3 + 872);
        do
        {
          *(_QWORD *)&result[2 * v19] = *(_QWORD *)(v20 + 8 * v19);
          ++v19;
        }
        while (*(_QWORD *)(a3 + 880) > v19);
      }
      v21 = (uint64_t *)a2[10];
      if (v21[1])
      {
        v22 = 0;
        v23 = *v21;
        do
        {
          *(_QWORD *)&result[2 * v22 + 2 * *(_QWORD *)(a3 + 880)] = *(_QWORD *)(v23 + 8 * v22);
          ++v22;
        }
        while (v21[1] > v22);
      }
      *(_QWORD *)(a3 + 872) = result;
      *(_QWORD *)(a3 + 880) = v18;
    }
    *(_QWORD *)(a3 + 1280) = a2[13];
  }
  return result;
}

uint64_t *GTMTLSMRenderPipelineState_tilePipelineDescriptor(uint64_t *result, _QWORD *a2, uint64_t **a3, apr_pool_t *a4)
{
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v5 = (__int128 *)a2[8];
  if (v5)
  {
    v6 = *v5;
    v7 = v5[2];
    *((_OWORD *)a3 + 1) = v5[1];
    *((_OWORD *)a3 + 2) = v7;
    *(_OWORD *)a3 = v6;
    v8 = v5[3];
    v9 = v5[4];
    v10 = v5[6];
    *((_OWORD *)a3 + 5) = v5[5];
    *((_OWORD *)a3 + 6) = v10;
    *((_OWORD *)a3 + 3) = v8;
    *((_OWORD *)a3 + 4) = v9;
    v11 = v5[7];
    v12 = v5[8];
    v13 = v5[10];
    *((_OWORD *)a3 + 9) = v5[9];
    *((_OWORD *)a3 + 10) = v13;
    *((_OWORD *)a3 + 7) = v11;
    *((_OWORD *)a3 + 8) = v12;
  }
  else
  {
    v16 = result;
    result = GTMTLSMContext_getObject(*result, a2[5], a2[2]);
    if (result && *(_DWORD *)result == 71)
    {
      GTMTLSMRenderPipelineState_tilePipelineDescriptor(v16, result, a3, a4);
      v17 = (uint64_t *)(unsigned __int16)(*(_DWORD *)(a2[10] + 56) + *((_WORD *)a3 + 4));
      result = (uint64_t *)apr_palloc(a4, 8 * (_QWORD)v17);
      if (a3[1])
      {
        v18 = 0;
        v19 = *a3;
        do
        {
          result[v18] = v19[v18];
          ++v18;
        }
        while ((unint64_t)a3[1] > v18);
      }
      v20 = a2[10];
      if (*(_QWORD *)(v20 + 56))
      {
        v21 = 0;
        v22 = *(_QWORD *)(v20 + 48);
        do
        {
          result[(_QWORD)a3[1] + v21] = *(_QWORD *)(v22 + 8 * v21);
          ++v21;
        }
        while (*(_QWORD *)(v20 + 56) > v21);
      }
      *a3 = result;
      a3[1] = v17;
    }
  }
  return result;
}

uint64_t GTMTLSMRenderPipelineState_fragmentFunction(uint64_t *a1, _QWORD *a2)
{
  _QWORD *Object;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2[11])
    return 0;
  Object = a2;
  while (1)
  {
    v5 = Object[6];
    if (v5)
    {
      v7 = v5 + 1176;
      return *(_QWORD *)v7;
    }
    v6 = Object[9];
    if (v6)
      break;
    Object = GTMTLSMContext_getObject(*a1, Object[5], Object[2]);
    if (Object[11])
      return 0;
  }
  v7 = v6 + 344;
  return *(_QWORD *)v7;
}

BOOL GTMTLSMPipelineState_supportsIndirectCommandBuffers(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)a1 == 29)
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
    {
      v2 = *(unsigned __int8 *)(v3 + 956);
      return v2 != 0;
    }
  }
  else if (*(_DWORD *)a1 == 71)
  {
    v1 = *(_QWORD *)(a1 + 48);
    if (v1)
    {
      v2 = *(unsigned __int8 *)(v1 + 1499);
      return v2 != 0;
    }
    v4 = *(_QWORD *)(a1 + 72);
    if (v4)
    {
      v2 = *(unsigned __int8 *)(v4 + 510);
      return v2 != 0;
    }
  }
  return 0;
}

uint64_t GTMTLSMPipelineState_sortIndirectResources(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  if (a2 < 1)
    return 0;
  v3 = 0;
  v4 = a2;
  v5 = a1;
  do
  {
    v6 = *v5;
    if (GTMTLSMPipelineState_supportsIndirectCommandBuffers(*v5))
    {
      *v5 = a1[(int)v3];
      a1[(int)v3] = v6;
      v3 = (v3 + 1);
    }
    ++v5;
    --v4;
  }
  while (v4);
  return v3;
}

void GTMTLSMContext_indirectCommandBufferResources(uint64_t a1, _DWORD **a2, unint64_t a3, apr_pool_t *p)
{
  apr_array_header_t *v8;
  char *elts;
  uint64_t nelts;
  apr_array_header_t *v11;
  uint64_t v12;
  int8x16_t *v13;
  apr_hash_t *v14;
  apr_hash_t *v15;
  uint64_t *v16;
  uint64_t v17;
  apr_array_header_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  int v25;
  apr_array_header_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v8 = apr_array_make(p, 128, 8);
  GTMTLSMContext_getObjects(a2[1], a3, v8);
  elts = v8->elts;
  nelts = v8->nelts;
  v11 = apr_array_make(p, v8->nelts, 24);
  if ((int)nelts >= 1)
  {
    do
    {
      v12 = *(_QWORD *)elts;
      elts += 8;
      v13 = (int8x16_t *)apr_array_push(v11);
      *v13 = vextq_s8(*(int8x16_t *)(v12 + 104), *(int8x16_t *)(v12 + 104), 8uLL);
      v13[1].i64[0] = *(_QWORD *)(v12 + 8);
      --nelts;
    }
    while (nelts);
  }
  qsort(v11->elts, v11->nelts, v11->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLGPUAddressResource_compare);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v11;
  v14 = apr_hash_make(p);
  *(_QWORD *)(a1 + 24) = v14;
  v15 = apr_hash_make(p);
  *(_QWORD *)(a1 + 32) = v15;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v8->nelts = 0;
  GTMTLSMContext_getObjects(a2[4], a3, v8);
  v16 = (uint64_t *)v8->elts;
  LODWORD(v17) = GTMTLSMPipelineState_sortIndirectResources(v16, v8->nelts);
  v8->nelts = v17;
  v18 = apr_array_make(p, v17, 32);
  if ((int)v17 >= 1)
  {
    v17 = v17;
    do
    {
      v19 = (_QWORD *)*v16++;
      v20 = apr_array_push(v18);
      v21 = v19[1];
      *v20 = v19[12];
      v20[1] = v21;
      v20[2] = v19[14];
      --v17;
    }
    while (v17);
  }
  v22 = v18->nelts;
  if ((int)v22 >= 1)
  {
    v23 = v18->elts;
    do
    {
      apr_hash_set(v14, v23, 8, v23);
      v23 += 32;
      --v22;
    }
    while (v22);
  }
  v8->nelts = 0;
  GTMTLSMContext_getObjects(a2[5], a3, v8);
  v24 = (uint64_t *)v8->elts;
  v25 = GTMTLSMPipelineState_sortIndirectResources(v24, v8->nelts);
  v8->nelts = v25;
  v26 = apr_array_make(p, v25, 32);
  if (v25 >= 1)
  {
    v27 = v25;
    do
    {
      v28 = (_QWORD *)*v24++;
      v29 = apr_array_push(v26);
      v30 = v28[1];
      *v29 = v28[12];
      v29[1] = v30;
      v29[2] = v28[14];
      --v27;
    }
    while (v27);
  }
  v31 = v26->nelts;
  if ((int)v31 >= 1)
  {
    v32 = v26->elts;
    do
    {
      apr_hash_set(v15, v32, 8, v32);
      v32 += 32;
      --v31;
    }
    while (v31);
  }
}

void GTMTLSMCommandEncoder_processTraceFunc(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  unint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  unint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  char *v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  unint64_t v201;
  unint64_t v202;
  char v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  char *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  char *v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  char *v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  char *v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  char *v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  char v260;
  uint64_t v261;
  char v262;
  uint64_t v263;
  uint64_t *v264;
  unint64_t v265;
  char v266;
  uint64_t v267;
  char v268;
  uint64_t v269;
  char *v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  char *v276;
  unint64_t v277;
  unint64_t v278;
  char v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  char *v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  char *v288;
  char *v289;
  unint64_t v290;
  unint64_t v291;
  char v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  char *v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  char *v301;
  unint64_t v302;
  unint64_t v303;
  char v304;
  uint64_t v305;
  char v306;
  uint64_t v307;
  char *v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  char *v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  unint64_t v329;
  unint64_t v330;
  char v331;
  uint64_t v332;
  char v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  char v337;
  uint64_t v338;
  char v339;
  uint64_t v340;
  char *v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  char *v347;
  unint64_t v348;
  unint64_t v349;
  char v350;
  uint64_t v351;
  char v352;
  uint64_t v353;
  char *v354;
  _QWORD *v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  char *v359;
  char *v360;
  unint64_t v361;
  unint64_t v362;
  char v363;
  uint64_t v364;
  char v365;
  uint64_t v366;
  char *v367;
  _QWORD *v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  char *v372;
  unint64_t v373;
  unint64_t v374;
  char v375;
  uint64_t v376;
  char v377;
  uint64_t v378;
  char *v379;
  _QWORD *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  void *v384;
  char *v385;
  char *v386;
  __int128 v387;
  __int128 v388;
  char *v389;
  char *v390;
  __int128 v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  char *v395;
  unint64_t v396;
  unint64_t v397;
  char v398;
  uint64_t v399;
  char v400;
  uint64_t v401;
  char *v402;
  _QWORD *v403;
  uint64_t v404;
  uint64_t v405;
  unsigned int v406;
  char *v407;
  char *v408;
  uint64_t v409;
  char *v410;
  _QWORD *v411;
  uint64_t v412;
  uint64_t v413;
  char *v414;
  char *v415;
  uint64_t v416;
  char *v417;
  _QWORD *v418;
  uint64_t v419;
  uint64_t v420;
  char *v421;
  uint64_t v422;
  char *v423;
  _QWORD *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  void *v428;
  char *v429;
  char *v430;
  int v431;
  char *v432;
  char *v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  char *v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  char *v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  char *v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  char *v449;
  char *v450;
  char *v451;
  uint64_t v452;
  uint64_t v453;
  __int128 v454;
  uint64_t v455;
  char *v456;
  char *v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  char v461;
  uint64_t v462;
  char v463;
  uint64_t v464;
  uint64_t *v465;
  uint64_t v466;
  unint64_t v467;
  char v468;
  uint64_t v469;
  char v470;
  uint64_t v471;
  char *v472;
  uint64_t *v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  char *v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  char v481;
  uint64_t v482;
  char v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t v486;
  unint64_t v487;
  char v488;
  uint64_t v489;
  char v490;
  uint64_t v491;
  char *v492;
  uint64_t *v493;
  uint64_t v494;
  uint64_t v495;
  char *v496;
  char *v497;
  char *v498;
  uint64_t v499;
  uint64_t v500;
  __int128 v501;
  uint64_t v502;
  char *v503;
  char *v504;
  char *v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  char *v512;
  char *v513;
  char *v514;
  char *v515;
  char *v516;
  char *v517;
  unint64_t v518;
  unint64_t v519;
  unint64_t v520;
  char v521;
  uint64_t v522;
  char v523;
  uint64_t v524;
  uint64_t *v525;
  unint64_t v526;
  char v527;
  uint64_t v528;
  char v529;
  uint64_t v530;
  char *v531;
  uint64_t *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  void *v536;
  char *v537;
  char *v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  char *v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  char *v551;
  char *v552;
  unint64_t v553;
  unint64_t v554;
  char v555;
  uint64_t v556;
  char v557;
  uint64_t v558;
  unint64_t v559;
  unint64_t v560;
  char v561;
  uint64_t v562;
  char v563;
  uint64_t v564;
  char *v565;
  _QWORD *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  void *v570;
  char *v571;
  char *v572;
  size_t v573;
  char *v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  char *v581;
  uint64_t v582;
  char *v583;
  _QWORD *v584;
  uint64_t v585;
  uint64_t v586;
  char *v587;
  uint64_t v588;
  char *v589;
  _QWORD *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  char *v594;
  _QWORD *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  void *v599;
  char *v600;
  void *v601;
  char *v602;
  char *v603;
  char *v604;
  char *v605;
  char *v606;

  v6 = a1 + 8616;
  v7 = *((_DWORD *)a2 + 2);
  if (v7 <= -16088)
  {
    if (v7 <= -16163)
    {
      switch(v7)
      {
        case -16354:
          v12 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          v13 = *((_QWORD *)v12 + 1);
          if (!v13)
            return;
          v14 = 21;
          goto LABEL_433;
        case -16353:
          v239 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          v240 = *((_QWORD *)v239 + 1);
          if (!v240)
            return;
          *(_DWORD *)a1 = 70;
          v241 = *a2;
          *(_QWORD *)(a1 + 8) = v240;
          *(_QWORD *)(a1 + 16) = v241;
          *(_QWORD *)(a1 + 24) = -1;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)v239;
          v242 = GTTraceFunc_argumentBytesWithMap(a2, v239[16], a3);
          v243 = a1 + 56;
          goto LABEL_276;
        case -16352:
          v244 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          v245 = *((_QWORD *)v244 + 1);
          if (v245)
          {
            *(_DWORD *)a1 = 28;
            v246 = *a2;
            *(_QWORD *)(a1 + 8) = v245;
            *(_QWORD *)(a1 + 16) = v246;
            *(_QWORD *)(a1 + 24) = -1;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)v244;
            bzero((void *)(a1 + 56), 0x888uLL);
            memset_pattern16((void *)(a1 + 2240), &unk_4AA5B0, 0x100uLL);
            *(_QWORD *)(a1 + 824) = -1;
            *(_QWORD *)&v247 = -1;
            *((_QWORD *)&v247 + 1) = -1;
            *(_OWORD *)(a1 + 792) = v247;
            *(_OWORD *)(a1 + 808) = v247;
            *(_OWORD *)(a1 + 760) = v247;
            *(_OWORD *)(a1 + 776) = v247;
            *(_OWORD *)(a1 + 728) = v247;
            *(_OWORD *)(a1 + 744) = v247;
            *(_OWORD *)(a1 + 696) = v247;
            *(_OWORD *)(a1 + 712) = v247;
            *(_OWORD *)(a1 + 664) = v247;
            *(_OWORD *)(a1 + 680) = v247;
            *(_OWORD *)(a1 + 632) = v247;
            *(_OWORD *)(a1 + 648) = v247;
            *(_OWORD *)(a1 + 600) = v247;
            *(_OWORD *)(a1 + 616) = v247;
            *(_OWORD *)(a1 + 584) = v247;
            *(_BYTE *)(a1 + 2304) = -1;
          }
          return;
        case -16351:
          v248 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          v249 = *((_QWORD *)v248 + 1);
          if (v249)
          {
            *(_DWORD *)a1 = 65;
            v250 = *a2;
            *(_QWORD *)(a1 + 8) = v249;
            *(_QWORD *)(a1 + 16) = v250;
            *(_QWORD *)(a1 + 24) = -1;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)v248;
            v251 = GTTraceFunc_argumentBytesWithMap(a2, v248[16], a3);
            *(_OWORD *)(a1 + 128) = 0u;
            *(_OWORD *)(a1 + 144) = 0u;
            *(_OWORD *)(a1 + 160) = 0u;
            *(_OWORD *)(a1 + 176) = 0u;
            *(_QWORD *)(a1 + 192) = 0;
            *(_QWORD *)(a1 + 56) = v251;
            memset_pattern16((void *)(a1 + 64), &unk_4AA5C0, 0x40uLL);
            *(_WORD *)(a1 + 192) = 1028;
          }
          return;
        case -16350:
        case -16349:
        case -16348:
        case -16347:
        case -16346:
        case -16345:
        case -16344:
        case -16343:
        case -16342:
        case -16341:
        case -16340:
        case -16338:
        case -16327:
        case -16326:
        case -16324:
        case -16323:
        case -16322:
        case -16321:
        case -16320:
        case -16319:
        case -16318:
        case -16317:
        case -16316:
        case -16315:
        case -16314:
        case -16313:
        case -16312:
        case -16311:
        case -16310:
        case -16309:
        case -16308:
        case -16307:
        case -16306:
        case -16305:
        case -16304:
        case -16303:
        case -16302:
        case -16301:
        case -16300:
        case -16299:
        case -16298:
        case -16297:
        case -16296:
        case -16295:
        case -16294:
        case -16293:
        case -16292:
        case -16291:
        case -16290:
        case -16289:
        case -16287:
        case -16284:
        case -16283:
        case -16282:
        case -16280:
        case -16251:
        case -16250:
        case -16249:
        case -16248:
        case -16245:
        case -16244:
        case -16243:
        case -16242:
        case -16241:
        case -16240:
        case -16239:
        case -16238:
        case -16237:
        case -16236:
        case -16235:
        case -16234:
        case -16233:
        case -16232:
        case -16231:
        case -16230:
        case -16229:
        case -16228:
        case -16221:
        case -16220:
        case -16218:
        case -16217:
        case -16216:
        case -16215:
          return;
        case -16339:
        case -16288:
        case -16281:
          goto LABEL_54;
        case -16337:
          *(_QWORD *)(a1 + 64) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
          return;
        case -16336:
          v252 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v253 = *((_QWORD *)v252 + 3);
          v254 = 1 << v253;
          v255 = a1 + 8 * (int)(v253 >> 6);
          *(_QWORD *)(v255 + 72) &= ~v254;
          *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v252 + 3) + 8) = *((_QWORD *)v252 + 1);
          *(_QWORD *)(a1 + 80 + 8 * (int)(*((_QWORD *)v252 + 3) >> 6)) &= ~(1 << *((_QWORD *)v252 + 3));
          *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v252 + 3) + 256) = *((_QWORD *)v252 + 2);
          return;
        case -16335:
          v256 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v27 = v256;
          v257 = *((_QWORD *)v256 + 1);
          v258 = *((_QWORD *)v256 + 2) + v257;
          v259 = 64;
          if (v258 >= 0x40)
            v258 = 64;
          v260 = v258 - v257;
          if (v258 < v257)
            v260 = 0;
          v261 = ~(-1 << v260);
          if (v257 <= v258)
            v262 = v257 & 0x3F;
          else
            v262 = 0;
          v264 = (uint64_t *)(a1 + 80);
          v263 = *(_QWORD *)(a1 + 80);
          *(_QWORD *)(a1 + 72) &= ~(v261 << v262);
          v265 = *((_QWORD *)v256 + 1);
          if (*((_QWORD *)v256 + 2) + v265 < 0x40)
            v259 = *((_QWORD *)v256 + 2) + v265;
          v266 = v259 - v265;
          if (v259 < v265)
            v266 = 0;
          v267 = ~(-1 << v266);
          if (v265 <= v259)
            v268 = v265 & 0x3F;
          else
            v268 = 0;
          *v264 = v263 & ~(v267 << v268);
          v269 = *((_QWORD *)v256 + 1);
          v270 = GTTraceFunc_argumentBytesWithMap(a2, v256[24], a3);
          if ((int)*((_QWORD *)v27 + 2) >= 1)
          {
            v271 = &v264[v269 + 1];
            v272 = *((_QWORD *)v27 + 2);
            do
            {
              v273 = *(_QWORD *)v270;
              v270 += 8;
              *v271++ = v273;
              --v272;
            }
            while (v272);
          }
          v162 = a1 + 8 * *((_QWORD *)v27 + 1) + 336;
          goto LABEL_352;
        case -16334:
          v274 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v274 + 2) + 832) = *((_QWORD *)v274 + 1);
          return;
        case -16333:
          v275 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v276 = v275;
          v277 = *((_QWORD *)v275 + 1);
          v278 = *((_QWORD *)v275 + 2) + v277;
          if (v278 >= 0x40)
            v278 = 64;
          v279 = v278 - v277;
          if (v278 < v277)
            v279 = 0;
          v280 = ~(-1 << v279);
          if (v277 <= v278)
            v281 = v277 & 0x3F;
          else
            v281 = 0;
          *(_QWORD *)(a1 + 80) &= ~(v280 << v281);
          v282 = *((_QWORD *)v275 + 1);
          v283 = GTTraceFunc_argumentBytesWithMap(a2, v275[24], a3);
          if ((int)*((_QWORD *)v276 + 2) >= 1)
          {
            v284 = (_QWORD *)(a1 + 8 * v282 + 832);
            v285 = *((_QWORD *)v276 + 2);
            do
            {
              v286 = *(_QWORD *)v283;
              v283 += 8;
              *v284++ = v286;
              --v285;
            }
            while (v285);
          }
          return;
        case -16332:
          v287 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v287 + 2) + 1856) = *((_QWORD *)v287 + 1);
          return;
        case -16331:
          v288 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v289 = v288;
          v290 = *((_QWORD *)v288 + 1);
          v291 = *((_QWORD *)v288 + 2) + v290;
          if (v291 >= 0x40)
            v291 = 64;
          v292 = v291 - v290;
          if (v291 < v290)
            v292 = 0;
          v293 = ~(-1 << v292);
          if (v290 <= v291)
            v294 = v290 & 0x3F;
          else
            v294 = 0;
          *(_QWORD *)(a1 + 80) &= ~(v293 << v294);
          v295 = *((_QWORD *)v288 + 1);
          v296 = GTTraceFunc_argumentBytesWithMap(a2, v288[24], a3);
          if ((int)*((_QWORD *)v289 + 2) >= 1)
          {
            v297 = (_QWORD *)(a1 + 8 * v295 + 1856);
            v298 = *((_QWORD *)v289 + 2);
            do
            {
              v299 = *(_QWORD *)v296;
              v296 += 8;
              *v297++ = v299;
              --v298;
            }
            while (v298);
          }
          return;
        case -16330:
          v300 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v300 + 2) + 1856) = *((_QWORD *)v300 + 1);
          *(_DWORD *)(a1 + 1984 + 4 * *((_QWORD *)v300 + 2) + 192) = *((_DWORD *)v300 + 6);
          *(_DWORD *)(a1 + 1984 + 4 * *((_QWORD *)v300 + 2) + 256) = *((_DWORD *)v300 + 7);
          return;
        case -16329:
          v301 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v171 = v301;
          v302 = *((_QWORD *)v301 + 1);
          v303 = *((_QWORD *)v301 + 2) + v302;
          if (v303 >= 0x40)
            v303 = 64;
          v304 = v303 - v302;
          if (v303 < v302)
            v304 = 0;
          v305 = ~(-1 << v304);
          if (v302 <= v303)
            v306 = v302 & 0x3F;
          else
            v306 = 0;
          *(_QWORD *)(a1 + 80) &= ~(v305 << v306);
          v307 = *((_QWORD *)v301 + 1);
          v308 = GTTraceFunc_argumentBytesWithMap(a2, v301[24], a3);
          if ((int)*((_QWORD *)v171 + 2) >= 1)
          {
            v309 = (_QWORD *)(a1 + 8 * v307 + 1856);
            v310 = *((_QWORD *)v171 + 2);
            do
            {
              v311 = *(_QWORD *)v308;
              v308 += 8;
              *v309++ = v311;
              --v310;
            }
            while (v310);
          }
          v312 = a1 + 1984;
          v313 = (void *)(a1 + 1984 + 4 * *((_QWORD *)v171 + 1) + 192);
          v314 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v313, v314, 4 * *((_QWORD *)v171 + 2));
          v162 = v312 + 4 * *((_QWORD *)v171 + 1) + 256;
          goto LABEL_512;
        case -16328:
          v315 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 4 * *((_QWORD *)v315 + 2) + 2040) = *((_QWORD *)v315 + 1);
          return;
        case -16325:
        case -16285:
        case -16246:
          goto LABEL_65;
        case -16286:
          v316 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          v317 = *((_QWORD *)v316 + 1);
          if (!v317)
            return;
          *(_DWORD *)a1 = 70;
          v318 = *a2;
          *(_QWORD *)(a1 + 8) = v317;
          *(_QWORD *)(a1 + 16) = v318;
          *(_QWORD *)(a1 + 24) = -1;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)v316;
          v243 = a1 + 56;
          v242 = 0;
LABEL_276:
          GTMTLSMRenderCommandEncoder_init(v243, (uint64_t)v242);
          return;
        case -16279:
          *(_QWORD *)(a1 + 8600) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16278:
          v319 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v320 = *((_QWORD *)v319 + 3);
          v321 = 1 << v320;
          v322 = a1 + 56 + 8 * (int)(v320 >> 6);
          *(_QWORD *)(v322 + 8) &= ~v321;
          *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v319 + 3)) = *((_QWORD *)v319 + 1);
          v323 = *((_QWORD *)v319 + 3);
          v324 = 1 << v323;
          v325 = a1 + 56 + 8 * (int)(v323 >> 6);
          *(_QWORD *)(v325 + 16) &= ~v324;
          v326 = *((_QWORD *)v319 + 2);
          v327 = a1 + 80 + 8 * *((_QWORD *)v319 + 3);
          goto LABEL_448;
        case -16277:
          v328 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v27 = v328;
          v329 = *((_QWORD *)v328 + 1);
          v330 = *((_QWORD *)v328 + 2) + v329;
          if (v330 >= 0x40)
            v330 = 64;
          v331 = v330 - v329;
          if (v330 < v329)
            v331 = 0;
          v332 = ~(-1 << v331);
          if (v329 <= v330)
            v333 = v329 & 0x3F;
          else
            v333 = 0;
          v334 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 64) &= ~(v332 << v333);
          v335 = *((_QWORD *)v328 + 1);
          v336 = *((_QWORD *)v328 + 2) + v335;
          if (v336 >= 0x40)
            v336 = 64;
          v337 = v336 - v335;
          if (v336 < v335)
            v337 = 0;
          v338 = ~(-1 << v337);
          if (v335 <= v336)
            v339 = v335 & 0x3F;
          else
            v339 = 0;
          *(_QWORD *)(a1 + 72) = v334 & ~(v338 << v339);
          v340 = *((_QWORD *)v328 + 1);
          v341 = GTTraceFunc_argumentBytesWithMap(a2, v328[24], a3);
          if ((int)*((_QWORD *)v27 + 2) >= 1)
          {
            v342 = (_QWORD *)(a1 + 8 * v340 + 80);
            v343 = *((_QWORD *)v27 + 2);
            do
            {
              v344 = *(_QWORD *)v341;
              v341 += 8;
              *v342++ = v344;
              --v343;
            }
            while (v343);
          }
          v162 = a1 + 8 * *((_QWORD *)v27 + 1) + 328;
          goto LABEL_352;
        case -16276:
          v345 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v345 + 2) + 824) = *((_QWORD *)v345 + 1);
          return;
        case -16275:
          v346 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v347 = v346;
          v348 = *((_QWORD *)v346 + 1);
          v349 = *((_QWORD *)v346 + 2) + v348;
          if (v349 >= 0x40)
            v349 = 64;
          v350 = v349 - v348;
          if (v349 < v348)
            v350 = 0;
          v351 = ~(-1 << v350);
          if (v348 <= v349)
            v352 = v348 & 0x3F;
          else
            v352 = 0;
          *(_QWORD *)(a1 + 72) &= ~(v351 << v352);
          v353 = *((_QWORD *)v346 + 1);
          v354 = GTTraceFunc_argumentBytesWithMap(a2, v346[24], a3);
          if ((int)*((_QWORD *)v347 + 2) >= 1)
          {
            v355 = (_QWORD *)(a1 + 8 * v353 + 824);
            v356 = *((_QWORD *)v347 + 2);
            do
            {
              v357 = *(_QWORD *)v354;
              v354 += 8;
              *v355++ = v357;
              --v356;
            }
            while (v356);
          }
          return;
        case -16274:
          v358 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v358 + 2) + 1848) = *((_QWORD *)v358 + 1);
          return;
        case -16273:
          v359 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v360 = v359;
          v361 = *((_QWORD *)v359 + 1);
          v362 = *((_QWORD *)v359 + 2) + v361;
          if (v362 >= 0x40)
            v362 = 64;
          v363 = v362 - v361;
          if (v362 < v361)
            v363 = 0;
          v364 = ~(-1 << v363);
          if (v361 <= v362)
            v365 = v361 & 0x3F;
          else
            v365 = 0;
          *(_QWORD *)(a1 + 72) &= ~(v364 << v365);
          v366 = *((_QWORD *)v359 + 1);
          v367 = GTTraceFunc_argumentBytesWithMap(a2, v359[24], a3);
          if ((int)*((_QWORD *)v360 + 2) >= 1)
          {
            v368 = (_QWORD *)(a1 + 8 * v366 + 1848);
            v369 = *((_QWORD *)v360 + 2);
            do
            {
              v370 = *(_QWORD *)v367;
              v367 += 8;
              *v368++ = v370;
              --v369;
            }
            while (v369);
          }
          return;
        case -16272:
          v371 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 56 + 8 * *((_QWORD *)v371 + 2) + 1792) = *((_QWORD *)v371 + 1);
          *(_DWORD *)(a1 + 56 + 4 * *((_QWORD *)v371 + 2) + 10036) = *((_DWORD *)v371 + 6);
          *(_DWORD *)(a1 + 56 + 4 * *((_QWORD *)v371 + 2) + 10100) = *((_DWORD *)v371 + 7);
          return;
        case -16271:
          v372 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v171 = v372;
          v373 = *((_QWORD *)v372 + 1);
          v374 = *((_QWORD *)v372 + 2) + v373;
          if (v374 >= 0x40)
            v374 = 64;
          v375 = v374 - v373;
          if (v374 < v373)
            v375 = 0;
          v376 = ~(-1 << v375);
          if (v373 <= v374)
            v377 = v373 & 0x3F;
          else
            v377 = 0;
          *(_QWORD *)(a1 + 72) &= ~(v376 << v377);
          v378 = *((_QWORD *)v372 + 1);
          v379 = GTTraceFunc_argumentBytesWithMap(a2, v372[24], a3);
          if ((int)*((_QWORD *)v171 + 2) >= 1)
          {
            v380 = (_QWORD *)(a1 + 8 * v378 + 1848);
            v381 = *((_QWORD *)v171 + 2);
            do
            {
              v382 = *(_QWORD *)v379;
              v379 += 8;
              *v380++ = v382;
              --v381;
            }
            while (v381);
          }
          v383 = a1 + 56;
          v384 = (void *)(a1 + 56 + 4 * *((_QWORD *)v171 + 1) + 10036);
          v385 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v384, v385, 4 * *((_QWORD *)v171 + 2));
          v180 = v383 + 4 * *((_QWORD *)v171 + 1);
          v181 = 10100;
          goto LABEL_511;
        case -16270:
          v386 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8608) = 1;
          v387 = *(_OWORD *)(v386 + 24);
          v388 = *(_OWORD *)(v386 + 40);
          *(_OWORD *)v6 = *(_OWORD *)(v386 + 8);
          *(_OWORD *)(v6 + 16) = v387;
          *(_OWORD *)(v6 + 32) = v388;
          return;
        case -16269:
          *(_BYTE *)(a1 + 11138) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16268:
          *(_BYTE *)(a1 + 11136) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16267:
          *(_BYTE *)(a1 + 11137) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16266:
          v389 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 10056) = *((_DWORD *)v389 + 2);
          *(_DWORD *)(a1 + 10060) = *((_DWORD *)v389 + 3);
          *(_DWORD *)(a1 + 10064) = *((_DWORD *)v389 + 4);
          return;
        case -16265:
          v390 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 9384) = 1;
          v391 = *(_OWORD *)(v390 + 24);
          *(_OWORD *)(a1 + 9392) = *(_OWORD *)(v390 + 8);
          *(_OWORD *)(a1 + 9408) = v391;
          return;
        case -16264:
          *(_BYTE *)(a1 + 11139) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16263:
          v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v392 = *((_QWORD *)v144 + 3);
          v393 = 1 << v392;
          v394 = a1 + 8 * (int)(v392 >> 6);
          *(_QWORD *)(v394 + 1976) &= ~v393;
          v148 = *((_QWORD *)v144 + 1);
          v198 = a1 + 1984;
          goto LABEL_447;
        case -16262:
          v395 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v27 = v395;
          v396 = *((_QWORD *)v395 + 1);
          v397 = *((_QWORD *)v395 + 2) + v396;
          if (v397 >= 0x40)
            v397 = 64;
          v398 = v397 - v396;
          if (v397 < v396)
            v398 = 0;
          v399 = ~(-1 << v398);
          if (v396 <= v397)
            v400 = v396 & 0x3F;
          else
            v400 = 0;
          *(_QWORD *)(a1 + 1976) &= ~(v399 << v400);
          v401 = *((_QWORD *)v395 + 1);
          v402 = GTTraceFunc_argumentBytesWithMap(a2, v395[24], a3);
          if ((int)*((_QWORD *)v27 + 2) >= 1)
          {
            v403 = (_QWORD *)(a1 + 8 * v401 + 1984);
            v404 = *((_QWORD *)v27 + 2);
            do
            {
              v405 = *(_QWORD *)v402;
              v402 += 8;
              *v403++ = v405;
              --v404;
            }
            while (v404);
          }
          v162 = a1 + 8 * *((_QWORD *)v27 + 1) + 2232;
LABEL_352:
          v406 = v27[25];
LABEL_496:
          v572 = GTTraceFunc_argumentBytesWithMap(a2, v406, a3);
          v573 = 8 * *((_QWORD *)v27 + 2);
          goto LABEL_513;
        case -16261:
          v407 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v407 + 2) + 2480) = *((_QWORD *)v407 + 1);
          return;
        case -16260:
          v408 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v409 = *((_QWORD *)v408 + 1);
          v410 = GTTraceFunc_argumentBytesWithMap(a2, v408[24], a3);
          if ((int)*((_QWORD *)v408 + 2) >= 1)
          {
            v411 = (_QWORD *)(a1 + 8 * v409 + 2480);
            v412 = *((_QWORD *)v408 + 2);
            do
            {
              v413 = *(_QWORD *)v410;
              v410 += 8;
              *v411++ = v413;
              --v412;
            }
            while (v412);
          }
          return;
        case -16259:
          v414 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v414 + 2) + 3504) = *((_QWORD *)v414 + 1);
          return;
        case -16258:
          v415 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v416 = *((_QWORD *)v415 + 1);
          v417 = GTTraceFunc_argumentBytesWithMap(a2, v415[24], a3);
          if ((int)*((_QWORD *)v415 + 2) >= 1)
          {
            v418 = (_QWORD *)(a1 + 8 * v416 + 3504);
            v419 = *((_QWORD *)v415 + 2);
            do
            {
              v420 = *(_QWORD *)v417;
              v417 += 8;
              *v418++ = v420;
              --v419;
            }
            while (v419);
          }
          return;
        case -16257:
          v421 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 56 + 8 * *((_QWORD *)v421 + 2) + 3448) = *((_QWORD *)v421 + 1);
          *(_DWORD *)(a1 + 56 + 4 * *((_QWORD *)v421 + 2) + 10164) = *((_DWORD *)v421 + 6);
          *(_DWORD *)(a1 + 56 + 4 * *((_QWORD *)v421 + 2) + 10228) = *((_DWORD *)v421 + 7);
          return;
        case -16256:
          v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v422 = *((_QWORD *)v171 + 1);
          v423 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
          if ((int)*((_QWORD *)v171 + 2) >= 1)
          {
            v424 = (_QWORD *)(a1 + 8 * v422 + 3504);
            v425 = *((_QWORD *)v171 + 2);
            do
            {
              v426 = *(_QWORD *)v423;
              v423 += 8;
              *v424++ = v426;
              --v425;
            }
            while (v425);
          }
          v427 = a1 + 56;
          v428 = (void *)(a1 + 56 + 4 * *((_QWORD *)v171 + 1) + 10164);
          v429 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v428, v429, 4 * *((_QWORD *)v171 + 2));
          v180 = v427 + 4 * *((_QWORD *)v171 + 1);
          v181 = 10228;
LABEL_511:
          v162 = v180 + v181;
LABEL_512:
          v572 = GTTraceFunc_argumentBytesWithMap(a2, v171[26], a3);
          v573 = 4 * *((_QWORD *)v171 + 2);
LABEL_513:
          v601 = (void *)v162;
LABEL_514:
          memcpy(v601, v572, v573);
          return;
        case -16255:
          v430 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 10068) = *((_DWORD *)v430 + 2);
          *(_DWORD *)(a1 + 10072) = *((_DWORD *)v430 + 3);
          *(_DWORD *)(a1 + 10076) = *((_DWORD *)v430 + 4);
          *(_DWORD *)(a1 + 10080) = *((_DWORD *)v430 + 5);
          return;
        case -16254:
          *(_QWORD *)(a1 + 9904) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
          return;
        case -16253:
          v431 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 2);
          *(_DWORD *)(a1 + 10088) = v431;
          *(_DWORD *)(a1 + 10084) = v431;
          return;
        case -16252:
          v432 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_BYTE *)(v6 + 2525) = *((_QWORD *)v432 + 1);
          *(_DWORD *)(a1 + 11132) = *((_QWORD *)v432 + 2);
          return;
        case -16247:
          *(_DWORD *)(a1 + 10736) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                    + 2);
          return;
        case -16227:
          v433 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v434 = *((_QWORD *)v433 + 2);
          v435 = 1 << v434;
          v436 = a1 + 8 * (int)(v434 >> 6);
          *(_QWORD *)(v436 + 72) |= v435;
          *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v433 + 2) + 8) = GTTraceFunc_argumentBytesWithMap(a2, v433[24], a3);
          *(_QWORD *)(a1 + 80 + 8 * (int)(*((_QWORD *)v433 + 2) >> 6)) &= ~(1 << *((_QWORD *)v433 + 2));
          *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v433 + 2) + 256) = *((_QWORD *)v433 + 1);
          return;
        case -16226:
          v437 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v437 + 2) + 336) = *((_QWORD *)v437 + 1);
          return;
        case -16225:
          v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v438 = *((_QWORD *)v163 + 2);
          v439 = 1 << v438;
          v440 = a1 + 56 + 8 * (int)(v438 >> 6);
          *(_QWORD *)(v440 + 8) |= v439;
          v441 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          v214 = a1 + 80;
          *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v163 + 2)) = v441;
          v442 = *((_QWORD *)v163 + 2);
          v443 = 1 << v442;
          v444 = a1 + 56 + 8 * (int)(v442 >> 6);
          *(_QWORD *)(v444 + 16) &= ~v443;
          goto LABEL_444;
        case -16224:
          v445 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v445 + 2) + 328) = *((_QWORD *)v445 + 1);
          return;
        case -16223:
          v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v446 = *((_QWORD *)v163 + 2);
          v447 = 1 << v446;
          v448 = a1 + 8 * (int)(v446 >> 6);
          *(_QWORD *)(v448 + 1976) |= v447;
          v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          v214 = a1 + 1984;
          goto LABEL_443;
        case -16222:
          v449 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v449 + 2) + 2232) = *((_QWORD *)v449 + 1);
          return;
        case -16219:
          v450 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 10084) = *((_DWORD *)v450 + 2);
          *(_DWORD *)(a1 + 10088) = *((_DWORD *)v450 + 3);
          return;
        case -16214:
          v451 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 56 + 8 * *((_QWORD *)v451 + 2) + 2424) = *((_QWORD *)v451 + 1);
          *(_QWORD *)(a1 + 56 + 8 * *((_QWORD *)v451 + 4) + 3448) = *((_QWORD *)v451 + 3);
          return;
        default:
          if (v7 == -16384)
            goto LABEL_54;
          if (v7 != -16376)
            return;
          goto LABEL_65;
      }
    }
    switch(v7)
    {
      case -16162:
        v19 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(_QWORD *)(a1 + 8 * *((_QWORD *)v19 + 2) + 64) = *((_QWORD *)v19 + 1);
        break;
      case -16161:
        *(_BYTE *)(a1 + 192) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16160:
        *(_BYTE *)(a1 + 193) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16159:
        v503 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(_QWORD *)(a1 + 8 * *((_QWORD *)v503 + 2) + 9928) = *((_QWORD *)v503 + 1);
        break;
      case -16158:
        *(_BYTE *)(a1 + 11142) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16157:
        *(_BYTE *)(a1 + 11143) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
        break;
      case -16156:
      case -16155:
      case -16154:
      case -16153:
      case -16152:
      case -16151:
      case -16150:
      case -16147:
      case -16146:
      case -16145:
      case -16144:
      case -16137:
      case -16136:
      case -16135:
      case -16134:
      case -16133:
        return;
      case -16149:
        v504 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(_DWORD *)(a1 + 2164) = *((_QWORD *)v504 + 1);
        *(_DWORD *)(a1 + 2168) = *((_QWORD *)v504 + 2);
        break;
      case -16148:
        v505 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(_QWORD *)(a1 + 9920) = *((_QWORD *)v505 + 1);
        *(_DWORD *)(a1 + 10744) = *((_QWORD *)v505 + 2);
        *(_DWORD *)(a1 + 10748) = *((_QWORD *)v505 + 3);
        break;
      case -16143:
        v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        v506 = *((_QWORD *)v163 + 2);
        v507 = 1 << v506;
        v508 = a1 + 8 * (int)(v506 >> 6);
        *(_QWORD *)(v508 + 6944) |= v507;
        v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
        v168 = 6952;
LABEL_442:
        v214 = a1 + v168;
LABEL_443:
        *(_QWORD *)(v214 + 8 * *((_QWORD *)v163 + 2)) = v167;
LABEL_444:
        *(_QWORD *)(v214 + 8 * *((_QWORD *)v163 + 2) + 248) = *((_QWORD *)v163 + 1);
        break;
      case -16142:
        v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        v509 = *((_QWORD *)v144 + 3);
        v510 = 1 << v509;
        v511 = a1 + 8 * (int)(v509 >> 6);
        *(_QWORD *)(v511 + 6944) &= ~v510;
        v148 = *((_QWORD *)v144 + 1);
        v149 = 6952;
LABEL_446:
        v198 = a1 + v149;
LABEL_447:
        *(_QWORD *)(v198 + 8 * *((_QWORD *)v144 + 3)) = v148;
        v326 = *((_QWORD *)v144 + 2);
        v327 = v198 + 8 * *((_QWORD *)v144 + 3);
LABEL_448:
        *(_QWORD *)(v327 + 248) = v326;
        break;
      case -16141:
        v512 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(_QWORD *)(a1 + 8 * *((_QWORD *)v512 + 2) + 7200) = *((_QWORD *)v512 + 1);
        break;
      case -16140:
        v513 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(_QWORD *)(a1 + 8 * *((_QWORD *)v513 + 2) + 7448) = *((_QWORD *)v513 + 1);
        break;
      case -16139:
        v514 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(_QWORD *)(a1 + 8 * *((_QWORD *)v514 + 2) + 8472) = *((_QWORD *)v514 + 1);
        break;
      case -16138:
        v515 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(_QWORD *)(a1 + 56 + 8 * *((_QWORD *)v515 + 2) + 8416) = *((_QWORD *)v515 + 1);
        *(_DWORD *)(a1 + 56 + 4 * *((_QWORD *)v515 + 2) + 10548) = *((_DWORD *)v515 + 6);
        *(_DWORD *)(a1 + 56 + 4 * *((_QWORD *)v515 + 2) + 10612) = *((_DWORD *)v515 + 7);
        break;
      case -16132:
        *(_DWORD *)(a1 + 10732) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 2);
        break;
      default:
        if (v7 == -16100)
        {
          v57 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v58 = *((_QWORD *)v57 + 3);
          *(_OWORD *)(a1 + 1984) = *(_OWORD *)(v57 + 8);
          *(_QWORD *)(a1 + 2000) = v58;
          v59 = *((_QWORD *)v57 + 6);
          *(_OWORD *)(a1 + 2008) = *((_OWORD *)v57 + 2);
          *(_QWORD *)(a1 + 2024) = v59;
        }
        break;
    }
  }
  else
  {
    if (v7 > -15460)
    {
      switch(v7)
      {
        case -15459:
        case -15458:
        case -15456:
          v8 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v9 = *((_QWORD *)v8 + 2);
          v10 = 1 << v9;
          v11 = a1 + 56 + 8 * (int)(v9 >> 6);
          *(_QWORD *)(v11 + 1920) &= ~v10;
          *(_QWORD *)(a1 + 56 + 8 * *((_QWORD *)v8 + 2) + 1928) = *((_QWORD *)v8 + 1);
          break;
        case -15457:
          v60 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v61 = v60;
          v62 = *((_QWORD *)v60 + 1);
          v63 = *((_QWORD *)v60 + 2) + v62;
          if (v63 >= 0x40)
            v63 = 64;
          v64 = v63 - v62;
          if (v63 < v62)
            v64 = 0;
          v65 = ~(-1 << v64);
          if (v62 <= v63)
            v66 = v62 & 0x3F;
          else
            v66 = 0;
          *(_QWORD *)(a1 + 1976) &= ~(v65 << v66);
          v67 = *((_QWORD *)v60 + 1);
          v68 = GTTraceFunc_argumentBytesWithMap(a2, v60[24], a3);
          if ((int)*((_QWORD *)v61 + 2) >= 1)
          {
            v69 = (_QWORD *)(a1 + 8 * v67 + 1984);
            v70 = *((_QWORD *)v61 + 2);
            do
            {
              v71 = *(_QWORD *)v68;
              v68 += 8;
              *v69++ = v71;
              --v70;
            }
            while (v70);
          }
          break;
        case -15455:
          v72 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v73 = v72;
          v74 = *((_QWORD *)v72 + 1);
          v75 = *((_QWORD *)v72 + 2) + v74;
          if (v75 >= 0x40)
            v75 = 64;
          v76 = v75 - v74;
          if (v75 < v74)
            v76 = 0;
          v77 = ~(-1 << v76);
          if (v74 <= v75)
            v78 = v74 & 0x3F;
          else
            v78 = 0;
          *(_QWORD *)(a1 + 1976) &= ~(v77 << v78);
          v79 = *((_QWORD *)v72 + 1);
          v80 = GTTraceFunc_argumentBytesWithMap(a2, v72[24], a3);
          if ((int)*((_QWORD *)v73 + 2) >= 1)
          {
            v81 = (_QWORD *)(a1 + 8 * v79 + 1984);
            v82 = *((_QWORD *)v73 + 2);
            do
            {
              v83 = *(_QWORD *)v80;
              v80 += 8;
              *v81++ = v83;
              --v82;
            }
            while (v82);
          }
          break;
        case -15454:
        case -15453:
        case -15451:
          v40 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v41 = *((_QWORD *)v40 + 2);
          v42 = 1 << v41;
          v43 = a1 + 56 + 8 * (int)(v41 >> 6);
          *(_QWORD *)(v43 + 6888) &= ~v42;
          *(_QWORD *)(a1 + 56 + 8 * *((_QWORD *)v40 + 2) + 6896) = *((_QWORD *)v40 + 1);
          break;
        case -15452:
          v84 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v85 = v84;
          v86 = *((_QWORD *)v84 + 1);
          v87 = *((_QWORD *)v84 + 2) + v86;
          if (v87 >= 0x40)
            v87 = 64;
          v88 = v87 - v86;
          if (v87 < v86)
            v88 = 0;
          v89 = ~(-1 << v88);
          if (v86 <= v87)
            v90 = v86 & 0x3F;
          else
            v90 = 0;
          *(_QWORD *)(a1 + 6944) &= ~(v89 << v90);
          v91 = *((_QWORD *)v84 + 1);
          v92 = GTTraceFunc_argumentBytesWithMap(a2, v84[24], a3);
          if ((int)*((_QWORD *)v85 + 2) >= 1)
          {
            v93 = (_QWORD *)(a1 + 8 * v91 + 6952);
            v94 = *((_QWORD *)v85 + 2);
            do
            {
              v95 = *(_QWORD *)v92;
              v92 += 8;
              *v93++ = v95;
              --v94;
            }
            while (v94);
          }
          break;
        case -15450:
          v96 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v97 = v96;
          v98 = *((_QWORD *)v96 + 1);
          v99 = *((_QWORD *)v96 + 2) + v98;
          if (v99 >= 0x40)
            v99 = 64;
          v100 = v99 - v98;
          if (v99 < v98)
            v100 = 0;
          v101 = ~(-1 << v100);
          if (v98 <= v99)
            v102 = v98 & 0x3F;
          else
            v102 = 0;
          *(_QWORD *)(a1 + 6944) &= ~(v101 << v102);
          v103 = *((_QWORD *)v96 + 1);
          v104 = GTTraceFunc_argumentBytesWithMap(a2, v96[24], a3);
          if ((int)*((_QWORD *)v97 + 2) >= 1)
          {
            v105 = (_QWORD *)(a1 + 8 * v103 + 6952);
            v106 = *((_QWORD *)v97 + 2);
            do
            {
              v107 = *(_QWORD *)v104;
              v104 += 8;
              *v105++ = v107;
              --v106;
            }
            while (v106);
          }
          break;
        case -15449:
        case -15448:
        case -15446:
          v44 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v45 = *((_QWORD *)v44 + 2);
          v46 = 1 << v45;
          v47 = a1 + 56 + 8 * (int)(v45 >> 6);
          *(_QWORD *)(v47 + 8) &= ~v46;
          *(_QWORD *)(a1 + 56 + 8 * *((_QWORD *)v44 + 2) + 24) = *((_QWORD *)v44 + 1);
          v48 = *((_QWORD *)v44 + 2);
          v49 = 1 << v48;
          v50 = a1 + 56 + 8 * (int)(v48 >> 6);
          *(_QWORD *)(v50 + 16) &= ~v49;
          break;
        case -15447:
          v108 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v109 = v108;
          v110 = *((_QWORD *)v108 + 1);
          v111 = *((_QWORD *)v108 + 2) + v110;
          if (v111 >= 0x40)
            v111 = 64;
          v112 = v111 - v110;
          if (v111 < v110)
            v112 = 0;
          v113 = ~(-1 << v112);
          if (v110 <= v111)
            v114 = v110 & 0x3F;
          else
            v114 = 0;
          v115 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 64) &= ~(v113 << v114);
          v116 = *((_QWORD *)v108 + 1);
          v117 = *((_QWORD *)v108 + 2) + v116;
          if (v117 >= 0x40)
            v117 = 64;
          v118 = v117 - v116;
          if (v117 < v116)
            v118 = 0;
          v119 = ~(-1 << v118);
          if (v116 <= v117)
            v120 = v116 & 0x3F;
          else
            v120 = 0;
          *(_QWORD *)(a1 + 72) = v115 & ~(v119 << v120);
          v121 = *((_QWORD *)v108 + 1);
          v122 = GTTraceFunc_argumentBytesWithMap(a2, v108[24], a3);
          if ((int)*((_QWORD *)v109 + 2) >= 1)
          {
            v123 = (_QWORD *)(a1 + 8 * v121 + 80);
            v124 = *((_QWORD *)v109 + 2);
            do
            {
              v125 = *(_QWORD *)v122;
              v122 += 8;
              *v123++ = v125;
              --v124;
            }
            while (v124);
          }
          break;
        case -15445:
          v126 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v127 = v126;
          v128 = *((_QWORD *)v126 + 1);
          v129 = *((_QWORD *)v126 + 2) + v128;
          if (v129 >= 0x40)
            v129 = 64;
          v130 = v129 - v128;
          if (v129 < v128)
            v130 = 0;
          v131 = ~(-1 << v130);
          if (v128 <= v129)
            v132 = v128 & 0x3F;
          else
            v132 = 0;
          v133 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 64) &= ~(v131 << v132);
          v134 = *((_QWORD *)v126 + 1);
          v135 = *((_QWORD *)v126 + 2) + v134;
          if (v135 >= 0x40)
            v135 = 64;
          v136 = v135 - v134;
          if (v135 < v134)
            v136 = 0;
          v137 = ~(-1 << v136);
          if (v134 <= v135)
            v138 = v134 & 0x3F;
          else
            v138 = 0;
          *(_QWORD *)(a1 + 72) = v133 & ~(v137 << v138);
          v139 = *((_QWORD *)v126 + 1);
          v140 = GTTraceFunc_argumentBytesWithMap(a2, v126[24], a3);
          if ((int)*((_QWORD *)v127 + 2) >= 1)
          {
            v141 = (_QWORD *)(a1 + 8 * v139 + 80);
            v142 = *((_QWORD *)v127 + 2);
            do
            {
              v143 = *(_QWORD *)v140;
              v140 += 8;
              *v141++ = v143;
              --v142;
            }
            while (v142);
          }
          break;
        case -15444:
        case -15443:
        case -15442:
        case -15441:
        case -15440:
        case -15439:
        case -15438:
        case -15437:
        case -15436:
        case -15435:
        case -15434:
        case -15433:
        case -15432:
        case -15431:
        case -15430:
        case -15429:
        case -15428:
        case -15427:
        case -15426:
        case -15425:
        case -15424:
        case -15423:
        case -15422:
        case -15421:
        case -15420:
        case -15419:
        case -15418:
        case -15417:
        case -15416:
        case -15415:
        case -15414:
        case -15413:
        case -15412:
        case -15411:
        case -15410:
        case -15409:
        case -15408:
        case -15407:
        case -15406:
        case -15405:
        case -15404:
        case -15403:
        case -15402:
          return;
        case -15401:
          v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v145 = *((_QWORD *)v144 + 3);
          v146 = 1 << v145;
          v147 = a1 + 8 * (int)(v145 >> 6);
          *(_QWORD *)(v147 + 5288) &= ~v146;
          v148 = *((_QWORD *)v144 + 1);
          v149 = 5296;
          goto LABEL_446;
        case -15400:
          v150 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v150 + 2) + 5544) = *((_QWORD *)v150 + 1);
          break;
        case -15399:
          v151 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v27 = v151;
          v152 = *((_QWORD *)v151 + 1);
          v153 = *((_QWORD *)v151 + 2) + v152;
          if (v153 >= 0x40)
            v153 = 64;
          v154 = v153 - v152;
          if (v153 < v152)
            v154 = 0;
          v155 = ~(-1 << v154);
          if (v152 <= v153)
            v156 = v152 & 0x3F;
          else
            v156 = 0;
          *(_QWORD *)(a1 + 5288) &= ~(v155 << v156);
          v157 = *((_QWORD *)v151 + 1);
          v158 = GTTraceFunc_argumentBytesWithMap(a2, v151[24], a3);
          if ((int)*((_QWORD *)v27 + 2) >= 1)
          {
            v159 = (_QWORD *)(a1 + 8 * v157 + 5296);
            v160 = *((_QWORD *)v27 + 2);
            do
            {
              v161 = *(_QWORD *)v158;
              v158 += 8;
              *v159++ = v161;
              --v160;
            }
            while (v160);
          }
          v38 = a1 + 8 * *((_QWORD *)v27 + 1);
          v39 = 5544;
          goto LABEL_164;
        case -15398:
          v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v164 = *((_QWORD *)v163 + 2);
          v165 = 1 << v164;
          v166 = a1 + 8 * (int)(v164 >> 6);
          *(_QWORD *)(v166 + 5288) |= v165;
          v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          v168 = 5296;
          goto LABEL_442;
        case -15397:
          v169 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v169 + 2) + 6816) = *((_QWORD *)v169 + 1);
          break;
        case -15396:
          v170 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 56 + 8 * *((_QWORD *)v170 + 2) + 6760) = *((_QWORD *)v170 + 1);
          *(_DWORD *)(a1 + 56 + 4 * *((_QWORD *)v170 + 2) + 10420) = *((_DWORD *)v170 + 6);
          *(_DWORD *)(a1 + 56 + 4 * *((_QWORD *)v170 + 2) + 10484) = *((_DWORD *)v170 + 7);
          break;
        case -15395:
          v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v172 = *((_QWORD *)v171 + 1);
          v173 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
          if ((int)*((_QWORD *)v171 + 2) >= 1)
          {
            v174 = (_QWORD *)(a1 + 8 * v172 + 6816);
            v175 = *((_QWORD *)v171 + 2);
            do
            {
              v176 = *(_QWORD *)v173;
              v173 += 8;
              *v174++ = v176;
              --v175;
            }
            while (v175);
          }
          v177 = a1 + 56;
          v178 = (void *)(a1 + 56 + 4 * *((_QWORD *)v171 + 1) + 10420);
          v179 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v178, v179, 4 * *((_QWORD *)v171 + 2));
          v180 = v177 + 4 * *((_QWORD *)v171 + 1);
          v181 = 10484;
          goto LABEL_511;
        case -15394:
          v182 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v183 = *((_QWORD *)v182 + 1);
          v184 = GTTraceFunc_argumentBytesWithMap(a2, v182[24], a3);
          if ((int)*((_QWORD *)v182 + 2) >= 1)
          {
            v185 = (_QWORD *)(a1 + 8 * v183 + 6816);
            v186 = *((_QWORD *)v182 + 2);
            do
            {
              v187 = *(_QWORD *)v184;
              v184 += 8;
              *v185++ = v187;
              --v186;
            }
            while (v186);
          }
          break;
        case -15393:
          v188 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v188 + 2) + 5792) = *((_QWORD *)v188 + 1);
          break;
        case -15392:
          v189 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v190 = *((_QWORD *)v189 + 1);
          v191 = GTTraceFunc_argumentBytesWithMap(a2, v189[24], a3);
          if ((int)*((_QWORD *)v189 + 2) >= 1)
          {
            v192 = (_QWORD *)(a1 + 8 * v190 + 5792);
            v193 = *((_QWORD *)v189 + 2);
            do
            {
              v194 = *(_QWORD *)v191;
              v191 += 8;
              *v192++ = v194;
              --v193;
            }
            while (v193);
          }
          break;
        case -15391:
          v144 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v195 = *((_QWORD *)v144 + 3);
          v196 = 1 << v195;
          v197 = a1 + 8 * (int)(v195 >> 6);
          *(_QWORD *)(v197 + 3632) &= ~v196;
          v148 = *((_QWORD *)v144 + 1);
          v198 = a1 + 3640;
          goto LABEL_447;
        case -15390:
          v199 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v199 + 2) + 3888) = *((_QWORD *)v199 + 1);
          break;
        case -15389:
          v200 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v27 = v200;
          v201 = *((_QWORD *)v200 + 1);
          v202 = *((_QWORD *)v200 + 2) + v201;
          if (v202 >= 0x40)
            v202 = 64;
          v203 = v202 - v201;
          if (v202 < v201)
            v203 = 0;
          v204 = ~(-1 << v203);
          if (v201 <= v202)
            v205 = v201 & 0x3F;
          else
            v205 = 0;
          *(_QWORD *)(a1 + 3632) &= ~(v204 << v205);
          v206 = *((_QWORD *)v200 + 1);
          v207 = GTTraceFunc_argumentBytesWithMap(a2, v200[24], a3);
          if ((int)*((_QWORD *)v27 + 2) >= 1)
          {
            v208 = (_QWORD *)(a1 + 8 * v206 + 3640);
            v209 = *((_QWORD *)v27 + 2);
            do
            {
              v210 = *(_QWORD *)v207;
              v207 += 8;
              *v208++ = v210;
              --v209;
            }
            while (v209);
          }
          v162 = a1 + 8 * *((_QWORD *)v27 + 1) + 3888;
          goto LABEL_352;
        case -15388:
          v163 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v211 = *((_QWORD *)v163 + 2);
          v212 = 1 << v211;
          v213 = a1 + 8 * (int)(v211 >> 6);
          *(_QWORD *)(v213 + 3632) |= v212;
          v167 = GTTraceFunc_argumentBytesWithMap(a2, v163[24], a3);
          v214 = a1 + 3640;
          goto LABEL_443;
        case -15387:
          v215 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v215 + 2) + 5160) = *((_QWORD *)v215 + 1);
          break;
        case -15386:
          v216 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 56 + 8 * *((_QWORD *)v216 + 2) + 5104) = *((_QWORD *)v216 + 1);
          *(_DWORD *)(a1 + 56 + 4 * *((_QWORD *)v216 + 2) + 10292) = *((_DWORD *)v216 + 6);
          *(_DWORD *)(a1 + 56 + 4 * *((_QWORD *)v216 + 2) + 10356) = *((_DWORD *)v216 + 7);
          break;
        case -15385:
          v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v217 = *((_QWORD *)v171 + 1);
          v218 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
          if ((int)*((_QWORD *)v171 + 2) >= 1)
          {
            v219 = (_QWORD *)(a1 + 8 * v217 + 5160);
            v220 = *((_QWORD *)v171 + 2);
            do
            {
              v221 = *(_QWORD *)v218;
              v218 += 8;
              *v219++ = v221;
              --v220;
            }
            while (v220);
          }
          v222 = a1 + 56;
          v223 = (void *)(a1 + 56 + 4 * *((_QWORD *)v171 + 1) + 10292);
          v224 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
          memcpy(v223, v224, 4 * *((_QWORD *)v171 + 2));
          v180 = v222 + 4 * *((_QWORD *)v171 + 1);
          v181 = 10356;
          goto LABEL_511;
        case -15384:
          v225 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v226 = *((_QWORD *)v225 + 1);
          v227 = GTTraceFunc_argumentBytesWithMap(a2, v225[24], a3);
          if ((int)*((_QWORD *)v225 + 2) >= 1)
          {
            v228 = (_QWORD *)(a1 + 8 * v226 + 5160);
            v229 = *((_QWORD *)v225 + 2);
            do
            {
              v230 = *(_QWORD *)v227;
              v227 += 8;
              *v228++ = v230;
              --v229;
            }
            while (v229);
          }
          break;
        case -15383:
          v231 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_QWORD *)(a1 + 8 * *((_QWORD *)v231 + 2) + 4136) = *((_QWORD *)v231 + 1);
          break;
        case -15382:
          v232 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          v233 = *((_QWORD *)v232 + 1);
          v234 = GTTraceFunc_argumentBytesWithMap(a2, v232[24], a3);
          if ((int)*((_QWORD *)v232 + 2) >= 1)
          {
            v235 = (_QWORD *)(a1 + 8 * v233 + 4136);
            v236 = *((_QWORD *)v232 + 2);
            do
            {
              v237 = *(_QWORD *)v234;
              v234 += 8;
              *v235++ = v237;
              --v236;
            }
            while (v236);
          }
          break;
        case -15381:
          v238 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 4 * *((_QWORD *)v238 + 2) + 11000) = *((_QWORD *)v238 + 1);
          break;
        default:
          switch(v7)
          {
            case -15284:
              v20 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              v21 = *((_QWORD *)v20 + 4);
              v22 = 1 << v21;
              v23 = a1 + 56 + 8 * (int)(v21 >> 6);
              *(_QWORD *)(v23 + 16) &= ~v22;
              *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v20 + 4) + 8) = *((_QWORD *)v20 + 1);
              *(_QWORD *)(a1 + 80 + 8 * (int)(*((_QWORD *)v20 + 4) >> 6)) |= 1 << *((_QWORD *)v20 + 4);
              *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v20 + 4) + 256) = *((_QWORD *)v20 + 2);
              v24 = *((_QWORD *)v20 + 3);
              v25 = a1 + 56 + 8 * *((_QWORD *)v20 + 4);
              goto LABEL_474;
            case -15283:
              v516 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              *(_QWORD *)(a1 + 56 + 8 * *((_QWORD *)v516 + 3) + 280) = *((_QWORD *)v516 + 1);
              v24 = *((_QWORD *)v516 + 2);
              v25 = a1 + 56 + 8 * *((_QWORD *)v516 + 3);
              goto LABEL_474;
            case -15282:
              v517 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              v27 = v517;
              v518 = *((_QWORD *)v517 + 1);
              v519 = *((_QWORD *)v517 + 2) + v518;
              v520 = 64;
              if (v519 >= 0x40)
                v519 = 64;
              v521 = v519 - v518;
              if (v519 < v518)
                v521 = 0;
              v522 = ~(-1 << v521);
              if (v518 <= v519)
                v523 = v518 & 0x3F;
              else
                v523 = 0;
              v525 = (uint64_t *)(a1 + 80);
              v524 = *(_QWORD *)(a1 + 80);
              *(_QWORD *)(a1 + 72) &= ~(v522 << v523);
              v526 = *((_QWORD *)v517 + 1);
              if (*((_QWORD *)v517 + 2) + v526 < 0x40)
                v520 = *((_QWORD *)v517 + 2) + v526;
              v527 = v520 - v526;
              if (v520 < v526)
                v527 = 0;
              v528 = ~(-1 << v527);
              if (v526 <= v520)
                v529 = v526 & 0x3F;
              else
                v529 = 0;
              *v525 = (v528 << v529) | v524;
              v530 = *((_QWORD *)v517 + 1);
              v531 = GTTraceFunc_argumentBytesWithMap(a2, v517[24], a3);
              if ((int)*((_QWORD *)v27 + 2) >= 1)
              {
                v532 = &v525[v530 + 1];
                v533 = *((_QWORD *)v27 + 2);
                do
                {
                  v534 = *(_QWORD *)v531;
                  v531 += 8;
                  *v532++ = v534;
                  --v533;
                }
                while (v533);
              }
              v535 = a1 + 56;
              v536 = (void *)(a1 + 56 + 8 * *((_QWORD *)v27 + 1) + 280);
              v537 = GTTraceFunc_argumentBytesWithMap(a2, v27[25], a3);
              memcpy(v536, v537, 8 * *((_QWORD *)v27 + 2));
              v162 = v535 + 8 * *((_QWORD *)v27 + 1) + 528;
              goto LABEL_495;
            case -15281:
              v538 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              v539 = *((_QWORD *)v538 + 3);
              v540 = 1 << v539;
              v541 = a1 + 56 + 8 * (int)(v539 >> 6);
              *(_QWORD *)(v541 + 16) |= v540;
              *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v538 + 3) + 8) = GTTraceFunc_argumentBytesWithMap(a2, v538[32], a3);
              *(_QWORD *)(a1 + 80 + 8 * (int)(*((_QWORD *)v538 + 3) >> 6)) |= 1 << *((_QWORD *)v538 + 3);
              *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v538 + 3) + 256) = *((_QWORD *)v538 + 1);
              v24 = *((_QWORD *)v538 + 2);
              v25 = a1 + 56 + 8 * *((_QWORD *)v538 + 3);
LABEL_474:
              *(_QWORD *)(v25 + 528) = v24;
              return;
            case -15280:
            case -15279:
            case -15278:
            case -15277:
            case -15276:
              return;
            case -15275:
              v542 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              v543 = *((_QWORD *)v542 + 4);
              v544 = 1 << v543;
              v545 = a1 + 56 + 8 * (int)(v543 >> 6);
              *(_QWORD *)(v545 + 8) &= ~v544;
              *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v542 + 4)) = *((_QWORD *)v542 + 1);
              v546 = *((_QWORD *)v542 + 4);
              v547 = 1 << v546;
              v548 = a1 + 56 + 8 * (int)(v546 >> 6);
              *(_QWORD *)(v548 + 16) |= v547;
              *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v542 + 4) + 248) = *((_QWORD *)v542 + 2);
              v549 = *((_QWORD *)v542 + 3);
              v550 = a1 + 56 + 8 * *((_QWORD *)v542 + 4);
              goto LABEL_498;
            case -15274:
              v551 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              *(_QWORD *)(a1 + 56 + 8 * *((_QWORD *)v551 + 3) + 272) = *((_QWORD *)v551 + 1);
              v549 = *((_QWORD *)v551 + 2);
              v550 = a1 + 56 + 8 * *((_QWORD *)v551 + 3);
              goto LABEL_498;
            case -15273:
              v552 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              v27 = v552;
              v553 = *((_QWORD *)v552 + 1);
              v554 = *((_QWORD *)v552 + 2) + v553;
              if (v554 >= 0x40)
                v554 = 64;
              v555 = v554 - v553;
              if (v554 < v553)
                v555 = 0;
              v556 = ~(-1 << v555);
              if (v553 <= v554)
                v557 = v553 & 0x3F;
              else
                v557 = 0;
              v558 = *(_QWORD *)(a1 + 72);
              *(_QWORD *)(a1 + 64) &= ~(v556 << v557);
              v559 = *((_QWORD *)v552 + 1);
              v560 = *((_QWORD *)v552 + 2) + v559;
              if (v560 >= 0x40)
                v560 = 64;
              v561 = v560 - v559;
              if (v560 < v559)
                v561 = 0;
              v562 = ~(-1 << v561);
              if (v559 <= v560)
                v563 = v559 & 0x3F;
              else
                v563 = 0;
              *(_QWORD *)(a1 + 72) = (v562 << v563) | v558;
              v564 = *((_QWORD *)v552 + 1);
              v565 = GTTraceFunc_argumentBytesWithMap(a2, v552[24], a3);
              if ((int)*((_QWORD *)v27 + 2) >= 1)
              {
                v566 = (_QWORD *)(a1 + 8 * v564 + 80);
                v567 = *((_QWORD *)v27 + 2);
                do
                {
                  v568 = *(_QWORD *)v565;
                  v565 += 8;
                  *v566++ = v568;
                  --v567;
                }
                while (v567);
              }
              v569 = a1 + 56;
              v570 = (void *)(a1 + 56 + 8 * *((_QWORD *)v27 + 1) + 272);
              v571 = GTTraceFunc_argumentBytesWithMap(a2, v27[25], a3);
              memcpy(v570, v571, 8 * *((_QWORD *)v27 + 2));
              v162 = v569 + 8 * *((_QWORD *)v27 + 1) + 520;
LABEL_495:
              v406 = v27[26];
              goto LABEL_496;
            case -15272:
              v574 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              v575 = *((_QWORD *)v574 + 3);
              v576 = 1 << v575;
              v577 = a1 + 56 + 8 * (int)(v575 >> 6);
              *(_QWORD *)(v577 + 8) |= v576;
              *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v574 + 3)) = GTTraceFunc_argumentBytesWithMap(a2, v574[32], a3);
              v578 = *((_QWORD *)v574 + 3);
              v579 = 1 << v578;
              v580 = a1 + 56 + 8 * (int)(v578 >> 6);
              *(_QWORD *)(v580 + 16) |= v579;
              *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v574 + 3) + 248) = *((_QWORD *)v574 + 1);
              v549 = *((_QWORD *)v574 + 2);
              v550 = a1 + 56 + 8 * *((_QWORD *)v574 + 3);
LABEL_498:
              *(_QWORD *)(v550 + 520) = v549;
              return;
            default:
              if (v7 != -15364)
                return;
              v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              v16 = *((_QWORD *)v15 + 1);
              if (!v16)
                return;
              v17 = 17;
              break;
          }
          goto LABEL_385;
      }
      return;
    }
    if (v7 <= -15891)
    {
      if (v7 <= -16029)
      {
        switch(v7)
        {
          case -16087:
            v26 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            v27 = v26;
            v28 = *((_QWORD *)v26 + 1);
            v29 = *((_QWORD *)v26 + 2) + v28;
            if (v29 >= 0x40)
              v29 = 64;
            v30 = v29 - v28;
            if (v29 < v28)
              v30 = 0;
            v31 = ~(-1 << v30);
            if (v28 <= v29)
              v32 = v28 & 0x3F;
            else
              v32 = 0;
            *(_QWORD *)(a1 + 6944) &= ~(v31 << v32);
            v33 = *((_QWORD *)v26 + 1);
            v34 = GTTraceFunc_argumentBytesWithMap(a2, v26[24], a3);
            if ((int)*((_QWORD *)v27 + 2) >= 1)
            {
              v35 = (_QWORD *)(a1 + 8 * v33 + 6952);
              v36 = *((_QWORD *)v27 + 2);
              do
              {
                v37 = *(_QWORD *)v34;
                v34 += 8;
                *v35++ = v37;
                --v36;
              }
              while (v36);
            }
            v38 = a1 + 8 * *((_QWORD *)v27 + 1);
            v39 = 7200;
LABEL_164:
            v162 = v38 + v39;
            goto LABEL_352;
          case -16086:
            v581 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            v582 = *((_QWORD *)v581 + 1);
            v583 = GTTraceFunc_argumentBytesWithMap(a2, v581[24], a3);
            if ((int)*((_QWORD *)v581 + 2) >= 1)
            {
              v584 = (_QWORD *)(a1 + 8 * v582 + 7448);
              v585 = *((_QWORD *)v581 + 2);
              do
              {
                v586 = *(_QWORD *)v583;
                v583 += 8;
                *v584++ = v586;
                --v585;
              }
              while (v585);
            }
            break;
          case -16085:
            v587 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            v588 = *((_QWORD *)v587 + 1);
            v589 = GTTraceFunc_argumentBytesWithMap(a2, v587[24], a3);
            if ((int)*((_QWORD *)v587 + 2) >= 1)
            {
              v590 = (_QWORD *)(a1 + 8 * v588 + 8472);
              v591 = *((_QWORD *)v587 + 2);
              do
              {
                v592 = *(_QWORD *)v589;
                v589 += 8;
                *v590++ = v592;
                --v591;
              }
              while (v591);
            }
            break;
          case -16084:
            v171 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            v593 = *((_QWORD *)v171 + 1);
            v594 = GTTraceFunc_argumentBytesWithMap(a2, v171[24], a3);
            if ((int)*((_QWORD *)v171 + 2) >= 1)
            {
              v595 = (_QWORD *)(a1 + 8 * v593 + 8472);
              v596 = *((_QWORD *)v171 + 2);
              do
              {
                v597 = *(_QWORD *)v594;
                v594 += 8;
                *v595++ = v597;
                --v596;
              }
              while (v596);
            }
            v598 = a1 + 56;
            v599 = (void *)(a1 + 56 + 4 * *((_QWORD *)v171 + 1) + 10548);
            v600 = GTTraceFunc_argumentBytesWithMap(a2, v171[25], a3);
            memcpy(v599, v600, 4 * *((_QWORD *)v171 + 2));
            v180 = v598 + 4 * *((_QWORD *)v171 + 1);
            v181 = 10612;
            goto LABEL_511;
          case -16077:
            v602 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(_QWORD *)(a1 + 8608) = *((_QWORD *)v602 + 1);
            v572 = GTTraceFunc_argumentBytesWithMap(a2, v602[16], a3);
            v601 = (void *)(a1 + 8616);
            v573 = 48 * *((_QWORD *)v602 + 1);
            goto LABEL_514;
          case -16076:
            v603 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(_QWORD *)(a1 + 9384) = *((_QWORD *)v603 + 1);
            v572 = GTTraceFunc_argumentBytesWithMap(a2, v603[16], a3);
            v601 = (void *)(a1 + 9392);
            v573 = 32 * *((_QWORD *)v603 + 1);
            goto LABEL_514;
          case -16074:
            v604 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(_DWORD *)(a1 + 56 + 4 * *((_QWORD *)v604 + 3) + 10696) = *((_QWORD *)v604 + 1);
            *(_DWORD *)(a1 + 56 + 4 * *((_QWORD *)v604 + 3) + 10820) = *((_QWORD *)v604 + 2);
            break;
          default:
            return;
        }
      }
      else
      {
        switch(v7)
        {
          case -16028:
            v18 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(_QWORD *)(a1 + 8 * *((_QWORD *)v18 + 2) + 128) = *((_QWORD *)v18 + 1);
            break;
          case -16027:
            *(_BYTE *)(a1 + 194) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
            break;
          case -16026:
            *(_BYTE *)(a1 + 195) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                   + 1);
            break;
          case -16025:
          case -16024:
          case -16023:
          case -16019:
          case -16018:
          case -16016:
          case -16015:
            return;
          case -16022:
            v496 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(_QWORD *)(a1 + 8 * *((_QWORD *)v496 + 2) + 9992) = *((_QWORD *)v496 + 1);
            break;
          case -16021:
            *(_BYTE *)(a1 + 11144) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                     + 1);
            break;
          case -16020:
            *(_BYTE *)(a1 + 11145) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)
                                     + 1);
            break;
          case -16017:
            v497 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            *(_QWORD *)(a1 + 2032) = *((_QWORD *)v497 + 1);
            *(_DWORD *)(a1 + 2172) = *((_QWORD *)v497 + 2);
            break;
          case -16014:
            v498 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            bzero((void *)a1, 0x2B90uLL);
            v499 = *((_QWORD *)v498 + 1);
            if (v499)
            {
              *(_DWORD *)a1 = 28;
              v500 = *a2;
              *(_QWORD *)(a1 + 8) = v499;
              *(_QWORD *)(a1 + 16) = v500;
              *(_QWORD *)(a1 + 24) = -1;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)v498;
              bzero((void *)(a1 + 56), 0x888uLL);
              memset_pattern16((void *)(a1 + 2240), &unk_4AA5B0, 0x100uLL);
              *(_QWORD *)(a1 + 824) = -1;
              *(_QWORD *)&v501 = -1;
              *((_QWORD *)&v501 + 1) = -1;
              *(_OWORD *)(a1 + 792) = v501;
              *(_OWORD *)(a1 + 808) = v501;
              *(_OWORD *)(a1 + 760) = v501;
              *(_OWORD *)(a1 + 776) = v501;
              *(_OWORD *)(a1 + 728) = v501;
              *(_OWORD *)(a1 + 744) = v501;
              *(_OWORD *)(a1 + 696) = v501;
              *(_OWORD *)(a1 + 712) = v501;
              *(_OWORD *)(a1 + 664) = v501;
              *(_OWORD *)(a1 + 680) = v501;
              *(_OWORD *)(a1 + 632) = v501;
              *(_OWORD *)(a1 + 648) = v501;
              *(_OWORD *)(a1 + 600) = v501;
              *(_OWORD *)(a1 + 616) = v501;
              *(_OWORD *)(a1 + 584) = v501;
              *(_BYTE *)(a1 + 2304) = *((_QWORD *)v498 + 2);
            }
            break;
          case -16013:
            v12 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
            bzero((void *)a1, 0x2B90uLL);
            v13 = *((_QWORD *)v12 + 1);
            if (v13)
            {
              v14 = 82;
              goto LABEL_433;
            }
            break;
          default:
            if (v7 == -15984)
            {
              v605 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              *(_BYTE *)(v6 + 2530) = *((_DWORD *)v605 + 4);
              *(_DWORD *)(a1 + 10740) = *((_QWORD *)v605 + 1);
            }
            else if (v7 == -15970)
            {
              *(_BYTE *)(a1 + 11146) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3)+ 2);
            }
            break;
        }
      }
    }
    else
    {
      if (v7 > -15649)
      {
        if (v7 > -15588)
        {
          switch(v7)
          {
            case -15587:
              v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              v16 = *((_QWORD *)v15 + 1);
              if (!v16)
                return;
              v17 = 21;
              goto LABEL_385;
            case -15586:
              v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              v452 = *((_QWORD *)v15 + 1);
              if (!v452)
                return;
              *(_DWORD *)a1 = 28;
              v453 = *a2;
              *(_QWORD *)(a1 + 8) = v452;
              *(_QWORD *)(a1 + 16) = v453;
              *(_QWORD *)(a1 + 24) = -1;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)v15;
              bzero((void *)(a1 + 56), 0x888uLL);
              memset_pattern16((void *)(a1 + 2240), &unk_4AA5B0, 0x100uLL);
              *(_QWORD *)(a1 + 824) = -1;
              *(_QWORD *)&v454 = -1;
              *((_QWORD *)&v454 + 1) = -1;
              *(_OWORD *)(a1 + 792) = v454;
              *(_OWORD *)(a1 + 808) = v454;
              *(_OWORD *)(a1 + 760) = v454;
              *(_OWORD *)(a1 + 776) = v454;
              *(_OWORD *)(a1 + 728) = v454;
              *(_OWORD *)(a1 + 744) = v454;
              *(_OWORD *)(a1 + 696) = v454;
              *(_OWORD *)(a1 + 712) = v454;
              *(_OWORD *)(a1 + 664) = v454;
              *(_OWORD *)(a1 + 680) = v454;
              *(_OWORD *)(a1 + 632) = v454;
              *(_OWORD *)(a1 + 648) = v454;
              *(_OWORD *)(a1 + 600) = v454;
              *(_OWORD *)(a1 + 616) = v454;
              *(_OWORD *)(a1 + 584) = v454;
              *(_BYTE *)(a1 + 2304) = -1;
              goto LABEL_386;
            case -15585:
              v15 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              bzero((void *)a1, 0x2B90uLL);
              v16 = *((_QWORD *)v15 + 1);
              if (!v16)
                return;
              v17 = 74;
LABEL_385:
              *(_DWORD *)a1 = v17;
              v455 = *a2;
              *(_QWORD *)(a1 + 8) = v16;
              *(_QWORD *)(a1 + 16) = v455;
              *(_QWORD *)(a1 + 24) = -1;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)v15;
LABEL_386:
              *(_QWORD *)(a1 + 56) = GTTraceFunc_argumentBytesWithMap(a2, v15[16], a3);
              break;
            case -15583:
            case -15581:
              goto LABEL_50;
            case -15582:
              v456 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              v457 = v456;
              v458 = *((_QWORD *)v456 + 1);
              v459 = *((_QWORD *)v456 + 2) + v458;
              v460 = 64;
              if (v459 >= 0x40)
                v459 = 64;
              v461 = v459 - v458;
              if (v459 < v458)
                v461 = 0;
              v462 = ~(-1 << v461);
              if (v458 <= v459)
                v463 = v458 & 0x3F;
              else
                v463 = 0;
              v466 = *(_QWORD *)(a1 + 80);
              v465 = (uint64_t *)(a1 + 80);
              v464 = v466;
              *(v465 - 1) &= ~(v462 << v463);
              v467 = *((_QWORD *)v456 + 1);
              if (*((_QWORD *)v456 + 2) + v467 < 0x40)
                v460 = *((_QWORD *)v456 + 2) + v467;
              v468 = v460 - v467;
              if (v460 < v467)
                v468 = 0;
              v469 = ~(-1 << v468);
              if (v467 <= v460)
                v470 = v467 & 0x3F;
              else
                v470 = 0;
              *v465 = v464 & ~(v469 << v470);
              v471 = *((_QWORD *)v456 + 1);
              v472 = GTTraceFunc_argumentBytesWithMap(a2, v456[24], a3);
              if ((int)*((_QWORD *)v457 + 2) >= 1)
              {
                v473 = &v465[v471 + 1];
                v474 = *((_QWORD *)v457 + 2);
                do
                {
                  v475 = *(_QWORD *)v472;
                  v472 += 8;
                  *v473++ = v475;
                  --v474;
                }
                while (v474);
              }
              return;
            case -15580:
              v476 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              v477 = v476;
              v478 = *((_QWORD *)v476 + 1);
              v479 = *((_QWORD *)v476 + 2) + v478;
              v480 = 64;
              if (v479 >= 0x40)
                v479 = 64;
              v481 = v479 - v478;
              if (v479 < v478)
                v481 = 0;
              v482 = ~(-1 << v481);
              if (v478 <= v479)
                v483 = v478 & 0x3F;
              else
                v483 = 0;
              v486 = *(_QWORD *)(a1 + 80);
              v485 = (uint64_t *)(a1 + 80);
              v484 = v486;
              *(v485 - 1) &= ~(v482 << v483);
              v487 = *((_QWORD *)v476 + 1);
              if (*((_QWORD *)v476 + 2) + v487 < 0x40)
                v480 = *((_QWORD *)v476 + 2) + v487;
              v488 = v480 - v487;
              if (v480 < v487)
                v488 = 0;
              v489 = ~(-1 << v488);
              if (v487 <= v480)
                v490 = v487 & 0x3F;
              else
                v490 = 0;
              *v485 = v484 & ~(v489 << v490);
              v491 = *((_QWORD *)v476 + 1);
              v492 = GTTraceFunc_argumentBytesWithMap(a2, v476[24], a3);
              if ((int)*((_QWORD *)v477 + 2) >= 1)
              {
                v493 = &v485[v491 + 1];
                v494 = *((_QWORD *)v477 + 2);
                do
                {
                  v495 = *(_QWORD *)v492;
                  v492 += 8;
                  *v493++ = v495;
                  --v494;
                }
                while (v494);
              }
              return;
            default:
              return;
          }
          return;
        }
        if (v7 != -15648)
        {
          if (v7 != -15642)
          {
            if (v7 == -15623)
            {
LABEL_50:
              v51 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
              v52 = *((_QWORD *)v51 + 2);
              v53 = 1 << v52;
              v54 = a1 + 8 * (int)(v52 >> 6);
              *(_QWORD *)(v54 + 72) &= ~v53;
              *(_QWORD *)(a1 + 80 + 8 * *((_QWORD *)v51 + 2) + 8) = *((_QWORD *)v51 + 1);
              *(_QWORD *)(a1 + 80 + 8 * (int)(*((_QWORD *)v51 + 2) >> 6)) &= ~(1 << *((_QWORD *)v51 + 2));
            }
            return;
          }
LABEL_65:
          *(_QWORD *)(a1 + 24) = *a2;
          return;
        }
LABEL_54:
        v55 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
        *(_QWORD *)(a1 + 48) = GTTraceFunc_argumentBytesWithMap(a2, v55[8], a3);
        return;
      }
      if (v7 <= -15823)
      {
        if (v7 > -15885)
        {
          if (v7 == -15884)
            goto LABEL_65;
          if (v7 != -15870)
            return;
          v12 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          v13 = *((_QWORD *)v12 + 1);
          if (!v13)
            return;
          v14 = 74;
          goto LABEL_433;
        }
        if (v7 == -15890)
          goto LABEL_54;
        if (v7 == -15888)
          *(_QWORD *)(a1 + 56) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3) + 1);
      }
      else
      {
        if (v7 > -15795)
        {
          if (v7 == -15794)
            goto LABEL_54;
          if (v7 == -15789)
            goto LABEL_65;
          if (v7 != -15673)
            return;
          v12 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          bzero((void *)a1, 0x2B90uLL);
          v13 = *((_QWORD *)v12 + 1);
          if (!v13)
            return;
          v14 = 17;
LABEL_433:
          *(_DWORD *)a1 = v14;
          v502 = *a2;
          *(_QWORD *)(a1 + 8) = v13;
          *(_QWORD *)(a1 + 16) = v502;
          *(_QWORD *)(a1 + 24) = -1;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)v12;
          return;
        }
        if (v7 == -15822)
        {
          v606 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_DWORD *)(a1 + 11128) = *((_QWORD *)v606 + 1);
          *(_QWORD *)(a1 + 9912) = GTTraceFunc_argumentBytesWithMap(a2, v606[16], a3);
        }
        else if (v7 == -15812)
        {
          v56 = GTTraceFunc_argumentBytesWithMap(a2, *((unsigned __int8 *)a2 + 13), a3);
          *(_BYTE *)(v6 + 2524) = *((_QWORD *)v56 + 1);
          *(_DWORD *)(a1 + 11124) = *((_QWORD *)v56 + 2);
        }
      }
    }
  }
}

BOOL GTMTLSMBuilder_streamIntersectionRange(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t Func;
  unint64_t *v9;

  if (!a3)
    return 0;
  v5 = *(_QWORD *)(a3 + 32);
  if (v5 && (*(_BYTE *)(v5 + 79) & 8) != 0)
    v6 = (_QWORD *)(v5 + 64);
  else
    v6 = 0;
  Func = GTTraceStream_lastFunc(a3);
  if (*v6 >= a1 + a2)
    return 0;
  v9 = (unint64_t *)Func;
  return !IsFuncEnumDestructor(*(_DWORD *)(Func + 8)) || a1 <= *v9;
}

uint64_t GTMTLSMBuilder_compareStreams(_QWORD **a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *a1;
  if (*a1)
    v2 = (_QWORD *)*v2;
  v3 = *a2;
  if (*a2)
    v3 = (_QWORD *)*v3;
  v4 = v2 >= v3;
  v5 = v2 != v3;
  if (v4)
    return v5;
  else
    return 0xFFFFFFFFLL;
}

uint64_t *GTMTLSMContext_buildDeviceMirrorWithIgnoreFlags(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, apr_pool_t *pool)
{
  apr_array_header_t *v9;
  apr_hash_index_t *v10;
  apr_hash_index_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  unint64_t v181;
  int v182;
  uint64_t v183;
  char *v184;
  unsigned int v185;
  int v186;
  uint64_t v187;
  char *v188;
  _QWORD *v189;
  _BYTE *v190;
  char *v191;
  char *v192;
  unint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t *v196;
  unint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  __int128 v204;
  char *v205;
  unsigned int v206;
  int v207;
  uint64_t v208;
  char *v209;
  _QWORD *v210;
  _BYTE *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unsigned int v216;
  int v217;
  uint64_t v218;
  _OWORD *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  int v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  __int128 v233;
  __int128 v234;
  int v235;
  unint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  int v242;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  char *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  int v253;
  unsigned int v254;
  int v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  int v263;
  _QWORD *v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;
  unsigned int v275;
  int v276;
  uint64_t v277;
  _OWORD *v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  unint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  int v293;
  int *v294;
  _QWORD *v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  char *v300;
  uint64_t v301;
  int v302;
  unsigned int v303;
  int v304;
  uint64_t v305;
  _QWORD *v306;
  _BYTE *v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  int v315;
  int *v316;
  uint64_t v317;
  char *v318;
  _QWORD *v319;
  uint64_t v320;
  int v321;
  int v322;
  uint64_t v323;
  char *v324;
  char *v325;
  char v326;
  uint64_t v327;
  char *v328;
  char *v329;
  char *v330;
  uint64_t v331;
  char *v332;
  char *v333;
  int v334;
  uint64_t v335;
  char *v336;
  char *v337;
  char *v338;
  uint64_t v339;
  char *v340;
  char *v341;
  char *v342;
  unsigned int v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  char *v348;
  char *v349;
  uint64_t v350;
  char *v351;
  char *v352;
  char *v353;
  uint64_t v354;
  char *v355;
  char *v356;
  char *v357;
  char *v358;
  unsigned int v359;
  int v360;
  uint64_t v361;
  unsigned int v362;
  _QWORD *v363;
  uint64_t v364;
  apr_hash_t *v365;
  const void *v366;
  unint64_t v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  int v373;
  int *v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  char *v380;
  char *v381;
  uint64_t v382;
  char *v383;
  char *v384;
  unsigned int v385;
  int v386;
  uint64_t v387;
  int v388;
  unint64_t v389;
  uint64_t v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  int v395;
  int *v396;
  uint64_t v397;
  _QWORD *v398;
  uint64_t v399;
  uint64_t v400;
  char *v401;
  char *v402;
  char *v403;
  char *v404;
  char *v405;
  unsigned int v406;
  int v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  int v414;
  uint64_t v415;
  unint64_t v416;
  int v417;
  uint64_t v418;
  char *v419;
  char *v420;
  unsigned int v421;
  int v422;
  uint64_t v423;
  char *v424;
  unint64_t v425;
  uint64_t v426;
  int v427;
  unint64_t v428;
  uint64_t v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  int *v434;
  uint64_t v435;
  _QWORD *v436;
  uint64_t v437;
  char *v438;
  char *v439;
  char *v440;
  unsigned int v441;
  int v442;
  uint64_t v443;
  _BYTE *v444;
  int v445;
  unint64_t v446;
  uint64_t v447;
  int v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  int v452;
  int *v453;
  _QWORD *v454;
  uint64_t v455;
  uint64_t v456;
  char *v457;
  _QWORD *v458;
  char *v459;
  char *v460;
  char *v461;
  __int128 v462;
  char *v463;
  char *v464;
  char *v465;
  unsigned int v466;
  int v467;
  uint64_t v468;
  int v469;
  unint64_t v470;
  uint64_t v471;
  int v472;
  uint64_t v473;
  uint64_t v474;
  int v475;
  int *v476;
  _QWORD *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  char *v481;
  char *v482;
  char *v483;
  char *v484;
  unsigned int v485;
  int v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  unint64_t v491;
  uint64_t v492;
  int v493;
  uint64_t v494;
  int v495;
  uint64_t v496;
  char *v497;
  unsigned int v498;
  int v499;
  uint64_t v500;
  int v501;
  unint64_t v502;
  uint64_t v503;
  int v504;
  uint64_t v505;
  int v506;
  uint64_t v507;
  char *v508;
  unsigned int v509;
  int v510;
  uint64_t v511;
  int v512;
  uint64_t v513;
  unint64_t v514;
  uint64_t v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  int v519;
  uint64_t v520;
  unint64_t v521;
  int v522;
  char *v523;
  unsigned int v524;
  int v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  char *v529;
  char *v530;
  int v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  int v536;
  uint64_t v537;
  int v538;
  char *v539;
  unsigned int v540;
  int v541;
  uint64_t v542;
  _BYTE *v543;
  uint64_t v544;
  int v545;
  unint64_t v546;
  uint64_t v547;
  int v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  int *v552;
  _QWORD *v553;
  __int16 v554;
  uint64_t v555;
  uint64_t v556;
  int v557;
  char *v558;
  char *v559;
  int v560;
  char *v561;
  char *v562;
  unsigned int v563;
  int v564;
  uint64_t v565;
  __int16 v566;
  int v567;
  uint64_t v568;
  char *v569;
  unint64_t v570;
  uint64_t v571;
  int v572;
  uint64_t v573;
  int v574;
  uint64_t v575;
  char *v576;
  unsigned int v577;
  int v578;
  uint64_t v579;
  int v580;
  unint64_t v581;
  int v582;
  uint64_t v583;
  int v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  int *v588;
  uint64_t v589;
  _QWORD *v590;
  uint64_t v591;
  char *v592;
  char *v593;
  char *v594;
  char *v595;
  unsigned int v596;
  int v597;
  uint64_t v598;
  uint64_t v599;
  int v600;
  uint64_t v601;
  char *v602;
  int v603;
  unint64_t v604;
  uint64_t v605;
  int v606;
  uint64_t v607;
  int v608;
  uint64_t v609;
  char *v610;
  unsigned int v611;
  int v612;
  uint64_t v613;
  int v614;
  int v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  char *v620;
  char *v621;
  unint64_t v622;
  unint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  int v627;
  uint64_t *v628;
  int v629;
  unsigned int *v630;
  uint64_t v631;
  unint64_t v632;
  char *v633;
  char *v634;
  char *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  char *v639;
  unsigned int v640;
  char *v641;
  char *v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  char *v647;
  char *v648;
  char *v649;
  char *v650;
  char *v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  char *v655;
  unsigned int v656;
  char *v657;
  unint64_t v658;
  char *v659;
  char *v660;
  char *v661;
  uint64_t v662;
  uint64_t v663;
  char *v664;
  int v665;
  char *v666;
  uint64_t v667;
  uint64_t v668;
  char *v669;
  unsigned int v670;
  int v671;
  uint64_t v672;
  int v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  int v677;
  int v678;
  char *v679;
  uint64_t v680;
  unint64_t v681;
  uint64_t v682;
  int v683;
  uint64_t v684;
  uint64_t v685;
  int v686;
  int *v687;
  _QWORD *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  char *v693;
  char *v694;
  uint64_t v695;
  char *v696;
  char *v697;
  uint64_t v698;
  char *v699;
  uint64_t v700;
  char *v701;
  char *v702;
  uint64_t v703;
  char *v704;
  char *v705;
  uint64_t v706;
  char *v707;
  char *v708;
  uint64_t v709;
  char *v710;
  char *v711;
  char *v712;
  int v713;
  char *v714;
  uint64_t v715;
  char *v716;
  char *v717;
  uint64_t v718;
  char *v719;
  char *v720;
  uint64_t v721;
  char *v722;
  char *v723;
  unsigned int v724;
  unsigned int v725;
  int v726;
  uint64_t v727;
  uint64_t v728;
  unint64_t v729;
  uint64_t v730;
  uint64_t v731;
  unsigned int v732;
  int v733;
  uint64_t v734;
  uint64_t v735;
  unint64_t v736;
  uint64_t v737;
  int v738;
  uint64_t v739;
  uint64_t v740;
  unint64_t v741;
  int v742;
  uint64_t v744;
  char *v746;
  uint64_t v747;
  char *v748;
  char *v749;
  char *v750;
  char *v751;
  uint64_t j;
  unsigned int v753;
  int v754;
  uint64_t v755;
  char *v756;
  uint64_t v757;
  int v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unint64_t v762;
  uint64_t v763;
  int v764;
  uint64_t *v765;
  uint64_t v766;
  int v767;
  int *v768;
  char *v769;
  char v770;
  char *v771;
  unsigned int v772;
  int v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  apr_hash_t *v777;
  uint64_t v778;
  unint64_t v779;
  uint64_t v780;
  uint64_t v781;
  int v782;
  _QWORD *v783;
  uint64_t v784;
  unsigned int v785;
  int v786;
  uint64_t v787;
  _OWORD *v788;
  unint64_t v789;
  uint64_t v790;
  uint64_t v791;
  int v792;
  _QWORD *v793;
  uint64_t v794;
  unsigned int v795;
  int v796;
  uint64_t v797;
  int v799;
  uint64_t v800;
  unint64_t v801;
  uint64_t v802;
  int v803;
  uint64_t v804;
  int v805;
  uint64_t v806;
  char *v807;
  unsigned int v808;
  int v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  unsigned int v813;
  unsigned int v814;
  uint64_t v815;
  unint64_t v816;
  uint64_t v817;
  uint64_t v818;
  int v819;
  _QWORD *v821;
  __int128 v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  uint64_t v829;
  unsigned int v830;
  int v831;
  uint64_t v832;
  __int128 v833;
  __int128 v834;
  __int128 v835;
  __int128 v836;
  __int128 v837;
  __int128 v838;
  __int128 v839;
  uint64_t v840;
  unsigned int v841;
  unsigned int v842;
  uint64_t v843;
  unint64_t v844;
  uint64_t v845;
  uint64_t v846;
  int v847;
  _QWORD *v849;
  __int128 v850;
  __int128 v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  uint64_t v859;
  uint64_t v860;
  unsigned int v861;
  int v862;
  uint64_t v863;
  __int128 v864;
  __int128 v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  uint64_t v873;
  uint64_t v874;
  unsigned int v875;
  unsigned int v876;
  uint64_t v877;
  unint64_t v878;
  uint64_t v879;
  uint64_t v880;
  int v881;
  _QWORD *v883;
  __int128 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  __int128 v888;
  __int128 v889;
  __int128 v890;
  __int128 v891;
  uint64_t v892;
  unsigned int v893;
  int v894;
  uint64_t v895;
  __int128 v896;
  __int128 v897;
  __int128 v898;
  __int128 v899;
  __int128 v900;
  __int128 v901;
  __int128 v902;
  __int128 v903;
  uint64_t v904;
  _QWORD *v905;
  uint64_t v906;
  unsigned int v907;
  unsigned int v908;
  uint64_t v909;
  _QWORD *v910;
  unint64_t v911;
  uint64_t v912;
  uint64_t v913;
  unint64_t v914;
  uint64_t v915;
  unsigned int v916;
  int v917;
  unsigned int v918;
  uint64_t v919;
  int v920;
  char *v921;
  int v922;
  uint64_t v923;
  _QWORD *v924;
  __int128 v925;
  __int128 v926;
  __int128 v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  __int128 v933;
  uint64_t v934;
  __int128 v935;
  __int128 v936;
  __int128 v937;
  __int128 v938;
  __int128 v939;
  __int128 v940;
  __int128 v941;
  __int128 v942;
  __int128 v943;
  uint64_t v944;
  __int128 v945;
  __int128 v946;
  __int128 v947;
  __int128 v948;
  __int128 v949;
  __int128 v950;
  uint64_t v951;
  __int128 v952;
  __int128 v953;
  int v954;
  int v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  _QWORD *v962;
  uint64_t v963;
  _QWORD *v964;
  uint64_t v965;
  char *v966;
  uint64_t *entry;
  uint64_t v968;
  apr_hash_t *v969;
  const void *v970;
  _QWORD *v971;
  uint64_t *v972;
  uint64_t v973;
  _QWORD *v974;
  _BYTE *v975;
  char *v976;
  char *v977;
  int v978;
  _BYTE *v979;
  uint64_t v980;
  uint64_t v981;
  _QWORD *v982;
  _QWORD *v983;
  int v984;
  const void *v985;
  uint64_t v986;
  uint64_t v987;
  int v988;
  _QWORD *v989;
  _BYTE *v990;
  uint64_t v991;
  _QWORD *v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  __int128 v997;
  __int128 v998;
  __int128 v999;
  __int128 v1000;
  __int128 v1001;
  __int128 v1002;
  __int128 v1003;
  __int128 v1004;
  __int128 v1005;
  __int128 v1006;
  __int128 v1007;
  __int128 v1008;
  __int128 v1009;
  __int128 v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  __int128 v1014;
  __int128 v1015;
  __int128 v1016;
  __int128 v1017;
  __int128 v1018;
  __int128 v1019;
  __int128 v1020;
  uint64_t v1021;
  __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  __int128 v1026;
  __int128 v1027;
  __int128 v1028;
  __int128 v1029;
  char *v1030;
  _BYTE *v1031;
  __int16 v1032;
  uint64_t v1033;
  __int128 v1034;
  __int128 v1035;
  __int128 v1036;
  __int128 v1037;
  __int128 v1038;
  __int128 v1039;
  __int128 v1040;
  __int128 v1041;
  __int128 v1042;
  _OWORD *v1043;
  uint64_t v1044;
  char *v1045;
  uint64_t v1046;
  uint64_t v1047;
  apr_hash_index_t *v1048;
  apr_hash_index_t *v1049;
  apr_hash_index_t *v1050;
  _DWORD *v1051;
  unsigned int v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  unint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  int v1060;
  uint64_t i;
  _QWORD *v1063;
  uint64_t v1064;
  int v1065;
  char *v1066;
  uint64_t v1067;
  char *v1068;
  char *v1069;
  uint64_t v1070;
  char v1071;
  uint64_t v1072;
  char v1073;
  uint64_t v1074;
  char *v1075;
  uint64_t v1076;
  char v1077;
  char *v1078;
  uint64_t v1079;
  uint64_t v1080;
  int v1081;
  char *v1082;
  char *v1083;
  char *v1084;
  char *v1085;
  char *v1086;
  char *v1087;
  int v1088;
  char *v1089;
  __int16 v1090;
  char *v1091;
  int v1092;
  char *v1093;
  uint64_t v1094;
  int v1095;
  uint64_t v1096;
  __int16 v1097;
  uint64_t v1098;
  uint64_t v1099;
  char *v1100;
  char *v1101;
  char *v1102;
  unint64_t v1103;
  int v1104;
  char *v1105;
  uint64_t v1106;
  __int128 v1107;
  int v1108;
  char v1109;
  char *v1110;
  int v1111;
  char *v1112;
  uint64_t v1113;
  __int16 v1114;
  int v1115;
  char *v1116;
  unsigned int v1117;
  int v1118;
  char v1119;
  __int128 v1120;
  uint64_t v1121;
  uint64_t v1122;
  char *v1123;
  uint64_t v1124;
  int v1125;
  uint64_t v1126;
  char *v1127;
  __int16 v1128;
  char *v1129;
  char *v1130;
  uint64_t v1131;
  char v1132;
  uint64_t v1133;
  char *v1134;
  uint64_t v1135;
  uint64_t v1136;
  char *v1137;
  uint64_t v1138;
  uint64_t v1139;
  char *v1140;
  char v1141;
  uint64_t v1142;
  unint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  unint64_t v1146;
  char v1147;
  char v1148;
  uint64_t v1149;
  unint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  int v1155;
  int v1156;
  int v1157;
  unint64_t v1158;
  char *v1159;
  int v1160;
  uint64_t v1161;
  unint64_t v1162;
  unsigned int v1163;
  uint64_t v1164;
  int v1165;
  unint64_t v1166;
  unint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  char *v1177;
  uint64_t v1178;
  uint64_t v1179;
  unint64_t v1180;
  int v1181;
  unint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  unint64_t v1187;
  int v1188;
  uint64_t v1189;
  uint64_t v1190;
  unint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  unint64_t v1194;
  uint64_t v1195;
  unint64_t v1196;
  int v1197;
  unint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  __int128 v1202;
  int v1203;
  char *v1204;
  int v1205;
  uint64_t v1206;
  char *v1207;
  char *v1208;
  uint64_t v1209;
  unint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  int v1213;
  char *v1214;
  char v1215;
  unint64_t v1216;
  apr_pool_t *v1218;
  uint64_t v1219;
  uint64_t *v1220;
  int v1221;
  unint64_t v1222;
  char *v1223;
  __int128 v1224;
  char *v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t *__key;
  uint64_t v1229;
  __int128 v1230;
  __int128 v1231;
  __int128 v1232;
  uint64_t v1233;
  uint64_t v1234;
  unint64_t v1235;
  uint64_t v1236;
  apr_pool_t *p;
  apr_hash_t *ht;
  uint64_t v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  __int128 v1243;
  __int128 v1244;
  __int128 v1245;
  __int128 v1246;
  __int128 v1247;
  __int128 v1248;
  _OWORD __src[26];

  v1247 = 0u;
  v1248 = 0u;
  v1245 = 0u;
  v1246 = 0u;
  v1243 = 0u;
  v1244 = 0u;
  v1241 = 0u;
  v1242 = 0u;
  v1240 = 0u;
  v1234 = 1;
  v1235 = a4;
  v1236 = a5;
  p = pool;
  ht = apr_hash_make(pool);
  v1239 = a2;
  v1218 = pool;
  v9 = apr_array_make(pool, *(_DWORD *)(a1 + 48), 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = a1;
  *(_DWORD *)(a1 + 40) = 0;
  v10 = apr_hash_next((apr_hash_index_t *)(a1 + 16));
  if (v10)
  {
    v11 = v10;
    do
    {
      v12 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 32);
      *(_QWORD *)apr_array_push(v9) = v12;
      v11 = apr_hash_next(v11);
    }
    while (v11);
  }
  qsort(v9->elts, v9->nelts, v9->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLSMBuilder_compareStreams);
  v1233 = 0;
  v1232 = 0u;
  v1231 = 0u;
  v1230 = 0u;
  v1229 = 1;
  __key = &v1229;
  v13 = (uint64_t *)bsearch(&__key, v9->elts, v9->nelts, v9->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLSMBuilder_compareStreams);
  if (!v13)
    goto LABEL_1306;
  v14 = v13 + 1;
  v15 = *v13;
  if (*(_DWORD *)(*(_QWORD *)(*v13 + 32) + 72) != -10239)
    return 0;
  v16 = (uint64_t)&v9->elts[8 * v9->nelts];
  v1219 = v16;
  if (GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v15))
  {
    LODWORD(v1247) = v1247 + 1;
    v17 = *(_QWORD *)(v15 + 32);
    if (v17)
    {
      v18 = 0;
      while (1)
      {
        v19 = atomic_load((unsigned int *)(v17 + 4));
        v20 = v18 + (v19 >> 6) - 1;
        if ((int)v20 > 0)
          break;
        v17 = *(_QWORD *)(v17 + 40);
        v18 = v20;
        if (!v17)
        {
          v18 = v20;
          goto LABEL_15;
        }
      }
    }
    else
    {
      v18 = 0;
    }
    v20 = 0;
LABEL_15:
    v22 = 0;
    v23 = 0;
    v24 = v18 | (unint64_t)(v20 << 32);
LABEL_16:
    v25 = v17 + 64;
    while (v17)
    {
      v26 = HIDWORD(v24) - v24;
      if ((*(_BYTE *)(v25 + ((uint64_t)(HIDWORD(v24) - (int)v24) << 6) + 15) & 8) == 0)
        break;
      v27 = v25 + ((uint64_t)v26 << 6);
      v28 = *(_QWORD *)v27;
      if (*(_QWORD *)v27 >= v1236 + v1235)
        break;
      v29 = *(_DWORD *)(v27 + 8);
      if (v29 == -10239)
      {
        v30 = v1239;
        v31 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v27, *(unsigned __int8 *)(v25 + ((uint64_t)v26 << 6) + 13), v1239);
        v22 = *(_QWORD *)v31;
        v23 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v27, v31[8], v30);
      }
      else if (v29 == -16317)
      {
        if (v1235 <= v28)
        {
          v1063 = apr_palloc(p, 0x30uLL);
          *v1063 = 36;
          v1063[1] = v22;
          *((_OWORD *)v1063 + 1) = xmmword_4AA580;
          v1063[4] = 0;
          v1063[5] = v23;
          v1064 = *find_entry((uint64_t)ht, (_BYTE *)v1063 + 8, 8uLL, 0);
          if (v1064)
            v1064 = *(_QWORD *)(v1064 + 32);
          v1063[4] = v1064;
          apr_hash_set(ht, v1063 + 1, 8, v1063);
          v1063[3] = v28;
        }
        goto LABEL_29;
      }
      v32 = atomic_load((unsigned int *)(v17 + 4));
      v33 = v24 + (v32 >> 6);
      v34 = (HIDWORD(v24) + 1);
      v24 = (v34 << 32) | v24;
      if ((_DWORD)v34 == v33 - 1)
      {
        v24 = (v34 << 32) | v34;
        v17 = *(_QWORD *)(v17 + 40);
        goto LABEL_16;
      }
    }
    v35 = apr_palloc(p, 0x30uLL);
    *v35 = 36;
    v35[1] = v22;
    *((_OWORD *)v35 + 1) = xmmword_4AA580;
    v35[4] = 0;
    v35[5] = v23;
    v36 = *find_entry((uint64_t)ht, (_BYTE *)v35 + 8, 8uLL, 0);
    if (v36)
      v36 = *(_QWORD *)(v36 + 32);
    v35[4] = v36;
    apr_hash_set(ht, v35 + 1, 8, v35);
    v35[3] = -1;
  }
LABEL_29:
  if (v14 == (uint64_t *)v16)
    goto LABEL_1306;
  while (2)
  {
    v37 = *v14;
    if (!*v14)
      goto LABEL_1212;
    v38 = *(_QWORD *)(v37 + 32);
    if (!v38 || (*(_BYTE *)(v38 + 79) & 8) == 0)
      goto LABEL_1212;
    v39 = *(_DWORD *)(v38 + 72);
    if (v39 == -7163)
    {
      v1227 = 0;
      v40 = 30;
      v43 = GTTraceFunc_argumentBytesWithPool((uint64_t *)(v38 + 64), *(unsigned __int8 *)(v38 + 77), *(_QWORD *)(v37 + 24))+ 8;
    }
    else
    {
      v41 = GetFuncEnumConstructorType(*(_DWORD *)(v38 + 72)) - 2;
      if (v41 > 0x51)
        v40 = 255;
      else
        v40 = byte_4AA3D8[v41];
      v1227 = 0;
      v42 = *(_QWORD *)(v37 + 24);
      if (v39 == -15913 || v39 == -15914)
        v43 = GTTraceFunc_argumentBytesWithPool((uint64_t *)(v38 + 64), *(unsigned __int8 *)(v38 + 77), v42) + 16;
      else
        v43 = GTTraceFunc_argumentBytesWithPool((uint64_t *)(v38 + 64), *(unsigned __int8 *)(v38 + 77), v42);
    }
    v44 = *(_QWORD *)v43;
    v1227 = *(_QWORD *)v43;
    if (v40 != 29 && v44 != 1)
    {
      v45 = *find_entry((uint64_t)ht, &v1227, 8uLL, 0);
      if (!v45 || !*(_QWORD *)(v45 + 32))
        goto LABEL_1211;
    }
    v1220 = v14;
    switch((char)v40)
    {
      case 0:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        memset(__src, 0, 24);
        memset(&__src[8], 0, 32);
        memset(&__src[5], 0, 32);
        *(_QWORD *)&__src[2] = 0;
        __src[3] = 0u;
        LODWORD(__src[0]) = 22;
        *((_QWORD *)&__src[1] + 1) = -1;
        WORD1(__src[6]) = 2;
        __src[4] = 0xFFFFFFFFFFFFFFFFLL;
        __src[7] = 0xFFFFFFFFFFFFFFFFLL;
        *((_QWORD *)&__src[2] + 1) = v1234;
        LODWORD(v1240) = v1240 + 1;
        v46 = *(_QWORD *)(v37 + 32);
        if (v46 && (*(_BYTE *)(v46 + 79) & 8) != 0)
          v47 = (uint64_t *)(v46 + 64);
        else
          v47 = 0;
        GTMTLSMBuffer_processTraceFuncWithMap((char *)__src, v1239, v47);
        v812 = *(_QWORD *)(v37 + 32);
        if (v812)
        {
          v813 = 0;
          while (1)
          {
            v814 = atomic_load((unsigned int *)(v812 + 4));
            v815 = v813 + (v814 >> 6) - 1;
            if ((int)v815 > 1)
              break;
            v812 = *(_QWORD *)(v812 + 40);
            v813 = v815;
            if (!v812)
            {
              v813 = v815;
              goto LABEL_1079;
            }
          }
          v815 = 1;
        }
        else
        {
          v813 = 0;
          v815 = 0;
        }
LABEL_1079:
        v816 = v813 | (unint64_t)(v815 << 32);
        while (2)
        {
          v817 = v812 + 64;
LABEL_1081:
          if (!v812
            || (*(_BYTE *)(v817 + ((uint64_t)(HIDWORD(v816) - (int)v816) << 6) + 15) & 8) == 0
            || (v818 = v817 + ((uint64_t)(HIDWORD(v816) - (int)v816) << 6),
                v262 = *(_QWORD *)v818,
                *(_QWORD *)v818 >= v1236 + v1235))
          {
            v278 = apr_palloc(p, 0xA0uLL);
            v833 = __src[1];
            *v278 = __src[0];
            v278[1] = v833;
            v834 = __src[5];
            v836 = __src[2];
            v835 = __src[3];
            v278[4] = __src[4];
            v278[5] = v834;
            v278[2] = v836;
            v278[3] = v835;
            v837 = __src[9];
            v839 = __src[6];
            v838 = __src[7];
            v278[8] = __src[8];
            v278[9] = v837;
            v278[6] = v839;
            v278[7] = v838;
            goto LABEL_1155;
          }
          v819 = *(_DWORD *)(v818 + 8);
          if (v819 <= -16368)
          {
            if (v819 != -16372)
            {
              if (v819 == -16370)
              {
                if (v1235 <= v262)
                {
                  v278 = apr_palloc(p, 0xA0uLL);
                  v1005 = __src[1];
                  *v278 = __src[0];
                  v278[1] = v1005;
                  v1006 = __src[5];
                  v1008 = __src[2];
                  v1007 = __src[3];
                  v278[4] = __src[4];
                  v278[5] = v1006;
                  v278[2] = v1008;
                  v278[3] = v1007;
                  v1009 = __src[9];
                  v1011 = __src[6];
                  v1010 = __src[7];
                  v278[8] = __src[8];
                  v278[9] = v1009;
                  v278[6] = v1011;
                  v278[7] = v1010;
                  goto LABEL_1303;
                }
                goto LABEL_1211;
              }
LABEL_1096:
              GTMTLSMBuffer_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v818);
              v830 = atomic_load((unsigned int *)(v812 + 4));
              v831 = v816 + (v830 >> 6);
              v832 = (HIDWORD(v816) + 1);
              v816 = (v832 << 32) | v816;
              if ((_DWORD)v832 == v831 - 1)
              {
                v816 = (v832 << 32) | v832;
                v812 = *(_QWORD *)(v812 + 40);
                continue;
              }
              goto LABEL_1081;
            }
          }
          else if (v819 != -16122 && v819 != -16367)
          {
            goto LABEL_1096;
          }
          break;
        }
        if (v1235 <= v262)
        {
          v821 = apr_palloc(p, 0xA0uLL);
          v822 = __src[1];
          *(_OWORD *)v821 = __src[0];
          *((_OWORD *)v821 + 1) = v822;
          v823 = __src[5];
          v825 = __src[2];
          v824 = __src[3];
          *((_OWORD *)v821 + 4) = __src[4];
          *((_OWORD *)v821 + 5) = v823;
          *((_OWORD *)v821 + 2) = v825;
          *((_OWORD *)v821 + 3) = v824;
          v826 = __src[9];
          v828 = __src[6];
          v827 = __src[7];
          *((_OWORD *)v821 + 8) = __src[8];
          *((_OWORD *)v821 + 9) = v826;
          *((_OWORD *)v821 + 6) = v828;
          *((_OWORD *)v821 + 7) = v827;
          v829 = *find_entry((uint64_t)ht, (_BYTE *)v821 + 8, 8uLL, 0);
          if (v829)
            v829 = *(_QWORD *)(v829 + 32);
          v821[4] = v829;
          apr_hash_set(ht, v821 + 1, 8, v821);
          v821[3] = v262;
        }
        goto LABEL_1096;
      case 1:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        memset(__src, 0, 24);
        memset(&__src[5], 0, 128);
        __src[3] = 0u;
        *(_QWORD *)&__src[2] = 0;
        LODWORD(__src[0]) = 80;
        *((_QWORD *)&__src[1] + 1) = -1;
        WORD1(__src[6]) = 2;
        __src[4] = 0xFFFFFFFFFFFFFFFFLL;
        *(_QWORD *)&__src[13] = 0xFFFFFFFFLL;
        *((_QWORD *)&__src[2] + 1) = v1234;
        ++DWORD1(v1240);
        v48 = *(_QWORD *)(v37 + 32);
        if (v48 && (*(_BYTE *)(v48 + 79) & 8) != 0)
          v49 = (uint64_t *)(v48 + 64);
        else
          v49 = 0;
        GTMTLSMTexture_processTraceFuncWithMap((char *)__src, v1239, v49);
        v840 = *(_QWORD *)(v37 + 32);
        if (v840)
        {
          v841 = 0;
          while (1)
          {
            v842 = atomic_load((unsigned int *)(v840 + 4));
            v843 = v841 + (v842 >> 6) - 1;
            if ((int)v843 > 1)
              break;
            v840 = *(_QWORD *)(v840 + 40);
            v841 = v843;
            if (!v840)
            {
              v841 = v843;
              goto LABEL_1107;
            }
          }
          v843 = 1;
        }
        else
        {
          v841 = 0;
          v843 = 0;
        }
LABEL_1107:
        v844 = v841 | (unint64_t)(v843 << 32);
        while (2)
        {
          v845 = v840 + 64;
LABEL_1109:
          if (!v840
            || (*(_BYTE *)(v845 + ((uint64_t)(HIDWORD(v844) - (int)v844) << 6) + 15) & 8) == 0
            || (v846 = v845 + ((uint64_t)(HIDWORD(v844) - (int)v844) << 6),
                v262 = *(_QWORD *)v846,
                *(_QWORD *)v846 >= v1236 + v1235))
          {
            v278 = apr_palloc(p, 0xD8uLL);
            v864 = __src[1];
            *v278 = __src[0];
            v278[1] = v864;
            v865 = __src[5];
            v867 = __src[2];
            v866 = __src[3];
            v278[4] = __src[4];
            v278[5] = v865;
            v278[2] = v867;
            v278[3] = v866;
            v868 = __src[9];
            v870 = __src[6];
            v869 = __src[7];
            v278[8] = __src[8];
            v278[9] = v868;
            v278[6] = v870;
            v278[7] = v869;
            v872 = __src[11];
            v871 = __src[12];
            v873 = *(_QWORD *)&__src[13];
            v278[10] = __src[10];
            v278[11] = v872;
            *((_QWORD *)v278 + 26) = v873;
            v278[12] = v871;
            goto LABEL_1155;
          }
          v847 = *(_DWORD *)(v846 + 8);
          if (v847 <= -16233)
          {
            if (v847 != -16240)
            {
              if (v847 == -16238)
              {
                if (v1235 <= v262)
                {
                  v278 = apr_palloc(p, 0xD8uLL);
                  v1012 = __src[1];
                  *v278 = __src[0];
                  v278[1] = v1012;
                  v1013 = __src[5];
                  v1015 = __src[2];
                  v1014 = __src[3];
                  v278[4] = __src[4];
                  v278[5] = v1013;
                  v278[2] = v1015;
                  v278[3] = v1014;
                  v1016 = __src[9];
                  v1018 = __src[6];
                  v1017 = __src[7];
                  v278[8] = __src[8];
                  v278[9] = v1016;
                  v278[6] = v1018;
                  v278[7] = v1017;
                  v1020 = __src[11];
                  v1019 = __src[12];
                  v1021 = *(_QWORD *)&__src[13];
                  v278[10] = __src[10];
                  v278[11] = v1020;
                  *((_QWORD *)v278 + 26) = v1021;
                  v278[12] = v1019;
                  goto LABEL_1303;
                }
                goto LABEL_1211;
              }
LABEL_1124:
              GTMTLSMTexture_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v846);
              v861 = atomic_load((unsigned int *)(v840 + 4));
              v862 = v844 + (v861 >> 6);
              v863 = (HIDWORD(v844) + 1);
              v844 = (v863 << 32) | v844;
              if ((_DWORD)v863 == v862 - 1)
              {
                v844 = (v863 << 32) | v863;
                v840 = *(_QWORD *)(v840 + 40);
                continue;
              }
              goto LABEL_1109;
            }
          }
          else if (v847 != -16232 && v847 != -16114)
          {
            goto LABEL_1124;
          }
          break;
        }
        if (v1235 <= v262)
        {
          v849 = apr_palloc(p, 0xD8uLL);
          v850 = __src[1];
          *(_OWORD *)v849 = __src[0];
          *((_OWORD *)v849 + 1) = v850;
          v851 = __src[5];
          v853 = __src[2];
          v852 = __src[3];
          *((_OWORD *)v849 + 4) = __src[4];
          *((_OWORD *)v849 + 5) = v851;
          *((_OWORD *)v849 + 2) = v853;
          *((_OWORD *)v849 + 3) = v852;
          v854 = __src[9];
          v856 = __src[6];
          v855 = __src[7];
          *((_OWORD *)v849 + 8) = __src[8];
          *((_OWORD *)v849 + 9) = v854;
          *((_OWORD *)v849 + 6) = v856;
          *((_OWORD *)v849 + 7) = v855;
          v858 = __src[11];
          v857 = __src[12];
          v859 = *(_QWORD *)&__src[13];
          *((_OWORD *)v849 + 10) = __src[10];
          *((_OWORD *)v849 + 11) = v858;
          v849[26] = v859;
          *((_OWORD *)v849 + 12) = v857;
          v860 = *find_entry((uint64_t)ht, (_BYTE *)v849 + 8, 8uLL, 0);
          if (v860)
            v860 = *(_QWORD *)(v860 + 32);
          v849[4] = v860;
          apr_hash_set(ht, v849 + 1, 8, v849);
          v849[3] = v262;
        }
        goto LABEL_1124;
      case 2:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        ++DWORD2(v1240);
        v50 = *(_QWORD *)(v37 + 32);
        if (v50)
        {
          v51 = 0;
          while (1)
          {
            v52 = atomic_load((unsigned int *)(v50 + 4));
            v53 = v51 + (v52 >> 6) - 1;
            if ((int)v53 > 0)
              break;
            v50 = *(_QWORD *)(v50 + 40);
            v51 = v53;
            if (!v50)
            {
              v51 = v53;
              goto LABEL_257;
            }
          }
        }
        else
        {
          v51 = 0;
        }
        v53 = 0;
LABEL_257:
        v1156 = 0;
        v1169 = 0;
        v1183 = 0;
        v1124 = 0;
        v1138 = 0;
        v191 = 0;
        v192 = 0;
        v193 = v51 | (unint64_t)(v53 << 32);
        v1202 = xmmword_4AA540;
        while (2)
        {
          v194 = v50 + 64;
LABEL_259:
          if (v50
            && (v195 = HIDWORD(v193) - v193,
                (*(_BYTE *)(v194 + ((uint64_t)(HIDWORD(v193) - (int)v193) << 6) + 15) & 8) != 0)
            && (v196 = (uint64_t *)(v194 + ((uint64_t)v195 << 6)), v197 = *v196, *v196 < v1236 + v1235))
          {
            v198 = *((_DWORD *)v196 + 2);
            if (v198 != -16241)
            {
              v199 = v1239;
              if (v198 == -10163)
              {
                v203 = GTTraceFunc_argumentBytesWithMap(v196, *(unsigned __int8 *)(v194 + ((uint64_t)v195 << 6) + 13), v1239);
                *(_QWORD *)&v204 = v1202;
                *((_QWORD *)&v204 + 1) = *((_QWORD *)v203 + 1);
              }
              else
              {
                if (v198 != -10226)
                {
                  if (v198 == -16309)
                  {
                    v200 = v194 + ((uint64_t)v195 << 6);
                    v201 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v200, *(unsigned __int8 *)(v200 + 13), v1239);
                    v1169 = *((_QWORD *)v201 + 1);
                    v1183 = *v196;
                    v1156 = *((_DWORD *)v196 + 2);
                    v202 = GTTraceFunc_argumentBytesWithMap(v196, *(unsigned __int8 *)(v200 + 14), v199);
                    v192 = v202;
                    if (v202)
                    {
                      v1124 = *((_QWORD *)v202 + 2);
                      v1202 = *(_OWORD *)v202;
                    }
                    v1138 = *(_QWORD *)v201;
                    v191 = GTTraceFunc_argumentBytesWithMap(v196, v201[16], v199);
                  }
LABEL_272:
                  v14 = v1220;
                  v206 = atomic_load((unsigned int *)(v50 + 4));
                  v207 = v193 + (v206 >> 6);
                  v208 = (HIDWORD(v193) + 1);
                  v193 = (v208 << 32) | v193;
                  if ((_DWORD)v208 == v207 - 1)
                  {
                    v193 = (v208 << 32) | v208;
                    v50 = *(_QWORD *)(v50 + 40);
                    continue;
                  }
                  goto LABEL_259;
                }
                v205 = GTTraceFunc_argumentBytesWithMap(v196, *(unsigned __int8 *)(v194 + ((uint64_t)v195 << 6) + 13), v1239);
                *((_QWORD *)&v204 + 1) = *((_QWORD *)&v1202 + 1);
                *(_QWORD *)&v204 = *((_QWORD *)v205 + 1);
              }
              v1202 = v204;
              goto LABEL_272;
            }
            v14 = v1220;
            if (v1235 > v197)
              goto LABEL_1211;
            v209 = (char *)apr_palloc(p, 0x58uLL);
            v210 = v209;
            *(_DWORD *)v209 = 75;
            *((_DWORD *)v209 + 1) = v1156;
            *((_QWORD *)v209 + 1) = v1169;
            v211 = v209 + 8;
            *((_QWORD *)v209 + 2) = v1183;
            *((_QWORD *)v209 + 3) = -1;
          }
          else
          {
            v209 = (char *)apr_palloc(p, 0x58uLL);
            v210 = v209;
            *(_DWORD *)v209 = 75;
            *((_DWORD *)v209 + 1) = v1156;
            *((_QWORD *)v209 + 1) = v1169;
            v211 = v209 + 8;
            v197 = -1;
            *((_QWORD *)v209 + 2) = v1183;
            *((_QWORD *)v209 + 3) = -1;
          }
          break;
        }
        *((_QWORD *)v209 + 4) = 0;
        *((_QWORD *)v209 + 5) = v1138;
        *((_QWORD *)v209 + 6) = v191;
        *((_QWORD *)v209 + 7) = v192;
        *((_OWORD *)v209 + 4) = v1202;
        *((_QWORD *)v209 + 10) = v1124;
        goto LABEL_826;
      case 3:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        memset(&__src[7], 0, 304);
        memset(&__src[2], 0, 64);
        memset(__src, 0, 24);
        LODWORD(__src[0]) = 71;
        *((_QWORD *)&__src[1] + 1) = -1;
        __src[6] = 0xFFFFFFFFFFFFFFFFLL;
        ++HIDWORD(v1240);
        v54 = *(_QWORD *)(v37 + 32);
        if (v54)
        {
          v55 = 0;
          while (1)
          {
            v56 = atomic_load((unsigned int *)(v54 + 4));
            v57 = v55 + (v56 >> 6) - 1;
            if ((int)v57 > 0)
              break;
            v54 = *(_QWORD *)(v54 + 40);
            v55 = v57;
            if (!v54)
            {
              v55 = v57;
              goto LABEL_278;
            }
          }
        }
        else
        {
          v55 = 0;
        }
        v57 = 0;
LABEL_278:
        v212 = v55 | (unint64_t)(v57 << 32);
        while (2)
        {
          v213 = v54 + 64;
LABEL_280:
          if (!v54
            || (*(_BYTE *)(v213 + ((uint64_t)(HIDWORD(v212) - (int)v212) << 6) + 15) & 8) == 0
            || (v214 = v213 + ((uint64_t)(HIDWORD(v212) - (int)v212) << 6),
                v215 = *(_QWORD *)v214,
                *(_QWORD *)v214 >= v1236 + v1235))
          {
            v219 = apr_palloc(p, 0x1A0uLL);
            memcpy(v219, __src, 0x1A0uLL);
            goto LABEL_936;
          }
          if (*(_DWORD *)(v214 + 8) != -16242)
          {
            GTMTLSMRenderPipelineState_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v214);
            v216 = atomic_load((unsigned int *)(v54 + 4));
            v217 = v212 + (v216 >> 6);
            v218 = (HIDWORD(v212) + 1);
            v212 = (v218 << 32) | v212;
            if ((_DWORD)v218 == v217 - 1)
            {
              v212 = (v218 << 32) | v218;
              v54 = *(_QWORD *)(v54 + 40);
              continue;
            }
            goto LABEL_280;
          }
          break;
        }
        v14 = v1220;
        if (v1235 > v215)
          goto LABEL_1211;
        v219 = apr_palloc(p, 0x1A0uLL);
        memcpy(v219, __src, 0x1A0uLL);
        goto LABEL_1226;
      case 4:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        memset(__src, 0, 24);
        memset(&__src[7], 0, 88);
        memset(&__src[2], 0, 64);
        LODWORD(__src[0]) = 29;
        *((_QWORD *)&__src[1] + 1) = -1;
        __src[6] = 0xFFFFFFFFFFFFFFFFLL;
        LODWORD(v1241) = v1241 + 1;
        v58 = *(_QWORD *)(v37 + 32);
        if (v58)
        {
          v59 = 0;
          while (1)
          {
            v60 = atomic_load((unsigned int *)(v58 + 4));
            v61 = v59 + (v60 >> 6) - 1;
            if ((int)v61 > 0)
              break;
            v58 = *(_QWORD *)(v58 + 40);
            v59 = v61;
            if (!v58)
            {
              v59 = v61;
              goto LABEL_289;
            }
          }
        }
        else
        {
          v59 = 0;
        }
        v61 = 0;
LABEL_289:
        v220 = v59 | (unint64_t)(v61 << 32);
        while (2)
        {
          v221 = v58 + 64;
LABEL_291:
          if (!v58
            || (*(_BYTE *)(v221 + ((uint64_t)(HIDWORD(v220) - (int)v220) << 6) + 15) & 8) == 0
            || (v222 = v221 + ((uint64_t)(HIDWORD(v220) - (int)v220) << 6),
                v215 = *(_QWORD *)v222,
                *(_QWORD *)v222 >= v1236 + v1235))
          {
            v219 = apr_palloc(p, 0xC8uLL);
            *v219 = __src[0];
            v226 = __src[4];
            v228 = __src[1];
            v227 = __src[2];
            v219[3] = __src[3];
            v219[4] = v226;
            v219[1] = v228;
            v219[2] = v227;
            v229 = __src[8];
            v231 = __src[5];
            v230 = __src[6];
            v219[7] = __src[7];
            v219[8] = v229;
            v219[5] = v231;
            v219[6] = v230;
            v232 = *(_QWORD *)&__src[12];
            v233 = __src[11];
            v234 = __src[9];
            v219[10] = __src[10];
            v219[11] = v233;
            v219[9] = v234;
            *((_QWORD *)v219 + 24) = v232;
            goto LABEL_936;
          }
          if (*(_DWORD *)(v222 + 8) != -16321)
          {
            GTMTLSMComputePipelineState_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v222);
            v223 = atomic_load((unsigned int *)(v58 + 4));
            v224 = v220 + (v223 >> 6);
            v225 = (HIDWORD(v220) + 1);
            v220 = (v225 << 32) | v220;
            if ((_DWORD)v225 == v224 - 1)
            {
              v220 = (v225 << 32) | v225;
              v58 = *(_QWORD *)(v58 + 40);
              continue;
            }
            goto LABEL_291;
          }
          break;
        }
        v14 = v1220;
        if (v1235 > v215)
          goto LABEL_1211;
        v219 = apr_palloc(p, 0xC8uLL);
        *v219 = __src[0];
        v945 = __src[4];
        v947 = __src[1];
        v946 = __src[2];
        v219[3] = __src[3];
        v219[4] = v945;
        v219[1] = v947;
        v219[2] = v946;
        v948 = __src[8];
        v950 = __src[5];
        v949 = __src[6];
        v219[7] = __src[7];
        v219[8] = v948;
        v219[5] = v950;
        v219[6] = v949;
        v951 = *(_QWORD *)&__src[12];
        v952 = __src[11];
        v953 = __src[9];
        v219[10] = __src[10];
        v219[11] = v952;
        v219[9] = v953;
        *((_QWORD *)v219 + 24) = v951;
        goto LABEL_1226;
      case 5:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        BYTE2(__src[0]) = 0;
        LOWORD(__src[0]) = 0;
        ++DWORD1(v1241);
        v62 = *(_QWORD *)(v37 + 32);
        if (v62)
        {
          v63 = 0;
          while (1)
          {
            v64 = atomic_load((unsigned int *)(v62 + 4));
            v65 = v63 + (v64 >> 6) - 1;
            if ((int)v65 > 0)
              break;
            v62 = *(_QWORD *)(v62 + 40);
            v63 = v65;
            if (!v62)
            {
              v63 = v65;
              goto LABEL_300;
            }
          }
        }
        else
        {
          v63 = 0;
        }
        v65 = 0;
LABEL_300:
        v235 = 0;
        v1094 = 0;
        v1098 = 0;
        v1103 = 0;
        v1139 = 0;
        v1083 = 0;
        v1086 = 0;
        v1157 = 0;
        v1203 = 0;
        v1090 = 0;
        v1077 = 0;
        v1110 = 0;
        v1170 = 0;
        v1184 = 0;
        v1117 = 0;
        v236 = v63 | (unint64_t)(v65 << 32);
        v1125 = 2;
        v1080 = -1;
        v1074 = -1;
        while (2)
        {
          v237 = v62 + 64;
LABEL_302:
          if (v62)
          {
            v238 = HIDWORD(v236) - v236;
            if ((*(_BYTE *)(v237 + ((uint64_t)(HIDWORD(v236) - (int)v236) << 6) + 15) & 8) != 0)
            {
              v239 = v238;
              v240 = v237 + ((uint64_t)v238 << 6);
              v241 = *(_QWORD *)v240;
              if (*(_QWORD *)v240 < v1236 + v1235)
              {
                v242 = *(_DWORD *)(v240 + 8);
                if (v242 == -15925 || v242 == -15919)
                {
                  if (v1235 <= v241)
                  {
                    v244 = apr_palloc(p, 0x90uLL);
                    *(_DWORD *)v244 = 57;
                    *((_DWORD *)v244 + 1) = v235;
                    v244[1] = v1094;
                    v244[2] = v1103;
                    v244[3] = v1080;
                    v244[4] = 0;
                    v244[5] = v1098;
                    v244[6] = 0;
                    v244[7] = v1139;
                    v244[8] = v1074;
                    v244[9] = v1083;
                    *((_DWORD *)v244 + 20) = 0;
                    *((_DWORD *)v244 + 21) = v1157;
                    *((_DWORD *)v244 + 22) = v1203;
                    *((_DWORD *)v244 + 23) = 0;
                    *((_WORD *)v244 + 48) = v1090;
                    *((_WORD *)v244 + 49) = v1125;
                    *((_BYTE *)v244 + 100) = v1077;
                    *((_BYTE *)v244 + 103) = BYTE2(__src[0]);
                    *(_WORD *)((char *)v244 + 101) = __src[0];
                    v244[13] = v1110;
                    v244[14] = v1086;
                    v244[15] = v1184;
                    v244[16] = v1170;
                    v244[17] = v1117;
                    v245 = *find_entry((uint64_t)ht, (_BYTE *)v244 + 8, 8uLL, 0);
                    if (v245)
                      v245 = *(_QWORD *)(v245 + 32);
                    v244[4] = v245;
                    apr_hash_set(ht, v244 + 1, 8, v244);
                    v244[3] = v241;
                    v242 = *(_DWORD *)(v240 + 8);
                    v237 = v62 + 64;
                  }
                }
                else if (v242 == -15923)
                {
                  if (v1235 <= v241)
                  {
                    v992 = apr_palloc(p, 0x90uLL);
                    *(_DWORD *)v992 = 57;
                    *((_DWORD *)v992 + 1) = v235;
                    v992[1] = v1094;
                    v992[2] = v1103;
                    v992[3] = v1080;
                    v992[4] = 0;
                    v992[5] = v1098;
                    v992[6] = 0;
                    v992[7] = v1139;
                    v992[8] = v1074;
                    v992[9] = v1083;
                    *((_DWORD *)v992 + 20) = 0;
                    *((_DWORD *)v992 + 21) = v1157;
                    *((_DWORD *)v992 + 22) = v1203;
                    *((_DWORD *)v992 + 23) = 0;
                    *((_WORD *)v992 + 48) = v1090;
                    *((_WORD *)v992 + 49) = v1125;
                    *((_BYTE *)v992 + 100) = v1077;
                    *((_BYTE *)v992 + 103) = BYTE2(__src[0]);
                    *(_WORD *)((char *)v992 + 101) = __src[0];
                    v992[13] = v1110;
                    v992[14] = v1086;
                    v992[15] = v1184;
                    v992[16] = v1170;
                    v992[17] = v1117;
                    v993 = *find_entry((uint64_t)ht, (_BYTE *)v992 + 8, 8uLL, 0);
                    if (v993)
                      v993 = *(_QWORD *)(v993 + 32);
                    v992[4] = v993;
                    apr_hash_set(ht, v992 + 1, 8, v992);
                    v992[3] = v241;
                  }
                  goto LABEL_1211;
                }
                v246 = v1239;
                if (v242 > -10219)
                {
                  if (v242 <= -10210)
                  {
                    v247 = HIDWORD(v236);
                    if (v242 == -10218)
                    {
                      v1184 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v240, *(unsigned __int8 *)(v237 + (v239 << 6) + 13), v1239)+ 1);
                    }
                    else if (v242 == -10215)
                    {
                      v1157 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v240, *(unsigned __int8 *)(v237 + (v239 << 6) + 13), v1239)+ 2);
                    }
                  }
                  else
                  {
                    v247 = HIDWORD(v236);
                    switch(v242)
                    {
                      case -10209:
                        v1074 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v240, *(unsigned __int8 *)(v237 + (v239 << 6) + 13), v1239)+ 1);
                        break;
                      case -10202:
                        v1139 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v240, *(unsigned __int8 *)(v237 + (v239 << 6) + 13), v1239)+ 1);
                        break;
                      case -10166:
                        v1170 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v240, *(unsigned __int8 *)(v237 + (v239 << 6) + 13), v1239)+ 1);
                        break;
                    }
                  }
                }
                else
                {
                  v247 = HIDWORD(v236);
                  switch(v242)
                  {
                    case -15925:
                      v248 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v240, *(unsigned __int8 *)(v237 + (v239 << 6) + 13), v1239);
                      v1083 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v240, v248[8], v246);
                      break;
                    case -15924:
                      v1203 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v240, *(unsigned __int8 *)(v237 + (v239 << 6) + 13), v1239)+ 2);
                      break;
                    case -15923:
                      v1080 = *(_QWORD *)v240;
                      break;
                    case -15922:
                    case -15921:
                      break;
                    case -15920:
                      v252 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v240, *(unsigned __int8 *)(v237 + (v239 << 6) + 13), v1239)+ 2);
                      v253 = v1125;
                      if (v252 != 1)
                        v253 = v252;
                      v1125 = v253;
                      break;
                    case -15919:
                      v1077 = 1;
                      break;
                    default:
                      if (v242 == -15972 || v242 == -15969)
                      {
                        v249 = v237 + (v239 << 6);
                        v250 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v240, *(unsigned __int8 *)(v249 + 13), v1239);
                        v235 = *(_DWORD *)HIDWORD(v236);
                        v1094 = *((_QWORD *)v250 + 1);
                        v1098 = *(_QWORD *)v250;
                        v1103 = *(_QWORD *)v240;
                        v1110 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v240, v250[32], v246);
                        v1117 = *((_DWORD *)v250 + 4);
                        v1090 = *((_WORD *)v250 + 12);
                        v251 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v240, *(unsigned __int8 *)(v249 + 14), v246);
                        if (v251)
                        {
                          v1139 = *(_QWORD *)v251;
                          v1157 = *((_DWORD *)v251 + 2);
                          v1203 = *((_DWORD *)v251 + 4);
                          v1086 = v251;
                          v1170 = *((_QWORD *)v251 + 6);
                          v1184 = *((_QWORD *)v251 + 3);
                        }
                        else
                        {
                          v1086 = 0;
                        }
                        v237 = v62 + 64;
                      }
                      v247 = HIDWORD(v236);
                      break;
                  }
                }
                v254 = atomic_load((unsigned int *)(v62 + 4));
                v255 = v236 + (v254 >> 6);
                v256 = (v247 + 1);
                v236 = (v256 << 32) | v236;
                if ((_DWORD)v256 == v255 - 1)
                {
                  v236 = (v256 << 32) | v256;
                  v62 = *(_QWORD *)(v62 + 40);
                  continue;
                }
                goto LABEL_302;
              }
            }
          }
          break;
        }
        v257 = apr_palloc(p, 0x90uLL);
        *(_DWORD *)v257 = 57;
        *((_DWORD *)v257 + 1) = v235;
        v257[1] = v1094;
        v257[2] = v1103;
        v257[3] = v1080;
        v257[4] = 0;
        v257[5] = v1098;
        v257[6] = 0;
        v257[7] = v1139;
        v257[8] = v1074;
        v257[9] = v1083;
        *((_DWORD *)v257 + 20) = 0;
        *((_DWORD *)v257 + 21) = v1157;
        *((_DWORD *)v257 + 22) = v1203;
        *((_DWORD *)v257 + 23) = 0;
        *((_WORD *)v257 + 48) = v1090;
        *((_WORD *)v257 + 49) = v1125;
        *((_BYTE *)v257 + 100) = v1077;
        *((_BYTE *)v257 + 103) = BYTE2(__src[0]);
        *(_WORD *)((char *)v257 + 101) = __src[0];
        v257[13] = v1110;
        v257[14] = v1086;
        v257[15] = v1184;
        v257[16] = v1170;
        v257[17] = v1117;
        v258 = *find_entry((uint64_t)ht, (_BYTE *)v257 + 8, 8uLL, 0);
        if (v258)
          v258 = *(_QWORD *)(v258 + 32);
        v257[4] = v258;
        apr_hash_set(ht, v257 + 1, 8, v257);
        v257[3] = -1;
        goto LABEL_1211;
      case 6:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        ++DWORD2(v1241);
        memset(__src, 0, 24);
        memset(&__src[2], 0, 144);
        LODWORD(__src[0]) = 83;
        *((_QWORD *)&__src[1] + 1) = -1;
        v66 = *(_QWORD *)(v37 + 32);
        if (v66)
        {
          v67 = 0;
          while (1)
          {
            v68 = atomic_load((unsigned int *)(v66 + 4));
            v69 = v67 + (v68 >> 6) - 1;
            if ((int)v69 > 0)
              break;
            v66 = *(_QWORD *)(v66 + 40);
            v67 = v69;
            if (!v66)
            {
              v67 = v69;
              goto LABEL_349;
            }
          }
        }
        else
        {
          v67 = 0;
        }
        v69 = 0;
LABEL_349:
        v259 = v67 | (unint64_t)(v69 << 32);
        while (2)
        {
          v260 = v66 + 64;
LABEL_351:
          if (v66)
          {
            if ((*(_BYTE *)(v260 + ((uint64_t)(HIDWORD(v259) - (int)v259) << 6) + 15) & 8) != 0)
            {
              v261 = v260 + ((uint64_t)(HIDWORD(v259) - (int)v259) << 6);
              v262 = *(_QWORD *)v261;
              if (*(_QWORD *)v261 < v1236 + v1235)
              {
                v263 = *(_DWORD *)(v261 + 8);
                if (v263 > -15600)
                {
                  if (v263 != -15596 && v263 != -15599)
                    goto LABEL_366;
                  goto LABEL_361;
                }
                if (v263 == -15607)
                {
LABEL_361:
                  if (v1235 <= v262)
                  {
                    v265 = apr_palloc(p, 0xB0uLL);
                    v267 = __src[1];
                    v266 = __src[2];
                    *(_OWORD *)v265 = __src[0];
                    *((_OWORD *)v265 + 1) = v267;
                    *((_OWORD *)v265 + 2) = v266;
                    v268 = __src[6];
                    v270 = __src[3];
                    v269 = __src[4];
                    *((_OWORD *)v265 + 5) = __src[5];
                    *((_OWORD *)v265 + 6) = v268;
                    *((_OWORD *)v265 + 3) = v270;
                    *((_OWORD *)v265 + 4) = v269;
                    v271 = __src[10];
                    v273 = __src[7];
                    v272 = __src[8];
                    *((_OWORD *)v265 + 9) = __src[9];
                    *((_OWORD *)v265 + 10) = v271;
                    *((_OWORD *)v265 + 7) = v273;
                    *((_OWORD *)v265 + 8) = v272;
                    v274 = *find_entry((uint64_t)ht, (_BYTE *)v265 + 8, 8uLL, 0);
                    if (v274)
                      v274 = *(_QWORD *)(v274 + 32);
                    v265[4] = v274;
                    apr_hash_set(ht, v265 + 1, 8, v265);
                    v265[3] = v262;
                  }
LABEL_366:
                  GTMTLSMVisibleFunctionTable_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v261);
                  v275 = atomic_load((unsigned int *)(v66 + 4));
                  v276 = v259 + (v275 >> 6);
                  v277 = (HIDWORD(v259) + 1);
                  v259 = (v277 << 32) | v259;
                  if ((_DWORD)v277 == v276 - 1)
                  {
                    v259 = (v277 << 32) | v277;
                    v66 = *(_QWORD *)(v66 + 40);
                    continue;
                  }
                  goto LABEL_351;
                }
                if (v263 != -15605)
                  goto LABEL_366;
                v278 = apr_palloc(p, 0xB0uLL);
                v998 = __src[1];
                v997 = __src[2];
                *v278 = __src[0];
                v278[1] = v998;
                v278[2] = v997;
                v999 = __src[6];
                v1001 = __src[3];
                v1000 = __src[4];
                v278[5] = __src[5];
                v278[6] = v999;
                v278[3] = v1001;
                v278[4] = v1000;
                v1002 = __src[10];
                v1004 = __src[7];
                v1003 = __src[8];
                v278[9] = __src[9];
                v278[10] = v1002;
                v278[7] = v1004;
                v278[8] = v1003;
                goto LABEL_1303;
              }
            }
          }
          break;
        }
        v278 = apr_palloc(p, 0xB0uLL);
        v280 = __src[1];
        v279 = __src[2];
        *v278 = __src[0];
        v278[1] = v280;
        v278[2] = v279;
        v281 = __src[6];
        v283 = __src[3];
        v282 = __src[4];
        v278[5] = __src[5];
        v278[6] = v281;
        v278[3] = v283;
        v278[4] = v282;
        v284 = __src[10];
        v286 = __src[7];
        v285 = __src[8];
        v278[9] = __src[9];
        v278[10] = v284;
        v278[7] = v286;
        v278[8] = v285;
        goto LABEL_1155;
      case 7:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        memset(__src, 0, 24);
        memset(&__src[5], 0, 88);
        memset(&__src[2], 0, 32);
        LODWORD(__src[0]) = 60;
        *((_QWORD *)&__src[1] + 1) = -1;
        WORD1(__src[6]) = 2;
        __src[4] = 0xFFFFFFFFFFFFFFFFLL;
        ++HIDWORD(v1241);
        v70 = *(_QWORD *)(v37 + 32);
        if (v70 && (*(_BYTE *)(v70 + 79) & 8) != 0)
          v71 = (uint64_t *)(v70 + 64);
        else
          v71 = 0;
        GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)__src, v1239, v71);
        v874 = *(_QWORD *)(v37 + 32);
        if (v874)
        {
          v875 = 0;
          while (1)
          {
            v876 = atomic_load((unsigned int *)(v874 + 4));
            v877 = v875 + (v876 >> 6) - 1;
            if ((int)v877 > 1)
              break;
            v874 = *(_QWORD *)(v874 + 40);
            v875 = v877;
            if (!v874)
            {
              v875 = v877;
              goto LABEL_1135;
            }
          }
          v877 = 1;
        }
        else
        {
          v875 = 0;
          v877 = 0;
        }
LABEL_1135:
        v878 = v875 | (unint64_t)(v877 << 32);
        while (2)
        {
          v879 = v874 + 64;
LABEL_1137:
          if (v874)
          {
            if ((*(_BYTE *)(v879 + ((uint64_t)(HIDWORD(v878) - (int)v878) << 6) + 15) & 8) != 0)
            {
              v880 = v879 + ((uint64_t)(HIDWORD(v878) - (int)v878) << 6);
              v262 = *(_QWORD *)v880;
              if (*(_QWORD *)v880 < v1236 + v1235)
              {
                v881 = *(_DWORD *)(v880 + 8);
                if (v881 > -15561)
                {
                  if (v881 != -15557 && v881 != -15560)
                    goto LABEL_1152;
                  goto LABEL_1147;
                }
                if (v881 == -15570)
                {
LABEL_1147:
                  if (v1235 <= v262)
                  {
                    v883 = apr_palloc(p, 0xA8uLL);
                    v885 = __src[1];
                    v884 = __src[2];
                    *(_OWORD *)v883 = __src[0];
                    *((_OWORD *)v883 + 1) = v885;
                    *((_OWORD *)v883 + 2) = v884;
                    v886 = __src[6];
                    v888 = __src[3];
                    v887 = __src[4];
                    *((_OWORD *)v883 + 5) = __src[5];
                    *((_OWORD *)v883 + 6) = v886;
                    *((_OWORD *)v883 + 3) = v888;
                    *((_OWORD *)v883 + 4) = v887;
                    v890 = __src[8];
                    v889 = __src[9];
                    v891 = __src[7];
                    v883[20] = *(_QWORD *)&__src[10];
                    *((_OWORD *)v883 + 8) = v890;
                    *((_OWORD *)v883 + 9) = v889;
                    *((_OWORD *)v883 + 7) = v891;
                    v892 = *find_entry((uint64_t)ht, (_BYTE *)v883 + 8, 8uLL, 0);
                    if (v892)
                      v892 = *(_QWORD *)(v892 + 32);
                    v883[4] = v892;
                    apr_hash_set(ht, v883 + 1, 8, v883);
                    v883[3] = v262;
                  }
LABEL_1152:
                  GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v880);
                  v893 = atomic_load((unsigned int *)(v874 + 4));
                  v894 = v878 + (v893 >> 6);
                  v895 = (HIDWORD(v878) + 1);
                  v878 = (v895 << 32) | v878;
                  if ((_DWORD)v895 == v894 - 1)
                  {
                    v878 = (v895 << 32) | v895;
                    v874 = *(_QWORD *)(v874 + 40);
                    continue;
                  }
                  goto LABEL_1137;
                }
                if (v881 != -15568)
                  goto LABEL_1152;
                if (v1235 > v262)
                  goto LABEL_1211;
                v278 = apr_palloc(p, 0xA8uLL);
                v1023 = __src[1];
                v1022 = __src[2];
                *v278 = __src[0];
                v278[1] = v1023;
                v278[2] = v1022;
                v1024 = __src[6];
                v1026 = __src[3];
                v1025 = __src[4];
                v278[5] = __src[5];
                v278[6] = v1024;
                v278[3] = v1026;
                v278[4] = v1025;
                v1028 = __src[8];
                v1027 = __src[9];
                v1029 = __src[7];
                *((_QWORD *)v278 + 20) = *(_QWORD *)&__src[10];
                v278[8] = v1028;
                v278[9] = v1027;
                v278[7] = v1029;
LABEL_1303:
                v1044 = *find_entry((uint64_t)ht, (_BYTE *)v278 + 8, 8uLL, 0);
                if (v1044)
                  v1044 = *(_QWORD *)(v1044 + 32);
                *((_QWORD *)v278 + 4) = v1044;
                apr_hash_set(ht, (char *)v278 + 8, 8, v278);
LABEL_1158:
                *((_QWORD *)v278 + 3) = v262;
                goto LABEL_1211;
              }
            }
          }
          break;
        }
        v278 = apr_palloc(p, 0xA8uLL);
        v897 = __src[1];
        v896 = __src[2];
        *v278 = __src[0];
        v278[1] = v897;
        v278[2] = v896;
        v898 = __src[6];
        v900 = __src[3];
        v899 = __src[4];
        v278[5] = __src[5];
        v278[6] = v898;
        v278[3] = v900;
        v278[4] = v899;
        v902 = __src[8];
        v901 = __src[9];
        v903 = __src[7];
        *((_QWORD *)v278 + 20) = *(_QWORD *)&__src[10];
        v278[8] = v902;
        v278[9] = v901;
        v278[7] = v903;
        goto LABEL_1155;
      case 8:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        memset(__src, 0, 24);
        memset(&__src[5], 0, 128);
        memset(&__src[2], 0, 32);
        LODWORD(__src[0]) = 16;
        *((_QWORD *)&__src[1] + 1) = -1;
        WORD1(__src[6]) = 2;
        __src[4] = 0xFFFFFFFFFFFFFFFFLL;
        LODWORD(v1242) = v1242 + 1;
        v72 = *(_QWORD *)(v37 + 32);
        if (v72 && (*(_BYTE *)(v72 + 79) & 8) != 0)
          v73 = (uint64_t *)(v72 + 64);
        else
          v73 = 0;
        GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)__src, v1239, v73);
        v905 = *(_QWORD **)(a3 + 24);
        v906 = *(_QWORD *)(v37 + 32);
        if (v906)
        {
          v907 = 0;
          while (1)
          {
            v908 = atomic_load((unsigned int *)(v906 + 4));
            v909 = v907 + (v908 >> 6) - 1;
            if ((int)v909 > 1)
              break;
            v906 = *(_QWORD *)(v906 + 40);
            v907 = v909;
            if (!v906)
            {
              v907 = v909;
              goto LABEL_1167;
            }
          }
          v909 = 1;
        }
        else
        {
          v907 = 0;
          v909 = 0;
        }
LABEL_1167:
        v910 = &v905[8 * (uint64_t)*(int *)(a3 + 12)];
        v911 = v907 | (unint64_t)(v909 << 32);
        do
        {
LABEL_1168:
          if (v906
            && (v912 = v906 + ((uint64_t)(0xFFFFFFFF00000001 * v911) >> 32 << 6), (*(_BYTE *)(v912 + 79) & 8) != 0))
          {
            v913 = v912 + 64;
          }
          else
          {
            v913 = 0;
          }
          if (v905 >= v910)
          {
            if (!v913)
              goto LABEL_1207;
            v914 = HIDWORD(v911);
            if (v906 && (v915 = v906 + ((uint64_t)(HIDWORD(v911) - (int)v911) << 6), (*(_BYTE *)(v915 + 79) & 8) != 0))
              v913 = v915 + 64;
            else
              v913 = 0;
            v918 = atomic_load((unsigned int *)(v906 + 4));
            v917 = v911 + (v918 >> 6);
          }
          else
          {
            if (!v913)
              goto LABEL_1181;
            if (*v905 == *(_QWORD *)v913)
            {
              v905 += 8;
            }
            else if (*v905 < *(_QWORD *)v913)
            {
LABEL_1181:
              v913 = (uint64_t)v905;
              v905 += 8;
              goto LABEL_1188;
            }
            v916 = atomic_load((unsigned int *)(v906 + 4));
            v917 = v911 + (v916 >> 6);
            v914 = HIDWORD(v911);
          }
          v919 = (v914 + 1);
          if ((_DWORD)v919 == v917 - 1)
          {
            v911 = (v919 << 32) | v919;
            v906 = *(_QWORD *)(v906 + 40);
          }
          else
          {
            v911 = (v919 << 32) | v911;
          }
LABEL_1188:
          if (*(_QWORD *)v913 >= v1236 + v1235)
          {
LABEL_1207:
            v530 = (char *)apr_palloc(p, 0xD0uLL);
            *(_OWORD *)v530 = __src[0];
            v935 = __src[4];
            v937 = __src[1];
            v936 = __src[2];
            *((_OWORD *)v530 + 3) = __src[3];
            *((_OWORD *)v530 + 4) = v935;
            *((_OWORD *)v530 + 1) = v937;
            *((_OWORD *)v530 + 2) = v936;
            v938 = __src[8];
            v940 = __src[5];
            v939 = __src[6];
            *((_OWORD *)v530 + 7) = __src[7];
            *((_OWORD *)v530 + 8) = v938;
            *((_OWORD *)v530 + 5) = v940;
            *((_OWORD *)v530 + 6) = v939;
            v942 = __src[11];
            v941 = __src[12];
            v943 = __src[10];
            *((_OWORD *)v530 + 9) = __src[9];
            *((_OWORD *)v530 + 10) = v943;
            *((_OWORD *)v530 + 11) = v942;
            *((_OWORD *)v530 + 12) = v941;
            v944 = *find_entry((uint64_t)ht, v530 + 8, 8uLL, 0);
            if (v944)
              v944 = *(_QWORD *)(v944 + 32);
            *((_QWORD *)v530 + 4) = v944;
            apr_hash_set(ht, v530 + 8, 8, v530);
            v544 = -1;
            goto LABEL_1210;
          }
          v920 = *(_DWORD *)(v913 + 8);
          if (v920 == -10154 || v920 == -10158)
            v921 = (char *)*((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v913, *(unsigned __int8 *)(v913 + 13), v1239)+ 1);
          else
            v921 = GTTraceFunc_targetContext(v913, v1239);
        }
        while (v921 != *((char **)&__src[0] + 1));
        v922 = *(_DWORD *)(v913 + 8);
        if (v922 > -15553)
        {
          if (v922 == -15552 || v922 == -10154 || v922 == -10158)
          {
LABEL_1202:
            v923 = *(_QWORD *)v913;
            if (v1235 <= *(_QWORD *)v913)
            {
              v924 = apr_palloc(p, 0xD0uLL);
              *(_OWORD *)v924 = __src[0];
              v925 = __src[4];
              v927 = __src[1];
              v926 = __src[2];
              *((_OWORD *)v924 + 3) = __src[3];
              *((_OWORD *)v924 + 4) = v925;
              *((_OWORD *)v924 + 1) = v927;
              *((_OWORD *)v924 + 2) = v926;
              v928 = __src[8];
              v930 = __src[5];
              v929 = __src[6];
              *((_OWORD *)v924 + 7) = __src[7];
              *((_OWORD *)v924 + 8) = v928;
              *((_OWORD *)v924 + 5) = v930;
              *((_OWORD *)v924 + 6) = v929;
              v932 = __src[11];
              v931 = __src[12];
              v933 = __src[10];
              *((_OWORD *)v924 + 9) = __src[9];
              *((_OWORD *)v924 + 10) = v933;
              *((_OWORD *)v924 + 11) = v932;
              *((_OWORD *)v924 + 12) = v931;
              v934 = *find_entry((uint64_t)ht, (_BYTE *)v924 + 8, 8uLL, 0);
              if (v934)
                v934 = *(_QWORD *)(v934 + 32);
              v924[4] = v934;
              apr_hash_set(ht, v924 + 1, 8, v924);
              v924[3] = v923;
            }
          }
LABEL_1206:
          GTMTLSMAccelerationStructure_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v913);
          goto LABEL_1168;
        }
        if ((v922 + 15651) < 2 || v922 == -15661)
          goto LABEL_1202;
        if (v922 != -15659)
          goto LABEL_1206;
        v544 = *(_QWORD *)v913;
        if (v1235 <= *(_QWORD *)v913)
        {
          v530 = (char *)apr_palloc(p, 0xD0uLL);
          *(_OWORD *)v530 = __src[0];
          v1034 = __src[4];
          v1036 = __src[1];
          v1035 = __src[2];
          *((_OWORD *)v530 + 3) = __src[3];
          *((_OWORD *)v530 + 4) = v1034;
          *((_OWORD *)v530 + 1) = v1036;
          *((_OWORD *)v530 + 2) = v1035;
          v1037 = __src[8];
          v1039 = __src[5];
          v1038 = __src[6];
          *((_OWORD *)v530 + 7) = __src[7];
          *((_OWORD *)v530 + 8) = v1037;
          *((_OWORD *)v530 + 5) = v1039;
          *((_OWORD *)v530 + 6) = v1038;
          v1041 = __src[11];
          v1040 = __src[12];
          v1042 = __src[10];
          *((_OWORD *)v530 + 9) = __src[9];
          *((_OWORD *)v530 + 10) = v1042;
          *((_OWORD *)v530 + 11) = v1041;
          *((_OWORD *)v530 + 12) = v1040;
          v777 = ht;
          v543 = v530 + 8;
LABEL_1009:
          v778 = *find_entry((uint64_t)v777, v543, 8uLL, 0);
          if (v778)
            v778 = *(_QWORD *)(v778 + 32);
          *((_QWORD *)v530 + 4) = v778;
          apr_hash_set(ht, v543, 8, v530);
LABEL_1210:
          *((_QWORD *)v530 + 3) = v544;
        }
LABEL_1211:
        v16 = v1219;
LABEL_1212:
        if (++v14 != (uint64_t *)v16)
          continue;
LABEL_1306:
        v1045 = (char *)apr_palloc(v1218, 0x120uLL);
        v21 = (uint64_t *)v1045;
        if (v1045)
        {
          *(_OWORD *)(v1045 + 8) = 0u;
          *((_QWORD *)v1045 + 35) = 0;
          *(_OWORD *)(v1045 + 248) = 0u;
          *(_OWORD *)(v1045 + 264) = 0u;
          *(_OWORD *)(v1045 + 216) = 0u;
          *(_OWORD *)(v1045 + 232) = 0u;
          *(_OWORD *)(v1045 + 184) = 0u;
          *(_OWORD *)(v1045 + 200) = 0u;
          *(_OWORD *)(v1045 + 152) = 0u;
          *(_OWORD *)(v1045 + 168) = 0u;
          *(_OWORD *)(v1045 + 120) = 0u;
          *(_OWORD *)(v1045 + 136) = 0u;
          *(_OWORD *)(v1045 + 88) = 0u;
          *(_OWORD *)(v1045 + 104) = 0u;
          *(_OWORD *)(v1045 + 56) = 0u;
          *(_OWORD *)(v1045 + 72) = 0u;
          *(_OWORD *)(v1045 + 24) = 0u;
          *(_OWORD *)(v1045 + 40) = 0u;
        }
        v1046 = 0;
        *(_QWORD *)v1045 = ht;
        do
        {
          v21[v1046 + 1] = (uint64_t)apr_array_make(v1218, *((_DWORD *)&v1240 + v1046), 8);
          ++v1046;
        }
        while (v1046 != 35);
        v1047 = *v21;
        v1048 = (apr_hash_index_t *)(*v21 + 16);
        *(_QWORD *)(v1047 + 24) = 0;
        *(_QWORD *)(v1047 + 32) = 0;
        *(_QWORD *)(v1047 + 16) = v1047;
        *(_DWORD *)(v1047 + 40) = 0;
        v1049 = apr_hash_next(v1048);
        if (v1049)
        {
          v1050 = v1049;
          do
          {
            v1051 = *(_DWORD **)(*((_QWORD *)v1050 + 1) + 32);
            v1052 = *v1051 - 2;
            if (v1052 <= 0x51)
            {
              v1053 = byte_4AA3D8[v1052];
              if (v1053 != -1)
                *(_QWORD *)apr_array_push((apr_array_header_t *)v21[v1053 + 1]) = v1051;
            }
            v1050 = apr_hash_next(v1050);
          }
          while (v1050);
        }
        v1054 = v21[30];
        v1055 = *(unsigned int *)(v1054 + 12);
        if ((int)v1055 >= 1)
        {
          v1056 = v1055 + 1;
          do
          {
            v1057 = (v1056 - 2);
            v1058 = *(_QWORD *)(*(_QWORD *)(v1054 + 24) + 8 * v1057);
            *(_QWORD *)&__src[0] = *(_QWORD *)(v1058 + 48);
            v1059 = *find_entry(*v21, __src, 8uLL, 0);
            if (!v1059 || !*(_QWORD *)(v1059 + 32))
            {
              apr_hash_set((apr_hash_t *)*v21, (const void *)(v1058 + 8), 8, 0);
              v1060 = *(_DWORD *)(v1054 + 12);
              *(_QWORD *)(*(_QWORD *)(v1054 + 24) + 8 * v1057) = *(_QWORD *)(*(_QWORD *)(v1054 + 24) + 8 * (v1060 - 1));
              if (v1060)
                *(_DWORD *)(v1054 + 12) = v1060 - 1;
            }
            --v1056;
          }
          while (v1056 > 1);
        }
        for (i = 1; i != 36; ++i)
          qsort(*(void **)(v21[i] + 24), *(int *)(v21[i] + 12), *(int *)(v21[i] + 8), (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
        return v21;
      case 9:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        WORD2(__src[0]) = 0;
        LODWORD(__src[0]) = 0;
        ++DWORD1(v1242);
        v74 = *(_QWORD *)(v37 + 32);
        if (v74)
        {
          v75 = 0;
          while (1)
          {
            v76 = atomic_load((unsigned int *)(v74 + 4));
            v77 = v75 + (v76 >> 6) - 1;
            if ((int)v77 > 0)
              break;
            v74 = *(_QWORD *)(v74 + 40);
            v75 = v77;
            if (!v74)
            {
              v75 = v77;
              goto LABEL_371;
            }
          }
        }
        else
        {
          v75 = 0;
        }
        v77 = 0;
LABEL_371:
        v1118 = 0;
        v1126 = 0;
        v1140 = 0;
        v1185 = 0;
        v1204 = 0;
        v1099 = 0;
        v1104 = 0;
        v1111 = 0;
        v1221 = 2;
        v1158 = 0;
        v1171 = -1;
        v287 = v75 | (unint64_t)(v77 << 32);
        while (2)
        {
          v288 = v74 + 64;
LABEL_373:
          if (v74)
          {
            v289 = HIDWORD(v287) - v287;
            if ((*(_BYTE *)(v288 + ((uint64_t)(HIDWORD(v287) - (int)v287) << 6) + 15) & 8) != 0)
            {
              v290 = v289;
              v291 = v288 + ((uint64_t)v289 << 6);
              v292 = *(_QWORD *)v291;
              if (*(_QWORD *)v291 < v1236 + v1235)
              {
                v294 = (int *)(v291 + 8);
                v293 = *(_DWORD *)(v291 + 8);
                if (v293 > -10209)
                {
                  if ((v293 + 10208) >= 2)
                    goto LABEL_388;
                }
                else if (v293 != -16119 && v293 != -16115)
                {
                  if (v293 == -16118)
                  {
                    if (v1235 > v292)
                      goto LABEL_1211;
                    v1030 = (char *)apr_palloc(p, 0x58uLL);
                    *(_DWORD *)v1030 = 50;
                    *((_DWORD *)v1030 + 1) = v1118;
                    *((_QWORD *)v1030 + 1) = v1126;
                    v1031 = v1030 + 8;
                    *((_QWORD *)v1030 + 2) = v1158;
                    *((_QWORD *)v1030 + 3) = v1171;
                    *((_QWORD *)v1030 + 4) = 0;
                    *((_QWORD *)v1030 + 5) = v1185;
                    *((_QWORD *)v1030 + 6) = v1140;
                    *((_QWORD *)v1030 + 7) = v1204;
                    *((_QWORD *)v1030 + 8) = v1099;
                    *((_DWORD *)v1030 + 18) = v1104;
                    *((_DWORD *)v1030 + 19) = v1111;
                    *((_WORD *)v1030 + 40) = v1221;
                    *(_DWORD *)(v1030 + 82) = __src[0];
                    *((_WORD *)v1030 + 43) = WORD2(__src[0]);
LABEL_1296:
                    v1033 = *find_entry((uint64_t)ht, v1031, 8uLL, 0);
                    if (v1033)
                      v1033 = *(_QWORD *)(v1033 + 32);
                    *((_QWORD *)v1030 + 4) = v1033;
                    apr_hash_set(ht, v1031, 8, v1030);
                    *((_QWORD *)v1030 + 3) = v292;
                    goto LABEL_1211;
                  }
LABEL_388:
                  v298 = v1239;
                  if (v293 > -10212)
                  {
                    switch(v293)
                    {
                      case -10211:
                        v1099 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v291, *(unsigned __int8 *)(v288 + (v290 << 6) + 13), v1239)+ 1);
                        break;
                      case -10208:
                        v1104 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v291, *(unsigned __int8 *)(v288 + (v290 << 6) + 13), v1239)+ 2);
                        break;
                      case -10207:
                        v1111 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v291, *(unsigned __int8 *)(v288 + (v290 << 6) + 13), v1239)+ 2);
                        break;
                    }
                  }
                  else
                  {
                    switch(v293)
                    {
                      case -16120:
                        v299 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v291, *(unsigned __int8 *)(v288 + (v290 << 6) + 13), v1239);
                        v1158 = *(_QWORD *)v291;
                        v1118 = *v294;
                        v1126 = *((_QWORD *)v299 + 1);
                        v1185 = *(_QWORD *)v299;
                        v1140 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v291, v299[16], v298);
                        break;
                      case -16119:
                        v300 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v291, *(unsigned __int8 *)(v288 + (v290 << 6) + 13), v1239);
                        v1204 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v291, v300[8], v298);
                        break;
                      case -16118:
                        v1171 = *(_QWORD *)v291;
                        break;
                      case -16115:
                        v301 = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v291, *(unsigned __int8 *)(v288 + (v290 << 6) + 13), v1239)+ 2);
                        v302 = v1221;
                        if (v301 != 1)
                          v302 = v301;
                        v1221 = v302;
                        break;
                      default:
                        break;
                    }
                  }
                  v303 = atomic_load((unsigned int *)(v74 + 4));
                  v304 = v287 + (v303 >> 6);
                  v305 = (HIDWORD(v287) + 1);
                  v287 = (v305 << 32) | v287;
                  if ((_DWORD)v305 == v304 - 1)
                  {
                    v287 = (v305 << 32) | v305;
                    v74 = *(_QWORD *)(v74 + 40);
                    continue;
                  }
                  goto LABEL_373;
                }
                if (v1235 <= v292)
                {
                  v296 = apr_palloc(p, 0x58uLL);
                  *(_DWORD *)v296 = 50;
                  *((_DWORD *)v296 + 1) = v1118;
                  v296[1] = v1126;
                  v296[2] = v1158;
                  v296[3] = v1171;
                  v296[4] = 0;
                  v296[5] = v1185;
                  v296[6] = v1140;
                  v296[7] = v1204;
                  v296[8] = v1099;
                  *((_DWORD *)v296 + 18) = v1104;
                  *((_DWORD *)v296 + 19) = v1111;
                  *((_WORD *)v296 + 40) = v1221;
                  *(_DWORD *)((char *)v296 + 82) = __src[0];
                  *((_WORD *)v296 + 43) = WORD2(__src[0]);
                  v297 = *find_entry((uint64_t)ht, (_BYTE *)v296 + 8, 8uLL, 0);
                  if (v297)
                    v297 = *(_QWORD *)(v297 + 32);
                  v296[4] = v297;
                  apr_hash_set(ht, v296 + 1, 8, v296);
                  v296[3] = v292;
                  v293 = *v294;
                  v288 = v74 + 64;
                }
                goto LABEL_388;
              }
            }
          }
          break;
        }
        v306 = apr_palloc(p, 0x58uLL);
        *(_DWORD *)v306 = 50;
        *((_DWORD *)v306 + 1) = v1118;
        v306[1] = v1126;
        v307 = v306 + 1;
        v306[2] = v1158;
        v306[3] = v1171;
        v306[4] = 0;
        v306[5] = v1185;
        v306[6] = v1140;
        v306[7] = v1204;
        v306[8] = v1099;
        *((_DWORD *)v306 + 18) = v1104;
        *((_DWORD *)v306 + 19) = v1111;
        *((_WORD *)v306 + 40) = v1221;
        *(_DWORD *)((char *)v306 + 82) = __src[0];
        *((_WORD *)v306 + 43) = WORD2(__src[0]);
        goto LABEL_922;
      case 10:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        WORD2(__src[0]) = 0;
        LODWORD(__src[0]) = 0;
        ++DWORD2(v1242);
        v78 = *(_QWORD *)(v37 + 32);
        if (v78)
        {
          v79 = 0;
          while (1)
          {
            v80 = atomic_load((unsigned int *)(v78 + 4));
            v81 = v79 + (v80 >> 6) - 1;
            if ((int)v81 > 0)
              break;
            v78 = *(_QWORD *)(v78 + 40);
            v79 = v81;
            if (!v78)
            {
              v79 = v81;
              goto LABEL_407;
            }
          }
        }
        else
        {
          v79 = 0;
        }
        v81 = 0;
LABEL_407:
        v1205 = 0;
        v1172 = 0;
        v1186 = 0;
        v1222 = 0;
        v1075 = 0;
        v1078 = 0;
        v1084 = 0;
        v1087 = 0;
        v1159 = 0;
        v1091 = 0;
        v1105 = 0;
        v1112 = 0;
        v1068 = 0;
        v1070 = 0;
        v1127 = 0;
        v1072 = 0;
        v1081 = 0;
        v1095 = 0;
        v1119 = 0;
        v1141 = 0;
        v308 = v79 | (unint64_t)(v81 << 32);
        v1066 = 0;
        v1067 = -1;
        while (2)
        {
          v309 = v78 + 64;
LABEL_409:
          if (v78)
          {
            v310 = HIDWORD(v308);
            v311 = HIDWORD(v308) - v308;
            if ((*(_BYTE *)(v309 + ((uint64_t)(HIDWORD(v308) - (int)v308) << 6) + 15) & 8) != 0)
            {
              v312 = v311;
              v313 = v309 + ((uint64_t)v311 << 6);
              v314 = *(_QWORD *)v313;
              if (*(_QWORD *)v313 < v1236 + v1235)
              {
                v316 = (int *)(v313 + 8);
                v315 = *(_DWORD *)(v313 + 8);
                if (v315 == -16292)
                {
                  if (v1235 > v314)
                  {
                    v317 = v1239;
                    goto LABEL_417;
                  }
                  v1065 = v308;
                  v308 >>= 32;
                  v319 = apr_palloc(p, 0xA8uLL);
                  *(_DWORD *)v319 = 62;
                  *((_DWORD *)v319 + 1) = v1205;
                  v319[1] = v1186;
                  v319[2] = v1222;
                  v319[3] = v1067;
                  v319[4] = 0;
                  v319[5] = v1172;
                  v319[6] = v1078;
                  v319[7] = v1084;
                  v319[8] = v1159;
                  v319[9] = v1087;
                  v319[10] = v1066;
                  v319[11] = v1091;
                  v319[12] = v1105;
                  v319[13] = v1075;
                  v319[14] = v1112;
                  v319[15] = v1068;
                  v319[16] = v1127;
                  v319[17] = v1072;
                  v319[18] = v1070;
                  *((_DWORD *)v319 + 38) = v1081;
                  *((_DWORD *)v319 + 39) = v1095;
                  *((_BYTE *)v319 + 160) = v1119;
                  *((_BYTE *)v319 + 161) = v1141;
                  *((_WORD *)v319 + 83) = WORD2(__src[0]);
                  *(_DWORD *)((char *)v319 + 162) = __src[0];
                  v320 = *find_entry((uint64_t)ht, (_BYTE *)v319 + 8, 8uLL, 0);
                  if (v320)
                    v320 = *(_QWORD *)(v320 + 32);
                  v319[4] = v320;
                  apr_hash_set(ht, v319 + 1, 8, v319);
                  v319[3] = v314;
                  v315 = *v316;
                  LODWORD(v310) = v308;
                  LODWORD(v308) = v1065;
                }
                else if (v315 == -16291)
                {
                  v966 = (char *)apr_palloc(p, 0xA8uLL);
                  *(_DWORD *)v966 = 62;
                  *((_DWORD *)v966 + 1) = v1205;
                  *((_QWORD *)v966 + 1) = v1186;
                  *((_QWORD *)v966 + 2) = v1222;
                  *((_QWORD *)v966 + 3) = v1067;
                  *((_QWORD *)v966 + 4) = 0;
                  *((_QWORD *)v966 + 5) = v1172;
                  *((_QWORD *)v966 + 6) = v1078;
                  *((_QWORD *)v966 + 7) = v1084;
                  *((_QWORD *)v966 + 8) = v1159;
                  *((_QWORD *)v966 + 9) = v1087;
                  *((_QWORD *)v966 + 10) = v1066;
                  *((_QWORD *)v966 + 11) = v1091;
                  *((_QWORD *)v966 + 12) = v1105;
                  *((_QWORD *)v966 + 13) = v1075;
                  *((_QWORD *)v966 + 14) = v1112;
                  *((_QWORD *)v966 + 15) = v1068;
                  *((_QWORD *)v966 + 16) = v1127;
                  *((_QWORD *)v966 + 17) = v1072;
                  *((_QWORD *)v966 + 18) = v1070;
                  *((_DWORD *)v966 + 38) = v1081;
                  *((_DWORD *)v966 + 39) = v1095;
                  v966[160] = v1119;
                  v966[161] = v1141;
                  *((_WORD *)v966 + 83) = WORD2(__src[0]);
                  *(_DWORD *)(v966 + 162) = __src[0];
                  entry = find_entry((uint64_t)ht, v966 + 8, 8uLL, 0);
                  v968 = *entry;
                  if (*entry)
                    v968 = *(_QWORD *)(v968 + 32);
                  *((_QWORD *)v966 + 4) = v968;
                  v969 = ht;
                  v970 = v966 + 8;
LABEL_1264:
                  apr_hash_set(v969, v970, 8, v966);
                  *((_QWORD *)v966 + 3) = v314;
                  goto LABEL_1211;
                }
                v317 = v1239;
                if (v315 > -16030)
                {
                  if (v315 > -15435)
                  {
                    if (v315 <= -15420)
                    {
                      if (v315 != -15434 && v315 != -15421)
                      {
                        v321 = -15420;
LABEL_436:
                        if (v315 != v321)
                          goto LABEL_483;
                      }
LABEL_449:
                      v331 = v309 + (v312 << 6);
                      v332 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v331 + 13), v1239);
                      v1222 = *(_QWORD *)v313;
                      v1205 = *v316;
                      v1172 = *(_QWORD *)v332;
                      v1186 = *((_QWORD *)v332 + 1);
                      v333 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v331 + 14), v317);
                      if (v333)
                      {
                        v1127 = (char *)*((_QWORD *)v333 + 1);
                        v1119 = v333[16];
                      }
                      v1159 = v333;
                      v1087 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v332[24], v317);
                      v1091 = (char *)*((_QWORD *)v1087 + 1);
                      v334 = *((unsigned __int16 *)v1087 + 9);
LABEL_452:
                      v1095 = v334;
                      v1141 = 6;
                      v309 = v78 + 64;
                      goto LABEL_483;
                    }
                    switch(v315)
                    {
                      case -15419:
                        goto LABEL_449;
                      case -10188:
                        v358 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v309 + (v312 << 6) + 13), v1239);
                        v1127 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v358[8], v317);
                        break;
                      case -10183:
                        v1119 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v309 + (v312 << 6) + 13), v1239)[8];
                        break;
                    }
LABEL_483:
                    v359 = atomic_load((unsigned int *)(v78 + 4));
                    v360 = v308 + (v359 >> 6);
                    v361 = (v310 + 1);
                    v308 = (v361 << 32) | v308;
                    if ((_DWORD)v361 == v360 - 1)
                    {
                      v308 = (v361 << 32) | v361;
                      v78 = *(_QWORD *)(v78 + 40);
                      continue;
                    }
                    goto LABEL_409;
                  }
                  if (v315 <= -15848)
                  {
                    if (v315 != -16029 && v315 != -16018)
                      goto LABEL_483;
                    v322 = v310;
                    v335 = v309 + (v312 << 6);
                    v336 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v335 + 13), v1239);
                    v1222 = *(_QWORD *)v313;
                    v1205 = *v316;
                    v1172 = *(_QWORD *)v336;
                    v1186 = *((_QWORD *)v336 + 1);
                    v337 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v335 + 14), v317);
                    if (v337)
                    {
                      v1127 = (char *)*((_QWORD *)v337 + 1);
                      v1119 = v337[16];
                    }
                    v1159 = v337;
                    v338 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v336[24], v317);
                    if (v338)
                    {
                      v1081 = *(_DWORD *)v338;
                      v1078 = v338 + 8;
                    }
                    v1084 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v336[25], v317);
                    v326 = 4;
                  }
                  else
                  {
                    if (v315 != -15847)
                    {
                      if (v315 == -15693)
                      {
                        v350 = v309 + (v312 << 6);
                        v351 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v350 + 13), v1239);
                        v1222 = *(_QWORD *)v313;
                        v1205 = *v316;
                        v1172 = *(_QWORD *)v351;
                        v1186 = *((_QWORD *)v351 + 1);
                        v352 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v350 + 14), v317);
                        if (v352)
                        {
                          v1127 = (char *)*((_QWORD *)v352 + 1);
                          v1119 = v352[16];
                        }
                        v1159 = v352;
                        v1066 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v351[24], v317);
                        v353 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v351[25], v317);
                        v334 = *(_DWORD *)v353;
                        v1091 = v353 + 8;
                        goto LABEL_452;
                      }
                      v321 = -15435;
                      goto LABEL_436;
                    }
                    v322 = v310;
                    v347 = v309 + (v312 << 6);
                    v348 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v347 + 13), v1239);
                    v1222 = *(_QWORD *)v313;
                    v1205 = *v316;
                    v1172 = *(_QWORD *)v348;
                    v1186 = *((_QWORD *)v348 + 1);
                    v349 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v347 + 14), v317);
                    if (v349)
                    {
                      v1127 = (char *)*((_QWORD *)v349 + 1);
                      v1119 = v349[16];
                    }
                    v1159 = v349;
                    v1078 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v348[32], v317);
                    v1081 = *((_DWORD *)v348 + 4);
                    v1084 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v348[33], v317);
                    v326 = 5;
                  }
                  goto LABEL_481;
                }
                if (v315 <= -16293)
                {
                  v322 = v310;
                  switch(v315)
                  {
                    case -16308:
                      v339 = v309 + (v312 << 6);
                      v340 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v339 + 13), v1239);
                      v1222 = *(_QWORD *)v313;
                      v1205 = *v316;
                      v1172 = *(_QWORD *)v340;
                      v1186 = *((_QWORD *)v340 + 1);
                      v341 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v339 + 14), v317);
                      v1159 = v341;
                      if (v341)
                      {
                        v342 = v341;
                        v1127 = (char *)*((_QWORD *)v341 + 1);
                        v1119 = v341[16];
                        v343 = v340[16];
                        goto LABEL_476;
                      }
                      v362 = v340[16];
                      break;
                    case -16307:
                      goto LABEL_443;
                    case -16306:
                      v344 = v309 + (v312 << 6);
                      v345 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v344 + 13), v1239);
                      v1222 = *(_QWORD *)v313;
                      v1205 = *v316;
                      v1172 = *(_QWORD *)v345;
                      v1186 = *((_QWORD *)v345 + 1);
                      v346 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v344 + 14), v317);
                      if (v346)
                      {
                        v1127 = (char *)*((_QWORD *)v346 + 1);
                        v1119 = v346[16];
                      }
                      v1159 = v346;
                      v1105 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v345[24], v317);
                      v326 = 3;
                      goto LABEL_481;
                    case -16305:
                    case -16304:
                      v323 = v309 + (v312 << 6);
                      v324 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v323 + 13), v1239);
                      v1222 = *(_QWORD *)v313;
                      v1205 = *v316;
                      v1172 = *(_QWORD *)v324;
                      v1186 = *((_QWORD *)v324 + 1);
                      v325 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v323 + 14), v317);
                      if (v325)
                      {
                        v1127 = (char *)*((_QWORD *)v325 + 1);
                        v1119 = v325[16];
                      }
                      v1159 = v325;
                      v1105 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v324[24], v317);
                      v1075 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v324[25], v317);
                      v326 = 2;
                      goto LABEL_481;
                    default:
                      goto LABEL_483;
                  }
                  goto LABEL_487;
                }
                if (v315 > -16096)
                {
                  if (v315 != -16095)
                  {
                    if (v315 == -16083)
                    {
                      v357 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v309 + (v312 << 6) + 13), v1239);
                      v1068 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v357[8], v317);
                      goto LABEL_483;
                    }
                    if (v315 != -16039)
                      goto LABEL_483;
                    v322 = v310;
LABEL_443:
                    v327 = v309 + (v312 << 6);
                    v328 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v327 + 13), v1239);
                    v1222 = *(_QWORD *)v313;
                    v1205 = *v316;
                    v1172 = *(_QWORD *)v328;
                    v1186 = *((_QWORD *)v328 + 1);
                    v329 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v327 + 14), v317);
                    v1159 = v329;
                    if (v329)
                    {
                      v330 = v329;
                      v1127 = (char *)*((_QWORD *)v329 + 1);
                      v1119 = v329[16];
                      v1105 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v328[24], v317);
                      v1072 = *(_QWORD *)v330;
                    }
                    else
                    {
                      v1105 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v328[24], v317);
                      v1072 = 0;
                    }
                    v326 = 1;
LABEL_481:
                    v1141 = v326;
LABEL_482:
                    v309 = v78 + 64;
                    LODWORD(v310) = v322;
                    goto LABEL_483;
                  }
                  v322 = v310;
                  v354 = v309 + (v312 << 6);
                  v355 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v354 + 13), v1239);
                  v1222 = *(_QWORD *)v313;
                  v1205 = *v316;
                  v1172 = *(_QWORD *)v355;
                  v1186 = *((_QWORD *)v355 + 1);
                  v356 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v354 + 14), v317);
                  v1159 = v356;
                  if (v356)
                  {
                    v342 = v356;
                    v1127 = (char *)*((_QWORD *)v356 + 1);
                    v1119 = v356[16];
                    v343 = v355[24];
LABEL_476:
                    v1105 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v343, v317);
                    v1141 = 0;
                    v1070 = *(_QWORD *)v342;
                    goto LABEL_482;
                  }
                  v362 = v355[24];
LABEL_487:
                  v1105 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v362, v317);
                  v1070 = 0;
                  v1141 = 0;
                  goto LABEL_482;
                }
                if (v315 != -16292)
                {
                  if (v315 == -16291)
                    v1067 = *(_QWORD *)v313;
                  goto LABEL_483;
                }
LABEL_417:
                v318 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, *(unsigned __int8 *)(v309 + (v312 << 6) + 13), v317);
                v1112 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v313, v318[8], v317);
                goto LABEL_483;
              }
            }
          }
          break;
        }
        v363 = apr_palloc(p, 0xA8uLL);
        *(_DWORD *)v363 = 62;
        *((_DWORD *)v363 + 1) = v1205;
        v363[1] = v1186;
        v363[2] = v1222;
        v363[3] = v1067;
        v363[4] = 0;
        v363[5] = v1172;
        v363[6] = v1078;
        v363[7] = v1084;
        v363[8] = v1159;
        v363[9] = v1087;
        v363[10] = v1066;
        v363[11] = v1091;
        v363[12] = v1105;
        v363[13] = v1075;
        v363[14] = v1112;
        v363[15] = v1068;
        v363[16] = v1127;
        v363[17] = v1072;
        v363[18] = v1070;
        *((_DWORD *)v363 + 38) = v1081;
        *((_DWORD *)v363 + 39) = v1095;
        *((_BYTE *)v363 + 160) = v1119;
        *((_BYTE *)v363 + 161) = v1141;
        *((_WORD *)v363 + 83) = WORD2(__src[0]);
        *(_DWORD *)((char *)v363 + 162) = __src[0];
        v364 = *find_entry((uint64_t)ht, (_BYTE *)v363 + 8, 8uLL, 0);
        if (v364)
          v364 = *(_QWORD *)(v364 + 32);
        v363[4] = v364;
        v365 = ht;
        v366 = v363 + 1;
        goto LABEL_781;
      case 11:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        WORD2(__src[0]) = 0;
        LODWORD(__src[0]) = 0;
        ++HIDWORD(v1242);
        v82 = *(_QWORD *)(v37 + 32);
        if (v82)
        {
          v83 = 0;
          while (1)
          {
            v84 = atomic_load((unsigned int *)(v82 + 4));
            v85 = v83 + (v84 >> 6) - 1;
            if ((int)v85 > 0)
              break;
            v82 = *(_QWORD *)(v82 + 40);
            v83 = v85;
            if (!v82)
            {
              v83 = v85;
              goto LABEL_493;
            }
          }
        }
        else
        {
          v83 = 0;
        }
        v85 = 0;
LABEL_493:
        v1160 = 0;
        v1173 = 0;
        v1187 = 0;
        v1206 = 0;
        v1100 = 0;
        v1106 = 0;
        v1223 = 0;
        v1142 = 0;
        v1128 = 0;
        v1120 = 0u;
        v1113 = -1;
        v367 = v83 | (unint64_t)(v85 << 32);
        while (2)
        {
          v368 = v82 + 64;
LABEL_495:
          if (v82)
          {
            v369 = HIDWORD(v367) - v367;
            if ((*(_BYTE *)(v368 + ((uint64_t)(HIDWORD(v367) - (int)v367) << 6) + 15) & 8) != 0)
            {
              v370 = v369;
              v371 = v368 + ((uint64_t)v369 << 6);
              v372 = *(_QWORD *)v371;
              if (*(_QWORD *)v371 < v1236 + v1235)
              {
                v374 = (int *)(v371 + 8);
                v373 = *(_DWORD *)(v371 + 8);
                if (v373 == -15676)
                {
                  if (v1235 > v372)
                  {
                    v375 = v1239;
LABEL_509:
                    v378 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v371, *(unsigned __int8 *)(v368 + (v370 << 6) + 13), v375);
                    v1223 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v371, v378[8], v375);
                    goto LABEL_519;
                  }
                  v376 = apr_palloc(p, 0x70uLL);
                  *(_DWORD *)v376 = 37;
                  *((_DWORD *)v376 + 1) = v1160;
                  v376[1] = v1173;
                  v376[2] = v1187;
                  v376[3] = v1113;
                  v376[4] = 0;
                  v376[5] = v1206;
                  v376[6] = v1106;
                  v376[7] = 0;
                  v376[8] = v1223;
                  v376[9] = v1142;
                  v376[10] = v1100;
                  *(_OWORD *)(v376 + 11) = v1120;
                  *((_WORD *)v376 + 52) = v1128;
                  *(_DWORD *)((char *)v376 + 106) = __src[0];
                  *((_WORD *)v376 + 55) = WORD2(__src[0]);
                  v377 = *find_entry((uint64_t)ht, (_BYTE *)v376 + 8, 8uLL, 0);
                  if (v377)
                    v377 = *(_QWORD *)(v377 + 32);
                  v376[4] = v377;
                  apr_hash_set(ht, v376 + 1, 8, v376);
                  v376[3] = v372;
                  v373 = *v374;
                  v368 = v82 + 64;
                }
                else if (v373 == -15675)
                {
                  v971 = apr_palloc(p, 0x70uLL);
                  *(_DWORD *)v971 = 37;
                  *((_DWORD *)v971 + 1) = v1160;
                  v971[1] = v1173;
                  v971[2] = v1187;
                  v971[3] = v1113;
                  v971[4] = 0;
                  v971[5] = v1206;
                  v971[6] = v1106;
                  v971[7] = 0;
                  v971[8] = v1223;
                  v971[9] = v1142;
                  v971[10] = v1100;
                  *(_OWORD *)(v971 + 11) = v1120;
                  *((_WORD *)v971 + 52) = v1128;
                  *(_DWORD *)((char *)v971 + 106) = __src[0];
                  *((_WORD *)v971 + 55) = WORD2(__src[0]);
                  v972 = find_entry((uint64_t)ht, (_BYTE *)v971 + 8, 8uLL, 0);
                  v973 = *v972;
                  if (*v972)
                    v973 = *(_QWORD *)(v973 + 32);
                  v971[4] = v973;
                  apr_hash_set(ht, v971 + 1, 8, v971);
                  v971[3] = v372;
                  goto LABEL_1211;
                }
                v375 = v1239;
                if (v373 > -15676)
                {
                  if (v373 == -15675)
                  {
                    v1113 = *(_QWORD *)v371;
                  }
                  else if (v373 == -15613)
                  {
                    v379 = v368 + (v370 << 6);
                    v380 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v371, *(unsigned __int8 *)(v379 + 13), v1239);
                    v1160 = *v374;
                    v1173 = *((_QWORD *)v380 + 1);
                    v1187 = *(_QWORD *)v371;
                    v1206 = *(_QWORD *)v380;
                    v381 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v371, *(unsigned __int8 *)(v379 + 14), v375);
                    if (v381)
                    {
                      v1142 = *(_QWORD *)v381;
                      v1120 = *(_OWORD *)(v381 + 8);
                      v1128 = *((_WORD *)v381 + 12);
                    }
                    v1100 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v371, v380[24], v375);
                  }
                }
                else
                {
                  if (v373 != -15695)
                  {
                    if (v373 != -15676)
                      goto LABEL_519;
                    goto LABEL_509;
                  }
                  v382 = v368 + (v370 << 6);
                  v383 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v371, *(unsigned __int8 *)(v382 + 13), v1239);
                  v1160 = *v374;
                  v1173 = *((_QWORD *)v383 + 1);
                  v1187 = *(_QWORD *)v371;
                  v1206 = *(_QWORD *)v383;
                  v384 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v371, *(unsigned __int8 *)(v382 + 14), v375);
                  if (v384)
                  {
                    v1142 = *(_QWORD *)v384;
                    v1120 = *(_OWORD *)(v384 + 8);
                    v1128 = *((_WORD *)v384 + 12);
                  }
                  v1106 = *((_QWORD *)v383 + 2);
                  v368 = v82 + 64;
                }
LABEL_519:
                v385 = atomic_load((unsigned int *)(v82 + 4));
                v386 = v367 + (v385 >> 6);
                v387 = (HIDWORD(v367) + 1);
                v367 = (v387 << 32) | v367;
                if ((_DWORD)v387 == v386 - 1)
                {
                  v367 = (v387 << 32) | v387;
                  v82 = *(_QWORD *)(v82 + 40);
                  continue;
                }
                goto LABEL_495;
              }
            }
          }
          break;
        }
        v306 = apr_palloc(p, 0x70uLL);
        *(_DWORD *)v306 = 37;
        *((_DWORD *)v306 + 1) = v1160;
        v306[1] = v1173;
        v307 = v306 + 1;
        v306[2] = v1187;
        v306[3] = v1113;
        v306[4] = 0;
        v306[5] = v1206;
        v306[6] = v1106;
        v306[7] = 0;
        v306[8] = v1223;
        v306[9] = v1142;
        v306[10] = v1100;
        *(_OWORD *)(v306 + 11) = v1120;
        *((_WORD *)v306 + 52) = v1128;
        *(_DWORD *)((char *)v306 + 106) = __src[0];
        *((_WORD *)v306 + 55) = WORD2(__src[0]);
        goto LABEL_922;
      case 12:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        BYTE4(__src[0]) = 0;
        LODWORD(__src[0]) = 0;
        LODWORD(v1243) = v1243 + 1;
        v86 = *(_QWORD *)(v37 + 32);
        if (v86)
        {
          v87 = 0;
          while (1)
          {
            v88 = atomic_load((unsigned int *)(v86 + 4));
            v89 = v87 + (v88 >> 6) - 1;
            if ((int)v89 > 0)
              break;
            v86 = *(_QWORD *)(v86 + 40);
            v87 = v89;
            if (!v86)
            {
              v87 = v89;
              goto LABEL_524;
            }
          }
        }
        else
        {
          v87 = 0;
        }
        v89 = 0;
LABEL_524:
        v388 = 0;
        v1121 = 0;
        v1129 = 0;
        v1143 = 0;
        v1207 = 0;
        v1114 = 0;
        LOBYTE(v1188) = 0;
        v1107 = 0u;
        v1161 = -1;
        v1174 = 0;
        v389 = v87 | (unint64_t)(v89 << 32);
        while (2)
        {
          v390 = v86 + 64;
LABEL_526:
          if (v86)
          {
            v391 = HIDWORD(v389) - v389;
            if ((*(_BYTE *)(v390 + ((uint64_t)(HIDWORD(v389) - (int)v389) << 6) + 15) & 8) != 0)
            {
              v392 = v391;
              v393 = v390 + ((uint64_t)v391 << 6);
              v394 = *(_QWORD *)v393;
              if (*(_QWORD *)v393 < v1236 + v1235)
              {
                v396 = (int *)(v393 + 8);
                v395 = *(_DWORD *)(v393 + 8);
                if (v395 == -15743)
                {
                  if (v1235 > v394)
                  {
                    v397 = v1239;
                    goto LABEL_545;
                  }
                  v398 = apr_palloc(p, 0x58uLL);
                  *(_DWORD *)v398 = 67;
                  *((_DWORD *)v398 + 1) = v388;
                  v398[1] = v1121;
                  v398[2] = v1143;
                  v398[3] = v1161;
                  v398[4] = 0;
                  v398[5] = v1174;
                  v398[6] = v1129;
                  v398[7] = v1207;
                  *((_OWORD *)v398 + 4) = v1107;
                  *((_WORD *)v398 + 40) = v1114;
                  *((_BYTE *)v398 + 82) = v1188;
                  *(_DWORD *)((char *)v398 + 83) = __src[0];
                  *((_BYTE *)v398 + 87) = BYTE4(__src[0]);
                  v399 = *find_entry((uint64_t)ht, (_BYTE *)v398 + 8, 8uLL, 0);
                  if (v399)
                    v399 = *(_QWORD *)(v399 + 32);
                  v398[4] = v399;
                  apr_hash_set(ht, v398 + 1, 8, v398);
                  v398[3] = v394;
                  v395 = *v396;
                  v390 = v86 + 64;
                }
                else if (v395 == -15742)
                {
                  if (v1235 > v394)
                    goto LABEL_1211;
                  v974 = apr_palloc(p, 0x58uLL);
                  *(_DWORD *)v974 = 67;
                  *((_DWORD *)v974 + 1) = v388;
                  v974[1] = v1121;
                  v975 = v974 + 1;
                  v974[2] = v1143;
                  v974[3] = v1161;
                  v974[4] = 0;
                  v974[5] = v1174;
                  v974[6] = v1129;
                  v974[7] = v1207;
                  *((_OWORD *)v974 + 4) = v1107;
                  *((_WORD *)v974 + 40) = v1114;
                  *((_BYTE *)v974 + 82) = v1188;
                  *(_DWORD *)((char *)v974 + 83) = __src[0];
                  *((_BYTE *)v974 + 87) = BYTE4(__src[0]);
                  goto LABEL_1282;
                }
                v397 = v1239;
                if (v395 <= -15745)
                {
                  if (v395 == -16291)
                  {
                    v1161 = *(_QWORD *)v393;
                  }
                  else if (v395 == -16075)
                  {
                    v400 = v390 + (v392 << 6);
                    v401 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v393, *(unsigned __int8 *)(v400 + 13), v1239);
                    v1143 = *(_QWORD *)v393;
                    v388 = *v396;
                    v1121 = *((_QWORD *)v401 + 1);
                    v1174 = *(_QWORD *)v401;
                    v1129 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v393, v401[24], v397);
                    v402 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v393, *(unsigned __int8 *)(v400 + 14), v397);
                    if (v402)
                    {
                      v1114 = *((_WORD *)v402 + 12);
                      v1107 = *(_OWORD *)(v402 + 8);
                    }
                    v390 = v86 + 64;
                  }
LABEL_548:
                  v406 = atomic_load((unsigned int *)(v86 + 4));
                  v407 = v389 + (v406 >> 6);
                  v408 = (HIDWORD(v389) + 1);
                  v389 = (v408 << 32) | v389;
                  if ((_DWORD)v408 == v407 - 1)
                  {
                    v389 = (v408 << 32) | v408;
                    v86 = *(_QWORD *)(v86 + 40);
                    continue;
                  }
                  goto LABEL_526;
                }
                if (v395 == -15744)
                {
                  v405 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v393, *(unsigned __int8 *)(v390 + (v392 << 6) + 13), v1239);
                  v390 = v86 + 64;
                  v1188 = *((_DWORD *)v405 + 2);
                  goto LABEL_548;
                }
                if (v395 != -15743)
                  goto LABEL_548;
LABEL_545:
                v403 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v393, *(unsigned __int8 *)(v390 + (v392 << 6) + 13), v397);
                v404 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v393, v403[8], v397);
                v390 = v86 + 64;
                v1207 = v404;
                goto LABEL_548;
              }
            }
          }
          break;
        }
        v306 = apr_palloc(p, 0x58uLL);
        *(_DWORD *)v306 = 67;
        *((_DWORD *)v306 + 1) = v388;
        v306[1] = v1121;
        v307 = v306 + 1;
        v306[2] = v1143;
        v306[3] = v1161;
        v306[4] = 0;
        v306[5] = v1174;
        v306[6] = v1129;
        v306[7] = v1207;
        *((_OWORD *)v306 + 4) = v1107;
        *((_WORD *)v306 + 40) = v1114;
        *((_BYTE *)v306 + 82) = v1188;
        *(_DWORD *)((char *)v306 + 83) = __src[0];
        *((_BYTE *)v306 + 87) = BYTE4(__src[0]);
        goto LABEL_922;
      case 13:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        ++DWORD1(v1243);
        v90 = *(_QWORD *)(v37 + 32);
        if (v90)
        {
          v91 = 0;
          while (1)
          {
            v92 = atomic_load((unsigned int *)(v90 + 4));
            v93 = v91 + (v92 >> 6) - 1;
            if ((int)v93 > 0)
              break;
            v90 = *(_QWORD *)(v90 + 40);
            v91 = v93;
            if (!v90)
            {
              v91 = v93;
              goto LABEL_553;
            }
          }
        }
        else
        {
          v91 = 0;
        }
        v93 = 0;
LABEL_553:
        v409 = 0;
        v410 = 0;
        v411 = 0;
        v1189 = 0;
        v1208 = 0;
        v412 = v91 | (unint64_t)(v93 << 32);
        while (2)
        {
          v413 = v90 + 64;
LABEL_555:
          if (!v90
            || (v414 = HIDWORD(v412) - v412,
                (*(_BYTE *)(v413 + ((uint64_t)(HIDWORD(v412) - (int)v412) << 6) + 15) & 8) == 0)
            || (v415 = v413 + ((uint64_t)v414 << 6), v416 = *(_QWORD *)v415, *(_QWORD *)v415 >= v1236 + v1235))
          {
            v424 = (char *)apr_palloc(p, 0x38uLL);
            v189 = v424;
            *(_DWORD *)v424 = 41;
            *((_DWORD *)v424 + 1) = v409;
            *((_QWORD *)v424 + 1) = v410;
            v190 = v424 + 8;
            v425 = -1;
            *((_QWORD *)v424 + 2) = v411;
            *((_QWORD *)v424 + 3) = -1;
            *((_QWORD *)v424 + 4) = 0;
            v426 = v1189;
            goto LABEL_566;
          }
          v417 = *(_DWORD *)(v415 + 8);
          if (v417 != -16127)
          {
            v418 = v1239;
            if (v417 == -16136)
            {
              v420 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v415, *(unsigned __int8 *)(v413 + ((uint64_t)v414 << 6) + 13), v1239);
              v1208 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v415, v420[8], v418);
            }
            else if (v417 == -16128)
            {
              v419 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v415, *(unsigned __int8 *)(v413 + ((uint64_t)v414 << 6) + 13), v1239);
              v411 = *(_QWORD *)v415;
              v409 = *(_DWORD *)(v415 + 8);
              v410 = *((_QWORD *)v419 + 1);
              v1189 = *(_QWORD *)v419;
            }
            v421 = atomic_load((unsigned int *)(v90 + 4));
            v422 = v412 + (v421 >> 6);
            v423 = (HIDWORD(v412) + 1);
            v412 = (v423 << 32) | v412;
            v14 = v1220;
            if ((_DWORD)v423 == v422 - 1)
            {
              v412 = (v423 << 32) | v423;
              v90 = *(_QWORD *)(v90 + 40);
              continue;
            }
            goto LABEL_555;
          }
          break;
        }
        v14 = v1220;
        if (v1235 > v416)
          goto LABEL_1211;
        v989 = apr_palloc(p, 0x38uLL);
        *(_DWORD *)v989 = 41;
        *((_DWORD *)v989 + 1) = v409;
        v989[1] = v410;
        v990 = v989 + 1;
        v989[2] = v411;
        v989[3] = -1;
        v989[4] = 0;
        v989[5] = v1189;
        v989[6] = v1208;
        goto LABEL_1267;
      case 14:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        ++DWORD2(v1243);
        v94 = *(_QWORD *)(v37 + 32);
        if (v94)
        {
          v95 = 0;
          while (1)
          {
            v96 = atomic_load((unsigned int *)(v94 + 4));
            v97 = v95 + (v96 >> 6) - 1;
            if ((int)v97 > 0)
              break;
            v94 = *(_QWORD *)(v94 + 40);
            v95 = v97;
            if (!v94)
            {
              v95 = v97;
              goto LABEL_569;
            }
          }
        }
        else
        {
          v95 = 0;
        }
        v97 = 0;
LABEL_569:
        v427 = 0;
        v1144 = 0;
        v1162 = 0;
        v1208 = 0;
        v428 = v95 | (unint64_t)(v97 << 32);
        v1175 = 0;
        v1190 = -1;
        while (2)
        {
          v429 = v94 + 64;
LABEL_571:
          if (v94)
          {
            v430 = HIDWORD(v428) - v428;
            if ((*(_BYTE *)(v429 + ((uint64_t)(HIDWORD(v428) - (int)v428) << 6) + 15) & 8) != 0)
            {
              v431 = v430;
              v432 = v429 + ((uint64_t)v430 << 6);
              v425 = *(_QWORD *)v432;
              if (*(_QWORD *)v432 < v1236 + v1235)
              {
                v434 = (int *)(v432 + 8);
                v433 = *(_DWORD *)(v432 + 8);
                if (v433 == -15880)
                {
                  if (v1235 > v425)
                  {
                    v435 = v1239;
                    goto LABEL_586;
                  }
                  v436 = apr_palloc(p, 0x38uLL);
                  *(_DWORD *)v436 = 38;
                  *((_DWORD *)v436 + 1) = v427;
                  v436[1] = v1144;
                  v436[2] = v1162;
                  v436[3] = v1190;
                  v436[4] = 0;
                  v436[5] = v1175;
                  v436[6] = v1208;
                  v437 = *find_entry((uint64_t)ht, (_BYTE *)v436 + 8, 8uLL, 0);
                  if (v437)
                    v437 = *(_QWORD *)(v437 + 32);
                  v436[4] = v437;
                  apr_hash_set(ht, v436 + 1, 8, v436);
                  v436[3] = v425;
                  v433 = *v434;
                  v429 = v94 + 64;
                }
                else if (v433 == -15879)
                {
                  if (v1235 > v425)
                    goto LABEL_1211;
                  v424 = (char *)apr_palloc(p, 0x38uLL);
                  v189 = v424;
                  *(_DWORD *)v424 = 38;
                  *((_DWORD *)v424 + 1) = v427;
                  *((_QWORD *)v424 + 1) = v1144;
                  v190 = v424 + 8;
                  *((_QWORD *)v424 + 2) = v1162;
                  *((_QWORD *)v424 + 3) = v1190;
                  *((_QWORD *)v424 + 4) = 0;
                  v426 = v1175;
LABEL_566:
                  *((_QWORD *)v424 + 5) = v426;
                  *((_QWORD *)v424 + 6) = v1208;
                  goto LABEL_1068;
                }
                if (v433 == -15879)
                {
                  v1190 = *(_QWORD *)v432;
                  goto LABEL_588;
                }
                v435 = v1239;
                if (v433 != -15880)
                {
                  if (v433 == -15997)
                  {
                    v438 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v432, *(unsigned __int8 *)(v429 + (v431 << 6) + 13), v1239);
                    v429 = v94 + 64;
                    v427 = *v434;
                    v1144 = *((_QWORD *)v438 + 1);
                    v1162 = *(_QWORD *)v432;
                    v1175 = *(_QWORD *)v438;
                  }
LABEL_588:
                  v441 = atomic_load((unsigned int *)(v94 + 4));
                  v442 = v428 + (v441 >> 6);
                  v443 = (HIDWORD(v428) + 1);
                  v428 = (v443 << 32) | v428;
                  if ((_DWORD)v443 == v442 - 1)
                  {
                    v428 = (v443 << 32) | v443;
                    v94 = *(_QWORD *)(v94 + 40);
                    continue;
                  }
                  goto LABEL_571;
                }
LABEL_586:
                v439 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v432, *(unsigned __int8 *)(v429 + (v431 << 6) + 13), v435);
                v440 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v432, v439[8], v435);
                v429 = v94 + 64;
                v1208 = v440;
                goto LABEL_588;
              }
            }
          }
          break;
        }
        v363 = apr_palloc(p, 0x38uLL);
        *(_DWORD *)v363 = 38;
        *((_DWORD *)v363 + 1) = v427;
        v363[1] = v1144;
        v444 = v363 + 1;
        v363[2] = v1162;
        v363[3] = v1190;
        v363[4] = 0;
        v363[5] = v1175;
        v363[6] = v1208;
        goto LABEL_778;
      case 15:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        ++HIDWORD(v1243);
        v98 = *(_QWORD *)(v37 + 32);
        if (v98)
        {
          v99 = 0;
          while (1)
          {
            v100 = atomic_load((unsigned int *)(v98 + 4));
            v101 = v99 + (v100 >> 6) - 1;
            if ((int)v101 > 0)
              break;
            v98 = *(_QWORD *)(v98 + 40);
            v99 = v101;
            if (!v98)
            {
              v99 = v101;
              goto LABEL_593;
            }
          }
        }
        else
        {
          v99 = 0;
        }
        v101 = 0;
LABEL_593:
        v445 = 0;
        v1130 = 0;
        v1145 = 0;
        v1176 = 0;
        v1191 = 0;
        v1163 = 0;
        v446 = v99 | (unint64_t)(v101 << 32);
        v1224 = 0u;
        v1122 = -1;
        while (2)
        {
          v447 = v98 + 64;
LABEL_595:
          if (v98)
          {
            v448 = HIDWORD(v446) - v446;
            if ((*(_BYTE *)(v447 + ((uint64_t)(HIDWORD(v446) - (int)v446) << 6) + 15) & 8) != 0)
            {
              v449 = v448;
              v450 = v447 + ((uint64_t)v448 << 6);
              v451 = *(_QWORD *)v450;
              if (*(_QWORD *)v450 < v1236 + v1235)
              {
                v453 = (int *)(v450 + 8);
                v452 = *(_DWORD *)(v450 + 8);
                if ((v452 + 15975) < 2)
                {
                  if (v1235 <= v451)
                  {
                    v454 = apr_palloc(p, 0x50uLL);
                    *(_DWORD *)v454 = 76;
                    *((_DWORD *)v454 + 1) = v445;
                    v454[1] = v1145;
                    v454[2] = v1191;
                    v454[3] = v1122;
                    v454[4] = 0;
                    v454[5] = v1176;
                    v454[6] = v1130;
                    *(_OWORD *)(v454 + 7) = v1224;
                    v454[9] = v1163;
                    v455 = *find_entry((uint64_t)ht, (_BYTE *)v454 + 8, 8uLL, 0);
                    if (v455)
                      v455 = *(_QWORD *)(v455 + 32);
                    v454[4] = v455;
                    apr_hash_set(ht, v454 + 1, 8, v454);
                    v454[3] = v451;
                    v452 = *v453;
                    v447 = v98 + 64;
                  }
LABEL_604:
                  v456 = v1239;
                  if (v452 <= -15974)
                  {
                    if (v452 == -15996)
                    {
                      v463 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v450, *(unsigned __int8 *)(v447 + (v449 << 6) + 13), v1239);
                      v447 = v98 + 64;
                      v445 = *v453;
                      v1145 = *((_QWORD *)v463 + 1);
                      v1176 = *(_QWORD *)v463;
                      v1191 = *(_QWORD *)v450;
                      v1163 = *((_DWORD *)v463 + 6);
                      *(_QWORD *)&v462 = *((_QWORD *)v463 + 2);
LABEL_621:
                      v1224 = v462;
                      goto LABEL_622;
                    }
                    if (v452 != -15975)
                    {
                      if (v452 == -15974)
                      {
                        v459 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v450, *(unsigned __int8 *)(v447 + (v449 << 6) + 13), v1239);
                        v460 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v450, v459[8], v456);
                        v447 = v98 + 64;
                        v1130 = v460;
                      }
LABEL_622:
                      v466 = atomic_load((unsigned int *)(v98 + 4));
                      v467 = v446 + (v466 >> 6);
                      v468 = (HIDWORD(v446) + 1);
                      v446 = (v468 << 32) | v446;
                      if ((_DWORD)v468 == v467 - 1)
                      {
                        v446 = (v468 << 32) | v468;
                        v98 = *(_QWORD *)(v98 + 40);
                        continue;
                      }
                      goto LABEL_595;
                    }
                    v464 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v450, *(unsigned __int8 *)(v447 + (v449 << 6) + 13), v1239);
                    v447 = v98 + 64;
                    v458 = v464 + 8;
                  }
                  else
                  {
                    if (v452 > -15910)
                    {
                      if (v452 == -15909)
                      {
                        v465 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v450, *(unsigned __int8 *)(v447 + (v449 << 6) + 13), v1239);
                        v447 = v98 + 64;
                        v445 = *v453;
                        v1145 = *((_QWORD *)v465 + 1);
                        v1176 = *(_QWORD *)v465;
                        v1191 = *(_QWORD *)v450;
                        v1163 = *((_DWORD *)v465 + 8);
                        v462 = *((_OWORD *)v465 + 1);
                      }
                      else
                      {
                        if (v452 != -15907)
                          goto LABEL_622;
                        v461 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v450, *(unsigned __int8 *)(v447 + (v449 << 6) + 13), v1239);
                        v447 = v98 + 64;
                        *((_QWORD *)&v462 + 1) = *((_QWORD *)&v1224 + 1);
                        *(_QWORD *)&v462 = *((_QWORD *)v461 + 1);
                      }
                      goto LABEL_621;
                    }
                    if (v452 == -15973)
                    {
                      v1122 = *(_QWORD *)v450;
                      goto LABEL_622;
                    }
                    if (v452 != -15912)
                      goto LABEL_622;
                    v457 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v450, *(unsigned __int8 *)(v447 + (v449 << 6) + 13), v1239);
                    v447 = v98 + 64;
                    v445 = *v453;
                    v1145 = *((_QWORD *)v457 + 1);
                    v1176 = *(_QWORD *)v457;
                    v1191 = *(_QWORD *)v450;
                    v1163 = *((_DWORD *)v457 + 6);
                    v458 = v457 + 16;
                  }
                  *(_QWORD *)&v462 = v1224;
                  *((_QWORD *)&v462 + 1) = *v458;
                  goto LABEL_621;
                }
                if (v452 != -15973)
                  goto LABEL_604;
                if (v1235 > v451)
                  goto LABEL_1211;
                v977 = (char *)apr_palloc(p, 0x50uLL);
                *(_DWORD *)v977 = 76;
                *((_DWORD *)v977 + 1) = v445;
                *((_QWORD *)v977 + 1) = v1145;
                v979 = v977 + 8;
                *((_QWORD *)v977 + 2) = v1191;
                *((_QWORD *)v977 + 3) = v1122;
                *((_QWORD *)v977 + 4) = 0;
                *((_QWORD *)v977 + 5) = v1176;
                *((_QWORD *)v977 + 6) = v1130;
                *(_OWORD *)(v977 + 56) = v1224;
                *((_QWORD *)v977 + 9) = v1163;
LABEL_1278:
                v995 = *find_entry((uint64_t)ht, v979, 8uLL, 0);
                if (v995)
                  v995 = *(_QWORD *)(v995 + 32);
                *((_QWORD *)v977 + 4) = v995;
                apr_hash_set(ht, v979, 8, v977);
                *((_QWORD *)v977 + 3) = v451;
                goto LABEL_1211;
              }
            }
          }
          break;
        }
        v363 = apr_palloc(p, 0x50uLL);
        *(_DWORD *)v363 = 76;
        *((_DWORD *)v363 + 1) = v445;
        v363[1] = v1145;
        v444 = v363 + 1;
        v363[2] = v1191;
        v363[3] = v1122;
        v363[4] = 0;
        v363[5] = v1176;
        v363[6] = v1130;
        *(_OWORD *)(v363 + 7) = v1224;
        v363[9] = v1163;
        goto LABEL_778;
      case 16:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        *(_QWORD *)&__src[0] = 0;
        LODWORD(v1244) = v1244 + 1;
        v102 = *(_QWORD *)(v37 + 32);
        if (v102)
        {
          v103 = 0;
          while (1)
          {
            v104 = atomic_load((unsigned int *)(v102 + 4));
            v105 = v103 + (v104 >> 6) - 1;
            if ((int)v105 > 0)
              break;
            v102 = *(_QWORD *)(v102 + 40);
            v103 = v105;
            if (!v102)
            {
              v103 = v105;
              goto LABEL_627;
            }
          }
        }
        else
        {
          v103 = 0;
        }
        v105 = 0;
LABEL_627:
        v469 = 0;
        v1131 = 0;
        v1146 = 0;
        v1164 = 0;
        v1177 = 0;
        v470 = v103 | (unint64_t)(v105 << 32);
        v1192 = -1;
        v1209 = 0;
        while (2)
        {
          v471 = v102 + 64;
LABEL_629:
          if (v102)
          {
            v472 = HIDWORD(v470) - v470;
            if ((*(_BYTE *)(v471 + ((uint64_t)(HIDWORD(v470) - (int)v470) << 6) + 15) & 8) != 0)
            {
              v473 = v472;
              v474 = v471 + ((uint64_t)v472 << 6);
              v451 = *(_QWORD *)v474;
              if (*(_QWORD *)v474 < v1236 + v1235)
              {
                v476 = (int *)(v474 + 8);
                v475 = *(_DWORD *)(v474 + 8);
                if ((v475 + 15491) >= 2)
                {
                  if (v475 == -15489)
                  {
                    if (v1235 > v451)
                      goto LABEL_1211;
                    v977 = (char *)apr_palloc(p, 0x50uLL);
                    *(_DWORD *)v977 = 61;
                    *((_DWORD *)v977 + 1) = v469;
                    *((_QWORD *)v977 + 1) = v1131;
                    v979 = v977 + 8;
                    *((_QWORD *)v977 + 2) = v1146;
                    *((_QWORD *)v977 + 3) = v1192;
                    *((_QWORD *)v977 + 4) = 0;
                    *((_QWORD *)v977 + 5) = v1164;
                    *((_QWORD *)v977 + 6) = v1177;
                    *((_QWORD *)v977 + 7) = 0;
                    v994 = *(_QWORD *)&__src[0];
                    *((_QWORD *)v977 + 8) = v1209;
                    *((_QWORD *)v977 + 9) = v994;
                    goto LABEL_1278;
                  }
                }
                else if (v1235 <= v451)
                {
                  v477 = apr_palloc(p, 0x50uLL);
                  *(_DWORD *)v477 = 61;
                  *((_DWORD *)v477 + 1) = v469;
                  v477[1] = v1131;
                  v477[2] = v1146;
                  v477[3] = v1192;
                  v477[4] = 0;
                  v477[5] = v1164;
                  v477[6] = v1177;
                  v477[7] = 0;
                  v478 = *(_QWORD *)&__src[0];
                  v477[8] = v1209;
                  v477[9] = v478;
                  v479 = *find_entry((uint64_t)ht, (_BYTE *)v477 + 8, 8uLL, 0);
                  if (v479)
                    v479 = *(_QWORD *)(v479 + 32);
                  v477[4] = v479;
                  apr_hash_set(ht, v477 + 1, 8, v477);
                  v477[3] = v451;
                  v475 = *v476;
                  v471 = v102 + 64;
                }
                v480 = v1239;
                switch(v475)
                {
                  case -15496:
                    v481 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v474, *(unsigned __int8 *)(v471 + (v473 << 6) + 13), v1239);
                    v471 = v102 + 64;
                    v1209 = 0;
                    v469 = *v476;
                    v1131 = *((_QWORD *)v481 + 1);
                    v1146 = *(_QWORD *)v474;
                    v1164 = *(_QWORD *)v481;
                    break;
                  case -15491:
                    v482 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v474, *(unsigned __int8 *)(v471 + (v473 << 6) + 13), v1239);
                    v483 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v474, v482[8], v480);
                    v471 = v102 + 64;
                    v1177 = v483;
                    break;
                  case -15490:
                    v484 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v474, *(unsigned __int8 *)(v471 + (v473 << 6) + 13), v1239);
                    v471 = v102 + 64;
                    v1209 = *((_QWORD *)v484 + 1);
                    break;
                  case -15489:
                    v1192 = *(_QWORD *)v474;
                    break;
                  default:
                    break;
                }
                v485 = atomic_load((unsigned int *)(v102 + 4));
                v486 = v470 + (v485 >> 6);
                v487 = (HIDWORD(v470) + 1);
                v470 = (v487 << 32) | v470;
                if ((_DWORD)v487 == v486 - 1)
                {
                  v470 = (v487 << 32) | v487;
                  v102 = *(_QWORD *)(v102 + 40);
                  continue;
                }
                goto LABEL_629;
              }
            }
          }
          break;
        }
        v363 = apr_palloc(p, 0x50uLL);
        *(_DWORD *)v363 = 61;
        *((_DWORD *)v363 + 1) = v469;
        v363[1] = v1131;
        v444 = v363 + 1;
        v363[2] = v1146;
        v363[3] = v1192;
        v363[4] = 0;
        v363[5] = v1164;
        v363[6] = v1177;
        v363[7] = 0;
        v488 = *(_QWORD *)&__src[0];
        v363[8] = v1209;
        v363[9] = v488;
        goto LABEL_778;
      case 17:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        ++DWORD1(v1244);
        v106 = *(_QWORD *)(v37 + 32);
        if (v106)
        {
          v107 = 0;
          while (1)
          {
            v108 = atomic_load((unsigned int *)(v106 + 4));
            v109 = v107 + (v108 >> 6) - 1;
            if ((int)v109 > 0)
              break;
            v106 = *(_QWORD *)(v106 + 40);
            v107 = v109;
            if (!v106)
            {
              v107 = v109;
              goto LABEL_648;
            }
          }
        }
        else
        {
          v107 = 0;
        }
        v109 = 0;
LABEL_648:
        v489 = 0;
        v490 = 0;
        v1182 = 0;
        v1201 = 0;
        v176 = 0;
        v491 = v107 | (unint64_t)(v109 << 32);
        while (2)
        {
          v492 = v106 + 64;
LABEL_650:
          if (v106)
          {
            v493 = HIDWORD(v491) - v491;
            if ((*(_BYTE *)(v492 + ((uint64_t)(HIDWORD(v491) - (int)v491) << 6) + 15) & 8) != 0)
            {
              v494 = v492 + ((uint64_t)v493 << 6);
              v451 = *(_QWORD *)v494;
              if (*(_QWORD *)v494 < v1236 + v1235)
              {
                v495 = *(_DWORD *)(v494 + 8);
                if (v495 == -15891)
                {
                  v496 = v1239;
                  v497 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v494, *(unsigned __int8 *)(v492 + ((uint64_t)v493 << 6) + 13), v1239);
                  v489 = *(_DWORD *)(v494 + 8);
                  v490 = *((_QWORD *)v497 + 1);
                  v1182 = *(_QWORD *)v494;
                  v1201 = *(_QWORD *)v497;
                  v176 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v494, v497[16], v496);
                }
                else if (v495 == -15893)
                {
                  v14 = v1220;
                  if (v1235 > v451)
                    goto LABEL_1211;
                  v976 = (char *)apr_palloc(p, 0x38uLL);
                  v977 = v976;
                  v978 = 64;
LABEL_1250:
                  *(_DWORD *)v976 = v978;
                  *((_DWORD *)v976 + 1) = v489;
                  *((_QWORD *)v976 + 1) = v490;
                  v979 = v976 + 8;
                  *((_QWORD *)v976 + 2) = v1182;
                  *((_QWORD *)v976 + 3) = -1;
                  *((_QWORD *)v976 + 4) = 0;
                  *((_QWORD *)v976 + 5) = v1201;
                  *((_QWORD *)v976 + 6) = v176;
                  goto LABEL_1278;
                }
                v14 = v1220;
                v498 = atomic_load((unsigned int *)(v106 + 4));
                v499 = v491 + (v498 >> 6);
                v500 = (HIDWORD(v491) + 1);
                v491 = (v500 << 32) | v491;
                if ((_DWORD)v500 == v499 - 1)
                {
                  v491 = (v500 << 32) | v500;
                  v106 = *(_QWORD *)(v106 + 40);
                  continue;
                }
                goto LABEL_650;
              }
            }
          }
          break;
        }
        v188 = (char *)apr_palloc(p, 0x38uLL);
        v189 = v188;
        v501 = 64;
        goto LABEL_674;
      case 18:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        ++DWORD2(v1244);
        v110 = *(_QWORD *)(v37 + 32);
        if (v110)
        {
          v111 = 0;
          while (1)
          {
            v112 = atomic_load((unsigned int *)(v110 + 4));
            v113 = v111 + (v112 >> 6) - 1;
            if ((int)v113 > 0)
              break;
            v110 = *(_QWORD *)(v110 + 40);
            v111 = v113;
            if (!v110)
            {
              v111 = v113;
              goto LABEL_662;
            }
          }
        }
        else
        {
          v111 = 0;
        }
        v113 = 0;
LABEL_662:
        v489 = 0;
        v490 = 0;
        v1182 = 0;
        v1201 = 0;
        v176 = 0;
        v502 = v111 | (unint64_t)(v113 << 32);
        while (2)
        {
          v503 = v110 + 64;
LABEL_664:
          if (v110)
          {
            v504 = HIDWORD(v502) - v502;
            if ((*(_BYTE *)(v503 + ((uint64_t)(HIDWORD(v502) - (int)v502) << 6) + 15) & 8) != 0)
            {
              v505 = v503 + ((uint64_t)v504 << 6);
              v451 = *(_QWORD *)v505;
              if (*(_QWORD *)v505 < v1236 + v1235)
              {
                v506 = *(_DWORD *)(v505 + 8);
                if (v506 == -16311)
                {
                  v507 = v1239;
                  v508 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v505, *(unsigned __int8 *)(v503 + ((uint64_t)v504 << 6) + 13), v1239);
                  v489 = *(_DWORD *)(v505 + 8);
                  v490 = *((_QWORD *)v508 + 1);
                  v1182 = *(_QWORD *)v505;
                  v1201 = *(_QWORD *)v508;
                  v176 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v505, v508[16], v507);
                }
                else if (v506 == -16320)
                {
                  v14 = v1220;
                  if (v1235 > v451)
                    goto LABEL_1211;
                  v976 = (char *)apr_palloc(p, 0x38uLL);
                  v977 = v976;
                  v978 = 34;
                  goto LABEL_1250;
                }
                v14 = v1220;
                v509 = atomic_load((unsigned int *)(v110 + 4));
                v510 = v502 + (v509 >> 6);
                v511 = (HIDWORD(v502) + 1);
                v502 = (v511 << 32) | v502;
                if ((_DWORD)v511 == v510 - 1)
                {
                  v502 = (v511 << 32) | v511;
                  v110 = *(_QWORD *)(v110 + 40);
                  continue;
                }
                goto LABEL_664;
              }
            }
          }
          break;
        }
        v188 = (char *)apr_palloc(p, 0x38uLL);
        v189 = v188;
        v501 = 34;
LABEL_674:
        *(_DWORD *)v188 = v501;
        *((_DWORD *)v188 + 1) = v489;
        *((_QWORD *)v188 + 1) = v490;
        v190 = v188 + 8;
LABEL_675:
        v425 = -1;
        *((_QWORD *)v188 + 2) = v1182;
        *((_QWORD *)v188 + 3) = -1;
        *((_QWORD *)v188 + 4) = 0;
        *((_QWORD *)v188 + 5) = v1201;
        goto LABEL_1067;
      case 19:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        ++HIDWORD(v1244);
        v114 = *(_QWORD *)(v37 + 32);
        v1201 = v1234;
        v115 = 0;
        if (!v114)
          goto LABEL_242;
        while (1)
        {
          v116 = atomic_load((unsigned int *)(v114 + 4));
          v117 = v115 + (v116 >> 6) - 1;
          if ((int)v117 > 0)
            break;
          v114 = *(_QWORD *)(v114 + 40);
          v115 = v117;
          if (!v114)
          {
            v115 = v117;
LABEL_243:
            v174 = 0;
            v175 = 0;
            v1182 = 0;
            v176 = 0;
            v177 = v115 | (unint64_t)(v117 << 32);
            while (1)
            {
              v178 = v114 + 64;
              do
              {
                if (!v114
                  || (v179 = HIDWORD(v177) - v177,
                      (*(_BYTE *)(v178 + ((uint64_t)(HIDWORD(v177) - (int)v177) << 6) + 15) & 8) == 0)
                  || (v180 = v178 + ((uint64_t)v179 << 6), v181 = *(_QWORD *)v180, *(_QWORD *)v180 >= v1236 + v1235))
                {
                  v188 = (char *)apr_palloc(p, 0x38uLL);
                  v189 = v188;
                  *(_DWORD *)v188 = 31;
                  *((_DWORD *)v188 + 1) = v174;
                  *((_QWORD *)v188 + 1) = v175;
                  v190 = v188 + 8;
                  goto LABEL_675;
                }
                v182 = *(_DWORD *)(v180 + 8);
                if (v182 == -15848)
                {
                  v183 = v1239;
                  v184 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v180, *(unsigned __int8 *)(v178 + ((uint64_t)v179 << 6) + 13), v1239);
                  v174 = *(_DWORD *)(v180 + 8);
                  v175 = *((_QWORD *)v184 + 1);
                  v1182 = *(_QWORD *)v180;
                  v1201 = *(_QWORD *)v184;
                  v176 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v180, v184[24], v183);
                }
                else if (v182 == -15867)
                {
                  v14 = v1220;
                  if (v1235 <= v181)
                  {
                    v964 = apr_palloc(p, 0x38uLL);
                    *(_DWORD *)v964 = 31;
                    *((_DWORD *)v964 + 1) = v174;
                    v964[1] = v175;
                    v964[2] = v1182;
                    v964[3] = -1;
                    v964[4] = 0;
                    v964[5] = v1201;
                    v964[6] = v176;
                    v965 = *find_entry((uint64_t)ht, (_BYTE *)v964 + 8, 8uLL, 0);
                    if (v965)
                      v965 = *(_QWORD *)(v965 + 32);
                    v964[4] = v965;
                    apr_hash_set(ht, v964 + 1, 8, v964);
                    v964[3] = v181;
                  }
                  goto LABEL_1211;
                }
                v14 = v1220;
                v185 = atomic_load((unsigned int *)(v114 + 4));
                v186 = v177 + (v185 >> 6);
                v187 = (HIDWORD(v177) + 1);
                v177 = (v187 << 32) | v177;
              }
              while ((_DWORD)v187 != v186 - 1);
              v177 = (v187 << 32) | v187;
              v114 = *(_QWORD *)(v114 + 40);
            }
          }
        }
LABEL_242:
        v117 = 0;
        goto LABEL_243;
      case 20:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        LODWORD(v1245) = v1245 + 1;
        v118 = *(_QWORD *)(v37 + 32);
        if (v118)
        {
          v119 = 0;
          while (1)
          {
            v120 = atomic_load((unsigned int *)(v118 + 4));
            v121 = v119 + (v120 >> 6) - 1;
            if ((int)v121 > 0)
              break;
            v118 = *(_QWORD *)(v118 + 40);
            v119 = v121;
            if (!v118)
            {
              v119 = v121;
              goto LABEL_678;
            }
          }
        }
        else
        {
          v119 = 0;
        }
        v121 = 0;
LABEL_678:
        v512 = 0;
        v513 = 0;
        v514 = 0;
        v515 = 0;
        v516 = 0;
        v517 = v119 | (unint64_t)(v121 << 32);
        while (2)
        {
          v518 = v118 + 64;
LABEL_680:
          if (v118)
          {
            v519 = HIDWORD(v517) - v517;
            if ((*(_BYTE *)(v518 + ((uint64_t)(HIDWORD(v517) - (int)v517) << 6) + 15) & 8) != 0)
            {
              v520 = v518 + ((uint64_t)v519 << 6);
              v521 = *(_QWORD *)v520;
              if (*(_QWORD *)v520 < v1236 + v1235)
              {
                v522 = *(_DWORD *)(v520 + 8);
                if (v522 == -15922)
                {
                  v523 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v520, *(unsigned __int8 *)(v518 + ((uint64_t)v519 << 6) + 13), v1239);
                  v514 = *(_QWORD *)v520;
                  v512 = *(_DWORD *)(v520 + 8);
                  v515 = *(_QWORD *)v523;
                  v513 = *((_QWORD *)v523 + 1);
                  v516 = *((_QWORD *)v523 + 2);
                }
                else if (v522 == -15957)
                {
                  v14 = v1220;
                  if (v1235 > v521)
                    goto LABEL_1211;
                  v980 = v516;
                  v981 = v515;
                  v982 = apr_palloc(p, 0x38uLL);
                  v983 = v982;
                  v984 = 59;
LABEL_1255:
                  *(_DWORD *)v982 = v984;
                  *((_DWORD *)v982 + 1) = v512;
                  v982[1] = v513;
                  v985 = v982 + 1;
                  v982[2] = v514;
                  v982[3] = -1;
                  v982[4] = 0;
                  v982[5] = v981;
                  v982[6] = v980;
                  v986 = *find_entry((uint64_t)ht, (_BYTE *)v982 + 8, 8uLL, 0);
                  if (v986)
                    v986 = *(_QWORD *)(v986 + 32);
                  v983[4] = v986;
                  apr_hash_set(ht, v985, 8, v983);
                  v983[3] = v521;
                  goto LABEL_1211;
                }
                v14 = v1220;
                v524 = atomic_load((unsigned int *)(v118 + 4));
                v525 = v517 + (v524 >> 6);
                v526 = (HIDWORD(v517) + 1);
                v517 = (v526 << 32) | v517;
                if ((_DWORD)v526 == v525 - 1)
                {
                  v517 = (v526 << 32) | v526;
                  v118 = *(_QWORD *)(v118 + 40);
                  continue;
                }
                goto LABEL_680;
              }
            }
          }
          break;
        }
        v527 = v515;
        v528 = v516;
        v529 = (char *)apr_palloc(p, 0x38uLL);
        v530 = v529;
        v531 = 59;
        goto LABEL_704;
      case 21:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        ++DWORD1(v1245);
        v122 = *(_QWORD *)(v37 + 32);
        if (v122)
        {
          v123 = 0;
          while (1)
          {
            v124 = atomic_load((unsigned int *)(v122 + 4));
            v125 = v123 + (v124 >> 6) - 1;
            if ((int)v125 > 0)
              break;
            v122 = *(_QWORD *)(v122 + 40);
            v123 = v125;
            if (!v122)
            {
              v123 = v125;
              goto LABEL_692;
            }
          }
        }
        else
        {
          v123 = 0;
        }
        v125 = 0;
LABEL_692:
        v512 = 0;
        v513 = 0;
        v514 = 0;
        v532 = 0;
        v533 = 0;
        v534 = v123 | (unint64_t)(v125 << 32);
        while (2)
        {
          v535 = v122 + 64;
LABEL_694:
          if (v122)
          {
            v536 = HIDWORD(v534) - v534;
            if ((*(_BYTE *)(v535 + ((uint64_t)(HIDWORD(v534) - (int)v534) << 6) + 15) & 8) != 0)
            {
              v537 = v535 + ((uint64_t)v536 << 6);
              v521 = *(_QWORD *)v537;
              if (*(_QWORD *)v537 < v1236 + v1235)
              {
                v538 = *(_DWORD *)(v537 + 8);
                if (v538 == -15921)
                {
                  v539 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v537, *(unsigned __int8 *)(v535 + ((uint64_t)v536 << 6) + 13), v1239);
                  v514 = *(_QWORD *)v537;
                  v512 = *(_DWORD *)(v537 + 8);
                  v532 = *(_QWORD *)v539;
                  v513 = *((_QWORD *)v539 + 1);
                  v533 = *((_QWORD *)v539 + 2);
                }
                else if (v538 == -15935)
                {
                  v14 = v1220;
                  if (v1235 > v521)
                    goto LABEL_1211;
                  v980 = v533;
                  v981 = v532;
                  v982 = apr_palloc(p, 0x38uLL);
                  v983 = v982;
                  v984 = 58;
                  goto LABEL_1255;
                }
                v14 = v1220;
                v540 = atomic_load((unsigned int *)(v122 + 4));
                v541 = v534 + (v540 >> 6);
                v542 = (HIDWORD(v534) + 1);
                v534 = (v542 << 32) | v534;
                if ((_DWORD)v542 == v541 - 1)
                {
                  v534 = (v542 << 32) | v542;
                  v122 = *(_QWORD *)(v122 + 40);
                  continue;
                }
                goto LABEL_694;
              }
            }
          }
          break;
        }
        v527 = v532;
        v528 = v533;
        v529 = (char *)apr_palloc(p, 0x38uLL);
        v530 = v529;
        v531 = 58;
LABEL_704:
        *(_DWORD *)v529 = v531;
        *((_DWORD *)v529 + 1) = v512;
        *((_QWORD *)v529 + 1) = v513;
        v543 = v529 + 8;
        v544 = -1;
        *((_QWORD *)v529 + 2) = v514;
        *((_QWORD *)v529 + 3) = -1;
        *((_QWORD *)v529 + 4) = 0;
        *((_QWORD *)v529 + 5) = v527;
        *((_QWORD *)v529 + 6) = v528;
        goto LABEL_1008;
      case 22:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        BYTE2(__src[0]) = 0;
        LOWORD(__src[0]) = 0;
        ++DWORD2(v1245);
        v126 = *(_QWORD *)(v37 + 32);
        if (v126)
        {
          v127 = 0;
          while (1)
          {
            v128 = atomic_load((unsigned int *)(v126 + 4));
            v129 = v127 + (v128 >> 6) - 1;
            if ((int)v129 > 0)
              break;
            v126 = *(_QWORD *)(v126 + 40);
            v127 = v129;
            if (!v126)
            {
              v127 = v129;
              goto LABEL_707;
            }
          }
        }
        else
        {
          v127 = 0;
        }
        v129 = 0;
LABEL_707:
        v545 = 0;
        v1178 = 0;
        v1193 = 0;
        v1210 = 0;
        v1123 = 0;
        v1165 = 0;
        v1108 = 0;
        LOBYTE(v1115) = 0;
        LOBYTE(v1092) = 0;
        v546 = v127 | (unint64_t)(v129 << 32);
        v1147 = 3;
        v1132 = 1;
        v1096 = -1;
        v1101 = 0;
        LOBYTE(v1088) = 1;
        while (2)
        {
          v547 = v126 + 64;
LABEL_709:
          if (v126)
          {
            v548 = HIDWORD(v546) - v546;
            if ((*(_BYTE *)(v547 + ((uint64_t)(HIDWORD(v546) - (int)v546) << 6) + 15) & 8) != 0)
            {
              v549 = v548;
              v550 = v547 + ((uint64_t)v548 << 6);
              v292 = *(_QWORD *)v550;
              if (*(_QWORD *)v550 < v1236 + v1235)
              {
                v552 = (int *)(v550 + 8);
                v551 = *(_DWORD *)(v550 + 8);
                if ((v551 + 16349) >= 5)
                {
                  if (v551 == -16344)
                  {
                    if (v1235 > v292)
                      goto LABEL_1211;
                    v1030 = (char *)apr_palloc(p, 0x50uLL);
                    *(_DWORD *)v1030 = 27;
                    *((_DWORD *)v1030 + 1) = v545;
                    *((_QWORD *)v1030 + 1) = v1178;
                    v1031 = v1030 + 8;
                    *((_QWORD *)v1030 + 2) = v1210;
                    *((_QWORD *)v1030 + 3) = v1096;
                    *((_QWORD *)v1030 + 4) = 0;
                    *((_QWORD *)v1030 + 5) = v1193;
                    *((_QWORD *)v1030 + 6) = v1101;
                    *((_QWORD *)v1030 + 7) = v1123;
                    *((_DWORD *)v1030 + 16) = v1165;
                    *((_DWORD *)v1030 + 17) = v1108;
                    v1030[72] = v1132;
                    v1030[73] = v1147;
                    v1030[74] = v1115;
                    v1030[75] = v1092;
                    v1030[76] = v1088;
                    v1032 = __src[0];
                    v1030[79] = BYTE2(__src[0]);
                    *(_WORD *)(v1030 + 77) = v1032;
                    goto LABEL_1296;
                  }
                }
                else if (v1235 <= v292)
                {
                  v553 = apr_palloc(p, 0x50uLL);
                  *(_DWORD *)v553 = 27;
                  *((_DWORD *)v553 + 1) = v545;
                  v553[1] = v1178;
                  v553[2] = v1210;
                  v553[3] = v1096;
                  v553[4] = 0;
                  v553[5] = v1193;
                  v553[6] = v1101;
                  v553[7] = v1123;
                  *((_DWORD *)v553 + 16) = v1165;
                  *((_DWORD *)v553 + 17) = v1108;
                  *((_BYTE *)v553 + 72) = v1132;
                  *((_BYTE *)v553 + 73) = v1147;
                  *((_BYTE *)v553 + 74) = v1115;
                  *((_BYTE *)v553 + 75) = v1092;
                  *((_BYTE *)v553 + 76) = v1088;
                  v554 = __src[0];
                  *((_BYTE *)v553 + 79) = BYTE2(__src[0]);
                  *(_WORD *)((char *)v553 + 77) = v554;
                  v555 = *find_entry((uint64_t)ht, (_BYTE *)v553 + 8, 8uLL, 0);
                  if (v555)
                    v555 = *(_QWORD *)(v555 + 32);
                  v553[4] = v555;
                  apr_hash_set(ht, v553 + 1, 8, v553);
                  v553[3] = v292;
                  v551 = *v552;
                  v547 = v126 + 64;
                }
                v556 = v1239;
                if (v551 <= -16316)
                {
                  switch(v551)
                  {
                    case -16349:
                      v558 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v550, *(unsigned __int8 *)(v547 + (v549 << 6) + 13), v1239);
                      v1101 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v550, v558[8], v556);
                      break;
                    case -16348:
                      v1108 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v550, *(unsigned __int8 *)(v547 + (v549 << 6) + 13), v1239)+ 2);
                      break;
                    case -16347:
                      v1092 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v550, *(unsigned __int8 *)(v547 + (v549 << 6) + 13), v1239)+ 2);
                      break;
                    case -16346:
                      v1088 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v550, *(unsigned __int8 *)(v547 + (v549 << 6) + 13), v1239)+ 2);
                      break;
                    case -16345:
                      v1115 = *((_DWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v550, *(unsigned __int8 *)(v547 + (v549 << 6) + 13), v1239)+ 2);
                      break;
                    case -16344:
                      v1096 = *(_QWORD *)v550;
                      break;
                    default:
                      if (v551 == -16316)
                      {
                        v561 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v550, *(unsigned __int8 *)(v547 + (v549 << 6) + 13), v1239);
                        v545 = *v552;
                        v1178 = *((_QWORD *)v561 + 1);
                        v1193 = *(_QWORD *)v561;
                        v1210 = *(_QWORD *)v550;
                        v560 = 64;
LABEL_730:
                        v1165 = v560;
                      }
                      break;
                  }
LABEL_736:
                  v557 = HIDWORD(v546);
                }
                else
                {
                  v557 = HIDWORD(v546);
                  switch(v551)
                  {
                    case -15809:
                    case -15808:
                      v1147 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v550, *(unsigned __int8 *)(v547 + (v549 << 6) + 13), v1239)[8];
                      break;
                    case -15807:
                      break;
                    case -15806:
                    case -15805:
                      v1132 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v550, *(unsigned __int8 *)(v547 + (v549 << 6) + 13), v1239)[8];
                      break;
                    default:
                      if (v551 == -16315)
                      {
                        v562 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v550, *(unsigned __int8 *)(v547 + (v549 << 6) + 13), v1239);
                        v545 = *v552;
                        v1178 = *((_QWORD *)v562 + 1);
                        v1193 = *(_QWORD *)v562;
                        v1210 = *(_QWORD *)v550;
                        v560 = *((_DWORD *)v562 + 4);
                      }
                      else
                      {
                        if (v551 != -16165)
                          goto LABEL_736;
                        v559 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v550, *(unsigned __int8 *)(v547 + (v549 << 6) + 13), v1239);
                        v545 = *v552;
                        v1178 = *((_QWORD *)v559 + 1);
                        v1193 = *(_QWORD *)v559;
                        v1210 = *(_QWORD *)v550;
                        v1123 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v550, v559[16], v556);
                        v560 = *(_DWORD *)v1123;
                      }
                      goto LABEL_730;
                  }
                }
                v563 = atomic_load((unsigned int *)(v126 + 4));
                v564 = v546 + (v563 >> 6);
                v565 = (v557 + 1);
                v546 = (v565 << 32) | v546;
                if ((_DWORD)v565 == v564 - 1)
                {
                  v546 = (v565 << 32) | v565;
                  v126 = *(_QWORD *)(v126 + 40);
                  continue;
                }
                goto LABEL_709;
              }
            }
          }
          break;
        }
        v306 = apr_palloc(p, 0x50uLL);
        *(_DWORD *)v306 = 27;
        *((_DWORD *)v306 + 1) = v545;
        v306[1] = v1178;
        v307 = v306 + 1;
        v306[2] = v1210;
        v306[3] = v1096;
        v306[4] = 0;
        v306[5] = v1193;
        v306[6] = v1101;
        v306[7] = v1123;
        *((_DWORD *)v306 + 16) = v1165;
        *((_DWORD *)v306 + 17) = v1108;
        *((_BYTE *)v306 + 72) = v1132;
        *((_BYTE *)v306 + 73) = v1147;
        *((_BYTE *)v306 + 74) = v1115;
        *((_BYTE *)v306 + 75) = v1092;
        *((_BYTE *)v306 + 76) = v1088;
        v566 = __src[0];
        *((_BYTE *)v306 + 79) = BYTE2(__src[0]);
        *(_WORD *)((char *)v306 + 77) = v566;
        goto LABEL_922;
      case 23:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        ++HIDWORD(v1245);
        v130 = *(_QWORD *)(v37 + 32);
        if (v130)
        {
          v131 = 0;
          while (1)
          {
            v132 = atomic_load((unsigned int *)(v130 + 4));
            v133 = v131 + (v132 >> 6) - 1;
            if ((int)v133 > 0)
              break;
            v130 = *(_QWORD *)(v130 + 40);
            v131 = v133;
            if (!v130)
            {
              v131 = v133;
              goto LABEL_742;
            }
          }
        }
        else
        {
          v131 = 0;
        }
        v133 = 0;
LABEL_742:
        v567 = 0;
        v568 = 0;
        v1194 = 0;
        v1211 = 0;
        v569 = 0;
        v570 = v131 | (unint64_t)(v133 << 32);
        while (2)
        {
          v571 = v130 + 64;
LABEL_744:
          if (v130)
          {
            v572 = HIDWORD(v570) - v570;
            if ((*(_BYTE *)(v571 + ((uint64_t)(HIDWORD(v570) - (int)v570) << 6) + 15) & 8) != 0)
            {
              v573 = v571 + ((uint64_t)v572 << 6);
              v451 = *(_QWORD *)v573;
              if (*(_QWORD *)v573 < v1236 + v1235)
              {
                v574 = *(_DWORD *)(v573 + 8);
                if (v574 == -15350)
                {
                  v575 = v1239;
                  v576 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v573, *(unsigned __int8 *)(v571 + ((uint64_t)v572 << 6) + 13), v1239);
                  v567 = *(_DWORD *)(v573 + 8);
                  v568 = *((_QWORD *)v576 + 1);
                  v1194 = *(_QWORD *)v573;
                  v1211 = *(_QWORD *)v576;
                  v569 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v573, v576[24], v575);
                }
                else if (v574 == -15332)
                {
                  v14 = v1220;
                  if (v1235 > v451)
                    goto LABEL_1211;
                  v977 = (char *)apr_palloc(p, 0x40uLL);
                  *(_DWORD *)v977 = 52;
                  *((_DWORD *)v977 + 1) = v567;
                  *((_QWORD *)v977 + 1) = v568;
                  v979 = v977 + 8;
                  *((_QWORD *)v977 + 2) = v1194;
                  *((_QWORD *)v977 + 3) = -1;
                  *((_QWORD *)v977 + 4) = 0;
                  *((_QWORD *)v977 + 5) = v1211;
                  *((_QWORD *)v977 + 6) = 0;
                  *((_QWORD *)v977 + 7) = v569;
                  goto LABEL_1278;
                }
                v14 = v1220;
                v577 = atomic_load((unsigned int *)(v130 + 4));
                v578 = v570 + (v577 >> 6);
                v579 = (HIDWORD(v570) + 1);
                v570 = (v579 << 32) | v570;
                if ((_DWORD)v579 == v578 - 1)
                {
                  v570 = (v579 << 32) | v579;
                  v130 = *(_QWORD *)(v130 + 40);
                  continue;
                }
                goto LABEL_744;
              }
            }
          }
          break;
        }
        v189 = apr_palloc(p, 0x40uLL);
        *(_DWORD *)v189 = 52;
        *((_DWORD *)v189 + 1) = v567;
        v189[1] = v568;
        v190 = v189 + 1;
        v425 = -1;
        v189[2] = v1194;
        v189[3] = -1;
        v189[4] = 0;
        v189[5] = v1211;
        v189[6] = 0;
        v189[7] = v569;
        goto LABEL_1068;
      case 24:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        BYTE2(__src[0]) = 0;
        LOWORD(__src[0]) = 0;
        LODWORD(v1246) = v1246 + 1;
        v134 = *(_QWORD *)(v37 + 32);
        if (v134)
        {
          v135 = 0;
          while (1)
          {
            v136 = atomic_load((unsigned int *)(v134 + 4));
            v137 = v135 + (v136 >> 6) - 1;
            if ((int)v137 > 0)
              break;
            v134 = *(_QWORD *)(v134 + 40);
            v135 = v137;
            if (!v134)
            {
              v135 = v137;
              goto LABEL_756;
            }
          }
        }
        else
        {
          v135 = 0;
        }
        v137 = 0;
LABEL_756:
        v580 = 0;
        v1133 = 0;
        v1195 = 0;
        v1225 = 0;
        v1148 = 0;
        v581 = v135 | (unint64_t)(v137 << 32);
        v582 = 0;
        v1166 = 0;
        v1179 = -1;
        while (2)
        {
          v583 = v134 + 64;
LABEL_758:
          if (!v134
            || (v584 = HIDWORD(v581) - v581,
                (*(_BYTE *)(v583 + ((uint64_t)(HIDWORD(v581) - (int)v581) << 6) + 15) & 8) == 0)
            || (v585 = v584, v586 = v583 + ((uint64_t)v584 << 6),
                             v314 = *(_QWORD *)v586,
                             *(_QWORD *)v586 >= v1236 + v1235))
          {
            v363 = apr_palloc(p, 0x40uLL);
            *(_DWORD *)v363 = 68;
            *((_DWORD *)v363 + 1) = v580;
            v363[1] = v1133;
            v444 = v363 + 1;
            v363[2] = v1166;
            v363[3] = v1179;
            v363[4] = 0;
            v363[5] = v1195;
            v363[6] = v1225;
            *((_DWORD *)v363 + 14) = v582;
            *((_BYTE *)v363 + 60) = v1148;
            *(_WORD *)((char *)v363 + 61) = __src[0];
            *((_BYTE *)v363 + 63) = BYTE2(__src[0]);
LABEL_778:
            v599 = *find_entry((uint64_t)ht, v444, 8uLL, 0);
            if (v599)
              v599 = *(_QWORD *)(v599 + 32);
            v363[4] = v599;
            v365 = ht;
            v366 = v444;
LABEL_781:
            apr_hash_set(v365, v366, 8, v363);
            v363[3] = -1;
            goto LABEL_1211;
          }
          v588 = (int *)(v586 + 8);
          v587 = *(_DWORD *)(v586 + 8);
          if (v587 == -15411)
          {
            if (v1235 > v314)
            {
              v589 = v1239;
              break;
            }
            v590 = apr_palloc(p, 0x40uLL);
            *(_DWORD *)v590 = 68;
            *((_DWORD *)v590 + 1) = v580;
            v590[1] = v1133;
            v590[2] = v1166;
            v590[3] = v1179;
            v590[4] = 0;
            v590[5] = v1195;
            v590[6] = v1225;
            *((_DWORD *)v590 + 14) = v582;
            *((_BYTE *)v590 + 60) = v1148;
            *(_WORD *)((char *)v590 + 61) = __src[0];
            *((_BYTE *)v590 + 63) = BYTE2(__src[0]);
            v591 = *find_entry((uint64_t)ht, (_BYTE *)v590 + 8, 8uLL, 0);
            if (v591)
              v591 = *(_QWORD *)(v591 + 32);
            v590[4] = v591;
            apr_hash_set(ht, v590 + 1, 8, v590);
            v590[3] = v314;
            v587 = *v588;
            v583 = v134 + 64;
          }
          else if (v587 == -15801)
          {
            if (v1235 > v314)
              goto LABEL_1211;
            v966 = (char *)apr_palloc(p, 0x40uLL);
            *(_DWORD *)v966 = 68;
            *((_DWORD *)v966 + 1) = v580;
            *((_QWORD *)v966 + 1) = v1133;
            *((_QWORD *)v966 + 2) = v1166;
            *((_QWORD *)v966 + 3) = v1179;
            *((_QWORD *)v966 + 4) = 0;
            *((_QWORD *)v966 + 5) = v1195;
            *((_QWORD *)v966 + 6) = v1225;
            *((_DWORD *)v966 + 14) = v582;
            v966[60] = v1148;
            *(_WORD *)(v966 + 61) = __src[0];
            v966[63] = BYTE2(__src[0]);
            v987 = *find_entry((uint64_t)ht, v966 + 8, 8uLL, 0);
            if (v987)
              v987 = *(_QWORD *)(v987 + 32);
            *((_QWORD *)v966 + 4) = v987;
            v969 = ht;
            v970 = v966 + 8;
            goto LABEL_1264;
          }
          if (v587 == -15801)
          {
            v1179 = *(_QWORD *)v586;
            goto LABEL_775;
          }
          v589 = v1239;
          if (v587 != -15411)
          {
            if (v587 == -15793)
            {
              v592 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v586, *(unsigned __int8 *)(v583 + (v585 << 6) + 13), v1239);
              v1166 = *(_QWORD *)v586;
              v580 = *v588;
              v1133 = *((_QWORD *)v592 + 1);
              v1195 = *(_QWORD *)v592;
              v593 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v586, v592[16], v589);
              v583 = v134 + 64;
              v582 = *((_DWORD *)v593 + 6);
              v1225 = v593;
              v1148 = v593[34];
            }
LABEL_775:
            v596 = atomic_load((unsigned int *)(v134 + 4));
            v597 = v581 + (v596 >> 6);
            v598 = (HIDWORD(v581) + 1);
            v581 = (v598 << 32) | v581;
            if ((_DWORD)v598 == v597 - 1)
            {
              v581 = (v598 << 32) | v598;
              v134 = *(_QWORD *)(v134 + 40);
              continue;
            }
            goto LABEL_758;
          }
          break;
        }
        v594 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v586, *(unsigned __int8 *)(v583 + (v585 << 6) + 13), v589);
        v595 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v586, v594[8], v589);
        v583 = v134 + 64;
        v1225 = v595;
        goto LABEL_775;
      case 25:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        ++DWORD1(v1246);
        v138 = *(_QWORD *)(v37 + 32);
        if (v138)
        {
          v139 = 0;
          while (1)
          {
            v140 = atomic_load((unsigned int *)(v138 + 4));
            v141 = v139 + (v140 >> 6) - 1;
            if ((int)v141 > 0)
              break;
            v138 = *(_QWORD *)(v138 + 40);
            v139 = v141;
            if (!v138)
            {
              v139 = v141;
              goto LABEL_784;
            }
          }
        }
        else
        {
          v139 = 0;
        }
        v141 = 0;
LABEL_784:
        v600 = 0;
        v601 = 0;
        v1196 = 0;
        v1212 = 0;
        v602 = 0;
        v603 = 0;
        v604 = v139 | (unint64_t)(v141 << 32);
        while (2)
        {
          v605 = v138 + 64;
LABEL_786:
          if (v138)
          {
            v606 = HIDWORD(v604) - v604;
            if ((*(_BYTE *)(v605 + ((uint64_t)(HIDWORD(v604) - (int)v604) << 6) + 15) & 8) != 0)
            {
              v607 = v605 + ((uint64_t)v606 << 6);
              v416 = *(_QWORD *)v607;
              if (*(_QWORD *)v607 < v1236 + v1235)
              {
                v608 = *(_DWORD *)(v607 + 8);
                if (v608 == -15900)
                {
                  v609 = v1239;
                  v610 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v607, *(unsigned __int8 *)(v605 + ((uint64_t)v606 << 6) + 13), v1239);
                  v600 = *(_DWORD *)(v607 + 8);
                  v601 = *((_QWORD *)v610 + 1);
                  v1196 = *(_QWORD *)v607;
                  v1212 = *(_QWORD *)v610;
                  v602 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v607, v610[24], v609);
                  v603 = *((_DWORD *)v610 + 4);
                }
                else if (v608 == -15769)
                {
                  v14 = v1220;
                  if (v1235 > v416)
                    goto LABEL_1211;
                  v988 = v603;
                  v989 = apr_palloc(p, 0x40uLL);
                  *(_DWORD *)v989 = 73;
                  *((_DWORD *)v989 + 1) = v600;
                  v989[1] = v601;
                  v990 = v989 + 1;
                  v989[2] = v1196;
                  v989[3] = -1;
                  v989[4] = 0;
                  v989[5] = v1212;
                  v989[6] = v602;
                  *((_DWORD *)v989 + 14) = v988;
                  *((_DWORD *)v989 + 15) = 0;
                  goto LABEL_1267;
                }
                v14 = v1220;
                v611 = atomic_load((unsigned int *)(v138 + 4));
                v612 = v604 + (v611 >> 6);
                v613 = (HIDWORD(v604) + 1);
                v604 = (v613 << 32) | v604;
                if ((_DWORD)v613 == v612 - 1)
                {
                  v604 = (v613 << 32) | v613;
                  v138 = *(_QWORD *)(v138 + 40);
                  continue;
                }
                goto LABEL_786;
              }
            }
          }
          break;
        }
        v614 = v603;
        v189 = apr_palloc(p, 0x40uLL);
        *(_DWORD *)v189 = 73;
        *((_DWORD *)v189 + 1) = v600;
        v189[1] = v601;
        v190 = v189 + 1;
        v425 = -1;
        v189[2] = v1196;
        v189[3] = -1;
        v189[4] = 0;
        v189[5] = v1212;
        v189[6] = v602;
        *((_DWORD *)v189 + 14) = v614;
        *((_DWORD *)v189 + 15) = 0;
        goto LABEL_1068;
      case 26:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        ++DWORD2(v1246);
        v142 = *(_QWORD *)(v37 + 32);
        if (v142)
        {
          v143 = 0;
          while (1)
          {
            v144 = atomic_load((unsigned int *)(v142 + 4));
            v145 = v143 + (v144 >> 6) - 1;
            if ((int)v145 > 0)
              break;
            v142 = *(_QWORD *)(v142 + 40);
            v143 = v145;
            if (!v142)
            {
              v143 = v145;
              goto LABEL_798;
            }
          }
        }
        else
        {
          v143 = 0;
        }
        v145 = 0;
LABEL_798:
        v615 = 0;
        v616 = 0;
        v617 = 0;
        v618 = 0;
        v619 = 0;
        v620 = 0;
        v621 = 0;
        v622 = 0;
        v1213 = 0;
        v1180 = 0;
        v1197 = 0;
        LODWORD(v1167) = 0;
        v623 = v143 | (unint64_t)(v145 << 32);
        v624 = 0;
        v625 = 0;
        while (2)
        {
          v626 = v142 + 64;
LABEL_800:
          if (v142
            && (v627 = HIDWORD(v623) - v623,
                (*(_BYTE *)(v626 + ((uint64_t)(HIDWORD(v623) - (int)v623) << 6) + 15) & 8) != 0)
            && (v628 = (uint64_t *)(v626 + ((uint64_t)v627 << 6)), v197 = *v628, *v628 < v1236 + v1235))
          {
            v630 = (unsigned int *)(v628 + 1);
            v629 = *((_DWORD *)v628 + 2);
            if (v629 != -6139)
            {
              v631 = v1239;
              if (v629 <= -6123)
              {
                switch(v629)
                {
                  case -6143:
                    v635 = GTTraceFunc_argumentBytesWithMap(v628, *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13), v1239);
                    v1149 = *v628;
                    v636 = *v630;
                    v638 = *(_QWORD *)v635;
                    v637 = *((_QWORD *)v635 + 1);
                    v639 = GTTraceFunc_argumentBytesWithMap(v628, v635[16], v631);
                    v640 = v635[24];
                    v620 = v639;
                    v641 = GTTraceFunc_argumentBytesWithMap(v628, v640, v631);
                    v615 = v636;
                    v619 = v638;
                    v616 = v637;
                    v617 = v1149;
                    v626 = v142 + 64;
                    v621 = v641;
                    v622 = (unint64_t)v641 >> 32;
                    v618 = v636;
                    break;
                  case -6141:
LABEL_812:
                    v648 = GTTraceFunc_argumentBytesWithMap(v628, *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13), v1239);
                    v626 = v142 + 64;
                    v617 = *v628;
                    v618 = *v630;
                    v619 = *(_QWORD *)v648;
                    v616 = *((_QWORD *)v648 + 1);
                    v620 = (char *)*((_QWORD *)v648 + 2);
                    v621 = (char *)*((unsigned int *)v648 + 6);
                    v622 = *((unsigned int *)v648 + 7);
                    LODWORD(v1167) = *((_DWORD *)v648 + 9);
                    v1213 = *((_DWORD *)v648 + 8);
                    v1197 = *((_DWORD *)v648 + 8) >> 8;
                    v624 = *((_QWORD *)v648 + 5);
                    goto LABEL_821;
                  case -6134:
                    v659 = GTTraceFunc_argumentBytesWithMap(v628, *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13), v1239);
                    v626 = v142 + 64;
                    v617 = *v628;
                    v618 = *v630;
                    v619 = *(_QWORD *)v659;
                    v616 = *((_QWORD *)v659 + 1);
                    v1180 = v1180 & 0xFFFFFFFFFFFFFF00 | v659[16];
                    v620 = (char *)*((_QWORD *)v659 + 3);
                    v621 = (char *)*((unsigned int *)v659 + 8);
                    v622 = *((unsigned int *)v659 + 9);
                    v624 = *((_QWORD *)v659 + 5);
                    v625 = *((_QWORD *)v659 + 6);
                    goto LABEL_821;
                  case -6133:
                    v660 = GTTraceFunc_argumentBytesWithMap(v628, *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13), v1239);
                    v626 = v142 + 64;
                    v617 = *v628;
                    v618 = *v630;
                    v619 = *(_QWORD *)v660;
                    v616 = *((_QWORD *)v660 + 1);
                    v621 = (char *)*((unsigned int *)v660 + 5);
                    v620 = (char *)*((int *)v660 + 4);
                    v622 = *((unsigned int *)v660 + 6);
                    v1213 = *((_DWORD *)v660 + 7);
                    v1197 = *((_DWORD *)v660 + 7) >> 8;
                    goto LABEL_821;
                  case -6131:
                    v661 = GTTraceFunc_argumentBytesWithMap(v628, *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13), v1239);
                    v1135 = *v630;
                    v1152 = *v628;
                    v663 = *(_QWORD *)v661;
                    v662 = *((_QWORD *)v661 + 1);
                    v664 = GTTraceFunc_argumentBytesWithMap(v628, v661[16], v631);
                    v657 = GTTraceFunc_argumentBytesWithMap(v628, v661[24], v631);
                    v619 = v663;
                    v618 = v1135;
                    v617 = v1152;
                    v616 = v662;
                    v626 = v142 + 64;
                    v658 = (unint64_t)v657 >> 32;
                    v665 = v661[32];
                    v620 = v664;
                    v1213 = v665;
LABEL_819:
                    v615 = v618;
                    v621 = v657;
                    v622 = v658;
                    break;
                  case -6129:
                    v666 = GTTraceFunc_argumentBytesWithMap(v628, *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13), v1239);
                    v1136 = *v630;
                    v1153 = *v628;
                    v668 = *(_QWORD *)v666;
                    v667 = *((_QWORD *)v666 + 1);
                    v620 = (char *)*((int *)v666 + 4);
                    v669 = GTTraceFunc_argumentBytesWithMap(v628, v666[24], v631);
                    v619 = v668;
                    v616 = v667;
                    v626 = v142 + 64;
                    v1213 = v669;
                    v1197 = v669 >> 8;
                    v1167 = (unint64_t)v669 >> 32;
                    v621 = (char *)*((unsigned int *)v666 + 8);
                    v622 = *((unsigned int *)v666 + 9);
                    v618 = v1136;
                    v617 = v1153;
                    goto LABEL_821;
                  default:
                    break;
                }
              }
              else
              {
                switch(v629)
                {
                  case -6122:
                    v649 = GTTraceFunc_argumentBytesWithMap(v628, *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13), v1239);
                    v626 = v142 + 64;
                    v617 = *v628;
                    v618 = *v630;
                    v619 = *(_QWORD *)v649;
                    v616 = *((_QWORD *)v649 + 1);
                    v1180 = v1180 & 0xFFFFFFFFFFFF0000 | v649[16] | ((unint64_t)*((_DWORD *)v649 + 5) << 8);
                    v620 = (char *)*((_QWORD *)v649 + 3);
                    v621 = (char *)*((unsigned int *)v649 + 8);
                    v622 = *((unsigned int *)v649 + 9);
                    LODWORD(v1167) = *((_DWORD *)v649 + 11);
                    v1213 = *((_DWORD *)v649 + 10);
                    v1197 = *((_DWORD *)v649 + 10) >> 8;
                    v624 = *((_QWORD *)v649 + 6);
                    v625 = *((_QWORD *)v649 + 7);
                    break;
                  case -6121:
                  case -6120:
                  case -6118:
                  case -6117:
                  case -6115:
                  case -6114:
                  case -6113:
                  case -6112:
                    goto LABEL_822;
                  case -6119:
                  case -6110:
                    v632 = v622;
                    v633 = v621;
                    v634 = GTTraceFunc_argumentBytesWithMap(v628, *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13), v1239);
                    v622 = v632;
                    v621 = v633;
                    v626 = v142 + 64;
                    v617 = *v628;
                    v618 = *v630;
                    v619 = *(_QWORD *)v634;
                    v616 = *((_QWORD *)v634 + 1);
                    break;
                  case -6116:
                    v650 = GTTraceFunc_argumentBytesWithMap(v628, *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13), v1239);
                    v626 = v142 + 64;
                    v617 = *v628;
                    v618 = *v630;
                    v619 = *(_QWORD *)v650;
                    v616 = *((_QWORD *)v650 + 1);
                    v620 = (char *)*((_QWORD *)v650 + 2);
                    v621 = (char *)*((unsigned int *)v650 + 6);
                    v622 = *((unsigned int *)v650 + 7);
                    v1213 = *((_DWORD *)v650 + 8);
                    v1197 = *((_DWORD *)v650 + 8) >> 8;
                    v624 = *((_QWORD *)v650 + 5);
                    v625 = *((_QWORD *)v650 + 6);
                    LODWORD(v1167) = *((_DWORD *)v650 + 9);
                    v1180 = *((_QWORD *)v650 + 7);
                    break;
                  case -6111:
                    v651 = GTTraceFunc_argumentBytesWithMap(v628, *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13), v1239);
                    v1151 = *v628;
                    v652 = *v630;
                    v654 = *(_QWORD *)v651;
                    v653 = *((_QWORD *)v651 + 1);
                    v655 = GTTraceFunc_argumentBytesWithMap(v628, v651[16], v631);
                    v656 = v651[24];
                    v620 = v655;
                    v657 = GTTraceFunc_argumentBytesWithMap(v628, v656, v631);
                    v619 = v654;
                    v618 = v652;
                    v616 = v653;
                    v617 = v1151;
                    v626 = v142 + 64;
                    v658 = (unint64_t)v657 >> 32;
                    goto LABEL_819;
                  case -6109:
                    goto LABEL_812;
                  default:
                    if (v629 != -6096 && v629 != -6095)
                      goto LABEL_822;
                    v1134 = v621;
                    v1150 = v622;
                    v642 = GTTraceFunc_argumentBytesWithMap(v628, *(unsigned __int8 *)(v626 + ((uint64_t)v627 << 6) + 13), v1239);
                    v643 = *v628;
                    v644 = *v630;
                    v646 = *(_QWORD *)v642;
                    v645 = *((_QWORD *)v642 + 1);
                    v647 = GTTraceFunc_argumentBytesWithMap(v628, v642[16], v631);
                    v621 = v1134;
                    v622 = v1150;
                    v619 = v646;
                    v618 = v644;
                    v616 = v645;
                    v617 = v643;
                    v626 = v142 + 64;
                    v620 = v647;
                    break;
                }
LABEL_821:
                v615 = v618;
              }
LABEL_822:
              v670 = atomic_load((unsigned int *)(v142 + 4));
              v671 = v623 + (v670 >> 6);
              v672 = (HIDWORD(v623) + 1);
              v623 = (v672 << 32) | v623;
              if ((_DWORD)v672 == v671 - 1)
              {
                v623 = (v672 << 32) | v672;
                v142 = *(_QWORD *)(v142 + 40);
                continue;
              }
              goto LABEL_800;
            }
            v1155 = v622;
            if (v1235 > v197)
              goto LABEL_1211;
            v954 = v615;
            v955 = (int)v621;
            v956 = v619;
            v957 = v616;
            v958 = v617;
            v679 = (char *)apr_palloc(p, 0x68uLL);
            v210 = v679;
            *(_DWORD *)v679 = 15;
            *((_DWORD *)v679 + 1) = v954;
            *((_QWORD *)v679 + 1) = v957;
            v211 = v679 + 8;
            *((_QWORD *)v679 + 2) = v958;
            *((_QWORD *)v679 + 3) = -1;
            *((_QWORD *)v679 + 4) = 0;
            *((_QWORD *)v679 + 5) = v618;
            *((_QWORD *)v679 + 6) = v956;
            *((_QWORD *)v679 + 7) = v620;
            *((_DWORD *)v679 + 16) = v955;
            *((_DWORD *)v679 + 17) = v1155;
          }
          else
          {
            v673 = v622;
            v674 = v617;
            v675 = v616;
            v676 = v619;
            v677 = (int)v621;
            v678 = v615;
            v679 = (char *)apr_palloc(p, 0x68uLL);
            v210 = v679;
            *(_DWORD *)v679 = 15;
            *((_DWORD *)v679 + 1) = v678;
            *((_QWORD *)v679 + 1) = v675;
            v211 = v679 + 8;
            v197 = -1;
            *((_QWORD *)v679 + 2) = v674;
            *((_QWORD *)v679 + 3) = -1;
            *((_QWORD *)v679 + 4) = 0;
            *((_QWORD *)v679 + 5) = v618;
            *((_QWORD *)v679 + 6) = v676;
            *((_QWORD *)v679 + 7) = v620;
            *((_DWORD *)v679 + 16) = v677;
            *((_DWORD *)v679 + 17) = v673;
          }
          break;
        }
        *((_DWORD *)v679 + 18) = v1213 | (v1197 << 8);
        *((_DWORD *)v679 + 19) = v1167;
        *((_QWORD *)v679 + 10) = v624;
        *((_QWORD *)v679 + 11) = v625;
        *((_QWORD *)v679 + 12) = v1180;
LABEL_826:
        v680 = *find_entry((uint64_t)ht, v211, 8uLL, 0);
        if (v680)
          v680 = *(_QWORD *)(v680 + 32);
        v210[4] = v680;
        apr_hash_set(ht, v211, 8, v210);
        v210[3] = v197;
        goto LABEL_1211;
      case 27:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        BYTE2(__src[0]) = 0;
        LOWORD(__src[0]) = 0;
        ++HIDWORD(v1246);
        v146 = *(_QWORD *)(v37 + 32);
        if (v146)
        {
          v147 = 0;
          while (1)
          {
            v148 = atomic_load((unsigned int *)(v146 + 4));
            v149 = v147 + (v148 >> 6) - 1;
            if ((int)v149 > 0)
              break;
            v146 = *(_QWORD *)(v146 + 40);
            v147 = v149;
            if (!v146)
            {
              v147 = v149;
              goto LABEL_831;
            }
          }
        }
        else
        {
          v147 = 0;
        }
        v149 = 0;
LABEL_831:
        v1181 = 0;
        v1154 = 0;
        v1168 = 0;
        v1198 = 0;
        v1214 = 0;
        v1079 = 0;
        v1082 = 0;
        v1116 = 0;
        v1089 = 0;
        v1093 = 0;
        v1137 = 0;
        v1102 = 0;
        v1085 = 0;
        v1069 = 0;
        v1097 = 0;
        v1071 = 0;
        v1073 = 0;
        v1109 = 0;
        v681 = v147 | (unint64_t)(v149 << 32);
        v1076 = -1;
        while (2)
        {
          v682 = v146 + 64;
LABEL_833:
          if (!v146
            || (v683 = HIDWORD(v681) - v681,
                (*(_BYTE *)(v682 + ((uint64_t)(HIDWORD(v681) - (int)v681) << 6) + 15) & 8) == 0)
            || (v684 = v683, v685 = v682 + ((uint64_t)v683 << 6),
                             v394 = *(_QWORD *)v685,
                             *(_QWORD *)v685 >= v1236 + v1235))
          {
            v306 = apr_palloc(p, 0x88uLL);
            v306[1] = v1154;
            v307 = v306 + 1;
            *(_DWORD *)v306 = 43;
            *((_DWORD *)v306 + 1) = v1181;
            v306[2] = v1198;
            v306[3] = v1076;
            v306[4] = 0;
            v306[5] = v1168;
            v306[6] = v1079;
            v306[7] = v1116;
            v306[8] = v1214;
            v306[9] = v1093;
            v306[10] = v1137;
            v306[11] = v1102;
            v306[12] = v1085;
            v306[13] = v1069;
            v306[14] = v1089;
            v306[15] = v1082;
            *((_WORD *)v306 + 64) = v1097;
            *((_BYTE *)v306 + 130) = v1071;
            *((_BYTE *)v306 + 131) = v1073;
            *((_BYTE *)v306 + 132) = v1109;
            *((_BYTE *)v306 + 135) = BYTE2(__src[0]);
            *(_WORD *)((char *)v306 + 133) = __src[0];
LABEL_922:
            v728 = *find_entry((uint64_t)ht, v307, 8uLL, 0);
            if (v728)
              v728 = *(_QWORD *)(v728 + 32);
            v306[4] = v728;
            apr_hash_set(ht, v307, 8, v306);
            v306[3] = -1;
            goto LABEL_1211;
          }
          v687 = (int *)(v685 + 8);
          v686 = *(_DWORD *)(v685 + 8);
          if (v686 == -16123 || v686 == -10157)
          {
            if (v1235 <= v394)
            {
              v689 = apr_palloc(p, 0x88uLL);
              v689[1] = v1154;
              *(_DWORD *)v689 = 43;
              *((_DWORD *)v689 + 1) = v1181;
              v689[2] = v1198;
              v689[3] = v1076;
              v689[4] = 0;
              v689[5] = v1168;
              v689[6] = v1079;
              v689[7] = v1116;
              v689[8] = v1214;
              v689[9] = v1093;
              v689[10] = v1137;
              v689[11] = v1102;
              v689[12] = v1085;
              v689[13] = v1069;
              v689[14] = v1089;
              v689[15] = v1082;
              *((_WORD *)v689 + 64) = v1097;
              *((_BYTE *)v689 + 130) = v1071;
              *((_BYTE *)v689 + 131) = v1073;
              *((_BYTE *)v689 + 132) = v1109;
              *((_BYTE *)v689 + 135) = BYTE2(__src[0]);
              *(_WORD *)((char *)v689 + 133) = __src[0];
              v690 = *find_entry((uint64_t)ht, (_BYTE *)v689 + 8, 8uLL, 0);
              if (v690)
                v690 = *(_QWORD *)(v690 + 32);
              v689[4] = v690;
              apr_hash_set(ht, v689 + 1, 8, v689);
              v689[3] = v394;
              v686 = *v687;
            }
          }
          else if (v686 == -16293)
          {
            v974 = apr_palloc(p, 0x88uLL);
            v974[1] = v1154;
            v975 = v974 + 1;
            *(_DWORD *)v974 = 43;
            *((_DWORD *)v974 + 1) = v1181;
            v974[2] = v1198;
            v974[3] = v1076;
            v974[4] = 0;
            v974[5] = v1168;
            v974[6] = v1079;
            v974[7] = v1116;
            v974[8] = v1214;
            v974[9] = v1093;
            v974[10] = v1137;
            v974[11] = v1102;
            v974[12] = v1085;
            v974[13] = v1069;
            v974[14] = v1089;
            v974[15] = v1082;
            *((_WORD *)v974 + 64) = v1097;
            *((_BYTE *)v974 + 130) = v1071;
            *((_BYTE *)v974 + 131) = v1073;
            *((_BYTE *)v974 + 132) = v1109;
            *((_BYTE *)v974 + 135) = BYTE2(__src[0]);
            *(_WORD *)((char *)v974 + 133) = __src[0];
LABEL_1282:
            v996 = *find_entry((uint64_t)ht, v975, 8uLL, 0);
            if (v996)
              v996 = *(_QWORD *)(v996 + 32);
            v974[4] = v996;
            apr_hash_set(ht, v975, 8, v974);
            v974[3] = v394;
            goto LABEL_1211;
          }
          v691 = v1239;
          if (v686 <= -15731)
          {
            if (v686 <= -16083)
            {
              if (v686 <= -16124)
              {
                if (v686 == -16293)
                {
                  v1076 = *(_QWORD *)v685;
                }
                else if (v686 == -16290)
                {
                  v706 = v682 + (v684 << 6);
                  v707 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v706 + 13), v1239);
                  v1198 = *(_QWORD *)v685;
                  v1181 = *v687;
                  v1154 = *((_QWORD *)v707 + 1);
                  v1168 = *(_QWORD *)v707;
                  v708 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v706 + 14), v691);
                  v1137 = v708;
                  if (v708)
                    v1214 = *(char **)v708;
                  else
                    v1214 = 0;
                  v713 = HIDWORD(v681);
                  v1116 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v707[16], v691);
                  goto LABEL_918;
                }
              }
              else if (v686 == -16123)
              {
                v714 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v682 + (v684 << 6) + 13), v1239);
                v1214 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v714[8], v691);
              }
              else if (v686 == -16107 || v686 == -16106)
              {
                v692 = v682 + (v684 << 6);
                v693 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v692 + 13), v1239);
                v1198 = *(_QWORD *)v685;
                v1181 = *v687;
                v1154 = *((_QWORD *)v693 + 1);
                v1168 = *(_QWORD *)v693;
                v694 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v692 + 14), v691);
                v1137 = v694;
                if (v694)
                  v1214 = *(char **)v694;
                else
                  v1214 = 0;
                v713 = HIDWORD(v681);
                v1116 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v693[24], v691);
                v1093 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v693[25], v691);
                goto LABEL_918;
              }
LABEL_898:
              v713 = HIDWORD(v681);
              goto LABEL_919;
            }
            if (v686 <= -16039)
            {
              if (v686 == -16082 || v686 == -16081)
              {
                v709 = v682 + (v684 << 6);
                v710 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v709 + 13), v1239);
                v1198 = *(_QWORD *)v685;
                v1181 = *v687;
                v1154 = *((_QWORD *)v710 + 1);
                v1168 = *(_QWORD *)v710;
                v711 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v709 + 14), v691);
                v1137 = v711;
                if (v711)
                  v1214 = *(char **)v711;
                else
                  v1214 = 0;
                v713 = HIDWORD(v681);
                v1116 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v710[32], v691);
                v1093 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v710[33], v691);
                v1079 = *((_QWORD *)v710 + 2);
                goto LABEL_918;
              }
              goto LABEL_898;
            }
            if (v686 == -16038)
            {
              v715 = v682 + (v684 << 6);
              v716 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v715 + 13), v1239);
              v1198 = *(_QWORD *)v685;
              v1181 = *v687;
              v1154 = *((_QWORD *)v716 + 1);
              v1168 = *(_QWORD *)v716;
              v717 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v715 + 14), v691);
              v1137 = v717;
              if (v717)
                v1214 = *(char **)v717;
              else
                v1214 = 0;
              v713 = HIDWORD(v681);
              v1116 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v716[16], v691);
              v1073 = 1;
              goto LABEL_918;
            }
            if (v686 == -15830)
            {
              v718 = v682 + (v684 << 6);
              v719 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v718 + 13), v1239);
              v1198 = *(_QWORD *)v685;
              v1181 = *v687;
              v1154 = *((_QWORD *)v719 + 1);
              v1168 = *(_QWORD *)v719;
              v720 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v718 + 14), v691);
              v1137 = v720;
              if (v720)
                v1214 = *(char **)v720;
              else
                v1214 = 0;
              v713 = HIDWORD(v681);
              v1116 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v719[18], v691);
              v1069 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v719[16], v691);
              v1071 = v719[17];
              goto LABEL_891;
            }
            if (v686 != -15731)
              goto LABEL_898;
LABEL_865:
            v695 = v682 + (v684 << 6);
            v696 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v695 + 13), v1239);
            v1198 = *(_QWORD *)v685;
            v1181 = *v687;
            v1154 = *((_QWORD *)v696 + 1);
            v1168 = *(_QWORD *)v696;
            v697 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v695 + 14), v691);
            v1137 = v697;
            if (v697)
              v1214 = *(char **)v697;
            else
              v1214 = 0;
            v713 = HIDWORD(v681);
            v1102 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v696[24], v691);
LABEL_890:
            v1097 = *((_WORD *)v696 + 8);
LABEL_891:
            v1109 = 1;
LABEL_918:
            v682 = v146 + 64;
LABEL_919:
            v725 = atomic_load((unsigned int *)(v146 + 4));
            v726 = v681 + (v725 >> 6);
            v727 = (v713 + 1);
            v681 = (v727 << 32) | v681;
            if ((_DWORD)v727 == v726 - 1)
            {
              v681 = (v727 << 32) | v727;
              v146 = *(_QWORD *)(v146 + 40);
              continue;
            }
            goto LABEL_833;
          }
          break;
        }
        if (v686 > -15551)
        {
          switch(v686)
          {
            case -15430:
            case -15428:
              goto LABEL_865;
            case -15429:
            case -15427:
              goto LABEL_867;
            default:
              if (v686 == -15550)
              {
                v721 = v682 + (v684 << 6);
                v722 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v721 + 13), v1239);
                v1198 = *(_QWORD *)v685;
                v1181 = *v687;
                v1154 = *((_QWORD *)v722 + 1);
                v1168 = *(_QWORD *)v722;
                v723 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v721 + 14), v691);
                v1137 = v723;
                if (v723)
                  v1214 = *(char **)v723;
                else
                  v1214 = 0;
                v713 = HIDWORD(v681);
                v724 = v722[24];
                goto LABEL_917;
              }
              if (v686 == -10157)
              {
                v712 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v682 + (v684 << 6) + 13), v1239);
                v1089 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v712[16], v691);
              }
              break;
          }
          goto LABEL_898;
        }
        if (v686 > -15609)
        {
          if (v686 != -15608)
          {
            if (v686 == -15551)
            {
              v700 = v682 + (v684 << 6);
              v701 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v700 + 13), v1239);
              v1198 = *(_QWORD *)v685;
              v1181 = *v687;
              v1154 = *((_QWORD *)v701 + 1);
              v1168 = *(_QWORD *)v701;
              v702 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v700 + 14), v691);
              v1137 = v702;
              if (v702)
                v1214 = *(char **)v702;
              else
                v1214 = 0;
              v713 = HIDWORD(v681);
              v724 = v701[32];
LABEL_917:
              v1082 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v724, v691);
              goto LABEL_918;
            }
            goto LABEL_898;
          }
        }
        else
        {
          if (v686 == -15730)
          {
LABEL_867:
            v698 = v682 + (v684 << 6);
            v696 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v698 + 13), v1239);
            v1198 = *(_QWORD *)v685;
            v1181 = *v687;
            v1154 = *((_QWORD *)v696 + 1);
            v1168 = *(_QWORD *)v696;
            v699 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v698 + 14), v691);
            v1137 = v699;
            if (v699)
              v1214 = *(char **)v699;
            else
              v1214 = 0;
            v713 = HIDWORD(v681);
            v1102 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v696[24], v691);
            v1085 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v696[25], v691);
            goto LABEL_890;
          }
          if (v686 != -15609)
            goto LABEL_898;
        }
        v703 = v682 + (v684 << 6);
        v704 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v703 + 13), v1239);
        v1198 = *(_QWORD *)v685;
        v1181 = *v687;
        v1154 = *((_QWORD *)v704 + 1);
        v1168 = *(_QWORD *)v704;
        v705 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, *(unsigned __int8 *)(v703 + 14), v691);
        v1137 = v705;
        if (v705)
          v1214 = *(char **)v705;
        else
          v1214 = 0;
        v713 = HIDWORD(v681);
        v1089 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v685, v704[24], v691);
        goto LABEL_918;
      case 29:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        memset(__src, 0, 24);
        memset(&__src[2], 0, 24);
        LODWORD(__src[0]) = 2;
        *((_QWORD *)&__src[1] + 1) = -1;
        ++DWORD1(v1247);
        v150 = *(_QWORD *)(v37 + 32);
        if (v150)
        {
          v151 = 0;
          while (1)
          {
            v152 = atomic_load((unsigned int *)(v150 + 4));
            v153 = v151 + (v152 >> 6) - 1;
            if ((int)v153 > 0)
              break;
            v150 = *(_QWORD *)(v150 + 40);
            v151 = v153;
            if (!v150)
            {
              v151 = v153;
              goto LABEL_927;
            }
          }
        }
        else
        {
          v151 = 0;
        }
        v153 = 0;
LABEL_927:
        v729 = v151 | (unint64_t)(v153 << 32);
        while (2)
        {
          v730 = v150 + 64;
LABEL_929:
          if (v150
            && (*(_BYTE *)(v730 + ((uint64_t)(HIDWORD(v729) - (int)v729) << 6) + 15) & 8) != 0
            && (v731 = v730 + ((uint64_t)(HIDWORD(v729) - (int)v729) << 6),
                v215 = *(_QWORD *)v731,
                *(_QWORD *)v731 < v1236 + v1235))
          {
            if (*(_DWORD *)(v731 + 8) != -7161)
            {
              GTMTLSMDrawable_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v731);
              v732 = atomic_load((unsigned int *)(v150 + 4));
              v733 = v729 + (v732 >> 6);
              v734 = (HIDWORD(v729) + 1);
              v729 = (v734 << 32) | v729;
              if ((_DWORD)v734 == v733 - 1)
              {
                v729 = (v734 << 32) | v734;
                v150 = *(_QWORD *)(v150 + 40);
                continue;
              }
              goto LABEL_929;
            }
            v14 = v1220;
            if (v1235 > v215)
              goto LABEL_1211;
            v219 = apr_palloc(p, 0x38uLL);
            *v219 = __src[0];
            v219[1] = __src[1];
            v219[2] = __src[2];
            *((_QWORD *)v219 + 6) = *(_QWORD *)&__src[3];
LABEL_1226:
            v959 = *find_entry((uint64_t)ht, (_BYTE *)v219 + 8, 8uLL, 0);
            if (v959)
              v959 = *(_QWORD *)(v959 + 32);
            *((_QWORD *)v219 + 4) = v959;
            apr_hash_set(ht, (char *)v219 + 8, 8, v219);
          }
          else
          {
            v219 = apr_palloc(p, 0x38uLL);
            *v219 = __src[0];
            v219[1] = __src[1];
            v219[2] = __src[2];
            *((_QWORD *)v219 + 6) = *(_QWORD *)&__src[3];
LABEL_936:
            v735 = *find_entry((uint64_t)ht, (_BYTE *)v219 + 8, 8uLL, 0);
            if (v735)
              v735 = *(_QWORD *)(v735 + 32);
            v14 = v1220;
            *((_QWORD *)v219 + 4) = v735;
            apr_hash_set(ht, (char *)v219 + 8, 8, v219);
            v215 = -1;
          }
          break;
        }
        *((_QWORD *)v219 + 3) = v215;
        goto LABEL_1211;
      case 30:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        memset(&__src[2], 0, 248);
        memset(__src, 0, 24);
        LODWORD(__src[0]) = 3;
        *((_QWORD *)&__src[1] + 1) = -1;
        ++DWORD2(v1247);
        v154 = *(_QWORD *)(v37 + 32);
        if (v154)
        {
          v155 = 0;
          while (1)
          {
            v156 = atomic_load((unsigned int *)(v154 + 4));
            v157 = v155 + (v156 >> 6) - 1;
            if ((int)v157 > 0)
              break;
            v154 = *(_QWORD *)(v154 + 40);
            v155 = v157;
            if (!v154)
            {
              v155 = v157;
              goto LABEL_942;
            }
          }
        }
        else
        {
          v155 = 0;
        }
        v157 = 0;
LABEL_942:
        v736 = v155 | (unint64_t)(v157 << 32);
        while (2)
        {
          v737 = v154 + 64;
LABEL_944:
          if (!v154
            || (v738 = HIDWORD(v736) - v736,
                (*(_BYTE *)(v737 + ((uint64_t)(HIDWORD(v736) - (int)v736) << 6) + 15) & 8) == 0)
            || (v739 = v738, v740 = v737 + ((uint64_t)v738 << 6),
                             v741 = *(_QWORD *)v740,
                             *(_QWORD *)v740 >= v1236 + v1235))
          {
            v756 = (char *)apr_palloc(p, 0x118uLL);
            memcpy(v756, __src, 0x118uLL);
            v757 = *find_entry((uint64_t)ht, v756 + 8, 8uLL, 0);
            if (v757)
              v757 = *(_QWORD *)(v757 + 32);
            *((_QWORD *)v756 + 4) = v757;
            apr_hash_set(ht, v756 + 8, 8, v756);
            *((_QWORD *)v756 + 3) = -1;
            goto LABEL_1211;
          }
          v742 = *(_DWORD *)(v740 + 8);
          if ((v742 + 7165) > 0xB)
            goto LABEL_956;
          if (((1 << (v742 - 3)) & 0x86B) != 0)
            goto LABEL_961;
          if (v742 == -7163)
          {
            if (v1235 > v741 || *((_QWORD *)&__src[0] + 1) == 0)
            {
              v744 = v1239;
LABEL_970:
              v749 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v740, *(unsigned __int8 *)(v737 + (v739 << 6) + 13), v744);
              *((_QWORD *)&__src[0] + 1) = *(_QWORD *)v749;
              *(_QWORD *)&__src[1] = *(_QWORD *)v740;
              *((_QWORD *)&__src[2] + 1) = *((_QWORD *)v749 + 1);
              goto LABEL_979;
            }
            goto LABEL_962;
          }
LABEL_956:
          if (v742 == -8183 || v742 == -8181)
          {
LABEL_961:
            if (v1235 <= v741)
            {
LABEL_962:
              v746 = (char *)apr_palloc(p, 0x118uLL);
              memcpy(v746, __src, 0x118uLL);
              v747 = *find_entry((uint64_t)ht, v746 + 8, 8uLL, 0);
              if (v747)
                v747 = *(_QWORD *)(v747 + 32);
              *((_QWORD *)v746 + 4) = v747;
              apr_hash_set(ht, v746 + 8, 8, v746);
              *((_QWORD *)v746 + 3) = v741;
              v742 = *(_DWORD *)(v740 + 8);
              v737 = v154 + 64;
            }
          }
          v744 = v1239;
          switch(v742)
          {
            case -7165:
              LOWORD(__src[17]) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v740, *(unsigned __int8 *)(v737 + (v739 << 6) + 13), v1239)+ 1);
              break;
            case -7164:
              __src[11] = *(_OWORD *)(GTTraceFunc_argumentBytesWithMap((_QWORD *)v740, *(unsigned __int8 *)(v737 + (v739 << 6) + 13), v1239)+ 8);
              break;
            case -7163:
              goto LABEL_970;
            case -7162:
            case -7159:
              v748 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v740, *(unsigned __int8 *)(v737 + (v739 << 6) + 13), v1239);
              *(_OWORD *)((char *)&__src[13] + 8) = *(_OWORD *)(v748 + 8);
              *(_OWORD *)((char *)&__src[14] + 8) = *(_OWORD *)(v748 + 24);
              *(_QWORD *)&__src[13] = *((_QWORD *)v748 + 5);
              break;
            case -7161:
            case -7158:
            case -7157:
            case -7156:
            case -7155:
              break;
            case -7160:
              BYTE2(__src[17]) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v740, *(unsigned __int8 *)(v737 + (v739 << 6) + 13), v1239)+ 2);
              break;
            case -7154:
              BYTE3(__src[17]) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap((_QWORD *)v740, *(unsigned __int8 *)(v737 + (v739 << 6) + 13), v1239)+ 2);
              break;
            case -7153:
              v750 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v740, *(unsigned __int8 *)(v737 + (v739 << 6) + 13), v1239);
              *((_QWORD *)&__src[16] + 1) = GTTraceFunc_argumentBytesWithMap((_QWORD *)v740, v750[8], v744);
              break;
            default:
              if (v742 == -8183)
              {
                v751 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v740, *(unsigned __int8 *)(v737 + (v739 << 6) + 13), v1239);
                for (j = 0; j != 8; ++j)
                  __src[j + 3] = *(_OWORD *)&v751[j * 16 + 8];
                *(_OWORD *)((char *)&__src[15] + 8) = *(_OWORD *)(v751 + 136);
              }
              else if (v742 == -8181)
              {
                __src[12] = *(_OWORD *)(GTTraceFunc_argumentBytesWithMap((_QWORD *)v740, *(unsigned __int8 *)(v737 + (v739 << 6) + 13), v1239)+ 8);
              }
              break;
          }
LABEL_979:
          v753 = atomic_load((unsigned int *)(v154 + 4));
          v754 = v736 + (v753 >> 6);
          v755 = (HIDWORD(v736) + 1);
          v736 = (v755 << 32) | v736;
          if ((_DWORD)v755 == v754 - 1)
          {
            v736 = (v755 << 32) | v755;
            v154 = *(_QWORD *)(v154 + 40);
            continue;
          }
          goto LABEL_944;
        }
      case 31:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        *(_DWORD *)((char *)__src + 3) = 0;
        LODWORD(__src[0]) = 0;
        ++HIDWORD(v1247);
        v158 = *(_QWORD *)(v37 + 32);
        if (v158)
        {
          v159 = 0;
          while (1)
          {
            v160 = atomic_load((unsigned int *)(v158 + 4));
            v161 = v159 + (v160 >> 6) - 1;
            if ((int)v161 > 0)
              break;
            v158 = *(_QWORD *)(v158 + 40);
            v159 = v161;
            if (!v158)
            {
              v159 = v161;
              goto LABEL_986;
            }
          }
        }
        else
        {
          v159 = 0;
        }
        v161 = 0;
LABEL_986:
        v758 = 0;
        v759 = 0;
        v760 = 0;
        v761 = 0;
        v1199 = 0;
        v1226 = 0;
        v1215 = 0;
        v762 = v159 | (unint64_t)(v161 << 32);
        while (2)
        {
          v763 = v158 + 64;
LABEL_988:
          if (!v158
            || (v764 = HIDWORD(v762) - v762,
                (*(_BYTE *)(v763 + ((uint64_t)(HIDWORD(v762) - (int)v762) << 6) + 15) & 8) == 0)
            || (v765 = (uint64_t *)(v763 + ((uint64_t)v764 << 6)), v766 = *v765, *v765 >= v1236 + v1235))
          {
            v775 = v760;
            v776 = v759;
            v530 = (char *)apr_palloc(p, 0x48uLL);
            *(_DWORD *)v530 = 44;
            *((_DWORD *)v530 + 1) = v758;
            *((_QWORD *)v530 + 1) = v776;
            v543 = v530 + 8;
            v544 = -1;
            *((_QWORD *)v530 + 2) = v775;
            *((_QWORD *)v530 + 3) = -1;
            *((_QWORD *)v530 + 4) = 0;
            *((_QWORD *)v530 + 5) = v761;
            *((_QWORD *)v530 + 6) = v1199;
            *((_QWORD *)v530 + 7) = v1226;
            v530[64] = v1215;
            *(_DWORD *)(v530 + 65) = __src[0];
            *((_DWORD *)v530 + 17) = *(_DWORD *)((char *)__src + 3);
LABEL_1008:
            v777 = ht;
            goto LABEL_1009;
          }
          v768 = (int *)(v765 + 1);
          v767 = *((_DWORD *)v765 + 2);
          if (v767 == -15610)
          {
            v960 = v760;
            v961 = v759;
            v962 = apr_palloc(p, 0x48uLL);
            *(_DWORD *)v962 = 44;
            *((_DWORD *)v962 + 1) = v758;
            v962[1] = v961;
            v962[2] = v960;
            v962[3] = -1;
            v962[4] = 0;
            v962[5] = v761;
            v962[6] = v1199;
            v962[7] = v1226;
            *((_BYTE *)v962 + 64) = v1215;
            *(_DWORD *)((char *)v962 + 65) = __src[0];
            *((_DWORD *)v962 + 17) = *(_DWORD *)((char *)__src + 3);
            v963 = *find_entry((uint64_t)ht, (_BYTE *)v962 + 8, 8uLL, 0);
            if (v963)
              v963 = *(_QWORD *)(v963 + 32);
            v962[4] = v963;
            apr_hash_set(ht, v962 + 1, 8, v962);
            v962[3] = v766;
            goto LABEL_1211;
          }
          if (v767 <= -15445)
          {
            if (v767 != -15620)
            {
              if (v767 == -15463)
              {
                v771 = GTTraceFunc_argumentBytesWithMap(v765, *(unsigned __int8 *)(v763 + ((uint64_t)v764 << 6) + 13), v1239);
                v760 = *v765;
                v758 = *v768;
                v759 = *((_QWORD *)v771 + 1);
                v1226 = *(_QWORD *)v771;
                v761 = *((_QWORD *)v771 + 2);
                v1215 = v771[24];
              }
LABEL_1005:
              v772 = atomic_load((unsigned int *)(v158 + 4));
              v773 = v762 + (v772 >> 6);
              v774 = (HIDWORD(v762) + 1);
              v762 = (v774 << 32) | v762;
              if ((_DWORD)v774 == v773 - 1)
              {
                v762 = (v774 << 32) | v774;
                v158 = *(_QWORD *)(v158 + 40);
                continue;
              }
              goto LABEL_988;
            }
            v769 = GTTraceFunc_argumentBytesWithMap(v765, *(unsigned __int8 *)(v763 + ((uint64_t)v764 << 6) + 13), v1239);
            v760 = *v765;
            v758 = *v768;
            v759 = *((_QWORD *)v769 + 1);
            v1199 = *(_QWORD *)v769;
          }
          else
          {
            switch(v767)
            {
              case -15444:
                v769 = GTTraceFunc_argumentBytesWithMap(v765, *(unsigned __int8 *)(v763 + ((uint64_t)v764 << 6) + 13), v1239);
                v760 = *v765;
                v758 = *v768;
                v759 = *((_QWORD *)v769 + 1);
                v1226 = *(_QWORD *)v769;
                v770 = 2;
                break;
              case -15437:
                v769 = GTTraceFunc_argumentBytesWithMap(v765, *(unsigned __int8 *)(v763 + ((uint64_t)v764 << 6) + 13), v1239);
                v760 = *v765;
                v758 = *v768;
                v759 = *((_QWORD *)v769 + 1);
                v1226 = *(_QWORD *)v769;
                v770 = 4;
                break;
              case -15436:
                v769 = GTTraceFunc_argumentBytesWithMap(v765, *(unsigned __int8 *)(v763 + ((uint64_t)v764 << 6) + 13), v1239);
                v760 = *v765;
                v758 = *v768;
                v759 = *((_QWORD *)v769 + 1);
                v1226 = *(_QWORD *)v769;
                v770 = 1;
                break;
              default:
                goto LABEL_1005;
            }
            v1215 = v770;
          }
          break;
        }
        v761 = *((_QWORD *)v769 + 2);
        goto LABEL_1005;
      case 32:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        LODWORD(v1248) = v1248 + 1;
        memset(__src, 0, 24);
        memset(&__src[2], 0, 64);
        LODWORD(__src[0]) = 39;
        *((_QWORD *)&__src[1] + 1) = -1;
        v162 = *(_QWORD *)(v37 + 32);
        if (v162)
        {
          v163 = 0;
          while (1)
          {
            v164 = atomic_load((unsigned int *)(v162 + 4));
            v165 = v163 + (v164 >> 6) - 1;
            if ((int)v165 > 0)
              break;
            v162 = *(_QWORD *)(v162 + 40);
            v163 = v165;
            if (!v162)
            {
              v163 = v165;
              goto LABEL_1014;
            }
          }
        }
        else
        {
          v163 = 0;
        }
        v165 = 0;
LABEL_1014:
        v779 = v163 | (unint64_t)(v165 << 32);
        while (2)
        {
          v780 = v162 + 64;
LABEL_1016:
          if (v162)
          {
            if ((*(_BYTE *)(v780 + ((uint64_t)(HIDWORD(v779) - (int)v779) << 6) + 15) & 8) != 0)
            {
              v781 = v780 + ((uint64_t)(HIDWORD(v779) - (int)v779) << 6);
              v262 = *(_QWORD *)v781;
              if (*(_QWORD *)v781 < v1236 + v1235)
              {
                v782 = *(_DWORD *)(v781 + 8);
                if ((v782 + 20480) < 5)
                {
                  if (v1235 <= v262)
                  {
                    v783 = apr_palloc(p, 0x60uLL);
                    *((_OWORD *)v783 + 2) = __src[2];
                    *((_OWORD *)v783 + 3) = __src[3];
                    *((_OWORD *)v783 + 4) = __src[4];
                    *((_OWORD *)v783 + 5) = __src[5];
                    *(_OWORD *)v783 = __src[0];
                    *((_OWORD *)v783 + 1) = __src[1];
                    v784 = *find_entry((uint64_t)ht, (_BYTE *)v783 + 8, 8uLL, 0);
                    if (v784)
                      v784 = *(_QWORD *)(v784 + 32);
                    v783[4] = v784;
                    apr_hash_set(ht, v783 + 1, 8, v783);
                    v783[3] = v262;
                  }
LABEL_1025:
                  GTMTLFXSMSpatialScaler_processTraceFuncWithMap((char *)__src, v1239, (uint64_t *)v781);
                  v785 = atomic_load((unsigned int *)(v162 + 4));
                  v786 = v779 + (v785 >> 6);
                  v787 = (HIDWORD(v779) + 1);
                  v779 = (v787 << 32) | v779;
                  if ((_DWORD)v787 == v786 - 1)
                  {
                    v779 = (v787 << 32) | v787;
                    v162 = *(_QWORD *)(v162 + 40);
                    continue;
                  }
                  goto LABEL_1016;
                }
                if (v782 != -20475)
                  goto LABEL_1025;
                v1043 = apr_palloc(p, 0x60uLL);
                v278 = v1043;
LABEL_1302:
                v1043[2] = __src[2];
                v1043[3] = __src[3];
                v1043[4] = __src[4];
                v1043[5] = __src[5];
                *v1043 = __src[0];
                v1043[1] = __src[1];
                goto LABEL_1303;
              }
            }
          }
          break;
        }
        v788 = apr_palloc(p, 0x60uLL);
        v278 = v788;
        goto LABEL_1052;
      case 33:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        ++DWORD1(v1248);
        memset(__src, 0, 24);
        memset(&__src[2], 0, 120);
        LODWORD(__src[0]) = 40;
        *((_QWORD *)&__src[1] + 1) = -1;
        v166 = *(_QWORD *)(v37 + 32);
        if (v166)
        {
          v167 = 0;
          while (1)
          {
            v168 = atomic_load((unsigned int *)(v166 + 4));
            v169 = v167 + (v168 >> 6) - 1;
            if ((int)v169 > 0)
              break;
            v166 = *(_QWORD *)(v166 + 40);
            v167 = v169;
            if (!v166)
            {
              v167 = v169;
              goto LABEL_1030;
            }
          }
        }
        else
        {
          v167 = 0;
        }
        v169 = 0;
LABEL_1030:
        v789 = v167 | (unint64_t)(v169 << 32);
        while (2)
        {
          v790 = v166 + 64;
LABEL_1032:
          if (!v166
            || (*(_BYTE *)(v790 + ((uint64_t)(HIDWORD(v789) - (int)v789) << 6) + 15) & 8) == 0
            || (v791 = v790 + ((uint64_t)(HIDWORD(v789) - (int)v789) << 6),
                v262 = *(_QWORD *)v791,
                *(_QWORD *)v791 >= v1236 + v1235))
          {
            v788 = apr_palloc(p, 0x98uLL);
            v278 = v788;
            v788[6] = __src[6];
            v788[7] = __src[7];
            v788[8] = __src[8];
            *((_QWORD *)v788 + 18) = *(_QWORD *)&__src[9];
LABEL_1052:
            v788[2] = __src[2];
            v788[3] = __src[3];
            v788[4] = __src[4];
            v788[5] = __src[5];
            *v788 = __src[0];
            v788[1] = __src[1];
LABEL_1155:
            v904 = *find_entry((uint64_t)ht, (_BYTE *)v278 + 8, 8uLL, 0);
            if (v904)
              v904 = *(_QWORD *)(v904 + 32);
            *((_QWORD *)v278 + 4) = v904;
            apr_hash_set(ht, (char *)v278 + 8, 8, v278);
            v262 = -1;
            goto LABEL_1158;
          }
          v792 = *(_DWORD *)(v791 + 8);
          if ((v792 + 20471) < 0xD)
            break;
          if (v792 <= -20458)
          {
            if (v792 != -20473)
            {
              if (v792 == -20475)
              {
                v1043 = apr_palloc(p, 0x98uLL);
                v278 = v1043;
                v1043[6] = __src[6];
                v1043[7] = __src[7];
                v1043[8] = __src[8];
                *((_QWORD *)v1043 + 18) = *(_QWORD *)&__src[9];
                goto LABEL_1302;
              }
LABEL_1040:
              GTMTLFXSMTemporalScaler_processTraceFuncWithMap((uint64_t)__src, v1239, (uint64_t *)v791);
              v795 = atomic_load((unsigned int *)(v166 + 4));
              v796 = v789 + (v795 >> 6);
              v797 = (HIDWORD(v789) + 1);
              v789 = (v797 << 32) | v789;
              if ((_DWORD)v797 == v796 - 1)
              {
                v789 = (v797 << 32) | v797;
                v166 = *(_QWORD *)(v166 + 40);
                continue;
              }
              goto LABEL_1032;
            }
          }
          else if ((v792 + 20457) >= 2 && v792 != -18430)
          {
            goto LABEL_1040;
          }
          break;
        }
        if (v1235 <= v262)
        {
          v793 = apr_palloc(p, 0x98uLL);
          *((_OWORD *)v793 + 6) = __src[6];
          *((_OWORD *)v793 + 7) = __src[7];
          *((_OWORD *)v793 + 8) = __src[8];
          v793[18] = *(_QWORD *)&__src[9];
          *((_OWORD *)v793 + 2) = __src[2];
          *((_OWORD *)v793 + 3) = __src[3];
          *((_OWORD *)v793 + 4) = __src[4];
          *((_OWORD *)v793 + 5) = __src[5];
          *(_OWORD *)v793 = __src[0];
          *((_OWORD *)v793 + 1) = __src[1];
          v794 = *find_entry((uint64_t)ht, (_BYTE *)v793 + 8, 8uLL, 0);
          if (v794)
            v794 = *(_QWORD *)(v794 + 32);
          v793[4] = v794;
          apr_hash_set(ht, v793 + 1, 8, v793);
          v793[3] = v262;
        }
        goto LABEL_1040;
      case 34:
        if (!GTMTLSMBuilder_streamIntersectionRange(v1235, v1236, v37))
          goto LABEL_1211;
        ++DWORD2(v1248);
        v170 = *(_QWORD *)(v37 + 32);
        if (v170)
        {
          v171 = 0;
          while (1)
          {
            v172 = atomic_load((unsigned int *)(v170 + 4));
            v173 = v171 + (v172 >> 6) - 1;
            if ((int)v173 > 0)
              break;
            v170 = *(_QWORD *)(v170 + 40);
            v171 = v173;
            if (!v170)
            {
              v171 = v173;
              goto LABEL_1055;
            }
          }
        }
        else
        {
          v171 = 0;
        }
        v173 = 0;
LABEL_1055:
        v799 = 0;
        v1200 = 0;
        v1216 = 0;
        v800 = 0;
        v176 = 0;
        v801 = v171 | (unint64_t)(v173 << 32);
        while (2)
        {
          v802 = v170 + 64;
LABEL_1057:
          if (v170)
          {
            v803 = HIDWORD(v801) - v801;
            if ((*(_BYTE *)(v802 + ((uint64_t)(HIDWORD(v801) - (int)v801) << 6) + 15) & 8) != 0)
            {
              v804 = v802 + ((uint64_t)v803 << 6);
              v416 = *(_QWORD *)v804;
              if (*(_QWORD *)v804 < v1236 + v1235)
              {
                v805 = *(_DWORD *)(v804 + 8);
                if (v805 == -15245)
                {
                  v806 = v1239;
                  v807 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v804, *(unsigned __int8 *)(v802 + ((uint64_t)v803 << 6) + 13), v1239);
                  v1200 = *((_QWORD *)v807 + 1);
                  v1216 = *(_QWORD *)v804;
                  v799 = *(_DWORD *)(v804 + 8);
                  v176 = GTTraceFunc_argumentBytesWithMap((_QWORD *)v804, v807[24], v806);
                  v800 = *(_QWORD *)v807;
                  v14 = v1220;
                }
                else
                {
                  v14 = v1220;
                  if (v805 == -15231)
                  {
                    v989 = apr_palloc(p, 0x38uLL);
                    *(_DWORD *)v989 = 72;
                    *((_DWORD *)v989 + 1) = v799;
                    v989[1] = v1200;
                    v990 = v989 + 1;
                    v989[2] = v1216;
                    v989[3] = -1;
                    v989[4] = 0;
                    v989[5] = v800;
                    v989[6] = v176;
LABEL_1267:
                    v991 = *find_entry((uint64_t)ht, v990, 8uLL, 0);
                    if (v991)
                      v991 = *(_QWORD *)(v991 + 32);
                    v989[4] = v991;
                    apr_hash_set(ht, v990, 8, v989);
                    v989[3] = v416;
                    goto LABEL_1211;
                  }
                }
                v808 = atomic_load((unsigned int *)(v170 + 4));
                v809 = v801 + (v808 >> 6);
                v810 = (HIDWORD(v801) + 1);
                v801 = (v810 << 32) | v801;
                if ((_DWORD)v810 == v809 - 1)
                {
                  v801 = (v810 << 32) | v810;
                  v170 = *(_QWORD *)(v170 + 40);
                  continue;
                }
                goto LABEL_1057;
              }
            }
          }
          break;
        }
        v188 = (char *)apr_palloc(p, 0x38uLL);
        v189 = v188;
        *(_DWORD *)v188 = 72;
        *((_DWORD *)v188 + 1) = v799;
        *((_QWORD *)v188 + 1) = v1200;
        v190 = v188 + 8;
        v425 = -1;
        *((_QWORD *)v188 + 2) = v1216;
        *((_QWORD *)v188 + 3) = -1;
        *((_QWORD *)v188 + 4) = 0;
        *((_QWORD *)v188 + 5) = v800;
LABEL_1067:
        *((_QWORD *)v188 + 6) = v176;
LABEL_1068:
        v811 = *find_entry((uint64_t)ht, v190, 8uLL, 0);
        if (v811)
          v811 = *(_QWORD *)(v811 + 32);
        v189[4] = v811;
        apr_hash_set(ht, v190, 8, v189);
        v189[3] = v425;
        goto LABEL_1211;
      default:
        goto LABEL_1211;
    }
  }
}

uint64_t GTMTLSMObject_compare(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v4 = v2 >= v3;
  v5 = v2 != v3;
  if (v4)
    return v5;
  else
    return 0xFFFFFFFFLL;
}

__n128 GTMTLSMRenderCommandEncoder_init(uint64_t a1, uint64_t a2)
{
  __n128 result;

  bzero((void *)(a1 + 8), 0x2B50uLL);
  *(_QWORD *)a1 = a2;
  memset_pattern16((void *)(a1 + 10100), &unk_4AA5B0, 0x40uLL);
  memset_pattern16((void *)(a1 + 10228), &unk_4AA5B0, 0x40uLL);
  memset_pattern16((void *)(a1 + 10612), &unk_4AA5B0, 0x40uLL);
  *(_QWORD *)(a1 + 10676) = 0x3F8000003F800000;
  *(_QWORD *)(a1 + 11068) = 0x100000001;
  memset_pattern16((void *)(a1 + 9872), &unk_4AA5C0, 0x40uLL);
  *(_QWORD *)(a1 + 760) = -1;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(a1 + 728) = result;
  *(__n128 *)(a1 + 744) = result;
  *(__n128 *)(a1 + 696) = result;
  *(__n128 *)(a1 + 712) = result;
  *(__n128 *)(a1 + 664) = result;
  *(__n128 *)(a1 + 680) = result;
  *(__n128 *)(a1 + 632) = result;
  *(__n128 *)(a1 + 648) = result;
  *(__n128 *)(a1 + 600) = result;
  *(__n128 *)(a1 + 616) = result;
  *(__n128 *)(a1 + 568) = result;
  *(__n128 *)(a1 + 584) = result;
  *(__n128 *)(a1 + 536) = result;
  *(__n128 *)(a1 + 552) = result;
  *(__n128 *)(a1 + 520) = result;
  *(_WORD *)(a1 + 11086) = 1028;
  return result;
}

uint64_t GTMTLSMRenderCommandEncoder_loadIndirectCommand(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _BYTE *v9;
  uint64_t result;
  unsigned int v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t *v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  int v63;
  uint64_t v64;

  v4 = *(_QWORD *)(a3 + a2[1]);
  if (!v4)
    return 0;
  v9 = (_BYTE *)*a2;
  if (*(_BYTE *)(*a2 + 11)
    || (result = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(a4[3], *(_QWORD *)(a3 + a2[2])),
        (*(_QWORD *)(a1 + 8544) = result) != 0))
  {
    if (!v9[10])
    {
      v11 = v9[18];
      if (v11 >= 0x40)
        v12 = 64;
      else
        v12 = v9[18];
      *(_QWORD *)(a1 + 8) &= -1 << v12;
      if (v11)
      {
        v13 = 0;
        v14 = a3 + a2[3];
        do
        {
          v15 = *(_QWORD *)(v14 + 8 * v13);
          v16 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*a4 + 24), *(int *)(*a4 + 12), v15);
          if (v16)
          {
            v17 = v15 - *v16;
            v18 = v16[2];
          }
          else
          {
            v17 = 0;
            v18 = 0;
          }
          v19 = a1 + 8 * v13;
          *(_QWORD *)(v19 + 24) = v18;
          *(_QWORD *)(v19 + 272) = v17;
          ++v13;
        }
        while (v13 < v9[18]);
      }
      v20 = v9[12];
      if (v20 >= 0x40)
        v21 = 64;
      else
        v21 = v9[12];
      *(_QWORD *)(a1 + 1920) &= -1 << v21;
      if (v20)
      {
        v22 = 0;
        v23 = a3 + a2[4];
        do
        {
          v24 = *(_QWORD *)(v23 + 8 * v22);
          v25 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*a4 + 24), *(int *)(*a4 + 12), v24);
          if (v25)
          {
            v26 = v24 - *v25;
            v27 = v25[2];
          }
          else
          {
            v26 = 0;
            v27 = 0;
          }
          v28 = a1 + 8 * v22;
          *(_QWORD *)(v28 + 1928) = v27;
          *(_QWORD *)(v28 + 2176) = v26;
          ++v22;
        }
        while (v22 < v9[12]);
      }
      v29 = v9[16];
      if (v29 >= 0x40)
        v30 = 64;
      else
        v30 = v9[16];
      *(_QWORD *)(a1 + 3576) &= -1 << v30;
      if (v29)
      {
        v31 = 0;
        v32 = a3 + a2[5];
        do
        {
          v33 = *(_QWORD *)(v32 + 8 * v31);
          v34 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*a4 + 24), *(int *)(*a4 + 12), v33);
          if (v34)
          {
            v35 = v33 - *v34;
            v36 = v34[2];
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v37 = a1 + 8 * v31;
          *(_QWORD *)(v37 + 3584) = v36;
          *(_QWORD *)(v37 + 3832) = v35;
          ++v31;
        }
        while (v31 < v9[16]);
      }
      v38 = v9[15];
      if (v38 >= 0x40)
        v39 = 64;
      else
        v39 = v9[15];
      *(_QWORD *)(a1 + 5232) &= -1 << v39;
      if (v38)
      {
        v40 = (unint64_t *)(a3 + a2[6]);
        v41 = (unint64_t *)(a1 + 5488);
        v42 = 655;
        do
        {
          v44 = *v40++;
          v43 = v44;
          v45 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*a4 + 24), *(int *)(*a4 + 12), v44);
          if (v45)
          {
            v46 = v43 - *v45;
            v47 = v45[2];
          }
          else
          {
            v46 = 0;
            v47 = 0;
          }
          *(v41 - 31) = v47;
          *v41++ = v46;
          v48 = v42 - 654;
          ++v42;
        }
        while (v48 < v9[15]);
      }
    }
    v49 = v9[17];
    if (v9[17])
    {
      v50 = (uint64_t *)(a3 + a2[8]);
      v51 = (_DWORD *)(a1 + 10944);
      do
      {
        v52 = *v50++;
        *v51++ = v52;
        --v49;
      }
      while (v49);
    }
    if (v9[19])
    {
      v53 = v9[18];
      v54 = v53 >= 0x40 ? 64 : v9[18];
      *(_QWORD *)(a1 + 16) |= ~(-1 << v54);
      if (v53)
      {
        v55 = (uint64_t *)(a3 + a2[10]);
        v56 = (_QWORD *)(a1 + 520);
        do
        {
          v57 = *v55++;
          *v56++ = v57;
          --v53;
        }
        while (v53);
      }
    }
    if (v4 == 8 || v4 == 4)
    {
      v58 = a3 + a2[12];
      v59 = *(_QWORD **)(*a4 + 24);
      v60 = *(int *)(*a4 + 12);
      v61 = *(_QWORD *)v58;
      v62 = GTMTLGPUAddressResource_resourceForGPUAddress(v59, v60, *(_QWORD *)v58);
      if (v62)
      {
        v63 = v61 - *(_DWORD *)v62;
        v64 = v62[2];
      }
      else
      {
        v63 = 0;
        v64 = 0;
      }
      *(_QWORD *)(a1 + 9864) = v64;
      *(_DWORD *)(a1 + 10688) = v63;
      *(_DWORD *)(a1 + 10692) = *(_QWORD *)(v58 + 8);
      *(_DWORD *)(a1 + 10676) = *(_DWORD *)(v58 + 16);
      return v4 != 8 || v64 != 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t GTMTLSMComputeCommandEncoder_loadIndirectCommand(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _BYTE *v9;
  uint64_t result;
  unsigned int v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _DWORD *v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;

  v4 = *(_QWORD *)(a3 + a2[1]);
  if (!v4)
    return 0;
  v9 = (_BYTE *)*a2;
  if (*(_BYTE *)(*a2 + 11)
    || (result = GTMTLIndirectResources_renderPipelineIdForUniqueIdentifier(a4[4], *(_QWORD *)(a3 + a2[2])),
        (*(_QWORD *)(a1 + 8) = result) != 0))
  {
    if (!v9[10])
    {
      v11 = v9[13];
      v12 = v11 >= 0x40 ? 64 : v9[13];
      *(_QWORD *)(a1 + 16) &= -1 << v12;
      if (v11)
      {
        v13 = 0;
        v14 = a3 + a2[7];
        do
        {
          v15 = *(_QWORD *)(v14 + 8 * v13);
          v16 = GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*a4 + 24), *(int *)(*a4 + 12), v15);
          if (v16)
          {
            v17 = v15 - *v16;
            v18 = v16[2];
          }
          else
          {
            v17 = 0;
            v18 = 0;
          }
          v19 = a1 + 8 * v13;
          *(_QWORD *)(v19 + 32) = v18;
          *(_QWORD *)(v19 + 280) = v17;
          ++v13;
        }
        while (v13 < v9[13]);
      }
    }
    if (v9[19])
    {
      v20 = v9[13];
      v21 = v20 >= 0x40 ? 64 : v9[13];
      *(_QWORD *)(a1 + 24) |= ~(-1 << v21);
      if (v20)
      {
        v22 = (uint64_t *)(a3 + a2[10]);
        v23 = (_QWORD *)(a1 + 528);
        do
        {
          v24 = *v22++;
          *v23++ = v24;
          --v20;
        }
        while (v20);
      }
    }
    v25 = v9[14];
    if (v9[14])
    {
      v26 = (uint64_t *)(a3 + a2[9]);
      v27 = (_DWORD *)(a1 + 1984);
      do
      {
        v28 = *v26++;
        *v27++ = v28;
        --v25;
      }
      while (v25);
    }
    if (v4 == 32 || v4 == 64)
    {
      v29 = (__int128 *)(a3 + a2[12]);
      v30 = *v29;
      *(_QWORD *)(a1 + 1944) = *((_QWORD *)v29 + 2);
      *(_OWORD *)(a1 + 1928) = v30;
      v31 = *(__int128 *)((char *)v29 + 24);
      *(_QWORD *)(a1 + 1968) = *((_QWORD *)v29 + 5);
      *(_OWORD *)(a1 + 1952) = v31;
    }
    return 1;
  }
  return result;
}

char *GTMTLSMBuffer_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  char *v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v5 = result;
  v6 = *((_DWORD *)a3 + 2);
  if (v6 <= -15779)
  {
    if (v6 <= -16313)
    {
      switch(v6)
      {
        case -16372:
          v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          result = GTTraceFunc_argumentBytesWithMap(a3, v7[8], a2);
          *((_QWORD *)v5 + 9) = result;
          break;
        case -16371:
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
          break;
        case -16370:
          *((_QWORD *)result + 3) = *a3;
          break;
        case -16369:
        case -16368:
          return result;
        case -16367:
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v28 = *((_QWORD *)result + 2);
          if (v28 != 1)
            *((_WORD *)v5 + 49) = v28;
          break;
        default:
          if (v6 == -16314 || v6 == -16313)
            goto LABEL_35;
          break;
      }
      return result;
    }
    if (v6 > -16123)
    {
      switch(v6)
      {
        case -16122:
          result[100] = 1;
          break;
        case -16117:
          v29 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v30 = *a3;
          v31 = *((_QWORD *)v29 + 2);
          *((_QWORD *)v5 + 1) = *((_QWORD *)v29 + 1);
          *((_QWORD *)v5 + 2) = v30;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((_WORD *)v5 + 48) = *((_QWORD *)v29 + 3);
          *((_QWORD *)v5 + 13) = v31;
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 19) = result;
          if (result)
          {
            v32 = *((_QWORD *)result + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)result;
            v33 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v32;
            *((_DWORD *)v5 + 22) = v33;
            *((_QWORD *)v5 + 14) = *((_QWORD *)result + 3);
            *((_OWORD *)v5 + 8) = *((_OWORD *)result + 2);
          }
          *((_QWORD *)v5 + 6) = *(_QWORD *)v29;
          break;
        case -15914:
          v8 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v9 = *a3;
          v10 = *(_QWORD *)v8;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v8 + 1);
          *((_QWORD *)v5 + 2) = v9;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((_QWORD *)v5 + 5) = *((_QWORD *)v8 + 2);
          *((_QWORD *)v5 + 15) = v10;
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          v11 = *((_QWORD *)result + 3);
          *((_QWORD *)v5 + 13) = *((_QWORD *)result + 2);
          *((_WORD *)v5 + 48) = v11;
          break;
      }
      return result;
    }
    if (v6 != -16312)
    {
      if (v6 != -16163)
        return result;
      v18 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      v19 = *a3;
      *((_QWORD *)v5 + 1) = *((_QWORD *)v18 + 1);
      *((_QWORD *)v5 + 2) = v19;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      v20 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((_QWORD *)v5 + 19) = v20;
      if (v20)
      {
        v21 = *((_QWORD *)v20 + 1);
        *((_QWORD *)v5 + 7) = *(_QWORD *)v20;
        v22 = *((_DWORD *)v20 + 4);
        *((_DWORD *)v5 + 21) = v21;
        *((_DWORD *)v5 + 22) = v22;
        *((_QWORD *)v5 + 14) = *((_QWORD *)v20 + 3);
        *((_OWORD *)v5 + 8) = *((_OWORD *)v20 + 2);
      }
      result = GTTraceFunc_argumentBytesWithMap(a3, v18[16], a2);
      *((_QWORD *)v5 + 18) = result;
      if (result)
        v23 = *((_QWORD *)result + 1);
      else
        v23 = 0;
      *((_QWORD *)v5 + 13) = v23;
      goto LABEL_58;
    }
LABEL_35:
    v18 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    v24 = *a3;
    v25 = *((_QWORD *)v18 + 2);
    *((_QWORD *)v5 + 1) = *((_QWORD *)v18 + 1);
    *((_QWORD *)v5 + 2) = v24;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    *((_WORD *)v5 + 48) = *((_QWORD *)v18 + 3);
    *((_QWORD *)v5 + 13) = v25;
    result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((_QWORD *)v5 + 19) = result;
    if (result)
    {
      v26 = *((_QWORD *)result + 1);
      *((_QWORD *)v5 + 7) = *(_QWORD *)result;
      v27 = *((_DWORD *)result + 4);
      *((_DWORD *)v5 + 21) = v26;
      *((_DWORD *)v5 + 22) = v27;
      *((_QWORD *)v5 + 14) = *((_QWORD *)result + 3);
      *((_OWORD *)v5 + 8) = *((_OWORD *)result + 2);
    }
LABEL_58:
    *((_QWORD *)v5 + 5) = *(_QWORD *)v18;
    return result;
  }
  if (v6 > -10224)
  {
    if (v6 <= -10204)
    {
      if (v6 == -10223)
      {
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 21) = *((_QWORD *)result + 1);
      }
      else if (v6 == -10210)
      {
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_QWORD *)v5 + 8) = *((_QWORD *)result + 1);
      }
      return result;
    }
    if (v6 == -10203)
    {
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_QWORD *)v5 + 7) = *((_QWORD *)result + 1);
      return result;
    }
    if (v6 != -10187)
    {
      if (v6 != -10186)
        return result;
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      v12 = *(_OWORD *)(result + 8);
      goto LABEL_28;
    }
    result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    v34 = *((_QWORD *)result + 1);
LABEL_54:
    *((_DWORD *)v5 + 20) = v34;
    return result;
  }
  if (v6 <= -10238)
  {
    if (v6 != -15778)
    {
      if (v6 != -15509)
        return result;
      v13 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      v14 = *a3;
      *((_QWORD *)v5 + 1) = *((_QWORD *)v13 + 1);
      *((_QWORD *)v5 + 2) = v14;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      v15 = GTTraceFunc_argumentBytesWithMap(a3, v13[16], a2);
      *((_WORD *)v5 + 48) = *((_WORD *)v15 + 16);
      *((_QWORD *)v5 + 13) = *(_QWORD *)v15;
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((_QWORD *)v5 + 19) = result;
      if (!result)
        return result;
      v16 = *((_QWORD *)result + 1);
      *((_QWORD *)v5 + 7) = *(_QWORD *)result;
      v17 = *((_DWORD *)result + 4);
      *((_DWORD *)v5 + 21) = v16;
      *((_DWORD *)v5 + 22) = v17;
      *((_QWORD *)v5 + 14) = *((_QWORD *)result + 3);
      v12 = *((_OWORD *)result + 2);
LABEL_28:
      *((_OWORD *)v5 + 8) = v12;
      return result;
    }
    v35 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    v36 = *a3;
    v37 = *((_QWORD *)v35 + 2);
    *((_QWORD *)v5 + 1) = *((_QWORD *)v35 + 1);
    *((_QWORD *)v5 + 2) = v36;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    *((_WORD *)v5 + 48) = *((_QWORD *)v35 + 3);
    *((_QWORD *)v5 + 13) = v37;
    result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((_QWORD *)v5 + 19) = result;
    if (result)
    {
      v38 = *((_QWORD *)result + 1);
      *((_QWORD *)v5 + 7) = *(_QWORD *)result;
      v39 = *((_DWORD *)result + 4);
      *((_DWORD *)v5 + 21) = v38;
      *((_DWORD *)v5 + 22) = v39;
      *((_QWORD *)v5 + 14) = *((_QWORD *)result + 3);
      *((_OWORD *)v5 + 8) = *((_OWORD *)result + 2);
    }
    *((_QWORD *)v5 + 6) = *(_QWORD *)v35;
    v34 = *((_QWORD *)v35 + 4);
    goto LABEL_54;
  }
  switch(v6)
  {
    case -10237:
      goto LABEL_35;
    case -10235:
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_DWORD *)v5 + 23) = *((_DWORD *)result + 2);
      break;
    case -10228:
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_QWORD *)v5 + 14) = *((_QWORD *)result + 1);
      break;
  }
  return result;
}

char *GTMTLSMTexture_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  char *v5;
  int v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;

  v5 = result;
  v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15914)
  {
    if (v6 <= -10228)
    {
      if (v6 > -15690)
      {
        if (v6 > -10235)
        {
          if (v6 == -10234)
          {
            result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((_DWORD *)v5 + 23) = *((_DWORD *)result + 2);
          }
          else if (v6 == -10231)
          {
            v69 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            result = GTTraceFunc_argumentBytesWithMap(a3, v69[8], a2);
            *((_QWORD *)v5 + 14) = result;
          }
          return result;
        }
        if (v6 == -15689)
        {
          v36 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v103 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v36 + 1);
          *((_QWORD *)v5 + 2) = v103;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 16) = result;
          if (result)
          {
            v104 = *((_QWORD *)result + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)result;
            v105 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v104;
            *((_DWORD *)v5 + 22) = v105;
            v107 = *((_QWORD *)result + 6);
            v106 = *((_QWORD *)result + 7);
            *((_QWORD *)v5 + 21) = *((_QWORD *)result + 5);
            *((_QWORD *)v5 + 22) = v106;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((_QWORD *)v5 + 14) = result + 24;
            *((_QWORD *)v5 + 25) = v107;
          }
          *((_WORD *)v5 + 76) = *((_QWORD *)v36 + 2);
          v5[158] = *((_QWORD *)v36 + 3);
          v5[159] = *((_QWORD *)v36 + 4);
          v5[160] = *((_QWORD *)v36 + 5);
          *((_WORD *)v5 + 77) = *((_QWORD *)v36 + 6);
          *((_WORD *)v5 + 78) = *((_QWORD *)v36 + 7);
        }
        else
        {
          if (v6 != -15688)
            return result;
          v36 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v37 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v36 + 1);
          *((_QWORD *)v5 + 2) = v37;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 16) = result;
          if (result)
          {
            v38 = *((_QWORD *)result + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)result;
            v39 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v38;
            *((_DWORD *)v5 + 22) = v39;
            v41 = *((_QWORD *)result + 6);
            v40 = *((_QWORD *)result + 7);
            *((_QWORD *)v5 + 21) = *((_QWORD *)result + 5);
            *((_QWORD *)v5 + 22) = v40;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((_QWORD *)v5 + 14) = result + 24;
            *((_QWORD *)v5 + 25) = v41;
          }
          *((_WORD *)v5 + 76) = *((_QWORD *)v36 + 2);
          v5[158] = *((_QWORD *)v36 + 3);
          v5[159] = *((_QWORD *)v36 + 4);
          v5[160] = *((_QWORD *)v36 + 5);
          *((_WORD *)v5 + 77) = *((_QWORD *)v36 + 6);
          *((_WORD *)v5 + 78) = *((_QWORD *)v36 + 7);
          *((_DWORD *)v5 + 52) = *((_DWORD *)v36 + 18);
        }
        *((_QWORD *)v5 + 18) = *(_QWORD *)v36;
        v56 = *((_QWORD *)v36 + 8);
      }
      else
      {
        if (v6 <= -15776)
        {
          if (v6 == -15913)
          {
            v90 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            v91 = *a3;
            *((_QWORD *)v5 + 1) = *((_QWORD *)v90 + 1);
            *((_QWORD *)v5 + 2) = v91;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            v92 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((_QWORD *)v5 + 16) = v92;
            if (v92)
            {
              v93 = *((_QWORD *)v92 + 1);
              *((_QWORD *)v5 + 7) = *(_QWORD *)v92;
              v94 = *((_DWORD *)v92 + 4);
              *((_DWORD *)v5 + 21) = v93;
              *((_DWORD *)v5 + 22) = v94;
              v96 = *((_QWORD *)v92 + 6);
              v95 = *((_QWORD *)v92 + 7);
              *((_QWORD *)v5 + 21) = *((_QWORD *)v92 + 5);
              *((_QWORD *)v5 + 22) = v95;
              *((_WORD *)v5 + 106) = *((_WORD *)v92 + 40);
              *((_QWORD *)v5 + 14) = v92 + 24;
              *((_QWORD *)v5 + 25) = v96;
            }
            *((_QWORD *)v5 + 5) = *((_QWORD *)v90 + 2);
            *((_QWORD *)v5 + 23) = *(_QWORD *)v90;
            v97 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            result = GTTraceFunc_argumentBytesWithMap(a3, v97[24], a2);
            *((_QWORD *)v5 + 13) = result;
            return result;
          }
          if (v6 != -15777)
            return result;
          v21 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v22 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v21 + 1);
          *((_QWORD *)v5 + 2) = v22;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          v23 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 16) = v23;
          if (v23)
          {
            v24 = *((_QWORD *)v23 + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)v23;
            v25 = *((_DWORD *)v23 + 4);
            *((_DWORD *)v5 + 21) = v24;
            *((_DWORD *)v5 + 22) = v25;
            v27 = *((_QWORD *)v23 + 6);
            v26 = *((_QWORD *)v23 + 7);
            *((_QWORD *)v5 + 21) = *((_QWORD *)v23 + 5);
            *((_QWORD *)v5 + 22) = v26;
            *((_WORD *)v5 + 106) = *((_WORD *)v23 + 40);
            *((_QWORD *)v5 + 14) = v23 + 24;
            *((_QWORD *)v5 + 25) = v27;
          }
          result = GTTraceFunc_argumentBytesWithMap(a3, v21[24], a2);
          *((_QWORD *)v5 + 13) = result;
          *((_QWORD *)v5 + 6) = *(_QWORD *)v21;
          v28 = *((_QWORD *)v21 + 2);
LABEL_91:
          *((_DWORD *)v5 + 20) = v28;
          return result;
        }
        if (v6 == -15775)
        {
          v70 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v121 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v70 + 1);
          *((_QWORD *)v5 + 2) = v121;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 16) = result;
          if (result)
          {
            v122 = *((_QWORD *)result + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)result;
            v123 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v122;
            *((_DWORD *)v5 + 22) = v123;
            v125 = *((_QWORD *)result + 6);
            v124 = *((_QWORD *)result + 7);
            *((_QWORD *)v5 + 21) = *((_QWORD *)result + 5);
            *((_QWORD *)v5 + 22) = v124;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((_QWORD *)v5 + 14) = result + 24;
            *((_QWORD *)v5 + 25) = v125;
          }
          *((_WORD *)v5 + 76) = *((_QWORD *)v70 + 2);
          v5[158] = *((_QWORD *)v70 + 3);
          v5[159] = *((_QWORD *)v70 + 4);
          v5[160] = *((_QWORD *)v70 + 5);
          *((_WORD *)v5 + 77) = *((_QWORD *)v70 + 6);
          *((_WORD *)v5 + 78) = *((_QWORD *)v70 + 7);
          *((_DWORD *)v5 + 52) = *((_DWORD *)v70 + 16);
          goto LABEL_117;
        }
        if (v6 != -15690)
          return result;
        v57 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v58 = *a3;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v57 + 1);
        *((_QWORD *)v5 + 2) = v58;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 16) = result;
        if (result)
        {
          v59 = *((_QWORD *)result + 1);
          *((_QWORD *)v5 + 7) = *(_QWORD *)result;
          v60 = *((_DWORD *)result + 4);
          *((_DWORD *)v5 + 21) = v59;
          *((_DWORD *)v5 + 22) = v60;
          v61 = *((_QWORD *)result + 6);
          *((_QWORD *)v5 + 21) = *((_QWORD *)result + 5);
          *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
          *((_QWORD *)v5 + 14) = result + 24;
          *((_QWORD *)v5 + 25) = v61;
        }
        *((_WORD *)v5 + 76) = *((_QWORD *)v57 + 2);
        *((_QWORD *)v5 + 18) = *(_QWORD *)v57;
        v56 = *((_QWORD *)v57 + 3);
      }
    }
    else
    {
      if (v6 <= -10205)
      {
        if (v6 > -10213)
        {
          if (v6 == -10212)
          {
            result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((_QWORD *)v5 + 8) = *((_QWORD *)result + 1);
          }
          else if (v6 == -10205)
          {
            result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((_WORD *)v5 + 106) = *((_DWORD *)result + 2);
          }
        }
        else if (v6 == -10227)
        {
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_QWORD *)v5 + 21) = *((_QWORD *)result + 1);
        }
        else if (v6 == -10222)
        {
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 21) = *((_DWORD *)result + 2);
        }
        return result;
      }
      if (v6 > -10186)
      {
        if (v6 != -10185)
        {
          if (v6 == -10164)
          {
            result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((_QWORD *)v5 + 25) = *((_QWORD *)result + 1);
          }
          else if (v6 == -7167)
          {
            v14 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            v15 = *a3;
            *((_QWORD *)v5 + 1) = *((_QWORD *)v14 + 1);
            *((_QWORD *)v5 + 2) = v15;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((_QWORD *)v5 + 16) = result;
            if (result)
            {
              v16 = *((_QWORD *)result + 1);
              *((_QWORD *)v5 + 7) = *(_QWORD *)result;
              v17 = *((_DWORD *)result + 4);
              *((_DWORD *)v5 + 21) = v16;
              *((_DWORD *)v5 + 22) = v17;
              v19 = *((_QWORD *)result + 6);
              v18 = *((_QWORD *)result + 7);
              *((_QWORD *)v5 + 21) = *((_QWORD *)result + 5);
              *((_QWORD *)v5 + 22) = v18;
              *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
              *((_QWORD *)v5 + 14) = result + 24;
              *((_QWORD *)v5 + 25) = v19;
            }
            *((_QWORD *)v5 + 24) = *(_QWORD *)v14;
          }
          return result;
        }
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v28 = *((_QWORD *)result + 1);
        goto LABEL_91;
      }
      if (v6 == -10204)
      {
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_QWORD *)v5 + 7) = *((_QWORD *)result + 1);
        return result;
      }
      if (v6 != -10198)
        return result;
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      v56 = *((_QWORD *)result + 1);
    }
    *((_QWORD *)v5 + 22) = v56;
    return result;
  }
  if (v6 <= -16197)
  {
    if (v6 > -16241)
    {
      switch(v6)
      {
        case -16240:
          v20 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          result = GTTraceFunc_argumentBytesWithMap(a3, v20[8], a2);
          *((_QWORD *)v5 + 9) = result;
          break;
        case -16239:
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
          break;
        case -16238:
          *((_QWORD *)result + 3) = *a3;
          break;
        case -16233:
          v70 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v71 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v70 + 1);
          *((_QWORD *)v5 + 2) = v71;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 16) = result;
          if (result)
          {
            v72 = *((_QWORD *)result + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)result;
            v73 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v72;
            *((_DWORD *)v5 + 22) = v73;
            v75 = *((_QWORD *)result + 6);
            v74 = *((_QWORD *)result + 7);
            *((_QWORD *)v5 + 21) = *((_QWORD *)result + 5);
            *((_QWORD *)v5 + 22) = v74;
            *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
            *((_QWORD *)v5 + 14) = result + 24;
            *((_QWORD *)v5 + 25) = v75;
          }
          *((_WORD *)v5 + 76) = *((_QWORD *)v70 + 2);
          goto LABEL_117;
        case -16232:
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v76 = *((_QWORD *)result + 2);
          if (v76 != 1)
            *((_WORD *)v5 + 49) = v76;
          break;
        default:
          return result;
      }
      return result;
    }
    if (v6 != -16368)
    {
      if (v6 != -16310)
      {
        if (v6 != -16294)
          return result;
        v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v43 = *a3;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v42 + 1);
        *((_QWORD *)v5 + 2) = v43;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        v44 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 16) = v44;
        if (v44)
        {
          v45 = *((_QWORD *)v44 + 1);
          *((_QWORD *)v5 + 7) = *(_QWORD *)v44;
          v46 = *((_DWORD *)v44 + 4);
          *((_DWORD *)v5 + 21) = v45;
          *((_DWORD *)v5 + 22) = v46;
          v48 = *((_QWORD *)v44 + 6);
          v47 = *((_QWORD *)v44 + 7);
          *((_QWORD *)v5 + 21) = *((_QWORD *)v44 + 5);
          *((_QWORD *)v5 + 22) = v47;
          *((_WORD *)v5 + 106) = *((_WORD *)v44 + 40);
          *((_QWORD *)v5 + 14) = v44 + 24;
          *((_QWORD *)v5 + 25) = v48;
        }
        *((_QWORD *)v5 + 13) = GTTraceFunc_argumentBytesWithMap(a3, v42[24], a2);
        result = GTTraceFunc_argumentBytesWithMap(a3, v42[25], a2);
        *((_QWORD *)v5 + 15) = result;
        *((_QWORD *)v5 + 19) = *((_QWORD *)v42 + 2);
        goto LABEL_109;
      }
      v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      v108 = *a3;
      *((_QWORD *)v5 + 1) = *((_QWORD *)v42 + 1);
      *((_QWORD *)v5 + 2) = v108;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      v109 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((_QWORD *)v5 + 16) = v109;
      if (v109)
      {
        v110 = *((_QWORD *)v109 + 1);
        *((_QWORD *)v5 + 7) = *(_QWORD *)v109;
        v111 = *((_DWORD *)v109 + 4);
        *((_DWORD *)v5 + 21) = v110;
        *((_DWORD *)v5 + 22) = v111;
        v113 = *((_QWORD *)v109 + 6);
        v112 = *((_QWORD *)v109 + 7);
        *((_QWORD *)v5 + 21) = *((_QWORD *)v109 + 5);
        *((_QWORD *)v5 + 22) = v112;
        *((_WORD *)v5 + 106) = *((_WORD *)v109 + 40);
        *((_QWORD *)v5 + 14) = v109 + 24;
        *((_QWORD *)v5 + 25) = v113;
      }
      v55 = v42[24];
      goto LABEL_108;
    }
    goto LABEL_67;
  }
  if (v6 <= -16099)
  {
    if (v6 <= -16115)
    {
      if (v6 != -16196)
      {
        if (v6 == -16116)
        {
          v29 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v30 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v29 + 1);
          *((_QWORD *)v5 + 2) = v30;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          v31 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 16) = v31;
          if (v31)
          {
            v32 = *((_QWORD *)v31 + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)v31;
            v33 = *((_DWORD *)v31 + 4);
            *((_DWORD *)v5 + 21) = v32;
            *((_DWORD *)v5 + 22) = v33;
            v35 = *((_QWORD *)v31 + 6);
            v34 = *((_QWORD *)v31 + 7);
            *((_QWORD *)v5 + 21) = *((_QWORD *)v31 + 5);
            *((_QWORD *)v5 + 22) = v34;
            *((_WORD *)v5 + 106) = *((_WORD *)v31 + 40);
            *((_QWORD *)v5 + 14) = v31 + 24;
            *((_QWORD *)v5 + 25) = v35;
          }
          result = GTTraceFunc_argumentBytesWithMap(a3, v29[16], a2);
          *((_QWORD *)v5 + 13) = result;
          *((_QWORD *)v5 + 6) = *(_QWORD *)v29;
        }
        return result;
      }
      v70 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      v98 = *a3;
      *((_QWORD *)v5 + 1) = *((_QWORD *)v70 + 1);
      *((_QWORD *)v5 + 2) = v98;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((_QWORD *)v5 + 16) = result;
      if (result)
      {
        v99 = *((_QWORD *)result + 1);
        *((_QWORD *)v5 + 7) = *(_QWORD *)result;
        v100 = *((_DWORD *)result + 4);
        *((_DWORD *)v5 + 21) = v99;
        *((_DWORD *)v5 + 22) = v100;
        v102 = *((_QWORD *)result + 6);
        v101 = *((_QWORD *)result + 7);
        *((_QWORD *)v5 + 21) = *((_QWORD *)result + 5);
        *((_QWORD *)v5 + 22) = v101;
        *((_WORD *)v5 + 106) = *((_WORD *)result + 40);
        *((_QWORD *)v5 + 14) = result + 24;
        *((_QWORD *)v5 + 25) = v102;
      }
      *((_WORD *)v5 + 76) = *((_QWORD *)v70 + 2);
      v5[158] = *((_QWORD *)v70 + 3);
      v5[159] = *((_QWORD *)v70 + 4);
      v5[160] = *((_QWORD *)v70 + 5);
      *((_WORD *)v5 + 77) = *((_QWORD *)v70 + 6);
      *((_WORD *)v5 + 78) = *((_QWORD *)v70 + 7);
LABEL_117:
      *((_QWORD *)v5 + 18) = *(_QWORD *)v70;
      return result;
    }
    if (v6 == -16114)
    {
      result[100] = 1;
      return result;
    }
    if (v6 != -16104)
      return result;
LABEL_67:
    v62 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    v63 = *a3;
    *((_QWORD *)v5 + 1) = *((_QWORD *)v62 + 1);
    *((_QWORD *)v5 + 2) = v63;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    v64 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((_QWORD *)v5 + 16) = v64;
    if (v64)
    {
      v65 = *((_QWORD *)v64 + 1);
      *((_QWORD *)v5 + 7) = *(_QWORD *)v64;
      v66 = *((_DWORD *)v64 + 4);
      *((_DWORD *)v5 + 21) = v65;
      *((_DWORD *)v5 + 22) = v66;
      v68 = *((_QWORD *)v64 + 6);
      v67 = *((_QWORD *)v64 + 7);
      *((_QWORD *)v5 + 21) = *((_QWORD *)v64 + 5);
      *((_QWORD *)v5 + 22) = v67;
      *((_WORD *)v5 + 106) = *((_WORD *)v64 + 40);
      *((_QWORD *)v5 + 14) = v64 + 24;
      *((_QWORD *)v5 + 25) = v68;
    }
    result = GTTraceFunc_argumentBytesWithMap(a3, v62[32], a2);
    *((_QWORD *)v5 + 13) = result;
    *((_QWORD *)v5 + 17) = *(_QWORD *)v62;
    *((_DWORD *)v5 + 38) = *((_QWORD *)v62 + 2);
    *((_DWORD *)v5 + 39) = *((_QWORD *)v62 + 3);
    return result;
  }
  if (v6 > -16032)
  {
    if (v6 == -16031)
    {
      v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      v77 = *a3;
      *((_QWORD *)v5 + 1) = *((_QWORD *)v42 + 1);
      *((_QWORD *)v5 + 2) = v77;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      v78 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((_QWORD *)v5 + 16) = v78;
      if (v78)
      {
        v79 = *((_QWORD *)v78 + 1);
        *((_QWORD *)v5 + 7) = *(_QWORD *)v78;
        v80 = *((_DWORD *)v78 + 4);
        *((_DWORD *)v5 + 21) = v79;
        *((_DWORD *)v5 + 22) = v80;
        v82 = *((_QWORD *)v78 + 6);
        v81 = *((_QWORD *)v78 + 7);
        *((_QWORD *)v5 + 21) = *((_QWORD *)v78 + 5);
        *((_QWORD *)v5 + 22) = v81;
        *((_WORD *)v5 + 106) = *((_WORD *)v78 + 40);
        *((_QWORD *)v5 + 14) = v78 + 24;
        *((_QWORD *)v5 + 25) = v82;
      }
      result = GTTraceFunc_argumentBytesWithMap(a3, v42[41], a2);
      *((_QWORD *)v5 + 13) = result;
      *((_DWORD *)v5 + 38) = *((_QWORD *)v42 + 3);
      v83 = *((_QWORD *)v42 + 4);
    }
    else
    {
      if (v6 != -16030)
      {
        if (v6 == -15980)
        {
          v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v8 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v7 + 1);
          *((_QWORD *)v5 + 2) = v8;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          v9 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 16) = v9;
          if (v9)
          {
            v10 = *((_QWORD *)v9 + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)v9;
            v11 = *((_DWORD *)v9 + 4);
            *((_DWORD *)v5 + 21) = v10;
            *((_DWORD *)v5 + 22) = v11;
            v13 = *((_QWORD *)v9 + 6);
            v12 = *((_QWORD *)v9 + 7);
            *((_QWORD *)v5 + 21) = *((_QWORD *)v9 + 5);
            *((_QWORD *)v5 + 22) = v12;
            *((_WORD *)v5 + 106) = *((_WORD *)v9 + 40);
            *((_QWORD *)v5 + 14) = v9 + 24;
            *((_QWORD *)v5 + 25) = v13;
          }
          result = GTTraceFunc_argumentBytesWithMap(a3, v7[24], a2);
          *((_QWORD *)v5 + 13) = result;
          *((_QWORD *)v5 + 5) = *(_QWORD *)v7;
          v5[214] = 1;
        }
        return result;
      }
      v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      v84 = *a3;
      *((_QWORD *)v5 + 1) = *((_QWORD *)v42 + 1);
      *((_QWORD *)v5 + 2) = v84;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      v85 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((_QWORD *)v5 + 16) = v85;
      if (v85)
      {
        v86 = *((_QWORD *)v85 + 1);
        *((_QWORD *)v5 + 7) = *(_QWORD *)v85;
        v87 = *((_DWORD *)v85 + 4);
        *((_DWORD *)v5 + 21) = v86;
        *((_DWORD *)v5 + 22) = v87;
        v89 = *((_QWORD *)v85 + 6);
        v88 = *((_QWORD *)v85 + 7);
        *((_QWORD *)v5 + 21) = *((_QWORD *)v85 + 5);
        *((_QWORD *)v5 + 22) = v88;
        *((_WORD *)v5 + 106) = *((_WORD *)v85 + 40);
        *((_QWORD *)v5 + 14) = v85 + 24;
        *((_QWORD *)v5 + 25) = v89;
      }
      result = GTTraceFunc_argumentBytesWithMap(a3, v42[49], a2);
      *((_QWORD *)v5 + 13) = result;
      *((_DWORD *)v5 + 38) = *((_QWORD *)v42 + 4);
      v83 = *((_QWORD *)v42 + 5);
    }
    *((_DWORD *)v5 + 39) = v83;
LABEL_109:
    *((_QWORD *)v5 + 5) = *(_QWORD *)v42;
    return result;
  }
  if (v6 != -16098)
  {
    if (v6 != -16096)
      return result;
    v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    v49 = *a3;
    *((_QWORD *)v5 + 1) = *((_QWORD *)v42 + 1);
    *((_QWORD *)v5 + 2) = v49;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    v50 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((_QWORD *)v5 + 16) = v50;
    if (v50)
    {
      v51 = *((_QWORD *)v50 + 1);
      *((_QWORD *)v5 + 7) = *(_QWORD *)v50;
      v52 = *((_DWORD *)v50 + 4);
      *((_DWORD *)v5 + 21) = v51;
      *((_DWORD *)v5 + 22) = v52;
      v54 = *((_QWORD *)v50 + 6);
      v53 = *((_QWORD *)v50 + 7);
      *((_QWORD *)v5 + 21) = *((_QWORD *)v50 + 5);
      *((_QWORD *)v5 + 22) = v53;
      *((_WORD *)v5 + 106) = *((_WORD *)v50 + 40);
      *((_QWORD *)v5 + 14) = v50 + 24;
      *((_QWORD *)v5 + 25) = v54;
    }
    v55 = v42[33];
LABEL_108:
    result = GTTraceFunc_argumentBytesWithMap(a3, v55, a2);
    *((_QWORD *)v5 + 13) = result;
    goto LABEL_109;
  }
  v114 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
  v115 = *a3;
  *((_QWORD *)v5 + 1) = *((_QWORD *)v114 + 1);
  *((_QWORD *)v5 + 2) = v115;
  *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
  v116 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
  *((_QWORD *)v5 + 16) = v116;
  if (v116)
  {
    v117 = *((_QWORD *)v116 + 1);
    *((_QWORD *)v5 + 7) = *(_QWORD *)v116;
    v118 = *((_DWORD *)v116 + 4);
    *((_DWORD *)v5 + 21) = v117;
    *((_DWORD *)v5 + 22) = v118;
    v120 = *((_QWORD *)v116 + 6);
    v119 = *((_QWORD *)v116 + 7);
    *((_QWORD *)v5 + 21) = *((_QWORD *)v116 + 5);
    *((_QWORD *)v5 + 22) = v119;
    *((_WORD *)v5 + 106) = *((_WORD *)v116 + 40);
    *((_QWORD *)v5 + 14) = v116 + 24;
    *((_QWORD *)v5 + 25) = v120;
  }
  result = GTTraceFunc_argumentBytesWithMap(a3, v114[40], a2);
  *((_QWORD *)v5 + 13) = result;
  *((_QWORD *)v5 + 17) = *(_QWORD *)v114;
  *((_DWORD *)v5 + 38) = *((_QWORD *)v114 + 2);
  *((_DWORD *)v5 + 39) = *((_QWORD *)v114 + 3);
  *((_DWORD *)v5 + 40) = *((_QWORD *)v114 + 4);
  return result;
}

char *GTMTLSMRenderPipelineState_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  char *v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;

  v5 = result;
  v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15462)
  {
    if (v6 > -10221)
    {
      if (v6 <= -10185)
      {
        if (v6 == -10220)
        {
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_QWORD *)v5 + 12) = *((_QWORD *)result + 1);
        }
        else if (v6 == -10192)
        {
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 102) = *((_DWORD *)result + 2);
        }
      }
      else
      {
        switch(v6)
        {
          case -10184:
            result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((_DWORD *)v5 + 103) = *((_QWORD *)result + 1);
            break;
          case -10172:
            result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((_QWORD *)v5 + 50) = *((_QWORD *)result + 1);
            break;
          case -10165:
            result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((_QWORD *)v5 + 14) = *((_QWORD *)result + 1);
            break;
        }
      }
    }
    else
    {
      switch(v6)
      {
        case -15406:
        case -15405:
          v13 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v14 = *a3;
          v15 = *(_QWORD *)v13;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v13 + 1);
          *((_QWORD *)v5 + 2) = v14;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((_QWORD *)v5 + 5) = v15;
          v16 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 7) = v16;
          if (v16)
          {
            v17 = v16;
            memcpy(v5 + 120, v16 + 216, 0x118uLL);
            *((_OWORD *)v5 + 6) = *(_OWORD *)v17;
            *((_DWORD *)v5 + 102) = *((_DWORD *)v17 + 48);
            *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v17 + 98);
            *((_QWORD *)v5 + 14) = *((_QWORD *)v17 + 2);
          }
          v18 = v13[24];
          goto LABEL_31;
        case -15404:
        case -15403:
          v30 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v31 = *a3;
          v32 = *(_QWORD *)v30;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v30 + 1);
          *((_QWORD *)v5 + 2) = v31;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((_QWORD *)v5 + 5) = v32;
          v33 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 7) = v33;
          if (v33)
          {
            v34 = v33;
            memcpy(v5 + 120, v33 + 216, 0x118uLL);
            *((_OWORD *)v5 + 6) = *(_OWORD *)v34;
            *((_DWORD *)v5 + 102) = *((_DWORD *)v34 + 48);
            *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v34 + 98);
            *((_QWORD *)v5 + 14) = *((_QWORD *)v34 + 2);
          }
          v18 = v30[32];
LABEL_31:
          result = GTTraceFunc_argumentBytesWithMap(a3, v18, a2);
          *((_QWORD *)v5 + 9) = result;
          break;
        default:
          if (v6 == -15461)
          {
            v40 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            v41 = *a3;
            v42 = *(_QWORD *)v40;
            *((_QWORD *)v5 + 1) = *((_QWORD *)v40 + 1);
            *((_QWORD *)v5 + 2) = v41;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            *((_QWORD *)v5 + 5) = v42;
            v43 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((_QWORD *)v5 + 7) = v43;
            if (v43)
            {
              v44 = v43;
              memcpy(v5 + 120, v43 + 216, 0x118uLL);
              *((_OWORD *)v5 + 6) = *(_OWORD *)v44;
              *((_DWORD *)v5 + 102) = *((_DWORD *)v44 + 48);
              *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v44 + 98);
              *((_QWORD *)v5 + 14) = *((_QWORD *)v44 + 2);
            }
            result = GTTraceFunc_argumentBytesWithMap(a3, v40[24], a2);
            *((_QWORD *)v5 + 10) = result;
          }
          break;
      }
    }
  }
  else if (v6 > -16092)
  {
    switch(v6)
    {
      case -16091:
      case -16089:
        v19 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v20 = *a3;
        v21 = *(_QWORD *)v19;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v19 + 1);
        *((_QWORD *)v5 + 2) = v20;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((_QWORD *)v5 + 5) = v21;
        v22 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 7) = v22;
        if (v22)
        {
          v23 = v22;
          memcpy(v5 + 120, v22 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v23;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v23 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v23 + 98);
          *((_QWORD *)v5 + 14) = *((_QWORD *)v23 + 2);
        }
        v24 = v19[24];
        goto LABEL_35;
      case -16090:
      case -16088:
        v35 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v36 = *a3;
        v37 = *(_QWORD *)v35;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v35 + 1);
        *((_QWORD *)v5 + 2) = v36;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((_QWORD *)v5 + 5) = v37;
        v38 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 7) = v38;
        if (v38)
        {
          v39 = v38;
          memcpy(v5 + 120, v38 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v39;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v39 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v39 + 98);
          *((_QWORD *)v5 + 14) = *((_QWORD *)v39 + 2);
        }
        v24 = v35[32];
LABEL_35:
        result = GTTraceFunc_argumentBytesWithMap(a3, v24, a2);
        *((_QWORD *)v5 + 8) = result;
        break;
      default:
        if (v6 == -15738)
        {
          v45 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v46 = *a3;
          v47 = *(_QWORD *)v45;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v45 + 1);
          *((_QWORD *)v5 + 2) = v46;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          *((_QWORD *)v5 + 5) = v47;
          v48 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 7) = v48;
          if (v48)
          {
            v49 = v48;
            memcpy(v5 + 120, v48 + 216, 0x118uLL);
            *((_OWORD *)v5 + 6) = *(_OWORD *)v49;
            *((_DWORD *)v5 + 102) = *((_DWORD *)v49 + 48);
            *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v49 + 98);
            *((_QWORD *)v5 + 14) = *((_QWORD *)v49 + 2);
          }
          result = GTTraceFunc_argumentBytesWithMap(a3, v45[32], a2);
          *((_QWORD *)v5 + 11) = result;
        }
        break;
    }
  }
  else
  {
    switch(v6)
    {
      case -16303:
      case -16301:
        v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v8 = *a3;
        v9 = *(_QWORD *)v7;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v7 + 1);
        *((_QWORD *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((_QWORD *)v5 + 5) = v9;
        v10 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 7) = v10;
        if (v10)
        {
          v11 = v10;
          memcpy(v5 + 120, v10 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v11;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v11 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v11 + 98);
          *((_QWORD *)v5 + 14) = *((_QWORD *)v11 + 2);
        }
        v12 = v7[24];
        goto LABEL_27;
      case -16302:
      case -16300:
        v25 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v26 = *a3;
        v27 = *(_QWORD *)v25;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v25 + 1);
        *((_QWORD *)v5 + 2) = v26;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((_QWORD *)v5 + 5) = v27;
        v28 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 7) = v28;
        if (v28)
        {
          v29 = v28;
          memcpy(v5 + 120, v28 + 216, 0x118uLL);
          *((_OWORD *)v5 + 6) = *(_OWORD *)v29;
          *((_DWORD *)v5 + 102) = *((_DWORD *)v29 + 48);
          *((_DWORD *)v5 + 103) = *((unsigned __int16 *)v29 + 98);
          *((_QWORD *)v5 + 14) = *((_QWORD *)v29 + 2);
        }
        v12 = v25[32];
LABEL_27:
        result = GTTraceFunc_argumentBytesWithMap(a3, v12, a2);
        *((_QWORD *)v5 + 6) = result;
        break;
      default:
        if (v6 == -16242)
          *((_QWORD *)result + 3) = *a3;
        break;
    }
  }
  return result;
}

char *GTMTLSMComputePipelineState_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  char *v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v5 = result;
  v6 = *((_DWORD *)a3 + 2);
  if (v6 > -16102)
  {
    if (v6 > -10215)
    {
      if (v6 > -10172)
      {
        if (v6 == -10171)
        {
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_QWORD *)v5 + 22) = *((_QWORD *)result + 1);
        }
        else if (v6 == -10162)
        {
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_QWORD *)v5 + 14) = *((_QWORD *)result + 1);
        }
      }
      else if (v6 == -10214)
      {
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_QWORD *)v5 + 12) = *((_QWORD *)result + 1);
      }
      else if (v6 == -10191)
      {
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 48) = *((_DWORD *)result + 2);
      }
    }
    else if (v6 > -15741)
    {
      if (v6 == -15740)
      {
        v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v43 = *a3;
        v44 = *(_QWORD *)v42;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v42 + 1);
        *((_QWORD *)v5 + 2) = v43;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((_QWORD *)v5 + 5) = v44;
        v45 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 8) = v45;
        if (v45)
        {
          v46 = *(_OWORD *)(v45 + 104);
          v47 = *(_OWORD *)(v45 + 120);
          v48 = *(_OWORD *)(v45 + 136);
          *((_QWORD *)v5 + 21) = *((_QWORD *)v45 + 19);
          *(_OWORD *)(v5 + 152) = v48;
          *(_OWORD *)(v5 + 136) = v47;
          *(_OWORD *)(v5 + 120) = v46;
          *((_OWORD *)v5 + 6) = *(_OWORD *)v45;
          *((_DWORD *)v5 + 48) = *((_DWORD *)v45 + 22);
          *((_QWORD *)v5 + 14) = *((_QWORD *)v45 + 2);
        }
        result = GTTraceFunc_argumentBytesWithMap(a3, v42[32], a2);
        *((_QWORD *)v5 + 11) = result;
      }
      else if (v6 == -15541)
      {
        v21 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v22 = *a3;
        v23 = *(_QWORD *)v21;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v21 + 1);
        *((_QWORD *)v5 + 2) = v22;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((_QWORD *)v5 + 5) = v23;
        v24 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 8) = v24;
        if (v24)
        {
          v25 = *(_OWORD *)(v24 + 104);
          v26 = *(_OWORD *)(v24 + 120);
          v27 = *(_OWORD *)(v24 + 136);
          *((_QWORD *)v5 + 21) = *((_QWORD *)v24 + 19);
          *(_OWORD *)(v5 + 152) = v27;
          *(_OWORD *)(v5 + 136) = v26;
          *(_OWORD *)(v5 + 120) = v25;
          *((_OWORD *)v5 + 6) = *(_OWORD *)v24;
          *((_DWORD *)v5 + 48) = *((_DWORD *)v24 + 22);
          *((_QWORD *)v5 + 14) = *((_QWORD *)v24 + 2);
        }
        result = GTTraceFunc_argumentBytesWithMap(a3, v21[24], a2);
        *((_QWORD *)v5 + 23) = result;
      }
    }
    else if (v6 == -16101)
    {
      v35 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      v36 = *a3;
      v37 = *(_QWORD *)v35;
      *((_QWORD *)v5 + 1) = *((_QWORD *)v35 + 1);
      *((_QWORD *)v5 + 2) = v36;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      *((_QWORD *)v5 + 5) = v37;
      v38 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((_QWORD *)v5 + 8) = v38;
      if (v38)
      {
        v39 = *(_OWORD *)(v38 + 104);
        v40 = *(_OWORD *)(v38 + 120);
        v41 = *(_OWORD *)(v38 + 136);
        *((_QWORD *)v5 + 21) = *((_QWORD *)v38 + 19);
        *(_OWORD *)(v5 + 152) = v41;
        *(_OWORD *)(v5 + 136) = v40;
        *(_OWORD *)(v5 + 120) = v39;
        *((_OWORD *)v5 + 6) = *(_OWORD *)v38;
        *((_DWORD *)v5 + 48) = *((_DWORD *)v38 + 22);
        *((_QWORD *)v5 + 14) = *((_QWORD *)v38 + 2);
      }
      *((_QWORD *)v5 + 9) = GTTraceFunc_argumentBytesWithMap(a3, v35[24], a2);
      result = GTTraceFunc_argumentBytesWithMap(a3, v35[25], a2);
      *((_QWORD *)v5 + 10) = result;
    }
    else if (v6 == -15989)
    {
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_QWORD *)v5 + 13) = *((_QWORD *)result + 1);
    }
  }
  else
  {
    switch(v6)
    {
      case -16299:
      case -16298:
      case -16297:
      case -16296:
        v15 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v16 = *a3;
        v17 = *(_QWORD *)v15;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v15 + 1);
        *((_QWORD *)v5 + 2) = v16;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((_QWORD *)v5 + 5) = v17;
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 8) = result;
        if (result)
        {
          v18 = *(_OWORD *)(result + 104);
          v19 = *(_OWORD *)(result + 120);
          v20 = *(_OWORD *)(result + 136);
          *((_QWORD *)v5 + 21) = *((_QWORD *)result + 19);
          *(_OWORD *)(v5 + 152) = v20;
          *(_OWORD *)(v5 + 136) = v19;
          *(_OWORD *)(v5 + 120) = v18;
          *((_OWORD *)v5 + 6) = *(_OWORD *)result;
          *((_DWORD *)v5 + 48) = *((_DWORD *)result + 22);
          *((_QWORD *)v5 + 14) = *((_QWORD *)result + 2);
        }
        *((_QWORD *)v5 + 6) = *((_QWORD *)v15 + 2);
        break;
      default:
        switch(v6)
        {
          case -16200:
          case -16198:
            v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            v8 = *a3;
            v9 = *(_QWORD *)v7;
            *((_QWORD *)v5 + 1) = *((_QWORD *)v7 + 1);
            *((_QWORD *)v5 + 2) = v8;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            *((_QWORD *)v5 + 5) = v9;
            v10 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((_QWORD *)v5 + 8) = v10;
            if (v10)
            {
              v11 = *(_OWORD *)(v10 + 104);
              v12 = *(_OWORD *)(v10 + 120);
              v13 = *(_OWORD *)(v10 + 136);
              *((_QWORD *)v5 + 21) = *((_QWORD *)v10 + 19);
              *(_OWORD *)(v5 + 152) = v13;
              *(_OWORD *)(v5 + 136) = v12;
              *(_OWORD *)(v5 + 120) = v11;
              *((_OWORD *)v5 + 6) = *(_OWORD *)v10;
              *((_DWORD *)v5 + 48) = *((_DWORD *)v10 + 22);
              *((_QWORD *)v5 + 14) = *((_QWORD *)v10 + 2);
            }
            v14 = v7[24];
            goto LABEL_31;
          case -16199:
          case -16197:
            v28 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            v29 = *a3;
            v30 = *(_QWORD *)v28;
            *((_QWORD *)v5 + 1) = *((_QWORD *)v28 + 1);
            *((_QWORD *)v5 + 2) = v29;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            *((_QWORD *)v5 + 5) = v30;
            v31 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((_QWORD *)v5 + 8) = v31;
            if (v31)
            {
              v32 = *(_OWORD *)(v31 + 104);
              v33 = *(_OWORD *)(v31 + 120);
              v34 = *(_OWORD *)(v31 + 136);
              *((_QWORD *)v5 + 21) = *((_QWORD *)v31 + 19);
              *(_OWORD *)(v5 + 152) = v34;
              *(_OWORD *)(v5 + 136) = v33;
              *(_OWORD *)(v5 + 120) = v32;
              *((_OWORD *)v5 + 6) = *(_OWORD *)v31;
              *((_DWORD *)v5 + 48) = *((_DWORD *)v31 + 22);
              *((_QWORD *)v5 + 14) = *((_QWORD *)v31 + 2);
            }
            v14 = v28[32];
LABEL_31:
            result = GTTraceFunc_argumentBytesWithMap(a3, v14, a2);
            *((_QWORD *)v5 + 6) = *((_QWORD *)result + 106);
            *((_QWORD *)v5 + 7) = result;
            break;
          default:
            if (v6 == -16321)
              *((_QWORD *)result + 3) = *a3;
            break;
        }
        break;
    }
  }
  return result;
}

char *GTMTLSMDrawable_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = result;
  v5 = *((_DWORD *)a3 + 2);
  if (v5 > -7162)
  {
    if (v5 == -7161)
    {
      *((_QWORD *)result + 3) = *a3;
    }
    else if (v5 == -6655)
    {
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      v8 = *a3;
      *((_QWORD *)v4 + 1) = *((_QWORD *)result + 1);
      *((_QWORD *)v4 + 2) = v8;
      *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
    }
  }
  else if (v5 == -7167)
  {
    result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    *((_QWORD *)v4 + 6) = *((_QWORD *)result + 1);
  }
  else if (v5 == -7166)
  {
    result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    v6 = *a3;
    v7 = *(_QWORD *)result;
    *((_QWORD *)v4 + 1) = *((_QWORD *)result + 1);
    *((_QWORD *)v4 + 2) = v6;
    *((_DWORD *)v4 + 1) = *((_DWORD *)a3 + 2);
    *((_QWORD *)v4 + 5) = v7;
  }
  return result;
}

char *GTMTLSMAccelerationStructure_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  char *v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int16x8_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;

  v5 = result;
  v6 = *((_DWORD *)a3 + 2);
  if (v6 <= -10198)
  {
    if (v6 > -15507)
    {
      switch(v6)
      {
        case -15359:
          v8 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v9 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v8 + 1);
          *((_QWORD *)v5 + 2) = v9;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 15) = result;
          if (result)
          {
            v10 = *((_QWORD *)result + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            v11 = *((_QWORD *)result + 4);
            *((_QWORD *)v5 + 16) = *((_QWORD *)result + 3);
            *((_QWORD *)v5 + 23) = v11;
            v12 = *((_QWORD *)result + 9);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((_QWORD *)v5 + 20) = v12;
            v13 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v13;
            *((_DWORD *)v5 + 20) = v12 - v13;
            *((_DWORD *)v5 + 21) = v10;
            *((_QWORD *)v5 + 24) = *((_QWORD *)result + 12);
            *((_QWORD *)v5 + 17) = *((_QWORD *)result + 7);
          }
          *((_QWORD *)v5 + 5) = *(_QWORD *)v8;
          v14 = *((_QWORD *)v8 + 2);
          *((_QWORD *)v5 + 25) = *((_QWORD *)v8 + 3);
          v15 = *((_QWORD *)v8 + 4);
          *((_QWORD *)v5 + 18) = v14;
          *((_QWORD *)v5 + 19) = v15;
          return result;
        case -15358:
          goto LABEL_31;
        case -15357:
          return result;
        case -15356:
          v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v43 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v42 + 1);
          *((_QWORD *)v5 + 2) = v43;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 15) = result;
          if (result)
          {
            v44 = *((_QWORD *)result + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            v45 = *((_QWORD *)result + 4);
            *((_QWORD *)v5 + 16) = *((_QWORD *)result + 3);
            *((_QWORD *)v5 + 23) = v45;
            v46 = *((_QWORD *)result + 5);
            *((_QWORD *)v5 + 25) = *((_QWORD *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            v47 = *((_QWORD *)result + 9);
            *((_QWORD *)v5 + 19) = v46;
            *((_QWORD *)v5 + 20) = v47;
            v48 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v48;
            *((_DWORD *)v5 + 20) = v47 - v48;
            *((_DWORD *)v5 + 21) = v44;
            *((_QWORD *)v5 + 24) = *((_QWORD *)result + 12);
            *((_QWORD *)v5 + 17) = *((_QWORD *)result + 7);
          }
          goto LABEL_62;
        case -15355:
          v42 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v49 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v42 + 1);
          *((_QWORD *)v5 + 2) = v49;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 15) = result;
          if (result)
          {
            v50 = *((_QWORD *)result + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)result;
            v51 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v50;
            *((_DWORD *)v5 + 22) = v51;
            v52 = *((_QWORD *)result + 4);
            *((_QWORD *)v5 + 16) = *((_QWORD *)result + 3);
            v53 = *((_QWORD *)result + 6);
            *((_QWORD *)v5 + 19) = *((_QWORD *)result + 5);
            *((_QWORD *)v5 + 23) = v52;
            *((_QWORD *)v5 + 25) = v53;
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((_OWORD *)v5 + 10) = *(_OWORD *)(result + 72);
            v54 = *((_QWORD *)result + 12);
            *((_QWORD *)v5 + 22) = *((_QWORD *)result + 11);
            *((_QWORD *)v5 + 24) = v54;
            *((_QWORD *)v5 + 17) = *((_QWORD *)result + 7);
          }
          *((_DWORD *)v5 + 20) = *((_QWORD *)v42 + 2);
LABEL_62:
          *((_QWORD *)v5 + 6) = *(_QWORD *)v42;
          return result;
        case -15354:
          v33 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v55 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v33 + 1);
          *((_QWORD *)v5 + 2) = v55;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 15) = result;
          if (result)
          {
            v56 = *((_QWORD *)result + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            *((_QWORD *)v5 + 16) = *((_QWORD *)result + 3);
            v57 = *((_QWORD *)result + 5);
            *((_QWORD *)v5 + 25) = *((_QWORD *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            v58 = *((_QWORD *)result + 9);
            *((_QWORD *)v5 + 19) = v57;
            *((_QWORD *)v5 + 20) = v58;
            v59 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v59;
            *((_DWORD *)v5 + 20) = v58 - v59;
            *((_DWORD *)v5 + 21) = v56;
            *((_QWORD *)v5 + 24) = *((_QWORD *)result + 12);
            *((_QWORD *)v5 + 17) = *((_QWORD *)result + 7);
          }
          *((_QWORD *)v5 + 6) = *(_QWORD *)v33;
          goto LABEL_66;
        case -15353:
          v60 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v61 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v60 + 1);
          *((_QWORD *)v5 + 2) = v61;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 15) = result;
          if (result)
          {
            v62 = *((_QWORD *)result + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)result;
            v63 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v62;
            *((_DWORD *)v5 + 22) = v63;
            *((_QWORD *)v5 + 16) = *((_QWORD *)result + 3);
            v64 = *((_QWORD *)result + 6);
            *((_QWORD *)v5 + 19) = *((_QWORD *)result + 5);
            *((_QWORD *)v5 + 25) = v64;
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((_OWORD *)v5 + 10) = *(_OWORD *)(result + 72);
            v65 = *((_QWORD *)result + 12);
            *((_QWORD *)v5 + 22) = *((_QWORD *)result + 11);
            *((_QWORD *)v5 + 24) = v65;
            *((_QWORD *)v5 + 17) = *((_QWORD *)result + 7);
          }
          *((_QWORD *)v5 + 6) = *(_QWORD *)v60;
          v66 = *((_QWORD *)v60 + 2);
          *((_DWORD *)v5 + 20) = *((_QWORD *)v60 + 3);
          *((_QWORD *)v5 + 23) = v66;
          return result;
        case -15352:
          v67 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v68 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v67 + 1);
          *((_QWORD *)v5 + 2) = v68;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 15) = result;
          if (result)
          {
            v69 = *((_QWORD *)result + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)result;
            v70 = *((_DWORD *)result + 4);
            *((_DWORD *)v5 + 21) = v69;
            *((_DWORD *)v5 + 22) = v70;
            *((_QWORD *)v5 + 16) = *((_QWORD *)result + 3);
            *((_QWORD *)v5 + 25) = *((_QWORD *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((_OWORD *)v5 + 10) = *(_OWORD *)(result + 72);
            v71 = *((_QWORD *)result + 12);
            *((_QWORD *)v5 + 22) = *((_QWORD *)result + 11);
            *((_QWORD *)v5 + 24) = v71;
            *((_QWORD *)v5 + 17) = *((_QWORD *)result + 7);
          }
          *((_QWORD *)v5 + 6) = *(_QWORD *)v67;
          v72 = *((_QWORD *)v67 + 2);
          *((_DWORD *)v5 + 20) = *((_QWORD *)v67 + 3);
          *((_QWORD *)v5 + 23) = v72;
          v39 = *((_QWORD *)v67 + 4);
          goto LABEL_73;
        case -15351:
          v73 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v74 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v73 + 1);
          *((_QWORD *)v5 + 2) = v74;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 15) = result;
          if (result)
          {
            v75 = *((_QWORD *)result + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            *((_QWORD *)v5 + 16) = *((_QWORD *)result + 3);
            *((_QWORD *)v5 + 25) = *((_QWORD *)result + 6);
            v76 = *((_QWORD *)result + 9);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            *((_QWORD *)v5 + 20) = v76;
            v77 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v77;
            *((_DWORD *)v5 + 20) = v76 - v77;
            *((_DWORD *)v5 + 21) = v75;
            *((_QWORD *)v5 + 24) = *((_QWORD *)result + 12);
            *((_QWORD *)v5 + 17) = *((_QWORD *)result + 7);
          }
          *((_QWORD *)v5 + 6) = *(_QWORD *)v73;
          goto LABEL_80;
        default:
          if (v6 == -15506)
          {
            v73 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            v78 = *a3;
            *((_QWORD *)v5 + 1) = *((_QWORD *)v73 + 1);
            *((_QWORD *)v5 + 2) = v78;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((_QWORD *)v5 + 15) = result;
            if (result)
            {
              v79 = *((_QWORD *)result + 1);
              *((_QWORD *)v5 + 7) = *(_QWORD *)result;
              *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
              *((_QWORD *)v5 + 16) = *((_QWORD *)result + 3);
              *((_QWORD *)v5 + 25) = *((_QWORD *)result + 6);
              v80 = *((_QWORD *)result + 9);
              *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
              *((_QWORD *)v5 + 20) = v80;
              v81 = *((_OWORD *)result + 5);
              *(_OWORD *)(v5 + 168) = v81;
              *((_DWORD *)v5 + 20) = v80 - v81;
              *((_DWORD *)v5 + 21) = v79;
              *((_QWORD *)v5 + 24) = *((_QWORD *)result + 12);
              *((_QWORD *)v5 + 17) = *((_QWORD *)result + 7);
            }
            *((_QWORD *)v5 + 5) = *(_QWORD *)v73;
LABEL_80:
            v82 = *((_QWORD *)v73 + 3);
            *((_QWORD *)v5 + 23) = *((_QWORD *)v73 + 2);
            *((_QWORD *)v5 + 19) = v82;
          }
          else if (v6 == -15464)
          {
            v24 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            v25 = *a3;
            *((_QWORD *)v5 + 1) = *((_QWORD *)v24 + 1);
            *((_QWORD *)v5 + 2) = v25;
            *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
            result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
            *((_QWORD *)v5 + 15) = result;
            if (result)
            {
              v26 = *((_QWORD *)result + 1);
              *((_QWORD *)v5 + 7) = *(_QWORD *)result;
              *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
              v27 = *((_QWORD *)result + 4);
              *((_QWORD *)v5 + 16) = *((_QWORD *)result + 3);
              v28 = *((_QWORD *)result + 5);
              *((_QWORD *)v5 + 23) = v27;
              *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
              v29 = *((_QWORD *)result + 9);
              *((_QWORD *)v5 + 19) = v28;
              *((_QWORD *)v5 + 20) = v29;
              v30 = *((_OWORD *)result + 5);
              *(_OWORD *)(v5 + 168) = v30;
              *((_DWORD *)v5 + 20) = v29 - v30;
              *((_DWORD *)v5 + 21) = v26;
              *((_QWORD *)v5 + 24) = *((_QWORD *)result + 12);
              *((_QWORD *)v5 + 17) = *((_QWORD *)result + 7);
            }
            *((_QWORD *)v5 + 5) = *(_QWORD *)v24;
            v31 = *((_QWORD *)v24 + 3);
            *((_QWORD *)v5 + 18) = *((_QWORD *)v24 + 2);
            *((_QWORD *)v5 + 25) = v31;
          }
          break;
      }
    }
    else if (v6 > -15616)
    {
      switch(v6)
      {
        case -15615:
LABEL_31:
          v17 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v18 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v17 + 1);
          *((_QWORD *)v5 + 2) = v18;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 15) = result;
          if (result)
          {
            v19 = *((_QWORD *)result + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            v20 = *((_QWORD *)result + 4);
            *((_QWORD *)v5 + 16) = *((_QWORD *)result + 3);
            *((_QWORD *)v5 + 23) = v20;
            v21 = *((_QWORD *)result + 5);
            *((_QWORD *)v5 + 25) = *((_QWORD *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            v22 = *((_QWORD *)result + 9);
            *((_QWORD *)v5 + 19) = v21;
            *((_QWORD *)v5 + 20) = v22;
            v23 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v23;
            *((_DWORD *)v5 + 20) = v22 - v23;
            *((_DWORD *)v5 + 21) = v19;
            *((_QWORD *)v5 + 24) = *((_QWORD *)result + 12);
            *((_QWORD *)v5 + 17) = *((_QWORD *)result + 7);
          }
          *((_QWORD *)v5 + 5) = *(_QWORD *)v17;
          break;
        case -15614:
          v33 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v34 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v33 + 1);
          *((_QWORD *)v5 + 2) = v34;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 15) = result;
          if (result)
          {
            v35 = *((_QWORD *)result + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)result;
            *((_DWORD *)v5 + 22) = *((_DWORD *)result + 4);
            *((_QWORD *)v5 + 16) = *((_QWORD *)result + 3);
            v36 = *((_QWORD *)result + 5);
            *((_QWORD *)v5 + 25) = *((_QWORD *)result + 6);
            *((_WORD *)v5 + 48) = *((_WORD *)result + 32);
            v37 = *((_QWORD *)result + 9);
            *((_QWORD *)v5 + 19) = v36;
            *((_QWORD *)v5 + 20) = v37;
            v38 = *((_OWORD *)result + 5);
            *(_OWORD *)(v5 + 168) = v38;
            *((_DWORD *)v5 + 20) = v37 - v38;
            *((_DWORD *)v5 + 21) = v35;
            *((_QWORD *)v5 + 24) = *((_QWORD *)result + 12);
            *((_QWORD *)v5 + 17) = *((_QWORD *)result + 7);
          }
          *((_QWORD *)v5 + 5) = *(_QWORD *)v33;
LABEL_66:
          *((_QWORD *)v5 + 23) = *((_QWORD *)v33 + 2);
          break;
        case -15552:
          v16 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          result = GTTraceFunc_argumentBytesWithMap(a3, v16[8], a2);
          *((_QWORD *)v5 + 14) = result;
          if (result)
          {
            v5[104] = (*result & 0xFE) == 2;
            v5[105] = 1;
            v5[107] = (result[1] & 4) != 0;
          }
          break;
      }
    }
    else
    {
      switch(v6)
      {
        case -15661:
          v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          result = GTTraceFunc_argumentBytesWithMap(a3, v7[8], a2);
          *((_QWORD *)v5 + 9) = result;
          break;
        case -15660:
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
          break;
        case -15659:
          *((_QWORD *)result + 3) = *a3;
          break;
        case -15651:
          result[100] = 1;
          break;
        case -15650:
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v32 = *((_QWORD *)result + 2);
          if (v32 != 1)
            *((_WORD *)v5 + 49) = v32;
          break;
        default:
          return result;
      }
    }
    return result;
  }
  if (v6 > -10174)
  {
    if (v6 <= -10160)
    {
      switch(v6)
      {
        case -10173:
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_QWORD *)v5 + 8) = *((_QWORD *)result + 1);
          break;
        case -10170:
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v39 = *((_QWORD *)result + 1);
LABEL_73:
          *((_QWORD *)v5 + 19) = v39;
          break;
        case -10169:
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 20) = *((_QWORD *)result + 1);
          break;
        case -10167:
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_QWORD *)v5 + 17) = *((_QWORD *)result + 1);
          break;
        default:
          return result;
      }
      return result;
    }
    if (v6 == -10159)
    {
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      v41 = *(int16x8_t *)(result + 8);
    }
    else
    {
      if (v6 != -10158)
      {
        if (v6 == -10154)
        {
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          if (*((_QWORD *)v5 + 1) == *((_QWORD *)result + 1))
          {
            result = GTTraceFunc_argumentBytesWithMap(a3, result[16], a2);
            *((_QWORD *)v5 + 14) = result;
          }
        }
        return result;
      }
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      if (*((_QWORD *)v5 + 1) != *((_QWORD *)result + 1))
        return result;
      v41 = *((int16x8_t *)result + 1);
    }
    *(int16x4_t *)v41.i8 = vmovn_s32((int32x4_t)v41);
    *((_DWORD *)v5 + 26) = vmovn_s16(v41).u32[0];
    return result;
  }
  if (v6 <= -10196)
  {
    if (v6 == -10197)
    {
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_QWORD *)v5 + 7) = *((_QWORD *)result + 1);
    }
    else
    {
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_DWORD *)v5 + 21) = *((_QWORD *)result + 1);
    }
  }
  else
  {
    switch(v6)
    {
      case -10195:
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 23) = *((_DWORD *)result + 2);
        break;
      case -10182:
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_OWORD *)v5 + 10) = *(_OWORD *)(result + 8);
        v40 = *((_QWORD *)result + 4);
        *((_QWORD *)v5 + 22) = *((_QWORD *)result + 3);
        *((_WORD *)v5 + 48) = v40;
        *((_OWORD *)v5 + 12) = *(_OWORD *)(result + 40);
        break;
      case -10181:
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_QWORD *)v5 + 16) = *((_QWORD *)result + 1);
        break;
    }
  }
  return result;
}

char *GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  char *v5;
  int v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  char v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int v38;

  v5 = result;
  v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15444)
  {
    if (v6 <= -10181)
    {
      switch(v6)
      {
        case -15443:
          v30 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v31 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v30 + 1);
          *((_QWORD *)v5 + 2) = v31;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          v32 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 14) = v32;
          if (v32)
          {
            v33 = *((_QWORD *)v32 + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)v32;
            v34 = *((_DWORD *)v32 + 4);
            *((_DWORD *)v5 + 21) = v33;
            *((_DWORD *)v5 + 22) = v34;
            *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v32 + 24), *(int8x16_t *)(v32 + 24), 8uLL);
            *((_QWORD *)v5 + 19) = *((_QWORD *)v32 + 5);
          }
          *((_QWORD *)v5 + 16) = *(_QWORD *)v30;
          result = GTTraceFunc_argumentBytesWithMap(a3, v30[16], a2);
          *((_QWORD *)v5 + 13) = result;
          v18 = 2;
          break;
        case -15442:
          v25 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v26 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v25 + 1);
          *((_QWORD *)v5 + 2) = v26;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          v27 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 14) = v27;
          if (v27)
          {
            v28 = *((_QWORD *)v27 + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)v27;
            v29 = *((_DWORD *)v27 + 4);
            *((_DWORD *)v5 + 21) = v28;
            *((_DWORD *)v5 + 22) = v29;
            *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v27 + 24), *(int8x16_t *)(v27 + 24), 8uLL);
            *((_QWORD *)v5 + 19) = *((_QWORD *)v27 + 5);
          }
          *((_QWORD *)v5 + 16) = *(_QWORD *)v25;
          result = GTTraceFunc_argumentBytesWithMap(a3, v25[16], a2);
          *((_QWORD *)v5 + 13) = result;
          v18 = 4;
          break;
        case -15441:
          v13 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          v14 = *a3;
          *((_QWORD *)v5 + 1) = *((_QWORD *)v13 + 1);
          *((_QWORD *)v5 + 2) = v14;
          *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
          v15 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
          *((_QWORD *)v5 + 14) = v15;
          if (v15)
          {
            v16 = *((_QWORD *)v15 + 1);
            *((_QWORD *)v5 + 7) = *(_QWORD *)v15;
            v17 = *((_DWORD *)v15 + 4);
            *((_DWORD *)v5 + 21) = v16;
            *((_DWORD *)v5 + 22) = v17;
            *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v15 + 24), *(int8x16_t *)(v15 + 24), 8uLL);
            *((_QWORD *)v5 + 19) = *((_QWORD *)v15 + 5);
          }
          *((_QWORD *)v5 + 16) = *(_QWORD *)v13;
          result = GTTraceFunc_argumentBytesWithMap(a3, v13[16], a2);
          *((_QWORD *)v5 + 13) = result;
          v18 = 1;
          break;
        default:
          return result;
      }
      v5[160] = v18;
    }
    else
    {
      switch(v6)
      {
        case -10180:
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_QWORD *)v5 + 8) = *((_QWORD *)result + 1);
          break;
        case -10179:
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_DWORD *)v5 + 21) = *((_QWORD *)result + 1);
          break;
        case -10178:
        case -10177:
          return result;
        case -10176:
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_QWORD *)v5 + 7) = *((_QWORD *)result + 1);
          break;
        case -10175:
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_QWORD *)v5 + 18) = *((_QWORD *)result + 1);
          break;
        default:
          if (v6 == -10161)
          {
            result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
            *((_QWORD *)v5 + 19) = *((_QWORD *)result + 1);
          }
          break;
      }
    }
  }
  else if (v6 > -15561)
  {
    if (v6 > -15541)
    {
      if (v6 == -15540)
      {
        v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v35 = *a3;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v7 + 1);
        *((_QWORD *)v5 + 2) = v35;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        v36 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 14) = v36;
        if (v36)
        {
          v37 = *((_QWORD *)v36 + 1);
          *((_QWORD *)v5 + 7) = *(_QWORD *)v36;
          v38 = *((_DWORD *)v36 + 4);
          *((_DWORD *)v5 + 21) = v37;
          *((_DWORD *)v5 + 22) = v38;
          *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v36 + 24), *(int8x16_t *)(v36 + 24), 8uLL);
          *((_QWORD *)v5 + 19) = *((_QWORD *)v36 + 5);
        }
        *((_QWORD *)v5 + 15) = *(_QWORD *)v7;
LABEL_45:
        result = GTTraceFunc_argumentBytesWithMap(a3, v7[16], a2);
        *((_QWORD *)v5 + 13) = result;
      }
      else if (v6 == -15462)
      {
        v19 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v20 = *a3;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v19 + 1);
        *((_QWORD *)v5 + 2) = v20;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        v21 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 14) = v21;
        if (v21)
        {
          v22 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v5 + 7) = *(_QWORD *)v21;
          v23 = *((_DWORD *)v21 + 4);
          *((_DWORD *)v5 + 21) = v22;
          *((_DWORD *)v5 + 22) = v23;
          *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v21 + 24), *(int8x16_t *)(v21 + 24), 8uLL);
          *((_QWORD *)v5 + 19) = *((_QWORD *)v21 + 5);
        }
        *((_QWORD *)v5 + 16) = *(_QWORD *)v19;
        result = GTTraceFunc_argumentBytesWithMap(a3, v19[24], a2);
        *((_QWORD *)v5 + 13) = result;
        v5[160] = *((_QWORD *)v19 + 2);
      }
    }
    else if (v6 == -15560)
    {
      result[100] = 1;
    }
    else if (v6 == -15557)
    {
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      v12 = *((_QWORD *)result + 2);
      if (v12 != 1)
        *((_WORD *)v5 + 49) = v12;
    }
  }
  else
  {
    switch(v6)
    {
      case -15577:
        v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v8 = *a3;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v7 + 1);
        *((_QWORD *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        v9 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 14) = v9;
        if (v9)
        {
          v10 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v5 + 7) = *(_QWORD *)v9;
          v11 = *((_DWORD *)v9 + 4);
          *((_DWORD *)v5 + 21) = v10;
          *((_DWORD *)v5 + 22) = v11;
          *(int8x16_t *)(v5 + 136) = vextq_s8(*(int8x16_t *)(v9 + 24), *(int8x16_t *)(v9 + 24), 8uLL);
          *((_QWORD *)v5 + 19) = *((_QWORD *)v9 + 5);
        }
        *((_QWORD *)v5 + 5) = *(_QWORD *)v7;
        goto LABEL_45;
      case -15570:
        v24 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        result = GTTraceFunc_argumentBytesWithMap(a3, v24[8], a2);
        *((_QWORD *)v5 + 9) = result;
        break;
      case -15569:
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 22) = *((_DWORD *)result + 2);
        break;
      case -15568:
        *((_QWORD *)result + 3) = *a3;
        break;
      default:
        return result;
    }
  }
  return result;
}

char *GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v7;
  char *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _DWORD *i;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v7 = *(_DWORD *)(a3 + 8);
  if (v7 <= -15531)
  {
    if (v7 > -15546)
    {
      if (v7 == -15545)
      {
        result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        v45 = *((_QWORD *)result + 1);
        v46 = a1 + 184 + 24 * *((_QWORD *)result + 3);
        *(_DWORD *)v46 = v45 != 0;
        *(_QWORD *)(v46 + 8) = v45;
        *(_QWORD *)(a1 + 184 + 24 * *((_QWORD *)result + 3) + 16) = *((_QWORD *)result + 2);
        return result;
      }
      if (v7 != -15544)
        return GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)a1, a2, (uint64_t *)a3);
      v26 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      v27 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, v26[24], a2);
      result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, v26[25], a2);
      if (*((_QWORD *)v26 + 2))
      {
        v28 = 0;
        do
        {
          v29 = *(_QWORD *)&v27[8 * v28];
          v30 = a1 + 184 + 24 * (v28 + *((_QWORD *)v26 + 1));
          *(_DWORD *)v30 = v29 != 0;
          *(_QWORD *)(v30 + 8) = v29;
          *(_QWORD *)(a1 + 184 + 24 * (v28 + *((_QWORD *)v26 + 1)) + 16) = *(_QWORD *)&result[8 * v28];
          ++v28;
        }
        while (*((_QWORD *)v26 + 2) > v28);
      }
      return result;
    }
    if (v7 != -15559)
    {
      if (v7 != -15558)
        return GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)a1, a2, (uint64_t *)a3);
      result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      if (*(_QWORD *)(a1 + 168))
      {
        v13 = result;
        result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, result[24], a2);
        if (*((_QWORD *)v13 + 2))
        {
          v14 = 0;
          do
          {
            v15 = *(_QWORD *)(a1 + 168) + 16 * (v14 + *((_QWORD *)v13 + 1));
            *(_DWORD *)v15 = 1;
            *(_QWORD *)(v15 + 8) = *(_QWORD *)&result[8 * v14++];
          }
          while (*((_QWORD *)v13 + 2) > v14);
        }
      }
      return result;
    }
    result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    v40 = *(_QWORD *)(a1 + 168);
    if (!v40)
      return result;
    v10 = *((_QWORD *)result + 1);
    v11 = v40 + 16 * *((_QWORD *)result + 2);
    v12 = 1;
LABEL_51:
    *(_DWORD *)v11 = v12;
    *(_QWORD *)(v11 + 8) = v10;
    return result;
  }
  if (v7 <= -15259)
  {
    switch(v7)
    {
      case -15530:
        result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        v9 = *(_QWORD *)(a1 + 168);
        if (!v9)
          return result;
        v10 = *((_QWORD *)result + 1);
        v11 = v9 + 16 * *((_QWORD *)result + 2);
        v12 = 2;
        break;
      case -15529:
        result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        if (*(_QWORD *)(a1 + 168) && *((_QWORD *)result + 3))
        {
          v31 = 0;
          do
          {
            v32 = *((_QWORD *)result + 1);
            v33 = *(_QWORD *)(a1 + 168) + 16 * (v31 + *((_QWORD *)result + 2));
            *(_DWORD *)v33 = 2;
            *(_QWORD *)(v33 + 8) = v32;
            ++v31;
          }
          while (*((_QWORD *)result + 3) > v31);
        }
        return result;
      case -15526:
        result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        v25 = *((_QWORD *)result + 1);
        v34 = 2 * (v25 != 0);
        v35 = a1 + 24 * *((_QWORD *)result + 2);
        goto LABEL_42;
      case -15525:
        v36 = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, *(unsigned __int8 *)(a3 + 13), a2);
        result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, v36[24], a2);
        if (*((_QWORD *)v36 + 2))
        {
          v37 = 0;
          do
          {
            v38 = *(_QWORD *)&result[8 * v37];
            v39 = a1 + 24 * (v37 + *((_QWORD *)v36 + 1));
            *(_DWORD *)(v39 + 184) = 2 * (v38 != 0);
            *(_QWORD *)(v39 + 192) = v38;
            ++v37;
          }
          while (*((_QWORD *)v36 + 2) > v37);
        }
        return result;
      default:
        return GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)a1, a2, (uint64_t *)a3);
    }
    goto LABEL_51;
  }
  if (v7 == -15258)
  {
    result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    v41 = *(_QWORD *)(a1 + 168);
    if (!v41)
      return result;
    v10 = *((_QWORD *)result + 1);
    v11 = v41 + 16 * *((_QWORD *)result + 2);
    v12 = 3;
    goto LABEL_51;
  }
  if (v7 != -15257)
  {
    if (v7 == -10152)
    {
      result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, *(unsigned __int8 *)(a3 + 13), a2);
      if (!a4)
        return result;
      result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, result[8], a2);
      v17 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      v18 = result;
      v19 = 0;
      for (i = (_DWORD *)(a1 + 184); ; i += 6)
      {
        v21 = &v18[8 * v19];
        v22 = *((_QWORD *)v21 + 1);
        if (v22)
        {
          result = (char *)GTMTLGPUAddressResource_resourceForGPUAddress(*(_QWORD **)(*a4 + 24), *(int *)(*a4 + 12), *((_QWORD *)v21 + 1));
          if (result)
          {
            v23 = *((_QWORD *)result + 2);
            if (v23)
            {
              v47 = *(_QWORD *)result;
              v48 = a1 + 24 * v19;
              *(_DWORD *)(v48 + 184) = 1;
              *(_QWORD *)(v48 + 192) = v23;
              *(_QWORD *)(v48 + 200) = v22 - v47;
              return result;
            }
          }
          v49 = v22;
          result = (char *)find_entry(a4[9], &v49, 8uLL, 0);
          if (*(_QWORD *)result)
          {
            v24 = *(_QWORD *)(*(_QWORD *)result + 32);
            if (v24)
            {
              v25 = *(_QWORD *)(v24 + 8);
              if (v25)
              {
                v35 = a1 + 24 * v19;
                v34 = 2;
LABEL_42:
                *(_DWORD *)(v35 + 184) = v34;
                *(_QWORD *)(v35 + 192) = v25;
                return result;
              }
            }
          }
          v17 = *(_QWORD *)v18;
        }
        else
        {
          *i = 0;
        }
        if (v17 <= ++v19)
          return result;
      }
    }
    return GTMTLSMIntersectionFunctionTable_processTraceFuncWithMap((char *)a1, a2, (uint64_t *)a3);
  }
  result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, *(unsigned __int8 *)(a3 + 13), a2);
  if (*(_QWORD *)(a1 + 168) && *((_QWORD *)result + 3))
  {
    v42 = 0;
    do
    {
      v43 = *((_QWORD *)result + 1);
      v44 = *(_QWORD *)(a1 + 168) + 16 * (v42 + *((_QWORD *)result + 2));
      *(_DWORD *)v44 = 3;
      *(_QWORD *)(v44 + 8) = v43;
      ++v42;
    }
    while (*((_QWORD *)result + 3) > v42);
  }
  return result;
}

char *GTMTLSMVisibleFunctionTable_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  char *v5;
  int v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  char v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;

  v5 = result;
  v6 = *((_DWORD *)a3 + 2);
  if (v6 > -15439)
  {
    if (v6 > -10178)
    {
      if (v6 > -10161)
      {
        if (v6 == -10160)
        {
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_QWORD *)v5 + 19) = *((_QWORD *)result + 1);
        }
        else if (v6 == -10153)
        {
          result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
          *((_QWORD *)v5 + 20) = *((_QWORD *)result + 1);
        }
      }
      else if (v6 == -10177)
      {
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_QWORD *)v5 + 7) = *((_QWORD *)result + 1);
      }
      else if (v6 == -10174)
      {
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_DWORD *)v5 + 21) = *((_QWORD *)result + 1);
      }
      return result;
    }
    if (v6 != -15438)
    {
      if (v6 == -10193)
      {
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_QWORD *)v5 + 17) = *((_QWORD *)result + 1);
      }
      else if (v6 == -10178)
      {
        result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        *((_QWORD *)v5 + 8) = *((_QWORD *)result + 1);
      }
      return result;
    }
    v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
    v18 = *a3;
    *((_QWORD *)v5 + 1) = *((_QWORD *)v7 + 1);
    *((_QWORD *)v5 + 2) = v18;
    *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
    v19 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
    *((_QWORD *)v5 + 14) = v19;
    if (v19)
    {
      v20 = *((_QWORD *)v19 + 1);
      *((_QWORD *)v5 + 7) = *(_QWORD *)v19;
      v21 = *((_DWORD *)v19 + 4);
      *((_DWORD *)v5 + 21) = v20;
      *((_DWORD *)v5 + 22) = v21;
      *(_OWORD *)(v5 + 136) = *(_OWORD *)(v19 + 24);
      *(_OWORD *)(v5 + 152) = *(_OWORD *)(v19 + 40);
    }
    *((_QWORD *)v5 + 16) = *(_QWORD *)v7;
    v16 = 1;
LABEL_40:
    v5[168] = v16;
LABEL_41:
    v27 = v7[16];
LABEL_42:
    result = GTTraceFunc_argumentBytesWithMap(a3, v27, a2);
    *((_QWORD *)v5 + 13) = result;
    return result;
  }
  if (v6 > -15461)
  {
    switch(v6)
    {
      case -15460:
        v22 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v23 = *a3;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v22 + 1);
        *((_QWORD *)v5 + 2) = v23;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        v24 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 14) = v24;
        if (v24)
        {
          v25 = *((_QWORD *)v24 + 1);
          *((_QWORD *)v5 + 7) = *(_QWORD *)v24;
          v26 = *((_DWORD *)v24 + 4);
          *((_DWORD *)v5 + 21) = v25;
          *((_DWORD *)v5 + 22) = v26;
          *(_OWORD *)(v5 + 136) = *(_OWORD *)(v24 + 24);
          *(_OWORD *)(v5 + 152) = *(_OWORD *)(v24 + 40);
        }
        *((_QWORD *)v5 + 16) = *(_QWORD *)v22;
        v5[168] = *((_QWORD *)v22 + 2);
        v27 = v22[24];
        goto LABEL_42;
      case -15440:
        v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v28 = *a3;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v7 + 1);
        *((_QWORD *)v5 + 2) = v28;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        v29 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 14) = v29;
        if (v29)
        {
          v30 = *((_QWORD *)v29 + 1);
          *((_QWORD *)v5 + 7) = *(_QWORD *)v29;
          v31 = *((_DWORD *)v29 + 4);
          *((_DWORD *)v5 + 21) = v30;
          *((_DWORD *)v5 + 22) = v31;
          *(_OWORD *)(v5 + 136) = *(_OWORD *)(v29 + 24);
          *(_OWORD *)(v5 + 152) = *(_OWORD *)(v29 + 40);
        }
        *((_QWORD *)v5 + 16) = *(_QWORD *)v7;
        v16 = 2;
        break;
      case -15439:
        v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v12 = *a3;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v7 + 1);
        *((_QWORD *)v5 + 2) = v12;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        v13 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
        *((_QWORD *)v5 + 14) = v13;
        if (v13)
        {
          v14 = *((_QWORD *)v13 + 1);
          *((_QWORD *)v5 + 7) = *(_QWORD *)v13;
          v15 = *((_DWORD *)v13 + 4);
          *((_DWORD *)v5 + 21) = v14;
          *((_DWORD *)v5 + 22) = v15;
          *(_OWORD *)(v5 + 136) = *(_OWORD *)(v13 + 24);
          *(_OWORD *)(v5 + 152) = *(_OWORD *)(v13 + 40);
        }
        *((_QWORD *)v5 + 16) = *(_QWORD *)v7;
        v16 = 4;
        break;
      default:
        return result;
    }
    goto LABEL_40;
  }
  switch(v6)
  {
    case -15607:
      v17 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      result = GTTraceFunc_argumentBytesWithMap(a3, v17[8], a2);
      *((_QWORD *)v5 + 9) = result;
      return result;
    case -15605:
      *((_QWORD *)result + 3) = *a3;
      return result;
    case -15578:
      v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      v8 = *a3;
      *((_QWORD *)v5 + 1) = *((_QWORD *)v7 + 1);
      *((_QWORD *)v5 + 2) = v8;
      *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
      v9 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 14), a2);
      *((_QWORD *)v5 + 14) = v9;
      if (v9)
      {
        v10 = *((_QWORD *)v9 + 1);
        *((_QWORD *)v5 + 7) = *(_QWORD *)v9;
        v11 = *((_DWORD *)v9 + 4);
        *((_DWORD *)v5 + 21) = v10;
        *((_DWORD *)v5 + 22) = v11;
        *(_OWORD *)(v5 + 136) = *(_OWORD *)(v9 + 24);
        *(_OWORD *)(v5 + 152) = *(_OWORD *)(v9 + 40);
      }
      *((_QWORD *)v5 + 15) = *(_QWORD *)v7;
      goto LABEL_41;
  }
  return result;
}

char *GTMTLSMVisibleFunctionTableStateful_processTraceFuncWithMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *result;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;

  v6 = *(_DWORD *)(a3 + 8);
  if (v6 == -15597)
  {
    result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    if (*(_QWORD *)(a1 + 176))
    {
      v9 = result;
      result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, result[24], a2);
      if (*((_QWORD *)v9 + 2))
      {
        v10 = 0;
        v11 = *(_QWORD *)(a1 + 176);
        do
        {
          *(_QWORD *)(v11 + 8 * (v10 + *((_QWORD *)v9 + 1))) = *(_QWORD *)&result[8 * v10];
          ++v10;
        }
        while (*((_QWORD *)v9 + 2) > v10);
      }
    }
  }
  else if (v6 == -15598)
  {
    result = GTTraceFunc_argumentBytesWithMap((_QWORD *)a3, *(unsigned __int8 *)(a3 + 13), a2);
    v8 = *(_QWORD *)(a1 + 176);
    if (v8)
      *(_QWORD *)(v8 + 8 * *((_QWORD *)result + 2)) = *((_QWORD *)result + 1);
  }
  else
  {
    return GTMTLSMVisibleFunctionTable_processTraceFuncWithMap((char *)a1, a2, (uint64_t *)a3);
  }
  return result;
}

char *GTMTLFXSMSpatialScaler_processTraceFuncWithMap(char *result, uint64_t a2, uint64_t *a3)
{
  char *v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case -20480:
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_QWORD *)v5 + 8) = *((_QWORD *)result + 1);
      break;
    case -20479:
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_QWORD *)v5 + 7) = *((_QWORD *)result + 1);
      break;
    case -20478:
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_QWORD *)v5 + 11) = *((_QWORD *)result + 1);
      break;
    case -20477:
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_QWORD *)v5 + 10) = *((_QWORD *)result + 1);
      break;
    case -20476:
      result = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
      *((_QWORD *)v5 + 9) = *((_QWORD *)result + 1);
      break;
    case -20475:
      *((_QWORD *)result + 3) = *a3;
      break;
    default:
      if (v6 == -18432)
      {
        v7 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v8 = *a3;
        v9 = *(_QWORD *)v7;
        *((_QWORD *)v5 + 1) = *((_QWORD *)v7 + 1);
        *((_QWORD *)v5 + 2) = v8;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a3 + 2);
        *((_QWORD *)v5 + 5) = v9;
        result = GTTraceFunc_argumentBytesWithMap(a3, v7[16], a2);
        *((_QWORD *)v5 + 6) = result;
        *((_OWORD *)v5 + 5) = *(_OWORD *)result;
      }
      break;
  }
  return result;
}

float32_t GTMTLFXSMTemporalScaler_processTraceFuncWithMap(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  float32x2_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64x2_t v12;

  v6 = *((_DWORD *)a3 + 2);
  switch(v6)
  {
    case -20473:
      *(_QWORD *)(a1 + 64) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20472:
      *(_BYTE *)(a1 + 148) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      break;
    case -20471:
      *(_QWORD *)(a1 + 72) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20470:
      *(_QWORD *)(a1 + 88) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20469:
      *(_QWORD *)(a1 + 56) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20468:
      *(_QWORD *)(a1 + 120) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20467:
      *(_QWORD *)(a1 + 112) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20466:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 128) = v7.i32[0];
      break;
    case -20465:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 132) = v7.i32[0];
      break;
    case -20464:
      *(_QWORD *)(a1 + 80) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20463:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 136) = v7.i32[0];
      break;
    case -20462:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 140) = v7.i32[0];
      break;
    case -20461:
      *(_QWORD *)(a1 + 96) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    case -20460:
      v7.i32[0] = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      *(_DWORD *)(a1 + 144) = v7.i32[0];
      break;
    case -20459:
      *(_BYTE *)(a1 + 149) = *((_DWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 2);
      break;
    case -20458:
      *(_QWORD *)(a1 + 24) = *a3;
      break;
    case -20457:
      *(_BYTE *)(a1 + 149) = 0;
      break;
    case -20456:
      *(_QWORD *)(a1 + 104) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      break;
    default:
      if (v6 == -18430)
      {
        *(_BYTE *)(a1 + 150) = *((_QWORD *)GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2) + 1);
      }
      else if (v6 == -18431)
      {
        v8 = GTTraceFunc_argumentBytesWithMap(a3, *((unsigned __int8 *)a3 + 13), a2);
        v9 = *a3;
        v10 = *(_QWORD *)v8;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)v8 + 1);
        *(_QWORD *)(a1 + 16) = v9;
        *(_DWORD *)(a1 + 4) = *((_DWORD *)a3 + 2);
        *(_QWORD *)(a1 + 40) = v10;
        v11 = GTTraceFunc_argumentBytesWithMap(a3, v8[16], a2);
        *(_QWORD *)(a1 + 48) = v11;
        *(_QWORD *)(a1 + 128) = 0;
        v12 = *((uint64x2_t *)v11 + 1);
        *(uint64x2_t *)(a1 + 112) = v12;
        v7 = vneg_f32(vcvt_f32_f64(vcvtq_f64_u64(v12)));
        *(float32x2_t *)(a1 + 136) = v7;
        *(_DWORD *)(a1 + 144) = 1065353216;
        *(_WORD *)(a1 + 148) = 257;
      }
      break;
  }
  return v7.f32[0];
}

void *GTMTLSMRenderPipelineState_resourceAccess(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[19];

  memset(v16, 0, sizeof(v16));
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v8 = 0u;
  v9 = 0;
  LODWORD(v8) = 71;
  v10 = -1;
  v15 = 0xFFFFFFFFFFFFFFFFLL;
  if (a2 && (v5 = *(_QWORD *)(a2 + 32)) != 0 && (*(_BYTE *)(v5 + 79) & 8) != 0)
    v6 = (uint64_t *)(v5 + 64);
  else
    v6 = 0;
  GTMTLSMRenderPipelineState_processTraceFuncWithMap((char *)&v8, a3, v6);
  return memcpy(a1, (char *)v16 + 8, 0x118uLL);
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

id objc_msgSend_GPUEndTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "GPUEndTime");
}

id objc_msgSend_GPUStartTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "GPUStartTime");
}

id objc_msgSend_GTGPUToolsData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "GTGPUToolsData");
}

id objc_msgSend_JSGlobalContextRef(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "JSGlobalContextRef");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_JSValueRef(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "JSValueRef");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URL");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLByDeletingLastPathComponent");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__ProcessLineList_forFileCostMap_forDebugInfo_andCost_forAddr_andDrawIndex_andTargetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_ProcessLineList:forFileCostMap:forDebugInfo:andCost:forAddr:andDrawIndex:andTargetIndex:");
}

id objc_msgSend__activateSource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_activateSource:");
}

id objc_msgSend__addBatchAtEncoderIndex_inEncoderArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_addBatchAtEncoderIndex:inEncoderArray:");
}

id objc_msgSend__addBlitTimesToEffectiveKickTimes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_addBlitTimesToEffectiveKickTimes:");
}

id objc_msgSend__addDependency_REQUIRESLOCK_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_addDependency_REQUIRESLOCK:");
}

id objc_msgSend__addDerivedCounterDataToTimelineInfo_usingShaderProfilerResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_addDerivedCounterDataToTimelineInfo:usingShaderProfilerResult:");
}

id objc_msgSend__addEncoderInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_addEncoderInfo:");
}

id objc_msgSend__allocateMessageBuffer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_allocateMessageBuffer");
}

id objc_msgSend__analyzeBinary_uscSamples_targetIndex_withTextSegment_withKey_withShaderSourcePath_forDataMaster_withPerDrawLimiterData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_analyzeBinary:uscSamples:targetIndex:withTextSegment:withKey:withShaderSourcePath:forDataMaster:withPerDrawLimiterData:");
}

id objc_msgSend__analyzeShaderBinarySamplesForResult_forShaderKeyToSourcePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_analyzeShaderBinarySamplesForResult:forShaderKeyToSourcePath:");
}

id objc_msgSend__build(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_build");
}

id objc_msgSend__cachedStringFromString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cachedStringFromString:");
}

id objc_msgSend__calculateAggregatedEffectiveGPUEncoderCost(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculateAggregatedEffectiveGPUEncoderCost");
}

id objc_msgSend__calculateAverageGPUCommandDuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculateAverageGPUCommandDuration");
}

id objc_msgSend__calculateEffectiveGPUEncoderCostForFrameIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculateEffectiveGPUEncoderCostForFrameIndex:");
}

id objc_msgSend__calculateFrameTime_result_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculateFrameTime:result:");
}

id objc_msgSend__calculatePerDrawCallCostWithSampleData_targetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculatePerDrawCallCostWithSampleData:targetIndex:");
}

id objc_msgSend__calculatePerDrawCallWithGRCSampleData_targetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculatePerDrawCallWithGRCSampleData:targetIndex:");
}

id objc_msgSend__calculatePerDrawCosts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculatePerDrawCosts:");
}

id objc_msgSend__calculatePerLineCostWithSampleData_binary_targetIndex_withKey_withShaderSourcePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculatePerLineCostWithSampleData:binary:targetIndex:withKey:withShaderSourcePath:");
}

id objc_msgSend__calculatePerLineCostWithSampleData_binary_targetIndex_withTextSegment_withKey_withShaderSourcePath_forDataMaster_withPerDrawLimiterData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculatePerLineCostWithSampleData:binary:targetIndex:withTextSegment:withKey:withShaderSourcePath:forDataMaster:withPerDrawLimiterData:");
}

id objc_msgSend__calculatePerSampleActiveShaders_withShaderProfilerResult_forWorkloadInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculatePerSampleActiveShaders:withShaderProfilerResult:forWorkloadInfo:");
}

id objc_msgSend__calculatePerSampleAggregatedActiveShaders_withShaderProfilerResult_forWorkloadInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculatePerSampleAggregatedActiveShaders:withShaderProfilerResult:forWorkloadInfo:");
}

id objc_msgSend__calculateVMRegionMapSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_calculateVMRegionMapSize:");
}

id objc_msgSend__callCancellationHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_callCancellationHandler");
}

id objc_msgSend__callRegistrationHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_callRegistrationHandler");
}

id objc_msgSend__cancel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cancel");
}

id objc_msgSend__cancelSource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cancelSource:");
}

id objc_msgSend__cleanup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_cleanup");
}

id objc_msgSend__clearBuffers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_clearBuffers");
}

id objc_msgSend__clearCache(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_clearCache");
}

id objc_msgSend__clearData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_clearData");
}

id objc_msgSend__clientConnect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_clientConnect:");
}

id objc_msgSend__codeGenCounterProcessing_derivedCounterNames_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_codeGenCounterProcessing:derivedCounterNames:");
}

id objc_msgSend__collectOperatingPoints(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_collectOperatingPoints");
}

id objc_msgSend__commonInit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_commonInit");
}

id objc_msgSend__computeBytesAvailableToRead(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_computeBytesAvailableToRead");
}

id objc_msgSend__computeBytesAvailableToWrite(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_computeBytesAvailableToWrite");
}

id objc_msgSend__computeSampleNormFactorForSample_forProgramStartAddress_forProgramEndAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_computeSampleNormFactorForSample:forProgramStartAddress:forProgramEndAddress:");
}

id objc_msgSend__connectClient_future_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_connectClient:future:");
}

id objc_msgSend__connectServer_future_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_connectServer:future:");
}

id objc_msgSend__conservativeLatencyAdjustment_withLimiter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_conservativeLatencyAdjustment:withLimiter:");
}

id objc_msgSend__copyForAddAPSData_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_copyForAddAPSData:prefix:");
}

id objc_msgSend__copyFromSM_size_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_copyFromSM:size:");
}

id objc_msgSend__copyToSM_size_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_copyToSM:size:");
}

id objc_msgSend__costHeaders(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_costHeaders");
}

id objc_msgSend__createAndRunSources_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createAndRunSources:");
}

id objc_msgSend__createPerCounterCommandData_withPerCommandData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createPerCounterCommandData:withPerCommandData:");
}

id objc_msgSend__createPerFileCostDictionaryWith_lineOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createPerFileCostDictionaryWith:lineOffset:");
}

id objc_msgSend__createPerFileLineCostDictionaryForCIWith_lineOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createPerFileLineCostDictionaryForCIWith:lineOffset:");
}

id objc_msgSend__createPerLineCostDictionaryWith_lineOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_createPerLineCostDictionaryWith:lineOffset:");
}

id objc_msgSend__dependencies_NOLOCK(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dependencies_NOLOCK");
}

id objc_msgSend__dequeueIncomingMessages(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dequeueIncomingMessages");
}

id objc_msgSend__dequeuePacket(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dequeuePacket");
}

id objc_msgSend__destroySharedMemoryTransport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_destroySharedMemoryTransport");
}

id objc_msgSend__dispatch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dispatch:");
}

id objc_msgSend__dispatchMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dispatchMessage:");
}

id objc_msgSend__dumpShaderBinaryInfo_usingKey_withBaseFileName_targetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dumpShaderBinaryInfo:usingKey:withBaseFileName:targetIndex:");
}

id objc_msgSend__dumpTraceBufferPacketsInFile_usingTracePackets_withExtractedSamples_withTraceBufferCount_forTargetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dumpTraceBufferPacketsInFile:usingTracePackets:withExtractedSamples:withTraceBufferCount:forTargetIndex:");
}

id objc_msgSend__dumpTraceProfileDataForResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_dumpTraceProfileDataForResult:");
}

id objc_msgSend__enumerateEncoderDerivedData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_enumerateEncoderDerivedData:");
}

id objc_msgSend__enumerateEncoderDerivedDataAtIndex_withBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_enumerateEncoderDerivedDataAtIndex:withBlock:");
}

id objc_msgSend__eventTypesForTarget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_eventTypesForTarget:");
}

id objc_msgSend__extractShaderBinaryTextSegment_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_extractShaderBinaryTextSegment:");
}

id objc_msgSend__frequenciesForStateName_forReg_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_frequenciesForStateName:forReg:");
}

id objc_msgSend__gatherStaticInformation_forReplayController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_gatherStaticInformation:forReplayController:");
}

id objc_msgSend__generateSamplesForResult_withProgramAddressLUT_withBatchIndexMin_andBatchIndexMax_andMinIndex_withProgramAddressList_withUSCSampleList_withUSCSampleNum_withBatchIDToEncoderIndex_andEncoderIndexToBatchIdMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_generateSamplesForResult:withProgramAddressLUT:withBatchIndexMin:andBatchIndexMax:andMinIndex:withProgramAddressList:withUSCSampleList:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:");
}

id objc_msgSend__getAddressAndLineTableForDebugInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getAddressAndLineTableForDebugInfo:");
}

id objc_msgSend__getDebugInfoForBinary_withTextSegment_forTargetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getDebugInfoForBinary:withTextSegment:forTargetIndex:");
}

id objc_msgSend__getLegacyProgramType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getLegacyProgramType:");
}

id objc_msgSend__getSharedMemoryNameWithSuffix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getSharedMemoryNameWithSuffix:");
}

id objc_msgSend__handlePerDrawCounterData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handlePerDrawCounterData");
}

id objc_msgSend__handleReplyTimeout_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleReplyTimeout:count:");
}

id objc_msgSend__initGTPM(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_initGTPM");
}

id objc_msgSend__initWithQueue_transport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_initWithQueue:transport:");
}

id objc_msgSend__initializeData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_initializeData:");
}

id objc_msgSend__initializeSMRegion_size_name_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_initializeSMRegion:size:name:error:");
}

id objc_msgSend__invalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_invalidate");
}

id objc_msgSend__jsStringToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_jsStringToString:");
}

id objc_msgSend__jsValueToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_jsValueToString:");
}

id objc_msgSend__latencyAdjustmentEstimate_withLimiter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_latencyAdjustmentEstimate:withLimiter:");
}

id objc_msgSend__latencyAdjustmentFactorWithLimiterData_forIndex_withLimiterTypeIndexMap_forLimiterType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_latencyAdjustmentFactorWithLimiterData:forIndex:withLimiterTypeIndexMap:forLimiterType:");
}

id objc_msgSend__latencyAdjustmentFactorWithLimiterData_forIndex_withLimiterTypeIndexMap_forLimiterTypeLoad_forLimiterTypeStore_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_latencyAdjustmentFactorWithLimiterData:forIndex:withLimiterTypeIndexMap:forLimiterTypeLoad:forLimiterTypeStore:");
}

id objc_msgSend__latencyAdjustmentFactorWithLimiterDataForDraw_forDataMaster_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:");
}

id objc_msgSend__latencyAdjustmentFactorWithLimiterDataForDraw_forDataMaster_forLimiterType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_latencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:forLimiterType:");
}

id objc_msgSend__latencyAdjustmentFactorWithLimiterDataWithLerp_forIndex_withLimiterTypeIndexMap_forLimiterType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_latencyAdjustmentFactorWithLimiterDataWithLerp:forIndex:withLimiterTypeIndexMap:forLimiterType:");
}

id objc_msgSend__latencyAdjustmentWithLimiterData_forIndex_withLimiterTypeIndexMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_latencyAdjustmentWithLimiterData:forIndex:withLimiterTypeIndexMap:");
}

id objc_msgSend__mapSharedMemoryFile_size_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_mapSharedMemoryFile:size:error:");
}

id objc_msgSend__nextMessageSerial(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_nextMessageSerial");
}

id objc_msgSend__openSMRegion_size_name_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_openSMRegion:size:name:error:");
}

id objc_msgSend__packMessage_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_packMessage:error:");
}

id objc_msgSend__performRead_size_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_performRead:size:");
}

id objc_msgSend__preProcessStreamingUSCSampleData_result_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_preProcessStreamingUSCSampleData:result:");
}

id objc_msgSend__preProcessStreamingUSCSampleData_result_withAddressData_sampleData_frameIndex_ringBufferIdx_targetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_preProcessStreamingUSCSampleData:result:withAddressData:sampleData:frameIndex:ringBufferIdx:targetIndex:");
}

id objc_msgSend__preProcessStreamingUSCSampleData_result_withAddressMappings_sampleData_frameIndex_ringBufferIdx_targetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_preProcessStreamingUSCSampleData:result:withAddressMappings:sampleData:frameIndex:ringBufferIdx:targetIndex:");
}

id objc_msgSend__preProcessUSCSampleData_result_targetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_preProcessUSCSampleData:result:targetIndex:");
}

id objc_msgSend__prepareAndEvaluateCounterValues_numElementsPerSample_numSamples_withContext_withGPUCyclesCounterIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_prepareAndEvaluateCounterValues:numElementsPerSample:numSamples:withContext:withGPUCyclesCounterIndex:");
}

id objc_msgSend__prepareCounterNames_derivedCounterNames_withContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_prepareCounterNames:derivedCounterNames:withContext:");
}

id objc_msgSend__processBatchIdCounterData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processBatchIdCounterData:");
}

id objc_msgSend__processDerivedEncoderCounterData_forDerivedEncoderData_withEffectivePerDrawKickTimes_withShaderInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processDerivedEncoderCounterData:forDerivedEncoderData:withEffectivePerDrawKickTimes:withShaderInfo:");
}

id objc_msgSend__processHarvestedBinaryData_forStreamedData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processHarvestedBinaryData:forStreamedData:");
}

id objc_msgSend__processPerLineCostDataForLineTable_withFileCost_withDebugInfo_andAllDrawCost_withKey_withShaderSourcePath_withDrawCost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processPerLineCostDataForLineTable:withFileCost:withDebugInfo:andAllDrawCost:withKey:withShaderSourcePath:withDrawCost:");
}

id objc_msgSend__processTracePackets_forRenderIndex_andGenerateSampleList_forTargetIndex_forLimiterIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processTracePackets:forRenderIndex:andGenerateSampleList:forTargetIndex:forLimiterIndex:");
}

id objc_msgSend__productType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_productType");
}

id objc_msgSend__read_size_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_read:size:");
}

id objc_msgSend__readAndAccumulate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_readAndAccumulate");
}

id objc_msgSend__readAndAccumulateLoop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_readAndAccumulateLoop");
}

id objc_msgSend__register(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_register");
}

id objc_msgSend__relayBuffer_size_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_relayBuffer:size:");
}

id objc_msgSend__relayBufferInner_size_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_relayBufferInner:size:");
}

id objc_msgSend__saveAddressList_size_filename_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_saveAddressList:size:filename:");
}

id objc_msgSend__saveAddressMappings_filename_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_saveAddressMappings:filename:");
}

id objc_msgSend__saveDebugInfoFrom_to_withTextSegment_targetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_saveDebugInfoFrom:to:withTextSegment:targetIndex:");
}

id objc_msgSend__saveSampleDataFromGPURawCounters_size_filename_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_saveSampleDataFromGPURawCounters:size:filename:");
}

id objc_msgSend__saveSampleList_size_filename_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_saveSampleList:size:filename:");
}

id objc_msgSend__saveSampleListForTarget_size_filename_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_saveSampleListForTarget:size:filename:");
}

id objc_msgSend__saveShaderBinariesWith_targetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_saveShaderBinariesWith:targetIndex:");
}

id objc_msgSend__scheduleInvalidation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_scheduleInvalidation:");
}

id objc_msgSend__sendMessage_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_sendMessage:error:");
}

id objc_msgSend__serverConnect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_serverConnect:");
}

id objc_msgSend__setResult_error_notify_NOLOCK_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setResult:error:notify_NOLOCK:");
}

id objc_msgSend__setSerial_replySerial_transport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setSerial:replySerial:transport:");
}

id objc_msgSend__setTransportSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setTransportSize:");
}

id objc_msgSend__setupDataPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setupDataPath");
}

id objc_msgSend__setupIOBuffers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setupIOBuffers");
}

id objc_msgSend__setupLimiterInfoPerDrawCall_forPayload_withShaderInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setupLimiterInfoPerDrawCall:forPayload:withShaderInfo:");
}

id objc_msgSend__setupShaderBinaryInfo_withBinaryKey_andNumDraws_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setupShaderBinaryInfo:withBinaryKey:andNumDraws:");
}

id objc_msgSend__shouldUseProgramAddressMappings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_shouldUseProgramAddressMappings:");
}

id objc_msgSend__showDrawCallDataforResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_showDrawCallDataforResult:");
}

id objc_msgSend__start_NOLOCK(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_start_NOLOCK");
}

id objc_msgSend__syncTmuToHeader_ioBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_syncTmuToHeader:ioBlock:");
}

id objc_msgSend__targetType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_targetType");
}

id objc_msgSend__tearDownSharedMemory(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_tearDownSharedMemory");
}

id objc_msgSend__traceHeaders(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_traceHeaders");
}

id objc_msgSend__unpackAndDispatchMessage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_unpackAndDispatchMessage");
}

id objc_msgSend__updateReaderOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_updateReaderOffset:");
}

id objc_msgSend__updateShaderTimelineInfo_withShaderTimelineDataEx_forGPUTimelineInfo_withEncoderGlobalTraceIdToStateMirrorIdMapping_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_updateShaderTimelineInfo:withShaderTimelineDataEx:forGPUTimelineInfo:withEncoderGlobalTraceIdToStateMirrorIdMapping:");
}

id objc_msgSend__version(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_version");
}

id objc_msgSend__visitAllShaderInfosInResult_usingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_visitAllShaderInfosInResult:usingBlock:");
}

id objc_msgSend__waitEAGAIN(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_waitEAGAIN");
}

id objc_msgSend__waitLatencyAdjustmentFactorWithLimiterDataForDraw_forDataMaster_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_waitLatencyAdjustmentFactorWithLimiterDataForDraw:forDataMaster:");
}

id objc_msgSend__waitLatencyAdjustmentWithLimiterData_forIndex_withLimiterTypeIndexMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_waitLatencyAdjustmentWithLimiterData:forIndex:withLimiterTypeIndexMap:");
}

id objc_msgSend__write_size_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_write:size:");
}

id objc_msgSend__writeBuffers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_writeBuffers:");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_accelerationStructureCommandEncoder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accelerationStructureCommandEncoder");
}

id objc_msgSend_accelerationStructureCommandEncoderForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accelerationStructureCommandEncoderForKey:");
}

id objc_msgSend_accelerationStructureCommandEncoderWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accelerationStructureCommandEncoderWithDescriptor:");
}

id objc_msgSend_accelerationStructureForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accelerationStructureForKey:");
}

id objc_msgSend_accelerationStructurePassDescriptorMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accelerationStructurePassDescriptorMap");
}

id objc_msgSend_accelerationStructureSizesWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accelerationStructureSizesWithDescriptor:");
}

id objc_msgSend_acceleratorPort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "acceleratorPort");
}

id objc_msgSend_access(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "access");
}

id objc_msgSend_activateWithMessageHandler_andErrorHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activateWithMessageHandler:andErrorHandler:");
}

id objc_msgSend_activeProcessorCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeProcessorCount");
}

id objc_msgSend_activeShadersPerPeriodicSample(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeShadersPerPeriodicSample");
}

id objc_msgSend_addAPSCounterData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addAPSCounterData:");
}

id objc_msgSend_addAPSData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addAPSData:");
}

id objc_msgSend_addAPSTimelineData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addAPSTimelineData:");
}

id objc_msgSend_addAllocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addAllocation:");
}

id objc_msgSend_addAllocations_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addAllocations:count:");
}

id objc_msgSend_addBarrierBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addBarrierBlock:");
}

id objc_msgSend_addBinaries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addBinaries:");
}

id objc_msgSend_addBinaryMapping_forEncoder_atEncoderIndex_forIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addBinaryMapping:forEncoder:atEncoderIndex:forIndex:");
}

id objc_msgSend_addCommandBuffers_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addCommandBuffers:count:");
}

id objc_msgSend_addCompletedHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addCompletedHandler:");
}

id objc_msgSend_addDependency_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDependency:");
}

id objc_msgSend_addEncoders_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addEncoders:count:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addEntriesFromObjectMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addEntriesFromObjectMap:");
}

id objc_msgSend_addGPUCommands_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addGPUCommands:count:");
}

id objc_msgSend_addGPUTimelineData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addGPUTimelineData:");
}

id objc_msgSend_addLibraryWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addLibraryWithDescriptor:error:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addOperationWithBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addOperationWithBlock:");
}

id objc_msgSend_addOtherEncoderFunctionIndex_forEncoder_atEncoderIndex_forType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addOtherEncoderFunctionIndex:forEncoder:atEncoderIndex:forType:");
}

id objc_msgSend_addPerfSampleHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPerfSampleHandler:");
}

id objc_msgSend_addPipelineStates_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPipelineStates:count:");
}

id objc_msgSend_addProgramAddressTable_forEncoder_atEncoderIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addProgramAddressTable:forEncoder:atEncoderIndex:");
}

id objc_msgSend_addPurgedHeap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPurgedHeap:");
}

id objc_msgSend_addPurgedResource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPurgedResource:");
}

id objc_msgSend_addResidencySet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addResidencySet:");
}

id objc_msgSend_addResidencySets_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addResidencySets:count:");
}

id objc_msgSend_addResultHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addResultHandler:");
}

id objc_msgSend_addSampledCallFunctionIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addSampledCallFunctionIndex:");
}

id objc_msgSend_addSampledCallFunctionIndex_forIndex_forEncoder_atEncoderIndex_forType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addSampledCallFunctionIndex:forIndex:forEncoder:atEncoderIndex:forType:");
}

id objc_msgSend_addScheduledHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addScheduledHandler:");
}

id objc_msgSend_addShaderFunctionInfo_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addShaderFunctionInfo:count:");
}

id objc_msgSend_addShaderProfilerData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addShaderProfilerData:");
}

id objc_msgSend_addString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addString:");
}

id objc_msgSend_addUnusedResourceKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addUnusedResourceKey:");
}

id objc_msgSend_additionalCompilerArguments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "additionalCompilerArguments");
}

id objc_msgSend_addressSpace(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addressSpace");
}

id objc_msgSend_adjustHWBiasAndFinalizeResult(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "adjustHWBiasAndFinalizeResult");
}

id objc_msgSend_aggregatedGPUTimelineInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aggregatedGPUTimelineInfo");
}

id objc_msgSend_airMDType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "airMDType");
}

id objc_msgSend_aliasImplicitImageBlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aliasImplicitImageBlock");
}

id objc_msgSend_aliasImplicitImageBlockRenderTarget(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aliasImplicitImageBlockRenderTarget");
}

id objc_msgSend_alignment(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "alignment");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allShaderKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allShaderKeys");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allValues");
}

id objc_msgSend_allocNewContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocNewContext");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allocatedSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocatedSize");
}

id objc_msgSend_allocationForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocationForKey:");
}

id objc_msgSend_allowGPUOptimizedContents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowGPUOptimizedContents");
}

id objc_msgSend_allowLibrariesFromOtherPlatforms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowLibrariesFromOtherPlatforms");
}

id objc_msgSend_allowedClasses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowedClasses");
}

id objc_msgSend_allowsKeyedCoding(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowsKeyedCoding");
}

id objc_msgSend_aluType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "aluType");
}

id objc_msgSend_amplificationID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "amplificationID");
}

id objc_msgSend_analyzeBinary_targetIndex_isaPrinter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "analyzeBinary:targetIndex:isaPrinter:");
}

id objc_msgSend_analyzeShaderInfoResult_forDataSource_forReplayController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "analyzeShaderInfoResult:forDataSource:forReplayController:");
}

id objc_msgSend_analyzedBinary_processedUscSamples_targetIndex_withKey_withShaderSourcePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "analyzedBinary:processedUscSamples:targetIndex:withKey:withShaderSourcePath:");
}

id objc_msgSend_analyzerResult(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "analyzerResult");
}

id objc_msgSend_anchor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "anchor");
}

id objc_msgSend_anchorPoint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "anchorPoint");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendString:");
}

id objc_msgSend_archivedAPSCounterData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedAPSCounterData");
}

id objc_msgSend_archivedAPSData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedAPSData");
}

id objc_msgSend_archivedAPSTimelineData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedAPSTimelineData");
}

id objc_msgSend_archivedBatchIdFilteredCounterData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedBatchIdFilteredCounterData");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_archivedGPUTimelineData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedGPUTimelineData");
}

id objc_msgSend_archivedShaderProfilerData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedShaderProfilerData");
}

id objc_msgSend_argumentBuffersSupport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "argumentBuffersSupport");
}

id objc_msgSend_argumentEncoderForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "argumentEncoderForKey:");
}

id objc_msgSend_argumentIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "argumentIndex");
}

id objc_msgSend_argumentIndexStride(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "argumentIndexStride");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayLength(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayLength");
}

id objc_msgSend_arrayType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayType");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attributes");
}

id objc_msgSend_availableCounters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "availableCounters");
}

id objc_msgSend_averagePerDrawKickDurations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "averagePerDrawKickDurations");
}

id objc_msgSend_backFaceStencil(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "backFaceStencil");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_baseInstance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "baseInstance");
}

id objc_msgSend_baseVertex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "baseVertex");
}

id objc_msgSend_batchIdFilterableCounters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "batchIdFilterableCounters");
}

id objc_msgSend_binaries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "binaries");
}

id objc_msgSend_binary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "binary");
}

id objc_msgSend_binaryArchiveForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "binaryArchiveForKey:");
}

id objc_msgSend_binaryLocationCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "binaryLocationCount");
}

id objc_msgSend_binaryLocationData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "binaryLocationData");
}

id objc_msgSend_binaryMappingsEncoderInternal(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "binaryMappingsEncoderInternal");
}

id objc_msgSend_binaryMappingsPerInvocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "binaryMappingsPerInvocation");
}

id objc_msgSend_binaryRangeCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "binaryRangeCount");
}

id objc_msgSend_binaryRangeData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "binaryRangeData");
}

id objc_msgSend_binaryUniqueId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "binaryUniqueId");
}

id objc_msgSend_bindings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bindings");
}

id objc_msgSend_bitcodeData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bitcodeData");
}

id objc_msgSend_blitCallCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blitCallCount");
}

id objc_msgSend_blitCommandEncoder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blitCommandEncoder");
}

id objc_msgSend_blitCommandEncoderForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blitCommandEncoderForKey:");
}

id objc_msgSend_blitCommandEncoderWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blitCommandEncoderWithDescriptor:");
}

id objc_msgSend_blitEncoderTimeInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blitEncoderTimeInfo");
}

id objc_msgSend_blitPassDescriptorMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blitPassDescriptorMap");
}

id objc_msgSend_blitTimeData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blitTimeData");
}

id objc_msgSend_blockOperationWithBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blockOperationWithBlock:");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLResult(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLResult");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_borderColor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "borderColor");
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bounds");
}

id objc_msgSend_branchTargetCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "branchTargetCount");
}

id objc_msgSend_branchTargetData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "branchTargetData");
}

id objc_msgSend_broadcast(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "broadcast");
}

id objc_msgSend_buffer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buffer");
}

id objc_msgSend_bufferAlignment(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bufferAlignment");
}

id objc_msgSend_bufferDataSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bufferDataSize");
}

id objc_msgSend_bufferDataType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bufferDataType");
}

id objc_msgSend_bufferForHeapKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bufferForHeapKey:");
}

id objc_msgSend_bufferForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bufferForKey:");
}

id objc_msgSend_bufferStructType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bufferStructType");
}

id objc_msgSend_bufferWithLength_alignment_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bufferWithLength:alignment:");
}

id objc_msgSend_buffers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buffers");
}

id objc_msgSend_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildAccelerationStructure:descriptor:scratchBuffer:scratchBufferOffset:");
}

id objc_msgSend_buildDrawCallIndexMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "buildDrawCallIndexMap");
}

id objc_msgSend_builtInDataType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "builtInDataType");
}

id objc_msgSend_builtInType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "builtInType");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundlePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundlePath");
}

id objc_msgSend_bundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleWithIdentifier:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytes");
}

id objc_msgSend_callFunction_withArguments_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callFunction:withArguments:");
}

id objc_msgSend_callStackSymbols(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callStackSymbols");
}

id objc_msgSend_callWithArguments_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "callWithArguments:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelAllOperations");
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "caseInsensitiveCompare:");
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characterSetWithCharactersInString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "characterSetWithCharactersInString:");
}

id objc_msgSend_clauseCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clauseCount");
}

id objc_msgSend_clauseData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clauseData");
}

id objc_msgSend_cleanup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cleanup");
}

id objc_msgSend_cleanupLocalFiles(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cleanupLocalFiles");
}

id objc_msgSend_clearCommandBuffer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearCommandBuffer");
}

id objc_msgSend_clearOccupancyWithReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearOccupancyWithReply:");
}

id objc_msgSend_closeFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "closeFile");
}

id objc_msgSend_closeSocketDescriptor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "closeSocketDescriptor");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "code");
}

id objc_msgSend_colorAttachments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "colorAttachments");
}

id objc_msgSend_colorTexture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "colorTexture");
}

id objc_msgSend_colorTextureFormat(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "colorTextureFormat");
}

id objc_msgSend_colorTextureUsage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "colorTextureUsage");
}

id objc_msgSend_colorspace(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "colorspace");
}

id objc_msgSend_column(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "column");
}

id objc_msgSend_commandBatchIdOffset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commandBatchIdOffset");
}

id objc_msgSend_commandBatchIdRangeMin_max_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commandBatchIdRangeMin:max:");
}

id objc_msgSend_commandBuffer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commandBuffer");
}

id objc_msgSend_commandBufferForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commandBufferForKey:");
}

id objc_msgSend_commandBufferInfoCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commandBufferInfoCount");
}

id objc_msgSend_commandBufferInfoData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commandBufferInfoData");
}

id objc_msgSend_commandBufferWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commandBufferWithDescriptor:");
}

id objc_msgSend_commandBufferWithUnretainedReferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commandBufferWithUnretainedReferences");
}

id objc_msgSend_commandBuffers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commandBuffers");
}

id objc_msgSend_commandQueueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commandQueueForKey:");
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commit");
}

id objc_msgSend_commitAndWaitUntilSubmitted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commitAndWaitUntilSubmitted");
}

id objc_msgSend_commitCommandBuffer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commitCommandBuffer");
}

id objc_msgSend_commitCommandBufferWithLog_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commitCommandBufferWithLog:");
}

id objc_msgSend_commitCommandBuffers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commitCommandBuffers");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compare:");
}

id objc_msgSend_compareFunction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compareFunction");
}

id objc_msgSend_compileVisibleFunction_withDescriptor_destinationBinaryArchive_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compileVisibleFunction:withDescriptor:destinationBinaryArchive:error:");
}

id objc_msgSend_completionHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "completionHandler");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByCharactersInSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsSeparatedByCharactersInSet:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_compressionFootprint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compressionFootprint");
}

id objc_msgSend_compressionType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compressionType");
}

id objc_msgSend_computeCommandEncoder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeCommandEncoder");
}

id objc_msgSend_computeCommandEncoderForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeCommandEncoderForKey:");
}

id objc_msgSend_computeCommandEncoderWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeCommandEncoderWithDescriptor:");
}

id objc_msgSend_computeCommandEncoderWithDispatchType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeCommandEncoderWithDispatchType:");
}

id objc_msgSend_computeCommandEncoderWithDispatchType_substreamCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeCommandEncoderWithDispatchType:substreamCount:");
}

id objc_msgSend_computeFunction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeFunction");
}

id objc_msgSend_computePassDescriptorMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computePassDescriptorMap");
}

id objc_msgSend_computePipelineDescriptorMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computePipelineDescriptorMap");
}

id objc_msgSend_computePipelineStateForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computePipelineStateForKey:");
}

id objc_msgSend_computeTiming(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeTiming");
}

id objc_msgSend_concurrentDispatchThreadgroups_threadsPerThreadgroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "concurrentDispatchThreadgroups:threadsPerThreadgroup:");
}

id objc_msgSend_concurrentDispatchThreads_threadsPerThreadgroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "concurrentDispatchThreads:threadsPerThreadgroup:");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configuration");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connect(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connect");
}

id objc_msgSend_connected(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connected");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "connection");
}

id objc_msgSend_constantSamplerDescriptors(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "constantSamplerDescriptors");
}

id objc_msgSend_constantSamplerUniqueIdentifiers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "constantSamplerUniqueIdentifiers");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsString:");
}

id objc_msgSend_contentRect(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentRect");
}

id objc_msgSend_contents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contents");
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentsOfDirectoryAtPath:error:");
}

id objc_msgSend_contentsScale(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "contentsScale");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "context");
}

id objc_msgSend_controlPointIndexBufferVirtualAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "controlPointIndexBufferVirtualAddress");
}

id objc_msgSend_convertBinaryInfoToJSONDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertBinaryInfoToJSONDictionary:");
}

id objc_msgSend_convertSparsePixelRegions_toTileRegions_withTileSize_alignmentMode_numRegions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "convertSparsePixelRegions:toTileRegions:withTileSize:alignmentMode:numRegions:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copy");
}

id objc_msgSend_copyAccelerationStructure_toAccelerationStructure_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyAccelerationStructure:toAccelerationStructure:");
}

id objc_msgSend_copyAndCompactAccelerationStructure_toAccelerationStructure_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyAndCompactAccelerationStructure:toAccelerationStructure:");
}

id objc_msgSend_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:");
}

id objc_msgSend_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:");
}

id objc_msgSend_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:");
}

id objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:");
}

id objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:");
}

id objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:");
}

id objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:");
}

id objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinationLevel_sliceCount_levelCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:");
}

id objc_msgSend_copyFromTexture_toTexture_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyFromTexture:toTexture:");
}

id objc_msgSend_copyIndirectCommandBuffer_sourceRange_destination_destinationIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:");
}

id objc_msgSend_copyItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyItemAtPath:toPath:error:");
}

id objc_msgSend_copyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyItemAtURL:toURL:error:");
}

id objc_msgSend_copyStatusToBuffer_offset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyStatusToBuffer:offset:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_coreCounts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coreCounts");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_counterInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "counterInfo");
}

id objc_msgSend_counterNames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "counterNames");
}

id objc_msgSend_counterSampleBufferForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "counterSampleBufferForKey:");
}

id objc_msgSend_counterSets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "counterSets");
}

id objc_msgSend_counterValueType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "counterValueType");
}

id objc_msgSend_counters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "counters");
}

id objc_msgSend_cpuCacheMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cpuCacheMode");
}

id objc_msgSend_cpuType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cpuType");
}

id objc_msgSend_createArrayRef_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createArrayRef:");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createFileAtPath:contents:attributes:");
}

id objc_msgSend_createNewSharedMemoryTransportWithURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createNewSharedMemoryTransportWithURL:");
}

id objc_msgSend_currentAllocatedSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentAllocatedSize");
}

id objc_msgSend_currentPerformanceState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentPerformanceState");
}

id objc_msgSend_currentThread(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentThread");
}

id objc_msgSend_customBorderColorValue_0(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "customBorderColorValue_0");
}

id objc_msgSend_customBorderColorValue_1(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "customBorderColorValue_1");
}

id objc_msgSend_customBorderColorValue_2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "customBorderColorValue_2");
}

id objc_msgSend_customBorderColorValue_3(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "customBorderColorValue_3");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "data");
}

id objc_msgSend_dataSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataSize");
}

id objc_msgSend_dataSourceHasUnusedResources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataSourceHasUnusedResources");
}

id objc_msgSend_dataType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataType");
}

id objc_msgSend_dataTypeDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataTypeDescription");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithBytesNoCopy_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytesNoCopy:length:");
}

id objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_dataWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithCapacity:");
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithContentsOfFile:");
}

id objc_msgSend_dataWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithContentsOfFile:options:error:");
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithContentsOfURL:options:error:");
}

id objc_msgSend_dataWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithData:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithLength:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "date");
}

id objc_msgSend_debugCommandEncoder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "debugCommandEncoder");
}

id objc_msgSend_debugSignposts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "debugSignposts");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeInt32ForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeInt32ForKey:");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeIntForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeIntForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_defaultBufferCapacity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultBufferCapacity");
}

id objc_msgSend_defaultCStringEncoding(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultCStringEncoding");
}

id objc_msgSend_defaultCommandQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultCommandQueue");
}

id objc_msgSend_defaultDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultDevice");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_depth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "depth");
}

id objc_msgSend_depthAttachment(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "depthAttachment");
}

id objc_msgSend_depthStencil(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "depthStencil");
}

id objc_msgSend_depthStencilStateForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "depthStencilStateForKey:");
}

id objc_msgSend_depthTexture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "depthTexture");
}

id objc_msgSend_depthTextureFormat(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "depthTextureFormat");
}

id objc_msgSend_depthTextureUsage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "depthTextureUsage");
}

id objc_msgSend_deregisterObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deregisterObserver:");
}

id objc_msgSend_deregisterObserversForConnection_path_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deregisterObserversForConnection:path:");
}

id objc_msgSend_derivedCounterNames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "derivedCounterNames");
}

id objc_msgSend_derivedCounters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "derivedCounters");
}

id objc_msgSend_derivedCountersData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "derivedCountersData");
}

id objc_msgSend_derivedEncoderCounterInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "derivedEncoderCounterInfo");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "description");
}

id objc_msgSend_deserializeInstanceAccelerationStructure_fromBytes_primitiveAccelerationStructures_withDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deserializeInstanceAccelerationStructure:fromBytes:primitiveAccelerationStructures:withDescriptor:");
}

id objc_msgSend_deserializeInstanceAccelerationStructure_primitiveAccelerationStructures_fromBuffer_serializedBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deserializeInstanceAccelerationStructure:primitiveAccelerationStructures:fromBuffer:serializedBufferOffset:");
}

id objc_msgSend_deserializeInstanceAccelerationStructure_primitiveAccelerationStructures_fromBuffer_serializedBufferOffset_withDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deserializeInstanceAccelerationStructure:primitiveAccelerationStructures:fromBuffer:serializedBufferOffset:withDescriptor:");
}

id objc_msgSend_deserializePrimitiveAccelerationStructure_fromBuffer_serializedBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deserializePrimitiveAccelerationStructure:fromBuffer:serializedBufferOffset:");
}

id objc_msgSend_deserializePrimitiveAccelerationStructure_fromBuffer_serializedBufferOffset_withDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deserializePrimitiveAccelerationStructure:fromBuffer:serializedBufferOffset:withDescriptor:");
}

id objc_msgSend_deserializePrimitiveAccelerationStructure_fromBytes_withDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deserializePrimitiveAccelerationStructure:fromBytes:withDescriptor:");
}

id objc_msgSend_device(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "device");
}

id objc_msgSend_deviceForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceForKey:");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithSharedKeySet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithSharedKeySet:");
}

id objc_msgSend_didChangeValueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didChangeValueForKey:");
}

id objc_msgSend_didModifyRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didModifyRange:");
}

id objc_msgSend_disableConsistentPerfState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableConsistentPerfState");
}

id objc_msgSend_disableHeapTextureCompression(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableHeapTextureCompression");
}

id objc_msgSend_disableOptimizeRestores(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableOptimizeRestores");
}

id objc_msgSend_dispatchError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchError:");
}

id objc_msgSend_dispatchMessage_replyConnection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchMessage:replyConnection:");
}

id objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchThreadgroups:threadsPerThreadgroup:");
}

id objc_msgSend_dispatchThreadgroupsArguments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchThreadgroupsArguments");
}

id objc_msgSend_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:");
}

id objc_msgSend_dispatchThreads_threadsPerThreadgroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchThreads:threadsPerThreadgroup:");
}

id objc_msgSend_dispatchThreadsArguments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchThreadsArguments");
}

id objc_msgSend_dispatchThreadsPerTile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchThreadsPerTile:");
}

id objc_msgSend_dispatchThreadsPerTile_inRegion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchThreadsPerTile:inRegion:");
}

id objc_msgSend_dispatchThreadsPerTile_inRegion_withRenderTargetArrayIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchThreadsPerTile:inRegion:withRenderTargetArrayIndex:");
}

id objc_msgSend_dispatchThreadsWithIndirectBuffer_indirectBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchThreadsWithIndirectBuffer:indirectBufferOffset:");
}

id objc_msgSend_dispatchUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dispatchUID");
}

id objc_msgSend_doesNotRecognizeSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doesNotRecognizeSelector:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domain");
}

id objc_msgSend_doubleForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doubleForKey:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_drainRingBufferAtIndex_dataSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drainRingBufferAtIndex:dataSize:");
}

id objc_msgSend_drawArguments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawArguments");
}

id objc_msgSend_drawCallCost(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawCallCost");
}

id objc_msgSend_drawCallIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawCallIndex");
}

id objc_msgSend_drawCallInfoList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawCallInfoList");
}

id objc_msgSend_drawIndexedArguments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawIndexedArguments");
}

id objc_msgSend_drawIndexedPatches_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_indirectBuffer_indirectBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:");
}

id objc_msgSend_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:");
}

id objc_msgSend_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:");
}

id objc_msgSend_drawIndexedPatchesArguments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawIndexedPatchesArguments");
}

id objc_msgSend_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:");
}

id objc_msgSend_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:");
}

id objc_msgSend_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:");
}

id objc_msgSend_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuffer_indirectBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:");
}

id objc_msgSend_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:");
}

id objc_msgSend_drawMeshThreadgroupsArguments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawMeshThreadgroupsArguments");
}

id objc_msgSend_drawMeshThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawMeshThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:");
}

id objc_msgSend_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawMeshThreads:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:");
}

id objc_msgSend_drawMeshThreadsArguments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawMeshThreadsArguments");
}

id objc_msgSend_drawOverlay_color_shrinkToFit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawOverlay:color:shrinkToFit:");
}

id objc_msgSend_drawPatches_patchIndexBuffer_patchIndexBufferOffset_indirectBuffer_indirectBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:");
}

id objc_msgSend_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:");
}

id objc_msgSend_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:");
}

id objc_msgSend_drawPatchesArguments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawPatchesArguments");
}

id objc_msgSend_drawPrimitives_indirectBuffer_indirectBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawPrimitives:indirectBuffer:indirectBufferOffset:");
}

id objc_msgSend_drawPrimitives_vertexStart_vertexCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawPrimitives:vertexStart:vertexCount:");
}

id objc_msgSend_drawPrimitives_vertexStart_vertexCount_instanceCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawPrimitives:vertexStart:vertexCount:instanceCount:");
}

id objc_msgSend_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:");
}

id objc_msgSend_drawTexture_isDepthStencil_shrinkToFit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawTexture:isDepthStencil:shrinkToFit:");
}

id objc_msgSend_drawableForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawableForKey:");
}

id objc_msgSend_drawableSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drawableSize");
}

id objc_msgSend_driverVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "driverVersion");
}

id objc_msgSend_dumpInstructions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dumpInstructions");
}

id objc_msgSend_dylib(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dylib");
}

id objc_msgSend_dynamicLibraries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dynamicLibraries");
}

id objc_msgSend_dynamicLibraryForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dynamicLibraryForKey:");
}

id objc_msgSend_effectID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectID");
}

id objc_msgSend_effectiveKickTimes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveKickTimes");
}

id objc_msgSend_effectivePerEncoderDrawKickTimes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectivePerEncoderDrawKickTimes");
}

id objc_msgSend_elementStructType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "elementStructType");
}

id objc_msgSend_elementType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "elementType");
}

id objc_msgSend_elementTypeDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "elementTypeDescription");
}

id objc_msgSend_enableCapture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableCapture");
}

id objc_msgSend_enableConsistentPerfState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableConsistentPerfState:");
}

id objc_msgSend_enableDisplayOnDevice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableDisplayOnDevice");
}

id objc_msgSend_enableHUD(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableHUD");
}

id objc_msgSend_enableNullBufferBinds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableNullBufferBinds:");
}

id objc_msgSend_enableReplayFromOtherPlatforms(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableReplayFromOtherPlatforms");
}

id objc_msgSend_encode_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encode:error:");
}

id objc_msgSend_encodeAPSArrayForOldHost_array_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeAPSArrayForOldHost:array:");
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeDashboardFinalizeForResourceGroup_dashboard_value_forIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeDashboardFinalizeForResourceGroup:dashboard:value:forIndex:");
}

id objc_msgSend_encodeDashboardFinalizeForResourceGroup_dashboard_values_indices_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeDashboardFinalizeForResourceGroup:dashboard:values:indices:count:");
}

id objc_msgSend_encodeDashboardTagForResourceGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeDashboardTagForResourceGroup:");
}

id objc_msgSend_encodeInt32_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInt32:forKey:");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInt_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInt:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encodeSignalEvent_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeSignalEvent:value:");
}

id objc_msgSend_encodeSignalEventScheduled_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeSignalEventScheduled:value:");
}

id objc_msgSend_encodeToCommandBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeToCommandBuffer:");
}

id objc_msgSend_encodeWaitForEvent_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeWaitForEvent:value:");
}

id objc_msgSend_encodedAttributes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodedAttributes");
}

id objc_msgSend_encodedData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodedData");
}

id objc_msgSend_encodedLength(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodedLength");
}

id objc_msgSend_encoderCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encoderCount");
}

id objc_msgSend_encoderForKey_ofType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encoderForKey:ofType:");
}

id objc_msgSend_encoderFunctionIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encoderFunctionIndex");
}

id objc_msgSend_encoderIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encoderIndex");
}

id objc_msgSend_encoderInfoCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encoderInfoCount");
}

id objc_msgSend_encoderInfoData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encoderInfoData");
}

id objc_msgSend_encoderInfoList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encoderInfoList");
}

id objc_msgSend_encoderInfos(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encoderInfos");
}

id objc_msgSend_encoderInternalBinaries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encoderInternalBinaries");
}

id objc_msgSend_encoderMethodIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encoderMethodIdentifier");
}

id objc_msgSend_encoderTimelineInfos(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encoderTimelineInfos");
}

id objc_msgSend_encoders(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encoders");
}

id objc_msgSend_endEncoding(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endEncoding");
}

id objc_msgSend_endEncodingAndRetrieveProgramAddressTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endEncodingAndRetrieveProgramAddressTable");
}

id objc_msgSend_endResidency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endResidency");
}

id objc_msgSend_enqueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enqueue");
}

id objc_msgSend_enqueueBarrier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enqueueBarrier");
}

id objc_msgSend_enterActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterActivity:");
}

id objc_msgSend_enterArgumentBufferDownload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterArgumentBufferDownload");
}

id objc_msgSend_enterArgumentBufferUpload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterArgumentBufferUpload");
}

id objc_msgSend_enterCollectCounters_statLocations_withIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterCollectCounters:statLocations:withIndex:");
}

id objc_msgSend_enterDebugFuncStopFromIndex_toIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterDebugFuncStopFromIndex:toIndex:");
}

id objc_msgSend_enterDisplayAttachmentAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterDisplayAttachmentAtIndex:");
}

id objc_msgSend_enterHarvestResourceObjectWithAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterHarvestResourceObjectWithAttributes:");
}

id objc_msgSend_enterLoadArchiveWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterLoadArchiveWithPath:");
}

id objc_msgSend_enterMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterMessage:");
}

id objc_msgSend_enterOptimizeRestores(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterOptimizeRestores");
}

id objc_msgSend_enterPerformFrameTimingForIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterPerformFrameTimingForIndex:");
}

id objc_msgSend_enterRestoreCommandBufferAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterRestoreCommandBufferAtIndex:");
}

id objc_msgSend_enterRestoreResources_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterRestoreResources:count:");
}

id objc_msgSend_enterRewind(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enterRewind");
}

id objc_msgSend_enumerateActiveShadersForAllSamples_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateActiveShadersForAllSamples:");
}

id objc_msgSend_enumerateEncoderDerivedData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateEncoderDerivedData:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "error");
}

id objc_msgSend_errorOptions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorOptions");
}

id objc_msgSend_errorStackTrace(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorStackTrace");
}

id objc_msgSend_errorState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorState");
}

id objc_msgSend_errorWithCode_localizedDescription_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorWithCode:localizedDescription:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_evaluateScript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateScript:");
}

id objc_msgSend_evaluateScript_withSourceURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateScript:withSourceURL:");
}

id objc_msgSend_evaluateStreamingSamples_withUSCSampleNum_withProgramAddressLUT_targetIndex_forRingBufferIndex_withMinEncoderIndex_withMaxEncoderIndex_withEncoderIdToEncoderIndexMap_withProfilingData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateStreamingSamples:withUSCSampleNum:withProgramAddressLUT:targetIndex:forRingBufferIndex:withMinEncoderIndex:withMaxEncoderIndex:withEncoderIdToEncoderIndexMap:withProfilingData:");
}

id objc_msgSend_evaluteScript_scriptURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluteScript:scriptURL:");
}

id objc_msgSend_eventForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventForKey:");
}

id objc_msgSend_exchangeObjectAtIndex_withObjectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exchangeObjectAtIndex:withObjectAtIndex:");
}

id objc_msgSend_executablePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executablePath");
}

id objc_msgSend_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:");
}

id objc_msgSend_executeCommandsInBuffer_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeCommandsInBuffer:withRange:");
}

id objc_msgSend_executeIndirectCommandBufferMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeIndirectCommandBufferMap");
}

id objc_msgSend_exportStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exportStats");
}

id objc_msgSend_exposureTexture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exposureTexture");
}

id objc_msgSend_features(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "features");
}

id objc_msgSend_fence(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fence");
}

id objc_msgSend_fenceForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fenceForKey:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileHandleForWritingAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileHandleForWritingAtPath:");
}

id objc_msgSend_fileHandleForWritingToURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileHandleForWritingToURL:error:");
}

id objc_msgSend_filePathURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filePathURL");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_fileURLWithPath_isDirectory_relativeToURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:isDirectory:relativeToURL:");
}

id objc_msgSend_filenameOverrides(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filenameOverrides");
}

id objc_msgSend_fillBuffer_range_pattern4_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fillBuffer:range:pattern4:");
}

id objc_msgSend_fillBuffer_range_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fillBuffer:range:value:");
}

id objc_msgSend_fillTexture_level_slice_region_bytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fillTexture:level:slice:region:bytes:length:");
}

id objc_msgSend_fillTexture_level_slice_region_color_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fillTexture:level:slice:region:color:");
}

id objc_msgSend_fillTexture_level_slice_region_color_pixelFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fillTexture:level:slice:region:color:pixelFormat:");
}

id objc_msgSend_filterCounterRangeWithFirstBatch_lastBatch_filterIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filterCounterRangeWithFirstBatch:lastBatch:filterIndex:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_filters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "filters");
}

id objc_msgSend_finish(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finish");
}

id objc_msgSend_finish_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finish:");
}

id objc_msgSend_finishDecoding(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finishDecoding");
}

id objc_msgSend_firstMipmapInTail(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstMipmapInTail");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstObject");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "floatValue");
}

id objc_msgSend_flush_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flush:");
}

id objc_msgSend_forceLoadActionClear(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceLoadActionClear");
}

id objc_msgSend_forceLoadUnusedResources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceLoadUnusedResources");
}

id objc_msgSend_forceResourceIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceResourceIndex");
}

id objc_msgSend_forceSeamsOnCubemapFiltering(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceSeamsOnCubemapFiltering");
}

id objc_msgSend_forceWaitUntilCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceWaitUntilCompleted");
}

id objc_msgSend_fragmentBindings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fragmentBindings");
}

id objc_msgSend_fragmentBuffers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fragmentBuffers");
}

id objc_msgSend_fragmentFunction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fragmentFunction");
}

id objc_msgSend_fragmentFunctionHandleWithFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fragmentFunctionHandleWithFunction:");
}

id objc_msgSend_fragmentLinkedFunctions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fragmentLinkedFunctions");
}

id objc_msgSend_fragmentPreloadedLibraries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fragmentPreloadedLibraries");
}

id objc_msgSend_fragmentTiming(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fragmentTiming");
}

id objc_msgSend_framebufferOnly(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "framebufferOnly");
}

id objc_msgSend_frontFaceStencil(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "frontFaceStencil");
}

id objc_msgSend_function(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "function");
}

id objc_msgSend_functionForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "functionForKey:");
}

id objc_msgSend_functionHandleForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "functionHandleForKey:");
}

id objc_msgSend_functionHandleWithFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "functionHandleWithFunction:");
}

id objc_msgSend_functionHandleWithFunction_stage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "functionHandleWithFunction:stage:");
}

id objc_msgSend_functionIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "functionIndex");
}

id objc_msgSend_functionInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "functionInfo");
}

id objc_msgSend_functionInfoCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "functionInfoCount");
}

id objc_msgSend_functionInfoData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "functionInfoData");
}

id objc_msgSend_functionMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "functionMap");
}

id objc_msgSend_functionName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "functionName");
}

id objc_msgSend_functionType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "functionType");
}

id objc_msgSend_future(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "future");
}

id objc_msgSend_gatherStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gatherStats");
}

id objc_msgSend_generateMipmapsForTexture_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateMipmapsForTexture:");
}

id objc_msgSend_generateTargetSamplesForResult_withProgramAddressLUT_withBatchIndexMin_withProgramAddressList_withUSCSampleBuffer_withUSCSampleNum_withBatchIDToEncoderIndex_andEncoderIndexToBatchIdMap_targetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateTargetSamplesForResult:withProgramAddressLUT:withBatchIndexMin:withProgramAddressList:withUSCSampleBuffer:withUSCSampleNum:withBatchIDToEncoderIndex:andEncoderIndexToBatchIdMap:targetIndex:");
}

id objc_msgSend_geometryBufferSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "geometryBufferSize");
}

id objc_msgSend_getBreadcrumbSummary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBreadcrumbSummary");
}

id objc_msgSend_getBreadcrumbsAsJSON(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBreadcrumbsAsJSON");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getCString_maxLength_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCString:maxLength:encoding:");
}

id objc_msgSend_getCommandType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCommandType");
}

id objc_msgSend_getConsistentPerfStateInfoAndReset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getConsistentPerfStateInfoAndReset:");
}

id objc_msgSend_getConsistentPerfStateMappingTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getConsistentPerfStateMappingTable");
}

id objc_msgSend_getFragmentBufferAddressAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFragmentBufferAddressAtIndex:");
}

id objc_msgSend_getFragmentBufferAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getFragmentBufferAtIndex:");
}

id objc_msgSend_getKernelAttributeStrideAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getKernelAttributeStrideAtIndex:");
}

id objc_msgSend_getKernelBufferAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getKernelBufferAtIndex:");
}

id objc_msgSend_getMeshBufferAddressAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMeshBufferAddressAtIndex:");
}

id objc_msgSend_getObjectBufferAddressAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getObjectBufferAddressAtIndex:");
}

id objc_msgSend_getObjectThreadgroupMemoryLengthAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getObjectThreadgroupMemoryLengthAtIndex:");
}

id objc_msgSend_getOccupancyWithReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getOccupancyWithReply:");
}

id objc_msgSend_getPipelineStateFromCache_withDescriptor_withFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPipelineStateFromCache:withDescriptor:withFormat:");
}

id objc_msgSend_getPipelineStateUniqueIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPipelineStateUniqueIdentifier");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_getSPIStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSPIStats");
}

id objc_msgSend_getStageInRegion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getStageInRegion");
}

id objc_msgSend_getStatLocations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getStatLocations");
}

id objc_msgSend_getStateOccupancy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getStateOccupancy");
}

id objc_msgSend_getTessellationFactorArguments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTessellationFactorArguments");
}

id objc_msgSend_getTextureAccessCounters_region_mipLevel_slice_resetCounters_countersBuffer_countersBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:");
}

id objc_msgSend_getThreadgroupMemoryLengthAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getThreadgroupMemoryLengthAtIndex:");
}

id objc_msgSend_getValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getValue:");
}

id objc_msgSend_getVertexAttributeStrideAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getVertexAttributeStrideAtIndex:");
}

id objc_msgSend_getVertexBufferAddressAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getVertexBufferAddressAtIndex:");
}

id objc_msgSend_getVertexBufferAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getVertexBufferAtIndex:");
}

id objc_msgSend_globalTraceIdForEncoder_ofType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "globalTraceIdForEncoder:ofType:");
}

id objc_msgSend_globalTraceObjectID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "globalTraceObjectID");
}

id objc_msgSend_globallyUniqueString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "globallyUniqueString");
}

id objc_msgSend_gpuAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gpuAddress");
}

id objc_msgSend_gpuCommandInfoCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gpuCommandInfoCount");
}

id objc_msgSend_gpuCommandInfoData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gpuCommandInfoData");
}

id objc_msgSend_gpuCommands(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gpuCommands");
}

id objc_msgSend_gpuResourceID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gpuResourceID");
}

id objc_msgSend_gpuTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gpuTime");
}

id objc_msgSend_gputracePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gputracePath");
}

id objc_msgSend_grcOptions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "grcOptions");
}

id objc_msgSend_grcTrigger(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "grcTrigger");
}

id objc_msgSend_gt_firstObjectPassingTest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "gt_firstObjectPassingTest:");
}

id objc_msgSend_hasBarrier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasBarrier");
}

id objc_msgSend_hasBeenSent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasBeenSent");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hash");
}

id objc_msgSend_hashOffset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hashOffset");
}

id objc_msgSend_hashValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hashValue");
}

id objc_msgSend_hazardTrackingMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hazardTrackingMode");
}

id objc_msgSend_headerBufferSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "headerBufferSize");
}

id objc_msgSend_heap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "heap");
}

id objc_msgSend_heapAccelerationStructureSizeAndAlignWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "heapAccelerationStructureSizeAndAlignWithDescriptor:");
}

id objc_msgSend_heapBuffer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "heapBuffer");
}

id objc_msgSend_heapForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "heapForKey:");
}

id objc_msgSend_heapLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "heapLocation");
}

id objc_msgSend_heapTextureSizeAndAlignWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "heapTextureSizeAndAlignWithDescriptor:");
}

id objc_msgSend_height(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "height");
}

id objc_msgSend_horizontalLogicalCoordinatesAtPhysicalTileBoundaries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "horizontalLogicalCoordinatesAtPhysicalTileBoundaries");
}

id objc_msgSend_horizontalSampleStorage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "horizontalSampleStorage");
}

id objc_msgSend_iOCommandBufferForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iOCommandBufferForKey:");
}

id objc_msgSend_iOCommandQueueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iOCommandQueueForKey:");
}

id objc_msgSend_iOHandleForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iOHandleForKey:");
}

id objc_msgSend_iOScratchBufferAllocatorForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iOScratchBufferAllocatorForKey:");
}

id objc_msgSend_imageBlockDataSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "imageBlockDataSize");
}

id objc_msgSend_imageBlockKind(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "imageBlockKind");
}

id objc_msgSend_imageBlockMasterStructMembers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "imageBlockMasterStructMembers");
}

id objc_msgSend_increaseLengthBy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "increaseLengthBy:");
}

id objc_msgSend_index(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "index");
}

id objc_msgSend_indexBufferGPUVirtualAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexBufferGPUVirtualAddress");
}

id objc_msgSend_indexCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexCount");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObject_inSortedRange_options_usingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexOfObject:inSortedRange:options:usingComparator:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indexType");
}

id objc_msgSend_indirectArgumentIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indirectArgumentIndex");
}

id objc_msgSend_indirectCommandBufferForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indirectCommandBufferForKey:");
}

id objc_msgSend_indirectComputeCommandAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indirectComputeCommandAtIndex:");
}

id objc_msgSend_indirectComputeCommandForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indirectComputeCommandForKey:");
}

id objc_msgSend_indirectRenderCommandAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indirectRenderCommandAtIndex:");
}

id objc_msgSend_indirectRenderCommandForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "indirectRenderCommandForKey:");
}

id objc_msgSend_infoDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "infoDictionary");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init");
}

id objc_msgSend_init_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init:");
}

id objc_msgSend_initFileURLWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFileURLWithPath:");
}

id objc_msgSend_initFileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFileURLWithPath:isDirectory:");
}

id objc_msgSend_initFileURLWithPath_relativeToURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFileURLWithPath:relativeToURL:");
}

id objc_msgSend_initForCounters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForCounters");
}

id objc_msgSend_initForHarvestingBinaries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForHarvestingBinaries");
}

id objc_msgSend_initForMinimumInfoCounters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForMinimumInfoCounters");
}

id objc_msgSend_initForMinimumInfoTimeline(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForMinimumInfoTimeline");
}

id objc_msgSend_initForProfiling(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForProfiling");
}

id objc_msgSend_initForReadingFromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForReadingFromData:error:");
}

id objc_msgSend_initForTimeline(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForTimeline");
}

id objc_msgSend_initGPU_withReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initGPU:withReply:");
}

id objc_msgSend_initRequiringSecureCoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initRequiringSecureCoding:");
}

id objc_msgSend_initWithAllocatedSize_resourcePool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAllocatedSize:resourcePool:");
}

id objc_msgSend_initWithArgumentIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithArgumentIndex:");
}

id objc_msgSend_initWithAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAttributes:");
}

id objc_msgSend_initWithBatch_withBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBatch:withBlock:");
}

id objc_msgSend_initWithBindIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBindIndex:");
}

id objc_msgSend_initWithBindIndex_byteOffset_dereference_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBindIndex:byteOffset:dereference:");
}

id objc_msgSend_initWithBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBuffer:");
}

id objc_msgSend_initWithBuffer_resourcePool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBuffer:resourcePool:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytes:length:encoding:");
}

id objc_msgSend_initWithBytesNoCopy_length_deallocator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytesNoCopy:length:deallocator:");
}

id objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytesNoCopy:length:encoding:freeWhenDone:");
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCommandQueue_resourcePool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCommandQueue:resourcePool:");
}

id objc_msgSend_initWithConfigurationVariables_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConfigurationVariables:");
}

id objc_msgSend_initWithConnection_relayPort_relayPid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConnection:relayPort:relayPid:");
}

id objc_msgSend_initWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfFile:");
}

id objc_msgSend_initWithContentsOfFile_encoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfFile:encoding:error:");
}

id objc_msgSend_initWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:error:");
}

id objc_msgSend_initWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:options:error:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithCounters_statLocations_index_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCounters:statLocations:index:");
}

id objc_msgSend_initWithCurrentIndex_targetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCurrentIndex:targetIndex:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDevice:");
}

id objc_msgSend_initWithDevice_bufferCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDevice:bufferCapacity:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithEncoderBatchPriorityList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEncoderBatchPriorityList:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFunctionName_nodes_outputNode_attributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFunctionName:nodes:outputNode:attributes:");
}

id objc_msgSend_initWithGPUFamily_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithGPUFamily:");
}

id objc_msgSend_initWithGPUScaler_ANEScaler_executionMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithGPUScaler:ANEScaler:executionMode:");
}

id objc_msgSend_initWithGTVMBuffer_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithGTVMBuffer:range:");
}

id objc_msgSend_initWithHeap_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithHeap:range:");
}

id objc_msgSend_initWithIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIndex:");
}

id objc_msgSend_initWithKind_attributes_BOOLPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKind:attributes:BOOLPayload:");
}

id objc_msgSend_initWithKind_attributes_objectPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKind:attributes:objectPayload:");
}

id objc_msgSend_initWithKind_attributes_payload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKind:attributes:payload:");
}

id objc_msgSend_initWithKind_attributes_plistPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKind:attributes:plistPayload:");
}

id objc_msgSend_initWithKind_attributes_stringPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithKind:attributes:stringPayload:");
}

id objc_msgSend_initWithLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLength:");
}

id objc_msgSend_initWithLog_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLog:");
}

id objc_msgSend_initWithLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLongLong:");
}

id objc_msgSend_initWithMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMessage:");
}

id objc_msgSend_initWithMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMode:");
}

id objc_msgSend_initWithMode_initialMessageSerial_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMode:initialMessageSerial:");
}

id objc_msgSend_initWithName_arguments_controlDependencies_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:arguments:controlDependencies:");
}

id objc_msgSend_initWithName_arguments_controlDependencies_isEarlyReturn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:arguments:controlDependencies:isEarlyReturn:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjects_forKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObjects:forKeys:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOptions:");
}

id objc_msgSend_initWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPath:");
}

id objc_msgSend_initWithProperties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithProperties:");
}

id objc_msgSend_initWithProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithProtocol:");
}

id objc_msgSend_initWithQueue_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQueue:block:");
}

id objc_msgSend_initWithRequestID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRequestID:");
}

id objc_msgSend_initWithRequests_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRequests:count:");
}

id objc_msgSend_initWithSampleCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSampleCount:");
}

id objc_msgSend_initWithService_properties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithService:properties:");
}

id objc_msgSend_initWithService_properties_bulkDataService_bulkDataServiceProperties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithService:properties:bulkDataService:bulkDataServiceProperties:");
}

id objc_msgSend_initWithServiceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithServiceName:");
}

id objc_msgSend_initWithState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithState:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithString_relativeToURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithString:relativeToURL:");
}

id objc_msgSend_initWithSymbolName_buffer_offset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSymbolName:buffer:offset:");
}

id objc_msgSend_initWithTexture_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTexture:");
}

id objc_msgSend_initWithTransport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTransport:");
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithType:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initWithVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithVersion:");
}

id objc_msgSend_initWithVirtualMachine_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithVirtualMachine:");
}

id objc_msgSend_innerNodeBufferSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "innerNodeBufferSize");
}

id objc_msgSend_inputContentHeight(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inputContentHeight");
}

id objc_msgSend_inputContentMaxScale(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inputContentMaxScale");
}

id objc_msgSend_inputContentMinScale(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inputContentMinScale");
}

id objc_msgSend_inputContentWidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inputContentWidth");
}

id objc_msgSend_inputHeight(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inputHeight");
}

id objc_msgSend_inputWidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inputWidth");
}

id objc_msgSend_insertCompressedTextureReinterpretationFlush(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertCompressedTextureReinterpretationFlush");
}

id objc_msgSend_insertDebugCaptureBoundary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertDebugCaptureBoundary");
}

id objc_msgSend_insertDebugSignpost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "insertDebugSignpost:");
}

id objc_msgSend_installName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "installName");
}

id objc_msgSend_instanceCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instanceCount");
}

id objc_msgSend_instanceID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instanceID");
}

id objc_msgSend_instanceStride(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instanceStride");
}

id objc_msgSend_instanceTransformBufferSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instanceTransformBufferSize");
}

id objc_msgSend_instructionCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instructionCount");
}

id objc_msgSend_instructionData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instructionData");
}

id objc_msgSend_instructions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "instructions");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interfaceOrientation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceOrientation");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_intersectionFunctionTableDescriptor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intersectionFunctionTableDescriptor");
}

id objc_msgSend_intersectionFunctionTableForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intersectionFunctionTableForKey:");
}

id objc_msgSend_invalid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalid");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateCompressedTexture_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateCompressedTexture:");
}

id objc_msgSend_invalidateCompressedTexture_slice_level_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateCompressedTexture:slice:level:");
}

id objc_msgSend_invertedSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invertedSet");
}

id objc_msgSend_invocationWithMethodSignature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invocationWithMethodSignature:");
}

id objc_msgSend_invoke(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invoke");
}

id objc_msgSend_iosurface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iosurface");
}

id objc_msgSend_iosurfaceForProperties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iosurfaceForProperties:");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActive");
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCancelled");
}

id objc_msgSend_isCompatibleWithAccelerationStructure_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCompatibleWithAccelerationStructure:");
}

id objc_msgSend_isDepthReversed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDepthReversed");
}

id objc_msgSend_isDepthTexture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDepthTexture");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFinished");
}

id objc_msgSend_isFramebufferOnly(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isFramebufferOnly");
}

id objc_msgSend_isInitialized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isInitialized");
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMainThread");
}

id objc_msgSend_isRasterizationEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRasterizationEnabled");
}

id objc_msgSend_isStatEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isStatEnabled");
}

id objc_msgSend_isUsed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isUsed");
}

id objc_msgSend_isValidJSONObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isValidJSONObject:");
}

id objc_msgSend_isVertexDescriptorBuffer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isVertexDescriptorBuffer");
}

id objc_msgSend_isaForDiassemblyAtAddressStart_end_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isaForDiassemblyAtAddressStart:end:");
}

id objc_msgSend_isiOSAppOnMac(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isiOSAppOnMac");
}

id objc_msgSend_jitterOffsetX(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "jitterOffsetX");
}

id objc_msgSend_jitterOffsetY(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "jitterOffsetY");
}

id objc_msgSend_jsonObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "jsonObject");
}

id objc_msgSend_kernelEndTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kernelEndTime");
}

id objc_msgSend_kernelStartTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kernelStartTime");
}

id objc_msgSend_kind(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "kind");
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "label");
}

id objc_msgSend_lastInstruction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastInstruction");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastPathComponent");
}

id objc_msgSend_lateEvalEventForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lateEvalEventForKey:");
}

id objc_msgSend_latestSupportedGenericBVHVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "latestSupportedGenericBVHVersion");
}

id objc_msgSend_layerClass(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "layerClass");
}

id objc_msgSend_layerCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "layerCount");
}

id objc_msgSend_layerForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "layerForKey:");
}

id objc_msgSend_layers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "layers");
}

id objc_msgSend_layout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "layout");
}

id objc_msgSend_layouts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "layouts");
}

id objc_msgSend_leafNodeBufferSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "leafNodeBufferSize");
}

id objc_msgSend_leaveActivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "leaveActivity");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "length");
}

id objc_msgSend_level(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "level");
}

id objc_msgSend_libraryForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "libraryForKey:");
}

id objc_msgSend_libraryType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "libraryType");
}

id objc_msgSend_line(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "line");
}

id objc_msgSend_linkedFunctions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkedFunctions");
}

id objc_msgSend_loadActionTimes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadActionTimes");
}

id objc_msgSend_loadBuffer_offset_size_sourceHandle_sourceHandleOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadBuffer:offset:size:sourceHandle:sourceHandleOffset:");
}

id objc_msgSend_loadBytes_size_sourceHandle_sourceHandleOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadBytes:size:sourceHandle:sourceHandleOffset:");
}

id objc_msgSend_loadDynamicLibrariesForFunction_insertLibraries_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadDynamicLibrariesForFunction:insertLibraries:error:");
}

id objc_msgSend_loadTexture_slice_level_size_sourceBytesPerRow_sourceBytesPerImage_destinationOrigin_sourceHandle_sourceHandleOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadTexture:slice:level:size:sourceBytesPerRow:sourceBytesPerImage:destinationOrigin:sourceHandle:sourceHandleOffset:");
}

id objc_msgSend_localizedCaseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedCaseInsensitiveCompare:");
}

id objc_msgSend_localizedCaseInsensitiveContainsString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedCaseInsensitiveContainsString:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedFailureReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedFailureReason");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lock");
}

id objc_msgSend_lodAverage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lodAverage");
}

id objc_msgSend_lodMaxClamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lodMaxClamp");
}

id objc_msgSend_lodMinClamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lodMinClamp");
}

id objc_msgSend_logActivitiesToFile_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logActivitiesToFile:");
}

id objc_msgSend_logCommandBuffer_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logCommandBuffer:atIndex:");
}

id objc_msgSend_logCommandBuffer_withKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logCommandBuffer:withKey:");
}

id objc_msgSend_logPerformance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logPerformance");
}

id objc_msgSend_logSharedCommandBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logSharedCommandBuffer:");
}

id objc_msgSend_logs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logs");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "longLongValue");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_mGPUTimelineInfoAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mGPUTimelineInfoAtIndex:");
}

id objc_msgSend_mGPUTimelineInfos(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mGPUTimelineInfos");
}

id objc_msgSend_magFilter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "magFilter");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_makeAliasable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "makeAliasable");
}

id objc_msgSend_makeObjectsPerformSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "makeObjectsPerformSelector:");
}

id objc_msgSend_mapPhysicalToScreenCoordinates_forLayer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mapPhysicalToScreenCoordinates:forLayer:");
}

id objc_msgSend_mapScreenToPhysicalCoordinates_forLayer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mapScreenToPhysicalCoordinates:forLayer:");
}

id objc_msgSend_mapShaderSampleBufferWithBuffer_capacity_size_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mapShaderSampleBufferWithBuffer:capacity:size:");
}

id objc_msgSend_mappedAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mappedAddress");
}

id objc_msgSend_mappedSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mappedSize");
}

id objc_msgSend_mappings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mappings");
}

id objc_msgSend_maxAnisotropy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxAnisotropy");
}

id objc_msgSend_maxAvailableSizeWithAlignment_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxAvailableSizeWithAlignment:");
}

id objc_msgSend_maxBufferLength(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxBufferLength");
}

id objc_msgSend_maxCallStackDepth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxCallStackDepth");
}

id objc_msgSend_maxConcurrentOperationCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxConcurrentOperationCount");
}

id objc_msgSend_maxFragmentCallStackDepth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxFragmentCallStackDepth");
}

id objc_msgSend_maxMeshCallStackDepth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxMeshCallStackDepth");
}

id objc_msgSend_maxObjectCallStackDepth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxObjectCallStackDepth");
}

id objc_msgSend_maxPixelPosition(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxPixelPosition");
}

id objc_msgSend_maxSampleID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxSampleID");
}

id objc_msgSend_maxTextureWidth2D(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxTextureWidth2D");
}

id objc_msgSend_maxThreadPositionInGrid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxThreadPositionInGrid");
}

id objc_msgSend_maxTotalThreadgroupsPerMeshGrid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxTotalThreadgroupsPerMeshGrid");
}

id objc_msgSend_maxTotalThreadsPerThreadgroup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxTotalThreadsPerThreadgroup");
}

id objc_msgSend_maxVertexBuffers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxVertexBuffers");
}

id objc_msgSend_maxVertexCallStackDepth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "maxVertexCallStackDepth");
}

id objc_msgSend_memberByName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "memberByName:");
}

id objc_msgSend_members(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "members");
}

id objc_msgSend_memoryBarrierWithResources_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "memoryBarrierWithResources:count:");
}

id objc_msgSend_memoryBarrierWithResources_count_afterStages_beforeStages_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "memoryBarrierWithResources:count:afterStages:beforeStages:");
}

id objc_msgSend_memoryBarrierWithScope_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "memoryBarrierWithScope:");
}

id objc_msgSend_memoryBarrierWithScope_afterStages_beforeStages_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "memoryBarrierWithScope:afterStages:beforeStages:");
}

id objc_msgSend_meshBindings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meshBindings");
}

id objc_msgSend_meshBuffers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meshBuffers");
}

id objc_msgSend_meshBuiltInArguments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meshBuiltInArguments");
}

id objc_msgSend_meshFunction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meshFunction");
}

id objc_msgSend_meshLinkedFunctions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meshLinkedFunctions");
}

id objc_msgSend_meshPreloadedLibraries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meshPreloadedLibraries");
}

id objc_msgSend_meshPrimitiveCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meshPrimitiveCount");
}

id objc_msgSend_meshPrimitiveStruct(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meshPrimitiveStruct");
}

id objc_msgSend_meshTopologyType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meshTopologyType");
}

id objc_msgSend_meshVertexCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meshVertexCount");
}

id objc_msgSend_meshVertexStruct(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "meshVertexStruct");
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "message");
}

id objc_msgSend_messageSerial(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messageSerial");
}

id objc_msgSend_messageWithKind_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messageWithKind:");
}

id objc_msgSend_messageWithKind_attributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messageWithKind:attributes:");
}

id objc_msgSend_messageWithKind_attributes_objectPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messageWithKind:attributes:objectPayload:");
}

id objc_msgSend_messageWithKind_attributes_payload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messageWithKind:attributes:payload:");
}

id objc_msgSend_messageWithKind_objectPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messageWithKind:objectPayload:");
}

id objc_msgSend_messageWithKind_plistPayload_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "messageWithKind:plistPayload:");
}

id objc_msgSend_metalFXTimelineInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metalFXTimelineInfo");
}

id objc_msgSend_methodForSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "methodForSelector:");
}

id objc_msgSend_methodSignatureForSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "methodSignatureForSelector:");
}

id objc_msgSend_minFilter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minFilter");
}

id objc_msgSend_minLinearTextureAlignmentForPixelFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minLinearTextureAlignmentForPixelFormat:");
}

id objc_msgSend_minPixelPosition(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minPixelPosition");
}

id objc_msgSend_minSampleID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minSampleID");
}

id objc_msgSend_minThreadPositionInGrid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minThreadPositionInGrid");
}

id objc_msgSend_mipFilter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mipFilter");
}

id objc_msgSend_mipmapLevelCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mipmapLevelCount");
}

id objc_msgSend_motionTexture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "motionTexture");
}

id objc_msgSend_motionTextureFormat(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "motionTextureFormat");
}

id objc_msgSend_motionTextureUsage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "motionTextureUsage");
}

id objc_msgSend_motionVectorScaleX(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "motionVectorScaleX");
}

id objc_msgSend_motionVectorScaleY(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "motionVectorScaleY");
}

id objc_msgSend_moveItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "moveItemAtPath:toPath:error:");
}

id objc_msgSend_mtlfxTracingInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mtlfxTracingInfo");
}

id objc_msgSend_mutability(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutability");
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableBytes");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "name");
}

id objc_msgSend_needsFunctionConstantValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "needsFunctionConstantValues");
}

id objc_msgSend_newAccelerationStructureWithBuffer_offset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newAccelerationStructureWithBuffer:offset:");
}

id objc_msgSend_newAccelerationStructureWithBuffer_offset_resourceIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newAccelerationStructureWithBuffer:offset:resourceIndex:");
}

id objc_msgSend_newAccelerationStructureWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newAccelerationStructureWithDescriptor:");
}

id objc_msgSend_newAccelerationStructureWithDescriptor_offset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newAccelerationStructureWithDescriptor:offset:");
}

id objc_msgSend_newAccelerationStructureWithSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newAccelerationStructureWithSize:");
}

id objc_msgSend_newAccelerationStructureWithSize_offset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newAccelerationStructureWithSize:offset:");
}

id objc_msgSend_newAccelerationStructureWithSize_offset_resourceIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newAccelerationStructureWithSize:offset:resourceIndex:");
}

id objc_msgSend_newAccelerationStructureWithSize_resourceIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newAccelerationStructureWithSize:resourceIndex:");
}

id objc_msgSend_newAccelerationStructureWithSize_withDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newAccelerationStructureWithSize:withDescriptor:");
}

id objc_msgSend_newArgumentEncoderForBufferAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newArgumentEncoderForBufferAtIndex:");
}

id objc_msgSend_newArgumentEncoderWithBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newArgumentEncoderWithBufferIndex:");
}

id objc_msgSend_newArgumentEncoderWithBufferIndex_pipelineLibrary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newArgumentEncoderWithBufferIndex:pipelineLibrary:");
}

id objc_msgSend_newArgumentEncoderWithBufferIndex_reflection_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newArgumentEncoderWithBufferIndex:reflection:");
}

id objc_msgSend_newArgumentEncoderWithBufferIndex_reflection_pipelineLibrary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newArgumentEncoderWithBufferIndex:reflection:pipelineLibrary:");
}

id objc_msgSend_newBinaryArchiveWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newBinaryArchiveWithDescriptor:error:");
}

id objc_msgSend_newBufferHeapWithLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newBufferHeapWithLength:");
}

id objc_msgSend_newBufferWithBytes_length_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newBufferWithBytes:length:options:");
}

id objc_msgSend_newBufferWithBytes_length_options_gpuAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newBufferWithBytes:length:options:gpuAddress:");
}

id objc_msgSend_newBufferWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newBufferWithDescriptor:");
}

id objc_msgSend_newBufferWithIOSurface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newBufferWithIOSurface:");
}

id objc_msgSend_newBufferWithLength_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newBufferWithLength:options:");
}

id objc_msgSend_newBufferWithLength_options_gpuAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newBufferWithLength:options:gpuAddress:");
}

id objc_msgSend_newBufferWithLength_options_offset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newBufferWithLength:options:offset:");
}

id objc_msgSend_newCommandQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newCommandQueue");
}

id objc_msgSend_newCommandQueueWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newCommandQueueWithDescriptor:");
}

id objc_msgSend_newCommandQueueWithMaxCommandBufferCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newCommandQueueWithMaxCommandBufferCount:");
}

id objc_msgSend_newComputePipelineStateWithAdditionalBinaryFunctions_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newComputePipelineStateWithAdditionalBinaryFunctions:error:");
}

id objc_msgSend_newComputePipelineStateWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newComputePipelineStateWithDescriptor:error:");
}

id objc_msgSend_newComputePipelineStateWithDescriptor_options_reflection_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newComputePipelineStateWithDescriptor:options:reflection:error:");
}

id objc_msgSend_newComputePipelineStateWithFunction_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newComputePipelineStateWithFunction:error:");
}

id objc_msgSend_newComputePipelineStateWithFunction_options_reflection_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newComputePipelineStateWithFunction:options:reflection:error:");
}

id objc_msgSend_newComputePipelineStateWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newComputePipelineStateWithImageFilterFunctionsSPI:imageFilterFunctionInfo:error:");
}

id objc_msgSend_newComputePipelineStateWithName_options_reflection_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newComputePipelineStateWithName:options:reflection:error:");
}

id objc_msgSend_newCounterSampleBufferWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newCounterSampleBufferWithDescriptor:error:");
}

id objc_msgSend_newCounterSampleBufferWithLength_label_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newCounterSampleBufferWithLength:label:error:");
}

id objc_msgSend_newDefaultLibraryWithBundle_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newDefaultLibraryWithBundle:error:");
}

id objc_msgSend_newDepthStencilStateWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newDepthStencilStateWithDescriptor:");
}

id objc_msgSend_newDynamicLibrary_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newDynamicLibrary:error:");
}

id objc_msgSend_newDynamicLibraryWithURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newDynamicLibraryWithURL:error:");
}

id objc_msgSend_newDynamicLibraryWithURL_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newDynamicLibraryWithURL:options:error:");
}

id objc_msgSend_newEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newEvent");
}

id objc_msgSend_newExternFunctionWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newExternFunctionWithName:");
}

id objc_msgSend_newFence(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newFence");
}

id objc_msgSend_newFragmentIntersectionFunctionTableWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newFragmentIntersectionFunctionTableWithDescriptor:");
}

id objc_msgSend_newFragmentShaderDebugInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newFragmentShaderDebugInfo");
}

id objc_msgSend_newFunctionWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newFunctionWithDescriptor:error:");
}

id objc_msgSend_newFunctionWithGLCoreIR_functionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newFunctionWithGLCoreIR:functionType:");
}

id objc_msgSend_newFunctionWithGLCoreIR_inputsDescription_functionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newFunctionWithGLCoreIR:inputsDescription:functionType:");
}

id objc_msgSend_newFunctionWithGLESIR_functionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newFunctionWithGLESIR:functionType:");
}

id objc_msgSend_newFunctionWithGLESIR_inputsDescription_functionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newFunctionWithGLESIR:inputsDescription:functionType:");
}

id objc_msgSend_newFunctionWithGLIR_functionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newFunctionWithGLIR:functionType:");
}

id objc_msgSend_newFunctionWithGLIR_inputsDescription_functionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newFunctionWithGLIR:inputsDescription:functionType:");
}

id objc_msgSend_newFunctionWithName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newFunctionWithName:");
}

id objc_msgSend_newFunctionWithName_constantValues_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newFunctionWithName:constantValues:error:");
}

id objc_msgSend_newFunctionWithName_constantValues_pipelineLibrary_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newFunctionWithName:constantValues:pipelineLibrary:error:");
}

id objc_msgSend_newFunctionWithPluginData_bitcodeType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newFunctionWithPluginData:bitcodeType:");
}

id objc_msgSend_newHeapWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newHeapWithDescriptor:");
}

id objc_msgSend_newIOCommandQueueWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newIOCommandQueueWithDescriptor:error:");
}

id objc_msgSend_newIndirectCommandBufferWithDescriptor_maxCommandCount_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newIndirectCommandBufferWithDescriptor:maxCommandCount:options:");
}

id objc_msgSend_newIndirectCommandBufferWithDescriptor_maxCount_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newIndirectCommandBufferWithDescriptor:maxCount:options:");
}

id objc_msgSend_newIntersectionFunctionTableWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newIntersectionFunctionTableWithDescriptor:");
}

id objc_msgSend_newIntersectionFunctionTableWithDescriptor_stage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newIntersectionFunctionTableWithDescriptor:stage:");
}

id objc_msgSend_newIntersectionFunctionWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newIntersectionFunctionWithDescriptor:error:");
}

id objc_msgSend_newKernelDebugInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newKernelDebugInfo");
}

id objc_msgSend_newLateEvalEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newLateEvalEvent");
}

id objc_msgSend_newLibraryWithDAG_functions_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newLibraryWithDAG:functions:error:");
}

id objc_msgSend_newLibraryWithData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newLibraryWithData:error:");
}

id objc_msgSend_newLibraryWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newLibraryWithDescriptor:error:");
}

id objc_msgSend_newLibraryWithDescriptorSPI_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newLibraryWithDescriptorSPI:error:");
}

id objc_msgSend_newLibraryWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newLibraryWithImageFilterFunctionsSPI:imageFilterFunctionInfo:error:");
}

id objc_msgSend_newLibraryWithSource_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newLibraryWithSource:options:error:");
}

id objc_msgSend_newLibraryWithStitchedDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newLibraryWithStitchedDescriptor:error:");
}

id objc_msgSend_newLibraryWithStitchedDescriptorSPI_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newLibraryWithStitchedDescriptorSPI:error:");
}

id objc_msgSend_newLibraryWithURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newLibraryWithURL:error:");
}

id objc_msgSend_newLinearTextureWithDescriptor_offset_bytesPerRow_bytesPerImage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newLinearTextureWithDescriptor:offset:bytesPerRow:bytesPerImage:");
}

id objc_msgSend_newPipelineLibraryWithFilePath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newPipelineLibraryWithFilePath:error:");
}

id objc_msgSend_newProfileWithExecutionSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newProfileWithExecutionSize:");
}

id objc_msgSend_newRasterizationRateMapWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRasterizationRateMapWithDescriptor:");
}

id objc_msgSend_newRenderPipelineDescriptorWithName_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRenderPipelineDescriptorWithName:error:");
}

id objc_msgSend_newRenderPipelineStateWithAdditionalBinaryFunctions_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRenderPipelineStateWithAdditionalBinaryFunctions:error:");
}

id objc_msgSend_newRenderPipelineStateWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRenderPipelineStateWithDescriptor:error:");
}

id objc_msgSend_newRenderPipelineStateWithDescriptor_options_reflection_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRenderPipelineStateWithDescriptor:options:reflection:error:");
}

id objc_msgSend_newRenderPipelineStateWithMeshDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRenderPipelineStateWithMeshDescriptor:error:");
}

id objc_msgSend_newRenderPipelineStateWithMeshDescriptor_options_reflection_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRenderPipelineStateWithMeshDescriptor:options:reflection:error:");
}

id objc_msgSend_newRenderPipelineStateWithName_options_reflection_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRenderPipelineStateWithName:options:reflection:error:");
}

id objc_msgSend_newRenderPipelineStateWithTileDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRenderPipelineStateWithTileDescriptor:error:");
}

id objc_msgSend_newRenderPipelineStateWithTileDescriptor_options_reflection_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newRenderPipelineStateWithTileDescriptor:options:reflection:error:");
}

id objc_msgSend_newResidencySetWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newResidencySetWithDescriptor:error:");
}

id objc_msgSend_newSamplerStateWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newSamplerStateWithDescriptor:");
}

id objc_msgSend_newScratchBufferWithMinimumSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newScratchBufferWithMinimumSize:");
}

id objc_msgSend_newSharedEvent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newSharedEvent");
}

id objc_msgSend_newSharedEventHandle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newSharedEventHandle");
}

id objc_msgSend_newSharedEventWithHandle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newSharedEventWithHandle:");
}

id objc_msgSend_newSharedTextureHandle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newSharedTextureHandle");
}

id objc_msgSend_newSharedTextureWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newSharedTextureWithDescriptor:");
}

id objc_msgSend_newSourceWithQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newSourceWithQueue:");
}

id objc_msgSend_newSpatialScalerWithDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newSpatialScalerWithDevice:");
}

id objc_msgSend_newTemporalScalerWithDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTemporalScalerWithDevice:");
}

id objc_msgSend_newTextureViewWithPixelFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTextureViewWithPixelFormat:");
}

id objc_msgSend_newTextureViewWithPixelFormat_resourceIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTextureViewWithPixelFormat:resourceIndex:");
}

id objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTextureViewWithPixelFormat:textureType:levels:slices:");
}

id objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_resourceIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTextureViewWithPixelFormat:textureType:levels:slices:resourceIndex:");
}

id objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:");
}

id objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_resourceIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:resourceIndex:");
}

id objc_msgSend_newTextureWithBytesNoCopy_length_descriptor_deallocator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTextureWithBytesNoCopy:length:descriptor:deallocator:");
}

id objc_msgSend_newTextureWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTextureWithDescriptor:");
}

id objc_msgSend_newTextureWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTextureWithDescriptor:error:");
}

id objc_msgSend_newTextureWithDescriptor_iosurface_plane_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTextureWithDescriptor:iosurface:plane:");
}

id objc_msgSend_newTextureWithDescriptor_offset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTextureWithDescriptor:offset:");
}

id objc_msgSend_newTextureWithDescriptor_offset_bytesPerRow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTextureWithDescriptor:offset:bytesPerRow:");
}

id objc_msgSend_newTileIntersectionFunctionTableWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newTileIntersectionFunctionTableWithDescriptor:");
}

id objc_msgSend_newVertexIntersectionFunctionTableWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newVertexIntersectionFunctionTableWithDescriptor:");
}

id objc_msgSend_newVertexShaderDebugInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newVertexShaderDebugInfo");
}

id objc_msgSend_newVisibleFunctionTableFromFragmentStageWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newVisibleFunctionTableFromFragmentStageWithDescriptor:");
}

id objc_msgSend_newVisibleFunctionTableFromTileStageWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newVisibleFunctionTableFromTileStageWithDescriptor:");
}

id objc_msgSend_newVisibleFunctionTableFromVertexStageWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newVisibleFunctionTableFromVertexStageWithDescriptor:");
}

id objc_msgSend_newVisibleFunctionTableWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newVisibleFunctionTableWithDescriptor:");
}

id objc_msgSend_newVisibleFunctionTableWithDescriptor_stage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newVisibleFunctionTableWithDescriptor:stage:");
}

id objc_msgSend_newlineCharacterSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newlineCharacterSet");
}

id objc_msgSend_nextDrawable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextDrawable");
}

id objc_msgSend_nextDrawableWithTextureResourceIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextDrawableWithTextureResourceIndex:");
}

id objc_msgSend_nextPerEncoderBatchList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextPerEncoderBatchList:");
}

id objc_msgSend_nextPerEncoderBatchListForHighPriorityBatches_withHighPriorityInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextPerEncoderBatchListForHighPriorityBatches:withHighPriorityInfo:");
}

id objc_msgSend_nextSample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextSample:");
}

id objc_msgSend_normalizedCoordinates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "normalizedCoordinates");
}

id objc_msgSend_notifyAll_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyAll:");
}

id objc_msgSend_notifyError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyError:");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "null");
}

id objc_msgSend_numActiveShadersPerPeriodicSample(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numActiveShadersPerPeriodicSample");
}

id objc_msgSend_numPeriodicSamples(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numPeriodicSamples");
}

id objc_msgSend_numberFromString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberFromString:");
}

id objc_msgSend_numberOfPatchControlPoints(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberOfPatchControlPoints");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectBindings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectBindings");
}

id objc_msgSend_objectBuffers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectBuffers");
}

id objc_msgSend_objectForInfoDictionaryKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForInfoDictionaryKey:");
}

id objc_msgSend_objectForIntKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForIntKey:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectFunction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectFunction");
}

id objc_msgSend_objectLinkedFunctions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectLinkedFunctions");
}

id objc_msgSend_objectPayload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectPayload");
}

id objc_msgSend_objectPreloadedLibraries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectPreloadedLibraries");
}

id objc_msgSend_objectShaderThreadgroupBeginBounds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectShaderThreadgroupBeginBounds");
}

id objc_msgSend_objectShaderThreadgroupBoundsPresent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectShaderThreadgroupBoundsPresent");
}

id objc_msgSend_objectShaderThreadgroupEndBounds(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectShaderThreadgroupEndBounds");
}

id objc_msgSend_objectThreadgroupPositionInGrid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectThreadgroupPositionInGrid");
}

id objc_msgSend_objectsForKeys_notFoundMarker_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectsForKeys:notFoundMarker:");
}

id objc_msgSend_offset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "offset");
}

id objc_msgSend_offsetInFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "offsetInFile");
}

id objc_msgSend_operatingSystemVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operatingSystemVersion");
}

id objc_msgSend_operatingSystemVersionString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operatingSystemVersionString");
}

id objc_msgSend_operation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "operation");
}

id objc_msgSend_optimizeContentsForCPUAccess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "optimizeContentsForCPUAccess:");
}

id objc_msgSend_optimizeContentsForCPUAccess_slice_level_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "optimizeContentsForCPUAccess:slice:level:");
}

id objc_msgSend_optimizeContentsForGPUAccess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "optimizeContentsForGPUAccess:");
}

id objc_msgSend_optimizeContentsForGPUAccess_slice_level_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "optimizeContentsForGPUAccess:slice:level:");
}

id objc_msgSend_optimizeIndirectCommandBuffer_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "optimizeIndirectCommandBuffer:withRange:");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "options");
}

id objc_msgSend_originalFilename(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "originalFilename");
}

id objc_msgSend_outputHeight(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outputHeight");
}

id objc_msgSend_outputTexture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outputTexture");
}

id objc_msgSend_outputTextureFormat(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outputTextureFormat");
}

id objc_msgSend_outputTextureUsage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outputTextureUsage");
}

id objc_msgSend_outputWidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outputWidth");
}

id objc_msgSend_overlay(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overlay");
}

id objc_msgSend_overrideFilename(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overrideFilename");
}

id objc_msgSend_parallelRenderCommandEncoderForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parallelRenderCommandEncoderForKey:");
}

id objc_msgSend_parallelRenderCommandEncoderWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parallelRenderCommandEncoderWithDescriptor:");
}

id objc_msgSend_parentTexture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parentTexture");
}

id objc_msgSend_patchCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "patchCount");
}

id objc_msgSend_patchIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "patchIDs");
}

id objc_msgSend_patchIndexBufferVirtualAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "patchIndexBufferVirtualAddress");
}

id objc_msgSend_patchLocalFileData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "patchLocalFileData:");
}

id objc_msgSend_patchStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "patchStart");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "path");
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathExtension");
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_pathWithComponents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathWithComponents:");
}

id objc_msgSend_pause(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pause");
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "payload");
}

id objc_msgSend_perFileCost(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "perFileCost");
}

id objc_msgSend_perFileLineCostDictForCI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "perFileLineCostDictForCI");
}

id objc_msgSend_perPrimitiveDataBufferSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "perPrimitiveDataBufferSize");
}

id objc_msgSend_perRingPerFrameLimiterData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "perRingPerFrameLimiterData");
}

id objc_msgSend_perRingSampledDerivedCounters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "perRingSampledDerivedCounters");
}

id objc_msgSend_performSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performSelector:");
}

id objc_msgSend_performanceStatistics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performanceStatistics");
}

id objc_msgSend_physicalGranularity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "physicalGranularity");
}

id objc_msgSend_physicalSizeForLayer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "physicalSizeForLayer:");
}

id objc_msgSend_pipelineBinaries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pipelineBinaries");
}

id objc_msgSend_pipelineLibraryForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pipelineLibraryForKey:");
}

id objc_msgSend_pipelineStateId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pipelineStateId");
}

id objc_msgSend_pipelineStateIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pipelineStateIndex");
}

id objc_msgSend_pipelineStateInfoCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pipelineStateInfoCount");
}

id objc_msgSend_pipelineStateInfoData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pipelineStateInfoData");
}

id objc_msgSend_pipelineStates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pipelineStates");
}

id objc_msgSend_pixelFormat(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pixelFormat");
}

id objc_msgSend_plane(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plane");
}

id objc_msgSend_platform(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "platform");
}

id objc_msgSend_plistPayload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "plistPayload");
}

id objc_msgSend_pointerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pointerValue");
}

id objc_msgSend_popDebugGroup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "popDebugGroup");
}

id objc_msgSend_postProcessRawDataWithRingBufferIndex_source_sourceSize_sourceRead_sourceWrite_output_outputSize_outputRead_outputWrite_isLast_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postProcessRawDataWithRingBufferIndex:source:sourceSize:sourceRead:sourceWrite:output:outputSize:outputRead:outputWrite:isLast:");
}

id objc_msgSend_postProcessRawDataWithSource_sourceSize_sourceRead_output_outputSize_outputWritten_isLast_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postProcessRawDataWithSource:sourceSize:sourceRead:output:outputSize:outputWritten:isLast:");
}

id objc_msgSend_postVertexDumpOutputs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postVertexDumpOutputs");
}

id objc_msgSend_postVertexDumpStride(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postVertexDumpStride");
}

id objc_msgSend_preExposure(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preExposure");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_preloadedLibraries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preloadedLibraries");
}

id objc_msgSend_presentDrawableWithKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "presentDrawableWithKey:");
}

id objc_msgSend_previousActivity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "previousActivity");
}

id objc_msgSend_primitiveBufferSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primitiveBufferSize");
}

id objc_msgSend_primitiveKind(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primitiveKind");
}

id objc_msgSend_primitiveType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primitiveType");
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "priority");
}

id objc_msgSend_processGPUTimelineDataSources_withPayload_forReplayController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processGPUTimelineDataSources:withPayload:forReplayController:");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processInfo");
}

id objc_msgSend_processStreamingGRCData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processStreamingGRCData:");
}

id objc_msgSend_processorCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processorCount");
}

id objc_msgSend_profileBatchIdFilteredData_withPayload_forReplayController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "profileBatchIdFilteredData:withPayload:forReplayController:");
}

id objc_msgSend_profileData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "profileData");
}

id objc_msgSend_profileShadersForDataSource_withPayload_forReplayController_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "profileShadersForDataSource:withPayload:forReplayController:");
}

id objc_msgSend_programData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "programData");
}

id objc_msgSend_programId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "programId");
}

id objc_msgSend_programIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "programIndex");
}

id objc_msgSend_programInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "programInfo");
}

id objc_msgSend_programInfoList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "programInfoList");
}

id objc_msgSend_programPipelineInfoList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "programPipelineInfoList");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_pushDebugGroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pushDebugGroup:");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queue");
}

id objc_msgSend_rAddressMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rAddressMode");
}

id objc_msgSend_range(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "range");
}

id objc_msgSend_rangeOfCharacterFromSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangeOfCharacterFromSet:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rangeOfString_options_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rangeOfString:options:range:");
}

id objc_msgSend_rasterSampleCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rasterSampleCount");
}

id objc_msgSend_rasterizationRateMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rasterizationRateMap");
}

id objc_msgSend_rasterizationRateMapDescriptorWithScreenSize_layerCount_layers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rasterizationRateMapDescriptorWithScreenSize:layerCount:layers:");
}

id objc_msgSend_rasterizationRateMapForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rasterizationRateMapForKey:");
}

id objc_msgSend_reactiveMaskTexture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reactiveMaskTexture");
}

id objc_msgSend_reactiveTextureUsage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reactiveTextureUsage");
}

id objc_msgSend_readConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "readConfig:");
}

id objc_msgSend_receiveData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "receiveData:");
}

id objc_msgSend_reclaimAllocatedSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reclaimAllocatedSize:");
}

id objc_msgSend_reclaimBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reclaimBuffer:");
}

id objc_msgSend_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refitAccelerationStructure:descriptor:destination:scratchBuffer:scratchBufferOffset:");
}

id objc_msgSend_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refitAccelerationStructure:descriptor:destination:scratchBuffer:scratchBufferOffset:options:");
}

id objc_msgSend_reflectionWithOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reflectionWithOptions:");
}

id objc_msgSend_registerDispatcher_forPort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerDispatcher:forPort:");
}

id objc_msgSend_registerInfoCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerInfoCount");
}

id objc_msgSend_registerInfoData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerInfoData");
}

id objc_msgSend_registerObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerObserver:");
}

id objc_msgSend_relayMessage_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "relayMessage:error:");
}

id objc_msgSend_releaseBuffer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "releaseBuffer");
}

id objc_msgSend_relocations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "relocations");
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_removeAPSCounterData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAPSCounterData");
}

id objc_msgSend_removeAPSData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAPSData");
}

id objc_msgSend_removeAPSTimelineData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAPSTimelineData");
}

id objc_msgSend_removeAccelerationStructureCommandEncoderForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAccelerationStructureCommandEncoderForKey:");
}

id objc_msgSend_removeAccelerationStructureForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAccelerationStructureForKey:");
}

id objc_msgSend_removeAliasableResourceForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAliasableResourceForKey:");
}

id objc_msgSend_removeAllAllocations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllAllocations");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeAllocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllocation:");
}

id objc_msgSend_removeAllocations_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllocations:count:");
}

id objc_msgSend_removeArgumentEncoderForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeArgumentEncoderForKey:");
}

id objc_msgSend_removeBinaryArchiveForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeBinaryArchiveForKey:");
}

id objc_msgSend_removeBlitCommandEncoderForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeBlitCommandEncoderForKey:");
}

id objc_msgSend_removeBufferForHeapKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeBufferForHeapKey:");
}

id objc_msgSend_removeBufferForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeBufferForKey:");
}

id objc_msgSend_removeCommandBufferForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeCommandBufferForKey:");
}

id objc_msgSend_removeCommandQueueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeCommandQueueForKey:");
}

id objc_msgSend_removeComputeCommandEncoderForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeComputeCommandEncoderForKey:");
}

id objc_msgSend_removeComputePipelineStateForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeComputePipelineStateForKey:");
}

id objc_msgSend_removeCounterSampleBufferForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeCounterSampleBufferForKey:");
}

id objc_msgSend_removeDeadlineProfileForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeDeadlineProfileForKey:");
}

id objc_msgSend_removeDepthStencilStateForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeDepthStencilStateForKey:");
}

id objc_msgSend_removeDeviceForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeDeviceForKey:");
}

id objc_msgSend_removeDynamicLibraryForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeDynamicLibraryForKey:");
}

id objc_msgSend_removeEventForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeEventForKey:");
}

id objc_msgSend_removeFenceForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFenceForKey:");
}

id objc_msgSend_removeFunctionForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFunctionForKey:");
}

id objc_msgSend_removeFunctionHandleForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFunctionHandleForKey:");
}

id objc_msgSend_removeFunctionPointerHandleForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFunctionPointerHandleForKey:");
}

id objc_msgSend_removeFunctionPrivateArgumentForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFunctionPrivateArgumentForKey:");
}

id objc_msgSend_removeHeapForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeHeapForKey:");
}

id objc_msgSend_removeIOCommandBufferForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeIOCommandBufferForKey:");
}

id objc_msgSend_removeIOCommandQueueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeIOCommandQueueForKey:");
}

id objc_msgSend_removeIOHandleForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeIOHandleForKey:");
}

id objc_msgSend_removeIOScratchBufferAllocatorForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeIOScratchBufferAllocatorForKey:");
}

id objc_msgSend_removeIOScratchBufferForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeIOScratchBufferForKey:");
}

id objc_msgSend_removeIndirectCommandBufferForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeIndirectCommandBufferForKey:");
}

id objc_msgSend_removeIndirectComputeCommandForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeIndirectComputeCommandForKey:");
}

id objc_msgSend_removeIndirectRenderCommandForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeIndirectRenderCommandForKey:");
}

id objc_msgSend_removeIntersectionFunctionTableForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeIntersectionFunctionTableForKey:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeLastObject");
}

id objc_msgSend_removeLateEvalEventForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeLateEvalEventForKey:");
}

id objc_msgSend_removeLibraryForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeLibraryForKey:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectForIntKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectForIntKey:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeParallelRenderCommandEncoderForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeParallelRenderCommandEncoderForKey:");
}

id objc_msgSend_removePipelineLibraryForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePipelineLibraryForKey:");
}

id objc_msgSend_removeRasterizationRateMapForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeRasterizationRateMapForKey:");
}

id objc_msgSend_removeRenderCommandEncoderForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeRenderCommandEncoderForKey:");
}

id objc_msgSend_removeRenderPipelineStateForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeRenderPipelineStateForKey:");
}

id objc_msgSend_removeResidencySet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeResidencySet:");
}

id objc_msgSend_removeResidencySetForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeResidencySetForKey:");
}

id objc_msgSend_removeResidencySets_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeResidencySets:count:");
}

id objc_msgSend_removeResourceGroupForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeResourceGroupForKey:");
}

id objc_msgSend_removeResourceStateCommandEncoderForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeResourceStateCommandEncoderForKey:");
}

id objc_msgSend_removeResourcesForKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeResourcesForKeys:");
}

id objc_msgSend_removeSamplerStateForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeSamplerStateForKey:");
}

id objc_msgSend_removeSharedEventForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeSharedEventForKey:");
}

id objc_msgSend_removeSpatialScalerForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeSpatialScalerForKey:");
}

id objc_msgSend_removeTemporalScalerForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeTemporalScalerForKey:");
}

id objc_msgSend_removeTextureForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeTextureForKey:");
}

id objc_msgSend_removeVisibleFunctionTableForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeVisibleFunctionTableForKey:");
}

id objc_msgSend_renderCommandEncoder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderCommandEncoder");
}

id objc_msgSend_renderCommandEncoderForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderCommandEncoderForKey:");
}

id objc_msgSend_renderCommandEncoderWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderCommandEncoderWithDescriptor:");
}

id objc_msgSend_renderOverlay_color_shrinkToFit_withEncoder_withFormat_transform_anchor_bounds_renderTargetSize_viewContentsScale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderOverlay:color:shrinkToFit:withEncoder:withFormat:transform:anchor:bounds:renderTargetSize:viewContentsScale:");
}

id objc_msgSend_renderPassDescriptor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderPassDescriptor");
}

id objc_msgSend_renderPassDescriptorMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderPassDescriptorMap");
}

id objc_msgSend_renderPassDescriptorMapWithMemorylessSubstitutes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderPassDescriptorMapWithMemorylessSubstitutes:");
}

id objc_msgSend_renderPipelineDescriptorMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderPipelineDescriptorMap");
}

id objc_msgSend_renderPipelineStateForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderPipelineStateForKey:");
}

id objc_msgSend_renderTargetArrayIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderTargetArrayIndex");
}

id objc_msgSend_renderTargetHeight(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderTargetHeight");
}

id objc_msgSend_renderTargetWidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderTargetWidth");
}

id objc_msgSend_renderTexture_isDepthStencil_shrinkToFit_withEncoder_withFormat_transform_anchor_bounds_renderTargetSize_viewContentsScale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "renderTexture:isDepthStencil:shrinkToFit:withEncoder:withFormat:transform:anchor:bounds:renderTargetSize:viewContentsScale:");
}

id objc_msgSend_replaceBytesInRange_withBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceBytesInRange:withBytes:");
}

id objc_msgSend_replyBlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replyBlock");
}

id objc_msgSend_replySerial(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replySerial");
}

id objc_msgSend_replyTo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replyTo");
}

id objc_msgSend_requestCounters_firstErrorIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestCounters:firstErrorIndex:");
}

id objc_msgSend_requestCounters_withIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestCounters:withIndex:");
}

id objc_msgSend_requestID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestID");
}

id objc_msgSend_requestResidency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestResidency");
}

id objc_msgSend_requestTriggers_firstErrorIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestTriggers:firstErrorIndex:");
}

id objc_msgSend_requests(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requests");
}

id objc_msgSend_reserveResourceIndicesForResourceType_indices_indexCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reserveResourceIndicesForResourceType:indices:indexCount:");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reset");
}

id objc_msgSend_resetCommand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetCommand");
}

id objc_msgSend_resetCommandsInBuffer_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetCommandsInBuffer:withRange:");
}

id objc_msgSend_resetRawDataPostProcessor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetRawDataPostProcessor");
}

id objc_msgSend_resetTextureAccessCounters_region_mipLevel_slice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetTextureAccessCounters:region:mipLevel:slice:");
}

id objc_msgSend_resetUsingDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetUsingDescriptor:");
}

id objc_msgSend_resetWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetWithRange:");
}

id objc_msgSend_residencySetForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "residencySetForKey:");
}

id objc_msgSend_resolveCounterRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resolveCounterRange:");
}

id objc_msgSend_resolveMultisampleTexture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resolveMultisampleTexture");
}

id objc_msgSend_resourceForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourceForKey:");
}

id objc_msgSend_resourceGroupSPIForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourceGroupSPIForKey:");
}

id objc_msgSend_resourceIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourceIndex");
}

id objc_msgSend_resourceOptions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourceOptions");
}

id objc_msgSend_resourcePatchingTypeForResourceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourcePatchingTypeForResourceType:");
}

id objc_msgSend_resourcePool(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourcePool");
}

id objc_msgSend_resourceStateCommandEncoder(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourceStateCommandEncoder");
}

id objc_msgSend_resourceStateCommandEncoderForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourceStateCommandEncoderForKey:");
}

id objc_msgSend_resourceStateCommandEncoderWithDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourceStateCommandEncoderWithDescriptor:");
}

id objc_msgSend_resourceStatePassDescriptorMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourceStatePassDescriptorMap");
}

id objc_msgSend_resources(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resources");
}

id objc_msgSend_restoreIndirectCommandBufferDataMap(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "restoreIndirectCommandBufferDataMap");
}

id objc_msgSend_result(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "result");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resume");
}

id objc_msgSend_retainedReferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "retainedReferences");
}

id objc_msgSend_rgb(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rgb");
}

id objc_msgSend_riaGeneration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "riaGeneration");
}

id objc_msgSend_ringBufferInfoAtIndex_base_size_dataOffset_dataSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ringBufferInfoAtIndex:base:size:dataOffset:dataSize:");
}

id objc_msgSend_ringBufferNum(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ringBufferNum");
}

id objc_msgSend_rotation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rotation");
}

id objc_msgSend_runWithSocket_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "runWithSocket:");
}

id objc_msgSend_sAddressMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sAddressMode");
}

id objc_msgSend_sampleBufferAttachments(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sampleBufferAttachments");
}

id objc_msgSend_sampleCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sampleCount");
}

id objc_msgSend_sampleCountersInBuffer_atSampleIndex_withBarrier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sampleCountersInBuffer:atSampleIndex:withBarrier:");
}

id objc_msgSend_sampleMarker(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sampleMarker");
}

id objc_msgSend_sampledComputeCommandEncoderWithDescriptor_programInfoBuffer_capacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sampledComputeCommandEncoderWithDescriptor:programInfoBuffer:capacity:");
}

id objc_msgSend_sampledComputeCommandEncoderWithDispatchType_programInfoBuffer_capacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sampledComputeCommandEncoderWithDispatchType:programInfoBuffer:capacity:");
}

id objc_msgSend_sampledComputeCommandEncoderWithProgramInfoBuffer_capacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sampledComputeCommandEncoderWithProgramInfoBuffer:capacity:");
}

id objc_msgSend_sampledRenderCommandEncoderWithDescriptor_programInfoBuffer_capacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sampledRenderCommandEncoderWithDescriptor:programInfoBuffer:capacity:");
}

id objc_msgSend_samplerStateForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "samplerStateForKey:");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scale");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheme");
}

id objc_msgSend_screenSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "screenSize");
}

id objc_msgSend_seekToEndOfFile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seekToEndOfFile");
}

id objc_msgSend_seekToFileOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "seekToFileOffset:");
}

id objc_msgSend_selectWithName_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectWithName:options:");
}

id objc_msgSend_semaphore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "semaphore");
}

id objc_msgSend_semaphoreRequests(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "semaphoreRequests");
}

id objc_msgSend_send_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "send:error:");
}

id objc_msgSend_send_inReplyTo_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "send:inReplyTo:error:");
}

id objc_msgSend_send_inReplyTo_error_replyQueue_timeout_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "send:inReplyTo:error:replyQueue:timeout:handler:");
}

id objc_msgSend_sendNewMessage_error_replyQueue_timeout_handler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendNewMessage:error:replyQueue:timeout:handler:");
}

id objc_msgSend_serial(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serial");
}

id objc_msgSend_serializeInstanceAccelerationStructure_primitiveAccelerationStructures_toBuffer_serializedBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serializeInstanceAccelerationStructure:primitiveAccelerationStructures:toBuffer:serializedBufferOffset:");
}

id objc_msgSend_serializePrimitiveAccelerationStructure_toBuffer_serializedBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serializePrimitiveAccelerationStructure:toBuffer:serializedBufferOffset:");
}

id objc_msgSend_serviceLaunched(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceLaunched");
}

id objc_msgSend_servicePort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "servicePort");
}

id objc_msgSend_sessionID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionID");
}

id objc_msgSend_sessionWithReplayClient_functionIndex_requestID_transport_dataHandler_accelerationStructureKey_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionWithReplayClient:functionIndex:requestID:transport:dataHandler:accelerationStructureKey:completionHandler:");
}

id objc_msgSend_sessionsID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionsID");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set");
}

id objc_msgSend_setAccelerationStructure_atBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAccelerationStructure:atBufferIndex:");
}

id objc_msgSend_setAccelerationStructure_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAccelerationStructure:atIndex:");
}

id objc_msgSend_setAccelerationStructure_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAccelerationStructure:forKey:");
}

id objc_msgSend_setAccelerationStructureCommandEncoder_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAccelerationStructureCommandEncoder:forKey:");
}

id objc_msgSend_setAccelerationViewerVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAccelerationViewerVersion:");
}

id objc_msgSend_setActiveCoreInfoMasksPerPeriodicSample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveCoreInfoMasksPerPeriodicSample:");
}

id objc_msgSend_setActiveShadersPerPeriodicSample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActiveShadersPerPeriodicSample:");
}

id objc_msgSend_setAdditionalCompilerArguments_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAdditionalCompilerArguments:");
}

id objc_msgSend_setAggregatedGPUTimelineInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAggregatedGPUTimelineInfo:");
}

id objc_msgSend_setAllowCommandEncoderCoalescing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowCommandEncoderCoalescing:");
}

id objc_msgSend_setAllowDuplicateIntersectionFunctionInvocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowDuplicateIntersectionFunctionInvocation:");
}

id objc_msgSend_setAllowGPUOptimizedContents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowGPUOptimizedContents:");
}

id objc_msgSend_setAllowReferencingUndefinedSymbols_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowReferencingUndefinedSymbols:");
}

id objc_msgSend_setAlphaBlendOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAlphaBlendOperation:");
}

id objc_msgSend_setAlphaTestEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAlphaTestEnabled:");
}

id objc_msgSend_setAlphaTestFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAlphaTestFunction:");
}

id objc_msgSend_setAlphaTestReferenceValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAlphaTestReferenceValue:");
}

id objc_msgSend_setAlphaToCoverageEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAlphaToCoverageEnabled:");
}

id objc_msgSend_setAlphaToOneEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAlphaToOneEnabled:");
}

id objc_msgSend_setAnalyzerResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAnalyzerResult:");
}

id objc_msgSend_setAnchor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAnchor:");
}

id objc_msgSend_setAnchorPoint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAnchorPoint:");
}

id objc_msgSend_setArgument_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setArgument:atIndex:");
}

id objc_msgSend_setArgumentBuffer_offset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setArgumentBuffer:offset:");
}

id objc_msgSend_setArgumentBuffer_startOffset_arrayElement_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setArgumentBuffer:startOffset:arrayElement:");
}

id objc_msgSend_setArgumentEncoder_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setArgumentEncoder:forKey:");
}

id objc_msgSend_setArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setArray:");
}

id objc_msgSend_setArrayLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setArrayLength:");
}

id objc_msgSend_setAutoExposureEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAutoExposureEnabled:");
}

id objc_msgSend_setAveragePerDrawKickDurations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAveragePerDrawKickDurations:");
}

id objc_msgSend_setBackgroundGPUPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBackgroundGPUPriority:");
}

id objc_msgSend_setBackgroundGPUPriority_offset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBackgroundGPUPriority:offset:");
}

id objc_msgSend_setBarrier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBarrier");
}

id objc_msgSend_setBatchIdFilterableCounters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBatchIdFilterableCounters:");
}

id objc_msgSend_setBinary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBinary:");
}

id objc_msgSend_setBinaryArchives_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBinaryArchives:");
}

id objc_msgSend_setBinaryFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBinaryFunctions:");
}

id objc_msgSend_setBinaryLocationData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBinaryLocationData:");
}

id objc_msgSend_setBinaryRangeData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBinaryRangeData:");
}

id objc_msgSend_setBlendColorRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBlendColorRed:green:blue:alpha:");
}

id objc_msgSend_setBlendingEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBlendingEnabled:");
}

id objc_msgSend_setBlitCommandEncoder_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBlitCommandEncoder:forKey:");
}

id objc_msgSend_setBlitEncoderTimeInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBlitEncoderTimeInfo:");
}

id objc_msgSend_setBlitTimeData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBlitTimeData:");
}

id objc_msgSend_setBorderColor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBorderColor:");
}

id objc_msgSend_setBoundingBoxBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBoundingBoxBuffer:");
}

id objc_msgSend_setBoundingBoxBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBoundingBoxBufferOffset:");
}

id objc_msgSend_setBoundingBoxBuffers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBoundingBoxBuffers:");
}

id objc_msgSend_setBoundingBoxCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBoundingBoxCount:");
}

id objc_msgSend_setBoundingBoxStride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBoundingBoxStride:");
}

id objc_msgSend_setBounds_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBounds:");
}

id objc_msgSend_setBounds_contentsScale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBounds:contentsScale:");
}

id objc_msgSend_setBranchTargetData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBranchTargetData:");
}

id objc_msgSend_setBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBuffer:");
}

id objc_msgSend_setBuffer_forHeapKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBuffer:forHeapKey:");
}

id objc_msgSend_setBuffer_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBuffer:forKey:");
}

id objc_msgSend_setBuffer_offset_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBuffer:offset:atIndex:");
}

id objc_msgSend_setBuffer_offset_attributeStride_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBuffer:offset:attributeStride:atIndex:");
}

id objc_msgSend_setBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBufferIndex:");
}

id objc_msgSend_setBufferOffset_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBufferOffset:atIndex:");
}

id objc_msgSend_setBufferOffset_attributeStride_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBufferOffset:attributeStride:atIndex:");
}

id objc_msgSend_setBuffers_offsets_attributeStrides_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBuffers:offsets:attributeStrides:withRange:");
}

id objc_msgSend_setBuffers_offsets_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBuffers:offsets:withRange:");
}

id objc_msgSend_setBytes_length_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBytes:length:atIndex:");
}

id objc_msgSend_setBytes_length_attributeStride_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBytes:length:attributeStride:atIndex:");
}

id objc_msgSend_setCaptureObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCaptureObject:");
}

id objc_msgSend_setCaptureProgramAddressTable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCaptureProgramAddressTable:");
}

id objc_msgSend_setClauseData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClauseData:");
}

id objc_msgSend_setClearColor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClearColor:");
}

id objc_msgSend_setClearDepth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClearDepth:");
}

id objc_msgSend_setClearStencil_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClearStencil:");
}

id objc_msgSend_setClipDistanceEnableMask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setClipDistanceEnableMask:");
}

id objc_msgSend_setColorProcessingMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColorProcessingMode:");
}

id objc_msgSend_setColorResolveTexture_slice_depthPlane_level_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColorResolveTexture:slice:depthPlane:level:atIndex:");
}

id objc_msgSend_setColorResolveTexture_slice_depthPlane_level_yInvert_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColorResolveTexture:slice:depthPlane:level:yInvert:atIndex:");
}

id objc_msgSend_setColorSampleCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColorSampleCount:");
}

id objc_msgSend_setColorStoreAction_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColorStoreAction:atIndex:");
}

id objc_msgSend_setColorStoreActionOptions_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColorStoreActionOptions:atIndex:");
}

id objc_msgSend_setColorTexture_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColorTexture:");
}

id objc_msgSend_setColorTextureFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColorTextureFormat:");
}

id objc_msgSend_setColorspace_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setColorspace:");
}

id objc_msgSend_setCommandBuffer_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommandBuffer:forKey:");
}

id objc_msgSend_setCommandBufferCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommandBufferCount:");
}

id objc_msgSend_setCommandBufferErrorOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommandBufferErrorOptions:");
}

id objc_msgSend_setCommandBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommandBufferIndex:");
}

id objc_msgSend_setCommandQueue_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommandQueue:forKey:");
}

id objc_msgSend_setCommandTypes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommandTypes:");
}

id objc_msgSend_setCommitSynchronously_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommitSynchronously:");
}

id objc_msgSend_setCommitsWithQoS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCommitsWithQoS:");
}

id objc_msgSend_setCompareFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompareFunction:");
}

id objc_msgSend_setCompileSymbolVisibility_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompileSymbolVisibility:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setCompressionFootprint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompressionFootprint:");
}

id objc_msgSend_setCompressionMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompressionMode:");
}

id objc_msgSend_setCompressionType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCompressionType:");
}

id objc_msgSend_setComputeCommandEncoder_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setComputeCommandEncoder:forKey:");
}

id objc_msgSend_setComputeFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setComputeFunction:");
}

id objc_msgSend_setComputePipelineState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setComputePipelineState:");
}

id objc_msgSend_setComputePipelineState_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setComputePipelineState:atIndex:");
}

id objc_msgSend_setComputePipelineState_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setComputePipelineState:forKey:");
}

id objc_msgSend_setConsistentGPUPerfStateTo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConsistentGPUPerfStateTo:");
}

id objc_msgSend_setConstantValue_type_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConstantValue:type:atIndex:");
}

id objc_msgSend_setConstantValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConstantValues:");
}

id objc_msgSend_setContentRect_windowRect_properties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setContentRect:windowRect:properties:");
}

id objc_msgSend_setContentsScale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setContentsScale:");
}

id objc_msgSend_setControlMode_withReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlMode:withReply:");
}

id objc_msgSend_setControlPointBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlPointBuffer:");
}

id objc_msgSend_setControlPointBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlPointBufferOffset:");
}

id objc_msgSend_setControlPointBuffers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlPointBuffers:");
}

id objc_msgSend_setControlPointCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlPointCount:");
}

id objc_msgSend_setControlPointFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlPointFormat:");
}

id objc_msgSend_setControlPointStride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlPointStride:");
}

id objc_msgSend_setCoreCounts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCoreCounts:");
}

id objc_msgSend_setCounterNames_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCounterNames:");
}

id objc_msgSend_setCounterSampleBuffer_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCounterSampleBuffer:forKey:");
}

id objc_msgSend_setCounterSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCounterSet:");
}

id objc_msgSend_setCounters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCounters:");
}

id objc_msgSend_setCpuCacheMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCpuCacheMode:");
}

id objc_msgSend_setCullMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCullMode:");
}

id objc_msgSend_setCurveBasis_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurveBasis:");
}

id objc_msgSend_setCurveType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurveType:");
}

id objc_msgSend_setCustomBorderColorValue_0_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCustomBorderColorValue_0:");
}

id objc_msgSend_setCustomBorderColorValue_1_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCustomBorderColorValue_1:");
}

id objc_msgSend_setCustomBorderColorValue_2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCustomBorderColorValue_2:");
}

id objc_msgSend_setCustomBorderColorValue_3_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCustomBorderColorValue_3:");
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setData:");
}

id objc_msgSend_setDataSourceHasUnusedResources_captureRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDataSourceHasUnusedResources:captureRange:");
}

id objc_msgSend_setDeadlineProfile_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeadlineProfile:forKey:");
}

id objc_msgSend_setDebugCommandEncoder_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDebugCommandEncoder:forKey:");
}

id objc_msgSend_setDebuggingEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDebuggingEnabled:");
}

id objc_msgSend_setDecodingFailurePolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDecodingFailurePolicy:");
}

id objc_msgSend_setDefaultColorSampleCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDefaultColorSampleCount:");
}

id objc_msgSend_setDefaultCommandQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDefaultCommandQueue:");
}

id objc_msgSend_setDefaultRasterSampleCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDefaultRasterSampleCount:");
}

id objc_msgSend_setDepth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepth:");
}

id objc_msgSend_setDepthAttachmentPixelFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthAttachmentPixelFormat:");
}

id objc_msgSend_setDepthBias_slopeScale_clamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthBias:slopeScale:clamp:");
}

id objc_msgSend_setDepthCleared(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthCleared");
}

id objc_msgSend_setDepthClipMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthClipMode:");
}

id objc_msgSend_setDepthCompareFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthCompareFunction:");
}

id objc_msgSend_setDepthFailureOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthFailureOperation:");
}

id objc_msgSend_setDepthPlane_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthPlane:");
}

id objc_msgSend_setDepthResolveFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthResolveFilter:");
}

id objc_msgSend_setDepthResolveTexture_slice_depthPlane_level_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthResolveTexture:slice:depthPlane:level:");
}

id objc_msgSend_setDepthResolveTexture_slice_depthPlane_level_yInvert_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthResolveTexture:slice:depthPlane:level:yInvert:");
}

id objc_msgSend_setDepthReversed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthReversed:");
}

id objc_msgSend_setDepthStencil_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthStencil:");
}

id objc_msgSend_setDepthStencilPassOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthStencilPassOperation:");
}

id objc_msgSend_setDepthStencilState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthStencilState:");
}

id objc_msgSend_setDepthStencilState_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthStencilState:forKey:");
}

id objc_msgSend_setDepthStencilWriteDisabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthStencilWriteDisabled:");
}

id objc_msgSend_setDepthStoreAction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthStoreAction:");
}

id objc_msgSend_setDepthStoreActionOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthStoreActionOptions:");
}

id objc_msgSend_setDepthTexture_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthTexture:");
}

id objc_msgSend_setDepthTextureFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthTextureFormat:");
}

id objc_msgSend_setDepthWriteEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDepthWriteEnabled:");
}

id objc_msgSend_setDerivedCounterNames_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDerivedCounterNames:");
}

id objc_msgSend_setDerivedCounters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDerivedCounters:");
}

id objc_msgSend_setDerivedCountersData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDerivedCountersData:");
}

id objc_msgSend_setDerivedEncoderCounterInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDerivedEncoderCounterInfo:");
}

id objc_msgSend_setDestination_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDestination:");
}

id objc_msgSend_setDestinationAlphaBlendFactor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDestinationAlphaBlendFactor:");
}

id objc_msgSend_setDestinationRGBBlendFactor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDestinationRGBBlendFactor:");
}

id objc_msgSend_setDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDevice:");
}

id objc_msgSend_setDevice_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDevice:forKey:");
}

id objc_msgSend_setDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDictionary:");
}

id objc_msgSend_setDisableComputeEncoderCoalescing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisableComputeEncoderCoalescing:");
}

id objc_msgSend_setDisableCrossQueueHazardTracking_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisableCrossQueueHazardTracking:");
}

id objc_msgSend_setDisableDeferredEndEncoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisableDeferredEndEncoding:");
}

id objc_msgSend_setDisableHeapTextureCompression_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisableHeapTextureCompression:");
}

id objc_msgSend_setDisableOptimizeRestores_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisableOptimizeRestores:");
}

id objc_msgSend_setDisableRunTimeCompilation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisableRunTimeCompilation:");
}

id objc_msgSend_setDispatchType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDispatchType:");
}

id objc_msgSend_setDisplayTextureEncoder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDisplayTextureEncoder:");
}

id objc_msgSend_setDitherEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDitherEnabled:");
}

id objc_msgSend_setDrawCallCost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDrawCallCost:");
}

id objc_msgSend_setDrawCallIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDrawCallIndex:");
}

id objc_msgSend_setDrawCallPerLineCost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDrawCallPerLineCost:");
}

id objc_msgSend_setDrawable_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDrawable:forKey:");
}

id objc_msgSend_setDrawableSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDrawableSize:");
}

id objc_msgSend_setDriverCompilerOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDriverCompilerOptions:");
}

id objc_msgSend_setDylib_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDylib:");
}

id objc_msgSend_setDynamicLibrary_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDynamicLibrary:forKey:");
}

id objc_msgSend_setEffectiveKickTimes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEffectiveKickTimes:");
}

id objc_msgSend_setEffectivePerEncoderDrawKickTimes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEffectivePerEncoderDrawKickTimes:");
}

id objc_msgSend_setEnableBarrier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnableBarrier:");
}

id objc_msgSend_setEnableCapture_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnableCapture:");
}

id objc_msgSend_setEnableDisplayOnDevice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnableDisplayOnDevice:");
}

id objc_msgSend_setEnableHUD_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnableHUD:");
}

id objc_msgSend_setEnableReplayFromOtherPlatforms_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnableReplayFromOtherPlatforms:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEncodedAttributes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEncodedAttributes:");
}

id objc_msgSend_setEncoderCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEncoderCount:");
}

id objc_msgSend_setEncoderFunctionIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEncoderFunctionIndex:");
}

id objc_msgSend_setEncoderIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEncoderIndex:");
}

id objc_msgSend_setEncoderIndexToLabelMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEncoderIndexToLabelMap:");
}

id objc_msgSend_setEncoderInfos_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEncoderInfos:");
}

id objc_msgSend_setEncoderStateId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEncoderStateId:");
}

id objc_msgSend_setEncoderTimelineInfos_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEncoderTimelineInfos:");
}

id objc_msgSend_setEndCaps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEndCaps:");
}

id objc_msgSend_setEndOfEncoderSampleIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEndOfEncoderSampleIndex:");
}

id objc_msgSend_setEndOfFragmentSampleIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEndOfFragmentSampleIndex:");
}

id objc_msgSend_setEndOfVertexSampleIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEndOfVertexSampleIndex:");
}

id objc_msgSend_setEndTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEndTime:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setError:");
}

id objc_msgSend_setErrorOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setErrorOptions:");
}

id objc_msgSend_setEvent_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEvent:forKey:");
}

id objc_msgSend_setEvictsImmediately_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEvictsImmediately:");
}

id objc_msgSend_setExceptionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExceptionHandler:");
}

id objc_msgSend_setExecutionEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExecutionEnabled:");
}

id objc_msgSend_setExecutionMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExecutionMode:");
}

id objc_msgSend_setExplicitVisibilityGroupID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExplicitVisibilityGroupID:");
}

id objc_msgSend_setExposureTexture_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExposureTexture:");
}

id objc_msgSend_setFence_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFence:");
}

id objc_msgSend_setFence_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFence:forKey:");
}

id objc_msgSend_setForceLoadActionClear_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForceLoadActionClear:");
}

id objc_msgSend_setForceLoadUnusedResources_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForceLoadUnusedResources:");
}

id objc_msgSend_setForceResourceIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForceResourceIndex:");
}

id objc_msgSend_setForceSeamsOnCubemapFiltering_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForceSeamsOnCubemapFiltering:");
}

id objc_msgSend_setForceSoftwareVertexFetch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForceSoftwareVertexFetch:");
}

id objc_msgSend_setForceWaitUntilCompleted_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForceWaitUntilCompleted:");
}

id objc_msgSend_setFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFormat:");
}

id objc_msgSend_setFragmentAccelerationStructure_atBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentAccelerationStructure:atBufferIndex:");
}

id objc_msgSend_setFragmentAdditionalBinaryFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentAdditionalBinaryFunctions:");
}

id objc_msgSend_setFragmentBuffer_offset_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentBuffer:offset:atIndex:");
}

id objc_msgSend_setFragmentBufferOffset_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentBufferOffset:atIndex:");
}

id objc_msgSend_setFragmentBuffers_offsets_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentBuffers:offsets:withRange:");
}

id objc_msgSend_setFragmentBytes_length_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentBytes:length:atIndex:");
}

id objc_msgSend_setFragmentDepthCompareClampMask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentDepthCompareClampMask:");
}

id objc_msgSend_setFragmentFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentFunction:");
}

id objc_msgSend_setFragmentIntersectionFunctionTable_atBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentIntersectionFunctionTable:atBufferIndex:");
}

id objc_msgSend_setFragmentIntersectionFunctionTables_withBufferRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentIntersectionFunctionTables:withBufferRange:");
}

id objc_msgSend_setFragmentLinkedFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentLinkedFunctions:");
}

id objc_msgSend_setFragmentPreloadedLibraries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentPreloadedLibraries:");
}

id objc_msgSend_setFragmentSamplerState_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentSamplerState:atIndex:");
}

id objc_msgSend_setFragmentSamplerState_lodMinClamp_lodMaxClamp_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:");
}

id objc_msgSend_setFragmentSamplerStates_lodMinClamps_lodMaxClamps_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:");
}

id objc_msgSend_setFragmentSamplerStates_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentSamplerStates:withRange:");
}

id objc_msgSend_setFragmentTexture_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentTexture:atIndex:");
}

id objc_msgSend_setFragmentTexture_atTextureIndex_samplerState_atSamplerIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentTexture:atTextureIndex:samplerState:atSamplerIndex:");
}

id objc_msgSend_setFragmentTextures_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentTextures:withRange:");
}

id objc_msgSend_setFragmentVisibleFunctionTable_atBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentVisibleFunctionTable:atBufferIndex:");
}

id objc_msgSend_setFragmentVisibleFunctionTables_withBufferRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFragmentVisibleFunctionTables:withBufferRange:");
}

id objc_msgSend_setFrameTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFrameTime:");
}

id objc_msgSend_setFramebufferOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFramebufferOnly:");
}

id objc_msgSend_setFrontFacingWinding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFrontFacingWinding:");
}

id objc_msgSend_setFunction_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFunction:atIndex:");
}

id objc_msgSend_setFunction_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFunction:forKey:");
}

id objc_msgSend_setFunctionCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFunctionCount:");
}

id objc_msgSend_setFunctionGraphs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFunctionGraphs:");
}

id objc_msgSend_setFunctionHandle_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFunctionHandle:forKey:");
}

id objc_msgSend_setFunctionIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFunctionIndex:");
}

id objc_msgSend_setFunctionPointers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFunctionPointers:");
}

id objc_msgSend_setFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFunctions:");
}

id objc_msgSend_setFunctions_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFunctions:withRange:");
}

id objc_msgSend_setGPUPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGPUPriority:");
}

id objc_msgSend_setGPUPriority_offset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGPUPriority:offset:");
}

id objc_msgSend_setGeometryBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGeometryBuffer:");
}

id objc_msgSend_setGeometryBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGeometryBufferOffset:");
}

id objc_msgSend_setGeometryDescriptors_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGeometryDescriptors:");
}

id objc_msgSend_setGpuCompilerSPIOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGpuCompilerSPIOptions:");
}

id objc_msgSend_setGpuTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGpuTime:");
}

id objc_msgSend_setGputraceURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGputraceURL:");
}

id objc_msgSend_setGroups_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGroups:");
}

id objc_msgSend_setHazardTrackingMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHazardTrackingMode:");
}

id objc_msgSend_setHeaderBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHeaderBuffer:");
}

id objc_msgSend_setHeaderBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHeaderBufferOffset:");
}

id objc_msgSend_setHeap_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHeap:forKey:");
}

id objc_msgSend_setHeight_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHeight:");
}

id objc_msgSend_setHorizontalLogicalCoordinatesAtPhysicalTileBoundaries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHorizontalLogicalCoordinatesAtPhysicalTileBoundaries:");
}

id objc_msgSend_setIOCommandBuffer_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIOCommandBuffer:forKey:");
}

id objc_msgSend_setIOCommandQueue_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIOCommandQueue:forKey:");
}

id objc_msgSend_setIOScratchBuffer_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIOScratchBuffer:forKey:");
}

id objc_msgSend_setImageblockSampleLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setImageblockSampleLength:");
}

id objc_msgSend_setImageblockWidth_height_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setImageblockWidth:height:");
}

id objc_msgSend_setIndexBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIndexBuffer:");
}

id objc_msgSend_setIndexBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIndexBufferIndex:");
}

id objc_msgSend_setIndexBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIndexBufferOffset:");
}

id objc_msgSend_setIndexType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIndexType:");
}

id objc_msgSend_setIndirectCommandBuffer_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIndirectCommandBuffer:atIndex:");
}

id objc_msgSend_setIndirectCommandBuffer_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIndirectCommandBuffer:forKey:");
}

id objc_msgSend_setIndirectCommandBuffers_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIndirectCommandBuffers:withRange:");
}

id objc_msgSend_setIndirectComputeCommand_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIndirectComputeCommand:forKey:");
}

id objc_msgSend_setIndirectRenderCommand_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIndirectRenderCommand:forKey:");
}

id objc_msgSend_setInheritBuffers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInheritBuffers:");
}

id objc_msgSend_setInheritPipelineState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInheritPipelineState:");
}

id objc_msgSend_setInitialCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInitialCapacity:");
}

id objc_msgSend_setInnerNodeBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInnerNodeBuffer:");
}

id objc_msgSend_setInnerNodeBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInnerNodeBufferOffset:");
}

id objc_msgSend_setInputContentHeight_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInputContentHeight:");
}

id objc_msgSend_setInputContentMaxScale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInputContentMaxScale:");
}

id objc_msgSend_setInputContentMinScale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInputContentMinScale:");
}

id objc_msgSend_setInputContentPropertiesEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInputContentPropertiesEnabled:");
}

id objc_msgSend_setInputContentWidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInputContentWidth:");
}

id objc_msgSend_setInputHeight_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInputHeight:");
}

id objc_msgSend_setInputPrimitiveTopology_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInputPrimitiveTopology:");
}

id objc_msgSend_setInputWidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInputWidth:");
}

id objc_msgSend_setInstallName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstallName:");
}

id objc_msgSend_setInstanceCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstanceCount:");
}

id objc_msgSend_setInstanceCountBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstanceCountBuffer:");
}

id objc_msgSend_setInstanceCountBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstanceCountBufferOffset:");
}

id objc_msgSend_setInstanceDescriptorBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstanceDescriptorBuffer:");
}

id objc_msgSend_setInstanceDescriptorBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstanceDescriptorBufferOffset:");
}

id objc_msgSend_setInstanceDescriptorStride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstanceDescriptorStride:");
}

id objc_msgSend_setInstanceDescriptorType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstanceDescriptorType:");
}

id objc_msgSend_setInstanceTransformBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstanceTransformBuffer:");
}

id objc_msgSend_setInstanceTransformBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstanceTransformBufferOffset:");
}

id objc_msgSend_setInstanceTransformationMatrixLayout_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstanceTransformationMatrixLayout:");
}

id objc_msgSend_setInstancedAccelerationStructures_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstancedAccelerationStructures:");
}

id objc_msgSend_setInstructionData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInstructionData:");
}

id objc_msgSend_setInterfaceOrientation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfaceOrientation:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setIntersectionFunctionTable_atBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIntersectionFunctionTable:atBufferIndex:");
}

id objc_msgSend_setIntersectionFunctionTable_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIntersectionFunctionTable:atIndex:");
}

id objc_msgSend_setIntersectionFunctionTable_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIntersectionFunctionTable:forKey:");
}

id objc_msgSend_setIntersectionFunctionTableOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIntersectionFunctionTableOffset:");
}

id objc_msgSend_setIntersectionFunctionTables_withBufferRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIntersectionFunctionTables:withBufferRange:");
}

id objc_msgSend_setIntersectionFunctionTables_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIntersectionFunctionTables:withRange:");
}

id objc_msgSend_setIsDrawable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsDrawable:");
}

id objc_msgSend_setIsOpenGLQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIsOpenGLQueue:");
}

id objc_msgSend_setJitterOffsetX_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setJitterOffsetX:");
}

id objc_msgSend_setJitterOffsetY_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setJitterOffsetY:");
}

id objc_msgSend_setKernelBuffer_offset_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKernelBuffer:offset:atIndex:");
}

id objc_msgSend_setKernelBuffer_offset_attributeStride_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKernelBuffer:offset:attributeStride:atIndex:");
}

id objc_msgSend_setKind_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKind:");
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLabel:");
}

id objc_msgSend_setLanguageVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLanguageVersion:");
}

id objc_msgSend_setLateEvalEvent_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLateEvalEvent:forKey:");
}

id objc_msgSend_setLayer_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLayer:forKey:");
}

id objc_msgSend_setLayerClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLayerClass:");
}

id objc_msgSend_setLayers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLayers:");
}

id objc_msgSend_setLeafNodeBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLeafNodeBuffer:");
}

id objc_msgSend_setLeafNodeBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLeafNodeBufferOffset:");
}

id objc_msgSend_setLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLength:");
}

id objc_msgSend_setLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLevel:");
}

id objc_msgSend_setLibraries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLibraries:");
}

id objc_msgSend_setLibrary_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLibrary:forKey:");
}

id objc_msgSend_setLibraryType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLibraryType:");
}

id objc_msgSend_setLineWidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLineWidth:");
}

id objc_msgSend_setLinkedFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLinkedFunctions:");
}

id objc_msgSend_setLoadAction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLoadAction:");
}

id objc_msgSend_setLoadActionTimes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLoadActionTimes:");
}

id objc_msgSend_setLockParameterBufferSizeToMax_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLockParameterBufferSizeToMax:");
}

id objc_msgSend_setLodAverage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLodAverage:");
}

id objc_msgSend_setLodMaxClamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLodMaxClamp:");
}

id objc_msgSend_setLodMinClamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLodMinClamp:");
}

id objc_msgSend_setLogicOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLogicOperation:");
}

id objc_msgSend_setLogicOperationEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLogicOperationEnabled:");
}

id objc_msgSend_setMGPUTimelineInfos_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMGPUTimelineInfos:");
}

id objc_msgSend_setMTLCounterSampleLocationWithBuffer_startIndex_endIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMTLCounterSampleLocationWithBuffer:startIndex:endIndex:");
}

id objc_msgSend_setMTLCounterSampleLocationWithBuffer_vertexStartIndex_vertexEndIndex_fragmentStartIndex_fragmentEndIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMTLCounterSampleLocationWithBuffer:vertexStartIndex:vertexEndIndex:fragmentStartIndex:fragmentEndIndex:");
}

id objc_msgSend_setMagFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMagFilter:");
}

id objc_msgSend_setMathFloatingPointFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMathFloatingPointFunctions:");
}

id objc_msgSend_setMathMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMathMode:");
}

id objc_msgSend_setMaxAccelerationStructureTraversalDepth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxAccelerationStructureTraversalDepth:");
}

id objc_msgSend_setMaxAnisotropy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxAnisotropy:");
}

id objc_msgSend_setMaxCallStackDepth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxCallStackDepth:");
}

id objc_msgSend_setMaxCommandBufferCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxCommandBufferCount:");
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxConcurrentOperationCount:");
}

id objc_msgSend_setMaxFragmentBufferBindCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxFragmentBufferBindCount:");
}

id objc_msgSend_setMaxFragmentCallStackDepth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxFragmentCallStackDepth:");
}

id objc_msgSend_setMaxInstanceCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxInstanceCount:");
}

id objc_msgSend_setMaxKernelBufferBindCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxKernelBufferBindCount:");
}

id objc_msgSend_setMaxKernelThreadgroupMemoryBindCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxKernelThreadgroupMemoryBindCount:");
}

id objc_msgSend_setMaxMeshBufferBindCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxMeshBufferBindCount:");
}

id objc_msgSend_setMaxMeshCallStackDepth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxMeshCallStackDepth:");
}

id objc_msgSend_setMaxMotionTransformCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxMotionTransformCount:");
}

id objc_msgSend_setMaxObjectBufferBindCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxObjectBufferBindCount:");
}

id objc_msgSend_setMaxObjectCallStackDepth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxObjectCallStackDepth:");
}

id objc_msgSend_setMaxObjectThreadgroupMemoryBindCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxObjectThreadgroupMemoryBindCount:");
}

id objc_msgSend_setMaxPooledBuffers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxPooledBuffers:");
}

id objc_msgSend_setMaxTessellationFactor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxTessellationFactor:");
}

id objc_msgSend_setMaxThreadgroupsPerMeshGrid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxThreadgroupsPerMeshGrid:");
}

id objc_msgSend_setMaxTotalThreadsPerMeshThreadgroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxTotalThreadsPerMeshThreadgroup:");
}

id objc_msgSend_setMaxTotalThreadsPerObjectThreadgroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxTotalThreadsPerObjectThreadgroup:");
}

id objc_msgSend_setMaxTotalThreadsPerThreadgroup_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxTotalThreadsPerThreadgroup:");
}

id objc_msgSend_setMaxVertexAmplificationCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxVertexAmplificationCount:");
}

id objc_msgSend_setMaxVertexBufferBindCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxVertexBufferBindCount:");
}

id objc_msgSend_setMaxVertexCallStackDepth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMaxVertexCallStackDepth:");
}

id objc_msgSend_setMeshAdditionalBinaryFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeshAdditionalBinaryFunctions:");
}

id objc_msgSend_setMeshBuffer_offset_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeshBuffer:offset:atIndex:");
}

id objc_msgSend_setMeshBufferOffset_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeshBufferOffset:atIndex:");
}

id objc_msgSend_setMeshBuffers_offsets_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeshBuffers:offsets:withRange:");
}

id objc_msgSend_setMeshBytes_length_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeshBytes:length:atIndex:");
}

id objc_msgSend_setMeshFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeshFunction:");
}

id objc_msgSend_setMeshPreloadedLibraries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeshPreloadedLibraries:");
}

id objc_msgSend_setMeshSamplerState_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeshSamplerState:atIndex:");
}

id objc_msgSend_setMeshSamplerState_lodMinClamp_lodMaxClamp_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeshSamplerState:lodMinClamp:lodMaxClamp:atIndex:");
}

id objc_msgSend_setMeshSamplerStates_lodMinClamps_lodMaxClamps_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeshSamplerStates:lodMinClamps:lodMaxClamps:withRange:");
}

id objc_msgSend_setMeshSamplerStates_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeshSamplerStates:withRange:");
}

id objc_msgSend_setMeshTexture_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeshTexture:atIndex:");
}

id objc_msgSend_setMeshTextures_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeshTextures:withRange:");
}

id objc_msgSend_setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth:");
}

id objc_msgSend_setMessage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMessage:");
}

id objc_msgSend_setMessageHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMessageHandler:");
}

id objc_msgSend_setMetalAssertionsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMetalAssertionsEnabled:");
}

id objc_msgSend_setMetalFXTimelineInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMetalFXTimelineInfo:");
}

id objc_msgSend_setMetalPluginName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMetalPluginName:");
}

id objc_msgSend_setMinFactor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinFactor:");
}

id objc_msgSend_setMinFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinFilter:");
}

id objc_msgSend_setMipFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMipFilter:");
}

id objc_msgSend_setMipmapLevelCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMipmapLevelCount:");
}

id objc_msgSend_setMotionEndBorderMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionEndBorderMode:");
}

id objc_msgSend_setMotionEndTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionEndTime:");
}

id objc_msgSend_setMotionKeyframeCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionKeyframeCount:");
}

id objc_msgSend_setMotionStartBorderMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionStartBorderMode:");
}

id objc_msgSend_setMotionStartTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionStartTime:");
}

id objc_msgSend_setMotionTexture_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionTexture:");
}

id objc_msgSend_setMotionTextureFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionTextureFormat:");
}

id objc_msgSend_setMotionTransformBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionTransformBuffer:");
}

id objc_msgSend_setMotionTransformBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionTransformBufferOffset:");
}

id objc_msgSend_setMotionTransformCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionTransformCount:");
}

id objc_msgSend_setMotionTransformCountBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionTransformCountBuffer:");
}

id objc_msgSend_setMotionTransformCountBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionTransformCountBufferOffset:");
}

id objc_msgSend_setMotionTransformStride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionTransformStride:");
}

id objc_msgSend_setMotionTransformType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionTransformType:");
}

id objc_msgSend_setMotionVectorScaleX_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionVectorScaleX:");
}

id objc_msgSend_setMotionVectorScaleY_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMotionVectorScaleY:");
}

id objc_msgSend_setMutability_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMutability:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNeedsCustomBorderColorSamplers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNeedsCustomBorderColorSamplers:");
}

id objc_msgSend_setNoCopy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNoCopy:");
}

id objc_msgSend_setNormalizedCoordinates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNormalizedCoordinates:");
}

id objc_msgSend_setNumActiveShadersPerPeriodicSample_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumActiveShadersPerPeriodicSample:");
}

id objc_msgSend_setNumBlitCalls_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumBlitCalls:");
}

id objc_msgSend_setNumPeriodicSamples_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumPeriodicSamples:");
}

id objc_msgSend_setNumberStyle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNumberStyle:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forIntKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forIntKey:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObjectAdditionalBinaryFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectAdditionalBinaryFunctions:");
}

id objc_msgSend_setObjectBuffer_offset_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectBuffer:offset:atIndex:");
}

id objc_msgSend_setObjectBufferOffset_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectBufferOffset:atIndex:");
}

id objc_msgSend_setObjectBuffers_offsets_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectBuffers:offsets:withRange:");
}

id objc_msgSend_setObjectBytes_length_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectBytes:length:atIndex:");
}

id objc_msgSend_setObjectFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectFunction:");
}

id objc_msgSend_setObjectPreloadedLibraries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectPreloadedLibraries:");
}

id objc_msgSend_setObjectSamplerState_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectSamplerState:atIndex:");
}

id objc_msgSend_setObjectSamplerState_lodMinClamp_lodMaxClamp_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectSamplerState:lodMinClamp:lodMaxClamp:atIndex:");
}

id objc_msgSend_setObjectSamplerStates_lodMinClamps_lodMaxClamps_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectSamplerStates:lodMinClamps:lodMaxClamps:withRange:");
}

id objc_msgSend_setObjectSamplerStates_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectSamplerStates:withRange:");
}

id objc_msgSend_setObjectTexture_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectTexture:atIndex:");
}

id objc_msgSend_setObjectTextures_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectTextures:withRange:");
}

id objc_msgSend_setObjectThreadgroupMemoryLength_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectThreadgroupMemoryLength:atIndex:");
}

id objc_msgSend_setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth:");
}

id objc_msgSend_setOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOffset:");
}

id objc_msgSend_setOpaque_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOpaque:");
}

id objc_msgSend_setOpaqueCurveIntersectionFunctionWithSignature_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOpaqueCurveIntersectionFunctionWithSignature:atIndex:");
}

id objc_msgSend_setOpaqueCurveIntersectionFunctionWithSignature_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOpaqueCurveIntersectionFunctionWithSignature:withRange:");
}

id objc_msgSend_setOpaqueTriangleIntersectionFunctionWithSignature_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOpaqueTriangleIntersectionFunctionWithSignature:atIndex:");
}

id objc_msgSend_setOpaqueTriangleIntersectionFunctionWithSignature_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOpaqueTriangleIntersectionFunctionWithSignature:withRange:");
}

id objc_msgSend_setOpenCLModeEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOpenCLModeEnabled:");
}

id objc_msgSend_setOpenGLModeEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOpenGLModeEnabled:");
}

id objc_msgSend_setOptimizationLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOptimizationLevel:");
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOptions:");
}

id objc_msgSend_setOrientation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOrientation:");
}

id objc_msgSend_setOutputHeight_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOutputHeight:");
}

id objc_msgSend_setOutputTexture_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOutputTexture:");
}

id objc_msgSend_setOutputTextureFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOutputTextureFormat:");
}

id objc_msgSend_setOutputURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOutputURL:");
}

id objc_msgSend_setOutputWidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOutputWidth:");
}

id objc_msgSend_setOverlay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOverlay:");
}

id objc_msgSend_setOverrideTriple_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOverrideTriple:");
}

id objc_msgSend_setParallelRenderCommandEncoder_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParallelRenderCommandEncoder:forKey:");
}

id objc_msgSend_setParentGPUAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParentGPUAddress:");
}

id objc_msgSend_setParentGPUSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParentGPUSize:");
}

id objc_msgSend_setPayloadMemoryLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPayloadMemoryLength:");
}

id objc_msgSend_setPerCommandBufferEncoderCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPerCommandBufferEncoderCount:");
}

id objc_msgSend_setPerFileCost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPerFileCost:");
}

id objc_msgSend_setPerFileLineCostDictForCI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPerFileLineCostDictForCI:");
}

id objc_msgSend_setPerPrimitiveDataBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPerPrimitiveDataBuffer:");
}

id objc_msgSend_setPerPrimitiveDataBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPerPrimitiveDataBufferOffset:");
}

id objc_msgSend_setPerRingPerFrameLimiterData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPerRingPerFrameLimiterData:");
}

id objc_msgSend_setPerRingSampledDerivedCounters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPerRingSampledDerivedCounters:");
}

id objc_msgSend_setPerfState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPerfState:");
}

id objc_msgSend_setPhysicalGranularity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPhysicalGranularity:");
}

id objc_msgSend_setPinnedGPUAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPinnedGPUAddress:");
}

id objc_msgSend_setPipelineLibrary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPipelineLibrary:");
}

id objc_msgSend_setPipelineLibrarySPI_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPipelineLibrarySPI:forKey:");
}

id objc_msgSend_setPipelineStateFunctionIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPipelineStateFunctionIndex:");
}

id objc_msgSend_setPipelineStateId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPipelineStateId:");
}

id objc_msgSend_setPipelineStateIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPipelineStateIndex:");
}

id objc_msgSend_setPixelFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPixelFormat:");
}

id objc_msgSend_setPlatform_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPlatform:");
}

id objc_msgSend_setPluginData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPluginData:");
}

id objc_msgSend_setPointCoordLowerLeft_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPointCoordLowerLeft:");
}

id objc_msgSend_setPointCoordYFlipEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPointCoordYFlipEnabled:");
}

id objc_msgSend_setPointSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPointSize:");
}

id objc_msgSend_setPointSizeOutputVS_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPointSizeOutputVS:");
}

id objc_msgSend_setPointSmoothEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPointSmoothEnabled:");
}

id objc_msgSend_setPostVertexDumpBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPostVertexDumpBufferIndex:");
}

id objc_msgSend_setPreExposure_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreExposure:");
}

id objc_msgSend_setPreloadedLibraries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreloadedLibraries:");
}

id objc_msgSend_setPreprocessorMacros_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreprocessorMacros:");
}

id objc_msgSend_setPreserveInvariance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreserveInvariance:");
}

id objc_msgSend_setPreviousActivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreviousActivity:");
}

id objc_msgSend_setPrimitiveBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimitiveBuffer:");
}

id objc_msgSend_setPrimitiveBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimitiveBufferOffset:");
}

id objc_msgSend_setPrimitiveDataBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimitiveDataBuffer:");
}

id objc_msgSend_setPrimitiveDataBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimitiveDataBufferOffset:");
}

id objc_msgSend_setPrimitiveDataElementSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimitiveDataElementSize:");
}

id objc_msgSend_setPrimitiveDataStride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimitiveDataStride:");
}

id objc_msgSend_setPrimitiveRestartEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimitiveRestartEnabled:");
}

id objc_msgSend_setPrimitiveRestartEnabled_index_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimitiveRestartEnabled:index:");
}

id objc_msgSend_setPrioritizeOutgoingMessages_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrioritizeOutgoingMessages:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setPrivateFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivateFunctions:");
}

id objc_msgSend_setProfilingEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProfilingEnabled:");
}

id objc_msgSend_setProgramId_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProgramId:");
}

id objc_msgSend_setProgramIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProgramIndex:");
}

id objc_msgSend_setProvokingVertexMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProvokingVertexMode:");
}

id objc_msgSend_setQosLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQosLevel:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setQueuePriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQueuePriority:");
}

id objc_msgSend_setRAddressMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRAddressMode:");
}

id objc_msgSend_setRadiusBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRadiusBuffer:");
}

id objc_msgSend_setRadiusBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRadiusBufferOffset:");
}

id objc_msgSend_setRadiusBuffers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRadiusBuffers:");
}

id objc_msgSend_setRadiusFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRadiusFormat:");
}

id objc_msgSend_setRadiusStride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRadiusStride:");
}

id objc_msgSend_setRasterSampleCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRasterSampleCount:");
}

id objc_msgSend_setRasterizationEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRasterizationEnabled:");
}

id objc_msgSend_setRasterizationRateMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRasterizationRateMap:");
}

id objc_msgSend_setRasterizationRateMap_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRasterizationRateMap:forKey:");
}

id objc_msgSend_setRawArrayValues_withUint32Values_andNumCounters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRawArrayValues:withUint32Values:andNumCounters:");
}

id objc_msgSend_setRawArrayValues_withUint64Values_andNumCounters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRawArrayValues:withUint64Values:andNumCounters:");
}

id objc_msgSend_setReactiveMaskTexture_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReactiveMaskTexture:");
}

id objc_msgSend_setReactiveMaskTextureEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReactiveMaskTextureEnabled:");
}

id objc_msgSend_setReactiveMaskTextureFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReactiveMaskTextureFormat:");
}

id objc_msgSend_setReadMask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReadMask:");
}

id objc_msgSend_setRegisterInfoData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRegisterInfoData:");
}

id objc_msgSend_setRegistrationHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRegistrationHandler:");
}

id objc_msgSend_setRelayTransport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRelayTransport:");
}

id objc_msgSend_setRelocations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRelocations:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRenderCommandEncoder_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRenderCommandEncoder:forKey:");
}

id objc_msgSend_setRenderPipelineState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRenderPipelineState:");
}

id objc_msgSend_setRenderPipelineState_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRenderPipelineState:atIndex:");
}

id objc_msgSend_setRenderPipelineState_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRenderPipelineState:forKey:");
}

id objc_msgSend_setRenderPipelineStates_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRenderPipelineStates:withRange:");
}

id objc_msgSend_setRenderTargetArrayLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRenderTargetArrayLength:");
}

id objc_msgSend_setRenderTargetHeight_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRenderTargetHeight:");
}

id objc_msgSend_setRenderTargetWidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRenderTargetWidth:");
}

id objc_msgSend_setReplyBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReplyBlock:");
}

id objc_msgSend_setReplyTo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReplyTo:");
}

id objc_msgSend_setRequestID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestID:");
}

id objc_msgSend_setRequiresSynchronousInitialization_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequiresSynchronousInitialization:");
}

id objc_msgSend_setReset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReset:");
}

id objc_msgSend_setResidencySet_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResidencySet:forKey:");
}

id objc_msgSend_setResolveDepthPlane_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResolveDepthPlane:");
}

id objc_msgSend_setResolveLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResolveLevel:");
}

id objc_msgSend_setResolveSlice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResolveSlice:");
}

id objc_msgSend_setResolveTexture_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResolveTexture:");
}

id objc_msgSend_setResourceID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResourceID:");
}

id objc_msgSend_setResourceIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResourceIndex:");
}

id objc_msgSend_setResourceOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResourceOptions:");
}

id objc_msgSend_setResourceStateCommandEncoder_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResourceStateCommandEncoder:forKey:");
}

id objc_msgSend_setResponsibleProcess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResponsibleProcess:");
}

id objc_msgSend_setRestoreTimestamps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRestoreTimestamps:");
}

id objc_msgSend_setResult_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResult:");
}

id objc_msgSend_setRetainedReferences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRetainedReferences:");
}

id objc_msgSend_setRgb_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRgb:");
}

id objc_msgSend_setRgbBlendOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRgbBlendOperation:");
}

id objc_msgSend_setRiaGeneration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRiaGeneration:");
}

id objc_msgSend_setRotation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRotation:");
}

id objc_msgSend_setSAddressMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSAddressMode:");
}

id objc_msgSend_setSampleBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSampleBuffer:");
}

id objc_msgSend_setSampleCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSampleCount:");
}

id objc_msgSend_setSampleCoverage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSampleCoverage:");
}

id objc_msgSend_setSampleCoverageInvert_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSampleCoverageInvert:");
}

id objc_msgSend_setSampleMask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSampleMask:");
}

id objc_msgSend_setSamplePositions_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSamplePositions:count:");
}

id objc_msgSend_setSamplerState_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSamplerState:atIndex:");
}

id objc_msgSend_setSamplerState_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSamplerState:forKey:");
}

id objc_msgSend_setSamplerState_lodMinClamp_lodMaxClamp_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSamplerState:lodMinClamp:lodMaxClamp:atIndex:");
}

id objc_msgSend_setSamplerStates_lodMinClamps_lodMaxClamps_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSamplerStates:lodMinClamps:lodMaxClamps:withRange:");
}

id objc_msgSend_setSamplerStates_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSamplerStates:withRange:");
}

id objc_msgSend_setScissorRect_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScissorRect:");
}

id objc_msgSend_setScissorRects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScissorRects:count:");
}

id objc_msgSend_setSegmentControlPointCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSegmentControlPointCount:");
}

id objc_msgSend_setSegmentCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSegmentCount:");
}

id objc_msgSend_setSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSelector:");
}

id objc_msgSend_setSessionID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSessionID:");
}

id objc_msgSend_setShaderDebugInfoCaching_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShaderDebugInfoCaching:");
}

id objc_msgSend_setShaderDebuggerVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShaderDebuggerVersion:");
}

id objc_msgSend_setShaderProfilerVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShaderProfilerVersion:");
}

id objc_msgSend_setShaderProfilingFrameTimes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShaderProfilingFrameTimes:");
}

id objc_msgSend_setShaderProfilingTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShaderProfilingTime:");
}

id objc_msgSend_setSharedEvent_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSharedEvent:forKey:");
}

id objc_msgSend_setSharedEventHandle_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSharedEventHandle:forKey:");
}

id objc_msgSend_setShrinkToFit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShrinkToFit:");
}

id objc_msgSend_setSignaledValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSignaledValue:");
}

id objc_msgSend_setSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSize:");
}

id objc_msgSend_setSkipEmptyTilesOnClearEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSkipEmptyTilesOnClearEnabled:");
}

id objc_msgSend_setSkipRender_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSkipRender:");
}

id objc_msgSend_setSkipSampleValidationAndApplySampleAtTileGranularity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSkipSampleValidationAndApplySampleAtTileGranularity:");
}

id objc_msgSend_setSlice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSlice:");
}

id objc_msgSend_setSourceAlphaBlendFactor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSourceAlphaBlendFactor:");
}

id objc_msgSend_setSourceLanguage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSourceLanguage:");
}

id objc_msgSend_setSourceRGBBlendFactor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSourceRGBBlendFactor:");
}

id objc_msgSend_setSparsePageSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSparsePageSize:");
}

id objc_msgSend_setSparseSurfaceDefaultValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSparseSurfaceDefaultValue:");
}

id objc_msgSend_setSpatialScaler_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSpatialScaler:forKey:");
}

id objc_msgSend_setSpecializedName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSpecializedName:");
}

id objc_msgSend_setStage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStage:");
}

id objc_msgSend_setStageInRegion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStageInRegion:");
}

id objc_msgSend_setStageInRegionWithIndirectBuffer_indirectBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStageInRegionWithIndirectBuffer:indirectBufferOffset:");
}

id objc_msgSend_setStartOfEncoderSampleIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartOfEncoderSampleIndex:");
}

id objc_msgSend_setStartOfFragmentSampleIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartOfFragmentSampleIndex:");
}

id objc_msgSend_setStartOfVertexSampleIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStartOfVertexSampleIndex:");
}

id objc_msgSend_setStatEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStatEnabled:");
}

id objc_msgSend_setStatLocations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStatLocations:");
}

id objc_msgSend_setStatOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStatOptions:");
}

id objc_msgSend_setState_withReply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setState:withReply:");
}

id objc_msgSend_setStencilAttachmentPixelFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStencilAttachmentPixelFormat:");
}

id objc_msgSend_setStencilCleared(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStencilCleared");
}

id objc_msgSend_setStencilCompareFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStencilCompareFunction:");
}

id objc_msgSend_setStencilFailureOperation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStencilFailureOperation:");
}

id objc_msgSend_setStencilFrontReferenceValue_backReferenceValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStencilFrontReferenceValue:backReferenceValue:");
}

id objc_msgSend_setStencilReferenceValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStencilReferenceValue:");
}

id objc_msgSend_setStencilResolveFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStencilResolveFilter:");
}

id objc_msgSend_setStencilResolveTexture_slice_depthPlane_level_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStencilResolveTexture:slice:depthPlane:level:");
}

id objc_msgSend_setStencilResolveTexture_slice_depthPlane_level_yInvert_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStencilResolveTexture:slice:depthPlane:level:yInvert:");
}

id objc_msgSend_setStencilStoreAction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStencilStoreAction:");
}

id objc_msgSend_setStencilStoreActionOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStencilStoreActionOptions:");
}

id objc_msgSend_setStepFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStepFunction:");
}

id objc_msgSend_setStepRate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStepRate:");
}

id objc_msgSend_setStorageMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStorageMode:");
}

id objc_msgSend_setStoreAction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStoreAction:");
}

id objc_msgSend_setStoreActionOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStoreActionOptions:");
}

id objc_msgSend_setStoreActionTimes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStoreActionTimes:");
}

id objc_msgSend_setStride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStride:");
}

id objc_msgSend_setString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setString:");
}

id objc_msgSend_setStrings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStrings:");
}

id objc_msgSend_setSubCommandIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubCommandIndex:");
}

id objc_msgSend_setSubstream_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubstream:");
}

id objc_msgSend_setSupportAddingBinaryFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportAddingBinaryFunctions:");
}

id objc_msgSend_setSupportAddingFragmentBinaryFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportAddingFragmentBinaryFunctions:");
}

id objc_msgSend_setSupportAddingMeshBinaryFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportAddingMeshBinaryFunctions:");
}

id objc_msgSend_setSupportAddingObjectBinaryFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportAddingObjectBinaryFunctions:");
}

id objc_msgSend_setSupportAddingVertexBinaryFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportAddingVertexBinaryFunctions:");
}

id objc_msgSend_setSupportArgumentBuffers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportArgumentBuffers:");
}

id objc_msgSend_setSupportDynamicAttributeStride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportDynamicAttributeStride:");
}

id objc_msgSend_setSupportIndirectCommandBuffers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportIndirectCommandBuffers:");
}

id objc_msgSend_setSupportRayTracing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportRayTracing:");
}

id objc_msgSend_setSupportsFileFormatV2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportsFileFormatV2:");
}

id objc_msgSend_setSwizzle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSwizzle:");
}

id objc_msgSend_setSwizzleKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSwizzleKey:");
}

id objc_msgSend_setSynchronous_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSynchronous:");
}

id objc_msgSend_setTAddressMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTAddressMode:");
}

id objc_msgSend_setTarget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTarget:");
}

id objc_msgSend_setTemporalScaler_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTemporalScaler:forKey:");
}

id objc_msgSend_setTessellationControlPointIndexType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTessellationControlPointIndexType:");
}

id objc_msgSend_setTessellationFactorBuffer_offset_instanceStride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTessellationFactorBuffer:offset:instanceStride:");
}

id objc_msgSend_setTessellationFactorFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTessellationFactorFormat:");
}

id objc_msgSend_setTessellationFactorScale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTessellationFactorScale:");
}

id objc_msgSend_setTessellationFactorScaleEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTessellationFactorScaleEnabled:");
}

id objc_msgSend_setTessellationFactorStepFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTessellationFactorStepFunction:");
}

id objc_msgSend_setTessellationOutputWindingOrder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTessellationOutputWindingOrder:");
}

id objc_msgSend_setTessellationPartitionMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTessellationPartitionMode:");
}

id objc_msgSend_setTexture_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTexture:");
}

id objc_msgSend_setTexture_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTexture:atIndex:");
}

id objc_msgSend_setTexture_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTexture:forKey:");
}

id objc_msgSend_setTextureType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTextureType:");
}

id objc_msgSend_setTextureWriteRoundingMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTextureWriteRoundingMode:");
}

id objc_msgSend_setTextures_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTextures:withRange:");
}

id objc_msgSend_setThreadGroupSizeIsMultipleOfThreadExecutionWidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setThreadGroupSizeIsMultipleOfThreadExecutionWidth:");
}

id objc_msgSend_setThreadgroupDistributionMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setThreadgroupDistributionMode:");
}

id objc_msgSend_setThreadgroupDistributionModeWithClusterGroupIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setThreadgroupDistributionModeWithClusterGroupIndex:");
}

id objc_msgSend_setThreadgroupMemoryLength_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setThreadgroupMemoryLength:");
}

id objc_msgSend_setThreadgroupMemoryLength_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setThreadgroupMemoryLength:atIndex:");
}

id objc_msgSend_setThreadgroupMemoryLength_offset_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setThreadgroupMemoryLength:offset:atIndex:");
}

id objc_msgSend_setThreadgroupPackingDisabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setThreadgroupPackingDisabled:");
}

id objc_msgSend_setThreadgroupSizeMatchesTileSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setThreadgroupSizeMatchesTileSize:");
}

id objc_msgSend_setTileAccelerationStructure_atBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileAccelerationStructure:atBufferIndex:");
}

id objc_msgSend_setTileAdditionalBinaryFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileAdditionalBinaryFunctions:");
}

id objc_msgSend_setTileBuffer_offset_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileBuffer:offset:atIndex:");
}

id objc_msgSend_setTileBufferOffset_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileBufferOffset:atIndex:");
}

id objc_msgSend_setTileBuffers_offsets_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileBuffers:offsets:withRange:");
}

id objc_msgSend_setTileBytes_length_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileBytes:length:atIndex:");
}

id objc_msgSend_setTileFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileFunction:");
}

id objc_msgSend_setTileHeight_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileHeight:");
}

id objc_msgSend_setTileIntersectionFunctionTable_atBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileIntersectionFunctionTable:atBufferIndex:");
}

id objc_msgSend_setTileIntersectionFunctionTables_withBufferRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileIntersectionFunctionTables:withBufferRange:");
}

id objc_msgSend_setTileSamplerState_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileSamplerState:atIndex:");
}

id objc_msgSend_setTileSamplerState_lodMinClamp_lodMaxClamp_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileSamplerState:lodMinClamp:lodMaxClamp:atIndex:");
}

id objc_msgSend_setTileSamplerStates_lodMinClamps_lodMaxClamps_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:");
}

id objc_msgSend_setTileSamplerStates_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileSamplerStates:withRange:");
}

id objc_msgSend_setTileTexture_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileTexture:atIndex:");
}

id objc_msgSend_setTileTextures_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileTextures:withRange:");
}

id objc_msgSend_setTileVisibleFunctionTable_atBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileVisibleFunctionTable:atBufferIndex:");
}

id objc_msgSend_setTileVisibleFunctionTables_withBufferRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileVisibleFunctionTables:withBufferRange:");
}

id objc_msgSend_setTileWidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTileWidth:");
}

id objc_msgSend_setTimeBaseDenominator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeBaseDenominator:");
}

id objc_msgSend_setTimeBaseNumerator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeBaseNumerator:");
}

id objc_msgSend_setTimestamps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimestamps:");
}

id objc_msgSend_setTotalCost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalCost:");
}

id objc_msgSend_setTotalPerLineCost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTotalPerLineCost:");
}

id objc_msgSend_setTraceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTraceName:");
}

id objc_msgSend_setTracingDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTracingDelegate:");
}

id objc_msgSend_setTracingEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTracingEnabled:");
}

id objc_msgSend_setTransform_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTransform:");
}

id objc_msgSend_setTransformationMatrixBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTransformationMatrixBuffer:");
}

id objc_msgSend_setTransformationMatrixBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTransformationMatrixBufferOffset:");
}

id objc_msgSend_setTransformationMatrixLayout_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTransformationMatrixLayout:");
}

id objc_msgSend_setTriangleCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTriangleCount:");
}

id objc_msgSend_setTriangleFillMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTriangleFillMode:");
}

id objc_msgSend_setTriangleFrontFillMode_backFillMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTriangleFrontFillMode:backFillMode:");
}

id objc_msgSend_setTwoSideEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTwoSideEnabled:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setType:");
}

id objc_msgSend_setUrl_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUrl:");
}

id objc_msgSend_setUsage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUsage:");
}

id objc_msgSend_setUscSamples_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUscSamples:");
}

id objc_msgSend_setValid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValid:");
}

id objc_msgSend_setValue_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValue:atIndex:");
}

id objc_msgSend_setValues_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValues:");
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVersion:");
}

id objc_msgSend_setVertexAccelerationStructure_atBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexAccelerationStructure:atBufferIndex:");
}

id objc_msgSend_setVertexAdditionalBinaryFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexAdditionalBinaryFunctions:");
}

id objc_msgSend_setVertexAmplificationCount_viewMappings_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexAmplificationCount:viewMappings:");
}

id objc_msgSend_setVertexAmplificationMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexAmplificationMode:");
}

id objc_msgSend_setVertexAmplificationMode_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexAmplificationMode:value:");
}

id objc_msgSend_setVertexBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexBuffer:");
}

id objc_msgSend_setVertexBuffer_offset_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexBuffer:offset:atIndex:");
}

id objc_msgSend_setVertexBuffer_offset_attributeStride_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexBuffer:offset:attributeStride:atIndex:");
}

id objc_msgSend_setVertexBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexBufferOffset:");
}

id objc_msgSend_setVertexBufferOffset_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexBufferOffset:atIndex:");
}

id objc_msgSend_setVertexBufferOffset_attributeStride_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexBufferOffset:attributeStride:atIndex:");
}

id objc_msgSend_setVertexBuffers_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexBuffers:");
}

id objc_msgSend_setVertexBuffers_offsets_attributeStrides_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexBuffers:offsets:attributeStrides:withRange:");
}

id objc_msgSend_setVertexBuffers_offsets_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexBuffers:offsets:withRange:");
}

id objc_msgSend_setVertexBytes_length_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexBytes:length:atIndex:");
}

id objc_msgSend_setVertexBytes_length_attributeStride_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexBytes:length:attributeStride:atIndex:");
}

id objc_msgSend_setVertexDepthCompareClampMask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexDepthCompareClampMask:");
}

id objc_msgSend_setVertexFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexFormat:");
}

id objc_msgSend_setVertexFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexFunction:");
}

id objc_msgSend_setVertexIntersectionFunctionTable_atBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexIntersectionFunctionTable:atBufferIndex:");
}

id objc_msgSend_setVertexIntersectionFunctionTables_withBufferRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexIntersectionFunctionTables:withBufferRange:");
}

id objc_msgSend_setVertexLinkedFunctions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexLinkedFunctions:");
}

id objc_msgSend_setVertexPreloadedLibraries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexPreloadedLibraries:");
}

id objc_msgSend_setVertexSamplerState_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexSamplerState:atIndex:");
}

id objc_msgSend_setVertexSamplerState_lodMinClamp_lodMaxClamp_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:");
}

id objc_msgSend_setVertexSamplerStates_lodMinClamps_lodMaxClamps_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:");
}

id objc_msgSend_setVertexSamplerStates_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexSamplerStates:withRange:");
}

id objc_msgSend_setVertexStride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexStride:");
}

id objc_msgSend_setVertexTexture_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexTexture:atIndex:");
}

id objc_msgSend_setVertexTextures_withRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexTextures:withRange:");
}

id objc_msgSend_setVertexVisibleFunctionTable_atBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexVisibleFunctionTable:atBufferIndex:");
}

id objc_msgSend_setVertexVisibleFunctionTables_withBufferRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVertexVisibleFunctionTables:withBufferRange:");
}

id objc_msgSend_setVerticalLogicalCoordinatesAtPhysicalTileBoundaries_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVerticalLogicalCoordinatesAtPhysicalTileBoundaries:");
}

id objc_msgSend_setViewport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setViewport:");
}

id objc_msgSend_setViewportTransformEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setViewportTransformEnabled:");
}

id objc_msgSend_setViewports_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setViewports:count:");
}

id objc_msgSend_setVisibilityResultBuffer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVisibilityResultBuffer:");
}

id objc_msgSend_setVisibilityResultMode_offset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVisibilityResultMode:offset:");
}

id objc_msgSend_setVisibleFunctionTable_atBufferIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVisibleFunctionTable:atBufferIndex:");
}

id objc_msgSend_setVisibleFunctionTable_atIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVisibleFunctionTable:atIndex:");
}

id objc_msgSend_setVisibleFunctionTable_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVisibleFunctionTable:forKey:");
}

id objc_msgSend_setVisibleFunctionTables_withBufferRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVisibleFunctionTables:withBufferRange:");
}

id objc_msgSend_setWidth_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWidth:");
}

id objc_msgSend_setWindowTitle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWindowTitle:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithCapacity:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWritableHeapsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWritableHeapsEnabled:");
}

id objc_msgSend_setWriteMask_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWriteMask:");
}

id objc_msgSend_setWriteSwizzleEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWriteSwizzleEnabled:");
}

id objc_msgSend_setYInvert_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setYInvert:");
}

id objc_msgSend_setup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setup");
}

id objc_msgSend_setupBinary_targetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupBinary:targetIndex:");
}

id objc_msgSend_setupDataForEvaluatingStreamingSamples_forRingBufferCount_forTargetIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupDataForEvaluatingStreamingSamples:forRingBufferCount:forTargetIndex:");
}

id objc_msgSend_shaderIR(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shaderIR");
}

id objc_msgSend_shaderProfiling(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shaderProfiling");
}

id objc_msgSend_shaderProfilingFrameTimes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shaderProfilingFrameTimes");
}

id objc_msgSend_shaderProfilingTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shaderProfilingTime");
}

id objc_msgSend_shaderSource(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shaderSource");
}

id objc_msgSend_shaderURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shaderURL");
}

id objc_msgSend_sharedCaptureManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedCaptureManager");
}

id objc_msgSend_sharedEventForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedEventForKey:");
}

id objc_msgSend_sharedEventHandleForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedEventHandleForKey:");
}

id objc_msgSend_sharedKeySetForKeys_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedKeySetForKeys:");
}

id objc_msgSend_sharedMemorySize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedMemorySize");
}

id objc_msgSend_shrinkToFit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shrinkToFit");
}

id objc_msgSend_signalEvent_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signalEvent:value:");
}

id objc_msgSend_signalProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signalProgress:");
}

id objc_msgSend_signpostIntervalBegin_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signpostIntervalBegin:");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "size");
}

id objc_msgSend_slice(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "slice");
}

id objc_msgSend_smallestEncoding(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "smallestEncoding");
}

id objc_msgSend_solid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "solid");
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_sourceList(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sourceList");
}

id objc_msgSend_sparseSurfaceDefaultValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sparseSurfaceDefaultValue");
}

id objc_msgSend_sparseTileSizeInBytesForSparsePageSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sparseTileSizeInBytesForSparsePageSize:");
}

id objc_msgSend_sparseTileSizeWithTextureType_pixelFormat_sampleCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sparseTileSizeWithTextureType:pixelFormat:sampleCount:");
}

id objc_msgSend_sparseTileSizeWithTextureType_pixelFormat_sampleCount_sparsePageSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sparseTileSizeWithTextureType:pixelFormat:sampleCount:sparsePageSize:");
}

id objc_msgSend_spatialScalerForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "spatialScalerForKey:");
}

id objc_msgSend_stageInputDescriptor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stageInputDescriptor");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "start");
}

id objc_msgSend_startAccessingSecurityScopedResource(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startAccessingSecurityScopedResource");
}

id objc_msgSend_startCaptureWithDescriptor_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startCaptureWithDescriptor:error:");
}

id objc_msgSend_startCollectingPerfStatsAtInterval_andPeriodicSamplesAtInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startCollectingPerfStatsAtInterval:andPeriodicSamplesAtInterval:");
}

id objc_msgSend_startSampling(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startSampling");
}

id objc_msgSend_stateFromWeightedAverage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stateFromWeightedAverage:");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "status");
}

id objc_msgSend_stencilAttachment(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stencilAttachment");
}

id objc_msgSend_stopAccessingSecurityScopedResource(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopAccessingSecurityScopedResource");
}

id objc_msgSend_stopCapture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopCapture");
}

id objc_msgSend_stopCollectingStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopCollectingStats");
}

id objc_msgSend_stopSampling(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopSampling");
}

id objc_msgSend_storageMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storageMode");
}

id objc_msgSend_storeActionTimes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeActionTimes");
}

id objc_msgSend_streamDataClasses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "streamDataClasses");
}

id objc_msgSend_streamHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "streamHandler");
}

id objc_msgSend_streamRef(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "streamRef");
}

id objc_msgSend_stride(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stride");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingPathExtension:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByDeletingLastPathComponent");
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByDeletingPathExtension");
}

id objc_msgSend_stringByReplacingCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByReplacingCharactersInRange:withString:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_stringByResolvingSymlinksInPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByResolvingSymlinksInPath");
}

id objc_msgSend_stringByStandardizingPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByStandardizingPath");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringPayload(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringPayload");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithCString:encoding:");
}

id objc_msgSend_stringWithFileSystemRepresentation_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFileSystemRepresentation:length:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_strings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "strings");
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "strongToStrongObjectsMapTable");
}

id objc_msgSend_subCommandIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subCommandIndex");
}

id objc_msgSend_subDivideCounterList_withOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subDivideCounterList:withOptions:");
}

id objc_msgSend_subType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subType");
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subdataWithRange:");
}

id objc_msgSend_subdivideCounterList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subdivideCounterList:");
}

id objc_msgSend_submitCommand(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "submitCommand");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_summary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "summary");
}

id objc_msgSend_supportArgumentBuffers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportArgumentBuffers");
}

id objc_msgSend_supportsArgumentBuffersTier2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsArgumentBuffersTier2");
}

id objc_msgSend_supportsDynamicLibraries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsDynamicLibraries");
}

id objc_msgSend_supportsFamily_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsFamily:");
}

id objc_msgSend_supportsFileFormatV2(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsFileFormatV2");
}

id objc_msgSend_supportsFunctionPointers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsFunctionPointers");
}

id objc_msgSend_supportsFunctionPointersFromRender(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsFunctionPointersFromRender");
}

id objc_msgSend_supportsGlobalVariableRelocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsGlobalVariableRelocation");
}

id objc_msgSend_supportsGlobalVariableRelocationCompute(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsGlobalVariableRelocationCompute");
}

id objc_msgSend_supportsGlobalVariableRelocationRender(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsGlobalVariableRelocationRender");
}

id objc_msgSend_supportsImageBlocks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsImageBlocks");
}

id objc_msgSend_supportsLayeredRendering(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsLayeredRendering");
}

id objc_msgSend_supportsMemorylessRenderTargets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsMemorylessRenderTargets");
}

id objc_msgSend_supportsRaytracing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsRaytracing");
}

id objc_msgSend_supportsRenderDynamicLibraries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsRenderDynamicLibraries");
}

id objc_msgSend_supportsTLS(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsTLS");
}

id objc_msgSend_supportsTessellation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsTessellation");
}

id objc_msgSend_swizzle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "swizzle");
}

id objc_msgSend_swizzleKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "swizzleKey");
}

id objc_msgSend_tAddressMode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tAddressMode");
}

id objc_msgSend_tagType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tagType");
}

id objc_msgSend_tags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tags");
}

id objc_msgSend_targetDeviceArchitecture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "targetDeviceArchitecture");
}

id objc_msgSend_tearDown(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tearDown");
}

id objc_msgSend_temporalScalerForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "temporalScalerForKey:");
}

id objc_msgSend_temporaryDirectory(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "temporaryDirectory");
}

id objc_msgSend_terminateProcess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "terminateProcess");
}

id objc_msgSend_texture(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "texture");
}

id objc_msgSend_texture2DDescriptorWithPixelFormat_width_height_mipmapped_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:");
}

id objc_msgSend_textureDataType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "textureDataType");
}

id objc_msgSend_textureForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "textureForKey:");
}

id objc_msgSend_textureType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "textureType");
}

id objc_msgSend_threadExecutionWidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "threadExecutionWidth");
}

id objc_msgSend_threadgroupMemoryAlignment(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "threadgroupMemoryAlignment");
}

id objc_msgSend_threadgroupMemoryDataSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "threadgroupMemoryDataSize");
}

id objc_msgSend_threadgroupsPerGrid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "threadgroupsPerGrid");
}

id objc_msgSend_threadsPerGrid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "threadsPerGrid");
}

id objc_msgSend_threadsPerMeshThreadgroup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "threadsPerMeshThreadgroup");
}

id objc_msgSend_threadsPerObjectThreadgroup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "threadsPerObjectThreadgroup");
}

id objc_msgSend_threadsPerThreadgroup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "threadsPerThreadgroup");
}

id objc_msgSend_tileBindings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tileBindings");
}

id objc_msgSend_tileBuffers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tileBuffers");
}

id objc_msgSend_tileFunction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tileFunction");
}

id objc_msgSend_tileFunctionHandleWithFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tileFunctionHandleWithFunction:");
}

id objc_msgSend_tileHeight(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tileHeight");
}

id objc_msgSend_tileSizeWithSparsePageSize_textureType_pixelFormat_sampleCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tileSizeWithSparsePageSize:textureType:pixelFormat:sampleCount:");
}

id objc_msgSend_tileWidth(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tileWidth");
}

id objc_msgSend_timeBaseDenominator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeBaseDenominator");
}

id objc_msgSend_timeBaseNumerator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeBaseNumerator");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timeout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeout");
}

id objc_msgSend_timestamps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timestamps");
}

id objc_msgSend_timing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timing");
}

id objc_msgSend_toArray(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "toArray");
}

id objc_msgSend_toDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "toDictionary");
}

id objc_msgSend_toDouble(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "toDouble");
}

id objc_msgSend_toString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "toString");
}

id objc_msgSend_traceBufferIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "traceBufferIndex");
}

id objc_msgSend_traceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "traceName");
}

id objc_msgSend_tracingDelegate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tracingDelegate");
}

id objc_msgSend_transform(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transform");
}

id objc_msgSend_transport(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transport");
}

id objc_msgSend_tryCancel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tryCancel");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "type");
}

id objc_msgSend_uint32ForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uint32ForKey:");
}

id objc_msgSend_uint64ForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uint64ForKey:");
}

id objc_msgSend_unarchivedGPUTimelineData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedGPUTimelineData");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_unarchivedShaderProfilerData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedShaderProfilerData");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifier");
}

id objc_msgSend_uniqueIdentifierForComputePipelineAtIndex_inIndirectArgumentBuffer_atOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForComputePipelineAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_uniqueIdentifierForIndirectCommandBufferAtIndex_inIndirectArgumentBuffer_atOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForIndirectCommandBufferAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_uniqueIdentifierForInstanceAccelerationStructureAtIndex_inIndirectArgumentBuffer_atOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForInstanceAccelerationStructureAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_uniqueIdentifierForIntersectionFunctionTableAtIndex_inIndirectArgumentBuffer_atOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForIntersectionFunctionTableAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_uniqueIdentifierForPrimitiveAccelerationStructureAtIndex_inIndirectArgumentBuffer_atOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForPrimitiveAccelerationStructureAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_uniqueIdentifierForRenderPipelineAtIndex_inIndirectArgumentBuffer_atOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForRenderPipelineAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_uniqueIdentifierForSamplerAtIndex_inIndirectArgumentBuffer_atOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForSamplerAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_uniqueIdentifierForTextureAtIndex_inIndirectArgumentBuffer_atOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForTextureAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_uniqueIdentifierForVisibleFunctionTableAtIndex_inIndirectArgumentBuffer_atOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uniqueIdentifierForVisibleFunctionTableAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unlock");
}

id objc_msgSend_unmapShaderSampleBuffer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unmapShaderSampleBuffer");
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedCharValue");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongValue");
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedShortValue");
}

id objc_msgSend_unusedResourceKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unusedResourceKeys");
}

id objc_msgSend_updateFence_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateFence:");
}

id objc_msgSend_updateFence_afterStages_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateFence:afterStages:");
}

id objc_msgSend_updateTextureMapping_mode_indirectBuffer_indirectBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTextureMapping:mode:indirectBuffer:indirectBufferOffset:");
}

id objc_msgSend_updateTextureMapping_mode_region_mipLevel_slice_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTextureMapping:mode:region:mipLevel:slice:");
}

id objc_msgSend_updateTextureMappings_mode_regions_mipLevels_slices_numRegions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTextureMappings:mode:regions:mipLevels:slices:numRegions:");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uppercaseString");
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "url");
}

id objc_msgSend_usage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usage");
}

id objc_msgSend_uscSamples(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uscSamples");
}

id objc_msgSend_useHeap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useHeap:");
}

id objc_msgSend_useHeap_stages_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useHeap:stages:");
}

id objc_msgSend_useHeaps_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useHeaps:count:");
}

id objc_msgSend_useHeaps_count_stages_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useHeaps:count:stages:");
}

id objc_msgSend_useResidencySet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useResidencySet:");
}

id objc_msgSend_useResidencySets_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useResidencySets:count:");
}

id objc_msgSend_useResource_usage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useResource:usage:");
}

id objc_msgSend_useResource_usage_stages_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useResource:usage:stages:");
}

id objc_msgSend_useResources_count_usage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useResources:count:usage:");
}

id objc_msgSend_useResources_count_usage_stages_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useResources:count:usage:stages:");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userInfo");
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uuid");
}

id objc_msgSend_validate_width_height_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validate:width:height:");
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForKeyPath:");
}

id objc_msgSend_valueWithObject_inContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueWithObject:inContext:");
}

id objc_msgSend_valueWithPointer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueWithPointer:");
}

id objc_msgSend_vendorName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vendorName");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "version");
}

id objc_msgSend_versionCombined(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "versionCombined");
}

id objc_msgSend_vertexBindings(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vertexBindings");
}

id objc_msgSend_vertexBuffers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vertexBuffers");
}

id objc_msgSend_vertexCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vertexCount");
}

id objc_msgSend_vertexDescriptor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vertexDescriptor");
}

id objc_msgSend_vertexFunction(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vertexFunction");
}

id objc_msgSend_vertexFunctionHandleWithFunction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vertexFunctionHandleWithFunction:");
}

id objc_msgSend_vertexIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vertexIDs");
}

id objc_msgSend_vertexLinkedFunctions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vertexLinkedFunctions");
}

id objc_msgSend_vertexPreloadedLibraries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vertexPreloadedLibraries");
}

id objc_msgSend_vertexStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vertexStart");
}

id objc_msgSend_vertexTiming(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vertexTiming");
}

id objc_msgSend_verticalLogicalCoordinatesAtPhysicalTileBoundaries(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "verticalLogicalCoordinatesAtPhysicalTileBoundaries");
}

id objc_msgSend_verticalSampleStorage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "verticalSampleStorage");
}

id objc_msgSend_virtualAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "virtualAddress");
}

id objc_msgSend_virtualAddressForBufferAtIndex_inIndirectArgumentBuffer_atOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "virtualAddressForBufferAtIndex:inIndirectArgumentBuffer:atOffset:");
}

id objc_msgSend_visibleFunctionTableForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "visibleFunctionTableForKey:");
}

id objc_msgSend_vmBuffer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vmBuffer");
}

id objc_msgSend_wait(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wait");
}

id objc_msgSend_waitForCompletion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForCompletion");
}

id objc_msgSend_waitForEvent_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForEvent:value:");
}

id objc_msgSend_waitForFence_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForFence:");
}

id objc_msgSend_waitForFence_beforeStages_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForFence:beforeStages:");
}

id objc_msgSend_waitForProgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitForProgress:");
}

id objc_msgSend_waitUntilAllOperationsAreFinished(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitUntilAllOperationsAreFinished");
}

id objc_msgSend_waitUntilCapacity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitUntilCapacity");
}

id objc_msgSend_waitUntilComplete(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitUntilComplete");
}

id objc_msgSend_waitUntilCompleted(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitUntilCompleted");
}

id objc_msgSend_waitUntilDownloadCapacity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitUntilDownloadCapacity");
}

id objc_msgSend_waitUntilFinished(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitUntilFinished");
}

id objc_msgSend_waitUntilResolved(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitUntilResolved");
}

id objc_msgSend_waitUntilScheduled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waitUntilScheduled");
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "whitespaceAndNewlineCharacterSet");
}

id objc_msgSend_width(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "width");
}

id objc_msgSend_willChangeValueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "willChangeValueForKey:");
}

id objc_msgSend_windowProperties(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "windowProperties");
}

id objc_msgSend_windowRect(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "windowRect");
}

id objc_msgSend_wrapLinear_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wrapLinear:");
}

id objc_msgSend_writeAccelerationStructureSerializationData_toBuffer_offset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeAccelerationStructureSerializationData:toBuffer:offset:");
}

id objc_msgSend_writeAccelerationStructureTraversalDepth_toBuffer_offset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeAccelerationStructureTraversalDepth:toBuffer:offset:");
}

id objc_msgSend_writeCompactedAccelerationStructureSize_toBuffer_offset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeCompactedAccelerationStructureSize:toBuffer:offset:");
}

id objc_msgSend_writeCompactedAccelerationStructureSize_toBuffer_offset_sizeDataType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeCompactedAccelerationStructureSize:toBuffer:offset:sizeDataType:");
}

id objc_msgSend_writeData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeData:");
}

id objc_msgSend_writeDeserializedAccelerationStructureSize_serializedOffset_toBuffer_sizeBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeDeserializedAccelerationStructureSize:serializedOffset:toBuffer:sizeBufferOffset:");
}

id objc_msgSend_writeDeserializedPrimitiveAccelerationStructureSizes_serializedOffset_toBuffer_sizesBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeDeserializedPrimitiveAccelerationStructureSizes:serializedOffset:toBuffer:sizesBufferOffset:");
}

id objc_msgSend_writeGPUTimelineSerializedData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeGPUTimelineSerializedData");
}

id objc_msgSend_writeGenericBVHStructureOfAccelerationStructure_into_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeGenericBVHStructureOfAccelerationStructure:into:");
}

id objc_msgSend_writeGenericBVHStructureSizesOfAccelerationStructure_into_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeGenericBVHStructureSizesOfAccelerationStructure:into:");
}

id objc_msgSend_writeSerializedAccelerationStructureSize_toBuffer_sizeBufferOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeSerializedAccelerationStructureSize:toBuffer:sizeBufferOffset:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_writeToFile_atomically_encoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToFile:atomically:encoding:error:");
}

id objc_msgSend_writeToFile_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToFile:options:error:");
}

id objc_msgSend_writeToURL_atomically_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToURL:atomically:");
}

id objc_msgSend_writeToURL_atomically_encoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToURL:atomically:encoding:error:");
}

id objc_msgSend_writeToURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToURL:error:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToURL:options:error:");
}

