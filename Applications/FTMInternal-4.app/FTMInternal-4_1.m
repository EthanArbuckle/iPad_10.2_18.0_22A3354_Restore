uint64_t sub_10014EEA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  char v59;
  _BYTE v60[7];
  _BYTE v61[7];
  char v62;
  _BYTE v63[7];
  char v64;
  _BYTE v65[7];
  char v66;
  _BYTE v67[7];
  char v68;

  v6 = LocalizedStringKey.init(stringLiteral:)(0x7475626972747441, 0xEE00656D614E2065);
  v7 = Text.init(_:tableName:bundle:comment:)(v6);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = static Color.blue.getter(v7, v8);
  v15 = Text.foregroundColor(_:)(v14, v7, v9, v13, v11);
  v55 = v16;
  v56 = v15;
  v18 = v17;
  v57 = v19;
  swift_release(v14);
  v53 = v18 & 1;
  sub_10014BE2C(v7, v9, v13);
  v20 = swift_bridgeObjectRelease(v11);
  v54 = static Edge.Set.leading.getter(v20);
  v21 = EdgeInsets.init(_all:)(10.0);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v58[0] = a1;
  v58[1] = a2;
  v28 = sub_10014654C();
  swift_bridgeObjectRetain(a2);
  v29 = Text.init<A>(_:)(v58, &type metadata for String, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34 & 1;
  v36 = static Color.gray.getter(v29, v30);
  v37 = Text.foregroundColor(_:)(v36, v29, v31, v35, v33);
  v39 = v38;
  LOBYTE(v14) = v40;
  v42 = v41;
  swift_release(v36);
  sub_10014BE2C(v29, v31, v35);
  v43 = swift_bridgeObjectRelease(v33);
  LOBYTE(v33) = static Edge.Set.trailing.getter(v43);
  v44 = EdgeInsets.init(_all:)(10.0);
  v68 = v53;
  v66 = 0;
  v64 = 1;
  v62 = v14 & 1;
  v59 = 0;
  *(_DWORD *)(a3 + 17) = v58[0];
  *(_DWORD *)(a3 + 20) = *(_DWORD *)((char *)v58 + 3);
  *(_DWORD *)(a3 + 33) = *(_DWORD *)v67;
  *(_DWORD *)(a3 + 36) = *(_DWORD *)&v67[3];
  v45 = *(_DWORD *)v65;
  *(_DWORD *)(a3 + 76) = *(_DWORD *)&v65[3];
  *(_DWORD *)(a3 + 73) = v45;
  LOBYTE(v45) = v64;
  v46 = *(_DWORD *)v63;
  *(_DWORD *)(a3 + 92) = *(_DWORD *)&v63[3];
  *(_DWORD *)(a3 + 89) = v46;
  v47 = *(_DWORD *)v61;
  *(_DWORD *)(a3 + 116) = *(_DWORD *)&v61[3];
  *(_DWORD *)(a3 + 113) = v47;
  v48 = *(_DWORD *)v60;
  *(_DWORD *)(a3 + 132) = *(_DWORD *)&v60[3];
  *(_DWORD *)(a3 + 129) = v48;
  LOBYTE(v48) = v59;
  *(_QWORD *)a3 = v56;
  *(_QWORD *)(a3 + 8) = v55;
  *(_BYTE *)(a3 + 16) = v53;
  *(_QWORD *)(a3 + 24) = v57;
  *(_BYTE *)(a3 + 32) = v54;
  *(double *)(a3 + 40) = v21;
  *(_QWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 56) = v25;
  *(_QWORD *)(a3 + 64) = v27;
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 88) = v45;
  *(_QWORD *)(a3 + 96) = v37;
  *(_QWORD *)(a3 + 104) = v39;
  *(_BYTE *)(a3 + 112) = v14 & 1;
  *(_QWORD *)(a3 + 120) = v42;
  *(_BYTE *)(a3 + 128) = v33;
  *(double *)(a3 + 136) = v44;
  *(_QWORD *)(a3 + 144) = v49;
  *(_QWORD *)(a3 + 152) = v50;
  *(_QWORD *)(a3 + 160) = v51;
  *(_BYTE *)(a3 + 168) = v48;
  sub_10014BE1C(v56, v55, v53);
  swift_bridgeObjectRetain(v57);
  sub_10014BE1C(v37, v39, v14 & 1);
  swift_bridgeObjectRetain(v42);
  sub_10014BE2C(v37, v39, v14 & 1);
  swift_bridgeObjectRelease(v42);
  sub_10014BE2C(v56, v55, v53);
  return swift_bridgeObjectRelease(v57);
}

uint64_t sub_10014F194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];
  char v58;
  _BYTE v59[7];
  _BYTE v60[7];
  char v61;
  _BYTE v62[7];
  char v63;
  _BYTE v64[7];
  char v65;
  _BYTE v66[7];
  char v67;

  v4 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000017, 0x80000001002113C0);
  v5 = Text.init(_:tableName:bundle:comment:)(v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = static Color.blue.getter(v5, v6);
  v13 = Text.foregroundColor(_:)(v12, v5, v7, v11, v9);
  v54 = v14;
  v55 = v13;
  v16 = v15;
  v56 = v17;
  swift_release(v12);
  v52 = v16 & 1;
  sub_10014BE2C(v5, v7, v11);
  v18 = swift_bridgeObjectRelease(v9);
  v53 = static Edge.Set.leading.getter(v18);
  v19 = EdgeInsets.init(_all:)(10.0);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v26 = *(_QWORD *)(a1 + 104);
  v57[0] = *(_QWORD *)(a1 + 96);
  v57[1] = v26;
  v27 = sub_10014654C();
  swift_bridgeObjectRetain(v26);
  v28 = Text.init<A>(_:)(v57, &type metadata for String, v27);
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  v35 = static Color.gray.getter(v28, v29);
  v36 = Text.foregroundColor(_:)(v35, v28, v30, v34, v32);
  v38 = v37;
  LOBYTE(v12) = v39;
  v41 = v40;
  swift_release(v35);
  sub_10014BE2C(v28, v30, v34);
  v42 = swift_bridgeObjectRelease(v32);
  LOBYTE(v30) = static Edge.Set.trailing.getter(v42);
  v43 = EdgeInsets.init(_all:)(10.0);
  v67 = v52;
  v65 = 0;
  v63 = 1;
  v61 = v12 & 1;
  v58 = 0;
  *(_DWORD *)(a2 + 17) = v57[0];
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)v57 + 3);
  *(_DWORD *)(a2 + 33) = *(_DWORD *)v66;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)&v66[3];
  v44 = *(_DWORD *)v64;
  *(_DWORD *)(a2 + 76) = *(_DWORD *)&v64[3];
  *(_DWORD *)(a2 + 73) = v44;
  LOBYTE(v44) = v63;
  v45 = *(_DWORD *)v62;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)&v62[3];
  *(_DWORD *)(a2 + 89) = v45;
  v46 = *(_DWORD *)v60;
  *(_DWORD *)(a2 + 116) = *(_DWORD *)&v60[3];
  *(_DWORD *)(a2 + 113) = v46;
  v47 = *(_DWORD *)v59;
  *(_DWORD *)(a2 + 132) = *(_DWORD *)&v59[3];
  *(_DWORD *)(a2 + 129) = v47;
  LOBYTE(v47) = v58;
  *(_QWORD *)a2 = v55;
  *(_QWORD *)(a2 + 8) = v54;
  *(_BYTE *)(a2 + 16) = v52;
  *(_QWORD *)(a2 + 24) = v56;
  *(_BYTE *)(a2 + 32) = v53;
  *(double *)(a2 + 40) = v19;
  *(_QWORD *)(a2 + 48) = v21;
  *(_QWORD *)(a2 + 56) = v23;
  *(_QWORD *)(a2 + 64) = v25;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = v44;
  *(_QWORD *)(a2 + 96) = v36;
  *(_QWORD *)(a2 + 104) = v38;
  *(_BYTE *)(a2 + 112) = v12 & 1;
  *(_QWORD *)(a2 + 120) = v41;
  *(_BYTE *)(a2 + 128) = v30;
  *(double *)(a2 + 136) = v43;
  *(_QWORD *)(a2 + 144) = v48;
  *(_QWORD *)(a2 + 152) = v49;
  *(_QWORD *)(a2 + 160) = v50;
  *(_BYTE *)(a2 + 168) = v47;
  sub_10014BE1C(v55, v54, v52);
  swift_bridgeObjectRetain(v56);
  sub_10014BE1C(v36, v38, v12 & 1);
  swift_bridgeObjectRetain(v41);
  sub_10014BE2C(v36, v38, v12 & 1);
  swift_bridgeObjectRelease(v41);
  sub_10014BE2C(v55, v54, v52);
  return swift_bridgeObjectRelease(v56);
}

double sub_10014F47C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  _QWORD v21[4];
  unint64_t v22;
  _QWORD v23[3];
  BOOL v24;
  uint64_t v25;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v19);
    if (v2)
      goto LABEL_3;
LABEL_38:
    swift_bridgeObjectRelease(a1);
    v4 = (char *)_swiftEmptyArrayStorage;
    v13 = _swiftEmptyArrayStorage[2];
    if (v13)
      goto LABEL_28;
    goto LABEL_39;
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v2)
    goto LABEL_38;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    JUMPOUT(0x10014F76CLL);
  }
  v3 = 0;
  v22 = a1 & 0xC000000000000001;
  v4 = (char *)_swiftEmptyArrayStorage;
  do
  {
    if (v22)
    {
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
      v6 = v5;
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 8 * v3 + 32);
      v5 = swift_retain(v6);
    }
    v8 = *(_QWORD *)(v6 + 112);
    v7 = *(_QWORD *)(v6 + 120);
    v25 = 0;
    __chkstk_darwin(v5);
    v21[2] = &v25;
    if ((v7 & 0x1000000000000000) != 0)
      goto LABEL_26;
    if ((v7 & 0x2000000000000000) == 0)
    {
      if ((v8 & 0x1000000000000000) != 0)
      {
        switch(*(_BYTE *)(v7 + 32))
        {
          case 0:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0x20:
            goto LABEL_17;
          default:
            swift_bridgeObjectRetain(v7);
            v9 = (_BYTE *)_swift_stdlib_strtod_clocale(v7 + 32, &v25);
            if (!v9)
              goto LABEL_18;
            goto LABEL_25;
        }
      }
LABEL_26:
      swift_bridgeObjectRetain(v7);
      _StringGuts._slowWithCString<A>(_:)(&v24, sub_100153D30, v21, v8, v7, &type metadata for Bool);
      goto LABEL_19;
    }
    v23[0] = v8;
    v23[1] = v7 & 0xFFFFFFFFFFFFFFLL;
    switch((char)v8)
    {
      case 0:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
LABEL_17:
        swift_bridgeObjectRetain(v7);
        goto LABEL_18;
      default:
        swift_bridgeObjectRetain(v7);
        v9 = (_BYTE *)_swift_stdlib_strtod_clocale(v23, &v25);
        if (v9)
LABEL_25:
          v24 = *v9 == 0;
        else
LABEL_18:
          v24 = 0;
        break;
    }
LABEL_19:
    swift_release(v6);
    swift_bridgeObjectRelease(v7);
    if (v24)
    {
      v10 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_1001C6FF8(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
      v12 = *((_QWORD *)v4 + 2);
      v11 = *((_QWORD *)v4 + 3);
      if (v12 >= v11 >> 1)
        v4 = sub_1001C6FF8((char *)(v11 > 1), v12 + 1, 1, v4);
      *((_QWORD *)v4 + 2) = v12 + 1;
      *(_QWORD *)&v4[8 * v12 + 32] = v10;
    }
    ++v3;
  }
  while (v2 != v3);
  swift_bridgeObjectRelease(a1);
  v13 = *((_QWORD *)v4 + 2);
  if (!v13)
  {
LABEL_39:
    v14 = 0.0;
    goto LABEL_40;
  }
LABEL_28:
  v14 = *((double *)v4 + 4);
  v15 = v13 - 1;
  if (v15)
  {
    v16 = (double *)(v4 + 40);
    do
    {
      v17 = *v16++;
      v18 = v17;
      if (v17 < v14)
        v14 = v18;
      --v15;
    }
    while (v15);
  }
LABEL_40:
  swift_bridgeObjectRelease(v4);
  return v14;
}

uint64_t sub_10014F874@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[3];
  char v62;
  _BYTE v63[7];
  _BYTE v64[7];
  char v65;
  _BYTE v66[7];
  char v67;
  _BYTE v68[7];
  char v69;
  _BYTE v70[7];
  char v71;

  v7 = LocalizedStringKey.init(stringLiteral:)(a2, 0xE900000000000065);
  v8 = Text.init(_:tableName:bundle:comment:)(v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Color.blue.getter(v8, v9);
  v16 = Text.foregroundColor(_:)(v15, v8, v10, v14, v12);
  v58 = v17;
  v59 = v16;
  v19 = v18;
  v60 = v20;
  swift_release(v15);
  v56 = v19 & 1;
  sub_10014BE2C(v8, v10, v14);
  v21 = swift_bridgeObjectRelease(v12);
  v57 = static Edge.Set.leading.getter(v21);
  v22 = EdgeInsets.init(_all:)(10.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v29 = a3(a1);
  v61[0] = Double.description.getter(v29);
  v61[1] = v30;
  v31 = sub_10014654C();
  v32 = Text.init<A>(_:)(v61, &type metadata for String, v31);
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  v39 = static Color.gray.getter(v32, v33);
  v40 = Text.foregroundColor(_:)(v39, v32, v34, v38, v36);
  v42 = v41;
  LOBYTE(v15) = v43;
  v45 = v44;
  swift_release(v39);
  sub_10014BE2C(v32, v34, v38);
  v46 = swift_bridgeObjectRelease(v36);
  LOBYTE(v36) = static Edge.Set.trailing.getter(v46);
  v47 = EdgeInsets.init(_all:)(10.0);
  v71 = v56;
  v69 = 0;
  v67 = 1;
  v65 = v15 & 1;
  v62 = 0;
  *(_DWORD *)(a4 + 17) = v61[0];
  *(_DWORD *)(a4 + 20) = *(_DWORD *)((char *)v61 + 3);
  *(_DWORD *)(a4 + 33) = *(_DWORD *)v70;
  *(_DWORD *)(a4 + 36) = *(_DWORD *)&v70[3];
  v48 = *(_DWORD *)v68;
  *(_DWORD *)(a4 + 76) = *(_DWORD *)&v68[3];
  *(_DWORD *)(a4 + 73) = v48;
  LOBYTE(v48) = v67;
  v49 = *(_DWORD *)v66;
  *(_DWORD *)(a4 + 92) = *(_DWORD *)&v66[3];
  *(_DWORD *)(a4 + 89) = v49;
  v50 = *(_DWORD *)v64;
  *(_DWORD *)(a4 + 116) = *(_DWORD *)&v64[3];
  *(_DWORD *)(a4 + 113) = v50;
  v51 = *(_DWORD *)v63;
  *(_DWORD *)(a4 + 132) = *(_DWORD *)&v63[3];
  *(_DWORD *)(a4 + 129) = v51;
  LOBYTE(v51) = v62;
  *(_QWORD *)a4 = v59;
  *(_QWORD *)(a4 + 8) = v58;
  *(_BYTE *)(a4 + 16) = v56;
  *(_QWORD *)(a4 + 24) = v60;
  *(_BYTE *)(a4 + 32) = v57;
  *(double *)(a4 + 40) = v22;
  *(_QWORD *)(a4 + 48) = v24;
  *(_QWORD *)(a4 + 56) = v26;
  *(_QWORD *)(a4 + 64) = v28;
  *(_BYTE *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = 0;
  *(_BYTE *)(a4 + 88) = v48;
  *(_QWORD *)(a4 + 96) = v40;
  *(_QWORD *)(a4 + 104) = v42;
  *(_BYTE *)(a4 + 112) = v15 & 1;
  *(_QWORD *)(a4 + 120) = v45;
  *(_BYTE *)(a4 + 128) = v36;
  *(double *)(a4 + 136) = v47;
  *(_QWORD *)(a4 + 144) = v52;
  *(_QWORD *)(a4 + 152) = v53;
  *(_QWORD *)(a4 + 160) = v54;
  *(_BYTE *)(a4 + 168) = v51;
  sub_10014BE1C(v59, v58, v56);
  swift_bridgeObjectRetain(v60);
  sub_10014BE1C(v40, v42, v15 & 1);
  swift_bridgeObjectRetain(v45);
  sub_10014BE2C(v40, v42, v15 & 1);
  swift_bridgeObjectRelease(v45);
  sub_10014BE2C(v59, v58, v56);
  return swift_bridgeObjectRelease(v60);
}

double sub_10014FB50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  _QWORD v21[4];
  unint64_t v22;
  _QWORD v23[3];
  BOOL v24;
  uint64_t v25;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v19);
    if (v2)
      goto LABEL_3;
LABEL_38:
    swift_bridgeObjectRelease(a1);
    v4 = (char *)_swiftEmptyArrayStorage;
    v13 = _swiftEmptyArrayStorage[2];
    if (v13)
      goto LABEL_28;
    goto LABEL_39;
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v2)
    goto LABEL_38;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    JUMPOUT(0x10014FE40);
  }
  v3 = 0;
  v22 = a1 & 0xC000000000000001;
  v4 = (char *)_swiftEmptyArrayStorage;
  do
  {
    if (v22)
    {
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
      v6 = v5;
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 8 * v3 + 32);
      v5 = swift_retain(v6);
    }
    v8 = *(_QWORD *)(v6 + 112);
    v7 = *(_QWORD *)(v6 + 120);
    v25 = 0;
    __chkstk_darwin(v5);
    v21[2] = &v25;
    if ((v7 & 0x1000000000000000) != 0)
      goto LABEL_26;
    if ((v7 & 0x2000000000000000) == 0)
    {
      if ((v8 & 0x1000000000000000) != 0)
      {
        switch(*(_BYTE *)(v7 + 32))
        {
          case 0:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0x20:
            goto LABEL_17;
          default:
            swift_bridgeObjectRetain(v7);
            v9 = (_BYTE *)_swift_stdlib_strtod_clocale(v7 + 32, &v25);
            if (!v9)
              goto LABEL_18;
            goto LABEL_25;
        }
      }
LABEL_26:
      swift_bridgeObjectRetain(v7);
      _StringGuts._slowWithCString<A>(_:)(&v24, sub_100153D30, v21, v8, v7, &type metadata for Bool);
      goto LABEL_19;
    }
    v23[0] = v8;
    v23[1] = v7 & 0xFFFFFFFFFFFFFFLL;
    switch((char)v8)
    {
      case 0:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
LABEL_17:
        swift_bridgeObjectRetain(v7);
        goto LABEL_18;
      default:
        swift_bridgeObjectRetain(v7);
        v9 = (_BYTE *)_swift_stdlib_strtod_clocale(v23, &v25);
        if (v9)
LABEL_25:
          v24 = *v9 == 0;
        else
LABEL_18:
          v24 = 0;
        break;
    }
LABEL_19:
    swift_release(v6);
    swift_bridgeObjectRelease(v7);
    if (v24)
    {
      v10 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_1001C6FF8(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
      v12 = *((_QWORD *)v4 + 2);
      v11 = *((_QWORD *)v4 + 3);
      if (v12 >= v11 >> 1)
        v4 = sub_1001C6FF8((char *)(v11 > 1), v12 + 1, 1, v4);
      *((_QWORD *)v4 + 2) = v12 + 1;
      *(_QWORD *)&v4[8 * v12 + 32] = v10;
    }
    ++v3;
  }
  while (v2 != v3);
  swift_bridgeObjectRelease(a1);
  v13 = *((_QWORD *)v4 + 2);
  if (!v13)
  {
LABEL_39:
    v14 = 0.0;
    goto LABEL_40;
  }
LABEL_28:
  v14 = *((double *)v4 + 4);
  v15 = v13 - 1;
  if (v15)
  {
    v16 = (double *)(v4 + 40);
    do
    {
      v17 = *v16++;
      v18 = v17;
      if (v14 < v17)
        v14 = v18;
      --v15;
    }
    while (v15);
  }
LABEL_40:
  swift_bridgeObjectRelease(v4);
  return v14;
}

uint64_t sub_10014FF48@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  char v61;
  _BYTE v62[7];
  _BYTE v63[7];
  char v64;
  _BYTE v65[7];
  char v66;
  _BYTE v67[7];
  char v68;
  _BYTE v69[7];
  char v70;

  v4 = LocalizedStringKey.init(stringLiteral:)(0x756C615620677641, 0xE900000000000065);
  v5 = Text.init(_:tableName:bundle:comment:)(v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = static Color.blue.getter(v5, v6);
  v13 = Text.foregroundColor(_:)(v12, v5, v7, v11, v9);
  v57 = v14;
  v58 = v13;
  v16 = v15;
  v59 = v17;
  swift_release(v12);
  v55 = v16 & 1;
  sub_10014BE2C(v5, v7, v11);
  v18 = swift_bridgeObjectRelease(v9);
  v56 = static Edge.Set.leading.getter(v18);
  v19 = EdgeInsets.init(_all:)(10.0);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v26 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v27 = swift_allocObject(v26, 72, 7);
  *(_OWORD *)(v27 + 16) = xmmword_1002402A0;
  sub_10015027C(a1);
  *(_QWORD *)(v27 + 56) = &type metadata for Double;
  *(_QWORD *)(v27 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v27 + 32) = v28;
  v60[0] = String.init(format:_:)(1714564645, 0xE400000000000000, v27);
  v60[1] = v29;
  v30 = sub_10014654C();
  v31 = Text.init<A>(_:)(v60, &type metadata for String, v30);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v38 = static Color.gray.getter(v31, v32);
  v39 = Text.foregroundColor(_:)(v38, v31, v33, v37, v35);
  v41 = v40;
  LOBYTE(v12) = v42;
  v44 = v43;
  swift_release(v38);
  sub_10014BE2C(v31, v33, v37);
  v45 = swift_bridgeObjectRelease(v35);
  LOBYTE(v33) = static Edge.Set.trailing.getter(v45);
  v46 = EdgeInsets.init(_all:)(10.0);
  v70 = v55;
  v68 = 0;
  v66 = 1;
  v64 = v12 & 1;
  v61 = 0;
  *(_DWORD *)(a2 + 17) = v60[0];
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)v60 + 3);
  *(_DWORD *)(a2 + 33) = *(_DWORD *)v69;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)&v69[3];
  v47 = *(_DWORD *)v67;
  *(_DWORD *)(a2 + 76) = *(_DWORD *)&v67[3];
  *(_DWORD *)(a2 + 73) = v47;
  LOBYTE(v47) = v66;
  v48 = *(_DWORD *)v65;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)&v65[3];
  *(_DWORD *)(a2 + 89) = v48;
  v49 = *(_DWORD *)v63;
  *(_DWORD *)(a2 + 116) = *(_DWORD *)&v63[3];
  *(_DWORD *)(a2 + 113) = v49;
  v50 = *(_DWORD *)v62;
  *(_DWORD *)(a2 + 132) = *(_DWORD *)&v62[3];
  *(_DWORD *)(a2 + 129) = v50;
  LOBYTE(v50) = v61;
  *(_QWORD *)a2 = v58;
  *(_QWORD *)(a2 + 8) = v57;
  *(_BYTE *)(a2 + 16) = v55;
  *(_QWORD *)(a2 + 24) = v59;
  *(_BYTE *)(a2 + 32) = v56;
  *(double *)(a2 + 40) = v19;
  *(_QWORD *)(a2 + 48) = v21;
  *(_QWORD *)(a2 + 56) = v23;
  *(_QWORD *)(a2 + 64) = v25;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = v47;
  *(_QWORD *)(a2 + 96) = v39;
  *(_QWORD *)(a2 + 104) = v41;
  *(_BYTE *)(a2 + 112) = v12 & 1;
  *(_QWORD *)(a2 + 120) = v44;
  *(_BYTE *)(a2 + 128) = v33;
  *(double *)(a2 + 136) = v46;
  *(_QWORD *)(a2 + 144) = v51;
  *(_QWORD *)(a2 + 152) = v52;
  *(_QWORD *)(a2 + 160) = v53;
  *(_BYTE *)(a2 + 168) = v50;
  sub_10014BE1C(v58, v57, v55);
  swift_bridgeObjectRetain(v59);
  sub_10014BE1C(v39, v41, v12 & 1);
  swift_bridgeObjectRetain(v44);
  sub_10014BE2C(v39, v41, v12 & 1);
  swift_bridgeObjectRelease(v44);
  sub_10014BE2C(v58, v57, v55);
  return swift_bridgeObjectRelease(v59);
}

uint64_t sub_10015027C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[3];
  BOOL v31;
  uint64_t v32;

  v1 = result;
  if ((unint64_t)result >> 62)
  {
    if (result < 0)
      v25 = result;
    else
      v25 = result & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(result);
    v26 = _CocoaArrayWrapper.endIndex.getter(v25);
    result = swift_bridgeObjectRelease(v1);
    if (v26 <= 0)
      return result;
    swift_bridgeObjectRetain(v1);
    result = _CocoaArrayWrapper.endIndex.getter(v25);
    if (!result)
    {
      swift_bridgeObjectRelease(v1);
      v4 = (char *)_swiftEmptyArrayStorage;
      v17 = _swiftEmptyArrayStorage[2];
      if (!v17)
        return swift_bridgeObjectRelease(v4);
LABEL_29:
      if (v17 == 1)
      {
        v18 = 0;
        v19 = 0.0;
      }
      else
      {
        v18 = v17 & 0x7FFFFFFFFFFFFFFELL;
        v20 = (double *)(v4 + 40);
        v19 = 0.0;
        v21 = v17 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v19 = v19 + *(v20 - 1) + *v20;
          v20 += 2;
          v21 -= 2;
        }
        while (v21);
        if (v17 == v18)
          return swift_bridgeObjectRelease(v4);
      }
      v22 = v17 - v18;
      v23 = (double *)&v4[8 * v18 + 32];
      do
      {
        v24 = *v23++;
        v19 = v19 + v24;
        --v22;
      }
      while (v22);
      return swift_bridgeObjectRelease(v4);
    }
    if (result < 1)
    {
      __break(1u);
      return result;
    }
    v28 = v26;
  }
  else
  {
    v2 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
      return result;
    swift_bridgeObjectRetain(result);
    v28 = v2;
    result = v2;
  }
  v3 = 0;
  v29 = v1 & 0xC000000000000001;
  v4 = (char *)_swiftEmptyArrayStorage;
  v5 = result;
  do
  {
    if (v29)
    {
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1);
      v7 = v6;
    }
    else
    {
      v7 = *(_QWORD *)(v1 + 8 * v3 + 32);
      v6 = swift_retain(v7);
    }
    v8 = *(_QWORD *)(v7 + 112);
    v9 = *(_QWORD *)(v7 + 120);
    v32 = 0;
    __chkstk_darwin(v6);
    v27[2] = &v32;
    if ((v9 & 0x1000000000000000) != 0)
      goto LABEL_27;
    if ((v9 & 0x2000000000000000) == 0)
    {
      if ((v8 & 0x1000000000000000) != 0)
      {
        switch(*(_BYTE *)(v9 + 32))
        {
          case 0:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0x20:
            goto LABEL_16;
          default:
            swift_bridgeObjectRetain(v9);
            v10 = (_QWORD *)(v9 + 32);
            goto LABEL_24;
        }
      }
LABEL_27:
      swift_bridgeObjectRetain(v9);
      _StringGuts._slowWithCString<A>(_:)(&v31, sub_100153074, v27, v8, v9, &type metadata for Bool);
      swift_release(v7);
      swift_bridgeObjectRelease(v9);
      v12 = v5;
      goto LABEL_18;
    }
    v30[0] = v8;
    v30[1] = v9 & 0xFFFFFFFFFFFFFFLL;
    switch((char)v8)
    {
      case 0:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
LABEL_16:
        swift_bridgeObjectRetain(v9);
        v11 = 0;
        v12 = v5;
        break;
      default:
        swift_bridgeObjectRetain(v9);
        v10 = v30;
LABEL_24:
        v16 = (_BYTE *)_swift_stdlib_strtod_clocale(v10, &v32);
        v12 = v5;
        if (v16)
          v11 = *v16 == 0;
        else
          v11 = 0;
        break;
    }
    v31 = v11;
    swift_release(v7);
    swift_bridgeObjectRelease(v9);
LABEL_18:
    if (v31)
    {
      v13 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_1001C6FF8(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
      v15 = *((_QWORD *)v4 + 2);
      v14 = *((_QWORD *)v4 + 3);
      if (v15 >= v14 >> 1)
        v4 = sub_1001C6FF8((char *)(v14 > 1), v15 + 1, 1, v4);
      *((_QWORD *)v4 + 2) = v15 + 1;
      *(_QWORD *)&v4[8 * v15 + 32] = v13;
    }
    ++v3;
  }
  while (v12 != v3);
  swift_bridgeObjectRelease(v1);
  v17 = *((_QWORD *)v4 + 2);
  if (v17)
    goto LABEL_29;
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10015070C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[3];
  _QWORD v18[4];

  v4 = type metadata accessor for FTMAllMetricsModel(0);
  v5 = sub_100146004(&qword_1002B3FC8, type metadata accessor for FTMAllMetricsModel, (uint64_t)&unk_100242840);
  v6 = EnvironmentObject.init()(v4, v5);
  v8 = v7;
  memset(v17, 0, sizeof(v17));
  v9 = sub_100146438(&qword_1002B4008);
  State.init(wrappedValue:)(v18, v17, v9, v10);
  v11 = *a1;
  if (*a1)
  {
    v12 = v18[0];
    v13 = v18[1];
    v14 = v18[2];
    v15 = v18[3];
    swift_retain(v11);
    result = static ObservableObject.environmentStore.getter(v4, v5);
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 1;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v8;
    *(_QWORD *)(a2 + 32) = v12;
    *(_QWORD *)(a2 + 40) = v13;
    *(_QWORD *)(a2 + 48) = v14;
    *(_QWORD *)(a2 + 56) = v15;
    *(_QWORD *)(a2 + 64) = result;
    *(_QWORD *)(a2 + 72) = v11;
    *(_QWORD *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 88) = 1;
  }
  else
  {
    result = EnvironmentObject.error()(0, a1[1], v4, v5);
    __break(1u);
  }
  return result;
}

uint64_t sub_10015081C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  double *v53;
  double v54;
  double v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t OpaqueTypeConformance2;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD v99[4];
  _QWORD v100[2];
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _QWORD v105[4];

  v2 = v1;
  v94 = a1;
  v3 = sub_100146438(&qword_1002B4030);
  __chkstk_darwin(v3);
  v89 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100146438(&qword_1002B4038);
  v88 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v6 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100146438(&qword_1002B4040);
  v92 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v91 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002B3A80 != -1)
    swift_once(&qword_1002B3A80, sub_100184F00);
  v8 = (void *)qword_1002BF070;
  v9 = *v1;
  if (!*v1)
  {
LABEL_82:
    v83 = v2[1];
    v84 = type metadata accessor for FTMAllMetricsModel(0);
    v85 = sub_100146004(&qword_1002B3FC8, type metadata accessor for FTMAllMetricsModel, (uint64_t)&unk_100242840);
    v86 = v8;
    EnvironmentObject.error()(0, v83, v84, v85);
    __break(1u);
    JUMPOUT(0x100151230);
  }
  v10 = (id)qword_1002BF070;
  v11 = swift_retain(v9);
  v12 = (uint64_t)sub_100189A6C(v11);

  swift_release(v9);
  v97 = v1;
  v98 = v12;
  v96 = v6;
  v95 = v9;
  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0)
      v34 = v12;
    else
      v34 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v13 = _CocoaArrayWrapper.endIndex.getter(v34);
    if (v13)
      goto LABEL_6;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    v16 = (char *)_swiftEmptyArrayStorage;
    v28 = _swiftEmptyArrayStorage[2];
    if (v28)
      goto LABEL_32;
    goto LABEL_43;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v12);
  if (!v13)
    goto LABEL_42;
LABEL_6:
  if (v13 < 1)
  {
LABEL_81:
    __break(1u);
    __break(1u);
    goto LABEL_82;
  }
  v14 = 0;
  v15 = v12 & 0xC000000000000001;
  v16 = (char *)_swiftEmptyArrayStorage;
  v17 = v13;
  do
  {
    if (v15)
    {
      v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v12);
      v19 = v18;
    }
    else
    {
      v19 = *(_QWORD *)(v12 + 8 * v14 + 32);
      v18 = swift_retain(v19);
    }
    v20 = *(_QWORD *)(v19 + 112);
    v21 = *(_QWORD *)(v19 + 120);
    v99[0] = 0;
    __chkstk_darwin(v18);
    *(&v87 - 2) = (uint64_t)v99;
    if ((v21 & 0x1000000000000000) != 0)
      goto LABEL_30;
    if ((v21 & 0x2000000000000000) == 0)
    {
      if ((v20 & 0x1000000000000000) != 0)
      {
        switch(*(_BYTE *)(v21 + 32))
        {
          case 0:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0x20:
            goto LABEL_19;
          default:
            swift_bridgeObjectRetain(v21);
            v22 = (__int128 *)(v21 + 32);
            goto LABEL_27;
        }
      }
LABEL_30:
      swift_bridgeObjectRetain(v21);
      _StringGuts._slowWithCString<A>(_:)(v105, sub_100153D30, &v87 - 4, v20, v21, &type metadata for Bool);
      swift_release(v19);
      swift_bridgeObjectRelease(v21);
      v13 = v17;
      goto LABEL_21;
    }
    *(_QWORD *)&v102 = v20;
    *((_QWORD *)&v102 + 1) = v21 & 0xFFFFFFFFFFFFFFLL;
    switch((char)v20)
    {
      case 0:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
LABEL_19:
        swift_bridgeObjectRetain(v21);
        v23 = 0;
        v13 = v17;
        break;
      default:
        swift_bridgeObjectRetain(v21);
        v22 = &v102;
LABEL_27:
        v27 = (_BYTE *)_swift_stdlib_strtod_clocale(v22, v99);
        v13 = v17;
        if (v27)
          v23 = *v27 == 0;
        else
          v23 = 0;
        break;
    }
    LOBYTE(v105[0]) = v23;
    swift_release(v19);
    swift_bridgeObjectRelease(v21);
LABEL_21:
    v12 = v98;
    if ((v105[0] & 1) != 0)
    {
      v24 = v99[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v16 = sub_1001C6FF8(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
      v26 = *((_QWORD *)v16 + 2);
      v25 = *((_QWORD *)v16 + 3);
      if (v26 >= v25 >> 1)
        v16 = sub_1001C6FF8((char *)(v25 > 1), v26 + 1, 1, v16);
      *((_QWORD *)v16 + 2) = v26 + 1;
      *(_QWORD *)&v16[8 * v26 + 32] = v24;
    }
    ++v14;
  }
  while (v13 != v14);
  swift_bridgeObjectRelease(v12);
  v2 = v97;
  v6 = v96;
  v9 = v95;
  v28 = *((_QWORD *)v16 + 2);
  if (!v28)
  {
LABEL_43:
    v29 = 0.0;
    goto LABEL_44;
  }
LABEL_32:
  v29 = *((double *)v16 + 4);
  v30 = v28 - 1;
  if (v30)
  {
    v31 = (double *)(v16 + 40);
    do
    {
      v32 = *v31++;
      v33 = v32;
      if (v32 < v29)
        v29 = v33;
      --v30;
    }
    while (v30);
  }
LABEL_44:
  swift_bridgeObjectRelease(v16);
  if (!v13)
  {
    v37 = (char *)_swiftEmptyArrayStorage;
    v50 = _swiftEmptyArrayStorage[2];
    if (v50)
      goto LABEL_70;
    goto LABEL_77;
  }
  v35 = v12 & 0xC000000000000001;
  swift_bridgeObjectRetain(v12);
  v36 = 0;
  v37 = (char *)_swiftEmptyArrayStorage;
  v38 = v13;
  while (2)
  {
    if (v35)
    {
      v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v12);
      v40 = v39;
    }
    else
    {
      v40 = *(_QWORD *)(v12 + 8 * v36 + 32);
      v39 = swift_retain(v40);
    }
    v41 = *(_QWORD *)(v40 + 112);
    v42 = *(_QWORD *)(v40 + 120);
    v99[0] = 0;
    __chkstk_darwin(v39);
    *(&v87 - 2) = (uint64_t)v99;
    if ((v42 & 0x1000000000000000) != 0)
    {
LABEL_68:
      swift_bridgeObjectRetain(v42);
      _StringGuts._slowWithCString<A>(_:)(v105, sub_100153D30, &v87 - 4, v41, v42, &type metadata for Bool);
      swift_release(v40);
      swift_bridgeObjectRelease(v42);
      v45 = v38;
    }
    else
    {
      if ((v42 & 0x2000000000000000) == 0)
      {
        if ((v41 & 0x1000000000000000) != 0)
        {
          switch(*(_BYTE *)(v42 + 32))
          {
            case 0:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0x20:
              goto LABEL_57;
            default:
              swift_bridgeObjectRetain(v42);
              v43 = (__int128 *)(v42 + 32);
              goto LABEL_65;
          }
        }
        goto LABEL_68;
      }
      *(_QWORD *)&v102 = v41;
      *((_QWORD *)&v102 + 1) = v42 & 0xFFFFFFFFFFFFFFLL;
      switch((char)v41)
      {
        case 0:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
LABEL_57:
          swift_bridgeObjectRetain(v42);
          v44 = 0;
          v45 = v38;
          break;
        default:
          swift_bridgeObjectRetain(v42);
          v43 = &v102;
LABEL_65:
          v49 = (_BYTE *)_swift_stdlib_strtod_clocale(v43, v99);
          v45 = v38;
          if (v49)
            v44 = *v49 == 0;
          else
            v44 = 0;
          break;
      }
      LOBYTE(v105[0]) = v44;
      swift_release(v40);
      swift_bridgeObjectRelease(v42);
    }
    v12 = v98;
    if ((v105[0] & 1) != 0)
    {
      v46 = v99[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
        v37 = sub_1001C6FF8(0, *((_QWORD *)v37 + 2) + 1, 1, v37);
      v48 = *((_QWORD *)v37 + 2);
      v47 = *((_QWORD *)v37 + 3);
      if (v48 >= v47 >> 1)
        v37 = sub_1001C6FF8((char *)(v47 > 1), v48 + 1, 1, v37);
      *((_QWORD *)v37 + 2) = v48 + 1;
      *(_QWORD *)&v37[8 * v48 + 32] = v46;
    }
    if (v45 != ++v36)
      continue;
    break;
  }
  swift_bridgeObjectRelease(v12);
  v2 = v97;
  v6 = v96;
  v9 = v95;
  v50 = *((_QWORD *)v37 + 2);
  if (!v50)
  {
LABEL_77:
    v51 = 0.0;
    goto LABEL_78;
  }
LABEL_70:
  v51 = *((double *)v37 + 4);
  v52 = v50 - 1;
  if (v52)
  {
    v53 = (double *)(v37 + 40);
    do
    {
      v54 = *v53++;
      v55 = v54;
      if (v51 < v54)
        v51 = v55;
      --v52;
    }
    while (v52);
  }
LABEL_78:
  swift_bridgeObjectRelease(v37);
  v101 = v12;
  v56 = *((_OWORD *)v2 + 2);
  v102 = *((_OWORD *)v2 + 1);
  v103 = v56;
  sub_10014BC64((uint64_t)&v102, (uint64_t)v105, &qword_1002B4008);
  sub_10014BC64((uint64_t)&v103 + 8, (uint64_t)&v104, &qword_1002B4048);
  v57 = swift_allocObject(&unk_100262E18, 80, 7);
  v58 = *((_OWORD *)v2 + 1);
  *(_OWORD *)(v57 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v57 + 32) = v58;
  *(_OWORD *)(v57 + 48) = *((_OWORD *)v2 + 2);
  *(double *)(v57 + 64) = v29;
  *(double *)(v57 + 72) = v51;
  swift_retain(v9);
  sub_10014BBB4((uint64_t)v105);
  sub_10014AED0(&v104);
  v59 = sub_100146438(&qword_1002B7FB0);
  v8 = (void *)sub_100146438(&qword_1002B4050);
  v60 = sub_10014BEC0(&qword_1002B4058, &qword_1002B7FB0, (uint64_t)&protocol conformance descriptor for [A]);
  v61 = v9;
  v62 = sub_10015350C();
  v63 = sub_100146004(&qword_1002B40C8, type metadata accessor for FTMAllMetricsModel, (uint64_t)&unk_100242808);
  Chart.init<A, B>(_:content:)(&v101, sub_100153500, v57, v59, v8, v60, v62, v63);
  if (v29 > v51)
  {
    __break(1u);
    goto LABEL_81;
  }
  *(double *)v100 = v29;
  *(double *)&v100[1] = v51;
  v64 = type metadata accessor for ScaleType(0);
  v65 = (uint64_t)v89;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v89, 1, 1, v64);
  v66 = sub_100146438(&qword_1002B40D0);
  v67 = sub_10014BEC0(&qword_1002B40D8, &qword_1002B4038, (uint64_t)&protocol conformance descriptor for Chart<A>);
  v68 = sub_10015381C();
  v69 = v91;
  v70 = v90;
  View.chartYScale<A>(domain:type:)(v100, v65, v90, v66, v67, v68);
  sub_10014BDE0(v65, &qword_1002B4030);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v6, v70);
  v71 = (_OWORD *)swift_allocObject(&unk_100262E40, 64, 7);
  v72 = *((_OWORD *)v2 + 1);
  v71[1] = *(_OWORD *)v2;
  v71[2] = v72;
  v71[3] = *((_OWORD *)v2 + 2);
  swift_retain(v61);
  sub_10014BBB4((uint64_t)v105);
  v73 = sub_10014AED0(&v104);
  v74 = static Alignment.center.getter(v73);
  v76 = v75;
  v77 = sub_100146438(&qword_1002B40E8);
  v99[0] = v70;
  v99[1] = v66;
  v99[2] = v67;
  v99[3] = v68;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v99, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
  v79 = sub_10014BEC0(&qword_1002B40F0, &qword_1002B40E8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
  v80 = v93;
  View.chartOverlay<A>(alignment:content:)(v74, v76, sub_100153880, v71, v93, v77, OpaqueTypeConformance2, v79);
  v81 = swift_release(v71);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v92 + 8))(v69, v80, v81);
}

uint64_t sub_100151440@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t OpaqueTypeConformance2;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  void *object;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t *v103;
  double v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  Swift::String v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t);
  uint64_t result;
  _BYTE *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double *v150;
  uint64_t *v151;
  _QWORD v152[2];
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  double v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  double v199;
  __int128 v200;
  __int128 v201;

  v189 = sub_100146438(&qword_1002B4160);
  __chkstk_darwin(v189);
  v188 = (uint64_t)v152 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100146438(&qword_1002B4168);
  __chkstk_darwin(v11);
  v163 = (char *)v152 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for Date(0);
  v165 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v164 = (char *)v152 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100146438(&qword_1002B4170);
  v174 = *(_QWORD *)(v175 - 8);
  v14 = __chkstk_darwin(v175);
  v172 = (char *)v152 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v193 = (char *)v152 - v16;
  v170 = type metadata accessor for LineMark(0);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v191 = (char *)v152 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_100146438(&qword_1002B40A8);
  v173 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v171 = (char *)v152 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_100146438(&qword_1002B40A0);
  v179 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v176 = (char *)v152 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_100146438(&qword_1002B4090);
  v182 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v181 = (char *)v152 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = sub_100146438(&qword_1002B4178);
  v185 = *(_QWORD *)(v187 - 8);
  v21 = __chkstk_darwin(v187);
  v186 = (char *)v152 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v178 = (char *)v152 - v24;
  __chkstk_darwin(v23);
  v184 = (char *)v152 - v25;
  v158 = type metadata accessor for AnnotationPosition(0);
  v157 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v156 = (char *)v152 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100146438(&qword_1002B4180);
  v28 = __chkstk_darwin(v27);
  v167 = (char *)v152 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v31 = (char *)v152 - v30;
  v32 = type metadata accessor for RuleMark(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v35 = (char *)v152 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_100146438(&qword_1002B4088);
  v154 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v37 = (char *)v152 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_100146438(&qword_1002B4188);
  v38 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v153 = (char *)v152 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_100146438(&qword_1002B4080);
  v161 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v41 = (char *)v152 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100146438(&qword_1002B4070);
  v43 = __chkstk_darwin(v42);
  v168 = (uint64_t)v152 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v194 = (uint64_t)v152 - v45;
  v192 = *a1;
  v46 = *(_OWORD *)(a2 + 16);
  v47 = *(_OWORD *)(a2 + 32);
  v160 = (uint64_t *)a2;
  v200 = v46;
  v201 = v47;
  v48 = sub_100146438(&qword_1002B4158);
  State.wrappedValue.getter(&v197, v48);
  v49 = v198;
  v190 = a3;
  if (v198)
  {
    v50 = v199;
    if (a4 + -10.0 >= v199 || v199 >= a5 + 10.0)
    {
      swift_bridgeObjectRelease(v198);
      v71 = 1;
      v72 = v191;
      v73 = v194;
      v74 = v164;
      v75 = (uint64_t)v163;
      v76 = v162;
      v77 = v161;
      v70 = v159;
    }
    else
    {
      v152[1] = v197;
      v51 = LocalizedStringKey.init(stringLiteral:)(0x65756C6156, 0xE500000000000000);
      v53 = v52;
      v55 = v54;
      *(double *)&v200 = v50;
      static PlottableValue.value(_:_:)(v51);
      swift_bridgeObjectRelease(v55);
      swift_bridgeObjectRelease(v53);
      v56 = RuleMark.init<A>(xStart:xEnd:y:)(0, 1, 0, 1, v31, &type metadata for Double, &protocol witness table for Double);
      v58 = static Color.gray.getter(v56, v57);
      *(_QWORD *)&v200 = v58;
      ChartContent.foregroundStyle<A>(_:)(&v200, v32, &type metadata for Color, &protocol witness table for RuleMark, &protocol witness table for Color);
      v59 = swift_release(v58);
      v60 = (*(uint64_t (**)(char *, uint64_t, __n128))(v33 + 8))(v35, v32, v59);
      v152[0] = v152;
      v61 = __chkstk_darwin(v60);
      v62 = v156;
      v63 = static AnnotationPosition.automatic.getter(v61);
      v64 = static Alignment.center.getter(v63);
      v66 = v65;
      *(_QWORD *)&v200 = v32;
      *((_QWORD *)&v200 + 1) = &type metadata for Color;
      *(_QWORD *)&v201 = &protocol witness table for RuleMark;
      *((_QWORD *)&v201 + 1) = &protocol witness table for Color;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v200, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
      v68 = v153;
      v69 = v155;
      ChartContent.annotation<A>(position:alignment:spacing:content:)(v62, v64, v66, 0, 1, sub_100153C38, &v152[-6], v155, &type metadata for Text, OpaqueTypeConformance2, &protocol witness table for Text);
      (*(void (**)(char *, uint64_t))(v157 + 8))(v62, v158);
      (*(void (**)(char *, uint64_t))(v154 + 8))(v37, v69);
      swift_bridgeObjectRelease(v49);
      v70 = v159;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v41, v68, v159);
      v71 = 0;
      v72 = v191;
      v73 = v194;
      v74 = v164;
      v75 = (uint64_t)v163;
      v76 = v162;
      v77 = v161;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v41, v71, 1, v70);
    sub_10014BC64((uint64_t)v41, v73, &qword_1002B4080);
    v78 = 0;
    v79 = v166;
    v80 = v165;
  }
  else
  {
    v78 = 1;
    v72 = v191;
    v73 = v194;
    v79 = v166;
    v80 = v165;
    v74 = v164;
    v75 = (uint64_t)v163;
    v76 = v162;
    v77 = v161;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v73, v78, 1, v76);
  v81 = LocalizedStringKey.init(stringLiteral:)(1701669236, 0xE400000000000000);
  v83 = v82;
  v85 = v84;
  *(_QWORD *)&v200 = 0;
  *((_QWORD *)&v200 + 1) = 0xE000000000000000;
  v86 = v192 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
  swift_beginAccess(v192 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp, &v197, 0, 0);
  sub_10014BD9C(v86, v75, &qword_1002B4168);
  v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v75, 1, v79);
  if ((_DWORD)v87 == 1)
  {
    Date.init()(v87);
    sub_10014BDE0(v75, &qword_1002B4168);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(v74, v75, v79);
  }
  v88 = sub_100146004((unint64_t *)&unk_1002B4190, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v89._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v79, v88);
  object = v89._object;
  String.append(_:)(v89);
  swift_bridgeObjectRelease(object);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v74, v79);
  v91 = *((_QWORD *)&v200 + 1);
  static PlottableValue.value(_:_:)(v81);
  swift_bridgeObjectRelease(v91);
  swift_bridgeObjectRelease(v85);
  swift_bridgeObjectRelease(v83);
  v92 = LocalizedStringKey.init(stringLiteral:)(0x65756C6176, 0xE500000000000000);
  v94 = v93;
  v96 = v95;
  v97 = *(_QWORD *)(v192 + 112);
  v98 = *(_QWORD *)(v192 + 120);
  v195 = 0.0;
  v99 = __chkstk_darwin(v92);
  v150 = &v195;
  if ((v98 & 0x1000000000000000) != 0 || !(v98 & 0x2000000000000000 | v97 & 0x1000000000000000))
  {
    swift_bridgeObjectRetain(v98);
    _StringGuts._slowWithCString<A>(_:)(&v200, sub_100153D30, &v149, v97, v98, &type metadata for Bool);
    swift_bridgeObjectRelease(v98);
    v102 = v200;
    v103 = v160;
  }
  else
  {
    __chkstk_darwin(v99);
    v150 = (double *)sub_100153D30;
    v151 = &v149;
    if ((v98 & 0x2000000000000000) != 0)
    {
      *(_QWORD *)&v200 = v97;
      *((_QWORD *)&v200 + 1) = v98 & 0xFFFFFFFFFFFFFFLL;
      v103 = v160;
      switch((char)v97)
      {
        case 0:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
          swift_bridgeObjectRetain(v98);
          goto LABEL_19;
        default:
          swift_bridgeObjectRetain(v98);
          v144 = (_BYTE *)_swift_stdlib_strtod_clocale(&v200, &v195);
          if (v144)
            v102 = *v144 == 0;
          else
LABEL_19:
            v102 = 0;
          swift_bridgeObjectRelease(v98);
          break;
      }
    }
    else
    {
      if ((v97 & 0x1000000000000000) != 0)
      {
        v100 = (v98 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v101 = v97 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v100 = _StringObject.sharedUTF8.getter(v97, v98);
        v101 = v145;
      }
      swift_bridgeObjectRetain(v98);
      v102 = sub_100191544(v100, v101, (void (*)(uint64_t *__return_ptr))sub_100153C20);
      swift_bridgeObjectRelease(v98);
      v103 = v160;
    }
    v72 = v191;
  }
  v104 = v195;
  if ((v102 & 1) == 0)
    v104 = 0.0;
  *(double *)&v200 = v104;
  v105 = v167;
  static PlottableValue.value(_:_:)(v92);
  swift_bridgeObjectRelease(v96);
  swift_bridgeObjectRelease(v94);
  LineMark.init<A, B>(x:y:)(v193, v105, &type metadata for String, &type metadata for Double, &protocol witness table for String, &protocol witness table for Double);
  v106 = LocalizedStringKey.init(stringLiteral:)(0x63697274654DLL, 0xE600000000000000);
  *(_QWORD *)&v200 = 0;
  *((_QWORD *)&v200 + 1) = 0xE000000000000000;
  v109 = *v103;
  if (*v103)
  {
    v110 = v106;
    v111 = v107;
    v112 = v108;
    v113 = *(_QWORD *)(v109 + 48);
    v114 = *(void **)(v109 + 56);
    swift_bridgeObjectRetain(v114);
    v115._countAndFlagsBits = v113;
    v115._object = v114;
    String.append(_:)(v115);
    swift_bridgeObjectRelease(v114);
    v116 = *((_QWORD *)&v200 + 1);
    v117 = v172;
    static PlottableValue.value(_:_:)(v110);
    swift_bridgeObjectRelease(v116);
    swift_bridgeObjectRelease(v112);
    swift_bridgeObjectRelease(v111);
    v118 = v171;
    v119 = v170;
    ChartContent.foregroundStyle<A>(by:)(v117, v170, &type metadata for String, &protocol witness table for LineMark, &protocol witness table for String);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v117, v175);
    (*(void (**)(char *, uint64_t))(v169 + 8))(v72, v119);
    *(_QWORD *)&v200 = v119;
    *((_QWORD *)&v200 + 1) = &type metadata for String;
    *(_QWORD *)&v201 = &protocol witness table for LineMark;
    *((_QWORD *)&v201 + 1) = &protocol witness table for String;
    v120 = swift_getOpaqueTypeConformance2(&v200, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(by:)>>, 1);
    v121 = v176;
    v122 = v177;
    ChartContent.interpolationMethod(_:)(0x3FE0000000000000, 1, v177, v120);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v118, v122);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v200, 0, 0, _swiftEmptyArrayStorage, 2.0, 10.0, 0.0);
    v195 = *(double *)&v122;
    v196 = v120;
    v123 = swift_getOpaqueTypeConformance2(&v195, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
    v124 = v181;
    v125 = v180;
    ChartContent.lineStyle(_:)(&v200, v180, v123);
    sub_100153BF8((uint64_t)&v200);
    (*(void (**)(char *, uint64_t))(v179 + 8))(v121, v125);
    v126 = sub_100146438(&qword_1002B4098);
    v195 = *(double *)&v125;
    v196 = v123;
    v127 = swift_getOpaqueTypeConformance2(&v195, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    v128 = sub_100153798();
    v129 = v178;
    v130 = v183;
    ChartContent.symbol<A>(symbol:)(sub_10015261C, 0, v183, v126, v127, v128);
    (*(void (**)(char *, uint64_t))(v182 + 8))(v124, v130);
    v131 = v185;
    v193 = *(char **)(v185 + 32);
    v132 = v184;
    v133 = v187;
    ((void (*)(char *, char *, uint64_t))v193)(v184, v129, v187);
    v134 = v194;
    v135 = v168;
    sub_10014BD9C(v194, v168, &qword_1002B4070);
    v136 = *(void (**)(char *, char *, uint64_t))(v131 + 16);
    v137 = v186;
    v136(v186, v132, v133);
    sub_10015365C();
    v138 = v188;
    sub_10014BD9C(v135, v188, &qword_1002B4070);
    v139 = v189;
    v140 = v138 + *(int *)(v189 + 48);
    v136((char *)v140, v137, v133);
    v141 = v190;
    sub_10014BC64(v138, v190, &qword_1002B4070);
    ((void (*)(uint64_t, uint64_t, uint64_t))v193)(v141 + *(int *)(v139 + 48), v140, v133);
    v142 = *(void (**)(char *, uint64_t))(v131 + 8);
    v142(v132, v133);
    sub_10014BDE0(v134, &qword_1002B4070);
    v142(v137, v133);
    return sub_10014BDE0(v135, &qword_1002B4070);
  }
  else
  {
    v146 = v103[1];
    v147 = type metadata accessor for FTMAllMetricsModel(0);
    v148 = sub_100146004(&qword_1002B3FC8, type metadata accessor for FTMAllMetricsModel, (uint64_t)&unk_100242840);
    result = EnvironmentObject.error()(0, v146, v147, v148);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001524C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD v28[2];

  String.append(_:)(*(Swift::String *)&a1);
  v6 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002402A0;
  *(_QWORD *)(v7 + 56) = &type metadata for Double;
  *(_QWORD *)(v7 + 64) = &protocol witness table for Double;
  *(double *)(v7 + 32) = a3;
  v8 = String.init(format:_:)(0x2066322E25, 0xE500000000000000, v7);
  v10 = v9;
  swift_bridgeObjectRelease(0xE500000000000000);
  v28[0] = v8;
  v28[1] = v10;
  v11 = sub_10014654C();
  v12 = Text.init<A>(_:)(v28, &type metadata for String, v11);
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  v19 = static Color.gray.getter(v12, v13);
  v20 = Text.foregroundColor(_:)(v19, v12, v14, v18, v16);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  swift_release(v19);
  sub_10014BE2C(v12, v14, v18);
  result = swift_bridgeObjectRelease(v16);
  *(_QWORD *)a2 = v20;
  *(_QWORD *)(a2 + 8) = v22;
  *(_BYTE *)(a2 + 16) = v24 & 1;
  *(_QWORD *)(a2 + 24) = v26;
  return result;
}

double sub_10015261C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  double result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  __int128 v14;

  v2 = static Color.yellow.getter();
  v3 = static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)(&v10, 0x4018000000000000, 0, 0x4018000000000000, 0, v3, v4);
  v5 = v10;
  v6 = v11;
  v7 = v12;
  v8 = v13;
  *(_QWORD *)a1 = v2;
  *(_WORD *)(a1 + 8) = 256;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  result = *(double *)&v14;
  *(_OWORD *)(a1 + 48) = v14;
  return result;
}

_QWORD *sub_1001526A0@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, double (**a3)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _BYTE v22[24];
  __int128 v23;

  v6 = type metadata accessor for ChartProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v10 = a2[1];
  v23 = *a2;
  v11 = a2[2];
  v19 = v10;
  v20 = v11;
  sub_10014BC64((uint64_t)&v19, (uint64_t)v22, &qword_1002B4008);
  sub_10014BC64((uint64_t)&v20 + 8, (uint64_t)&v21, &qword_1002B4048);
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = (v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_100262E68, v14 + 48, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v15 + v13, v9, v6);
  v16 = (__int128 *)(v15 + v14);
  v17 = a2[1];
  *v16 = *a2;
  v16[1] = v17;
  v16[2] = a2[2];
  *a3 = sub_100153910;
  a3[1] = (double (*)@<D0>(uint64_t@<X0>, uint64_t@<X8>))v15;
  sub_10014AED0(&v23);
  sub_10014BBB4((uint64_t)v22);
  return sub_10014AED0(&v21);
}

double sub_1001527E8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  __n128 v40;
  _OWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double result;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  char v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _BYTE v77[24];
  _OWORD v78[2];

  v61 = a2;
  v59 = a1;
  v70 = a4;
  v58 = type metadata accessor for ChartProxy(0);
  v5 = *(_QWORD *)(v58 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v58);
  v56 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for GeometryProxy(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v57 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalCoordinateSpace(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DragGesture(0);
  v14 = *(_QWORD *)(v13 - 8);
  v63 = v13;
  v64 = v14;
  __chkstk_darwin(v13);
  v60 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100146438(&qword_1002B40F8);
  v17 = *(_QWORD *)(v16 - 8);
  v66 = v16;
  v67 = v17;
  __chkstk_darwin(v16);
  v62 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100146438(&qword_1002B4100);
  v20 = *(_QWORD *)(v19 - 8);
  v68 = v19;
  v69 = v20;
  v21 = __chkstk_darwin(v19);
  v65 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = static Color.clear.getter(v21);
  v72 = 256;
  v73 = 0;
  static CoordinateSpaceProtocol<>.local.getter();
  DragGesture.init<A>(minimumDistance:coordinateSpace:)(v12, v10, &protocol witness table for LocalCoordinateSpace, 10.0);
  v23 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v57, v59, v7);
  v24 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v61, v58);
  v25 = a3[1];
  v78[0] = *a3;
  v26 = a3[2];
  v74 = v25;
  v75 = v26;
  sub_10014BC64((uint64_t)&v74, (uint64_t)v77, &qword_1002B4008);
  sub_10014BC64((uint64_t)&v75 + 8, (uint64_t)&v76, &qword_1002B4048);
  v27 = *(unsigned __int8 *)(v8 + 80);
  v28 = (v27 + 16) & ~v27;
  v29 = *(unsigned __int8 *)(v5 + 80);
  v30 = (v9 + v29 + v28) & ~v29;
  v31 = (v6 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = swift_allocObject(&unk_100262E90, v31 + 48, v27 | v29 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v32 + v28, v23, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v32 + v30, v56, v24);
  v33 = (_OWORD *)(v32 + v31);
  v34 = a3[1];
  *v33 = *a3;
  v33[1] = v34;
  v33[2] = a3[2];
  sub_10014AED0(v78);
  sub_10014BBB4((uint64_t)v77);
  sub_10014AED0(&v76);
  v35 = sub_100146004(&qword_1002B4108, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture, (uint64_t)&protocol conformance descriptor for DragGesture);
  v36 = sub_100146004(&qword_1002B4110, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture.Value, (uint64_t)&protocol conformance descriptor for DragGesture.Value);
  v37 = v62;
  v38 = v63;
  v39 = v60;
  Gesture<>.onChanged(_:)(sub_100153A4C, v32, v63, v35, v36);
  v40 = swift_release(v32);
  (*(void (**)(char *, uint64_t, __n128))(v64 + 8))(v39, v38, v40);
  v41 = (_OWORD *)swift_allocObject(&unk_100262EB8, 64, 7);
  v42 = a3[1];
  v41[1] = *a3;
  v41[2] = v42;
  v41[3] = a3[2];
  sub_10014AED0(v78);
  sub_10014BBB4((uint64_t)v77);
  sub_10014AED0(&v76);
  v43 = sub_10014BEC0(&qword_1002B4118, &qword_1002B40F8, (uint64_t)&protocol conformance descriptor for _ChangedGesture<A>);
  v45 = v65;
  v44 = v66;
  Gesture.onEnded(_:)(sub_100153B10, v41, v66, v43);
  v46 = swift_release(v41);
  v47 = (*(uint64_t (**)(char *, uint64_t, __n128))(v67 + 8))(v37, v44, v46);
  v48 = static GestureMask.all.getter(v47);
  v49 = sub_100146438(&qword_1002B4120);
  v50 = sub_100153B5C();
  v51 = sub_10014BEC0(&qword_1002B4150, &qword_1002B4100, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  v52 = v48;
  v53 = v68;
  View.gesture<A>(_:including:)(v45, v52, v49, v68, v50, v51);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v45, v53);
  *(_QWORD *)&result = swift_release(v71).n128_u64[0];
  return result;
}

uint64_t sub_100152CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  __int128 v8;
  __n128 v9;
  double v10;
  double v11;
  __int128 v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];

  v5 = ChartProxy.plotAreaFrame.getter();
  type metadata accessor for CGRect(0);
  GeometryProxy.subscript.getter(v19, v5, v6);
  v7 = swift_release(v5);
  v8 = v19[0];
  v9.n128_f64[0] = DragGesture.Value.location.getter(v7);
  v10 = v9.n128_f64[0] - *(double *)&v8;
  DragGesture.Value.location.getter(v9);
  ChartProxy.value<A, B>(at:as:)(&v17, &type metadata for String, &type metadata for Double, &protocol witness table for String, &protocol witness table for Double, v10, v11 - *((double *)&v8 + 1));
  v12 = *(_OWORD *)(a4 + 32);
  v19[0] = *(_OWORD *)(a4 + 16);
  v19[1] = v12;
  v15 = v17;
  v16 = v18;
  v13 = sub_100146438(&qword_1002B4158);
  return State.wrappedValue.setter(&v15, v13);
}

uint64_t sub_100152DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a6);
  return Label<>.init(_:systemImage:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100152E30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_BYTE *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  sub_10014BE1C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  sub_10014BE1C(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t sub_100152EA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_BYTE *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 144);
  sub_10014BE2C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  sub_10014BE2C(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

unint64_t sub_100152F10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B3FE8;
  if (!qword_1002B3FE8)
  {
    v1 = sub_1001464C4(&qword_1002B3FD8);
    sub_10014BEC0(&qword_1002B3FF0, &qword_1002B3FF8, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B3FE8);
  }
  return result;
}

uint64_t sub_100152F94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_BYTE *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  sub_10014BE2C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  sub_10014BE2C(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_100153004(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_BYTE *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 144);
  sub_10014BE1C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  sub_10014BE1C(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_BYTE *sub_100153074@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1001914DC(a1, a2);
}

uint64_t sub_10015308C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FTMCellMonitorBookmarkedSheetView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001530D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for FTMCellMonitorBookmarkedSheetView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = sub_100146438(&qword_1002B3F00);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100153180(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FTMCellMonitorBookmarkedSheetView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001531C4()
{
  type metadata accessor for FTMCellMonitorBookmarkedSheetView(0);
  return sub_10014EB20();
}

uint64_t sub_1001531F0()
{
  uint64_t v0;

  return sub_100152DB0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t destroy for FTMCellMonitorChartView(_QWORD *a1)
{
  swift_release(*a1);
  swift_bridgeObjectRelease(a1[3]);
  return swift_release(a1[5]);
}

uint64_t initializeWithCopy for FTMCellMonitorChartView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  v5 = a2[3];
  v4 = a2[4];
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  v6 = a2[5];
  *(_QWORD *)(a1 + 40) = v6;
  swift_retain(v3);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for FTMCellMonitorChartView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a1[5];
  v9 = a2[5];
  a1[5] = v9;
  swift_retain(v9);
  swift_release(v8);
  return a1;
}

__n128 initializeWithTake for FTMCellMonitorChartView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for FTMCellMonitorChartView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  v5 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v5);
  a1[4] = a2[4];
  v6 = a1[5];
  a1[5] = a2[5];
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FTMCellMonitorChartView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FTMCellMonitorChartView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FTMCellMonitorChartView()
{
  return &type metadata for FTMCellMonitorChartView;
}

unint64_t sub_100153464()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B4020;
  if (!qword_1002B4020)
  {
    v1 = sub_1001464C4(&qword_1002B4028);
    sub_10014BEC0(&qword_1002B3FE0, &qword_1002B3FB0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_100152F10();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4020);
  }
  return result;
}

uint64_t sub_1001534E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100246104, 1);
}

uint64_t sub_1001534F8()
{
  return sub_100153AD0(80);
}

uint64_t sub_100153500@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100151440(a1, v2 + 16, a2, *(double *)(v2 + 64), *(double *)(v2 + 72));
}

unint64_t sub_10015350C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;

  result = qword_1002B4060;
  if (!qword_1002B4060)
  {
    v1 = sub_1001464C4(&qword_1002B4050);
    v14 = sub_10015365C();
    v2 = sub_1001464C4(&qword_1002B4090);
    v3 = sub_1001464C4(&qword_1002B4098);
    v4 = sub_1001464C4(&qword_1002B40A0);
    v5 = sub_1001464C4(&qword_1002B40A8);
    v10 = type metadata accessor for LineMark(255);
    v11 = &type metadata for String;
    v12 = &protocol witness table for LineMark;
    v13 = &protocol witness table for String;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(by:)>>, 1);
    v10 = v5;
    v11 = (void *)OpaqueTypeConformance2;
    v7 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of ChartContent.interpolationMethod(_:)>>, 1);
    v10 = v4;
    v11 = (void *)v7;
    v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of ChartContent.lineStyle(_:)>>, 1);
    v9 = sub_100153798();
    v10 = v2;
    v11 = (void *)v3;
    v12 = (void *)v8;
    v13 = (void *)v9;
    v15 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of ChartContent.symbol<A>(symbol:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4060);
  }
  return result;
}

unint64_t sub_10015365C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B4068;
  if (!qword_1002B4068)
  {
    v1 = sub_1001464C4(&qword_1002B4070);
    sub_1001536C0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4068);
  }
  return result;
}

unint64_t sub_1001536C0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  result = qword_1002B4078;
  if (!qword_1002B4078)
  {
    v1 = sub_1001464C4(&qword_1002B4080);
    v2 = sub_1001464C4(&qword_1002B4088);
    v4 = type metadata accessor for RuleMark(255);
    v5 = &type metadata for Color;
    v6 = &protocol witness table for RuleMark;
    v7 = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
    v4 = v2;
    v5 = &type metadata for Text;
    v6 = (void *)OpaqueTypeConformance2;
    v7 = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of ChartContent.annotation<A>(position:alignment:spacing:content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4078);
  }
  return result;
}

unint64_t sub_100153798()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B40B0;
  if (!qword_1002B40B0)
  {
    v1 = sub_1001464C4(&qword_1002B4098);
    sub_10014BEC0(&qword_1002B40B8, &qword_1002B40C0, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B40B0);
  }
  return result;
}

unint64_t sub_10015381C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B40E0;
  if (!qword_1002B40E0)
  {
    v1 = sub_1001464C4(&qword_1002B40D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ClosedRange<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B40E0);
  }
  return result;
}

uint64_t sub_100153878()
{
  return sub_100153AD0(64);
}

_QWORD *sub_100153880@<X0>(uint64_t a1@<X0>, double (**a2)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v2;

  return sub_1001526A0(a1, (__int128 *)(v2 + 16), a2);
}

uint64_t sub_100153888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v1 = type metadata accessor for ChartProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 + 48;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v8 = (_QWORD *)(v0 + v6);
  swift_release(*v8);
  swift_bridgeObjectRelease(v8[3]);
  swift_release(v8[5]);
  return swift_deallocObject(v0, v7, v5);
}

double sub_100153910@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for ChartProxy(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_1001527E8(a1, v2 + v6, (_OWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)), a2);
}

uint64_t sub_100153970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = type metadata accessor for GeometryProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for ChartProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(_QWORD *)(v0 + v11));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v11 + 24));
  swift_release(*(_QWORD *)(v0 + v11 + 40));
  return swift_deallocObject(v0, v11 + 48, v10);
}

uint64_t sub_100153A4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for ChartProxy(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  return sub_100152CB8(a1, v1 + v4, v1 + v7, v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_100153AC8()
{
  return sub_100153AD0(64);
}

uint64_t sub_100153AD0(uint64_t a1)
{
  _QWORD *v1;

  swift_release(v1[2]);
  swift_bridgeObjectRelease(v1[5]);
  swift_release(v1[7]);
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100153B10()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  _QWORD v4[3];
  __int128 v5;
  __int128 v6;

  v1 = *(_OWORD *)(v0 + 48);
  v5 = *(_OWORD *)(v0 + 32);
  v6 = v1;
  memset(v4, 0, sizeof(v4));
  v2 = sub_100146438(&qword_1002B4158);
  return State.wrappedValue.setter(v4, v2);
}

unint64_t sub_100153B5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B4128;
  if (!qword_1002B4128)
  {
    v1 = sub_1001464C4(&qword_1002B4120);
    sub_10014BEC0(&qword_1002B4130, &qword_1002B4138, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    sub_10014BEC0(&qword_1002B4140, &qword_1002B4148, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4128);
  }
  return result;
}

uint64_t sub_100153BF8(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return a1;
}

_QWORD *sub_100153C20@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100191598(*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_100153C38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001524C8(*(_QWORD *)(v1 + 16), a1, *(double *)(v1 + 32));
}

uint64_t sub_100153C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v0 = sub_1001464C4(&qword_1002B4040);
  v1 = sub_1001464C4(&qword_1002B40E8);
  v5 = sub_1001464C4(&qword_1002B4038);
  v6 = sub_1001464C4(&qword_1002B40D0);
  v7 = sub_10014BEC0(&qword_1002B40D8, &qword_1002B4038, (uint64_t)&protocol conformance descriptor for Chart<A>);
  v8 = sub_10015381C();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.chartYScale<A>(domain:type:)>>, 1);
  v3 = sub_10014BEC0(&qword_1002B40F0, &qword_1002B40E8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
  v5 = v0;
  v6 = v1;
  v7 = OpaqueTypeConformance2;
  v8 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.chartOverlay<A>(alignment:content:)>>, 1);
}

_BYTE *sub_100153D30@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_100153074(a1, a2);
}

BOOL sub_100153D44(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100153D58()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100153D9C()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100153DC4(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

id sub_100153E04(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  id v12;
  objc_super v14;

  v9 = OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_tableView;
  v10 = objc_allocWithZone((Class)UITableView);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "init");
  *(_QWORD *)&v11[OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_characters] = _swiftEmptyArrayStorage;
  v11[OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_size] = 2;
  v11[OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_isScrolling] = 0;

  v14.receiver = v11;
  v14.super_class = (Class)type metadata accessor for TickerColumnCell();
  v12 = objc_msgSendSuper2(&v14, "initWithFrame:", a1, a2, a3, a4);
  sub_100153FDC();

  return v12;
}

void sub_100153FDC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t ObjCClassFromMetadata;
  id v6;
  NSString v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  Class isa;
  _QWORD v33[3];
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;

  v1 = v0;
  v2 = OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_tableView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_tableView], "setUserInteractionEnabled:", 0);
  v3 = *(void **)&v0[v2];
  v4 = type metadata accessor for TickerCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v4);
  v6 = v3;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "registerClass:forCellReuseIdentifier:", ObjCClassFromMetadata, v7);

  objc_msgSend(*(id *)&v1[v2], "setDataSource:", v1);
  objc_msgSend(*(id *)&v1[v2], "setDelegate:", v1);
  objc_msgSend(*(id *)&v1[v2], "setSeparatorStyle:", 0);
  v8 = *(void **)&v1[v2];
  v9 = (void *)objc_opt_self(UIColor);
  v10 = v8;
  v11 = objc_msgSend(v9, "clearColor");
  objc_msgSend(v10, "setBackgroundColor:", v11);

  v12 = objc_msgSend(v1, "contentView");
  objc_msgSend(v12, "addSubview:", *(_QWORD *)&v1[v2]);

  objc_msgSend(*(id *)&v1[v2], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v13 = objc_msgSend(v1, "contentView");
  v14 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v15 = swift_allocObject(v14, 64, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100240400;
  sub_1001548C8(0, (unint64_t *)&qword_1002B57F0, NSLayoutConstraint_ptr);
  v16 = *(void **)&v1[v2];
  v17 = sub_1001548C8(0, (unint64_t *)&unk_1002B42C0, UITableView_ptr);
  v36 = v17;
  v35[0] = v16;
  v18 = v16;
  v19 = objc_msgSend(v1, "contentView");
  v20 = sub_1001548C8(0, qword_1002B5800, UIView_ptr);
  v34 = v20;
  v33[0] = v19;
  *(_QWORD *)(v15 + 32) = sub_1001800BC(v35, 5, 0, v33, 5, 1.0, 0.0);
  v21 = *(void **)&v1[v2];
  v36 = v17;
  v35[0] = v21;
  v22 = v21;
  v23 = objc_msgSend(v1, "contentView");
  v34 = v20;
  v33[0] = v23;
  *(_QWORD *)(v15 + 40) = sub_1001800BC(v35, 6, 0, v33, 6, 1.0, 0.0);
  v24 = *(void **)&v1[v2];
  v36 = v17;
  v35[0] = v24;
  v25 = v24;
  v26 = objc_msgSend(v1, "contentView");
  v34 = v20;
  v33[0] = v26;
  *(_QWORD *)(v15 + 48) = sub_1001800BC(v35, 3, 0, v33, 3, 1.0, 0.0);
  v27 = *(void **)&v1[v2];
  v36 = v17;
  v35[0] = v27;
  v28 = v27;
  v29 = objc_msgSend(v1, "contentView");
  v34 = v20;
  v33[0] = v29;
  v30 = sub_1001800BC(v35, 4, 0, v33, 4, 1.0, 0.0);
  *(_QWORD *)(v15 + 56) = v30;
  v35[0] = v15;
  specialized Array._endMutation()(v30);
  v31 = v35[0];
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  objc_msgSend(v13, "addConstraints:", isa);

}

id sub_10015438C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TickerColumnCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TickerColumnCell()
{
  return objc_opt_self(_TtC13FTMInternal_416TickerColumnCell);
}

unint64_t sub_100154414(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSString v4;
  Class isa;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSString v19;
  double v20;
  void *v21;
  id v22;

  v2 = v1;
  v4 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v4, isa);

  v7 = type metadata accessor for TickerCell();
  v8 = swift_dynamicCastClass(v6, v7);
  if (!v8)
  {

    return (unint64_t)objc_msgSend(objc_allocWithZone((Class)UITableViewCell), "init");
  }
  v9 = v8;
  result = IndexPath.row.getter();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_characters);
  if (result >= *(_QWORD *)(v11 + 16))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v12 = v11 + 16 * result;
  v13 = *(_QWORD *)(v12 + 40);
  v14 = (_QWORD *)(v9 + OBJC_IVAR____TtC13FTMInternal_410TickerCell_digit);
  v15 = *(_QWORD *)(v9 + OBJC_IVAR____TtC13FTMInternal_410TickerCell_digit + 8);
  *v14 = *(_QWORD *)(v12 + 32);
  v14[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v15);
  v16 = OBJC_IVAR____TtC13FTMInternal_410TickerCell_numberLabel;
  v17 = *(void **)(v9 + OBJC_IVAR____TtC13FTMInternal_410TickerCell_numberLabel);
  v18 = v14[1];
  swift_bridgeObjectRetain(v18);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v17, "setText:", v19);

  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_size) == 1)
    v20 = 35.0;
  else
    v20 = 40.0;
  *(double *)(v9 + OBJC_IVAR____TtC13FTMInternal_410TickerCell_fontSize) = v20;
  v21 = *(void **)(v9 + v16);
  v22 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", v20, UIFontWeightRegular);
  objc_msgSend(v21, "setFont:", v22);

  return v9;
}

_BYTE *initializeBufferWithCopyOfBuffer for SPApplicationCategories(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AttributeDetailTimeFrame(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TickerColumnCell.Size(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001547F0 + 4 * byte_100240415[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100154824 + 4 * byte_100240410[v4]))();
}

uint64_t sub_100154824(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015482C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100154834);
  return result;
}

uint64_t sub_100154840(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100154848);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10015484C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100154854(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100154860(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100154868(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TickerColumnCell.Size()
{
  return &type metadata for TickerColumnCell.Size;
}

unint64_t sub_100154884()
{
  unint64_t result;

  result = qword_1002B42A8;
  if (!qword_1002B42A8)
  {
    result = swift_getWitnessTable(&unk_100240488, &type metadata for TickerColumnCell.Size);
    atomic_store(result, (unint64_t *)&qword_1002B42A8);
  }
  return result;
}

uint64_t sub_1001548C8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t *sub_100154900(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v12 = a3[7];
    v13 = a3[8];
    v14 = (uint64_t *)((char *)a1 + v12);
    v15 = (uint64_t *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = (uint64_t *)((char *)a1 + v13);
    v18 = (uint64_t *)((char *)a2 + v13);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v19);
  }
  return a1;
}

uint64_t sub_1001549D0(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

uint64_t sub_100154A38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = a3[7];
  v12 = a3[8];
  v13 = (_QWORD *)(a1 + v11);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)(a1 + v12);
  v17 = (_QWORD *)(a2 + v12);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_100154ADC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[8];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t sub_100154BBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_100154C34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  return a1;
}

uint64_t sub_100154CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100154CEC);
}

uint64_t sub_100154CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100154D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100154D78);
}

uint64_t sub_100154D78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for FTMCellMonitorHardwareDetailModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B43E8;
  if (!qword_1002B43E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FTMCellMonitorHardwareDetailModel);
  return result;
}

uint64_t sub_100154E30(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = &unk_1002404F8;
    v4[3] = &unk_1002404F8;
    v4[4] = &unk_100240510;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100154EBC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100154EE0 + 4 * byte_1002404C0[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_100154EE0()
{
  return 0x726564726FLL;
}

uint64_t sub_100154EF4()
{
  return 7955819;
}

uint64_t sub_100154F04()
{
  return 0x65756C6176;
}

uint64_t sub_100154F18()
{
  return 0x70795465756C6176;
}

uint64_t sub_100154F34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100155914(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100154F58()
{
  return 0;
}

void sub_100154F64(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100154F70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001555DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100154F98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001555DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100154FC0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v3 = v1;
  v5 = sub_100146438(&qword_1002B4450);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100146508(a1, v9);
  v11 = sub_1001555DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FTMCellMonitorHardwareDetailModel.CodingKeys, &type metadata for FTMCellMonitorHardwareDetailModel.CodingKeys, v11, v9, v10);
  v31 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_1001556A0(&qword_1002B4458, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v31, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for FTMCellMonitorHardwareDetailModel(0);
    v15 = *(_QWORD *)(v3 + v14[5]);
    v30 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v30, v5);
    v16 = (uint64_t *)(v3 + v14[6]);
    v17 = *v16;
    v18 = v16[1];
    v29 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v29, v5);
    v19 = (uint64_t *)(v3 + v14[7]);
    v20 = *v19;
    v21 = v19[1];
    v28 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v28, v5);
    v22 = (uint64_t *)(v3 + v14[8]);
    v23 = *v22;
    v24 = v22[1];
    v27 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v27, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10015519C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v35 = a2;
  v3 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100146438(&qword_1002B4438);
  v6 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v7 = type metadata accessor for FTMCellMonitorHardwareDetailModel(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v8);
  v41 = v7;
  v11 = &v10[*(int *)(v7 + 32)];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v37 = a1;
  v38 = v11;
  v12 = a1[3];
  v13 = a1[4];
  sub_100146508(a1, v12);
  v14 = sub_1001555DC();
  v15 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FTMCellMonitorHardwareDetailModel.CodingKeys, &type metadata for FTMCellMonitorHardwareDetailModel.CodingKeys, v14, v12, v13);
  if (v15)
  {
    v16 = v3;
    v17 = v39;
    v21 = v38;
    sub_10014652C(v37);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v16);
    return swift_bridgeObjectRelease(*((_QWORD *)v21 + 1));
  }
  else
  {
    v18 = v6;
    v46 = 0;
    v19 = sub_1001556A0(&qword_1002B4448, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v3, &v46, v36, v3, v19);
    (*(void (**)(char *, char *, uint64_t))(v39 + 40))(v10, v5, v3);
    v45 = 1;
    v20 = KeyedDecodingContainer.decode(_:forKey:)(&v45, v36);
    v23 = v41;
    *(_QWORD *)&v10[*(int *)(v41 + 20)] = v20;
    v44 = 2;
    v24 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v36);
    v25 = (uint64_t *)&v10[*(int *)(v23 + 24)];
    *v25 = v24;
    v25[1] = v26;
    v43 = 3;
    v27 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v36);
    v28 = (uint64_t *)&v10[*(int *)(v23 + 28)];
    *v28 = v27;
    v28[1] = v29;
    v42 = 4;
    v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v36);
    v32 = v31;
    (*(void (**)(_QWORD, uint64_t))(v18 + 8))(0, v36);
    v33 = (uint64_t *)v38;
    swift_bridgeObjectRelease(*((_QWORD *)v38 + 1));
    *v33 = v30;
    v33[1] = v32;
    sub_100155620((uint64_t)v10, v35);
    sub_10014652C(v37);
    return sub_100155664((uint64_t)v10);
  }
}

uint64_t sub_100155558@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_100155590@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10015519C(a1, a2);
}

uint64_t sub_1001555A4(_QWORD *a1)
{
  return sub_100154FC0(a1);
}

uint64_t sub_1001555B8()
{
  return sub_1001556A0((unint64_t *)&qword_1002B4430, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_1001555DC()
{
  unint64_t result;

  result = qword_1002B4440;
  if (!qword_1002B4440)
  {
    result = swift_getWitnessTable(&unk_100240674, &type metadata for FTMCellMonitorHardwareDetailModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4440);
  }
  return result;
}

uint64_t sub_100155620(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FTMCellMonitorHardwareDetailModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100155664(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FTMCellMonitorHardwareDetailModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001556A0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FTMCellMonitorHardwareDetailModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FTMCellMonitorHardwareDetailModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001557BC + 4 * byte_1002404CA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001557F0 + 4 * byte_1002404C5[v4]))();
}

uint64_t sub_1001557F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001557F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100155800);
  return result;
}

uint64_t sub_10015580C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100155814);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100155818(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100155820(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FTMCellMonitorHardwareDetailModel.CodingKeys()
{
  return &type metadata for FTMCellMonitorHardwareDetailModel.CodingKeys;
}

unint64_t sub_100155840()
{
  unint64_t result;

  result = qword_1002B4460;
  if (!qword_1002B4460)
  {
    result = swift_getWitnessTable(&unk_10024064C, &type metadata for FTMCellMonitorHardwareDetailModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4460);
  }
  return result;
}

unint64_t sub_100155888()
{
  unint64_t result;

  result = qword_1002B4468;
  if (!qword_1002B4468)
  {
    result = swift_getWitnessTable(&unk_1002405BC, &type metadata for FTMCellMonitorHardwareDetailModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4468);
  }
  return result;
}

unint64_t sub_1001558D0()
{
  unint64_t result;

  result = qword_1002B4470;
  if (!qword_1002B4470)
  {
    result = swift_getWitnessTable(&unk_1002405E4, &type metadata for FTMCellMonitorHardwareDetailModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4470);
  }
  return result;
}

uint64_t sub_100155914(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x726564726FLL && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726564726FLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 7955819 && a2 == 0xE300000000000000)
  {
    v8 = 0xE300000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7955819, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    v9 = 0xE500000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x70795465756C6176 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x70795465756C6176, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t destroy for SCircleButton(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for SCircleButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v4);
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for SCircleButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v7 = a2[2];
  v6 = a2[3];
  v8 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

_QWORD *assignWithTake for SCircleButton(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  v5 = a1[3];
  a1[3] = v4;
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for SCircleButton()
{
  return &type metadata for SCircleButton;
}

uint64_t sub_100155C34(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100246268, 1);
}

uint64_t sub_100155C44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v5 = sub_10014654C();
  swift_bridgeObjectRetain(a2);
  result = Text.init<A>(_:)(v10, &type metadata for String, v5);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = v8 & 1;
  *(_QWORD *)(a3 + 24) = v9;
  return result;
}

uint64_t sub_100155CAC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v1 = sub_100146438(&qword_1002B3C98);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *v0;
  v6 = v0[1];
  v8 = v0[2];
  v7 = v0[3];
  v17 = v5;
  v18 = v6;
  v19 = v8;
  v20 = v7;
  swift_retain(v7);
  v9 = Button.init(action:label:)(v8, v7, sub_100155DF0, v16, &type metadata for Text, &protocol witness table for Text);
  v10 = static Color.green.getter(v9);
  KeyPath = swift_getKeyPath(&unk_100240750);
  v21[0] = v10;
  v21[1] = KeyPath;
  v22 = 0;
  v12 = sub_10014BEC0(&qword_1002B3CA8, &qword_1002B3C98, (uint64_t)&protocol conformance descriptor for Button<A>);
  v13 = sub_1001566F4();
  View.buttonStyle<A>(_:)(v21, v1, &type metadata for SCircleButtonStyle, v12, v13);
  swift_release(KeyPath);
  v14 = swift_release(v10);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v2 + 8))(v4, v1, v14);
}

uint64_t sub_100155DF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100155C44(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100155DFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v67 = a2;
  v87 = a5;
  v7 = a4 & 1;
  v85 = type metadata accessor for Color.RGBColorSpace(0);
  v83 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v84 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v9 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100146438(&qword_1002B4480);
  __chkstk_darwin(v69);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100146438(&qword_1002B4488);
  __chkstk_darwin(v14);
  v68 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100146438(&qword_1002B4490);
  __chkstk_darwin(v73);
  v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100146438(&qword_1002B4498);
  __chkstk_darwin(v74);
  v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100146438(&qword_1002B44A0);
  __chkstk_darwin(v72);
  v71 = (uint64_t)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100146438(&qword_1002B44A8);
  __chkstk_darwin(v75);
  v78 = (uint64_t)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100146438(&qword_1002B44B0);
  __chkstk_darwin(v76);
  v81 = (uint64_t)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100146438(&qword_1002B44B8);
  __chkstk_darwin(v77);
  v82 = (uint64_t)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100146438(&qword_1002B44C0);
  v24 = __chkstk_darwin(v79);
  v80 = (uint64_t)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = a1;
  v26 = ButtonStyleConfiguration.label.getter(v24);
  v27 = static Font.largeTitle.getter(v26);
  KeyPath = swift_getKeyPath(&unk_1002407D0);
  v29 = v70;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v11, v70);
  v30 = (uint64_t *)&v13[*(int *)(v69 + 36)];
  *v30 = KeyPath;
  v30[1] = v27;
  v31 = v29;
  v32 = (uint64_t)v68;
  v33 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v31);
  v34 = static Alignment.center.getter(v33);
  sub_1001564DC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v32, 0.0, 1, INFINITY, 0, v34, v35);
  sub_10014BDE0((uint64_t)v13, &qword_1002B4480);
  sub_10015673C(a3, v7);
  LOBYTE(v27) = sub_10018D37C(a3, v7);
  v36 = sub_100156774(a3, v7);
  if ((v27 & 1) != 0)
  {
    v38 = v67;
    v39 = swift_retain(v67);
  }
  else
  {
    v39 = static Color.gray.getter(v36, v37);
    v38 = v39;
  }
  v40 = static Edge.Set.all.getter(v39);
  sub_10014BD9C(v32, (uint64_t)v17, &qword_1002B4488);
  v41 = &v17[*(int *)(v73 + 36)];
  *(_QWORD *)v41 = v38;
  v41[8] = v40;
  v42 = sub_10014BDE0(v32, &qword_1002B4488);
  v43 = static Color.white.getter(v42);
  sub_10014BD9C((uint64_t)v17, (uint64_t)v19, &qword_1002B4490);
  *(_QWORD *)&v19[*(int *)(v74 + 36)] = v43;
  sub_10014BDE0((uint64_t)v17, &qword_1002B4490);
  v44 = v71;
  sub_10014BD9C((uint64_t)v19, v71, &qword_1002B4498);
  *(_WORD *)(v44 + *(int *)(v72 + 36)) = 256;
  sub_10014BDE0((uint64_t)v19, &qword_1002B4498);
  sub_10015673C(a3, v7);
  LOBYTE(v43) = sub_10018D37C(a3, v7);
  sub_100156774(a3, v7);
  if ((v43 & 1) != 0)
    v45 = 4.0;
  else
    v45 = 0.0;
  v46 = v84;
  (*(void (**)(char *, _QWORD, uint64_t))(v83 + 104))(v84, enum case for Color.RGBColorSpace.sRGBLinear(_:), v85);
  v47 = Color.init(_:white:opacity:)(v46, 0.0, 0.33);
  v48 = v78;
  sub_10014BD9C(v44, v78, &qword_1002B44A0);
  v49 = v48 + *(int *)(v75 + 36);
  *(_QWORD *)v49 = v47;
  *(double *)(v49 + 8) = v45;
  *(_QWORD *)(v49 + 16) = 0;
  *(_QWORD *)(v49 + 24) = 0;
  sub_10014BDE0(v44, &qword_1002B44A0);
  sub_10015673C(a3, v7);
  v50 = sub_10018D37C(a3, v7);
  v51 = sub_100156774(a3, v7);
  v52 = 1.0;
  if ((v50 & 1) != 0)
  {
    v51 = ButtonStyleConfiguration.isPressed.getter(v51);
    if ((v51 & 1) != 0)
      v52 = 0.92;
    else
      v52 = 1.0;
  }
  v53 = static UnitPoint.center.getter(v51);
  v55 = v54;
  v56 = v81;
  sub_10014BD9C(v48, v81, &qword_1002B44A8);
  v57 = v56 + *(int *)(v76 + 36);
  *(double *)v57 = v52;
  *(double *)(v57 + 8) = v52;
  *(double *)(v57 + 16) = v53;
  *(_QWORD *)(v57 + 24) = v55;
  v58 = sub_10014BDE0(v48, &qword_1002B44A8);
  v59 = static Animation.easeInOut(duration:)(v58, 0.1);
  v60 = ButtonStyleConfiguration.isPressed.getter(v59);
  v61 = v82;
  sub_10014BD9C(v56, v82, &qword_1002B44B0);
  v62 = v61 + *(int *)(v77 + 36);
  *(_QWORD *)v62 = v59;
  *(_BYTE *)(v62 + 8) = v60 & 1;
  v63 = sub_10014BDE0(v56, &qword_1002B44B0);
  LOBYTE(v59) = static Edge.Set.all.getter(v63);
  v64 = v80;
  sub_10014BD9C(v61, v80, &qword_1002B44B8);
  v65 = v64 + *(int *)(v79 + 36);
  *(_BYTE *)v65 = v59;
  *(_OWORD *)(v65 + 8) = 0u;
  *(_OWORD *)(v65 + 24) = 0u;
  *(_BYTE *)(v65 + 40) = 1;
  sub_10014BDE0(v61, &qword_1002B44B8);
  return sub_1001569B0(v64, v87);
}

__n128 sub_1001564DC@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __n128 result;
  unsigned int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _OWORD v44[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v42 = a5;
    v43 = a7;
    v41 = a3;
    v40 = a1;
    v39 = v21;
    v33 = static os_log_type_t.fault.getter();
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v39;
    a1 = v40;
    v20 = a10;
    a3 = v41;
    v19 = a12;
    a5 = v42;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  sub_10014BD9C(v16, a9, &qword_1002B4480);
  v35 = a9 + *(int *)(sub_100146438(&qword_1002B4488) + 36);
  v36 = v44[5];
  *(_OWORD *)(v35 + 64) = v44[4];
  *(_OWORD *)(v35 + 80) = v36;
  *(_OWORD *)(v35 + 96) = v44[6];
  v37 = v44[1];
  *(_OWORD *)v35 = v44[0];
  *(_OWORD *)(v35 + 16) = v37;
  result = (__n128)v44[3];
  *(_OWORD *)(v35 + 32) = v44[2];
  *(__n128 *)(v35 + 48) = result;
  return result;
}

uint64_t sub_100156698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100155DFC(a1, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16), a2);
}

uint64_t sub_1001566A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1001566D0(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

unint64_t sub_1001566F4()
{
  unint64_t result;

  result = qword_1002B4478;
  if (!qword_1002B4478)
  {
    result = swift_getWitnessTable(&unk_100240794, &type metadata for SCircleButtonStyle);
    atomic_store(result, (unint64_t *)&qword_1002B4478);
  }
  return result;
}

uint64_t sub_10015673C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t destroy for SCircleButtonStyle(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  return sub_100156774(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100156774(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t _s13FTMInternal_418SCircleButtonStyleVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  v5 = *((_BYTE *)a2 + 16);
  swift_retain(v3);
  sub_10015673C(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t *assignWithCopy for SCircleButtonStyle(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = a2;
  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = v2[1];
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  sub_10015673C(v6, (char)v2);
  v7 = a1[1];
  v8 = *((_BYTE *)a1 + 16);
  a1[1] = v6;
  *((_BYTE *)a1 + 16) = (_BYTE)v2;
  sub_100156774(v7, v8);
  return a1;
}

uint64_t *assignWithTake for SCircleButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = *((_BYTE *)a2 + 16);
  v6 = a1[1];
  v7 = *((_BYTE *)a1 + 16);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = v5;
  sub_100156774(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SCircleButtonStyle(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SCircleButtonStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SCircleButtonStyle()
{
  return &type metadata for SCircleButtonStyle;
}

uint64_t sub_100156920()
{
  _QWORD v1[4];

  v1[0] = sub_1001464C4(&qword_1002B3C98);
  v1[1] = &type metadata for SCircleButtonStyle;
  v1[2] = sub_10014BEC0(&qword_1002B3CA8, &qword_1002B3C98, (uint64_t)&protocol conformance descriptor for Button<A>);
  v1[3] = sub_1001566F4();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
}

uint64_t sub_100156998(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100246290, 1);
}

uint64_t sub_1001569B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100146438(&qword_1002B44C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001569F8()
{
  return sub_100156AD0(&qword_1002B44C8, &qword_1002B44C0, (void (*)(void))sub_100156A2C);
}

unint64_t sub_100156A2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B44D0;
  if (!qword_1002B44D0)
  {
    v1 = sub_1001464C4(&qword_1002B44B8);
    sub_100156AD0(&qword_1002B44D8, &qword_1002B44B0, (void (*)(void))sub_100156B38);
    sub_10014BEC0(&qword_1002B4558, &qword_1002B4560, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B44D0);
  }
  return result;
}

uint64_t sub_100156AD0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1001464C4(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100156B38()
{
  return sub_100156AD0(&qword_1002B44E0, &qword_1002B44A8, (void (*)(void))sub_100156B5C);
}

unint64_t sub_100156B5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B44E8;
  if (!qword_1002B44E8)
  {
    v1 = sub_1001464C4(&qword_1002B44A0);
    sub_100156BE0();
    sub_10014BEC0(&qword_1002B4548, &qword_1002B4550, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B44E8);
  }
  return result;
}

unint64_t sub_100156BE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B44F0;
  if (!qword_1002B44F0)
  {
    v1 = sub_1001464C4(&qword_1002B4498);
    sub_100156C64();
    sub_10014BEC0(&qword_1002B4538, &qword_1002B4540, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B44F0);
  }
  return result;
}

unint64_t sub_100156C64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B44F8;
  if (!qword_1002B44F8)
  {
    v1 = sub_1001464C4(&qword_1002B4490);
    sub_100156AD0(&qword_1002B4500, &qword_1002B4488, (void (*)(void))sub_100156D08);
    sub_10014BEC0(&qword_1002B4528, &qword_1002B4530, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B44F8);
  }
  return result;
}

unint64_t sub_100156D08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B4508;
  if (!qword_1002B4508)
  {
    v1 = sub_1001464C4(&qword_1002B4480);
    sub_100156D8C();
    sub_10014BEC0(&qword_1002B4518, &qword_1002B4520, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4508);
  }
  return result;
}

unint64_t sub_100156D8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B4510;
  if (!qword_1002B4510)
  {
    v1 = type metadata accessor for ButtonStyleConfiguration.Label(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ButtonStyleConfiguration.Label, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4510);
  }
  return result;
}

uint64_t sub_100156E40()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;

  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricTech);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricTech + 8);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricName);
  v6 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricName + 8);
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_attributeName);
  v10 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_attributeName + 8);
  swift_bridgeObjectRetain(v10);
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 8236;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricId);
  v14 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricId + 8);
  swift_bridgeObjectRetain(v14);
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  v16._countAndFlagsBits = 41;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return 40;
}

void sub_100156F98(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  NSString v4;
  NSString v5;
  uint64_t v6;
  NSString v7;
  NSString v8;
  uint64_t v9;
  NSString v10;
  NSString v11;
  uint64_t v12;
  NSString v13;
  NSString v14;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricTech + 8);
  swift_bridgeObjectRetain(v3);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "encodeObject:forKey:", v4, v5);

  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricName + 8);
  swift_bridgeObjectRetain(v6);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "encodeObject:forKey:", v7, v8);

  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_attributeName + 8);
  swift_bridgeObjectRetain(v9);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "encodeObject:forKey:", v10, v11);

  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricId + 8);
  swift_bridgeObjectRetain(v12);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "encodeObject:forKey:", v13, v14);

}

id sub_1001571DC(void *a1)
{
  void *v1;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  uint64_t v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  objc_class *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  id v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v29;
  objc_super v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[24];
  uint64_t v36;

  v3 = v1;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(a1, "decodeObjectForKey:", v4);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(&v33, v5);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    v33 = 0u;
    v34 = 0u;
  }
  sub_100157700((uint64_t)&v33, (uint64_t)v35);
  if (!v36)
  {

LABEL_31:
    sub_100157748((uint64_t)v35);
    goto LABEL_35;
  }
  if ((swift_dynamicCast(&v31, v35, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {

LABEL_35:
    ObjectType = swift_getObjectType(v3);
    swift_deallocPartialClassInstance(v3, ObjectType, 72, 7);
    return 0;
  }
  v7 = v31;
  v6 = v32;
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(a1, "decodeObjectForKey:", v8);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)(&v33, v9);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    v33 = 0u;
    v34 = 0u;
  }
  sub_100157700((uint64_t)&v33, (uint64_t)v35);
  if (!v36)
  {

LABEL_30:
    swift_bridgeObjectRelease(v6);
    goto LABEL_31;
  }
  if ((swift_dynamicCast(&v31, v35, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {

LABEL_34:
    swift_bridgeObjectRelease(v6);
    goto LABEL_35;
  }
  v11 = v31;
  v10 = v32;
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(a1, "decodeObjectForKey:", v12);

  if (v13)
  {
    _bridgeAnyObjectToAny(_:)(&v33, v13);
    swift_unknownObjectRelease(v13);
  }
  else
  {
    v33 = 0u;
    v34 = 0u;
  }
  sub_100157700((uint64_t)&v33, (uint64_t)v35);
  if (!v36)
  {

LABEL_29:
    swift_bridgeObjectRelease(v10);
    goto LABEL_30;
  }
  if ((swift_dynamicCast(&v31, v35, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {

LABEL_33:
    swift_bridgeObjectRelease(v10);
    goto LABEL_34;
  }
  v14 = v32;
  v29 = v31;
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(a1, "decodeObjectForKey:", v15);

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)(&v33, v16);
    swift_unknownObjectRelease(v16);
  }
  else
  {
    v33 = 0u;
    v34 = 0u;
  }
  sub_100157700((uint64_t)&v33, (uint64_t)v35);
  if (!v36)
  {

    swift_bridgeObjectRelease(v14);
    goto LABEL_29;
  }
  if ((swift_dynamicCast(&v31, v35, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {

    swift_bridgeObjectRelease(v14);
    goto LABEL_33;
  }
  v17 = v31;
  v18 = v32;

  v19 = (objc_class *)type metadata accessor for DashboardItem();
  v20 = (char *)objc_allocWithZone(v19);
  v21 = &v20[OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricTech];
  *(_QWORD *)v21 = v7;
  *((_QWORD *)v21 + 1) = v6;
  v22 = &v20[OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricName];
  *(_QWORD *)v22 = v11;
  *((_QWORD *)v22 + 1) = v10;
  v23 = &v20[OBJC_IVAR____TtC13FTMInternal_413DashboardItem_attributeName];
  *(_QWORD *)v23 = v29;
  *((_QWORD *)v23 + 1) = v14;
  v24 = &v20[OBJC_IVAR____TtC13FTMInternal_413DashboardItem_metricId];
  *(_QWORD *)v24 = v17;
  *((_QWORD *)v24 + 1) = v18;
  v30.receiver = v20;
  v30.super_class = v19;
  v25 = objc_msgSendSuper2(&v30, "init");

  v26 = swift_getObjectType(v3);
  swift_deallocPartialClassInstance(v3, v26, 72, 7);
  return v25;
}

id sub_100157648()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DashboardItem();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DashboardItem()
{
  return objc_opt_self(_TtC13FTMInternal_413DashboardItem);
}

uint64_t sub_100157700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100146438((uint64_t *)&unk_1002B5670);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100157748(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100146438((uint64_t *)&unk_1002B5670);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_100157788@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void sub_1001577A0(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

id sub_1001577AC()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  char *v4;
  uint64_t v5;
  objc_super v7;

  v1 = OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle;
  v2 = objc_allocWithZone((Class)UIView);
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, "init");
  v4 = &v3[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circleColor;
  *(_QWORD *)&v3[v5] = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_duration] = 0x3FD3333333333333;
  v3[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_transitionMode] = 0;

  v7.receiver = v3;
  v7.super_class = (Class)type metadata accessor for CircularTransition();
  return objc_msgSendSuper2(&v7, "init");
}

id sub_1001578A4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CircularTransition();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CircularTransition()
{
  return objc_opt_self(_TtC13FTMInternal_418CircularTransition);
}

void sub_10015793C(void *a1)
{
  char *v1;
  id *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  uint64_t v15;
  void *v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  id v23;
  double v24;
  void *v25;
  void *v26;
  double v27;
  _QWORD *v28;
  void *v29;
  CGFloat ty;
  char *v31;
  id v32;
  CGFloat v33;
  void *v34;
  CGFloat v35;
  uint64_t v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  id v52;
  id v53;
  double v54;
  void *v55;
  double v56;
  _QWORD *v57;
  void *v58;
  CGFloat v59;
  char *v60;
  id v61;
  id v62;
  _QWORD *v63;
  void *v64;
  CGFloat v65;
  char *v66;
  uint64_t v67;
  id v68;
  id v69;
  CGAffineTransform aBlock;

  v69 = objc_msgSend(a1, "containerView");
  v3 = (id *)&UITransitionContextToViewKey;
  if (v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_transitionMode] != 2)
  {
    if (!v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_transitionMode])
    {
      v4 = objc_msgSend(a1, "viewForKey:", UITransitionContextToViewKey);
      if (v4)
      {
        v5 = v4;
        objc_msgSend(v4, "center");
        v7 = v6;
        v9 = v8;
        objc_msgSend(v5, "frame");
        v11 = v10;
        v13 = v12;
        v14 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
        v15 = OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle;
        v16 = *(void **)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle];
        *(_QWORD *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle] = v14;

        v17 = (double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint];
        v18 = fmax(*(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint], v11 - *(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint]);
        v19 = fmax(*(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint + 8], v13 - *(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint + 8]);
        v20 = sqrt(v18 * v18 + v19 * v19);
        v21 = v20 + v20;
        v22 = *(id *)&v1[v15];
        objc_msgSend(v22, "setFrame:", 0.0, 0.0, v21, v21);

        v23 = objc_msgSend(*(id *)&v1[v15], "layer");
        objc_msgSend(*(id *)&v1[v15], "frame");
        objc_msgSend(v23, "setCornerRadius:", v24 * 0.5);

        objc_msgSend(*(id *)&v1[v15], "setCenter:", *v17, v17[1]);
        objc_msgSend(*(id *)&v1[v15], "setBackgroundColor:", *(_QWORD *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circleColor]);
        v25 = *(void **)&v1[v15];
        CGAffineTransformMakeScale(&aBlock, 0.001, 0.001);
        objc_msgSend(v25, "setTransform:", &aBlock);
        objc_msgSend(v69, "addSubview:", *(_QWORD *)&v1[v15]);
        objc_msgSend(v5, "setCenter:", *v17, v17[1]);
        CGAffineTransformMakeScale(&aBlock, 0.001, 0.001);
        objc_msgSend(v5, "setTransform:", &aBlock);
        objc_msgSend(v5, "setAlpha:", 0.0);
        objc_msgSend(v69, "addSubview:", v5);
        v26 = (void *)objc_opt_self(UIView);
        v27 = *(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_duration];
        v28 = (_QWORD *)swift_allocObject(&unk_1002633D8, 48, 7);
        v28[2] = v1;
        v28[3] = v5;
        v28[4] = v7;
        v28[5] = v9;
        *(_QWORD *)&aBlock.tx = sub_100158420;
        *(_QWORD *)&aBlock.ty = v28;
        *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
        *(_QWORD *)&aBlock.b = 1107296256;
        *(_QWORD *)&aBlock.c = sub_1001BE428;
        *(_QWORD *)&aBlock.d = &unk_1002633F0;
        v29 = _Block_copy(&aBlock);
        ty = aBlock.ty;
        v31 = v1;
        v32 = v5;
        swift_release(*(_QWORD *)&ty);
        v33 = COERCE_DOUBLE(swift_allocObject(&unk_100263428, 24, 7));
        *(_QWORD *)(*(_QWORD *)&v33 + 16) = a1;
        *(_QWORD *)&aBlock.tx = sub_100158450;
        aBlock.ty = v33;
        *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
        *(_QWORD *)&aBlock.b = 1107296256;
        *(_QWORD *)&aBlock.c = sub_1001A2D60;
        *(_QWORD *)&aBlock.d = &unk_100263440;
        v34 = _Block_copy(&aBlock);
        v35 = aBlock.ty;
        swift_unknownObjectRetain(a1, v36);
        swift_release(*(_QWORD *)&v35);
        objc_msgSend(v26, "animateWithDuration:animations:completion:", v29, v34, v27);

        _Block_release(v34);
        _Block_release(v29);

        return;
      }
      goto LABEL_9;
    }
    v3 = (id *)&UITransitionContextFromViewKey;
  }
  v37 = *v3;
  v38 = objc_msgSend(a1, "viewForKey:", v37);
  if (v38)
  {
    v39 = v38;
    objc_msgSend(v38, "center");
    v41 = v40;
    v43 = v42;
    objc_msgSend(v39, "frame");
    v44 = OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle;
    v45 = (double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint];
    v47 = fmax(*(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint], v46 - *(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint]);
    v49 = fmax(*(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint + 8], v48 - *(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint + 8]);
    v50 = sqrt(v47 * v47 + v49 * v49);
    v51 = v50 + v50;
    v52 = *(id *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle];
    objc_msgSend(v52, "setFrame:", 0.0, 0.0, v51, v51);

    v53 = objc_msgSend(*(id *)&v1[v44], "layer");
    objc_msgSend(*(id *)&v1[v44], "frame");
    objc_msgSend(v53, "setCornerRadius:", v54 * 0.5);

    objc_msgSend(*(id *)&v1[v44], "setCenter:", *v45, v45[1]);
    v55 = (void *)objc_opt_self(UIView);
    v56 = *(double *)&v1[OBJC_IVAR____TtC13FTMInternal_418CircularTransition_duration];
    v57 = (_QWORD *)swift_allocObject(&unk_100263338, 40, 7);
    v57[2] = v1;
    v57[3] = v39;
    v57[4] = v69;
    *(_QWORD *)&aBlock.tx = sub_100158320;
    *(_QWORD *)&aBlock.ty = v57;
    *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
    *(_QWORD *)&aBlock.b = 1107296256;
    *(_QWORD *)&aBlock.c = sub_1001BE428;
    *(_QWORD *)&aBlock.d = &unk_100263350;
    v58 = _Block_copy(&aBlock);
    v59 = aBlock.ty;
    v60 = v1;
    v61 = v39;
    v62 = v69;
    swift_release(*(_QWORD *)&v59);
    v63 = (_QWORD *)swift_allocObject(&unk_100263388, 56, 7);
    v63[2] = v61;
    v63[3] = v41;
    v63[4] = v43;
    v63[5] = v60;
    v63[6] = a1;
    *(_QWORD *)&aBlock.tx = sub_100158378;
    *(_QWORD *)&aBlock.ty = v63;
    *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
    *(_QWORD *)&aBlock.b = 1107296256;
    *(_QWORD *)&aBlock.c = sub_1001A2D60;
    *(_QWORD *)&aBlock.d = &unk_1002633A0;
    v64 = _Block_copy(&aBlock);
    v65 = aBlock.ty;
    v66 = v60;
    swift_unknownObjectRetain(a1, v67);
    v68 = v61;
    swift_release(*(_QWORD *)&v65);
    objc_msgSend(v55, "animateWithDuration:animations:completion:", v58, v64, v56);

    _Block_release(v64);
    _Block_release(v58);

    return;
  }

LABEL_9:
}

id sub_100157FA4(uint64_t a1, void *a2, double a3, double a4)
{
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *(void **)(a1 + OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle);
  v9 = 0x3FF0000000000000;
  v10 = 0;
  v11 = 0;
  v12 = 0x3FF0000000000000;
  v13 = 0;
  v14 = 0;
  objc_msgSend(v7, "setTransform:", &v9);
  v9 = 0x3FF0000000000000;
  v10 = 0;
  v11 = 0;
  v12 = 0x3FF0000000000000;
  v13 = 0;
  v14 = 0;
  objc_msgSend(a2, "setTransform:", &v9);
  objc_msgSend(a2, "setAlpha:", 1.0);
  return objc_msgSend(a2, "setCenter:", a3, a4);
}

id sub_100158054(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  void *v7;
  id result;
  CGAffineTransform v9;

  v6 = OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle;
  v7 = *(void **)(a1 + OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle);
  CGAffineTransformMakeScale(&v9, 0.001, 0.001);
  objc_msgSend(v7, "setTransform:", &v9);
  CGAffineTransformMakeScale(&v9, 0.001, 0.001);
  objc_msgSend(a2, "setTransform:", &v9);
  objc_msgSend(a2, "setCenter:", *(double *)(a1 + OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint), *(double *)(a1 + OBJC_IVAR____TtC13FTMInternal_418CircularTransition_startingPoint + 8));
  result = objc_msgSend(a2, "setAlpha:", 0.0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC13FTMInternal_418CircularTransition_transitionMode) == 2)
  {
    objc_msgSend(a3, "insertSubview:belowSubview:", a2, a2);
    return objc_msgSend(a3, "insertSubview:belowSubview:", *(_QWORD *)(a1 + v6), a2);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CircularTransition.CircularTransitionMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100158224 + 4 * byte_100240825[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100158258 + 4 * byte_100240820[v4]))();
}

uint64_t sub_100158258(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100158260(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100158268);
  return result;
}

uint64_t sub_100158274(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015827CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100158280(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100158288(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CircularTransition.CircularTransitionMode()
{
  return &type metadata for CircularTransition.CircularTransitionMode;
}

unint64_t sub_1001582A8()
{
  unint64_t result;

  result = qword_1002B4730;
  if (!qword_1002B4730)
  {
    result = swift_getWitnessTable(&unk_1002408F0, &type metadata for CircularTransition.CircularTransitionMode);
    atomic_store(result, (unint64_t *)&qword_1002B4730);
  }
  return result;
}

uint64_t sub_1001582EC()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

id sub_100158320()
{
  uint64_t v0;

  return sub_100158054(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10015832C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10015833C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100158344()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

id sub_100158378(char a1)
{
  double *v1;
  void *v3;
  double v4;
  double v5;
  void *v6;
  uint64_t v7;

  v3 = (void *)*((_QWORD *)v1 + 2);
  v4 = v1[3];
  v5 = v1[4];
  v7 = *((_QWORD *)v1 + 5);
  v6 = (void *)*((_QWORD *)v1 + 6);
  objc_msgSend(v3, "setCenter:", v4, v5);
  objc_msgSend(v3, "removeFromSuperview");
  objc_msgSend(*(id *)(v7 + OBJC_IVAR____TtC13FTMInternal_418CircularTransition_circle), "removeFromSuperview");
  return objc_msgSend(v6, "completeTransition:", a1 & 1);
}

uint64_t sub_1001583F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

id sub_100158420()
{
  uint64_t v0;

  return sub_100157FA4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_10015842C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_100158450(char a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), "completeTransition:", a1 & 1);
}

_QWORD *sub_100158480(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v23);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
    v7 = a3[7];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v12(v8, v9, v10);
    v13 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *((_BYTE *)v4 + v13) = *((_BYTE *)a2 + v13);
    v14 = a3[10];
    v15 = a3[11];
    v16 = (_QWORD *)((char *)v4 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = (char *)v4 + v15;
    v20 = (char *)a2 + v15;
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain(v18);
    if (v21(v20, 1, v10))
    {
      v22 = sub_100146438(&qword_1002B4168);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v12((uint64_t)v19, (uint64_t)v20, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v19, 0, 1, v10);
    }
    v24 = a3[13];
    *(_QWORD *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *(_QWORD *)((char *)v4 + v24) = *(uint64_t *)((char *)a2 + v24);
    v25 = a3[15];
    *(_QWORD *)((char *)v4 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    *(_QWORD *)((char *)v4 + v25) = *(uint64_t *)((char *)a2 + v25);
    v26 = a3[16];
    v27 = *(uint64_t *)((char *)a2 + v26);
    swift_errorRetain(v27);
    *(_QWORD *)((char *)v4 + v26) = v27;
    *((_BYTE *)v4 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  }
  return v4;
}

uint64_t sub_10015861C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v4 = a1 + a2[7];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  v8 = a1 + a2[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
    v7(v8, v5);
  return swift_errorRelease(*(_QWORD *)(a1 + a2[16]));
}

uint64_t sub_1001586B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = a3[7];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 16);
  v11(v7, v8, v9);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[10];
  v14 = a3[11];
  v15 = (_QWORD *)(a1 + v13);
  v16 = (_QWORD *)(a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = (void *)(a1 + v14);
  v19 = (const void *)(a2 + v14);
  v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain(v17);
  if (v20(v19, 1, v9))
  {
    v21 = sub_100146438(&qword_1002B4168);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v11(v18, v19, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
  }
  v22 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  v23 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  v24 = a3[16];
  v25 = *(_QWORD *)(a2 + v24);
  swift_errorRetain(v25);
  *(_QWORD *)(a1 + v24) = v25;
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_100158828(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t (*v20)(const void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = a3[7];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v12 = a3[10];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[11];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  v21 = v20((const void *)(a1 + v17), 1, v9);
  v22 = v20(v19, 1, v9);
  if (!v21)
  {
    if (!v22)
    {
      v11(v18, v19, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v18, v9);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v23 = sub_100146438(&qword_1002B4168);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v18, v19, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
LABEL_7:
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  v24 = a3[16];
  v25 = *(_QWORD *)(a1 + v24);
  v26 = *(_QWORD *)(a2 + v24);
  swift_errorRetain(v26);
  *(_QWORD *)(a1 + v24) = v26;
  swift_errorRelease(v25);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_100158A0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = a3[7];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a2 + v13, 1, v9))
  {
    v16 = sub_100146438(&qword_1002B4168);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v11(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  v17 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v18 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  v19 = a3[17];
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  return a1;
}

uint64_t sub_100158B5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t (*v22)(const void *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = a3[7];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[10];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[11];
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  v22 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  v23 = v22((const void *)(a1 + v19), 1, v9);
  v24 = v22(v21, 1, v9);
  if (!v23)
  {
    if (!v24)
    {
      v11(v20, v21, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v20, v9);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    v25 = sub_100146438(&qword_1002B4168);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v20, v21, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
LABEL_7:
  v26 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v26) = *(_QWORD *)(a2 + v26);
  v27 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  v28 = a3[16];
  v29 = *(_QWORD *)(a1 + v28);
  *(_QWORD *)(a1 + v28) = *(_QWORD *)(a2 + v28);
  swift_errorRelease(v29);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_100158D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100158D24);
}

uint64_t sub_100158D24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_100146438(&qword_1002B4168);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[10] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_100158DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100158DDC);
}

uint64_t sub_100158DDC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[10] + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_100146438(&qword_1002B4168);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[11];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for STransferMetrics(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B4800;
  if (!qword_1002B4800)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for STransferMetrics);
  return result;
}

void sub_100158EC0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[14];

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = &unk_100240948;
  v6[2] = &unk_100240960;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[5] = &unk_100240948;
    v6[6] = &unk_100240978;
    sub_100158F94(319);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      v6[8] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[9] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[10] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[11] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[12] = &unk_100240990;
      v6[13] = &unk_100240948;
      swift_initStructMetadata(a1, 256, 14, v6, a1 + 16);
    }
  }
}

void sub_100158F94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002B4810)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002B4810);
  }
}

void *sub_100158FE8()
{
  return &protocol witness table for Int;
}

uint64_t sub_100158FF4(char *a1, char *a2)
{
  return sub_100166F4C(*a1, *a2);
}

Swift::Int sub_100159000()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x4B4E494C4E574F44;
  else
    v2 = 0x4B4E494C5055;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10015907C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x4B4E494C4E574F44;
  else
    v2 = 0x4B4E494C5055;
  if (*v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1001590D4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x4B4E494C4E574F44;
  else
    v3 = 0x4B4E494C5055;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10015914C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100260208, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1001591A8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x4B4E494C5055;
  if (*v1)
    v2 = 0x4B4E494C4E574F44;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_1001591E4()
{
  id v0;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
  objc_msgSend(v0, "setAllowedUnits:", 224);
  objc_msgSend(v0, "setZeroFormattingBehavior:", 0x10000);

  qword_1002B47A0 = (uint64_t)v0;
}

double sub_10015924C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v15;

  v1 = sub_100146438(&qword_1002B4168);
  __chkstk_darwin(v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v15 - v9;
  v11 = type metadata accessor for STransferMetrics(0);
  v12 = v11;
  if (*(_BYTE *)(v0 + *(int *)(v11 + 68)) == 1)
  {
    sub_100159C2C(v0 + *(int *)(v11 + 44), (uint64_t)v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v3, v4);
      v8 = v10;
      goto LABEL_6;
    }
    v11 = sub_100159C74((uint64_t)v3);
  }
  static Date.now.getter(v11);
LABEL_6:
  v13 = Date.timeIntervalSince(_:)(v0 + *(int *)(v12 + 28));
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v13;
}

int *sub_1001593B0()
{
  uint64_t v0;
  int *result;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;

  result = (int *)type metadata accessor for STransferMetrics(0);
  v2 = *(_QWORD *)(v0 + result[15]);
  v3 = *(_QWORD *)(v0 + result[14]);
  v4 = __OFADD__(v2, v3);
  v5 = v2 + v3;
  if (v4)
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (!v5)
    return (int *)(uint64_t)0.0;
  v6 = *(_QWORD *)(v0 + result[13]);
  v7 = *(_QWORD *)(v0 + result[12]);
  v4 = __OFADD__(v6, v7);
  v8 = v6 + v7;
  if (v4)
    goto LABEL_12;
  v9 = (double)v8 / (double)v5 * 100.0;
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) != 0)
  {
    if (v9 > -9.22337204e18)
    {
      if (v9 < 9.22337204e18)
        return (int *)(uint64_t)v9;
      __break(1u);
      return (int *)(uint64_t)0.0;
    }
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

int *sub_10015945C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *result;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = sub_100146438(&qword_1002B4168);
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (int *)type metadata accessor for STransferMetrics(0);
  v13 = result[17];
  if ((*(_BYTE *)(v4 + v13) & 1) == 0)
  {
    v14 = result;
    *(_QWORD *)(v4 + result[12]) = a1;
    *(_QWORD *)(v4 + result[13]) = a3;
    *(_QWORD *)(v4 + result[14]) = a2;
    *(_QWORD *)(v4 + result[15]) = a4;
    if (*(_BYTE *)(v4 + 8) == 1)
    {
      if (a1 != a2)
        return result;
    }
    else if (a3 != a4)
    {
      return result;
    }
    static Date.now.getter(result);
    v15 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v11, 0, 1, v15);
    sub_100159F58((uint64_t)v11, v4 + v14[11]);
    *(_BYTE *)(v4 + v13) = 1;
    v16 = v14[16];
    result = (int *)swift_errorRelease(*(_QWORD *)(v4 + v16));
    *(_QWORD *)(v4 + v16) = 0;
  }
  return result;
}

void sub_100159584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  double v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int *v21;
  double v22;
  id v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  char *v29;
  void *object;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Swift::String v35;
  Swift::String v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  id v44;
  unint64_t v45;
  Swift::String v46;
  void *v47;
  void (*v48)(char *, uint64_t);
  Swift::String v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  Swift::String v59;
  int *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  unint64_t v67;

  v1 = v0;
  v2 = sub_100146438(&qword_1002B4878);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v60 - v7;
  v9 = sub_10015924C();
  if (qword_1002B39B8 != -1)
    swift_once(&qword_1002B39B8, sub_1001591E4);
  v10 = objc_msgSend((id)qword_1002B47A0, "stringFromTimeInterval:", v9);
  if (v10)
  {
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;

  }
  else
  {
    v66 = 0;
    v67 = 0xE000000000000000;
    Double.write<A>(to:)(&v66, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v9);
    v12 = v66;
    v14 = (void *)v67;
  }
  v15 = type metadata accessor for STransferMetrics(0);
  v16 = *(int *)(v15 + 48);
  v17 = *(_QWORD *)(v1 + *(int *)(v15 + 52));
  v18 = *(_QWORD *)(v1 + v16);
  v19 = __OFADD__(v17, v18);
  v20 = v17 + v18;
  if (v19)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v21 = (int *)v15;
  v22 = (double)v20;
  v63 = *(int *)(v15 + 52);
  v64 = v16;
  v62 = (id)objc_opt_self(NSUnitInformationStorage);
  v23 = objc_msgSend(v62, "bytes");
  v24 = sub_100159BA4();
  Measurement.init(value:unit:)(v23, v24, v22);
  v66 = 0;
  v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(71);
  v25._countAndFlagsBits = 123;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  v65 = v21;
  v26 = sub_100146438(&qword_1002B4888);
  v27._countAndFlagsBits = String.init<A>(describing:)(&v65, v26);
  v61 = v3;
  v28 = v2;
  v29 = v8;
  object = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(object);
  v31._countAndFlagsBits = 1029990688;
  v31._object = (void *)0xE400000000000000;
  String.append(_:)(v31);
  if (*(_BYTE *)(v1 + 8))
    v32 = 0x4B4E494C4E574F44;
  else
    v32 = 0x4B4E494C5055;
  if (*(_BYTE *)(v1 + 8))
    v33 = 0xE800000000000000;
  else
    v33 = 0xE600000000000000;
  v34 = v33;
  String.append(_:)(*(Swift::String *)&v32);
  swift_bridgeObjectRelease(v33);
  v35._countAndFlagsBits = 46;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  v65 = *(int **)v1;
  v60 = v21;
  v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v37 = v36._object;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v37);
  v38._object = (void *)0xEA00000000003D73;
  v38._countAndFlagsBits = 0x736572676F727020;
  String.append(_:)(v38);
  v65 = sub_1001593B0();
  v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v40 = v39._object;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v40);
  v41._countAndFlagsBits = 0x657370616C652025;
  v41._object = (void *)0xEA00000000003D64;
  String.append(_:)(v41);
  v42._countAndFlagsBits = v12;
  v42._object = v14;
  String.append(_:)(v42);
  swift_bridgeObjectRelease(v14);
  v43._object = (void *)0xEA00000000003D72;
  v43._countAndFlagsBits = 0x6566736E61727420;
  String.append(_:)(v43);
  v44 = objc_msgSend(v62, "megabytes");
  Measurement<>.converted(to:)();

  v45 = sub_100159BE0();
  v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v28, v45);
  v47 = v46._object;
  String.append(_:)(v46);
  swift_bridgeObjectRelease(v47);
  v48 = *(void (**)(char *, uint64_t))(v61 + 8);
  v48(v6, v28);
  v49._object = (void *)0xEA00000000003D65;
  v49._countAndFlagsBits = 0x74656C706D6F6320;
  String.append(_:)(v49);
  if (*(_BYTE *)(v1 + v60[17]))
    v50 = 1702195828;
  else
    v50 = 0x65736C6166;
  if (*(_BYTE *)(v1 + v60[17]))
    v51 = 0xE400000000000000;
  else
    v51 = 0xE500000000000000;
  v52 = v51;
  String.append(_:)(*(Swift::String *)&v50);
  swift_bridgeObjectRelease(v51);
  v53._countAndFlagsBits = 1030779936;
  v53._object = (void *)0xE400000000000000;
  String.append(_:)(v53);
  v54 = *(_QWORD *)(v1 + v63);
  v55 = *(_QWORD *)(v1 + v64);
  v19 = __OFADD__(v54, v55);
  v56 = v54 + v55;
  if (v19)
    goto LABEL_23;
  if ((unint64_t)(v56 - 0x1000000000000000) >> 61 == 7)
  {
    v57 = (double)(8 * v56);
    v58 = sub_10015924C();
    Double.write<A>(to:)(&v66, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v57 / v58 / 1000000.0);
    v59._countAndFlagsBits = 0x7D7370624DLL;
    v59._object = (void *)0xE500000000000000;
    String.append(_:)(v59);
    v48(v29, v28);
    return;
  }
LABEL_24:
  __break(1u);
}

void sub_100159A50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = v1;
  Hasher._combine(_:)(*(_QWORD *)v2);
  if (*(_BYTE *)(v2 + 8))
    v4 = 0x4B4E494C4E574F44;
  else
    v4 = 0x4B4E494C5055;
  if (*(_BYTE *)(v2 + 8))
    v5 = 0xE800000000000000;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  Hasher._combine(_:)(qword_100240B20[*(char *)(v2 + 9)]);
}

Swift::Int sub_100159ADC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_100159A50((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100159B1C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_100159A50((uint64_t)v2);
  return Hasher._finalize()();
}

unint64_t sub_100159B5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B4870;
  if (!qword_1002B4870)
  {
    v1 = type metadata accessor for STransferMetrics(255);
    result = swift_getWitnessTable(&unk_1002409E0, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4870);
  }
  return result;
}

unint64_t sub_100159BA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B4880;
  if (!qword_1002B4880)
  {
    v1 = objc_opt_self(NSUnitInformationStorage);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B4880);
  }
  return result;
}

unint64_t sub_100159BE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B4890;
  if (!qword_1002B4890)
  {
    v1 = sub_1001464C4(&qword_1002B4878);
    result = swift_getWitnessTable(&protocol conformance descriptor for Measurement<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4890);
  }
  return result;
}

uint64_t sub_100159C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100146438(&qword_1002B4168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100159C74(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100146438(&qword_1002B4168);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_100159CB4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v23;
  BOOL v24;
  uint64_t v26;

  v4 = type metadata accessor for STransferMetrics(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v26 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v26 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v26 - v14;
  v16 = *a1;
  v17 = *a2;
  sub_100159ED8((uint64_t)a1, (uint64_t)&v26 - v14);
  sub_100159ED8((uint64_t)a2, (uint64_t)v13);
  if (v16 == v17)
  {
    if (v15[8])
      v18 = 0x4B4E494C4E574F44;
    else
      v18 = 0x4B4E494C5055;
    if (v15[8])
      v19 = 0xE800000000000000;
    else
      v19 = 0xE600000000000000;
    if (v13[8])
      v20 = 0x4B4E494C4E574F44;
    else
      v20 = 0x4B4E494C5055;
    if (v13[8])
      v21 = 0xE800000000000000;
    else
      v21 = 0xE600000000000000;
    if (v18 == v20 && v19 == v21)
    {
      swift_bridgeObjectRelease_n(v19, 2);
      sub_100159F1C((uint64_t)v13);
      sub_100159F1C((uint64_t)v15);
      sub_100159ED8((uint64_t)a1, (uint64_t)v10);
      sub_100159ED8((uint64_t)a2, (uint64_t)v7);
    }
    else
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v20, v21, 0);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v21);
      sub_100159F1C((uint64_t)v13);
      sub_100159F1C((uint64_t)v15);
      sub_100159ED8((uint64_t)a1, (uint64_t)v10);
      sub_100159ED8((uint64_t)a2, (uint64_t)v7);
      v24 = 0;
      if ((v23 & 1) == 0)
        goto LABEL_23;
    }
    v24 = sub_100166F28(v10[9], v7[9]);
  }
  else
  {
    sub_100159F1C((uint64_t)v13);
    sub_100159F1C((uint64_t)v15);
    sub_100159ED8((uint64_t)a1, (uint64_t)v10);
    sub_100159ED8((uint64_t)a2, (uint64_t)v7);
    v24 = 0;
  }
LABEL_23:
  sub_100159F1C((uint64_t)v7);
  sub_100159F1C((uint64_t)v10);
  return v24;
}

uint64_t sub_100159ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for STransferMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100159F1C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for STransferMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100159F58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100146438(&qword_1002B4168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for STransferMetrics.SDirection(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for STransferMetrics.SDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10015A07C + 4 * byte_100240925[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10015A0B0 + 4 * byte_100240920[v4]))();
}

uint64_t sub_10015A0B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015A0B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015A0C0);
  return result;
}

uint64_t sub_10015A0CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015A0D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10015A0D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015A0E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10015A0EC(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for STransferMetrics.SDirection()
{
  return &type metadata for STransferMetrics.SDirection;
}

unint64_t sub_10015A10C()
{
  unint64_t result;

  result = qword_1002B4898;
  if (!qword_1002B4898)
  {
    result = swift_getWitnessTable(&unk_100240AF4, &type metadata for STransferMetrics.SDirection);
    atomic_store(result, (unint64_t *)&qword_1002B4898);
  }
  return result;
}

uint64_t destroy for SURLSessionModel(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for SURLSessionModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for SURLSessionModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  v8 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

__n128 initializeWithTake for SURLSessionModel(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SURLSessionModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

uint64_t getEnumTagSinglePayload for SURLSessionModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 82))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SURLSessionModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 82) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 82) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SURLSessionModel()
{
  return &type metadata for SURLSessionModel;
}

unint64_t sub_10015A424()
{
  unint64_t result;

  result = qword_1002B48A0;
  if (!qword_1002B48A0)
  {
    result = swift_getWitnessTable(&unk_100240C04, &type metadata for SDataTransferProperties.SDataSize);
    atomic_store(result, (unint64_t *)&qword_1002B48A0);
  }
  return result;
}

uint64_t sub_10015A468(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)&loc_10015A474 + dword_10015A5E4[a2]))();
}

uint64_t sub_10015A484(uint64_t a1)
{
  double v1;

  v1 = *(double *)&a1 * 1024.0;
  if ((~COERCE__INT64(*(double *)&a1 * 1024.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x10015A5C8);
  }
  if (v1 >= 9.22337204e18)
  {
    __break(1u);
    JUMPOUT(0x10015A4CCLL);
  }
  return (uint64_t)v1;
}

uint64_t sub_10015A5F8()
{
  return 1;
}

void sub_10015A604()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_10015A62C()
{
  return 12383;
}

void sub_10015A63C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10015A648(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015C73C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015A670(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015C73C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015A698()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10015A6C4 + 4 * byte_100240B70[*v0]))(0x7365747962, 0xE500000000000000);
}

uint64_t sub_10015A6C4()
{
  return 0x657479626F6C696BLL;
}

uint64_t sub_10015A70C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10015B7C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10015A730(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015C5E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015A758(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015C5E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015A780(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015C670();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015A7A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015C670();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015A7D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015C6F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015A7F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015C6F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015A820(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015C6B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015A848(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015C6B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015A870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease(0xE200000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10015A8EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015C62C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015A914(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015C62C();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_10015A93C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int sub_10015A97C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_10015A9B8()
{
  return 0x72546F5461746164;
}

uint64_t sub_10015A9DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x72546F5461746164 && a2 == 0xEE00726566736E61)
  {
    result = swift_bridgeObjectRelease(0xEE00726566736E61);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72546F5461746164, 0xEE00726566736E61, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10015AA94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015BDFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015AABC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10015BDFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10015AAE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v19[5];
  __int16 v20;

  v1 = v0;
  v2 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v2);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = JSONEncoder.init()();
  v7 = *(_OWORD *)(v1 + 48);
  v19[2] = *(_OWORD *)(v1 + 32);
  v19[3] = v7;
  v19[4] = *(_OWORD *)(v1 + 64);
  v20 = *(_WORD *)(v1 + 80);
  v8 = *(_OWORD *)(v1 + 16);
  v19[0] = *(_OWORD *)v1;
  v19[1] = v8;
  v9 = sub_10015B6C0();
  v10 = dispatch thunk of JSONEncoder.encode<A>(_:)(v19, &type metadata for SURLSessionModel, v9);
  v12 = v11;
  swift_release(v6);
  static String.Encoding.utf8.getter(v13);
  v14 = String.init(data:encoding:)(v10, v12, v4);
  v16 = v15;
  sub_1001463B0(v10, v12);
  if (!v16)
    return 32123;
  return v14;
}

uint64_t sub_10015AC10@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[88];

  sub_10015B9F4(*a1, a1[1], (uint64_t)v4);
  return sub_10015BBF0((uint64_t)v4, a2);
}

uint64_t sub_10015AC50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10015AAE4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10015AC74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v0 = sub_10015AAE4();
  v2 = v1;
  v4 = sub_10015AAE4();
  v5 = v3;
  if (v0 == v4 && v2 == v3)
  {
    v6 = 1;
    v5 = v2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v2, v4, v3, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  return v6 & 1;
}

Swift::Int sub_10015AD00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  v0 = sub_10015AAE4();
  v2 = v1;
  String.hash(into:)(v4, v0, v1);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_10015AD58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_10015AAE4();
  v4 = v3;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_10015AD94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  v1 = sub_10015AAE4();
  v3 = v2;
  String.hash(into:)(v5, v1, v2);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10015ADE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10015BC90();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10015AE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10015BC90();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10015AE90(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;

  v6 = sub_100146438(&qword_1002B48F0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_100146508(a1, v10);
  v12 = sub_10015BDFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SDataTransferProperties.CodingKeys, &type metadata for SDataTransferProperties.CodingKeys, v12, v10, v11);
  v16 = a2;
  v17 = a3;
  v13 = sub_10015BE84();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v14, v6, &type metadata for SDataTransferProperties.SDataSize, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

_QWORD *sub_10015AF98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  char v5;

  result = sub_10015BCD4(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_10015AFC4(_QWORD *a1)
{
  uint64_t v1;

  return sub_10015AE90(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t sub_10015AFE0(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_10015B008 + 4 * byte_100240B75[*(unsigned __int8 *)(a1 + 8)]))();
}

BOOL sub_10015B008@<W0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return !a1 && v1 == v2;
}

Swift::Int sub_10015B080()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD v4[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0);
  sub_10015B558((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_10015B0CC(uint64_t a1)
{
  uint64_t v1;

  sub_10015B558(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

Swift::Int sub_10015B0D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD v5[9];

  v2 = *(_QWORD *)v1;
  v3 = *(_BYTE *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  sub_10015B558((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

void sub_10015B120(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[10];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v16 = a3;
  v17 = a2;
  v4 = sub_100146438(&qword_1002B4968);
  v15[8] = *(_QWORD *)(v4 - 8);
  v15[9] = v4;
  __chkstk_darwin(v4);
  v15[7] = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100146438(&qword_1002B4970);
  v15[5] = *(_QWORD *)(v6 - 8);
  v15[6] = v6;
  __chkstk_darwin(v6);
  v15[4] = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100146438(&qword_1002B4978);
  v15[2] = *(_QWORD *)(v8 - 8);
  v15[3] = v8;
  __chkstk_darwin(v8);
  v9 = sub_100146438(&qword_1002B4980);
  v15[0] = *(_QWORD *)(v9 - 8);
  v15[1] = v9;
  __chkstk_darwin(v9);
  v10 = sub_100146438(&qword_1002B4988);
  __chkstk_darwin(v10);
  v11 = sub_100146438(&qword_1002B4990);
  v18 = *(_QWORD *)(v11 - 8);
  v19 = v11;
  __chkstk_darwin(v11);
  v12 = a1[3];
  v13 = a1[4];
  sub_100146508(a1, v12);
  v14 = sub_10015C5E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SDataTransferProperties.SDataSize.CodingKeys, &type metadata for SDataTransferProperties.SDataSize.CodingKeys, v14, v12, v13);
  __asm { BR              X10 }
}

uint64_t sub_10015B318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v4 - 85) = 0;
  v5 = sub_10015C73C();
  v6 = *(_QWORD *)(v4 - 104);
  ((void (*)(ValueMetadata *, uint64_t, uint64_t, ValueMetadata *, unint64_t))KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:))(&type metadata for SDataTransferProperties.SDataSize.BytesCodingKeys, v4 - 85, v6, &type metadata for SDataTransferProperties.SDataSize.BytesCodingKeys, v5);
  ((void (*)(_QWORD))KeyedEncodingContainer.encode(_:forKey:))(*(_QWORD *)(v4 - 120));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 112) + 8))(v0, v6);
}

void sub_10015B558(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

void sub_10015B588()
{
  Swift::UInt64 v0;

  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v0);
}

uint64_t sub_10015B5D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  result = sub_10015BEC8(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
  }
  return result;
}

void sub_10015B5FC(_QWORD *a1)
{
  uint64_t v1;

  sub_10015B120(a1, *(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8));
}

uint64_t sub_10015B618(uint64_t a1)
{
  return sub_10015B704(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

unint64_t sub_10015B634()
{
  unint64_t result;

  result = qword_1002B48A8;
  if (!qword_1002B48A8)
  {
    result = swift_getWitnessTable(&unk_100240CBC, &type metadata for SDataTransferProperties);
    atomic_store(result, (unint64_t *)&qword_1002B48A8);
  }
  return result;
}

unint64_t sub_10015B67C()
{
  unint64_t result;

  result = qword_1002B48B0;
  if (!qword_1002B48B0)
  {
    result = swift_getWitnessTable(&unk_100240DC4, &type metadata for SURLSessionModel);
    atomic_store(result, (unint64_t *)&qword_1002B48B0);
  }
  return result;
}

unint64_t sub_10015B6C0()
{
  unint64_t result;

  result = qword_1002B48B8;
  if (!qword_1002B48B8)
  {
    result = swift_getWitnessTable(&unk_100240D34, &type metadata for SURLSessionModel);
    atomic_store(result, (unint64_t *)&qword_1002B48B8);
  }
  return result;
}

uint64_t sub_10015B704(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_10015B720 + 4 * byte_100240B84[a2]))();
}

BOOL sub_10015B720(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return !a4 && a1 == a3;
}

BOOL sub_10015B730(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return a4 == 1 && *(double *)&a1 == *(double *)&a3;
}

BOOL sub_10015B754(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return a4 == 2 && *(double *)&a1 == *(double *)&a3;
}

BOOL sub_10015B778(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return a4 == 3 && *(double *)&a1 == *(double *)&a3;
}

BOOL sub_10015B79C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return a4 == 4 && *(double *)&a1 == *(double *)&a3;
}

uint64_t sub_10015B7C0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x7365747962 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365747962, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657479626F6C696BLL && a2 == 0xE900000000000073)
  {
    v7 = 0xE900000000000073;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657479626F6C696BLL, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x657479626167656DLL && a2 == 0xE900000000000073)
  {
    v8 = 0xE900000000000073;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657479626167656DLL, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6579746261676967 && a2 == 0xE900000000000073)
  {
    v9 = 0xE900000000000073;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6579746261676967, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6574796261726574 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease(0xE900000000000073);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574796261726574, 0xE900000000000073, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_10015B9F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  int v30;
  _QWORD v32[3];
  unsigned __int16 v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  char v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  unsigned __int8 v42;
  char v43;

  v6 = type metadata accessor for String.Encoding(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10016A018((uint64_t)&off_100260258);
  swift_bridgeObjectRelease(v10);
  v11 = swift_bridgeObjectRelease(0x8000000100211630);
  static String.Encoding.utf8.getter(v11);
  v12 = String.data(using:allowLossyConversion:)(v9, 0, a1, a2);
  v14 = v13;
  swift_bridgeObjectRelease(a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v14 >> 60 == 15)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    result = 0;
  }
  else
  {
    v15 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    v16 = JSONDecoder.init()();
    v17 = sub_10015BC38();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v32, &type metadata for SURLSessionModel, v12, v14, &type metadata for SURLSessionModel, v17);
    sub_10015BC7C(v12, v14);
    swift_release(v16);
    v18 = LOBYTE(v32[0]);
    v19 = v32[1];
    v20 = v32[2];
    v22 = v35;
    v23 = v36;
    v25 = v39;
    v26 = v40;
    v27 = v41;
    v21 = v33 | ((unint64_t)v34 << 16);
    if (v38)
      v29 = 256;
    else
      v29 = 0;
    v24 = v29 | v37;
    if (v43)
      v30 = 256;
    else
      v30 = 0;
    result = v30 | v42;
  }
  *(_QWORD *)a3 = v18;
  *(_QWORD *)(a3 + 8) = v19;
  *(_QWORD *)(a3 + 16) = v20;
  *(_QWORD *)(a3 + 24) = v21;
  *(_QWORD *)(a3 + 32) = v22;
  *(_QWORD *)(a3 + 40) = v23;
  *(_QWORD *)(a3 + 48) = v24;
  *(_QWORD *)(a3 + 56) = v25;
  *(_QWORD *)(a3 + 64) = v26;
  *(_QWORD *)(a3 + 72) = v27;
  *(_WORD *)(a3 + 80) = result;
  return result;
}

uint64_t sub_10015BBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100146438(&qword_1002B48C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10015BC38()
{
  unint64_t result;

  result = qword_1002B48C8;
  if (!qword_1002B48C8)
  {
    result = swift_getWitnessTable(&unk_100240D5C, &type metadata for SURLSessionModel);
    atomic_store(result, (unint64_t *)&qword_1002B48C8);
  }
  return result;
}

uint64_t sub_10015BC7C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1001463B0(a1, a2);
  return a1;
}

unint64_t sub_10015BC90()
{
  unint64_t result;

  result = qword_1002B48D0;
  if (!qword_1002B48D0)
  {
    result = swift_getWitnessTable(&unk_100240DEC, &type metadata for SURLSessionModel);
    atomic_store(result, (unint64_t *)&qword_1002B48D0);
  }
  return result;
}

_QWORD *sub_10015BCD4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  v3 = sub_100146438(&qword_1002B48D8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_100146508(a1, v7);
  v10 = sub_10015BDFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SDataTransferProperties.CodingKeys, &type metadata for SDataTransferProperties.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_10014652C(a1);
  }
  else
  {
    v11 = sub_10015BE40();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for SDataTransferProperties.SDataSize, v12, v3, &type metadata for SDataTransferProperties.SDataSize, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    sub_10014652C(a1);
  }
  return v9;
}

unint64_t sub_10015BDFC()
{
  unint64_t result;

  result = qword_1002B48E0;
  if (!qword_1002B48E0)
  {
    result = swift_getWitnessTable(&unk_1002415C0, &type metadata for SDataTransferProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B48E0);
  }
  return result;
}

unint64_t sub_10015BE40()
{
  unint64_t result;

  result = qword_1002B48E8;
  if (!qword_1002B48E8)
  {
    result = swift_getWitnessTable(&unk_100240C54, &type metadata for SDataTransferProperties.SDataSize);
    atomic_store(result, (unint64_t *)&qword_1002B48E8);
  }
  return result;
}

unint64_t sub_10015BE84()
{
  unint64_t result;

  result = qword_1002B48F8;
  if (!qword_1002B48F8)
  {
    result = swift_getWitnessTable(&unk_100240C2C, &type metadata for SDataTransferProperties.SDataSize);
    atomic_store(result, (unint64_t *)&qword_1002B48F8);
  }
  return result;
}

uint64_t sub_10015BEC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;

  v29 = sub_100146438(&qword_1002B4900);
  v32 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v39 = (char *)v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100146438(&qword_1002B4908);
  v4 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  v35 = v4;
  __chkstk_darwin(v3);
  v38 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100146438(&qword_1002B4910);
  v33 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v37 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100146438(&qword_1002B4918);
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  __chkstk_darwin(v7);
  v36 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100146438(&qword_1002B4920);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = sub_100146438(&qword_1002B4928);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v15 = a1[4];
  v40 = a1;
  sub_100146508(a1, v16);
  v17 = sub_10015C5E8();
  v18 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SDataTransferProperties.SDataSize.CodingKeys, &type metadata for SDataTransferProperties.SDataSize.CodingKeys, v17, v16, v15);
  if (!v18)
  {
    v27[0] = v10;
    v27[1] = v9;
    v27[2] = 0;
    v41 = v12;
    v19 = KeyedDecodingContainer.allKeys.getter(v11);
    v20 = v19;
    if (*(_QWORD *)(v19 + 16) == 1)
      __asm { BR              X9 }
    v21 = v11;
    v11 = type metadata accessor for DecodingError(0);
    swift_allocError(v11, &protocol witness table for DecodingError, 0, 0);
    v23 = v22;
    sub_100146438(&qword_1002B4938);
    *v23 = &type metadata for SDataTransferProperties.SDataSize;
    v24 = KeyedDecodingContainer.codingPath.getter(v21);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v24, 0xD00000000000002BLL, 0x8000000100211650, 0);
    v25 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v23, enum case for DecodingError.typeMismatch(_:), v11);
    swift_willThrow(v25);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v21);
  }
  sub_10014652C(v40);
  return v11;
}

void sub_10015C2A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v4 - 84) = 1;
  v5 = sub_10015C6F8();
  v6 = *(_QWORD *)(v4 - 208);
  v7 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for SDataTransferProperties.SDataSize.KilobytesCodingKeys, v4 - 84, v0, &type metadata for SDataTransferProperties.SDataSize.KilobytesCodingKeys, v5);
  if (!v6)
  {
    v8 = *(_QWORD *)(v4 - 176);
    KeyedDecodingContainer.decode(_:forKey:)(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 184) + 8))(v1, v8);
    swift_bridgeObjectRelease(v3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v2, v0);
    sub_10014652C(*(_QWORD **)(v4 - 104));
    JUMPOUT(0x10015C274);
  }
  swift_bridgeObjectRelease(v3);
  JUMPOUT(0x10015C268);
}

void sub_10015C344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v5 - 120) = v0;
  *(_BYTE *)(v5 - 83) = 2;
  v6 = sub_10015C6B4();
  v7 = *(_QWORD *)(v5 - 208);
  v8 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for SDataTransferProperties.SDataSize.MegabytesCodingKeys, v5 - 83, v1, &type metadata for SDataTransferProperties.SDataSize.MegabytesCodingKeys, v6);
  if (!v7)
  {
    v9 = *(_QWORD *)(v5 - 200);
    KeyedDecodingContainer.decode(_:forKey:)(v8, v9);
    v10 = *(_QWORD *)(v5 - 96);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 160) + 8))(v3, v9);
    swift_bridgeObjectRelease(v4);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v1);
    JUMPOUT(0x10015C5E0);
  }
  swift_bridgeObjectRelease(v4);
  JUMPOUT(0x10015C268);
}

void sub_10015C3D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v4 - 82) = 3;
  v5 = sub_10015C670();
  v6 = v3;
  v7 = *(_QWORD *)(v4 - 208);
  v8 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for SDataTransferProperties.SDataSize.GigabtyesCodingKeys, v4 - 82, v0, &type metadata for SDataTransferProperties.SDataSize.GigabtyesCodingKeys, v5);
  if (v7)
    JUMPOUT(0x10015C418);
  v9 = v0;
  v10 = *(_QWORD *)(v4 - 152);
  KeyedDecodingContainer.decode(_:forKey:)(v8, v10);
  v11 = *(_QWORD *)(v4 - 96);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 144) + 8))(v6, v10);
  swift_bridgeObjectRelease(v2);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v9);
  JUMPOUT(0x10015C5DCLL);
}

void sub_10015C434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 120) = v0;
  *(_BYTE *)(v4 - 81) = 4;
  v5 = sub_10015C62C();
  v6 = *(_QWORD *)(v4 - 208);
  v7 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for SDataTransferProperties.SDataSize.TerabytesCodingKeys, v4 - 81, v1, &type metadata for SDataTransferProperties.SDataSize.TerabytesCodingKeys, v5);
  if (v6)
  {
    swift_bridgeObjectRelease(v3);
    JUMPOUT(0x10015C524);
  }
  v8 = *(_QWORD *)(v4 - 192);
  KeyedDecodingContainer.decode(_:forKey:)(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 168) + 8))(v2, v8);
  swift_bridgeObjectRelease(v3);
  JUMPOUT(0x10015C5CCLL);
}

unint64_t sub_10015C5E8()
{
  unint64_t result;

  result = qword_1002B4930;
  if (!qword_1002B4930)
  {
    result = swift_getWitnessTable(&unk_100241570, &type metadata for SDataTransferProperties.SDataSize.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4930);
  }
  return result;
}

unint64_t sub_10015C62C()
{
  unint64_t result;

  result = qword_1002B4940;
  if (!qword_1002B4940)
  {
    result = swift_getWitnessTable(&unk_100241520, &type metadata for SDataTransferProperties.SDataSize.TerabytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4940);
  }
  return result;
}

unint64_t sub_10015C670()
{
  unint64_t result;

  result = qword_1002B4948;
  if (!qword_1002B4948)
  {
    result = swift_getWitnessTable(&unk_1002414D0, &type metadata for SDataTransferProperties.SDataSize.GigabtyesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4948);
  }
  return result;
}

unint64_t sub_10015C6B4()
{
  unint64_t result;

  result = qword_1002B4950;
  if (!qword_1002B4950)
  {
    result = swift_getWitnessTable(&unk_100241480, &type metadata for SDataTransferProperties.SDataSize.MegabytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4950);
  }
  return result;
}

unint64_t sub_10015C6F8()
{
  unint64_t result;

  result = qword_1002B4958;
  if (!qword_1002B4958)
  {
    result = swift_getWitnessTable(&unk_100241430, &type metadata for SDataTransferProperties.SDataSize.KilobytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4958);
  }
  return result;
}

unint64_t sub_10015C73C()
{
  unint64_t result;

  result = qword_1002B4960;
  if (!qword_1002B4960)
  {
    result = swift_getWitnessTable(&unk_1002413E0, &type metadata for SDataTransferProperties.SDataSize.BytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4960);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SDataTransferProperties.SDataSize.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10015C7CC + 4 * byte_100240B93[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10015C800 + 4 * byte_100240B8E[v4]))();
}

uint64_t sub_10015C800(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015C808(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015C810);
  return result;
}

uint64_t sub_10015C81C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015C824);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10015C828(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015C830(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.SDataSize.CodingKeys()
{
  return &type metadata for SDataTransferProperties.SDataSize.CodingKeys;
}

uint64_t sub_10015C858()
{
  return 0;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.SDataSize.BytesCodingKeys()
{
  return &type metadata for SDataTransferProperties.SDataSize.BytesCodingKeys;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.SDataSize.KilobytesCodingKeys()
{
  return &type metadata for SDataTransferProperties.SDataSize.KilobytesCodingKeys;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.SDataSize.MegabytesCodingKeys()
{
  return &type metadata for SDataTransferProperties.SDataSize.MegabytesCodingKeys;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.SDataSize.GigabtyesCodingKeys()
{
  return &type metadata for SDataTransferProperties.SDataSize.GigabtyesCodingKeys;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.SDataSize.TerabytesCodingKeys()
{
  return &type metadata for SDataTransferProperties.SDataSize.TerabytesCodingKeys;
}

uint64_t getEnumTagSinglePayload for Database(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s13FTMInternal_423SDataTransferPropertiesV9SDataSizeO15BytesCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10015C940 + 4 * byte_100240B98[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10015C960 + 4 * byte_100240B9D[v4]))();
}

_BYTE *sub_10015C940(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10015C960(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10015C968(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10015C970(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10015C978(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10015C980(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.CodingKeys()
{
  return &type metadata for SDataTransferProperties.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for SDataTransferProperties.SDataSize(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t sub_10015C9B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_10015C9C0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SDataTransferProperties.SDataSize()
{
  return &type metadata for SDataTransferProperties.SDataSize;
}

uint64_t _s13FTMInternal_423SDataTransferPropertiesV9SDataSizeOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s13FTMInternal_423SDataTransferPropertiesV9SDataSizeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SDataTransferProperties()
{
  return &type metadata for SDataTransferProperties;
}

unint64_t sub_10015CA78()
{
  unint64_t result;

  result = qword_1002B4998;
  if (!qword_1002B4998)
  {
    result = swift_getWitnessTable(&unk_100240F68, &type metadata for SDataTransferProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4998);
  }
  return result;
}

unint64_t sub_10015CAC0()
{
  unint64_t result;

  result = qword_1002B49A0;
  if (!qword_1002B49A0)
  {
    result = swift_getWitnessTable(&unk_100241020, &type metadata for SDataTransferProperties.SDataSize.TerabytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B49A0);
  }
  return result;
}

unint64_t sub_10015CB08()
{
  unint64_t result;

  result = qword_1002B49A8;
  if (!qword_1002B49A8)
  {
    result = swift_getWitnessTable(&unk_1002410D8, &type metadata for SDataTransferProperties.SDataSize.GigabtyesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B49A8);
  }
  return result;
}

unint64_t sub_10015CB50()
{
  unint64_t result;

  result = qword_1002B49B0;
  if (!qword_1002B49B0)
  {
    result = swift_getWitnessTable(&unk_100241190, &type metadata for SDataTransferProperties.SDataSize.MegabytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B49B0);
  }
  return result;
}

unint64_t sub_10015CB98()
{
  unint64_t result;

  result = qword_1002B49B8;
  if (!qword_1002B49B8)
  {
    result = swift_getWitnessTable(&unk_100241248, &type metadata for SDataTransferProperties.SDataSize.KilobytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B49B8);
  }
  return result;
}

unint64_t sub_10015CBE0()
{
  unint64_t result;

  result = qword_1002B49C0;
  if (!qword_1002B49C0)
  {
    result = swift_getWitnessTable(&unk_100241300, &type metadata for SDataTransferProperties.SDataSize.BytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B49C0);
  }
  return result;
}

unint64_t sub_10015CC28()
{
  unint64_t result;

  result = qword_1002B49C8;
  if (!qword_1002B49C8)
  {
    result = swift_getWitnessTable(&unk_1002413B8, &type metadata for SDataTransferProperties.SDataSize.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B49C8);
  }
  return result;
}

unint64_t sub_10015CC70()
{
  unint64_t result;

  result = qword_1002B49D0;
  if (!qword_1002B49D0)
  {
    result = swift_getWitnessTable(&unk_100241270, &type metadata for SDataTransferProperties.SDataSize.BytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B49D0);
  }
  return result;
}

unint64_t sub_10015CCB8()
{
  unint64_t result;

  result = qword_1002B49D8;
  if (!qword_1002B49D8)
  {
    result = swift_getWitnessTable(&unk_100241298, &type metadata for SDataTransferProperties.SDataSize.BytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B49D8);
  }
  return result;
}

unint64_t sub_10015CD00()
{
  unint64_t result;

  result = qword_1002B49E0;
  if (!qword_1002B49E0)
  {
    result = swift_getWitnessTable(&unk_1002411B8, &type metadata for SDataTransferProperties.SDataSize.KilobytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B49E0);
  }
  return result;
}

unint64_t sub_10015CD48()
{
  unint64_t result;

  result = qword_1002B49E8;
  if (!qword_1002B49E8)
  {
    result = swift_getWitnessTable(&unk_1002411E0, &type metadata for SDataTransferProperties.SDataSize.KilobytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B49E8);
  }
  return result;
}

unint64_t sub_10015CD90()
{
  unint64_t result;

  result = qword_1002B49F0;
  if (!qword_1002B49F0)
  {
    result = swift_getWitnessTable(&unk_100241100, &type metadata for SDataTransferProperties.SDataSize.MegabytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B49F0);
  }
  return result;
}

unint64_t sub_10015CDD8()
{
  unint64_t result;

  result = qword_1002B49F8;
  if (!qword_1002B49F8)
  {
    result = swift_getWitnessTable(&unk_100241128, &type metadata for SDataTransferProperties.SDataSize.MegabytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B49F8);
  }
  return result;
}

unint64_t sub_10015CE20()
{
  unint64_t result;

  result = qword_1002B4A00;
  if (!qword_1002B4A00)
  {
    result = swift_getWitnessTable(&unk_100241048, &type metadata for SDataTransferProperties.SDataSize.GigabtyesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4A00);
  }
  return result;
}

unint64_t sub_10015CE68()
{
  unint64_t result;

  result = qword_1002B4A08;
  if (!qword_1002B4A08)
  {
    result = swift_getWitnessTable(&unk_100241070, &type metadata for SDataTransferProperties.SDataSize.GigabtyesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4A08);
  }
  return result;
}

unint64_t sub_10015CEB0()
{
  unint64_t result;

  result = qword_1002B4A10;
  if (!qword_1002B4A10)
  {
    result = swift_getWitnessTable(&unk_100240F90, &type metadata for SDataTransferProperties.SDataSize.TerabytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4A10);
  }
  return result;
}

unint64_t sub_10015CEF8()
{
  unint64_t result;

  result = qword_1002B4A18;
  if (!qword_1002B4A18)
  {
    result = swift_getWitnessTable(&unk_100240FB8, &type metadata for SDataTransferProperties.SDataSize.TerabytesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4A18);
  }
  return result;
}

unint64_t sub_10015CF40()
{
  unint64_t result;

  result = qword_1002B4A20;
  if (!qword_1002B4A20)
  {
    result = swift_getWitnessTable(&unk_100241328, &type metadata for SDataTransferProperties.SDataSize.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4A20);
  }
  return result;
}

unint64_t sub_10015CF88()
{
  unint64_t result;

  result = qword_1002B4A28;
  if (!qword_1002B4A28)
  {
    result = swift_getWitnessTable(&unk_100241350, &type metadata for SDataTransferProperties.SDataSize.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4A28);
  }
  return result;
}

unint64_t sub_10015CFD0()
{
  unint64_t result;

  result = qword_1002B4A30;
  if (!qword_1002B4A30)
  {
    result = swift_getWitnessTable(&unk_100240ED8, &type metadata for SDataTransferProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4A30);
  }
  return result;
}

unint64_t sub_10015D018()
{
  unint64_t result;

  result = qword_1002B4A38;
  if (!qword_1002B4A38)
  {
    result = swift_getWitnessTable(&unk_100240F00, &type metadata for SDataTransferProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4A38);
  }
  return result;
}

uint64_t sub_10015D060()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100241678);
  v2 = swift_getKeyPath(&unk_1002416A0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

void (*sub_10015D0D0(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_100241678);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_1002416A0);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_10015D148;
}

void sub_10015D148(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release(v2);
  swift_release(v3);
  free(v1);
}

uint64_t sub_10015D194(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v2 = type metadata accessor for STransferMetrics(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v30 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v28 - v7;
  result = __chkstk_darwin(v6);
  v11 = (char *)&v28 - v10;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + 64);
  v31 = a1 + 64;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = _swiftEmptyArrayStorage;
  v33 = _swiftEmptyArrayStorage;
  v17 = v15 & v13;
  v32 = (unint64_t)(v14 + 63) >> 6;
  if ((v15 & v13) != 0)
    goto LABEL_6;
LABEL_7:
  v20 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v20 < v32)
    {
      v21 = *(_QWORD *)(v31 + 8 * v20);
      ++v12;
      if (v21)
        goto LABEL_22;
      v12 = v20 + 1;
      if (v20 + 1 >= v32)
        goto LABEL_33;
      v21 = *(_QWORD *)(v31 + 8 * v12);
      if (v21)
        goto LABEL_22;
      v12 = v20 + 2;
      if (v20 + 2 >= v32)
        goto LABEL_33;
      v21 = *(_QWORD *)(v31 + 8 * v12);
      if (v21)
        goto LABEL_22;
      v12 = v20 + 3;
      if (v20 + 3 >= v32)
        goto LABEL_33;
      v21 = *(_QWORD *)(v31 + 8 * v12);
      if (v21)
      {
LABEL_22:
        v17 = (v21 - 1) & v21;
        for (i = __clz(__rbit64(v21)) + (v12 << 6); ; i = v18 | (v12 << 6))
        {
          v23 = *(_QWORD *)(v3 + 72);
          sub_100159ED8(*(_QWORD *)(a1 + 56) + v23 * i, (uint64_t)v8);
          sub_10015FF74((uint64_t)v8, (uint64_t)v11);
          if ((v11[8] & 1) != 0)
          {
            v24 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4B4E494C4E574F44, 0xE800000000000000, 0x4B4E494C5055, 0xE600000000000000, 0);
            swift_bridgeObjectRelease(0xE800000000000000);
            if ((v24 & 1) == 0)
            {
              result = sub_100159F1C((uint64_t)v11);
              if (!v17)
                goto LABEL_7;
              goto LABEL_6;
            }
          }
          else
          {
            swift_bridgeObjectRelease(0xE600000000000000);
          }
          sub_10015FF74((uint64_t)v11, v30);
          if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
            sub_100195A08(0, v16[2] + 1, 1);
          v16 = v33;
          v26 = v33[2];
          v25 = v33[3];
          v27 = v26 + 1;
          if (v26 >= v25 >> 1)
          {
            v29 = v26 + 1;
            sub_100195A08(v25 > 1, v26 + 1, 1);
            v27 = v29;
            v16 = v33;
          }
          v16[2] = v27;
          result = sub_10015FF74(v30, (uint64_t)v16+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ v26 * v23);
          if (!v17)
            goto LABEL_7;
LABEL_6:
          v18 = __clz(__rbit64(v17));
          v17 &= v17 - 1;
        }
      }
      v22 = v20 + 4;
      if (v22 < v32)
      {
        v21 = *(_QWORD *)(v31 + 8 * v22);
        if (v21)
        {
          v12 = v22;
          goto LABEL_22;
        }
        while (1)
        {
          v12 = v22 + 1;
          if (__OFADD__(v22, 1))
            goto LABEL_35;
          if (v12 >= v32)
            break;
          v21 = *(_QWORD *)(v31 + 8 * v12);
          ++v22;
          if (v21)
            goto LABEL_22;
        }
      }
    }
LABEL_33:
    swift_release(a1);
    return (uint64_t)v16;
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_10015D4B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v2 = type metadata accessor for STransferMetrics(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v30 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v28 - v7;
  result = __chkstk_darwin(v6);
  v11 = (char *)&v28 - v10;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + 64);
  v31 = a1 + 64;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = _swiftEmptyArrayStorage;
  v33 = _swiftEmptyArrayStorage;
  v17 = v15 & v13;
  v32 = (unint64_t)(v14 + 63) >> 6;
  if ((v15 & v13) != 0)
    goto LABEL_6;
LABEL_7:
  v20 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v20 < v32)
    {
      v21 = *(_QWORD *)(v31 + 8 * v20);
      ++v12;
      if (v21)
        goto LABEL_22;
      v12 = v20 + 1;
      if (v20 + 1 >= v32)
        goto LABEL_33;
      v21 = *(_QWORD *)(v31 + 8 * v12);
      if (v21)
        goto LABEL_22;
      v12 = v20 + 2;
      if (v20 + 2 >= v32)
        goto LABEL_33;
      v21 = *(_QWORD *)(v31 + 8 * v12);
      if (v21)
        goto LABEL_22;
      v12 = v20 + 3;
      if (v20 + 3 >= v32)
        goto LABEL_33;
      v21 = *(_QWORD *)(v31 + 8 * v12);
      if (v21)
      {
LABEL_22:
        v17 = (v21 - 1) & v21;
        for (i = __clz(__rbit64(v21)) + (v12 << 6); ; i = v18 | (v12 << 6))
        {
          v23 = *(_QWORD *)(v3 + 72);
          sub_100159ED8(*(_QWORD *)(a1 + 56) + v23 * i, (uint64_t)v8);
          sub_10015FF74((uint64_t)v8, (uint64_t)v11);
          if (v11[8] == 1)
          {
            swift_bridgeObjectRelease(0xE800000000000000);
          }
          else
          {
            v24 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4B4E494C5055, 0xE600000000000000, 0x4B4E494C4E574F44, 0xE800000000000000, 0);
            swift_bridgeObjectRelease(0xE600000000000000);
            if ((v24 & 1) == 0)
            {
              result = sub_100159F1C((uint64_t)v11);
              if (!v17)
                goto LABEL_7;
              goto LABEL_6;
            }
          }
          sub_10015FF74((uint64_t)v11, v30);
          if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
            sub_100195A08(0, v16[2] + 1, 1);
          v16 = v33;
          v26 = v33[2];
          v25 = v33[3];
          v27 = v26 + 1;
          if (v26 >= v25 >> 1)
          {
            v29 = v26 + 1;
            sub_100195A08(v25 > 1, v26 + 1, 1);
            v27 = v29;
            v16 = v33;
          }
          v16[2] = v27;
          result = sub_10015FF74(v30, (uint64_t)v16+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ v26 * v23);
          if (!v17)
            goto LABEL_7;
LABEL_6:
          v18 = __clz(__rbit64(v17));
          v17 &= v17 - 1;
        }
      }
      v22 = v20 + 4;
      if (v22 < v32)
      {
        v21 = *(_QWORD *)(v31 + 8 * v22);
        if (v21)
        {
          v12 = v22;
          goto LABEL_22;
        }
        while (1)
        {
          v12 = v22 + 1;
          if (__OFADD__(v22, 1))
            goto LABEL_35;
          if (v12 >= v32)
            break;
          v21 = *(_QWORD *)(v31 + 8 * v12);
          ++v22;
          if (v21)
            goto LABEL_22;
        }
      }
    }
LABEL_33:
    swift_release(a1);
    return (uint64_t)v16;
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_10015D7D0()
{
  return sub_10015D7E8((uint64_t (*)(uint64_t, __n128))sub_10015D194);
}

uint64_t sub_10015D7DC()
{
  return sub_10015D7E8((uint64_t (*)(uint64_t, __n128))sub_10015D4B0);
}

uint64_t sub_10015D7E8(uint64_t (*a1)(uint64_t, __n128))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t KeyPath;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t result;
  char *v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, __n128);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v3 = v1;
  v4 = sub_100146438(&qword_1002B4168);
  __chkstk_darwin(v4);
  v43 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v45 - 8);
  v7 = __chkstk_darwin(v45);
  v44 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v42 = (char *)&v36 - v9;
  v10 = (int *)type metadata accessor for STransferMetrics(0);
  v11 = *((_QWORD *)v10 - 1);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100241678);
  v15 = swift_getKeyPath(&unk_1002416A0);
  static Published.subscript.getter(&v46, v3, KeyPath, v15);
  swift_release(KeyPath);
  v16 = swift_release(v15);
  v17 = a1(v46, v16);
  v40 = 0;
  v18 = *(_QWORD *)(v17 + 16);
  if (!v18)
  {
    swift_bridgeObjectRelease(v17);
LABEL_13:
    v32 = swift_getKeyPath(&unk_100241678);
    v33 = swift_getKeyPath(&unk_1002416A0);
    static Published.subscript.getter(&v46, v3, v32, v33);
    swift_release(v32);
    v34 = swift_release(v33);
    v35 = a1(v46, v34);
    return swift_bridgeObjectRelease(v35);
  }
  v38 = v3;
  v39 = a1;
  v19 = *(unsigned __int8 *)(v11 + 80);
  v37 = v17;
  v20 = v17 + ((v19 + 32) & ~v19);
  v21 = *(_QWORD *)(v11 + 72);
  v22 = 0.0;
  v41 = v6;
  while (1)
  {
    result = sub_100159ED8(v20, (uint64_t)v13);
    v26 = *(_QWORD *)&v13[v10[13]];
    v27 = *(_QWORD *)&v13[v10[12]];
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
      break;
    if ((unint64_t)(v28 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_15;
    if (v13[v10[17]] == 1)
    {
      v29 = v43;
      sub_10014BD9C((uint64_t)&v13[v10[11]], v43, &qword_1002B4168);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v29, 1, v45) != 1)
      {
        v30 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
        v31 = v42;
        v30(v42, v29, v45);
        v24 = v31;
        v6 = v41;
        goto LABEL_5;
      }
      result = sub_10014BDE0(v29, &qword_1002B4168);
    }
    v24 = v44;
    static Date.now.getter(result);
LABEL_5:
    v25 = Date.timeIntervalSince(_:)(&v13[v10[7]]);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v24, v45);
    v22 = v22 + (double)(8 * v28) / v25 / 1000000.0;
    sub_100159F1C((uint64_t)v13);
    v20 += v21;
    if (!--v18)
    {
      swift_bridgeObjectRelease(v37);
      v3 = v38;
      a1 = v39;
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_10015DB30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for STransferMetrics(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v27 - v7;
  KeyPath = swift_getKeyPath(&unk_100241678);
  v10 = swift_getKeyPath(&unk_1002416A0);
  static Published.subscript.getter(&v28, v1, KeyPath, v10);
  swift_release(KeyPath);
  swift_release(v10);
  v11 = v28;
  v12 = v28 + 64;
  v13 = 1 << *(_BYTE *)(v28 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v28 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  result = swift_bridgeObjectRetain(v28);
  v18 = 0;
  v19 = 0;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v20 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v20 | (v18 << 6); ; i = __clz(__rbit64(v23)) + (v18 << 6))
  {
    sub_100159ED8(*(_QWORD *)(v11 + 56) + *(_QWORD *)(v3 + 72) * i, (uint64_t)v8);
    result = sub_10015FF74((uint64_t)v8, (uint64_t)v6);
    v25 = *(_QWORD *)&v6[*(int *)(v2 + 52)];
    v26 = __OFADD__(v19, v25);
    v19 += v25;
    if (v26)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    result = sub_100159F1C((uint64_t)v6);
    if (v15)
      goto LABEL_4;
LABEL_5:
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
      goto LABEL_28;
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v12 + 8 * v22);
    ++v18;
    if (!v23)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v12 + 8 * v18);
      if (!v23)
      {
        v18 = v22 + 2;
        if (v22 + 2 >= v16)
          goto LABEL_26;
        v23 = *(_QWORD *)(v12 + 8 * v18);
        if (!v23)
        {
          v18 = v22 + 3;
          if (v22 + 3 >= v16)
            goto LABEL_26;
          v23 = *(_QWORD *)(v12 + 8 * v18);
          if (!v23)
          {
            v18 = v22 + 4;
            if (v22 + 4 >= v16)
              goto LABEL_26;
            v23 = *(_QWORD *)(v12 + 8 * v18);
            if (!v23)
              break;
          }
        }
      }
    }
LABEL_22:
    v15 = (v23 - 1) & v23;
  }
  v24 = v22 + 5;
  if (v24 >= v16)
  {
LABEL_26:
    swift_release(v11);
    swift_bridgeObjectRelease(v11);
    return v19;
  }
  v23 = *(_QWORD *)(v12 + 8 * v24);
  if (v23)
  {
    v18 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v18 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v18 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v12 + 8 * v18);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10015DD88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for STransferMetrics(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v27 - v7;
  KeyPath = swift_getKeyPath(&unk_100241678);
  v10 = swift_getKeyPath(&unk_1002416A0);
  static Published.subscript.getter(&v28, v1, KeyPath, v10);
  swift_release(KeyPath);
  swift_release(v10);
  v11 = v28;
  v12 = v28 + 64;
  v13 = 1 << *(_BYTE *)(v28 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v28 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  result = swift_bridgeObjectRetain(v28);
  v18 = 0;
  v19 = 0;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v20 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v20 | (v18 << 6); ; i = __clz(__rbit64(v23)) + (v18 << 6))
  {
    sub_100159ED8(*(_QWORD *)(v11 + 56) + *(_QWORD *)(v3 + 72) * i, (uint64_t)v8);
    result = sub_10015FF74((uint64_t)v8, (uint64_t)v6);
    v25 = *(_QWORD *)&v6[*(int *)(v2 + 48)];
    v26 = __OFADD__(v19, v25);
    v19 += v25;
    if (v26)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    result = sub_100159F1C((uint64_t)v6);
    if (v15)
      goto LABEL_4;
LABEL_5:
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
      goto LABEL_28;
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v12 + 8 * v22);
    ++v18;
    if (!v23)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v12 + 8 * v18);
      if (!v23)
      {
        v18 = v22 + 2;
        if (v22 + 2 >= v16)
          goto LABEL_26;
        v23 = *(_QWORD *)(v12 + 8 * v18);
        if (!v23)
        {
          v18 = v22 + 3;
          if (v22 + 3 >= v16)
            goto LABEL_26;
          v23 = *(_QWORD *)(v12 + 8 * v18);
          if (!v23)
          {
            v18 = v22 + 4;
            if (v22 + 4 >= v16)
              goto LABEL_26;
            v23 = *(_QWORD *)(v12 + 8 * v18);
            if (!v23)
              break;
          }
        }
      }
    }
LABEL_22:
    v15 = (v23 - 1) & v23;
  }
  v24 = v22 + 5;
  if (v24 >= v16)
  {
LABEL_26:
    swift_release(v11);
    swift_bridgeObjectRelease(v11);
    return v19;
  }
  v23 = *(_QWORD *)(v12 + 8 * v24);
  if (v23)
  {
    v18 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v18 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v18 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v12 + 8 * v18);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_10015DFE0(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t KeyPath;
  uint64_t v64;
  void (*v65)(_QWORD *, _QWORD);
  unsigned __int8 *v66;
  unsigned int v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t ObjectType;
  uint64_t v79;
  _QWORD v80[5];

  v5 = v4;
  v76 = a4;
  v71 = a3;
  v75 = a2;
  ObjectType = swift_getObjectType(v4);
  v7 = sub_100146438(&qword_1002B4AB0);
  __chkstk_darwin(v7);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for STransferMetrics(0);
  v77 = *((_QWORD *)v10 - 1);
  __chkstk_darwin(v10);
  v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100146438(&qword_1002B4AB8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v70 - v17;
  v79 = OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore_lock;
  objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore_lock), "lock");
  v19 = objc_msgSend(a1, "taskDescription");
  if (v19)
  {
    v20 = v19;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;

  }
  else
  {
    v21 = 0;
    v23 = 0xE000000000000000;
  }
  v24 = HIBYTE(v23) & 0xF;
  v25 = v21 & 0xFFFFFFFFFFFFLL;
  if ((v23 & 0x2000000000000000) != 0)
    v26 = HIBYTE(v23) & 0xF;
  else
    v26 = v21 & 0xFFFFFFFFFFFFLL;
  if (v26)
  {
    if ((v23 & 0x1000000000000000) != 0)
    {
      v28 = (uint64_t)sub_1001B237C(v21, v23, 10);
      LOBYTE(v21) = v69;
      goto LABEL_47;
    }
    if ((v23 & 0x2000000000000000) == 0)
    {
      if ((v21 & 0x1000000000000000) != 0)
        v27 = (unsigned __int8 *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v27 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v21, v23);
      v28 = (uint64_t)sub_1001B2368(v27, v25, 10);
      LOBYTE(v21) = v29 & 1;
      goto LABEL_47;
    }
    v80[0] = v21;
    v80[1] = v23 & 0xFFFFFFFFFFFFFFLL;
    if (v21 == 43)
    {
      if (!v24)
        goto LABEL_74;
      if (v24 == 1 || (BYTE1(v21) - 48) > 9u)
        goto LABEL_34;
      v28 = (BYTE1(v21) - 48);
      if (v24 != 2)
      {
        if ((BYTE2(v21) - 48) > 9u)
          goto LABEL_34;
        v28 = 10 * (BYTE1(v21) - 48) + (BYTE2(v21) - 48);
        v30 = v24 - 3;
        if (v30)
        {
          v31 = (unsigned __int8 *)v80 + 3;
          while (1)
          {
            v32 = *v31 - 48;
            if (v32 > 9)
              goto LABEL_34;
            v33 = 10 * v28;
            if ((unsigned __int128)(v28 * (__int128)10) >> 64 != (10 * v28) >> 63)
              goto LABEL_34;
            v28 = v33 + v32;
            if (__OFADD__(v33, v32))
              goto LABEL_34;
            LOBYTE(v21) = 0;
            ++v31;
            if (!--v30)
              goto LABEL_47;
          }
        }
      }
    }
    else
    {
      if (v21 == 45)
      {
        if (v24)
        {
          if (v24 != 1 && (BYTE1(v21) - 48) <= 9u)
          {
            if (v24 == 2)
            {
              LOBYTE(v21) = 0;
              v28 = -(uint64_t)(BYTE1(v21) - 48);
LABEL_47:
              swift_bridgeObjectRelease(v23);
              if ((v21 & 1) != 0)
                v39 = 0;
              else
                v39 = v28;
              v72 = v39;
              goto LABEL_51;
            }
            if ((BYTE2(v21) - 48) <= 9u)
            {
              v28 = -10 * (BYTE1(v21) - 48) - (BYTE2(v21) - 48);
              v38 = v24 - 3;
              if (!v38)
                goto LABEL_46;
              v66 = (unsigned __int8 *)v80 + 3;
              while (1)
              {
                v67 = *v66 - 48;
                if (v67 > 9)
                  break;
                v68 = 10 * v28;
                if ((unsigned __int128)(v28 * (__int128)10) >> 64 != (10 * v28) >> 63)
                  break;
                v28 = v68 - v67;
                if (__OFSUB__(v68, v67))
                  break;
                LOBYTE(v21) = 0;
                ++v66;
                if (!--v38)
                  goto LABEL_47;
              }
            }
          }
LABEL_34:
          v28 = 0;
          LOBYTE(v21) = 1;
          goto LABEL_47;
        }
        __break(1u);
LABEL_74:
        __break(1u);
        return;
      }
      if (!v24 || (v21 - 48) > 9u)
        goto LABEL_34;
      v28 = (v21 - 48);
      if (v24 != 1)
      {
        if ((BYTE1(v21) - 48) > 9u)
          goto LABEL_34;
        v28 = 10 * (v21 - 48) + (BYTE1(v21) - 48);
        v34 = v24 - 2;
        if (v34)
        {
          v35 = (unsigned __int8 *)v80 + 2;
          while (1)
          {
            v36 = *v35 - 48;
            if (v36 > 9)
              goto LABEL_34;
            v37 = 10 * v28;
            if ((unsigned __int128)(v28 * (__int128)10) >> 64 != (10 * v28) >> 63)
              goto LABEL_34;
            v28 = v37 + v36;
            if (__OFADD__(v37, v36))
              goto LABEL_34;
            LOBYTE(v21) = 0;
            ++v35;
            if (!--v34)
              goto LABEL_47;
          }
        }
      }
    }
LABEL_46:
    LOBYTE(v21) = 0;
    goto LABEL_47;
  }
  swift_bridgeObjectRelease(v23);
  v72 = 0;
LABEL_51:
  v74 = v5;
  v40 = sub_10015FFB8();
  v41 = objc_msgSend(a1, "isKindOfClass:", swift_getObjCClassFromMetadata(v40));
  v42 = objc_msgSend(a1, "originalRequest");
  v73 = v9;
  if (v42)
  {
    v43 = v42;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    v44 = type metadata accessor for URLRequest(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v16, 0, 1, v44);
  }
  else
  {
    v44 = ((uint64_t (*)(void))type metadata accessor for URLRequest)();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v16, 1, 1, v44);
  }
  v45 = v76;
  sub_10015FFF4((uint64_t)v16, (uint64_t)v18);
  type metadata accessor for URLRequest(0);
  v46 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v18, 1, v44) == 1)
  {
    sub_10014BDE0((uint64_t)v18, &qword_1002B4AB8);
    v47 = 0;
  }
  else
  {
    v47 = URLRequest.networkServiceType.getter();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v18, v44);
  }
  v48 = sub_1001CFE2C(v47);
  v49 = objc_msgSend(a1, "taskIdentifier");
  if (v45)
  {
    v50 = v45;
    v51 = v71;
  }
  else
  {
    v51 = *(_QWORD *)aPdpIp0;
    v50 = unk_1002B62A0;
    swift_bridgeObjectRetain(unk_1002B62A0);
  }
  v52 = v75 & 1;
  if (v48 == 9)
    v53 = 0;
  else
    v53 = v48;
  v54 = &v12[v10[11]];
  v55 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 1, 1, v55);
  *(_QWORD *)v12 = v49;
  v12[8] = v41;
  v12[9] = v53;
  v56 = swift_bridgeObjectRetain(v45);
  static Date.now.getter(v56);
  v57 = v72;
  *(_QWORD *)&v12[v10[8]] = v72;
  v12[v10[9]] = v52;
  v58 = &v12[v10[10]];
  *(_QWORD *)v58 = v51;
  *((_QWORD *)v58 + 1) = v50;
  *(_QWORD *)&v12[v10[12]] = 0;
  *(_QWORD *)&v12[v10[13]] = 0;
  *(_QWORD *)&v12[v10[14]] = 0;
  *(_QWORD *)&v12[v10[15]] = 0;
  *(_QWORD *)&v12[v10[16]] = 0;
  v12[v10[17]] = 0;
  v59 = sub_10015FB00();
  v60 = v74;
  v61 = ObservableObject<>.objectWillChange.getter(ObjectType, v59);
  ObservableObjectPublisher.send()();
  swift_release(v61);
  v62 = (uint64_t)v73;
  sub_100159ED8((uint64_t)v12, (uint64_t)v73);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v77 + 56))(v62, 0, 1, v10);
  KeyPath = swift_getKeyPath(&unk_100241678);
  v64 = swift_getKeyPath(&unk_1002416A0);
  v65 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v80, v60, KeyPath, v64);
  sub_100175D60(v62, v57);
  v65(v80, 0);
  swift_release(KeyPath);
  swift_release(v64);
  sub_100159F1C((uint64_t)v12);
  objc_msgSend(*(id *)(v60 + v79), "unlock");
}

void sub_10015E6D4(void *a1, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  uint64_t ObjectType;
  uint64_t KeyPath;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD *);
  void (*v50)(_QWORD *);
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD *);
  void (*v57)(_QWORD *);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned __int8 *v64;
  unsigned int v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  int64_t v78;
  uint64_t v79;
  void *v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[4];
  _QWORD v85[5];

  v74 = a2;
  ObjectType = swift_getObjectType(v3);
  KeyPath = 0;
  v82 = sub_100146438(&qword_1002B4AA0);
  __chkstk_darwin(v82);
  v9 = (uint64_t *)((char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore_lock;
  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore_lock), "lock");
  v80 = a1;
  v11 = objc_msgSend(a1, "taskDescription");
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

  }
  else
  {
    v15 = 0xE000000000000000;
    v13 = 0;
  }
  v16 = HIBYTE(v15) & 0xF;
  v17 = v13 & 0xFFFFFFFFFFFFLL;
  if ((v15 & 0x2000000000000000) != 0)
    v18 = HIBYTE(v15) & 0xF;
  else
    v18 = v13 & 0xFFFFFFFFFFFFLL;
  v79 = v10;
  v75 = a3;
  v76 = ObjectType;
  if (!v18)
  {
LABEL_93:
    v69 = KeyPath;
    swift_bridgeObjectRelease(v15);
    v83 = 0;
    goto LABEL_51;
  }
  if ((v15 & 0x1000000000000000) != 0)
  {
    v69 = 0;
    v20 = (uint64_t)sub_1001B237C(v13, v15, 10);
    v22 = v67;
    goto LABEL_47;
  }
  if ((v15 & 0x2000000000000000) == 0)
  {
    if ((v13 & 0x1000000000000000) != 0)
      v19 = (unsigned __int8 *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
LABEL_96:
      v19 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v13, v15);
    v20 = (uint64_t)sub_1001B2368(v19, v17, 10);
    v69 = KeyPath;
    v22 = v21 & 1;
    goto LABEL_47;
  }
  v85[0] = v13;
  v85[1] = v15 & 0xFFFFFFFFFFFFFFLL;
  v69 = 0;
  if (v13 == 43)
  {
    if (!v16)
    {
LABEL_98:
      __break(1u);
      return;
    }
    if (v16 == 1 || (BYTE1(v13) - 48) > 9u)
      goto LABEL_34;
    v20 = (BYTE1(v13) - 48);
    if (v16 != 2)
    {
      if ((BYTE2(v13) - 48) > 9u)
        goto LABEL_34;
      v20 = 10 * (BYTE1(v13) - 48) + (BYTE2(v13) - 48);
      v23 = v16 - 3;
      if (v23)
      {
        v24 = (unsigned __int8 *)v85 + 3;
        while (1)
        {
          v25 = *v24 - 48;
          if (v25 > 9)
            goto LABEL_34;
          v26 = 10 * v20;
          if ((unsigned __int128)(v20 * (__int128)10) >> 64 != (10 * v20) >> 63)
            goto LABEL_34;
          v20 = v26 + v25;
          if (__OFADD__(v26, v25))
            goto LABEL_34;
          v22 = 0;
          ++v24;
          if (!--v23)
            goto LABEL_47;
        }
      }
    }
LABEL_46:
    v22 = 0;
    goto LABEL_47;
  }
  if (v13 != 45)
  {
    if (!v16 || (v13 - 48) > 9u)
      goto LABEL_34;
    v20 = (v13 - 48);
    if (v16 != 1)
    {
      if ((BYTE1(v13) - 48) > 9u)
        goto LABEL_34;
      v20 = 10 * (v13 - 48) + (BYTE1(v13) - 48);
      v27 = v16 - 2;
      if (v27)
      {
        v28 = (unsigned __int8 *)v85 + 2;
        while (1)
        {
          v29 = *v28 - 48;
          if (v29 > 9)
            goto LABEL_34;
          v30 = 10 * v20;
          if ((unsigned __int128)(v20 * (__int128)10) >> 64 != (10 * v20) >> 63)
            goto LABEL_34;
          v20 = v30 + v29;
          if (__OFADD__(v30, v29))
            goto LABEL_34;
          v22 = 0;
          ++v28;
          if (!--v27)
            goto LABEL_47;
        }
      }
    }
    goto LABEL_46;
  }
  if (!v16)
  {
    __break(1u);
    goto LABEL_98;
  }
  if (v16 == 1 || (BYTE1(v13) - 48) > 9u)
    goto LABEL_34;
  if (v16 != 2)
  {
    if ((BYTE2(v13) - 48) <= 9u)
    {
      v20 = -10 * (BYTE1(v13) - 48) - (BYTE2(v13) - 48);
      v31 = v16 - 3;
      if (!v31)
        goto LABEL_46;
      v64 = (unsigned __int8 *)v85 + 3;
      while (1)
      {
        v65 = *v64 - 48;
        if (v65 > 9)
          break;
        v66 = 10 * v20;
        if ((unsigned __int128)(v20 * (__int128)10) >> 64 != (10 * v20) >> 63)
          break;
        v20 = v66 - v65;
        if (__OFSUB__(v66, v65))
          break;
        v22 = 0;
        ++v64;
        if (!--v31)
          goto LABEL_47;
      }
    }
LABEL_34:
    v20 = 0;
    v22 = 1;
    goto LABEL_47;
  }
  v22 = 0;
  v20 = -(uint64_t)(BYTE1(v13) - 48);
LABEL_47:
  swift_bridgeObjectRelease(v15);
  if ((v22 & 1) != 0)
    v32 = 0;
  else
    v32 = v20;
  v83 = v32;
LABEL_51:
  v33 = v80;
  v73 = objc_msgSend(v80, "countOfBytesSent");
  v72 = objc_msgSend(v33, "countOfBytesReceived");
  v71 = objc_msgSend(v33, "countOfBytesExpectedToSend");
  v70 = objc_msgSend(v33, "countOfBytesExpectedToReceive");
  KeyPath = swift_getKeyPath(&unk_100241678);
  v34 = swift_getKeyPath(&unk_1002416A0);
  v78 = v3;
  static Published.subscript.getter(v85, v3, KeyPath, v34);
  swift_release(KeyPath);
  swift_release(v34);
  v77 = &v68;
  v35 = v85[0];
  v36 = v85[0] + 64;
  v37 = 1 << *(_BYTE *)(v85[0] + 32);
  v38 = -1;
  if (v37 < 64)
    v38 = ~(-1 << v37);
  v39 = v38 & *(_QWORD *)(v85[0] + 64);
  v81 = (unint64_t)(v37 + 63) >> 6;
  swift_bridgeObjectRetain(v85[0]);
  v3 = 0;
  do
  {
    if (v39)
    {
      v40 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      v15 = v40 | (v3 << 6);
    }
    else
    {
      if (__OFADD__(v3++, 1))
      {
        __break(1u);
        goto LABEL_93;
      }
      if (v3 >= v81)
        goto LABEL_82;
      v44 = *(_QWORD *)(v36 + 8 * v3);
      if (!v44)
      {
        v45 = v3 + 1;
        if (v3 + 1 >= v81)
          goto LABEL_82;
        v44 = *(_QWORD *)(v36 + 8 * v45);
        if (!v44)
        {
          v45 = v3 + 2;
          if (v3 + 2 >= v81)
            goto LABEL_82;
          v44 = *(_QWORD *)(v36 + 8 * v45);
          if (!v44)
          {
            v45 = v3 + 3;
            if (v3 + 3 >= v81)
              goto LABEL_82;
            v44 = *(_QWORD *)(v36 + 8 * v45);
            if (!v44)
            {
              v45 = v3 + 4;
              if (v3 + 4 >= v81)
              {
LABEL_82:
                swift_release(v35);
                swift_bridgeObjectRelease(v35);
                v61 = *(_QWORD *)aPdpIp0;
                v62 = unk_1002B62A0;
                swift_bridgeObjectRetain(unk_1002B62A0);
                v47 = v78;
                sub_10015DFE0(v80, 0, v61, v62);
                swift_bridgeObjectRelease(v62);
                v53 = v79;
                goto LABEL_85;
              }
              v44 = *(_QWORD *)(v36 + 8 * v45);
              if (!v44)
              {
                while (1)
                {
                  v3 = v45 + 1;
                  if (__OFADD__(v45, 1))
                    break;
                  if (v3 >= v81)
                    goto LABEL_82;
                  v44 = *(_QWORD *)(v36 + 8 * v3);
                  ++v45;
                  if (v44)
                    goto LABEL_69;
                }
                __break(1u);
                goto LABEL_96;
              }
            }
          }
        }
        v3 = v45;
      }
LABEL_69:
      v39 = (v44 - 1) & v44;
      v15 = __clz(__rbit64(v44)) + (v3 << 6);
    }
    KeyPath = *(_QWORD *)(v35 + 56);
    v41 = *(_QWORD *)(*(_QWORD *)(v35 + 48) + 8 * v15);
    v42 = type metadata accessor for STransferMetrics(0);
    v13 = *(_QWORD *)(v42 - 8);
    sub_100159ED8(KeyPath + *(_QWORD *)(v13 + 72) * v15, (uint64_t)v9 + *(int *)(v82 + 48));
    *v9 = v41;
    sub_10014BDE0((uint64_t)v9, &qword_1002B4AA0);
  }
  while (v41 != v83);
  swift_release(v35);
  swift_bridgeObjectRelease(v35);
  v46 = sub_10015FB00();
  v47 = v78;
  v48 = ObservableObject<>.objectWillChange.getter(v76, v46);
  ObservableObjectPublisher.send()();
  swift_release(v48);
  v49 = sub_10015D0D0(v85);
  v50 = sub_10015EE64(v84, v83);
  v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (!v51(v52, 1, v42))
    sub_10015945C((uint64_t)v72, (uint64_t)v70, (uint64_t)v73, (uint64_t)v71);
  ((void (*)(_QWORD *, _QWORD))v50)(v84, 0);
  ((void (*)(_QWORD *, _QWORD))v49)(v85, 0);
  v53 = v79;
  v54 = v75;
  if (v75)
  {
    v55 = HIBYTE(v75) & 0xF;
    if ((v75 & 0x2000000000000000) == 0)
      v55 = v74 & 0xFFFFFFFFFFFFLL;
    if (v55)
    {
      swift_bridgeObjectRetain(v75);
      v56 = sub_10015D0D0(v85);
      v57 = sub_10015EE64(v84, v83);
      v59 = v58;
      if (v51(v58, 1, v42))
      {
        v60 = v54;
      }
      else
      {
        v63 = (_QWORD *)(v59 + *(int *)(v42 + 40));
        v60 = v63[1];
        *v63 = v74;
        v63[1] = v54;
      }
      swift_bridgeObjectRelease(v60);
      ((void (*)(_QWORD *, _QWORD))v57)(v84, 0);
      ((void (*)(_QWORD *, _QWORD))v56)(v85, 0);
    }
  }
LABEL_85:
  objc_msgSend(*(id *)(v47 + v53), "unlock");
}

void (*sub_10015EE64(_QWORD *a1, uint64_t a2))(_QWORD *a1)
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_10015FB48(v4, a2);
  return sub_10015EEB0;
}

void sub_10015EEB0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

void sub_10015EEE0(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  unint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD *);
  void (*v51)(_QWORD *);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  unsigned __int8 *v63;
  unsigned int v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  _QWORD v79[4];
  _QWORD v80[5];

  v3 = v2;
  ObjectType = swift_getObjectType(v3);
  v7 = sub_100146438(&qword_1002B4168);
  __chkstk_darwin(v7);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100146438(&qword_1002B4AA0);
  __chkstk_darwin(v78);
  v11 = (uint64_t *)((char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v75 = OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore_lock;
  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore_lock), "lock");
  v70 = a1;
  v12 = objc_msgSend(a1, "taskDescription");
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

  }
  else
  {
    v16 = 0xE000000000000000;
    v14 = 0;
  }
  v17 = HIBYTE(v16) & 0xF;
  v18 = v14 & 0xFFFFFFFFFFFFLL;
  if ((v16 & 0x2000000000000000) != 0)
    v19 = HIBYTE(v16) & 0xF;
  else
    v19 = v14 & 0xFFFFFFFFFFFFLL;
  v71 = ObjectType;
  v72 = a2;
  v69 = v9;
  if (!v19)
  {
LABEL_85:
    v68 = 0;
    swift_bridgeObjectRelease(v16);
    v16 = 0;
    goto LABEL_50;
  }
  if ((v16 & 0x1000000000000000) == 0)
  {
    if ((v16 & 0x2000000000000000) == 0)
    {
      if ((v14 & 0x1000000000000000) != 0)
        v20 = (unsigned __int8 *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
LABEL_88:
        v20 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v14, v16);
      v21 = (uint64_t)sub_1001B2368(v20, v18, 10);
      LOBYTE(v14) = v22 & 1;
      goto LABEL_47;
    }
    v80[0] = v14;
    v80[1] = v16 & 0xFFFFFFFFFFFFFFLL;
    if (v14 == 43)
    {
      if (!v17)
        goto LABEL_90;
      if (v17 == 1 || (BYTE1(v14) - 48) > 9u)
        goto LABEL_34;
      v21 = (BYTE1(v14) - 48);
      if (v17 != 2)
      {
        if ((BYTE2(v14) - 48) > 9u)
          goto LABEL_34;
        v21 = 10 * (BYTE1(v14) - 48) + (BYTE2(v14) - 48);
        v23 = v17 - 3;
        if (v23)
        {
          v24 = (unsigned __int8 *)v80 + 3;
          while (1)
          {
            v25 = *v24 - 48;
            if (v25 > 9)
              goto LABEL_34;
            v26 = 10 * v21;
            if ((unsigned __int128)(v21 * (__int128)10) >> 64 != (10 * v21) >> 63)
              goto LABEL_34;
            v21 = v26 + v25;
            if (__OFADD__(v26, v25))
              goto LABEL_34;
            LOBYTE(v14) = 0;
            ++v24;
            if (!--v23)
              goto LABEL_47;
          }
        }
      }
    }
    else
    {
      if (v14 == 45)
      {
        if (v17)
        {
          if (v17 != 1 && (BYTE1(v14) - 48) <= 9u)
          {
            if (v17 == 2)
            {
              LOBYTE(v14) = 0;
              v21 = -(uint64_t)(BYTE1(v14) - 48);
              goto LABEL_47;
            }
            if ((BYTE2(v14) - 48) <= 9u)
            {
              v21 = -10 * (BYTE1(v14) - 48) - (BYTE2(v14) - 48);
              v31 = v17 - 3;
              if (!v31)
                goto LABEL_46;
              v63 = (unsigned __int8 *)v80 + 3;
              while (1)
              {
                v64 = *v63 - 48;
                if (v64 > 9)
                  break;
                v65 = 10 * v21;
                if ((unsigned __int128)(v21 * (__int128)10) >> 64 != (10 * v21) >> 63)
                  break;
                v21 = v65 - v64;
                if (__OFSUB__(v65, v64))
                  break;
                LOBYTE(v14) = 0;
                ++v63;
                if (!--v31)
                  goto LABEL_47;
              }
            }
          }
LABEL_34:
          v21 = 0;
          LOBYTE(v14) = 1;
          goto LABEL_47;
        }
        __break(1u);
LABEL_90:
        __break(1u);
        return;
      }
      if (!v17 || (v14 - 48) > 9u)
        goto LABEL_34;
      v21 = (v14 - 48);
      if (v17 != 1)
      {
        if ((BYTE1(v14) - 48) > 9u)
          goto LABEL_34;
        v21 = 10 * (v14 - 48) + (BYTE1(v14) - 48);
        v27 = v17 - 2;
        if (v27)
        {
          v28 = (unsigned __int8 *)v80 + 2;
          while (1)
          {
            v29 = *v28 - 48;
            if (v29 > 9)
              goto LABEL_34;
            v30 = 10 * v21;
            if ((unsigned __int128)(v21 * (__int128)10) >> 64 != (10 * v21) >> 63)
              goto LABEL_34;
            v21 = v30 + v29;
            if (__OFADD__(v30, v29))
              goto LABEL_34;
            LOBYTE(v14) = 0;
            ++v28;
            if (!--v27)
              goto LABEL_47;
          }
        }
      }
    }
LABEL_46:
    LOBYTE(v14) = 0;
    goto LABEL_47;
  }
  v21 = (uint64_t)sub_1001B237C(v14, v16, 10);
  LOBYTE(v14) = v66;
LABEL_47:
  swift_bridgeObjectRelease(v16);
  v68 = 0;
  if ((v14 & 1) != 0)
    v16 = 0;
  else
    v16 = v21;
LABEL_50:
  KeyPath = swift_getKeyPath(&unk_100241678);
  v33 = swift_getKeyPath(&unk_1002416A0);
  v74 = v3;
  static Published.subscript.getter(v80, v3, KeyPath, v33);
  swift_release(KeyPath);
  swift_release(v33);
  v73 = &v67;
  v14 = v80[0];
  v34 = *(_QWORD *)(v80[0] + 64);
  v76 = v80[0] + 64;
  v35 = 1 << *(_BYTE *)(v80[0] + 32);
  v36 = -1;
  if (v35 < 64)
    v36 = ~(-1 << v35);
  v37 = v36 & v34;
  v77 = (unint64_t)(v35 + 63) >> 6;
  swift_bridgeObjectRetain(v80[0]);
  v38 = 0;
  do
  {
    if (v37)
    {
      v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v40 = v39 | (v38 << 6);
    }
    else
    {
      if (__OFADD__(v38++, 1))
      {
        __break(1u);
        goto LABEL_85;
      }
      if (v38 >= v77)
        goto LABEL_76;
      v45 = *(_QWORD *)(v76 + 8 * v38);
      if (!v45)
      {
        v46 = v38 + 1;
        if (v38 + 1 >= v77)
          goto LABEL_76;
        v45 = *(_QWORD *)(v76 + 8 * v46);
        if (!v45)
        {
          v46 = v38 + 2;
          if (v38 + 2 >= v77)
            goto LABEL_76;
          v45 = *(_QWORD *)(v76 + 8 * v46);
          if (!v45)
          {
            v46 = v38 + 3;
            if (v38 + 3 >= v77)
              goto LABEL_76;
            v45 = *(_QWORD *)(v76 + 8 * v46);
            if (!v45)
            {
              v46 = v38 + 4;
              if (v38 + 4 >= v77)
              {
LABEL_76:
                swift_release(v14);
                swift_bridgeObjectRelease(v14);
                v60 = *(_QWORD *)aPdpIp0;
                v61 = unk_1002B62A0;
                swift_bridgeObjectRetain(unk_1002B62A0);
                v62 = v70;
                v48 = v74;
                sub_10015DFE0(v70, 0, v60, v61);
                swift_bridgeObjectRelease(v61);
                sub_10015EEE0(v62, v72);
                goto LABEL_77;
              }
              v45 = *(_QWORD *)(v76 + 8 * v46);
              if (!v45)
              {
                while (1)
                {
                  v38 = v46 + 1;
                  if (__OFADD__(v46, 1))
                    break;
                  if (v38 >= v77)
                    goto LABEL_76;
                  v45 = *(_QWORD *)(v76 + 8 * v38);
                  ++v46;
                  if (v45)
                    goto LABEL_68;
                }
                __break(1u);
                goto LABEL_88;
              }
            }
          }
        }
        v38 = v46;
      }
LABEL_68:
      v37 = (v45 - 1) & v45;
      v40 = __clz(__rbit64(v45)) + (v38 << 6);
    }
    v3 = *(_QWORD *)(v14 + 56);
    v41 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v40);
    v42 = (int *)type metadata accessor for STransferMetrics(0);
    v43 = *((_QWORD *)v42 - 1);
    sub_100159ED8(v3 + *(_QWORD *)(v43 + 72) * v40, (uint64_t)v11 + *(int *)(v78 + 48));
    *v11 = v41;
    sub_10014BDE0((uint64_t)v11, &qword_1002B4AA0);
  }
  while (v41 != v16);
  swift_release(v14);
  swift_bridgeObjectRelease(v14);
  v47 = sub_10015FB00();
  v48 = v74;
  v49 = ObservableObject<>.objectWillChange.getter(v71, v47);
  ObservableObjectPublisher.send()();
  swift_release(v49);
  v50 = sub_10015D0D0(v80);
  v51 = sub_10015EE64(v79, v16);
  v53 = v52;
  v54 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v43 + 48))(v52, 1, v42);
  if (!(_DWORD)v54)
  {
    v55 = (uint64_t)v69;
    static Date.now.getter(v54);
    v56 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v55, 0, 1, v56);
    sub_100159F58(v55, v53 + v42[11]);
    *(_BYTE *)(v53 + v42[17]) = 1;
    v57 = v42[16];
    v58 = *(_QWORD *)(v53 + v57);
    v59 = v72;
    swift_errorRetain(v72);
    swift_errorRelease(v58);
    *(_QWORD *)(v53 + v57) = v59;
  }
  ((void (*)(_QWORD *, _QWORD))v51)(v79, 0);
  ((void (*)(_QWORD *, _QWORD))v50)(v80, 0);
LABEL_77:
  objc_msgSend(*(id *)(v48 + v75), "unlock");
}

id sub_10015F6DC()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  objc_super v12;
  void *v13;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = sub_100146438(&qword_1002B4AC8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = &v0[OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore__metrics];
  v13 = &_swiftEmptyDictionarySingleton;
  v7 = v0;
  v8 = sub_100146438(&qword_1002B4A98);
  Published.init(initialValue:)(&v13, v8);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v5, v2);
  v9 = OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore_lock;
  *(_QWORD *)&v7[v9] = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
  *(_QWORD *)&v7[OBJC_IVAR____TtC13FTMInternal_421STransferMetricsStore____lazy_storage___queue] = 0;

  v12.receiver = v7;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, "init");
}

id sub_10015F808()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10015F8A0()
{
  return type metadata accessor for STransferMetricsStore(0);
}

uint64_t type metadata accessor for STransferMetricsStore(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B4A80;
  if (!qword_1002B4A80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for STransferMetricsStore);
  return result;
}

void sub_10015F8E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10015F968(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = "\b";
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_10015F968(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002B4A90)
  {
    v2 = sub_1001464C4(&qword_1002B4A98);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002B4A90);
  }
}

void *sub_10015F9C0()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_10015F9CC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t result;

  ObjectType = swift_getObjectType(v2);
  result = ObservableObject<>.objectWillChange.getter(ObjectType, a1);
  *a2 = result;
  return result;
}

uint64_t sub_10015FA08@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100241678);
  v5 = swift_getKeyPath(&unk_1002416A0);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10015FA84(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100241678);
  v5 = swift_getKeyPath(&unk_1002416A0);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

unint64_t sub_10015FB00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B4AA8;
  if (!qword_1002B4AA8)
  {
    v1 = type metadata accessor for STransferMetricsStore(255);
    result = swift_getWitnessTable(&unk_100241640, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4AA8);
  }
  return result;
}

void (*sub_10015FB48(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v5[8] = sub_10015FDC8(v5);
  v5[9] = sub_10015FC00(v5 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_10015FBC4;
}

void sub_10015FBC4(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

void (*sub_10015FC00(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  *v8 = a2;
  v8[1] = v3;
  v9 = sub_100146438(&qword_1002B4AB0);
  v10 = malloc(*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  v8[2] = v10;
  v11 = *v3;
  v13 = sub_1001C7C68(a2);
  *((_BYTE *)v8 + 32) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*v4 + 56);
        v20 = type metadata accessor for STransferMetrics(0);
        v21 = *(_QWORD *)(v20 - 8);
        sub_10015FF74(v19 + *(_QWORD *)(v21 + 72) * v13, (uint64_t)v10);
        v22 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v10, v22, 1, v20);
        return sub_10015FD7C;
      }
LABEL_11:
      v20 = type metadata accessor for STransferMetrics(0);
      v21 = *(_QWORD *)(v20 - 8);
      v22 = 1;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_1001CA178();
      goto LABEL_7;
    }
    sub_1001C7D2C(v16, a3 & 1);
    v23 = sub_1001C7C68(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      v13 = v23;
      v8[3] = v23;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

void sub_10015FD7C(uint64_t **a1)
{
  uint64_t *v1;
  void *v2;

  v1 = *a1;
  v2 = (void *)(*a1)[2];
  sub_10015FDF4((uint64_t)v2, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[1], (*a1)[3], **a1);
  sub_10014BDE0((uint64_t)v2, &qword_1002B4AB0);
  free(v2);
  free(v1);
}

uint64_t (*sub_10015FDC8(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_10015FDE8;
}

uint64_t sub_10015FDE8(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

unint64_t sub_10015FDF4(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t result;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a5;
  v9 = sub_100146438(&qword_1002B4AB0);
  __chkstk_darwin(v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for STransferMetrics(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v21 - v17;
  sub_10014BD9C(a1, (uint64_t)v11, &qword_1002B4AB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    result = sub_10014BDE0((uint64_t)v11, &qword_1002B4AB0);
    if ((a2 & 1) != 0)
      return sub_1001D5758(a4, *a3);
  }
  else
  {
    sub_10015FF74((uint64_t)v11, (uint64_t)v18);
    v20 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      return sub_10015FF74((uint64_t)v18, v20[7] + *(_QWORD *)(v13 + 72) * a4);
    }
    else
    {
      sub_10015FF74((uint64_t)v18, (uint64_t)v16);
      return sub_1001C9DCC(a4, v22, (uint64_t)v16, v20);
    }
  }
  return result;
}

uint64_t sub_10015FF74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for STransferMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10015FFB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B4AC0;
  if (!qword_1002B4AC0)
  {
    v1 = objc_opt_self(NSURLSessionDownloadTask);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B4AC0);
  }
  return result;
}

uint64_t sub_10015FFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100146438(&qword_1002B4AB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for AllMetricsStates(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AllMetricsStates(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100160118 + 4 * byte_1002416C5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10016014C + 4 * byte_1002416C0[v4]))();
}

uint64_t sub_10016014C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100160154(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10016015CLL);
  return result;
}

uint64_t sub_100160168(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100160170);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100160174(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016017C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AllMetricsStates()
{
  return &type metadata for AllMetricsStates;
}

unint64_t sub_10016019C()
{
  unint64_t result;

  result = qword_1002B4AD0;
  if (!qword_1002B4AD0)
  {
    result = swift_getWitnessTable(&unk_100241724, &type metadata for AllMetricsStates);
    atomic_store(result, (unint64_t *)&qword_1002B4AD0);
  }
  return result;
}

uint64_t sub_1001601E0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1002417A8);
  v4 = swift_getKeyPath(&unk_1002417D0);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_100160244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13FTMInternal_424MetricDetailViewDelegate__metric;
  v2 = sub_100146438(&qword_1002B4BD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100160298()
{
  return type metadata accessor for MetricDetailViewDelegate(0);
}

uint64_t type metadata accessor for MetricDetailViewDelegate(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B4B08;
  if (!qword_1002B4B08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetricDetailViewDelegate);
  return result;
}

void sub_1001602DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_100160348(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

void sub_100160348(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002B4B18)
  {
    v2 = sub_1001464C4((uint64_t *)&unk_1002B4B20);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002B4B18);
  }
}

uint64_t sub_1001603A0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for MetricDetailViewDelegate(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001603DC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1002417A8);
  v5 = swift_getKeyPath(&unk_1002417D0);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_100160448(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_100146438((uint64_t *)&unk_1002B4B20);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v14 - v8;
  sub_100160534(a1, (uint64_t)&v14 - v8);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_1002417A8);
  v12 = swift_getKeyPath(&unk_1002417D0);
  sub_100160534((uint64_t)v9, (uint64_t)v7);
  swift_retain(v10);
  static Published.subscript.setter(v7, v10, KeyPath, v12);
  return sub_10016057C((uint64_t)v9);
}

uint64_t sub_100160534(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100146438((uint64_t *)&unk_1002B4B20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016057C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100146438((uint64_t *)&unk_1002B4B20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for DashboardStates(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100160608 + 4 * byte_1002417F5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10016063C + 4 * byte_1002417F0[v4]))();
}

uint64_t sub_10016063C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100160644(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10016064CLL);
  return result;
}

uint64_t sub_100160658(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100160660);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100160664(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016066C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DashboardStates()
{
  return &type metadata for DashboardStates;
}

unint64_t sub_10016068C()
{
  unint64_t result;

  result = qword_1002B4BD8;
  if (!qword_1002B4BD8)
  {
    result = swift_getWitnessTable(&unk_10024184C, &type metadata for DashboardStates);
    atomic_store(result, (unint64_t *)&qword_1002B4BD8);
  }
  return result;
}

id sub_1001606D0()
{
  id v0;
  NSString v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  double v9;
  id v10;
  id v11;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v1 = String._bridgeToObjectiveC()();
  v2 = (void *)objc_opt_self(UIColor);
  v3 = objc_msgSend(v2, "colorNamed:", v1);

  objc_msgSend(v0, "setBackgroundColor:", v3);
  v4 = objc_msgSend(v0, "layer");
  v5 = objc_msgSend(v2, "blackColor");
  v6 = objc_msgSend(v5, "CGColor");

  objc_msgSend(v4, "setShadowColor:", v6);
  v7 = objc_msgSend(v0, "layer");
  objc_msgSend(v7, "setCornerRadius:", 8.0);

  v8 = objc_msgSend(v0, "layer");
  LODWORD(v9) = 1050253722;
  objc_msgSend(v8, "setShadowOpacity:", v9);

  v10 = objc_msgSend(v0, "layer");
  objc_msgSend(v10, "setShadowRadius:", 8.0);

  v11 = objc_msgSend(v0, "layer");
  objc_msgSend(v11, "setShadowOffset:", 0.0, 2.0);

  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  return v0;
}

id sub_1001608BC()
{
  return sub_100160A1C(&OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___metricNameLabel, (uint64_t (*)(void))sub_1001608D0);
}

id sub_1001608D0()
{
  id v0;
  NSString v1;
  NSString v2;
  id v3;
  id v4;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setText:", v1);

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v2);

  objc_msgSend(v0, "setTextColor:", v3);
  objc_msgSend(v0, "setTextAlignment:", 0);
  v4 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 14.0, UIFontWeightMedium);
  objc_msgSend(v0, "setFont:", v4);

  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  return v0;
}

id sub_100160A08()
{
  return sub_100160A1C(&OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___metricAvailabilityLabel, (uint64_t (*)(void))sub_100160A74);
}

id sub_100160A1C(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = (void *)a2();
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

id sub_100160A74()
{
  id v0;
  NSString v1;
  NSString v2;
  id v3;
  id v4;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setText:", v1);

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v2);

  objc_msgSend(v0, "setTextColor:", v3);
  objc_msgSend(v0, "setTextAlignment:", 0);
  v4 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 12.0, UIFontWeightMedium);
  objc_msgSend(v0, "setFont:", v4);

  objc_msgSend(v0, "setHidden:", 1);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  return v0;
}

id sub_100160BC0()
{
  return sub_100160A1C(&OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___activityIndicatorButton, (uint64_t (*)(void))sub_100160BD4);
}

id sub_100160BD4()
{
  id v0;
  NSString v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  NSString v6;
  id v7;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIButton), "init");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v1);

  objc_msgSend(v0, "setImage:forState:", v2, 0);
  v3 = objc_msgSend(v0, "titleLabel");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 35.0, UIFontWeightBold);
    objc_msgSend(v4, "setFont:", v5);

  }
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v6);

  objc_msgSend(v0, "setTintColor:", v7);
  objc_msgSend(v0, "setUserInteractionEnabled:", 0);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  return v0;
}

id sub_100160D80()
{
  return sub_100160A1C(&OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___bottomLabel, (uint64_t (*)(void))sub_100160D94);
}

id sub_100160D94()
{
  id v0;
  NSString v1;
  id v2;
  NSString v3;
  id v4;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setText:", v1);

  objc_msgSend(v0, "setTextAlignment:", 0);
  v2 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 12.0, UIFontWeightLight);
  objc_msgSend(v0, "setFont:", v2);

  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v3);

  objc_msgSend(v0, "setTextColor:", v4);
  return v0;
}

char *sub_100160ECC(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  Class isa;
  id v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  Class v59;
  uint64_t v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  Class v72;
  uint64_t v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  Class v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  Class v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  Class v109;
  id v111;
  uint64_t v112;
  objc_super v113;

  v9 = OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_container;
  v10 = v4;
  *(_QWORD *)&v4[v9] = sub_1001606D0();
  *(_QWORD *)&v10[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___metricNameLabel] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___metricAvailabilityLabel] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___activityIndicatorButton] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___bottomLabel] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampHiddenConstraint] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampVisibleConstraint] = 0;

  v113.receiver = v10;
  v113.super_class = (Class)type metadata accessor for AllMetricsViewCell();
  v11 = (char *)objc_msgSendSuper2(&v113, "initWithFrame:", a1, a2, a3, a4);
  v12 = OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_container;
  v13 = *(void **)&v11[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_container];
  v14 = v11;
  v15 = v13;
  v16 = sub_1001608BC();
  objc_msgSend(v15, "addSubview:", v16);

  v17 = *(id *)&v11[v12];
  v18 = sub_100160A08();
  objc_msgSend(v17, "addSubview:", v18);

  v19 = *(id *)&v11[v12];
  v20 = sub_100160D80();
  objc_msgSend(v19, "addSubview:", v20);

  v21 = *(id *)&v11[v12];
  v22 = sub_100160BC0();
  objc_msgSend(v21, "addSubview:", v22);

  v23 = objc_msgSend(v14, "contentView");
  objc_msgSend(v23, "addSubview:", *(_QWORD *)&v11[v12]);

  v111 = (id)objc_opt_self(NSLayoutConstraint);
  v112 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v24 = swift_allocObject(v112, 64, 7);
  *(_OWORD *)(v24 + 16) = xmmword_100240400;
  v25 = objc_msgSend(*(id *)&v11[v12], "bottomAnchor");
  v26 = objc_msgSend(v14, "contentView");
  v27 = objc_msgSend(v26, "bottomAnchor");

  v28 = objc_msgSend(v25, "constraintEqualToAnchor:", v27);
  *(_QWORD *)(v24 + 32) = v28;
  v29 = objc_msgSend(*(id *)&v11[v12], "leftAnchor");
  v30 = objc_msgSend(v14, "contentView");
  v31 = objc_msgSend(v30, "leftAnchor");

  v32 = objc_msgSend(v29, "constraintEqualToAnchor:", v31);
  *(_QWORD *)(v24 + 40) = v32;
  v33 = objc_msgSend(*(id *)&v11[v12], "rightAnchor");
  v34 = objc_msgSend(v14, "contentView");
  v35 = objc_msgSend(v34, "rightAnchor");

  v36 = objc_msgSend(v33, "constraintEqualToAnchor:", v35);
  *(_QWORD *)(v24 + 48) = v36;
  v37 = objc_msgSend(*(id *)&v11[v12], "topAnchor");
  v38 = objc_msgSend(v14, "contentView");
  v39 = objc_msgSend(v38, "topAnchor");

  v40 = objc_msgSend(v37, "constraintEqualToAnchor:", v39);
  *(_QWORD *)(v24 + 56) = v40;
  specialized Array._endMutation()(v41);
  sub_10014C4C4();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v24);
  objc_msgSend(v111, "activateConstraints:", isa);

  v43 = sub_1001608BC();
  v44 = objc_msgSend(v43, "centerYAnchor");

  v45 = objc_msgSend(*(id *)&v11[v12], "centerYAnchor");
  v46 = objc_msgSend(v44, "constraintEqualToAnchor:", v45);

  v47 = *(void **)&v14[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampHiddenConstraint];
  *(_QWORD *)&v14[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampHiddenConstraint] = v46;

  v48 = sub_1001608BC();
  v49 = objc_msgSend(v48, "centerYAnchor");

  v50 = objc_msgSend(*(id *)&v11[v12], "centerYAnchor");
  v51 = objc_msgSend(v49, "constraintEqualToAnchor:constant:", v50, -10.0);

  v52 = *(void **)&v14[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampVisibleConstraint];
  *(_QWORD *)&v14[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampVisibleConstraint] = v51;

  v53 = swift_allocObject(v112, 40, 7);
  *(_OWORD *)(v53 + 16) = xmmword_100241880;
  v54 = sub_1001608BC();
  v55 = objc_msgSend(v54, "leftAnchor");

  v56 = objc_msgSend(*(id *)&v11[v12], "leftAnchor");
  v57 = objc_msgSend(v55, "constraintEqualToAnchor:constant:", v56, 10.0);

  *(_QWORD *)(v53 + 32) = v57;
  specialized Array._endMutation()(v58);
  v59 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v53);
  objc_msgSend(v111, "activateConstraints:", v59);

  v60 = swift_allocObject(v112, 48, 7);
  *(_OWORD *)(v60 + 16) = xmmword_100240270;
  v61 = sub_100160A08();
  v62 = objc_msgSend(v61, "centerYAnchor");

  v63 = sub_1001608BC();
  v64 = objc_msgSend(v63, "centerYAnchor");

  v65 = objc_msgSend(v62, "constraintEqualToAnchor:", v64);
  *(_QWORD *)(v60 + 32) = v65;
  v66 = sub_100160A08();
  v67 = objc_msgSend(v66, "leftAnchor");

  v68 = objc_msgSend(v14, "centerXAnchor");
  v69 = objc_msgSend(v67, "constraintEqualToAnchor:constant:", v68, 10.0);

  *(_QWORD *)(v60 + 40) = v69;
  specialized Array._endMutation()(v70);
  v71 = v60;
  v72 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v71);
  objc_msgSend(v111, "activateConstraints:", v72);

  v73 = swift_allocObject(v112, 48, 7);
  *(_OWORD *)(v73 + 16) = xmmword_100240270;
  v74 = sub_100160BC0();
  v75 = objc_msgSend(v74, "rightAnchor");

  v76 = objc_msgSend(v14, "rightAnchor");
  v77 = objc_msgSend(v75, "constraintEqualToAnchor:constant:", v76, -15.0);

  *(_QWORD *)(v73 + 32) = v77;
  v78 = sub_100160BC0();
  v79 = objc_msgSend(v78, "centerYAnchor");

  v80 = objc_msgSend(v14, "centerYAnchor");
  v81 = objc_msgSend(v79, "constraintEqualToAnchor:", v80);

  *(_QWORD *)(v73 + 40) = v81;
  specialized Array._endMutation()(v82);
  v83 = v73;
  v84 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v83);
  objc_msgSend(v111, "activateConstraints:", v84);

  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  v85 = *(_QWORD *)(qword_1002BF068 + 32);
  v86 = *(_QWORD *)(qword_1002BF068 + 40);
  if (v85 == 0x656E6F685069 && v86 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v85, v86, 0x656E6F685069, 0xE600000000000000, 0) & 1) != 0)
  {
    v87 = swift_allocObject(v112, 40, 7);
    *(_OWORD *)(v87 + 16) = xmmword_100241880;
    v88 = sub_100160A08();
    v89 = objc_msgSend(v88, "rightAnchor");

    v90 = sub_100160BC0();
    v91 = objc_msgSend(v90, "leftAnchor");

    v92 = objc_msgSend(v89, "constraintGreaterThanOrEqualToAnchor:constant:", v91, 5.0);
    *(_QWORD *)(v87 + 32) = v92;
    specialized Array._endMutation()(v93);
    v94 = v87;
    v95 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v94);
    objc_msgSend(v111, "activateConstraints:", v95);

  }
  v96 = swift_allocObject(v112, 48, 7);
  *(_OWORD *)(v96 + 16) = xmmword_100240270;
  v97 = sub_100160D80();
  v98 = objc_msgSend(v97, "leftAnchor");

  v99 = sub_1001608BC();
  v100 = objc_msgSend(v99, "leftAnchor");

  v101 = objc_msgSend(v98, "constraintEqualToAnchor:", v100);
  *(_QWORD *)(v96 + 32) = v101;
  v102 = sub_100160D80();
  v103 = objc_msgSend(v102, "topAnchor");

  v104 = sub_1001608BC();
  v105 = objc_msgSend(v104, "bottomAnchor");

  v106 = objc_msgSend(v103, "constraintEqualToAnchor:constant:", v105, 5.0);
  *(_QWORD *)(v96 + 40) = v106;
  specialized Array._endMutation()(v107);
  v108 = v96;
  v109 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v108);
  objc_msgSend(v111, "activateConstraints:", v109);

  return v14;
}

void sub_100161A54()
{
  char *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  objc_super v18;

  v18.receiver = v0;
  v18.super_class = (Class)type metadata accessor for AllMetricsViewCell();
  objc_msgSendSuper2(&v18, "layoutSubviews");
  v1 = objc_msgSend(v0, "layer");
  objc_msgSend(v1, "setCornerRadius:", 10.0);

  v2 = objc_msgSend(v0, "layer");
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v4 = objc_msgSend(v3, "CGColor");

  objc_msgSend(v2, "setBorderColor:", v4);
  v5 = objc_msgSend(v0, "layer");
  objc_msgSend(v5, "setMasksToBounds:", 1);

  v6 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampHiddenConstraint];
  if (v6)
  {
    v7 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampVisibleConstraint];
    if (v7)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_100160D80();
      v11 = objc_msgSend(v10, "text");

      if (!v11)
        goto LABEL_7;
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      swift_bridgeObjectRelease(v14);
      v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0)
        v15 = v12 & 0xFFFFFFFFFFFFLL;
      v16 = v8;
      v17 = v9;
      if (v15)
      {
LABEL_7:
        v16 = v9;
        v17 = v8;
      }
      objc_msgSend(v16, "setActive:", 1);
      objc_msgSend(v17, "setActive:", 0);

    }
  }
}

void sub_100161CDC()
{
  sub_1001634E4((uint64_t (*)(void))sub_1001608BC, (uint64_t (*)(void))sub_100160A08, (uint64_t (*)(void))sub_100160D80);
}

id sub_100161D64()
{
  return sub_100165F68(type metadata accessor for AllMetricsViewCell);
}

uint64_t type metadata accessor for AllMetricsViewCell()
{
  return objc_opt_self(_TtC13FTMInternal_418AllMetricsViewCell);
}

id sub_100161E18()
{
  return sub_100164838(&OBJC_IVAR____TtC13FTMInternal_413TopHeaderView____lazy_storage___separatorView);
}

id sub_100161E24(double a1, double a2, double a3, double a4)
{
  char *v4;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  Class isa;
  objc_super v34;

  *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_413TopHeaderView____lazy_storage___separatorView] = 0;
  v34.receiver = v4;
  v34.super_class = (Class)type metadata accessor for TopHeaderView();
  v9 = objc_msgSendSuper2(&v34, "initWithFrame:", a1, a2, a3, a4);
  v10 = sub_100161E18();
  objc_msgSend(v9, "addSubview:", v10);

  v11 = sub_100161E18();
  objc_msgSend(v11, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v12 = (void *)objc_opt_self(NSLayoutConstraint);
  v13 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v14 = swift_allocObject(v13, 64, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100240400;
  v15 = sub_100161E18();
  v16 = objc_msgSend(v15, "centerXAnchor");

  v17 = objc_msgSend(v9, "centerXAnchor");
  v18 = objc_msgSend(v16, "constraintEqualToAnchor:", v17);

  *(_QWORD *)(v14 + 32) = v18;
  v19 = sub_100161E18();
  v20 = objc_msgSend(v19, "heightAnchor");

  v21 = objc_msgSend(v20, "constraintEqualToConstant:", 1.0);
  *(_QWORD *)(v14 + 40) = v21;
  v22 = sub_100161E18();
  v23 = objc_msgSend(v22, "widthAnchor");

  v24 = objc_msgSend(v9, "widthAnchor");
  v25 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

  *(_QWORD *)(v14 + 48) = v25;
  v26 = sub_100161E18();
  v27 = objc_msgSend(v26, "bottomAnchor");

  v28 = objc_msgSend(v9, "bottomAnchor");
  v29 = objc_msgSend(v27, "constraintEqualToAnchor:constant:", v28, 1.0);

  *(_QWORD *)(v14 + 56) = v29;
  specialized Array._endMutation()(v30);
  v31 = v14;
  sub_10014C4C4();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  objc_msgSend(v12, "activateConstraints:", isa);

  return v9;
}

id sub_1001621B4()
{
  return sub_100165F68(type metadata accessor for TopHeaderView);
}

uint64_t type metadata accessor for TopHeaderView()
{
  return objc_opt_self(_TtC13FTMInternal_413TopHeaderView);
}

id sub_1001621F0()
{
  return sub_100162200(&OBJC_IVAR____TtC13FTMInternal_432CollectionHeaderSuplementaryCell____lazy_storage___headerLabel, 18.0);
}

id sub_100162200(uint64_t *a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = sub_100162268(a2);
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

id sub_100162258()
{
  return sub_100162200(&OBJC_IVAR____TtC13FTMInternal_432CollectionHeaderSuplementaryCell____lazy_storage___subHeaderLabel, 14.0);
}

id sub_100162268(double a1)
{
  id v2;
  NSString v3;
  id v4;
  id v5;

  v2 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v3);

  objc_msgSend(v2, "setTextColor:", v4);
  v5 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", a1, UIFontWeightBold);
  objc_msgSend(v2, "setFont:", v5);

  objc_msgSend(v2, "setTextAlignment:", 0);
  return v2;
}

id sub_100162370(double a1, double a2, double a3, double a4)
{
  char *v4;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  Class isa;
  id v43;
  objc_super v44;

  *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_432CollectionHeaderSuplementaryCell____lazy_storage___headerLabel] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_432CollectionHeaderSuplementaryCell____lazy_storage___subHeaderLabel] = 0;
  v44.receiver = v4;
  v44.super_class = (Class)type metadata accessor for CollectionHeaderSuplementaryCell();
  v9 = objc_msgSendSuper2(&v44, "initWithFrame:", a1, a2, a3, a4);
  v10 = sub_1001621F0();
  objc_msgSend(v9, "addSubview:", v10);

  v11 = v9;
  v12 = sub_100162258();
  objc_msgSend(v11, "addSubview:", v12);

  v13 = sub_1001621F0();
  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v14 = sub_100162258();
  objc_msgSend(v14, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v43 = (id)objc_opt_self(NSLayoutConstraint);
  v15 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v16 = swift_allocObject(v15, 80, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100241890;
  v17 = sub_1001621F0();
  v18 = objc_msgSend(v17, "topAnchor");

  v19 = objc_msgSend(v11, "topAnchor");
  v20 = objc_msgSend(v18, "constraintEqualToAnchor:constant:", v19, 10.0);

  *(_QWORD *)(v16 + 32) = v20;
  v21 = sub_1001621F0();
  v22 = objc_msgSend(v21, "leftAnchor");

  v23 = objc_msgSend(v11, "leftAnchor");
  v24 = objc_msgSend(v22, "constraintEqualToAnchor:constant:", v23, 20.0);

  *(_QWORD *)(v16 + 40) = v24;
  v25 = sub_1001621F0();
  v26 = objc_msgSend(v25, "heightAnchor");

  v27 = objc_msgSend(v26, "constraintEqualToConstant:", 21.0);
  *(_QWORD *)(v16 + 48) = v27;
  v28 = sub_100162258();
  v29 = objc_msgSend(v28, "topAnchor");

  v30 = objc_msgSend(v11, "topAnchor");
  v31 = objc_msgSend(v29, "constraintEqualToAnchor:constant:", v30, 10.0);

  *(_QWORD *)(v16 + 56) = v31;
  v32 = sub_100162258();
  v33 = objc_msgSend(v32, "leftAnchor");

  v34 = objc_msgSend(v11, "centerXAnchor");
  v35 = objc_msgSend(v33, "constraintEqualToAnchor:constant:", v34, 10.0);

  *(_QWORD *)(v16 + 64) = v35;
  v36 = sub_1001621F0();
  v37 = objc_msgSend(v36, "heightAnchor");

  v38 = objc_msgSend(v37, "constraintEqualToConstant:", 17.0);
  *(_QWORD *)(v16 + 72) = v38;
  specialized Array._endMutation()(v39);
  v40 = v16;
  sub_10014C4C4();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v40);
  objc_msgSend(v43, "activateConstraints:", isa);

  return v11;
}

id sub_1001627C4()
{
  return sub_100165F68(type metadata accessor for CollectionHeaderSuplementaryCell);
}

uint64_t type metadata accessor for CollectionHeaderSuplementaryCell()
{
  return objc_opt_self(_TtC13FTMInternal_432CollectionHeaderSuplementaryCell);
}

id sub_100162828()
{
  return sub_100164724(&OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___titleLabel, (double *)&UIFontWeightSemibold, 15.0);
}

id sub_100162840()
{
  return sub_100164724(&OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___subtitleLabel, (double *)&UIFontWeightMedium, 13.0);
}

id sub_100162858()
{
  return sub_10016287C(&OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___valueLabel, 0x726564616548, 0xE600000000000000, (double *)&UIFontWeightMedium);
}

id sub_10016287C(uint64_t *a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  v5 = *a1;
  v6 = *(void **)(v4 + *a1);
  if (v6)
  {
    v7 = *(id *)(v4 + *a1);
  }
  else
  {
    v8 = sub_10016512C(2, a2, a3, a4);
    v9 = *(void **)(v4 + v5);
    *(_QWORD *)(v4 + v5) = v8;
    v7 = v8;

    v6 = 0;
  }
  v10 = v6;
  return v7;
}

id sub_1001628D8()
{
  return sub_1001637DC(&OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___activityIndicator);
}

id sub_1001628E4()
{
  return sub_100164838(&OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___separatorView);
}

id sub_1001628F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  NSString v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  Class isa;
  void *v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  Class v55;
  uint64_t v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  Class v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  Class v83;
  void *v84;
  uint64_t v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  Class v103;
  objc_super v105;

  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___titleLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___subtitleLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___valueLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___activityIndicator] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_420FavoritesTableCellV2____lazy_storage___separatorView] = 0;
  if (a3)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v6 = 0;
  }
  v105.receiver = v3;
  v105.super_class = (Class)type metadata accessor for FavoritesTableCellV2();
  v7 = objc_msgSendSuper2(&v105, "initWithStyle:reuseIdentifier:", a1, v6);

  v8 = v7;
  v9 = objc_msgSend(v8, "contentView");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v10);

  objc_msgSend(v9, "setBackgroundColor:", v11);
  objc_msgSend(v8, "setSelectionStyle:", 0);
  v12 = objc_msgSend(v8, "contentView");
  v13 = sub_100162828();
  objc_msgSend(v12, "addSubview:", v13);

  v14 = objc_msgSend(v8, "contentView");
  v15 = sub_100162840();
  objc_msgSend(v14, "addSubview:", v15);

  v16 = objc_msgSend(v8, "contentView");
  v17 = sub_100162858();
  objc_msgSend(v16, "addSubview:", v17);

  v18 = objc_msgSend(v8, "contentView");
  v19 = sub_1001628D8();
  objc_msgSend(v18, "addSubview:", v19);

  v20 = objc_msgSend(v8, "contentView");
  v21 = sub_1001628E4();
  objc_msgSend(v20, "addSubview:", v21);

  v22 = sub_100162828();
  objc_msgSend(v22, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v23 = sub_100162840();
  objc_msgSend(v23, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v24 = sub_100162858();
  objc_msgSend(v24, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v25 = sub_1001628D8();
  objc_msgSend(v25, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v26 = sub_1001628E4();
  objc_msgSend(v26, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v27 = (void *)objc_opt_self(NSLayoutConstraint);
  v28 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v29 = swift_allocObject(v28, 48, 7);
  *(_OWORD *)(v29 + 16) = xmmword_100240270;
  v30 = sub_100162828();
  v31 = objc_msgSend(v30, "topAnchor");

  v32 = objc_msgSend(v8, "topAnchor");
  v33 = objc_msgSend(v31, "constraintEqualToAnchor:constant:", v32, 5.0);

  *(_QWORD *)(v29 + 32) = v33;
  v34 = sub_100162828();
  v35 = objc_msgSend(v34, "leftAnchor");

  v36 = sub_1001628E4();
  v37 = objc_msgSend(v36, "leftAnchor");

  v38 = objc_msgSend(v35, "constraintEqualToAnchor:", v37);
  *(_QWORD *)(v29 + 40) = v38;
  specialized Array._endMutation()(v39);
  sub_10014C4C4();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v29);
  v41 = v27;
  objc_msgSend(v27, "activateConstraints:", isa);

  v42 = swift_allocObject(v28, 48, 7);
  *(_OWORD *)(v42 + 16) = xmmword_100240270;
  v43 = sub_100162840();
  v44 = objc_msgSend(v43, "leftAnchor");

  v45 = sub_100162828();
  v46 = objc_msgSend(v45, "leftAnchor");

  v47 = objc_msgSend(v44, "constraintEqualToAnchor:", v46);
  *(_QWORD *)(v42 + 32) = v47;
  v48 = sub_100162840();
  v49 = objc_msgSend(v48, "topAnchor");

  v50 = sub_100162828();
  v51 = objc_msgSend(v50, "bottomAnchor");

  v52 = objc_msgSend(v49, "constraintEqualToAnchor:constant:", v51, 5.0);
  *(_QWORD *)(v42 + 40) = v52;
  specialized Array._endMutation()(v53);
  v54 = v42;
  v55 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v54);
  objc_msgSend(v41, "activateConstraints:", v55);

  v56 = swift_allocObject(v28, 48, 7);
  *(_OWORD *)(v56 + 16) = xmmword_100240270;
  v57 = sub_100162858();
  v58 = objc_msgSend(v57, "centerYAnchor");

  v59 = sub_100162840();
  v60 = objc_msgSend(v59, "centerYAnchor");

  v61 = objc_msgSend(v58, "constraintEqualToAnchor:", v60);
  *(_QWORD *)(v56 + 32) = v61;
  v62 = sub_100162858();
  v63 = objc_msgSend(v62, "rightAnchor");

  v64 = sub_1001628E4();
  v65 = objc_msgSend(v64, "rightAnchor");

  v66 = objc_msgSend(v63, "constraintEqualToAnchor:", v65);
  *(_QWORD *)(v56 + 40) = v66;
  specialized Array._endMutation()(v67);
  v68 = v56;
  v69 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v68);
  objc_msgSend(v41, "activateConstraints:", v69);

  v70 = swift_allocObject(v28, 48, 7);
  *(_OWORD *)(v70 + 16) = xmmword_100240270;
  v71 = sub_1001628D8();
  v72 = objc_msgSend(v71, "centerYAnchor");

  v73 = objc_msgSend(v8, "contentView");
  v74 = objc_msgSend(v73, "centerYAnchor");

  v75 = objc_msgSend(v72, "constraintEqualToAnchor:", v74);
  *(_QWORD *)(v70 + 32) = v75;
  v76 = sub_1001628D8();
  v77 = objc_msgSend(v76, "rightAnchor");

  v78 = sub_1001628E4();
  v79 = objc_msgSend(v78, "rightAnchor");

  v80 = objc_msgSend(v77, "constraintEqualToAnchor:", v79);
  *(_QWORD *)(v70 + 40) = v80;
  specialized Array._endMutation()(v81);
  v82 = v70;
  v83 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v82);
  v84 = v41;
  objc_msgSend(v41, "activateConstraints:", v83);

  v85 = swift_allocObject(v28, 64, 7);
  *(_OWORD *)(v85 + 16) = xmmword_100240400;
  v86 = sub_1001628E4();
  v87 = objc_msgSend(v86, "centerXAnchor");

  v88 = objc_msgSend(v8, "centerXAnchor");
  v89 = objc_msgSend(v87, "constraintEqualToAnchor:", v88);

  *(_QWORD *)(v85 + 32) = v89;
  v90 = sub_1001628E4();
  v91 = objc_msgSend(v90, "heightAnchor");

  v92 = objc_msgSend(v91, "constraintEqualToConstant:", 1.0);
  *(_QWORD *)(v85 + 40) = v92;
  v93 = sub_1001628E4();
  v94 = objc_msgSend(v93, "widthAnchor");

  v95 = objc_msgSend(v8, "widthAnchor");
  v96 = objc_msgSend(v94, "constraintEqualToAnchor:constant:", v95, -40.0);

  *(_QWORD *)(v85 + 48) = v96;
  v97 = sub_1001628E4();
  v98 = objc_msgSend(v97, "bottomAnchor");

  v99 = objc_msgSend(v8, "contentView");
  v100 = objc_msgSend(v99, "bottomAnchor");

  v101 = objc_msgSend(v98, "constraintEqualToAnchor:constant:", v100, -5.0);
  *(_QWORD *)(v85 + 56) = v101;
  specialized Array._endMutation()(v102);
  v103 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v85);
  objc_msgSend(v84, "activateConstraints:", v103);

  return v8;
}

void sub_10016346C(void *a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(id))
{
  id v5;
  id v6;
  objc_super v7;

  v7.receiver = a1;
  v7.super_class = (Class)a3();
  v5 = v7.receiver;
  v6 = objc_msgSendSuper2(&v7, "prepareForReuse");
  a4(v6);

}

void sub_1001634C8()
{
  sub_1001634E4((uint64_t (*)(void))sub_100162828, (uint64_t (*)(void))sub_100162840, (uint64_t (*)(void))sub_100162858);
}

void sub_1001634E4(uint64_t (*a1)(void), uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  void *v5;
  NSString v6;
  void *v7;
  NSString v8;
  void *v9;
  NSString v10;

  v5 = (void *)a1();
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setText:", v6);

  v7 = (void *)a2();
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setText:", v8);

  v9 = (void *)a3();
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setText:", v10);

}

id sub_1001635B0()
{
  return sub_100165F68(type metadata accessor for FavoritesTableCellV2);
}

uint64_t type metadata accessor for FavoritesTableCellV2()
{
  return objc_opt_self(_TtC13FTMInternal_420FavoritesTableCellV2);
}

id sub_100163644()
{
  return sub_100164724(&OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___titleLabel, (double *)&UIFontWeightSemibold, 15.0);
}

id sub_10016365C()
{
  return sub_100164724(&OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___subtitleLabel, (double *)&UIFontWeightMedium, 14.0);
}

id sub_100163674()
{
  return sub_100160A1C(&OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___bottomLabel, (uint64_t (*)(void))sub_100163688);
}

id sub_100163688()
{
  id v0;
  NSString v1;
  id v2;
  NSString v3;
  id v4;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setText:", v1);

  objc_msgSend(v0, "setTextAlignment:", 0);
  v2 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 12.0, UIFontWeightLight);
  objc_msgSend(v0, "setFont:", v2);

  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v3);

  objc_msgSend(v0, "setTextColor:", v4);
  return v0;
}

id sub_1001637AC()
{
  return sub_10016287C(&OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___valueLabel, 0x726564616548, 0xE600000000000000, (double *)&UIFontWeightMedium);
}

id sub_1001637D0()
{
  return sub_1001637DC(&OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___activityIndicator);
}

id sub_1001637DC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  NSString v6;
  id v7;
  void *v8;
  id v9;

  v2 = *a1;
  v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    v4 = *(id *)(v1 + *a1);
  }
  else
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)UIActivityIndicatorView), "initWithActivityIndicatorStyle:", 100);
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v6);

    objc_msgSend(v5, "setColor:", v7);
    objc_msgSend(v5, "setHidesWhenStopped:", 1);
    v8 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    v4 = v5;

    v3 = 0;
  }
  v9 = v3;
  return v4;
}

id sub_1001638C8()
{
  return sub_100164838(&OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___separatorView);
}

id sub_1001638D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  NSString v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  Class isa;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  Class v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  Class v71;
  uint64_t v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  Class v85;
  uint64_t v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  Class v99;
  uint64_t v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  uint64_t v117;
  Class v118;
  objc_super v120;

  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___titleLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___subtitleLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___bottomLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___valueLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___activityIndicator] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___separatorView] = 0;
  if (a3)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v6 = 0;
  }
  v120.receiver = v3;
  v120.super_class = (Class)type metadata accessor for DashboardCell();
  v7 = objc_msgSendSuper2(&v120, "initWithStyle:reuseIdentifier:", a1, v6);

  v8 = v7;
  v9 = objc_msgSend(v8, "contentView");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v10);

  objc_msgSend(v9, "setBackgroundColor:", v11);
  objc_msgSend(v8, "setSelectionStyle:", 0);
  v12 = objc_msgSend(v8, "contentView");
  v13 = sub_100163644();
  objc_msgSend(v12, "addSubview:", v13);

  v14 = objc_msgSend(v8, "contentView");
  v15 = sub_10016365C();
  objc_msgSend(v14, "addSubview:", v15);

  v16 = objc_msgSend(v8, "contentView");
  v17 = sub_100163674();
  objc_msgSend(v16, "addSubview:", v17);

  v18 = objc_msgSend(v8, "contentView");
  v19 = sub_1001637AC();
  objc_msgSend(v18, "addSubview:", v19);

  v20 = objc_msgSend(v8, "contentView");
  v21 = sub_1001637D0();
  objc_msgSend(v20, "addSubview:", v21);

  v22 = objc_msgSend(v8, "contentView");
  v23 = sub_1001638C8();
  objc_msgSend(v22, "addSubview:", v23);

  v24 = sub_100163644();
  objc_msgSend(v24, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v25 = sub_10016365C();
  objc_msgSend(v25, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v26 = sub_100163674();
  objc_msgSend(v26, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v27 = sub_1001637AC();
  objc_msgSend(v27, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v28 = sub_1001637D0();
  objc_msgSend(v28, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v29 = sub_1001638C8();
  objc_msgSend(v29, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v30 = (void *)objc_opt_self(NSLayoutConstraint);
  v31 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v32 = swift_allocObject(v31, 48, 7);
  *(_OWORD *)(v32 + 16) = xmmword_100240270;
  v33 = sub_100163644();
  v34 = objc_msgSend(v33, "topAnchor");

  v35 = objc_msgSend(v8, "topAnchor");
  v36 = objc_msgSend(v34, "constraintEqualToAnchor:constant:", v35, 5.0);

  *(_QWORD *)(v32 + 32) = v36;
  v37 = sub_100163644();
  v38 = objc_msgSend(v37, "leftAnchor");

  v39 = sub_1001638C8();
  v40 = objc_msgSend(v39, "leftAnchor");

  v41 = objc_msgSend(v38, "constraintEqualToAnchor:", v40);
  *(_QWORD *)(v32 + 40) = v41;
  specialized Array._endMutation()(v42);
  sub_10014C4C4();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v32);
  objc_msgSend(v30, "activateConstraints:", isa);

  v44 = swift_allocObject(v31, 48, 7);
  *(_OWORD *)(v44 + 16) = xmmword_100240270;
  v45 = sub_10016365C();
  v46 = objc_msgSend(v45, "leftAnchor");

  v47 = sub_100163644();
  v48 = objc_msgSend(v47, "leftAnchor");

  v49 = objc_msgSend(v46, "constraintEqualToAnchor:", v48);
  *(_QWORD *)(v44 + 32) = v49;
  v50 = sub_10016365C();
  v51 = objc_msgSend(v50, "topAnchor");

  v52 = sub_100163644();
  v53 = objc_msgSend(v52, "bottomAnchor");

  v54 = objc_msgSend(v51, "constraintEqualToAnchor:constant:", v53, 5.0);
  *(_QWORD *)(v44 + 40) = v54;
  specialized Array._endMutation()(v55);
  v56 = v44;
  v57 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v56);
  objc_msgSend(v30, "activateConstraints:", v57);

  v58 = swift_allocObject(v31, 48, 7);
  *(_OWORD *)(v58 + 16) = xmmword_100240270;
  v59 = sub_100163674();
  v60 = objc_msgSend(v59, "leftAnchor");

  v61 = sub_10016365C();
  v62 = objc_msgSend(v61, "leftAnchor");

  v63 = objc_msgSend(v60, "constraintEqualToAnchor:", v62);
  *(_QWORD *)(v58 + 32) = v63;
  v64 = sub_100163674();
  v65 = objc_msgSend(v64, "topAnchor");

  v66 = sub_10016365C();
  v67 = objc_msgSend(v66, "bottomAnchor");

  v68 = objc_msgSend(v65, "constraintEqualToAnchor:constant:", v67, 5.0);
  *(_QWORD *)(v58 + 40) = v68;
  specialized Array._endMutation()(v69);
  v70 = v58;
  v71 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v70);
  objc_msgSend(v30, "activateConstraints:", v71);

  v72 = swift_allocObject(v31, 48, 7);
  *(_OWORD *)(v72 + 16) = xmmword_100240270;
  v73 = sub_1001637AC();
  v74 = objc_msgSend(v73, "centerYAnchor");

  v75 = sub_10016365C();
  v76 = objc_msgSend(v75, "centerYAnchor");

  v77 = objc_msgSend(v74, "constraintEqualToAnchor:", v76);
  *(_QWORD *)(v72 + 32) = v77;
  v78 = sub_1001637AC();
  v79 = objc_msgSend(v78, "rightAnchor");

  v80 = sub_1001638C8();
  v81 = objc_msgSend(v80, "rightAnchor");

  v82 = objc_msgSend(v79, "constraintEqualToAnchor:", v81);
  *(_QWORD *)(v72 + 40) = v82;
  specialized Array._endMutation()(v83);
  v84 = v72;
  v85 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v84);
  objc_msgSend(v30, "activateConstraints:", v85);

  v86 = swift_allocObject(v31, 48, 7);
  *(_OWORD *)(v86 + 16) = xmmword_100240270;
  v87 = sub_1001637D0();
  v88 = objc_msgSend(v87, "centerYAnchor");

  v89 = sub_10016365C();
  v90 = objc_msgSend(v89, "centerYAnchor");

  v91 = objc_msgSend(v88, "constraintEqualToAnchor:", v90);
  *(_QWORD *)(v86 + 32) = v91;
  v92 = sub_1001637D0();
  v93 = objc_msgSend(v92, "rightAnchor");

  v94 = sub_1001638C8();
  v95 = objc_msgSend(v94, "rightAnchor");

  v96 = objc_msgSend(v93, "constraintEqualToAnchor:", v95);
  *(_QWORD *)(v86 + 40) = v96;
  specialized Array._endMutation()(v97);
  v98 = v86;
  v99 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v98);
  objc_msgSend(v30, "activateConstraints:", v99);

  v100 = swift_allocObject(v31, 64, 7);
  *(_OWORD *)(v100 + 16) = xmmword_100240400;
  v101 = sub_1001638C8();
  v102 = objc_msgSend(v101, "centerXAnchor");

  v103 = objc_msgSend(v8, "centerXAnchor");
  v104 = objc_msgSend(v102, "constraintEqualToAnchor:", v103);

  *(_QWORD *)(v100 + 32) = v104;
  v105 = sub_1001638C8();
  v106 = objc_msgSend(v105, "heightAnchor");

  v107 = objc_msgSend(v106, "constraintEqualToConstant:", 1.0);
  *(_QWORD *)(v100 + 40) = v107;
  v108 = sub_1001638C8();
  v109 = objc_msgSend(v108, "widthAnchor");

  v110 = objc_msgSend(v8, "widthAnchor");
  v111 = objc_msgSend(v109, "constraintEqualToAnchor:constant:", v110, -40.0);

  *(_QWORD *)(v100 + 48) = v111;
  v112 = sub_1001638C8();
  v113 = objc_msgSend(v112, "bottomAnchor");

  v114 = objc_msgSend(v8, "contentView");
  v115 = objc_msgSend(v114, "bottomAnchor");

  v116 = objc_msgSend(v113, "constraintEqualToAnchor:constant:", v115, -5.0);
  *(_QWORD *)(v100 + 56) = v116;
  specialized Array._endMutation()(v117);
  v118 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v100);
  objc_msgSend(v30, "activateConstraints:", v118);

  return v8;
}

void sub_10016457C()
{
  id v0;
  NSString v1;
  id v2;
  NSString v3;
  id v4;
  NSString v5;
  id v6;
  NSString v7;

  v0 = sub_100163644();
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setText:", v1);

  v2 = sub_10016365C();
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setText:", v3);

  v4 = sub_100163674();
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setText:", v5);

  v6 = sub_1001637AC();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setText:", v7);

}

id sub_100164668()
{
  return sub_100165F68(type metadata accessor for DashboardCell);
}

uint64_t type metadata accessor for DashboardCell()
{
  return objc_opt_self(_TtC13FTMInternal_413DashboardCell);
}

id sub_10016470C()
{
  return sub_100164724(&OBJC_IVAR____TtC13FTMInternal_423MultiSelectionModalCell____lazy_storage___titleLabel, (double *)&UIFontWeightSemibold, 15.0);
}

id sub_100164724(uint64_t *a1, double *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v9;
  NSString v10;
  id v11;
  void *v12;
  id v13;

  v4 = *a1;
  v5 = *(void **)(v3 + *a1);
  if (v5)
  {
    v6 = *(id *)(v3 + *a1);
  }
  else
  {
    v9 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setText:", v10);

    objc_msgSend(v9, "setTextAlignment:", 0);
    v11 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", a3, *a2);
    objc_msgSend(v9, "setFont:", v11);

    v12 = *(void **)(v3 + v4);
    *(_QWORD *)(v3 + v4) = v9;
    v6 = v9;

    v5 = 0;
  }
  v13 = v5;
  return v6;
}

id sub_10016482C()
{
  return sub_100164838(&OBJC_IVAR____TtC13FTMInternal_423MultiSelectionModalCell____lazy_storage___separatorView);
}

id sub_100164838(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  NSString v6;
  id v7;
  void *v8;
  id v9;

  v2 = *a1;
  v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    v4 = *(id *)(v1 + *a1);
  }
  else
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v6);

    objc_msgSend(v5, "setBackgroundColor:", v7);
    v8 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    v4 = v5;

    v3 = 0;
  }
  v9 = v3;
  return v4;
}

id sub_100164918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  NSString v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  Class isa;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  Class v49;
  objc_super v51;

  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_423MultiSelectionModalCell____lazy_storage___titleLabel] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_423MultiSelectionModalCell____lazy_storage___separatorView] = 0;
  if (a3)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v6 = 0;
  }
  v51.receiver = v3;
  v51.super_class = (Class)type metadata accessor for MultiSelectionModalCell();
  v7 = objc_msgSendSuper2(&v51, "initWithStyle:reuseIdentifier:", a1, v6);

  v8 = v7;
  v9 = objc_msgSend(v8, "contentView");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v10);

  objc_msgSend(v9, "setBackgroundColor:", v11);
  objc_msgSend(v8, "setSelectionStyle:", 0);
  v12 = objc_msgSend(v8, "contentView");
  v13 = sub_10016470C();
  objc_msgSend(v12, "addSubview:", v13);

  v14 = objc_msgSend(v8, "contentView");
  v15 = sub_10016482C();
  objc_msgSend(v14, "addSubview:", v15);

  v16 = sub_10016470C();
  objc_msgSend(v16, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v17 = sub_10016482C();
  objc_msgSend(v17, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v18 = (void *)objc_opt_self(NSLayoutConstraint);
  v19 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v20 = swift_allocObject(v19, 48, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100240270;
  v21 = sub_10016470C();
  v22 = objc_msgSend(v21, "centerXAnchor");

  v23 = objc_msgSend(v8, "centerXAnchor");
  v24 = objc_msgSend(v22, "constraintEqualToAnchor:", v23);

  *(_QWORD *)(v20 + 32) = v24;
  v25 = sub_10016470C();
  v26 = objc_msgSend(v25, "centerYAnchor");

  v27 = objc_msgSend(v8, "centerYAnchor");
  v28 = objc_msgSend(v26, "constraintEqualToAnchor:", v27);

  *(_QWORD *)(v20 + 40) = v28;
  specialized Array._endMutation()(v29);
  sub_10014C4C4();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  objc_msgSend(v18, "activateConstraints:", isa);

  v31 = swift_allocObject(v19, 64, 7);
  *(_OWORD *)(v31 + 16) = xmmword_100240400;
  v32 = sub_10016482C();
  v33 = objc_msgSend(v32, "centerXAnchor");

  v34 = objc_msgSend(v8, "centerXAnchor");
  v35 = objc_msgSend(v33, "constraintEqualToAnchor:", v34);

  *(_QWORD *)(v31 + 32) = v35;
  v36 = sub_10016482C();
  v37 = objc_msgSend(v36, "heightAnchor");

  v38 = objc_msgSend(v37, "constraintEqualToConstant:", 1.0);
  *(_QWORD *)(v31 + 40) = v38;
  v39 = sub_10016482C();
  v40 = objc_msgSend(v39, "widthAnchor");

  v41 = objc_msgSend(v8, "widthAnchor");
  v42 = objc_msgSend(v40, "constraintEqualToAnchor:constant:", v41, -40.0);

  *(_QWORD *)(v31 + 48) = v42;
  v43 = sub_10016482C();
  v44 = objc_msgSend(v43, "bottomAnchor");

  v45 = objc_msgSend(v8, "contentView");
  v46 = objc_msgSend(v45, "bottomAnchor");

  v47 = objc_msgSend(v44, "constraintEqualToAnchor:constant:", v46, -5.0);
  *(_QWORD *)(v31 + 56) = v47;
  specialized Array._endMutation()(v48);
  v49 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  objc_msgSend(v18, "activateConstraints:", v49);

  return v8;
}

uint64_t sub_100164E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    a4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
    v8 = v7;
  }
  else
  {
    v8 = 0;
  }
  return a5(a3, a4, v8);
}

void sub_100164F04(char *a1, uint64_t a2, void *a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  id v8;

  *(_QWORD *)&a1[*a4] = 0;
  *(_QWORD *)&a1[*a5] = 0;
  v8 = a3;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100211390, "FTMInternal_4/Cells.swift", 25, 2, a6, 0);
  __break(1u);
}

void sub_100164F90(void *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(id))
{
  id v5;
  id v6;
  void *v7;
  NSString v8;
  objc_super v9;

  v9.receiver = a1;
  v9.super_class = (Class)a3();
  v5 = v9.receiver;
  v6 = objc_msgSendSuper2(&v9, "prepareForReuse");
  v7 = (void *)a4(v6);
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setText:", v8, v9.receiver, v9.super_class);

}

id sub_10016501C()
{
  return sub_100165F68(type metadata accessor for MultiSelectionModalCell);
}

uint64_t type metadata accessor for MultiSelectionModalCell()
{
  return objc_opt_self(_TtC13FTMInternal_423MultiSelectionModalCell);
}

id sub_100165080()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___leftLabel;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___leftLabel);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___leftLabel);
  }
  else
  {
    v4 = sub_10016512C(0, 0x656C746954, 0xE500000000000000, (double *)&UIFontWeightLight);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1001650F8()
{
  return sub_10016287C(&OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___rightLabel, 0x656C746974627553, 0xEF737265626D754ELL, (double *)&UIFontWeightLight);
}

id sub_10016512C(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  id v6;
  NSString v7;
  NSString v8;
  id v9;
  id v10;

  v6 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setText:", v7);

  objc_msgSend(v6, "setTextAlignment:", a1);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v8);

  objc_msgSend(v6, "setTextColor:", v9);
  v10 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 13.0, *a4);
  objc_msgSend(v6, "setFont:", v10);

  return v6;
}

id sub_100165258()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSString v5;
  id v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___separatorView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___separatorView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___separatorView);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    v5 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v5);

    objc_msgSend(v4, "setBackgroundColor:", v6);
    objc_msgSend(v4, "setHidden:", 1);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

id sub_100165354(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  id v9;
  id v10;
  NSString v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  Class isa;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  Class v55;
  uint64_t v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  Class v74;
  objc_super v76;

  v4[OBJC_IVAR____TtC13FTMInternal_412SecondVCCell_metricFavorited] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___leftLabel] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___rightLabel] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_412SecondVCCell____lazy_storage___separatorView] = 0;
  v76.receiver = v4;
  v76.super_class = (Class)type metadata accessor for SecondVCCell();
  v9 = objc_msgSendSuper2(&v76, "initWithFrame:", a1, a2, a3, a4);
  v10 = objc_msgSend(v9, "contentView");
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v11);

  objc_msgSend(v10, "setBackgroundColor:", v12);
  v13 = objc_msgSend(v9, "contentView");
  v14 = sub_100165080();
  objc_msgSend(v13, "addSubview:", v14);

  v15 = objc_msgSend(v9, "contentView");
  v16 = sub_1001650F8();
  objc_msgSend(v15, "addSubview:", v16);

  v17 = objc_msgSend(v9, "contentView");
  v18 = sub_100165258();
  objc_msgSend(v17, "addSubview:", v18);

  v19 = sub_100165080();
  objc_msgSend(v19, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v20 = sub_1001650F8();
  objc_msgSend(v20, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v21 = sub_100165258();
  objc_msgSend(v21, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v22 = (void *)objc_opt_self(NSLayoutConstraint);
  v23 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v24 = swift_allocObject(v23, 48, 7);
  *(_OWORD *)(v24 + 16) = xmmword_100240270;
  v25 = sub_100165080();
  v26 = objc_msgSend(v25, "bottomAnchor");

  v27 = sub_100165258();
  v28 = objc_msgSend(v27, "topAnchor");

  v29 = objc_msgSend(v26, "constraintEqualToAnchor:constant:", v28, -5.0);
  *(_QWORD *)(v24 + 32) = v29;
  v30 = sub_100165080();
  v31 = objc_msgSend(v30, "leftAnchor");

  v32 = sub_100165258();
  v33 = objc_msgSend(v32, "leftAnchor");

  v34 = objc_msgSend(v31, "constraintEqualToAnchor:", v33);
  *(_QWORD *)(v24 + 40) = v34;
  specialized Array._endMutation()(v35);
  sub_10014C4C4();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v24);
  objc_msgSend(v22, "activateConstraints:", isa);

  v37 = swift_allocObject(v23, 56, 7);
  *(_OWORD *)(v37 + 16) = xmmword_1002418A0;
  v38 = sub_1001650F8();
  v39 = objc_msgSend(v38, "centerYAnchor");

  v40 = sub_100165080();
  v41 = objc_msgSend(v40, "centerYAnchor");

  v42 = objc_msgSend(v39, "constraintEqualToAnchor:", v41);
  *(_QWORD *)(v37 + 32) = v42;
  v43 = sub_1001650F8();
  v44 = objc_msgSend(v43, "rightAnchor");

  v45 = sub_100165258();
  v46 = objc_msgSend(v45, "rightAnchor");

  v47 = objc_msgSend(v44, "constraintEqualToAnchor:", v46);
  *(_QWORD *)(v37 + 40) = v47;
  v48 = sub_1001650F8();
  v49 = objc_msgSend(v48, "leftAnchor");

  v50 = sub_100165080();
  v51 = objc_msgSend(v50, "rightAnchor");

  v52 = objc_msgSend(v49, "constraintGreaterThanOrEqualToSystemSpacingAfterAnchor:multiplier:", v51, 1.0);
  *(_QWORD *)(v37 + 48) = v52;
  specialized Array._endMutation()(v53);
  v54 = v37;
  v55 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v54);
  objc_msgSend(v22, "activateConstraints:", v55);

  v56 = swift_allocObject(v23, 64, 7);
  *(_OWORD *)(v56 + 16) = xmmword_100240400;
  v57 = sub_100165258();
  v58 = objc_msgSend(v57, "centerXAnchor");

  v59 = objc_msgSend(v9, "centerXAnchor");
  v60 = objc_msgSend(v58, "constraintEqualToAnchor:", v59);

  *(_QWORD *)(v56 + 32) = v60;
  v61 = sub_100165258();
  v62 = objc_msgSend(v61, "heightAnchor");

  v63 = objc_msgSend(v62, "constraintEqualToConstant:", 1.0);
  *(_QWORD *)(v56 + 40) = v63;
  v64 = sub_100165258();
  v65 = objc_msgSend(v64, "widthAnchor");

  v66 = objc_msgSend(v9, "widthAnchor");
  v67 = objc_msgSend(v65, "constraintEqualToAnchor:constant:", v66, -40.0);

  *(_QWORD *)(v56 + 48) = v67;
  v68 = sub_100165258();
  v69 = objc_msgSend(v68, "bottomAnchor");

  v70 = objc_msgSend(v9, "contentView");
  v71 = objc_msgSend(v70, "bottomAnchor");

  v72 = objc_msgSend(v69, "constraintEqualToAnchor:constant:", v71, -5.0);
  *(_QWORD *)(v56 + 56) = v72;
  specialized Array._endMutation()(v73);
  v74 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v56);
  objc_msgSend(v22, "activateConstraints:", v74);

  return v9;
}

void sub_100165BD8()
{
  id v0;
  NSString v1;
  id v2;
  NSString v3;
  id v4;
  NSString v5;
  id v6;

  v0 = sub_100165080();
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setText:", v1);

  v2 = sub_1001650F8();
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setText:", v3);

  v4 = sub_1001650F8();
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v5);

  objc_msgSend(v4, "setTextColor:", v6);
}

id sub_100165CE8(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  objc_super v4;

  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, "isHighlighted");
}

void sub_100165D84(char a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  _QWORD v16[5];
  uint64_t v17;
  objc_super v18;

  v18.receiver = v5;
  v18.super_class = (Class)a2();
  objc_msgSendSuper2(&v18, "setHighlighted:", a1 & 1);
  if (objc_msgSend(v5, "isHighlighted"))
  {
    v10 = objc_msgSend(objc_allocWithZone((Class)UISelectionFeedbackGenerator), "init");
    objc_msgSend(v10, "selectionChanged");
    objc_msgSend(v5, "setAlpha:", 0.5);
    v11 = (void *)objc_opt_self(UIView);
    v12 = swift_allocObject(a3, 24, 7);
    *(_QWORD *)(v12 + 16) = v5;
    v16[4] = a4;
    v17 = v12;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    v16[2] = sub_1001BE428;
    v16[3] = a5;
    v13 = _Block_copy(v16);
    v14 = v17;
    v15 = v5;
    swift_release(v14);
    objc_msgSend(v11, "animateWithDuration:delay:options:animations:completion:", 0, v13, 0, 0.5, 0.05);

    _Block_release(v13);
  }
}

id sub_100165ECC(void *a1)
{
  CGAffineTransform v3;

  objc_msgSend(a1, "setAlpha:", 1.0);
  CGAffineTransformMakeScale(&v3, 1.7, 1.7);
  objc_msgSend(a1, "setTransform:", &v3);
  *(_OWORD *)&v3.a = 0x3FF0000000000000uLL;
  v3.c = 0.0;
  v3.d = 1.0;
  *(_OWORD *)&v3.tx = 0uLL;
  return objc_msgSend(a1, "setTransform:", &v3);
}

id sub_100165F5C()
{
  return sub_100165F68(type metadata accessor for SecondVCCell);
}

id sub_100165F68(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for SecondVCCell()
{
  return objc_opt_self(_TtC13FTMInternal_412SecondVCCell);
}

uint64_t sub_100166000()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100166024()
{
  uint64_t v0;

  return sub_100165ECC(*(void **)(v0 + 16));
}

uint64_t sub_10016603C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10016604C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

void sub_100166054()
{
  char *v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_container;
  *(_QWORD *)&v0[v1] = sub_1001606D0();
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___metricNameLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___metricAvailabilityLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___activityIndicatorButton] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell____lazy_storage___bottomLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampHiddenConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_418AllMetricsViewCell_timestampVisibleConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100211390, "FTMInternal_4/Cells.swift", 25, 2, 121, 0);
  __break(1u);
}

void sub_10016610C()
{
  char *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___titleLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___subtitleLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___bottomLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___valueLabel] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___activityIndicator] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_413DashboardCell____lazy_storage___separatorView] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100211390, "FTMInternal_4/Cells.swift", 25, 2, 481, 0);
  __break(1u);
}

id sub_1001661C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v6;
  uint64_t v7;
  id v8;
  char *v9;
  NSString v10;
  id v11;
  id v12;
  objc_super v14;

  v6 = &v3[OBJC_IVAR____TtC13FTMInternal_410TickerCell_digit];
  *(_QWORD *)v6 = 48;
  *((_QWORD *)v6 + 1) = 0xE100000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_410TickerCell_fontSize] = 0x4044000000000000;
  v7 = OBJC_IVAR____TtC13FTMInternal_410TickerCell_numberLabel;
  v8 = objc_allocWithZone((Class)UILabel);
  v9 = v3;
  *(_QWORD *)&v3[v7] = objc_msgSend(v8, "init");

  if (a3)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v10 = 0;
  }
  v14.receiver = v9;
  v14.super_class = (Class)type metadata accessor for TickerCell();
  v11 = objc_msgSendSuper2(&v14, "initWithStyle:reuseIdentifier:", a1, v10);

  v12 = v11;
  sub_1001663D0();

  return v12;
}

void sub_1001663D0()
{
  char *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  NSString v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  Class isa;
  id v25;
  id v26;
  id v27;
  _QWORD v28[3];
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_410TickerCell_numberLabel];
  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC13FTMInternal_410TickerCell_digit + 8];
  swift_bridgeObjectRetain(v3);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  objc_msgSend(v2, "setText:", v4);

  v5 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", *(double *)&v1[OBJC_IVAR____TtC13FTMInternal_410TickerCell_fontSize], UIFontWeightRegular);
  objc_msgSend(v2, "setFont:", v5);

  objc_msgSend(v2, "setTextAlignment:", 1);
  v6 = (void *)objc_opt_self(UIColor);
  v7 = objc_msgSend(v6, "blackColor");
  objc_msgSend(v2, "setTextColor:", v7);

  v8 = objc_msgSend(v1, "contentView");
  objc_msgSend(v8, "addSubview:", v2);

  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v9 = objc_msgSend(v1, "contentView");
  v10 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v11 = swift_allocObject(v10, 64, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100240400;
  sub_1001548C8(0, (unint64_t *)&qword_1002B57F0, NSLayoutConstraint_ptr);
  v12 = sub_1001548C8(0, &qword_1002B4E50, UILabel_ptr);
  v31 = v12;
  v30[0] = v2;
  v13 = v2;
  v14 = objc_msgSend(v1, "contentView");
  v15 = sub_1001548C8(0, qword_1002B5800, UIView_ptr);
  v29 = v15;
  v28[0] = v14;
  *(_QWORD *)(v11 + 32) = sub_1001800BC(v30, 5, 0, v28, 5, 1.0, 0.0);
  v31 = v12;
  v30[0] = v13;
  v16 = v13;
  v17 = objc_msgSend(v1, "contentView");
  v29 = v15;
  v28[0] = v17;
  *(_QWORD *)(v11 + 40) = sub_1001800BC(v30, 6, 0, v28, 6, 1.0, 0.0);
  v31 = v12;
  v30[0] = v16;
  v18 = v16;
  v19 = objc_msgSend(v1, "contentView");
  v29 = v15;
  v28[0] = v19;
  *(_QWORD *)(v11 + 48) = sub_1001800BC(v30, 3, 0, v28, 3, 1.0, 0.0);
  v31 = v12;
  v30[0] = v18;
  v20 = v18;
  v21 = objc_msgSend(v1, "contentView");
  v29 = v15;
  v28[0] = v21;
  v22 = sub_1001800BC(v30, 4, 0, v28, 4, 1.0, 0.0);
  *(_QWORD *)(v11 + 56) = v22;
  v30[0] = v11;
  specialized Array._endMutation()(v22);
  v23 = v30[0];
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  objc_msgSend(v9, "addConstraints:", isa);

  v25 = objc_msgSend(v6, "clearColor");
  objc_msgSend(v1, "setBackgroundColor:", v25);

  v26 = objc_msgSend(v1, "contentView");
  v27 = objc_msgSend(v6, "clearColor");
  objc_msgSend(v26, "setBackgroundColor:", v27);

}

id sub_1001667EC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TickerCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TickerCell()
{
  return objc_opt_self(_TtC13FTMInternal_410TickerCell);
}

uint64_t sub_100166878()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for AttributeDetailsViewModel()
{
  return objc_opt_self(_TtC13FTMInternal_425AttributeDetailsViewModel);
}

uint64_t *sub_1001668D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
  }
  return a1;
}

uint64_t sub_100166980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_1001669D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t sub_100166A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_100166B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100166B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_100166BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100166BF8);
}

uint64_t sub_100166BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100166C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100166C84);
}

uint64_t sub_100166C84(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AttributeDetailsCollection(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B4FB8;
  if (!qword_1002B4FB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AttributeDetailsCollection);
  return result;
}

uint64_t sub_100166D3C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1002419E0;
    v4[2] = &unk_1002419E0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100166DB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B4430;
  if (!qword_1002B4430)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1002B4430);
  }
  return result;
}

uint64_t sub_100166DFC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for AttributeDetailsViewModel();
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100166E34(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000021;
  v3 = 0x800000010020FFA0;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000027;
    else
      v5 = 0xD00000000000001FLL;
    if (v4 == 1)
      v6 = 0x800000010020FFD0;
    else
      v6 = 0x8000000100210000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000021;
  v6 = 0x800000010020FFA0;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0xD000000000000027;
    else
      v2 = 0xD00000000000001FLL;
    if (v7 == 1)
      v3 = 0x800000010020FFD0;
    else
      v3 = 0x8000000100210000;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

BOOL sub_100166F28(char a1, char a2)
{
  return qword_100241B60[a1] == qword_100241B60[a2];
}

uint64_t sub_100166F4C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x4B4E494C4E574F44;
  else
    v3 = 0x4B4E494C5055;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x4B4E494C4E574F44;
  else
    v5 = 0x4B4E494C5055;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100166FEC(uint64_t a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;

  v2 = a2;
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD000000000000027;
    else
      v3 = 0xD00000000000001FLL;
    if (v2 == 1)
      v4 = 0x800000010020FFD0;
    else
      v4 = 0x8000000100210000;
  }
  else
  {
    v3 = 0xD000000000000021;
    v4 = 0x800000010020FFA0;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

void sub_100167068(uint64_t a1, char a2)
{
  Hasher._combine(_:)(qword_100241B60[a2]);
}

Swift::Int sub_100167098(uint64_t a1, char a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_100241B60[a2]);
  return Hasher._finalize()();
}

Swift::Int sub_1001670E4(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD000000000000027;
    else
      v3 = 0xD00000000000001FLL;
    if (a2 == 1)
      v4 = 0x800000010020FFD0;
    else
      v4 = 0x8000000100210000;
  }
  else
  {
    v3 = 0xD000000000000021;
    v4 = 0x800000010020FFA0;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

char *sub_100167184()
{
  id v0;
  char v2[8];
  unint64_t v3;
  unint64_t v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int16 v13;

  v2[0] = 1;
  v3 = 0xD000000000000013;
  v4 = 0x8000000100211630;
  v5 = -25535;
  v6 = 0;
  v7 = sub_10016A018((uint64_t)&off_1002601E0);
  v8 = 0x3FF0000000000000;
  v9 = 257;
  v10 = 0x4059000000000000;
  v11 = 2;
  v12 = 0x4059000000000000;
  v13 = 2;
  v0 = objc_allocWithZone((Class)type metadata accessor for SURLSessionViewModel(0));
  return sub_1001E37BC((uint64_t)v2);
}

uint64_t sub_100167220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  id v29;
  __n128 v30;
  __n128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  double (**v38)();
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  unsigned int v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD v103[3];
  _BYTE v104[26];
  __n128 v105;
  _BYTE v106[32];
  _BYTE v107[26];

  v98 = a2;
  v3 = sub_100146438(&qword_1002B5030);
  v4 = __chkstk_darwin(v3);
  v99 = (uint64_t)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v97 = (char *)&v79 - v6;
  v89 = sub_100146438(&qword_1002B5038);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100146438(&qword_1002B5040);
  v92 = *(_QWORD *)(v93 - 8);
  v8 = __chkstk_darwin(v93);
  v86 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v85 = (uint64_t)&v79 - v10;
  v11 = sub_100146438(&qword_1002B5048);
  v12 = __chkstk_darwin(v11);
  v96 = (uint64_t)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v95 = (uint64_t)&v79 - v14;
  v94 = (char *)sub_100146438(&qword_1002B5050);
  v91 = *((_QWORD *)v94 - 1);
  __chkstk_darwin(v94);
  v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100146438(&qword_1002B5058);
  v17 = __chkstk_darwin(v90);
  v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v102 = (uint64_t)&v79 - v20;
  v21 = *(void **)a1;
  v80 = *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(void **)(a1 + 24);
  v24 = *(unsigned __int8 *)(a1 + 32);
  v25 = *(_QWORD *)(a1 + 40);
  v26 = *(_QWORD *)(a1 + 48);
  v27 = swift_allocObject(&unk_100263FC0, 72, 7);
  v28 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v27 + 32) = v28;
  *(_OWORD *)(v27 + 48) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v27 + 64) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v103[0] = 0;
  v81 = v21;
  v29 = v21;
  v84 = v22;
  v83 = v23;
  v82 = v24;
  sub_10016A25C(v22, v23, v24);
  swift_retain(v25);
  swift_retain(v26);
  State.init(wrappedValue:)(&v105, v103, &type metadata for Int, v30);
  v31 = v105;
  v105.n128_u64[0] = (unint64_t)sub_10016A5C8;
  v105.n128_u64[1] = v27;
  v106[0] = 0;
  *(__n128 *)&v106[8] = v31;
  v32 = sub_100146438(&qword_1002B3D38);
  v33 = sub_10016A5D0();
  v34 = sub_10014BEC0(&qword_1002B3D50, &qword_1002B3D38, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v101 = v32;
  v100 = v34;
  View.tabItem<A>(_:)(sub_100167ADC, 0, &type metadata for FTMCellMonitorView, v32, v33);
  swift_release(v27);
  v35 = swift_release(v31.n128_u64[1]);
  v36 = v91;
  v37 = (uint64_t)v94;
  (*(void (**)(char *, char *, char *, __n128))(v91 + 16))(v19, v16, v94, v35);
  v38 = (double (**)())&v19[*(int *)(v90 + 36)];
  *v38 = sub_100167B14;
  v38[1] = 0;
  v38[2] = 0;
  v38[3] = 0;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v37);
  v94 = v19;
  sub_10014BC64((uint64_t)v19, v102, &qword_1002B5058);
  v91 = v26;
  v39 = *(_QWORD *)(v26 + 24);
  if ((*(_BYTE *)(v39 + 24) & 1) != 0 || *(_BYTE *)(v39 + 25) == 1)
  {
    v40 = v29;
    v41 = type metadata accessor for SURLSessionViewModel(0);
    v42 = sub_100146004(&qword_1002B3C08, type metadata accessor for SURLSessionViewModel, (uint64_t)&unk_100244D08);
    v43 = v84;
    v44 = v83;
    v45 = v82;
    v46 = StateObject.wrappedValue.getter(v84, v83, v82, v41, v42);
    if (!v81)
    {
      v77 = type metadata accessor for SPCarrierBundleViewModel(0);
      v78 = sub_100146004((unint64_t *)&unk_1002B60B0, type metadata accessor for SPCarrierBundleViewModel, (uint64_t)&unk_10024261C);
      result = EnvironmentObject.error()(0, v80, v77, v78);
      __break(1u);
      return result;
    }
    v47 = v46;
    KeyPath = swift_getKeyPath(&unk_100241AD0);
    v49 = swift_getKeyPath(&unk_100241AF8);
    v50 = v40;
    static Published.subscript.getter(&v105, v50, KeyPath, v49);

    swift_release(KeyPath);
    swift_release(v49);
    LOBYTE(KeyPath) = v105.n128_u8[0];
    v51 = swift_getKeyPath(&unk_100241B18);
    v52 = swift_getKeyPath(&unk_100241B40);
    v53 = v50;
    static Published.subscript.getter(&v105, v53, v51, v52);

    swift_release(v51);
    swift_release(v52);
    sub_10014A5D0(v47, KeyPath, v105.n128_u8[0], &v105);
    v103[2] = *(_OWORD *)&v106[16];
    *(_OWORD *)v104 = *(_OWORD *)v107;
    *(_OWORD *)&v104[10] = *(_OWORD *)&v107[10];
    v103[0] = v105;
    v103[1] = *(_OWORD *)v106;
    v54 = sub_10016A668();
    v55 = v87;
    View.tabItem<A>(_:)(sub_100167E54, 0, &type metadata for SURLSessionView, v101, v54);
    sub_10016A6AC((uint64_t)&v105);
    v56 = StateObject.wrappedValue.getter(v43, v44, v45, v41, v42);
    v57 = static ObservableObject.environmentStore.getter(v41, v42);
    v58 = v88;
    v59 = (uint64_t)v86;
    v60 = v89;
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v86, v55, v89);
    v61 = v93;
    v62 = (uint64_t *)(v59 + *(int *)(v93 + 36));
    *v62 = v57;
    v62[1] = v56;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v55, v60);
    v63 = v85;
    sub_10014BC64(v59, v85, &qword_1002B5040);
    v64 = v95;
    sub_10014BC64(v63, v95, &qword_1002B5040);
    v65 = 0;
  }
  else
  {
    v65 = 1;
    v64 = v95;
    v61 = v93;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56))(v64, v65, 1, v61);
  v66 = (uint64_t)v97;
  if (*(_BYTE *)(*(_QWORD *)(v91 + 24) + 29) == 1)
  {
    v67 = sub_10016A614();
    View.tabItem<A>(_:)(sub_100167E80, 0, &type metadata for CellularLoggingReprestable, v101, v67);
    v68 = sub_100146438(&qword_1002B5068);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v66, 0, 1, v68);
  }
  else
  {
    v69 = sub_100146438(&qword_1002B5068);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v66, 1, 1, v69);
  }
  v70 = v102;
  v71 = (uint64_t)v94;
  sub_10014BD9C(v102, (uint64_t)v94, &qword_1002B5058);
  v72 = v96;
  sub_10014BD9C(v64, v96, &qword_1002B5048);
  v73 = v99;
  sub_10014BD9C(v66, v99, &qword_1002B5030);
  v74 = v98;
  sub_10014BD9C(v71, v98, &qword_1002B5058);
  v75 = sub_100146438(&qword_1002B5070);
  sub_10014BD9C(v72, v74 + *(int *)(v75 + 48), &qword_1002B5048);
  sub_10014BD9C(v73, v74 + *(int *)(v75 + 64), &qword_1002B5030);
  sub_10014BDE0(v66, &qword_1002B5030);
  sub_10014BDE0(v64, &qword_1002B5048);
  sub_10014BDE0(v70, &qword_1002B5058);
  sub_10014BDE0(v73, &qword_1002B5030);
  sub_10014BDE0(v72, &qword_1002B5048);
  return sub_10014BDE0(v71, &qword_1002B5058);
}

uint64_t sub_100167ADC()
{
  return sub_100167EA8(0x72616F6268736144, 0xE900000000000064, 0x7361642E7473696CLL, 0xE900000000000068);
}

double sub_100167B14()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v0 = sub_100146438(&qword_1002B5080);
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  type metadata accessor for MainActor(0);
  v4 = static MainActor.shared.getter();
  v5 = swift_allocObject(&unk_100263FE8, 32, 7);
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = &protocol witness table for MainActor;
  v6 = sub_100167D08((uint64_t)v2, (uint64_t)&unk_1002B5090, v5);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t sub_100167BD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 16) = static MainActor.shared.getter();
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100167C40, v2, v3);
}

uint64_t sub_100167C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_release(*(_QWORD *)(v0 + 16));
  if (qword_1002B39F8 != -1)
    v1 = swift_once(&qword_1002B39F8, sub_100174778);
  v5 = qword_1002BEFE8;
  v6 = static os_log_type_t.default.getter(v1, v2, v3, v4);
  v7 = os_log(_:dso:log:type:_:)("Main - Hardware selected for AWD", 32, 2, &_mh_execute_header, v5, v6, _swiftEmptyArrayStorage);
  v11 = static os_log_type_t.default.getter(v7, v8, v9, v10);
  os_log(_:dso:log:type:_:)("Main - Device selected for AWD", 30, 2, &_mh_execute_header, v5, v11, _swiftEmptyArrayStorage);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100167D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10014BDE0(a1, &qword_1002B5080);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9, v12);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v15 = v14;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_100264010, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, (char *)&type metadata for () + 8, &unk_1002B50A0, v17);
}

uint64_t sub_100167E54()
{
  return sub_100167EA8(0x676E6963696C53, 0xE700000000000000, 0x6B726F7774656ELL, 0xE700000000000000);
}

uint64_t sub_100167E80()
{
  return sub_100167EA8(0xD000000000000010, 0x8000000100211C00, 1953263458, 0xE400000000000000);
}

uint64_t sub_100167EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v6 = LocalizedStringKey.init(stringLiteral:)(a1, a2);
  return Label<>.init(_:systemImage:)(v6, v8, v7 & 1, v9, a3, a4);
}

void sub_100167EE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (*(_QWORD *)a1)
  {
    v4 = *(id *)a1;
    sub_10018EE1C();

  }
  else
  {
    v1 = *(_QWORD *)(a1 + 8);
    v2 = type metadata accessor for SPCarrierBundleViewModel(0);
    v3 = sub_100146004((unint64_t *)&unk_1002B60B0, type metadata accessor for SPCarrierBundleViewModel, (uint64_t)&unk_10024261C);
    EnvironmentObject.error()(0, v1, v2, v3);
    __break(1u);
  }
}

uint64_t sub_100167F68@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)();
  uint64_t (*v16)(_BYTE *, uint64_t);
  _BYTE v18[16];
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char v26;

  v3 = sub_100146438(&qword_1002B5010);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = v1[1];
  v20 = *v1;
  v21 = v7;
  v22 = v1[2];
  v23 = *((_QWORD *)v1 + 6);
  v19 = &v20;
  v8 = sub_100146438(&qword_1002B5018);
  v9 = sub_10014BEC0(&qword_1002B5020, &qword_1002B5018, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  TabView<>.init(content:)(sub_10016A518, v18, v8, v9);
  v10 = swift_allocObject(&unk_100263F98, 72, 7);
  v11 = v20;
  v12 = v21;
  *(_OWORD *)(v10 + 16) = v20;
  *(_OWORD *)(v10 + 32) = v12;
  *(_OWORD *)(v10 + 48) = v22;
  v14 = *((_QWORD *)&v22 + 1);
  v13 = v23;
  *(_QWORD *)(v10 + 64) = v23;
  v24 = v11;
  v25 = v12;
  v26 = v22;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 16))(a1, v6, v3);
  v15 = (void (**)())(a1 + *(int *)(sub_100146438(&qword_1002B5028) + 36));
  *v15 = sub_10016A524;
  v15[1] = (void (*)())v10;
  v15[2] = 0;
  v15[3] = 0;
  sub_10016A52C((id *)&v24);
  sub_10016A554((uint64_t)&v25);
  v16 = *(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8);
  swift_retain(v14);
  swift_retain(v13);
  return v16(v6, v3);
}

uint64_t sub_1001680EC(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100168150;
  return v6(a1);
}

uint64_t sub_100168150()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10016819C(char *a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char v4;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v3 = v2;
  v4 = a2;
  v6 = *v2;
  v7 = sub_100167098(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (qword_100241B60[*(char *)(*(_QWORD *)(v6 + 48) + v9)] != qword_100241B60[v4])
    {
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_5;
    }
    result = 0;
    v4 = *(_BYTE *)(*(_QWORD *)(*v3 + 48) + v9);
  }
  else
  {
LABEL_5:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_100168EB4(v4, v9, isUniquelyReferenced_nonNull_native);
    v12 = *v3;
    *v3 = v14;
    swift_bridgeObjectRelease(v12);
    result = 1;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1001682A8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100168FDC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100168454(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  _QWORD v21[9];

  v7 = *v3;
  Hasher.init(_seed:)(v21, *(_QWORD *)(*v3 + 40));
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(a3);
    String.hash(into:)(v21, a2, a3);
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v7);
  }
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_17:
    swift_bridgeObjectRelease(v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v21[0] = *v3;
    *v3 = 0x8000000000000000;
    swift_bridgeObjectRetain(a3);
    sub_100169174(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    v20 = *v3;
    *v3 = v21[0];
    swift_bridgeObjectRelease(v20);
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  v11 = ~v9;
  v12 = *(_QWORD *)(v7 + 48);
  while (1)
  {
    v13 = (_QWORD *)(v12 + 16 * v10);
    v14 = v13[1];
    if (v14)
      break;
    if (!a3)
      goto LABEL_16;
LABEL_7:
    v10 = (v10 + 1) & v11;
    if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_17;
  }
  if (!a3)
    goto LABEL_7;
  v15 = *v13 == a2 && v14 == a3;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, a2, a3, 0) & 1) == 0)
    goto LABEL_7;
  swift_bridgeObjectRelease(a3);
LABEL_16:
  swift_bridgeObjectRelease(v7);
  v16 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
  v17 = v16[1];
  *a1 = *v16;
  a1[1] = v17;
  swift_bridgeObjectRetain(v17);
  return 0;
}

void sub_10016861C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100146438(&qword_1002B4FF8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v5 + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                v2 = v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(char *)(*(_QWORD *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v31, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(qword_100241B60[v20]);
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_1001688D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100146438(&qword_1002B50B8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100168BAC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100146438(&qword_1002B5008);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_39;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_39;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_39;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_39:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_45;
                  if (v12 >= v10)
                    goto LABEL_39;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v22 = *v20;
      v21 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      if (v21)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v21);
        String.hash(into:)(v34, v22, v21);
        swift_bridgeObjectRelease(v21);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v22;
      v14[1] = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100168EB4(char a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_12;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10016861C(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_100169328();
      goto LABEL_12;
    }
    sub_100169814(v8);
  }
  v9 = *v3;
  v10 = sub_100167098(*(_QWORD *)(*v3 + 40), a1);
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v11;
    while (qword_100241B60[*(char *)(*(_QWORD *)(v9 + 48) + a2)] != qword_100241B60[a1])
    {
      a2 = (a2 + 1) & v12;
      if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_12;
    }
    goto LABEL_15;
  }
LABEL_12:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v13 + 48) + a2) = a1;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (!v15)
  {
    *(_QWORD *)(v13 + 16) = v16;
    return;
  }
  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SURLSessionTrafficClass);
  __break(1u);
}

void sub_100168FDC(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1001688D0(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_1001694B8();
      goto LABEL_22;
    }
    sub_100169A98(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

void sub_100169174(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_23;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100168BAC(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100169668();
      goto LABEL_23;
    }
    sub_100169D44(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v27, *(_QWORD *)(*v4 + 40));
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a2);
    String.hash(into:)(v27, a1, a2);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = ~v14;
    v17 = *(_QWORD *)(v12 + 48);
    do
    {
      v18 = (_QWORD *)(v17 + 16 * a3);
      v19 = v18[1];
      if (v19)
      {
        if (a2)
        {
          v20 = *v18 == a1 && v19 == a2;
          if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) != 0)
          {
LABEL_22:
            v21 = sub_100146438((uint64_t *)&unk_1002B5640);
            ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
            __break(1u);
            break;
          }
        }
      }
      else if (!a2)
      {
        goto LABEL_22;
      }
      a3 = (a3 + 1) & v16;
    }
    while (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_23:
  v22 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v23 = (_QWORD *)(*(_QWORD *)(v22 + 48) + 16 * a3);
  *v23 = a1;
  v23[1] = a2;
  v24 = *(_QWORD *)(v22 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v26;
}

void sub_100169328()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100146438(&qword_1002B4FF8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1001694B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100146438(&qword_1002B50B8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100169668()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100146438(&qword_1002B5008);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    swift_bridgeObjectRetain(*((_QWORD *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100169814(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100146438(&qword_1002B4FF8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v29 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v5 + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(char *)(*(_QWORD *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v30, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(qword_100241B60[v20]);
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v13 + 8 * v24);
      }
      while (v28 == -1);
      v14 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    swift_release(v3);
    v2 = v29;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_100169A98(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100146438(&qword_1002B50B8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v33, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_100169D44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100146438(&qword_1002B5008);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_41:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v17 >= v32)
      goto LABEL_39;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_39;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_39;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v22 = *v20;
    v21 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    if (v21)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain_n(v21, 2);
      String.hash(into:)(v33, v22, v21);
      swift_bridgeObjectRelease(v21);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v22;
    v14[1] = v21;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_39:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_41;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_39;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_43:
  __break(1u);
}

uint64_t sub_10016A018(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_10016A088();
  result = Set.init(minimumCapacity:)(v2, &type metadata for SURLSessionTrafficClass, v3);
  v8 = result;
  if (v2)
  {
    v5 = (char *)(a1 + 32);
    do
    {
      v6 = *v5++;
      sub_10016819C(&v7, v6);
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_10016A088()
{
  unint64_t result;

  result = qword_1002B69A0;
  if (!qword_1002B69A0)
  {
    result = swift_getWitnessTable(&unk_100243E58, &type metadata for SURLSessionTrafficClass);
    atomic_store(result, (unint64_t *)&qword_1002B69A0);
  }
  return result;
}

uint64_t sub_10016A0CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_1001682A8(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10016A160(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[2];
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_100146438((uint64_t *)&unk_1002B5640);
  v4 = sub_10016A200();
  result = Set.init(minimumCapacity:)(v2, v3, v4);
  v10 = result;
  if (v2)
  {
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      swift_bridgeObjectRetain(*v6);
      sub_100168454(v9, v7, v8);
      swift_bridgeObjectRelease(v9[1]);
      v6 += 2;
      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

unint64_t sub_10016A200()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B5000;
  if (!qword_1002B5000)
  {
    v1 = sub_1001464C4((uint64_t *)&unk_1002B5640);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1002B5000);
  }
  return result;
}

id sub_10016A25C(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return a2;
  else
    return (id)swift_retain(a2);
}

double destroy for MainWindowView(uint64_t a1)
{
  double result;

  sub_10016A2A8(*(_QWORD *)(a1 + 16), *(void **)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 40));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 48)).n128_u64[0];
  return result;
}

double sub_10016A2A8(uint64_t a1, void *a2, char a3)
{
  double result;

  if ((a3 & 1) != 0)

  else
    *(_QWORD *)&result = swift_release(a2).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for MainWindowView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(void **)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = v4;
  sub_10016A25C(v6, v7, v8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  swift_retain(v10);
  swift_retain(v11);
  return a1;
}

uint64_t assignWithCopy for MainWindowView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  char v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(void **)(a2 + 24);
  v9 = *(_BYTE *)(a2 + 32);
  sub_10016A25C(v7, v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(void **)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  sub_10016A2A8(v10, v11, v12);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v13;
  swift_retain(v13);
  swift_release(v14);
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

__n128 initializeWithTake for MainWindowView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MainWindowView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  char v9;
  uint64_t v10;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(void **)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  sub_10016A2A8(v7, v8, v9);
  swift_release(*(_QWORD *)(a1 + 40));
  v10 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for MainWindowView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MainWindowView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MainWindowView()
{
  return &type metadata for MainWindowView;
}

uint64_t sub_10016A508(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100246C20, 1);
}

uint64_t sub_10016A518@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100167220(*(_QWORD *)(v1 + 16), a1);
}

void sub_10016A524()
{
  uint64_t v0;

  sub_100167EE8(v0 + 16);
}

id *sub_10016A52C(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

uint64_t sub_10016A554(uint64_t a1)
{
  sub_10016A25C(*(_QWORD *)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_10016A588()
{
  uint64_t v0;

  sub_10016A2A8(*(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10016A5C8()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 56));
}

unint64_t sub_10016A5D0()
{
  unint64_t result;

  result = qword_1002B5060;
  if (!qword_1002B5060)
  {
    result = swift_getWitnessTable(&unk_100241C34, &type metadata for FTMCellMonitorView);
    atomic_store(result, (unint64_t *)&qword_1002B5060);
  }
  return result;
}

unint64_t sub_10016A614()
{
  unint64_t result;

  result = qword_1002B7FA0;
  if (!qword_1002B7FA0)
  {
    result = swift_getWitnessTable(&unk_100244C24, &type metadata for CellularLoggingReprestable);
    atomic_store(result, (unint64_t *)&qword_1002B7FA0);
  }
  return result;
}

unint64_t sub_10016A668()
{
  unint64_t result;

  result = qword_1002B5078;
  if (!qword_1002B5078)
  {
    result = swift_getWitnessTable(&unk_10023FE60, &type metadata for SURLSessionView);
    atomic_store(result, (unint64_t *)&qword_1002B5078);
  }
  return result;
}

uint64_t sub_10016A6AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);

  swift_release(v2);
  swift_release(v3);
  swift_bridgeObjectRelease(v4);
  swift_release(v5);
  return a1;
}

uint64_t sub_10016A710()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10016A734()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1002B508C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10016A798;
  return sub_100167BD8();
}

uint64_t sub_10016A798()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10016A7E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10016A804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1002B509C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10016A798;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1002B5098 + dword_1002B5098))(a1, v4);
}

unint64_t sub_10016A878()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B50A8;
  if (!qword_1002B50A8)
  {
    v1 = sub_1001464C4(&qword_1002B5028);
    sub_10014BEC0(&qword_1002B50B0, &qword_1002B5010, (uint64_t)&protocol conformance descriptor for TabView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B50A8);
  }
  return result;
}

void sub_10016A8FC()
{
  qword_1002BEFB8 = 0x404E000000000000;
}

void sub_10016A90C()
{
  qword_1002BEFC0 = (uint64_t)&off_100260280;
}

uint64_t sub_10016A920@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  NSString v7;
  Class isa;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setDateFormat:", v7);

  static Locale.current.getter();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(v6, "setLocale:", isa);

  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v6, "dateFromString:", v9);

  if (v10)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v10);

    v11 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 0, 1, v11);
  }
  else
  {

    v13 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
}

uint64_t sub_10016AAB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  NSString v7;
  Class isa;
  Class v9;
  id v10;
  uint64_t v11;
  uint64_t v13;

  v2 = type metadata accessor for TimeZone(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setDateFormat:", v7);

  static TimeZone.autoupdatingCurrent.getter();
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(v6, "setTimeZone:", isa);

  objc_msgSend(v6, "setDateStyle:", a1);
  objc_msgSend(v6, "setTimeStyle:", a1);
  v9 = Date._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(v6, "stringFromDate:", v9);

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  return v11;
}

id sub_10016AC30()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  qword_1002BEFC8 = (uint64_t)result;
  return result;
}

uint64_t sub_10016AC60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  Class isa;
  NSString v6;
  Class v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v0 = type metadata accessor for TimeZone(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002B39D0 != -1)
    swift_once(&qword_1002B39D0, sub_10016AC30);
  v4 = (void *)qword_1002BEFC8;
  static TimeZone.current.getter();
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, "setTimeZone:", isa);

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setDateFormat:", v6);

  v7 = Date._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(v4, "stringFromDate:", v7);

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  return v9;
}

void sub_10016ADB4()
{
  void *v0;
  NSString v1;
  id v2;
  Class isa;
  Class v4;
  void *v5;
  id v6;
  id v7;
  double v8;
  id v9;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(CABasicAnimation), "animationWithKeyPath:", v1);

  objc_msgSend(v2, "setDuration:", 0.2);
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v2, "setFromValue:", isa);

  v4 = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v2, "setToValue:", v4);

  v5 = (void *)objc_opt_self(CAMediaTimingFunction);
  v6 = v2;
  v7 = objc_msgSend(v5, "functionWithName:", kCAMediaTimingFunctionEaseInEaseOut);
  objc_msgSend(v6, "setTimingFunction:", v7);

  objc_msgSend(v6, "setAutoreverses:", 1);
  LODWORD(v8) = 2.0;
  objc_msgSend(v6, "setRepeatCount:", v8);
  v9 = objc_msgSend(v0, "layer");
  objc_msgSend(v9, "addAnimation:forKey:", v6, 0);

}

uint64_t sub_10016AF48(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  v4 = qword_1002B39E8;
  v5 = a1;
  v6 = swift_retain(a2);
  if (v4 != -1)
    v6 = swift_once(&qword_1002B39E8, sub_100174680);
  v10 = qword_1002BEFD8;
  v11 = static os_log_type_t.default.getter(v6, v7, v8, v9);
  v12 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1002402A0;
  v14 = *(unsigned __int8 *)(*(_QWORD *)&v5[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_hardwareManager] + 28);
  v15 = sub_10016B1E0();
  v16 = 7758189;
  if (v14)
    v16 = 6644585;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = v15;
  *(_QWORD *)(v13 + 32) = v16;
  *(_QWORD *)(v13 + 40) = 0xE300000000000000;
  os_log(_:dso:log:type:_:)("device type: %{public}s", 23, 2, &_mh_execute_header, v10, v11, v13);
  swift_bridgeObjectRelease(v13);

  swift_release(a2);
  return v2;
}

void sub_10016B074()
{
  uint64_t v0;
  id v1;
  NSString v2;

  v1 = *(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_aBMWrapper);
  v2 = String._bridgeToObjectiveC()();
  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  objc_msgSend(v1, "querySpecificMetric:triggerRef:triggerType:triggerID:profileID:metricID:");

}

uint64_t sub_10016B15C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for MainWindowViewModel()
{
  return objc_opt_self(_TtC13FTMInternal_419MainWindowViewModel);
}

uint64_t sub_10016B1A8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for MainWindowViewModel();
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

unint64_t sub_10016B1E0()
{
  unint64_t result;

  result = qword_1002B5620;
  if (!qword_1002B5620)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1002B5620);
  }
  return result;
}

uint64_t sub_10016B224(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

double destroy for FTMCellMonitorView(uint64_t *a1)
{
  double result;

  sub_10016B25C(*a1, a1[1]);
  *(_QWORD *)&result = swift_release(a1[4]).n128_u64[0];
  return result;
}

double sub_10016B25C(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = swift_release(a2).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for FTMCellMonitorView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10016B224(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_retain(v7);
  return a1;
}

uint64_t assignWithCopy for FTMCellMonitorView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10016B224(*(_QWORD *)a2, v5);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10016B25C(v7, v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  swift_retain(v10);
  swift_release(v9);
  return a1;
}

__n128 initializeWithTake for FTMCellMonitorView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FTMCellMonitorView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_10016B25C(v5, v6);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for FTMCellMonitorView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FTMCellMonitorView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FTMCellMonitorView()
{
  return &type metadata for FTMCellMonitorView;
}

uint64_t sub_10016B474(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100246CFC, 1);
}

void sub_10016B484(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[10];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  v22 = sub_100146438(&qword_1002B51B0);
  __chkstk_darwin(v22);
  v18 = sub_100146438(&qword_1002B51B8);
  __chkstk_darwin(v18);
  v23 = sub_100146438(&qword_1002B51C0);
  __chkstk_darwin(v23);
  v21 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for StackNavigationViewStyle(0);
  v16[7] = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v16[6] = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100146438(&qword_1002B51C8);
  v16[5] = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v16[4] = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100146438(&qword_1002B51D0);
  v16[9] = *(_QWORD *)(v20 - 8);
  v6 = __chkstk_darwin(v20);
  v16[3] = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v16[8] = (char *)v16 - v8;
  v10 = *a1;
  v9 = a1[1];
  v11 = *((unsigned __int8 *)a1 + 16);
  v12 = type metadata accessor for AllMetricsViewModel();
  v13 = sub_100146004(&qword_1002B51D8, (uint64_t (*)(uint64_t))type metadata accessor for AllMetricsViewModel, (uint64_t)&unk_100242998);
  v14 = StateObject.wrappedValue.getter(v10, v9, v11, v12, v13);
  v15 = *(unsigned __int8 *)(v14 + 56);
  swift_release(v14);
  __asm { BR              X9 }
}

uint64_t sub_10016B6C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;

  v0[2] = &v36;
  v0[1] = sub_100146438(&qword_1002B5218);
  v4 = sub_1001464C4(&qword_1002B5220);
  v5 = sub_1001464C4(&qword_1002B5228);
  v6 = sub_1001464C4(&qword_1002B5230);
  v7 = sub_10014BEC0(&qword_1002B5238, &qword_1002B5230, (uint64_t)&protocol conformance descriptor for VStack<A>);
  *(_QWORD *)(v3 - 248) = v6;
  *(_QWORD *)(v3 - 240) = v7;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v3 - 248, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:displayMode:)>>, 1);
  v9 = sub_1001464C4(&qword_1002B5240);
  v10 = sub_1001464C4(&qword_1002B5248);
  v11 = sub_10014BEC0(&qword_1002B5250, &qword_1002B5248, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  *(_QWORD *)(v3 - 248) = v10;
  *(_QWORD *)(v3 - 240) = v11;
  v12 = swift_getOpaqueTypeConformance2(v3 - 248, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  *(_QWORD *)(v3 - 248) = v9;
  *(_QWORD *)(v3 - 240) = v12;
  v13 = swift_getOpaqueTypeConformance2(v3 - 248, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  *(_QWORD *)(v3 - 248) = v4;
  *(_QWORD *)(v3 - 240) = v5;
  *(_QWORD *)(v3 - 232) = OpaqueTypeConformance2;
  *(_QWORD *)(v3 - 224) = v13;
  v14 = swift_getOpaqueTypeConformance2(v3 - 248, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v15 = v0[4];
  v16 = NavigationView.init(content:)(sub_10016EC0C, &v35, v0[1], v14);
  v17 = v0[6];
  StackNavigationViewStyle.init()(v16);
  v18 = sub_10014BEC0(&qword_1002B5208, &qword_1002B51C8, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
  v0[2] = v18;
  v19 = sub_100146004(&qword_1002B3CB8, (uint64_t (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle, (uint64_t)&protocol conformance descriptor for StackNavigationViewStyle);
  v20 = v0[3];
  v21 = v0[10];
  v22 = v0[12];
  View.navigationViewStyle<A>(_:)(v17, v21, v22, v18, v19);
  (*(void (**)(uint64_t, uint64_t))(v0[7] + 8))(v17, v22);
  (*(void (**)(uint64_t, uint64_t))(v0[5] + 8))(v15, v21);
  v24 = v0[8];
  v23 = v0[9];
  v25 = v0[13];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v24, v20, v25);
  v26 = v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v2, v24, v25);
  swift_storeEnumTagMultiPayload(v2, v0[11], 0);
  v27 = sub_100146438(&qword_1002B51E8);
  *(_QWORD *)(v3 - 248) = v21;
  *(_QWORD *)(v3 - 240) = v22;
  *(_QWORD *)(v3 - 232) = v0[2];
  *(_QWORD *)(v3 - 224) = v19;
  v28 = swift_getOpaqueTypeConformance2(v3 - 248, &opaque type descriptor for <<opaque return type of View.navigationViewStyle<A>(_:)>>, 1);
  v29 = sub_10014BEC0((unint64_t *)&qword_1002B51F0, &qword_1002B51E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v30 = v0[14];
  _ConditionalContent<>.init(storage:)(v2, v25, v27, v28, v29);
  sub_10014BD9C(v30, v1, &qword_1002B51C0);
  swift_storeEnumTagMultiPayload(v1, v0[15], 0);
  v31 = sub_100146438(&qword_1002B51F8);
  v32 = sub_10016EA00();
  v33 = sub_10016EB08();
  _ConditionalContent<>.init(storage:)(v1, v0[16], v31, v32, v33);
  sub_10014BDE0(v30, &qword_1002B51C0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[9] + 8))(v26, v25);
}

uint64_t sub_10016BDF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40[16];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v36 = a1;
  v39 = a2;
  v3 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100146438(&qword_1002B5230);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100146438(&qword_1002B5220);
  v11 = *(_QWORD *)(v10 - 8);
  v37 = v10;
  v38 = v11;
  v12 = __chkstk_darwin(v10);
  v35 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v12);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v14 = sub_100146438(&qword_1002B5258);
  sub_10016C0C4(a1, (uint64_t)&v9[*(int *)(v14 + 44)]);
  v15 = LocalizedStringKey.init(stringLiteral:)(0x68736144204D5446, 0xED00006472616F62);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v3);
  v22 = sub_10014BEC0(&qword_1002B5238, &qword_1002B5230, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v23 = v19 & 1;
  v24 = v35;
  View.navigationBarTitle(_:displayMode:)(v15, v17, v23, v21, v6, v7, v22);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10014BDE0((uint64_t)v9, &qword_1002B5230);
  v41 = v36;
  v25 = sub_100146438(&qword_1002B5228);
  v42 = v7;
  v43 = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v42, &opaque type descriptor for <<opaque return type of View.navigationBarTitle(_:displayMode:)>>, 1);
  v27 = sub_1001464C4(&qword_1002B5240);
  v28 = sub_1001464C4(&qword_1002B5248);
  v29 = sub_10014BEC0(&qword_1002B5250, &qword_1002B5248, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v42 = v28;
  v43 = v29;
  v30 = swift_getOpaqueTypeConformance2(&v42, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v42 = v27;
  v43 = v30;
  v31 = swift_getOpaqueTypeConformance2(&v42, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v32 = v37;
  View.toolbar<A>(content:)(sub_10016EC14, v40, v37, v25, OpaqueTypeConformance2, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v24, v32);
}

uint64_t sub_10016C0C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t OpaqueTypeConformance2;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[2];
  _OWORD v99[2];

  v87 = a2;
  v3 = sub_100146438(&qword_1002B5360);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v78 = sub_100146438(&qword_1002B3FF8);
  v6 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100146438(&qword_1002B3FD8);
  v9 = __chkstk_darwin(v96);
  v77 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v79 = (uint64_t *)((char *)&v76 - v11);
  v89 = sub_100146438(&qword_1002B5368);
  __chkstk_darwin(v89);
  v93 = (uint64_t)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100146438(&qword_1002B5370);
  v82 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v81 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100146438(&qword_1002B5378);
  v84 = *(_QWORD *)(v92 - 8);
  v14 = __chkstk_darwin(v92);
  v80 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v83 = (char *)&v76 - v16;
  v17 = sub_100146438(&qword_1002B5380);
  v18 = __chkstk_darwin(v17);
  v95 = (uint64_t)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v94 = (char *)&v76 - v20;
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD *)(a1 + 8);
  v23 = *(unsigned __int8 *)(a1 + 16);
  v24 = type metadata accessor for AllMetricsViewModel();
  v25 = sub_100146004(&qword_1002B51D8, (uint64_t (*)(uint64_t))type metadata accessor for AllMetricsViewModel, (uint64_t)&unk_100242998);
  v91 = StateObject.wrappedValue.getter(v21, v22, v23, v24, v25);
  sub_1001720DC();
  v27 = v26;
  v97 = sub_10017263C(5521746, 0xE300000000000000, v21, v22, v23);
  v28 = type metadata accessor for FTMMetricDetailsClass(0);
  v29 = sub_100146004(&qword_1002B5388, type metadata accessor for FTMMetricDetailsClass, (uint64_t)&unk_1002423D8);
  v90 = EnvironmentObject.init()(v28, v29);
  v86 = v30;
  v31 = static ObservableObject.environmentStore.getter(v28, v29);
  v85 = v31;
  if (*(_QWORD *)(v27 + 16))
  {
    v79 = v5;
    __chkstk_darwin(v31);
    *(&v76 - 2) = v27;
    *(&v76 - 1) = a1;
    swift_retain(v97);
    v32 = sub_100146438(&qword_1002B5390);
    v33 = sub_100172B28(&qword_1002B5398, &qword_1002B5390, (void (*)(void))sub_100172B8C, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
    v34 = v81;
    List<>.init(content:)(sub_100172B20, &v76 - 4, v32, v33);
    swift_bridgeObjectRelease(v27);
    v5 = v79;
    v99[0] = *(_OWORD *)(a1 + 24);
    v35 = swift_allocObject(&unk_100264148, 56, 7);
    v36 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v35 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v35 + 32) = v36;
    *(_QWORD *)(v35 + 48) = *(_QWORD *)(a1 + 32);
    sub_10016B224(v21, v22);
    sub_10016EF88((uint64_t)v99);
    v37 = sub_10014BEC0(&qword_1002B53E8, &qword_1002B5370, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v38 = v80;
    v39 = v88;
    View.refreshable(action:)(&unk_1002B53E0, v35, v88, v37);
    v40 = swift_release(v35);
    (*(void (**)(char *, uint64_t, __n128))(v82 + 8))(v34, v39, v40);
    v41 = v84;
    v42 = v83;
    v43 = v92;
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v83, v38, v92);
    v44 = v93;
    (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v93, v42, v43);
    swift_storeEnumTagMultiPayload(v44, v89, 0);
    v98[0] = v39;
    v98[1] = v37;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v98, &opaque type descriptor for <<opaque return type of View.refreshable(action:)>>, 1);
    v46 = sub_100152F10();
    v47 = (uint64_t)v94;
    _ConditionalContent<>.init(storage:)(v44, v43, v96, OpaqueTypeConformance2, v46);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  }
  else
  {
    swift_retain(v97);
    v48 = swift_bridgeObjectRelease(v27);
    v49 = v8;
    v50 = ProgressView<>.init<>()(v48);
    v51 = static Edge.Set.vertical.getter(v50);
    v52 = EdgeInsets.init(_all:)(230.0);
    v54 = v53;
    v56 = v55;
    v58 = v57;
    v59 = (uint64_t)v77;
    v60 = v78;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v77, v49, v78);
    v61 = v96;
    v62 = v59 + *(int *)(v96 + 36);
    *(_BYTE *)v62 = v51;
    *(double *)(v62 + 8) = v52;
    *(_QWORD *)(v62 + 16) = v54;
    *(_QWORD *)(v62 + 24) = v56;
    *(_QWORD *)(v62 + 32) = v58;
    *(_BYTE *)(v62 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v49, v60);
    v63 = (uint64_t)v79;
    sub_10014BC64(v59, (uint64_t)v79, &qword_1002B3FD8);
    v64 = v93;
    sub_10014BD9C(v63, v93, &qword_1002B3FD8);
    swift_storeEnumTagMultiPayload(v64, v89, 1);
    v65 = sub_10014BEC0(&qword_1002B53E8, &qword_1002B5370, (uint64_t)&protocol conformance descriptor for List<A, B>);
    *(_QWORD *)&v99[0] = v88;
    *((_QWORD *)&v99[0] + 1) = v65;
    v66 = swift_getOpaqueTypeConformance2(v99, &opaque type descriptor for <<opaque return type of View.refreshable(action:)>>, 1);
    v67 = sub_100152F10();
    v47 = (uint64_t)v94;
    _ConditionalContent<>.init(storage:)(v64, v92, v61, v66, v67);
    sub_10014BDE0(v63, &qword_1002B3FD8);
  }
  v68 = v95;
  sub_10014BD9C(v47, v95, &qword_1002B5380);
  v69 = v90;
  v70 = v86;
  *v5 = v90;
  v5[1] = v70;
  v71 = v85;
  v72 = v97;
  v5[2] = v85;
  v5[3] = v72;
  v73 = sub_100146438(&qword_1002B53F0);
  sub_10014BD9C(v68, (uint64_t)v5 + *(int *)(v73 + 48), &qword_1002B5380);
  swift_retain_n(v69, 2);
  swift_retain_n(v71, 2);
  swift_retain(v72);
  swift_release(v91);
  sub_10014BDE0(v47, &qword_1002B5380);
  swift_release(v72);
  swift_release(v71);
  swift_release(v69);
  sub_10014BDE0(v68, &qword_1002B5380);
  swift_release(v72);
  swift_release(v71);
  swift_release(v69);
  v74 = sub_100146438(&qword_1002B53F8);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v5, 0, 1, v74);
  return sub_10014BC64((uint64_t)v5, v87, &qword_1002B5360);
}

uint64_t sub_10016C868(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t KeyPath;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v14[2];
  __int128 v15;
  __int128 v16;
  char v17;

  v4 = *(_QWORD *)(a1 + 16);
  v14[0] = 0;
  v14[1] = v4;
  KeyPath = swift_getKeyPath(&unk_100241C90);
  v6 = *a2;
  v17 = *((_BYTE *)a2 + 16);
  v15 = *(__int128 *)((char *)a2 + 24);
  v16 = v6;
  v7 = swift_allocObject(&unk_100264170, 64, 7);
  *(_QWORD *)(v7 + 16) = a1;
  v8 = a2[1];
  *(_OWORD *)(v7 + 24) = *a2;
  *(_OWORD *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 56) = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain(a1);
  sub_10016EF58((uint64_t *)&v16);
  sub_10016EF88((uint64_t)&v15);
  v9 = sub_100146438(&qword_1002B5348);
  v10 = sub_100146438(&qword_1002B53A8);
  v11 = sub_10016EFEC();
  v12 = sub_100172B8C();
  return ForEach<>.init(_:id:content:)(v14, KeyPath, sub_100172D84, v7, v9, v10, v11, &protocol witness table for Int, v12);
}

unint64_t *sub_10016C978(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v12[6];
  _QWORD v13[2];

  v2 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v2 < *(_QWORD *)(a2 + 16))
  {
    v3 = a2 + 16 * v2;
    v4 = *(_QWORD *)(v3 + 40);
    v13[0] = *(_QWORD *)(v3 + 32);
    v13[1] = v4;
    v5 = __chkstk_darwin(v4);
    v12[2] = v7;
    v12[3] = v6;
    v12[4] = v8;
    swift_bridgeObjectRetain(v5);
    v9 = sub_100146438(&qword_1002B53B8);
    v10 = sub_100172C04();
    v11 = sub_10014654C();
    return (unint64_t *)Section<>.init<A>(_:content:)(v13, sub_100172D90, v12, v9, &type metadata for String, v10, v11);
  }
  __break(1u);
  return result;
}

uint64_t sub_10016CA4C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > a3)
  {
    v5 = a2 + 16 * a3;
    v6 = *(_QWORD *)(v5 + 32);
    v7 = *(_QWORD *)(v5 + 40);
    v8 = *(_QWORD *)result;
    v9 = *(_QWORD *)(result + 8);
    v10 = *(_BYTE *)(result + 16);
    swift_bridgeObjectRetain(v7);
    v11 = sub_10017263C(v6, v7, v8, v9, v10);
    swift_bridgeObjectRelease(v7);
    v13 = *(_QWORD *)(v5 + 32);
    v12 = *(_QWORD *)(v5 + 40);
    v14 = type metadata accessor for FTMMetricDetailsClass(0);
    v15 = sub_100146004(&qword_1002B5388, type metadata accessor for FTMMetricDetailsClass, (uint64_t)&unk_1002423D8);
    swift_bridgeObjectRetain(v12);
    v16 = EnvironmentObject.init()(v14, v15);
    v18 = v17;
    result = static ObservableObject.environmentStore.getter(v14, v15);
    *a4 = v16;
    a4[1] = v18;
    a4[2] = v13;
    a4[3] = v12;
    a4[4] = result;
    a4[5] = v11;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_10016CB38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter();
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_10016CBA4, v3, v4);
}

uint64_t sub_10016CBA4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v1 = *(uint64_t **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  v3 = *v1;
  v2 = v1[1];
  v4 = *((unsigned __int8 *)v1 + 16);
  v5 = type metadata accessor for AllMetricsViewModel();
  v6 = sub_100146004(&qword_1002B51D8, (uint64_t (*)(uint64_t))type metadata accessor for AllMetricsViewModel, (uint64_t)&unk_100242998);
  v7 = StateObject.wrappedValue.getter(v3, v2, v4, v5, v6);
  v8 = *(id *)(v7 + 16);
  swift_release(v7);
  sub_1001BCD50();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016CC48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeConformance2;
  _QWORD v22[2];
  _BYTE v23[16];
  uint64_t v24;
  _QWORD v25[2];

  v22[1] = a2;
  v3 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v3);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100146438(&qword_1002B5248);
  v22[0] = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100146438(&qword_1002B5240);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)v22 - v15;
  static ToolbarItemPlacement.principal.getter(v14);
  v24 = a1;
  v17 = sub_100146438(&qword_1002B5260);
  v18 = sub_10014BEC0(&qword_1002B5268, &qword_1002B5260, (uint64_t)&protocol conformance descriptor for HStack<A>);
  ToolbarItem<>.init(placement:content:)(v5, sub_10016EC1C, v23, v17, v18);
  v19 = sub_10014BEC0(&qword_1002B5250, &qword_1002B5248, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v8, v6, v19);
  (*(void (**)(char *, uint64_t))(v22[0] + 8))(v8, v6);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v13, v9);
  v25[0] = v6;
  v25[1] = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v25, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v16, v9, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v9);
}

uint64_t sub_10016CE4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;

  *(_QWORD *)a9 = static VerticalAlignment.center.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a9 + 8) = 0;
  *(_BYTE *)(a9 + 16) = 1;
  v11 = sub_100146438(&qword_1002B5270);
  return sub_10016CE98(a1, a9 + *(int *)(v11 + 44));
}

uint64_t sub_10016CE98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  char v145;
  char v146;
  char v147;
  char v148;
  char v149[24];
  __int128 v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  char v160;
  __int128 v161;
  __int128 v162;

  v127 = a1;
  v134 = a2;
  v2 = type metadata accessor for InlinePickerStyle(0);
  v122 = *(_QWORD *)(v2 - 8);
  v123 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v117 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100146438(&qword_1002B5278);
  v120 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100146438(&qword_1002B5280);
  v124 = *(_QWORD *)(v8 - 8);
  v125 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100146438(&qword_1002B5288);
  __chkstk_darwin(v121);
  v12 = (char *)&v117 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100146438(&qword_1002B5290);
  v14 = __chkstk_darwin(v13);
  v126 = (uint64_t)&v117 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v128 = (uint64_t)&v117 - v16;
  v132 = sub_100146438(&qword_1002B5298);
  __chkstk_darwin(v132);
  v18 = (char *)&v117 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100146438(&qword_1002B52A0);
  __chkstk_darwin(v130);
  v20 = (_OWORD *)((char *)&v117 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v133 = sub_100146438(&qword_1002B52A8);
  __chkstk_darwin(v133);
  v131 = (char *)&v117 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  v22 = qword_1002BF068;
  swift_beginAccess(qword_1002BF068 + 80, v149, 0, 0);
  v23 = *(_QWORD *)(*(_QWORD *)(v22 + 80) + 16);
  if (v23 == 1)
  {
    v56 = LocalizedStringKey.init(stringLiteral:)(0x68736144204D5446, 0xED00006472616F62);
    v57 = Text.init(_:tableName:bundle:comment:)(v56);
    v59 = v58;
    v61 = v60;
    v63 = v62 & 1;
    v64 = static Font.headline.getter(v57);
    v131 = (char *)Text.font(_:)(v64, v57, v59, v63, v61);
    v66 = v65;
    v68 = v67;
    v70 = v69;
    swift_release(v64);
    sub_10014BE2C(v57, v59, v63);
    v71 = swift_bridgeObjectRelease(v61);
    v72 = static Alignment.center.getter(v71);
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v135, 0x406F400000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v72, v73);
    v74 = v135;
    v75 = BYTE8(v135);
    v76 = v136;
    v77 = BYTE8(v136);
    v78 = v137;
    v79 = v138;
    v80 = BYTE8(v138);
    v81 = v139;
    v82 = BYTE8(v139);
    v83 = v140;
    v84 = BYTE8(v140);
    LOBYTE(v150) = v68 & 1;
    LOBYTE(v162) = BYTE8(v135);
    LOBYTE(v144) = BYTE8(v136);
    v148 = BYTE8(v137);
    v147 = BYTE8(v138);
    v146 = BYTE8(v139);
    v145 = BYTE8(v140);
    *(_QWORD *)v18 = v131;
    *((_QWORD *)v18 + 1) = v66;
    v18[16] = v68 & 1;
    *((_QWORD *)v18 + 3) = v70;
    *((_QWORD *)v18 + 4) = v74;
    v18[40] = v75;
    *((_QWORD *)v18 + 6) = v76;
    v18[56] = v77;
    *((_QWORD *)v18 + 8) = v78;
    v18[72] = v148;
    *((_QWORD *)v18 + 10) = v79;
    v18[88] = v80;
    *((_QWORD *)v18 + 12) = v81;
    v18[104] = v82;
    *((_QWORD *)v18 + 14) = v83;
    v18[120] = v84;
    *((_OWORD *)v18 + 8) = v141;
    swift_storeEnumTagMultiPayload(v18, v132, 1);
    v85 = sub_100146438(&qword_1002B52B0);
    v86 = sub_10016EC24();
    v87 = sub_10016EC90();
    return _ConditionalContent<>.init(storage:)(v18, v133, v85, v86, v87);
  }
  else
  {
    v129 = v13;
    if (v23)
    {
      v118 = v12;
      v88 = v127;
      v162 = *(_OWORD *)(v127 + 24);
      v150 = *(_OWORD *)(v127 + 24);
      v119 = sub_100146438(&qword_1002B52F0);
      State.projectedValue.getter(&v135, v119);
      v89 = sub_100146438(&qword_1002B52F8);
      v90 = sub_100172B28(&qword_1002B5300, &qword_1002B52F8, (void (*)(void))sub_10016EE44, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
      v92 = Picker.init(selection:label:content:)(&v135, v91, sub_10016D8D4, 0, &type metadata for EmptyView, &type metadata for Int, v89, &protocol witness table for EmptyView, &protocol witness table for Int, v90);
      InlinePickerStyle.init()(v92);
      v93 = sub_10014BEC0(&qword_1002B52D8, &qword_1002B5278, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
      v94 = v123;
      View.pickerStyle<A>(_:)(v4, v5, v123, v93, &protocol witness table for InlinePickerStyle);
      (*(void (**)(char *, uint64_t))(v122 + 8))(v4, v94);
      v95 = (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v7, v5);
      v96 = static Alignment.center.getter(v95);
      _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v135, 0x406F400000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v96, v97);
      v99 = v124;
      v98 = v125;
      v100 = (uint64_t)v118;
      (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v118, v10, v125);
      v101 = (_OWORD *)(v100 + *(int *)(v121 + 36));
      v102 = v140;
      v101[4] = v139;
      v101[5] = v102;
      v101[6] = v141;
      v103 = v136;
      *v101 = v135;
      v101[1] = v103;
      v104 = v138;
      v101[2] = v137;
      v101[3] = v104;
      (*(void (**)(char *, uint64_t))(v99 + 8))(v10, v98);
      v150 = v162;
      State.wrappedValue.getter(&v144, v119);
      v105 = v144;
      v150 = *(_OWORD *)v88;
      LOBYTE(v151) = *(_BYTE *)(v88 + 16);
      v106 = swift_allocObject(&unk_100264120, 56, 7);
      v107 = *(_OWORD *)(v88 + 16);
      *(_OWORD *)(v106 + 16) = *(_OWORD *)v88;
      *(_OWORD *)(v106 + 32) = v107;
      *(_QWORD *)(v106 + 48) = *(_QWORD *)(v88 + 32);
      v108 = v126;
      sub_10014BD9C(v100, v126, &qword_1002B5288);
      v109 = v129;
      v110 = (_QWORD *)(v108 + *(int *)(v129 + 36));
      *v110 = v105;
      v110[1] = sub_10016EF50;
      v110[2] = v106;
      sub_10016EF58((uint64_t *)&v150);
      sub_10016EF88((uint64_t)&v162);
      sub_10014BDE0(v100, &qword_1002B5288);
      v111 = v128;
      sub_10014BC64(v108, v128, &qword_1002B5290);
      sub_10014BD9C(v111, (uint64_t)v20, &qword_1002B5290);
      swift_storeEnumTagMultiPayload(v20, v130, 1);
      v112 = sub_100146438(&qword_1002B52B0);
      v113 = sub_10016EC90();
      v114 = sub_10016ECF4();
      v115 = (uint64_t)v131;
      _ConditionalContent<>.init(storage:)(v20, v112, v109, v113, v114);
      sub_10014BD9C(v115, (uint64_t)v18, &qword_1002B52A8);
      swift_storeEnumTagMultiPayload(v18, v132, 0);
      v116 = sub_10016EC24();
      _ConditionalContent<>.init(storage:)(v18, v133, v112, v116, v113);
      sub_10014BDE0(v115, &qword_1002B52A8);
      return sub_10014BDE0(v111, &qword_1002B5290);
    }
    else
    {
      v24 = LocalizedStringKey.init(stringLiteral:)(0x6D6953206F4ELL, 0xE600000000000000);
      v25 = Text.init(_:tableName:bundle:comment:)(v24);
      v27 = v26;
      v29 = v28;
      v31 = v30 & 1;
      v32 = static Font.headline.getter(v25);
      v33 = Text.font(_:)(v32, v25, v27, v31, v29);
      v127 = v34;
      v128 = v33;
      v36 = v35;
      v126 = v37;
      swift_release(v32);
      LOBYTE(v32) = v36 & 1;
      sub_10014BE2C(v25, v27, v31);
      v38 = swift_bridgeObjectRelease(v29);
      v39 = static Alignment.center.getter(v38);
      _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v150, 0x406F400000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v39, v40);
      *(_QWORD *)&v135 = v33;
      v42 = v126;
      v41 = v127;
      *((_QWORD *)&v135 + 1) = v127;
      LOBYTE(v136) = v36 & 1;
      *((_QWORD *)&v136 + 1) = v126;
      *(_QWORD *)&v137 = v150;
      BYTE8(v137) = BYTE8(v150);
      *(_QWORD *)&v138 = v151;
      BYTE8(v138) = v152;
      *(_QWORD *)&v139 = v153;
      BYTE8(v139) = v154;
      *(_QWORD *)&v140 = v155;
      BYTE8(v140) = v156;
      *(_QWORD *)&v141 = v157;
      BYTE8(v141) = v158;
      *(_QWORD *)&v142 = v159;
      BYTE8(v142) = v160;
      v143 = v161;
      v43 = v135;
      v44 = v136;
      v45 = v138;
      v20[2] = v137;
      v20[3] = v45;
      *v20 = v43;
      v20[1] = v44;
      v46 = v139;
      v47 = v140;
      v48 = v143;
      v20[7] = v142;
      v20[8] = v48;
      v49 = v141;
      v20[5] = v47;
      v20[6] = v49;
      v20[4] = v46;
      swift_storeEnumTagMultiPayload(v20, v130, 0);
      sub_10016EFB0((uint64_t)&v135);
      v50 = sub_100146438(&qword_1002B52B0);
      v51 = sub_10016EC90();
      v52 = sub_10016ECF4();
      v53 = (uint64_t)v131;
      _ConditionalContent<>.init(storage:)(v20, v50, v129, v51, v52);
      sub_10014BD9C(v53, (uint64_t)v18, &qword_1002B52A8);
      swift_storeEnumTagMultiPayload(v18, v132, 0);
      v54 = sub_10016EC24();
      _ConditionalContent<>.init(storage:)(v18, v133, v50, v54, v51);
      sub_10014BDE0(v53, &qword_1002B52A8);
      sub_10014BE2C(v128, v41, v32);
      return swift_bridgeObjectRelease(v42);
    }
  }
}

uint64_t sub_10016D8D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v8[2];
  _BYTE v9[24];

  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  v0 = qword_1002BF068;
  swift_beginAccess(qword_1002BF068 + 80, v9, 0, 0);
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 16);
  v8[0] = 0;
  v8[1] = v1;
  KeyPath = swift_getKeyPath(&unk_100241C90);
  v3 = sub_100146438(&qword_1002B5348);
  v4 = sub_100146438(&qword_1002B5310);
  v5 = sub_10016EFEC();
  v6 = sub_10016EE44();
  return ForEach<>.init(_:id:content:)(v8, KeyPath, sub_10016D9C8, 0, v3, v4, v5, &protocol witness table for Int, v6);
}

uint64_t sub_10016D9C8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD v13[2];
  _BYTE v14[24];

  v3 = *a1;
  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  v4 = qword_1002BF068;
  result = swift_beginAccess(qword_1002BF068 + 80, v14, 0, 0);
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 80);
    if (v3 < *(_QWORD *)(v6 + 16))
    {
      v7 = v6 + 88 * v3;
      v8 = *(_QWORD *)(v7 + 40);
      v13[0] = *(_QWORD *)(v7 + 32);
      v13[1] = v8;
      v9 = sub_10014654C();
      swift_bridgeObjectRetain(v8);
      result = Text.init<A>(_:)(v13, &type metadata for String, v9);
      *(_QWORD *)a2 = result;
      *(_QWORD *)(a2 + 8) = v10;
      *(_BYTE *)(a2 + 16) = v11 & 1;
      *(_QWORD *)(a2 + 24) = v12;
      *(_QWORD *)(a2 + 32) = v3;
      *(_BYTE *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = v3;
      *(_WORD *)(a2 + 56) = 0;
      return result;
    }
  }
  __break(1u);
  return result;
}

double sub_10016DAA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  double result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;

  v3 = type metadata accessor for Date(0);
  v36 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a2;
  v7 = a2[1];
  v8 = *((unsigned __int8 *)a2 + 16);
  v9 = type metadata accessor for AllMetricsViewModel();
  v10 = sub_100146004(&qword_1002B51D8, (uint64_t (*)(uint64_t))type metadata accessor for AllMetricsViewModel, (uint64_t)&unk_100242998);
  v33 = v7;
  v34 = v6;
  v11 = StateObject.wrappedValue.getter(v6, v7, v8, v9, v10);
  v35 = v11;
  if (qword_1002B39E8 != -1)
    v11 = swift_once(&qword_1002B39E8, sub_100174680);
  v15 = qword_1002BEFD8;
  v16 = static os_log_type_t.default.getter(v11, v12, v13, v14);
  v17 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1002402A0;
  v39 = *(_OWORD *)(a2 + 3);
  v40 = v39;
  v19 = sub_100146438(&qword_1002B52F0);
  State.wrappedValue.getter(&v38, v19);
  v20 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10016B1E0();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:type:_:)("carrier segment changed ~~ %{public}s", 37, 2, &_mh_execute_header, v15, v16, v18);
  swift_bridgeObjectRelease(v18);
  v23 = StateObject.wrappedValue.getter(v34, v33, v8, v9, v10);
  v24 = (char *)*(id *)(v23 + 16);
  swift_release(v23);
  Date.init()(v25);
  v26 = sub_10016AC60();
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v37);
  v29 = (uint64_t *)&v24[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_recordedTime];
  v30 = *(_QWORD *)&v24[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_recordedTime + 8];
  *v29 = v26;
  v29[1] = v28;

  swift_bridgeObjectRelease(v30);
  v39 = v40;
  State.wrappedValue.getter(&v38, v19);
  v31 = v35;
  sub_100194D5C(v38);
  *(_QWORD *)&result = swift_release(v31).n128_u64[0];
  return result;
}

void sub_10016DD0C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v4 = *(_OWORD *)(v2 + 16);
  v7[0] = *(_OWORD *)v2;
  v7[1] = v4;
  v8 = *(_QWORD *)(v2 + 32);
  *a2 = static Alignment.center.getter(a1);
  a2[1] = v5;
  v6 = sub_100146438(&qword_1002B51A8);
  sub_10016B484((uint64_t *)v7, (uint64_t)a2 + *(int *)(v6 + 44));
}

uint64_t sub_10016DD64(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD v19[2];

  sub_100172F9C(a3, a4);
  v9 = v8;
  if (!((unint64_t)v8 >> 62))
  {
    v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
    v19[0] = 0;
    v19[1] = v10;
    KeyPath = swift_getKeyPath(&unk_100241C90);
    v12 = (_QWORD *)swift_allocObject(&unk_100264218, 56, 7);
    v12[2] = v9;
    v12[3] = a1;
    v12[4] = a2;
    v12[5] = a3;
    v12[6] = a4;
    swift_retain(a1);
    swift_bridgeObjectRetain(a4);
    v13 = sub_100146438(&qword_1002B5348);
    v14 = sub_100146438(&qword_1002B5420);
    v15 = sub_10016EFEC();
    v16 = sub_10014BEC0(&qword_1002B5428, &qword_1002B5420, (uint64_t)&protocol conformance descriptor for HStack<A>);
    return ForEach<>.init(_:id:content:)(v19, KeyPath, sub_100173D5C, v12, v13, v14, v15, &protocol witness table for Int, v16);
  }
  if (v8 < 0)
    v18 = v8;
  else
    v18 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  v10 = _CocoaArrayWrapper.endIndex.getter(v18);
  result = swift_bridgeObjectRelease(v9);
  if ((v10 & 0x8000000000000000) == 0)
    goto LABEL_3;
  __break(1u);
  return result;
}

double sub_10016DEC0@<D0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double result;
  __int128 v20;
  _OWORD v21[14];
  _BYTE v22[231];

  v11 = *a1;
  v12 = static VerticalAlignment.center.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10016E00C(a2, v11, (uint64_t)v21);
  *(_OWORD *)&v22[167] = v21[10];
  *(_OWORD *)&v22[183] = v21[11];
  *(_OWORD *)&v22[199] = v21[12];
  *(_OWORD *)&v22[215] = v21[13];
  *(_OWORD *)&v22[103] = v21[6];
  *(_OWORD *)&v22[119] = v21[7];
  *(_OWORD *)&v22[135] = v21[8];
  *(_OWORD *)&v22[151] = v21[9];
  *(_OWORD *)&v22[39] = v21[2];
  *(_OWORD *)&v22[55] = v21[3];
  *(_OWORD *)&v22[71] = v21[4];
  *(_OWORD *)&v22[87] = v21[5];
  *(_OWORD *)&v22[7] = v21[0];
  *(_OWORD *)&v22[23] = v21[1];
  v13 = *(_OWORD *)&v22[160];
  *(_OWORD *)(a9 + 193) = *(_OWORD *)&v22[176];
  v14 = *(_OWORD *)&v22[208];
  *(_OWORD *)(a9 + 209) = *(_OWORD *)&v22[192];
  *(_OWORD *)(a9 + 225) = v14;
  v15 = *(_OWORD *)&v22[96];
  *(_OWORD *)(a9 + 129) = *(_OWORD *)&v22[112];
  v16 = *(_OWORD *)&v22[144];
  *(_OWORD *)(a9 + 145) = *(_OWORD *)&v22[128];
  *(_OWORD *)(a9 + 161) = v16;
  *(_OWORD *)(a9 + 177) = v13;
  v17 = *(_OWORD *)&v22[32];
  *(_OWORD *)(a9 + 65) = *(_OWORD *)&v22[48];
  v18 = *(_OWORD *)&v22[80];
  *(_OWORD *)(a9 + 81) = *(_OWORD *)&v22[64];
  *(_OWORD *)(a9 + 97) = v18;
  *(_OWORD *)(a9 + 113) = v15;
  result = *(double *)v22;
  v20 = *(_OWORD *)&v22[16];
  *(_OWORD *)(a9 + 17) = *(_OWORD *)v22;
  *(_OWORD *)(a9 + 33) = v20;
  *(_QWORD *)a9 = v12;
  *(_QWORD *)(a9 + 8) = 0;
  *(_BYTE *)(a9 + 16) = 1;
  *(_QWORD *)(a9 + 240) = *(_QWORD *)&v22[223];
  *(_OWORD *)(a9 + 49) = v17;
  return result;
}

uint64_t sub_10016E00C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[7];
  char v66;
  _BYTE v67[7];
  _BYTE v68[7];
  char v69;
  _BYTE v70[7];
  char v71;
  _BYTE v72[7];
  char v73;
  _BYTE v74[7];
  char v75;

  v4 = result;
  v6 = result & 0xC000000000000001;
  if ((result & 0xC000000000000001) != 0)
  {
    v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, result);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10) <= a2)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v7 = *(_QWORD *)(result + 8 * a2 + 32);
  swift_retain(v7);
LABEL_5:
  v9 = *(_QWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 56);
  swift_bridgeObjectRetain(v8);
  swift_release(v7);
  if (v6)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, v4);
  }
  else
  {
    v10 = *(_QWORD *)(v4 + 8 * a2 + 32);
    swift_retain(v10);
  }
  v12 = *(_QWORD *)(v10 + 96);
  v11 = *(_QWORD *)(v10 + 104);
  swift_bridgeObjectRetain(v11);
  swift_release(v10);
  v63 = v9;
  v64 = v8;
  v13 = sub_10014654C();
  v14 = Text.init<A>(_:)(&v63, &type metadata for String, v13);
  v16 = v15;
  v18 = v17;
  v20 = v19 & 1;
  v21 = static Color.blue.getter(v14, v15);
  v22 = Text.foregroundColor(_:)(v21, v14, v16, v20, v18);
  v60 = v23;
  v61 = v22;
  v25 = v24;
  v62 = v26;
  swift_release(v21);
  LOBYTE(v21) = v25 & 1;
  sub_10014BE2C(v14, v16, v20);
  v27 = swift_bridgeObjectRelease(v18);
  v59 = static Edge.Set.leading.getter(v27);
  v28 = EdgeInsets.init(_all:)(10.0);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v63 = v12;
  v64 = v11;
  v35 = Text.init<A>(_:)(&v63, &type metadata for String, v13);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v42 = static Color.gray.getter(v35, v36);
  v43 = Text.foregroundColor(_:)(v42, v35, v37, v41, v39);
  v45 = v44;
  LOBYTE(v11) = v46;
  v58 = v47;
  swift_release(v42);
  sub_10014BE2C(v35, v37, v41);
  v48 = swift_bridgeObjectRelease(v39);
  LOBYTE(v41) = static Edge.Set.trailing.getter(v48);
  v49 = EdgeInsets.init(_all:)(10.0);
  v75 = v21;
  v73 = 0;
  v71 = 1;
  v69 = v11 & 1;
  v66 = 0;
  *(_DWORD *)(a3 + 17) = v63;
  *(_DWORD *)(a3 + 20) = *(_DWORD *)((char *)&v63 + 3);
  *(_DWORD *)(a3 + 33) = *(_DWORD *)v74;
  *(_DWORD *)(a3 + 36) = *(_DWORD *)&v74[3];
  v50 = *(_DWORD *)v72;
  *(_DWORD *)(a3 + 76) = *(_DWORD *)&v72[3];
  *(_DWORD *)(a3 + 73) = v50;
  LOBYTE(v50) = v71;
  v51 = *(_DWORD *)v70;
  *(_DWORD *)(a3 + 92) = *(_DWORD *)&v70[3];
  *(_DWORD *)(a3 + 89) = v51;
  v52 = *(_DWORD *)v68;
  *(_DWORD *)(a3 + 116) = *(_DWORD *)&v68[3];
  *(_DWORD *)(a3 + 113) = v52;
  v53 = *(_DWORD *)v67;
  *(_DWORD *)(a3 + 132) = *(_DWORD *)&v67[3];
  *(_DWORD *)(a3 + 129) = v53;
  LOBYTE(v53) = v66;
  v54 = *(_DWORD *)v65;
  *(_DWORD *)(a3 + 172) = *(_DWORD *)&v65[3];
  *(_DWORD *)(a3 + 169) = v54;
  *(_QWORD *)a3 = v61;
  *(_QWORD *)(a3 + 8) = v60;
  *(_BYTE *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v62;
  *(_BYTE *)(a3 + 32) = v59;
  *(double *)(a3 + 40) = v28;
  *(_QWORD *)(a3 + 48) = v30;
  *(_QWORD *)(a3 + 56) = v32;
  *(_QWORD *)(a3 + 64) = v34;
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 88) = v50;
  *(_QWORD *)(a3 + 96) = v43;
  *(_QWORD *)(a3 + 104) = v45;
  *(_BYTE *)(a3 + 112) = v11 & 1;
  *(_QWORD *)(a3 + 120) = v58;
  *(_BYTE *)(a3 + 128) = v41;
  *(double *)(a3 + 136) = v49;
  *(_QWORD *)(a3 + 144) = v55;
  *(_QWORD *)(a3 + 152) = v56;
  *(_QWORD *)(a3 + 160) = v57;
  *(_BYTE *)(a3 + 168) = v53;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  sub_10014BE1C(v61, v60, v21);
  swift_bridgeObjectRetain(v62);
  sub_10014BE1C(v43, v45, v11 & 1);
  swift_bridgeObjectRetain(v58);
  sub_100173D6C(0, 0, 0, 0, 0, 0);
  sub_100173DBC(0, 0, 0, 0, 0, 0);
  sub_10014BE2C(v43, v45, v11 & 1);
  swift_bridgeObjectRelease(v58);
  sub_10014BE2C(v61, v60, v21);
  return swift_bridgeObjectRelease(v62);
}

uint64_t sub_10016E3B0()
{
  uint64_t v0;

  return sub_10016DD64(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10016E3BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  _QWORD v23[2];
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD v27[2];
  unsigned __int8 v28;

  v23[1] = a5;
  v9 = sub_100146438(&qword_1002B5440);
  v24 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_1002642C0, 48, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  *(_BYTE *)(v12 + 32) = a3;
  *(_QWORD *)(v12 + 40) = a4;
  swift_retain(a4);
  swift_retain(a1);
  Button.init(action:label:)(sub_10017408C, v12, sub_10016E65C, 0, &type metadata for Image, &protocol witness table for Image);
  v25 = a3;
  v26 = a4;
  v13 = sub_100146438(&qword_1002B3CD8);
  State.projectedValue.getter(v27, v13);
  v15 = v27[0];
  v14 = v27[1];
  v16 = v28;
  v17 = swift_allocObject(&unk_1002642E8, 48, 7);
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = a2;
  *(_BYTE *)(v17 + 32) = a3;
  *(_QWORD *)(v17 + 40) = a4;
  swift_retain(a1);
  swift_retain(a4);
  v18 = sub_100146438(&qword_1002B5448);
  v19 = sub_10014BEC0(&qword_1002B5450, &qword_1002B5440, (uint64_t)&protocol conformance descriptor for Button<A>);
  v20 = sub_100172B28(&qword_1002B5458, &qword_1002B5448, (void (*)(void))sub_1001740DC, (uint64_t)&protocol conformance descriptor for <A> A?);
  View.sheet<A>(isPresented:onDismiss:content:)(v15, v14, v16, 0, 0, sub_1001740CC, v17, v9, v18, v19, v20);
  swift_release(v14);
  swift_release(v17);
  v21 = swift_release(v15);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v24 + 8))(v11, v9, v21);
}

double sub_10016E5D0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  double result;
  _BYTE v8[9];
  uint64_t v9;
  uint64_t v10;

  swift_retain(a4);
  v6 = sub_100146438(&qword_1002B3CD8);
  State.wrappedValue.getter(&v10, v6);
  v8[1] = a3;
  v9 = a4;
  v8[0] = (v10 & 1) == 0;
  State.wrappedValue.setter(v8, v6);
  *(_QWORD *)&result = swift_release(a4).n128_u64[0];
  return result;
}

uint64_t sub_10016E65C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0x61622E7472616863, 0xEF73697861782E72);
  *a1 = result;
  return result;
}

uint64_t sub_10016E6A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for FTMCellMonitorBookmarkedSheetView(0);
  v7 = __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v11 = (char *)&v32 - v10;
  v12 = sub_100146438(&qword_1002B5468);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v18 = (char *)&v32 - v17;
  if (a1)
  {
    v32 = v16;
    v33 = a3;
    v19 = qword_1002B3A80;
    swift_retain(a1);
    if (v19 != -1)
      swift_once(&qword_1002B3A80, sub_100184F00);
    v20 = *(_QWORD *)(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricSheetData);
    *(_QWORD *)(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricSheetData) = a1;
    swift_retain(a1);
    swift_release(v20);
    a2 = type metadata accessor for FTMAllMetricsModel(0);
    v21 = sub_100146004(&qword_1002B3FC8, type metadata accessor for FTMAllMetricsModel, (uint64_t)&unk_100242840);
    *v9 = EnvironmentObject.init()(a2, v21);
    v9[1] = v22;
    v23 = (_QWORD *)((char *)v9 + *(int *)(v6 + 20));
    *v23 = swift_getKeyPath(&unk_100241DC0);
    v24 = sub_100146438(&qword_1002B3F00);
    swift_storeEnumTagMultiPayload(v23, v24, 0);
    sub_100153180((uint64_t)v9, (uint64_t)v11);
    v25 = *(_QWORD *)(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricSheetData);
    if (v25)
    {
      swift_retain(*(_QWORD *)(qword_1002BF070
                             + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricSheetData));
      v26 = static ObservableObject.environmentStore.getter(a2, v21);
      sub_10017417C((uint64_t)v11, (uint64_t)v15, type metadata accessor for FTMCellMonitorBookmarkedSheetView);
      swift_release(a1);
      v27 = (uint64_t *)&v15[*(int *)(v12 + 36)];
      *v27 = v26;
      v27[1] = v25;
      sub_1001741C0((uint64_t)v11);
      sub_10014BC64((uint64_t)v15, (uint64_t)v18, &qword_1002B5468);
      v28 = v33;
      sub_10014BC64((uint64_t)v18, v33, &qword_1002B5468);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v28, 0, 1, v12);
    }
    __break(1u);
  }
  v30 = type metadata accessor for FTMAllMetricsModel(0);
  v31 = sub_100146004(&qword_1002B3FC8, type metadata accessor for FTMAllMetricsModel, (uint64_t)&unk_100242840);
  result = EnvironmentObject.error()(0, a2, v30, v31);
  __break(1u);
  return result;
}

uint64_t sub_10016E964@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10016E3BC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10016E974(uint64_t result)
{
  *(_BYTE *)(result + 153) = 1;
  return result;
}

uint64_t sub_10016E980(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_BYTE *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  sub_10014BE1C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  sub_10014BE1C(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  return a1;
}

unint64_t sub_10016EA00()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1002B5200;
  if (!qword_1002B5200)
  {
    v1 = sub_1001464C4(&qword_1002B51C0);
    v2[0] = sub_1001464C4(&qword_1002B51C8);
    v2[1] = type metadata accessor for StackNavigationViewStyle(255);
    v2[2] = sub_10014BEC0(&qword_1002B5208, &qword_1002B51C8, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
    v2[3] = sub_100146004(&qword_1002B3CB8, (uint64_t (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle, (uint64_t)&protocol conformance descriptor for StackNavigationViewStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.navigationViewStyle<A>(_:)>>, 1);
    sub_10014BEC0((unint64_t *)&qword_1002B51F0, &qword_1002B51E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B5200);
  }
  return result;
}

unint64_t sub_10016EB08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B5210;
  if (!qword_1002B5210)
  {
    v1 = sub_1001464C4(&qword_1002B51F8);
    sub_10014BEC0((unint64_t *)&qword_1002B51F0, &qword_1002B51E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B5210);
  }
  return result;
}

uint64_t sub_10016EB84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_BYTE *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  sub_10014BE2C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  sub_10014BE2C(v3, v4, v5);
  swift_release(v7);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_10016EC04(uint64_t result)
{
  *(_BYTE *)(result + 153) = 0;
  return result;
}

uint64_t sub_10016EC0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10016BDF0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10016EC14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10016CC48(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10016EC1C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;

  return sub_10016CE4C(*(_QWORD *)(v8 + 16), a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t sub_10016EC24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B52B8;
  if (!qword_1002B52B8)
  {
    v1 = sub_1001464C4(&qword_1002B52A8);
    sub_10016EC90();
    sub_10016ECF4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B52B8);
  }
  return result;
}

unint64_t sub_10016EC90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B52C0;
  if (!qword_1002B52C0)
  {
    v1 = sub_1001464C4(&qword_1002B52B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B52C0);
  }
  return result;
}

unint64_t sub_10016ECF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B52C8;
  if (!qword_1002B52C8)
  {
    v1 = sub_1001464C4(&qword_1002B5290);
    sub_10016ED78();
    sub_10014BEC0(&qword_1002B52E0, &qword_1002B52E8, (uint64_t)&protocol conformance descriptor for _ValueActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B52C8);
  }
  return result;
}

unint64_t sub_10016ED78()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1002B52D0;
  if (!qword_1002B52D0)
  {
    v1 = sub_1001464C4(&qword_1002B5288);
    v2[0] = sub_1001464C4(&qword_1002B5278);
    v2[1] = type metadata accessor for InlinePickerStyle(255);
    v2[2] = sub_10014BEC0(&qword_1002B52D8, &qword_1002B5278, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
    v2[3] = &protocol witness table for InlinePickerStyle;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.pickerStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B52D0);
  }
  return result;
}

unint64_t sub_10016EE44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B5308;
  if (!qword_1002B5308)
  {
    v1 = sub_1001464C4(&qword_1002B5310);
    sub_10016EEC8();
    sub_10014BEC0(&qword_1002B5338, &qword_1002B5340, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B5308);
  }
  return result;
}

unint64_t sub_10016EEC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B5318;
  if (!qword_1002B5318)
  {
    v1 = sub_1001464C4(&qword_1002B5320);
    sub_10014BEC0(&qword_1002B5328, &qword_1002B5330, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B5318);
  }
  return result;
}

double sub_10016EF50(uint64_t a1)
{
  uint64_t v1;

  return sub_10016DAA8(a1, (uint64_t *)(v1 + 16));
}

uint64_t *sub_10016EF58(uint64_t *a1)
{
  sub_10016B224(*a1, a1[1]);
  return a1;
}

uint64_t sub_10016EF88(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10016EFB0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_10014BE1C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  return a1;
}

unint64_t sub_10016EFEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B5350;
  if (!qword_1002B5350)
  {
    v1 = sub_1001464C4(&qword_1002B5348);
    sub_10016F058();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B5350);
  }
  return result;
}

unint64_t sub_10016F058()
{
  unint64_t result;

  result = qword_1002B5358;
  if (!qword_1002B5358)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1002B5358);
  }
  return result;
}

Swift::Int sub_10016F09C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100198900(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_10016F1F4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_10016F104(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_100198914(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_10017028C(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

uint64_t sub_10016F17C(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_100198914(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  v5 = sub_10016F8DC(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

Swift::Int sub_10016F1F4(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  Swift::Int v21;
  uint64_t *v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  _QWORD *v110;
  Swift::Int v111;
  Swift::Int v112;
  Swift::Int v113;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return sub_100171384(0, v3, 1, a1);
      return result;
    }
    goto LABEL_154;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_162:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v111 = result;
  v108 = a1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_120:
      v101 = v11;
      v110 = v8;
      if (v12 < 2)
        goto LABEL_117;
      v102 = *v108;
      while (1)
      {
        v103 = v12 - 2;
        if (v12 < 2)
          goto LABEL_149;
        if (!v102)
          goto LABEL_161;
        v100 = v101;
        v104 = *(_QWORD *)&v101[16 * v103 + 32];
        v105 = *(_QWORD *)&v101[16 * v12 + 24];
        sub_100171450((char *)(v102 + 16 * v104), (char *)(v102 + 16 * *(_QWORD *)&v101[16 * v12 + 16]), v102 + 16 * v105, __dst);
        if (v1)
          goto LABEL_116;
        if (v105 < v104)
          goto LABEL_150;
        if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
          v100 = sub_100197EBC((uint64_t)v100);
        if (v103 >= *((_QWORD *)v100 + 2))
          goto LABEL_151;
        v106 = &v100[16 * v103 + 32];
        *(_QWORD *)v106 = v104;
        *((_QWORD *)v106 + 1) = v105;
        v107 = *((_QWORD *)v100 + 2);
        if (v12 > v107)
          goto LABEL_152;
        memmove(&v100[16 * v12 + 16], &v100[16 * v12 + 32], 16 * (v107 - v12));
        v101 = v100;
        *((_QWORD *)v100 + 2) = v107 - 1;
        v12 = v107 - 1;
        if (v107 <= 2)
          goto LABEL_117;
      }
    }
    v110 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(_QWORD *)(v7 + 16) = v6;
    v110 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v109 = v10 + 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v112 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    v18 = v17[1];
    if (v15 == *v17 && v16 == v18)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v20 = 0;
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v17, v18, 1);
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v22 = (uint64_t *)(v109 + 16 * v21);
    do
    {
      v24 = *(v22 - 1);
      v25 = *v22;
      v26 = (_QWORD *)(v10 + 16 * v9);
      v27 = v26[1];
      if (v24 == *v26 && v25 == v27)
      {
        if ((v20 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *v26, v27, 1)) & 1) != 0)
      {
        goto LABEL_36;
      }
      v22 += 2;
      v23 = v21 + 1;
      v9 = v21;
      v21 = v23;
    }
    while (v23 < v3);
    v21 = v23;
LABEL_36:
    v9 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v13)
        goto LABEL_157;
      if (v13 < v21)
      {
        v29 = 16 * v21;
        v30 = 16 * v13;
        v31 = v21;
        v32 = v13;
        do
        {
          if (v32 != --v31)
          {
            if (!v10)
              goto LABEL_160;
            v33 = v10 + v29;
            v34 = *(_QWORD *)(v10 + v30);
            v35 = *(_QWORD *)(v10 + v30 + 8);
            *(_OWORD *)(v10 + v30) = *(_OWORD *)(v10 + v29 - 16);
            *(_QWORD *)(v33 - 16) = v34;
            *(_QWORD *)(v33 - 8) = v35;
          }
          ++v32;
          v29 -= 16;
          v30 += 16;
        }
        while (v32 < v31);
      }
LABEL_45:
      v9 = v21;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_153;
      if (v9 - v13 < v111)
      {
        if (__OFADD__(v13, v111))
          goto LABEL_155;
        if (v13 + v111 >= v3)
          v36 = v3;
        else
          v36 = v13 + v111;
        if (v36 < v13)
          goto LABEL_156;
        if (v9 != v36)
        {
          v37 = (_QWORD *)(v10 + 16 * v9);
          do
          {
            v38 = (uint64_t *)(v10 + 16 * v9);
            v39 = *v38;
            v40 = v38[1];
            v41 = v13;
            v42 = v37;
            do
            {
              v43 = *(v42 - 2);
              v44 = *(v42 - 1);
              v45 = v39 == v43 && v40 == v44;
              if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v43, v44, 1) & 1) == 0)
                break;
              if (!v10)
                goto LABEL_158;
              v39 = *v42;
              v40 = v42[1];
              *(_OWORD *)v42 = *((_OWORD *)v42 - 1);
              *(v42 - 1) = v40;
              *(v42 - 2) = v39;
              v42 -= 2;
              ++v41;
            }
            while (v9 != v41);
            ++v9;
            v37 += 2;
          }
          while (v9 != v36);
          v9 = v36;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_100197984(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v47 = *((_QWORD *)v11 + 2);
    v46 = *((_QWORD *)v11 + 3);
    v12 = v47 + 1;
    if (v47 >= v46 >> 1)
      v11 = sub_100197984((char *)(v46 > 1), v47 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v48 = v11 + 32;
    v49 = &v11[16 * v47 + 32];
    *(_QWORD *)v49 = v13;
    *((_QWORD *)v49 + 1) = v9;
    if (v47)
      break;
    v12 = 1;
LABEL_15:
    v3 = v112;
    if (v9 >= v112)
    {
      v8 = v110;
      goto LABEL_120;
    }
  }
  v113 = v9;
  while (1)
  {
    v50 = v12 - 1;
    if (v12 >= 4)
    {
      v55 = &v48[16 * v12];
      v56 = *((_QWORD *)v55 - 8);
      v57 = *((_QWORD *)v55 - 7);
      v61 = __OFSUB__(v57, v56);
      v58 = v57 - v56;
      if (v61)
        goto LABEL_137;
      v60 = *((_QWORD *)v55 - 6);
      v59 = *((_QWORD *)v55 - 5);
      v61 = __OFSUB__(v59, v60);
      v53 = v59 - v60;
      v54 = v61;
      if (v61)
        goto LABEL_138;
      v62 = v12 - 2;
      v63 = &v48[16 * v12 - 32];
      v65 = *(_QWORD *)v63;
      v64 = *((_QWORD *)v63 + 1);
      v61 = __OFSUB__(v64, v65);
      v66 = v64 - v65;
      if (v61)
        goto LABEL_140;
      v61 = __OFADD__(v53, v66);
      v67 = v53 + v66;
      if (v61)
        goto LABEL_143;
      if (v67 >= v58)
      {
        v85 = &v48[16 * v50];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v61 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v61)
          goto LABEL_147;
        v78 = v53 < v88;
        goto LABEL_105;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v79 = *((_QWORD *)v11 + 4);
        v80 = *((_QWORD *)v11 + 5);
        v61 = __OFSUB__(v80, v79);
        v72 = v80 - v79;
        v73 = v61;
        goto LABEL_99;
      }
      v52 = *((_QWORD *)v11 + 4);
      v51 = *((_QWORD *)v11 + 5);
      v61 = __OFSUB__(v51, v52);
      v53 = v51 - v52;
      v54 = v61;
    }
    if ((v54 & 1) != 0)
      goto LABEL_139;
    v62 = v12 - 2;
    v68 = &v48[16 * v12 - 32];
    v70 = *(_QWORD *)v68;
    v69 = *((_QWORD *)v68 + 1);
    v71 = __OFSUB__(v69, v70);
    v72 = v69 - v70;
    v73 = v71;
    if (v71)
      goto LABEL_142;
    v74 = &v48[16 * v50];
    v76 = *(_QWORD *)v74;
    v75 = *((_QWORD *)v74 + 1);
    v61 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if (v61)
      goto LABEL_145;
    if (__OFADD__(v72, v77))
      goto LABEL_146;
    if (v72 + v77 >= v53)
    {
      v78 = v53 < v77;
LABEL_105:
      if (v78)
        v50 = v62;
      goto LABEL_107;
    }
LABEL_99:
    if ((v73 & 1) != 0)
      goto LABEL_141;
    v81 = &v48[16 * v50];
    v83 = *(_QWORD *)v81;
    v82 = *((_QWORD *)v81 + 1);
    v61 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if (v61)
      goto LABEL_144;
    if (v84 < v72)
      goto LABEL_15;
LABEL_107:
    v89 = v50 - 1;
    if (v50 - 1 >= v12)
    {
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    v90 = v10;
    if (!v10)
      goto LABEL_159;
    v91 = v11;
    v92 = &v48[16 * v89];
    v93 = *(_QWORD *)v92;
    v94 = v48;
    v95 = v50;
    v96 = &v48[16 * v50];
    v97 = *((_QWORD *)v96 + 1);
    v98 = v90;
    sub_100171450((char *)(v90 + 16 * *(_QWORD *)v92), (char *)(v90 + 16 * *(_QWORD *)v96), v90 + 16 * v97, __dst);
    if (v1)
      break;
    if (v97 < v93)
      goto LABEL_134;
    if (v95 > *((_QWORD *)v91 + 2))
      goto LABEL_135;
    *(_QWORD *)v92 = v93;
    *(_QWORD *)&v94[16 * v89 + 8] = v97;
    v99 = *((_QWORD *)v91 + 2);
    if (v95 >= v99)
      goto LABEL_136;
    v11 = v91;
    v12 = v99 - 1;
    memmove(v96, v96 + 16, 16 * (v99 - 1 - v95));
    v48 = v94;
    *((_QWORD *)v91 + 2) = v99 - 1;
    v10 = v98;
    v9 = v113;
    if (v99 <= 2)
      goto LABEL_15;
  }
  v100 = v91;
LABEL_116:
  v101 = v100;
LABEL_117:
  swift_bridgeObjectRelease(v101);
  v110[2] = 0;
  return swift_bridgeObjectRelease(v110);
}

Swift::Int sub_10016F8DC(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  char *v24;
  Swift::Int v25;
  uint64_t v26;
  Swift::Int v27;
  unint64_t v28;
  Swift::Int v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  Swift::Int v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v48;
  Swift::Int v49;
  Swift::Int v50;
  uint64_t *v51;
  uint64_t v52;
  Swift::Int v53;
  _QWORD *v54;
  uint64_t v55;
  Swift::Int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  char v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  _QWORD *v152;
  Swift::Int v153;
  Swift::Int v154;
  Swift::Int v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *__dst;
  char *v161;
  char *v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result < v3)
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_229;
    v6 = result;
    if (v3 < 2)
    {
      v24 = (char *)_swiftEmptyArrayStorage;
      v166 = (uint64_t)_swiftEmptyArrayStorage;
      v10 = ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32;
      if (v3 != 1)
      {
        v28 = _swiftEmptyArrayStorage[2];
        if (v28 < 2)
          goto LABEL_196;
        goto LABEL_186;
      }
    }
    else
    {
      v7 = v5 >> 1;
      v8 = type metadata accessor for FTMAllMetricsModel(0);
      v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
      *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
      v10 = (v9 & 0xFFFFFFFFFFFFFF8) + 32;
      v166 = v9;
    }
    v152 = v2;
    v153 = v6;
    v25 = 0;
    v26 = *v2;
    v156 = *v2 - 8;
    v24 = (char *)_swiftEmptyArrayStorage;
    v27 = v3;
    v154 = v3;
    __dst = (char *)v10;
    v157 = *v2;
    while (1)
    {
      v29 = v25;
      v30 = v25 + 1;
      if (v25 + 1 >= v27)
        goto LABEL_54;
      v31 = *(_QWORD *)(v26 + 8 * v30);
      v32 = *(_QWORD *)(v26 + 8 * v25);
      v33 = *(_QWORD *)(v31 + 48);
      v34 = *(_QWORD *)(v31 + 56);
      v35 = *(_QWORD *)(v32 + 48);
      v36 = *(_QWORD *)(v32 + 56);
      if (v33 == v35 && v34 == v36)
      {
        v39 = v29 + 2;
        if (v29 + 2 >= v27)
          goto LABEL_53;
        v38 = 0;
        do
        {
LABEL_37:
          v41 = *(_QWORD *)(v26 + 8 * v39);
          v42 = *(_QWORD *)(v26 + 8 * v30);
          v43 = *(_QWORD *)(v41 + 48);
          v44 = *(_QWORD *)(v41 + 56);
          v45 = *(_QWORD *)(v42 + 48);
          v46 = *(_QWORD *)(v42 + 56);
          if (v43 == v45 && v44 == v46)
          {
            if ((v38 & 1) != 0)
              goto LABEL_46;
          }
          else if (((v38 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v45, v46, 1)) & 1) != 0)
          {
            goto LABEL_45;
          }
          v40 = v39 + 1;
          v30 = v39;
          v39 = v40;
        }
        while (v40 < v27);
        v39 = v40;
      }
      else
      {
        v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v35, v36, 1);
        v39 = v29 + 2;
        if (v29 + 2 < v27)
          goto LABEL_37;
      }
LABEL_45:
      v30 = v39;
      if ((v38 & 1) == 0)
        goto LABEL_54;
LABEL_46:
      if (v39 < v29)
        goto LABEL_221;
      if (v29 < v39)
      {
        v48 = (uint64_t *)(v156 + 8 * v39);
        v49 = v39;
        v50 = v29;
        v51 = (uint64_t *)(v26 + 8 * v29);
        do
        {
          if (v50 != --v49)
          {
            if (!v26)
              goto LABEL_226;
            v52 = *v51;
            *v51 = *v48;
            *v48 = v52;
          }
          ++v50;
          --v48;
          ++v51;
        }
        while (v50 < v49);
      }
LABEL_53:
      v30 = v39;
LABEL_54:
      if (v30 < v27)
      {
        if (__OFSUB__(v30, v29))
          goto LABEL_214;
        if (v30 - v29 < v153)
        {
          if (__OFADD__(v29, v153))
            goto LABEL_219;
          if (v29 + v153 >= v27)
            v53 = v27;
          else
            v53 = v29 + v153;
          if (v53 < v29)
            goto LABEL_220;
          if (v30 != v53)
          {
            v54 = (_QWORD *)(v156 + 8 * v30);
            do
            {
              v55 = *(_QWORD *)(v26 + 8 * v30);
              v56 = v29;
              v57 = v54;
              do
              {
                v58 = *(_QWORD *)(v55 + 48);
                v59 = *(_QWORD *)(v55 + 56);
                v60 = *(_QWORD *)(*v57 + 48);
                v61 = *(_QWORD *)(*v57 + 56);
                v62 = v58 == v60 && v59 == v61;
                if (v62 || (_stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, v60, v61, 1) & 1) == 0)
                  break;
                if (!v26)
                  goto LABEL_223;
                v63 = *v57;
                v55 = v57[1];
                *v57 = v55;
                v57[1] = v63;
                --v57;
                ++v56;
              }
              while (v30 != v56);
              ++v30;
              ++v54;
            }
            while (v30 != v53);
            v30 = v53;
          }
        }
      }
      if (v30 < v29)
        goto LABEL_213;
      v155 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
        v24 = sub_100197984(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
      v65 = *((_QWORD *)v24 + 2);
      v64 = *((_QWORD *)v24 + 3);
      v28 = v65 + 1;
      if (v65 >= v64 >> 1)
        v24 = sub_100197984((char *)(v64 > 1), v65 + 1, 1, v24);
      *((_QWORD *)v24 + 2) = v28;
      v66 = v24 + 32;
      v67 = &v24[16 * v65 + 32];
      *(_QWORD *)v67 = v29;
      *((_QWORD *)v67 + 1) = v30;
      if (v65)
      {
        v10 = (uint64_t)__dst;
        v158 = v24 + 32;
        v159 = v24;
        while (1)
        {
          v68 = v28 - 1;
          if (v28 >= 4)
          {
            v73 = &v66[16 * v28];
            v74 = *((_QWORD *)v73 - 8);
            v75 = *((_QWORD *)v73 - 7);
            v79 = __OFSUB__(v75, v74);
            v76 = v75 - v74;
            if (v79)
              goto LABEL_202;
            v78 = *((_QWORD *)v73 - 6);
            v77 = *((_QWORD *)v73 - 5);
            v79 = __OFSUB__(v77, v78);
            v71 = v77 - v78;
            v72 = v79;
            if (v79)
              goto LABEL_203;
            v80 = v28 - 2;
            v81 = &v66[16 * v28 - 32];
            v83 = *(_QWORD *)v81;
            v82 = *((_QWORD *)v81 + 1);
            v79 = __OFSUB__(v82, v83);
            v84 = v82 - v83;
            if (v79)
              goto LABEL_205;
            v79 = __OFADD__(v71, v84);
            v85 = v71 + v84;
            if (v79)
              goto LABEL_208;
            if (v85 >= v76)
            {
              v103 = &v66[16 * v68];
              v105 = *(_QWORD *)v103;
              v104 = *((_QWORD *)v103 + 1);
              v79 = __OFSUB__(v104, v105);
              v106 = v104 - v105;
              if (v79)
                goto LABEL_212;
              v96 = v71 < v106;
              goto LABEL_113;
            }
          }
          else
          {
            if (v28 != 3)
            {
              v97 = *((_QWORD *)v24 + 4);
              v98 = *((_QWORD *)v24 + 5);
              v79 = __OFSUB__(v98, v97);
              v90 = v98 - v97;
              v91 = v79;
              goto LABEL_107;
            }
            v70 = *((_QWORD *)v24 + 4);
            v69 = *((_QWORD *)v24 + 5);
            v79 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            v72 = v79;
          }
          if ((v72 & 1) != 0)
            goto LABEL_204;
          v80 = v28 - 2;
          v86 = &v66[16 * v28 - 32];
          v88 = *(_QWORD *)v86;
          v87 = *((_QWORD *)v86 + 1);
          v89 = __OFSUB__(v87, v88);
          v90 = v87 - v88;
          v91 = v89;
          if (v89)
            goto LABEL_207;
          v92 = &v66[16 * v68];
          v94 = *(_QWORD *)v92;
          v93 = *((_QWORD *)v92 + 1);
          v79 = __OFSUB__(v93, v94);
          v95 = v93 - v94;
          if (v79)
            goto LABEL_210;
          if (__OFADD__(v90, v95))
            goto LABEL_211;
          if (v90 + v95 >= v71)
          {
            v96 = v71 < v95;
LABEL_113:
            if (v96)
              v68 = v80;
            goto LABEL_115;
          }
LABEL_107:
          if ((v91 & 1) != 0)
            goto LABEL_206;
          v99 = &v66[16 * v68];
          v101 = *(_QWORD *)v99;
          v100 = *((_QWORD *)v99 + 1);
          v79 = __OFSUB__(v100, v101);
          v102 = v100 - v101;
          if (v79)
            goto LABEL_209;
          if (v102 < v90)
            goto LABEL_25;
LABEL_115:
          v107 = v68 - 1;
          if (v68 - 1 >= v28)
          {
            __break(1u);
LABEL_199:
            __break(1u);
LABEL_200:
            __break(1u);
LABEL_201:
            __break(1u);
LABEL_202:
            __break(1u);
LABEL_203:
            __break(1u);
LABEL_204:
            __break(1u);
LABEL_205:
            __break(1u);
LABEL_206:
            __break(1u);
LABEL_207:
            __break(1u);
LABEL_208:
            __break(1u);
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            __break(1u);
LABEL_214:
            __break(1u);
            goto LABEL_215;
          }
          if (!v26)
            goto LABEL_225;
          v162 = &v66[16 * v107];
          v163 = v68;
          v108 = &v66[16 * v68];
          v110 = *(_QWORD *)v108;
          v109 = *((_QWORD *)v108 + 1);
          v161 = v108;
          v111 = v26;
          v164 = *(_QWORD *)v162;
          v165 = v109;
          v112 = (char *)(v26 + 8 * *(_QWORD *)v162);
          v113 = (char *)(v111 + 8 * v110);
          v114 = v111 + 8 * v109;
          v115 = v113 - v112;
          v116 = v113 - v112 + 7;
          if (v113 - v112 >= 0)
            v116 = v113 - v112;
          v117 = v116 >> 3;
          v118 = v114 - (_QWORD)v113;
          v119 = v114 - (_QWORD)v113 + 7;
          if ((uint64_t)(v114 - (_QWORD)v113) >= 0)
            v119 = v114 - (_QWORD)v113;
          v120 = v119 >> 3;
          if (v117 >= v119 >> 3)
          {
            if (v118 < -7)
              goto LABEL_228;
            if ((unint64_t)__dst >= v114 || __dst != v113)
              memmove(__dst, v113, 8 * v120);
            v121 = &__dst[8 * v120];
            v129 = v164;
            v10 = (uint64_t)__dst;
            if (v164 >= v110 || v118 < 8)
            {
              v122 = __dst;
              goto LABEL_172;
            }
            v130 = (char *)(v156 + 8 * v165);
            while (2)
            {
              v131 = v130 + 8;
              v133 = v121 - 8;
              v132 = *((_QWORD *)v121 - 1);
              v134 = *((_QWORD *)v113 - 1);
              v135 = *(_QWORD *)(v132 + 48);
              v136 = *(_QWORD *)(v132 + 56);
              v137 = *(_QWORD *)(v134 + 48);
              v138 = *(_QWORD *)(v134 + 56);
              v139 = v135 == v137 && v136 == v138;
              if (v139 || (_stringCompareWithSmolCheck(_:_:expecting:)(v135, v136, v137, v138, 1) & 1) == 0)
              {
                if (v131 == v121)
                {
                  v23 = v130 >= v121;
                  v121 -= 8;
                  if (!v23)
                    goto LABEL_165;
                }
                else
                {
                  v121 -= 8;
                }
              }
              else
              {
                v133 = v113 - 8;
                if (v131 == v113)
                {
                  v23 = v130 >= v113;
                  v113 -= 8;
                  if (!v23)
                    goto LABEL_165;
                }
                else
                {
                  v113 -= 8;
                }
              }
              *(_QWORD *)v130 = *(_QWORD *)v133;
LABEL_165:
              if (v112 >= v113 || (v130 -= 8, __dst >= v121))
              {
                v122 = __dst;
                goto LABEL_170;
              }
              continue;
            }
          }
          if (v115 < -7)
            goto LABEL_228;
          v10 = (uint64_t)__dst;
          if (__dst != v112 || __dst >= v113)
            memmove(__dst, v112, 8 * v117);
          v121 = &__dst[8 * v117];
          if (v110 < v165 && v115 >= 8)
          {
            v122 = __dst;
            while (1)
            {
              v123 = *(_QWORD *)(*(_QWORD *)v113 + 48);
              v124 = *(_QWORD *)(*(_QWORD *)v113 + 56);
              v125 = *(_QWORD *)(*(_QWORD *)v122 + 48);
              v126 = *(_QWORD *)(*(_QWORD *)v122 + 56);
              v127 = v123 == v125 && v124 == v126;
              if (v127 || (_stringCompareWithSmolCheck(_:_:expecting:)(v123, v124, v125, v126, 1) & 1) == 0)
                break;
              v128 = v113;
              v21 = v112 == v113;
              v113 += 8;
              if (!v21)
                goto LABEL_138;
LABEL_139:
              v112 += 8;
              if (v122 >= v121 || (unint64_t)v113 >= v114)
                goto LABEL_169;
            }
            v128 = v122;
            v21 = v112 == v122;
            v122 += 8;
            if (v21)
              goto LABEL_139;
LABEL_138:
            *(_QWORD *)v112 = *(_QWORD *)v128;
            goto LABEL_139;
          }
          v122 = __dst;
LABEL_169:
          v113 = v112;
LABEL_170:
          v129 = v164;
LABEL_172:
          v140 = v121 - v122 + 7;
          if (v121 - v122 >= 0)
            v140 = v121 - v122;
          v24 = v159;
          v26 = v157;
          if (v121 - v122 <= -8)
            goto LABEL_228;
          v141 = v140 >> 3;
          if (v113 != v122 || v113 >= &v122[8 * v141])
            memmove(v113, v122, 8 * v141);
          if (v165 < v129)
            goto LABEL_199;
          if (v163 > *((_QWORD *)v159 + 2))
            goto LABEL_200;
          *(_QWORD *)v162 = v129;
          v66 = v158;
          *(_QWORD *)&v158[16 * v107 + 8] = v165;
          v142 = *((_QWORD *)v159 + 2);
          if (v163 >= (uint64_t)v142)
            goto LABEL_201;
          v28 = v142 - 1;
          memmove(v161, v161 + 16, 16 * (v142 - 1 - v163));
          *((_QWORD *)v159 + 2) = v142 - 1;
          if (v142 <= 2)
            goto LABEL_25;
        }
      }
      v28 = 1;
      v10 = (uint64_t)__dst;
LABEL_25:
      v27 = v154;
      v25 = v155;
      if (v155 >= v154)
      {
        v2 = v152;
        if (v28 < 2)
        {
LABEL_196:
          v150 = swift_bridgeObjectRelease(v24);
          *(_QWORD *)((v166 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
          specialized Array._endMutation()(v150);
          return swift_bridgeObjectRelease(v166);
        }
LABEL_186:
        v143 = *v2;
        while (1)
        {
          v144 = v28 - 2;
          if (v28 < 2)
            break;
          if (!v143)
            goto LABEL_227;
          v145 = (char *)v10;
          v146 = *(_QWORD *)&v24[16 * v144 + 32];
          v147 = *(_QWORD *)&v24[16 * v28 + 24];
          sub_1001716E8((char *)(v143 + 8 * v146), (char *)(v143 + 8 * *(_QWORD *)&v24[16 * v28 + 16]), v143 + 8 * v147, v145);
          if (v1)
            goto LABEL_196;
          if (v147 < v146)
            goto LABEL_216;
          if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
            v24 = sub_100197EBC((uint64_t)v24);
          if (v144 >= *((_QWORD *)v24 + 2))
            goto LABEL_217;
          v148 = &v24[16 * v144 + 32];
          *(_QWORD *)v148 = v146;
          *((_QWORD *)v148 + 1) = v147;
          v149 = *((_QWORD *)v24 + 2);
          if (v28 > v149)
            goto LABEL_218;
          memmove(&v24[16 * v28 + 16], &v24[16 * v28 + 32], 16 * (v149 - v28));
          *((_QWORD *)v24 + 2) = v149 - 1;
          v28 = v149 - 1;
          v10 = (uint64_t)v145;
          if (v149 <= 2)
            goto LABEL_196;
        }
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
        __break(1u);
LABEL_229:
        LOBYTE(v151) = 2;
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, v151, 936, 0);
        __break(1u);
        return result;
      }
    }
  }
  if (v3 < 0)
    goto LABEL_222;
  if ((unint64_t)v3 >= 2)
  {
    v11 = (_QWORD *)*v2;
    v12 = -1;
    v13 = 1;
    v14 = v11;
    do
    {
      v15 = v11[v13];
      v16 = v12;
      v17 = v14;
      do
      {
        result = *(_QWORD *)(v15 + 48);
        v18 = *(_QWORD *)(v15 + 56);
        v19 = *(_QWORD *)(*v17 + 48);
        v20 = *(_QWORD *)(*v17 + 56);
        v21 = result == v19 && v18 == v20;
        if (v21)
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v18, v19, v20, 1);
        if ((result & 1) == 0)
          break;
        if (!v11)
          goto LABEL_224;
        v22 = *v17;
        v15 = v17[1];
        *v17 = v15;
        v17[1] = v22;
        --v17;
        v23 = __CFADD__(v16++, 1);
      }
      while (!v23);
      ++v13;
      ++v14;
      --v12;
    }
    while (v13 != v3);
  }
  return result;
}

void sub_10017028C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int v79;
  void (*v80)(char *, uint64_t);
  uint64_t *v81;
  Swift::Int v82;
  Swift::Int v83;
  uint64_t *v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  char *v108;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  char v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int (*v173)(uint64_t, uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char v181;
  void (*v182)(uint64_t, uint64_t);
  uint64_t v183;
  uint64_t v185;
  _QWORD *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  Swift::Int v196;
  char *v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t *v201;
  char *v202;
  uint64_t (*v203)(uint64_t, uint64_t, uint64_t);
  void (*v204)(char *, uint64_t);
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  char *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  char v222[24];
  char v223[8];
  char v224[8];
  char v225[8];
  char v226[8];
  char v227[8];
  uint64_t v228;

  v2 = sub_100146438(&qword_1002B4168);
  v3 = __chkstk_darwin(v2);
  v217 = (uint64_t)&v193 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v193 - v6;
  v8 = __chkstk_darwin(v5);
  v215 = (char *)&v193 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v193 - v11;
  v13 = __chkstk_darwin(v10);
  v207 = (uint64_t)&v193 - v14;
  v15 = __chkstk_darwin(v13);
  v206 = (uint64_t)&v193 - v16;
  v17 = __chkstk_darwin(v15);
  v200 = (char *)&v193 - v18;
  __chkstk_darwin(v17);
  v199 = (uint64_t)&v193 - v19;
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v216 = (char *)&v193 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v220 = (char *)&v193 - v25;
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v193 - v27;
  v29 = __chkstk_darwin(v26);
  v219 = (char *)&v193 - v30;
  v31 = __chkstk_darwin(v29);
  v205 = (char *)&v193 - v32;
  v33 = __chkstk_darwin(v31);
  v210 = (char *)&v193 - v34;
  v35 = __chkstk_darwin(v33);
  v198 = (char *)&v193 - v36;
  __chkstk_darwin(v35);
  v202 = (char *)&v193 - v37;
  v201 = a1;
  v38 = a1[1];
  v39 = _minimumMergeRunLength(_:)(v38);
  v218 = v20;
  v221 = v21;
  v212 = (char *)v38;
  if (v39 >= v38)
  {
    if (v38 < 0)
      goto LABEL_166;
    if ((unint64_t)v38 >= 2)
    {
      v215 = v7;
      v164 = (char *)*v201;
      v165 = -1;
      v166 = 1;
      v219 = (char *)*v201;
      v167 = v218;
      do
      {
        v211 = (char *)v166;
        v168 = *(_QWORD *)&v219[8 * v166];
        v214 = (char *)v165;
        v210 = v164;
        do
        {
          v169 = *(_QWORD *)v164;
          v170 = v168 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
          swift_beginAccess(v168 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp, v227, 0, 0);
          v171 = (uint64_t)v215;
          sub_10014BD9C(v170, (uint64_t)v215, &qword_1002B4168);
          v172 = v21;
          v173 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
          if (v173(v171, 1, v167) == 1)
          {
            swift_retain(v168);
            v174 = swift_retain(v169);
            Date.init()(v174);
            sub_10014BDE0(v171, &qword_1002B4168);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v172 + 32))(v220, v171, v167);
            swift_retain(v168);
            swift_retain(v169);
          }
          v175 = v169 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
          swift_beginAccess(v169 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp, v226, 0, 0);
          v176 = v175;
          v177 = v217;
          sub_10014BD9C(v176, v217, &qword_1002B4168);
          v178 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v173)(v177, 1, v167);
          v179 = (uint64_t)v216;
          if ((_DWORD)v178 == 1)
          {
            Date.init()(v178);
            sub_10014BDE0(v177, &qword_1002B4168);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v221 + 32))(v216, v177, v167);
          }
          v180 = v220;
          v181 = static Date.> infix(_:_:)(v220, v179);
          v182 = *(void (**)(uint64_t, uint64_t))(v221 + 8);
          v182(v179, v167);
          v182((uint64_t)v180, v167);
          v21 = v221;
          swift_release(v168);
          swift_release(v169);
          if ((v181 & 1) == 0)
            break;
          if (!v219)
            goto LABEL_170;
          v183 = *(_QWORD *)v164;
          v168 = *((_QWORD *)v164 + 1);
          *(_QWORD *)v164 = v168;
          *((_QWORD *)v164 + 1) = v183;
          v164 -= 8;
        }
        while (!__CFADD__(v165++, 1));
        v166 = (uint64_t)(v211 + 1);
        v164 = v210 + 8;
        v165 = (uint64_t)(v214 - 1);
      }
      while (v211 + 1 != v212);
    }
    return;
  }
  if (v38 >= 0)
    v40 = v38;
  else
    v40 = v38 + 1;
  if (v38 < -1)
    goto LABEL_175;
  v196 = v39;
  if (v38 < 2)
  {
    v44 = (char *)_swiftEmptyArrayStorage;
    v228 = (uint64_t)_swiftEmptyArrayStorage;
    v211 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v38 != 1)
    {
      v48 = _swiftEmptyArrayStorage[2];
LABEL_132:
      v185 = v213;
      if (v48 >= 2)
      {
        v186 = (_QWORD *)*v201;
        do
        {
          v187 = v48 - 2;
          if (v48 < 2)
            goto LABEL_161;
          if (!v186)
            goto LABEL_174;
          v155 = v44;
          v188 = *(_QWORD *)&v44[16 * v187 + 32];
          v189 = *(_QWORD *)&v44[16 * v48 + 24];
          sub_100171990((char *)&v186[v188], (char *)&v186[*(_QWORD *)&v44[16 * v48 + 16]], (char *)&v186[v189], v211);
          if (v185)
            goto LABEL_116;
          if (v189 < v188)
            goto LABEL_162;
          if ((swift_isUniquelyReferenced_nonNull_native(v155) & 1) == 0)
            v155 = sub_100197EBC((uint64_t)v155);
          if (v187 >= *((_QWORD *)v155 + 2))
            goto LABEL_163;
          v190 = &v155[16 * v187 + 32];
          *(_QWORD *)v190 = v188;
          *((_QWORD *)v190 + 1) = v189;
          v191 = *((_QWORD *)v155 + 2);
          if (v48 > v191)
            goto LABEL_164;
          memmove(&v155[16 * v48 + 16], &v155[16 * v48 + 32], 16 * (v191 - v48));
          v44 = v155;
          *((_QWORD *)v155 + 2) = v191 - 1;
          v48 = v191 - 1;
        }
        while (v191 > 2);
      }
      v163 = v44;
LABEL_144:
      v192 = swift_bridgeObjectRelease(v163);
      *(_QWORD *)((v228 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v192);
      swift_bridgeObjectRelease(v228);
      return;
    }
  }
  else
  {
    v41 = v40 >> 1;
    v42 = type metadata accessor for FTMAllMetricsModel(0);
    v43 = static Array._allocateBufferUninitialized(minimumCapacity:)(v41, v42);
    *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) = v41;
    v211 = (char *)((v43 & 0xFFFFFFFFFFFFFF8) + 32);
    v228 = v43;
  }
  v45 = 0;
  v46 = *v201;
  v195 = *v201 + 16;
  v194 = v46 - 8;
  v44 = (char *)_swiftEmptyArrayStorage;
  v216 = v12;
  v214 = v28;
  v217 = v46;
  v47 = v20;
  while (1)
  {
    v49 = (uint64_t)v45;
    v50 = (Swift::Int)(v45 + 1);
    v208 = (uint64_t)v45;
    if ((uint64_t)(v45 + 1) < v38)
    {
      v197 = v44;
      v51 = *(_QWORD *)(v46 + 8 * v50);
      v52 = *(_QWORD *)(v46 + 8 * (_QWORD)v45);
      v53 = v51 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
      swift_beginAccess(v51 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp, v225, 0, 0);
      v54 = v53;
      v55 = v199;
      sub_10014BD9C(v54, v199, &qword_1002B4168);
      v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
      v57 = v56(v55, 1, v47);
      v58 = (uint64_t)v200;
      if (v57 == 1)
      {
        swift_retain(v51);
        v59 = swift_retain(v52);
        Date.init()(v59);
        sub_10014BDE0(v55, &qword_1002B4168);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v202, v55, v47);
        swift_retain(v51);
        swift_retain(v52);
      }
      v60 = v52 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
      swift_beginAccess(v52 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp, v224, 0, 0);
      sub_10014BD9C(v60, v58, &qword_1002B4168);
      v61 = v56(v58, 1, v47);
      v62 = v198;
      if ((_DWORD)v61 == 1)
      {
        Date.init()(v61);
        sub_10014BDE0(v58, &qword_1002B4168);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v198, v58, v47);
      }
      v63 = v202;
      LODWORD(v209) = static Date.> infix(_:_:)(v202, v62);
      v64 = *(void (**)(char *, uint64_t))(v21 + 8);
      v64(v62, v47);
      v204 = v64;
      v64(v63, v47);
      swift_release(v51);
      swift_release(v52);
      v49 = v208;
      v50 = v208 + 2;
      if (v208 + 2 < v38)
      {
        v65 = (uint64_t *)(v195 + 8 * v208);
        v203 = v56;
        while (1)
        {
          v220 = (char *)v50;
          v67 = *(v65 - 1);
          v66 = *v65;
          v68 = *v65 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
          swift_beginAccess(v68, v223, 0, 0);
          v69 = v68;
          v70 = v206;
          sub_10014BD9C(v69, v206, &qword_1002B4168);
          if (v56(v70, 1, v47) == 1)
          {
            swift_retain(v66);
            v71 = swift_retain(v67);
            Date.init()(v71);
            sub_10014BDE0(v70, &qword_1002B4168);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v221 + 32))(v210, v70, v47);
            swift_retain(v66);
            swift_retain(v67);
          }
          v72 = v67 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
          swift_beginAccess(v67 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp, v222, 0, 0);
          v73 = v72;
          v74 = v207;
          sub_10014BD9C(v73, v207, &qword_1002B4168);
          v75 = v56(v74, 1, v47);
          v76 = v47;
          v77 = v205;
          if ((_DWORD)v75 == 1)
          {
            Date.init()(v75);
            sub_10014BDE0(v74, &qword_1002B4168);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v221 + 32))(v205, v74, v76);
          }
          v78 = v210;
          v79 = static Date.> infix(_:_:)(v210, v77);
          v80 = v204;
          v204(v77, v76);
          v80(v78, v76);
          swift_release(v66);
          swift_release(v67);
          v47 = v76;
          if (((v209 ^ v79) & 1) != 0)
            break;
          v50 = (Swift::Int)(v220 + 1);
          ++v65;
          v56 = v203;
          if ((char *)v38 == v220 + 1)
          {
            v50 = v38;
            goto LABEL_34;
          }
        }
        v50 = (Swift::Int)v220;
LABEL_34:
        v49 = v208;
      }
      v44 = v197;
      v46 = v217;
      if ((v209 & 1) != 0)
      {
        if (v50 < v49)
          goto LABEL_167;
        if (v49 < v50)
        {
          v81 = (uint64_t *)(v194 + 8 * v50);
          v82 = v50;
          v83 = v49;
          v84 = (uint64_t *)(v217 + 8 * v49);
          do
          {
            if (v83 != --v82)
            {
              if (!v46)
                goto LABEL_173;
              v85 = *v84;
              *v84 = *v81;
              *v81 = v85;
            }
            ++v83;
            --v81;
            ++v84;
          }
          while (v83 < v82);
        }
      }
    }
    if (v50 < v38)
    {
      if (__OFSUB__(v50, v49))
        goto LABEL_165;
      if (v50 - v49 < v196)
        break;
    }
LABEL_68:
    if (v50 < v49)
      goto LABEL_160;
    v108 = v44;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
    v220 = (char *)v50;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      v44 = v108;
    else
      v44 = sub_100197984(0, *((_QWORD *)v108 + 2) + 1, 1, v108);
    v111 = *((_QWORD *)v44 + 2);
    v110 = *((_QWORD *)v44 + 3);
    v48 = v111 + 1;
    v46 = v217;
    if (v111 >= v110 >> 1)
    {
      v162 = sub_100197984((char *)(v110 > 1), v111 + 1, 1, v44);
      v46 = v217;
      v44 = v162;
    }
    *((_QWORD *)v44 + 2) = v48;
    v112 = v44 + 32;
    v113 = &v44[16 * v111 + 32];
    v114 = v220;
    *(_QWORD *)v113 = v208;
    *((_QWORD *)v113 + 1) = v114;
    if (v111)
    {
      while (1)
      {
        v115 = v48 - 1;
        if (v48 >= 4)
        {
          v120 = &v112[16 * v48];
          v121 = *((_QWORD *)v120 - 8);
          v122 = *((_QWORD *)v120 - 7);
          v126 = __OFSUB__(v122, v121);
          v123 = v122 - v121;
          if (v126)
            goto LABEL_149;
          v125 = *((_QWORD *)v120 - 6);
          v124 = *((_QWORD *)v120 - 5);
          v126 = __OFSUB__(v124, v125);
          v118 = v124 - v125;
          v119 = v126;
          if (v126)
            goto LABEL_150;
          v127 = v48 - 2;
          v128 = &v112[16 * v48 - 32];
          v130 = *(_QWORD *)v128;
          v129 = *((_QWORD *)v128 + 1);
          v126 = __OFSUB__(v129, v130);
          v131 = v129 - v130;
          if (v126)
            goto LABEL_152;
          v126 = __OFADD__(v118, v131);
          v132 = v118 + v131;
          if (v126)
            goto LABEL_155;
          if (v132 >= v123)
          {
            v150 = &v112[16 * v115];
            v152 = *(_QWORD *)v150;
            v151 = *((_QWORD *)v150 + 1);
            v126 = __OFSUB__(v151, v152);
            v153 = v151 - v152;
            if (v126)
              goto LABEL_159;
            v143 = v118 < v153;
            goto LABEL_105;
          }
        }
        else
        {
          if (v48 != 3)
          {
            v144 = *((_QWORD *)v44 + 4);
            v145 = *((_QWORD *)v44 + 5);
            v126 = __OFSUB__(v145, v144);
            v137 = v145 - v144;
            v138 = v126;
            goto LABEL_99;
          }
          v117 = *((_QWORD *)v44 + 4);
          v116 = *((_QWORD *)v44 + 5);
          v126 = __OFSUB__(v116, v117);
          v118 = v116 - v117;
          v119 = v126;
        }
        if ((v119 & 1) != 0)
          goto LABEL_151;
        v127 = v48 - 2;
        v133 = &v112[16 * v48 - 32];
        v135 = *(_QWORD *)v133;
        v134 = *((_QWORD *)v133 + 1);
        v136 = __OFSUB__(v134, v135);
        v137 = v134 - v135;
        v138 = v136;
        if (v136)
          goto LABEL_154;
        v139 = &v112[16 * v115];
        v141 = *(_QWORD *)v139;
        v140 = *((_QWORD *)v139 + 1);
        v126 = __OFSUB__(v140, v141);
        v142 = v140 - v141;
        if (v126)
          goto LABEL_157;
        if (__OFADD__(v137, v142))
          goto LABEL_158;
        if (v137 + v142 >= v118)
        {
          v143 = v118 < v142;
LABEL_105:
          if (v143)
            v115 = v127;
          goto LABEL_107;
        }
LABEL_99:
        if ((v138 & 1) != 0)
          goto LABEL_153;
        v146 = &v112[16 * v115];
        v148 = *(_QWORD *)v146;
        v147 = *((_QWORD *)v146 + 1);
        v126 = __OFSUB__(v147, v148);
        v149 = v147 - v148;
        if (v126)
          goto LABEL_156;
        if (v149 < v137)
          goto LABEL_14;
LABEL_107:
        v154 = v115 - 1;
        if (v115 - 1 >= v48)
        {
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
          goto LABEL_169;
        }
        if (!v46)
          goto LABEL_172;
        v155 = v44;
        v156 = &v112[16 * v154];
        v157 = *(_QWORD *)v156;
        v158 = &v112[16 * v115];
        v159 = *((_QWORD *)v158 + 1);
        v160 = v213;
        sub_100171990((char *)(v46 + 8 * *(_QWORD *)v156), (char *)(v46 + 8 * *(_QWORD *)v158), (char *)(v46 + 8 * v159), v211);
        v213 = v160;
        if (v160)
        {
LABEL_116:
          v163 = v155;
          goto LABEL_144;
        }
        if (v159 < v157)
          goto LABEL_146;
        if (v115 > *((_QWORD *)v155 + 2))
          goto LABEL_147;
        *(_QWORD *)v156 = v157;
        *(_QWORD *)&v112[16 * v154 + 8] = v159;
        v161 = *((_QWORD *)v155 + 2);
        if (v115 >= v161)
          goto LABEL_148;
        v48 = v161 - 1;
        memmove(&v112[16 * v115], v158 + 16, 16 * (v161 - 1 - v115));
        v44 = v155;
        *((_QWORD *)v155 + 2) = v161 - 1;
        v47 = v218;
        v38 = (Swift::Int)v212;
        v46 = v217;
        if (v161 <= 2)
          goto LABEL_14;
      }
    }
    v48 = 1;
LABEL_14:
    v45 = v220;
    v21 = v221;
    if ((uint64_t)v220 >= v38)
      goto LABEL_132;
  }
  if (__OFADD__(v49, v196))
    goto LABEL_168;
  if (v49 + v196 >= v38)
    v86 = (void (*)(_QWORD, _QWORD))v38;
  else
    v86 = (void (*)(_QWORD, _QWORD))(v49 + v196);
  if ((uint64_t)v86 >= v49)
  {
    if ((void (*)(_QWORD, _QWORD))v50 != v86)
    {
      v197 = v44;
      v87 = (_QWORD *)(v194 + 8 * v50);
      v204 = (void (*)(char *, uint64_t))v86;
      do
      {
        v89 = *(_QWORD *)(v46 + 8 * v50);
        v90 = v208;
        v209 = v87;
        v220 = (char *)v50;
        while (1)
        {
          v91 = *v87;
          v92 = v89 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
          swift_beginAccess(v89 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp, v227, 0, 0);
          v93 = v47;
          v94 = (uint64_t)v216;
          sub_10014BD9C(v92, (uint64_t)v216, &qword_1002B4168);
          v95 = v221;
          v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v221 + 48);
          if (v96(v94, 1, v93) == 1)
          {
            swift_retain(v89);
            v97 = swift_retain(v91);
            Date.init()(v97);
            sub_10014BDE0(v94, &qword_1002B4168);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(v219, v94, v93);
            swift_retain(v89);
            swift_retain(v91);
          }
          v98 = v91 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
          swift_beginAccess(v91 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp, v226, 0, 0);
          v99 = v98;
          v100 = (uint64_t)v215;
          sub_10014BD9C(v99, (uint64_t)v215, &qword_1002B4168);
          v101 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v96)(v100, 1, v93);
          v102 = v214;
          if ((_DWORD)v101 == 1)
          {
            Date.init()(v101);
            sub_10014BDE0(v100, &qword_1002B4168);
            v103 = v221;
          }
          else
          {
            v103 = v221;
            (*(void (**)(char *, uint64_t, uint64_t))(v221 + 32))(v214, v100, v93);
          }
          v104 = v219;
          v105 = static Date.> infix(_:_:)(v219, v102);
          v106 = *(void (**)(char *, uint64_t))(v103 + 8);
          v106(v102, v93);
          v106(v104, v93);
          swift_release(v89);
          swift_release(v91);
          v47 = v93;
          if ((v105 & 1) == 0)
            break;
          v46 = v217;
          v88 = v220;
          if (!v217)
            goto LABEL_171;
          v107 = *v87;
          v89 = v87[1];
          *v87 = v89;
          v87[1] = v107;
          --v87;
          if (v88 == (char *)++v90)
            goto LABEL_55;
        }
        v46 = v217;
        v88 = v220;
LABEL_55:
        v50 = (Swift::Int)(v88 + 1);
        v87 = v209 + 1;
      }
      while ((void (*)(char *, uint64_t))v50 != v204);
      v50 = (Swift::Int)v204;
      v38 = (Swift::Int)v212;
      v44 = v197;
      v49 = v208;
    }
    goto LABEL_68;
  }
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_100171384(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = *(v12 - 2);
      v14 = *(v12 - 1);
      v15 = result == v13 && v10 == v14;
      if (v15 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100171450(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t result;
  char *v29;
  char *v30;
  char *v31;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v31 = __src;
  v30 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v19 = &v4[16 * v13];
      v29 = v19;
      v31 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v20 = (char *)(a3 - 16);
        v21 = v6;
        while (1)
        {
          v22 = v20 + 16;
          v23 = *((_QWORD *)v19 - 2);
          v24 = *((_QWORD *)v19 - 1);
          v25 = *((_QWORD *)v21 - 2);
          v26 = *((_QWORD *)v21 - 1);
          v21 -= 16;
          v27 = v23 == v25 && v24 == v26;
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 1) & 1) == 0)
          {
            v29 = v19 - 16;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
              *(_OWORD *)v20 = *((_OWORD *)v19 - 1);
            v21 = v6;
            v19 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
              *(_OWORD *)v20 = *(_OWORD *)v21;
            v31 = v21;
            if (v21 <= v7)
              goto LABEL_50;
          }
          v20 -= 16;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v29 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *((_QWORD *)v6 + 1);
        v16 = *((_QWORD *)v4 + 1);
        v17 = *(_QWORD *)v6 == *(_QWORD *)v4 && v15 == v16;
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v15, *(_QWORD *)v4, v16, 1) & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v30 = v4;
          v18 = v6;
        }
        else
        {
          v18 = v6 + 16;
          if (v7 < v6 || v7 >= v18 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v18;
      }
      while ((unint64_t)v18 < a3);
      v31 = v7;
    }
LABEL_50:
    sub_100197A7C((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001716E8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t result;
  char *v33;
  const void *v34;
  char *v35;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v35 = __src;
  v34 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v21 = &v4[8 * v13];
      v33 = v21;
      v35 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v22 = (char *)(a3 - 8);
        v23 = v6;
        while (1)
        {
          v24 = v22 + 8;
          v25 = *((_QWORD *)v21 - 1);
          v26 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          v27 = *(_QWORD *)(v25 + 48);
          v28 = *(_QWORD *)(v25 + 56);
          v29 = *(_QWORD *)(v26 + 48);
          v30 = *(_QWORD *)(v26 + 56);
          v31 = v27 == v29 && v28 == v30;
          if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v29, v30, 1) & 1) == 0)
          {
            v33 = v21 - 8;
            if (v24 < v21 || v22 >= v21 || v24 != v21)
              *(_QWORD *)v22 = *((_QWORD *)v21 - 1);
            v23 = v6;
            v21 -= 8;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v24 != v6 || v22 >= v6)
              *(_QWORD *)v22 = *(_QWORD *)v23;
            v35 = v23;
            if (v23 <= v7)
              goto LABEL_50;
          }
          v22 -= 8;
          v6 = v23;
          if (v21 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v33 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)v6 + 48);
        v16 = *(_QWORD *)(*(_QWORD *)v6 + 56);
        v17 = *(_QWORD *)(*(_QWORD *)v4 + 48);
        v18 = *(_QWORD *)(*(_QWORD *)v4 + 56);
        v19 = v15 == v17 && v16 == v18;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 1) & 1) == 0)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v34 = v4;
          v20 = v6;
        }
        else
        {
          v20 = v6 + 8;
          if (v7 < v6 || v7 >= v20 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v20;
      }
      while ((unint64_t)v20 < a3);
      v35 = v7;
    }
LABEL_50:
    sub_100197B24((void **)&v35, &v34, &v33);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100171990(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  unsigned int (*v60)(_BYTE *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char v72;
  char *v73;
  char v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  uint64_t result;
  _BYTE v78[16];
  _BYTE *v79;
  _BYTE *v80;
  char *v81;
  _BYTE *v82;
  _BYTE *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  _BYTE v92[24];
  _BYTE v93[24];
  char *v94;
  char *v95;
  char *v96;

  v8 = sub_100146438(&qword_1002B4168);
  v9 = __chkstk_darwin(v8);
  v83 = &v78[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v9);
  v82 = &v78[-v12];
  v13 = __chkstk_darwin(v11);
  v84 = &v78[-v14];
  __chkstk_darwin(v13);
  v81 = &v78[-v15];
  v88 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v88 - 8);
  v17 = __chkstk_darwin(v88);
  v80 = &v78[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v17);
  v87 = &v78[-v20];
  v21 = __chkstk_darwin(v19);
  v79 = &v78[-v22];
  __chkstk_darwin(v21);
  v85 = a3;
  v86 = &v78[-v23];
  v24 = a2 - a1;
  v25 = a2 - a1 + 7;
  if (a2 - a1 >= 0)
    v25 = a2 - a1;
  v26 = v25 >> 3;
  v27 = a2;
  v28 = a3 - a2;
  v29 = v28 / 8;
  v96 = a1;
  v95 = a4;
  v90 = v16;
  if (v25 >> 3 >= v28 / 8)
  {
    if (v28 < -7)
      goto LABEL_56;
    if (a4 != v27 || &v27[8 * v29] <= a4)
      memmove(a4, v27, 8 * v29);
    v52 = &a4[8 * v29];
    v94 = v52;
    v96 = v27;
    if (v28 < 8 || a1 >= v27)
    {
LABEL_55:
      sub_100197B24((void **)&v96, (const void **)&v95, &v94);
      return 1;
    }
    v53 = v85 - 8;
    v54 = v27;
    v81 = a4;
    v89 = a1;
    while (1)
    {
      v91 = v27;
      v86 = v52;
      v56 = *((_QWORD *)v52 - 1);
      v57 = *((_QWORD *)v54 - 1);
      v84 = v52 - 8;
      v85 = v54 - 8;
      v58 = v56 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
      swift_beginAccess(v56 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp, v93, 0, 0);
      v59 = v82;
      sub_10014BD9C(v58, (uint64_t)v82, &qword_1002B4168);
      v60 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48);
      v61 = v88;
      if (v60(v59, 1, v88) == 1)
      {
        swift_retain(v56);
        v62 = swift_retain(v57);
        Date.init()(v62);
        sub_10014BDE0((uint64_t)v59, &qword_1002B4168);
      }
      else
      {
        (*(void (**)(char *, _BYTE *, uint64_t))(v16 + 32))(v87, v59, v61);
        swift_retain(v56);
        swift_retain(v57);
      }
      v63 = v57 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
      swift_beginAccess(v57 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp, v92, 0, 0);
      v64 = v83;
      sub_10014BD9C(v63, (uint64_t)v83, &qword_1002B4168);
      v65 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v60)(v64, 1, v61);
      if ((_DWORD)v65 == 1)
      {
        v66 = v80;
        Date.init()(v65);
        sub_10014BDE0((uint64_t)v64, &qword_1002B4168);
        v67 = v90;
      }
      else
      {
        v68 = v90;
        v66 = v80;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v90 + 32))(v80, v64, v61);
        v67 = v68;
      }
      v69 = v61;
      v70 = v53 + 8;
      v71 = v87;
      v72 = static Date.> infix(_:_:)(v87, v66);
      v73 = v66;
      v74 = v72;
      v75 = *(void (**)(char *, uint64_t))(v67 + 8);
      v75(v73, v69);
      v75(v71, v69);
      swift_release(v56);
      swift_release(v57);
      if ((v74 & 1) != 0)
        break;
      v52 = v84;
      v94 = v84;
      v76 = v81;
      if (v70 < v86 || v53 >= v86)
      {
        *(_QWORD *)v53 = *(_QWORD *)v84;
        v54 = v91;
        goto LABEL_37;
      }
      v55 = v89;
      v16 = v90;
      if (v70 != v86)
        *(_QWORD *)v53 = *(_QWORD *)v84;
      v54 = v91;
      if (v52 <= v76)
        goto LABEL_55;
LABEL_38:
      v53 -= 8;
      v27 = v54;
      if (v54 <= v55)
        goto LABEL_55;
    }
    v76 = v81;
    v54 = v85;
    v52 = v86;
    if (v70 != v91 || v53 >= v91)
      *(_QWORD *)v53 = *(_QWORD *)v85;
    v96 = v54;
LABEL_37:
    v55 = v89;
    v16 = v90;
    if (v52 <= v76)
      goto LABEL_55;
    goto LABEL_38;
  }
  if (v24 >= -7)
  {
    if (a4 != a1 || &a1[8 * v26] <= a4)
      memmove(a4, a1, 8 * v26);
    v87 = &a4[8 * v26];
    v94 = v87;
    if (v24 >= 8)
    {
      v30 = v27;
      if (v27 < v85)
      {
        while (1)
        {
          v89 = a1;
          v91 = v30;
          v31 = *(_QWORD *)v30;
          v32 = *(_QWORD *)a4;
          v33 = *(_QWORD *)v30 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
          swift_beginAccess(v33, v93, 0, 0);
          v34 = v33;
          v35 = v81;
          sub_10014BD9C(v34, (uint64_t)v81, &qword_1002B4168);
          v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
          v37 = v88;
          if (v36(v35, 1, v88) == 1)
          {
            swift_retain(v31);
            v38 = swift_retain(v32);
            Date.init()(v38);
            sub_10014BDE0((uint64_t)v35, &qword_1002B4168);
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v86, v35, v37);
            swift_retain(v31);
            swift_retain(v32);
          }
          v39 = v32 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
          swift_beginAccess(v32 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp, v92, 0, 0);
          v40 = v39;
          v41 = v84;
          sub_10014BD9C(v40, (uint64_t)v84, &qword_1002B4168);
          v42 = ((uint64_t (*)(char *, uint64_t, uint64_t))v36)(v41, 1, v37);
          v43 = v79;
          if ((_DWORD)v42 == 1)
          {
            Date.init()(v42);
            sub_10014BDE0((uint64_t)v41, &qword_1002B4168);
          }
          else
          {
            (*(void (**)(_BYTE *, char *, uint64_t))(v16 + 32))(v79, v41, v37);
          }
          v44 = v16;
          v45 = v37;
          v46 = v86;
          v47 = static Date.> infix(_:_:)(v86, v43);
          v48 = *(void (**)(char *, uint64_t))(v44 + 8);
          v48(v43, v45);
          v48(v46, v45);
          swift_release(v31);
          swift_release(v32);
          if ((v47 & 1) != 0)
          {
            v49 = v91 + 8;
            v50 = v89;
            if (v89 >= v91 && v89 < v49)
            {
              v16 = v90;
              if (v89 != v91)
                *(_QWORD *)v89 = *(_QWORD *)v91;
              goto LABEL_26;
            }
            *(_QWORD *)v89 = *(_QWORD *)v91;
          }
          else
          {
            v50 = v89;
            v51 = v91;
            if (v89 != a4)
              *(_QWORD *)v89 = *(_QWORD *)a4;
            a4 += 8;
            v95 = a4;
            v49 = v51;
          }
          v16 = v90;
LABEL_26:
          a1 = v50 + 8;
          v96 = a1;
          if (a4 < v87)
          {
            v30 = v49;
            if (v49 < v85)
              continue;
          }
          goto LABEL_55;
        }
      }
    }
    goto LABEL_55;
  }
LABEL_56:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_1001720DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[32];
  uint64_t v39;
  _BYTE v40[24];

  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  if ((*(_BYTE *)(qword_1002BF068 + 152) & 1) == 0)
  {
    v0 = *(int *)(qword_1002BF068 + 148);
    if (qword_1002B3A80 != -1)
      swift_once(&qword_1002B3A80, sub_100184F00);
    v1 = *(_QWORD *)(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_currentSelectedSubsId);
    if (v1 != v0)
    {
      v2 = qword_1002BF068;
      swift_beginAccess(qword_1002BF068 + 80, v38, 0, 0);
      if (*(_QWORD *)(*(_QWORD *)(v2 + 80) + 16) >= 2uLL)
      {
        if (v1 < (uint64_t)0xFFFFFFFF80000000)
        {
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
        if (v1 > 0x7FFFFFFF)
        {
LABEL_70:
          __break(1u);
          swift_release(v39);
          __break(1u);
          return;
        }
        *(_DWORD *)(v2 + 148) = v1;
        *(_BYTE *)(v2 + 152) = 0;
        sub_100183E88();
      }
    }
  }
  if ((*(_BYTE *)(qword_1002BF068 + 152) & 1) != 0)
    return;
  v3 = *(int *)(qword_1002BF068 + 148);
  if (qword_1002B3A80 != -1)
    swift_once(&qword_1002B3A80, sub_100184F00);
  v4 = (uint64_t *)(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
  swift_beginAccess(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray, v40, 0, 0);
  v5 = *v4;
  v39 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v12 = v5;
    else
      v12 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v12);
    if (v6)
    {
LABEL_16:
      if (v6 < 1)
      {
        __break(1u);
        goto LABEL_68;
      }
      for (i = 0; i != v6; ++i)
      {
        if ((v5 & 0xC000000000000001) != 0)
        {
          v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
        }
        else
        {
          v8 = *(_QWORD *)(v5 + 8 * i + 32);
          swift_retain(v8);
        }
        if (*(_QWORD *)(v8 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_subsId) == v3
          && (*(_BYTE *)(v8 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_isVisible) & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v9 = *(_QWORD *)(v39 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
          v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v8);
          specialized ContiguousArray._endMutation()(v10);
        }
        else
        {
          swift_release(v8);
        }
      }
      swift_bridgeObjectRelease(v5);
      v11 = v39;
      if (v39 < 0)
        goto LABEL_64;
      goto LABEL_33;
    }
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v5);
    if (v6)
      goto LABEL_16;
  }
  swift_bridgeObjectRelease(v5);
  v11 = (uint64_t)_swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_64;
LABEL_33:
  if ((v11 & 0x4000000000000000) != 0)
  {
LABEL_64:
    v36 = swift_retain(v11);
    v13 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_release(v11);
    if (!v13)
      goto LABEL_65;
    goto LABEL_35;
  }
  v13 = *(_QWORD *)(v11 + 16);
  if (!v13)
  {
LABEL_65:
    swift_release(v11);
    return;
  }
LABEL_35:
  if (v13 < 1)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  swift_retain(v11);
  v14 = 0;
  v15 = _swiftEmptyArrayStorage;
  do
  {
    if ((v11 & 0xC000000000000001) != 0)
    {
      v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v11);
    }
    else
    {
      v16 = *(_QWORD *)(v11 + 8 * v14 + 32);
      swift_retain(v16);
    }
    v18 = *(_QWORD *)(v16 + 32);
    v17 = *(_QWORD *)(v16 + 40);
    swift_bridgeObjectRetain(v17);
    swift_release(v16);
    if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
      v15 = sub_1001C7118(0, v15[2] + 1, 1, v15);
    v20 = v15[2];
    v19 = v15[3];
    if (v20 >= v19 >> 1)
      v15 = sub_1001C7118((_QWORD *)(v19 > 1), v20 + 1, 1, v15);
    ++v14;
    v15[2] = v20 + 1;
    v21 = &v15[2 * v20];
    v21[4] = v18;
    v21[5] = v17;
  }
  while (v13 != v14);
  swift_release_n(v11, 2);
  v22 = sub_10016A0CC((uint64_t)v15);
  swift_bridgeObjectRelease(v15);
  v23 = sub_1001955E8(v22);
  swift_bridgeObjectRelease(v22);
  v39 = (uint64_t)v23;
  swift_retain(v23);
  sub_10016F09C(&v39);
  swift_release(v23);
  v24 = v39;
  v25 = *(_QWORD *)(v39 + 16);
  if (v25)
  {
    v26 = (_QWORD *)(v39 + 40);
    v27 = _swiftEmptyArrayStorage;
    v37 = v39;
    do
    {
      v31 = *(v26 - 1);
      v32 = *v26;
      v33 = v31 == 5521746 && v32 == 0xE300000000000000;
      if (!v33
        && (_stringCompareWithSmolCheck(_:_:expecting:)(*(v26 - 1), *v26, 5521746, 0xE300000000000000, 0) & 1) == 0)
      {
        v34 = v31 == 1129531725 && v32 == 0xE400000000000000;
        if (!v34
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, 1129531725, 0xE400000000000000, 0) & 1) == 0)
        {
          swift_bridgeObjectRetain(v32);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
          v39 = (uint64_t)v27;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100195A34(0, v27[2] + 1, 1);
            v24 = v37;
            v27 = (_QWORD *)v39;
          }
          v29 = v27[2];
          v28 = v27[3];
          if (v29 >= v28 >> 1)
          {
            sub_100195A34(v28 > 1, v29 + 1, 1);
            v24 = v37;
            v27 = (_QWORD *)v39;
          }
          v27[2] = v29 + 1;
          v30 = &v27[2 * v29];
          v30[4] = v31;
          v30[5] = v32;
        }
      }
      v26 += 2;
      --v25;
    }
    while (v25);
  }
  swift_release(v24);
}

uint64_t sub_10017263C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  id v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  _BYTE v59[24];

  v9 = a5 & 1;
  v10 = sub_100146438(&qword_1002B5400);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AllMetricsViewModel();
  v14 = sub_100146004(&qword_1002B51D8, (uint64_t (*)(uint64_t))type metadata accessor for AllMetricsViewModel, (uint64_t)&unk_100242998);
  v15 = StateObject.wrappedValue.getter(a3, a4, v9, v13, v14);
  if ((a1 != 0x544C20726568744FLL || a2 != 0xEF73646E61422045)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x544C20726568744FLL, 0xEF73646E61422045, 0) & 1) == 0)
  {
    v16 = *(_QWORD *)(v15 + 48);
    v54 = *(_QWORD *)(v16 + 16);
    if (v54)
    {
      v49 = v15;
      v53 = v16 + 32;
      swift_bridgeObjectRetain(v16);
      v17 = 0;
      v51 = a1;
      v52 = a2;
      v50 = v16;
      while (v17 < *(_QWORD *)(v16 + 16))
      {
        v19 = (_QWORD *)(v53 + 24 * v17);
        v20 = v19[1];
        v21 = v19[2];
        v22 = *v19 == a1 && v20 == a2;
        if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v19[1], a1, a2, 0) & 1) != 0)
        {
          v23 = *(_QWORD *)(v21 + 16);
          v56 = v21;
          if (v23)
          {
            v24 = type metadata accessor for AllMetricsRowItem(0);
            v25 = *(_QWORD *)(v24 - 8);
            v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
            v55 = v20;
            v27 = v21;
            v28 = v21 + v26;
            v29 = *(_QWORD *)(v25 + 72);
            swift_bridgeObjectRetain(v55);
            v30 = v27;
            v20 = v55;
            swift_bridgeObjectRetain(v30);
            do
            {
              sub_10017417C(v28, (uint64_t)v12, type metadata accessor for AllMetricsRowItem);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v12, 0, 1, v24);
              sub_10014BDE0((uint64_t)v12, &qword_1002B5400);
              v28 += v29;
              --v23;
            }
            while (v23);
          }
          else
          {
            swift_bridgeObjectRetain(v20);
            swift_bridgeObjectRetain(v21);
          }
          v18 = type metadata accessor for AllMetricsRowItem(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v12, 1, 1, v18);
          swift_bridgeObjectRelease(v56);
          swift_bridgeObjectRelease(v20);
          a1 = v51;
          a2 = v52;
          v16 = v50;
        }
        if (++v17 == v54)
        {
          swift_release(v49);
          swift_bridgeObjectRelease(v16);
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_29:
      swift_once(&qword_1002B3A80, sub_100184F00);
      goto LABEL_21;
    }
  }
  swift_release(v15);
LABEL_20:
  if (qword_1002B3A80 != -1)
    goto LABEL_29;
LABEL_21:
  v31 = (uint64_t *)(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricDetailsClassObject);
  swift_beginAccess(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricDetailsClassObject, v59, 0, 0);
  v32 = *v31;
  if (!*(_QWORD *)(v32 + 16))
  {
LABEL_25:
    v38 = type metadata accessor for FTMMetricDetailsClass(0);
    v35 = swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    v58[0] = _swiftEmptyArrayStorage;
    v39 = sub_100146438(&qword_1002B5408);
    Published.init(initialValue:)(v58, v39);
    KeyPath = swift_getKeyPath(&unk_100241CA8);
    v41 = swift_getKeyPath(&unk_100241CD0);
    v58[0] = _swiftEmptyArrayStorage;
    swift_retain(v35);
    static Published.subscript.setter(v58, v35, KeyPath, v41);
    v42 = (void *)qword_1002BF070;
    v43 = (_QWORD *)(qword_1002BF070
                   + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricDetailsClassObject);
    swift_beginAccess(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricDetailsClassObject, v58, 33, 0);
    swift_bridgeObjectRetain(a2);
    swift_retain(v35);
    v44 = v42;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v43);
    v57 = *v43;
    *v43 = 0x8000000000000000;
    sub_1001C975C(v35, a1, a2, isUniquelyReferenced_nonNull_native);
    v46 = *v43;
    *v43 = v57;
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v46);
    swift_endAccess(v58);

    return v35;
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v32);
  v33 = sub_1001C7C98(a1, a2);
  if ((v34 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v32);
    goto LABEL_25;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v33);
  swift_retain(v35);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v32);
  v36 = swift_getKeyPath(&unk_100241CA8);
  v37 = swift_getKeyPath(&unk_100241CD0);
  v58[0] = _swiftEmptyArrayStorage;
  swift_retain(v35);
  static Published.subscript.setter(v58, v35, v36, v37);
  return v35;
}

uint64_t sub_100172B20()
{
  uint64_t v0;

  return sub_10016C868(*(_QWORD *)(v0 + 16), *(__int128 **)(v0 + 24));
}

uint64_t sub_100172B28(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1001464C4(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100172B8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B53A0;
  if (!qword_1002B53A0)
  {
    v1 = sub_1001464C4(&qword_1002B53A8);
    sub_100172C04();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B53A0);
  }
  return result;
}

unint64_t sub_100172C04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B53B0;
  if (!qword_1002B53B0)
  {
    v1 = sub_1001464C4(&qword_1002B53B8);
    sub_100172C88();
    sub_10014BEC0(&qword_1002B53C8, &qword_1002B53D0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B53B0);
  }
  return result;
}

unint64_t sub_100172C88()
{
  unint64_t result;

  result = qword_1002B53C0;
  if (!qword_1002B53C0)
  {
    result = swift_getWitnessTable(&unk_100241D0C, &type metadata for FTMMonitorDetailedPageView);
    atomic_store(result, (unint64_t *)&qword_1002B53C0);
  }
  return result;
}

uint64_t sub_100172CD0()
{
  uint64_t *v0;

  sub_10016B25C(v0[2], v0[3]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100172D00()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1002B53DC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_10016A798;
  return sub_10016CB38(v0 + 16);
}

uint64_t sub_100172D4C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  sub_10016B25C(v0[3], v0[4]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

unint64_t *sub_100172D84(unint64_t *a1)
{
  uint64_t v1;

  return sub_10016C978(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100172D90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10016CA4C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t destroy for FTMMonitorDetailedPageView(_QWORD *a1)
{
  swift_release(*a1);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t initializeWithCopy for FTMMonitorDetailedPageView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  v4 = a2[3];
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for FTMMonitorDetailedPageView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t *assignWithTake for FTMMonitorDetailedPageView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  v5 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for FTMMonitorDetailedPageView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FTMMonitorDetailedPageView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FTMMonitorDetailedPageView()
{
  return &type metadata for FTMMonitorDetailedPageView;
}

uint64_t sub_100172F60()
{
  return sub_10014BEC0(&qword_1002B5410, &qword_1002B5418, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_100172F8C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100246D40, 1);
}

void sub_100172F9C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  Swift::String v5;
  Swift::String v6;
  void *object;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  int v72;
  Swift::String v73;
  void *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  Swift::String v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129[6];
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;

  v118 = a2;
  if (qword_1002B3A80 != -1)
LABEL_25:
    swift_once(&qword_1002B3A80, sub_100184F00);
  objc_msgSend(*(id *)(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock), "lock", v118);
  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  v2 = (unint64_t)_swiftEmptyArrayStorage;
  v3 = (uint64_t)_swiftEmptyArrayStorage;
  if ((*(_BYTE *)(qword_1002BF068 + 152) & 1) != 0)
    goto LABEL_35;
  v4 = *(_DWORD *)(qword_1002BF068 + 148);
  v132 = a1;
  v133 = v118;
  swift_bridgeObjectRetain(v118);
  v5._countAndFlagsBits = 126;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v129[0] = v4;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v9 = v132;
  v8 = v133;
  v10 = (uint64_t *)(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
  swift_beginAccess(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray, v129, 0, 0);
  v11 = *v10;
  v132 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v29 = v11;
    else
      v29 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v12 = _CocoaArrayWrapper.endIndex.getter(v29);
    if (v12)
      goto LABEL_7;
  }
  else
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v11);
    if (v12)
    {
LABEL_7:
      v13 = 0;
      v14 = v11 & 0xC000000000000001;
      v15 = v11 & 0xFFFFFFFFFFFFFF8;
      v126 = v12;
      while (1)
      {
        if (v14)
        {
          v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
          v17 = v13 + 1;
          if (__OFADD__(v13, 1))
          {
LABEL_22:
            __break(1u);
LABEL_23:
            v3 = v132;
            v2 = (unint64_t)_swiftEmptyArrayStorage;
            goto LABEL_31;
          }
        }
        else
        {
          if (v13 >= *(_QWORD *)(v15 + 16))
          {
            __break(1u);
            goto LABEL_25;
          }
          v16 = *(_QWORD *)(v11 + 8 * v13 + 32);
          swift_retain(v16);
          v17 = v13 + 1;
          if (__OFADD__(v13, 1))
            goto LABEL_22;
        }
        v18 = *(_QWORD *)(v16 + 16);
        v19 = *(_QWORD *)(v16 + 24);
        v20 = v18 == v9 && v19 == v8;
        if ((v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v9, v8, 0) & 1) != 0)
          && *(_BYTE *)(v16 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_isVisible) == 1)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v21 = v9;
          v22 = v8;
          v23 = v15;
          v24 = v14;
          v25 = v11;
          v26 = *(_QWORD *)(v132 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v26);
          v27 = v26;
          v11 = v25;
          v14 = v24;
          v15 = v23;
          v8 = v22;
          v9 = v21;
          v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v16);
          specialized ContiguousArray._endMutation()(v28);
          v12 = v126;
        }
        else
        {
          swift_release(v16);
        }
        ++v13;
        if (v17 == v12)
          goto LABEL_23;
      }
    }
  }
  v3 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_31:
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v8);
  if (v3 < 0 || (v3 & 0x4000000000000000) != 0)
    goto LABEL_147;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_34:
    swift_release(v3);
    v3 = (uint64_t)_swiftEmptyArrayStorage;
  }
LABEL_35:
  v134 = v2;
  if ((unint64_t)v3 >> 62)
    goto LABEL_115;
  v30 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v3);
  if (v30)
  {
LABEL_37:
    v31 = 0;
    v121 = v30;
    v32 = v3 & 0xC000000000000001;
    v33 = v3 & 0xFFFFFFFFFFFFFF8;
    if (v3 < 0)
      v33 = v3;
    v120 = v33;
    while (1)
    {
      if (v32)
      {
        v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v3);
        v35 = __OFADD__(v31++, 1);
        if (v35)
          goto LABEL_111;
      }
      else
      {
        if (v31 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_112;
        v34 = *(_QWORD *)(v3 + 32 + 8 * v31);
        swift_retain(v34);
        v35 = __OFADD__(v31++, 1);
        if (v35)
          goto LABEL_111;
      }
      v36 = *(_QWORD *)(v34 + 48);
      v37 = *(_QWORD *)(v34 + 56);
      v38 = *(_QWORD *)(v2 + 16);
      if (!v38)
        break;
      v39 = *(_QWORD *)(v2 + 32);
      v40 = *(_QWORD *)(v2 + 40);
      v41 = v39 == v36 && v40 == v37;
      if (v41
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, *(_QWORD *)(v34 + 48), *(_QWORD *)(v34 + 56), 0) & 1) != 0)
      {
        goto LABEL_40;
      }
      if (v38 == 1)
        break;
      if ((v64 = *(_QWORD *)(v2 + 48), v65 = *(_QWORD *)(v2 + 56), v64 == v36) && v65 == v37
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v64, v65, v36, v37, 0) & 1) != 0)
      {
LABEL_40:
        swift_release(v34);
      }
      else
      {
        if (v38 == 2)
          break;
        v42 = (_QWORD *)v2;
        v2 += 72;
        v66 = 2;
        while (1)
        {
          if (__OFADD__(v66, 1))
            goto LABEL_114;
          v67 = *(_QWORD *)(v2 - 8);
          v68 = *(_QWORD *)v2;
          if (v67 == v36 && v68 == v37)
            break;
          v124 = v66 + 1;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v67, v68, v36, v37, 0) & 1) != 0)
            break;
          v2 += 16;
          ++v66;
          if (v124 == v38)
            goto LABEL_56;
        }
        swift_release(v34);
        v2 = (unint64_t)v42;
      }
LABEL_41:
      if (v31 == v121)
        goto LABEL_119;
    }
    v42 = (_QWORD *)v2;
LABEL_56:
    swift_bridgeObjectRetain(v37);
    if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
      v42 = sub_1001C7118(0, v38 + 1, 1, v42);
    v44 = v42[2];
    v43 = v42[3];
    v123 = v42;
    if (v44 >= v43 >> 1)
      v123 = sub_1001C7118((_QWORD *)(v43 > 1), v44 + 1, 1, v42);
    v123[2] = v44 + 1;
    v45 = &v123[2 * v44];
    v45[4] = v36;
    v45[5] = v37;
    v132 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v3 >> 62)
    {
      swift_bridgeObjectRetain(v3);
      swift_retain(v34);
      v46 = _CocoaArrayWrapper.endIndex.getter(v120);
      if (v46)
      {
LABEL_64:
        v2 = 0;
        do
        {
          if (v32)
          {
            v49 = specialized _ArrayBuffer._getElementSlowPath(_:)(v2, v3);
            v50 = v2 + 1;
            if (__OFADD__(v2, 1))
              goto LABEL_109;
          }
          else
          {
            if (v2 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_110;
            v49 = *(_QWORD *)(v3 + 8 * v2 + 32);
            swift_retain(v49);
            v50 = v2 + 1;
            if (__OFADD__(v2, 1))
            {
LABEL_109:
              __break(1u);
LABEL_110:
              __break(1u);
LABEL_111:
              __break(1u);
LABEL_112:
              __break(1u);
LABEL_113:
              __break(1u);
LABEL_114:
              __break(1u);
LABEL_115:
              if (v3 < 0)
                v71 = v3;
              else
                v71 = v3 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain_n(v3, 2);
              v30 = _CocoaArrayWrapper.endIndex.getter(v71);
              swift_bridgeObjectRelease(v3);
              if (!v30)
                goto LABEL_119;
              goto LABEL_37;
            }
          }
          v51 = *(_QWORD *)(v49 + 48);
          v52 = *(_QWORD *)(v49 + 56);
          v53 = *(_QWORD *)(v34 + 48);
          v54 = *(_QWORD *)(v34 + 56);
          v55 = v51 == v53 && v52 == v54;
          if (v55 || (_stringCompareWithSmolCheck(_:_:expecting:)(v51, v52, v53, v54, 0) & 1) != 0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            v47 = *(_QWORD *)(v132 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v47);
            v48 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v49);
            specialized ContiguousArray._endMutation()(v48);
          }
          else
          {
            swift_release(v49);
          }
          ++v2;
        }
        while (v50 != v46);
      }
    }
    else
    {
      v46 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v3);
      swift_retain(v34);
      if (v46)
        goto LABEL_64;
    }
    v56 = v132;
    swift_bridgeObjectRelease(v3);
    swift_release(v34);
    swift_bridgeObjectRetain(v56);
    if ((v56 & 0x8000000000000000) != 0 || (v2 = v56, (v56 & 0x4000000000000000) != 0))
    {
      v2 = (unint64_t)sub_1001956CC(v56);
      swift_release(v56);
    }
    v132 = v2;
    sub_10016F104(&v132);
    swift_release(v56);
    v57 = v132;
    if (v132 < 0 || (v132 & 0x4000000000000000) != 0)
    {
      v70 = swift_bridgeObjectRetain(v132);
      v2 = _CocoaArrayWrapper.endIndex.getter(v70);
      swift_release(v57);
      if (v2)
        goto LABEL_84;
    }
    else if (*(_QWORD *)(v132 + 16))
    {
LABEL_84:
      if ((v57 & 0xC000000000000001) != 0)
      {
        v58 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v57);
      }
      else
      {
        if (!*(_QWORD *)(v57 + 16))
          goto LABEL_113;
        v58 = *(_QWORD *)(v57 + 32);
        swift_retain(v58);
      }
      swift_release(v57);
      v59 = swift_retain(v58);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v59);
      v61 = *(_QWORD *)((v134 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v60 = *(_QWORD *)((v134 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v61 >= v60 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
      v62 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v61, v58);
      specialized Array._endMutation()(v62);
      swift_release(v34);
      v63 = v58;
      goto LABEL_107;
    }
    swift_release(v34);
    v63 = v57;
LABEL_107:
    swift_release(v63);
    v2 = (unint64_t)v123;
    goto LABEL_41;
  }
LABEL_119:
  swift_bridgeObjectRelease_n(v3, 2);
  v125 = v2;
  if ((a1 != 0x544C20726568744FLL || v118 != 0xEF73646E61422045)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a1, v118, 0x544C20726568744FLL, 0xEF73646E61422045, 0) & 1) == 0)
  {
    goto LABEL_144;
  }
  if ((*(_BYTE *)(qword_1002BF068 + 152) & 1) != 0)
    goto LABEL_166;
  v72 = *(_DWORD *)(qword_1002BF068 + 148);
  v132 = 2118472780;
  v133 = 0xE400000000000000;
  LODWORD(v130) = v72;
  v73._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  v74 = v73._object;
  String.append(_:)(v73);
  swift_bridgeObjectRelease(v74);
  v3 = v132;
  v2 = v133;
  v75 = (uint64_t *)(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
  swift_beginAccess(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray, &v132, 0, 0);
  v76 = *v75;
  v130 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v76 >> 62)
  {
    if (v76 < 0)
      v95 = v76;
    else
      v95 = v76 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v76);
    v77 = _CocoaArrayWrapper.endIndex.getter(v95);
    if (!v77)
    {
LABEL_153:
      v92 = (unint64_t)_swiftEmptyArrayStorage;
      goto LABEL_154;
    }
  }
  else
  {
    v77 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v76);
    if (!v77)
      goto LABEL_153;
  }
  v78 = 0;
  v79 = &OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_isVisible;
  v127 = v3;
  v122 = v2;
  do
  {
    if ((v76 & 0xC000000000000001) != 0)
    {
      v80 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v78, v76);
      v81 = v78 + 1;
      if (__OFADD__(v78, 1))
      {
LABEL_143:
        __break(1u);
LABEL_144:
        v91 = v134;
        goto LABEL_192;
      }
    }
    else
    {
      if (v78 >= *(_QWORD *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_147:
        v93 = swift_bridgeObjectRetain(v3);
        v94 = _CocoaArrayWrapper.endIndex.getter(v93);
        swift_release(v3);
        if (!v94)
          goto LABEL_34;
        goto LABEL_35;
      }
      v80 = *(_QWORD **)(v76 + 8 * v78 + 32);
      swift_retain(v80);
      v81 = v78 + 1;
      if (__OFADD__(v78, 1))
        goto LABEL_143;
    }
    v82 = v80[2];
    v83 = v80[3];
    v84 = v82 == v3 && v83 == v2;
    if ((v84 || (_stringCompareWithSmolCheck(_:_:expecting:)(v82, v83, v3, v2, 0) & 1) != 0)
      && *((_BYTE *)v80 + *v79) == 1
      && ((v85 = v80[6], v86 = v80[7], v85 == 1684955458) && v86 == 0xE400000000000000
       || (_stringCompareWithSmolCheck(_:_:expecting:)(v85, v86, 1684955458, 0xE400000000000000, 0) & 1) != 0))
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v87 = v79;
      v88 = *(_QWORD *)(v130 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v88);
      v89 = v88;
      v79 = v87;
      v90 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v89, v80);
      specialized ContiguousArray._endMutation()(v90);
      v2 = v122;
      v3 = v127;
    }
    else
    {
      swift_release(v80);
    }
    ++v78;
  }
  while (v81 != v77);
  v92 = v130;
LABEL_154:
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v92);
  if ((v92 & 0x8000000000000000) != 0 || (v96 = (_QWORD *)v92, (v92 & 0x4000000000000000) != 0))
  {
    v96 = sub_1001956CC(v92);
    swift_release(v92);
  }
  v130 = (uint64_t)v96;
  sub_10016F104(&v130);
  swift_release(v92);
  v97 = v130;
  if (v130 < 0 || (v130 & 0x4000000000000000) != 0)
  {
    v104 = swift_bridgeObjectRetain(v130);
    v105 = _CocoaArrayWrapper.endIndex.getter(v104);
    swift_release(v97);
    if (!v105)
      goto LABEL_165;
LABEL_159:
    if ((v97 & 0xC000000000000001) != 0)
    {
      v98 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v97);
    }
    else
    {
      if (!*(_QWORD *)(v97 + 16))
      {
        __break(1u);
        swift_release(v132);
        __break(1u);
        swift_release(v130);
        __break(1u);
        return;
      }
      v98 = *(_QWORD *)(v97 + 32);
      swift_retain(v98);
    }
    swift_release(v97);
    v130 = 0x20646E6142;
    v131 = 0xE500000000000000;
    v99 = *(_QWORD *)(v98 + 112);
    v100 = *(void **)(v98 + 120);
    swift_bridgeObjectRetain(v100);
    v101._countAndFlagsBits = v99;
    v101._object = v100;
    String.append(_:)(v101);
    swift_release(v98);
    swift_bridgeObjectRelease(v100);
    v103 = v130;
    v102 = v131;
    goto LABEL_167;
  }
  if (*(_QWORD *)(v130 + 16))
    goto LABEL_159;
LABEL_165:
  swift_release(v97);
LABEL_166:
  v103 = 0;
  v102 = 0xE000000000000000;
LABEL_167:
  v106 = v134;
  v130 = (uint64_t)_swiftEmptyArrayStorage;
  if (v134 >> 62)
    goto LABEL_186;
  v107 = *(_QWORD *)((v134 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v134);
  if (v107)
  {
LABEL_169:
    v108 = 0;
    v128 = v103;
    while (1)
    {
      if ((v106 & 0xC000000000000001) != 0)
      {
        v109 = specialized _ArrayBuffer._getElementSlowPath(_:)(v108, v106);
        v110 = v108 + 1;
        if (__OFADD__(v108, 1))
        {
LABEL_183:
          __break(1u);
LABEL_184:
          v91 = v130;
          goto LABEL_191;
        }
      }
      else
      {
        if (v108 >= *(_QWORD *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_186:
          if (v106 < 0)
            v116 = v106;
          else
            v116 = v106 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v106);
          v107 = _CocoaArrayWrapper.endIndex.getter(v116);
          if (!v107)
            break;
          goto LABEL_169;
        }
        v109 = *(_QWORD *)(v106 + 8 * v108 + 32);
        swift_retain(v109);
        v110 = v108 + 1;
        if (__OFADD__(v108, 1))
          goto LABEL_183;
      }
      v111 = *(_QWORD *)(v109 + 48);
      v112 = *(_QWORD *)(v109 + 56);
      v113 = v111 == v103 && v112 == v102;
      if (v113 || (_stringCompareWithSmolCheck(_:_:expecting:)(v111, v112, v103, v102, 0) & 1) != 0)
      {
        swift_release(v109);
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v114 = *(_QWORD *)(v130 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v114);
        v115 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v114, v109);
        specialized ContiguousArray._endMutation()(v115);
        v103 = v128;
      }
      ++v108;
      if (v110 == v107)
        goto LABEL_184;
    }
  }
  v91 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_191:
  swift_bridgeObjectRelease(v106);
  swift_bridgeObjectRelease(v106);
  v134 = v91;
  swift_bridgeObjectRelease(v102);
LABEL_192:
  objc_msgSend(*(id *)(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock), "unlock");
  if ((v91 & 0x8000000000000000) != 0 || (v91 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n(v91, 2);
    v117 = (uint64_t)sub_1001956CC(v91);
    swift_bridgeObjectRelease(v91);
  }
  else
  {
    v117 = v91 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v91, 2);
  }
  v130 = v117;
  sub_10016F17C(&v130);
  swift_bridgeObjectRelease(v125);
  swift_bridgeObjectRelease(v91);
  swift_bridgeObjectRelease(v134);
}

uint64_t sub_100173D28()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

double sub_100173D5C@<D0>(unint64_t *a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return sub_10016DEC0(a1, v4[2], v4[3], v4[4], v4[5], v4[6], a2, a3, a4);
}

uint64_t sub_100173D6C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  if (a5)
  {
    v8 = result;
    swift_retain(a6);
    swift_retain(v8);
    swift_retain(a4);
    return swift_retain(a5);
  }
  return result;
}

double sub_100173DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double result;

  if (a5)
  {
    swift_release(a5);
    swift_release(a1);
    swift_release(a4);
    *(_QWORD *)&result = swift_release(a6).n128_u64[0];
  }
  return result;
}

double destroy for FTMGraphButton(_QWORD *a1)
{
  double result;

  swift_release(*a1);
  *(_QWORD *)&result = swift_release(a1[3]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for FTMGraphButton(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v5 = a2[3];
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for FTMGraphButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v6 = a1[3];
  v7 = a2[3];
  a1[3] = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

uint64_t *assignWithTake for FTMGraphButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v5 = a1[3];
  a1[3] = a2[3];
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for FTMGraphButton(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FTMGraphButton(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FTMGraphButton()
{
  return &type metadata for FTMGraphButton;
}

unint64_t sub_100173FFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B5430;
  if (!qword_1002B5430)
  {
    v1 = sub_1001464C4(&qword_1002B5438);
    sub_10014BEC0(&qword_1002B5428, &qword_1002B5420, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B5430);
  }
  return result;
}

uint64_t sub_100174078(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100246D68, 1);
}

double sub_10017408C()
{
  uint64_t v0;

  return sub_10016E5D0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1001740A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001740CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10016E6A0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1001740DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B5460;
  if (!qword_1002B5460)
  {
    v1 = sub_1001464C4(&qword_1002B5468);
    sub_100146004(&qword_1002B5470, type metadata accessor for FTMCellMonitorBookmarkedSheetView, (uint64_t)&unk_100240340);
    sub_10014BEC0(&qword_1002B5478, &qword_1002B5480, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B5460);
  }
  return result;
}

uint64_t sub_10017417C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001741C0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FTMCellMonitorBookmarkedSheetView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001741FC()
{
  _QWORD v1[4];

  v1[0] = sub_1001464C4(&qword_1002B5440);
  v1[1] = sub_1001464C4(&qword_1002B5448);
  v1[2] = sub_10014BEC0(&qword_1002B5450, &qword_1002B5440, (uint64_t)&protocol conformance descriptor for Button<A>);
  v1[3] = sub_100172B28(&qword_1002B5458, &qword_1002B5448, (void (*)(void))sub_1001740DC, (uint64_t)&protocol conformance descriptor for <A> A?);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
}

Swift::Int sub_1001742A4(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0xD000000000000027;
    else
      v2 = 0xD00000000000001FLL;
    if (a1 == 1)
      v3 = 0x800000010020FFD0;
    else
      v3 = 0x8000000100210000;
  }
  else
  {
    v2 = 0xD000000000000021;
    v3 = 0x800000010020FFA0;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100174348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  Class isa;
  id v10;
  Class v11;
  unint64_t v12;
  NSString v13;
  Class v14;
  id v15;
  uint64_t v16;
  uint64_t v18;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TimeZone(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  static TimeZone.autoupdatingCurrent.getter();
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  objc_msgSend(v8, "setTimeZone:", isa);

  v10 = objc_msgSend((id)objc_opt_self(NSLocale), "currentLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)();

  v11 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v8, "setLocale:", v11);

  if (sub_1001757E8())
    v12 = 0xEF7A7A2073733A6DLL;
  else
    v12 = 0x8000000100211E20;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v8, "setDateFormat:", v13);

  v14 = Date._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v8, "stringFromDate:", v14);

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  return v16;
}

void sub_1001745A0()
{
  id v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "bundleIdentifier");

  if (!v1)
  {
    v2 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
    v1 = objc_msgSend(v2, "processName");

  }
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v5 = v4;

  qword_1002B5488 = v3;
  unk_1002B5490 = v5;
}

uint64_t sub_100174664(uint64_t a1)
{
  return sub_1001746AC(a1, 0x69752D707061, 0xE600000000000000, &qword_1002BEFD0);
}

uint64_t sub_100174680(uint64_t a1)
{
  return sub_1001746AC(a1, 0x722D63697274656DLL, 0xEE00646574616C65, &qword_1002BEFD8);
}

uint64_t sub_1001746AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  sub_1001548C8(0, &qword_1002B54B0, OS_os_log_ptr);
  if (qword_1002B39D8 != -1)
    swift_once(&qword_1002B39D8, sub_1001745A0);
  v7 = qword_1002B5488;
  v8 = unk_1002B5490;
  swift_bridgeObjectRetain(unk_1002B5490);
  result = OS_os_log.init(subsystem:category:)(v7, v8, a2, a3);
  *a4 = result;
  return result;
}

uint64_t sub_100174754(uint64_t a1)
{
  return sub_1001746AC(a1, 0xD000000000000010, 0x8000000100211E60, &qword_1002BEFE0);
}

uint64_t sub_100174778(uint64_t a1)
{
  return sub_1001746AC(a1, 0x6C6172656E6567, 0xE700000000000000, &qword_1002BEFE8);
}

uint64_t sub_100174798(uint64_t a1)
{
  return sub_1001746AC(a1, 0x72616F6268736164, 0xE900000000000064, &qword_1002BEFF0);
}

uint64_t sub_1001747BC(uint64_t a1)
{
  return sub_1001746AC(a1, 0x697274656D6C6C61, 0xEA00000000007363, &qword_1002BEFF8);
}

uint64_t sub_1001747E0(uint64_t a1)
{
  return sub_1001746AC(a1, 0x732D63697274656DLL, 0xEE00656369767265, &qword_1002BF000);
}

uint64_t sub_10017480C(uint64_t a1)
{
  return sub_1001746AC(a1, 0x6573616261746164, 0xE800000000000000, &qword_1002BF008);
}

uint64_t sub_10017482C(uint64_t a1)
{
  return sub_1001746AC(a1, 0x654463697274656DLL, 0xEC0000006C696174, &qword_1002BF010);
}

uint64_t sub_100174854(uint64_t a1)
{
  return sub_1001746AC(a1, 0xD000000000000015, 0x8000000100211E80, (uint64_t *)&off_1002BF018);
}

unint64_t AnalyticsInteractionTypes.rawValue.getter(char a1)
{
  if (!a1)
    return 0xD000000000000021;
  if (a1 == 1)
    return 0xD000000000000027;
  return 0xD00000000000001FLL;
}

uint64_t sub_1001748D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100166E34(*a1, *a2);
}

Swift::Int sub_1001748E4()
{
  char *v0;

  return sub_1001742A4(*v0);
}

uint64_t sub_1001748EC(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_100166FEC(a1, *v1);
}

Swift::Int sub_1001748F4(uint64_t a1)
{
  char *v1;

  return sub_1001670E4(a1, *v1);
}

unint64_t sub_1001748FC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s13FTMInternal_425AnalyticsInteractionTypesO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100174928@<X0>(unint64_t *a1@<X8>)
{
  char *v1;
  unint64_t result;
  unint64_t v4;

  result = AnalyticsInteractionTypes.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Void __swiftcall AnalyticsManager.sendAnalytics(interactionType:payload:)(FTMInternal_4::AnalyticsInteractionTypes interactionType, Swift::OpaquePointer payload)
{
  unint64_t v2;
  NSString v3;
  Class isa;

  if (interactionType)
  {
    if (interactionType == FTMInternal_4_AnalyticsInteractionTypes_slicingTest)
      v2 = 0x800000010020FFD0;
    else
      v2 = 0x8000000100210000;
  }
  else
  {
    v2 = 0x800000010020FFA0;
  }
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  sub_1001548C8(0, (unint64_t *)&qword_1002B60C0, NSObject_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  AnalyticsSendEvent(v3, isa);

}

uint64_t sub_100174A34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  Class isa;
  id v10;
  Class v11;
  unint64_t v12;
  NSString v13;
  Class v14;
  id v15;
  uint64_t v16;
  uint64_t v18;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TimeZone(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  static TimeZone.autoupdatingCurrent.getter();
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  objc_msgSend(v8, "setTimeZone:", isa);

  v10 = objc_msgSend((id)objc_opt_self(NSLocale), "currentLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)();

  v11 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v8, "setLocale:", v11);

  if (sub_1001757E8())
    v12 = 0x8000000100211E00;
  else
    v12 = 0x8000000100211E40;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v8, "setDateFormat:", v13);

  v14 = Date._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v8, "stringFromDate:", v14);

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  return v16;
}

Swift::String __swiftcall FTMDateFactory.configureDateFormat(for:)(FTMInternal_4::FormatType a1)
{
  int v2;
  Swift::String result;

  v2 = sub_1001757E8();
  if (v2)
  {
    if (v2 == 1)
      __asm { BR              X10 }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
  return result;
}

uint64_t sub_100174D34()
{
  return 0x6D3A4848202C4545;
}

uint64_t sub_100174D58()
{
  return 0x73733A6D6D3A4848;
}

uint64_t sub_100174D74()
{
  return 0x73733A6D6D3A4848;
}

void sub_100174D94()
{
  JUMPOUT(0x100174DB4);
}

uint64_t sub_100174DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = a1;
  if (qword_1002B3A78 != -1)
    a1 = swift_once(&qword_1002B3A78, sub_100183CA4);
  if (*(_BYTE *)(qword_1002BF068 + 24) == 1)
  {
    if (qword_1002B39E8 != -1)
      a1 = swift_once(&qword_1002B39E8, sub_100174680);
    v8 = qword_1002BEFD8;
    v9 = static os_log_type_t.default.getter(a1, a2, a3, a4);
    v10 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v11 = swift_allocObject(v10, 152, 7);
    *(_OWORD *)(v11 + 16) = xmmword_100242000;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    v12 = sub_10016B1E0();
    *(_QWORD *)(v11 + 32) = v7;
    *(_QWORD *)(v11 + 40) = a2;
    *(_QWORD *)(v11 + 96) = &type metadata for String;
    *(_QWORD *)(v11 + 104) = v12;
    *(_QWORD *)(v11 + 64) = v12;
    *(_QWORD *)(v11 + 72) = a3;
    *(_QWORD *)(v11 + 80) = a4;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    *(_QWORD *)(v11 + 136) = &type metadata for String;
    *(_QWORD *)(v11 + 144) = v12;
    *(_QWORD *)(v11 + 112) = v13;
    *(_QWORD *)(v11 + 120) = v14;
    os_log(_:dso:log:type:_:)("marker: %{public}s, metricName: %{public}s, dictionaryCount: %{public}@", 71, 2, &_mh_execute_header, v8, v9, v11);
  }
  else
  {
    if (qword_1002B39E8 != -1)
      a1 = swift_once(&qword_1002B39E8, sub_100174680);
    v15 = qword_1002BEFD8;
    v16 = static os_log_type_t.default.getter(a1, a2, a3, a4);
    v17 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v11 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_1002402A0;
    v18 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v20 = v19;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 64) = sub_10016B1E0();
    *(_QWORD *)(v11 + 32) = v18;
    *(_QWORD *)(v11 + 40) = v20;
    os_log(_:dso:log:type:_:)("dCount: %{public}@", 18, 2, &_mh_execute_header, v15, v16, v11);
  }
  return swift_bridgeObjectRelease(v11);
}

BOOL static FormatType.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void FormatType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int _s13FTMInternal_418UserTimePreferenceO9hashValueSivg_0(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

NSString sub_100175074()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static NSNotificationName.NewABMMetric = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.NewABMMetric.unsafeMutableAddressor()
{
  if (qword_1002B3A30 != -1)
    swift_once(&qword_1002B3A30, sub_100175074);
  return &static NSNotificationName.NewABMMetric;
}

id static NSNotificationName.NewABMMetric.getter()
{
  return sub_100175474(&qword_1002B3A30, (id *)&static NSNotificationName.NewABMMetric);
}

NSString sub_100175108()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static NSNotificationName.NewCTMetric = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.NewCTMetric.unsafeMutableAddressor()
{
  if (qword_1002B3A38 != -1)
    swift_once(&qword_1002B3A38, sub_100175108);
  return &static NSNotificationName.NewCTMetric;
}

id static NSNotificationName.NewCTMetric.getter()
{
  return sub_100175474(&qword_1002B3A38, (id *)&static NSNotificationName.NewCTMetric);
}

NSString sub_10017519C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static NSNotificationName.carrierUpdate = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.carrierUpdate.unsafeMutableAddressor()
{
  if (qword_1002B3A40 != -1)
    swift_once(&qword_1002B3A40, sub_10017519C);
  return &static NSNotificationName.carrierUpdate;
}

id static NSNotificationName.carrierUpdate.getter()
{
  return sub_100175474(&qword_1002B3A40, (id *)&static NSNotificationName.carrierUpdate);
}

NSString sub_100175234()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static NSNotificationName.subsIdSelectionChange = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.subsIdSelectionChange.unsafeMutableAddressor()
{
  if (qword_1002B3A48 != -1)
    swift_once(&qword_1002B3A48, sub_100175234);
  return &static NSNotificationName.subsIdSelectionChange;
}

id static NSNotificationName.subsIdSelectionChange.getter()
{
  return sub_100175474(&qword_1002B3A48, (id *)&static NSNotificationName.subsIdSelectionChange);
}

NSString sub_1001752C4()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static NSNotificationName.numberOfSubsChanged = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.numberOfSubsChanged.unsafeMutableAddressor()
{
  if (qword_1002B3A50 != -1)
    swift_once(&qword_1002B3A50, sub_1001752C4);
  return &static NSNotificationName.numberOfSubsChanged;
}

id static NSNotificationName.numberOfSubsChanged.getter()
{
  return sub_100175474(&qword_1002B3A50, (id *)&static NSNotificationName.numberOfSubsChanged);
}

NSString sub_100175354()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static NSNotificationName.dashboardMetricUpdate = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.dashboardMetricUpdate.unsafeMutableAddressor()
{
  if (qword_1002B3A58 != -1)
    swift_once(&qword_1002B3A58, sub_100175354);
  return &static NSNotificationName.dashboardMetricUpdate;
}

id static NSNotificationName.dashboardMetricUpdate.getter()
{
  return sub_100175474(&qword_1002B3A58, (id *)&static NSNotificationName.dashboardMetricUpdate);
}

NSString sub_1001753E4()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static NSNotificationName.isAirPlaneModeEnabled = (uint64_t)result;
  return result;
}

uint64_t *NSNotificationName.isAirPlaneModeEnabled.unsafeMutableAddressor()
{
  if (qword_1002B3A60 != -1)
    swift_once(&qword_1002B3A60, sub_1001753E4);
  return &static NSNotificationName.isAirPlaneModeEnabled;
}

id static NSNotificationName.isAirPlaneModeEnabled.getter()
{
  return sub_100175474(&qword_1002B3A60, (id *)&static NSNotificationName.isAirPlaneModeEnabled);
}

id sub_100175474(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t sub_1001754AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;

  v33 = a1;
  v1 = type metadata accessor for Calendar(0);
  v34 = *(_QWORD *)(v1 - 8);
  v2 = v34;
  v35 = v1;
  __chkstk_darwin(v1);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100146438(&qword_1002B4168);
  v6 = __chkstk_darwin(v5);
  v36 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - v8;
  v10 = sub_100146438(&qword_1002B54B8);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100146438((uint64_t *)&unk_1002B54C0);
  __chkstk_darwin(v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DateComponents(0);
  v31 = *(_QWORD *)(v16 - 8);
  v32 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v21);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
  v25 = v35;
  v24(v15, 1, 1, v35);
  v26 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v12, 1, 1, v26);
  v27 = v15;
  v28 = (uint64_t)v36;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v27, v12, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  v29 = DateComponents.day.setter(30, 0);
  static Calendar.current.getter(v29);
  Calendar.date(byAdding:to:wrappingComponents:)(v18, v23, 0);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v4, v25);
  sub_100159C2C((uint64_t)v9, v28);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v28, 1, v19);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_100159C74((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v32);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v33, v28, v19);
  }
  return result;
}

uint64_t sub_1001757E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  NSString v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (void *)objc_opt_self(NSDateFormatter);
  v5 = String._bridgeToObjectiveC()();
  static Locale.current.getter();
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7 = objc_msgSend(v4, "dateFormatFromTemplate:options:locale:", v5, 0, isa);

  if (!v7)
    return 2;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v16 = v8;
  v17 = v10;
  v14 = 97;
  v15 = 0xE100000000000000;
  v11 = sub_10014654C();
  if ((StringProtocol.contains<A>(_:)(&v14, &type metadata for String, &type metadata for String, v11, v11) & 1) != 0)
  {
    swift_bridgeObjectRelease(v10);
    return 0;
  }
  v16 = v8;
  v17 = v10;
  v14 = 18504;
  v15 = 0xE200000000000000;
  v13 = StringProtocol.contains<A>(_:)(&v14, &type metadata for String, &type metadata for String, v11, v11);
  swift_bridgeObjectRelease(v10);
  if ((v13 & 1) != 0)
    return 1;
  else
    return 2;
}

unint64_t _s13FTMInternal_425AnalyticsInteractionTypesO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100260600, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_1001759C0()
{
  unint64_t result;

  result = qword_1002B5498;
  if (!qword_1002B5498)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AnalyticsInteractionTypes, &type metadata for AnalyticsInteractionTypes);
    atomic_store(result, (unint64_t *)&qword_1002B5498);
  }
  return result;
}

unint64_t sub_100175A08()
{
  unint64_t result;

  result = qword_1002B54A0;
  if (!qword_1002B54A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FormatType, &type metadata for FormatType);
    atomic_store(result, (unint64_t *)&qword_1002B54A0);
  }
  return result;
}

unint64_t sub_100175A50()
{
  unint64_t result;

  result = qword_1002B54A8;
  if (!qword_1002B54A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UserTimePreference, &type metadata for UserTimePreference);
    atomic_store(result, (unint64_t *)&qword_1002B54A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsInteractionTypes()
{
  return &type metadata for AnalyticsInteractionTypes;
}

ValueMetadata *type metadata accessor for AnalyticsManager()
{
  return &type metadata for AnalyticsManager;
}

uint64_t storeEnumTagSinglePayload for FormatType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100175B08 + 4 * byte_100241E01[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100175B3C + 4 * byte_100241DFC[v4]))();
}

uint64_t sub_100175B3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100175B44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100175B4CLL);
  return result;
}

uint64_t sub_100175B58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100175B60);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100175B64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100175B6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormatType()
{
  return &type metadata for FormatType;
}

uint64_t _s13FTMInternal_425AnalyticsInteractionTypesOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100175BD4 + 4 * byte_100241E0B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100175C08 + 4 * byte_100241E06[v4]))();
}

uint64_t sub_100175C08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100175C10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100175C18);
  return result;
}

uint64_t sub_100175C24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100175C2CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100175C30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100175C38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserTimePreference()
{
  return &type metadata for UserTimePreference;
}

ValueMetadata *type metadata accessor for FTMDateFactory()
{
  return &type metadata for FTMDateFactory;
}

uint64_t sub_100175C64(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a1;
  v12 = a2;
  v9 = 0x2D6E6F6974636573;
  v10 = 0xE800000000000000;
  v4 = sub_10014654C();
  if ((StringProtocol.contains<A>(_:)(&v9, &type metadata for String, &type metadata for String, v4, v4) & 1) == 0)
    return 0;
  v11 = a1;
  v12 = a2;
  v9 = 45;
  v10 = 0xE100000000000000;
  v5 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v9, &type metadata for String, &type metadata for String, v4, v4);
  v6 = v5;
  if (!v5[2])
  {
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v7 = v5[4];
  swift_bridgeObjectRetain(v5[5]);
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t sub_100175D60(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v3 = v2;
  v6 = sub_100146438(&qword_1002B4AB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for STransferMetrics(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_10014BDE0(a1, &qword_1002B4AB0);
    v13 = sub_1001C7C68(a2);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      v17 = *v3;
      v24 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1001CA178();
        v17 = v24;
      }
      sub_10015FF74(*(_QWORD *)(v17 + 56) + *(_QWORD *)(v10 + 72) * v15, (uint64_t)v8);
      sub_1001D5758(v15, v17);
      v18 = *v3;
      *v3 = v17;
      swift_bridgeObjectRelease(v18);
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v19, 1, v9);
    return sub_10014BDE0((uint64_t)v8, &qword_1002B4AB0);
  }
  else
  {
    sub_10015FF74(a1, (uint64_t)v12);
    v20 = swift_isUniquelyReferenced_nonNull_native(*v3);
    v24 = *v3;
    *v3 = 0x8000000000000000;
    sub_1001C9640((uint64_t)v12, a2, v20);
    v21 = *v3;
    *v3 = v24;
    return swift_bridgeObjectRelease(v21);
  }
}

uint64_t sub_100175F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;
  _OWORD v11[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_10017F278((_OWORD *)a1, v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    *v3 = 0x8000000000000000;
    sub_1001C98B8(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_10014BDE0(a1, (uint64_t *)&unk_1002B5670);
    sub_10017D0A4(a2, a3, v11);
    swift_bridgeObjectRelease(a3);
    return sub_10014BDE0((uint64_t)v11, (uint64_t *)&unk_1002B5670);
  }
}

uint64_t sub_100175FFC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10017F278((_OWORD *)a1, v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v7 = *v2;
    *v2 = 0x8000000000000000;
    sub_1001C99E8(v8, a2, isUniquelyReferenced_nonNull_native);
    v5 = *v2;
    *v2 = v7;
    swift_bridgeObjectRelease(v5);
    return sub_10017F3E8(a2);
  }
  else
  {
    sub_10014BDE0(a1, (uint64_t *)&unk_1002B5670);
    sub_10017D194(a2, v8);
    sub_10017F3E8(a2);
    return sub_10014BDE0((uint64_t)v8, (uint64_t *)&unk_1002B5670);
  }
}

char *sub_1001760B8(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  id v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **aBlock;
  uint64_t v61;
  uint64_t (*v62)();
  void *v63;
  void *v64;
  uint64_t v65;
  objc_super v66;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v58 = *(_QWORD *)(v4 - 8);
  v59 = v4;
  __chkstk_darwin(v4);
  v55 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  __chkstk_darwin(v6);
  v54 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for DispatchTime(0);
  v49 = *(_QWORD *)(v52 - 8);
  v8 = __chkstk_darwin(v52);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v48 = (char *)&v47 - v11;
  v12 = OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client;
  sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  v13 = v1;
  v14 = (void *)static OS_dispatch_queue.main.getter(v13);
  v15 = objc_msgSend(objc_allocWithZone((Class)CoreTelephonyClient), "initWithQueue:", v14);

  *(_QWORD *)&v1[v12] = v15;
  v16 = OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_hManager;
  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  v17 = qword_1002BF068;
  *(_QWORD *)&v13[v16] = qword_1002BF068;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray] = _swiftEmptyArrayStorage;
  v13[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_isSimAdded] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_persistanceStore] = a1;
  swift_retain(v17);
  v53 = a1;

  v66.receiver = v13;
  v66.super_class = ObjectType;
  v18 = (char *)objc_msgSendSuper2(&v66, "init");
  v50 = OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client;
  v51 = v18;
  v19 = *(void **)&v18[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client];
  v20 = v18;
  v21 = objc_msgSend(v19, "setDelegate:", v20);
  if (qword_1002B3A28 != -1)
    v21 = (id)swift_once(&qword_1002B3A28, sub_100174854);
  v25 = off_1002BF018;
  v26 = static os_log_type_t.default.getter(v21, v22, v23, v24);
  v27 = os_log(_:dso:log:type:_:)("CoreTelephonyService - init", 27, 2, &_mh_execute_header, v25, v26, _swiftEmptyArrayStorage);
  v28 = (void *)static OS_dispatch_queue.main.getter(v27);
  static DispatchTime.now()();
  v29 = v48;
  + infix(_:_:)(v10, 5.0);
  v49 = *(_QWORD *)(v49 + 8);
  v30 = v52;
  ((void (*)(char *, uint64_t))v49)(v10, v52);
  v31 = swift_allocObject(&unk_100264638, 24, 7);
  *(_QWORD *)(v31 + 16) = v20;
  v64 = sub_10017CEFC;
  v65 = v31;
  aBlock = _NSConcreteStackBlock;
  v61 = 1107296256;
  v62 = sub_1001BE428;
  v63 = &unk_100264650;
  v32 = _Block_copy(&aBlock);
  v33 = v65;
  v34 = v20;
  swift_release(v33);
  v35 = v54;
  static DispatchQoS.unspecified.getter(v36);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v37 = sub_10017CF34();
  v38 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v39 = sub_10014BEC0((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0, (uint64_t)&protocol conformance descriptor for [A]);
  v40 = v55;
  v41 = v38;
  v42 = v59;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v41, v39, v59, v37);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v29, v35, v40, v32);
  _Block_release(v32);

  (*(void (**)(char *, uint64_t))(v58 + 8))(v40, v42);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v57);
  ((void (*)(char *, uint64_t))v49)(v29, v30);
  v43 = *(void **)&v51[v50];
  v44 = swift_allocObject(&unk_100264688, 24, 7);
  swift_unknownObjectWeakInit(v44 + 16, v34);
  v64 = sub_10017CFA0;
  v65 = v44;
  aBlock = _NSConcreteStackBlock;
  v61 = 1107296256;
  v62 = sub_1001780B8;
  v63 = &unk_1002646A0;
  v45 = _Block_copy(&aBlock);
  objc_msgSend(v43, "getSubscriptionInfo:", v45, swift_release(v65).n128_f64[0]);
  _Block_release(v45);

  return v34;
}

void sub_10017656C()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v2 = swift_allocObject(&unk_100264C00, 24, 7);
  *(_QWORD *)(v2 + 16) = v0;
  v7[4] = sub_10017F3E0;
  v8 = v2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1001BC218;
  v7[3] = &unk_100264C18;
  v3 = _Block_copy(v7);
  v4 = v8;
  v5 = v0;
  v6 = objc_msgSend(v1, "addObserverForName:object:queue:usingBlock:", UIApplicationDidBecomeActiveNotification, 0, 0, v3, swift_release(v4).n128_f64[0]);
  _Block_release(v3);
  swift_unknownObjectRelease(v6);

}

id sub_100176678()
{
  void *v0;
  objc_class *ObjectType;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  static String._unconditionallyBridgeFromObjectiveC(_:)(UIApplicationDidBecomeActiveNotification);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v2, "removeObserver:", v5);

  v7.receiver = v0;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, "dealloc");
}

void sub_100176848(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Strong;
  _BYTE *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char **v26;
  id v27;
  void *v28;
  unint64_t v29;
  unsigned __int8 v30;
  id v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  int64x2_t *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  char **v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  char *v68;
  id v69;
  id v70;
  void *v71;
  uint64_t v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t inited;
  uint64_t v78;
  unint64_t v79;
  Class isa;
  uint64_t v81;
  void *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  int64x2_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];
  char v97[8];
  char v98[104];
  uint64_t aBlock;
  unint64_t v100;
  uint64_t (*v101)();
  void *v102;
  void *v103;
  uint64_t v104;
  char v105[24];
  char v106[24];
  char v107[32];

  if (a2)
  {
    swift_getErrorValue(a2, v97, v96);
    v3 = Error.localizedDescription.getter(v96[1], v96[2]);
    v7 = v3;
    v8 = v4;
    if (qword_1002B3A28 != -1)
      goto LABEL_33;
    goto LABEL_3;
  }
  if (!a1)
    return;
  v15 = objc_msgSend(a1, "subscriptions");
  if (!v15)
    return;
  v16 = v15;
  v17 = a3 + 16;
  v18 = sub_1001548C8(0, &qword_1002B5600, CTXPCServiceSubscriptionContext_ptr);
  v94 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v18);

  swift_beginAccess(v17, v107, 0, 0);
  v87 = v17;
  Strong = swift_unknownObjectWeakLoadStrong(v17);
  if (!Strong)
  {
    v13 = v94;
    goto LABEL_4;
  }
  v20 = (_BYTE *)Strong;
  v21 = (_QWORD *)(Strong + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray);
  swift_beginAccess(Strong + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray, v106, 1, 0);
  v22 = *v21;
  v83 = v21;
  *v21 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v22);
  if ((unint64_t)v94 >> 62)
  {
    if (v94 < 0)
      v42 = v94;
    else
      v42 = v94 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v94);
    v23 = _CocoaArrayWrapper.endIndex.getter(v42);
    swift_bridgeObjectRelease(v94);
    v88 = v20;
    if (v23)
      goto LABEL_11;
LABEL_38:
    v7 = 0;
LABEL_39:
    swift_bridgeObjectRelease(v94);
    v86 = OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_hManager;
    if (*(_QWORD *)(*(_QWORD *)&v20[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_hManager] + 160) != v7)
      v20[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_isSimAdded] = 1;
    v43 = *v83;
    v44 = *(_QWORD *)(*v83 + 16);
    if (v44)
    {
      swift_bridgeObjectRetain(*v83);
      v45 = 48;
      do
      {
        if (v7 == 1)
        {
          v46 = *(_QWORD *)(v43 + v45);
          if (qword_1002B3A78 != -1)
            swift_once(&qword_1002B3A78, sub_100183CA4);
          v47 = qword_1002BF068;
          if ((*(_BYTE *)(qword_1002BF068 + 152) & 1) == 0 && (v46 != 1) != (uint64_t)*(int *)(qword_1002BF068 + 148))
          {
            *(_DWORD *)(qword_1002BF068 + 148) = v46 != 1;
            *(_BYTE *)(v47 + 152) = 0;
            sub_100183E88();
          }
        }
        v45 += 88;
        --v44;
      }
      while (v44);
      swift_bridgeObjectRelease(v43);
      v20 = v88;
    }
    v48 = *(_QWORD *)&v20[v86];
    *(_QWORD *)(v48 + 160) = v7;
    v49 = (void *)objc_opt_self(NSNotificationCenter);
    swift_retain(v48);
    v50 = objc_msgSend(v49, "defaultCenter");
    if (qword_1002B3A50 != -1)
      swift_once(&qword_1002B3A50, sub_1001752C4);
    objc_msgSend(v50, "postNotificationName:object:userInfo:", static NSNotificationName.numberOfSubsChanged, 0, 0);
    swift_release(v48);

    v51 = *v83;
    v52 = *(_QWORD *)(*v83 + 16);
    if (v52)
    {
      v82 = v49;
      v84 = OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client;
      swift_bridgeObjectRetain(v51);
      swift_beginAccess(v87, v105, 0, 0);
      v81 = v51;
      v53 = (uint64_t *)(v51 + 112);
      v54 = &selRef_setEhplmnLists_;
      do
      {
        v55 = *(v53 - 8);
        v56 = *(v53 - 5);
        v57 = *(v53 - 3);
        v58 = *(v53 - 2);
        v60 = *(v53 - 1);
        v59 = *v53;
        v95 = *(v53 - 9);
        swift_bridgeObjectRetain(v95);
        v93 = v56;
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v57);
        v91 = v58;
        swift_bridgeObjectRetain(v58);
        v90 = v60;
        swift_bridgeObjectRetain(v60);
        swift_bridgeObjectRetain(v59);
        sub_100177230(v55);
        if (*(_BYTE *)(*(_QWORD *)&v20[v86] + 26) == 1)
          sub_100177854(v55);
        v61 = objc_msgSend(objc_allocWithZone((Class)CTXPCServiceSubscriptionContext), v54[324], v55);
        v62 = *(void **)&v20[v84];
        v63 = v54;
        v64 = swift_allocObject(&unk_100264688, 24, 7);
        swift_unknownObjectWeakInit(v64 + 16, v20);
        v65 = swift_allocObject(&unk_1002646D8, 32, 7);
        *(_QWORD *)(v65 + 16) = v55;
        *(_QWORD *)(v65 + 24) = v64;
        v103 = sub_10017CFA8;
        v104 = v65;
        aBlock = (uint64_t)_NSConcreteStackBlock;
        v100 = 1107296256;
        v101 = sub_1001780B8;
        v102 = &unk_1002646F0;
        v66 = _Block_copy(&aBlock);
        objc_msgSend(v62, "copyCellInfo:completion:", v61, v66, swift_release(v104).n128_f64[0]);
        _Block_release(v66);

        v67 = swift_unknownObjectWeakLoadStrong(v87);
        if (v67)
        {
          v68 = (char *)v67;
          v69 = objc_msgSend(objc_allocWithZone((Class)CTXPCServiceSubscriptionContext), v63[324], v55);
          v70 = objc_msgSend((id)objc_opt_self(CTServiceDescriptor), "descriptorWithSubscriptionContext:", v69);
          v71 = *(void **)&v68[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client];
          v72 = swift_allocObject(&unk_100264728, 32, 7);
          *(_QWORD *)(v72 + 16) = sub_100177C1C;
          *(_QWORD *)(v72 + 24) = 0;
          v103 = sub_10017CFB0;
          v104 = v72;
          aBlock = (uint64_t)_NSConcreteStackBlock;
          v100 = 1107296256;
          v101 = sub_1001780B8;
          v102 = &unk_100264740;
          v73 = _Block_copy(&aBlock);
          objc_msgSend(v71, "getSignalStrengthMeasurements:completion:", v70, v73, swift_release(v104).n128_f64[0]);
          v20 = v88;
          _Block_release(v73);

          swift_bridgeObjectRelease(v59);
          swift_bridgeObjectRelease(v90);
          swift_bridgeObjectRelease(v91);
          swift_bridgeObjectRelease(v57);
          swift_bridgeObjectRelease(v93);
          swift_bridgeObjectRelease(v95);

        }
        else
        {
          swift_bridgeObjectRelease(v59);
          swift_bridgeObjectRelease(v90);
          swift_bridgeObjectRelease(v91);
          swift_bridgeObjectRelease(v57);
          swift_bridgeObjectRelease(v93);
          swift_bridgeObjectRelease(v95);
        }
        v53 += 11;
        --v52;
        v54 = &selRef_setEhplmnLists_;
      }
      while (v52);
      swift_bridgeObjectRelease(v81);
      v49 = v82;
    }
    v74 = objc_msgSend(v49, "defaultCenter");
    if (qword_1002B3A40 != -1)
      swift_once(&qword_1002B3A40, sub_10017519C);
    v75 = static NSNotificationName.carrierUpdate;
    v76 = sub_100146438(&qword_1002B5608);
    inited = swift_initStackObject(v76, v98);
    *(_OWORD *)(inited + 16) = xmmword_1002402A0;
    aBlock = 0x7372656972726163;
    v100 = 0xE800000000000000;
    AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
    v78 = *v83;
    *(_QWORD *)(inited + 96) = sub_100146438((uint64_t *)&unk_1002B5610);
    *(_QWORD *)(inited + 72) = v78;
    swift_bridgeObjectRetain(v78);
    v79 = sub_1001BE664(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v79);
    objc_msgSend(v74, "postNotificationName:object:userInfo:", v75, 0, isa);

    return;
  }
  v23 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFF8) + 0x10);
  v88 = v20;
  if (!v23)
    goto LABEL_38;
LABEL_11:
  if (v23 < 1)
  {
    __break(1u);
    return;
  }
  v7 = 0;
  v24 = 0;
  v25 = v94 & 0xC000000000000001;
  v26 = &selRef_setEhplmnLists_;
  v89 = vdupq_n_s64((unint64_t)_swiftEmptyArrayStorage);
  v85 = v23;
  while (1)
  {
    v27 = v25
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v94)
        : *(id *)(v94 + 8 * v24 + 32);
    v28 = v27;
    if ((objc_msgSend(v27, v26[321]) & 1) != 0)
      break;

LABEL_14:
    if (v23 == ++v24)
      goto LABEL_39;
  }
  if (objc_msgSend(v28, "slotID") == (id)1)
    v29 = 0x8000000100212110;
  else
    v29 = 0x80000001002120F0;
  v92 = objc_msgSend(v28, "slotID");
  v30 = objc_msgSend(v28, v26[321]);
  v31 = objc_msgSend(v28, "phoneNumber");
  if (v31)
  {
    v32 = v31;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v35 = v34;

  }
  else
  {
    v33 = 0;
    v35 = 0xE000000000000000;
  }
  swift_beginAccess(v83, &aBlock, 33, 0);
  v36 = (_QWORD *)*v83;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v83);
  *v83 = v36;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v36 = sub_1001C7224(0, v36[2] + 1, 1, v36);
    *v83 = v36;
  }
  v39 = v36[2];
  v38 = v36[3];
  v8 = v39 + 1;
  if (v39 >= v38 >> 1)
  {
    v36 = sub_1001C7224((_QWORD *)(v38 > 1), v39 + 1, 1, v36);
    *v83 = v36;
  }
  v36[2] = v8;
  v40 = (int64x2_t *)&v36[11 * v39];
  v40[2].i64[0] = 0;
  v40[2].i64[1] = 0xE000000000000000;
  v40[3].i64[0] = (uint64_t)v92;
  v40[3].i8[8] = v30;
  v40[4].i64[0] = 0xD000000000000010;
  v40[4].i64[1] = v29;
  v40[5].i64[0] = v33;
  v40[5].i64[1] = v35;
  v40[6] = v89;
  v40[7].i64[0] = (uint64_t)_swiftEmptyArrayStorage;
  swift_endAccess(&aBlock);

  if (!__OFADD__(v7++, 1))
  {
    v20 = v88;
    v25 = v94 & 0xC000000000000001;
    v23 = v85;
    v26 = &selRef_setEhplmnLists_;
    goto LABEL_14;
  }
  __break(1u);
LABEL_33:
  v3 = swift_once(&qword_1002B3A28, sub_100174854);
LABEL_3:
  v9 = off_1002BF018;
  v10 = static os_log_type_t.default.getter(v3, v4, v5, v6);
  v11 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_1002402A0;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = sub_10016B1E0();
  *(_QWORD *)(v12 + 32) = v7;
  *(_QWORD *)(v12 + 40) = v8;
  os_log(_:dso:log:type:_:)("CoreTelephonyService - fetchCarrierSubscriptions error: %{public}s ", 67, 2, &_mh_execute_header, v9, v10, v12);
  v13 = v12;
LABEL_4:
  swift_bridgeObjectRelease(v13);
}

void sub_100177230(uint64_t a1)
{
  char *v1;
  char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  NSString v12;
  id v13;
  id v14;
  id v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  _BOOL4 v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t inited;
  uint64_t v55;
  unint64_t v56;
  Class isa;
  void *v58;
  char *v59;
  _UNKNOWN **v60;
  _QWORD v61[3];
  char v62[16];
  uint64_t v63;
  unint64_t v64;
  char v65[104];
  id v66[3];

  v3 = (char *)objc_msgSend(objc_allocWithZone((Class)CTBundle), "initWithBundleType:", 1);
  v4 = objc_msgSend(objc_allocWithZone((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", a1);
  v8 = (unint64_t)v4;
  if (qword_1002B3A28 != -1)
    goto LABEL_49;
  while (1)
  {
    v9 = off_1002BF018;
    v10 = static os_log_type_t.default.getter(v4, v5, v6, v7);
    os_log(_:dso:log:type:_:)("CoreTelephonyService - processCarrierInfo", 41, 2, &_mh_execute_header, v9, v10, _swiftEmptyArrayStorage);
    v11 = *(void **)&v1[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client];
    v12 = String._bridgeToObjectiveC()();
    v66[0] = 0;
    v13 = objc_msgSend(v11, "copyCarrierBundleValue:key:bundleType:error:", v8, v12, v3, v66);

    v14 = v66[0];
    if (!v13)
    {
      v44 = v66[0];
      v45 = _convertNSErrorToError(_:)(v14);

      swift_willThrow(v46);
      v47 = sub_100146438(&qword_1002B5660);
      v48 = swift_allocObject(v47, 96, 7);
      *(_OWORD *)(v48 + 16) = xmmword_100242010;
      *(_QWORD *)(v48 + 56) = &type metadata for String;
      *(_QWORD *)(v48 + 32) = 0xD000000000000029;
      *(_QWORD *)(v48 + 40) = 0x8000000100212620;
      swift_getErrorValue(v45, v62, v61);
      v49 = Error.localizedDescription.getter(v61[1], v61[2]);
      *(_QWORD *)(v48 + 88) = &type metadata for String;
      *(_QWORD *)(v48 + 64) = v49;
      *(_QWORD *)(v48 + 72) = v50;
      print(_:separator:terminator:)(v48, 32, 0xE100000000000000, 10, 0xE100000000000000);
      swift_bridgeObjectRelease(v48);

      swift_errorRelease(v45);
      return;
    }
    v59 = v3;
    v15 = v66[0];
    v58 = (void *)v8;
    if (objc_msgSend((id)v8, "slotID") == (id)1)
      v8 = 0x8000000100212110;
    else
      v8 = 0x80000001002120F0;
    v60 = (_UNKNOWN **)v1;
    v16 = &v1[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray];
    swift_beginAccess(&v1[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray], v66, 0, 0);
    v17 = *(_QWORD *)(*(_QWORD *)v16 + 16);
    if (v17)
    {
      v18 = 0;
      v19 = 0;
      v3 = (char *)0xD000000000000010;
      v1 = (char *)&_s7SwiftUI5ImageVN_ptr;
      while (v19 < *(_QWORD *)(*(_QWORD *)v16 + 16))
      {
        v22 = *(_QWORD *)v16 + v18 * 8;
        v23 = *(_QWORD *)(v22 + 64);
        v24 = *(_QWORD *)(v22 + 72);
        v25 = v23 == 0xD000000000000010 && v24 == v8;
        if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, 0xD000000000000010, v8, 0) & 1) != 0)
        {
          v26 = objc_opt_self(*((_QWORD *)v1 + 402));
          v27 = swift_dynamicCastObjCClass(v13, v26);
          if (v27)
          {
            v28 = v27;
            v63 = 0;
            v64 = 0;
            v29 = v13;
            static String._conditionallyBridgeFromObjectiveC(_:result:)(v28, &v63);

            v30 = v64;
            if (v64)
            {
              v3 = v1;
              v1 = (char *)v63;
              swift_beginAccess(v16, &v63, 33, 0);
              v31 = *(_QWORD **)v16;
              swift_bridgeObjectRetain(v30);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v31);
              *(_QWORD *)v16 = v31;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v31 = sub_100197F38(v31);
                *(_QWORD *)v16 = v31;
              }
              if (v19 >= v31[2])
                goto LABEL_48;
              v20 = &v31[v18];
              v21 = v31[v18 + 5];
              v20[4] = v1;
              v20[5] = v30;
              swift_endAccess(&v63);
              swift_bridgeObjectRelease(v30);
              swift_bridgeObjectRelease(v21);
              v1 = v3;
              v3 = (char *)0xD000000000000010;
            }
          }
        }
        ++v19;
        v18 += 11;
        if (v17 == v19)
          goto LABEL_22;
      }
      __break(1u);
      goto LABEL_47;
    }
LABEL_22:
    swift_bridgeObjectRelease(v8);
    v8 = *(unint64_t *)((char *)v60 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_hManager);
    v33 = *(_QWORD *)(v8 + 72);
    v34 = *(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL;
    if ((v33 & 0x2000000000000000) != 0)
      v34 = HIBYTE(v33) & 0xF;
    if (!v34 || *((_BYTE *)v60 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_isSimAdded) != 1)
      break;
    v35 = *(_QWORD *)(*(_QWORD *)v16 + 16);
    if (!v35)
      goto LABEL_43;
    v3 = 0;
    v36 = 0;
    while (1)
    {
      v37 = *(_QWORD *)v16;
      if (v36 >= *(_QWORD *)(*(_QWORD *)v16 + 16))
        break;
      v1 = &v3[v37];
      v38 = *(_QWORD *)&v3[v37 + 32];
      v39 = *(_QWORD *)&v3[v37 + 40];
      v40 = *(_QWORD *)(v8 + 64);
      v41 = *(_QWORD *)(v8 + 72);
      v42 = v38 == v40 && v39 == v41;
      if (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, v40, v41, 0) & 1) != 0)
      {
        *(_DWORD *)(v8 + 148) = *((_QWORD *)v1 + 6) != 1;
        *(_BYTE *)(v8 + 152) = 0;
        v1 = (char *)v8;
        sub_100183E88();
      }
      ++v36;
      v3 += 88;
      if (v35 == v36)
        goto LABEL_43;
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    v4 = (id)swift_once(&qword_1002B3A28, sub_100174854);
  }
  v43 = !*(_QWORD *)(*(_QWORD *)v16 + 16) || *(_QWORD *)(*(_QWORD *)v16 + 48) != 1;
  *(_DWORD *)(v8 + 148) = v43;
  *(_BYTE *)(v8 + 152) = 0;
  sub_100183E88();
LABEL_43:
  v51 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1002B3A40 != -1)
    swift_once(&qword_1002B3A40, sub_10017519C);
  v52 = static NSNotificationName.carrierUpdate;
  v53 = sub_100146438(&qword_1002B5608);
  inited = swift_initStackObject(v53, v65);
  *(_OWORD *)(inited + 16) = xmmword_1002402A0;
  v63 = 0x7372656972726163;
  v64 = 0xE800000000000000;
  AnyHashable.init<A>(_:)(&v63, &type metadata for String, &protocol witness table for String);
  v55 = *(_QWORD *)v16;
  *(_QWORD *)(inited + 96) = sub_100146438((uint64_t *)&unk_1002B5610);
  *(_QWORD *)(inited + 72) = v55;
  swift_bridgeObjectRetain(v55);
  v56 = sub_1001BE664(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v56);
  objc_msgSend(v51, "postNotificationName:object:userInfo:", v52, 0, isa);

}

uint64_t sub_100177854(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  _BOOL4 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id aBlock[5];
  uint64_t v48;
  _QWORD v49[3];
  char v50[16];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(objc_allocWithZone((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", a1);
  v12 = *(void **)(v2 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client);
  aBlock[0] = 0;
  v13 = objc_msgSend(v12, "getBandInfo:error:", v11, aBlock);
  v14 = aBlock[0];
  if (v13)
  {
    v15 = v13;
    v45 = v5;
    v16 = a1 != 1;
    sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
    v17 = (void *)static OS_dispatch_queue.main.getter(v14);
    v18 = swift_allocObject(&unk_100264688, 24, 7);
    swift_unknownObjectWeakInit(v18 + 16, v2);
    v19 = swift_allocObject(&unk_100264778, 36, 7);
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = v15;
    *(_DWORD *)(v19 + 32) = v16;
    aBlock[4] = sub_10017D098;
    v48 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1001BE428;
    aBlock[3] = &unk_100264790;
    v20 = _Block_copy(aBlock);
    v44 = v8;
    v21 = v20;
    v22 = v48;
    v23 = v15;
    swift_release(v22);
    static DispatchQoS.unspecified.getter(v24);
    aBlock[0] = _swiftEmptyArrayStorage;
    v25 = sub_10017CF34();
    v26 = sub_100146438((uint64_t *)&unk_1002B55F0);
    v27 = sub_10014BEC0((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v4, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v10, v44);
  }
  else
  {
    v29 = aBlock[0];
    v30 = _convertNSErrorToError(_:)(v14);

    swift_willThrow(v31);
    if (qword_1002B3A28 != -1)
      v32 = swift_once(&qword_1002B3A28, sub_100174854);
    v36 = off_1002BF018;
    v37 = static os_log_type_t.default.getter(v32, v33, v34, v35);
    v38 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v39 = swift_allocObject(v38, 72, 7);
    *(_OWORD *)(v39 + 16) = xmmword_1002402A0;
    swift_getErrorValue(v30, v50, v49);
    v40 = Error.localizedDescription.getter(v49[1], v49[2]);
    v42 = v41;
    *(_QWORD *)(v39 + 56) = &type metadata for String;
    *(_QWORD *)(v39 + 64) = sub_10016B1E0();
    *(_QWORD *)(v39 + 32) = v40;
    *(_QWORD *)(v39 + 40) = v42;
    os_log(_:dso:log:type:_:)("CoreTelephonyService - fetchBandInfo error: %{public}s ", 55, 2, &_mh_execute_header, v36, v37, v39);
    swift_bridgeObjectRelease(v39);
    return swift_errorRelease(v30);
  }
}

uint64_t sub_100177C1C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  _QWORD v33[3];
  char v34[8];
  uint64_t aBlock;
  unint64_t v36;
  uint64_t (*v37)();
  void *v38;
  uint64_t (*v39)();
  uint64_t v40;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = sub_100146438(&qword_1002B5660);
    v12 = swift_allocObject(v11, 64, 7);
    *(_OWORD *)(v12 + 16) = xmmword_1002402A0;
    aBlock = 0;
    v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(v36);
    aBlock = 0x636F20726F727265;
    v36 = 0xEF20646572727563;
    swift_getErrorValue(a2, v34, v33);
    v32[0] = Error.localizedDescription.getter(v33[1], v33[2]);
    v32[1] = v13;
    v14 = sub_100146438((uint64_t *)&unk_1002B5640);
    v15._countAndFlagsBits = String.init<A>(describing:)(v32, v14);
    object = v15._object;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(object);
    v17 = aBlock;
    v18 = v36;
    *(_QWORD *)(v12 + 56) = &type metadata for String;
    *(_QWORD *)(v12 + 32) = v17;
    *(_QWORD *)(v12 + 40) = v18;
    print(_:separator:terminator:)(v12, 32, 0xE100000000000000, 10, 0xE100000000000000);
    swift_bridgeObjectRelease(v12);
  }
  v19 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  v20 = (void *)static OS_dispatch_queue.main.getter(v19);
  v21 = swift_allocObject(&unk_1002648E0, 24, 7);
  *(_QWORD *)(v21 + 16) = a1;
  v39 = sub_10017E368;
  v40 = v21;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v36 = 1107296256;
  v37 = sub_1001BE428;
  v38 = &unk_1002648F8;
  v22 = _Block_copy(&aBlock);
  v23 = v40;
  v24 = a1;
  swift_release(v23);
  static DispatchQoS.unspecified.getter(v25);
  aBlock = (uint64_t)_swiftEmptyArrayStorage;
  v26 = sub_10017CF34();
  v27 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v28 = sub_10014BEC0((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v27, v28, v4, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100177F04(uint64_t result)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (result)
  {
    v1 = (void *)result;
    v2 = sub_100146438(&qword_1002B5660);
    v3 = swift_allocObject(v2, 64, 7);
    *(_OWORD *)(v3 + 16) = xmmword_1002402A0;
    *(_QWORD *)(v3 + 56) = sub_1001548C8(0, &qword_1002B5668, CTSignalStrengthMeasurements_ptr);
    *(_QWORD *)(v3 + 32) = v1;
    v4 = v1;
    print(_:separator:terminator:)(v3, 32, 0xE100000000000000, 10, 0xE100000000000000);
    return swift_bridgeObjectRelease(v3);
  }
  return result;
}

void sub_100177F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[5];
  uint64_t v13;

  v6 = objc_msgSend(objc_allocWithZone((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", a1);
  v7 = objc_msgSend((id)objc_opt_self(CTServiceDescriptor), "descriptorWithSubscriptionContext:", v6);
  v8 = *(void **)(v3 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client);
  v9 = swift_allocObject(&unk_100264890, 32, 7);
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  v12[4] = sub_10017F824;
  v13 = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_1001780B8;
  v12[3] = &unk_1002648A8;
  v10 = _Block_copy(v12);
  v11 = v13;
  swift_retain(a3);
  objc_msgSend(v8, "getSignalStrengthMeasurements:completion:", v7, v10, swift_release(v11).n128_f64[0]);
  _Block_release(v10);

}

uint64_t sub_1001780BC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  _QWORD v41[3];
  char v42[8];
  _QWORD aBlock[5];
  _QWORD *v44;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  result = __chkstk_darwin(v12);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_getErrorValue(a2, v42, v41);
    v17 = Error.localizedDescription.getter(v41[1], v41[2]);
    v21 = v17;
    v22 = v18;
    if (qword_1002B3A28 != -1)
      v17 = swift_once(&qword_1002B3A28, sub_100174854);
    v23 = off_1002BF018;
    v24 = static os_log_type_t.default.getter(v17, v18, v19, v20);
    v25 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v26 = swift_allocObject(v25, 72, 7);
    *(_OWORD *)(v26 + 16) = xmmword_1002402A0;
    *(_QWORD *)(v26 + 56) = &type metadata for String;
    *(_QWORD *)(v26 + 64) = sub_10016B1E0();
    *(_QWORD *)(v26 + 32) = v21;
    *(_QWORD *)(v26 + 40) = v22;
    os_log(_:dso:log:type:_:)("CoreTelephonyService - fetchCellInfo error: %{public}s ", 55, 2, &_mh_execute_header, v23, v24, v26);
    return swift_bridgeObjectRelease(v26);
  }
  else if (a1)
  {
    sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
    v27 = a1;
    v39 = a3;
    v28 = v27;
    v40 = static OS_dispatch_queue.main.getter(v27);
    v29 = (_QWORD *)swift_allocObject(&unk_100264930, 40, 7);
    v29[2] = v39;
    v29[3] = a4;
    v30 = a4;
    v29[4] = v28;
    v31 = v28;
    aBlock[4] = sub_10017E39C;
    v44 = v29;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001BE428;
    aBlock[3] = &unk_100264948;
    v32 = _Block_copy(aBlock);
    v33 = v44;
    v39 = v31;
    swift_retain(v30);
    swift_release(v33);
    static DispatchQoS.unspecified.getter(v34);
    aBlock[0] = _swiftEmptyArrayStorage;
    v35 = sub_10017CF34();
    v36 = sub_100146438((uint64_t *)&unk_1002B55F0);
    v37 = sub_10014BEC0((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v36, v37, v8, v35);
    v38 = (void *)v40;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v11, v32);
    _Block_release(v32);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  return result;
}

double sub_1001783C4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Strong;
  double result;
  void *v14;
  _QWORD *v15;
  id v16;
  _BYTE v17[24];

  v6 = a1;
  v7 = a2 + 16;
  if (qword_1002B3A28 != -1)
    a1 = swift_once(&qword_1002B3A28, sub_100174854);
  v8 = off_1002BF018;
  v9 = static os_log_type_t.default.getter(a1, a2, a3, a4);
  v10 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1002402A0;
  *(_QWORD *)(v11 + 56) = &type metadata for Int;
  *(_QWORD *)(v11 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v11 + 32) = v6;
  os_log(_:dso:log:type:_:)("incoming subscription slot  ---> %{public}d", 43, 2, &_mh_execute_header, v8, v9, v11);
  swift_bridgeObjectRelease(v11);
  swift_beginAccess(v7, v17, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v14 = (void *)Strong;
    v15 = (_QWORD *)swift_allocObject(&unk_100264980, 40, 7);
    v15[2] = a3;
    v15[3] = a2;
    v15[4] = v6;
    v16 = a3;
    swift_retain(a2);
    sub_100177F90(v6, (uint64_t)sub_10017E3D4, (uint64_t)v15);

    *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  }
  return result;
}

uint64_t sub_100178528(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  id v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  char v45[8];
  _QWORD aBlock[5];
  _QWORD *v47;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v41 = *(_QWORD *)(v13 - 8);
  v42 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v39 = a5;
    v40 = a4;
    swift_getErrorValue(a2, v45, v44);
    v16 = Error.localizedDescription.getter(v44[1], v44[2]);
    v20 = v16;
    v21 = v17;
    if (qword_1002B3A28 != -1)
      v16 = swift_once(&qword_1002B3A28, sub_100174854);
    v22 = off_1002BF018;
    v23 = static os_log_type_t.default.getter(v16, v17, v18, v19);
    v24 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v25 = swift_allocObject(v24, 72, 7);
    *(_OWORD *)(v25 + 16) = xmmword_1002402A0;
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    *(_QWORD *)(v25 + 64) = sub_10016B1E0();
    *(_QWORD *)(v25 + 32) = v20;
    *(_QWORD *)(v25 + 40) = v21;
    os_log(_:dso:log:type:_:)("CT - fetchCellInfo error: %{public}s", 36, 2, &_mh_execute_header, v22, v23, v25);
    swift_bridgeObjectRelease(v25);
    a5 = v39;
    a4 = v40;
  }
  v26 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  v27 = (void *)static OS_dispatch_queue.main.getter(v26);
  v28 = (_QWORD *)swift_allocObject(&unk_1002649A8, 48, 7);
  v28[2] = a1;
  v28[3] = a3;
  v28[4] = a4;
  v28[5] = a5;
  aBlock[4] = sub_10017E414;
  v47 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_1002649C0;
  v29 = _Block_copy(aBlock);
  v30 = v47;
  v31 = a1;
  v32 = a3;
  swift_retain(a4);
  swift_release(v30);
  static DispatchQoS.unspecified.getter(v33);
  aBlock[0] = _swiftEmptyArrayStorage;
  v34 = sub_10017CF34();
  v35 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v36 = sub_10014BEC0((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v35, v36, v10, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v15, v42);
}

void sub_100178818(void *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  __int128 *v39;
  uint64_t Strong;
  void *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  int v49;
  void *v50;
  id v51;
  void *v52;
  uint64_t v53;
  void *v54;
  char v55[24];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;

  if (!a1)
    return;
  v7 = qword_1002B3A28;
  v8 = a1;
  v12 = v8;
  if (v7 != -1)
    v8 = (id)swift_once(&qword_1002B3A28, sub_100174854);
  v13 = off_1002BF018;
  v14 = static os_log_type_t.default.getter(v8, v9, v10, v11);
  os_log(_:dso:log:type:_:)("CT - fetchCellInfo", 18, 2, &_mh_execute_header, v13, v14, _swiftEmptyArrayStorage);
  v15 = objc_msgSend(a2, "legacyInfo");
  if (!v15)
  {
    v58 = 0u;
    v59 = 0u;
    goto LABEL_18;
  }
  v16 = v15;
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, (char *)&type metadata for Any + 8);

  if (!*(_QWORD *)(v17 + 16))
  {
    v58 = 0u;
    v59 = 0u;
    swift_bridgeObjectRelease(v17);
    goto LABEL_18;
  }
  sub_10017E2BC(v17 + 32, (uint64_t)&v58);
  swift_bridgeObjectRelease(v17);
  if (!*((_QWORD *)&v59 + 1))
  {
LABEL_18:
    v19 = sub_10014BDE0((uint64_t)&v58, (uint64_t *)&unk_1002B5670);
    goto LABEL_19;
  }
  v18 = sub_100146438(&qword_1002B6E50);
  v19 = swift_dynamicCast(&v56, &v58, (char *)&type metadata for Any + 8, v18, 6);
  if ((v19 & 1) == 0)
  {
LABEL_19:
    v34 = off_1002BF018;
    v35 = static os_log_type_t.default.getter(v19, v20, v21, v22);
    os_log(_:dso:log:type:_:)("CT - fetchCellInfo error", 24, 2, &_mh_execute_header, v34, v35, _swiftEmptyArrayStorage);
LABEL_20:

    return;
  }
  v23 = v56;
  if (!*(_QWORD *)(v56 + 16))
  {
    v19 = swift_bridgeObjectRelease(v56);
    goto LABEL_19;
  }
  if (qword_1002B3A78 != -1)
    v19 = swift_once(&qword_1002B3A78, sub_100183CA4);
  v24 = a3 + 16;
  if (*(_BYTE *)(qword_1002BF068 + 26) == 1)
  {
    v53 = v24;
    v25 = off_1002BF018;
    v26 = static os_log_type_t.default.getter(v19, v20, v21, v22);
    v27 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v28 = swift_allocObject(v27, 72, 7);
    *(_OWORD *)(v28 + 16) = xmmword_1002402A0;
    *(_QWORD *)(v28 + 56) = v18;
    *(_QWORD *)(v28 + 64) = sub_10014BEC0(&qword_1002B5688, &qword_1002B6E50, (uint64_t)&protocol conformance descriptor for [A : B]);
    *(_QWORD *)(v28 + 32) = v23;
    swift_bridgeObjectRetain(v23);
    v29 = v25;
    v24 = v53;
    os_log(_:dso:log:type:_:)("CT - %{public}@", 15, 2, &_mh_execute_header, v29, v26, v28);
    swift_bridgeObjectRelease(v28);
  }
  v30 = objc_msgSend(a2, "legacyInfo");
  if (!v30)
  {
    v58 = 0u;
    v59 = 0u;
LABEL_30:
    v39 = &v58;
LABEL_31:
    sub_10014BDE0((uint64_t)v39, (uint64_t *)&unk_1002B5670);
    goto LABEL_32;
  }
  v31 = v30;
  v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, (char *)&type metadata for Any + 8);

  v33 = *(_QWORD *)(v32 + 16);
  if (v33)
  {
    sub_10017E2BC(v32 + 32 * v33, (uint64_t)&v58);
  }
  else
  {
    v58 = 0u;
    v59 = 0u;
  }
  swift_bridgeObjectRelease(v32);
  if (!*((_QWORD *)&v59 + 1))
    goto LABEL_30;
  if ((swift_dynamicCast(&v56, &v58, (char *)&type metadata for Any + 8, v18, 6) & 1) == 0)
  {
LABEL_32:
    swift_beginAccess(v24, &v58, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v24);
    if (Strong)
    {
      v41 = (void *)Strong;
      v42 = objc_msgSend(v12, "rsrp");
      sub_10017E420(v23, a4);

    }
    swift_bridgeObjectRelease(v23);
    goto LABEL_20;
  }
  v36 = v56;
  if (*(_QWORD *)(v56 + 16) && (v37 = sub_1001C7C98(0xD000000000000012, 0x80000001002123F0), (v38 & 1) != 0))
  {
    sub_10017E2BC(*(_QWORD *)(v36 + 56) + 32 * v37, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  swift_bridgeObjectRelease(v36);
  if (!*((_QWORD *)&v57 + 1))
  {
    v39 = &v56;
    goto LABEL_31;
  }
  sub_10017F278(&v56, &v58);
  v43 = objc_msgSend(v12, "snr");
  if (!v43)
  {
    sub_10014652C(&v58);
    goto LABEL_32;
  }
  v44 = v43;
  swift_beginAccess(v24, v55, 0, 0);
  v45 = swift_unknownObjectWeakLoadStrong(v24);
  if (v45)
  {
    v46 = (void *)v45;
    v47 = objc_msgSend(v12, "rsrp");
    sub_10017E2BC((uint64_t)&v58, (uint64_t)&v56);
    v48 = sub_1001548C8(0, &qword_1002B5680, NSNumber_ptr);
    v49 = swift_dynamicCast(&v54, &v56, (char *)&type metadata for Any + 8, v48, 6);
    v50 = v54;
    v51 = v44;
    sub_10017E420(v23, a4);
    swift_bridgeObjectRelease(v23);

    if (v49)
      v52 = v50;
    else
      v52 = 0;

  }
  else
  {

    swift_bridgeObjectRelease(v23);
  }
  sub_10014652C(&v58);
}

uint64_t sub_100178D28(uint64_t (**a1)(char *, _QWORD), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (**v12)(char *, _QWORD);
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  const void *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t (**v25)(char *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (**v45)(char *, _QWORD);
  uint64_t v46;
  void **aBlock;
  uint64_t v48;
  uint64_t (*v49)();
  void *v50;
  uint64_t (*v51)();
  _QWORD *v52;

  v45 = a1;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(uint64_t (***)(char *, _QWORD))(v11 - 8);
  result = __chkstk_darwin(v11);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = result;
  if (a2)
  {
    v16 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
    v17 = static OS_dispatch_queue.main.getter(v16);
    v44 = v8;
    v18 = (void *)v17;
    v19 = (_QWORD *)swift_allocObject(&unk_100264840, 40, 7);
    v19[2] = a2;
    v19[3] = a3;
    v19[4] = a4;
    v51 = sub_10017E35C;
    v52 = v19;
    aBlock = _NSConcreteStackBlock;
    v48 = 1107296256;
    v49 = sub_1001BE428;
    v50 = &unk_100264858;
    v20 = _Block_copy(&aBlock);
    v43 = a3;
    v21 = v20;
    v22 = v52;
    swift_errorRetain(a2);
    swift_retain(a4);
    swift_release(v22);
    static DispatchQoS.unspecified.getter(v23);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v24 = sub_10017CF34();
    v25 = v12;
    v26 = sub_100146438((uint64_t *)&unk_1002B55F0);
    v27 = sub_10014BEC0((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0, (uint64_t)&protocol conformance descriptor for [A]);
    v28 = v26;
    v12 = v25;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v28, v27, v7, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v10, v21);
    v29 = v46;
    v30 = v21;
    a3 = v43;
    _Block_release(v30);

    v8 = v44;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v7);
    result = v25[1](v15, v29);
  }
  v31 = v45;
  if (v45)
  {
    sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
    v32 = v31;
    v45 = v12;
    v33 = v32;
    v34 = (void *)static OS_dispatch_queue.main.getter(v32);
    v35 = (_QWORD *)swift_allocObject(&unk_1002647F0, 40, 7);
    v35[2] = v33;
    v35[3] = a3;
    v35[4] = a4;
    v51 = sub_10017E324;
    v52 = v35;
    aBlock = _NSConcreteStackBlock;
    v48 = 1107296256;
    v49 = sub_1001BE428;
    v50 = &unk_100264808;
    v36 = _Block_copy(&aBlock);
    v37 = v52;
    swift_retain(a4);
    v38 = v33;
    swift_release(v37);
    static DispatchQoS.unspecified.getter(v39);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v40 = sub_10017CF34();
    v41 = sub_100146438((uint64_t *)&unk_1002B55F0);
    v42 = sub_10014BEC0((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v41, v42, v7, v40);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v10, v36);
    _Block_release(v36);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return v45[1](v15, v46);
  }
  return result;
}

uint64_t sub_1001790C0(uint64_t a1, uint64_t (*a2)(_QWORD, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  _BYTE v25[8];
  _QWORD v26[3];
  _BYTE v27[8];
  _QWORD v28[2];
  uint64_t v29;
  unint64_t v30;

  v4 = sub_100146438(&qword_1002B5660);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1002402A0;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  v29 = 0x636F20726F727265;
  v30 = 0xEF20646572727563;
  if (a1)
  {
    swift_getErrorValue(a1, v25, v24);
    v6 = Error.localizedDescription.getter(v24[1], v24[2]);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v28[0] = v6;
  v28[1] = v7;
  v8 = sub_100146438((uint64_t *)&unk_1002B5640);
  v9._countAndFlagsBits = String.init<A>(describing:)(v28, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11 = v29;
  v12 = v30;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 32) = v11;
  *(_QWORD *)(v5 + 40) = v12;
  print(_:separator:terminator:)(v5, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease(v5);
  if (a1)
  {
    swift_getErrorValue(a1, v27, v26);
    v13 = Error.localizedDescription.getter(v26[1], v26[2]);
    v17 = v13;
    v18 = v14;
    if (qword_1002B3A28 != -1)
      v13 = swift_once(&qword_1002B3A28, sub_100174854);
    v19 = off_1002BF018;
    v20 = static os_log_type_t.default.getter(v13, v14, v15, v16);
    v21 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_1002402A0;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = sub_10016B1E0();
    *(_QWORD *)(v22 + 32) = v17;
    *(_QWORD *)(v22 + 40) = v18;
    os_log(_:dso:log:type:_:)("CT - signalStrengthMeasurements error: %{public}s", 49, 2, &_mh_execute_header, v19, v20, v22);
    swift_bridgeObjectRelease(v22);
  }
  return a2(0, a1);
}

uint64_t sub_1001792DC(void *a1, uint64_t (*a2)(id, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v4 = sub_100146438(&qword_1002B5660);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1002402A0;
  strcpy((char *)v15, "measurements");
  BYTE5(v15[1]) = 0;
  HIWORD(v15[1]) = -5120;
  v6 = a1;
  v7 = objc_msgSend(v6, "description");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12 = v15[0];
  v13 = v15[1];
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 32) = v12;
  *(_QWORD *)(v5 + 40) = v13;
  print(_:separator:terminator:)(v5, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease(v5);
  return a2(v6, 0);
}

void sub_1001793F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

double sub_10017946C@<D0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, _QWORD *a6@<X6>, int a7@<W7>, uint64_t a8@<X8>, void *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  NSString v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, NSString, uint64_t);
  char *v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  double result;
  uint64_t v57;
  NSString v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  NSString v63;
  NSString v64;
  NSString v65;
  NSString v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  _QWORD v72[2];
  _QWORD v73[5];

  v70 = a7;
  v64 = a2;
  v65 = a5;
  v62 = a4;
  v63 = a1;
  v60 = a3;
  v69 = a8;
  v66 = a9;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v67 = *(_QWORD *)(v14 - 8);
  v68 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001548C8(0, (unint64_t *)&unk_1002B6E10, NSString_ptr);
  v17 = (void *)NSString.init(stringLiteral:)("", 0, 2);
  v18 = (void *)NSString.init(stringLiteral:)("", 0, 2);
  sub_10017E2BC((uint64_t)a6, (uint64_t)v73);
  if (swift_dynamicCast(v72, v73, (char *)&type metadata for Any + 8, &type metadata for String, 0))
  {
    v19 = v72[1];
    v20 = NSString.init(stringLiteral:)("STRING", 6, 2);

    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);

  }
  else
  {
    v22 = swift_dynamicCast(v72, v73, (char *)&type metadata for Any + 8, &type metadata for Int, 0);
    if ((_DWORD)v22)
    {
      v26 = v16;
      v27 = v72[0];
      v28 = NSString.init(stringLiteral:)("INT", 3, 2);

      v71 = v27;
      dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v30 = v29;
      v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v30);

      v32 = v31;
      v16 = v26;
      v20 = v28;
      v21 = v32;
    }
    else
    {
      if (qword_1002B3A78 != -1)
        v22 = swift_once(&qword_1002B3A78, sub_100183CA4);
      if (*(_BYTE *)(qword_1002BF068 + 26) == 1)
      {
        if (qword_1002B3A28 != -1)
          v22 = swift_once(&qword_1002B3A28, sub_100174854);
        v61 = off_1002BF018;
        LODWORD(v59) = static os_log_type_t.default.getter(v22, v23, v24, v25);
        v33 = sub_100146438((uint64_t *)&unk_1002B57E0);
        v34 = swift_allocObject(v33, 72, 7);
        *(_OWORD *)(v34 + 16) = xmmword_1002402A0;
        v35 = a6[3];
        v36 = sub_100146508(a6, v35);
        v72[0] = swift_getDynamicType(v36, v35, 1);
        v37 = sub_100146438(&qword_1002B5658);
        v38 = String.init<A>(describing:)(v72, v37);
        v40 = v39;
        *(_QWORD *)(v34 + 56) = &type metadata for String;
        *(_QWORD *)(v34 + 64) = sub_10016B1E0();
        *(_QWORD *)(v34 + 32) = v38;
        *(_QWORD *)(v34 + 40) = v40;
        os_log(_:dso:log:type:_:)("unknown type  ---> %{public}s", 29, 2, &_mh_execute_header, v61, v59, v34);
        swift_bridgeObjectRelease(v34);
      }
      v21 = v18;
      v20 = (uint64_t)v17;
    }
  }
  v59 = v20;
  v61 = v21;
  v41 = sub_10014652C(v73);
  if (qword_1002B3A28 != -1)
    v41 = swift_once(&qword_1002B3A28, sub_100174854);
  v45 = off_1002BF018;
  v46 = static os_log_type_t.default.getter(v41, v42, v43, v44);
  v47 = os_log(_:dso:log:type:_:)("CoreTelephonyService - cellInfoDBBuilder", 40, 2, &_mh_execute_header, v45, v46, _swiftEmptyArrayStorage);
  UUID.init()(v47);
  v64 = String._bridgeToObjectiveC()();
  v63 = String._bridgeToObjectiveC()();
  v58 = String._bridgeToObjectiveC()();
  v65 = String._bridgeToObjectiveC()();
  v48 = v11;
  v49 = *(void (**)(char *, NSString, uint64_t))(v11 + 16);
  v49(v13, v66, v10);
  v66 = String._bridgeToObjectiveC()();
  v50 = v16;
  v51 = (int *)type metadata accessor for Metric(0);
  v62 = v51[14];
  v60 = v51[15];
  v52 = v68;
  v53 = v69;
  v54 = (_QWORD *)(v69 + v51[16]);
  *v54 = 0;
  v54[1] = 0;
  v55 = v67;
  (*(void (**)(uint64_t, char *, uint64_t))(v67 + 16))(v53, v50, v52);
  *(_QWORD *)(v53 + v51[5]) = v64;
  *(_QWORD *)(v53 + v51[6]) = v63;
  *(_QWORD *)(v53 + v51[7]) = v58;
  *(_QWORD *)(v53 + v51[8]) = v65;
  *(_QWORD *)(v53 + v51[9]) = v61;
  *(_QWORD *)(v53 + v51[10]) = v59;
  v49((char *)(v53 + v51[11]), v13, v10);
  *(_QWORD *)(v53 + v51[12]) = v66;
  *(_DWORD *)(v53 + v51[13]) = v70;
  *(_BYTE *)(v53 + v62) = 0;
  *(_BYTE *)(v53 + v60) = 0;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v50, v52);
  swift_bridgeObjectRelease(v54[1]);
  result = 0.0;
  *(_OWORD *)v54 = xmmword_100242020;
  return result;
}

uint64_t sub_1001799A8(char a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _BYTE v30[8];
  _QWORD v31[2];

  if ((a1 & 1) != 0)
  {
    if (qword_1002B3A78 != -1)
      swift_once(&qword_1002B3A78, sub_100183CA4);
    if (*(_BYTE *)(qword_1002BF068 + 26) == 1)
    {
      if (qword_1002B3A28 != -1)
        swift_once(&qword_1002B3A28, sub_100174854);
      v4 = off_1002BF018;
      v5 = static os_log_type_t.error.getter();
      v6 = sub_100146438((uint64_t *)&unk_1002B57E0);
      v7 = swift_allocObject(v6, 112, 7);
      *(_OWORD *)(v7 + 16) = xmmword_100242010;
      v8 = type metadata accessor for Metric(0);
      v9 = *(void **)(a3 + *(int *)(v8 + 20));
      v10 = sub_1001548C8(0, (unint64_t *)&unk_1002B6E10, NSString_ptr);
      *(_QWORD *)(v7 + 56) = v10;
      v11 = sub_10017E27C(&qword_1002B5650, (unint64_t *)&unk_1002B6E10, NSString_ptr);
      *(_QWORD *)(v7 + 64) = v11;
      *(_QWORD *)(v7 + 32) = v9;
      v12 = *(void **)(a3 + *(int *)(v8 + 24));
      *(_QWORD *)(v7 + 96) = v10;
      *(_QWORD *)(v7 + 104) = v11;
      *(_QWORD *)(v7 + 72) = v12;
      v13 = v9;
      v14 = v12;
      os_log(_:dso:log:type:_:)("ct service inserted new metricTech --> %{public}s metricName --> %{public}s", 75, 2, &_mh_execute_header, v4, v5, v7);
      return swift_bridgeObjectRelease(v7);
    }
    else
    {
      if (qword_1002B3A28 != -1)
        swift_once(&qword_1002B3A28, sub_100174854);
      v23 = off_1002BF018;
      v24 = static os_log_type_t.error.getter();
      return os_log(_:dso:log:type:_:)("ct service inserted new metricTech", 34, 2, &_mh_execute_header, v23, v24, _swiftEmptyArrayStorage);
    }
  }
  else
  {
    if (qword_1002B3A28 != -1)
      swift_once(&qword_1002B3A28, sub_100174854);
    v17 = off_1002BF018;
    v18 = static os_log_type_t.error.getter();
    v19 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_1002402A0;
    if (a2)
    {
      swift_getErrorValue(a2, v30, v29);
      v21 = Error.localizedDescription.getter(v29[1], v29[2]);
    }
    else
    {
      v21 = 0;
      v22 = 0;
    }
    v31[0] = v21;
    v31[1] = v22;
    v25 = sub_100146438((uint64_t *)&unk_1002B5640);
    v26 = String.init<A>(describing:)(v31, v25);
    v28 = v27;
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = sub_10016B1E0();
    *(_QWORD *)(v20 + 32) = v26;
    *(_QWORD *)(v20 + 40) = v28;
    os_log(_:dso:log:type:_:)("error occurred while inserting  ---> %{public}s", 47, 2, &_mh_execute_header, v17, v18, v20);
    return swift_bridgeObjectRelease(v20);
  }
}

void sub_100179CB8(uint64_t a1, void *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  Class v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int64_t v75;
  unint64_t v76;
  int64_t v77;
  uint64_t *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t inited;
  uint64_t v101;
  unint64_t v102;
  Class isa;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  int64_t v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  unint64_t v115;
  int64_t v116;
  void *v117;
  int v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[3];
  void *v124;
  char v125[24];
  char v126[32];

  v118 = a3;
  v107 = a2;
  v4 = type metadata accessor for Metric(0);
  v5 = __chkstk_darwin(v4);
  v111 = (uint64_t)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v112 = (uint64_t)&v104 - v7;
  v8 = type metadata accessor for Date(0);
  v105 = *(_QWORD *)(v8 - 8);
  v106 = v8;
  __chkstk_darwin(v8);
  v119 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v126, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v11 = (void *)Strong;
    v12 = Strong + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray;
    v13 = swift_beginAccess(Strong + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray, v125, 0, 0);
    if (!*(_QWORD *)(*(_QWORD *)v12 + 16))
    {

      return;
    }
    Date.init()(v13);
    v14 = objc_msgSend(v107, "activeBands");
    v117 = v11;
    if (v14)
    {
      v15 = v14;
      v16 = sub_100146438(&qword_1002B5628);
      v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v15, &type metadata for String, v16, &protocol witness table for String);

      v18 = 0;
      v19 = *(_QWORD *)(v17 + 64);
      v108 = v17 + 64;
      v20 = 1 << *(_BYTE *)(v17 + 32);
      v21 = -1;
      if (v20 < 64)
        v21 = ~(-1 << v20);
      v22 = v21 & v19;
      v109 = (unint64_t)(v20 + 63) >> 6;
      v110 = v17;
      while (1)
      {
        if (v22)
        {
          v29 = __clz(__rbit64(v22));
          v22 &= v22 - 1;
          v30 = v29 | (v18 << 6);
        }
        else
        {
          v31 = v18 + 1;
          if (__OFADD__(v18, 1))
            goto LABEL_87;
          if (v31 >= v109)
          {
LABEL_40:
            swift_release(v110);
            v15 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
            if (qword_1002B3A38 != -1)
              goto LABEL_91;
            goto LABEL_41;
          }
          v32 = *(_QWORD *)(v108 + 8 * v31);
          ++v18;
          if (!v32)
          {
            v18 = v31 + 1;
            if (v31 + 1 >= v109)
              goto LABEL_40;
            v32 = *(_QWORD *)(v108 + 8 * v18);
            if (!v32)
            {
              v18 = v31 + 2;
              if (v31 + 2 >= v109)
                goto LABEL_40;
              v32 = *(_QWORD *)(v108 + 8 * v18);
              if (!v32)
              {
                v33 = v31 + 3;
                if (v33 >= v109)
                  goto LABEL_40;
                v32 = *(_QWORD *)(v108 + 8 * v33);
                if (!v32)
                {
                  while (1)
                  {
                    v18 = v33 + 1;
                    if (__OFADD__(v33, 1))
                      goto LABEL_89;
                    if (v18 >= v109)
                      goto LABEL_40;
                    v32 = *(_QWORD *)(v108 + 8 * v18);
                    ++v33;
                    if (v32)
                      goto LABEL_23;
                  }
                }
                v18 = v33;
              }
            }
          }
LABEL_23:
          v22 = (v32 - 1) & v32;
          v30 = __clz(__rbit64(v32)) + (v18 << 6);
        }
        v34 = (uint64_t *)(*(_QWORD *)(v110 + 48) + 16 * v30);
        v35 = *v34;
        v36 = (void *)v34[1];
        v37 = *(_QWORD *)(*(_QWORD *)(v110 + 56) + 8 * v30);
        if ((unint64_t)v37 >> 62)
        {
          if (v37 < 0)
            v52 = *(_QWORD *)(*(_QWORD *)(v110 + 56) + 8 * v30);
          else
            v52 = v37 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v34[1]);
          swift_bridgeObjectRetain(v37);
          v38 = _CocoaArrayWrapper.endIndex.getter(v52);
          if (!v38)
          {
LABEL_39:
            v40 = _swiftEmptyArrayStorage;
            goto LABEL_7;
          }
        }
        else
        {
          v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v34[1]);
          swift_bridgeObjectRetain(v37);
          if (!v38)
            goto LABEL_39;
        }
        v123[0] = _swiftEmptyArrayStorage;
        v15 = v123;
        sub_100195A34(0, v38 & ~(v38 >> 63), 0);
        if (v38 < 0)
        {
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
        v113 = v35;
        v114 = v36;
        v115 = v22;
        v116 = v18;
        v39 = 0;
        v40 = (_QWORD *)v123[0];
        v120 = v37 & 0xC000000000000001;
        v41 = v37;
        v42 = v38;
        do
        {
          if (v120)
            v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v37);
          else
            v43 = *(id *)(v37 + 8 * v39 + 32);
          v44 = v43;
          v45 = objc_msgSend(v43, "stringValue");
          v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
          v48 = v47;

          v123[0] = v40;
          v50 = v40[2];
          v49 = v40[3];
          if (v50 >= v49 >> 1)
          {
            sub_100195A34(v49 > 1, v50 + 1, 1);
            v40 = (_QWORD *)v123[0];
          }
          ++v39;
          v40[2] = v50 + 1;
          v51 = &v40[2 * v50];
          v51[4] = v46;
          v51[5] = v48;
          v37 = v41;
        }
        while (v42 != v39);
        v18 = v116;
        v11 = v117;
        v36 = v114;
        v22 = v115;
        v35 = v113;
LABEL_7:
        v123[0] = v40;
        v23 = sub_100146438(&qword_1002B5630);
        v24 = sub_10014BEC0((unint64_t *)&qword_1002B5638, &qword_1002B5630, (uint64_t)&protocol conformance descriptor for [A]);
        v25 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v23, v24);
        v27 = v26;
        swift_bridgeObjectRelease(v40);
        v124 = &type metadata for String;
        v123[0] = v25;
        v123[1] = v27;
        v28 = v112;
        v15 = v11;
        sub_10017946C((void *)0x544152, (void *)0xE300000000000000, 0xEC00000073646E61, v35, v36, v123, v118, v112, v119);
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(v36);
        sub_10014652C(v123);
        sub_10017DEEC(v28);
        sub_10017E214(v28);
      }
    }
LABEL_42:
    v59 = objc_msgSend(v107, "supportedBands");
    if (v59)
    {
      v15 = v59;
      v60 = sub_100146438(&qword_1002B5628);
      v61 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v15, &type metadata for String, v60, &protocol witness table for String);

      v62 = 0;
      v63 = *(_QWORD *)(v61 + 64);
      v109 = v61 + 64;
      v112 = v61;
      v64 = 1 << *(_BYTE *)(v61 + 32);
      v65 = -1;
      if (v64 < 64)
        v65 = ~(-1 << v64);
      v66 = v65 & v63;
      v110 = (unint64_t)(v64 + 63) >> 6;
      while (1)
      {
        if (v66)
        {
          v73 = __clz(__rbit64(v66));
          v66 &= v66 - 1;
          v74 = v73 | (v62 << 6);
        }
        else
        {
          v75 = v62 + 1;
          if (__OFADD__(v62, 1))
            goto LABEL_88;
          if (v75 >= v110)
          {
LABEL_80:
            swift_release(v112);
            v97 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
            if (qword_1002B3A38 != -1)
              swift_once(&qword_1002B3A38, sub_100175108);
            v98 = static NSNotificationName.NewCTMetric;
            v99 = sub_100146438(&qword_1002B5608);
            inited = swift_initStackObject(v99, &v122);
            *(_OWORD *)(inited + 16) = xmmword_1002402A0;
            strcpy((char *)v123, "metricObject");
            BYTE5(v123[1]) = 0;
            HIWORD(v123[1]) = -5120;
            AnyHashable.init<A>(_:)(v123, &type metadata for String, &protocol witness table for String);
            *(_QWORD *)(inited + 96) = &type metadata for MetricNotificationObject;
            v101 = swift_allocObject(&unk_1002647C8, 52, 7);
            *(_QWORD *)(inited + 72) = v101;
            *(_QWORD *)(v101 + 16) = 5521746;
            *(_QWORD *)(v101 + 24) = 0xE300000000000000;
            *(_QWORD *)(v101 + 32) = 0x6574726F70707553;
            *(_QWORD *)(v101 + 40) = 0xEF73646E61422064;
            *(_DWORD *)(v101 + 48) = v118;
            v102 = sub_1001BE664(inited);
            isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v102);
            objc_msgSend(v97, "postNotificationName:object:userInfo:", v98, 0, isa);

            v11 = isa;
            break;
          }
          v76 = *(_QWORD *)(v109 + 8 * v75);
          ++v62;
          if (!v76)
          {
            v62 = v75 + 1;
            if (v75 + 1 >= v110)
              goto LABEL_80;
            v76 = *(_QWORD *)(v109 + 8 * v62);
            if (!v76)
            {
              v62 = v75 + 2;
              if (v75 + 2 >= v110)
                goto LABEL_80;
              v76 = *(_QWORD *)(v109 + 8 * v62);
              if (!v76)
              {
                v77 = v75 + 3;
                if (v77 >= v110)
                  goto LABEL_80;
                v76 = *(_QWORD *)(v109 + 8 * v77);
                if (!v76)
                {
                  while (1)
                  {
                    v62 = v77 + 1;
                    if (__OFADD__(v77, 1))
                      break;
                    if (v62 >= v110)
                      goto LABEL_80;
                    v76 = *(_QWORD *)(v109 + 8 * v62);
                    ++v77;
                    if (v76)
                      goto LABEL_62;
                  }
LABEL_90:
                  __break(1u);
LABEL_91:
                  swift_once(&qword_1002B3A38, sub_100175108);
LABEL_41:
                  v53 = static NSNotificationName.NewCTMetric;
                  v54 = sub_100146438(&qword_1002B5608);
                  v55 = swift_initStackObject(v54, &v121);
                  *(_OWORD *)(v55 + 16) = xmmword_1002402A0;
                  strcpy((char *)v123, "metricObject");
                  BYTE5(v123[1]) = 0;
                  HIWORD(v123[1]) = -5120;
                  AnyHashable.init<A>(_:)(v123, &type metadata for String, &protocol witness table for String);
                  *(_QWORD *)(v55 + 96) = &type metadata for MetricNotificationObject;
                  v56 = swift_allocObject(&unk_1002647C8, 52, 7);
                  *(_QWORD *)(v55 + 72) = v56;
                  *(_QWORD *)(v56 + 16) = 5521746;
                  *(_QWORD *)(v56 + 24) = 0xE300000000000000;
                  strcpy((char *)(v56 + 32), "Active Bands");
                  *(_BYTE *)(v56 + 45) = 0;
                  *(_WORD *)(v56 + 46) = -5120;
                  *(_DWORD *)(v56 + 48) = v118;
                  v57 = sub_1001BE664(v55);
                  v58 = Dictionary._bridgeToObjectiveC()().super.isa;
                  swift_bridgeObjectRelease(v57);
                  objc_msgSend(v15, "postNotificationName:object:userInfo:", v53, 0, v58);

                  goto LABEL_42;
                }
                v62 = v77;
              }
            }
          }
LABEL_62:
          v66 = (v76 - 1) & v76;
          v74 = __clz(__rbit64(v76)) + (v62 << 6);
        }
        v78 = (uint64_t *)(*(_QWORD *)(v112 + 48) + 16 * v74);
        v79 = *v78;
        v80 = (void *)v78[1];
        v81 = *(_QWORD *)(*(_QWORD *)(v112 + 56) + 8 * v74);
        if ((unint64_t)v81 >> 62)
        {
          if (v81 < 0)
            v96 = *(_QWORD *)(*(_QWORD *)(v112 + 56) + 8 * v74);
          else
            v96 = v81 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v78[1]);
          swift_bridgeObjectRetain(v81);
          v82 = _CocoaArrayWrapper.endIndex.getter(v96);
          if (!v82)
          {
LABEL_78:
            v84 = _swiftEmptyArrayStorage;
            goto LABEL_46;
          }
        }
        else
        {
          v82 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v78[1]);
          swift_bridgeObjectRetain(v81);
          if (!v82)
            goto LABEL_78;
        }
        v123[0] = _swiftEmptyArrayStorage;
        v15 = v123;
        sub_100195A34(0, v82 & ~(v82 >> 63), 0);
        if (v82 < 0)
          goto LABEL_86;
        v113 = v79;
        v114 = v80;
        v115 = v66;
        v116 = v62;
        v83 = 0;
        v84 = (_QWORD *)v123[0];
        v120 = v81 & 0xC000000000000001;
        v85 = v81;
        v86 = v82;
        do
        {
          if (v120)
            v87 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v83, v81);
          else
            v87 = *(id *)(v81 + 8 * v83 + 32);
          v88 = v87;
          v89 = objc_msgSend(v87, "stringValue");
          v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
          v92 = v91;

          v123[0] = v84;
          v94 = v84[2];
          v93 = v84[3];
          if (v94 >= v93 >> 1)
          {
            sub_100195A34(v93 > 1, v94 + 1, 1);
            v84 = (_QWORD *)v123[0];
          }
          ++v83;
          v84[2] = v94 + 1;
          v95 = &v84[2 * v94];
          v95[4] = v90;
          v95[5] = v92;
          v81 = v85;
        }
        while (v86 != v83);
        v62 = v116;
        v11 = v117;
        v80 = v114;
        v66 = v115;
        v79 = v113;
LABEL_46:
        v123[0] = v84;
        v67 = sub_100146438(&qword_1002B5630);
        v68 = sub_10014BEC0((unint64_t *)&qword_1002B5638, &qword_1002B5630, (uint64_t)&protocol conformance descriptor for [A]);
        v69 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v67, v68);
        v71 = v70;
        swift_bridgeObjectRelease(v84);
        v124 = &type metadata for String;
        v123[0] = v69;
        v123[1] = v71;
        v72 = v111;
        v15 = v11;
        sub_10017946C((void *)0x544152, (void *)0xE300000000000000, 0xEF73646E61422064, v79, v80, v123, v118, v111, v119);
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v80);
        sub_10014652C(v123);
        sub_10017DEEC(v72);
        sub_10017E214(v72);
      }
    }

    (*(void (**)(char *, uint64_t))(v105 + 8))(v119, v106);
  }
}

uint64_t sub_10017A8A8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  uint64_t v25;
  _BYTE v26[24];
  _QWORD v27[3];
  _QWORD v28[3];
  char v29[8];

  if (!a1 || !*(_QWORD *)(a1 + 16))
  {
    if (qword_1002B3A28 != -1)
      swift_once(&qword_1002B3A28, sub_100174854);
    v13 = off_1002BF018;
    v14 = static os_log_type_t.error.getter();
    v15 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_1002402A0;
    if (a2)
    {
      swift_getErrorValue(a2, v29, v28);
      v17 = Error.localizedDescription.getter(v28[1], v28[2]);
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    v27[0] = v17;
    v27[1] = v18;
    v19 = sub_100146438((uint64_t *)&unk_1002B5640);
    v20 = String.init<A>(describing:)(v27, v19);
    v22 = v21;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_10016B1E0();
    *(_QWORD *)(v16 + 32) = v20;
    *(_QWORD *)(v16 + 40) = v22;
    os_log(_:dso:log:type:_:)("error occured  ---> %{public}s", 30, 2, &_mh_execute_header, v13, v14, v16);
    v12 = v16;
    return swift_bridgeObjectRelease(v12);
  }
  v7 = a3 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray;
  swift_beginAccess(a3 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray, v27, 0, 0);
  if ((a4 & 0x8000000000000000) == 0 && *(_QWORD *)(*(_QWORD *)v7 + 16) > (int64_t)a4)
  {
    swift_beginAccess(v7, v26, 33, 0);
    v8 = *(_QWORD **)v7;
    swift_bridgeObjectRetain(a1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    *(_QWORD *)v7 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v8 = sub_100197F38(v8);
      *(_QWORD *)v7 = v8;
    }
    if (v8[2] > a4)
    {
      v10 = &v8[11 * a4];
      v11 = v10[12];
      v10[12] = a1;
      swift_endAccess(v26);
      v12 = v11;
      return swift_bridgeObjectRelease(v12);
    }
    __break(1u);
    goto LABEL_19;
  }
  if (qword_1002B3A28 != -1)
LABEL_19:
    swift_once(&qword_1002B3A28, sub_100174854);
  v24 = off_1002BF018;
  v25 = static os_log_type_t.error.getter();
  return os_log(_:dso:log:type:_:)("generateCarrierInfo index doesn't exists", 40, 2, &_mh_execute_header, v24, v25, _swiftEmptyArrayStorage);
}

uint64_t sub_10017AAF4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  _QWORD v24[3];
  _QWORD v25[3];
  char v26[8];

  if (!a1 || !*(_QWORD *)(a1 + 16))
  {
    if (qword_1002B3A28 != -1)
      swift_once(&qword_1002B3A28, sub_100174854);
    v13 = off_1002BF018;
    v14 = static os_log_type_t.error.getter();
    v15 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_1002402A0;
    if (a2)
    {
      swift_getErrorValue(a2, v26, v25);
      v17 = Error.localizedDescription.getter(v25[1], v25[2]);
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    v24[0] = v17;
    v24[1] = v18;
    v19 = sub_100146438((uint64_t *)&unk_1002B5640);
    v20 = String.init<A>(describing:)(v24, v19);
    v22 = v21;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_10016B1E0();
    *(_QWORD *)(v16 + 32) = v20;
    *(_QWORD *)(v16 + 40) = v22;
    os_log(_:dso:log:type:_:)("error occured  ---> %{public}s", 30, 2, &_mh_execute_header, v13, v14, v16);
    v12 = v16;
    return swift_bridgeObjectRelease(v12);
  }
  v7 = a3 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray;
  result = swift_beginAccess(a3 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray, v24, 0, 0);
  if ((a4 & 0x8000000000000000) == 0 && *(_QWORD *)(*(_QWORD *)v7 + 16) > (int64_t)a4)
  {
    swift_beginAccess(v7, v23, 33, 0);
    v9 = *(_QWORD **)v7;
    swift_bridgeObjectRetain(a1);
    result = swift_isUniquelyReferenced_nonNull_native(v9);
    *(_QWORD *)v7 = v9;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_100197F38(v9);
      v9 = (_QWORD *)result;
      *(_QWORD *)v7 = result;
    }
    if (v9[2] <= a4)
    {
      __break(1u);
      return result;
    }
    v10 = &v9[11 * a4];
    v11 = v10[13];
    v10[13] = a1;
    swift_endAccess(v23);
    v12 = v11;
    return swift_bridgeObjectRelease(v12);
  }
  return result;
}

uint64_t sub_10017ACDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  _QWORD v24[3];
  _QWORD v25[3];
  char v26[8];

  if (!a1 || !*(_QWORD *)(a1 + 16))
  {
    if (qword_1002B3A28 != -1)
      swift_once(&qword_1002B3A28, sub_100174854);
    v13 = off_1002BF018;
    v14 = static os_log_type_t.error.getter();
    v15 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_1002402A0;
    if (a2)
    {
      swift_getErrorValue(a2, v26, v25);
      v17 = Error.localizedDescription.getter(v25[1], v25[2]);
    }
    else
    {
      v17 = 0;
      v18 = 0;
    }
    v24[0] = v17;
    v24[1] = v18;
    v19 = sub_100146438((uint64_t *)&unk_1002B5640);
    v20 = String.init<A>(describing:)(v24, v19);
    v22 = v21;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_10016B1E0();
    *(_QWORD *)(v16 + 32) = v20;
    *(_QWORD *)(v16 + 40) = v22;
    os_log(_:dso:log:type:_:)("error occured  ---> %{public}s", 30, 2, &_mh_execute_header, v13, v14, v16);
    v12 = v16;
    return swift_bridgeObjectRelease(v12);
  }
  v7 = a3 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray;
  result = swift_beginAccess(a3 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray, v24, 0, 0);
  if ((a4 & 0x8000000000000000) == 0 && *(_QWORD *)(*(_QWORD *)v7 + 16) > (int64_t)a4)
  {
    swift_beginAccess(v7, v23, 33, 0);
    v9 = *(_QWORD **)v7;
    swift_bridgeObjectRetain(a1);
    result = swift_isUniquelyReferenced_nonNull_native(v9);
    *(_QWORD *)v7 = v9;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_100197F38(v9);
      v9 = (_QWORD *)result;
      *(_QWORD *)v7 = result;
    }
    if (v9[2] <= a4)
    {
      __break(1u);
      return result;
    }
    v10 = &v9[11 * a4];
    v11 = v10[14];
    v10[14] = a1;
    swift_endAccess(v23);
    v12 = v11;
    return swift_bridgeObjectRelease(v12);
  }
  return result;
}

void sub_10017AEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[5];
  uint64_t v13;
  _BYTE v14[24];

  if (qword_1002B3A28 != -1)
    a1 = swift_once(&qword_1002B3A28, sub_100174854);
  v5 = off_1002BF018;
  v6 = static os_log_type_t.default.getter(a1, a2, a3, a4);
  os_log(_:dso:log:type:_:)("CoreTelephonyService - didBecomeActiveNotification", 50, 2, &_mh_execute_header, v5, v6, _swiftEmptyArrayStorage);
  v7 = (uint64_t *)(a2 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray);
  swift_beginAccess(a2 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray, v14, 1, 0);
  v8 = *v7;
  *v7 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v8);
  v9 = *(void **)(a2 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client);
  v10 = swift_allocObject(&unk_100264688, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, a2);
  aBlock[4] = sub_10017CFA0;
  v13 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001780B8;
  aBlock[3] = &unk_100264C40;
  v11 = _Block_copy(aBlock);
  objc_msgSend(v9, "getSubscriptionInfo:", v11, swift_release(v13).n128_f64[0]);
  _Block_release(v11);
}

uint64_t type metadata accessor for CoreTelephonyService()
{
  return objc_opt_self(_TtC13FTMInternal_420CoreTelephonyService);
}

void sub_10017B064(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v4;
  const char *v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  id v31;
  unsigned __int8 v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int64x2_t *v43;
  char *i;
  id v45;
  unsigned __int8 v46;
  _QWORD *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  id v65;
  _QWORD *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  id v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  id v76;
  void *v77;
  const char *v78;
  char *v79;
  void *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  unsigned __int8 v86;
  __int128 v87;
  _QWORD aBlock[5];
  uint64_t v89;
  char v90[24];
  _QWORD v91[3];
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;

  v5 = v4;
  v7 = (char *)a1;
  if (qword_1002B3A28 != -1)
LABEL_52:
    a1 = swift_once(&qword_1002B3A28, sub_100174854);
  static os_log_type_t.default.getter(a1, a2, a3, a4);
  v8 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100242010;
  v91[0] = v7;
  v10 = v7;
  v11 = sub_100146438(&qword_1002B56B0);
  v12 = String.init<A>(describing:)(v91, v11);
  v14 = v13;
  v81 = v7;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  v15 = sub_10016B1E0();
  *(_QWORD *)(v9 + 64) = v15;
  *(_QWORD *)(v9 + 32) = v12;
  *(_QWORD *)(v9 + 40) = v14;
  v91[0] = a2;
  v16 = a2;
  v17 = sub_100146438(&qword_1002B56C0);
  v18 = String.init<A>(describing:)(v91, v17);
  *(_QWORD *)(v9 + 96) = &type metadata for String;
  *(_QWORD *)(v9 + 104) = v15;
  *(_QWORD *)(v9 + 72) = v18;
  *(_QWORD *)(v9 + 80) = v19;
  os_log(_:dso:log:type:_:)("context  ---> %s and info ---> %s", v78, v79);
  swift_bridgeObjectRelease(v9);
  if (!v7)
  {
    __break(1u);
    return;
  }
  v20 = &selRef_recoverHistsCount;
  if (objc_msgSend(v10, "slotID") == (id)1)
    v21 = 0x8000000100212110;
  else
    v21 = 0x80000001002120F0;
  v22 = (char *)&v5[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray];
  swift_beginAccess(&v5[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray], v90, 0, 0);
  v23 = *(_QWORD *)(*(_QWORD *)v22 + 16);
  v82 = v10;
  v83 = v22;
  v79 = v16;
  v80 = a2;
  if (v23 == 1)
  {
    v30 = *(id *)(*(_QWORD *)v22 + 48);
    if (v30 != objc_msgSend(v10, "slotID"))
    {
      v31 = objc_msgSend(v10, "slotID");
      v32 = objc_msgSend(v10, "isSimPresent");
      v33 = objc_msgSend(v10, "phoneNumber");
      if (v33)
      {
        v34 = v33;
        v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
        v37 = v36;

      }
      else
      {
        v35 = 0;
        v37 = 0xE000000000000000;
      }
      swift_beginAccess(v83, aBlock, 33, 0);
      v91[0] = 0;
      v91[1] = 0xE000000000000000;
      v91[2] = v31;
      v92 = v32;
      v93 = 0xD000000000000010;
      v94 = v21;
      v95 = v35;
      v96 = v37;
      v22 = v83;
      v97 = _swiftEmptyArrayStorage;
      v98 = _swiftEmptyArrayStorage;
      v99 = _swiftEmptyArrayStorage;
      sub_100196B5C(0, 0, (uint64_t)v91);
      swift_endAccess(aBlock);
      v10 = v82;
      goto LABEL_22;
    }
  }
  else if (!v23)
  {
    v24 = objc_msgSend(v10, "slotID");
    v86 = objc_msgSend(v10, "isSimPresent");
    v25 = objc_msgSend(v10, "phoneNumber");
    if (v25)
    {
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v29 = v28;

    }
    else
    {
      v27 = 0;
      v29 = 0xE000000000000000;
    }
    swift_beginAccess(v22, v91, 33, 0);
    v38 = *(_QWORD **)v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v22);
    *(_QWORD *)v22 = v38;
    v40 = (uint64_t)v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v38 = sub_1001C7224(0, v38[2] + 1, 1, v38);
      *(_QWORD *)v22 = v38;
    }
    v42 = v38[2];
    v41 = v38[3];
    if (v42 >= v41 >> 1)
    {
      v38 = sub_1001C7224((_QWORD *)(v41 > 1), v42 + 1, 1, v38);
      *(_QWORD *)v22 = v38;
    }
    v38[2] = v42 + 1;
    v43 = (int64x2_t *)&v38[11 * v42];
    v43[2].i64[0] = 0;
    v43[2].i64[1] = 0xE000000000000000;
    v43[3].i64[0] = v40;
    v43[3].i8[8] = v86;
    v43[4].i64[0] = 0xD000000000000010;
    v43[4].i64[1] = v21;
    v43[5].i64[0] = v27;
    v43[5].i64[1] = v29;
    v43[6] = vdupq_n_s64((unint64_t)_swiftEmptyArrayStorage);
    v43[7].i64[0] = (uint64_t)_swiftEmptyArrayStorage;
    swift_endAccess(v91);
    v10 = v82;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease(v21);
LABEL_22:
  v7 = *(char **)(*(_QWORD *)v22 + 16);
  if (v7)
  {
    v78 = v5;
    v5 = 0;
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)i >= *(_QWORD *)(*(_QWORD *)v22 + 16))
      {
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      v45 = *(id *)&v5[*(_QWORD *)v22 + 48];
      if (v45 == objc_msgSend(v10, "slotID"))
      {
        v46 = objc_msgSend(v10, "isSimPresent");
        swift_beginAccess(v22, aBlock, 33, 0);
        v47 = *(_QWORD **)v22;
        v48 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v22);
        *(_QWORD *)v22 = v47;
        if ((v48 & 1) == 0)
        {
          v47 = sub_100197F38(v47);
          *(_QWORD *)v22 = v47;
        }
        if ((unint64_t)i >= v47[2])
          goto LABEL_51;
        v5[(_QWORD)v47 + 56] = v46;
        swift_endAccess(aBlock);
      }
      v5 += 88;
    }
    v49 = *(_QWORD *)v22;
    v50 = *(_QWORD *)(*(_QWORD *)v22 + 16);
    if (v50)
    {
      swift_bridgeObjectRetain(*(_QWORD *)v22);
      v51 = 0;
      v52 = _swiftEmptyArrayStorage;
      do
      {
        v56 = v49 + v51;
        if (*(_BYTE *)(v49 + v51 + 56) == 1)
        {
          v57 = *(_QWORD *)(v56 + 32);
          v58 = *(_QWORD *)(v56 + 40);
          v84 = *(_QWORD *)(v56 + 48);
          v59 = *(_QWORD *)(v56 + 64);
          v60 = *(_QWORD *)(v56 + 72);
          v61 = *(_QWORD *)(v56 + 80);
          v85 = *(_OWORD *)(v56 + 104);
          v87 = *(_OWORD *)(v56 + 88);
          swift_bridgeObjectRetain(v58);
          swift_bridgeObjectRetain(v60);
          swift_bridgeObjectRetain(v87);
          swift_bridgeObjectRetain(*((_QWORD *)&v87 + 1));
          swift_bridgeObjectRetain(v85);
          swift_bridgeObjectRetain(*((_QWORD *)&v85 + 1));
          v62 = swift_isUniquelyReferenced_nonNull_native(v52);
          aBlock[0] = v52;
          if ((v62 & 1) == 0)
          {
            sub_100195A50(0, v52[2] + 1, 1);
            v52 = (_QWORD *)aBlock[0];
          }
          v54 = v52[2];
          v53 = v52[3];
          if (v54 >= v53 >> 1)
          {
            sub_100195A50(v53 > 1, v54 + 1, 1);
            v52 = (_QWORD *)aBlock[0];
          }
          v52[2] = v54 + 1;
          v55 = &v52[11 * v54];
          v55[4] = v57;
          v55[5] = v58;
          v22 = v83;
          v55[6] = v84;
          *((_BYTE *)v55 + 56) = 1;
          v55[8] = v59;
          v55[9] = v60;
          v55[10] = v61;
          *(_OWORD *)(v55 + 11) = v87;
          *(_OWORD *)(v55 + 13) = v85;
          v10 = v82;
          v20 = &selRef_recoverHistsCount;
        }
        v51 += 88;
        --v50;
      }
      while (v50);
      swift_bridgeObjectRelease(v49);
    }
    else
    {
      v52 = _swiftEmptyArrayStorage;
    }
    v5 = v78;
  }
  else
  {
    v52 = _swiftEmptyArrayStorage;
  }
  v5[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_isSimAdded] = v52[2] == 2;
  swift_beginAccess(v22, aBlock, 33, 0);
  v63 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v22);
  v64 = *(_QWORD *)v22;
  if ((v63 & 1) != 0)
  {
    sub_100198C68(0, *(_QWORD *)(v64 + 16));
  }
  else
  {
    *(_QWORD *)v22 = sub_1001969D8(0, *(_QWORD *)(v64 + 24) >> 1);
    swift_bridgeObjectRelease(v64);
  }
  sub_1001DA74C((uint64_t)v52);
  swift_endAccess(aBlock);
  v65 = objc_msgSend(v10, v20[173]);
  v66 = (_QWORD *)swift_allocObject(&unk_100264CA0, 40, 7);
  v66[2] = v80;
  v66[3] = v81;
  v66[4] = v5;
  v67 = (char *)v5;
  v68 = v10;
  v69 = v79;
  v70 = v67;
  sub_100177F90((uint64_t)v65, (uint64_t)sub_10017F714, (uint64_t)v66);
  v71 = objc_msgSend(v68, v20[173], swift_release(v66).n128_f64[0]);
  sub_100177230((uint64_t)v71);
  v72 = *(_QWORD *)&v70[OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_hManager];
  if (*(_BYTE *)(v72 + 26) == 1)
    sub_100177854((uint64_t)objc_msgSend(v68, v20[173]));
  objc_msgSend(*(id *)(v72 + 16), "invalidate", v78);
  v73 = (void *)objc_opt_self(NSTimer);
  aBlock[4] = sub_10017F720;
  v89 = v72;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100184690;
  aBlock[3] = &unk_100264CB8;
  v74 = _Block_copy(aBlock);
  v75 = v89;
  swift_retain(v72);
  swift_release(v75);
  v76 = objc_msgSend(v73, "scheduledTimerWithTimeInterval:repeats:block:", 0, v74, 2.0);
  _Block_release(v74);
  v77 = *(void **)(v72 + 16);
  *(_QWORD *)(v72 + 16) = v76;

}

uint64_t sub_10017B890(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  void *object;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  _QWORD v43[3];
  char v44[8];
  uint64_t aBlock;
  unint64_t v46;
  uint64_t (*v47)();
  void *v48;
  void (*v49)();
  _QWORD *v50;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v13 - 8);
  v40 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v16 = sub_100146438(&qword_1002B5660);
    v17 = swift_allocObject(v16, 64, 7);
    *(_OWORD *)(v17 + 16) = xmmword_1002402A0;
    aBlock = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(v46);
    aBlock = 0x636F20726F727265;
    v46 = 0xEF20646572727563;
    swift_getErrorValue(a2, v44, v43);
    v42[0] = Error.localizedDescription.getter(v43[1], v43[2]);
    v42[1] = v18;
    v19 = sub_100146438((uint64_t *)&unk_1002B5640);
    v20._countAndFlagsBits = String.init<A>(describing:)(v42, v19);
    object = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object);
    v22 = aBlock;
    v23 = v46;
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 32) = v22;
    *(_QWORD *)(v17 + 40) = v23;
    print(_:separator:terminator:)(v17, 32, 0xE100000000000000, 10, 0xE100000000000000);
    swift_bridgeObjectRelease(v17);
  }
  v24 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  v25 = (void *)static OS_dispatch_queue.main.getter(v24);
  v26 = (_QWORD *)swift_allocObject(&unk_100264CF0, 48, 7);
  v26[2] = a3;
  v26[3] = a1;
  v26[4] = a4;
  v26[5] = a5;
  v49 = sub_10017F764;
  v50 = v26;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v46 = 1107296256;
  v47 = sub_1001BE428;
  v48 = &unk_100264D08;
  v27 = _Block_copy(&aBlock);
  v28 = v50;
  v29 = a4;
  v30 = a5;
  v31 = a3;
  v32 = a1;
  swift_release(v28);
  static DispatchQoS.unspecified.getter(v33);
  aBlock = (uint64_t)_swiftEmptyArrayStorage;
  v34 = sub_10017CF34();
  v35 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v36 = sub_10014BEC0((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v35, v36, v10, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v27);
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v15, v40);
}

void sub_10017BB94(void *a1, void *a2, void *a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char **v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t (*v55)(char *, uint64_t);
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  uint64_t (*v68)(char *, uint64_t);
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  id v79;
  void *v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _QWORD *v90;
  uint64_t (*v91)(char *, uint64_t);
  void *v92;
  uint64_t v93;
  void *v94;
  _QWORD *v95;
  char *v96;
  unint64_t v97;
  char v98;
  __int128 *v99;
  id v100;
  id v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  int v106;
  int v107;
  void *v108;
  id v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(char *, uint64_t);
  uint64_t v120;
  id v121;
  __int128 v122;
  id v123;
  void (*v124)(char *, char *, _QWORD *);
  uint64_t countAndFlagsBits;
  _BOOL4 v126;
  uint64_t v127;
  uint64_t (*object)(char *, uint64_t);
  char *v129;
  id v130;
  uint64_t v131;
  char *v132;
  _QWORD *v133;
  uint64_t v134;
  id v135;
  id v136;
  void *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;

  v134 = a4;
  v135 = a3;
  v136 = a2;
  v5 = (_QWORD *)type metadata accessor for Date(0);
  v6 = *(v5 - 1);
  __chkstk_darwin(v5);
  v8 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (char **)type metadata accessor for Metric(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(uint64_t (***)(char *, uint64_t))(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v22 = (char *)&v111 - v21;
  if (qword_1002B3A28 != -1)
    goto LABEL_66;
  while (1)
  {
    v132 = v8;
    v133 = v5;
    v23 = off_1002BF018;
    v24 = static os_log_type_t.default.getter(v17, v18, v19, v20);
    os_log(_:dso:log:type:_:)("CT - cellMonitorupdate", 22, 2, &_mh_execute_header, v23, v24, _swiftEmptyArrayStorage);
    if (!a1)
    {
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    v25 = objc_msgSend(a1, "legacyInfo");
    if (!v25)
    {
      v140 = 0u;
      v141 = 0u;
LABEL_21:
      v29 = sub_10014BDE0((uint64_t)&v140, (uint64_t *)&unk_1002B5670);
LABEL_22:
      v47 = off_1002BF018;
      v48 = static os_log_type_t.default.getter(v29, v30, v31, v32);
      os_log(_:dso:log:type:_:)("CT - unable to update", 21, 2, &_mh_execute_header, v47, v48, _swiftEmptyArrayStorage);
      return;
    }
    v26 = v25;
    v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, (char *)&type metadata for Any + 8);

    if (!*(_QWORD *)(v27 + 16))
    {
      v140 = 0u;
      v141 = 0u;
      swift_bridgeObjectRelease(v27);
      goto LABEL_21;
    }
    sub_10017E2BC(v27 + 32, (uint64_t)&v140);
    swift_bridgeObjectRelease(v27);
    if (!*((_QWORD *)&v141 + 1))
      goto LABEL_21;
    v28 = sub_100146438(&qword_1002B6E50);
    v29 = swift_dynamicCast(&v138, &v140, (char *)&type metadata for Any + 8, v28, 6);
    if (!(_DWORD)v29)
      goto LABEL_22;
    v5 = (_QWORD *)v138;
    if (!v136 || (v131 = v28, (v33 = objc_msgSend(v136, "rsrp")) == 0))
    {
      v29 = swift_bridgeObjectRelease(v5);
      goto LABEL_22;
    }
    v34 = v33;
    if (!v5[2])
    {
      swift_bridgeObjectRelease(v5);

      goto LABEL_22;
    }
    v130 = v33;
    v35 = sub_1001C7C98(0xD000000000000027, 0x8000000100210290);
    v129 = (char *)v5;
    if ((v36 & 1) != 0)
    {
      sub_10017E2BC(v5[7] + 32 * v35, (uint64_t)&v140);
      v35 = swift_dynamicCast(&v138, &v140, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      if ((v35 & 1) != 0)
      {
        v5 = (_QWORD *)*((_QWORD *)&v138 + 1);
        v39 = HIBYTE(*((_QWORD *)&v138 + 1)) & 0xFLL;
        if ((*((_QWORD *)&v138 + 1) & 0x2000000000000000) == 0)
          v39 = v138 & 0xFFFFFFFFFFFFLL;
        if (!v39)
        {
          v35 = swift_bridgeObjectRelease(*((_QWORD *)&v138 + 1));
          goto LABEL_37;
        }
        object = (uint64_t (*)(char *, uint64_t))v138;
        UUID.init()(v35);
        if (!v135)
          goto LABEL_68;
        v126 = objc_msgSend(v135, "slotID") != (id)1;
        v40 = String.lowercased()();
        countAndFlagsBits = v40._countAndFlagsBits;
        object = (uint64_t (*)(char *, uint64_t))v40._object;
        swift_bridgeObjectRelease(v5);
        v41 = String.lowercased()();
        v5 = v41._object;
        v42 = object;
        if (countAndFlagsBits == v41._countAndFlagsBits && object == v41._object)
        {
          v43 = swift_bridgeObjectRelease_n(object, 2);
        }
        else
        {
          LODWORD(countAndFlagsBits) = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, v41._countAndFlagsBits, v41._object, 0);
          swift_bridgeObjectRelease(v42);
          v43 = swift_bridgeObjectRelease(v41._object);
          if ((countAndFlagsBits & 1) == 0)
          {
            v35 = v13[1](v22, v12);
            goto LABEL_37;
          }
        }
        object = (uint64_t (*)(char *, uint64_t))off_1002BF018;
        LODWORD(countAndFlagsBits) = static os_log_type_t.default.getter(v43, v44, v45, v46);
        v115 = sub_100146438((uint64_t *)&unk_1002B57E0);
        v49 = swift_allocObject(v115, 112, 7);
        v113 = xmmword_100242010;
        *(_OWORD *)(v49 + 16) = xmmword_100242010;
        v50 = objc_msgSend(v135, "slotID");
        v51 = sub_10016B1E0();
        v52 = 48;
        if (v50 != (id)1)
          v52 = 49;
        *(_QWORD *)(v49 + 56) = &type metadata for String;
        *(_QWORD *)(v49 + 64) = v51;
        v114 = v51;
        *(_QWORD *)(v49 + 32) = v52;
        *(_QWORD *)(v49 + 40) = 0xE100000000000000;
        v112 = sub_1001548C8(0, &qword_1002B5680, NSNumber_ptr);
        *(_QWORD *)(v49 + 96) = v112;
        v111 = sub_10017E27C(&qword_1002B56C8, &qword_1002B5680, NSNumber_ptr);
        *(_QWORD *)(v49 + 104) = v111;
        v53 = v130;
        *(_QWORD *)(v49 + 72) = v130;
        v123 = v53;
        os_log(_:dso:log:type:_:)("RSRP11~CT %{private}@ - %{private}@", 35, 2, &_mh_execute_header, object, countAndFlagsBits, v49);
        swift_bridgeObjectRelease(v49);
        if (qword_1002B3A80 != -1)
          swift_once(&qword_1002B3A80, sub_100184F00);
        v54 = (void *)qword_1002BF070;
        v55 = v13[2];
        v127 = v12;
        object = v55;
        ((void (*)(char *, char *, uint64_t))v55)(v16, v22, v12);
        v56 = sub_1001548C8(0, (unint64_t *)&unk_1002B6E10, NSString_ptr);
        countAndFlagsBits = v54;
        v124 = (void (*)(char *, char *, _QWORD *))NSString.init(stringLiteral:)("5G", 2, 2);
        *(_QWORD *)&v122 = NSString.init(stringLiteral:)("RAT", 3, 2);
        v121 = (id)NSString.init(stringLiteral:)("cell_rsrp", 9, 2);
        v120 = NSString.init(stringLiteral:)("cell_rsrp", 9, 2);
        v57 = objc_msgSend(v123, "description");
        v123 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
        v59 = v58;

        v123 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v59);
        v116 = v56;
        v60 = NSString.init(stringLiteral:)("INT", 3, 2);
        v61 = v132;
        v62 = Date.init()(v60);
        UUID.uuidString.getter(v62);
        v64 = v63;
        v119 = (uint64_t (*)(char *, uint64_t))String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v64);
        v118 = *((int *)v9 + 14);
        v117 = *((int *)v9 + 15);
        v65 = &v11[*((int *)v9 + 16)];
        *(_QWORD *)v65 = 0;
        *((_QWORD *)v65 + 1) = 0;
        ((void (*)(char *, char *, uint64_t))object)(v11, v16, v127);
        *(_QWORD *)&v11[*((int *)v9 + 5)] = v124;
        *(_QWORD *)&v11[*((int *)v9 + 6)] = v122;
        *(_QWORD *)&v11[*((int *)v9 + 7)] = v121;
        *(_QWORD *)&v11[*((int *)v9 + 8)] = v120;
        *(_QWORD *)&v11[*((int *)v9 + 9)] = v123;
        *(_QWORD *)&v11[*((int *)v9 + 10)] = v60;
        v66 = &v11[*((int *)v9 + 11)];
        v67 = v133;
        v124 = *(void (**)(char *, char *, _QWORD *))(v6 + 16);
        v124(v66, v61, v133);
        *(_QWORD *)&v11[*((int *)v9 + 12)] = v119;
        *(_DWORD *)&v11[*((int *)v9 + 13)] = v126;
        v11[v118] = 0;
        v11[v117] = 0;
        v123 = *(id *)(v6 + 8);
        ((void (*)(char *, _QWORD *))v123)(v61, v67);
        v68 = v13[1];
        v12 = v127;
        v68(v16, v127);
        swift_bridgeObjectRelease(*((_QWORD *)v65 + 1));
        v122 = xmmword_100242020;
        *(_OWORD *)v65 = xmmword_100242020;
        v5 = (_QWORD *)countAndFlagsBits;
        sub_10018732C((uint64_t)v11);

        sub_10017E214((uint64_t)v11);
        v69 = objc_msgSend(v136, "snr");
        if (v69)
        {
          v73 = v69;
          countAndFlagsBits = (uint64_t)off_1002BF018;
          LODWORD(v120) = static os_log_type_t.default.getter(v69, v70, v71, v72);
          v74 = swift_allocObject(v115, 112, 7);
          *(_OWORD *)(v74 + 16) = v113;
          v75 = objc_msgSend(v135, "slotID");
          v76 = 48;
          v77 = v114;
          *(_QWORD *)(v74 + 56) = &type metadata for String;
          *(_QWORD *)(v74 + 64) = v77;
          if (v75 != (id)1)
            v76 = 49;
          *(_QWORD *)(v74 + 32) = v76;
          *(_QWORD *)(v74 + 40) = 0xE100000000000000;
          v78 = v111;
          *(_QWORD *)(v74 + 96) = v112;
          *(_QWORD *)(v74 + 104) = v78;
          *(_QWORD *)(v74 + 72) = v73;
          v79 = v73;
          v121 = v79;
          os_log(_:dso:log:type:_:)("SNR11~CT %{private}@ - %{private}@", 34, 2, &_mh_execute_header, countAndFlagsBits, v120, v74);
          swift_bridgeObjectRelease(v74);
          v80 = (void *)qword_1002BF070;
          ((void (*)(char *, char *, uint64_t))object)(v16, v22, v12);
          countAndFlagsBits = v80;
          v120 = NSString.init(stringLiteral:)("5G", 2, 2);
          v118 = NSString.init(stringLiteral:)("RAT", 3, 2);
          v117 = NSString.init(stringLiteral:)("snr", 3, 2);
          v115 = NSString.init(stringLiteral:)("snr", 3, 2);
          v81 = objc_msgSend(v79, "description");
          v119 = v68;
          v82 = v81;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
          v84 = v83;

          v114 = (unint64_t)String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v84);
          v116 = NSString.init(stringLiteral:)("INT", 3, 2);
          v85 = v132;
          v86 = Date.init()(v116);
          UUID.uuidString.getter(v86);
          v88 = v87;
          *(_QWORD *)&v113 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v88);
          v6 = *((int *)v9 + 15);
          v112 = *((int *)v9 + 14);
          v89 = &v11[*((int *)v9 + 16)];
          *(_QWORD *)v89 = 0;
          *((_QWORD *)v89 + 1) = 0;
          ((void (*)(char *, char *, uint64_t))object)(v11, v16, v12);
          *(_QWORD *)&v11[*((int *)v9 + 5)] = v120;
          *(_QWORD *)&v11[*((int *)v9 + 6)] = v118;
          *(_QWORD *)&v11[*((int *)v9 + 7)] = v117;
          *(_QWORD *)&v11[*((int *)v9 + 8)] = v115;
          *(_QWORD *)&v11[*((int *)v9 + 9)] = v114;
          *(_QWORD *)&v11[*((int *)v9 + 10)] = v116;
          v90 = v133;
          v124(&v11[*((int *)v9 + 11)], v85, v133);
          *(_QWORD *)&v11[*((int *)v9 + 12)] = v113;
          *(_DWORD *)&v11[*((int *)v9 + 13)] = v126;
          v11[v112] = 0;
          v11[v6] = 0;
          ((void (*)(char *, _QWORD *))v123)(v85, v90);
          v91 = v119;
          v119(v16, v12);
          swift_bridgeObjectRelease(*((_QWORD *)v89 + 1));
          *(_OWORD *)v89 = v122;
          v5 = (_QWORD *)countAndFlagsBits;
          sub_10018732C((uint64_t)v11);

          sub_10017E214((uint64_t)v11);
          v35 = v91(v22, v12);
        }
        else
        {
          v35 = v68(v22, v12);
        }
      }
    }
LABEL_37:
    v8 = v129;
    v9 = &selRef_setEhplmnLists_;
    if (qword_1002B3A78 != -1)
      v35 = swift_once(&qword_1002B3A78, sub_100183CA4);
    v13 = (uint64_t (**)(char *, uint64_t))v135;
    if (*(_BYTE *)(qword_1002BF068 + 24) == 1)
    {
      v92 = off_1002BF018;
      v5 = (_QWORD *)static os_log_type_t.default.getter(v35, v36, v37, v38);
      v93 = sub_100146438((uint64_t *)&unk_1002B57E0);
      v16 = (char *)swift_allocObject(v93, 72, 7);
      *((_OWORD *)v16 + 1) = xmmword_1002402A0;
      *((_QWORD *)v16 + 7) = v131;
      *((_QWORD *)v16 + 8) = sub_10014BEC0(&qword_1002B5688, &qword_1002B6E50, (uint64_t)&protocol conformance descriptor for [A : B]);
      *((_QWORD *)v16 + 4) = v8;
      swift_bridgeObjectRetain(v8);
      v94 = v92;
      v9 = &selRef_setEhplmnLists_;
      os_log(_:dso:log:type:_:)("CT - %{public}@", 15, 2, &_mh_execute_header, v94, v5, v16);
      swift_bridgeObjectRelease(v16);
    }
    v95 = objc_msgSend(a1, v9[332]);
    if (!v95)
    {
      v140 = 0u;
      v141 = 0u;
LABEL_51:
      v99 = &v140;
LABEL_52:
      sub_10014BDE0((uint64_t)v99, (uint64_t *)&unk_1002B5670);
LABEL_53:
      if (v13)
        goto LABEL_54;
      goto LABEL_65;
    }
    v5 = v95;
    v9 = (char **)static Array._unconditionallyBridgeFromObjectiveC(_:)(v95, (char *)&type metadata for Any + 8);

    v96 = v9[2];
    if (v96)
    {
      sub_10017E2BC((uint64_t)&v9[4 * (_QWORD)v96], (uint64_t)&v140);
    }
    else
    {
      v140 = 0u;
      v141 = 0u;
    }
    swift_bridgeObjectRelease(v9);
    if (!*((_QWORD *)&v141 + 1))
      goto LABEL_51;
    if ((swift_dynamicCast(&v138, &v140, (char *)&type metadata for Any + 8, v131, 6) & 1) == 0)
      goto LABEL_53;
    v5 = (_QWORD *)v138;
    if (*(_QWORD *)(v138 + 16) && (v97 = sub_1001C7C98(0xD000000000000012, 0x80000001002123F0), (v98 & 1) != 0))
    {
      sub_10017E2BC(v5[7] + 32 * v97, (uint64_t)&v138);
    }
    else
    {
      v138 = 0u;
      v139 = 0u;
    }
    swift_bridgeObjectRelease(v5);
    if (!*((_QWORD *)&v139 + 1))
    {
      v99 = &v138;
      goto LABEL_52;
    }
    sub_10017F278(&v138, &v140);
    v101 = objc_msgSend(v136, "snr");
    if (v101)
      break;
    sub_10014652C(&v140);
    if (v13)
    {
LABEL_54:
      v100 = v130;
      sub_10017E420((uint64_t)v8, (uint64_t *)objc_msgSend(v13, "slotID"));
      swift_bridgeObjectRelease(v8);

      return;
    }
LABEL_65:
    __break(1u);
LABEL_66:
    v17 = swift_once(&qword_1002B3A28, sub_100174854);
  }
  v102 = v101;
  v103 = (uint64_t)v8;
  sub_10017E2BC((uint64_t)&v140, (uint64_t)&v138);
  v104 = sub_1001548C8(0, &qword_1002B5680, NSNumber_ptr);
  v105 = v130;
  v106 = swift_dynamicCast(&v137, &v138, (char *)&type metadata for Any + 8, v104, 6);
  if (!v13)
  {
LABEL_69:
    __break(1u);
    return;
  }
  v107 = v106;
  v108 = v137;
  v109 = v102;
  sub_10017E420(v103, (uint64_t *)objc_msgSend(v13, "slotID"));
  swift_bridgeObjectRelease(v103);

  if (v107)
    v110 = v108;
  else
    v110 = 0;

  sub_10014652C(&v140);
}

uint64_t destroy for CarrierInfoObject(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[9]);
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for CarrierInfoObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for CarrierInfoObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

__n128 initializeWithTake for CarrierInfoObject(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for CarrierInfoObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  v8 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v9 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CarrierInfoObject(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CarrierInfoObject(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CarrierInfoObject()
{
  return &type metadata for CarrierInfoObject;
}

uint64_t sub_10017CED8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10017CEFC()
{
  sub_10017656C();
}

uint64_t sub_10017CF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10017CF2C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_10017CF34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B6530;
  if (!qword_1002B6530)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1002B6530);
  }
  return result;
}

uint64_t sub_10017CF7C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10017CFA0(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100176848(a1, a2, v2);
}

uint64_t sub_10017CFA8(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001780BC(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10017CFB0(uint64_t (**a1)(char *, _QWORD), uint64_t a2)
{
  uint64_t v2;

  return sub_100178D28(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

_QWORD *sub_10017CFB8(uint64_t a1)
{
  return sub_10017CFD0(a1, &qword_1002B5698);
}

_QWORD *sub_10017CFC4(uint64_t a1)
{
  return sub_10017CFD0(a1, (uint64_t *)&unk_1002B56A0);
}

_QWORD *sub_10017CFD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *result;

  if (a1 < 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else if (a1)
  {
    v3 = sub_100146438(a2);
    result = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v3);
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_10017D06C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 36, 7);
}

void sub_10017D098()
{
  uint64_t v0;

  sub_100179CB8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_DWORD *)(v0 + 32));
}

double sub_10017D0A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_1001C7C98(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001CA558();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_10017F278((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v9), a3);
    sub_1001D5914(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double sub_10017D194@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_1001C7CFC(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001CA73C();
      v10 = v13;
    }
    sub_10017F3E8(*(_QWORD *)(v10 + 48) + 40 * v7);
    sub_10017F278((_OWORD *)(*(_QWORD *)(v10 + 56) + 32 * v7), a2);
    sub_1001D5AE8(v7, v10);
    v11 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_10017D27C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_1001C7C98(a1, a2);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001CA920();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_1001D5CB0(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10017D358(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  char v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  const char *v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  const char *v54;
  unint64_t v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Swift::String v77;
  __int128 v78;
  uint64_t v79;
  void *v80;
  void *v81;
  Swift::String v82;
  char isUniquelyReferenced_nonNull_native;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD v95[2];
  __int128 v96;
  __int128 v97;

  v2 = sub_1001BE7A4((uint64_t)_swiftEmptyArrayStorage);
  v6 = v2;
  if (qword_1002B3A28 == -1)
    goto LABEL_2;
LABEL_108:
  v2 = swift_once(&qword_1002B3A28, sub_100174854);
LABEL_2:
  v7 = off_1002BF018;
  v8 = static os_log_type_t.default.getter(v2, v3, v4, v5);
  os_log(_:dso:log:type:_:)("CT - 2", 6, 2, &_mh_execute_header, v7, v8, _swiftEmptyArrayStorage);
  v88 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a1 + 64);
  v89 = (unint64_t)(v9 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v86 = 0;
  v90 = 0;
  v87 = 0;
  if (v11)
  {
LABEL_5:
    v13 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v14 = v13 | (v90 << 6);
LABEL_6:
    v15 = *(_QWORD *)(a1 + 56);
    v16 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v14);
    v17 = v16[1];
    *(_QWORD *)&v94 = *v16;
    *((_QWORD *)&v94 + 1) = v17;
    sub_10017E2BC(v15 + 32 * v14, (uint64_t)v95);
    swift_bridgeObjectRetain(v17);
    goto LABEL_25;
  }
  while (1)
  {
    v18 = v90 + 1;
    if (__OFADD__(v90, 1))
    {
      __break(1u);
      goto LABEL_108;
    }
    if (v18 < v89)
    {
      v19 = *(_QWORD *)(v88 + 8 * v18);
      if (v19)
        goto LABEL_10;
      v20 = v90 + 2;
      ++v90;
      if (v18 + 1 < v89)
      {
        v19 = *(_QWORD *)(v88 + 8 * v20);
        if (v19)
          goto LABEL_13;
        v90 = v18 + 1;
        if (v18 + 2 < v89)
        {
          v19 = *(_QWORD *)(v88 + 8 * (v18 + 2));
          if (v19)
          {
            v18 += 2;
            goto LABEL_10;
          }
          v20 = v18 + 3;
          v90 = v18 + 2;
          if (v18 + 3 < v89)
            break;
        }
      }
    }
LABEL_24:
    v11 = 0;
    memset(v95, 0, sizeof(v95));
    v94 = 0u;
LABEL_25:
    sub_10017F288((uint64_t)&v94, (uint64_t)&v96);
    v21 = *((_QWORD *)&v96 + 1);
    if (!*((_QWORD *)&v96 + 1))
    {
      swift_release(a1);
      if (v87 >= 1 && v86 >= 1)
      {
        *(_QWORD *)&v96 = v87;
        v74 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v76 = v75;
        *(_QWORD *)&v96 = v74;
        *((_QWORD *)&v96 + 1) = v75;
        swift_bridgeObjectRetain(v75);
        v77._countAndFlagsBits = 32;
        v77._object = (void *)0xE100000000000000;
        String.append(_:)(v77);
        swift_bridgeObjectRelease(v76);
        v78 = v96;
        *(_QWORD *)&v96 = v86;
        v79 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v81 = v80;
        v96 = v78;
        swift_bridgeObjectRetain(*((_QWORD *)&v78 + 1));
        v82._countAndFlagsBits = v79;
        v82._object = v81;
        String.append(_:)(v82);
        swift_bridgeObjectRelease(*((_QWORD *)&v78 + 1));
        swift_bridgeObjectRelease(v81);
        *((_QWORD *)&v97 + 1) = &type metadata for String;
        sub_10017F278(&v96, &v94);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
        *(_QWORD *)&v92 = v6;
        sub_1001C98B8(&v94, 1313688656, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
        v6 = v92;
        v70 = swift_bridgeObjectRelease(0x8000000000000000);
      }
      v84 = off_1002BF018;
      v85 = static os_log_type_t.default.getter(v70, v71, v72, v73);
      os_log(_:dso:log:type:_:)("CT - 5", 6, 2, &_mh_execute_header, v84, v85, _swiftEmptyArrayStorage);
      return v6;
    }
    v22 = v96;
    v23 = (uint64_t)sub_10017F278(&v97, &v94);
    if (v22 != 0xD000000000000012 || v21 != 0x8000000100212490)
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, 0xD000000000000012, 0x8000000100212490, 0);
      if ((v23 & 1) == 0)
      {
        if (v22 == 0xD000000000000012 && v21 == 0x80000001002123F0
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, 0xD000000000000012, 0x80000001002123F0, 0) & 1) != 0)
        {
          swift_bridgeObjectRetain(v21);
          swift_bridgeObjectRetain(v6);
          v27 = sub_1001C7C98(v22, v21);
          v29 = v28;
          swift_bridgeObjectRelease(v6);
          if ((v29 & 1) != 0)
          {
            v30 = swift_isUniquelyReferenced_nonNull_native(v6);
            v91 = v6;
            if ((v30 & 1) == 0)
            {
              sub_1001CA558();
              v6 = v91;
            }
            swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v27 + 8));
            sub_10017F278((_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * v27), &v92);
            sub_1001D5914(v27, v6);
            swift_bridgeObjectRelease(0x8000000000000000);
          }
          else
          {
            v92 = 0u;
            v93 = 0u;
          }
          v31 = v21;
          goto LABEL_38;
        }
        if (v22 == 0xD000000000000011 && v21 == 0x80000001002124B0
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, 0xD000000000000011, 0x80000001002124B0, 0) & 1) != 0)
        {
          sub_10017E2BC((uint64_t)&v94, (uint64_t)&v92);
          if ((swift_dynamicCast(&v91, &v92, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
          {
            v87 = v91;
            swift_bridgeObjectRetain(v6);
            v40 = "kCTCellMonitorRSRP";
            goto LABEL_62;
          }
        }
        if (v22 == 0xD000000000000011 && v21 == 0x80000001002124D0
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, 0xD000000000000011, 0x80000001002124D0, 0) & 1) != 0)
        {
          sub_10017E2BC((uint64_t)&v94, (uint64_t)&v92);
          if ((swift_dynamicCast(&v91, &v92, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
          {
            v86 = v91;
            swift_bridgeObjectRetain(v6);
            v40 = "kCTCellMonitorMCC";
LABEL_62:
            v43 = sub_1001C7C98(0xD000000000000011, (unint64_t)v40 | 0x8000000000000000);
            v45 = v44;
            swift_bridgeObjectRelease(v6);
            if ((v45 & 1) != 0)
            {
              v46 = swift_isUniquelyReferenced_nonNull_native(v6);
              v91 = v6;
              if ((v46 & 1) == 0)
              {
                sub_1001CA558();
                v6 = v91;
              }
              swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v43 + 8));
              sub_10017F278((_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * v43), &v92);
              sub_1001D5914(v43, v6);
              v31 = 0x8000000000000000;
LABEL_38:
              swift_bridgeObjectRelease(v31);
            }
            else
            {
              v92 = 0u;
              v93 = 0u;
            }
            v23 = sub_10014BDE0((uint64_t)&v92, (uint64_t *)&unk_1002B5670);
            goto LABEL_40;
          }
        }
        sub_10017E2BC((uint64_t)&v94, (uint64_t)&v92);
        swift_bridgeObjectRetain(v21);
        v47 = swift_isUniquelyReferenced_nonNull_native(v6);
        v91 = v6;
        sub_1001C98B8(&v92, v22, v21, v47);
        v6 = v91;
        swift_bridgeObjectRelease(v21);
        v23 = swift_bridgeObjectRelease(0x8000000000000000);
      }
    }
LABEL_40:
    v32 = off_1002BF018;
    v33 = static os_log_type_t.default.getter(v23, v24, v25, v26);
    os_log(_:dso:log:type:_:)("CT - 3", 6, 2, &_mh_execute_header, v32, v33, _swiftEmptyArrayStorage);
    v34 = 0x80000001002124F0;
    if (v22 == 0xD000000000000017 && v21 == 0x80000001002124F0
      || (v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, 0xD000000000000017, 0x80000001002124F0, 0),
          v34 = v21,
          (v35 & 1) != 0))
    {
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRetain(v6);
      v36 = 0xD000000000000017;
      v37 = 0x80000001002124F0;
      goto LABEL_82;
    }
    v38 = 0x8000000100212510;
    if (v22 == 0xD000000000000018 && v21 == 0x8000000100212510
      || (v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, 0xD000000000000018, 0x8000000100212510, 0),
          v38 = v21,
          (v39 & 1) != 0))
    {
      swift_bridgeObjectRelease(v38);
      swift_bridgeObjectRetain(v6);
      v36 = 0xD000000000000018;
      v37 = 0x8000000100212510;
      goto LABEL_82;
    }
    v41 = 0x800000010020FF20;
    if (v22 == 0xD000000000000016 && v21 == 0x800000010020FF20
      || (v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, 0xD000000000000016, 0x800000010020FF20, 0),
          v41 = v21,
          (v42 & 1) != 0))
    {
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRetain(v6);
      v36 = 0xD000000000000016;
      v37 = 0x800000010020FF20;
      goto LABEL_82;
    }
    v48 = 0x8000000100212530;
    if (v22 == 0xD00000000000001BLL && v21 == 0x8000000100212530
      || (v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, 0xD00000000000001BLL, 0x8000000100212530, 0),
          v48 = v21,
          (v49 & 1) != 0))
    {
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRetain(v6);
      v36 = 0xD00000000000001BLL;
      v37 = 0x8000000100212530;
      goto LABEL_82;
    }
    v50 = 0x8000000100212550;
    if (v22 == 0xD000000000000013 && v21 == 0x8000000100212550
      || (v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, 0xD000000000000013, 0x8000000100212550, 0),
          v50 = v21,
          (v51 & 1) != 0))
    {
      swift_bridgeObjectRelease(v50);
      swift_bridgeObjectRetain(v6);
      v36 = 0xD000000000000013;
      v37 = 0x8000000100212550;
      goto LABEL_82;
    }
    v52 = 0x8000000100212570;
    if (v22 == 0xD000000000000012 && v21 == 0x8000000100212570
      || (v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, 0xD000000000000012, 0x8000000100212570, 0),
          v52 = v21,
          (v53 & 1) != 0))
    {
      swift_bridgeObjectRelease(v52);
      swift_bridgeObjectRetain(v6);
      v54 = "kCTCellMonitorCsgId";
      goto LABEL_80;
    }
    v65 = 0x8000000100212590;
    if (v22 == 0xD000000000000018 && v21 == 0x8000000100212590
      || (v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, 0xD000000000000018, 0x8000000100212590, 0),
          v65 = v21,
          (v66 & 1) != 0))
    {
      swift_bridgeObjectRelease(v65);
      swift_bridgeObjectRetain(v6);
      v36 = 0xD000000000000018;
      v37 = 0x8000000100212590;
      goto LABEL_82;
    }
    v67 = 0x80000001002125B0;
    if (v22 == 0xD000000000000012 && v21 == 0x80000001002125B0
      || (v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, 0xD000000000000012, 0x80000001002125B0, 0),
          v67 = v21,
          (v68 & 1) != 0))
    {
      swift_bridgeObjectRelease(v67);
      swift_bridgeObjectRetain(v6);
      v54 = "kCTCellMonitorThroughput";
LABEL_80:
      v37 = (unint64_t)v54 | 0x8000000000000000;
LABEL_81:
      v36 = 0xD000000000000012;
LABEL_82:
      v55 = sub_1001C7C98(v36, v37);
      v57 = v56;
      swift_bridgeObjectRelease(v6);
      if ((v57 & 1) != 0)
      {
        v58 = swift_isUniquelyReferenced_nonNull_native(v6);
        v91 = v6;
        if ((v58 & 1) == 0)
        {
          sub_1001CA558();
          v6 = v91;
        }
        swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v55 + 8));
        sub_10017F278((_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * v55), &v92);
        sub_1001D5914(v55, v6);
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      else
      {
        v92 = 0u;
        v93 = 0u;
      }
      v59 = sub_10014BDE0((uint64_t)&v92, (uint64_t *)&unk_1002B5670);
      goto LABEL_88;
    }
    if (v22 == 0xD000000000000012 && v21 == 0x80000001002125D0)
    {
      swift_bridgeObjectRelease(0x80000001002125D0);
LABEL_102:
      swift_bridgeObjectRetain(v6);
      v37 = 0x80000001002125D0;
      goto LABEL_81;
    }
    v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v21, 0xD000000000000012, 0x80000001002125D0, 0);
    v59 = swift_bridgeObjectRelease(v21);
    if ((v69 & 1) != 0)
      goto LABEL_102;
LABEL_88:
    v63 = off_1002BF018;
    v64 = static os_log_type_t.default.getter(v59, v60, v61, v62);
    os_log(_:dso:log:type:_:)("CT - 4", 6, 2, &_mh_execute_header, v63, v64, _swiftEmptyArrayStorage);
    result = sub_10014652C(&v94);
    if (v11)
      goto LABEL_5;
  }
  v19 = *(_QWORD *)(v88 + 8 * v20);
  if (v19)
  {
LABEL_13:
    v18 = v20;
LABEL_10:
    v11 = (v19 - 1) & v19;
    v14 = __clz(__rbit64(v19)) + (v18 << 6);
    v90 = v18;
    goto LABEL_6;
  }
  while (1)
  {
    v18 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v18 >= v89)
    {
      v90 = v89 - 1;
      goto LABEL_24;
    }
    v19 = *(_QWORD *)(v88 + 8 * v18);
    ++v20;
    if (v19)
      goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10017DEEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  id v35;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v44 = v2;
  v4 = v3;
  v48 = v3;
  __chkstk_darwin(v2);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v6;
  v7 = type metadata accessor for UUID(0);
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  __chkstk_darwin(v7);
  v43 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for Metric(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v10);
  v13 = *(void **)(a1 + v9[5]);
  v14 = *(void **)(a1 + v9[6]);
  v15 = *(void **)(a1 + v9[7]);
  v16 = v9[10];
  v40 = *(id *)(a1 + v9[9]);
  v42 = *(id *)(a1 + v16);
  v17 = a1 + v9[11];
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v45(v6, v17, v2);
  v18 = v9[13];
  v38 = *(id *)(a1 + v9[12]);
  v47 = *(_DWORD *)(a1 + v18);
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v21 = v20;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v24 = v23;
  v25 = v15;
  v41 = v13;
  v39 = v14;
  v40 = v40;
  v26 = v42;
  v42 = v38;
  LODWORD(v38) = sub_10018EAB4(v19, v21, v22, v24);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v24);
  v27 = v9[14];
  v28 = v9[15];
  v29 = &v12[v9[16]];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  v30 = v49;
  v31 = v50;
  v32 = v43;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v12, v43, v50);
  *(_QWORD *)&v12[v9[5]] = v41;
  *(_QWORD *)&v12[v9[6]] = v39;
  *(_QWORD *)&v12[v9[7]] = v25;
  *(_QWORD *)&v12[v9[8]] = v25;
  *(_QWORD *)&v12[v9[9]] = v40;
  *(_QWORD *)&v12[v9[10]] = v26;
  v33 = v46;
  v34 = v44;
  v45(&v12[v9[11]], (uint64_t)v46, v44);
  *(_QWORD *)&v12[v9[12]] = v42;
  *(_DWORD *)&v12[v9[13]] = v47;
  v12[v27] = v38 & 1;
  v12[v28] = 0;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v31);
  swift_bridgeObjectRelease(*((_QWORD *)v29 + 1));
  *(_OWORD *)v29 = xmmword_100242020;
  if (qword_1002B3A80 != -1)
    swift_once(&qword_1002B3A80, sub_100184F00);
  v35 = (id)qword_1002BF070;
  sub_10018732C((uint64_t)v12);

  sub_1001799A8(1, 0, (uint64_t)v12);
  return sub_10017E214((uint64_t)v12);
}

uint64_t sub_10017E214(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Metric(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10017E250()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 52, 7);
}

uint64_t sub_10017E27C(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1001548C8(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10017E2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10017E2F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10017E324()
{
  uint64_t v0;

  return sub_1001792DC(*(void **)(v0 + 16), *(uint64_t (**)(id, _QWORD))(v0 + 24));
}

uint64_t sub_10017E330()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10017E35C()
{
  uint64_t v0;

  return sub_1001790C0(*(_QWORD *)(v0 + 16), *(uint64_t (**)(_QWORD, uint64_t))(v0 + 24));
}

uint64_t sub_10017E368()
{
  uint64_t v0;

  return sub_100177F04(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10017E370()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

double sub_10017E39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1001783C4(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(void **)(v4 + 32), a4);
}

uint64_t sub_10017E3A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10017E3D4(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100178528(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_10017E3E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10017E414()
{
  uint64_t v0;

  sub_100178818(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(uint64_t **)(v0 + 40));
}

void sub_10017E420(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t inited;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  Class isa;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  int64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  int64_t v117;
  unint64_t v118;
  void (*v119)(char *, uint64_t);
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  char v126[88];
  __int128 v127;
  _OWORD v128[2];
  __int128 aBlock;
  __int128 v130;
  uint64_t (*v131)();
  uint64_t v132;

  v111 = type metadata accessor for DispatchWorkItemFlags(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for DispatchQoS(0);
  v108 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v107 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for Date(0);
  v121 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v7 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Metric(0);
  v9 = __chkstk_darwin(v8);
  v14 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v123) = a2 != (uint64_t *)1;
  if (qword_1002B3A28 == -1)
    goto LABEL_2;
  while (1)
  {
    v9 = swift_once(&qword_1002B3A28, sub_100174854);
LABEL_2:
    v15 = off_1002BF018;
    v16 = static os_log_type_t.default.getter(v9, v10, v11, v12);
    os_log(_:dso:log:type:_:)("CT - 1", 6, 2, &_mh_execute_header, v15, v16, _swiftEmptyArrayStorage);
    if (qword_1002B3A80 != -1)
      swift_once(&qword_1002B3A80, sub_100184F00);
    v17 = (id)qword_1002BF070;
    sub_100185EE0(a1, (_QWORD *)(a2 != (uint64_t *)1));

    a1 = sub_10017D358(a1);
    a2 = (uint64_t *)off_1002BF018;
    v21 = static os_log_type_t.default.getter(a1, v18, v19, v20);
    os_log(_:dso:log:type:_:)("CT - 6", 6, 2, &_mh_execute_header, a2, v21, _swiftEmptyArrayStorage);
    v22 = 0;
    v23 = *(_QWORD *)(a1 + 64);
    v119 = (void (*)(char *, uint64_t))(a1 + 64);
    v24 = 1 << *(_BYTE *)(a1 + 32);
    v25 = -1;
    if (v24 < 64)
      v25 = ~(-1 << v24);
    v26 = v25 & v23;
    v120 = (unint64_t)(v24 + 63) >> 6;
    v117 = v120 - 1;
    v118 = (unint64_t)"CellularLteOtaMsg";
    if ((v25 & v23) == 0)
      break;
    while (1)
    {
      v30 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      v31 = v30 | (v22 << 6);
LABEL_10:
      v32 = *(_QWORD *)(a1 + 56);
      v33 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v31);
      v34 = v33[1];
      *(_QWORD *)&v127 = *v33;
      *((_QWORD *)&v127 + 1) = v34;
      sub_10017E2BC(v32 + 32 * v31, (uint64_t)v128);
      swift_bridgeObjectRetain(v34);
LABEL_29:
      sub_10017F288((uint64_t)&v127, (uint64_t)&aBlock);
      v38 = (void *)*((_QWORD *)&aBlock + 1);
      if (!*((_QWORD *)&aBlock + 1))
        break;
      v27 = aBlock;
      v28 = sub_10017F278(&v130, &v127);
      Date.init()(v28);
      v29 = v27;
      a2 = v116;
      sub_10017946C((void *)0x544152, (void *)0xE300000000000000, 0x8000000100210AE0, v29, v38, &v127, v123, (uint64_t)v14, v7);
      swift_bridgeObjectRelease(v38);
      (*(void (**)(char *, uint64_t))(v121 + 8))(v7, v122);
      sub_10017DEEC((uint64_t)v14);
      sub_10017E214((uint64_t)v14);
      sub_10014652C(&v127);
      if (!v26)
        goto LABEL_11;
    }
    swift_release(a1);
    v39 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_1002B3A38 != -1)
      swift_once(&qword_1002B3A38, sub_100175108);
    v40 = static NSNotificationName.NewCTMetric;
    v41 = sub_100146438(&qword_1002B5608);
    inited = swift_initStackObject(v41, v126);
    *(_OWORD *)(inited + 16) = xmmword_1002402A0;
    strcpy((char *)&aBlock, "metricObject");
    BYTE13(aBlock) = 0;
    HIWORD(aBlock) = -5120;
    AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for MetricNotificationObject;
    v43 = swift_allocObject(&unk_1002647C8, 52, 7);
    *(_QWORD *)(inited + 72) = v43;
    *(_QWORD *)(v43 + 16) = 5521746;
    *(_QWORD *)(v43 + 24) = 0xE300000000000000;
    v44 = v118 | 0x8000000000000000;
    *(_QWORD *)(v43 + 32) = 0xD000000000000011;
    *(_QWORD *)(v43 + 40) = v44;
    v106 = v44;
    *(_DWORD *)(v43 + 48) = v123;
    v45 = sub_1001BE664(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v45);
    objc_msgSend(v39, "postNotificationName:object:userInfo:", v40, 0, isa);

    v47 = off_1002BF018;
    v52 = static os_log_type_t.default.getter(v48, v49, v50, v51);
    os_log(_:dso:log:type:_:)("CT - 7", 6, 2, &_mh_execute_header, v47, v52, _swiftEmptyArrayStorage);
    v53 = (uint64_t *)((char *)v116 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray);
    swift_beginAccess((char *)v116 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_carrierInfoArray, &v127, 0, 0);
    v112 = v53;
    v105 = *(_QWORD *)(*v53 + 16);
    if (!v105)
      return;
    v54 = 0;
    v123 = *(uint64_t *)((char *)v116 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_persistanceStore);
    v55 = 96;
    v14 = v107;
    while (1)
    {
      a2 = v112;
      swift_beginAccess(v112, &aBlock, 33, 0);
      a1 = *a2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
      *a2 = a1;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        a1 = (uint64_t)sub_100197F38((_QWORD *)a1);
        *v112 = a1;
      }
      if (v54 >= *(_QWORD *)(a1 + 16))
        break;
      a2 = *(uint64_t **)(a1 + v55);
      *(_QWORD *)(a1 + v55) = _swiftEmptyArrayStorage;
      swift_endAccess(&aBlock);
      swift_bridgeObjectRelease(a2);
      if (v54 == 0x80000000)
        goto LABEL_41;
      v114 = v54 + 1;
      v57 = swift_allocObject(&unk_1002649F8, 32, 7);
      v58 = v116;
      *(_QWORD *)(v57 + 16) = v116;
      *(_QWORD *)(v57 + 24) = v54;
      v113 = v58;
      v62 = sub_1001BC480((uint64_t)v113, v59, v60, v61);
      v63 = swift_allocObject(&unk_100264A20, 32, 7);
      v115 = v55;
      v64 = v63;
      *(_QWORD *)(v63 + 16) = sub_10017F2D0;
      *(_QWORD *)(v63 + 24) = v57;
      v119 = *(void (**)(char *, uint64_t))(v62 + 24);
      v65 = swift_allocObject(&unk_100264A48, 24, 7);
      v66 = v54;
      v117 = v54;
      v67 = v65;
      swift_weakInit(v65 + 16, v62);
      v68 = swift_allocObject(&unk_100264A70, 96, 7);
      *(_QWORD *)(v68 + 16) = v67;
      *(_QWORD *)(v68 + 24) = 5521746;
      *(_QWORD *)(v68 + 32) = 0xE300000000000000;
      *(_QWORD *)(v68 + 40) = 0xD000000000000011;
      *(_QWORD *)(v68 + 48) = v106;
      *(_QWORD *)(v68 + 56) = 0;
      *(_QWORD *)(v68 + 64) = 0xE000000000000000;
      *(_DWORD *)(v68 + 72) = v66;
      *(_QWORD *)(v68 + 80) = sub_10014C774;
      *(_QWORD *)(v68 + 88) = v64;
      v131 = sub_10017F300;
      v132 = v68;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v130 = sub_1001BE428;
      *((_QWORD *)&v130 + 1) = &unk_100264A88;
      v69 = _Block_copy(&aBlock);
      swift_retain(v57);
      swift_retain(v67);
      v70 = swift_retain(v64);
      static DispatchQoS.unspecified.getter(v70);
      v125 = _swiftEmptyArrayStorage;
      v71 = sub_10017CF34();
      v122 = v71;
      v72 = sub_100146438((uint64_t *)&unk_1002B55F0);
      v120 = v72;
      v121 = sub_10014BEC0((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0, (uint64_t)&protocol conformance descriptor for [A]);
      v73 = v109;
      v74 = v111;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v125, v72, v121, v111, v71);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v73, v69);
      _Block_release(v69);
      v119 = *(void (**)(char *, uint64_t))(v110 + 8);
      v119(v73, v74);
      v118 = *(_QWORD *)(v108 + 8);
      ((void (*)(char *, uint64_t))v118)(v14, v124);
      v75 = v132;
      swift_release(v57);
      swift_release(v62);
      swift_release(v64);
      swift_release(v67);
      swift_release(v75);
      v76 = swift_allocObject(&unk_100264AC0, 32, 7);
      v77 = v113;
      v78 = v117;
      *(_QWORD *)(v76 + 16) = v113;
      *(_QWORD *)(v76 + 24) = v78;
      v113 = v77;
      v82 = sub_1001BC480((uint64_t)v113, v79, v80, v81);
      v83 = swift_allocObject(&unk_100264AE8, 32, 7);
      *(_QWORD *)(v83 + 16) = sub_10017F304;
      *(_QWORD *)(v83 + 24) = v76;
      v84 = swift_allocObject(&unk_100264A48, 24, 7);
      swift_weakInit(v84 + 16, v82);
      v85 = swift_allocObject(&unk_100264B10, 96, 7);
      *(_QWORD *)(v85 + 16) = v84;
      *(_QWORD *)(v85 + 24) = 5521746;
      *(_QWORD *)(v85 + 32) = 0xE300000000000000;
      strcpy((char *)(v85 + 40), "Active Bands");
      *(_BYTE *)(v85 + 53) = 0;
      *(_WORD *)(v85 + 54) = -5120;
      *(_QWORD *)(v85 + 56) = 0;
      *(_QWORD *)(v85 + 64) = 0xE000000000000000;
      *(_DWORD *)(v85 + 72) = v78;
      *(_QWORD *)(v85 + 80) = sub_10017F828;
      *(_QWORD *)(v85 + 88) = v83;
      v131 = sub_10017F300;
      v132 = v85;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v130 = sub_1001BE428;
      *((_QWORD *)&v130 + 1) = &unk_100264B28;
      v86 = _Block_copy(&aBlock);
      swift_retain(v76);
      swift_retain(v84);
      v87 = swift_retain(v83);
      static DispatchQoS.unspecified.getter(v87);
      v125 = _swiftEmptyArrayStorage;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v125, v120, v121, v74, v122);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v73, v86);
      _Block_release(v86);
      v119(v73, v74);
      ((void (*)(char *, uint64_t))v118)(v14, v124);
      v88 = v132;
      swift_release(v76);
      swift_release(v82);
      swift_release(v83);
      swift_release(v84);
      swift_release(v88);
      v89 = swift_allocObject(&unk_100264B60, 32, 7);
      v90 = v113;
      v91 = v117;
      *(_QWORD *)(v89 + 16) = v113;
      *(_QWORD *)(v89 + 24) = v91;
      v92 = v90;
      v96 = sub_1001BC480((uint64_t)v92, v93, v94, v95);
      v97 = swift_allocObject(&unk_100264B88, 32, 7);
      *(_QWORD *)(v97 + 16) = sub_10017F334;
      *(_QWORD *)(v97 + 24) = v89;
      v7 = *(char **)(v96 + 24);
      v98 = swift_allocObject(&unk_100264A48, 24, 7);
      swift_weakInit(v98 + 16, v96);
      v99 = swift_allocObject(&unk_100264BB0, 96, 7);
      *(_QWORD *)(v99 + 16) = v98;
      *(_QWORD *)(v99 + 24) = 5521746;
      *(_QWORD *)(v99 + 32) = 0xE300000000000000;
      *(_QWORD *)(v99 + 40) = 0x6574726F70707553;
      *(_QWORD *)(v99 + 48) = 0xEF73646E61422064;
      *(_QWORD *)(v99 + 56) = 0;
      *(_QWORD *)(v99 + 64) = 0xE000000000000000;
      *(_DWORD *)(v99 + 72) = v91;
      *(_QWORD *)(v99 + 80) = sub_10017F828;
      *(_QWORD *)(v99 + 88) = v97;
      v131 = sub_10017F300;
      v132 = v99;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v130 = sub_1001BE428;
      *((_QWORD *)&v130 + 1) = &unk_100264BC8;
      v100 = _Block_copy(&aBlock);
      swift_retain(v89);
      swift_retain(v98);
      v101 = swift_retain(v97);
      static DispatchQoS.unspecified.getter(v101);
      v125 = _swiftEmptyArrayStorage;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v125, v120, v121, v74, v122);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v73, v100);
      _Block_release(v100);
      v119(v73, v74);
      ((void (*)(char *, uint64_t))v118)(v14, v124);
      v102 = v132;
      v103 = v89;
      v104 = v115;
      swift_release(v103);
      swift_release(v96);
      swift_release(v97);
      swift_release(v98);
      swift_release(v102);
      v55 = v104 + 88;
      v54 = v114;
      if (v105 == v114)
        return;
    }
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
  }
LABEL_11:
  v35 = v22 + 1;
  if (__OFADD__(v22, 1))
    goto LABEL_42;
  if (v35 >= v120)
    goto LABEL_28;
  v36 = *((_QWORD *)v119 + v35);
  if (v36)
  {
LABEL_14:
    v26 = (v36 - 1) & v36;
    v31 = __clz(__rbit64(v36)) + (v35 << 6);
    v22 = v35;
    goto LABEL_10;
  }
  v37 = v22 + 2;
  ++v22;
  if (v35 + 1 >= v120)
    goto LABEL_28;
  v36 = *((_QWORD *)v119 + v37);
  if (v36)
  {
LABEL_17:
    v35 = v37;
    goto LABEL_14;
  }
  v22 = v35 + 1;
  if (v35 + 2 >= v120)
    goto LABEL_28;
  v36 = *((_QWORD *)v119 + v35 + 2);
  if (v36)
  {
    v35 += 2;
    goto LABEL_14;
  }
  v37 = v35 + 3;
  v22 = v35 + 2;
  if (v35 + 3 >= v120)
  {
LABEL_28:
    v26 = 0;
    memset(v128, 0, sizeof(v128));
    v127 = 0u;
    goto LABEL_29;
  }
  v36 = *((_QWORD *)v119 + v37);
  if (v36)
    goto LABEL_17;
  while (1)
  {
    v35 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v35 >= v120)
    {
      v22 = v117;
      goto LABEL_28;
    }
    v36 = *((_QWORD *)v119 + v35);
    ++v37;
    if (v36)
      goto LABEL_14;
  }
  __break(1u);
}

_OWORD *sub_10017F278(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10017F288(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100146438(&qword_1002B5690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017F2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10017A8A8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10017F2D8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017F304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10017AAF4(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10017F310()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10017F334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10017ACDC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10017F33C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10017F364()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

void sub_10017F3A8()
{
  uint64_t v0;

  sub_1001C35D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(unsigned int *)(v0 + 72), *(void (**)(_QWORD, uint64_t))(v0 + 80), *(_QWORD *)(v0 + 88));
}

void sub_10017F3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_10017AEC4(a1, *(_QWORD *)(v4 + 16), a3, a4);
}

uint64_t sub_10017F3E8(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_10017F41C(uint64_t result, uint64_t a2, void *a3, uint64_t a4)
{
  int v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  v5 = a2;
  v6 = (void *)result;
  if (qword_1002B3A78 != -1)
    result = swift_once(&qword_1002B3A78, sub_100183CA4);
  if (*(_BYTE *)(qword_1002BF068 + 26) == 1)
  {
    if (qword_1002B3A28 != -1)
      result = swift_once(&qword_1002B3A28, sub_100174854);
    v7 = off_1002BF018;
    v8 = static os_log_type_t.default.getter(result, a2, a3, a4);
    v9 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v10 = swift_allocObject(v9, 152, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100242000;
    v24 = v6;
    v11 = v6;
    v12 = sub_100146438(&qword_1002B56B0);
    v13 = String.init<A>(describing:)(&v24, v12);
    v15 = v14;
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    v16 = sub_10016B1E0();
    *(_QWORD *)(v10 + 64) = v16;
    *(_QWORD *)(v10 + 32) = v13;
    *(_QWORD *)(v10 + 40) = v15;
    LODWORD(v24) = v5;
    type metadata accessor for CTDataConnectionType(0);
    v18 = String.init<A>(describing:)(&v24, v17);
    *(_QWORD *)(v10 + 96) = &type metadata for String;
    *(_QWORD *)(v10 + 104) = v16;
    *(_QWORD *)(v10 + 72) = v18;
    *(_QWORD *)(v10 + 80) = v19;
    v24 = a3;
    v20 = a3;
    v21 = sub_100146438(&qword_1002B56B8);
    v22 = String.init<A>(describing:)(&v24, v21);
    *(_QWORD *)(v10 + 136) = &type metadata for String;
    *(_QWORD *)(v10 + 144) = v16;
    *(_QWORD *)(v10 + 112) = v22;
    *(_QWORD *)(v10 + 120) = v23;
    os_log(_:dso:log:type:_:)("context  ---> %{public}s and connection ---> %{public}s and statusinfo %{public}s", 81, 2, &_mh_execute_header, v7, v8, v10);
    return swift_bridgeObjectRelease(v10);
  }
  return result;
}

void sub_10017F5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];
  uint64_t v11;

  if (qword_1002B3A28 != -1)
    a1 = swift_once(&qword_1002B3A28, sub_100174854);
  v5 = off_1002BF018;
  v6 = static os_log_type_t.default.getter(a1, a2, a3, a4);
  os_log(_:dso:log:type:_:)("context  connectionAvailability", 31, 2, &_mh_execute_header, v5, v6, _swiftEmptyArrayStorage);
  v7 = *(void **)(v4 + OBJC_IVAR____TtC13FTMInternal_420CoreTelephonyService_client);
  v8 = swift_allocObject(&unk_100264688, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16, v4);
  v10[4] = sub_10017CFA0;
  v11 = v8;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_1001780B8;
  v10[3] = &unk_100264C68;
  v9 = _Block_copy(v10);
  objc_msgSend(v7, "getSubscriptionInfo:", v9, swift_release(v11).n128_f64[0]);
  _Block_release(v9);
}

uint64_t sub_10017F6E0()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10017F714(void *a1, uint64_t a2)
{
  void **v2;

  return sub_10017B890(a1, a2, v2[2], v2[3], v2[4]);
}

void sub_10017F720(uint64_t a1)
{
  uint64_t v1;

  sub_100184A44(a1, v1);
}

uint64_t sub_10017F728()
{
  id *v0;

  return swift_deallocObject(v0, 48, 7);
}

void sub_10017F764()
{
  uint64_t v0;

  sub_10017BB94(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

id sub_10017F82C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSString v5;
  id v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___activityIndicator;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___activityIndicator);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___activityIndicator);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIActivityIndicatorView), "initWithActivityIndicatorStyle:", 101);
    v5 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v5);

    objc_msgSend(v4, "setColor:", v6);
    objc_msgSend(v4, "setHidesWhenStopped:", 1);
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

id sub_10017F930()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___loadingLabel;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___loadingLabel);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___loadingLabel);
  }
  else
  {
    v4 = sub_10017F990(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10017F990(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSString v4;
  NSString v5;
  id v6;
  id v7;

  v2 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13FTMInternal_411LoadingView_loadingLabelText + 8);
  swift_bridgeObjectRetain(v3);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  objc_msgSend(v2, "setText:", v4);

  objc_msgSend(v2, "setTextAlignment:", 0);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v5);

  objc_msgSend(v2, "setTextColor:", v6);
  v7 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 18.0, UIFontWeightMedium);
  objc_msgSend(v2, "setFont:", v7);

  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v2, "setHidden:", 1);
  return v2;
}

id sub_10017FB00(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  _BYTE *v6;
  objc_class *ObjectType;
  _QWORD *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  Class isa;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  Class v43;
  objc_super v45;

  ObjectType = (objc_class *)swift_getObjectType(v6);
  v6[OBJC_IVAR____TtC13FTMInternal_411LoadingView_shouldHideLoadingView] = 1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___activityIndicator] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC13FTMInternal_411LoadingView____lazy_storage___loadingLabel] = 0;
  v14 = &v6[OBJC_IVAR____TtC13FTMInternal_411LoadingView_loadingLabelText];
  *v14 = a1;
  v14[1] = a2;
  v45.receiver = v6;
  v45.super_class = ObjectType;
  v15 = objc_msgSendSuper2(&v45, "initWithFrame:", a3, a4, a5, a6);
  v16 = sub_10017F82C();
  objc_msgSend(v15, "addSubview:", v16);

  v17 = v15;
  v18 = sub_10017F930();
  objc_msgSend(v17, "addSubview:", v18);

  v19 = (void *)objc_opt_self(NSLayoutConstraint);
  v20 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v21 = swift_allocObject(v20, 48, 7);
  *(_OWORD *)(v21 + 16) = xmmword_100240270;
  v22 = sub_10017F82C();
  v23 = objc_msgSend(v22, "centerYAnchor");

  v24 = objc_msgSend(v17, "centerYAnchor");
  v25 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

  *(_QWORD *)(v21 + 32) = v25;
  v26 = sub_10017F82C();
  v27 = objc_msgSend(v26, "centerXAnchor");

  v28 = objc_msgSend(v17, "centerXAnchor");
  v29 = objc_msgSend(v27, "constraintEqualToAnchor:", v28);

  *(_QWORD *)(v21 + 40) = v29;
  specialized Array._endMutation()(v30);
  sub_10014C4C4();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  objc_msgSend(v19, "activateConstraints:", isa);

  v32 = swift_allocObject(v20, 48, 7);
  *(_OWORD *)(v32 + 16) = xmmword_100240270;
  v33 = sub_10017F930();
  v34 = objc_msgSend(v33, "topAnchor");

  v35 = sub_10017F82C();
  v36 = objc_msgSend(v35, "bottomAnchor");

  v37 = objc_msgSend(v34, "constraintEqualToAnchor:constant:", v36, 5.0);
  *(_QWORD *)(v32 + 32) = v37;
  v38 = sub_10017F930();
  v39 = objc_msgSend(v38, "centerXAnchor");

  v40 = objc_msgSend(v17, "centerXAnchor");
  v41 = objc_msgSend(v39, "constraintEqualToAnchor:", v40);

  *(_QWORD *)(v32 + 40) = v41;
  specialized Array._endMutation()(v42);
  v43 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v32);
  objc_msgSend(v19, "activateConstraints:", v43);

  return v17;
}

id sub_10017FF5C()
{
  _BYTE *v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  NSString v5;
  id v6;

  v1 = OBJC_IVAR____TtC13FTMInternal_411LoadingView_shouldHideLoadingView;
  v0[OBJC_IVAR____TtC13FTMInternal_411LoadingView_shouldHideLoadingView] = 0;
  v2 = sub_10017F82C();
  objc_msgSend(v2, "setHidden:", v0[v1]);

  v3 = sub_10017F930();
  objc_msgSend(v3, "setHidden:", v0[v1]);

  v4 = sub_10017F930();
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setText:", v5);

  v6 = sub_10017F82C();
  objc_msgSend(v6, "startAnimating");

  return objc_msgSend(v0, "setHidden:", 0);
}

uint64_t type metadata accessor for LoadingView()
{
  return objc_opt_self(_TtC13FTMInternal_411LoadingView);
}

id sub_1001800BC(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  id v27;
  uint64_t v29;
  uint64_t v30;

  v8 = v7;
  v16 = a1[3];
  v17 = sub_100146508(a1, v16);
  v18 = _bridgeAnythingToObjectiveC<A>(_:)(v17, v16);
  v19 = a4[3];
  if (v19)
  {
    v20 = sub_100146508(a4, a4[3]);
    v29 = a5;
    v30 = a2;
    v21 = a3;
    v22 = *(_QWORD *)(v19 - 8);
    __chkstk_darwin(v20);
    v24 = (char *)&v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v22 + 16))(v24);
    v25 = _bridgeAnythingToObjectiveC<A>(_:)(v24, v19);
    v26 = *(void (**)(char *, uint64_t))(v22 + 8);
    a3 = v21;
    v26(v24, v19);
    a5 = v29;
    a2 = v30;
    sub_10014652C(a4);
  }
  else
  {
    v25 = 0;
  }
  v27 = objc_msgSend((id)swift_getObjCClassFromMetadata(v8), "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:", v18, a2, a3, v25, a5, a6, a7);
  swift_unknownObjectRelease(v18);
  swift_unknownObjectRelease(v25);
  sub_10014652C(a1);
  return v27;
}

void sub_100180230()
{
  qword_1002BF058 = 0x4048000000000000;
}

void sub_100180240()
{
  qword_1002BF060 = 0x4049000000000000;
}

void sub_100180274()
{
  char *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t ObjCClassFromMetadata;
  NSString v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  Class isa;
  id v33;
  void *v34;
  id v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[3];
  uint64_t v39;
  objc_super v40;

  v1 = v0;
  v40.receiver = v0;
  v40.super_class = (Class)type metadata accessor for TickerViewController();
  objc_msgSendSuper2(&v40, "viewDidLoad");
  v2 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_420TickerViewController_collectionView];
  v3 = (void *)objc_opt_self(UIColor);
  v4 = objc_msgSend(v3, "whiteColor");
  objc_msgSend(v2, "setBackgroundColor:", v4);

  objc_msgSend(v2, "setDelegate:", v1);
  objc_msgSend(v2, "setDataSource:", v1);
  v5 = type metadata accessor for TickerColumnCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v5);
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "registerClass:forCellWithReuseIdentifier:", ObjCClassFromMetadata, v7);

  v8 = objc_msgSend(v1, "view");
  if (!v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  v9 = v8;
  objc_msgSend(v8, "addSubview:", v2);

  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v10 = objc_msgSend(v1, "view");
  if (!v10)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v11 = v10;
  v12 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v13 = swift_allocObject(v12, 64, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100240400;
  v14 = objc_msgSend(v2, "centerXAnchor");
  v15 = objc_msgSend(v1, "view");
  if (!v15)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v15;
  v17 = objc_msgSend(v15, "centerXAnchor");

  v18 = objc_msgSend(v14, "constraintEqualToAnchor:", v17);
  *(_QWORD *)(v13 + 32) = v18;
  v19 = objc_msgSend(v2, "centerYAnchor");
  v20 = objc_msgSend(v1, "view");
  if (!v20)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, "centerYAnchor");

  v23 = objc_msgSend(v19, "constraintEqualToAnchor:", v22);
  *(_QWORD *)(v13 + 40) = v23;
  sub_1001548C8(0, (unint64_t *)&qword_1002B57F0, NSLayoutConstraint_ptr);
  v24 = sub_1001548C8(0, &qword_1002B57F8, UICollectionView_ptr);
  v39 = v24;
  v38[0] = v2;
  v36 = 0u;
  v37 = 0u;
  v25 = qword_1002B3A70;
  v26 = v2;
  if (v25 != -1)
    swift_once(&qword_1002B3A70, sub_100180240);
  *(_QWORD *)(v13 + 48) = sub_1001800BC(v38, 8, 0, &v36, 0, 1.0, *(double *)&qword_1002BF060);
  v39 = v24;
  v38[0] = v26;
  v27 = v26;
  v28 = objc_msgSend(v1, "view", v36, v37);
  if (v28)
  {
    v29 = v28;
    *((_QWORD *)&v37 + 1) = sub_1001548C8(0, qword_1002B5800, UIView_ptr);
    *(_QWORD *)&v36 = v29;
  }
  else
  {
    v36 = 0u;
    v37 = 0u;
  }
  v30 = sub_1001800BC(v38, 7, 0, &v36, 7, 1.0, 0.0);
  *(_QWORD *)(v13 + 56) = v30;
  v38[0] = v13;
  specialized Array._endMutation()(v30);
  v31 = v38[0];
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  objc_msgSend(v11, "addConstraints:", isa, (_QWORD)v36);

  v33 = objc_msgSend(v1, "view");
  if (v33)
  {
    v34 = v33;
    v35 = objc_msgSend(v3, "whiteColor");
    objc_msgSend(v34, "setBackgroundColor:", v35);

    return;
  }
LABEL_16:
  __break(1u);
}

uint64_t sub_10018075C(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::String_optional v20;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t result;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  Swift::String_optional v26;
  uint64_t v27;
  void *v28;
  Class isa;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  id v43;
  Class v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v6 = type metadata accessor for IndexPath(0, a3, a4);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v54 - v10;
  *(double *)(v4 + OBJC_IVAR____TtC13FTMInternal_420TickerViewController_numberValue) = a1;
  v12 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_1002402A0;
  *(_QWORD *)(v13 + 56) = &type metadata for Double;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Double;
  *(double *)(v13 + 32) = a1;
  v14 = String.init(format:_:)(1714564645, 0xE400000000000000, v13);
  v58 = v4;
  v15 = (uint64_t *)(v4 + OBJC_IVAR____TtC13FTMInternal_420TickerViewController_stringValue);
  v16 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13FTMInternal_420TickerViewController_stringValue + 8);
  *v15 = v14;
  v15[1] = v17;
  swift_bridgeObjectRelease(v16);
  v18 = v15[1];
  v19 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0)
    v19 = *v15 & 0xFFFFFFFFFFFFLL;
  v62 = *v15;
  v63 = v18;
  v64 = 0;
  v65 = v19;
  v57 = OBJC_IVAR____TtC13FTMInternal_420TickerViewController_collectionView;
  swift_bridgeObjectRetain(v18);
  v20 = String.Iterator.next()();
  if (!v20.value._object)
    return swift_bridgeObjectRelease(v63);
  countAndFlagsBits = v20.value._countAndFlagsBits;
  object = v20.value._object;
  result = 0;
  while (1)
  {
    v27 = result + 1;
    if (__OFADD__(result, 1))
      break;
    ((void (*)(void))IndexPath.init(item:section:))();
    v28 = *(void **)(v58 + v57);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v30 = objc_msgSend(v28, "cellForItemAtIndexPath:", isa);

    if (!v30)
      goto LABEL_35;
    v31 = type metadata accessor for TickerColumnCell();
    v32 = swift_dynamicCastClass(v30, v31);
    if (!v32)
    {

LABEL_35:
      swift_bridgeObjectRelease(object);
      goto LABEL_36;
    }
    v33 = v32;
    v59 = v27;
    v34 = v9;
    v35 = *(_QWORD **)(v32 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_characters);
    v60 = 0;
    v61 = 0xE000000000000000;
    swift_bridgeObjectRetain(v35);
    Character.write<A>(to:)(&v60, countAndFlagsBits, object, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    swift_bridgeObjectRelease(object);
    v36 = v61;
    v37 = v35[2];
    if (!v37)
      goto LABEL_33;
    v38 = v60;
    v39 = v35[4];
    v40 = v35[5];
    v41 = v39 == v60 && v40 == v61;
    if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v60, v61, 0) & 1) != 0)
    {
      v42 = 0;
    }
    else
    {
      if (v37 == 1)
        goto LABEL_33;
      v45 = v35[6];
      v46 = v35[7];
      v47 = v45 == v38 && v46 == v36;
      if (!v47 && (_stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, v38, v36, 0) & 1) == 0)
      {
        v48 = v35 + 9;
        v49 = 2;
        while (v37 != v49)
        {
          v42 = v49;
          v50 = *(v48 - 1);
          v51 = *v48;
          if (v50 != v38 || v51 != v36)
          {
            v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, v38, v36, 0);
            v49 = v42 + 1;
            v48 += 2;
            if ((v53 & 1) == 0)
              continue;
          }
          goto LABEL_16;
        }
LABEL_33:
        swift_bridgeObjectRelease(v35);
        swift_bridgeObjectRelease(v36);

LABEL_36:
        (*(void (**)(char *, uint64_t))(v55 + 8))(v11, v56);
        return swift_bridgeObjectRelease(v63);
      }
      v42 = 1;
    }
LABEL_16:
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v36);
    v9 = v34;
    IndexPath.init(item:section:)(v42, 0);
    if ((*(_BYTE *)(v33 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_isScrolling) & 1) == 0)
    {
      v43 = *(id *)(v33 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_tableView);
      v44 = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v43, "scrollToRowAtIndexPath:atScrollPosition:animated:", v44, 2, 1);

    }
    v24 = v56;
    v25 = *(void (**)(char *, uint64_t))(v55 + 8);
    v25(v34, v56);
    v25(v11, v24);
    v26 = String.Iterator.next()();
    countAndFlagsBits = v26.value._countAndFlagsBits;
    object = v26.value._object;
    result = v59;
    if (!v26.value._object)
      return swift_bridgeObjectRelease(v63);
  }
  __break(1u);
  return result;
}

id sub_100180B5C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TickerViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TickerViewController()
{
  return objc_opt_self(_TtC13FTMInternal_420TickerViewController);
}

id sub_100180DD0(void *a1)
{
  uint64_t v1;
  NSString v3;
  Class isa;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(a1, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v3, isa);

  v6 = type metadata accessor for TickerColumnCell();
  v7 = swift_dynamicCastClass(v5, v6);
  if (!v7)
  {

    return objc_msgSend(objc_allocWithZone((Class)UICollectionViewCell), "init");
  }
  v8 = v7;
  v36 = 0;
  v37 = 0xE000000000000000;
  v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC13FTMInternal_420TickerViewController_stringValue);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_420TickerViewController_stringValue);
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_420TickerViewController_stringValue + 8);
  v12 = swift_bridgeObjectRetain(v11);
  v13 = IndexPath.row.getter(v12);
  v14 = String.index(_:offsetBy:)(15, v13, v10, v11);
  v15 = String.subscript.getter(v14, v10, v11);
  v17 = v16;
  swift_bridgeObjectRelease(v11);
  Character.write<A>(to:)(&v36, v15, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  swift_bridgeObjectRelease(v17);
  v19 = v36;
  v18 = v37;
  v20 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_420TickerViewController_numericAlphabet);
  if ((sub_1001A4FDC(v36, v37, (_QWORD *)v20) & 1) == 0)
  {
    v33 = sub_100146438(&qword_1002B57D0);
    v20 = swift_allocObject(v33, 48, 7);
    *(_OWORD *)(v20 + 16) = xmmword_1002402A0;
    *(_QWORD *)(v20 + 32) = v19;
    *(_QWORD *)(v20 + 40) = v18;
    v32 = (v19 != 46 || v18 != 0xE100000000000000)
       && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v18, 46, 0xE100000000000000, 0) & 1) == 0;
    goto LABEL_13;
  }
  swift_bridgeObjectRelease(v18);
  v21 = sub_100146438(&qword_1002B57D8);
  inited = swift_initStackObject(v21, &v35);
  *(_OWORD *)(inited + 16) = xmmword_100242010;
  v23 = *v9;
  v24 = v9[1];
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  v25 = String.count.getter(v23, v24);
  result = (id)swift_bridgeObjectRelease(v24);
  if (__OFSUB__(v25, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(inited + 32) = v25 - 1;
    v27 = *v9;
    v28 = v9[1];
    swift_bridgeObjectRetain(v28);
    v29 = String.count.getter(v27, v28);
    result = (id)swift_bridgeObjectRelease(v28);
    if (!__OFSUB__(v29, 2))
    {
      *(_QWORD *)(inited + 40) = v29 - 2;
      v30 = IndexPath.row.getter(result);
      v31 = sub_1001A50A0(v30, inited);
      swift_setDeallocating(inited);
      if ((v31 & 1) != 0)
        v32 = 1;
      else
        v32 = 2;
LABEL_13:
      *(_BYTE *)(v8 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_size) = v32;
      v34 = *(_QWORD *)(v8 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_characters);
      *(_QWORD *)(v8 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_characters) = v20;
      swift_bridgeObjectRelease(v34);
      objc_msgSend(*(id *)(v8 + OBJC_IVAR____TtC13FTMInternal_416TickerColumnCell_tableView), "reloadData");
      return (id)v8;
    }
  }
  __break(1u);
  return result;
}

void sub_100181184()
{
  char *v0;
  uint64_t v1;
  id v2;
  id v3;

  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_420TickerViewController_numericAlphabet] = &off_100260768;
  v1 = OBJC_IVAR____TtC13FTMInternal_420TickerViewController_collectionView;
  v2 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewFlowLayout), "init");
  objc_msgSend(v2, "setScrollDirection:", 1);
  objc_msgSend(v2, "setMinimumInteritemSpacing:", 0.0);
  objc_msgSend(v2, "setMinimumLineSpacing:", 0.0);
  v3 = objc_msgSend(objc_allocWithZone((Class)UICollectionView), "initWithFrame:collectionViewLayout:", v2, 0.0, 0.0, 0.0, 0.0);

  *(_QWORD *)&v0[v1] = v3;
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100211390, "FTMInternal_4/TickerViewController.swift", 40, 2, 48, 0);
  __break(1u);
}

uint64_t sub_100181290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13FTMInternal_420TickerViewController_stringValue);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13FTMInternal_420TickerViewController_stringValue + 8);
  swift_bridgeObjectRetain(v2);
  v3 = String.count.getter(v1, v2);
  v4 = swift_bridgeObjectRelease(v2);
  result = IndexPath.row.getter(v4);
  if (!result)
  {
LABEL_6:
    if (qword_1002B3A68 == -1)
      return result;
    return swift_once(&qword_1002B3A68, sub_100180230);
  }
  if (__OFSUB__(v3, 1))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v3 - 1 == result)
    goto LABEL_6;
  if (__OFSUB__(v3, 2))
    goto LABEL_12;
  if (v3 - 2 == result)
    goto LABEL_6;
  if (__OFSUB__(v3, 3))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  if (qword_1002B3A68 != -1)
    return swift_once(&qword_1002B3A68, sub_100180230);
  return result;
}

void sub_100181388(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = v1 + OBJC_IVAR____TtC13FTMInternal_420TickerViewController_stringValue;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_420TickerViewController_stringValue);
  v5 = *(_QWORD *)(v3 + 8);
  swift_bridgeObjectRetain(v5);
  v6 = String.count.getter(v4, v5);
  swift_bridgeObjectRelease(v5);
  if (__OFSUB__(v6, 4))
  {
    __break(1u);
  }
  else
  {
    v7 = objc_msgSend(a1, "layer");
    objc_msgSend(v7, "frame");

  }
}

uint64_t sub_100181454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t type metadata accessor for SMultiselectionPicker(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for SMultiselectionPicker);
}

uint64_t sub_100181480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100183844(a1, a2, a3, (uint64_t)&unk_10024703C);
}

uint64_t sub_10018148C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t result;
  Swift::Int v29;
  void (*v30)(_BYTE *, _QWORD);
  void (*v31)(char *);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *);
  uint64_t v49;
  char *v50;
  Swift::Int v51;
  uint64_t v52;
  _BYTE v53[32];
  uint64_t v54;

  v40 = a5;
  v41 = a8;
  v48 = a1;
  v49 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v50 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v13 + 8));
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = ((uint64_t (*)(void))__chkstk_darwin)();
  v18 = (char *)&v39 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_getAssociatedTypeWitness(0, a6);
  v42 = *(_QWORD *)(v21 - 8);
  v43 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v39 - v22;
  v24 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v24)
    return static Array._allocateUninitialized(_:)(0, a4);
  v46 = AssociatedTypeWitness;
  v25 = v8;
  v26 = a4;
  v27 = v24;
  v54 = ContiguousArray.init()(v26);
  v44 = type metadata accessor for ContiguousArray(0, v26);
  ContiguousArray.reserveCapacity(_:)(v27);
  v47 = v25;
  result = dispatch thunk of Collection.startIndex.getter(a3, a6);
  if ((v27 & 0x8000000000000000) == 0)
  {
    v29 = v27;
    v45 = v20;
    while (v29)
    {
      v51 = v29;
      v30 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v53, v23, a3, a6);
      v31 = *(void (**)(char *))(v15 + 16);
      v32 = v15;
      v33 = v46;
      v31(v18);
      v30(v53, 0);
      v34 = v23;
      v35 = v18;
      v36 = v45;
      v37 = v52;
      v48(v35, v50);
      if (v37)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v43);
        v38 = swift_release(v54);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v39 + 32))(v41, v50, v40, v38);
      }
      v52 = 0;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
      ContiguousArray.append(_:)(v36, v44);
      result = dispatch thunk of Collection.formIndex(after:)(v34, a3, a6);
      v29 = v51 - 1;
      v15 = v32;
      v18 = v35;
      v23 = v34;
      if (v51 == 1)
      {
        (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v43);
        return v54;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10018177C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = type metadata accessor for Set(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
  v2 = type metadata accessor for Binding(0, v1);
  Binding.projectedValue.getter(&v4, v2);
  return v4;
}

uint64_t sub_1001817DC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  __int128 v19;
  __int128 v20;

  v4 = sub_1001464C4(&qword_1002B5890);
  v5 = *(_OWORD *)(a1 + 32);
  v19 = *(_OWORD *)(a1 + 16);
  v20 = v5;
  v6 = type metadata accessor for SMultiselectionPickerList(255, (uint64_t)&v19);
  v7 = sub_10014BEC0(&qword_1002B5898, &qword_1002B5890, (uint64_t)&protocol conformance descriptor for HStack<A>);
  WitnessTable = swift_getWitnessTable(&unk_100242238, v6);
  *(_QWORD *)&v19 = v4;
  *((_QWORD *)&v19 + 1) = v6;
  *(_QWORD *)&v20 = v7;
  *((_QWORD *)&v20 + 1) = WitnessTable;
  v9 = type metadata accessor for NavigationLink(0, &v19);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v19 - v14;
  sub_100181930((_QWORD *)a1);
  swift_getWitnessTable(&protocol conformance descriptor for NavigationLink<A, B>, v9);
  v16 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v16(v15, v13, v9);
  v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, v9);
  v16(a2, v15, v9);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
}

uint64_t sub_100181930(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  _QWORD v8[6];
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  v1 = a1[3];
  v10 = a1[2];
  v11 = v1;
  v2 = a1[5];
  v12 = a1[4];
  v13 = v2;
  v8[2] = v10;
  v8[3] = v1;
  v8[4] = v12;
  v8[5] = v2;
  v3 = sub_100146438(&qword_1002B5890);
  v14[0] = v10;
  v14[1] = v1;
  v14[2] = v12;
  v14[3] = v2;
  v4 = type metadata accessor for SMultiselectionPickerList(0, (uint64_t)v14);
  v5 = sub_10014BEC0(&qword_1002B5898, &qword_1002B5890, (uint64_t)&protocol conformance descriptor for HStack<A>);
  WitnessTable = swift_getWitnessTable(&unk_100242238, v4);
  return sub_100182078((uint64_t)sub_100182170, (uint64_t)v9, (uint64_t)sub_100182180, (uint64_t)v8, v3, v4, v5, WitnessTable);
}

double sub_100181A14@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v12 = *a1;
  v11 = a1[1];
  v13 = a1[2];
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  v33 = a2;
  v34 = a3;
  v35 = a4;
  v36 = a5;
  v14 = type metadata accessor for SMultiselectionPicker(0, (uint64_t)&v33);
  v15 = sub_10018177C(v14);
  v17 = v16;
  v41 = v15;
  v42 = v18;
  v40 = v13;
  v39[0] = v12;
  v39[1] = v11;
  v27 = v12;
  v28 = v11;
  v29 = v13;
  v30 = v15;
  v31 = v16;
  v32 = v18;
  v33 = a2;
  v34 = a3;
  v35 = a4;
  v36 = a5;
  v19 = type metadata accessor for SMultiselectionPickerList(0, (uint64_t)&v33);
  swift_getWitnessTable(&unk_100242238, v19);
  v20 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
  v20(&v33, &v27, v19);
  sub_1001834C0((uint64_t)v39);
  sub_1001834E8(&v40);
  sub_100183510(&v41);
  swift_release(v17);
  sub_1001834E8(&v42);
  v21 = v34;
  v22 = v35;
  v23 = v36;
  v24 = v37;
  v25 = v38;
  v27 = v33;
  v28 = v34;
  v29 = v35;
  v30 = v36;
  v31 = v37;
  v32 = v38;
  v20(a6, &v27, v19);
  swift_bridgeObjectRelease(v25);
  swift_release(v24);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)&result = swift_release(v23).n128_u64[0];
  return result;
}

uint64_t sub_100181B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;

  *(_QWORD *)a9 = static VerticalAlignment.center.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a9 + 8) = 0;
  *(_BYTE *)(a9 + 16) = 1;
  v15 = sub_100146438(&qword_1002B58A0);
  return sub_100181BEC(a1, a2, a3, a4, a5, a9 + *(int *)(v15 + 44));
}

uint64_t sub_100181BEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v33 = a4;
  v34 = a2;
  v32 = a1;
  v35 = a6;
  v30 = sub_100146438(&qword_1002B58A8);
  __chkstk_darwin(v30);
  v11 = (uint64_t *)((char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = type metadata accessor for Text.TruncationMode(0);
  v12 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100146438(&qword_1002B58B0);
  __chkstk_darwin(v36);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a2;
  v38 = a3;
  v39 = a4;
  v40 = a5;
  v31 = (_QWORD *)type metadata accessor for SMultiselectionPicker(0, (uint64_t)&v37);
  sub_100181E6C(v31, (uint64_t)&v37);
  v17 = v37;
  v18 = v38;
  LOBYTE(a5) = v39;
  v28 = v40;
  KeyPath = swift_getKeyPath(&unk_100242160);
  v20 = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for Text.TruncationMode.tail(_:), v29);
  v21 = swift_getKeyPath(&unk_100242190);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))((char *)v11 + *(int *)(v30 + 28), v14, v20);
  *v11 = v21;
  sub_10014BD9C((uint64_t)v11, (uint64_t)&v16[*(int *)(v36 + 36)], &qword_1002B58A8);
  *(_QWORD *)v16 = v17;
  *((_QWORD *)v16 + 1) = v18;
  v16[16] = a5;
  v22 = v28;
  *((_QWORD *)v16 + 3) = v28;
  *((_QWORD *)v16 + 4) = KeyPath;
  *((_QWORD *)v16 + 5) = 1;
  v16[48] = 0;
  sub_10014BE1C(v17, v18, a5);
  swift_bridgeObjectRetain(v22);
  swift_retain(KeyPath);
  sub_10014BDE0((uint64_t)v11, &qword_1002B58A8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  sub_10014BE2C(v17, v18, a5);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v22);
  v23 = sub_100182190((uint64_t)v31);
  v24 = Set.count.getter(v23, v34, v33);
  swift_bridgeObjectRelease(v23);
  v25 = sub_100183344();
  View.badge(_:)(v24, v36, v25);
  return sub_10014BDE0((uint64_t)v16, &qword_1002B58B0);
}

uint64_t sub_100181E6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];

  v4 = sub_100182190((uint64_t)a1);
  v5 = a1[2];
  v6 = a1[4];
  v7 = Set.isEmpty.getter(v4, v5, v6);
  swift_bridgeObjectRelease(v4);
  if ((v7 & 1) != 0)
  {
    v8 = 0xED00006465746365;
    v9 = 0x6C657320656E6F4ELL;
  }
  else
  {
    v31[0] = sub_100182190((uint64_t)a1);
    __chkstk_darwin(v31[0]);
    v10 = a1[3];
    v27 = v5;
    v28 = v10;
    v11 = a1[5];
    KeyPath = swift_getKeyPath(&unk_1002421C0);
    v27 = v10;
    v28 = v6;
    v29 = v11;
    v30 = __chkstk_darwin(KeyPath);
    v13 = type metadata accessor for Set(0, v5, v6);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v13);
    v16 = sub_10018148C((void (*)(char *, char *))sub_100183498, (uint64_t)&v26, v13, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v15);
    v17 = v31[0];
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v17);
    v31[0] = v16;
    v18 = sub_100146438(&qword_1002B5630);
    v19 = sub_10014BEC0((unint64_t *)&qword_1002B5638, &qword_1002B5630, (uint64_t)&protocol conformance descriptor for [A]);
    v9 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v18, v19);
    v8 = v20;
    swift_bridgeObjectRelease(v16);
  }
  v31[0] = v9;
  v31[1] = v8;
  v21 = sub_10014654C();
  result = Text.init<A>(_:)(v31, &type metadata for String, v21);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v23;
  *(_BYTE *)(a2 + 16) = v24 & 1;
  *(_QWORD *)(a2 + 24) = v25;
  return result;
}

uint64_t sub_100182078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v14)(void);
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v14 = (void (*)(void))__chkstk_darwin(a1);
  v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14();
  return NavigationLink.init(destination:label:)(v16, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10018212C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_1001817DC(a1, a2);
}

uint64_t type metadata accessor for SMultiselectionPickerList(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for SMultiselectionPickerList);
}

double sub_100182170@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100181A14(*(uint64_t **)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_100182180@<X0>(uint64_t a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return sub_100181B70(v4[6], v4[2], v4[3], v4[4], v4[5], a1, a2, a3, a4);
}

uint64_t sub_100182190(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = type metadata accessor for Set(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
  v2 = type metadata accessor for Binding(0, v1);
  Binding.wrappedValue.getter(&v4, v2);
  return v4;
}

uint64_t sub_1001821EC@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t WitnessTable;
  void *v44;
  char *v45;
  uint64_t v46;
  char v47[16];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  void *v55;
  uint64_t v56;
  uint64_t AssociatedConformanceWitness;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v3 = v2;
  v45 = a2;
  v5 = a1[2];
  v46 = type metadata accessor for Array(255, v5);
  v36 = a1[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v36);
  v44 = (void *)sub_1001464C4(&qword_1002B5968);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v46);
  v7 = v5;
  v35 = v5;
  *(_QWORD *)&v54 = v46;
  *((_QWORD *)&v54 + 1) = AssociatedTypeWitness;
  v55 = v44;
  v56 = WitnessTable;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v36, v5, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v8 = type metadata accessor for ForEach(255, &v54);
  v42 = sub_10014BEC0(&qword_1002B5970, &qword_1002B5968, (uint64_t)&protocol conformance descriptor for Button<A>);
  v53 = v42;
  v9 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v8);
  *(_QWORD *)&v54 = &type metadata for Never;
  *((_QWORD *)&v54 + 1) = v8;
  v55 = &protocol witness table for Never;
  v56 = v9;
  v10 = type metadata accessor for List(0, &v54);
  v41 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v38 = (char *)&v35 - v11;
  v12 = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v10);
  v40 = v12;
  v39 = sub_10014654C();
  *(_QWORD *)&v54 = v10;
  *((_QWORD *)&v54 + 1) = &type metadata for String;
  v55 = (void *)v12;
  v56 = v39;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v54, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 0);
  v37 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v14 = __chkstk_darwin(OpaqueTypeMetadata2);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v35 - v17;
  v60 = *((_QWORD *)v3 + 2);
  *(_QWORD *)&v54 = v60;
  v20 = a1[3];
  v19 = a1[4];
  v48 = v7;
  v49 = v20;
  v21 = v36;
  v50 = v19;
  v51 = v36;
  swift_bridgeObjectRetain(v60);
  v22 = v46;
  v23 = swift_getWitnessTable(&protocol conformance descriptor for [A], v46);
  v24 = Sequence.sorted(by:)(sub_100183874, v47, v22, v23);
  swift_bridgeObjectRelease(v54);
  *(_QWORD *)&v52 = v24;
  v25 = swift_allocObject(&unk_100264DF0, 96, 7);
  *(_QWORD *)(v25 + 16) = v35;
  *(_QWORD *)(v25 + 24) = v20;
  *(_QWORD *)(v25 + 32) = v19;
  *(_QWORD *)(v25 + 40) = v21;
  v26 = *v3;
  v27 = v3[1];
  *(_OWORD *)(v25 + 48) = *v3;
  *(_OWORD *)(v25 + 64) = v27;
  *(_OWORD *)(v25 + 80) = v3[2];
  v54 = v26;
  v28 = *((_QWORD *)v3 + 3);
  v29 = *((_QWORD *)v3 + 4);
  v58 = *((_QWORD *)v3 + 5);
  v59 = v28;
  sub_100183930(&v60);
  sub_10014BBB4((uint64_t)&v54);
  sub_10014AED0(&v59);
  swift_retain(v29);
  sub_100183930(&v58);
  v30 = v38;
  sub_10018282C((uint64_t)&v52, (uint64_t)sub_1001838D8, v25, v46, (uint64_t)v44, WitnessTable, v42, v21);
  v52 = v54;
  View.navigationTitle<A>(_:)(&v52, v10, &type metadata for String, v40, v39);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v10);
  v31 = v37;
  v32 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  v32(v18, v16, OpaqueTypeMetadata2);
  v33 = *(void (**)(char *, uint64_t))(v31 + 8);
  v33(v16, OpaqueTypeMetadata2);
  v32(v45, v18, OpaqueTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v33)(v18, OpaqueTypeMetadata2);
}

uint64_t sub_1001825E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v6 = dispatch thunk of CustomStringConvertible.description.getter(a3, a4);
  v8 = v7;
  v10 = dispatch thunk of CustomStringConvertible.description.getter(a3, a4);
  v11 = v9;
  if (v6 == v10 && v8 == v9)
  {
    v12 = 0;
    v11 = v8;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v10, v9, 1);
  }
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v11);
  return v12 & 1;
}

uint64_t sub_1001826A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;

  v22[1] = a3;
  v6 = a2[2];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(a1);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 96) & ~v10;
  v12 = swift_allocObject(&unk_100264E40, v11 + v8, v10 | 7);
  v14 = a2[3];
  v13 = a2[4];
  *(_QWORD *)(v12 + 16) = v6;
  *(_QWORD *)(v12 + 24) = v14;
  v15 = a2[5];
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 40) = v15;
  v16 = v3[1];
  *(_OWORD *)(v12 + 48) = *v3;
  *(_OWORD *)(v12 + 64) = v16;
  *(_OWORD *)(v12 + 80) = v3[2];
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, v9, v6);
  v24 = v6;
  v25 = v14;
  v26 = v13;
  v27 = v15;
  v28 = a1;
  v29 = v3;
  v33 = *v3;
  v17 = *((_QWORD *)v3 + 2);
  v31 = *((_QWORD *)v3 + 3);
  v32 = v17;
  v18 = *((_QWORD *)v3 + 4);
  v30 = *((_QWORD *)v3 + 5);
  sub_10014BBB4((uint64_t)&v33);
  sub_100183930(&v32);
  sub_10014AED0(&v31);
  swift_retain(v18);
  sub_100183930(&v30);
  v19 = sub_100146438(&qword_1002B5978);
  v20 = sub_10014BEC0(&qword_1002B5980, &qword_1002B5978, (uint64_t)&protocol conformance descriptor for HStack<A>);
  return Button.init(action:label:)(sub_100183A30, v12, sub_100183A90, v23, v19, v20);
}

uint64_t sub_10018282C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t WitnessTable;
  __n128 v18;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t AssociatedConformanceWitness;

  v21 = a4;
  v22 = a5;
  v23 = a6;
  v24 = a7;
  v25 = a8;
  v26 = a1;
  v27 = a2;
  v28 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 8) + 8) + 8));
  v30 = a4;
  v31 = swift_getAssociatedTypeWitness(255, a8);
  v32 = a5;
  v33 = a6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a8, AssociatedTypeWitness, v31, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v16 = type metadata accessor for ForEach(0, &v30);
  v29 = a7;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
  List<>.init(content:)(sub_100183958, v20, v16, WitnessTable);
  v18 = swift_release(a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(a4 - 8) + 8))(a1, a4, v18);
}

_QWORD *sub_100182978(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(a1);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v28 - v10;
  v12 = type metadata accessor for Optional(0, v5);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v28 - v14;
  if ((sub_100182F28(a1, a2) & 1) != 0)
  {
    v17 = v2[3];
    v16 = v2[4];
    v18 = v2[5];
    v34 = v17;
    v35 = v18;
    v30 = v17;
    v31 = v16;
    v32 = v18;
    sub_10014AED0(&v34);
    swift_retain(v16);
    sub_100183930(&v35);
    v19 = type metadata accessor for Set(255, v5, *(_QWORD *)(a2 + 32));
    v20 = type metadata accessor for Binding(0, v19);
    Binding.wrappedValue.getter(&v33, v20);
    Set.remove(_:)(a1, v19);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v30 = v17;
    v31 = v16;
    v32 = v18;
    v29 = v33;
    Binding.wrappedValue.setter(&v29, v20);
    sub_100183510(&v34);
    v21 = v16;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    v23 = v2[3];
    v22 = v2[4];
    v24 = v2[5];
    v34 = v23;
    v35 = v24;
    v30 = v23;
    v31 = v22;
    v32 = v24;
    sub_10014AED0(&v34);
    swift_retain(v22);
    sub_100183930(&v35);
    v25 = type metadata accessor for Set(255, v5, *(_QWORD *)(a2 + 32));
    v26 = type metadata accessor for Binding(0, v25);
    Binding.wrappedValue.getter(&v33, v26);
    Set.insert(_:)(v11, v9, v25);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    v30 = v23;
    v31 = v22;
    v32 = v24;
    v29 = v33;
    Binding.wrappedValue.setter(&v29, v26);
    sub_100183510(&v34);
    v21 = v22;
  }
  swift_release(v21);
  return sub_1001834E8(&v35);
}

uint64_t sub_100182BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;

  *(_QWORD *)a9 = static VerticalAlignment.center.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a9 + 8) = 0;
  *(_BYTE *)(a9 + 16) = 1;
  v16 = sub_100146438(&qword_1002B5988);
  return sub_100182C5C(a1, a2, a3, a4, a5, a6, a9 + *(int *)(v16 + 44));
}

uint64_t sub_100182C5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v45 = a5;
  v46 = a6;
  v47 = a2;
  v42 = type metadata accessor for SSFImage(0);
  __chkstk_darwin(v42);
  v12 = (uint64_t *)((char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_100146438(&qword_1002B5990);
  v48 = *(_QWORD *)(v13 - 8);
  v49 = v13;
  __chkstk_darwin(v13);
  v43 = (uint64_t)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100146438(&qword_1002B5998);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v42 - v19;
  v50 = dispatch thunk of CustomStringConvertible.description.getter(a3, a4);
  v51 = v21;
  v22 = sub_10014654C();
  v23 = Text.init<A>(_:)(&v50, &type metadata for String, v22);
  v25 = v24;
  v44 = v26;
  v28 = v27;
  v50 = a3;
  v51 = a4;
  v52 = v45;
  v53 = v46;
  v29 = type metadata accessor for SMultiselectionPickerList(0, (uint64_t)&v50);
  v30 = sub_100182F28(a1, v29);
  v31 = 1;
  if ((v30 & 1) != 0)
  {
    v32 = v42;
    v33 = static SymbolRenderingMode.multicolor.getter(v30);
    *v12 = 0x72616D6B63656863;
    v12[1] = 0xE90000000000006BLL;
    v34 = (_QWORD *)((char *)v12 + *(int *)(v32 + 24));
    *v34 = 0;
    v34[1] = 0;
    v35 = static Color.green.getter(v33);
    KeyPath = swift_getKeyPath(&unk_100242288);
    v37 = v43;
    sub_10014BBE4((uint64_t)v12, v43);
    v38 = (uint64_t *)(v37 + *(int *)(v49 + 36));
    *v38 = KeyPath;
    v38[1] = v35;
    sub_10014BC28((uint64_t)v12);
    sub_100183AF0(v37, (uint64_t)v20);
    v31 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v20, v31, 1, v49);
  v39 = v44 & 1;
  sub_10014BD9C((uint64_t)v20, (uint64_t)v18, &qword_1002B5998);
  *(_QWORD *)a7 = v23;
  *(_QWORD *)(a7 + 8) = v25;
  *(_BYTE *)(a7 + 16) = v39;
  *(_QWORD *)(a7 + 24) = v28;
  *(_QWORD *)(a7 + 32) = 0;
  *(_BYTE *)(a7 + 40) = 1;
  v40 = sub_100146438(&qword_1002B59A0);
  sub_10014BD9C((uint64_t)v18, a7 + *(int *)(v40 + 64), &qword_1002B5998);
  sub_10014BE1C(v23, v25, v39);
  swift_bridgeObjectRetain(v28);
  sub_10014BDE0((uint64_t)v20, &qword_1002B5998);
  sub_10014BDE0((uint64_t)v18, &qword_1002B5998);
  sub_10014BE2C(v23, v25, v39);
  return swift_bridgeObjectRelease(v28);
}

uint64_t sub_100182F28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a2;
  v4 = sub_100182190(a2);
  LOBYTE(v2) = Set.contains(_:)(a1, v4, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32));
  swift_bridgeObjectRelease(v4);
  return v2 & 1;
}

uint64_t sub_100182F84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, char *a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[5];

  v42 = a6;
  v43 = a2;
  v44 = a3;
  v45 = a8;
  v41 = a1;
  v11 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(a1);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8) + 8));
  v38 = a7;
  v17 = swift_getAssociatedTypeWitness(255, a7);
  v18 = AssociatedTypeWitness;
  v19 = v17;
  v39 = v17;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a7, v18, v17, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v47[0] = a4;
  v47[1] = v19;
  v47[2] = a5;
  v47[3] = v15;
  v21 = v15;
  v47[4] = AssociatedConformanceWitness;
  v22 = type metadata accessor for ForEach(0, v47);
  v40 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v38 - v26;
  v28 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v41, a4);
  v29 = (_QWORD *)swift_allocObject(&unk_100264E18, 72, 7);
  v29[2] = a4;
  v29[3] = a5;
  v31 = v42;
  v30 = v43;
  v29[4] = v21;
  v29[5] = v31;
  v32 = v38;
  v29[6] = v38;
  v29[7] = v30;
  v33 = v44;
  v29[8] = v44;
  swift_retain(v33);
  ForEach<>.init(_:content:)(v28, sub_100183990, v29, a4, v39, a5, v21, v31, v32);
  v46 = v31;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v22);
  v34 = v40;
  v35 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  v35(v27, v25, v22);
  v36 = *(void (**)(char *, uint64_t))(v34 + 8);
  v36(v25, v22);
  v35(v45, v27, v22);
  return ((uint64_t (*)(char *, uint64_t))v36)(v27, v22);
}

uint64_t sub_1001831D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(uint64_t);
  void (*v13)(char *, char *, uint64_t);
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v16 - v10;
  v12(v9);
  v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v13(v11, v8, a2);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, a2);
  v13(a3, v11, a2);
  return ((uint64_t (*)(char *, uint64_t))v14)(v11, a2);
}

uint64_t sub_1001832A4()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t sub_1001832C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Text.TruncationMode(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.truncationMode.setter(v4);
}

unint64_t sub_100183344()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B58B8;
  if (!qword_1002B58B8)
  {
    v1 = sub_1001464C4(&qword_1002B58B0);
    sub_1001833C8();
    sub_10014BEC0(qword_1002B58E0, &qword_1002B58A8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B58B8);
  }
  return result;
}

unint64_t sub_1001833C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B58C0;
  if (!qword_1002B58C0)
  {
    v1 = sub_1001464C4(&qword_1002B58C8);
    sub_10014BEC0(&qword_1002B58D0, &qword_1002B58D8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B58C0);
  }
  return result;
}

uint64_t sub_10018344C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = dispatch thunk of CustomStringConvertible.description.getter(*(_QWORD *)(a2 + a1 - 32), *(_QWORD *)(a2 + a1 - 24));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_100183480()
{
  return 32;
}

__n128 sub_10018348C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_100183498(uint64_t a1)
{
  uint64_t v1;

  return swift_getAtKeyPath(a1, *(_QWORD *)(v1 + 40));
}

uint64_t sub_1001834C0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_1001834E8(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

_QWORD *sub_100183510(_QWORD *a1)
{
  swift_release(*a1);
  return a1;
}

uint64_t sub_100183538(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_release(a1[3]);
  swift_release(a1[4]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *sub_100183578(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  v6 = a2[4];
  v7 = a2[5];
  a1[4] = v6;
  a1[5] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *sub_1001835E4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a1[3];
  v9 = a2[3];
  a1[3] = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = a2[4];
  v11 = a1[4];
  a1[4] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[5];
  v13 = a1[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

_QWORD *sub_100183690(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  swift_release(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_release(v5);
  v6 = a1[5];
  a1[5] = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_1001836FC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_100183744(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_100183790(__int128 *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  __int128 v9;
  __int128 v10;

  v2 = sub_1001464C4(&qword_1002B5890);
  v3 = a1[1];
  v9 = *a1;
  v10 = v3;
  v4 = type metadata accessor for SMultiselectionPickerList(255, (uint64_t)&v9);
  v5 = sub_10014BEC0(&qword_1002B5898, &qword_1002B5890, (uint64_t)&protocol conformance descriptor for HStack<A>);
  WitnessTable = swift_getWitnessTable(&unk_100242238, v4);
  *(_QWORD *)&v9 = v2;
  *((_QWORD *)&v9 + 1) = v4;
  *(_QWORD *)&v10 = v5;
  *((_QWORD *)&v10 + 1) = WitnessTable;
  v7 = type metadata accessor for NavigationLink(255, &v9);
  return swift_getWitnessTable(&protocol conformance descriptor for NavigationLink<A, B>, v7);
}

uint64_t sub_100183838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100183844(a1, a2, a3, (uint64_t)&unk_100247088);
}

uint64_t sub_100183844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  _OWORD v6[2];

  v4 = *(_OWORD *)(a2 + 32);
  v6[0] = *(_OWORD *)(a2 + 16);
  v6[1] = v4;
  return swift_getOpaqueTypeConformance2(v6, a4, 1);
}

uint64_t sub_100183874(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001825E8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24)) & 1;
}

uint64_t sub_100183894()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_bridgeObjectRelease(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1001838D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v5;
  _QWORD *v6;
  _OWORD v8[2];

  v5 = *(_OWORD *)(v2 + 32);
  v8[0] = *(_OWORD *)(v2 + 16);
  v8[1] = v5;
  v6 = (_QWORD *)type metadata accessor for SMultiselectionPickerList(0, (uint64_t)v8);
  return sub_1001826A4(a1, v6, a2);
}

_QWORD *sub_100183930(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_100183958@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return sub_100182F84(v1[7], v1[8], v1[9], v1[2], v1[3], v1[5], v1[6], a1);
}

uint64_t sub_10018396C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100183990@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_1001831D4(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1001839A4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 96) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 7));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 8));
  swift_release(*((_QWORD *)v0 + 9));
  swift_release(*((_QWORD *)v0 + 10));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 11));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

_QWORD *sub_100183A30()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[2];

  v1 = *(_OWORD *)(v0 + 16);
  v2 = *(_OWORD *)(v0 + 32);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80);
  v4 = v0 + ((v3 + 96) & ~v3);
  v7[0] = v1;
  v7[1] = v2;
  v5 = type metadata accessor for SMultiselectionPickerList(0, (uint64_t)v7);
  return sub_100182978(v4, v5);
}

uint64_t sub_100183A90@<X0>(uint64_t a1@<X6>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return sub_100182BD0(v3[6], v3[7], v3[2], v3[3], v3[4], v3[5], a1, a2, a3);
}

uint64_t sub_100183AA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100183AC8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_100183AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100146438(&qword_1002B5990);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100183B38(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v9;
  void *AssociatedTypeWitness;
  void *v11;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v1 = *a1;
  v2 = a1[3];
  v9 = (void *)type metadata accessor for Array(255, *a1);
  AssociatedTypeWitness = (void *)swift_getAssociatedTypeWitness(255, v2);
  v11 = (void *)sub_1001464C4(&qword_1002B5968);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v3 = type metadata accessor for ForEach(255, &v9);
  sub_10014BEC0(&qword_1002B5970, &qword_1002B5968, (uint64_t)&protocol conformance descriptor for Button<A>);
  v4 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v3);
  v9 = &type metadata for Never;
  AssociatedTypeWitness = (void *)v3;
  v11 = &protocol witness table for Never;
  WitnessTable = v4;
  v5 = type metadata accessor for List(255, &v9);
  v6 = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v5);
  v7 = sub_10014654C();
  v9 = (void *)v5;
  AssociatedTypeWitness = &type metadata for String;
  v11 = (void *)v6;
  WitnessTable = v7;
  return swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 1);
}

uint64_t sub_100183CA4()
{
  uint64_t v0;
  NSString v1;
  Class isa;
  char v3;
  NSString v4;
  Class v5;
  char v6;
  NSString v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  char v21;

  v0 = 0x6E776F6E6B6E75;
  v1 = String._bridgeToObjectiveC()();
  MGGetBoolAnswer();

  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v21 = 2;
  static Bool._conditionallyBridgeFromObjectiveC(_:result:)(isa, &v21);

  v3 = v21;
  v4 = String._bridgeToObjectiveC()();
  MGGetBoolAnswer();

  v5 = Bool._bridgeToObjectiveC()().super.super.isa;
  v20 = 2;
  static Bool._conditionallyBridgeFromObjectiveC(_:result:)(v5, &v20);

  v6 = v20;
  v7 = String._bridgeToObjectiveC()();
  v8 = (void *)MGGetStringAnswer();

  if (v8)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

  }
  else
  {
    v11 = 0xE700000000000000;
    v9 = 0x6E776F6E6B6E75;
  }
  v12 = String._bridgeToObjectiveC()();
  v13 = (void *)MGGetStringAnswer();

  if (v13)
  {
    v0 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v15 = v14;

  }
  else
  {
    v15 = 0xE700000000000000;
  }
  v16 = v6 & 1;
  v17 = type metadata accessor for HardwareManager();
  v18 = swift_allocObject(v17, 200, 7);
  result = sub_100184020(v3 & 1, v16, (void **)v9, v11, v0, v15);
  qword_1002BF068 = v18;
  return result;
}

void sub_100183E88()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[32];

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v11 = v1;
  if (qword_1002B3A48 != -1)
    goto LABEL_16;
  while (1)
  {
    objc_msgSend(v1, "postNotificationName:object:userInfo:", static NSNotificationName.subsIdSelectionChange, 0, 0);
    v2 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v2 + 16);
    if (!v3)
    {

      return;
    }
    if ((*(_BYTE *)(v0 + 152) & 1) != 0)
    {
      LODWORD(v4) = 0;
      goto LABEL_7;
    }
    v4 = *(int *)(v0 + 148);
    if ((uint64_t)v3 <= v4)
      break;
LABEL_7:
    v5 = (int)v4;
    if ((int)v4 < v3)
      goto LABEL_8;
LABEL_15:
    __break(1u);
LABEL_16:
    swift_once(&qword_1002B3A48, sub_100175234);
    v1 = v11;
  }
  v5 = v3 - 1;
  if (v3 - 1 >= v3)
    goto LABEL_15;
LABEL_8:
  sub_10017E2BC(v2 + 32 * v5 + 32, (uint64_t)v14);
  if ((swift_dynamicCast(&v12, v14, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v6 = v13;
    v7 = *(_QWORD *)(v0 + 96);
    *(_QWORD *)(v0 + 88) = v12;
    *(_QWORD *)(v0 + 96) = v6;
    swift_bridgeObjectRelease(v7);
  }
  v8 = *(_QWORD *)(v0 + 128);
  if (v5 >= *(_QWORD *)(v8 + 16))
  {
    __break(1u);
  }
  else
  {
    sub_10017E2BC(v8 + 32 * v5 + 32, (uint64_t)v14);

    if ((swift_dynamicCast(&v12, v14, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v9 = v13;
      v10 = *(_QWORD *)(v0 + 112);
      *(_QWORD *)(v0 + 104) = v12;
      *(_QWORD *)(v0 + 112) = v9;
      swift_bridgeObjectRelease(v10);
    }
  }
}

uint64_t sub_100184020(char a1, char a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  void **aBlock;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t (*v48)();
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v7 = v6;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 22) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = 0xE000000000000000;
  v13 = 1684099177;
  *(_QWORD *)(v7 + 80) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 96) = 0xE000000000000000;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 112) = 0xE000000000000000;
  *(_QWORD *)(v7 + 120) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v7 + 128) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v7 + 136) = 0;
  *(_WORD *)(v7 + 144) = 2;
  *(_DWORD *)(v7 + 148) = 0;
  *(_BYTE *)(v7 + 152) = 1;
  *(_OWORD *)(v7 + 160) = xmmword_1002422C0;
  v14 = 0xE400000000000000;
  *(_QWORD *)(v7 + 176) = 0xE400000000000000;
  *(_DWORD *)(v7 + 184) = 5202011;
  *(_QWORD *)(v7 + 192) = objc_msgSend(objc_allocWithZone((Class)NSTimer), "init");
  *(_BYTE *)(v7 + 24) = a1;
  *(_BYTE *)(v7 + 25) = a2;
  *(_BYTE *)(v7 + 26) = a1 | a2;
  *(_QWORD *)(v7 + 48) = a3;
  *(_QWORD *)(v7 + 56) = a4;
  v50 = 7758189;
  v51 = 0xE300000000000000;
  v15 = sub_10014654C();
  swift_bridgeObjectRetain(a4);
  *(_BYTE *)(v7 + 27) = StringProtocol.contains<A>(_:)(&v50, &type metadata for String, &type metadata for String, v15, v15) & 1;
  aBlock = a3;
  v45 = a4;
  v50 = 6644585;
  v51 = 0xE300000000000000;
  *(_BYTE *)(v7 + 28) = StringProtocol.contains<A>(_:)(&v50, &type metadata for String, &type metadata for String, v15, v15) & 1;
  if ((a5 != 1684099177 || a6 != 0xE400000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a5, a6, 1684099177, 0xE400000000000000, 0) & 1) == 0)
  {
    v13 = 0x656E6F685069;
    v14 = 0xE600000000000000;
  }
  *(_QWORD *)(v7 + 32) = v13;
  *(_QWORD *)(v7 + 40) = v14;
  objc_msgSend(*(id *)(v7 + 16), "invalidate");
  v16 = (void *)objc_opt_self(NSTimer);
  v48 = (uint64_t (*)())sub_10017F720;
  v49 = v7;
  aBlock = _NSConcreteStackBlock;
  v45 = 1107296256;
  v46 = sub_100184690;
  v47 = &unk_100264EC0;
  v17 = _Block_copy(&aBlock);
  v18 = v49;
  swift_retain(v7);
  swift_release(v18);
  v19 = objc_msgSend(v16, "scheduledTimerWithTimeInterval:repeats:block:", 0, v17, 2.0);
  _Block_release(v17);
  v20 = *(void **)(v7 + 16);
  *(_QWORD *)(v7 + 16) = v19;

  if (qword_1002B39F8 != -1)
    v21 = swift_once(&qword_1002B39F8, sub_100174778);
  v25 = qword_1002BEFE8;
  v26 = static os_log_type_t.default.getter(v21, v22, v23, v24);
  v27 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v28 = swift_allocObject(v27, 152, 7);
  *(_OWORD *)(v28 + 16) = xmmword_100242000;
  *(_QWORD *)(v28 + 56) = &type metadata for String;
  v29 = sub_10016B1E0();
  *(_QWORD *)(v28 + 32) = a3;
  *(_QWORD *)(v28 + 40) = a4;
  *(_QWORD *)(v28 + 96) = &type metadata for String;
  *(_QWORD *)(v28 + 104) = v29;
  *(_QWORD *)(v28 + 64) = v29;
  *(_QWORD *)(v28 + 72) = a5;
  *(_QWORD *)(v28 + 80) = a6;
  v30 = *(_BYTE *)(v7 + 27);
  *(_QWORD *)(v28 + 136) = &type metadata for Bool;
  *(_QWORD *)(v28 + 144) = &protocol witness table for Bool;
  *(_BYTE *)(v28 + 112) = v30;
  os_log(_:dso:log:type:_:)("Hardware manager - init - basebandchipset: %{public}@ - deviceClass: %{public}@ - isMavDevice: %{public}d", 105, 2, &_mh_execute_header, v25, v26, v28);
  swift_bridgeObjectRelease(v28);
  v31 = 843928646;
  if (*(_BYTE *)(v7 + 28))
    v31 = 827151430;
  v32 = *(_QWORD *)(v7 + 176);
  *(_QWORD *)(v7 + 168) = v31;
  *(_QWORD *)(v7 + 176) = 0xE400000000000000;
  swift_bridgeObjectRelease(v32);
  if (*(_BYTE *)(v7 + 28))
    v33 = 8323091;
  else
    v33 = 5202011;
  *(_DWORD *)(v7 + 184) = v33;
  v34 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1002B3A40 != -1)
    swift_once(&qword_1002B3A40, sub_10017519C);
  v35 = static NSNotificationName.carrierUpdate;
  v48 = sub_100184BB8;
  v49 = v7;
  aBlock = _NSConcreteStackBlock;
  v45 = 1107296256;
  v46 = sub_1001BC218;
  v47 = &unk_100264EE8;
  v36 = _Block_copy(&aBlock);
  v37 = v49;
  swift_retain(v7);
  v38 = objc_msgSend(v34, "addObserverForName:object:queue:usingBlock:", v35, 0, 0, v36, swift_release(v37).n128_f64[0]);
  _Block_release(v36);
  swift_unknownObjectRelease(v38);

  *(_BYTE *)(v7 + 29) = sub_1001848EC() & 1;
  v48 = (uint64_t (*)())sub_10018462C;
  v49 = 0;
  aBlock = _NSConcreteStackBlock;
  v45 = 1107296256;
  v46 = sub_100184690;
  v47 = &unk_100264F10;
  v39 = _Block_copy(&aBlock);
  v40 = objc_msgSend(v16, "scheduledTimerWithTimeInterval:repeats:block:", 1, v39, 900.0);
  _Block_release(v39);
  v41 = *(void **)(v7 + 192);
  *(_QWORD *)(v7 + 192) = v40;

  return v7;
}

uint64_t sub_100184524()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1002B3A40 != -1)
    swift_once(&qword_1002B3A40, sub_10017519C);
  objc_msgSend(v1, "removeObserver:name:object:", v0, static NSNotificationName.carrierUpdate, 0);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));

  return v0;
}

uint64_t sub_10018460C()
{
  uint64_t v0;

  sub_100184524();
  return swift_deallocClassInstance(v0, 200, 7);
}

void sub_10018462C()
{
  id v0;

  if (qword_1002B3A80 != -1)
    swift_once(&qword_1002B3A80, sub_100184F00);
  v0 = (id)qword_1002BF070;
  sub_1001852E4();

}

void sub_100184690(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_1001846E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  _BYTE v10[40];
  __int128 v11;
  __int128 v12;

  v1 = v0;
  result = Notification.userInfo.getter();
  if (result)
  {
    v3 = result;
    v9[0] = 0x7372656972726163;
    v9[1] = 0xE800000000000000;
    AnyHashable.init<A>(_:)(v9, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v3 + 16) && (v4 = sub_1001C7CFC((uint64_t)v10), (v5 & 1) != 0))
    {
      sub_10017E2BC(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
    }
    swift_bridgeObjectRelease(v3);
    sub_10017F3E8((uint64_t)v10);
    if (*((_QWORD *)&v12 + 1))
    {
      v6 = sub_100146438((uint64_t *)&unk_1002B5610);
      result = swift_dynamicCast(v9, &v11, (char *)&type metadata for Any + 8, v6, 6);
      if ((result & 1) != 0)
      {
        v7 = v9[0];
        swift_beginAccess(v1 + 80, v10, 1, 0);
        v8 = *(_QWORD *)(v1 + 80);
        *(_QWORD *)(v1 + 80) = _swiftEmptyArrayStorage;
        swift_bridgeObjectRelease(v8);
        swift_beginAccess(v1 + 80, &v11, 33, 0);
        sub_1001DA74C(v7);
        return swift_endAccess(&v11);
      }
    }
    else
    {
      return sub_100157748((uint64_t)&v11);
    }
  }
  return result;
}

uint64_t type metadata accessor for HardwareManager()
{
  return objc_opt_self(_TtC13FTMInternal_415HardwareManager);
}

uint64_t sub_1001848EC()
{
  uint64_t v0;
  objc_class *v1;
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v15;
  __int128 v16;

  v1 = objc_getClass("CellularLogging");
  v2 = v1;
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)(&v15, v1);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
  }
  v3 = sub_100157748((uint64_t)&v15);
  if (qword_1002B39F0 != -1)
    v3 = swift_once(&qword_1002B39F0, sub_100174754);
  v7 = qword_1002BEFE0;
  v8 = static os_log_type_t.default.getter(v3, v4, v5, v6);
  v9 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v10 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1002402A0;
  v11 = sub_10016B1E0();
  v12 = 1163219540;
  if (!v2)
    v12 = 0x45534C4146;
  v13 = 0xE400000000000000;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = v11;
  if (!v2)
    v13 = 0xE500000000000000;
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v13;
  os_log(_:dso:log:type:_:)("Base view controller - is cLogging available %{public}s", 55, 2, &_mh_execute_header, v7, v8, v10, v15, v16);
  swift_bridgeObjectRelease(v10);
  if (v2 && (*(_BYTE *)(v0 + 28) & 1) == 0)
    return *(unsigned __int8 *)(v0 + 26);
  else
    return 0;
}

void sub_100184A44(uint64_t a1, uint64_t a2)
{
  NSString v3;
  Class isa;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  char v10;

  v3 = String._bridgeToObjectiveC()();
  MGGetBoolAnswer();

  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v10 = 2;
  static Bool._conditionallyBridgeFromObjectiveC(_:result:)(isa, &v10);

  *(_BYTE *)(a2 + 145) = v10 & 1;
  if (qword_1002B39F8 != -1)
    swift_once(&qword_1002B39F8, sub_100174778);
  v5 = qword_1002BEFE8;
  v6 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("airplane mode changed", 21, 2, &_mh_execute_header, v5, v6, &_swiftEmptyArrayStorage);
  v7 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v8 = v7;
  if (qword_1002B3A60 != -1)
  {
    swift_once(&qword_1002B3A60, sub_1001753E4);
    v7 = v8;
  }
  objc_msgSend(v7, "postNotificationName:object:userInfo:", static NSNotificationName.isAirPlaneModeEnabled, 0, 0, v8);

}

uint64_t sub_100184BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100184BB0(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_100184BCC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return String.subscript.getter(15, a1, a2);
  else
    return 0;
}

uint64_t sub_100184C0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_100146438(&qword_1002B4AA0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_100189944(a1);
  if ((v10 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v9)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  v11 = (uint64_t)v7 + *(int *)(v4 + 48);
  v12 = sub_1001899CC(v11, result, v9, 0, a1);
  *v7 = v12;
  *a2 = v12;
  sub_10017417C(v11, (uint64_t)a2 + *(int *)(v4 + 48), type metadata accessor for STransferMetrics);
  sub_10014BDE0((uint64_t)v7, &qword_1002B4AA0);
  return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

void **sub_100184D4C(uint64_t (*a1)(uint64_t *), void **a2, unint64_t a3)
{
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t *);
  void **v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;

  v5 = a3;
  v25 = (void **)&_swiftEmptyArrayStorage;
  if (a3 >> 62)
    goto LABEL_18;
  for (i = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    v9 = 0;
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
    v23 = v5 & 0xC000000000000001;
    v21 = v5;
    while (1)
    {
      if (v23)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v5);
        v11 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_14:
          __break(1u);
LABEL_15:
          swift_bridgeObjectRelease(v5);
          swift_release(v10);
          swift_release(v25);
          return v3;
        }
        goto LABEL_9;
      }
      if (v9 >= *(_QWORD *)(v22 + 16))
        break;
      v10 = *(_QWORD *)(v5 + 8 * v9 + 32);
      swift_retain(v10);
      v11 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_14;
LABEL_9:
      v24 = v10;
      v3 = a2;
      v12 = a1(&v24);
      if (v4)
        goto LABEL_15;
      if ((v12 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v13 = i;
        v14 = a1;
        v15 = a2;
        v16 = v25[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
        v17 = v16;
        a2 = v15;
        a1 = v14;
        i = v13;
        v5 = v21;
        v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v10);
        v3 = (void **)&v25;
        specialized ContiguousArray._endMutation()(v18);
      }
      else
      {
        swift_release(v10);
      }
      ++v9;
      if (v11 == i)
      {
        v3 = v25;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_18:
    if (v5 < 0)
      v19 = v5;
    else
      v19 = v5 & 0xFFFFFFFFFFFFFF8;
  }
  v3 = (void **)&_swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v5);
  return v3;
}

id sub_100184F00()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FTMCellMonitorSharedClass()), "init");
  qword_1002BF070 = (uint64_t)result;
  return result;
}

id sub_100184F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  id result;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  _QWORD v31[2];
  _BYTE v32[24];

  v5 = a1;
  if (qword_1002B39F8 != -1)
    a1 = swift_once(&qword_1002B39F8, sub_100174778);
  v6 = qword_1002BEFE8;
  v7 = static os_log_type_t.default.getter(a1, a2, a3, a4);
  os_log(_:dso:log:type:_:)("All items cleared", 17, 2, &_mh_execute_header, v6, v7, _swiftEmptyArrayStorage);
  if ((v5 & 1) == 0)
  {
    v8 = sub_1001BE42C((uint64_t)_swiftEmptyArrayStorage);
    v9 = (unint64_t *)(v4 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricDetailsClassObject);
    swift_beginAccess(v4 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricDetailsClassObject, v32, 1, 0);
    v10 = *v9;
    *v9 = v8;
    return (id)swift_bridgeObjectRelease(v10);
  }
  v12 = OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock;
  objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock), "lock");
  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  if ((*(_BYTE *)(qword_1002BF068 + 152) & 1) != 0)
    return objc_msgSend(*(id *)(v4 + v12), "unlock");
  v13 = *(int *)(qword_1002BF068 + 148);
  v14 = (uint64_t *)(v4 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
  swift_beginAccess(v4 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray, v32, 0, 0);
  v15 = *v14;
  v29 = v4;
  if ((unint64_t)*v14 >> 62)
  {
    if (v15 < 0)
      v27 = *v14;
    else
      v27 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    result = (id)_CocoaArrayWrapper.endIndex.getter(v27);
    v16 = (uint64_t)result;
    if (result)
      goto LABEL_10;
    goto LABEL_38;
  }
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = (id)swift_bridgeObjectRetain(v15);
  if (!v16)
  {
LABEL_38:
    swift_bridgeObjectRelease(v15);
    v4 = v29;
    return objc_msgSend(*(id *)(v4 + v12), "unlock");
  }
LABEL_10:
  if (v16 >= 1)
  {
    v17 = 0;
    while (1)
    {
      if ((v15 & 0xC000000000000001) != 0)
      {
        v18 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v15);
      }
      else
      {
        v18 = *(_QWORD **)(v15 + 8 * v17 + 32);
        swift_retain(v18);
      }
      if (*(_QWORD *)((char *)v18 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_subsId) == v13)
      {
        v19 = v18[4];
        v20 = v18[5];
        v21 = v19 == 5521746 && v20 == 0xE300000000000000;
        if (!v21
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v18[4], v18[5], 5521746, 0xE300000000000000, 0) & 1) == 0
          && (v19 != 0x544C20726568744FLL || v20 != 0xEF73646E61422045)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, 0x544C20726568744FLL, 0xEF73646E61422045, 0) & 1) == 0)
        {
          v22 = v18[9];
          v30[0] = v18[8];
          v30[1] = v22;
          v31[0] = 5522283;
          v31[1] = 0xE300000000000000;
          v23 = sub_10014654C();
          if ((StringProtocol.contains<A>(_:)(v31, &type metadata for String, &type metadata for String, v23, v23) & 1) == 0)
          {
            swift_beginAccess(v14, v30, 33, 0);
            swift_retain(v18);
            v28 = sub_100189E38(v14, (uint64_t)v18);
            swift_release(v18);
            v24 = *v14;
            if ((unint64_t)*v14 >> 62)
            {
              if (v24 < 0)
                v26 = *v14;
              else
                v26 = v24 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v24);
              v25 = _CocoaArrayWrapper.endIndex.getter(v26);
              swift_bridgeObjectRelease(v24);
            }
            else
            {
              v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            result = (id)v28;
            if (v25 < v28)
              goto LABEL_41;
            sub_100198970(v28, v25);
            swift_endAccess(v30);
          }
        }
      }
      ++v17;
      swift_release(v18);
      if (v16 == v17)
        goto LABEL_38;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

double sub_1001852E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  double result;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD aBlock[5];
  uint64_t v35;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v1 = *(_QWORD *)(v0 - 8);
  v31 = v0;
  v32 = v1;
  __chkstk_darwin(v0);
  v30 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v10 - 8);
  v29 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  static DispatchQoS.background.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  v13 = sub_100146004(&qword_1002B5E80, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_100146438(&qword_1002B5E88);
  v15 = sub_10018A668((unint64_t *)&unk_1002B5E90, &qword_1002B5E88);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v14, v15, v7, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v3);
  v16 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000013, 0x8000000100212FC0, v12, v9, v6, 0);
  v17 = swift_allocObject(&unk_100265128, 24, 7);
  v18 = v27;
  *(_QWORD *)(v17 + 16) = v27;
  aBlock[4] = sub_10018A760;
  v35 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_100265140;
  v19 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v18);
  v33 = &_swiftEmptyArrayStorage;
  v20 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v22 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
  v24 = v30;
  v23 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v21, v22, v31, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v24, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v24, v23);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v29);
  *(_QWORD *)&result = swift_release(v35).n128_u64[0];
  return result;
}

uint64_t sub_100185620(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  char *v26;
  Class isa;
  NSString v28;
  Class v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _BYTE v52[24];
  char v53[24];
  char v54[32];

  v2 = type metadata accessor for TimeZone(0);
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  __chkstk_darwin(v2);
  v48 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100146438(&qword_1002B4168);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v51 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v40 = (char *)&v39 - v12;
  Date.init()(v11);
  v47 = a1;
  v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
  swift_beginAccess(v13, v54, 0, 0);
  v46 = v13;
  v14 = *v13;
  if ((unint64_t)*v13 >> 62)
    goto LABEL_30;
  v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v14);
  if (!v15)
  {
LABEL_34:
    swift_bridgeObjectRelease(v14);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v40, v7);
  }
LABEL_3:
  if (v15 >= 1)
  {
    v17 = 0;
    v41 = OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock;
    v42 = v8;
    v44 = v6;
    v45 = 0x8000000100211C70;
    v43 = v7;
    while (1)
    {
      if ((v14 & 0xC000000000000001) != 0)
      {
        v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v14);
      }
      else
      {
        v18 = *(_QWORD *)(v14 + 8 * v17 + 32);
        swift_retain(v18);
      }
      v19 = *(_QWORD *)(v18 + 32);
      v20 = *(_QWORD *)(v18 + 40);
      v21 = v19 == 5521746 && v20 == 0xE300000000000000;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, 5521746, 0xE300000000000000, 0) & 1) != 0)
      {
        swift_release(v18);
      }
      else
      {
        v22 = v18 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
        swift_beginAccess(v18 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp, v53, 0, 0);
        sub_100159C2C(v22, (uint64_t)v6);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
        {
          swift_release(v18);
          sub_10014BDE0((uint64_t)v6, &qword_1002B4168);
        }
        else
        {
          v23 = v6;
          v24 = v51;
          (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v51, v23, v7);
          if (qword_1002B39D0 != -1)
            swift_once(&qword_1002B39D0, sub_10016AC30);
          v25 = (void *)qword_1002BEFC8;
          v26 = v48;
          static TimeZone.current.getter();
          isa = TimeZone._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v49 + 8))(v26, v50);
          objc_msgSend(v25, "setTimeZone:", isa);

          v28 = String._bridgeToObjectiveC()();
          objc_msgSend(v25, "setDateFormat:", v28);

          v29 = Date._bridgeToObjectiveC()().super.isa;
          v30 = objc_msgSend(v25, "stringFromDate:", v29);

          static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
          v32 = v31;

          v33 = sub_100185B10();
          swift_bridgeObjectRelease(v32);
          if (v33 < 881)
          {
            v8 = v42;
            v7 = v43;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v24, v43);
            swift_release(v18);
            v6 = v44;
          }
          else
          {
            objc_msgSend(*(id *)(v47 + v41), "lock");
            v34 = v46;
            swift_beginAccess(v46, v52, 33, 0);
            swift_retain(v18);
            v35 = sub_100189E38(v34, v18);
            swift_release(v18);
            v7 = *v34;
            if ((unint64_t)v7 >> 62)
            {
              if (v7 < 0)
                v37 = v7;
              else
                v37 = v7 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v7);
              v8 = _CocoaArrayWrapper.endIndex.getter(v37);
              swift_bridgeObjectRelease(v7);
            }
            else
            {
              v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            v6 = v44;
            if (v8 < v35)
            {
              __break(1u);
LABEL_30:
              if (v14 < 0)
                v38 = v14;
              else
                v38 = v14 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v14);
              result = _CocoaArrayWrapper.endIndex.getter(v38);
              v15 = result;
              if (!result)
                goto LABEL_34;
              goto LABEL_3;
            }
            sub_100198970(v35, v8);
            swift_endAccess(v52);
            objc_msgSend(*(id *)(v47 + v41), "unlock");
            v36 = swift_release(v18);
            v8 = v42;
            v7 = v43;
            (*(void (**)(char *, uint64_t, __n128))(v42 + 8))(v51, v43, v36);
          }
        }
      }
      if (v15 == ++v17)
        goto LABEL_34;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100185B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSString v17;
  NSString v18;
  id v19;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  NSString v23;
  id v24;
  char *v25;
  char *v26;
  char *v27;
  double v28;
  char *v29;
  uint64_t (*v30)(char *, uint64_t);
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  char *v38;

  v0 = sub_100146438(&qword_1002B4168);
  v1 = __chkstk_darwin(v0);
  v37 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v4 = (char *)&v33 - v3;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v34 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v38 = (char *)&v33 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v33 - v12;
  Date.init()(v11);
  v35 = sub_10016AC60();
  v15 = v14;
  v36 = *(void (**)(char *, uint64_t))(v6 + 8);
  v36(v13, v5);
  if (qword_1002B39D0 != -1)
    swift_once(&qword_1002B39D0, sub_10016AC30);
  v16 = (void *)qword_1002BEFC8;
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v16, "setDateFormat:", v17);

  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v16, "dateFromString:", v18);

  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_12;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v19);

  v20 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v20(v4, v13, v5);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v21(v4, 0, 1, v5);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v22(v4, 1, v5) == 1)
  {
LABEL_12:
    swift_bridgeObjectRelease(v15);
    v32 = (uint64_t)v4;
LABEL_15:
    sub_10014BDE0(v32, &qword_1002B4168);
    return 0;
  }
  v20(v38, v4, v5);
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  v24 = objc_msgSend(v16, "dateFromString:", v23);

  if (!v24)
  {
    v25 = v37;
    v21(v37, 1, 1, v5);
    goto LABEL_14;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

  v25 = v37;
  v20(v37, v13, v5);
  v21(v25, 0, 1, v5);
  if (v22(v25, 1, v5) == 1)
  {
LABEL_14:
    v36(v38, v5);
    v32 = (uint64_t)v25;
    goto LABEL_15;
  }
  v26 = v34;
  v20(v34, v25, v5);
  v27 = v38;
  v28 = Date.timeIntervalSince(_:)(v38);
  v29 = v26;
  v30 = (uint64_t (*)(char *, uint64_t))v36;
  v36(v29, v5);
  result = v30(v27, v5);
  if ((~*(_QWORD *)&v28 & 0x7FF0000000000000) != 0)
  {
    if (v28 > -9.22337204e18)
    {
      if (v28 < 9.22337204e18)
        return (uint64_t)v28;
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

double sub_100185EE0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  void *object;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  double result;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void **aBlock;
  uint64_t v53;
  uint64_t (*v54)();
  void *v55;
  void (*v56)();
  _QWORD *v57;
  _QWORD *v58;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  __chkstk_darwin(v4);
  v49 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v44 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v48 - 8);
  v10 = __chkstk_darwin(v48);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002B39E8 != -1)
    v10 = swift_once(&qword_1002B39E8, sub_100174680);
  v16 = qword_1002BEFD8;
  v17 = static os_log_type_t.default.getter(v10, v11, v12, v13);
  v18 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1002402A0;
  v58 = a2;
  aBlock = (void **)dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v53 = v20;
  v21._countAndFlagsBits = 44;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v42 = a2;
  v22._countAndFlagsBits = Dictionary.description.getter(a1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  object = v22._object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(object);
  v24 = aBlock;
  v25 = v53;
  *(_QWORD *)(v19 + 56) = &type metadata for String;
  *(_QWORD *)(v19 + 64) = sub_10016B1E0();
  *(_QWORD *)(v19 + 32) = v24;
  *(_QWORD *)(v19 + 40) = v25;
  os_log(_:dso:log:type:_:)("Data received from CT %{private}s", 33, 2, &_mh_execute_header, v16, v17, v19);
  swift_bridgeObjectRelease(v19);
  sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  static DispatchQoS.userInteractive.getter();
  aBlock = (void **)_swiftEmptyArrayStorage;
  v26 = sub_100146004(&qword_1002B5E80, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v27 = sub_100146438(&qword_1002B5E88);
  v28 = sub_10018A668((unint64_t *)&unk_1002B5E90, &qword_1002B5E88);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v27, v28, v7, v26);
  v29 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v44, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v45);
  v30 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x614463697274654DLL, 0xEE0064616F4C6174, v15, v9, v29, 0);
  v31 = (_QWORD *)swift_allocObject(&unk_1002650D8, 40, 7);
  v32 = v47;
  v31[2] = a1;
  v31[3] = v32;
  v31[4] = v42;
  v56 = sub_10018A730;
  v57 = v31;
  aBlock = _NSConcreteStackBlock;
  v53 = 1107296256;
  v54 = sub_1001BE428;
  v55 = &unk_1002650F0;
  v33 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain(a1);
  static DispatchQoS.unspecified.getter(v32);
  v58 = _swiftEmptyArrayStorage;
  v34 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v35 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v36 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
  v37 = v49;
  v38 = v35;
  v39 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v38, v36, v51, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v37, v33);
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v39);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v15, v48);
  *(_QWORD *)&result = swift_release(v57).n128_u64[0];
  return result;
}

void sub_10018635C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  const char *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  unint64_t v37;
  Swift::String v38;
  uint64_t object;
  Swift::String v40;
  char v41;
  Swift::String v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  Swift::String v47;
  Swift::String v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  Swift::String v58;
  Swift::String v59;
  char v60;
  Swift::String v61;
  Swift::String v62;
  char v63;
  unint64_t v64;
  char v65;
  Swift::String v66;
  Swift::String v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  char *v80;
  BOOL v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  char *v122;
  _OWORD *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  void *v140;
  __int128 v141;
  _OWORD v142[2];
  char v143[8];
  uint64_t v144;
  unint64_t v145;
  char v146;

  v120 = a3;
  v125 = a2;
  v4 = sub_100146438(&qword_1002B4168);
  __chkstk_darwin(v4);
  v110 = (char *)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char *)&type metadata for Any;
  v7 = "kCTCellMonitorCellRadioAccessTechnology";
  if (*(_QWORD *)(a1 + 16)
    && (v8 = sub_1001C7C98(0xD000000000000027, 0x8000000100210290), (v9 & 1) != 0)
    && (sub_10017E2BC(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)&v144),
        (swift_dynamicCast(&v141, &v144, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0))
  {
    v11 = (_QWORD *)*((_QWORD *)&v141 + 1);
    v10 = v141;
    v12 = 0xD000000000000025;
    v13 = "kCTCellMonitorRadioAccessTechnologyNR";
    if (v141 != __PAIR128__(0x80000001002127C0, 0xD000000000000025))
      goto LABEL_127;
    swift_bridgeObjectRelease(0x80000001002127C0);
    v132 = 1;
  }
  else
  {
    v132 = 0;
  }
LABEL_7:
  v14 = *(_QWORD *)(a1 + 64);
  v113 = a1 + 64;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v124 = OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock;
  v18 = (uint64_t *)(v125 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
  swift_bridgeObjectRetain(a1);
  v121 = v18;
  swift_beginAccess(v18, v143, 0, 0);
  v19 = 0;
  v20 = (unint64_t)(v15 + 63) >> 6;
  v123 = v142;
  v128 = &v146;
  v107 = v20 - 1;
  v116 = v20;
  v108 = v20 - 5;
  v109 = a1 + 104;
  v127 = 0x80000001002124B0;
  v122 = v6 + 8;
  v115 = 0x80000001002124D0;
  v112 = (unint64_t)"avg_values_phy_cell_id";
  v126 = 0x8000000100210250;
  v114 = 0x8000000100212F90;
  v117 = v7 - 32;
  v111 = (unint64_t)(v7 - 32) | 0x8000000000000000;
  v129 = a1;
  while (1)
  {
    if (v17)
    {
      v21 = __clz(__rbit64(v17));
      v22 = (v17 - 1) & v17;
      v23 = v21 | (v19 << 6);
      goto LABEL_14;
    }
    v27 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v27 >= v116)
    {
      v29 = v19;
    }
    else
    {
      v28 = *(_QWORD *)(v113 + 8 * v27);
      if (v28)
        goto LABEL_18;
      v29 = v19 + 1;
      if ((uint64_t)(v19 + 2) < v116)
      {
        v28 = *(_QWORD *)(v113 + 8 * (v19 + 2));
        if (v28)
        {
          v27 = v19 + 2;
          goto LABEL_18;
        }
        v29 = v19 + 2;
        if ((uint64_t)(v19 + 3) < v116)
        {
          v28 = *(_QWORD *)(v113 + 8 * (v19 + 3));
          if (v28)
          {
            v27 = v19 + 3;
LABEL_18:
            v22 = (v28 - 1) & v28;
            v23 = __clz(__rbit64(v28)) + (v27 << 6);
            v19 = v27;
LABEL_14:
            v24 = *(_QWORD *)(a1 + 56);
            v25 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v23);
            v26 = v25[1];
            *(_QWORD *)&v141 = *v25;
            *((_QWORD *)&v141 + 1) = v26;
            sub_10017E2BC(v24 + 32 * v23, (uint64_t)v123);
            swift_bridgeObjectRetain(v26);
            goto LABEL_21;
          }
          v27 = v19 + 4;
          v29 = v19 + 3;
          if ((uint64_t)(v19 + 4) < v116)
          {
            v28 = *(_QWORD *)(v113 + 8 * v27);
            if (v28)
              goto LABEL_18;
            while (v108 != v19)
            {
              v28 = *(_QWORD *)(v109 + 8 * v19++);
              if (v28)
              {
                v27 = v19 + 4;
                goto LABEL_18;
              }
            }
            v29 = v107;
          }
        }
      }
    }
    v22 = 0;
    memset(v142, 0, sizeof(v142));
    v19 = v29;
    v141 = 0u;
LABEL_21:
    sub_10017F288((uint64_t)&v141, (uint64_t)&v144);
    v30 = v145;
    if (!v145)
    {
      swift_release(a1);
      return;
    }
    v130 = v22;
    v131 = v19;
    v31 = v144;
    sub_10017F278(v128, &v141);
    swift_bridgeObjectRetain(v30);
    v32 = sub_10018A150(v132 & 1);
    v34 = v33;
    v36 = v35;
    swift_bridgeObjectRelease(v30);
    v37 = v30;
    v38 = String.lowercased()();
    object = (uint64_t)v38._object;
    v40 = String.lowercased()();
    if (v38._countAndFlagsBits == v40._countAndFlagsBits && v38._object == v40._object)
    {
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v38._object);
    }
    else
    {
      v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v38._countAndFlagsBits, v38._object, v40._countAndFlagsBits, v40._object, 0);
      swift_bridgeObjectRelease(v38._object);
      swift_bridgeObjectRelease(v40._object);
      if ((v41 & 1) == 0)
      {
        v46 = v37;
        v45 = v31;
        a1 = v129;
        goto LABEL_33;
      }
      object = v34;
    }
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(v37);
    *(_QWORD *)&v138 = 0;
    *((_QWORD *)&v138 + 1) = 0xE000000000000000;
    _print_unlocked<A, B>(_:_:)(&v141, &v138, v122, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v42._countAndFlagsBits = 32;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    a1 = v129;
    if (*(_QWORD *)(v129 + 16) && (v43 = sub_1001C7C98(0xD000000000000011, v115), (v44 & 1) != 0))
    {
      sub_10017E2BC(*(_QWORD *)(a1 + 56) + 32 * v43, (uint64_t)&v136);
      sub_10017F278(&v136, &v139);
    }
    else
    {
      v140 = &type metadata for String;
      *(_QWORD *)&v139 = 0;
      *((_QWORD *)&v139 + 1) = 0xE000000000000000;
    }
    _print_unlocked<A, B>(_:_:)(&v139, &v138, v6 + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    sub_10014652C(&v139);
    v140 = &type metadata for String;
    v139 = v138;
    sub_10014652C(&v141);
    sub_10017F278(&v139, &v141);
    v45 = 0x206B726F7774654ELL;
    v46 = 0xEC0000004E4D4C50;
    v34 = 0xE300000000000000;
    v36 = 1;
    v32 = 5521746;
LABEL_33:
    v133 = v45;
    v134 = (char *)v46;
    v47 = String.lowercased()();
    v48 = String.lowercased()();
    if (v47._countAndFlagsBits == v48._countAndFlagsBits && v47._object == v48._object)
    {
      swift_bridgeObjectRelease_n(v47._object, 2);
    }
    else
    {
      v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v47._countAndFlagsBits, v47._object, v48._countAndFlagsBits, v48._object, 0);
      swift_bridgeObjectRelease(v47._object);
      swift_bridgeObjectRelease(v48._object);
      if ((v49 & 1) == 0)
        goto LABEL_56;
    }
    *(_QWORD *)&v138 = 0;
    *((_QWORD *)&v138 + 1) = 0xE000000000000000;
    if (!*(_QWORD *)(a1 + 16))
    {
      v137 = 0u;
      v136 = 0u;
LABEL_44:
      v140 = &type metadata for String;
      *(_QWORD *)&v139 = 0;
      *((_QWORD *)&v139 + 1) = 0xE000000000000000;
      sub_10014BDE0((uint64_t)&v136, (uint64_t *)&unk_1002B5670);
      goto LABEL_45;
    }
    v50 = (uint64_t)v134;
    swift_bridgeObjectRetain(v134);
    v51 = sub_1001C7C98(v133, v50);
    if ((v52 & 1) != 0)
    {
      sub_10017E2BC(*(_QWORD *)(a1 + 56) + 32 * v51, (uint64_t)&v136);
    }
    else
    {
      v137 = 0u;
      v136 = 0u;
    }
    swift_bridgeObjectRelease(v134);
    if (!*((_QWORD *)&v137 + 1))
      goto LABEL_44;
    sub_10017F278(&v136, &v139);
LABEL_45:
    _print_unlocked<A, B>(_:_:)(&v139, &v138, v6 + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    sub_10014652C(&v139);
    v53 = sub_1001AD104(v138, *((unint64_t *)&v138 + 1));
    if ((v54 & 1) == 0 && v53 == 2)
    {
      *(_QWORD *)&v138 = 0;
      *((_QWORD *)&v138 + 1) = 0xE000000000000000;
      if (*(_QWORD *)(a1 + 16) && (v55 = sub_1001C7C98(0xD000000000000027, v111), (v56 & 1) != 0))
      {
        sub_10017E2BC(*(_QWORD *)(a1 + 56) + 32 * v55, (uint64_t)&v136);
        sub_10017F278(&v136, &v139);
      }
      else
      {
        v140 = &type metadata for String;
        *(_QWORD *)&v139 = 0;
        *((_QWORD *)&v139 + 1) = 0xE000000000000000;
      }
      _print_unlocked<A, B>(_:_:)(&v139, &v138, v6 + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      sub_10014652C(&v139);
      v57 = *((_QWORD *)&v138 + 1);
      v58 = String.lowercased()();
      swift_bridgeObjectRelease(v57);
      v59 = String.lowercased()();
      if (v58._countAndFlagsBits == v59._countAndFlagsBits && v58._object == v59._object)
      {
        swift_bridgeObjectRelease_n(v58._object, 2);
      }
      else
      {
        v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v58._countAndFlagsBits, v58._object, v59._countAndFlagsBits, v59._object, 0);
        swift_bridgeObjectRelease(v58._object);
        swift_bridgeObjectRelease(v59._object);
        if ((v60 & 1) == 0)
          goto LABEL_56;
      }
      v140 = &type metadata for String;
      *(_QWORD *)&v139 = 51;
      *((_QWORD *)&v139 + 1) = 0xE100000000000000;
      sub_10014652C(&v141);
      sub_10017F278(&v139, &v141);
    }
LABEL_56:
    if ((v132 & 1) == 0)
      goto LABEL_64;
    v61 = String.lowercased()();
    v62 = String.lowercased()();
    if (v61._countAndFlagsBits == v62._countAndFlagsBits && v61._object == v62._object)
    {
      swift_bridgeObjectRelease_n(v61._object, 2);
    }
    else
    {
      v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v61._countAndFlagsBits, v61._object, v62._countAndFlagsBits, v62._object, 0);
      swift_bridgeObjectRelease(v61._object);
      swift_bridgeObjectRelease(v62._object);
      if ((v63 & 1) == 0)
        goto LABEL_64;
    }
    if (*(_QWORD *)(a1 + 16))
    {
      v64 = sub_1001C7C98(0xD00000000000001CLL, v112 | 0x8000000000000000);
      if ((v65 & 1) != 0)
      {
        sub_10017E2BC(*(_QWORD *)(a1 + 56) + 32 * v64, (uint64_t)&v139);
        if ((swift_dynamicCast(&v136, &v139, v6 + 8, &type metadata for Int, 6) & 1) != 0)
        {
LABEL_10:
          swift_bridgeObjectRelease(v34);
          v19 = v131;
          v17 = v130;
          goto LABEL_11;
        }
      }
    }
LABEL_64:
    if ((v36 & 1) == 0)
      goto LABEL_10;
    *(_QWORD *)&v139 = v32;
    *((_QWORD *)&v139 + 1) = v34;
    swift_bridgeObjectRetain(v34);
    v66._countAndFlagsBits = 126;
    v66._object = (void *)0xE100000000000000;
    String.append(_:)(v66);
    *(_QWORD *)&v136 = v120;
    v67._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v11 = v67._object;
    String.append(_:)(v67);
    swift_bridgeObjectRelease(v11);
    v68 = *((_QWORD *)&v139 + 1);
    v135 = v139;
    objc_msgSend(*(id *)(v125 + v124), "lock");
    v69 = *v121;
    *(_QWORD *)&v139 = _swiftEmptyArrayStorage;
    v119 = v32;
    if ((unint64_t)v69 >> 62)
    {
      if (v69 < 0)
        v11 = (_QWORD *)v69;
      else
        v11 = (_QWORD *)(v69 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRetain(v69);
      v10 = _CocoaArrayWrapper.endIndex.getter(v11);
      a1 = v10;
    }
    else
    {
      a1 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v68);
      v10 = swift_bridgeObjectRetain(v69);
    }
    v70 = v133;
    v7 = (const char *)v68;
    if (a1)
    {
      v118 = v34;
      v71 = 0;
      v6 = v134;
      while (1)
      {
        if ((v69 & 0xC000000000000001) != 0)
        {
          v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v71, v69);
          v11 = (_QWORD *)v10;
          v75 = v71 + 1;
          if (__OFADD__(v71, 1))
            goto LABEL_126;
        }
        else
        {
          if (v71 >= *(_QWORD *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            v132 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, (unint64_t)(v13 - 32) | 0x8000000000000000, 0);
            swift_bridgeObjectRelease(v11);
            goto LABEL_7;
          }
          v11 = *(_QWORD **)(v69 + 8 * v71 + 32);
          v10 = swift_retain(v11);
          v75 = v71 + 1;
          if (__OFADD__(v71, 1))
            goto LABEL_126;
        }
        v76 = v11[2];
        v77 = v11[3];
        v78 = v76 == v135 && v77 == v68;
        if ((v78 || (_stringCompareWithSmolCheck(_:_:expecting:)(v76, v77, v135, v68, 0) & 1) != 0)
          && ((v79 = v11[8], v80 = (char *)v11[9], v79 == v70) ? (v81 = v80 == v6) : (v81 = 0),
              v81 || (_stringCompareWithSmolCheck(_:_:expecting:)(v79, v80, v70, v6, 0) & 1) != 0))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v72 = *(_QWORD *)(v139 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v72);
          v73 = v72;
          v6 = v134;
          v74 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v11);
          v10 = specialized ContiguousArray._endMutation()(v74);
          v70 = v133;
        }
        else
        {
          swift_release(v11);
        }
        ++v71;
        if (v75 == a1)
        {
          v82 = v139;
          a1 = v129;
          v6 = (char *)&type metadata for Any;
          v34 = v118;
          goto LABEL_90;
        }
      }
    }
    v82 = (unint64_t)_swiftEmptyArrayStorage;
    a1 = v129;
LABEL_90:
    swift_bridgeObjectRelease(v69);
    swift_bridgeObjectRelease(v68);
    if ((v82 & 0x8000000000000000) != 0 || (v82 & 0x4000000000000000) != 0)
    {
      if (_CocoaArrayWrapper.endIndex.getter(v82))
      {
LABEL_93:
        if ((v82 & 0xC000000000000001) != 0)
        {
          v83 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v82);
        }
        else
        {
          if (!*(_QWORD *)(v82 + 16))
            goto LABEL_129;
          v83 = *(_QWORD **)(v82 + 32);
          swift_retain(v83);
        }
        swift_bridgeObjectRelease(v34);
        swift_release(v82);
        swift_bridgeObjectRelease(v68);
        v85 = v83[14];
        v84 = v83[15];
        *(_QWORD *)&v139 = 0;
        *((_QWORD *)&v139 + 1) = 0xE000000000000000;
        swift_bridgeObjectRetain(v84);
        _print_unlocked<A, B>(_:_:)(&v141, &v139, v6 + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v86 = *((_QWORD *)&v139 + 1);
        if (__PAIR128__(v84, v85) == v139)
        {
          swift_release(v83);
          swift_bridgeObjectRelease_n(v84, 2);
        }
        else
        {
          v87 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v84, v139, *((_QWORD *)&v139 + 1), 0);
          swift_bridgeObjectRelease(v84);
          swift_bridgeObjectRelease(v86);
          if ((v87 & 1) != 0)
          {
            swift_release(v83);
          }
          else
          {
            *(_QWORD *)&v139 = 0;
            *((_QWORD *)&v139 + 1) = 0xE000000000000000;
            _print_unlocked<A, B>(_:_:)(&v141, &v139, v6 + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
            v88 = *((_QWORD *)&v139 + 1);
            v89 = v83[15];
            v83[14] = v139;
            v83[15] = v88;
            swift_bridgeObjectRelease(v89);
            v90 = sub_10019090C();
            v91 = v83[13];
            v83[12] = v90;
            v83[13] = v92;
            swift_release(v83);
            swift_bridgeObjectRelease(v91);
          }
        }
        v19 = v131;
        v17 = v130;
        goto LABEL_122;
      }
    }
    else if (*(_QWORD *)(v82 + 16))
    {
      goto LABEL_93;
    }
    v93 = a1;
    swift_release(v82);
    *(_QWORD *)&v139 = 0;
    *((_QWORD *)&v139 + 1) = 0xE000000000000000;
    v94 = (uint64_t)v134;
    swift_bridgeObjectRetain(v134);
    v95 = _print_unlocked<A, B>(_:_:)(&v141, &v139, v6 + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v96 = v139;
    v97 = (uint64_t)v110;
    Date.init()(v95);
    v98 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v97, 0, 1, v98);
    v99 = type metadata accessor for FTMAllMetricsModel(0);
    swift_allocObject(v99, *(unsigned int *)(v99 + 48), *(unsigned __int16 *)(v99 + 52));
    v100 = sub_1001905A8(v135, v68, v119, v34, v70, v94, v96, *((uint64_t *)&v96 + 1), 0, 0xE000000000000000, v97, v120, 1);
    v101 = v121;
    swift_beginAccess(v121, &v139, 33, 0);
    v102 = swift_retain(v100);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v102);
    v104 = *(_QWORD *)((*v101 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v103 = *(_QWORD *)((*v101 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v104 >= v103 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v103 > 1, v104 + 1, 1);
    v105 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v104, v100);
    specialized Array._endMutation()(v105);
    swift_endAccess(&v139);
    swift_release(v100);
    v19 = v131;
    v17 = v130;
    a1 = v93;
LABEL_122:
    objc_msgSend(*(id *)(v125 + v124), "unlock");
LABEL_11:
    sub_10014652C(&v141);
    swift_bridgeObjectRelease(v134);
  }
  __break(1u);
LABEL_129:
  __break(1u);
}

double sub_10018732C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  void *object;
  Swift::String v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  void *v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  double result;
  _BYTE v70[12];
  unsigned int v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  void **aBlock;
  uint64_t v88;
  uint64_t (*v89)();
  void *v90;
  id (*v91)();
  uint64_t v92;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v84 = *(_QWORD *)(v2 - 8);
  v85 = v2;
  __chkstk_darwin(v2);
  v83 = &v70[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = (int *)type metadata accessor for Metric(0);
  v77 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v78 = v5;
  v79 = &v70[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v76 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v74 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v75 = &v70[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v73 = &v70[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for DispatchQoS(0);
  v80 = *(_QWORD *)(v9 - 8);
  v81 = v9;
  v10 = __chkstk_darwin(v9);
  v15 = &v70[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1002B39E8 != -1)
    v10 = swift_once(&qword_1002B39E8, sub_100174680);
  v72 = qword_1002BEFD8;
  v71 = static os_log_type_t.default.getter(v10, v11, v12, v13);
  v16 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1002402A0;
  v18 = *(id *)(a1 + v4[5]);
  v19 = objc_msgSend(v18, "description");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  aBlock = (void **)v20;
  v88 = v22;
  v23._countAndFlagsBits = 44;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  LODWORD(v86) = *(_DWORD *)(a1 + v4[13]);
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(object);
  v26._countAndFlagsBits = 44;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27 = *(id *)(a1 + v4[6]);
  v28 = objc_msgSend(v27, "description");
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  v32._countAndFlagsBits = v29;
  v32._object = v31;
  String.append(_:)(v32);

  swift_bridgeObjectRelease(v31);
  v33._countAndFlagsBits = 44;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  v34 = *(id *)(a1 + v4[7]);
  v35 = objc_msgSend(v34, "description");
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;

  v39._countAndFlagsBits = v36;
  v39._object = v38;
  String.append(_:)(v39);

  swift_bridgeObjectRelease(v38);
  v40._countAndFlagsBits = 44;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  v41 = *(id *)(a1 + v4[9]);
  v42 = objc_msgSend(v41, "description");
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v45 = v44;

  v46._countAndFlagsBits = v43;
  v46._object = v45;
  String.append(_:)(v46);

  swift_bridgeObjectRelease(v45);
  v47 = aBlock;
  v48 = v88;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10016B1E0();
  *(_QWORD *)(v17 + 32) = v47;
  *(_QWORD *)(v17 + 40) = v48;
  os_log(_:dso:log:type:_:)("Metric received from AWD %{private}s", 36, 2, &_mh_execute_header, v72, v71, v17);
  swift_bridgeObjectRelease(v17);
  sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  static DispatchQoS.userInteractive.getter();
  aBlock = (void **)_swiftEmptyArrayStorage;
  v49 = sub_100146004(&qword_1002B5E80, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v50 = sub_100146438(&qword_1002B5E88);
  v51 = sub_10018A668((unint64_t *)&unk_1002B5E90, &qword_1002B5E88);
  v52 = v73;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v50, v51, v7, v49);
  v53 = v75;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v74 + 104))(v75, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v76);
  v54 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x614463697274654DLL, 0xEE0064616F4C6174, v15, v52, v53, 0);
  v55 = a1;
  v56 = v79;
  sub_10017417C(v55, (uint64_t)v79, type metadata accessor for Metric);
  v57 = *(unsigned __int8 *)(v77 + 80);
  v58 = (v57 + 16) & ~v57;
  v59 = (v78 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  v60 = swift_allocObject(&unk_100264F48, v59 + 8, v57 | 7);
  sub_10018A5CC((uint64_t)v56, v60 + v58);
  v61 = v82;
  *(_QWORD *)(v60 + v59) = v82;
  v91 = sub_10018A610;
  v92 = v60;
  aBlock = _NSConcreteStackBlock;
  v88 = 1107296256;
  v89 = sub_1001BE428;
  v90 = &unk_100264F60;
  v62 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter(v61);
  v86 = _swiftEmptyArrayStorage;
  v63 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v64 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v65 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
  v66 = v83;
  v67 = v64;
  v68 = v85;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v86, v67, v65, v85, v63);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v66, v62);
  _Block_release(v62);

  (*(void (**)(_BYTE *, uint64_t))(v84 + 8))(v66, v68);
  (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v15, v81);
  *(_QWORD *)&result = swift_release(v92).n128_u64[0];
  return result;
}

id sub_100187960(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  char v19;
  id result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  unint64_t v37;
  uint64_t v38;
  Swift::String v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id *v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  uint64_t v67;
  void *v68;
  void *v69;
  Swift::String v70;
  uint64_t v71;
  Swift::String v72;
  void *object;
  unint64_t countAndFlagsBits;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *j;
  uint64_t v89;
  Swift::String v90;
  uint64_t v91;
  uint64_t v92;
  Swift::String v93;
  char v95;
  char v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  __n128 v117;
  id v118;
  id v119;
  uint64_t v120;
  void *v121;
  void *v122;
  Swift::String v123;
  uint64_t *v124;
  uint64_t v125;
  Swift::String v126;
  void *v127;
  void *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  void *v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  __n128 v193;
  uint64_t v194;
  uint64_t v195;
  int *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  id v211;
  void *v212;
  unint64_t v213;
  void *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  id *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t *v232;
  int *v233;
  _QWORD *v234;
  Swift::String aBlock;
  uint64_t (*v236)();
  void *v237;
  uint64_t (*v238)();
  uint64_t v239;
  char v240[32];

  v231 = (char *)a2;
  v228 = type metadata accessor for DispatchWorkItemFlags(0);
  v225 = *(_QWORD *)(v228 - 8);
  __chkstk_darwin(v228);
  v224 = (char *)&v216 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v229 = type metadata accessor for DispatchQoS(0);
  v227 = *(_QWORD *)(v229 - 8);
  __chkstk_darwin(v229);
  v226 = (uint64_t)&v216 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100146438(&qword_1002B4168);
  __chkstk_darwin(v5);
  v230 = (char *)&v216 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001548C8(0, (unint64_t *)&unk_1002B6E10, NSString_ptr);
  v233 = (int *)type metadata accessor for Metric(0);
  v223 = v233[5];
  v7 = *(id *)((char *)a1 + v223);
  v8 = (void *)NSString.init(stringLiteral:)("5G", 2, 2);
  v9 = static NSObject.== infix(_:_:)(v7, v8);

  v232 = a1;
  if ((v9 & 1) != 0)
  {
    v10 = 10;
    v222 = v233[8];
    v11 = *(uint64_t *)((char *)v232 + v222);
    for (i = (uint64_t *)&off_100260960; ; i += 2)
    {
      v13 = *i;
      v14 = String.lowercased()();
      static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v16 = v15;
      v17 = String.lowercased()();
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v16);
      if (v14._countAndFlagsBits == v17._countAndFlagsBits && v14._object == v17._object)
        break;
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v14._countAndFlagsBits, v14._object, v17._countAndFlagsBits, v17._object, 0);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v14._object);
      result = (id)swift_bridgeObjectRelease(v17._object);
      if ((v19 & 1) != 0)
        goto LABEL_31;
      if (!--v10)
        return result;
    }
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v14._object, 2);
LABEL_31:
    v65 = v7;
    v66 = objc_msgSend(v65, "description");
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    v69 = v68;

    aBlock._countAndFlagsBits = v67;
    aBlock._object = v69;
    v70._countAndFlagsBits = 126;
    v70._object = (void *)0xE100000000000000;
    String.append(_:)(v70);
    v47 = v232;
    v71 = v233[13];
    *(_DWORD *)v240 = *(_DWORD *)((char *)v232 + v71);
    v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    object = v72._object;
    String.append(_:)(v72);
    swift_bridgeObjectRelease(object);
    countAndFlagsBits = aBlock._countAndFlagsBits;
    v41 = aBlock._object;
    v75 = (uint64_t)v231;
    v44 = (id *)&v231[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock];
    objc_msgSend(*(id *)&v231[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock], "lock");
    v76 = (unint64_t *)(v75 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
    v77 = swift_beginAccess(v76, v240, 0, 0);
    v78 = *v76;
    __chkstk_darwin(v77);
    v213 = countAndFlagsBits;
    v214 = v41;
    v215 = v47;
    swift_bridgeObjectRetain(v78);
    v79 = (uint64_t)sub_100184D4C(sub_10018A6B0, &v212, v78);
    v50 = v79;
    if ((unint64_t)v79 >> 62)
    {
      if (v79 >= 0)
        v79 &= 0xFFFFFFFFFFFFFF8uLL;
      if (_CocoaArrayWrapper.endIndex.getter(v79))
      {
LABEL_33:
        if ((v50 & 0xC000000000000001) == 0)
        {
          v80 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v80)
          {
            v51 = *(_QWORD **)(v50 + 32);
            swift_retain(v51);
            goto LABEL_36;
          }
          __break(1u);
          goto LABEL_80;
        }
LABEL_78:
        v51 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v50);
LABEL_36:
        swift_bridgeObjectRelease(v41);
        swift_bridgeObjectRelease(v50);
        v81 = v51[14];
        v52 = v51[15];
        v82 = *(uint64_t *)((char *)v47 + v233[9]);
        v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
        v85 = v83;
        if (v81 == v84 && v52 == v83)
        {
LABEL_38:
          swift_release(v51);
          swift_bridgeObjectRelease(v52);
          return objc_msgSend(*v44, "unlock");
        }
        v96 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v52, v84, v83, 0);
        swift_bridgeObjectRelease(v85);
        if ((v96 & 1) != 0)
          goto LABEL_48;
        v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
        v99 = v51[15];
        v51[14] = v98;
        v51[15] = v100;
        swift_bridgeObjectRelease(v99);
        v101 = sub_10019090C();
        v102 = v51[13];
        v51[12] = v101;
        v51[13] = v103;
        swift_bridgeObjectRelease(v102);
        v104 = v231;
        v105 = swift_allocObject(&unk_100265038, 32, 7);
        *(_QWORD *)(v105 + 16) = v104;
        *(_QWORD *)(v105 + 24) = v51;
        v238 = nullsub_1;
        v239 = v105;
        aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
        aBlock._object = (void *)1107296256;
        v106 = &unk_100265050;
LABEL_50:
        v236 = sub_1001BE428;
        v237 = v106;
        v107 = _Block_copy(&aBlock);
        v108 = v104;
        v109 = swift_retain(v51);
        v110 = v226;
        static DispatchQoS.unspecified.getter(v109);
        v234 = _swiftEmptyArrayStorage;
        v111 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v112 = sub_100146438((uint64_t *)&unk_1002B55F0);
        v113 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
        v114 = v224;
        v115 = v112;
        v116 = v228;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v234, v115, v113, v228, v111);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v110, v114, v107);
        _Block_release(v107);
        v117 = swift_release(v51);
        (*(void (**)(char *, uint64_t, __n128))(v225 + 8))(v114, v116, v117);
        (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v110, v229);
        v97 = (_QWORD *)v239;
        goto LABEL_51;
      }
    }
    else if (*(_QWORD *)((v79 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_33;
    }
    v221 = v44;
    swift_bridgeObjectRelease(v50);
    v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(uint64_t *)((char *)v47 + v223));
    v220 = v165;
    v222 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(uint64_t *)((char *)v47 + v222));
    v219 = v166;
    v167 = v233;
    v218 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(uint64_t *)((char *)v47 + v233[9]));
    v217 = v168;
    v216 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(uint64_t *)((char *)v47 + v167[6]));
    v170 = v169;
    v171 = v47;
    v172 = (char *)v47 + v167[11];
    v173 = type metadata accessor for Date(0);
    v174 = *(_QWORD *)(v173 - 8);
    v175 = (uint64_t)v230;
    (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v230, v172, v173);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v174 + 56))(v175, 0, 1, v173);
    v176 = *(int *)((char *)v171 + v71);
    v177 = type metadata accessor for FTMAllMetricsModel(0);
    swift_allocObject(v177, *(unsigned int *)(v177 + 48), *(unsigned __int16 *)(v177 + 52));
    v135 = (unint64_t)sub_1001905A8(countAndFlagsBits, (uint64_t)v41, v223, v220, v222, v219, v218, v217, v216, v170, v175, v176, 1);
    swift_beginAccess(v76, &aBlock, 33, 0);
    v178 = swift_retain(v135);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v178);
    v180 = *(_QWORD *)((*v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v179 = *(_QWORD *)((*v76 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v180 >= v179 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v179 > 1, v180 + 1, 1);
    v181 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v180, v135);
    specialized Array._endMutation()(v181);
    swift_endAccess(&aBlock);
    v182 = v231;
    v183 = swift_allocObject(&unk_100265088, 32, 7);
    *(_QWORD *)(v183 + 16) = v182;
    *(_QWORD *)(v183 + 24) = v135;
    v238 = nullsub_1;
    v239 = v183;
    aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    v236 = sub_1001BE428;
    v237 = &unk_1002650A0;
    v184 = _Block_copy(&aBlock);
    swift_retain(v135);
    v185 = v182;
LABEL_73:
    v186 = v226;
    static DispatchQoS.unspecified.getter(v185);
    v234 = _swiftEmptyArrayStorage;
    v187 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v188 = sub_100146438((uint64_t *)&unk_1002B55F0);
    v189 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
    v190 = v224;
    v191 = v188;
    v192 = v228;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v234, v191, v189, v228, v187);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v186, v190, v184);
    _Block_release(v184);
    v193 = swift_release(v135);
    (*(void (**)(char *, uint64_t, __n128))(v225 + 8))(v190, v192, v193);
    (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v186, v229);
    v164 = v239;
    goto LABEL_74;
  }
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  if (v21 == 4543564 && v22 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    goto LABEL_17;
  }
  v24 = v22;
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, 4543564, 0xE300000000000000, 0);
  result = (id)swift_bridgeObjectRelease(v24);
  if ((v25 & 1) != 0)
  {
LABEL_17:
    v26 = v232;
    v27 = v233[6];
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(uint64_t *)((char *)v232 + v27));
    v30 = v29;
    v222 = v27;
    if (v28 == 0x207942206C6C6543 && v29 == 0xEC000000646E6142)
    {
      swift_bridgeObjectRelease(0xEC000000646E6142);
      goto LABEL_21;
    }
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, 0x207942206C6C6543, 0xEC000000646E6142, 0);
    swift_bridgeObjectRelease(v30);
    if ((v31 & 1) != 0)
    {
LABEL_21:
      v32 = v233;
      v33 = v233[8];
      static String._unconditionallyBridgeFromObjectiveC(_:)(*(uint64_t *)((char *)v26 + v33));
      v35 = v34;
      v36 = String.lowercased()();
      swift_bridgeObjectRelease(v35);
      aBlock = v36;
      strcpy(v240, "-section-dl_bw");
      v240[15] = -18;
      v37 = sub_10014654C();
      LODWORD(v229) = StringProtocol.contains<A>(_:)(v240, &type metadata for String, &type metadata for String, v37, v37);
      swift_bridgeObjectRelease(v36._object);
      aBlock._countAndFlagsBits = 0xD000000000000010;
      aBlock._object = (void *)0x8000000100212F40;
      v38 = v32[13];
      *(_DWORD *)v240 = *(_DWORD *)((char *)v26 + v38);
      v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
      v40 = v39._object;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(v40);
      v42 = aBlock._countAndFlagsBits;
      v41 = aBlock._object;
      v43 = (uint64_t)v231;
      v44 = (id *)&v231[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock];
      objc_msgSend(*(id *)&v231[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock], "lock");
      v45 = (unint64_t *)(v43 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
      v46 = swift_beginAccess(v45, &aBlock, 0, 0);
      v47 = &v216;
      v48 = *v45;
      __chkstk_darwin(v46);
      v213 = v42;
      v214 = v41;
      v215 = v26;
      swift_bridgeObjectRetain(v48);
      v49 = (uint64_t)sub_100184D4C(sub_10018A798, &v212, v48);
      v50 = v49;
      if ((unint64_t)v49 >> 62)
      {
        if (v49 >= 0)
          v49 &= 0xFFFFFFFFFFFFFF8uLL;
        if (_CocoaArrayWrapper.endIndex.getter(v49))
          goto LABEL_23;
      }
      else if (*(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_23:
        if ((v50 & 0xC000000000000001) != 0)
        {
          v51 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v50);
        }
        else
        {
          if (!*(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_78;
          }
          v51 = *(_QWORD **)(v50 + 32);
          swift_retain(v51);
        }
        swift_bridgeObjectRelease(v41);
        swift_bridgeObjectRelease(v50);
        v53 = v51[14];
        v52 = v51[15];
        v54 = *(uint64_t *)((char *)v26 + v233[9]);
        v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
        v57 = v55;
        if (v53 == v56 && v52 == v55)
          goto LABEL_38;
        v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v52, v56, v55, 0);
        swift_bridgeObjectRelease(v57);
        if ((v58 & 1) == 0)
        {
          v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          v60 = v51[15];
          v51[14] = v59;
          v51[15] = v61;
          swift_bridgeObjectRelease(v60);
          v62 = sub_10019090C();
          v63 = v51[13];
          v51[12] = v62;
          v51[13] = v64;
          swift_release(v51);
          swift_bridgeObjectRelease(v63);
          return objc_msgSend(*v44, "unlock");
        }
LABEL_48:
        v97 = v51;
LABEL_51:
        swift_release(v97);
        return objc_msgSend(*v44, "unlock");
      }
      v221 = v44;
      swift_bridgeObjectRelease(v50);
      v231 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(*(uint64_t *)((char *)v26 + v33));
      v228 = v150;
      v151 = v233;
      v152 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(uint64_t *)((char *)v26 + v233[9]));
      v226 = v153;
      v227 = v152;
      v225 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(uint64_t *)((char *)v26 + v222));
      v155 = v154;
      v156 = (uint64_t)v26 + v151[11];
      v157 = type metadata accessor for Date(0);
      v158 = *(_QWORD *)(v157 - 8);
      v159 = (uint64_t)v230;
      (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v230, v156, v157);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v158 + 56))(v159, 0, 1, v157);
      v160 = *(int *)((char *)v26 + v38);
      v161 = type metadata accessor for FTMAllMetricsModel(0);
      swift_allocObject(v161, *(unsigned int *)(v161 + 48), *(unsigned __int16 *)(v161 + 52));
      v50 = (unint64_t)sub_1001905A8(v42, (uint64_t)v41, 0x544C20726568744FLL, 0xEF73646E61422045, (uint64_t)v231, v228, v227, v226, v225, v155, v159, v160, v229 & 1);
      swift_beginAccess(v45, v240, 33, 0);
      v162 = swift_retain(v50);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v162);
      countAndFlagsBits = *(_QWORD *)((*v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v80 = *(_QWORD *)((*v45 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (countAndFlagsBits < v80 >> 1)
      {
LABEL_66:
        v163 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(countAndFlagsBits, v50);
        specialized Array._endMutation()(v163);
        swift_endAccess(v240);
        v164 = v50;
LABEL_74:
        swift_release(v164);
        v44 = v221;
        return objc_msgSend(*v44, "unlock");
      }
LABEL_80:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, countAndFlagsBits + 1, 1);
      goto LABEL_66;
    }
    v86 = 15;
    v220 = v233[8];
    v87 = *(uint64_t *)((char *)v232 + v220);
    for (j = (uint64_t *)&off_100260850; ; j += 2)
    {
      v89 = *j;
      v90 = String.lowercased()();
      static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
      v92 = v91;
      v93 = String.lowercased()();
      swift_bridgeObjectRetain(v89);
      swift_bridgeObjectRelease(v92);
      if (v90._countAndFlagsBits == v93._countAndFlagsBits && v90._object == v93._object)
        break;
      v95 = _stringCompareWithSmolCheck(_:_:expecting:)(v90._countAndFlagsBits, v90._object, v93._countAndFlagsBits, v93._object, 0);
      swift_bridgeObjectRelease(v89);
      swift_bridgeObjectRelease(v90._object);
      result = (id)swift_bridgeObjectRelease(v93._object);
      if ((v95 & 1) != 0)
        goto LABEL_53;
      if (!--v86)
        return result;
    }
    swift_bridgeObjectRelease(v89);
    swift_bridgeObjectRelease_n(v90._object, 2);
LABEL_53:
    v118 = v7;
    v119 = objc_msgSend(v118, "description");
    v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
    v122 = v121;

    aBlock._countAndFlagsBits = v120;
    aBlock._object = v122;
    v123._countAndFlagsBits = 126;
    v123._object = (void *)0xE100000000000000;
    String.append(_:)(v123);
    v124 = v232;
    v125 = v233[13];
    *(_DWORD *)v240 = *(_DWORD *)((char *)v232 + v125);
    v126._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    v127 = v126._object;
    String.append(_:)(v126);
    swift_bridgeObjectRelease(v127);
    v129 = aBlock._countAndFlagsBits;
    v128 = aBlock._object;
    v130 = (uint64_t)v231;
    v44 = (id *)&v231[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock];
    objc_msgSend(*(id *)&v231[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock], "lock");
    v131 = (unint64_t *)(v130 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray);
    v132 = swift_beginAccess(v131, v240, 0, 0);
    v133 = *v131;
    __chkstk_darwin(v132);
    v213 = v129;
    v214 = v128;
    v215 = v124;
    swift_bridgeObjectRetain(v133);
    v134 = (uint64_t)sub_100184D4C(sub_10018A798, &v212, v133);
    v135 = v134;
    if ((unint64_t)v134 >> 62)
    {
      if (v134 >= 0)
        v134 &= 0xFFFFFFFFFFFFFF8uLL;
      if (_CocoaArrayWrapper.endIndex.getter(v134))
        goto LABEL_55;
    }
    else if (*(_QWORD *)((v134 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_55:
      if ((v135 & 0xC000000000000001) != 0)
      {
        v51 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v135);
        goto LABEL_58;
      }
      v136 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v136)
      {
        v51 = *(_QWORD **)(v135 + 32);
        swift_retain(v51);
LABEL_58:
        swift_bridgeObjectRelease(v128);
        swift_bridgeObjectRelease(v135);
        v137 = v51[14];
        v52 = v51[15];
        v138 = *(uint64_t *)((char *)v124 + v233[9]);
        v140 = static String._unconditionallyBridgeFromObjectiveC(_:)(v138);
        v141 = v139;
        if (v137 == v140 && v52 == v139)
          goto LABEL_38;
        v142 = _stringCompareWithSmolCheck(_:_:expecting:)(v137, v52, v140, v139, 0);
        swift_bridgeObjectRelease(v141);
        if ((v142 & 1) == 0)
        {
          v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v138);
          v144 = v51[15];
          v51[14] = v143;
          v51[15] = v145;
          swift_bridgeObjectRelease(v144);
          v146 = sub_10019090C();
          v147 = v51[13];
          v51[12] = v146;
          v51[13] = v148;
          swift_bridgeObjectRelease(v147);
          v104 = v231;
          v149 = swift_allocObject(&unk_100264F98, 32, 7);
          *(_QWORD *)(v149 + 16) = v104;
          *(_QWORD *)(v149 + 24) = v51;
          v238 = nullsub_1;
          v239 = v149;
          aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
          aBlock._object = (void *)1107296256;
          v106 = &unk_100264FB0;
          goto LABEL_50;
        }
        goto LABEL_48;
      }
      __break(1u);
      goto LABEL_88;
    }
    v221 = v44;
    swift_bridgeObjectRelease(v135);
    v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(uint64_t *)((char *)v124 + v223));
    v219 = v194;
    v220 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(uint64_t *)((char *)v124 + v220));
    v218 = v195;
    v196 = v233;
    v217 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(uint64_t *)((char *)v124 + v233[9]));
    v216 = v197;
    v222 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(uint64_t *)((char *)v124 + v222));
    v199 = v198;
    v200 = v124;
    v201 = (uint64_t)v124 + v196[11];
    v202 = type metadata accessor for Date(0);
    v203 = *(_QWORD *)(v202 - 8);
    v204 = (uint64_t)v230;
    (*(void (**)(char *, uint64_t, uint64_t))(v203 + 16))(v230, v201, v202);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v203 + 56))(v204, 0, 1, v202);
    v205 = *(int *)((char *)v200 + v125);
    v206 = type metadata accessor for FTMAllMetricsModel(0);
    swift_allocObject(v206, *(unsigned int *)(v206 + 48), *(unsigned __int16 *)(v206 + 52));
    v135 = (unint64_t)sub_1001905A8(v129, (uint64_t)v128, v223, v219, v220, v218, v217, v216, v222, v199, v204, v205, 1);
    swift_beginAccess(v131, &aBlock, 33, 0);
    v207 = swift_retain(v135);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v207);
    v129 = *(_QWORD *)((*v131 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v136 = *(_QWORD *)((*v131 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v129 < v136 >> 1)
    {
LABEL_85:
      v208 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v129, v135);
      specialized Array._endMutation()(v208);
      swift_endAccess(&aBlock);
      v209 = v231;
      v210 = swift_allocObject(&unk_100264FE8, 32, 7);
      *(_QWORD *)(v210 + 16) = v209;
      *(_QWORD *)(v210 + 24) = v135;
      v238 = nullsub_1;
      v239 = v210;
      aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
      aBlock._object = (void *)1107296256;
      v236 = sub_1001BE428;
      v237 = &unk_100265000;
      v184 = _Block_copy(&aBlock);
      v211 = v209;
      v185 = (id)swift_retain(v135);
      goto LABEL_73;
    }
LABEL_88:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v136 > 1, v129 + 1, 1);
    goto LABEL_85;
  }
  return result;
}

uint64_t sub_100188CCC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v25[2];

  v8 = type metadata accessor for Metric(0);
  __chkstk_darwin(v8);
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = (char *)v25 - v10;
  v12 = (_QWORD *)*a1;
  v13 = v12[2];
  v14 = v12[3];
  if (v13 == a2 && v14 == a3)
  {
    sub_10017417C(a4, (uint64_t)v25 - v10, type metadata accessor for Metric);
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, a2, a3, 0);
    sub_10017417C(a4, (uint64_t)v11, type metadata accessor for Metric);
    v17 = 0;
    if ((v16 & 1) == 0)
      goto LABEL_15;
  }
  v19 = v12[8];
  v18 = v12[9];
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)&v11[*(int *)(v8 + 32)]);
  if (v19 == v20 && v18 == v21)
  {
    v17 = 1;
  }
  else
  {
    v23 = v21;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v18, v20, v21, 0);
    v18 = v23;
  }
  swift_bridgeObjectRelease(v18);
LABEL_15:
  sub_10017E214((uint64_t)v11);
  return v17 & 1;
}

id sub_100188E08()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  objc_super v23;
  _QWORD *v24;

  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v21 = *(_QWORD *)(v1 - 8);
  v22 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsArray] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsGraphArray] = _swiftEmptyArrayStorage;
  v10 = OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_lock;
  v11 = objc_allocWithZone((Class)NSLock);
  v12 = v0;
  *(_QWORD *)&v0[v10] = objc_msgSend(v11, "init");
  *(_QWORD *)&v12[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricSheetData] = 0;
  v13 = OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricDetailsClassObject;
  *(_QWORD *)&v12[v13] = sub_1001BE42C((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v12[OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_currentSelectedSubsId] = 0;
  v14 = OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_queueMetricGraph;
  sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  static DispatchQoS.background.getter();
  v24 = _swiftEmptyArrayStorage;
  v15 = sub_100146004(&qword_1002B5E80, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_100146438(&qword_1002B5E88);
  v17 = sub_10018A668((unint64_t *)&unk_1002B5E90, &qword_1002B5E88);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v16, v17, v4, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v22);
  *(_QWORD *)&v12[v14] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000013, 0x8000000100213000, v9, v6, v3, 0);

  v18 = (objc_class *)type metadata accessor for FTMCellMonitorSharedClass();
  v23.receiver = v12;
  v23.super_class = v18;
  return objc_msgSendSuper2(&v23, "init");
}

id sub_100189090()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FTMCellMonitorSharedClass();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FTMCellMonitorSharedClass()
{
  return objc_opt_self(_TtC13FTMInternal_425FTMCellMonitorSharedClass);
}

uint64_t sub_100189158@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for FTMCellMonitorSharedClass();
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100189190(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  void (*v42)(_BYTE *, _BYTE *, uint64_t);
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  _BYTE *v50;
  char v51;
  void (*v52)(_BYTE *, uint64_t);
  void (*v53)(_BYTE *, uint64_t);
  _BYTE v54[12];
  unsigned int v55;
  _BYTE *v56;
  void (*v57)(_BYTE *, uint64_t);
  _QWORD v58[2];
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v56 = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __chkstk_darwin(v6);
  v10 = &v54[-v9];
  v11 = __chkstk_darwin(v8);
  v13 = &v54[-v12];
  __chkstk_darwin(v11);
  v15 = &v54[-v14];
  v16 = objc_msgSend((id)objc_opt_self(NSCharacterSet), "decimalDigitCharacterSet");
  static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

  CharacterSet.inverted.getter();
  v57 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v57(v13, v4);
  swift_bridgeObjectRetain(a2);
  v17 = sub_100184BCC(a1, a2);
  v19 = v18;
  swift_bridgeObjectRelease(a2);
  if (v19)
  {
    if (v17 == 45 && v19 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease(0xE100000000000000);
LABEL_6:
      swift_bridgeObjectRetain(a2);
      v21 = sub_10018A408(1uLL, a1, a2);
      v23 = v22;
      v25 = v24;
      v27 = v26;
      swift_bridgeObjectRelease(a2);
      a1 = static String._fromSubstring(_:)(v21, v23, v25, v27);
      a2 = v28;
      swift_bridgeObjectRelease(v27);
      goto LABEL_8;
    }
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, 45, 0xE100000000000000, 0);
    swift_bridgeObjectRelease(v19);
    if ((v20 & 1) != 0)
      goto LABEL_6;
  }
  swift_bridgeObjectRetain(a2);
LABEL_8:
  v61 = a1;
  v62 = a2;
  v59 = 46;
  v60 = 0xE100000000000000;
  v58[0] = 0;
  v58[1] = 0xE000000000000000;
  v29 = sub_10014654C();
  v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v59, v58, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v29, v29, v29);
  v32 = v31;
  v33 = String.count.getter(a1, a2);
  v34 = String.count.getter(v30, v32);
  result = swift_bridgeObjectRelease(v32);
  v36 = __OFSUB__(v33, v34);
  v37 = v33 - v34;
  if (v36)
  {
    __break(1u);
    goto LABEL_35;
  }
  result = String.count.getter(46, 0xE100000000000000);
  if (!result)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v37 != 0x8000000000000000 || result != -1)
  {
    if (v37 / result == 1)
    {
      v61 = a1;
      v62 = a2;
      v59 = 46;
      v60 = 0xE100000000000000;
      v38 = StringProtocol.components<A>(separatedBy:)(&v59, &type metadata for String, &type metadata for String, v29, v29);
      swift_bridgeObjectRelease(a2);
      v39 = *(_QWORD *)(v38 + 16);
      v40 = v39 != 0;
      if (!v39)
      {
        swift_bridgeObjectRelease(v38);
LABEL_28:
        v57(v15, v4);
        return v40;
      }
      v55 = 1;
      v41 = v15;
      v42 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
      v56 = (_BYTE *)v38;
      v43 = (unint64_t *)(v38 + 40);
      while (1)
      {
        v44 = *(v43 - 1);
        v45 = *v43;
        v46 = (*v43 & 0x2000000000000000) != 0 ? HIBYTE(*v43) & 0xF : v44 & 0xFFFFFFFFFFFFLL;
        v42(v10, v41, v4);
        if (!v46)
          break;
        v61 = v44;
        v62 = v45;
        swift_bridgeObjectRetain(v45);
        StringProtocol.rangeOfCharacter(from:options:range:)(v10, 0, 0, 0, 1, &type metadata for String, v29);
        v48 = v47;
        v57(v10, v4);
        swift_bridgeObjectRelease(v45);
        if ((v48 & 1) == 0)
          goto LABEL_31;
        v43 += 2;
        if (!--v39)
        {
          swift_bridgeObjectRelease(v56);
          v15 = v41;
          v40 = v55;
          goto LABEL_28;
        }
      }
      v57(v10, v4);
LABEL_31:
      swift_bridgeObjectRelease(v56);
      v57(v41, v4);
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
        v49 = HIBYTE(a2) & 0xF;
      else
        v49 = a1 & 0xFFFFFFFFFFFFLL;
      v50 = v56;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v56, v15, v4);
      if (v49)
      {
        v61 = a1;
        v62 = a2;
        StringProtocol.rangeOfCharacter(from:options:range:)(v50, 0, 0, 0, 1, &type metadata for String, v29);
        v40 = v51 & 1;
        v52 = v57;
        v57(v50, v4);
        v52(v15, v4);
        swift_bridgeObjectRelease(a2);
        return v40;
      }
      swift_bridgeObjectRelease(a2);
      v53 = v57;
      v57(v50, v4);
      v53(v15, v4);
    }
    return 0;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100189648()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100242448);
  v2 = swift_getKeyPath(&unk_100242470);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_1001896B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13FTMInternal_421FTMMetricDetailsClass__items;
  v2 = sub_100146438(&qword_1002B5E78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10018970C()
{
  return type metadata accessor for FTMMetricDetailsClass(0);
}

uint64_t type metadata accessor for FTMMetricDetailsClass(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B5DB0;
  if (!qword_1002B5DB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FTMMetricDetailsClass);
  return result;
}

void sub_100189750(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1001897BC(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

void sub_1001897BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002B5DC0)
  {
    v2 = sub_1001464C4(&qword_1002B5408);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002B5DC0);
  }
}

uint64_t sub_100189814@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for FTMMetricDetailsClass(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

void sub_100189850(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100242448);
  v5 = swift_getKeyPath(&unk_100242470);
  static Published.subscript.getter(&v6, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  *a2 = v6;
}

uint64_t sub_1001898CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100242448);
  v5 = swift_getKeyPath(&unk_100242470);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_100189944(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1001899CC(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v6 = result;
    v7 = *(_QWORD *)(a5 + 56);
    v8 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 8 * a2);
    v9 = type metadata accessor for STransferMetrics(0);
    sub_10017417C(v7 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a2, v6, type metadata accessor for STransferMetrics);
    return v8;
  }
LABEL_8:
  __break(1u);
  return result;
}

_QWORD *sub_100189A6C(uint64_t a1)
{
  Swift::String v2;
  Swift::String v3;
  void *object;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = *(_QWORD *)(a1 + 32);
  v38 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain(v38);
  v2._countAndFlagsBits = 126;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v36 = a1;
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v6 = v37;
  v5 = v38;
  if (qword_1002B3A80 != -1)
LABEL_25:
    swift_once(&qword_1002B3A80, sub_100184F00);
  v7 = *(_QWORD *)(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsGraphArray);
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v30 = *(_QWORD *)(qword_1002BF070
                      + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricModelsGraphArray);
    else
      v30 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_retain(v36);
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v30);
    if (v8)
      goto LABEL_4;
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain(v36);
    swift_bridgeObjectRetain(v7);
    if (v8)
    {
LABEL_4:
      v9 = 0;
      v10 = v7 & 0xC000000000000001;
      v11 = v7 & 0xFFFFFFFFFFFFFF8;
      v12 = &OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_isVisible;
      v34 = v8;
      v35 = v7;
      do
      {
        if (v10)
        {
          v13 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
          v14 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
LABEL_22:
            __break(1u);
            break;
          }
        }
        else
        {
          if (v9 >= *(_QWORD *)(v11 + 16))
          {
            __break(1u);
            goto LABEL_25;
          }
          v13 = *(_QWORD **)(v7 + 8 * v9 + 32);
          swift_retain(v13);
          v14 = v9 + 1;
          if (__OFADD__(v9, 1))
            goto LABEL_22;
        }
        v15 = v13[2];
        v16 = v13[3];
        v17 = v15 == v6 && v16 == v5;
        if ((v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v6, v5, 0) & 1) != 0)
          && *((_BYTE *)v13 + *v12) == 1
          && ((v18 = v13[6], v19 = v13[7], v20 = *(_QWORD *)(v36 + 48), v21 = *(_QWORD *)(v36 + 56), v18 == v20)
           && v19 == v21
           || (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v20, v21, 0) & 1) != 0))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v22 = v12;
          v23 = v6;
          v24 = v5;
          v25 = v11;
          v26 = v10;
          v27 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
          v28 = v27;
          v10 = v26;
          v11 = v25;
          v5 = v24;
          v6 = v23;
          v12 = v22;
          v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v13);
          specialized ContiguousArray._endMutation()(v29);
          v8 = v34;
          v7 = v35;
        }
        else
        {
          swift_release(v13);
        }
        ++v9;
      }
      while (v14 != v8);
    }
  }
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v5);
  swift_release(v36);
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0
    || ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
  {
    v32 = swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v33 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_release(_swiftEmptyArrayStorage);
    if (v33)
      return _swiftEmptyArrayStorage;
    goto LABEL_33;
  }
  if (!_swiftEmptyArrayStorage[2])
LABEL_33:
    swift_release(_swiftEmptyArrayStorage);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100189D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        swift_unknownObjectRelease(v6);
        if (v6 == a2)
          return v5;
      }
      else if (*(_QWORD *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }
      if (__OFADD__(v5, 1))
        break;
      if (++v5 == v4)
        return 0;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(a1);
  }
  return 0;
}

uint64_t sub_100189E38(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *a1;
  v6 = swift_bridgeObjectRetain(*a1);
  v7 = sub_100189D4C(v6, a2);
  v9 = v8;
  swift_bridgeObjectRelease(v5);
  if (v2)
    return v7;
  if ((v9 & 1) == 0)
  {
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_57;
    v9 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_58:
      if ((v9 & 0x8000000000000000) != 0)
        v29 = v9;
      else
        v29 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v9);
      v30 = _CocoaArrayWrapper.endIndex.getter(v29);
      swift_bridgeObjectRelease(v9);
      if (v10 != v30)
        goto LABEL_6;
    }
    else if (v10 != *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (i = v7 + 5; ; ++i)
      {
        v9 = i - 4;
        v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
          break;
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        if (v9 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_48;
        if (*(_QWORD *)(v12 + 8 * i) != a2)
          goto LABEL_11;
LABEL_31:
        v10 = i - 3;
        if (__OFADD__(v9, 1))
          goto LABEL_49;
        v23 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v23 < 0)
            v26 = *a1;
          else
            v26 = v23 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*a1);
          v24 = _CocoaArrayWrapper.endIndex.getter(v26);
          swift_bridgeObjectRelease(v23);
        }
        else
        {
          v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v10 == v24)
          return v7;
      }
      v25 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v12);
      swift_unknownObjectRelease(v25);
      if (v25 == a2)
        goto LABEL_31;
LABEL_11:
      if (v9 == v7)
      {
LABEL_30:
        if (__OFADD__(v7++, 1))
          goto LABEL_50;
        goto LABEL_31;
      }
      v10 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *a1);
        v10 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_16:
          if ((v9 & 0x8000000000000000) != 0)
            goto LABEL_53;
          if (v9 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_54;
          v14 = *(_QWORD *)(v10 + 8 * i);
          swift_retain(v14);
          goto LABEL_19;
        }
      }
      else
      {
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_51;
        if (v7 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_52;
        v13 = *(_QWORD *)(v10 + 8 * v7 + 32);
        swift_retain(v13);
        if ((v10 & 0xC000000000000001) == 0)
          goto LABEL_16;
      }
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v10);
      v10 = *a1;
LABEL_19:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v10);
      *a1 = v10;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        v10 = sub_100197ED0(v10);
        *a1 = v10;
      }
      v16 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20);
      *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v14;
      swift_release(v16);
      specialized Array._endMutation()(v17);
      v10 = *a1;
      v18 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v10;
      if (!v18 || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        v10 = sub_100197ED0(v10);
        *a1 = v10;
      }
      if ((v9 & 0x8000000000000000) != 0)
        goto LABEL_55;
      v19 = v10 & 0xFFFFFFFFFFFFFF8;
      if (v9 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_56;
      v20 = *(_QWORD *)(v19 + 8 * i);
      *(_QWORD *)(v19 + 8 * i) = v13;
      swift_release(v20);
      specialized Array._endMutation()(v21);
      goto LABEL_30;
    }
    return v7;
  }
  v27 = *a1;
  if (!((unint64_t)v27 >> 62))
    return *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v27 < 0)
    v31 = v27;
  else
    v31 = v27 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v27);
  v32 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(v27);
  return v32;
}

uint64_t sub_10018A150(char a1)
{
  _UNKNOWN **v2;
  uint64_t *v3;
  uint64_t v4;
  _UNKNOWN **v5;
  uint64_t result;
  uint64_t v7;
  _UNKNOWN **v8;
  uint64_t v9;
  Swift::String v10;
  void *object;
  Swift::String v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _UNKNOWN **v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  char v22;
  uint64_t v23;
  _UNKNOWN **v24;
  Swift::String v25;
  Swift::String v26;
  char v28;
  _UNKNOWN **v29;

  if ((a1 & 1) != 0)
    v2 = &off_1002609F8;
  else
    v2 = &off_100260A58;
  v3 = (uint64_t *)&unk_100260A08;
  if ((a1 & 1) == 0)
    v3 = (uint64_t *)&unk_100260A68;
  v4 = *v3;
  if (*v3)
  {
    if ((a1 & 1) != 0)
      v5 = &off_1002609F8;
    else
      v5 = &off_100260A58;
    v29 = v2;
    result = swift_bridgeObjectRetain(v2);
    v7 = 0;
    v8 = v5 + 5;
    while (1)
    {
      v9 = v7 + 1;
      if (__OFADD__(v7, 1))
        break;
      v10 = String.lowercased()();
      object = v10._object;
      v12 = String.lowercased()();
      if (v10._countAndFlagsBits == v12._countAndFlagsBits && v10._object == v12._object)
      {
        v18 = 5521746;
        swift_bridgeObjectRelease_n(v29, 2);
        goto LABEL_39;
      }
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10._countAndFlagsBits, v10._object, v12._countAndFlagsBits, v12._object, 0);
      swift_bridgeObjectRelease(v10._object);
      result = swift_bridgeObjectRelease(v12._object);
      if ((v14 & 1) != 0)
      {
        v18 = 5521746;
        object = v29;
        goto LABEL_39;
      }
      ++v7;
      v8 += 2;
      if (v9 == v4)
      {
        v2 = v29;
        swift_bridgeObjectRelease(v29);
        goto LABEL_19;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_19:
    v15 = 5521746;
    swift_bridgeObjectRelease(v2);
    if ((a1 & 1) != 0)
    {
      v16 = 10;
      v17 = &off_100260960;
      v18 = 18229;
      while (1)
      {
        v19 = String.lowercased()();
        object = v19._object;
        v20 = String.lowercased()();
        if (v19._countAndFlagsBits == v20._countAndFlagsBits && v19._object == v20._object)
          break;
        v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v19._countAndFlagsBits, v19._object, v20._countAndFlagsBits, v20._object, 0);
        swift_bridgeObjectRelease(v19._object);
        swift_bridgeObjectRelease(v20._object);
        if ((v22 & 1) != 0)
          return 18229;
        v17 += 2;
        if (!--v16)
          return v15;
      }
    }
    else
    {
      v23 = 15;
      v24 = &off_100260850;
      v18 = 4543564;
      while (1)
      {
        v25 = String.lowercased()();
        object = v25._object;
        v26 = String.lowercased()();
        if (v25._countAndFlagsBits == v26._countAndFlagsBits && v25._object == v26._object)
          break;
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v25._countAndFlagsBits, v25._object, v26._countAndFlagsBits, v26._object, 0);
        swift_bridgeObjectRelease(v25._object);
        swift_bridgeObjectRelease(v26._object);
        if ((v28 & 1) != 0)
          return 4543564;
        v24 += 2;
        if (!--v23)
          return v15;
      }
    }
LABEL_39:
    swift_bridgeObjectRelease_n(object, 2);
    return v18;
  }
  return result;
}

unint64_t sub_10018A408(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, result, v5, a2, a3);
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t sub_10018A4AC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (int *)type metadata accessor for Metric(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);

  v9 = v7 + v1[11];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);

  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[16] + 8));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10018A5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Metric(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_10018A610()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for Metric(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100187960((uint64_t *)(v0 + v2), *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10018A650(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10018A660(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_10018A668(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1001464C4(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10018A6B0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100188CCC(a1, v1[2], v1[3], v1[4]) & 1;
}

uint64_t sub_10018A6D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018A704()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10018A730()
{
  uint64_t *v0;

  sub_10018635C(v0[2], v0[3], v0[4]);
}

uint64_t sub_10018A73C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10018A760()
{
  uint64_t v0;

  return sub_100185620(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10018A798(_QWORD *a1)
{
  return sub_10018A6B0(a1) & 1;
}

id sub_10018A7B0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC13FTMInternal_425MultiChoiceSelectionModal____lazy_storage___tableView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_425MultiChoiceSelectionModal____lazy_storage___tableView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13FTMInternal_425MultiChoiceSelectionModal____lazy_storage___tableView);
  }
  else
  {
    v4 = sub_10018A810(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10018A810(uint64_t a1)
{
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t ObjCClassFromMetadata;
  char *v7;
  NSString v8;

  v2 = objc_msgSend(objc_allocWithZone((Class)UITableView), "initWithFrame:style:", 0, 0.0, 0.0, 0.0, 0.0);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v3);

  objc_msgSend(v2, "setBackgroundColor:", v4);
  v5 = type metadata accessor for MultiSelectionModalCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v5);
  v7 = off_1002B4C08;
  swift_bridgeObjectRetain(off_1002B4C08);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v2, "registerClass:forCellReuseIdentifier:", ObjCClassFromMetadata, v8);

  objc_msgSend(v2, "setDelegate:", a1);
  objc_msgSend(v2, "setDataSource:", a1);
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  return v2;
}

id sub_10018A970()
{
  id v0;
  NSString v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id (*v11)@<X0>(id *@<X0>, uint64_t (**)@<X0>(uint64_t *@<X8>)@<X8>);
  uint64_t v12;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIButton), "init");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v1);

  objc_msgSend(v0, "setImage:forState:", v2, 0);
  v3 = objc_msgSend(v0, "titleLabel");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 50.0, UIFontWeightBold);
    objc_msgSend(v4, "setFont:", v5);

  }
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v6);

  objc_msgSend(v0, "setTintColor:", v7);
  v11 = sub_10018AB5C;
  v12 = 0;
  v8 = sub_100146438(&qword_1002B5EE8);
  v9 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v11, v8);
  objc_msgSend(v0, "addTarget:action:forControlEvents:", v9, "didTapDismiss:", 64, v11, v12);
  swift_unknownObjectRelease(v9);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  return v0;
}

id sub_10018AB5C@<X0>(id *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  id v6;

  v6 = *a1;
  v3 = swift_allocObject(&unk_100265198, 24, 7);
  *(_QWORD *)(v3 + 16) = v6;
  v4 = swift_allocObject(&unk_1002651C0, 32, 7);
  *(_QWORD *)(v4 + 16) = sub_10018B95C;
  *(_QWORD *)(v4 + 24) = v3;
  *a2 = sub_10018B9A4;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v4;
  return v6;
}

void sub_10018ACD0()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  Class isa;

  v1 = objc_msgSend(v0, "view");
  if (!v1)
  {
    __break(1u);
    goto LABEL_12;
  }
  v2 = v1;
  v3 = sub_10018A7B0();
  objc_msgSend(v2, "addSubview:", v3);

  v4 = objc_msgSend(v0, "view");
  if (!v4)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = v4;
  v6 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_425MultiChoiceSelectionModal_dismissButton];
  objc_msgSend(v4, "addSubview:", v6);

  v7 = objc_msgSend(v0, "view");
  if (!v7)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v9);

  objc_msgSend(v8, "setBackgroundColor:", v10);
  v11 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v12 = swift_allocObject(v11, 80, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100241890;
  v13 = sub_10018A7B0();
  v14 = objc_msgSend(v13, "leftAnchor");

  v15 = objc_msgSend(v0, "view");
  if (!v15)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v15;
  v17 = objc_msgSend(v15, "safeAreaLayoutGuide");

  v18 = objc_msgSend(v17, "leftAnchor");
  v19 = objc_msgSend(v14, "constraintEqualToSystemSpacingAfterAnchor:multiplier:", v18, 0.7);

  *(_QWORD *)(v12 + 32) = v19;
  v20 = sub_10018A7B0();
  v21 = objc_msgSend(v20, "rightAnchor");

  v22 = objc_msgSend(v0, "view");
  if (!v22)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v23 = v22;
  v24 = objc_msgSend(v22, "safeAreaLayoutGuide");

  v25 = objc_msgSend(v24, "rightAnchor");
  v26 = objc_msgSend(v21, "constraintEqualToSystemSpacingAfterAnchor:multiplier:", v25, 0.7);

  *(_QWORD *)(v12 + 40) = v26;
  v27 = sub_10018A7B0();
  v28 = objc_msgSend(v27, "bottomAnchor");

  v29 = objc_msgSend(v0, "view");
  if (!v29)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v30 = v29;
  v31 = objc_msgSend(v29, "safeAreaLayoutGuide");

  v32 = objc_msgSend(v31, "bottomAnchor");
  v33 = objc_msgSend(v28, "constraintEqualToAnchor:", v32);

  *(_QWORD *)(v12 + 48) = v33;
  v34 = sub_10018A7B0();
  v35 = objc_msgSend(v34, "topAnchor");

  v36 = objc_msgSend(v0, "view");
  if (!v36)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v37 = v36;
  v38 = objc_msgSend(v36, "safeAreaLayoutGuide");

  v39 = objc_msgSend(v38, "topAnchor");
  v40 = objc_msgSend(v35, "constraintEqualToAnchor:", v39);

  *(_QWORD *)(v12 + 56) = v40;
  v41 = objc_msgSend(v6, "topAnchor");
  v42 = objc_msgSend(v0, "view");
  if (!v42)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v43 = v42;
  v44 = objc_msgSend(v42, "safeAreaLayoutGuide");

  v45 = objc_msgSend(v44, "topAnchor");
  v46 = objc_msgSend(v41, "constraintEqualToAnchor:", v45);

  *(_QWORD *)(v12 + 64) = v46;
  v47 = objc_msgSend(v6, "rightAnchor");
  v48 = objc_msgSend(v0, "view");
  if (v48)
  {
    v49 = v48;
    v50 = (void *)objc_opt_self(NSLayoutConstraint);
    v51 = objc_msgSend(v49, "safeAreaLayoutGuide");

    v52 = objc_msgSend(v51, "rightAnchor");
    v53 = objc_msgSend(v47, "constraintEqualToAnchor:constant:", v52, -15.0);

    *(_QWORD *)(v12 + 72) = v53;
    specialized Array._endMutation()(v54);
    sub_10014C4C4();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v12);
    objc_msgSend(v50, "activateConstraints:", isa);

    return;
  }
LABEL_19:
  __break(1u);
}

id sub_10018B340()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MultiChoiceSelectionModal();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MultiChoiceSelectionModal()
{
  return objc_opt_self(_TtC13FTMInternal_425MultiChoiceSelectionModal);
}

void sub_10018B470(void *a1)
{
  char *v1;
  char *v2;
  Class isa;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;

  v2 = v1;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v21 = objc_msgSend(a1, "cellForRowAtIndexPath:", isa);

  if (v21)
  {
    v5 = type metadata accessor for MultiSelectionModalCell();
    if (swift_dynamicCastClass(v21, v5))
    {
      v6 = sub_10016470C();
      v7 = objc_msgSend(v6, "text");

      if (v7)
      {
        v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
        v10 = v9;

        Strong = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC13FTMInternal_425MultiChoiceSelectionModal_delegate]);
        if (Strong)
        {
          v12 = Strong;
          v13 = (uint64_t *)(Strong
                          + OBJC_IVAR____TtC13FTMInternal_429CellularLoggingViewController_currentLogConfiguration);
          v14 = *(_QWORD *)(Strong
                          + OBJC_IVAR____TtC13FTMInternal_429CellularLoggingViewController_currentLogConfiguration
                          + 8);
          *v13 = v8;
          v13[1] = v10;
          swift_bridgeObjectRetain(v10);
          swift_bridgeObjectRelease(v14);
          v15 = *v13;
          v16 = (void *)v13[1];
          v17 = (void *)objc_opt_self(UIColor);
          swift_bridgeObjectRetain(v16);
          v18 = objc_msgSend(v17, "grayColor");
          v19 = sub_1001E10A8(0xD000000000000013, 0x80000001002130B0, v15, v16, (uint64_t)v18);
          swift_bridgeObjectRelease(v16);

          v20 = sub_1001DB7C0();
          objc_msgSend(v20, "setAttributedTitle:forState:", v19, 0);
          swift_bridgeObjectRelease(v10);
          swift_unknownObjectRelease(v12);

        }
        else
        {
          swift_bridgeObjectRelease(v10);
        }
      }
      objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, 0);
    }

  }
}

unint64_t sub_10018B720(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  NSString v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  NSString v15;

  v2 = v1;
  v4 = off_1002B4C08;
  swift_bridgeObjectRetain(off_1002B4C08);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v5, isa);

  v8 = type metadata accessor for MultiSelectionModalCell();
  v9 = swift_dynamicCastClass(v7, v8);
  if (v9)
  {
    v10 = v9;
    v11 = sub_10016470C();
    result = IndexPath.row.getter(v11);
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13FTMInternal_425MultiChoiceSelectionModal_tableViewData);
      if (result < *(_QWORD *)(v13 + 16))
      {
        v14 = *(_QWORD *)(v13 + 16 * result + 40);
        swift_bridgeObjectRetain(v14);
        v15 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v14);
        objc_msgSend(v11, "setText:", v15);

        return v10;
      }
    }
    __break(1u);
  }
  else
  {

    return (unint64_t)objc_msgSend(objc_allocWithZone((Class)UITableViewCell), "init");
  }
  return result;
}

uint64_t sub_10018B938()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10018B95C()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "self");
}

uint64_t sub_10018B980()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018B9A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

id sub_10018BC24()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_10018BC8C()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SPCarrierBundleViewModel(0)), "init");
}

id sub_10018BCB0@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id result;
  void *v9;
  id v10;

  *(_QWORD *)a1 = sub_10018BC8C;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v2 = (int *)type metadata accessor for FTMInternal_4(0);
  v3 = (_QWORD *)(a1 + v2[5]);
  *v3 = swift_getKeyPath(&unk_100242568);
  v4 = sub_100146438(&qword_1002B5F90);
  swift_storeEnumTagMultiPayload(v3, v4, 0);
  v5 = type metadata accessor for AppDelegate();
  UIApplicationDelegateAdaptor.init(_:)(v5, v5);
  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  v6 = qword_1002BF068;
  *(_QWORD *)(a1 + v2[7]) = qword_1002BF068;
  v7 = (void *)objc_opt_self(ABMWrapper);
  swift_retain_n(v6, 2);
  result = objc_msgSend(v7, "sharedInstance");
  if (result)
  {
    v9 = result;
    v10 = objc_allocWithZone((Class)type metadata accessor for PersistanceStore());
    result = sub_1001BC70C(v6, v9);
    *(_QWORD *)(a1 + v2[8]) = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10018BDDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (**v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = v1;
  v42 = a1;
  v3 = type metadata accessor for ScenePhase(0);
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  __chkstk_darwin(v3);
  v37 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for FTMInternal_4(0);
  v5 = *(_QWORD *)(v36 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v36);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100146438(&qword_1002B6058);
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100146438(&qword_1002B6060);
  v11 = __chkstk_darwin(v35);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v35 - v14;
  sub_10018D80C(v2, (uint64_t)v7);
  v16 = *(unsigned __int8 *)(v5 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = v17 + v6;
  v19 = v16 | 7;
  v20 = swift_allocObject(&unk_1002651E8, v18, v16 | 7);
  sub_10018D854((uint64_t)v7, v20 + v17);
  v21 = sub_100146438(&qword_1002B6068);
  v22 = sub_10018D8D4();
  WindowGroup.init(id:title:lazyContent:)(0, 0, 0, 0, 0, 0, sub_10018D898, v20, v21, v22);
  v23 = v2;
  v24 = v37;
  sub_10018D534(&qword_1002B5F90, (uint64_t (*)(_QWORD))&type metadata accessor for ScenePhase, 0x616850656E656353, 0xEA00000000006573, v37);
  sub_10018D80C(v23, (uint64_t)v7);
  v25 = swift_allocObject(&unk_100265210, v18, v19);
  sub_10018D854((uint64_t)v7, v25 + v17);
  v26 = v35;
  v27 = &v13[*(int *)(v35 + 36)];
  v29 = v40;
  v28 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v27, v24, v41);
  v30 = (void (**)(uint64_t))&v27[*(int *)(sub_100146438(&qword_1002B6090) + 36)];
  *v30 = sub_10018DAA4;
  v30[1] = (void (*)(uint64_t))v25;
  v32 = v38;
  v31 = v39;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v13, v10, v39);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v24, v28);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v31);
  sub_10018DAE4((uint64_t)v13, (uint64_t)v15);
  v33 = sub_10018DB2C();
  static SceneBuilder.buildBlock<A>(_:)(v15, v26, v33);
  return sub_10014BDE0((uint64_t)v15, &qword_1002B6060);
}

uint64_t sub_10018C0DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v4 = type metadata accessor for FTMInternal_4(0);
  v5 = *(void **)(a1 + *(int *)(v4 + 32));
  v6 = *(_QWORD *)(a1 + *(int *)(v4 + 28));
  v7 = type metadata accessor for MainWindowViewModel();
  swift_allocObject(v7, 32, 7);
  v8 = v5;
  swift_retain(v6);
  v9 = sub_10016AF48(v8, v6);
  v10 = type metadata accessor for SPCarrierBundleViewModel(0);
  v11 = sub_100146004((unint64_t *)&unk_1002B60B0, type metadata accessor for SPCarrierBundleViewModel, (uint64_t)&unk_10024261C);
  v12 = EnvironmentObject.init()(v10, v11);
  v14 = v13;
  v15 = *(void **)(v9 + 16);
  v16 = type metadata accessor for AllMetricsViewModel();
  swift_allocObject(v16, 88, 7);
  v17 = v15;
  v18 = sub_100198DDC(v17);

  v19 = StateObject.wrappedValue.getter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), v10, v11);
  result = static ObservableObject.environmentStore.getter(v10, v11);
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = sub_100167184;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v18;
  *(_QWORD *)(a2 + 48) = v9;
  *(_QWORD *)(a2 + 56) = result;
  *(_QWORD *)(a2 + 64) = v19;
  return result;
}

void sub_10018C220(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  NSString v53;
  NSString v54;
  id v55;
  uint64_t v56;
  NSString v57;
  unsigned int v58;
  NSString v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v3 = type metadata accessor for ScenePhase(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if ((_DWORD)v7 == enum case for ScenePhase.background(_:))
  {
    if (qword_1002B39F8 != -1)
      v7 = swift_once(&qword_1002B39F8, sub_100174778);
    v11 = qword_1002BEFE8;
    v12 = static os_log_type_t.default.getter(v7, v8, v9, v10);
    os_log(_:dso:log:type:_:)("SwiftUI Scene Phase - Background", 32, 2, &_mh_execute_header, v11, v12, _swiftEmptyArrayStorage);
    v13 = objc_msgSend((id)objc_opt_self(ABMWrapper), "sharedInstance");
    if (v13)
    {
      v17 = v13;
      v18 = String._bridgeToObjectiveC()();
      objc_msgSend(v17, "removeAWDConfigForAppid:", v18);

      v19 = qword_1002BEFE8;
      v24 = static os_log_type_t.default.getter(v20, v21, v22, v23);
      os_log(_:dso:log:type:_:)("SwiftUI Scene Phase - Background successfully removed AWDConfig", 63, 2, &_mh_execute_header, v19, v24, _swiftEmptyArrayStorage);
LABEL_11:

      return;
    }
    v66 = static os_log_type_t.default.getter(0, v14, v15, v16);
    os_log(_:dso:log:type:_:)("SwiftUI Scene Phase - Background ABMWrapper.sharedInstance  returned nil", 72, 2, &_mh_execute_header, v11, v66, _swiftEmptyArrayStorage);
  }
  else if ((_DWORD)v7 == enum case for ScenePhase.inactive(_:))
  {
    if (qword_1002B39F8 != -1)
      v7 = swift_once(&qword_1002B39F8, sub_100174778);
    v25 = qword_1002BEFE8;
    v26 = static os_log_type_t.default.getter(v7, v8, v9, v10);
    os_log(_:dso:log:type:_:)("SwiftUI Scene Phase - Inactive", 30, 2, &_mh_execute_header, v25, v26, _swiftEmptyArrayStorage);
    v27 = objc_msgSend((id)objc_opt_self(ABMWrapper), "sharedInstance");
    if (v27)
    {
      v17 = v27;
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v17, "removeAWDConfigForAppid:", v31);

      v32 = qword_1002BEFE8;
      v37 = static os_log_type_t.default.getter(v33, v34, v35, v36);
      os_log(_:dso:log:type:_:)("SwiftUI Scene Phase - Inactive successfully removed AWDConfig", 61, 2, &_mh_execute_header, v32, v37, _swiftEmptyArrayStorage);
      goto LABEL_11;
    }
    v72 = static os_log_type_t.default.getter(0, v28, v29, v30);
    os_log(_:dso:log:type:_:)("SwiftUI Scene Phase - Inactive ABMWrapper.sharedInstance  returned nil", 70, 2, &_mh_execute_header, v25, v72, _swiftEmptyArrayStorage);
  }
  else if ((_DWORD)v7 == enum case for ScenePhase.active(_:))
  {
    if (qword_1002B39F8 != -1)
      v7 = swift_once(&qword_1002B39F8, sub_100174778);
    v38 = qword_1002BEFE8;
    v39 = static os_log_type_t.default.getter(v7, v8, v9, v10);
    os_log(_:dso:log:type:_:)("SwiftUI Scene Phase - Active", 28, 2, &_mh_execute_header, v38, v39, _swiftEmptyArrayStorage);
    v40 = *v1;
    v41 = v1[1];
    v42 = *((unsigned __int8 *)v1 + 16);
    v43 = type metadata accessor for SPCarrierBundleViewModel(0);
    v44 = sub_100146004((unint64_t *)&unk_1002B60B0, type metadata accessor for SPCarrierBundleViewModel, (uint64_t)&unk_10024261C);
    v45 = (void *)StateObject.wrappedValue.getter(v40, v41, v42, v43, v44);
    sub_10018EE1C();

    v46 = objc_msgSend((id)objc_opt_self(ABMWrapper), "sharedInstance");
    if (v46)
    {
      v50 = v46;
      v51 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      if (qword_1002B3A78 != -1)
        swift_once(&qword_1002B3A78, sub_100183CA4);
      v52 = *(_QWORD *)(qword_1002BF068 + 176);
      swift_bridgeObjectRetain(v52);
      v53 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v52);
      v54 = String._bridgeToObjectiveC()();
      v55 = objc_msgSend(v51, "pathForResource:ofType:", v53, v54);

      if (v55)
      {
        v57 = String._bridgeToObjectiveC()();
        v58 = objc_msgSend(v50, "addAWDConfigForAppId:andProtofFilePath:", v57, v55);

        if (v58)
        {
          objc_msgSend(v50, "listen");
          v59 = String._bridgeToObjectiveC()();
          objc_msgSend(v50, "querySpecificMetric:triggerRef:triggerType:triggerID:profileID:metricID:", v59, 9999, 0, *(unsigned int *)(qword_1002BF068 + 184), 0, 0);

          if (qword_1002B39E8 != -1)
            v60 = swift_once(&qword_1002B39E8, sub_100174680);
          v64 = qword_1002BEFD8;
          v65 = static os_log_type_t.default.getter(v60, v61, v62, v63);
          os_log(_:dso:log:type:_:)("successfully started listening ABM applicationDidBecomeActive", 61, 2, &_mh_execute_header, v64, v65, _swiftEmptyArrayStorage);
        }
      }
      else
      {
        if (qword_1002B39E8 != -1)
          v56 = swift_once(&qword_1002B39E8, sub_100174680);
        v75 = qword_1002BEFD8;
        v76 = static os_log_type_t.error.getter(v56);
        os_log(_:dso:log:type:_:)("Metric Log File path doesn't exist", 34, 2, &_mh_execute_header, v75, v76, _swiftEmptyArrayStorage);
      }

    }
    else
    {
      v73 = qword_1002BEFE8;
      v74 = static os_log_type_t.default.getter(0, v47, v48, v49);
      os_log(_:dso:log:type:_:)("SwiftUI Scene Phase - Active ABMWrapper.sharedInstance returned nil", 67, 2, &_mh_execute_header, v73, v74, _swiftEmptyArrayStorage);
    }
  }
  else
  {
    if (qword_1002B3AA0 != -1)
      swift_once(&qword_1002B3AA0, sub_100190478);
    v67 = type metadata accessor for Logger(0);
    v68 = sub_10018DBC8(v67, (uint64_t)qword_1002BF0A8);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.error.getter(v69);
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Unknown ScenePhase. Ignoring", v71, 2u);
      swift_slowDealloc(v71, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for FTMInternal_4(0);
  v4 = sub_100146004(&qword_1002B5EF0, type metadata accessor for FTMInternal_4, (uint64_t)&unk_100242528);
  static App.main()(v3, v4);
  return 0;
}

uint64_t type metadata accessor for FTMInternal_4(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B6000;
  if (!qword_1002B6000)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FTMInternal_4);
  return result;
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC13FTMInternal_411AppDelegate);
}

unint64_t sub_10018C9DC(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v16);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(void **)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_10016A25C(*(_QWORD *)a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = a3[5];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    v13 = sub_100146438(&qword_1002B5F90);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ScenePhase(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v17 = *v12;
      *v11 = *v12;
      swift_retain(v17);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
    v18 = a3[6];
    v19 = a1 + v18;
    v20 = a2 + v18;
    v21 = sub_100146438(&qword_1002B5F98);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v22 = a3[7];
    v23 = a3[8];
    v24 = *(_QWORD *)(a2 + v22);
    *(_QWORD *)(a1 + v22) = v24;
    v25 = *(void **)(a2 + v23);
    *(_QWORD *)(a1 + v23) = v25;
    swift_retain(v24);
    v26 = v25;
  }
  return a1;
}

void sub_10018CB20(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10016A2A8(*(_QWORD *)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_100146438(&qword_1002B5F90);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = a1 + a2[6];
  v8 = sub_100146438(&qword_1002B5F98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(a1 + a2[7]));

}

uint64_t sub_10018CBE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;

  v6 = *(_QWORD *)a2;
  v7 = *(void **)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10016A25C(*(_QWORD *)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = a3[5];
  v10 = (uint64_t *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = sub_100146438(&qword_1002B5F90);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ScenePhase(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v11;
    *v10 = *v11;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v14);
  v16 = a3[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_100146438(&qword_1002B5F98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = a3[7];
  v21 = a3[8];
  v22 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v22;
  v23 = *(void **)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v23;
  swift_retain(v22);
  v24 = v23;
  return a1;
}

uint64_t sub_10018CCFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;

  v6 = *(_QWORD *)a2;
  v7 = *(void **)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_10016A25C(*(_QWORD *)a2, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(void **)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_10016A2A8(v9, v10, v11);
  if (a1 != a2)
  {
    v12 = a3[5];
    v13 = (uint64_t *)(a1 + v12);
    v14 = (uint64_t *)(a2 + v12);
    sub_10014BDE0(a1 + v12, &qword_1002B5F90);
    v15 = sub_100146438(&qword_1002B5F90);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for ScenePhase(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v18 = *v14;
      *v13 = *v14;
      swift_retain(v18);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
  }
  v19 = a3[6];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_100146438(&qword_1002B5F98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[7];
  v24 = *(_QWORD *)(a2 + v23);
  v25 = *(_QWORD *)(a1 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  swift_retain(v24);
  swift_release(v25);
  v26 = a3[8];
  v27 = *(void **)(a2 + v26);
  v28 = *(void **)(a1 + v26);
  *(_QWORD *)(a1 + v26) = v27;
  v29 = v27;

  return a1;
}

uint64_t sub_10018CE50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_100146438(&qword_1002B5F90);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ScenePhase(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_100146438(&qword_1002B5F98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  return a1;
}

uint64_t sub_10018CF54(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  char v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(void **)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10016A2A8(v7, v8, v9);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_10014BDE0(a1 + v10, &qword_1002B5F90);
    v13 = sub_100146438(&qword_1002B5F90);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ScenePhase(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_100146438(&qword_1002B5F98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[7];
  v20 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_release(v20);
  v21 = a3[8];
  v22 = *(void **)(a1 + v21);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);

  return a1;
}

uint64_t sub_10018D094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10018D0A0);
}

uint64_t sub_10018D0A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = sub_100146438(&qword_1002B5FA0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_100146438(&qword_1002B5F98);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[7]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_10018D14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10018D158);
}

uint64_t sub_10018D158(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_100146438(&qword_1002B5FA0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_100146438(&qword_1002B5F98);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[7]) = (a2 - 1);
  return result;
}

void sub_10018D200(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[5];

  v7[0] = &unk_100242510;
  sub_10018D2E0(319, &qword_1002B6010, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v4 <= 0x3F)
  {
    v7[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10018D2E0(319, (unint64_t *)&unk_1002B6018, v3, (uint64_t (*)(uint64_t))type metadata accessor for AppDelegate, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for UIApplicationDelegateAdaptor);
    if (v6 <= 0x3F)
    {
      v7[2] = *(_QWORD *)(v5 - 8) + 64;
      v7[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      v7[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_initStructMetadata(a1, 256, 5, v7, a1 + 16);
    }
  }
}

void sub_10018D2E0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = a4(a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_10018D338(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100247648, 1);
}

uint64_t sub_10018D348@<X0>(uint64_t a1@<X8>)
{
  return sub_10018D534(&qword_1002B3F00, (uint64_t (*)(_QWORD))&type metadata accessor for DismissAction, 0x417373696D736944, 0xED00006E6F697463, a1);
}

uint64_t sub_10018D37C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_10018FCE8(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_100156774(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_10018D534@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100146438(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10014BD9C(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v28 = a4;
      v23 = swift_slowAlloc(12, -1);
      v29 = a5;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v32 = v25;
      *(_DWORD *)v24 = 136315138;
      v31 = sub_10018FCE8(v30, v28, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v24 + 4, v24 + 12);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    v26 = swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v12 + 8))(v14, v11, v26);
  }
}

uint64_t sub_10018D76C()
{
  return EnvironmentValues.scenePhase.getter();
}

uint64_t sub_10018D78C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ScenePhase(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.scenePhase.setter(v4);
}

uint64_t sub_10018D80C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FTMInternal_4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018D854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FTMInternal_4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018D898@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FTMInternal_4(0) - 8) + 80);
  return sub_10018C0DC(v1 + ((v3 + 16) & ~v3), a1);
}

unint64_t sub_10018D8D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B6070;
  if (!qword_1002B6070)
  {
    v1 = sub_1001464C4(&qword_1002B6068);
    sub_10018D958();
    sub_10014BEC0(&qword_1002B6080, &qword_1002B6088, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B6070);
  }
  return result;
}

unint64_t sub_10018D958()
{
  unint64_t result;

  result = qword_1002B6078;
  if (!qword_1002B6078)
  {
    result = swift_getWitnessTable(&unk_100241A80, &type metadata for MainWindowView);
    atomic_store(result, (unint64_t *)&qword_1002B6078);
  }
  return result;
}

uint64_t sub_10018D9A0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for FTMInternal_4(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10016A2A8(*(_QWORD *)(v0 + v4), *(void **)(v0 + v4 + 8), *(_BYTE *)(v0 + v4 + 16));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_100146438(&qword_1002B5F90);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = v3 | 7;
  v11 = v4 + v5;
  v12 = v6 + v1[6];
  v13 = sub_100146438(&qword_1002B5F98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_release(*(_QWORD *)(v6 + v1[7]));

  return swift_deallocObject(v0, v11, v10);
}

void sub_10018DAA4(uint64_t a1)
{
  type metadata accessor for FTMInternal_4(0);
  sub_10018C220(a1);
}

uint64_t sub_10018DAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100146438(&qword_1002B6060);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10018DB2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B6098;
  if (!qword_1002B6098)
  {
    v1 = sub_1001464C4(&qword_1002B6060);
    sub_10014BEC0(&qword_1002B60A0, &qword_1002B6058, (uint64_t)&protocol conformance descriptor for WindowGroup<A>);
    sub_10014BEC0(&qword_1002B60A8, &qword_1002B6090, (uint64_t)&protocol conformance descriptor for _ValueActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B6098);
  }
  return result;
}

uint64_t sub_10018DBC8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10018DBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  NSString v7;
  Class isa;

  if (qword_1002B39F8 != -1)
    a1 = swift_once(&qword_1002B39F8, sub_100174778);
  v4 = qword_1002BEFE8;
  v5 = static os_log_type_t.default.getter(a1, a2, a3, a4);
  os_log(_:dso:log:type:_:)("Appdelegate - didFinishLaunchingWithOptions", 43, 2, &_mh_execute_header, v4, v5, _swiftEmptyArrayStorage);
  v6 = sub_1001BE8D8((uint64_t)_swiftEmptyArrayStorage);
  v7 = String._bridgeToObjectiveC()();
  sub_10018E250();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  AnalyticsSendEvent(v7, isa);
  swift_bridgeObjectRelease(v6);

  return 1;
}

unint64_t sub_10018E250()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B60C0;
  if (!qword_1002B60C0)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B60C0);
  }
  return result;
}

uint64_t sub_10018E290(double a1, double a2, double a3, double a4)
{
  void *v4;
  id v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  double Width;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void *v35;
  objc_super v36;
  CGRect v37;
  CGRect v38;

  v36.receiver = v4;
  v36.super_class = (Class)type metadata accessor for TopHeaderCustomFlowLayout();
  v9 = objc_msgSendSuper2(&v36, "layoutAttributesForElementsInRect:", a1, a2, a3, a4);
  if (v9)
  {
    v10 = v9;
    v11 = sub_10018E6BC();
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  }
  else
  {
    v12 = 0;
  }
  v13 = objc_msgSend(v4, "collectionView");
  if (!v13)
  {
    swift_bridgeObjectRelease(v12);
    return 0;
  }
  v14 = v13;
  objc_msgSend(v13, "frame");
  Width = CGRectGetWidth(v37);
  if (!objc_msgSend(v14, "presentationSectionIndexForDataSourceSectionIndex:", 0) || !v12)
  {

    return v12;
  }
  v16 = v12 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)v12 >> 62)
    goto LABEL_33;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(v12, 2);
  if (!v17)
    goto LABEL_37;
  do
  {
    v35 = v14;
    v18 = 4;
    v19 = 0;
    if ((v12 & 0xC000000000000001) != 0)
    {
LABEL_10:
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v12);
      goto LABEL_12;
    }
    while (1)
    {
      v20 = *(id *)(v12 + 8 * v18);
LABEL_12:
      v21 = v20;
      v14 = (void *)(v19 + 1);
      if (__OFADD__(v19, 1))
        break;
      v22 = objc_msgSend(v20, "representedElementKind");
      if (!v22)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
        v29 = v32;
LABEL_22:

        swift_bridgeObjectRelease(v29);
        if (v14 == (void *)v17)
          goto LABEL_31;
        goto LABEL_27;
      }
      v23 = v22;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v26 = v25;

      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
      v29 = v28;
      if (!v26)
        goto LABEL_22;
      if (v24 == v27 && v26 == v28)
      {
        swift_bridgeObjectRelease_n(v26, 2);
LABEL_25:
        objc_msgSend(v21, "frame");
        objc_msgSend(v21, "setFrame:", 0.0, 0.0, Width, CGRectGetHeight(v38));
        goto LABEL_26;
      }
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v27, v28, 0);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v29);
      if ((v31 & 1) != 0)
        goto LABEL_25;
LABEL_26:

      if (v14 == (void *)v17)
      {
LABEL_31:

        goto LABEL_38;
      }
LABEL_27:
      v19 = ++v18 - 4;
      if ((v12 & 0xC000000000000001) != 0)
        goto LABEL_10;
    }
    __break(1u);
LABEL_33:
    if (v12 >= 0)
      v33 = v16;
    else
      v33 = v12;
    swift_bridgeObjectRetain_n(v12, 2);
    v17 = _CocoaArrayWrapper.endIndex.getter(v33);
  }
  while (v17);
LABEL_37:

LABEL_38:
  swift_bridgeObjectRelease_n(v12, 2);
  return v12;
}

id sub_10018E66C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TopHeaderCustomFlowLayout();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TopHeaderCustomFlowLayout()
{
  return objc_opt_self(_TtC13FTMInternal_425TopHeaderCustomFlowLayout);
}

unint64_t sub_10018E6BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B60F0;
  if (!qword_1002B60F0)
  {
    v1 = objc_opt_self(UICollectionViewLayoutAttributes);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B60F0);
  }
  return result;
}

unint64_t sub_10018E6F8()
{
  unint64_t result;

  result = sub_1001BE544((uint64_t)&off_100260668);
  qword_1002BF078 = result;
  return result;
}

uint64_t MetricGroupV2.tech.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t MetricGroupV2.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t MetricGroupV2.abmId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t MetricGroupV2.className.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
  return v1;
}

uint64_t MetricGroupV2.deviceType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
  return v1;
}

uint64_t MetricGroupV2.deviceType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 64));
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

uint64_t (*MetricGroupV2.deviceType.modify())()
{
  return nullsub_1;
}

_UNKNOWN **static MetricGroupV2.metricGroupData()()
{
  return &off_100260AA8;
}

uint64_t destroy for MetricGroupV2(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for MetricGroupV2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *assignWithCopy for MetricGroupV2(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  a1[5] = a2[5];
  v8 = a2[6];
  v9 = a1[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[7] = a2[7];
  v10 = a2[8];
  v11 = a1[8];
  a1[8] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for MetricGroupV2(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for MetricGroupV2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricGroupV2(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricGroupV2(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricGroupV2()
{
  return &type metadata for MetricGroupV2;
}

uint64_t sub_10018EAB4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  char v16;

  swift_bridgeObjectRetain(a2);
  v6._countAndFlagsBits = 58;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain(a2);
  v7._countAndFlagsBits = a3;
  v7._object = a4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(a2);
  v8 = a2;
  if (qword_1002B3A88 != -1)
    swift_once(&qword_1002B3A88, sub_10018E6F8);
  v9 = qword_1002BF078;
  if (*(_QWORD *)(qword_1002BF078 + 16) && (v10 = sub_1001C7C98(a1, a2), (v11 & 1) != 0))
  {
    v12 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v10);
    v14 = *v12;
    v13 = (void *)v12[1];
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRelease(a2);
    if (v14 == a3 && v13 == a4)
    {
      v16 = 1;
      v8 = (uint64_t)a4;
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v13, a3, a4, 0);
      v8 = (uint64_t)v13;
    }
  }
  else
  {
    v16 = 0;
  }
  swift_bridgeObjectRelease(v8);
  return v16 & 1;
}

id sub_10018EDA4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RootViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RootViewController()
{
  return objc_opt_self(_TtC13FTMInternal_418RootViewController);
}

uint64_t sub_10018EDF4()
{
  return sub_10018F588((uint64_t)&unk_1002426E8, (uint64_t)&unk_100242710);
}

uint64_t sub_10018EE08()
{
  return sub_10018F588((uint64_t)&unk_100242730, (uint64_t)&unk_100242758);
}

void sub_10018EE1C()
{
  char *v0;
  void *v1;
  unsigned __int8 v2;
  uint64_t KeyPath;
  uint64_t v4;
  char *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_424SPCarrierBundleViewModel_service];
  v2 = objc_msgSend(v1, "isDualSimON");
  KeyPath = swift_getKeyPath(&unk_100242658);
  v4 = swift_getKeyPath(&unk_100242680);
  LOBYTE(v56) = v2;
  v5 = v0;
  static Published.subscript.setter(&v56, v5, KeyPath, v4);
  v6 = objc_msgSend(v1, "isSlicingSetup");
  v7 = swift_getKeyPath(&unk_1002426A0);
  v8 = swift_getKeyPath(&unk_1002426C8);
  LOBYTE(v56) = v6;
  v9 = v5;
  static Published.subscript.setter(&v56, v9, v7, v8);
  v10 = objc_msgSend(v1, "isSlicingTestApplicationEnabled");
  v11 = swift_getKeyPath(&unk_1002426E8);
  v12 = swift_getKeyPath(&unk_100242710);
  LOBYTE(v56) = v10;
  v13 = v9;
  static Published.subscript.setter(&v56, v13, v11, v12);
  v14 = objc_msgSend(v1, "isLLPHSApplicationEnabled");
  v15 = swift_getKeyPath(&unk_100242730);
  v16 = swift_getKeyPath(&unk_100242758);
  LOBYTE(v56) = v14;
  v17 = v13;
  static Published.subscript.setter(&v56, v17, v15, v16);
  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  v18 = qword_1002BF068;
  if (*(_BYTE *)(qword_1002BF068 + 24) == 1)
  {
    v19 = objc_msgSend(v1, "getCarrierBundleIdentifier");
    if (v19)
    {
      v20 = v19;
      v21 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, (char *)&type metadata for Any + 8);

    }
    else
    {
      v21 = _swiftEmptyArrayStorage;
    }
    v22 = *(_QWORD *)(v18 + 128);
    *(_QWORD *)(v18 + 128) = v21;
    swift_bridgeObjectRelease(v22);
    v23 = objc_msgSend(v1, "getCarrierBundleVersion");
    if (v23)
    {
      v24 = v23;
      v25 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, (char *)&type metadata for Any + 8);

    }
    else
    {
      v25 = _swiftEmptyArrayStorage;
    }
    v26 = *(_QWORD *)(v18 + 120);
    *(_QWORD *)(v18 + 120) = v25;
    swift_bridgeObjectRelease(v26);
  }
  if (qword_1002B3AA8 != -1)
    swift_once(&qword_1002B3AA8, sub_100190488);
  v27 = type metadata accessor for Logger(0);
  sub_10018DBC8(v27, (uint64_t)qword_1002BF0C0);
  v28 = v17;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v56 = v32;
    *(_DWORD *)v31 = 136315138;
    v33 = swift_getKeyPath(&unk_100242658);
    v34 = swift_getKeyPath(&unk_100242680);
    static Published.subscript.getter(&v55, v28, v33, v34);
    swift_release(v33);
    swift_release(v34);
    if ((_BYTE)v55)
      v35 = 0x64656C62616E45;
    else
      v35 = 0x64656C6261736944;
    if ((_BYTE)v55)
      v36 = 0xE700000000000000;
    else
      v36 = 0xE800000000000000;
    v55 = sub_10018FCE8(v35, v36, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v31 + 4, v31 + 12);

    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "DSDS state: %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

  }
  v37 = v28;
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = swift_slowAlloc(32, -1);
    v56 = v41;
    *(_DWORD *)v40 = 136315138;
    v42 = swift_getKeyPath(&unk_1002426A0);
    v43 = swift_getKeyPath(&unk_1002426C8);
    static Published.subscript.getter(&v55, v37, v42, v43);
    swift_release(v42);
    swift_release(v43);
    if ((_BYTE)v55)
      v44 = 0x64656C62616E45;
    else
      v44 = 0x64656C6261736944;
    if ((_BYTE)v55)
      v45 = 0xE700000000000000;
    else
      v45 = 0xE800000000000000;
    v55 = sub_10018FCE8(v44, v45, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v40 + 4, v40 + 12);

    swift_bridgeObjectRelease(v45);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "NRSlicing state: %s", v40, 0xCu);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

  }
  v46 = v37;
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = swift_slowAlloc(32, -1);
    v56 = v50;
    *(_DWORD *)v49 = 136315138;
    v51 = swift_getKeyPath(&unk_1002426E8);
    v52 = swift_getKeyPath(&unk_100242710);
    static Published.subscript.getter(&v55, v46, v51, v52);
    swift_release(v51);
    swift_release(v52);
    if ((_BYTE)v55)
      v53 = 0x64656C62616E45;
    else
      v53 = 0x64656C6261736944;
    if ((_BYTE)v55)
      v54 = 0xE700000000000000;
    else
      v54 = 0xE800000000000000;
    v55 = sub_10018FCE8(v53, v54, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v49 + 4, v49 + 12);

    swift_bridgeObjectRelease(v54);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "NRSlicing Test module state: %s", v49, 0xCu);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v49, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10018F560()
{
  return sub_10018F588((uint64_t)&unk_100242658, (uint64_t)&unk_100242680);
}

uint64_t sub_10018F574()
{
  return sub_10018F588((uint64_t)&unk_1002426A0, (uint64_t)&unk_1002426C8);
}

uint64_t sub_10018F588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

void sub_10018F5F0(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10018FAE8(a1, (uint64_t)&unk_1002426E8, (uint64_t)&unk_100242710, a2);
}

uint64_t sub_10018F604(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10018FB60(a1, a2, a3, a4, (uint64_t)&unk_1002426E8, (uint64_t)&unk_100242710);
}

void sub_10018F618(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10018FAE8(a1, (uint64_t)&unk_100242730, (uint64_t)&unk_100242758, a2);
}

uint64_t sub_10018F62C(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10018FB60(a1, a2, a3, a4, (uint64_t)&unk_100242730, (uint64_t)&unk_100242758);
}

char *sub_10018F640()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  char *v9;
  char *v10;
  void (*v11)(char *, char *, uint64_t);
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  uint64_t v19;
  objc_super v20;
  char v21;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = sub_100146438((uint64_t *)&unk_1002B61F0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = OBJC_IVAR____TtC13FTMInternal_424SPCarrierBundleViewModel_service;
  v8 = objc_allocWithZone((Class)SPCarrierBundleAdapter);
  v9 = v1;
  *(_QWORD *)&v1[v7] = objc_msgSend(v8, "init");
  v10 = &v9[OBJC_IVAR____TtC13FTMInternal_424SPCarrierBundleViewModel__dualSim];
  v21 = 0;
  Published.init(initialValue:)(&v21, &type metadata for Bool);
  v11 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v11(v10, v6, v3);
  v12 = &v9[OBJC_IVAR____TtC13FTMInternal_424SPCarrierBundleViewModel__slicingSetup];
  v21 = 0;
  Published.init(initialValue:)(&v21, &type metadata for Bool);
  v11(v12, v6, v3);
  v13 = &v9[OBJC_IVAR____TtC13FTMInternal_424SPCarrierBundleViewModel__slicingTestApp];
  v21 = 0;
  Published.init(initialValue:)(&v21, &type metadata for Bool);
  v11(v13, v6, v3);
  v14 = &v9[OBJC_IVAR____TtC13FTMInternal_424SPCarrierBundleViewModel__llphsTestApp];
  v21 = 0;
  Published.init(initialValue:)(&v21, &type metadata for Bool);
  v11(v14, v6, v3);

  v20.receiver = v9;
  v20.super_class = ObjectType;
  v15 = (char *)objc_msgSendSuper2(&v20, "init");
  v16 = *(void **)&v15[OBJC_IVAR____TtC13FTMInternal_424SPCarrierBundleViewModel_service];
  v17 = v15;
  objc_msgSend(v16, "setDelegate:", v17);
  sub_10018EE1C();

  return v17;
}

uint64_t sub_10018F8E8()
{
  return type metadata accessor for SPCarrierBundleViewModel(0);
}

uint64_t type metadata accessor for SPCarrierBundleViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B6170;
  if (!qword_1002B6170)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SPCarrierBundleViewModel);
  return result;
}

void sub_10018F92C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10018F9AC();
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = v5;
    v8 = v5;
    swift_updateClassMetadata2(a1, 256, 5, &v4, a1 + 80);
  }
}

void sub_10018F9AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1002B6180)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1002B6180);
  }
}

void sub_10018FAE8(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v9, v6, KeyPath, v8);
  swift_release(KeyPath);
  swift_release(v8);
  *a4 = v9;
}

uint64_t sub_10018FB60(char *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

void sub_10018FBC8(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10018FAE8(a1, (uint64_t)&unk_100242658, (uint64_t)&unk_100242680, a2);
}

uint64_t sub_10018FBEC(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10018FB60(a1, a2, a3, a4, (uint64_t)&unk_100242658, (uint64_t)&unk_100242680);
}

void sub_10018FC10(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10018FAE8(a1, (uint64_t)&unk_1002426A0, (uint64_t)&unk_1002426C8, a2);
}

uint64_t sub_10018FC34(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10018FB60(a1, a2, a3, a4, (uint64_t)&unk_1002426A0, (uint64_t)&unk_1002426C8);
}

void sub_10018FC58(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10018FAE8(a1, (uint64_t)&unk_1002426E8, (uint64_t)&unk_100242710, a2);
}

uint64_t sub_10018FC7C(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10018FB60(a1, a2, a3, a4, (uint64_t)&unk_1002426E8, (uint64_t)&unk_100242710);
}

void sub_10018FCA0(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10018FAE8(a1, (uint64_t)&unk_100242730, (uint64_t)&unk_100242758, a2);
}

uint64_t sub_10018FCC4(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10018FB60(a1, a2, a3, a4, (uint64_t)&unk_100242730, (uint64_t)&unk_100242758);
}

uint64_t sub_10018FCE8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10018FDB8(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10017E2BC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10017E2BC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10014652C(v12);
  return v7;
}

uint64_t sub_10018FDB8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10018FF70(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

uint64_t sub_10018FF70(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100190004(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100190254(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100190254(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100190004(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100190178(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100190178(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100146438(&qword_1002B61E8);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1001901DC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_100190254(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100146438(&qword_1002B61E8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_1001903A4()
{
  id v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "bundleIdentifier");

  if (!v1)
  {
    v2 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
    v1 = objc_msgSend(v2, "processName");

  }
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v5 = v4;

  qword_1002BF080 = v3;
  *(_QWORD *)algn_1002BF088 = v5;
}

uint64_t sub_100190468(uint64_t a1)
{
  return sub_100190498(a1, qword_1002BF090, 30574);
}

uint64_t sub_100190478(uint64_t a1)
{
  return sub_100190498(a1, qword_1002BF0A8, 26997);
}

uint64_t sub_100190488(uint64_t a1)
{
  return sub_100190498(a1, qword_1002BF0C0, 25187);
}

uint64_t sub_100190498(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for Logger(0);
  sub_100190568(v5, a2);
  sub_10018DBC8(v5, (uint64_t)a2);
  if (qword_1002B3A90 != -1)
    swift_once(&qword_1002B3A90, sub_1001903A4);
  v6 = qword_1002BF080;
  v7 = *(_QWORD *)algn_1002BF088;
  swift_bridgeObjectRetain(*(_QWORD *)algn_1002BF088);
  return Logger.init(subsystem:category:)(v6, v7, a3, 0xE200000000000000);
}

uint64_t sub_100190538()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for SLogger()
{
  return objc_opt_self(_TtC13FTMInternal_47SLogger);
}

uint64_t *sub_100190568(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

_QWORD *sub_1001905A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _QWORD *v13;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v38[24];

  v13[2] = 0;
  v13[3] = 0xE000000000000000;
  v13[4] = 0;
  v13[5] = 0xE000000000000000;
  v13[6] = 0;
  v13[7] = 0xE000000000000000;
  v13[8] = 0;
  v13[9] = 0xE000000000000000;
  v13[10] = 0;
  v13[11] = 0xE000000000000000;
  v13[12] = 0;
  v13[13] = 0xE000000000000000;
  v13[14] = 0;
  v13[15] = 0xE000000000000000;
  v19 = (uint64_t)v13 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp;
  v20 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_subsId;
  *(_QWORD *)((char *)v13 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_subsId) = 0;
  v22 = OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_isVisible;
  *((_BYTE *)v13 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_isVisible) = 1;
  v23 = v13[3];
  v13[2] = a1;
  v13[3] = a2;
  swift_bridgeObjectRelease(v23);
  v24 = v13[5];
  v13[4] = a3;
  v13[5] = a4;
  swift_bridgeObjectRelease(v24);
  v25 = v13[9];
  v13[8] = a5;
  v13[9] = a6;
  swift_bridgeObjectRelease(v25);
  v26 = sub_10019074C();
  v27 = v13[7];
  v13[6] = v26;
  v13[7] = v28;
  swift_bridgeObjectRelease(v27);
  v29 = v13[15];
  v13[14] = a7;
  v13[15] = a8;
  swift_bridgeObjectRelease(v29);
  v30 = sub_10019090C();
  v31 = v13[13];
  v13[12] = v30;
  v13[13] = v32;
  swift_bridgeObjectRelease(v31);
  v33 = v13[11];
  v13[10] = a9;
  v13[11] = a10;
  swift_bridgeObjectRelease(v33);
  swift_beginAccess(v19, v38, 33, 0);
  sub_100159F58(a11, v19);
  swift_endAccess(v38);
  *(_QWORD *)((char *)v13 + v21) = a12;
  *((_BYTE *)v13 + v22) = a13;
  return v13;
}

uint64_t sub_10019074C()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  unint64_t v3;
  char v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  uint64_t countAndFlagsBits;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  Swift::String v16;
  Swift::String_optional v17;
  Swift::String v18;
  _DWORD v20[4];
  Swift::String v21;
  Swift::String v22;

  v1 = v0;
  v2 = String.lowercased()();
  v21 = v2;
  strcpy((char *)v20, "-section-dl_bw");
  HIBYTE(v20[3]) = -18;
  v3 = sub_10014654C();
  v4 = StringProtocol.contains<A>(_:)(v20, &type metadata for String, &type metadata for String, v3, v3);
  swift_bridgeObjectRelease(v2._object);
  if ((v4 & 1) == 0)
    goto LABEL_5;
  v5 = *(void **)(v1 + 72);
  v21._countAndFlagsBits = *(_QWORD *)(v1 + 64);
  v21._object = v5;
  strcpy((char *)v20, "-section-");
  HIWORD(v20[2]) = 0;
  v20[3] = -385875968;
  v6 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v20, &type metadata for String, &type metadata for String, v3, v3);
  v7 = v6;
  if (!v6[2])
  {
    swift_bridgeObjectRelease(v6);
LABEL_5:
    v12 = *(_QWORD *)(v1 + 64);
    v13 = *(void **)(v1 + 72);
    v14 = (void *)objc_opt_self(NSBundle);
    swift_bridgeObjectRetain(v13);
    v15 = objc_msgSend(v14, "mainBundle");
    v22._object = v13;
    v16._countAndFlagsBits = v12;
    v16._object = v13;
    v17.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v17.value._object = (void *)0xEB00000000656C62;
    v18._countAndFlagsBits = v12;
    v18._object = v13;
    v22._countAndFlagsBits = v12;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, (NSBundle)v15, v18, v22)._countAndFlagsBits;
    swift_bridgeObjectRelease(v13);

    return countAndFlagsBits;
  }
  v8 = v6[4];
  v9 = (void *)v6[5];
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v7);
  v21._countAndFlagsBits = 0x20646E6142;
  v21._object = (void *)0xE500000000000000;
  v10._countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  return v21._countAndFlagsBits;
}

uint64_t sub_10019090C()
{
  _QWORD *v0;
  _QWORD *v1;
  Swift::String v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  int countAndFlagsBits_low;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  _BYTE *v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  Swift::String v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  double *v76;
  double v77[2];
  Swift::String v78;

  v1 = v0;
  v2 = String.lowercased()();
  v78 = v2;
  strcpy((char *)v77, "-section-dl_bw");
  HIBYTE(v77[1]) = -18;
  v3 = sub_10014654C();
  v4 = StringProtocol.contains<A>(_:)(v77, &type metadata for String, &type metadata for String, v3, v3);
  swift_bridgeObjectRelease(v2._object);
  if ((v4 & 1) == 0)
    goto LABEL_57;
  v5 = v1[14];
  v6 = v1[15];
  v7 = HIBYTE(v6) & 0xF;
  v8 = v5 & 0xFFFFFFFFFFFFLL;
  if (!((v6 & 0x2000000000000000) != 0 ? HIBYTE(v6) & 0xF : v5 & 0xFFFFFFFFFFFFLL))
    goto LABEL_57;
  if ((v6 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v1[15]);
    v13 = (uint64_t)sub_1001B237C(v5, v6, 10);
    v31 = v30;
    swift_bridgeObjectRelease(v6);
    if ((v31 & 1) == 0)
      goto LABEL_37;
    goto LABEL_57;
  }
  if ((v6 & 0x2000000000000000) != 0)
  {
    v78._countAndFlagsBits = v1[14];
    v78._object = (void *)(v6 & 0xFFFFFFFFFFFFFFLL);
    if (v5 == 43)
    {
      if (!v7)
        goto LABEL_131;
      if (v7 != 1 && (BYTE1(v5) - 48) <= 9u)
      {
        v13 = (BYTE1(v5) - 48);
        if (v7 == 2)
          goto LABEL_35;
        if ((BYTE2(v5) - 48) <= 9u)
        {
          v13 = 10 * (BYTE1(v5) - 48) + (BYTE2(v5) - 48);
          v15 = v7 - 3;
          if (v15)
          {
            v16 = (unsigned __int8 *)&v78._countAndFlagsBits + 3;
            while (1)
            {
              v17 = *v16 - 48;
              if (v17 > 9)
                goto LABEL_33;
              v18 = 10 * v13;
              if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
                goto LABEL_33;
              v13 = v18 + v17;
              if (__OFADD__(v18, v17))
                goto LABEL_33;
              v14 = 0;
              ++v16;
              if (!--v15)
                goto LABEL_36;
            }
          }
          goto LABEL_35;
        }
      }
    }
    else
    {
      if (v5 == 45)
      {
        if (v7)
        {
          if (v7 == 1 || (BYTE1(v5) - 48) > 9u)
            goto LABEL_33;
          if (v7 == 2)
          {
            v14 = 0;
            v13 = -(uint64_t)(BYTE1(v5) - 48);
            goto LABEL_36;
          }
          if ((BYTE2(v5) - 48) > 9u)
            goto LABEL_33;
          v13 = -10 * (BYTE1(v5) - 48) - (BYTE2(v5) - 48);
          v26 = v7 - 3;
          if (v26)
          {
            v27 = (unsigned __int8 *)&v78._countAndFlagsBits + 3;
            while (1)
            {
              v28 = *v27 - 48;
              if (v28 > 9)
                goto LABEL_33;
              v29 = 10 * v13;
              if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
                goto LABEL_33;
              v13 = v29 - v28;
              if (__OFSUB__(v29, v28))
                goto LABEL_33;
              v14 = 0;
              ++v27;
              if (!--v26)
                goto LABEL_36;
            }
          }
LABEL_35:
          v14 = 0;
LABEL_36:
          if ((v14 & 1) == 0)
            goto LABEL_37;
          goto LABEL_57;
        }
        __break(1u);
LABEL_131:
        __break(1u);
        goto LABEL_132;
      }
      if (v7 && (v5 - 48) <= 9u)
      {
        v13 = (v5 - 48);
        if (v7 == 1)
          goto LABEL_35;
        if ((BYTE1(v5) - 48) <= 9u)
        {
          v13 = 10 * (v5 - 48) + (BYTE1(v5) - 48);
          v22 = v7 - 2;
          if (v22)
          {
            v23 = (unsigned __int8 *)&v78._countAndFlagsBits + 2;
            while (1)
            {
              v24 = *v23 - 48;
              if (v24 > 9)
                goto LABEL_33;
              v25 = 10 * v13;
              if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
                goto LABEL_33;
              v13 = v25 + v24;
              if (__OFADD__(v25, v24))
                goto LABEL_33;
              v14 = 0;
              ++v23;
              if (!--v22)
                goto LABEL_36;
            }
          }
          goto LABEL_35;
        }
      }
    }
LABEL_33:
    v13 = 0;
    v14 = 1;
    goto LABEL_36;
  }
  if ((v5 & 0x1000000000000000) != 0)
    v10 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v1[14], v1[15]);
  v11 = sub_1001B2368(v10, v8, 10);
  if ((v12 & 1) == 0)
  {
    v13 = (uint64_t)v11;
LABEL_37:
    v19 = v13 / 5;
LABEL_38:
    *(_QWORD *)&v77[0] = v19;
    v78._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v78._object = v20;
LABEL_39:
    v21 = 2051558688;
LABEL_74:
    v45 = 0xE400000000000000;
LABEL_75:
    String.append(_:)(*(Swift::String *)&v21);
    return v78._countAndFlagsBits;
  }
LABEL_57:
  v32 = v1[6];
  v33 = v1[7];
  v34 = v32 == 0x696C696261706143 && v33 == 0xEC00000073656974;
  if (!v34
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x696C696261706143, 0xEC00000073656974, v1[6], v1[7], 0) & 1) == 0)
  {
    if (v32 == 1347572562 && v33 == 0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(1347572562, 0xE400000000000000, v32, v33, 0) & 1) != 0)
    {
      v44 = (void *)v1[15];
      v78._countAndFlagsBits = v1[14];
      v78._object = v44;
      swift_bridgeObjectRetain(v44);
      v21 = 1833067552;
      goto LABEL_74;
    }
    if (v32 == 1364349778 && v33 == 0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(1364349778, 0xE400000000000000, v32, v33, 0) & 1) != 0)
    {
      goto LABEL_102;
    }
    if (v32 == 0x30524E4953 && v33 == 0xE500000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x30524E4953, 0xE500000000000000, v32, v33, 0) & 1) != 0)
    {
      v47 = v1[14];
      v48 = v1[15];
      swift_bridgeObjectRetain(v48);
      LOBYTE(v47) = sub_100189190(v47, v48);
      v49 = swift_bridgeObjectRelease(v48);
      if ((v47 & 1) != 0)
      {
        v51 = v1[14];
        v50 = v1[15];
        v77[0] = 0.0;
        __chkstk_darwin(v49);
        v76 = v77;
        if ((v50 & 0x1000000000000000) == 0 && v50 & 0x2000000000000000 | v51 & 0x1000000000000000)
        {
          if ((v50 & 0x2000000000000000) == 0)
          {
            if ((v51 & 0x1000000000000000) != 0)
            {
LABEL_89:
              v52 = (v50 & 0xFFFFFFFFFFFFFFFLL) + 32;
              swift_bridgeObjectRetain(v50);
              goto LABEL_90;
            }
LABEL_100:
            v52 = _StringObject.sharedUTF8.getter(v51, v50);
            swift_bridgeObjectRetain(v50);
            if (!v52)
            {
              v53 = 0;
              goto LABEL_91;
            }
LABEL_90:
            v53 = (_BYTE *)v52;
LABEL_91:
            sub_1001915D4(v53, (BOOL *)&v78);
            countAndFlagsBits_low = LOBYTE(v78._countAndFlagsBits);
            swift_bridgeObjectRelease(v50);
LABEL_109:
            if (countAndFlagsBits_low)
              v60 = v77[0] / 10.0;
            else
              v60 = 0.0;
            v61 = sub_100146438((uint64_t *)&unk_1002B57E0);
            v62 = swift_allocObject(v61, 72, 7);
            *(_OWORD *)(v62 + 16) = xmmword_1002402A0;
            *(_QWORD *)(v62 + 56) = &type metadata for Double;
            *(_QWORD *)(v62 + 64) = &protocol witness table for Double;
            *(double *)(v62 + 32) = v60;
            return String.init(format:_:)(0x42642066312E25, 0xE700000000000000, v62);
          }
          goto LABEL_103;
        }
        goto LABEL_135;
      }
      goto LABEL_102;
    }
    if (v32 == 0x31524E4953 && v33 == 0xE500000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x31524E4953, 0xE500000000000000, v32, v33, 0) & 1) != 0)
    {
      v55 = v1[14];
      v56 = v1[15];
      swift_bridgeObjectRetain(v56);
      LOBYTE(v55) = sub_100189190(v55, v56);
      v57 = swift_bridgeObjectRelease(v56);
      if ((v55 & 1) != 0)
      {
        v51 = v1[14];
        v50 = v1[15];
        v77[0] = 0.0;
        __chkstk_darwin(v57);
        v76 = v77;
        if ((v50 & 0x1000000000000000) == 0 && v50 & 0x2000000000000000 | v51 & 0x1000000000000000)
        {
          if ((v50 & 0x2000000000000000) == 0)
          {
            if ((v51 & 0x1000000000000000) != 0)
              goto LABEL_89;
            goto LABEL_100;
          }
LABEL_103:
          v78._countAndFlagsBits = v51;
          v78._object = (void *)(v50 & 0xFFFFFFFFFFFFFFLL);
          swift_bridgeObjectRetain(v50);
          countAndFlagsBits_low = (v51 >= 0x21u || ((0x100003E01uLL >> v51) & 1) == 0)
                               && (v59 = (_BYTE *)_swift_stdlib_strtod_clocale(&v78, v77)) != 0
                               && *v59 == 0;
          swift_bridgeObjectRelease(v50);
          goto LABEL_109;
        }
LABEL_135:
        swift_bridgeObjectRetain(v50);
        _StringGuts._slowWithCString<A>(_:)(&v78, sub_1001915D4, &v75, v51, v50, &type metadata for Bool);
        swift_bridgeObjectRelease(v50);
        countAndFlagsBits_low = LOBYTE(v78._countAndFlagsBits);
        goto LABEL_109;
      }
LABEL_102:
      v58 = (void *)v1[15];
      v78._countAndFlagsBits = v1[14];
      v78._object = v58;
      swift_bridgeObjectRetain(v58);
      v21 = 4351008;
      v45 = 0xE300000000000000;
      goto LABEL_75;
    }
    if (v32 == 1684955458 && v33 == 0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(1684955458, 0xE400000000000000, v32, v33, 0) & 1) != 0)
    {
      v63 = v1[4];
      v64 = v1[5];
      if (v63 == 18229 && v64 == 0xE200000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v63, v64, 18229, 0xE200000000000000, 0) & 1) != 0)
      {
        v78._countAndFlagsBits = 110;
        v78._object = (void *)0xE100000000000000;
        v66 = v1[14];
        v65 = (void *)v1[15];
        swift_bridgeObjectRetain(v65);
        v67._countAndFlagsBits = v66;
        v67._object = v65;
        String.append(_:)(v67);
        swift_bridgeObjectRelease(v65);
        return v78._countAndFlagsBits;
      }
LABEL_128:
      v43 = v1[14];
      swift_bridgeObjectRetain(v1[15]);
      return v43;
    }
    if ((v32 != 0x74646977646E6142 || v33 != 0xE900000000000068)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0x74646977646E6142, 0xE900000000000068, v32, v33, 0) & 1) == 0)
    {
      goto LABEL_128;
    }
    v68 = v1[4];
    v69 = v1[5];
    if (v68 == 18229 && v69 == 0xE200000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v68, v69, 18229, 0xE200000000000000, 0) & 1) != 0
      || (v70 = (void *)v1[9],
          v78._countAndFlagsBits = v1[8],
          v78._object = v70,
          v77[0] = -2.31584178e77,
          *(_QWORD *)&v77[1] = 0x800000010020FE70,
          StringProtocol.caseInsensitiveCompare<A>(_:)(v77, &type metadata for String, &type metadata for String, v3, v3)))
    {
      v71 = (void *)v1[15];
      v78._countAndFlagsBits = v1[14];
      v78._object = v71;
      swift_bridgeObjectRetain(v71);
      goto LABEL_39;
    }
LABEL_132:
    v73 = v1[14];
    v72 = v1[15];
    swift_bridgeObjectRetain(v72);
    v19 = sub_1001AD104(v73, v72) / 5;
    if ((v74 & 1) != 0)
      v19 = 0;
    goto LABEL_38;
  }
  v35 = v1[14];
  v36 = v1[15];
  swift_bridgeObjectRetain(v36);
  v37 = sub_100189190(v35, v36);
  swift_bridgeObjectRelease(v36);
  v39 = v1[14];
  v38 = (void *)v1[15];
  if ((v37 & 1) != 0)
  {
    swift_bridgeObjectRetain(v38);
    v40 = sub_1001AD104(v39, (unint64_t)v38);
    if ((v41 & 1) != 0)
      v40 = 0;
    return sub_100191654(v40);
  }
  v78._countAndFlagsBits = v39;
  v78._object = v38;
  v77[0] = -2.31584178e77;
  *(_QWORD *)&v77[1] = 0x80000001002127C0;
  if (StringProtocol.caseInsensitiveCompare<A>(_:)(v77, &type metadata for String, &type metadata for String, v3, v3))
    return 0;
  else
    return 16723;
}

_QWORD *sub_100191324()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  sub_100159C74((uint64_t)v0 + OBJC_IVAR____TtC13FTMInternal_418FTMAllMetricsModel_timestamp);
  return v0;
}

uint64_t sub_100191380()
{
  uint64_t v0;

  sub_100191324();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001913A4()
{
  return type metadata accessor for FTMAllMetricsModel(0);
}

uint64_t type metadata accessor for FTMAllMetricsModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B62D0;
  if (!qword_1002B62D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FTMAllMetricsModel);
  return result;
}

void sub_1001913E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = &unk_1002427D8;
  v4[1] = &unk_1002427D8;
  v4[2] = &unk_1002427D8;
  v4[3] = &unk_1002427D8;
  v4[4] = &unk_1002427D8;
  v4[5] = &unk_1002427D8;
  v4[6] = &unk_1002427D8;
  sub_100158F94(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[9] = &unk_1002427F0;
    swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
  }
}

void *sub_100191484()
{
  return &protocol witness table for String;
}

uint64_t sub_100191490@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for FTMAllMetricsModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001914CC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

_BYTE *sub_1001914DC@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100191544(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

_QWORD *sub_100191598@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

_BYTE *sub_1001915D4@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1001915E8(a1, a2);
}

_BYTE *sub_1001915E8@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100191654(uint64_t a1)
{
  uint64_t result;

  result = 4543564;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
    case 4:
    case 5:
      result = 0x41534E204735;
      break;
    case 2:
      result = 16723;
      break;
    case 3:
    case 6:
    case 7:
      result = 0x41534E2B4153;
      break;
    default:
      result = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      break;
  }
  return result;
}

double apmView()@<D0>(uint64_t a1@<X8>)
{
  return sub_100191754(0x656E616C70726961, 0xE800000000000000, 0xD00000000000001CLL, 0x8000000100213920, a1);
}

double noSimView()@<D0>(uint64_t a1@<X8>)
{
  return sub_100191754(0x647261636D6973, 0xE700000000000000, 0xD00000000000001DLL, 0x8000000100213900, a1);
}

double sub_100191754@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double result;
  __int128 v15;
  _OWORD v16[8];
  char v17;
  _BYTE v18[136];

  v10 = static HorizontalAlignment.center.getter(a1);
  sub_1001918B8(a1, a2, a3, a4, (uint64_t)v16);
  *(_OWORD *)&v18[103] = v16[6];
  *(_OWORD *)&v18[87] = v16[5];
  *(_OWORD *)&v18[39] = v16[2];
  *(_OWORD *)&v18[23] = v16[1];
  *(_OWORD *)&v18[119] = v16[7];
  v18[135] = v17;
  *(_OWORD *)&v18[55] = v16[3];
  *(_OWORD *)&v18[71] = v16[4];
  *(_OWORD *)&v18[7] = v16[0];
  v11 = *(_OWORD *)&v18[64];
  *(_OWORD *)(a5 + 97) = *(_OWORD *)&v18[80];
  v12 = *(_OWORD *)&v18[112];
  *(_OWORD *)(a5 + 113) = *(_OWORD *)&v18[96];
  *(_OWORD *)(a5 + 129) = v12;
  v13 = *(_OWORD *)v18;
  *(_OWORD *)(a5 + 33) = *(_OWORD *)&v18[16];
  result = *(double *)&v18[32];
  v15 = *(_OWORD *)&v18[48];
  *(_OWORD *)(a5 + 49) = *(_OWORD *)&v18[32];
  *(_OWORD *)(a5 + 65) = v15;
  *(_OWORD *)(a5 + 81) = v11;
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 16) = 1;
  *(_QWORD *)(a5 + 145) = *(_QWORD *)&v18[128];
  *(_OWORD *)(a5 + 17) = v13;
  return result;
}

uint64_t sub_100191858@<X0>(uint64_t a1@<X8>)
{
  return sub_1001918B8(0x647261636D6973, 0xE700000000000000, 0xD00000000000001DLL, 0x8000000100213900, a1);
}

uint64_t sub_100191888@<X0>(uint64_t a1@<X8>)
{
  return sub_1001918B8(0x656E616C70726961, 0xE800000000000000, 0xD00000000000001CLL, 0x8000000100213920, a1);
}

uint64_t sub_1001918B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t KeyPath;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v6 = Image.init(systemName:)(a1, a2);
  v7 = Text.init(_:)(v6);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = static Color.blue.getter(v7, v8);
  v15 = Text.foregroundColor(_:)(v14, v7, v9, v13, v11);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_release(v14);
  v22 = v19 & 1;
  sub_10014BE2C(v7, v9, v13);
  v23 = swift_bridgeObjectRelease(v11);
  v24 = static Font.headline.getter(v23);
  v25 = Text.font(_:)(v24, v15, v17, v22, v21);
  v27 = v26;
  LOBYTE(v11) = v28;
  v30 = v29;
  swift_release(v24);
  v31 = v11 & 1;
  sub_10014BE2C(v15, v17, v22);
  swift_bridgeObjectRelease(v21);
  v32 = Text.bold()(v25, v27, v31, v30);
  v56 = v33;
  v57 = v32;
  v58 = v34;
  v55 = v35 & 1;
  sub_10014BE2C(v25, v27, v31);
  v36 = swift_bridgeObjectRelease(v30);
  v54 = static Edge.Set.vertical.getter(v36);
  v37 = LocalizedStringKey.init(stringLiteral:)(a3, a4);
  v38 = Text.init(_:tableName:bundle:comment:)(v37);
  v40 = v39;
  v42 = v41;
  v44 = v43 & 1;
  v45 = static Font.subheadline.getter(v38, v39);
  v46 = Text.font(_:)(v45, v38, v40, v44, v42);
  v48 = v47;
  LOBYTE(v24) = v49;
  v51 = v50;
  swift_release(v45);
  LOBYTE(v45) = v24 & 1;
  sub_10014BE2C(v38, v40, v44);
  swift_bridgeObjectRelease(v42);
  KeyPath = swift_getKeyPath(&unk_100242878);
  *(_QWORD *)a5 = v57;
  *(_QWORD *)(a5 + 8) = v56;
  *(_BYTE *)(a5 + 16) = v55;
  *(_QWORD *)(a5 + 24) = v58;
  *(_BYTE *)(a5 + 32) = v54;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_BYTE *)(a5 + 72) = 1;
  *(_QWORD *)(a5 + 80) = v46;
  *(_QWORD *)(a5 + 88) = v48;
  *(_BYTE *)(a5 + 96) = v45;
  *(_QWORD *)(a5 + 104) = v51;
  *(_QWORD *)(a5 + 112) = KeyPath;
  *(_QWORD *)(a5 + 120) = 0;
  *(_BYTE *)(a5 + 128) = 1;
  sub_10014BE1C(v57, v56, v55);
  swift_bridgeObjectRetain(v58);
  sub_10014BE1C(v46, v48, v45);
  swift_bridgeObjectRetain(v51);
  swift_retain(KeyPath);
  sub_10014BE2C(v46, v48, v45);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v51);
  sub_10014BE2C(v57, v56, v55);
  return swift_bridgeObjectRelease(v58);
}

unint64_t sub_100191B5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B51F0;
  if (!qword_1002B51F0)
  {
    v1 = sub_1001464C4(&qword_1002B51E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B51F0);
  }
  return result;
}

uint64_t sub_100191BA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100191BD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100191C08(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100191C34(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100191CB8()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  objc_class *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[5];
  uint64_t v46;
  objc_super v47;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v5 - 8);
  v43 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for DispatchTime(0);
  v8 = *(_QWORD *)(v41 - 8);
  v9 = __chkstk_darwin(v41);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v39 - v12;
  v14 = (objc_class *)type metadata accessor for RootNavigationController();
  v47.receiver = v0;
  v47.super_class = v14;
  v15 = objc_msgSendSuper2(&v47, "viewDidLoad");
  if (qword_1002B3A78 != -1)
    v15 = (id)swift_once(&qword_1002B3A78, sub_100183CA4);
  if (*(_BYTE *)(qword_1002BF068 + 26) == 1)
  {
    if (qword_1002B39E8 != -1)
      v15 = (id)swift_once(&qword_1002B39E8, sub_100174680);
    v40 = qword_1002BEFD8;
    v19 = static os_log_type_t.default.getter(v15, v16, v17, v18);
    v20 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_1002402A0;
    v22 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_424RootNavigationController_persistanceStore]
                                         + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_hardwareManager)
                             + 28);
    v23 = sub_10016B1E0();
    v24 = 7758189;
    if (v22)
      v24 = 6644585;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = v23;
    *(_QWORD *)(v21 + 32) = v24;
    *(_QWORD *)(v21 + 40) = 0xE300000000000000;
    os_log(_:dso:log:type:_:)("device type: %{public}s", 23, 2, &_mh_execute_header, v40, v19, v21);
    swift_bridgeObjectRelease(v21);
  }
  v25 = sub_100192474();
  v26 = (void *)static OS_dispatch_queue.main.getter(v25);
  static DispatchTime.now()();
  + infix(_:_:)(v11, 10.0);
  v27 = *(void (**)(char *, uint64_t))(v8 + 8);
  v28 = v11;
  v29 = v41;
  v27(v28, v41);
  v30 = swift_allocObject(&unk_100265370, 24, 7);
  *(_QWORD *)(v30 + 16) = v1;
  aBlock[4] = sub_1001924D4;
  v46 = v30;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_100265388;
  v31 = _Block_copy(aBlock);
  v32 = v46;
  v33 = v1;
  swift_release(v32);
  static DispatchQoS.unspecified.getter(v34);
  aBlock[0] = _swiftEmptyArrayStorage;
  v35 = sub_10017CF34();
  v36 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v37 = sub_1001924F4();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v36, v37, v2, v35);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v13, v7, v4, v31);
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v43);
  return ((uint64_t (*)(char *, uint64_t))v27)(v13, v29);
}

void sub_10019204C(uint64_t a1)
{
  id v1;
  NSString v2;

  v1 = objc_retain(*(id *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC13FTMInternal_424RootNavigationController_persistanceStore)
                         + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_aBMWrapper));
  v2 = String._bridgeToObjectiveC()();
  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  objc_msgSend(v1, "querySpecificMetric:triggerRef:triggerType:triggerID:profileID:metricID:");

}

void sub_100192148()
{
  uint64_t v0;
  id v1;
  NSString v2;

  v1 = objc_retain(*(id *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC13FTMInternal_424RootNavigationController_persistanceStore)
                         + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_aBMWrapper));
  v2 = String._bridgeToObjectiveC()();
  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  objc_msgSend(v1, "querySpecificMetric:triggerRef:triggerType:triggerID:profileID:metricID:");

}

id sub_100192244(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  objc_super v5;

  if (qword_1002B39E0 != -1)
    a1 = swift_once(&qword_1002B39E0, sub_100174664);
  v2 = qword_1002BEFD0;
  v3 = static os_log_type_t.error.getter(a1);
  os_log(_:dso:log:type:_:)("root navigation vc deinit called", 32, 2, &_mh_execute_header, v2, v3, _swiftEmptyArrayStorage);
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for RootNavigationController();
  return objc_msgSendSuper2(&v5, "dealloc");
}

uint64_t type metadata accessor for RootNavigationController()
{
  return objc_opt_self(_TtC13FTMInternal_424RootNavigationController);
}

unint64_t sub_100192474()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B55E0;
  if (!qword_1002B55E0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B55E0);
  }
  return result;
}

uint64_t sub_1001924B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1001924D4()
{
  uint64_t v0;

  sub_10019204C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001924DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1001924EC(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unint64_t sub_1001924F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B6540;
  if (!qword_1002B6540)
  {
    v1 = sub_1001464C4((uint64_t *)&unk_1002B55F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B6540);
  }
  return result;
}

id sub_1001925C4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController____lazy_storage___tableView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController____lazy_storage___tableView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController____lazy_storage___tableView);
  }
  else
  {
    v4 = sub_100192624(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_100192624(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t ObjCClassFromMetadata;
  void *v5;
  NSString v6;
  id v7;
  NSString v8;
  id v9;

  v2 = objc_msgSend(objc_allocWithZone((Class)UITableView), "initWithFrame:style:", 0, 0.0, 0.0, 0.0, 0.0);
  v3 = type metadata accessor for FavoritesTableCellV2();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
  v5 = off_1002B4BF8;
  swift_bridgeObjectRetain(off_1002B4BF8);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  objc_msgSend(v2, "registerClass:forCellReuseIdentifier:", ObjCClassFromMetadata, v6);

  objc_msgSend(v2, "setSeparatorStyle:", 0);
  v7 = v2;
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v8);

  objc_msgSend(v7, "setBackgroundColor:", v9);
  objc_msgSend(v7, "setDataSource:", a1);
  objc_msgSend(v7, "setDelegate:", a1);
  objc_msgSend(v7, "setAlwaysBounceVertical:", 1);
  objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  return v7;
}

id sub_1001927B0()
{
  id v0;
  NSString v1;
  id v2;
  NSString v3;
  id v4;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIButton), "init");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v1);

  objc_msgSend(v0, "setImage:forState:", v2, 0);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v3);

  objc_msgSend(v0, "setTintColor:", v4);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "setEnabled:", 1);
  return v0;
}

void sub_1001928E4()
{
  char *v0;
  char *v1;
  NSString v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Class isa;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  Class v45;
  uint64_t v46;
  objc_super v47;

  v1 = v0;
  v47.receiver = v0;
  v47.super_class = (Class)type metadata accessor for ManageDashboardViewController();
  objc_msgSendSuper2(&v47, "viewDidLoad");
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setTitle:", v2);

  v3 = *(void **)&v1[OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController_dismissButton];
  v4 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithCustomView:", v3);
  objc_msgSend(v3, "addTarget:action:forControlEvents:", v1, "didTapDismissWithSender:", 64);
  v5 = objc_msgSend(v1, "navigationItem");
  v6 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v7 = swift_allocObject(v6, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100241880;
  *(_QWORD *)(v7 + 32) = v4;
  v46 = v7;
  specialized Array._endMutation()(v7);
  sub_1001548C8(0, &qword_1002B6558, UIBarButtonItem_ptr);
  v8 = v4;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v46);
  objc_msgSend(v5, "setRightBarButtonItems:animated:", isa, 1);

  v10 = objc_msgSend(v1, "view");
  if (!v10)
  {
    __break(1u);
    goto LABEL_8;
  }
  v11 = v10;
  v12 = sub_1001925C4();
  objc_msgSend(v11, "addSubview:", v12);

  v13 = swift_allocObject(v6, 64, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100240400;
  v14 = sub_1001925C4();
  v15 = objc_msgSend(v14, "topAnchor");

  v16 = objc_msgSend(v1, "view");
  if (!v16)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v17 = v16;
  v18 = objc_msgSend(v16, "safeAreaLayoutGuide");

  v19 = objc_msgSend(v18, "topAnchor");
  v20 = objc_msgSend(v15, "constraintEqualToAnchor:", v19);

  *(_QWORD *)(v13 + 32) = v20;
  v21 = sub_1001925C4();
  v22 = objc_msgSend(v21, "leadingAnchor");

  v23 = objc_msgSend(v1, "view");
  if (!v23)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v24 = v23;
  v25 = objc_msgSend(v23, "safeAreaLayoutGuide");

  v26 = objc_msgSend(v25, "leadingAnchor");
  v27 = objc_msgSend(v22, "constraintEqualToAnchor:", v26);

  *(_QWORD *)(v13 + 40) = v27;
  v28 = sub_1001925C4();
  v29 = objc_msgSend(v28, "trailingAnchor");

  v30 = objc_msgSend(v1, "view");
  if (!v30)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v31 = v30;
  v32 = objc_msgSend(v30, "safeAreaLayoutGuide");

  v33 = objc_msgSend(v32, "trailingAnchor");
  v34 = objc_msgSend(v29, "constraintEqualToAnchor:", v33);

  *(_QWORD *)(v13 + 48) = v34;
  v35 = sub_1001925C4();
  v36 = objc_msgSend(v35, "bottomAnchor");

  v37 = objc_msgSend(v1, "view");
  if (v37)
  {
    v38 = v37;
    v39 = (void *)objc_opt_self(NSLayoutConstraint);
    v40 = objc_msgSend(v38, "safeAreaLayoutGuide");

    v41 = objc_msgSend(v40, "bottomAnchor");
    v42 = objc_msgSend(v36, "constraintEqualToAnchor:", v41);

    *(_QWORD *)(v13 + 56) = v42;
    specialized Array._endMutation()(v43);
    v44 = v13;
    sub_1001548C8(0, (unint64_t *)&qword_1002B57F0, NSLayoutConstraint_ptr);
    v45 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v44);
    objc_msgSend(v39, "activateConstraints:", v45);

    return;
  }
LABEL_11:
  __break(1u);
}

void sub_100192E58()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController_dashboardList));

}

id sub_100192EA4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ManageDashboardViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ManageDashboardViewController()
{
  return objc_opt_self(_TtC13FTMInternal_429ManageDashboardViewController);
}

id sub_10019307C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  NSString v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id result;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  _BYTE v25[24];

  v2 = v1;
  v4 = off_1002B4BF8;
  swift_bridgeObjectRetain(off_1002B4BF8);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v5, isa);

  v8 = type metadata accessor for FavoritesTableCellV2();
  v9 = swift_dynamicCastClass(v7, v8);
  if (v9)
  {
    v10 = v9;
    v11 = IndexPath.row.getter(v9);
    v12 = v2 + OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController_dashboardList;
    result = (id)swift_beginAccess(v12, v25, 0, 0);
    if ((v11 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v11 < *(_QWORD *)(*(_QWORD *)v12 + 16))
    {
      v14 = *(_QWORD *)v12 + 40 * v11;
      v15 = *(void **)(v14 + 40);
      v16 = *(void **)(v14 + 48);
      v17 = *(void **)(v14 + 56);
      v18 = *(id *)(v14 + 32);
      v19 = v15;
      v20 = v16;
      v21 = v17;
      v22 = sub_100162828();
      objc_msgSend(v22, "setText:", v20);

      v23 = sub_100162840();
      objc_msgSend(v23, "setText:", v21);

      v24 = sub_1001628D8();
      objc_msgSend(v24, "setHidden:", 1);

      return (id)v10;
    }
    __break(1u);
  }
  else
  {

    return objc_msgSend(objc_allocWithZone((Class)UITableViewCell), "init");
  }
  return result;
}

void sub_10019330C(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  char *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  char v41[24];
  _QWORD v42[4];
  int v43;

  v4 = v3;
  v8 = type metadata accessor for IndexPath(0, a2, a3);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == 1)
  {
    v13 = IndexPath.row.getter(v11);
    v14 = &v4[OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController_dashboardList];
    swift_beginAccess(&v4[OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController_dashboardList], v41, 0, 0);
    if ((v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v13 < *(_QWORD *)(*(_QWORD *)v14 + 16))
    {
      v15 = *(_QWORD *)v14 + 40 * v13;
      v38 = a1;
      v17 = *(void **)(v15 + 32);
      v16 = *(void **)(v15 + 40);
      v19 = *(void **)(v15 + 48);
      v18 = *(void **)(v15 + 56);
      LODWORD(v15) = *(_DWORD *)(v15 + 64);
      v42[0] = v17;
      v42[1] = v16;
      v42[2] = v19;
      v42[3] = v18;
      v43 = v15;
      v20 = *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController_persistanceStore];
      v39 = v18;
      v40 = v20;
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v8);
      v21 = *(unsigned __int8 *)(v9 + 80);
      v22 = (v21 + 24) & ~v21;
      v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
      v24 = swift_allocObject(&unk_1002653C0, v23 + 8, v21 | 7);
      *(_QWORD *)(v24 + 16) = v4;
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24 + v22, v12, v8);
      v25 = v38;
      *(_QWORD *)(v24 + v23) = v38;
      v26 = v17;
      v27 = v16;
      v28 = v19;
      v29 = v39;
      v30 = v4;
      v31 = v25;
      v35 = sub_1001BC480((uint64_t)v31, v32, v33, v34);
      v36 = swift_allocObject(&unk_1002653E8, 32, 7);
      *(_QWORD *)(v36 + 16) = sub_100193BCC;
      *(_QWORD *)(v36 + 24) = v24;
      swift_retain(v24);
      sub_1001BF5E4((uint64_t)v42, (uint64_t)sub_100193C54, v36);
      swift_release(v24);

      swift_release(v35);
      swift_release(v36);
      return;
    }
    __break(1u);
  }
}

void sub_10019351C(char a1, uint64_t a2, char *a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  void **v19;
  void *v20;
  uint64_t (*v21)();
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Class isa;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE v46[24];
  void **aBlock;
  uint64_t v48;
  uint64_t (*v49)();
  void *v50;
  void (*v51)();
  uint64_t v52;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v46[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = &v46[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a1 & 1) != 0)
  {
    v18 = IndexPath.row.getter(v15);
    swift_beginAccess(&a3[OBJC_IVAR____TtC13FTMInternal_429ManageDashboardViewController_dashboardList], v46, 33, 0);
    sub_1001AD350(v18, (uint64_t)&aBlock);
    v19 = aBlock;
    v20 = (void *)v48;
    v21 = v49;
    v22 = v50;
    swift_endAccess(v46);

    v23 = sub_100146438((uint64_t *)&unk_1002B6548);
    v26 = type metadata accessor for IndexPath(0, v24, v25);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(unsigned __int8 *)(v27 + 80);
    v29 = (v28 + 32) & ~v28;
    v30 = swift_allocObject(v23, v29 + *(_QWORD *)(v27 + 72), v28 | 7);
    *(_OWORD *)(v30 + 16) = xmmword_1002402A0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v30 + v29, a4, v26);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v30);
    objc_msgSend(a5, "deleteRowsAtIndexPaths:withRowAnimation:", isa, 0);

    v32 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_1002B3A58 != -1)
      swift_once(&qword_1002B3A58, sub_100175354);
    objc_msgSend(v32, "postNotificationName:object:userInfo:", static NSNotificationName.dashboardMetricUpdate, 0, 0);

  }
  else
  {
    v45 = v10;
    if (qword_1002B3A00 != -1)
      v15 = swift_once(&qword_1002B3A00, sub_100174798);
    v33 = qword_1002BEFF0;
    v34 = static os_log_type_t.error.getter(v15);
    os_log(_:dso:log:type:_:)("unable to delete metric from dashboard", 38, 2, &_mh_execute_header, v33, v34, _swiftEmptyArrayStorage);
    v35 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
    v36 = (void *)static OS_dispatch_queue.main.getter(v35);
    v37 = swift_allocObject(&unk_100265410, 24, 7);
    *(_QWORD *)(v37 + 16) = a3;
    v51 = sub_100193C80;
    v52 = v37;
    aBlock = _NSConcreteStackBlock;
    v48 = 1107296256;
    v49 = sub_1001BE428;
    v50 = &unk_100265428;
    v38 = _Block_copy(&aBlock);
    v39 = v52;
    v40 = a3;
    swift_release(v39);
    static DispatchQoS.unspecified.getter(v41);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v42 = sub_10017CF34();
    v43 = sub_100146438((uint64_t *)&unk_1002B55F0);
    v44 = sub_1001924F4();
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v43, v44, v9, v42);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v12, v38);
    _Block_release(v38);

    (*(void (**)(_BYTE *, uint64_t))(v45 + 8))(v12, v9);
    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v17, v13);
  }
}

void sub_1001938D0(void *a1)
{
  NSString v2;
  NSString v3;
  id v4;
  NSString v5;
  id v6;

  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v2, v3, 1);

  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v5, 0, 0);

  objc_msgSend(v4, "addAction:", v6);
  objc_msgSend(a1, "presentViewController:animated:completion:", v4, 1, 0);

}

uint64_t sub_100193B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = type metadata accessor for IndexPath(0, a2, a3);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = v6 | 7;
  v9 = (*(_QWORD *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3 + v7, v4);
  return swift_deallocObject(v3, v9 + 8, v8);
}

void sub_100193BCC(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;

  v6 = *(_QWORD *)(type metadata accessor for IndexPath(0, a2, a3) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  sub_10019351C(a1, a2, *(char **)(v3 + 16), v3 + v7, *(void **)(v3 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100193C30()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100193C54(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001BDBA0(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_100193C5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100193C80()
{
  uint64_t v0;

  sub_1001938D0(*(void **)(v0 + 16));
}

uint64_t sub_100193C88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100193C98(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

double sub_100193CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a2 + 40) == 1)
  {
    if (qword_1002B3A78 != -1)
      v9 = swift_once(&qword_1002B3A78, sub_100183CA4);
    if ((*(_BYTE *)(qword_1002BF068 + 152) & 1) == 0)
    {
      v16 = *(_DWORD *)(qword_1002BF068 + 148);
      if (qword_1002B3A08 != -1)
        v9 = swift_once(&qword_1002B3A08, sub_1001747BC);
      v17 = qword_1002BEFF8;
      v18 = static os_log_type_t.default.getter(v9, v10, v11, v12);
      os_log(_:dso:log:type:_:)("AllMetricsViewModel - loadMetricList ", 37, 2, &_mh_execute_header, v17, v18, _swiftEmptyArrayStorage);
      v25 = *(_QWORD *)(a2 + 80);
      v19 = swift_allocObject(&unk_100265580, 48, 7);
      *(_QWORD *)(v19 + 16) = a2;
      *(_DWORD *)(v19 + 24) = v16;
      *(_QWORD *)(v19 + 32) = nullsub_1;
      *(_QWORD *)(v19 + 40) = 0;
      aBlock[4] = sub_100199400;
      v28 = v19;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1001BE428;
      aBlock[3] = &unk_100265598;
      v20 = _Block_copy(aBlock);
      v21 = swift_retain(a2);
      static DispatchQoS.unspecified.getter(v21);
      v26 = _swiftEmptyArrayStorage;
      v22 = sub_1001998B4((unint64_t *)&qword_1002B6530, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v23 = sub_100146438((uint64_t *)&unk_1002B55F0);
      v24 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v23, v24, v3, v22);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v6, v20);
      _Block_release(v20);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
      *(_QWORD *)&result = swift_release(v28).n128_u64[0];
    }
  }
  return result;
}

double sub_100193F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  if (*(_BYTE *)(a2 + 40) == 1)
  {
    if (qword_1002B3A08 != -1)
      a1 = swift_once(&qword_1002B3A08, sub_1001747BC);
    v4 = qword_1002BEFF8;
    v5 = static os_log_type_t.default.getter(a1, a2, a3, a4);
    os_log(_:dso:log:type:_:)("AllMetricsViewModel - processNewMetric notification called", 58, 2, &_mh_execute_header, v4, v5, _swiftEmptyArrayStorage);
    return sub_1001941E8((uint64_t)sub_100194CE0, 0);
  }
  return result;
}

uint64_t sub_100193FD0()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;

  v1 = (void *)objc_opt_self(NSNotificationCenter);
  v2 = objc_msgSend(v1, "defaultCenter");
  if (qword_1002B3A48 != -1)
    swift_once(&qword_1002B3A48, sub_100175234);
  objc_msgSend(v2, "removeObserver:name:object:", v0, static NSNotificationName.subsIdSelectionChange, 0);

  v3 = objc_msgSend(v1, "defaultCenter");
  if (qword_1002B3A30 != -1)
    swift_once(&qword_1002B3A30, sub_100175074);
  objc_msgSend(v3, "removeObserver:name:object:", v0, static NSNotificationName.NewABMMetric, 0);

  v4 = objc_msgSend(v1, "defaultCenter");
  if (qword_1002B3A38 != -1)
    swift_once(&qword_1002B3A38, sub_100175108);
  objc_msgSend(v4, "removeObserver:name:object:", v0, static NSNotificationName.NewCTMetric, 0);

  v5 = objc_msgSend(v1, "defaultCenter");
  if (qword_1002B3A60 != -1)
    swift_once(&qword_1002B3A60, sub_1001753E4);
  objc_msgSend(v5, "removeObserver:name:object:", v0, static NSNotificationName.isAirPlaneModeEnabled, 0);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  sub_10014C77C(v0 + 64);

  return v0;
}

uint64_t sub_1001941C8()
{
  uint64_t v0;

  sub_100193FD0();
  return swift_deallocClassInstance(v0, 88, 7);
}

double sub_1001941E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002B3A78 != -1)
    v11 = swift_once(&qword_1002B3A78, sub_100183CA4);
  if ((*(_BYTE *)(qword_1002BF068 + 152) & 1) == 0)
  {
    v27 = v6;
    v18 = *(_DWORD *)(qword_1002BF068 + 148);
    if (qword_1002B3A08 != -1)
      v11 = swift_once(&qword_1002B3A08, sub_1001747BC);
    v19 = qword_1002BEFF8;
    v20 = static os_log_type_t.default.getter(v11, v12, v13, v14);
    os_log(_:dso:log:type:_:)("AllMetricsViewModel - loadMetricList ", 37, 2, &_mh_execute_header, v19, v20, _swiftEmptyArrayStorage);
    v21 = swift_allocObject(&unk_100265670, 48, 7);
    *(_QWORD *)(v21 + 16) = v2;
    *(_DWORD *)(v21 + 24) = v18;
    *(_QWORD *)(v21 + 32) = a1;
    *(_QWORD *)(v21 + 40) = a2;
    aBlock[4] = sub_10019A2E4;
    v30 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001BE428;
    aBlock[3] = &unk_100265688;
    v22 = _Block_copy(aBlock);
    swift_retain(v2);
    v23 = swift_retain(a2);
    static DispatchQoS.unspecified.getter(v23);
    v28 = _swiftEmptyArrayStorage;
    v24 = sub_1001998B4((unint64_t *)&qword_1002B6530, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_100146438((uint64_t *)&unk_1002B55F0);
    v26 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v25, v26, v5, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v8, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
    *(_QWORD *)&result = swift_release(v30).n128_u64[0];
  }
  return result;
}

double sub_100194480(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  v8 = *(void **)(a1 + 16);
  v9 = swift_allocObject(&unk_1002655D0, 44, 7);
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  *(_QWORD *)(v9 + 32) = a1;
  *(_DWORD *)(v9 + 40) = a2;
  v10 = v8;
  swift_retain(a4);
  v11 = swift_retain(a1);
  v15 = sub_1001BC480(v11, v12, v13, v14);
  v16 = swift_allocObject(&unk_1002655F8, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_10019943C;
  *(_QWORD *)(v16 + 24) = v9;
  swift_retain(v9);
  sub_1001BF380(a2, (uint64_t)sub_10014C774, v16);

  swift_release(v9);
  swift_release(v15);
  *(_QWORD *)&result = swift_release(v16).n128_u64[0];
  return result;
}

uint64_t sub_10019455C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_BOOL8), uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t (*v88)(_BOOL8);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  _QWORD v104[3];
  char v105[8];
  _QWORD v106[3];
  char v107[8];
  _QWORD *v108;
  uint64_t v109;

  v87 = a4;
  v88 = a3;
  v102 = type metadata accessor for MetricList(0);
  v91 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v11 = (uint64_t *)((char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for AllMetricsRowItem(0);
  v100 = *(_QWORD *)(v12 - 8);
  v101 = v12;
  v13 = __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    sub_1001994AC(a1, a6);
    v17 = v16;
    v18 = *(_QWORD **)(a5 + 48);
    v108 = v18;
    v19 = swift_bridgeObjectRetain(v18);
    if (swift_isUniquelyReferenced_nonNull_native(v19))
    {
      sub_100199974(0, v18[2]);
      v20 = v108;
    }
    else
    {
      v20 = sub_100196A60(0, v18[3] >> 1);
      swift_bridgeObjectRelease(v18);
    }
    v27 = type metadata accessor for AllMetricsViewModel();
    v29 = sub_1001998B4(&qword_1002B51D8, v28, (uint64_t (*)(uint64_t))type metadata accessor for AllMetricsViewModel, (uint64_t)&unk_100242998);
    v95 = v27;
    v94 = v29;
    v30 = ObservableObject<>.objectWillChange.getter(v27, v29);
    ObservableObjectPublisher.send()();
    swift_release(v30);
    v31 = *(_QWORD *)(a5 + 48);
    *(_QWORD *)(a5 + 48) = v20;
    swift_bridgeObjectRelease(v31);
    v93 = *(_QWORD *)(v17 + 16);
    if (v93)
    {
      v32 = 0;
      v92 = v17 + 32;
      v90 = a5;
      v89 = v17;
      while (v32 < *(_QWORD *)(v17 + 16))
      {
        v33 = (uint64_t *)(v92 + 24 * v32);
        v34 = v33[1];
        v98 = *v33;
        v99 = v34;
        v35 = v33[2];
        v36 = *(_QWORD *)(v35 + 16);
        if (v36)
        {
          v97 = v32;
          v108 = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain_n(v34, 2);
          swift_bridgeObjectRetain(v35);
          sub_100195A6C(0, v36, 0);
          v37 = *(unsigned __int8 *)(v91 + 80);
          v96 = v35;
          v38 = v35 + ((v37 + 32) & ~v37);
          *(_QWORD *)&v103 = *(_QWORD *)(v91 + 72);
          do
          {
            sub_10017417C(v38, (uint64_t)v11, type metadata accessor for MetricList);
            v40 = *v11;
            v39 = v11[1];
            v41 = v101;
            v42 = v102;
            v43 = (char *)v11 + *(int *)(v102 + 20);
            v44 = (char *)v15 + *(int *)(v101 + 20);
            v45 = type metadata accessor for Date(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v44, v43, v45);
            v46 = *(int *)((char *)v11 + *(int *)(v42 + 24));
            *v15 = v40;
            v15[1] = v39;
            *(_QWORD *)((char *)v15 + *(int *)(v41 + 24)) = v46;
            swift_bridgeObjectRetain(v39);
            sub_1001998F4((uint64_t)v11);
            v47 = v108;
            if ((swift_isUniquelyReferenced_nonNull_native(v108) & 1) == 0)
            {
              sub_100195A6C(0, v47[2] + 1, 1);
              v47 = v108;
            }
            v49 = v47[2];
            v48 = v47[3];
            if (v49 >= v48 >> 1)
            {
              sub_100195A6C(v48 > 1, v49 + 1, 1);
              v47 = v108;
            }
            v47[2] = v49 + 1;
            sub_100199930((uint64_t)v15, (uint64_t)v47+ ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))+ *(_QWORD *)(v100 + 72) * v49);
            v38 += v103;
            --v36;
          }
          while (v36);
          swift_bridgeObjectRelease(v96);
          swift_bridgeObjectRelease(v99);
          a5 = v90;
          v17 = v89;
          v32 = v97;
        }
        else
        {
          swift_bridgeObjectRetain(v34);
          v47 = _swiftEmptyArrayStorage;
        }
        v50 = *(_QWORD **)(a5 + 48);
        v51 = swift_bridgeObjectRetain(v50);
        if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
          v50 = sub_1001C747C(0, v50[2] + 1, 1, v50);
        v53 = v50[2];
        v52 = v50[3];
        if (v53 >= v52 >> 1)
          v50 = sub_1001C747C((_QWORD *)(v52 > 1), v53 + 1, 1, v50);
        ++v32;
        v50[2] = v53 + 1;
        v54 = &v50[3 * v53];
        v55 = v99;
        v54[4] = v98;
        v54[5] = v55;
        v54[6] = v47;
        v56 = ObservableObject<>.objectWillChange.getter(v95, v94);
        ObservableObjectPublisher.send()();
        swift_release(v56);
        v57 = *(_QWORD *)(a5 + 48);
        *(_QWORD *)(a5 + 48) = v50;
        swift_bridgeObjectRelease(v57);
        if (v32 == v93)
          goto LABEL_26;
      }
      __break(1u);
    }
    else
    {
LABEL_26:
      v58 = swift_bridgeObjectRelease(v17);
      if (qword_1002B3A78 == -1)
      {
LABEL_27:
        if ((*(_BYTE *)(qword_1002BF068 + 26) & 1) != 0)
        {
          if (qword_1002B3A08 != -1)
            v58 = swift_once(&qword_1002B3A08, sub_1001747BC);
          v62 = qword_1002BEFF8;
          v63 = static os_log_type_t.default.getter(v58, v59, v60, v61);
          v64 = sub_100146438((uint64_t *)&unk_1002B57E0);
          v65 = swift_allocObject(v64, 72, 7);
          *(_OWORD *)(v65 + 16) = xmmword_1002402A0;
          v66 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16);
          *(_QWORD *)(v65 + 56) = &type metadata for Int;
          *(_QWORD *)(v65 + 64) = &protocol witness table for Int;
          *(_QWORD *)(v65 + 32) = v66;
          os_log(_:dso:log:type:_:)("AllMetricsViewModel - fetchAvailableMetricsList metricsList.count : %{public}d ", 79, 2, &_mh_execute_header, v62, v63, v65, v87);
          swift_bridgeObjectRelease(v65);
        }
        else
        {
          if (qword_1002B3A08 != -1)
            v58 = swift_once(&qword_1002B3A08, sub_1001747BC);
          v67 = qword_1002BEFF8;
          v68 = static os_log_type_t.default.getter(v58, v59, v60, v61);
          os_log(_:dso:log:type:_:)("AllMetricsViewModel - fetchAvailableMetricsList", 47, 2, &_mh_execute_header, v67, v68, _swiftEmptyArrayStorage, v87);
        }
        sub_100195090(*(_QWORD *)(*(_QWORD *)(a5 + 48) + 16), 0);
        v69 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16) > 1uLL;
        return v88(v69);
      }
    }
    v58 = swift_once(&qword_1002B3A78, sub_100183CA4);
    goto LABEL_27;
  }
  if (qword_1002B3A08 != -1)
    v13 = swift_once(&qword_1002B3A08, sub_1001747BC);
  v21 = qword_1002BEFF8;
  v22 = static os_log_type_t.error.getter(v13);
  v23 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v24 = swift_allocObject(v23, 72, 7);
  v103 = xmmword_1002402A0;
  *(_OWORD *)(v24 + 16) = xmmword_1002402A0;
  if (a2)
  {
    swift_getErrorValue(a2, v105, v104);
    v25 = Error.localizedDescription.getter(v104[1], v104[2]);
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v108 = (_QWORD *)v25;
  v109 = v26;
  v70 = sub_100146438((uint64_t *)&unk_1002B5640);
  v71 = String.init<A>(describing:)(&v108, v70);
  v73 = v72;
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  v74 = sub_10016B1E0();
  *(_QWORD *)(v24 + 64) = v74;
  *(_QWORD *)(v24 + 32) = v71;
  *(_QWORD *)(v24 + 40) = v73;
  os_log(_:dso:log:type:_:)("error occurred  ---> %{public}s", 31, 2, &_mh_execute_header, v21, v22, v24, v87);
  v75 = swift_bridgeObjectRelease(v24);
  v76 = qword_1002BEFF8;
  v80 = static os_log_type_t.default.getter(v75, v77, v78, v79);
  v81 = swift_allocObject(v23, 72, 7);
  *(_OWORD *)(v81 + 16) = v103;
  if (a2)
  {
    swift_getErrorValue(a2, v107, v106);
    v82 = Error.localizedDescription.getter(v106[1], v106[2]);
  }
  else
  {
    v82 = 0;
    v83 = 0;
  }
  v108 = (_QWORD *)v82;
  v109 = v83;
  v84 = String.init<A>(describing:)(&v108, v70);
  *(_QWORD *)(v81 + 56) = &type metadata for String;
  *(_QWORD *)(v81 + 64) = v74;
  *(_QWORD *)(v81 + 32) = v84;
  *(_QWORD *)(v81 + 40) = v85;
  os_log(_:dso:log:type:_:)("AllMetricsViewModel - fetchAvailableMetricsList error: %{public}s ", 66, 2, &_mh_execute_header, v76, v80, v81);
  swift_bridgeObjectRelease(v81);
  v69 = 0;
  return v88(v69);
}

uint64_t sub_100194CE0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if ((result & 1) != 0)
  {
    if (qword_1002B3A08 != -1)
      result = swift_once(&qword_1002B3A08, sub_1001747BC);
    v4 = qword_1002BEFF8;
    v5 = static os_log_type_t.default.getter(result, a2, a3, a4);
    return os_log(_:dso:log:type:_:)("AllMetricsViewModel - processNewMetric isCompleted", 50, 2, &_mh_execute_header, v4, v5, _swiftEmptyArrayStorage);
  }
  return result;
}

double sub_100194D5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  char v22[24];

  v2 = sub_100146438(&qword_1002B5660);
  v3 = swift_allocObject(v2, 96, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100242010;
  *(_QWORD *)(v3 + 56) = &type metadata for String;
  *(_QWORD *)(v3 + 32) = 0xD000000000000018;
  *(_QWORD *)(v3 + 40) = 0x8000000100213E00;
  *(_QWORD *)(v3 + 88) = &type metadata for Int32;
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a1 <= 0x7FFFFFFF)
  {
    v4 = v3;
    *(_DWORD *)(v3 + 64) = a1;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease(v4);
    if (qword_1002B3A80 == -1)
      goto LABEL_4;
    goto LABEL_12;
  }
  __break(1u);
LABEL_12:
  swift_once(&qword_1002B3A80, sub_100184F00);
LABEL_4:
  *(_QWORD *)(qword_1002BF070 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_currentSelectedSubsId) = a1;
  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  v5 = qword_1002BF068;
  *(_DWORD *)(qword_1002BF068 + 148) = a1;
  *(_BYTE *)(v5 + 152) = 0;
  sub_100183E88();
  swift_beginAccess(v5 + 80, v22, 0, 0);
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(v5 + 80);
  if (*(_QWORD *)(v6 + 16) <= (unint64_t)a1)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 + 88 * a1;
  v8 = *(_QWORD *)(v7 + 40);
  v9 = *(_QWORD *)(v5 + 72);
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(v7 + 32);
  *(_QWORD *)(v5 + 72) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = qword_1002B39F8;
  v11 = (id)qword_1002BF070;
  v5 = (uint64_t)v11;
  if (v10 != -1)
LABEL_15:
    v11 = (id)swift_once(&qword_1002B39F8, sub_100174778);
  v15 = qword_1002BEFE8;
  v16 = static os_log_type_t.default.getter(v11, v12, v13, v14);
  os_log(_:dso:log:type:_:)("All items cleared", 17, 2, &_mh_execute_header, v15, v16, _swiftEmptyArrayStorage);
  v17 = sub_1001BE42C((uint64_t)_swiftEmptyArrayStorage);
  v18 = (unint64_t *)(v5 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricDetailsClassObject);
  swift_beginAccess(v5 + OBJC_IVAR____TtC13FTMInternal_425FTMCellMonitorSharedClass_metricDetailsClassObject, &v21, 1, 0);
  v19 = *v18;
  *v18 = v17;

  swift_bridgeObjectRelease(v19);
  return sub_1001941E8((uint64_t)nullsub_1, 0);
}

uint64_t type metadata accessor for AllMetricsViewModel()
{
  return objc_opt_self(_TtC13FTMInternal_419AllMetricsViewModel);
}

uint64_t sub_100195090(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  v14 = swift_allocObject(&unk_100265620, 33, 7);
  *(_QWORD *)(v14 + 16) = v2;
  *(_QWORD *)(v14 + 24) = a1;
  *(_BYTE *)(v14 + 32) = a2 & 1;
  aBlock[4] = sub_100199DF0;
  v25 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_100265638;
  v15 = _Block_copy(aBlock);
  v16 = v25;
  swift_retain(v3);
  swift_release(v16);
  static DispatchQoS.unspecified.getter(v17);
  aBlock[0] = _swiftEmptyArrayStorage;
  v18 = sub_1001998B4((unint64_t *)&qword_1002B6530, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v20 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v6, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v22);
}

uint64_t destroy for AllMetricsDataSource(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s13FTMInternal_420AllMetricsDataSourceVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for AllMetricsDataSource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for AllMetricsDataSource(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for AllMetricsDataSource(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AllMetricsDataSource(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AllMetricsDataSource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AllMetricsDataSource()
{
  return &type metadata for AllMetricsDataSource;
}

void sub_100195470(uint64_t a1, uint64_t a2, char a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  if ((*(_BYTE *)(qword_1002BF068 + 145) & 1) != 0)
  {
    v6 = 1;
LABEL_10:
    v7 = type metadata accessor for AllMetricsViewModel();
    v9 = sub_1001998B4(&qword_1002B51D8, v8, (uint64_t (*)(uint64_t))type metadata accessor for AllMetricsViewModel, (uint64_t)&unk_100242998);
    v10 = ObservableObject<>.objectWillChange.getter(v7, v9);
    ObservableObjectPublisher.send()();
    swift_release(v10);
    *(_BYTE *)(a1 + 56) = v6;
    return;
  }
  if (*(uint64_t *)(qword_1002BF068 + 160) < 1)
  {
    v6 = 2;
    goto LABEL_10;
  }
  if ((a3 & 1) == 0 && a2 >= 1)
  {
    v6 = 0;
    goto LABEL_10;
  }
}

uint64_t sub_100195548@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for AllMetricsViewModel();
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

Swift::Int sub_100195580(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_100198928(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_100196EA8(v5);
  *a1 = v2;
  return result;
}

_QWORD *sub_1001955E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100146438(&qword_1002B57D0);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_100197FC4((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100199AE8(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001956CC(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_100146438((uint64_t *)&unk_1002B42B0);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_1001E07EC((unint64_t)(v4 + 4), v2, v1);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001957C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100146438(&qword_1002B6728);
  v4 = (_QWORD *)swift_allocObject(v3, 24 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 24);
  v6 = sub_1001981C0((uint64_t)&v9, v4 + 4, v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_100199AE8(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001958B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_100146438(&qword_1002B6828);
  v4 = *(_QWORD *)(sub_100146438(&qword_1002B4AA0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = *(unsigned __int8 *)(*(_QWORD *)(sub_100146438(&qword_1002B4AA0) - 8) + 80);
      v12 = sub_100198624(&v14, (uint64_t)v8 + ((v11 + 32) & ~v11), v1, a1);
      v13 = v14;
      swift_bridgeObjectRetain(a1);
      sub_100199AE8(v13);
      if (v12 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001959EC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100195B9C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100195A08(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001967F8(a1, a2, a3, (_QWORD *)*v3, &qword_1002B6830, type metadata accessor for STransferMetrics);
  *v3 = result;
  return result;
}

uint64_t sub_100195A34(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100195CE8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100195A50(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100195E50(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100195A6C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001967F8(a1, a2, a3, (_QWORD *)*v3, &qword_1002B6708, type metadata accessor for AllMetricsRowItem);
  *v3 = result;
  return result;
}

uint64_t sub_100195A98(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100196618(a1, a2, a3, (_QWORD *)*v3, &qword_1002B6818, &qword_1002B6820);
  *v3 = result;
  return result;
}

uint64_t sub_100195AC4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100196178(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100195AE0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10019631C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100195AFC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001967F8(a1, a2, a3, (_QWORD *)*v3, &qword_1002B6758, type metadata accessor for Metric);
  *v3 = result;
  return result;
}

uint64_t sub_100195B28(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001964A4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100195B44(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100196618(a1, a2, a3, (_QWORD *)*v3, &qword_1002B6738, &qword_1002B6740);
  *v3 = result;
  return result;
}

uint64_t sub_100195B70(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001967F8(a1, a2, a3, (_QWORD *)*v3, &qword_1002B6748, type metadata accessor for DashboardViewModelObject);
  *v3 = result;
  return result;
}

uint64_t sub_100195B9C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100146438(&qword_1002B61E8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100195CE8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100146438(&qword_1002B57D0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100195E50(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100146438(&qword_1002B6778);
    v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[88 * v8])
      memmove(v13, v14, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[88 * v8] || v13 >= &v14[88 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100195FD4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100146438(&qword_1002B6728);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_100146438(&qword_1002B6720);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100196178(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100146438(&qword_1002B6770);
    v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 48 * v8)
      memmove(v11 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 48 * v8 || v13 >= v14 + 48 * v8)
  {
    sub_100146438(&qword_1002B5698);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10019631C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100146438(&qword_1002B6768);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100146438((uint64_t *)&unk_1002B5640);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001964A4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100146438(&qword_1002B6750);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 40 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100196618(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100146438(a5);
  v14 = *(_QWORD *)(sub_100146438(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(sub_100146438(a6) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23, v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001967F8(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100146438(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23, v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_QWORD *sub_1001969D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100146438(&qword_1002B6778);
  v5 = (_QWORD *)swift_allocObject(v4, 88 * v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * ((uint64_t)(v6 - 32) / 88);
  return v5;
}

_QWORD *sub_100196A60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100146438(&qword_1002B6710);
  v5 = (_QWORD *)swift_allocObject(v4, 24 * v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * ((uint64_t)(v6 - 32) / 24);
  return v5;
}

_QWORD *sub_100196AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v5 = (_QWORD *)swift_allocObject(v4, 8 * v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 25;
  v5[2] = a1;
  v5[3] = (2 * (v7 >> 3)) | 1;
  return v5;
}

char *sub_100196B5C(uint64_t a1, int64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  char *result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v3);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1001C7224(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  v14 = (uint64_t)&v5[11 * a1 + 4];
  result = (char *)swift_arrayDestroy(v14, v8, &type metadata for CarrierInfoObject);
  if (!v9)
    goto LABEL_20;
  v16 = v5[2];
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_26;
  if ((v18 & 0x8000000000000000) == 0)
  {
    result = (char *)(v14 + 88);
    v19 = (char *)&v5[11 * a2 + 4];
    if ((char *)(v14 + 88) != v19 || result >= &v19[88 * v18])
      result = (char *)memmove(result, v19, 88 * v18);
    v20 = v5[2];
    v17 = __OFADD__(v20, v9);
    v21 = v20 + v9;
    if (!v17)
    {
      v5[2] = v21;
LABEL_20:
      v22 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v14 + 48) = v22;
      *(_OWORD *)(v14 + 64) = *(_OWORD *)(a3 + 64);
      *(_QWORD *)(v14 + 80) = *(_QWORD *)(a3 + 80);
      v23 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v14 = *(_OWORD *)a3;
      *(_OWORD *)(v14 + 16) = v23;
      *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v24 = 2;
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v24, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100196D00(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;
  int64_t v8;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *result;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v7 = *(_QWORD **)v5;
  v8 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  if (v8 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v11 = 1 - v10;
  if (__OFSUB__(1, v10))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v12 = v8 + v11;
  if (__OFADD__(v8, v11))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v7);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v12 > v7[3] >> 1)
  {
    if (v8 <= v12)
      v16 = v8 + v11;
    else
      v16 = v8;
    v7 = sub_1001C7468(isUniquelyReferenced_nonNull_native, v16, 1, v7);
  }
  v17 = v7 + 4;
  v18 = &v7[3 * a1 + 4];
  v19 = sub_100146438(&qword_1002B6720);
  result = (char *)swift_arrayDestroy(v18, v10, v19);
  if (!v11)
    goto LABEL_20;
  v21 = v7[2];
  v22 = __OFSUB__(v21, a2);
  v23 = v21 - a2;
  if (v22)
    goto LABEL_26;
  if ((v23 & 0x8000000000000000) == 0)
  {
    result = (char *)(v18 + 3);
    v24 = (char *)&v17[3 * a2];
    if (v18 + 3 != (_QWORD *)v24 || result >= &v24[24 * v23])
      result = (char *)memmove(result, v24, 24 * v23);
    v25 = v7[2];
    v22 = __OFADD__(v25, v11);
    v26 = v25 + v11;
    if (!v22)
    {
      v7[2] = v26;
LABEL_20:
      *v18 = a3;
      v18[1] = a4;
      v17[3 * a1 + 2] = a5;
      *(_QWORD *)v5 = v7;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

Swift::Int sub_100196EA8(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v21;
  Swift::Int v22;
  uint64_t *v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  _QWORD *v111;
  Swift::Int v112;
  Swift::Int v113;
  uint64_t v114;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return sub_1001975CC(0, v3, 1, a1);
      return result;
    }
    goto LABEL_154;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_162:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v112 = result;
  v109 = a1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_120:
      v101 = v12;
      v111 = v9;
      if (v13 < 2)
        goto LABEL_117;
      v102 = *v109;
      while (1)
      {
        v103 = v13 - 2;
        if (v13 < 2)
          goto LABEL_149;
        if (!v102)
          goto LABEL_161;
        v100 = v101;
        v104 = *(_QWORD *)&v101[16 * v103 + 32];
        v105 = *(_QWORD *)&v101[16 * v13 + 24];
        sub_1001976B0((char *)(v102 + 24 * v104), (char *)(v102 + 24 * *(_QWORD *)&v101[16 * v13 + 16]), v102 + 24 * v105, __dst);
        if (v1)
          goto LABEL_116;
        if (v105 < v104)
          goto LABEL_150;
        if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
          v100 = sub_100197EBC((uint64_t)v100);
        if (v103 >= *((_QWORD *)v100 + 2))
          goto LABEL_151;
        v106 = &v100[16 * v103 + 32];
        *(_QWORD *)v106 = v104;
        *((_QWORD *)v106 + 1) = v105;
        v107 = *((_QWORD *)v100 + 2);
        if (v13 > v107)
          goto LABEL_152;
        memmove(&v100[16 * v13 + 16], &v100[16 * v13 + 32], 16 * (v107 - v13));
        v101 = v100;
        *((_QWORD *)v100 + 2) = v107 - 1;
        v13 = v107 - 1;
        if (v107 <= 2)
          goto LABEL_117;
      }
    }
    v111 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_100146438(&qword_1002B6720);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)(v8 + 16) = v6;
    v111 = (_QWORD *)v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v110 = *a1 + 8;
  v108 = *a1 - 24;
  v12 = (char *)_swiftEmptyArrayStorage;
  v113 = v3;
  v114 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 >= v3)
      goto LABEL_46;
    v15 = (uint64_t *)(v11 + 24 * v10);
    v16 = *v15;
    v17 = v15[1];
    v18 = (_QWORD *)(v11 + 24 * v14);
    v19 = v18[1];
    if (v16 == *v18 && v17 == v19)
    {
      v22 = v14 + 2;
      if (v14 + 2 >= v3)
        goto LABEL_45;
      v21 = 0;
    }
    else
    {
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, *v18, v19, 1);
      v22 = v14 + 2;
      if (v14 + 2 >= v3)
        goto LABEL_36;
    }
    v23 = (uint64_t *)(v110 + 24 * v22);
    do
    {
      v25 = *(v23 - 1);
      v26 = *v23;
      v27 = (_QWORD *)(v11 + 24 * v10);
      v28 = v27[1];
      if (v25 == *v27 && v26 == v28)
      {
        if ((v21 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v21 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, *v27, v28, 1)) & 1) != 0)
      {
        goto LABEL_36;
      }
      v23 += 3;
      v24 = v22 + 1;
      v10 = v22;
      v22 = v24;
    }
    while (v24 < v3);
    v22 = v24;
LABEL_36:
    v10 = v22;
    if ((v21 & 1) != 0)
    {
LABEL_37:
      if (v22 < v14)
        goto LABEL_157;
      if (v14 < v22)
      {
        v30 = 24 * v22;
        v31 = 24 * v14;
        v32 = v22;
        v33 = v14;
        do
        {
          if (v33 != --v32)
          {
            if (!v11)
              goto LABEL_160;
            v34 = v11 + v31;
            v35 = v11 + v30;
            v36 = *(_QWORD *)(v11 + v31);
            v37 = *(_OWORD *)(v11 + v31 + 8);
            v38 = *(_OWORD *)(v11 + v30 - 24);
            *(_QWORD *)(v34 + 16) = *(_QWORD *)(v11 + v30 - 8);
            *(_OWORD *)v34 = v38;
            *(_QWORD *)(v35 - 24) = v36;
            *(_OWORD *)(v35 - 16) = v37;
          }
          ++v33;
          v30 -= 24;
          v31 += 24;
        }
        while (v33 < v32);
      }
LABEL_45:
      v10 = v22;
    }
LABEL_46:
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14))
        goto LABEL_153;
      if (v10 - v14 < v112)
      {
        if (__OFADD__(v14, v112))
          goto LABEL_155;
        if (v14 + v112 >= v3)
          v39 = v3;
        else
          v39 = v14 + v112;
        if (v39 < v14)
          goto LABEL_156;
        if (v10 != v39)
        {
          v40 = v108 + 24 * v10;
          do
          {
            v41 = (uint64_t *)(v11 + 24 * v10);
            v42 = *v41;
            v43 = v41[1];
            v44 = v14;
            v45 = v40;
            do
            {
              v46 = *(_QWORD *)(v45 + 8);
              v47 = v42 == *(_QWORD *)v45 && v43 == v46;
              if (v47 || (_stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, *(_QWORD *)v45, v46, 1) & 1) == 0)
                break;
              if (!v11)
                goto LABEL_158;
              v48 = *(_OWORD *)(v45 + 32);
              v49 = *(_QWORD *)(v45 + 16);
              v42 = *(_QWORD *)(v45 + 24);
              *(_OWORD *)(v45 + 24) = *(_OWORD *)v45;
              *(_QWORD *)(v45 + 40) = v49;
              *(_QWORD *)v45 = v42;
              *(_OWORD *)(v45 + 8) = v48;
              v43 = v48;
              v45 -= 24;
              ++v44;
            }
            while (v10 != v44);
            ++v10;
            v40 += 24;
          }
          while (v10 != v39);
          v10 = v39;
        }
      }
    }
    if (v10 < v14)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_100197984(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v51 = *((_QWORD *)v12 + 2);
    v50 = *((_QWORD *)v12 + 3);
    v13 = v51 + 1;
    if (v51 >= v50 >> 1)
      v12 = sub_100197984((char *)(v50 > 1), v51 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v13;
    v52 = v12 + 32;
    v53 = &v12[16 * v51 + 32];
    *(_QWORD *)v53 = v14;
    *((_QWORD *)v53 + 1) = v10;
    if (v51)
      break;
    v13 = 1;
    v11 = v114;
LABEL_15:
    v3 = v113;
    if (v10 >= v113)
    {
      v9 = v111;
      goto LABEL_120;
    }
  }
  v11 = v114;
  while (1)
  {
    v54 = v13 - 1;
    if (v13 >= 4)
    {
      v59 = &v52[16 * v13];
      v60 = *((_QWORD *)v59 - 8);
      v61 = *((_QWORD *)v59 - 7);
      v65 = __OFSUB__(v61, v60);
      v62 = v61 - v60;
      if (v65)
        goto LABEL_137;
      v64 = *((_QWORD *)v59 - 6);
      v63 = *((_QWORD *)v59 - 5);
      v65 = __OFSUB__(v63, v64);
      v57 = v63 - v64;
      v58 = v65;
      if (v65)
        goto LABEL_138;
      v66 = v13 - 2;
      v67 = &v52[16 * v13 - 32];
      v69 = *(_QWORD *)v67;
      v68 = *((_QWORD *)v67 + 1);
      v65 = __OFSUB__(v68, v69);
      v70 = v68 - v69;
      if (v65)
        goto LABEL_140;
      v65 = __OFADD__(v57, v70);
      v71 = v57 + v70;
      if (v65)
        goto LABEL_143;
      if (v71 >= v62)
      {
        v89 = &v52[16 * v54];
        v91 = *(_QWORD *)v89;
        v90 = *((_QWORD *)v89 + 1);
        v65 = __OFSUB__(v90, v91);
        v92 = v90 - v91;
        if (v65)
          goto LABEL_147;
        v82 = v57 < v92;
        goto LABEL_105;
      }
    }
    else
    {
      if (v13 != 3)
      {
        v83 = *((_QWORD *)v12 + 4);
        v84 = *((_QWORD *)v12 + 5);
        v65 = __OFSUB__(v84, v83);
        v76 = v84 - v83;
        v77 = v65;
        goto LABEL_99;
      }
      v56 = *((_QWORD *)v12 + 4);
      v55 = *((_QWORD *)v12 + 5);
      v65 = __OFSUB__(v55, v56);
      v57 = v55 - v56;
      v58 = v65;
    }
    if ((v58 & 1) != 0)
      goto LABEL_139;
    v66 = v13 - 2;
    v72 = &v52[16 * v13 - 32];
    v74 = *(_QWORD *)v72;
    v73 = *((_QWORD *)v72 + 1);
    v75 = __OFSUB__(v73, v74);
    v76 = v73 - v74;
    v77 = v75;
    if (v75)
      goto LABEL_142;
    v78 = &v52[16 * v54];
    v80 = *(_QWORD *)v78;
    v79 = *((_QWORD *)v78 + 1);
    v65 = __OFSUB__(v79, v80);
    v81 = v79 - v80;
    if (v65)
      goto LABEL_145;
    if (__OFADD__(v76, v81))
      goto LABEL_146;
    if (v76 + v81 >= v57)
    {
      v82 = v57 < v81;
LABEL_105:
      if (v82)
        v54 = v66;
      goto LABEL_107;
    }
LABEL_99:
    if ((v77 & 1) != 0)
      goto LABEL_141;
    v85 = &v52[16 * v54];
    v87 = *(_QWORD *)v85;
    v86 = *((_QWORD *)v85 + 1);
    v65 = __OFSUB__(v86, v87);
    v88 = v86 - v87;
    if (v65)
      goto LABEL_144;
    if (v88 < v76)
      goto LABEL_15;
LABEL_107:
    v93 = v54 - 1;
    if (v54 - 1 >= v13)
    {
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    if (!v11)
      goto LABEL_159;
    v94 = v11;
    v95 = &v52[16 * v93];
    v96 = *(_QWORD *)v95;
    v97 = &v52[16 * v54];
    v98 = *((_QWORD *)v97 + 1);
    sub_1001976B0((char *)(v94 + 24 * *(_QWORD *)v95), (char *)(v94 + 24 * *(_QWORD *)v97), v94 + 24 * v98, __dst);
    if (v1)
      break;
    if (v98 < v96)
      goto LABEL_134;
    if (v54 > *((_QWORD *)v12 + 2))
      goto LABEL_135;
    *(_QWORD *)v95 = v96;
    *(_QWORD *)&v52[16 * v93 + 8] = v98;
    v99 = *((_QWORD *)v12 + 2);
    if (v54 >= v99)
      goto LABEL_136;
    v13 = v99 - 1;
    memmove(&v52[16 * v54], v97 + 16, 16 * (v99 - 1 - v54));
    *((_QWORD *)v12 + 2) = v99 - 1;
    v82 = v99 > 2;
    v11 = v114;
    if (!v82)
      goto LABEL_15;
  }
  v100 = v12;
LABEL_116:
  v101 = v100;
LABEL_117:
  swift_bridgeObjectRelease(v101);
  v111[2] = 0;
  return swift_bridgeObjectRelease(v111);
}

uint64_t sub_1001975CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 24 * a3 - 24;
LABEL_5:
    v9 = (uint64_t *)(v7 + 24 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = v8;
    while (1)
    {
      v13 = *(_QWORD *)(v12 + 8);
      v14 = result == *(_QWORD *)v12 && v10 == v13;
      if (v14
        || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, *(_QWORD *)v12, v13, 1),
            (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 24;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v15 = *(_OWORD *)(v12 + 32);
      v16 = *(_QWORD *)(v12 + 16);
      result = *(_QWORD *)(v12 + 24);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)v12;
      *(_QWORD *)(v12 + 40) = v16;
      *(_QWORD *)v12 = result;
      *(_OWORD *)(v12 + 8) = v15;
      v10 = v15;
      v12 -= 24;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001976B0(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  __int128 v28;
  __int128 v29;
  uint64_t result;
  char *v31;
  char *v32;
  char *v33;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v33 = __src;
  v32 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v19 = &v4[24 * v11];
      v31 = v19;
      v33 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v20 = a3 - 24;
        v21 = v6;
        while (1)
        {
          v22 = (char *)(v20 + 24);
          v23 = *((_QWORD *)v19 - 3);
          v24 = *((_QWORD *)v19 - 2);
          v25 = *((_QWORD *)v21 - 3);
          v26 = *((_QWORD *)v21 - 2);
          v21 -= 24;
          v27 = v23 == v25 && v24 == v26;
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 1) & 1) == 0)
          {
            v31 = v19 - 24;
            if (v22 < v19 || v20 >= (unint64_t)v19 || v22 != v19)
            {
              v29 = *(_OWORD *)(v19 - 24);
              *(_QWORD *)(v20 + 16) = *((_QWORD *)v19 - 1);
              *(_OWORD *)v20 = v29;
            }
            v21 = v6;
            v19 -= 24;
            if (v6 <= v7)
              goto LABEL_46;
          }
          else
          {
            if (v22 != v6 || v20 >= (unint64_t)v6)
            {
              v28 = *(_OWORD *)v21;
              *(_QWORD *)(v20 + 16) = *((_QWORD *)v21 + 2);
              *(_OWORD *)v20 = v28;
            }
            v33 = v21;
            if (v21 <= v7)
              goto LABEL_46;
          }
          v20 -= 24;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_46;
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[24 * v9];
    v31 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        v13 = *((_QWORD *)v6 + 1);
        v14 = *((_QWORD *)v4 + 1);
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && v13 == v14;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v13, *(_QWORD *)v4, v14, 1) & 1) == 0)
        {
          if (v7 != v4)
          {
            v18 = *(_OWORD *)v4;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v4 + 2);
            *(_OWORD *)v7 = v18;
          }
          v4 += 24;
          v32 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 24;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
          {
            v17 = *(_OWORD *)v6;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v6 + 2);
            *(_OWORD *)v7 = v17;
          }
        }
        v7 += 24;
        if (v4 >= v12)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v33 = v7;
    }
LABEL_46:
    sub_100197BCC((void **)&v33, (const void **)&v32, &v31);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100197984(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100146438(&qword_1002B6730);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100197A7C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_100197B24(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_100197BCC(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

uint64_t sub_100197C88(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100197CA0(a1, a2, a3, type metadata accessor for MetricSectional);
}

uint64_t sub_100197C94(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_100197CA0(a1, a2, a3, type metadata accessor for Metric);
}

uint64_t sub_100197CA0(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = a4(0);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack(v4, v5);
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront(v4, v5);
  return result;
}

uint64_t sub_100197DAC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = sub_100146438(&qword_1002B4AA0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3, v4);
  return result;
}

char *sub_100197EBC(uint64_t a1)
{
  return sub_100197984(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100197ED0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

_QWORD *sub_100197F38(_QWORD *a1)
{
  return sub_1001C7224(0, a1[2], 0, a1);
}

_QWORD *sub_100197F4C(_QWORD *a1)
{
  return sub_1001C734C(0, a1[2], 0, a1);
}

_QWORD *sub_100197F60(_QWORD *a1)
{
  return sub_1001C7468(0, a1[2], 0, a1);
}

_QWORD *sub_100197F74(_QWORD *a1)
{
  return sub_1001C76E4(0, a1[2], 0, a1);
}

uint64_t sub_100197F88(unint64_t a1)
{
  return sub_1001C7914(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_100197F9C(unint64_t a1)
{
  return sub_1001C7104(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_100197FB0(unint64_t a1)
{
  return sub_1001C7928(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_100197FC4(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001981C0(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v23 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      goto LABEL_38;
    }
    v11 += 3;
    swift_bridgeObjectRetain(v21);
    result = swift_bridgeObjectRetain(v22);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v23;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_1001983D8(_QWORD *result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v12 = 0;
LABEL_37:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v12;
  }
  if (!a3)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
    goto LABEL_39;
  v10 = a2;
  v23 = -1 << *(_BYTE *)(a4 + 32);
  v24 = result;
  v11 = 0;
  v12 = 0;
  v25 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    v18 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    sub_10017E2BC(*(_QWORD *)(a4 + 56) + 32 * v14, (uint64_t)&v27);
    *(_QWORD *)&v26 = v20;
    *((_QWORD *)&v26 + 1) = v19;
    v22 = v27;
    v21 = v28;
    v30 = v27;
    v31 = v28;
    v29 = v26;
    *v10 = v26;
    v10[1] = v22;
    v10[2] = v21;
    if (v12 == a3)
    {
      swift_bridgeObjectRetain(v19);
      v12 = a3;
      goto LABEL_36;
    }
    v10 += 3;
    result = (_QWORD *)swift_bridgeObjectRetain(v19);
    if (v8)
      goto LABEL_8;
LABEL_9:
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v15 >= v25)
      goto LABEL_35;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    if (!v16)
    {
      v17 = v11 + 2;
      ++v11;
      if (v15 + 1 >= v25)
        goto LABEL_35;
      v16 = *(_QWORD *)(v5 + 8 * v17);
      if (v16)
        goto LABEL_14;
      v11 = v15 + 1;
      if (v15 + 2 >= v25)
        goto LABEL_35;
      v16 = *(_QWORD *)(v5 + 8 * (v15 + 2));
      if (v16)
      {
        v15 += 2;
      }
      else
      {
        v11 = v15 + 2;
        if (v15 + 3 >= v25)
          goto LABEL_35;
        v16 = *(_QWORD *)(v5 + 8 * (v15 + 3));
        if (!v16)
        {
          v17 = v15 + 4;
          v11 = v15 + 3;
          if (v15 + 4 < v25)
          {
            v16 = *(_QWORD *)(v5 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                v15 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_40;
                if (v15 >= v25)
                {
                  v11 = v25 - 1;
                  goto LABEL_35;
                }
                v16 = *(_QWORD *)(v5 + 8 * v15);
                ++v17;
                if (v16)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v15 = v17;
            goto LABEL_21;
          }
LABEL_35:
          v8 = 0;
LABEL_36:
          v6 = v23;
          result = v24;
          goto LABEL_37;
        }
        v15 += 3;
      }
    }
LABEL_21:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100198624(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v8 = sub_100146438(&qword_1002B4AA0);
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (int64_t *)((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = __chkstk_darwin(v9);
  v14 = (char *)&v30 - v13;
  v15 = *(_QWORD *)(a4 + 64);
  v34 = a4 + 64;
  v16 = -1 << *(_BYTE *)(a4 + 32);
  if (-v16 < 64)
    v17 = ~(-1 << -(char)v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  if (!a2)
  {
    v19 = 0;
    a3 = 0;
LABEL_38:
    v29 = v34;
    *a1 = a4;
    a1[1] = v29;
    a1[2] = ~v16;
    a1[3] = v19;
    a1[4] = v18;
    return a3;
  }
  if (!a3)
  {
    v19 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v31 = -1 << *(_BYTE *)(a4 + 32);
  v32 = a1;
  v19 = 0;
  v20 = 0;
  v33 = (unint64_t)(63 - v16) >> 6;
  v30 = v33 - 1;
  v35 = a3;
  if (!v18)
    goto LABEL_9;
LABEL_8:
  v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  v22 = v21 | (v19 << 6);
  while (1)
  {
    ++v20;
    v26 = *(_QWORD *)(a4 + 56);
    v27 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v22);
    v28 = type metadata accessor for STransferMetrics(0);
    sub_10017417C(v26 + *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72) * v22, (uint64_t)v11 + *(int *)(v37 + 48), type metadata accessor for STransferMetrics);
    *v11 = v27;
    sub_10019A29C((uint64_t)v11, (uint64_t)v14);
    result = sub_10019A29C((uint64_t)v14, a2);
    a3 = v35;
    if (v20 == v35)
      goto LABEL_37;
    a2 += *(_QWORD *)(v36 + 72);
    if (v18)
      goto LABEL_8;
LABEL_9:
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v23 >= v33)
      goto LABEL_32;
    v24 = *(_QWORD *)(v34 + 8 * v23);
    if (!v24)
      break;
LABEL_18:
    v18 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v23 << 6);
    v19 = v23;
  }
  v19 += 2;
  if (v23 + 1 >= v33)
  {
    v18 = 0;
    v19 = v23;
    goto LABEL_36;
  }
  v24 = *(_QWORD *)(v34 + 8 * v19);
  if (v24)
    goto LABEL_14;
  v25 = v23 + 2;
  if (v23 + 2 >= v33)
    goto LABEL_32;
  v24 = *(_QWORD *)(v34 + 8 * v25);
  if (v24)
    goto LABEL_17;
  v19 = v23 + 3;
  if (v23 + 3 >= v33)
  {
    v18 = 0;
    v19 = v23 + 2;
    goto LABEL_36;
  }
  v24 = *(_QWORD *)(v34 + 8 * v19);
  if (v24)
  {
LABEL_14:
    v23 = v19;
    goto LABEL_18;
  }
  v25 = v23 + 4;
  if (v23 + 4 >= v33)
  {
LABEL_32:
    v18 = 0;
LABEL_36:
    a3 = v20;
LABEL_37:
    v16 = v31;
    a1 = v32;
    goto LABEL_38;
  }
  v24 = *(_QWORD *)(v34 + 8 * v25);
  if (v24)
  {
LABEL_17:
    v23 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v23 >= v33)
    {
      v18 = 0;
      v19 = v30;
      goto LABEL_36;
    }
    v24 = *(_QWORD *)(v34 + 8 * v23);
    ++v25;
    if (v24)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100198900(uint64_t a1)
{
  return sub_100195CE8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100198914(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_100198928(_QWORD *a1)
{
  return sub_100195FD4(0, a1[2], 0, a1);
}

uint64_t sub_10019893C(_QWORD *a1)
{
  return sub_100196618(0, a1[2], 0, a1, &qword_1002B6828, &qword_1002B4AA0);
}

uint64_t sub_100198970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v26 = v5;
  else
    v26 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v5 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v5))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v5;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v28 = v7;
    else
      v28 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v12 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v7);
    v7 = *v3;
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v27 = v7;
  else
    v27 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v7;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v7);
  v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v7);
  v14 = *v3;
  *v3 = v13;
  swift_bridgeObjectRelease(v14);
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = v11 + 32;
  v16 = (char *)(v11 + 32 + 8 * v4);
  v17 = type metadata accessor for FTMAllMetricsModel(0);
  v18 = (void *)swift_arrayDestroy(v16, v5, v17);
  if (!v6)
    return specialized Array._endMutation()(v18);
  v19 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    v21 = v20 - v2;
    if (!__OFSUB__(v20, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v19 < 0)
    v29 = *v3;
  else
    v29 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v3);
  v30 = _CocoaArrayWrapper.endIndex.getter(v29);
  v18 = (void *)swift_bridgeObjectRelease(v19);
  v21 = v30 - v2;
  if (__OFSUB__(v30, v2))
    goto LABEL_52;
LABEL_21:
  if ((v21 & 0x8000000000000000) == 0)
  {
    v22 = (char *)(v15 + 8 * v2);
    if (v4 != v2 || v16 >= &v22[8 * v21])
      v18 = memmove(v16, v22, 8 * v21);
    v2 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v23 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      v24 = v23 + v6;
      if (!__OFADD__(v23, v6))
      {
LABEL_27:
        *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v24;
        return specialized Array._endMutation()(v18);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v2 < 0)
      v31 = v2;
    else
      v31 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    v18 = (void *)swift_bridgeObjectRelease(v2);
    v24 = v32 + v6;
    if (!__OFADD__(v32, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  v33 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v33, 1046, 0);
  __break(1u);
  return result;
}

void *sub_100198C68(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1001C7224(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[11 * a1 + 4], v7, &type metadata for CarrierInfoObject);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[11 * a2 + 4];
    if (a1 != a2 || &v4[11 * a1 + 4] >= (_QWORD *)&v16[88 * v15])
      result = memmove(&v4[11 * a1 + 4], v16, 88 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100198DDC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void **aBlock;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  void *v54;
  void *v55;
  uint64_t v56;

  v2 = v1;
  v50 = a1;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v48 = *(_QWORD *)(v3 - 8);
  v49 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v14);
  v17 = sub_10016AC60();
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  *(_QWORD *)(v2 + 24) = v17;
  *(_QWORD *)(v2 + 32) = v19;
  *(_BYTE *)(v2 + 40) = 1;
  *(_QWORD *)(v2 + 48) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  swift_unknownObjectWeakInit(v2 + 64, 0);
  sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  static DispatchQoS.background.getter();
  aBlock = (void **)_swiftEmptyArrayStorage;
  v20 = sub_1001998B4(&qword_1002B5E80, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v21 = sub_100146438(&qword_1002B5E88);
  v22 = sub_10018A668((unint64_t *)&unk_1002B5E90, &qword_1002B5E88);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v21, v22, v6, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v49);
  *(_QWORD *)(v2 + 80) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x7274654D64616F6CLL, 0xEF65756575516369, v11, v8, v5, 0);
  v23 = v50;
  *(_QWORD *)(v2 + 16) = v50;
  v24 = (void *)objc_opt_self(NSNotificationCenter);
  v25 = v23;
  v26 = objc_msgSend(v24, "defaultCenter");
  if (qword_1002B3A48 != -1)
    swift_once(&qword_1002B3A48, sub_100175234);
  v27 = static NSNotificationName.subsIdSelectionChange;
  v55 = sub_1001993B4;
  v56 = v2;
  aBlock = _NSConcreteStackBlock;
  v52 = 1107296256;
  v53 = sub_1001BC218;
  v54 = &unk_1002654D0;
  v28 = _Block_copy(&aBlock);
  v29 = v56;
  swift_retain(v2);
  v30 = objc_msgSend(v26, "addObserverForName:object:queue:usingBlock:", v27, 0, 0, v28, swift_release(v29).n128_f64[0]);
  _Block_release(v28);
  swift_unknownObjectRelease(v30);

  v31 = objc_msgSend(v24, "defaultCenter");
  if (qword_1002B3A30 != -1)
    swift_once(&qword_1002B3A30, sub_100175074);
  v32 = static NSNotificationName.NewABMMetric;
  v55 = sub_1001993D4;
  v56 = v2;
  aBlock = _NSConcreteStackBlock;
  v52 = 1107296256;
  v53 = sub_1001BC218;
  v54 = &unk_1002654F8;
  v33 = _Block_copy(&aBlock);
  v34 = v56;
  swift_retain(v2);
  v35 = objc_msgSend(v31, "addObserverForName:object:queue:usingBlock:", v32, 0, 0, v33, swift_release(v34).n128_f64[0]);
  _Block_release(v33);
  swift_unknownObjectRelease(v35);

  v36 = objc_msgSend(v24, "defaultCenter");
  if (qword_1002B3A38 != -1)
    swift_once(&qword_1002B3A38, sub_100175108);
  v37 = static NSNotificationName.NewCTMetric;
  v55 = sub_1001993D4;
  v56 = v2;
  aBlock = _NSConcreteStackBlock;
  v52 = 1107296256;
  v53 = sub_1001BC218;
  v54 = &unk_100265520;
  v38 = _Block_copy(&aBlock);
  v39 = v56;
  swift_retain(v2);
  v40 = objc_msgSend(v36, "addObserverForName:object:queue:usingBlock:", v37, 0, 0, v38, swift_release(v39).n128_f64[0]);
  _Block_release(v38);
  swift_unknownObjectRelease(v40);

  v41 = objc_msgSend(v24, "defaultCenter");
  if (qword_1002B3A60 != -1)
    swift_once(&qword_1002B3A60, sub_1001753E4);
  v42 = static NSNotificationName.isAirPlaneModeEnabled;
  v55 = sub_1001993EC;
  v56 = v2;
  aBlock = _NSConcreteStackBlock;
  v52 = 1107296256;
  v53 = sub_1001BC218;
  v54 = &unk_100265548;
  v43 = _Block_copy(&aBlock);
  v44 = v56;
  swift_retain(v2);
  v45 = objc_msgSend(v41, "addObserverForName:object:queue:usingBlock:", v42, 0, 0, v43, swift_release(v44).n128_f64[0]);
  _Block_release(v43);
  swift_unknownObjectRelease(v45);

  sub_1001941E8((uint64_t)nullsub_1, 0);
  return v2;
}

double sub_1001993B4(uint64_t a1)
{
  uint64_t v1;

  return sub_100193CA0(a1, v1);
}

uint64_t sub_1001993BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1001993CC(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

double sub_1001993D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100193F38(a1, v4, a3, a4);
}

uint64_t sub_1001993EC()
{
  uint64_t v0;

  return sub_100195090(*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16), 0);
}

double sub_100199400()
{
  uint64_t v0;

  return sub_100194480(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100199410()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 44, 7);
}

uint64_t sub_10019943C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10019455C(a1, a2, *(uint64_t (**)(_BOOL8))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_DWORD *)(v2 + 40));
}

uint64_t sub_10019944C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for AllMetricsRowItem(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B67D8;
  if (!qword_1002B67D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AllMetricsRowItem);
  return result;
}

void sub_1001994AC(uint64_t a1, int a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;

  LODWORD(v2) = a2;
  v44 = type metadata accessor for Date(0);
  v42 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = swift_bridgeObjectRetain(a1);
  v6 = sub_1001957C0(v5);
  swift_bridgeObjectRelease(a1);
  v45 = v6;
  sub_100195580(&v45);
  v7 = v45[2];
  if (v7)
  {
    v41 = v2;
    v8 = v45 + 4;
    v2 = 0;
    v40 = swift_retain(v45);
    v9 = (_QWORD *)v40;
    while (1)
    {
      v10 = &v8[3 * v2];
      v11 = v10[1];
      v12 = *v10 == 5521746 && v11 == 0xE300000000000000;
      if (v12
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, 5521746, 0xE300000000000000, 0) & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
          v9 = sub_100197F60(v9);
        v13 = v9[2];
        if (v2 >= v13)
        {
          __break(1u);
          goto LABEL_21;
        }
        v14 = v13 - 1;
        v15 = v13 - 1 - v2;
        if (v15 < 0)
        {
          v38 = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
          __break(1u);
          swift_release(v38);
          __break(1u);
          return;
        }
        v16 = &v9[3 * v2];
        v18 = v16[5];
        v17 = v16[6];
        memmove(v16 + 4, v16 + 7, 24 * v15);
        v9[2] = v14;
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v18);
        v45 = v9;
      }
      if (++v2 == v7)
      {
        swift_release(v40);
        LODWORD(v2) = v41;
        break;
      }
    }
  }
  if (qword_1002B3A78 != -1)
LABEL_21:
    swift_once(&qword_1002B3A78, sub_100183CA4);
  v19 = *(unsigned __int8 *)(qword_1002BF068 + 26);
  v20 = sub_100146438(&qword_1002B6718);
  v21 = type metadata accessor for MetricList(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_QWORD *)(v22 + 72);
  v24 = *(unsigned __int8 *)(v22 + 80);
  v25 = (v24 + 32) & ~v24;
  if (v19 == 1)
  {
    v26 = 2 * v23;
    v27 = swift_allocObject(v20, v25 + 3 * v23, v24 | 7);
    *(_OWORD *)(v27 + 16) = xmmword_100242000;
    v28 = (char *)(v27 + v25);
    v29 = v43;
    Date.init()(v27);
    *(_QWORD *)v28 = 0xD000000000000011;
    *((_QWORD *)v28 + 1) = 0x8000000100210AE0;
    v30 = *(uint64_t (**)(char *, char *, uint64_t))(v42 + 32);
    v31 = v44;
    v32 = v30(&v28[*(int *)(v21 + 20)], v29, v44);
    v33 = (int *)(v21 + 24);
    *(_DWORD *)&v28[*(int *)(v21 + 24)] = v2;
    v34 = &v28[v23];
    Date.init()(v32);
    strcpy(v34, "Active Bands");
    v34[13] = 0;
    *((_WORD *)v34 + 7) = -5120;
    v35 = v30(&v34[*(int *)(v21 + 20)], v29, v31);
    *(_DWORD *)&v34[*(int *)(v21 + 24)] = v2;
    v36 = &v28[v26];
    Date.init()(v35);
    *(_QWORD *)v36 = 0x6574726F70707553;
    *((_QWORD *)v36 + 1) = 0xEF73646E61422064;
    v30(&v28[v26 + *(int *)(v21 + 20)], v29, v31);
  }
  else
  {
    v27 = swift_allocObject(v20, v25 + v23, v24 | 7);
    *(_OWORD *)(v27 + 16) = xmmword_1002402A0;
    v36 = (char *)(v27 + v25);
    v37 = v43;
    Date.init()(v27);
    *(_QWORD *)v36 = 0xD000000000000011;
    *((_QWORD *)v36 + 1) = 0x8000000100210AE0;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v36[*(int *)(v21 + 20)], v37, v44);
    v33 = (int *)(v21 + 24);
  }
  *(_DWORD *)&v36[*v33] = v2;
  sub_100196D00(0, 0, 5521746, 0xE300000000000000, v27);
}

uint64_t sub_1001998B4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001998F4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MetricList(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100199930(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AllMetricsRowItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_100199974(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1001C747C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[3 * a1 + 4], v7, &type metadata for AllMetricsDataSource);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[3 * a2 + 4];
    if (a1 != a2 || &v4[3 * a1 + 4] >= (_QWORD *)&v16[24 * v15])
      result = memmove(&v4[3 * a1 + 4], v16, 24 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

double sub_100199AE8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL).n128_u64[0];
  return result;
}

uint64_t sub_100199AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = sub_1001548C8(0, (unint64_t *)&qword_1002B7F90, CellularLoggingFileInformation_ptr);
  v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  v14 = (void *)swift_bridgeObjectRelease(v5);
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    v14 = (void *)swift_bridgeObjectRelease(v5);
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100199DCC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 33, 7);
}

void sub_100199DF0()
{
  uint64_t v0;

  sub_100195470(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t *sub_100199E00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_100199EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100199F00(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_100199F8C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_10019A01C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_10019A094(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10019A114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10019A120);
}

uint64_t sub_10019A120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10019A19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019A1A8);
}

uint64_t sub_10019A1A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10019A21C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1002429E8;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10019A29C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100146438(&qword_1002B4AA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10019A31C()
{
  unint64_t result;

  result = qword_1002B6838;
  if (!qword_1002B6838)
  {
    result = swift_getWitnessTable(&unk_100242A58, &type metadata for SPApplicationSubCategories);
    atomic_store(result, (unint64_t *)&qword_1002B6838);
  }
  return result;
}

BOOL sub_10019A360(char *a1, char *a2)
{
  return qword_100242B78[*a1] == qword_100242B78[*a2];
}

Swift::Int sub_10019A384()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(qword_100242B78[v1]);
  return Hasher._finalize()();
}

void sub_10019A3D0()
{
  char *v0;

  Hasher._combine(_:)(qword_100242B78[*v0]);
}

Swift::Int sub_10019A404(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_100242B78[v2]);
  return Hasher._finalize()();
}

uint64_t sub_10019A44C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10019A8A0(*a1);
  *a2 = result;
  return result;
}

void sub_10019A474(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100242B78[*v1];
}

void sub_10019A48C(_QWORD *a1@<X8>)
{
  *a1 = &off_1002621D8;
}

uint64_t sub_10019A49C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10019A4D8 + 4 * byte_100242A00[a1]))(0x47206E6F69746341, 0xEC00000073656D61);
}

uint64_t sub_10019A4D8()
{
  return 0x7275746E65766441;
}

uint64_t sub_10019A4FC()
{
  return 0x4720656461637241;
}

uint64_t sub_10019A510()
{
  return 0x6147206472616F42;
}

uint64_t sub_10019A5AC()
{
  return 0x4720656C7A7A7550;
}

uint64_t sub_10019A5C0()
{
  return 0x4720676E69636152;
}

void sub_10019A5D4()
{
  JUMPOUT(0x10019A5E8);
}

unint64_t sub_10019A5F4()
{
  return 0xD000000000000010;
}

uint64_t sub_10019A610()
{
  return 0x47207374726F7053;
}

uint64_t sub_10019A624()
{
  return 0x7967657461727453;
}

uint64_t sub_10019A648()
{
  return 0x4720616976697254;
}

void sub_10019A65C()
{
  JUMPOUT(0x10019A674);
}

uint64_t sub_10019A680()
{
  return 0x6E776F6E6B6E55;
}

uint64_t sub_10019A698()
{
  unsigned __int8 *v0;

  return sub_10019A49C(*v0);
}

void sub_10019A6A0(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

unint64_t sub_10019A6B0()
{
  unint64_t result;

  result = qword_1002B6840;
  if (!qword_1002B6840)
  {
    result = swift_getWitnessTable(&unk_100242A98, &type metadata for SPApplicationSubCategories);
    atomic_store(result, (unint64_t *)&qword_1002B6840);
  }
  return result;
}

unint64_t sub_10019A6F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B6848;
  if (!qword_1002B6848)
  {
    v1 = sub_1001464C4((uint64_t *)&unk_1002B6850);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B6848);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SPApplicationSubCategories(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SPApplicationSubCategories(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_10019A820 + 4 * byte_100242A19[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_10019A854 + 4 * byte_100242A14[v4]))();
}

uint64_t sub_10019A854(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019A85C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10019A864);
  return result;
}

uint64_t sub_10019A870(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019A878);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_10019A87C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019A884(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SPApplicationSubCategories()
{
  return &type metadata for SPApplicationSubCategories;
}

uint64_t sub_10019A8A0(uint64_t a1)
{
  if ((unint64_t)(a1 - 7001) >= 0x13)
    return 19;
  else
    return a1 - 7001;
}

uint64_t sub_10019A8B8(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t result;
  int64_t v12;
  int v13;
  int v14;
  char v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;

  v4 = v3;
  v25 = a1;
  v26 = a2;
  v6 = sub_100146438(&qword_1002B6820);
  v24 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (!v9)
    return (uint64_t)v10;
  v29 = _swiftEmptyArrayStorage;
  sub_100195A98(0, v9, 0);
  v10 = v29;
  result = sub_1001A0DC8(a3);
  v12 = result;
  v14 = v13;
  v16 = v15 & 1;
  v22 = a3;
  v23 = a3 + 56;
  while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(_BYTE *)(a3 + 32))
  {
    if (((*(_QWORD *)(v23 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(a3 + 36) != v14)
      goto LABEL_16;
    v28 = *(_BYTE *)(*(_QWORD *)(a3 + 48) + v12);
    v25(&v28);
    if (v4)
    {
      swift_release(v10);
      return (uint64_t)v10;
    }
    v27 = 0;
    v29 = v10;
    v18 = v10[2];
    v17 = v10[3];
    if (v18 >= v17 >> 1)
    {
      sub_100195A98(v17 > 1, v18 + 1, 1);
      v10 = v29;
    }
    v10[2] = v18 + 1;
    sub_1001A1BDC((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v18);
    a3 = v22;
    result = sub_1001A0E68(v12, v14, v16 & 1, v22);
    v12 = result;
    v14 = v19;
    v16 = v20 & 1;
    --v9;
    v4 = v27;
    if (!v9)
    {
      sub_1001A1C44(result, v19, v20 & 1);
      return (uint64_t)v10;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_10019AABC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100242D38);
  v2 = swift_getKeyPath(&unk_100242D60);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10019AB2C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100242D80);
  v2 = swift_getKeyPath(&unk_100242DA8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10019ACB8()
{
  return type metadata accessor for SURLSessionRunningViewModel(0);
}

uint64_t type metadata accessor for SURLSessionRunningViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B68C8;
  if (!qword_1002B68C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SURLSessionRunningViewModel);
  return result;
}

void sub_10019ACFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v6[0] = "\b";
  sub_10019ADC4(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10019AE18();
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_100242CD8;
      v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[5] = "\b";
      v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_updateClassMetadata2(a1, 256, 9, v6, a1 + 80);
    }
  }
}

void sub_10019ADC4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002B68D8)
  {
    v2 = type metadata accessor for STransferMetricsStore(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002B68D8);
  }
}

void sub_10019AE18()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1002B68E0)
  {
    v0 = type metadata accessor for Published(0, &type metadata for SLoadableViewState);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1002B68E0);
  }
}

uint64_t sub_10019AE6C()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  objc_msgSend(v2, "setIdleTimerDisabled:", 1);

  if (qword_1002B3A98 != -1)
    swift_once(&qword_1002B3A98, sub_100190468);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10018DBC8(v3, (uint64_t)qword_1002BF090);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v13 = v8;
    *(_DWORD *)v7 = 136315138;
    v12 = sub_10018FCE8(0x7261657070416E6FLL, 0xEA00000000002928, (uint64_t *)&v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

  KeyPath = swift_getKeyPath(&unk_100242D80);
  v10 = swift_getKeyPath(&unk_100242DA8);
  v13 = xmmword_100242C30;
  return static Published.subscript.setter(&v13, v1, KeyPath, v10);
}

uint64_t sub_10019B05C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  id v19;
  void *v20;
  uint64_t v21;

  v1 = v0;
  if (qword_1002B3A98 != -1)
    swift_once(&qword_1002B3A98, sub_100190468);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10018DBC8(v2, (uint64_t)qword_1002BF090);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "onDisappear(): invoked", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  objc_msgSend(v7, "setIdleTimerDisabled:", 0);

  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_runningTasks);
  if (!((unint64_t)v8 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v8);
    if (v9)
      goto LABEL_7;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_31;
    goto LABEL_23;
  }
  if (v8 < 0)
    v16 = v8;
  else
    v16 = v8 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v8);
  result = _CocoaArrayWrapper.endIndex.getter(v16);
  v9 = result;
  if (!result)
    goto LABEL_22;
LABEL_7:
  if (v9 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  for (i = 0; i != v9; ++i)
  {
    if ((v8 & 0xC000000000000001) != 0)
      v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v8);
    else
      v14 = *(id *)(v8 + 8 * i + 32);
    v15 = v14;
    if (objc_msgSend(v14, "state"))
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v12 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v15);
      specialized ContiguousArray._endMutation()(v13);
    }
  }
  swift_bridgeObjectRelease(v8);
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_31;
LABEL_23:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    v17 = _swiftEmptyArrayStorage[2];
    result = swift_retain(_swiftEmptyArrayStorage);
    if (!v17)
      return swift_release_n(_swiftEmptyArrayStorage, 2);
    goto LABEL_25;
  }
LABEL_31:
  v21 = swift_retain(_swiftEmptyArrayStorage);
  result = _CocoaArrayWrapper.endIndex.getter(v21);
  v17 = result;
  if (!result)
    return swift_release_n(_swiftEmptyArrayStorage, 2);
LABEL_25:
  if (v17 >= 1)
  {
    for (j = 0; j != v17; ++j)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, _swiftEmptyArrayStorage);
      else
        v19 = (id)_swiftEmptyArrayStorage[j + 4];
      v20 = v19;
      objc_msgSend(v19, "cancel");

    }
    return swift_release_n(_swiftEmptyArrayStorage, 2);
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10019B31C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1[10] = v0;
  v2 = sub_100146438(&qword_1002B6820);
  v1[11] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[12] = v3;
  v1[13] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100146438(&qword_1002B6970);
  v1[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100146438(&qword_1002B6978);
  v1[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[16] = v6;
  v1[17] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v1[18] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[19] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v1[20] = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[21] = swift_task_alloc(v10);
  v1[22] = swift_task_alloc(v10);
  v11 = type metadata accessor for MainActor(0);
  v1[23] = static MainActor.shared.getter();
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  v1[24] = v12;
  v1[25] = v13;
  return swift_task_switch(sub_10019B440, v12, v13);
}

uint64_t sub_10019B440()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = v0[22];
  v2 = (void *)v0[10];
  KeyPath = swift_getKeyPath(&unk_100242D80);
  v4 = swift_getKeyPath(&unk_100242DA8);
  v0[2] = 0xD000000000000015;
  v0[3] = 0x8000000100214060;
  static Published.subscript.setter(v0 + 2, v2, KeyPath, v4);
  sub_10019C278(v1);
  v5 = v0[10];
  v6 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration;
  v0[26] = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration;
  v7 = v5 + v6;
  v8 = *(unsigned __int8 *)(v7 + 48);
  v9 = *(_BYTE *)(v7 + 49);
  if (v8 != 1)
  {
    if ((v9 & 1) == 0)
    {
      v10 = 0;
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if ((v9 & 1) == 0)
  {
LABEL_5:
    v10 = 1;
    goto LABEL_7;
  }
  v10 = 2;
LABEL_7:
  v11 = v0[21];
  v12 = v0[19];
  v28 = v0[22];
  v29 = v0[20];
  v13 = v0[17];
  v14 = v0[18];
  v30 = v0[15];
  v31 = v0[16];
  v0[8] = *(_QWORD *)(v5 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_subject);
  v15 = sub_100146438(&qword_1002B6958);
  v16 = sub_10014BEC0(&qword_1002B6980, &qword_1002B6958, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Publisher.collect(_:)(v10, v15, v16);
  v17 = swift_allocObject(&unk_100265838, 24, 7);
  swift_unknownObjectUnownedInit(v17 + 16, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v28, v14);
  v18 = *(unsigned __int8 *)(v12 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = (v29 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_100265A40, v20 + 8, v18 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v21 + v19, v11, v14);
  *(_QWORD *)(v21 + v20) = v17;
  v22 = sub_10014BEC0(&qword_1002B6988, &qword_1002B6978, (uint64_t)&protocol conformance descriptor for Publishers.CollectByCount<A>);
  v23 = Publisher<>.sink(receiveValue:)(sub_1001A1BD8, v21, v30, v22);
  v24 = swift_release(v21);
  (*(void (**)(uint64_t, uint64_t, __n128))(v31 + 8))(v13, v30, v24);
  v25 = *(_QWORD *)(v5 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_cancellable);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_cancellable) = v23;
  swift_release(v25);
  v26 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  v0[27] = v26;
  *v26 = v0;
  v26[1] = sub_10019B730;
  return static Task<>.sleep(nanoseconds:)(2000000000);
}

uint64_t sub_10019B730()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = *(_QWORD *)(v2 + 192);
    v5 = *(_QWORD *)(v2 + 200);
    v6 = sub_10019BD08;
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 192);
    v5 = *(_QWORD *)(v2 + 200);
    v6 = sub_10019B79C;
  }
  return swift_task_switch(v6, v4, v5);
}

void sub_10019B79C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  void *object;
  _QWORD *v10;
  unint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t j;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(void);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 184));
  v59 = (uint64_t)_swiftEmptyArrayStorage;
  v4 = *(double *)(v3 + v2 + 40);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
    goto LABEL_48;
  if (v4 <= -9.22337204e18)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v51 = (uint64_t)v4;
  if ((uint64_t)v4 >= 1)
  {
    v5 = *(_QWORD *)(v0 + 96);
    v57 = *(_QWORD *)(v0 + 88);
    v52 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_runningTasks;
    v53 = *(_QWORD *)(v0 + 80);
    v6 = 1;
    while (1)
    {
      v7 = *(void **)(v0 + 80);
      v60 = 0;
      v61 = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease(v61);
      v60 = (_QWORD *)0xD000000000000013;
      v61 = 0x8000000100214080;
      *(_QWORD *)(v0 + 72) = v6;
      v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v8._object;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(object);
      v10 = v60;
      v11 = v61;
      KeyPath = swift_getKeyPath(&unk_100242D80);
      v13 = swift_getKeyPath(&unk_100242DA8);
      *(_QWORD *)(v0 + 32) = v10;
      *(_QWORD *)(v0 + 40) = v11;
      static Published.subscript.setter(v0 + 32, v7, KeyPath, v13);
      v14 = sub_10019C5B4();
      if (v1)
        goto LABEL_43;
      v15 = v14;
      v55 = v6;
      v62 = 1;
      v60 = _swiftEmptyArrayStorage;
      v16 = *(_QWORD *)(v14 + 16);
      if (v16)
      {
        v17 = v14 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
        swift_bridgeObjectRetain(v14);
        v18 = *(_QWORD *)(v5 + 72);
        while (1)
        {
          v19 = *(_QWORD *)(v0 + 112);
          v20 = *(_QWORD *)(v0 + 88);
          sub_10014BD9C(v17, v19, &qword_1002B6820);
          v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
          v21(v19, 0, 1, v20);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v19, 1, v20) == 1)
            break;
          v22 = *(_QWORD *)(v0 + 176);
          v23 = *(_QWORD *)(v0 + 104);
          v24 = *(_QWORD *)(v0 + 80);
          sub_1001A1BDC(*(_QWORD *)(v0 + 112), v23);
          v25 = sub_10019CA70(v23, v23 + *(int *)(v57 + 48), v24, &v59, v22, &v62);
          sub_10014BDE0(v23, &qword_1002B6820);
          sub_1001DA8A4((uint64_t)v25);
          v17 += v18;
          if (!--v16)
            goto LABEL_13;
        }
      }
      else
      {
        swift_bridgeObjectRetain(v14);
        v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
LABEL_13:
        v21(*(_QWORD *)(v0 + 112), 1, 1, *(_QWORD *)(v0 + 88));
      }
      swift_bridgeObjectRelease_n(v15, 2);
      v26 = (uint64_t)v60;
      v27 = *(_QWORD *)(v53 + v52);
      *(_QWORD *)(v53 + v52) = v60;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRelease(v27);
      if ((unint64_t)v26 >> 62)
      {
        if (v26 < 0)
          v37 = v26;
        else
          v37 = v26 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v26);
        v28 = _CocoaArrayWrapper.endIndex.getter(v37);
      }
      else
      {
        v28 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v26);
      }
      if (v28)
      {
        if (v28 < 1)
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        for (i = 0; i != v28; ++i)
        {
          if ((v26 & 0xC000000000000001) != 0)
            v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v26);
          else
            v30 = *(id *)(v26 + 8 * i + 32);
          v31 = v30;
          objc_msgSend(v30, "resume", v51);

        }
      }
      swift_bridgeObjectRelease_n(v26, 2);
      v32 = v59;
      if ((unint64_t)v59 >> 62)
      {
        if (v59 < 0)
          v38 = v59;
        else
          v38 = v59 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v59);
        v33 = _CocoaArrayWrapper.endIndex.getter(v38);
        if (!v33)
          goto LABEL_39;
      }
      else
      {
        v33 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v59);
        if (!v33)
          goto LABEL_39;
      }
      if (v33 < 1)
        goto LABEL_47;
      for (j = 0; j != v33; ++j)
      {
        if ((v32 & 0xC000000000000001) != 0)
          v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v32);
        else
          v35 = *(id *)(v32 + 8 * j + 32);
        v36 = v35;
        objc_msgSend(v35, "finishTasksAndInvalidate", v51);

      }
LABEL_39:
      swift_bridgeObjectRelease(v32);
      if (v55 == v51)
      {
        v45 = *(_QWORD *)(v0 + 168);
        v44 = *(_QWORD *)(v0 + 176);
        v46 = *(_QWORD *)(v0 + 144);
        v47 = *(_QWORD *)(v0 + 152);
        v54 = *(_QWORD *)(v0 + 136);
        v56 = *(_QWORD *)(v0 + 112);
        v58 = *(_QWORD *)(v0 + 104);
        v48 = *(void **)(v0 + 80);
        v49 = swift_getKeyPath(&unk_100242D80);
        v50 = swift_getKeyPath(&unk_100242DA8);
        *(_OWORD *)(v0 + 48) = xmmword_100242C40;
        static Published.subscript.setter(v0 + 48, v48, v49, v50);
        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v44, v46);
        swift_bridgeObjectRelease(v32);
        swift_task_dealloc(v44);
        swift_task_dealloc(v45);
        swift_task_dealloc(v54);
        swift_task_dealloc(v56);
        swift_task_dealloc(v58);
        v43 = *(void (**)(void))(v0 + 8);
        goto LABEL_45;
      }
      v1 = 0;
      v6 = v55 + 1;
      if (__OFADD__(v55, 1))
      {
        __break(1u);
LABEL_43:
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 144));
        swift_bridgeObjectRelease(v59);
        v39 = *(_QWORD *)(v0 + 168);
        v40 = *(_QWORD *)(v0 + 136);
        v42 = *(_QWORD *)(v0 + 104);
        v41 = *(_QWORD *)(v0 + 112);
        swift_task_dealloc(*(_QWORD *)(v0 + 176));
        swift_task_dealloc(v39);
        swift_task_dealloc(v40);
        swift_task_dealloc(v41);
        swift_task_dealloc(v42);
        v43 = *(void (**)(void))(v0 + 8);
LABEL_45:
        v43();
        return;
      }
    }
  }
LABEL_51:
  __break(1u);
}

void sub_10019BD08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  void *object;
  _QWORD *v9;
  unint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t j;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(void);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 184));
  v60 = (uint64_t)_swiftEmptyArrayStorage;
  v3 = *(double *)(v2 + v1 + 40);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
    goto LABEL_46;
  if (v3 <= -9.22337204e18)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v52 = (uint64_t)v3;
  if ((uint64_t)v3 >= 1)
  {
    v4 = *(_QWORD *)(v0 + 96);
    v58 = *(_QWORD *)(v0 + 88);
    v53 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_runningTasks;
    v54 = *(_QWORD *)(v0 + 80);
    v5 = 1;
    while (1)
    {
      v6 = *(void **)(v0 + 80);
      v61 = 0;
      v62 = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease(v62);
      v61 = (_QWORD *)0xD000000000000013;
      v62 = 0x8000000100214080;
      *(_QWORD *)(v0 + 72) = v5;
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v7._object;
      String.append(_:)(v7);
      swift_bridgeObjectRelease(object);
      v9 = v61;
      v10 = v62;
      KeyPath = swift_getKeyPath(&unk_100242D80);
      v12 = swift_getKeyPath(&unk_100242DA8);
      *(_QWORD *)(v0 + 32) = v9;
      *(_QWORD *)(v0 + 40) = v10;
      static Published.subscript.setter(v0 + 32, v6, KeyPath, v12);
      v13 = sub_10019C5B4();
      v14 = v13;
      v56 = v5;
      v63 = 1;
      v61 = _swiftEmptyArrayStorage;
      v15 = *(_QWORD *)(v13 + 16);
      if (v15)
      {
        v16 = v13 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
        swift_bridgeObjectRetain(v13);
        v17 = *(_QWORD *)(v4 + 72);
        while (1)
        {
          v18 = *(_QWORD *)(v0 + 112);
          v19 = *(_QWORD *)(v0 + 88);
          sub_10014BD9C(v16, v18, &qword_1002B6820);
          v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
          v20(v18, 0, 1, v19);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v18, 1, v19) == 1)
            break;
          v21 = *(_QWORD *)(v0 + 176);
          v22 = *(_QWORD *)(v0 + 104);
          v23 = *(_QWORD *)(v0 + 80);
          sub_1001A1BDC(*(_QWORD *)(v0 + 112), v22);
          v24 = sub_10019CA70(v22, v22 + *(int *)(v58 + 48), v23, &v60, v21, &v63);
          sub_10014BDE0(v22, &qword_1002B6820);
          sub_1001DA8A4((uint64_t)v24);
          v16 += v17;
          if (!--v15)
            goto LABEL_12;
        }
      }
      else
      {
        swift_bridgeObjectRetain(v13);
        v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_12:
        v20(*(_QWORD *)(v0 + 112), 1, 1, *(_QWORD *)(v0 + 88));
      }
      swift_bridgeObjectRelease_n(v14, 2);
      v25 = (uint64_t)v61;
      v26 = *(_QWORD *)(v54 + v53);
      *(_QWORD *)(v54 + v53) = v61;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v26);
      if ((unint64_t)v25 >> 62)
      {
        if (v25 < 0)
          v37 = v25;
        else
          v37 = v25 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v25);
        v27 = _CocoaArrayWrapper.endIndex.getter(v37);
      }
      else
      {
        v27 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v25);
      }
      if (v27)
      {
        if (v27 < 1)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        for (i = 0; i != v27; ++i)
        {
          if ((v25 & 0xC000000000000001) != 0)
            v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v25);
          else
            v29 = *(id *)(v25 + 8 * i + 32);
          v30 = v29;
          objc_msgSend(v29, "resume", v52);

        }
      }
      swift_bridgeObjectRelease_n(v25, 2);
      v31 = v60;
      if ((unint64_t)v60 >> 62)
      {
        if (v60 < 0)
          v38 = v60;
        else
          v38 = v60 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v60);
        v32 = _CocoaArrayWrapper.endIndex.getter(v38);
        v33 = v56;
        if (!v32)
          goto LABEL_38;
      }
      else
      {
        v32 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v60);
        v33 = v56;
        if (!v32)
          goto LABEL_38;
      }
      if (v32 < 1)
        goto LABEL_45;
      for (j = 0; j != v32; ++j)
      {
        if ((v31 & 0xC000000000000001) != 0)
          v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v31);
        else
          v35 = *(id *)(v31 + 8 * j + 32);
        v36 = v35;
        objc_msgSend(v35, "finishTasksAndInvalidate", v52);

      }
LABEL_38:
      swift_bridgeObjectRelease(v31);
      if (v33 == v52)
      {
        v46 = *(_QWORD *)(v0 + 168);
        v45 = *(_QWORD *)(v0 + 176);
        v47 = *(_QWORD *)(v0 + 144);
        v48 = *(_QWORD *)(v0 + 152);
        v55 = *(_QWORD *)(v0 + 136);
        v57 = *(_QWORD *)(v0 + 112);
        v59 = *(_QWORD *)(v0 + 104);
        v49 = *(void **)(v0 + 80);
        v50 = swift_getKeyPath(&unk_100242D80);
        v51 = swift_getKeyPath(&unk_100242DA8);
        *(_OWORD *)(v0 + 48) = xmmword_100242C40;
        static Published.subscript.setter(v0 + 48, v49, v50, v51);
        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v45, v47);
        swift_bridgeObjectRelease(v31);
        swift_task_dealloc(v45);
        swift_task_dealloc(v46);
        swift_task_dealloc(v55);
        swift_task_dealloc(v57);
        swift_task_dealloc(v59);
        v44 = *(void (**)(void))(v0 + 8);
        goto LABEL_43;
      }
      v39 = __OFADD__(v33, 1);
      v5 = v33 + 1;
      if (v39)
      {
        __break(1u);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 144));
        swift_bridgeObjectRelease(v60);
        v40 = *(_QWORD *)(v0 + 168);
        v41 = *(_QWORD *)(v0 + 136);
        v43 = *(_QWORD *)(v0 + 104);
        v42 = *(_QWORD *)(v0 + 112);
        swift_task_dealloc(*(_QWORD *)(v0 + 176));
        swift_task_dealloc(v40);
        swift_task_dealloc(v41);
        swift_task_dealloc(v42);
        swift_task_dealloc(v43);
        v44 = *(void (**)(void))(v0 + 8);
LABEL_43:
        v44();
        return;
      }
    }
  }
LABEL_49:
  __break(1u);
}

void sub_10019C278(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  Swift::String v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = type metadata accessor for URL(0);
  v37 = *(_QWORD *)(v3 - 8);
  v38 = v3;
  __chkstk_darwin(v3);
  v35 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_dataGenerator;
  v36 = v1;
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_dataGenerator);
  v11 = swift_retain(v10);
  v12 = UUID.init()(v11);
  v13 = (void *)UUID.uuidString.getter(v12);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = a1;
  v17 = v39;
  sub_100144FC8(v13, v15, 7235938, 0xE300000000000000, a1);
  if (v17)
  {
    swift_bridgeObjectRelease(v15);
    swift_release(v10);
  }
  else
  {
    v18 = v35;
    v20 = v37;
    v19 = v38;
    swift_bridgeObjectRelease(v15);
    swift_release(v10);
    v21 = *(_QWORD *)(v36 + v9);
    v22 = *(_QWORD *)(v36 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 56);
    v23 = *(unsigned __int8 *)(v36 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 64);
    swift_retain(v21);
    sub_100145394(v16, v22, v23);
    swift_release(v21);
    v24 = v19;
    if (qword_1002B3A98 != -1)
      swift_once(&qword_1002B3A98, sub_100190468);
    v25 = type metadata accessor for Logger(0);
    sub_10018DBC8(v25, (uint64_t)qword_1002BF090);
    v26 = v20;
    v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 16);
    v28 = v18;
    v29 = v27(v18, v16, v24);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v42 = v33;
      *(_DWORD *)v32 = 136315138;
      v34 = URL.path(percentEncoded:)(1);
      v40 = sub_10018FCE8(v34._countAndFlagsBits, (unint64_t)v34._object, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v34._object);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v38);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "created temporary file %s", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v24);
    }

  }
}

uint64_t sub_10019C5B4()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  os_log_t v59;
  uint8_t *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;

  v1 = v0;
  v2 = type metadata accessor for URLRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  v66 = v2;
  v67 = v3;
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v59 - v7;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v59 - v14;
  v16 = sub_10019EB2C(1);
  v17 = (uint64_t)v68;
  sub_10019EE1C(v16, v15);
  v18 = v17;
  swift_bridgeObjectRelease(v16);
  if (!v17)
  {
    v65 = v8;
    v68 = v6;
    v19 = v15;
    sub_10019EE1C(0, v13);
    v21 = v1;
    v22 = *(uint64_t *)((char *)&v1[4].isa + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration);
    v23 = qword_1002B3A98;
    swift_bridgeObjectRetain(v22);
    v63 = v10;
    v64 = v19;
    if (v23 != -1)
      swift_once(&qword_1002B3A98, sub_100190468);
    v24 = type metadata accessor for Logger(0);
    sub_10018DBC8(v24, (uint64_t)qword_1002BF090);
    v25 = swift_bridgeObjectRetain_n(v22, 2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter();
    v28 = v27;
    v29 = os_log_type_enabled(v26, v27);
    v62 = v9;
    v30 = v22;
    if (v29)
    {
      v59 = v26;
      v31 = swift_slowAlloc(12, -1);
      v61 = v28;
      v32 = (uint8_t *)v31;
      v33 = swift_slowAlloc(32, -1);
      v70 = v33;
      v34 = v22;
      *(_DWORD *)v32 = 136446210;
      v60 = v32 + 4;
      v35 = sub_10016A088();
      v36 = swift_bridgeObjectRetain(v22);
      v37 = Set.description.getter(v36, &type metadata for SURLSessionTrafficClass, v35);
      v39 = v38;
      swift_bridgeObjectRelease(v34);
      v69 = sub_10018FCE8(v37, v39, &v70);
      v30 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v60, v32 + 12);
      swift_bridgeObjectRelease_n(v34, 2);
      swift_bridgeObjectRelease(v39);
      v40 = v59;
      _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v61, "Generating uplink/downlink requests pair for %{public}s", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      v41 = swift_bridgeObjectRelease_n(v22, 2);
    }
    v42 = (uint64_t)v68;
    v43 = (uint64_t)v65;
    if (*(_QWORD *)(v30 + 16))
    {
      __chkstk_darwin(v41);
      *(&v59 - 4) = v21;
      *(&v59 - 3) = (os_log_t)v13;
      v44 = v64;
      *(&v59 - 2) = v64;
      v18 = sub_10019A8B8((void (*)(char *))sub_1001A1C24, (uint64_t)&(&v59)[-6], v30);
      v45 = v62;
      v46 = *(void (**)(char *, uint64_t))(v63 + 8);
      v46(v13, v62);
      v46((char *)v44, v45);
      swift_bridgeObjectRelease(v30);
    }
    else
    {
      swift_bridgeObjectRelease(v30);
      sub_10019F4C0((uint64_t)v13, 9, 4, v43, 15.0);
      sub_10019F72C((uint64_t)v64, 9, 4, v42, 15.0);
      v47 = sub_100146438(&qword_1002B6818);
      v48 = sub_100146438(&qword_1002B6820);
      v49 = *(_QWORD *)(v48 - 8);
      v50 = *(_QWORD *)(v49 + 72);
      v51 = *(unsigned __int8 *)(v49 + 80);
      v52 = (v51 + 32) & ~v51;
      v18 = swift_allocObject(v47, v52 + v50, v51 | 7);
      *(_OWORD *)(v18 + 16) = xmmword_1002402A0;
      v53 = v18 + v52 + *(int *)(v48 + 48);
      v54 = v13;
      v55 = v62;
      v57 = v66;
      v56 = v67;
      (*(void (**)(void))(v67 + 16))();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v53, v42, v57);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v43, v57);
      v58 = *(void (**)(char *, uint64_t))(v63 + 8);
      v58(v54, v55);
      v58((char *)v64, v55);
    }
  }
  return v18;
}

_QWORD *sub_10019CA70(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Class isa;
  NSURL *v17;
  void *v18;
  void *v19;
  id v20;
  double v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  NSObject *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  Class v34;
  id v35;
  double v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v47;
  id v48;
  unint64_t v49;

  v9 = a3 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration;
  if (*(_BYTE *)(a3 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 48) == 1)
  {
    v10 = *(id *)(a3 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_operationQueue);
    v11 = sub_10019CE80((uint64_t)v10, 0, 0);

    v12 = v11;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
    v14 = *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v13 = *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v14 >= v13 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
    specialized Array._endMutation()(v15);
    isa = URLRequest._bridgeToObjectiveC()().super.isa;
    URL._bridgeToObjectiveC()(v17);
    v19 = v18;
    v20 = -[NSObject uploadTaskWithRequest:fromFile:](v12, "uploadTaskWithRequest:fromFile:", isa, v18);

    LODWORD(v21) = 1.0;
    objc_msgSend(v20, "setPriority:", v21);
    v47 = *a6;
    v22 = v20;
    dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v24 = v23;
    v25 = (char *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    objc_msgSend(v22, "setTaskDescription:", v25, v47);

    v26 = *a6 + 1;
    if (__OFADD__(*a6, 1))
    {
      __break(1u);
    }
    else
    {
      *a6 = v26;
      v22 = v22;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v25 = *(char **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v26 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if ((unint64_t)v25 < v26 >> 1)
      {
LABEL_6:
        v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v22);
        specialized Array._endMutation()(v27);

        goto LABEL_7;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v25 + 1, 1);
    goto LABEL_6;
  }
LABEL_7:
  if (*(_BYTE *)(v9 + 49) == 1)
  {
    v28 = *(id *)(a3 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_operationQueue);
    v29 = sub_10019CE80((uint64_t)v28, 0, 0);

    v30 = v29;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
    v32 = *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v31 = *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v32 >= v31 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
    v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
    specialized Array._endMutation()(v33);
    v34 = URLRequest._bridgeToObjectiveC()().super.isa;
    v35 = -[NSObject downloadTaskWithRequest:](v30, "downloadTaskWithRequest:", v34);

    LODWORD(v36) = 1.0;
    objc_msgSend(v35, "setPriority:", v36);
    v37 = (char *)v35;
    v48 = objc_msgSend(v37, "taskIdentifier");
    dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v39 = v38;
    v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39);
    objc_msgSend(v37, "setTaskDescription:", v40, v48);

    v49 = *a6;
    dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v42 = v41;
    v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v42);
    objc_msgSend(v37, "setTaskDescription:", v43, v49);

    v44 = *a6 + 1;
    if (__OFADD__(*a6, 1))
    {
      __break(1u);
    }
    else
    {
      *a6 = v44;
      a6 = v37;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(a6);
      v37 = *(char **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v44 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if ((unint64_t)v37 < v44 >> 1)
      {
LABEL_12:
        v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, a6);
        specialized Array._endMutation()(v45);

        return _swiftEmptyArrayStorage;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v37 + 1, 1);
    goto LABEL_12;
  }
  return _swiftEmptyArrayStorage;
}

NSObject *sub_10019CE80(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v8;
  NSString v9;
  __objc2_ivar_list **p_ivars;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint8_t *v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  NSObject **v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v3;
  v8 = objc_msgSend((id)objc_opt_self(NSURLSessionConfiguration), "ephemeralSessionConfiguration");
  if (!*(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 32)
                  + 16))
  {
    v9 = String._bridgeToObjectiveC()();
    -[NSObject setSharedContainerIdentifier:](v8, "setSharedContainerIdentifier:", v9);

  }
  p_ivars = &CarrierSegmentViewModel.ivars;
  if (a3)
  {
    v11 = String._bridgeToObjectiveC()();
    -[NSObject set_sourceApplicationSecondaryIdentifier:](v8, "set_sourceApplicationSecondaryIdentifier:", v11);

    if (qword_1002B3A98 != -1)
      swift_once(&qword_1002B3A98, sub_100190468);
    v12 = type metadata accessor for Logger(0);
    sub_10018DBC8(v12, (uint64_t)qword_1002BF090);
    v13 = swift_bridgeObjectRetain_n(a3, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v31 = v17;
      *(_DWORD *)v16 = 136380675;
      swift_bridgeObjectRetain(a3);
      v30 = sub_10018FCE8(a2, a3, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "made session with identifier =%{private}s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      v18 = v16;
      p_ivars = (__objc2_ivar_list **)(&CarrierSegmentViewModel + 48);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
  }
  -[NSObject setAllowsCellularAccess:](v8, "setAllowsCellularAccess:", 1);
  -[NSObject setAllowsExpensiveNetworkAccess:](v8, "setAllowsExpensiveNetworkAccess:", 1);
  -[NSObject setAllowsConstrainedNetworkAccess:](v8, "setAllowsConstrainedNetworkAccess:", 1);
  -[NSObject setDiscretionary:](v8, "setDiscretionary:", 0);
  -[NSObject setSessionSendsLaunchEvents:](v8, "setSessionSendsLaunchEvents:", 1);
  -[NSObject setWaitsForConnectivity:](v8, "setWaitsForConnectivity:", 1);
  v19 = objc_msgSend((id)objc_opt_self(NSURLSession), "sessionWithConfiguration:delegate:delegateQueue:", v8, v4, a1);
  if (p_ivars[339] != (__objc2_ivar_list *)-1)
    swift_once(&qword_1002B3A98, sub_100190468);
  v20 = type metadata accessor for Logger(0);
  sub_10018DBC8(v20, (uint64_t)qword_1002BF090);
  v21 = v19;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v24 = 138543362;
    v31 = (uint64_t)v21;
    v26 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v24 + 4, v24 + 12);
    *v25 = v21;

    _os_log_impl((void *)&_mh_execute_header, v22, v23, "made url session=%{public}@", v24, 0xCu);
    v27 = sub_100146438((uint64_t *)&unk_1002B6990);
    swift_arrayDestroy(v25, 1, v27);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
    v28 = v8;
  }
  else
  {

    v28 = v21;
    v22 = v8;
  }

  return v21;
}

uint64_t sub_10019D2CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1[12] = v0;
  v2 = sub_100146438(&qword_1002B6820);
  v1[13] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[14] = v3;
  v1[15] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100146438(&qword_1002B6970);
  v1[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100146438(&qword_1002B6978);
  v1[17] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[18] = v6;
  v1[19] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v1[20] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[21] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v1[22] = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[23] = swift_task_alloc(v10);
  v1[24] = swift_task_alloc(v10);
  v11 = type metadata accessor for MainActor(0);
  v1[25] = static MainActor.shared.getter();
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  v1[26] = v12;
  v1[27] = v13;
  return swift_task_switch(sub_10019D3F0, v12, v13);
}

uint64_t sub_10019D3F0()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = v0[24];
  v2 = (void *)v0[12];
  KeyPath = swift_getKeyPath(&unk_100242D80);
  v4 = swift_getKeyPath(&unk_100242DA8);
  v0[2] = 0xD000000000000015;
  v0[3] = 0x8000000100214060;
  static Published.subscript.setter(v0 + 2, v2, KeyPath, v4);
  sub_10019C278(v1);
  v5 = v0[12];
  v0[10] = _swiftEmptyArrayStorage;
  v6 = 1;
  v0[8] = 1;
  v7 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration;
  v0[28] = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration;
  v8 = v5 + v7;
  v9 = *(unsigned __int8 *)(v8 + 48);
  v10 = *(unsigned __int8 *)(v8 + 49);
  v11 = qword_100242DD0[*(char *)(v8 + 26)];
  if ((_DWORD)v10)
    v6 = 2;
  if (v9)
    v12 = v6;
  else
    v12 = v10;
  v0[29] = v11;
  v13 = v0[23];
  v14 = v0[21];
  v30 = v0[24];
  v31 = v0[22];
  v15 = v0[19];
  v16 = v0[20];
  v32 = v0[17];
  v33 = v0[18];
  v0[11] = *(_QWORD *)(v5 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_subject);
  v17 = sub_100146438(&qword_1002B6958);
  v18 = sub_10014BEC0(&qword_1002B6980, &qword_1002B6958, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Publisher.collect(_:)(v12, v17, v18);
  v19 = swift_allocObject(&unk_100265838, 24, 7);
  swift_unknownObjectUnownedInit(v19 + 16, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v30, v16);
  v20 = *(unsigned __int8 *)(v14 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = (v31 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_1002659F0, v22 + 8, v20 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v23 + v21, v13, v16);
  *(_QWORD *)(v23 + v22) = v19;
  v24 = sub_10014BEC0(&qword_1002B6988, &qword_1002B6978, (uint64_t)&protocol conformance descriptor for Publishers.CollectByCount<A>);
  v25 = Publisher<>.sink(receiveValue:)(sub_1001A1BD8, v23, v32, v24);
  v26 = swift_release(v23);
  (*(void (**)(uint64_t, uint64_t, __n128))(v33 + 8))(v15, v32, v26);
  v27 = *(_QWORD *)(v5 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_cancellable);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_cancellable) = v25;
  swift_release(v27);
  v28 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  v0[30] = v28;
  *v28 = v0;
  v28[1] = sub_10019D6F4;
  return static Task<>.sleep(nanoseconds:)(2000000000);
}

uint64_t sub_10019D6F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 240);
  *(_QWORD *)(*v1 + 248) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = *(_QWORD *)(v2 + 208);
    v5 = *(_QWORD *)(v2 + 216);
    v6 = sub_10019DCBC;
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 208);
    v5 = *(_QWORD *)(v2 + 216);
    v6 = sub_10019D760;
  }
  return swift_task_switch(v6, v4, v5);
}

void sub_10019D760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  void *object;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  id v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(void);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 200));
  v4 = *(double *)(v3 + v2 + 40);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
    goto LABEL_48;
  if (v4 <= -9.22337204e18)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v49 = (uint64_t)v4;
  if ((uint64_t)v4 >= 1)
  {
    v56 = (uint64_t *)(v0 + 80);
    v5 = *(_QWORD *)(v0 + 112);
    v54 = *(_QWORD *)(v0 + 104);
    v50 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_runningTasks;
    v51 = *(_QWORD *)(v0 + 96);
    v6 = 1;
    while (1)
    {
      v7 = *(void **)(v0 + 96);
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease(0xE000000000000000);
      *(_QWORD *)(v0 + 72) = v6;
      v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v8._object;
      String.append(_:)(v8);
      swift_bridgeObjectRelease(object);
      KeyPath = swift_getKeyPath(&unk_100242D80);
      v11 = swift_getKeyPath(&unk_100242DA8);
      *(_QWORD *)(v0 + 32) = 0xD000000000000013;
      *(_QWORD *)(v0 + 40) = 0x8000000100214080;
      static Published.subscript.setter(v0 + 32, v7, KeyPath, v11);
      v12 = sub_10019C5B4();
      if (v1)
        goto LABEL_43;
      v52 = v6;
      v13 = *(_QWORD *)(v12 + 16);
      v53 = v12;
      if (v13)
      {
        v14 = v12 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
        swift_bridgeObjectRetain(v12);
        v15 = *(_QWORD *)(v5 + 72);
        while (1)
        {
          v16 = *(_QWORD *)(v0 + 128);
          v17 = *(_QWORD *)(v0 + 104);
          sub_10014BD9C(v14, v16, &qword_1002B6820);
          v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
          v18(v16, 0, 1, v17);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v16, 1, v17) == 1)
            break;
          v19 = *(_QWORD *)(v0 + 232);
          v20 = *(_QWORD *)(v0 + 192);
          v21 = *(_QWORD *)(v0 + 120);
          v22 = *(NSObject **)(v0 + 96);
          sub_1001A1BDC(*(_QWORD *)(v0 + 128), v21);
          v23 = sub_10019E218(v21, (char *)(v21 + *(int *)(v54 + 48)), v19, v22, v56, v20, (unint64_t *)(v0 + 64));
          sub_10014BDE0(v21, &qword_1002B6820);
          sub_1001DA8A4((uint64_t)v23);
          v14 += v15;
          if (!--v13)
            goto LABEL_13;
        }
      }
      else
      {
        swift_bridgeObjectRetain(v12);
        v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
LABEL_13:
        v18(*(_QWORD *)(v0 + 128), 1, 1, *(_QWORD *)(v0 + 104));
      }
      swift_bridgeObjectRelease_n(v53, 2);
      v24 = *(_QWORD *)(v51 + v50);
      *(_QWORD *)(v51 + v50) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(v24);
      if ((unint64_t)_swiftEmptyArrayStorage >> 62)
      {
        if ((uint64_t)_swiftEmptyArrayStorage < 0)
          v34 = _swiftEmptyArrayStorage;
        else
          v34 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
        v25 = _CocoaArrayWrapper.endIndex.getter(v34);
      }
      else
      {
        v25 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      }
      if (v25)
      {
        if (v25 < 1)
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        for (i = 0; i != v25; ++i)
        {
          if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
            v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, _swiftEmptyArrayStorage);
          else
            v27 = (id)_swiftEmptyArrayStorage[i + 4];
          v28 = v27;
          objc_msgSend(v27, "resume");

        }
      }
      swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
      v29 = *v56;
      if ((unint64_t)*v56 >> 62)
      {
        if (v29 < 0)
          v35 = *v56;
        else
          v35 = v29 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v56);
        v30 = _CocoaArrayWrapper.endIndex.getter(v35);
        if (!v30)
          goto LABEL_39;
      }
      else
      {
        v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(*v56);
        if (!v30)
          goto LABEL_39;
      }
      if (v30 < 1)
        goto LABEL_47;
      for (j = 0; j != v30; ++j)
      {
        if ((v29 & 0xC000000000000001) != 0)
          v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v29);
        else
          v32 = *(id *)(v29 + 8 * j + 32);
        v33 = v32;
        objc_msgSend(v32, "finishTasksAndInvalidate");

      }
LABEL_39:
      swift_bridgeObjectRelease(v29);
      if (v52 == v49)
      {
        v41 = *(_QWORD *)(v0 + 184);
        v42 = *(_QWORD *)(v0 + 192);
        v43 = *(_QWORD *)(v0 + 160);
        v44 = *(_QWORD *)(v0 + 168);
        v45 = *(_QWORD *)(v0 + 152);
        v55 = *(_QWORD *)(v0 + 128);
        v57 = *(_QWORD *)(v0 + 120);
        v46 = *(void **)(v0 + 96);
        v47 = swift_getKeyPath(&unk_100242D80);
        v48 = swift_getKeyPath(&unk_100242DA8);
        *(_OWORD *)(v0 + 48) = xmmword_100242C40;
        static Published.subscript.setter(v0 + 48, v46, v47, v48);
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
        swift_task_dealloc(v42);
        swift_task_dealloc(v41);
        swift_task_dealloc(v45);
        swift_task_dealloc(v55);
        swift_task_dealloc(v57);
        v40 = *(void (**)(void))(v0 + 8);
        goto LABEL_45;
      }
      v1 = 0;
      v6 = v52 + 1;
      if (__OFADD__(v52, 1))
      {
        __break(1u);
LABEL_43:
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 160));
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
        v36 = *(_QWORD *)(v0 + 184);
        v37 = *(_QWORD *)(v0 + 152);
        v39 = *(_QWORD *)(v0 + 120);
        v38 = *(_QWORD *)(v0 + 128);
        swift_task_dealloc(*(_QWORD *)(v0 + 192));
        swift_task_dealloc(v36);
        swift_task_dealloc(v37);
        swift_task_dealloc(v38);
        swift_task_dealloc(v39);
        v40 = *(void (**)(void))(v0 + 8);
LABEL_45:
        v40();
        return;
      }
    }
  }
LABEL_51:
  __break(1u);
}

void sub_10019DCBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  void *object;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  id v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 200));
  v3 = *(double *)(v2 + v1 + 40);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
    goto LABEL_46;
  if (v3 <= -9.22337204e18)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v48 = (uint64_t)v3;
  if ((uint64_t)v3 >= 1)
  {
    v55 = (uint64_t *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 112);
    v53 = *(_QWORD *)(v0 + 104);
    v49 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_runningTasks;
    v50 = *(_QWORD *)(v0 + 96);
    v5 = 1;
    while (1)
    {
      v6 = *(void **)(v0 + 96);
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease(0xE000000000000000);
      *(_QWORD *)(v0 + 72) = v5;
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v7._object;
      String.append(_:)(v7);
      swift_bridgeObjectRelease(object);
      KeyPath = swift_getKeyPath(&unk_100242D80);
      v10 = swift_getKeyPath(&unk_100242DA8);
      *(_QWORD *)(v0 + 32) = 0xD000000000000013;
      *(_QWORD *)(v0 + 40) = 0x8000000100214080;
      static Published.subscript.setter(v0 + 32, v6, KeyPath, v10);
      v11 = sub_10019C5B4();
      v51 = v5;
      v12 = *(_QWORD *)(v11 + 16);
      v52 = v11;
      if (v12)
      {
        v13 = v11 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
        swift_bridgeObjectRetain(v11);
        v14 = *(_QWORD *)(v4 + 72);
        while (1)
        {
          v15 = *(_QWORD *)(v0 + 128);
          v16 = *(_QWORD *)(v0 + 104);
          sub_10014BD9C(v13, v15, &qword_1002B6820);
          v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
          v17(v15, 0, 1, v16);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v15, 1, v16) == 1)
            break;
          v18 = *(_QWORD *)(v0 + 232);
          v19 = *(_QWORD *)(v0 + 192);
          v20 = *(_QWORD *)(v0 + 120);
          v21 = *(NSObject **)(v0 + 96);
          sub_1001A1BDC(*(_QWORD *)(v0 + 128), v20);
          v22 = sub_10019E218(v20, (char *)(v20 + *(int *)(v53 + 48)), v18, v21, v55, v19, (unint64_t *)(v0 + 64));
          sub_10014BDE0(v20, &qword_1002B6820);
          sub_1001DA8A4((uint64_t)v22);
          v13 += v14;
          if (!--v12)
            goto LABEL_12;
        }
      }
      else
      {
        swift_bridgeObjectRetain(v11);
        v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_12:
        v17(*(_QWORD *)(v0 + 128), 1, 1, *(_QWORD *)(v0 + 104));
      }
      swift_bridgeObjectRelease_n(v52, 2);
      v23 = *(_QWORD *)(v50 + v49);
      *(_QWORD *)(v50 + v49) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(v23);
      if ((unint64_t)_swiftEmptyArrayStorage >> 62)
      {
        if ((uint64_t)_swiftEmptyArrayStorage < 0)
          v33 = _swiftEmptyArrayStorage;
        else
          v33 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
        v24 = _CocoaArrayWrapper.endIndex.getter(v33);
      }
      else
      {
        v24 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      }
      if (v24)
      {
        if (v24 < 1)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        for (i = 0; i != v24; ++i)
        {
          if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
            v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, _swiftEmptyArrayStorage);
          else
            v26 = (id)_swiftEmptyArrayStorage[i + 4];
          v27 = v26;
          objc_msgSend(v26, "resume");

        }
      }
      swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
      v28 = *v55;
      if ((unint64_t)*v55 >> 62)
      {
        if (v28 < 0)
          v34 = *v55;
        else
          v34 = v28 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v55);
        v29 = _CocoaArrayWrapper.endIndex.getter(v34);
        if (!v29)
          goto LABEL_38;
      }
      else
      {
        v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(*v55);
        if (!v29)
          goto LABEL_38;
      }
      if (v29 < 1)
        goto LABEL_45;
      for (j = 0; j != v29; ++j)
      {
        if ((v28 & 0xC000000000000001) != 0)
          v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v28);
        else
          v31 = *(id *)(v28 + 8 * j + 32);
        v32 = v31;
        objc_msgSend(v31, "finishTasksAndInvalidate");

      }
LABEL_38:
      swift_bridgeObjectRelease(v28);
      if (v51 == v48)
      {
        v40 = *(_QWORD *)(v0 + 184);
        v41 = *(_QWORD *)(v0 + 192);
        v42 = *(_QWORD *)(v0 + 160);
        v43 = *(_QWORD *)(v0 + 168);
        v44 = *(_QWORD *)(v0 + 152);
        v54 = *(_QWORD *)(v0 + 128);
        v56 = *(_QWORD *)(v0 + 120);
        v45 = *(void **)(v0 + 96);
        v46 = swift_getKeyPath(&unk_100242D80);
        v47 = swift_getKeyPath(&unk_100242DA8);
        *(_OWORD *)(v0 + 48) = xmmword_100242C40;
        static Published.subscript.setter(v0 + 48, v45, v46, v47);
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
        swift_task_dealloc(v41);
        swift_task_dealloc(v40);
        swift_task_dealloc(v44);
        swift_task_dealloc(v54);
        swift_task_dealloc(v56);
        v39 = *(void (**)(void))(v0 + 8);
        goto LABEL_43;
      }
      v5 = v51 + 1;
      if (__OFADD__(v51, 1))
      {
        __break(1u);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 160));
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
        v35 = *(_QWORD *)(v0 + 184);
        v36 = *(_QWORD *)(v0 + 152);
        v38 = *(_QWORD *)(v0 + 120);
        v37 = *(_QWORD *)(v0 + 128);
        swift_task_dealloc(*(_QWORD *)(v0 + 192));
        swift_task_dealloc(v35);
        swift_task_dealloc(v36);
        swift_task_dealloc(v37);
        swift_task_dealloc(v38);
        v39 = *(void (**)(void))(v0 + 8);
LABEL_43:
        v39();
        return;
      }
    }
  }
LABEL_49:
  __break(1u);
}

_QWORD *sub_10019E218(unint64_t a1, char *a2, unint64_t a3, NSObject *a4, _QWORD *a5, uint64_t a6, unint64_t *a7)
{
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  NSObject *object;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  id v24;
  NSObject *v25;
  uint64_t v26;
  Class isa;
  NSURL *v28;
  void *v29;
  void *v30;
  id v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  Swift::String v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  void *v45;
  id v46;
  NSObject *v47;
  uint64_t v48;
  Class v49;
  id v50;
  double v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  NSString v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v59;

  v12._countAndFlagsBits = 0xD000000000000020;
  v12._object = (void *)0x80000001002140A0;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 46;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16 = swift_bridgeObjectRelease(0xE000000000000000);
  v17 = (char *)a4 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration;
  if (*((_BYTE *)&a4[6].isa + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration) == 1)
  {
    if (URLRequest.networkServiceType.getter(v16) < 0)
    {
      __break(1u);
    }
    else
    {
      v59 = a7;
      v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v20 = v19._object;
      String.append(_:)(v19);
      swift_bridgeObjectRelease(v20);
      v21._countAndFlagsBits = 46;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v23 = v22._object;
      String.append(_:)(v22);
      swift_bridgeObjectRelease(v23);
      v24 = objc_retain(*(id *)((char *)&a4->isa
                              + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_operationQueue));
      v25 = sub_10019CE80((uint64_t)v24, 0xD000000000000021, 0x80000001002140D0);

      swift_bridgeObjectRelease(0x80000001002140D0);
      object = v25;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(object);
      a7 = *(unint64_t **)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v18 = *(_QWORD *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if ((unint64_t)a7 < v18 >> 1)
        goto LABEL_4;
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, (char *)a7 + 1, 1);
LABEL_4:
    v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a7, object);
    specialized Array._endMutation()(v26);
    isa = URLRequest._bridgeToObjectiveC()().super.isa;
    URL._bridgeToObjectiveC()(v28);
    v30 = v29;
    v31 = -[NSObject uploadTaskWithRequest:fromFile:](object, "uploadTaskWithRequest:fromFile:", isa, v29);

    LODWORD(v32) = 1.0;
    objc_msgSend(v31, "setPriority:", v32);
    a7 = v59;
    v33 = v31;
    dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v35 = v34;
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35);
    objc_msgSend(v33, "setTaskDescription:", v36);

    v37 = *v59 + 1;
    if (__OFADD__(*v59, 1))
    {
      __break(1u);
    }
    else
    {
      *v59 = v37;
      v33 = v33;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v33);
      a1 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v37 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (a1 < v37 >> 1)
      {
LABEL_6:
        v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a1, v33);
        specialized Array._endMutation()(v38);

        goto LABEL_7;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, a1 + 1, 1);
    goto LABEL_6;
  }
LABEL_7:
  if (v17[49] == 1)
  {
    v39 = a2;
    if (URLRequest.networkServiceType.getter(v16) < 0)
    {
      __break(1u);
    }
    else
    {
      v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v42 = v41._object;
      String.append(_:)(v41);
      swift_bridgeObjectRelease(v42);
      v43._countAndFlagsBits = 46;
      v43._object = (void *)0xE100000000000000;
      String.append(_:)(v43);
      v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v45 = v44._object;
      String.append(_:)(v44);
      swift_bridgeObjectRelease(v45);
      v46 = objc_retain(*(id *)((char *)&a4->isa
                              + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_operationQueue));
      v47 = sub_10019CE80((uint64_t)v46, 0xD000000000000021, 0x80000001002140D0);

      swift_bridgeObjectRelease(0x80000001002140D0);
      a4 = v47;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(a4);
      a3 = *(_QWORD *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v40 = *(_QWORD *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (a3 < v40 >> 1)
        goto LABEL_10;
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, a3 + 1, 1);
LABEL_10:
    v48 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a3, a4);
    specialized Array._endMutation()(v48);
    v49 = URLRequest._bridgeToObjectiveC()().super.isa;
    v50 = -[NSObject downloadTaskWithRequest:](a4, "downloadTaskWithRequest:", v49);

    LODWORD(v51) = 1.0;
    objc_msgSend(v50, "setPriority:", v51);
    v52 = (char *)v50;
    dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v54 = v53;
    v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v54);
    objc_msgSend(v52, "setTaskDescription:", v55);

    v56 = *a7 + 1;
    if (__OFADD__(*a7, 1))
    {
      __break(1u);
    }
    else
    {
      *a7 = v56;
      v39 = v52;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v39);
      v52 = *(char **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v56 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if ((unint64_t)v52 < v56 >> 1)
      {
LABEL_12:
        v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v39);
        specialized Array._endMutation()(v57);

        return _swiftEmptyArrayStorage;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v52 + 1, 1);
    goto LABEL_12;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10019E7A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  char *Strong;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t aBlock[7];

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = a3 + 16;
  if (qword_1002B3A98 != -1)
    swift_once(&qword_1002B3A98, sub_100190468);
  v12 = type metadata accessor for Logger(0);
  sub_10018DBC8(v12, (uint64_t)qword_1002BF090);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  v16 = os_log_type_enabled(v14, v15);
  v37 = v10;
  if (v16)
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    aBlock[0] = v18;
    v36 = a3 + 16;
    *(_DWORD *)v17 = 136315138;
    v35 = v17 + 4;
    v19 = sub_100146004(&qword_1002B69C8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v6, v19);
    v22 = v21;
    v38 = sub_10018FCE8(v20, v21, aBlock);
    v11 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, aBlock, v35, v17 + 12);
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Deleting temporary file %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v23 = v17;
    v10 = v37;
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  Strong = (char *)swift_unknownObjectUnownedLoadStrong(v11);
  v25 = *(_QWORD *)&Strong[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_dataGenerator];
  swift_retain(v25);

  sub_1001459B4();
  swift_release(v25);
  if (!((unint64_t)v10 >> 62))
  {
    v26 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v10);
    if (v26)
      goto LABEL_8;
    return swift_bridgeObjectRelease(v10);
  }
  if (v10 < 0)
    v33 = v10;
  else
    v33 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  result = _CocoaArrayWrapper.endIndex.getter(v33);
  v26 = result;
  if (!result)
    return swift_bridgeObjectRelease(v10);
LABEL_8:
  if (v26 >= 1)
  {
    v28 = 0;
    v29 = v10 & 0xC000000000000001;
    do
    {
      if (v29)
        v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, v10);
      else
        v30 = *(id *)(v10 + 8 * v28 + 32);
      v31 = v30;
      ++v28;
      aBlock[4] = (uint64_t)nullsub_1;
      aBlock[5] = 0;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1001BE428;
      aBlock[3] = (uint64_t)&unk_100265A08;
      v32 = _Block_copy(aBlock);
      objc_msgSend(v31, "flushWithCompletionHandler:", v32);
      _Block_release(v32);
      objc_msgSend(v31, "invalidateAndCancel");

      v10 = v37;
    }
    while (v26 != v28);
    return swift_bridgeObjectRelease(v10);
  }
  __break(1u);
  return result;
}

uint64_t sub_10019EB2C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = sub_10015A468(*(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 72), *(_BYTE *)(v1 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 80));
  if ((a1 & 1) == 0)
  {
    v8 = _swiftEmptyArrayStorage;
    goto LABEL_7;
  }
  v4 = (double)v3 * 0.0009765625 * 0.0009765625;
  v5 = sub_100146438(&qword_1002B69E0);
  v6 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  result = swift_allocObject(v5, ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72), *(unsigned __int8 *)(v6 + 80) | 7);
  *(_OWORD *)(result + 16) = xmmword_1002402A0;
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v8 = (_QWORD *)result;
  v24 = (uint64_t)v4;
  v9 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v11 = v10;
  URLQueryItem.init(name:value:)(0x73657479626DLL, 0xE600000000000000, v9, v10);
  swift_bridgeObjectRelease(v11);
LABEL_7:
  if (qword_1002B3A98 != -1)
    swift_once(&qword_1002B3A98, sub_100190468);
  v12 = type metadata accessor for Logger(0);
  sub_10018DBC8(v12, (uint64_t)qword_1002BF090);
  v13 = swift_bridgeObjectRetain_n(v8, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v24 = v17;
    *(_DWORD *)v16 = 136315138;
    v18 = type metadata accessor for URLQueryItem(0);
    v19 = swift_bridgeObjectRetain(v8);
    v20 = Array.description.getter(v19, v18);
    v22 = v21;
    swift_bridgeObjectRelease(v8);
    v23 = sub_10018FCE8(v20, v22, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "made url query items %s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
  }
  return (uint64_t)v8;
}

uint64_t sub_10019EE1C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint8_t *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint8_t *v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint8_t *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[3];
  uint64_t v72;
  uint64_t v73;

  v66 = a2;
  v4 = type metadata accessor for URLError.Code(0);
  __chkstk_darwin(v4);
  v64 = (uint8_t *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for URLError(0);
  v65 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v63 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100146438((uint64_t *)&unk_1002B69B0);
  __chkstk_darwin(v7);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v63 - v15;
  v17 = type metadata accessor for URLComponents(0);
  v68 = *(_QWORD *)(v17 - 8);
  v69 = v17;
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()(v18);
  v21 = v2 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration;
  v23 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 8);
  v22 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 16);
  swift_bridgeObjectRetain(v22);
  URLComponents.host.setter(v23, v22);
  URLComponents.port.setter(*(unsigned __int16 *)(v21 + 24), 0);
  if (*(_BYTE *)v21)
    v24 = 0x7370747468;
  else
    v24 = 1886680168;
  if (*(_BYTE *)v21)
    v25 = 0xE500000000000000;
  else
    v25 = 0xE400000000000000;
  URLComponents.scheme.setter(v24, v25);
  v26 = swift_bridgeObjectRetain(a1);
  v27 = URLComponents.queryItems.setter(v26);
  URLComponents.url.getter(v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10014BDE0((uint64_t)v9, (uint64_t *)&unk_1002B69B0);
    if (qword_1002B3A98 != -1)
      swift_once(&qword_1002B3A98, sub_100190468);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_10018DBC8(v28, (uint64_t)qword_1002BF090);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    v32 = os_log_type_enabled(v30, v31);
    v33 = v69;
    if (v32)
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v72 = v35;
      *(_DWORD *)v34 = 136315138;
      swift_beginAccess(v20, v71, 0, 0);
      v36 = sub_100146004(&qword_1002B69C0, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
      v37 = dispatch thunk of CustomStringConvertible.description.getter(v33, v36);
      v39 = v38;
      v70 = sub_10018FCE8(v37, v38, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unable to composed the URL %s", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }

    v40 = v64;
    static URLError.Code.badURL.getter();
    v41 = sub_1001A0AEC((uint64_t)_swiftEmptyArrayStorage);
    v42 = sub_100146004(&qword_1002B3BD0, (uint64_t (*)(uint64_t))&type metadata accessor for URLError, (uint64_t)&protocol conformance descriptor for URLError);
    v43 = v63;
    v44 = v67;
    v45 = _BridgedStoredNSError.init(_:userInfo:)(v40, v41, v67, v42);
    URLError._nsError.getter(v45);
    v46 = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v43, v44);
    swift_willThrow(v46);
    return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v20, v33);
  }
  else
  {
    v48 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v48(v16, v9, v10);
    if (qword_1002B3A98 != -1)
      swift_once(&qword_1002B3A98, sub_100190468);
    v49 = type metadata accessor for Logger(0);
    sub_10018DBC8(v49, (uint64_t)qword_1002BF090);
    v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v65 = swift_slowAlloc(32, -1);
      v71[0] = v65;
      v67 = (uint64_t)v48;
      *(_DWORD *)v53 = 136446210;
      v54 = v53 + 12;
      v63 = (char *)(v53 + 4);
      v64 = v53;
      v55 = sub_100146004(&qword_1002B69C8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v56 = dispatch thunk of CustomStringConvertible.description.getter(v10, v55);
      v58 = v57;
      v72 = sub_10018FCE8(v56, v57, v71);
      v59 = v54;
      v48 = (void (*)(char *, char *, uint64_t))v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v63, v59);
      swift_bridgeObjectRelease(v58);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      v60 = v64;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "made url=%{public}s", v64, 0xCu);
      v61 = v65;
      swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }

    v62 = v69;
    v48(v66, v16, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v20, v62);
  }
}

void sub_10019F444(char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v6;
  uint64_t v7;

  v6 = *a1;
  sub_10019F4C0(a2, *a1, 4, a4, 15.0);
  v7 = sub_100146438(&qword_1002B6820);
  sub_10019F72C(a3, v6, 4, a4 + *(int *)(v7 + 48), 15.0);
}

uint64_t sub_10019F4C0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  uint64_t v30[3];

  v10 = type metadata accessor for URLRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10019F72C(a1, a2, a3, (uint64_t)v13, a5);
  URLRequest.httpMethod.setter(1414745936, 0xE400000000000000);
  if (qword_1002B3A98 != -1)
    swift_once(&qword_1002B3A98, sub_100190468);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10018DBC8(v14, (uint64_t)qword_1002BF090);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v27 = a4;
    v20 = v19;
    v30[0] = v19;
    *(_DWORD *)v18 = 136315138;
    swift_beginAccess(v13, v29, 0, 0);
    v21 = sub_100146004(&qword_1002B69A8, (uint64_t (*)(uint64_t))&type metadata accessor for URLRequest, (uint64_t)&protocol conformance descriptor for URLRequest);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v10, v21);
    v24 = v23;
    v28 = sub_10018FCE8(v22, v23, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "made upload url request=%s", v18, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v25 = v20;
    a4 = v27;
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }

  swift_beginAccess(v13, v30, 0, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(a4, v13, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void sub_10019F72C(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[10];

  v15[2] = a4;
  v9 = type metadata accessor for UUID(0);
  __chkstk_darwin(v9);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URLRequest(0);
  v15[0] = *(_QWORD *)(v14 - 8);
  v15[1] = v14;
  __chkstk_darwin(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v13, a3, a5);
  __asm { BR              X9 }
}

uint64_t sub_10019F850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  ((void (*)(uint64_t))URLRequest.networkServiceType.setter)(1);
  ((void (*)(uint64_t))URLRequest.allowsCellularAccess.setter)(1);
  ((void (*)(uint64_t))URLRequest.allowsExpensiveNetworkAccess.setter)(1);
  v5 = ((uint64_t (*)(uint64_t))URLRequest.allowsConstrainedNetworkAccess.setter)(1);
  v6 = UUID.init()(v5);
  v7 = UUID.uuidString.getter(v6);
  v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v3, v2);
  v10._object = (void *)0x8000000100214100;
  v11._countAndFlagsBits = v7;
  v11._object = v9;
  v10._countAndFlagsBits = 0xD000000000000011;
  URLRequest.addValue(_:forHTTPHeaderField:)(v11, v10);
  swift_bridgeObjectRelease(v9);
  if (qword_1002B3A98 != -1)
    swift_once(&qword_1002B3A98, sub_100190468);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10018DBC8(v12, (uint64_t)qword_1002BF090);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v4 - 120) = v17;
    *(_DWORD *)v16 = 136446210;
    swift_beginAccess(v1, v4 - 144, 0, 0);
    v18 = sub_100146004(&qword_1002B69A8, (uint64_t (*)(uint64_t))&type metadata accessor for URLRequest, (uint64_t)&protocol conformance descriptor for URLRequest);
    v19 = *(_QWORD *)(v4 - 168);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v19, v18);
    v22 = v21;
    *(_QWORD *)(v4 - 152) = sub_10018FCE8(v20, v21, (uint64_t *)(v4 - 120));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 152, v4 - 144, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "made url request=%{public}s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    v19 = *(_QWORD *)(v4 - 168);
  }
  swift_beginAccess(v1, v4 - 120, 0, 0);
  v23 = *(_QWORD *)(v4 - 176);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v23 + 16))(*(_QWORD *)(v4 - 160), v1, v19);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v1, v19);
}

uint64_t sub_10019FC10(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t KeyPath;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v25;

  v3 = a1 + 16;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  v5 = type metadata accessor for SURLSessionRunningViewModel(0);
  v6 = sub_100146004((unint64_t *)&qword_1002B8150, type metadata accessor for SURLSessionRunningViewModel, (uint64_t)&unk_100242D00);
  v7 = ObservableObject<>.objectWillChange.getter(v5, v6);

  ObservableObjectPublisher.send()();
  swift_release(v7);
  v8 = (char *)swift_unknownObjectUnownedLoadStrong(v3);
  v9 = v8;
  v10 = *(void **)&v8[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_coreTelephonyService];
  if (!v10)
  {

    goto LABEL_8;
  }
  v11 = v10;

  v12 = objc_msgSend(v11, "getPDPInfo");
  if (!v12)
  {
LABEL_8:
    v13 = 0;
    v15 = 0xE000000000000000;
    goto LABEL_9;
  }
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = v13 & 0xFFFFFFFFFFFFLL;
  if (!v16)
  {
    swift_bridgeObjectRelease(v15);
    v13 = *(_QWORD *)aPdpIp0;
    v15 = unk_1002B62A0;
    swift_bridgeObjectRetain(unk_1002B62A0);
  }
LABEL_9:
  v17 = (void *)swift_unknownObjectUnownedLoadStrong(v3);
  KeyPath = swift_getKeyPath(&unk_100242D38);
  v19 = swift_getKeyPath(&unk_100242D60);
  static Published.subscript.getter(&v25, v17, KeyPath, v19);

  swift_release(KeyPath);
  swift_release(v19);
  v20 = v25;
  v21 = (char *)swift_unknownObjectUnownedLoadStrong(v3);
  v22 = *(_QWORD *)&v21[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 32];
  swift_bridgeObjectRetain(v22);

  v23 = *(_QWORD *)(v22 + 16);
  swift_bridgeObjectRelease(v22);
  sub_10015DFE0(a2, v23 == 0, v13, v15);

  return swift_bridgeObjectRelease(v15);
}

uint64_t sub_10019FEF0(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t KeyPath;
  uint64_t v19;
  void *v20;
  void *v22;

  v3 = a1 + 16;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  v5 = type metadata accessor for SURLSessionRunningViewModel(0);
  v6 = sub_100146004((unint64_t *)&qword_1002B8150, type metadata accessor for SURLSessionRunningViewModel, (uint64_t)&unk_100242D00);
  v7 = ObservableObject<>.objectWillChange.getter(v5, v6);

  ObservableObjectPublisher.send()();
  swift_release(v7);
  v8 = (char *)swift_unknownObjectUnownedLoadStrong(v3);
  v9 = v8;
  v10 = *(void **)&v8[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_coreTelephonyService];
  if (!v10)
  {

    goto LABEL_8;
  }
  v11 = v10;

  v12 = objc_msgSend(v11, "getPDPInfo");
  if (!v12)
  {
LABEL_8:
    v13 = 0;
    v15 = 0xE000000000000000;
    goto LABEL_9;
  }
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = v13 & 0xFFFFFFFFFFFFLL;
  if (!v16)
  {
    swift_bridgeObjectRelease(v15);
    v13 = *(_QWORD *)aPdpIp0;
    v15 = unk_1002B62A0;
    swift_bridgeObjectRetain(unk_1002B62A0);
  }
LABEL_9:
  v17 = (void *)swift_unknownObjectUnownedLoadStrong(v3);
  KeyPath = swift_getKeyPath(&unk_100242D38);
  v19 = swift_getKeyPath(&unk_100242D60);
  static Published.subscript.getter(&v22, v17, KeyPath, v19);

  swift_release(KeyPath);
  swift_release(v19);
  v20 = v22;
  sub_10015E6D4(a2, v13, v15);

  return swift_bridgeObjectRelease(v15);
}

double sub_1001A0198(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  double result;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  char v48[8];
  _QWORD *v49;
  uint64_t aBlock[5];
  _QWORD *v51;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  __chkstk_darwin(v6);
  v44 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002B3A98 != -1)
    swift_once(&qword_1002B3A98, sub_100190468);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10018DBC8(v11, (uint64_t)qword_1002BF090);
  v13 = a2;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(32, -1);
    v41[0] = v12;
    v18 = v17;
    aBlock[0] = v17;
    *(_DWORD *)v16 = 136315394;
    v49 = (_QWORD *)sub_10018FCE8(0xD000000000000028, 0x8000000100213FC0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, aBlock, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2048;
    v49 = objc_msgSend(v13, "taskIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, aBlock, v16 + 14, v16 + 22);

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s task.id=%ld", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    if (!a3)
      goto LABEL_10;
  }
  else
  {

    if (!a3)
      goto LABEL_10;
  }
  swift_errorRetain(a3);
  swift_errorRetain(a3);
  v19 = swift_errorRetain(a3);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    aBlock[0] = v23;
    *(_DWORD *)v22 = 136315394;
    v41[0] = a1;
    v49 = (_QWORD *)sub_10018FCE8(0xD000000000000028, 0x8000000100213FC0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, aBlock, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2080;
    swift_getErrorValue(a3, v48, v47);
    v24 = Error.localizedDescription.getter(v47[1], v47[2]);
    v26 = v25;
    v49 = (_QWORD *)sub_10018FCE8(v24, v25, aBlock);
    a1 = (void *)v41[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, aBlock, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease(v26);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s: terminated with error: %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    swift_errorRelease(a3);
  }
  else
  {
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    swift_errorRelease(a3);

  }
LABEL_10:
  v27 = sub_100192474();
  v28 = (void *)static OS_dispatch_queue.main.getter(v27);
  v29 = swift_allocObject(&unk_100265838, 24, 7);
  swift_unknownObjectUnownedInit(v29 + 16, v41[1]);
  v30 = (_QWORD *)swift_allocObject(&unk_100265860, 48, 7);
  v30[2] = v29;
  v30[3] = v13;
  v30[4] = a3;
  v30[5] = a1;
  aBlock[4] = (uint64_t)sub_1001A1B08;
  v51 = v30;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001BE428;
  aBlock[3] = (uint64_t)&unk_100265878;
  v31 = _Block_copy(aBlock);
  v32 = v13;
  swift_errorRetain(a3);
  swift_retain(v29);
  static DispatchQoS.unspecified.getter(a1);
  v49 = _swiftEmptyArrayStorage;
  v33 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v34 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v35 = sub_10014BEC0((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0, (uint64_t)&protocol conformance descriptor for [A]);
  v36 = v44;
  v37 = v34;
  v38 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v37, v35, v46, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v36, v31);
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v36, v38);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v43);
  v39 = v51;
  swift_release(v29);
  *(_QWORD *)&result = swift_release(v39).n128_u64[0];
  return result;
}

double sub_1001A0740(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  void *Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t KeyPath;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  double result;
  void *v19;

  v7 = a1 + 16;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  v9 = type metadata accessor for SURLSessionRunningViewModel(0);
  v10 = sub_100146004((unint64_t *)&qword_1002B8150, type metadata accessor for SURLSessionRunningViewModel, (uint64_t)&unk_100242D00);
  v11 = ObservableObject<>.objectWillChange.getter(v9, v10);

  ObservableObjectPublisher.send()();
  swift_release(v11);
  v12 = (void *)swift_unknownObjectUnownedLoadStrong(v7);
  KeyPath = swift_getKeyPath(&unk_100242D38);
  v14 = swift_getKeyPath(&unk_100242D60);
  static Published.subscript.getter(&v19, v12, KeyPath, v14);

  swift_release(KeyPath);
  swift_release(v14);
  v15 = v19;
  sub_10015EEE0(a2, a3);

  v16 = (char *)swift_unknownObjectUnownedLoadStrong(v7);
  v17 = *(_QWORD *)&v16[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_subject];
  swift_retain(v17);

  v19 = a4;
  PassthroughSubject.send(_:)(&v19);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

double sub_1001A0904@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100242D80);
  v5 = swift_getKeyPath(&unk_100242DA8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_1001A0980(uint64_t *a1, void **a2)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100242D80);
  v6 = swift_getKeyPath(&unk_100242DA8);
  v8[0] = v2;
  v8[1] = v3;
  sub_1001A1C50(v2, v3);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

void sub_1001A0A00(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100242D38);
  v5 = swift_getKeyPath(&unk_100242D60);
  static Published.subscript.getter(&v6, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  *a2 = v6;
}

uint64_t sub_1001A0A7C(void **a1, void **a2)
{
  void *v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100242D38);
  v5 = swift_getKeyPath(&unk_100242D60);
  v8 = v2;
  v6 = v2;
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

unint64_t sub_1001A0AEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100146438((uint64_t *)&unk_1002B69D0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10014BD9C(v7, (uint64_t)&v16, &qword_1002B5698);
    v8 = v16;
    v9 = v17;
    result = sub_1001A0C20(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10017F278(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001A0C20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1001A0C84(a1, a2, v5);
}

unint64_t sub_1001A0C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_1001A0DC8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_1001A0E68(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

id sub_1001A0F4C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  char *v5;
  char *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  objc_class *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  objc_class *ObjectType;
  objc_super v36;
  _QWORD v37[2];
  _OWORD v38[2];

  v6 = v5;
  v33 = a2;
  v34 = a5;
  v32 = a1;
  ObjectType = (objc_class *)swift_getObjectType(v5);
  v9 = sub_100146438(&qword_1002B6950);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_coreTelephonyService;
  *(_QWORD *)&v6[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_coreTelephonyService] = 0;
  v14 = &v6[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel__viewState];
  v38[0] = xmmword_100242C50;
  v15 = v6;
  Published.init(initialValue:)(v38, &type metadata for SLoadableViewState);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v12, v9);
  v16 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_dataGenerator;
  v17 = type metadata accessor for SDataGenerator();
  v18 = swift_allocObject(v17, 24, 7);
  *(_QWORD *)(v18 + 16) = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  *(_QWORD *)&v15[v16] = v18;
  *(_QWORD *)&v15[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_cancellable] = 0;
  v19 = OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_subject;
  v20 = sub_100146438(&qword_1002B6958);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  *(_QWORD *)&v15[v19] = PassthroughSubject.init()();
  *(_QWORD *)&v15[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_runningTasks] = &_swiftEmptyArrayStorage;
  swift_beginAccess(v14, v38, 33, 0);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  v37[0] = v32;
  v37[1] = v33;
  Published.init(initialValue:)(v37, &type metadata for SLoadableViewState);
  swift_endAccess(v38);
  v21 = &v15[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration];
  v22 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v21 + 2) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v21 + 3) = v22;
  *((_OWORD *)v21 + 4) = *(_OWORD *)(a3 + 64);
  *((_WORD *)v21 + 40) = *(_WORD *)(a3 + 80);
  v23 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v21 = *(_OWORD *)a3;
  *((_OWORD *)v21 + 1) = v23;
  *(_QWORD *)&v15[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_operationQueue] = a4;
  v24 = (objc_class *)type metadata accessor for STransferMetricsStore(0);
  v25 = objc_allocWithZone(v24);
  v26 = a4;
  v27 = objc_msgSend(v25, "init");
  swift_beginAccess(&v15[OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel__store], v38, 33, 0);
  v37[0] = v27;
  Published.init(initialValue:)(v37, v24);
  swift_endAccess(v38);
  v28 = *(void **)&v6[v13];
  v29 = v34;
  *(_QWORD *)&v6[v13] = v34;
  v30 = v29;

  v36.receiver = v15;
  v36.super_class = ObjectType;
  return objc_msgSendSuper2(&v36, "init");
}

uint64_t sub_1001A11E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  void *object;
  uint64_t v9;
  Swift::String v10;
  _QWORD v11[3];
  _BYTE v12[8];
  int *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for STransferMetrics(0);
  v3 = *(_QWORD *)(a1 + *(int *)(v2 + 64));
  if (v3)
  {
    v13 = sub_1001593B0();
    swift_errorRetain(v3);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v15 = v4;
    v5._countAndFlagsBits = 8229;
    v5._object = (void *)0xE200000000000000;
    String.append(_:)(v5);
    swift_getErrorValue(v3, v12, v11);
    v6._countAndFlagsBits = Error.localizedDescription.getter(v11[1], v11[2]);
    object = v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(object);
    swift_errorRelease(v3);
  }
  else
  {
    if ((*(_BYTE *)(a1 + *(int *)(v2 + 68)) & 1) != 0)
      return 0x6D6F632025303031;
    v13 = sub_1001593B0();
    v14 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v15 = v9;
    v10._countAndFlagsBits = 37;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
  }
  return v14;
}

uint64_t sub_1001A1308(uint64_t a1, unsigned __int8 a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (double)sub_10015A468(a1, a2) * 0.0009765625;
  if (v2 >= 1024.0)
  {
    v6 = v2 * 0.0009765625;
    if (v6 >= 999.0)
    {
      v8 = v6 * 0.0009765625;
      v9 = sub_100146438((uint64_t *)&unk_1002B57E0);
      v10 = swift_allocObject(v9, 72, 7);
      v4 = v10;
      *(_OWORD *)(v10 + 16) = xmmword_1002402A0;
      *(_QWORD *)(v10 + 56) = &type metadata for Double;
      *(_QWORD *)(v10 + 64) = &protocol witness table for Double;
      if (v8 >= 999.0)
      {
        *(double *)(v10 + 32) = v8 * 0.0009765625;
        v5 = 0x425466322E25;
      }
      else
      {
        *(double *)(v10 + 32) = v8;
        v5 = 0x424766322E25;
      }
    }
    else
    {
      v7 = sub_100146438((uint64_t *)&unk_1002B57E0);
      v4 = swift_allocObject(v7, 72, 7);
      *(_OWORD *)(v4 + 16) = xmmword_1002402A0;
      *(_QWORD *)(v4 + 56) = &type metadata for Double;
      *(_QWORD *)(v4 + 64) = &protocol witness table for Double;
      *(double *)(v4 + 32) = v6;
      v5 = 0x424D66322E25;
    }
  }
  else
  {
    v3 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v4 = swift_allocObject(v3, 72, 7);
    *(_OWORD *)(v4 + 16) = xmmword_1002402A0;
    *(_QWORD *)(v4 + 56) = &type metadata for Double;
    *(_QWORD *)(v4 + 64) = &protocol witness table for Double;
    *(double *)(v4 + 32) = v2;
    v5 = 0x424B66322E25;
  }
  return String.init(format:_:)(v5, 0xE600000000000000, v4);
}

double sub_1001A14A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v25 = a4;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v11 - 8);
  v27 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100192474();
  v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  v16 = swift_allocObject(&unk_100265838, 24, 7);
  swift_unknownObjectUnownedInit(v16 + 16, v4);
  v17 = swift_allocObject(a2, 32, 7);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = a1;
  aBlock[4] = a3;
  v31 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = v25;
  v18 = _Block_copy(aBlock);
  swift_retain(v16);
  static DispatchQoS.unspecified.getter(a1);
  v29 = _swiftEmptyArrayStorage;
  v19 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v21 = sub_10014BEC0((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v20, v21, v8, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v27);
  v22 = v31;
  swift_release(v16);
  *(_QWORD *)&result = swift_release(v22).n128_u64[0];
  return result;
}

double sub_1001A16DC(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100192474();
  v12 = (void *)static OS_dispatch_queue.main.getter(v11);
  v13 = swift_allocObject(&unk_100265838, 24, 7);
  swift_unknownObjectUnownedInit(v13 + 16, v2);
  v14 = (_QWORD *)swift_allocObject(&unk_1002658B0, 40, 7);
  v14[2] = v13;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = sub_1001A1B68;
  v27 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_1002658C8;
  v15 = _Block_copy(aBlock);
  swift_retain(v13);
  v16 = a1;
  static DispatchQoS.unspecified.getter(a2);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v19 = sub_10014BEC0((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
  v20 = v27;
  swift_release(v13);
  *(_QWORD *)&result = swift_release(v20).n128_u64[0];
  return result;
}

uint64_t sub_1001A1AA8()
{
  uint64_t v0;

  swift_unknownObjectUnownedDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A1ACC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_errorRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

double sub_1001A1B08()
{
  uint64_t v0;

  return sub_1001A0740(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1001A1B14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1001A1B24(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1001A1B34()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001A1B68()
{
  uint64_t v0;

  return sub_10019FEF0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001A1B78()
{
  uint64_t v0;

  return sub_10019FEF0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001A1B98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A1BC4()
{
  uint64_t v0;

  return sub_10019FC10(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001A1BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100146438(&qword_1002B6820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001A1C24(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_10019F444(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_1001A1C44(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_1001A1C50(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_1001A1C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1001A1CDC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10019E7A4(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

id sub_1001A1D58()
{
  id v0;
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t ObjCClassFromMetadata;
  uint64_t v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  NSString *v11;
  NSString v12;

  v0 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewFlowLayout), "init");
  v1 = objc_msgSend(objc_allocWithZone((Class)UICollectionView), "initWithFrame:collectionViewLayout:", v0, 0.0, 0.0, 0.0, 0.0);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v2);

  objc_msgSend(v1, "setBackgroundColor:", v3);
  v4 = type metadata accessor for SecondVCCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v4);
  v6 = aSecondvccell_0[1];
  swift_bridgeObjectRetain(aSecondvccell_0[1]);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v1, "registerClass:forCellWithReuseIdentifier:", ObjCClassFromMetadata, v7);

  v8 = type metadata accessor for CollectionHeaderSuplementaryCell();
  v9 = swift_getObjCClassFromMetadata(v8);
  v10 = off_1002B4BE8;
  v11 = UICollectionElementKindSectionHeader;
  swift_bridgeObjectRetain(v10);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  objc_msgSend(v1, "registerClass:forSupplementaryViewOfKind:withReuseIdentifier:", v9, v11, v12);

  return v1;
}

void sub_1001A1F0C()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  Class isa;
  objc_super v33;

  v33.receiver = v0;
  v33.super_class = (Class)type metadata accessor for CoreTelephonyMetricDetails();
  objc_msgSendSuper2(&v33, "viewDidLoad");
  v1 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_collectionView];
  objc_msgSend(v1, "setDataSource:", v0);
  objc_msgSend(v1, "setDelegate:", v0);
  objc_msgSend(v1, "setAlwaysBounceVertical:", 1);
  v2 = objc_msgSend(v0, "view");
  if (!v2)
  {
    __break(1u);
    goto LABEL_8;
  }
  v3 = v2;
  objc_msgSend(v2, "addSubview:", v1);

  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100240400;
  v6 = objc_msgSend(v1, "topAnchor");
  v7 = objc_msgSend(v0, "view");
  if (!v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, "safeAreaLayoutGuide");

  v10 = objc_msgSend(v9, "topAnchor");
  v11 = objc_msgSend(v6, "constraintEqualToAnchor:", v10);

  *(_QWORD *)(v5 + 32) = v11;
  v12 = objc_msgSend(v1, "leadingAnchor");
  v13 = objc_msgSend(v0, "view");
  if (!v13)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v14 = v13;
  v15 = objc_msgSend(v13, "safeAreaLayoutGuide");

  v16 = objc_msgSend(v15, "leadingAnchor");
  v17 = objc_msgSend(v12, "constraintEqualToAnchor:", v16);

  *(_QWORD *)(v5 + 40) = v17;
  v18 = objc_msgSend(v1, "trailingAnchor");
  v19 = objc_msgSend(v0, "view");
  if (!v19)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v20 = v19;
  v21 = objc_msgSend(v19, "safeAreaLayoutGuide");

  v22 = objc_msgSend(v21, "trailingAnchor");
  v23 = objc_msgSend(v18, "constraintEqualToAnchor:", v22);

  *(_QWORD *)(v5 + 48) = v23;
  v24 = objc_msgSend(v1, "bottomAnchor");
  v25 = objc_msgSend(v0, "view");
  if (v25)
  {
    v26 = v25;
    v27 = (void *)objc_opt_self(NSLayoutConstraint);
    v28 = objc_msgSend(v26, "safeAreaLayoutGuide");

    v29 = objc_msgSend(v28, "bottomAnchor");
    v30 = objc_msgSend(v24, "constraintEqualToAnchor:", v29);

    *(_QWORD *)(v5 + 56) = v30;
    specialized Array._endMutation()(v31);
    sub_10014C4C4();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v5);
    objc_msgSend(v27, "activateConstraints:", isa);

    return;
  }
LABEL_11:
  __break(1u);
}

id sub_1001A2330(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v6;
  uint64_t v7;
  char *v8;
  NSString v9;
  id v10;
  objc_super v12;

  *(_QWORD *)&v3[OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_bandItems] = _swiftEmptyArrayStorage;
  v6 = &v3[OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_sectionTitle];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0xE000000000000000;
  v7 = OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_collectionView;
  v8 = v3;
  *(_QWORD *)&v3[v7] = sub_1001A1D58();

  if (a2)
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v9 = 0;
  }
  v12.receiver = v8;
  v12.super_class = (Class)type metadata accessor for CoreTelephonyMetricDetails();
  v10 = objc_msgSendSuper2(&v12, "initWithNibName:bundle:", v9, a3);

  return v10;
}

id sub_1001A2460(void *a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  char *v5;
  id v6;
  objc_super v8;

  *(_QWORD *)&v1[OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_bandItems] = _swiftEmptyArrayStorage;
  v3 = &v1[OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_sectionTitle];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0xE000000000000000;
  v4 = OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_collectionView;
  v5 = v1;
  *(_QWORD *)&v1[v4] = sub_1001A1D58();

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for CoreTelephonyMetricDetails();
  v6 = objc_msgSendSuper2(&v8, "initWithCoder:", a1);

  return v6;
}

void sub_1001A251C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_bandItems));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_sectionTitle + 8));

}

id sub_1001A255C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreTelephonyMetricDetails();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CoreTelephonyMetricDetails()
{
  return objc_opt_self(_TtC13FTMInternal_426CoreTelephonyMetricDetails);
}

unint64_t sub_1001A2614(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSString v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  id v21;
  NSString v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v2 = v1;
  v4 = aSecondvccell_0[1];
  swift_bridgeObjectRetain(aSecondvccell_0[1]);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(a1, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v5, isa);

  v8 = type metadata accessor for SecondVCCell();
  v9 = swift_dynamicCastClass(v7, v8);
  if (!v9)
  {

    return (unint64_t)objc_msgSend(objc_allocWithZone((Class)UICollectionViewCell), "init");
  }
  v10 = v9;
  v11 = sub_100165080();
  result = IndexPath.item.getter();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v13 = result;
  v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_bandItems);
  if (result >= *(_QWORD *)(v14 + 16))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v15 = type metadata accessor for Metric(0);
  v16 = objc_retain(*(id *)(v14
                          + ((*(unsigned __int8 *)(*(_QWORD *)(v15 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v15 - 8) + 80))
                          + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v13
                          + *(int *)(v15 + 36)));
  v17 = objc_msgSend(v16, "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v19 = v18;

  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  objc_msgSend(v11, "setText:", v20);

  v21 = sub_1001650F8();
  v22 = String._bridgeToObjectiveC()();
  objc_msgSend(v21, "setText:", v22);

  v23 = sub_100165258();
  v24 = sub_100165080();
  v25 = objc_msgSend(v24, "text");

  if (v25)
  {

    v26 = sub_100165080();
    v27 = objc_msgSend(v26, "text");

    if (v27)
    {
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v30 = v29;

      if (v28 || v30 != 0xE000000000000000)
      {
        v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, 0, 0xE000000000000000, 0);
        swift_bridgeObjectRelease(v30);
      }
      else
      {
        swift_bridgeObjectRelease(0xE000000000000000);
        v31 = 1;
      }
    }
    else
    {
      v31 = 0;
    }
  }
  else
  {
    v31 = 1;
  }
  objc_msgSend(v23, "setHidden:", v31 & 1);

  return v10;
}

id sub_1001A2994(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  NSString v15;
  __int128 *v16;
  NSString v17;
  Class isa;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  NSString v25;

  v4 = v3;
  v8 = objc_msgSend(objc_allocWithZone((Class)UICollectionReusableView), "init");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
  if (v9 == a2 && v10 == a3)
  {
    v14 = swift_bridgeObjectRelease(a3);
  }
  else
  {
    v12 = v10;
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v9, v10, 0);
    v14 = swift_bridgeObjectRelease(v12);
    if ((v13 & 1) == 0)
      return v8;
  }
  IndexPath.section.getter(v14);
  v15 = String._bridgeToObjectiveC()();
  v16 = off_1002B4BE8;
  swift_bridgeObjectRetain(off_1002B4BE8);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v19 = objc_msgSend(a1, "dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:", v15, v17, isa);

  v20 = type metadata accessor for CollectionHeaderSuplementaryCell();
  v21 = swift_dynamicCastClass(v19, v20);
  if (v21)
  {
    v22 = (id)v21;
    v23 = sub_1001621F0();
    v24 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13FTMInternal_426CoreTelephonyMetricDetails_sectionTitle + 8);
    swift_bridgeObjectRetain(v24);
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    objc_msgSend(v23, "setText:", v25);

  }
  else
  {

    v22 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewCell), "init");
  }

  return v22;
}

double sub_1001A2D60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  double result;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

id sub_1001A2D9C(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  char *v10;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_animationDuration] = 0x3FE0000000000000;
  v10 = &v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_cellId];
  strcpy(&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_cellId], "MenuBarCellId");
  *((_WORD *)v10 + 7) = -4864;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_menuImageNames] = &off_100262210;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_numberOfSegments] = 2;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_horizontalViewBarHeight] = 0x4008000000000000;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_segmentWidthMultiplier] = 0x4000000000000000;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar____lazy_storage___collectionView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_horizontalBarLeftAnchorConstraint] = 0;
  v12.receiver = v4;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, "initWithFrame:", a1, a2, a3, a4);
}

uint64_t type metadata accessor for MenuBar()
{
  return objc_opt_self(_TtC13FTMInternal_47MenuBar);
}

unint64_t sub_1001A2FA0(void *a1)
{
  uint64_t v1;
  NSString v3;
  Class isa;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  id v15;
  NSString v16;
  id v17;

  v3 = String._bridgeToObjectiveC()();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(a1, "dequeueReusableCellWithReuseIdentifier:forIndexPath:", v3, isa);

  v6 = type metadata accessor for MenuCell();
  v7 = swift_dynamicCastClass(v5, v6);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = *(id *)(v7 + OBJC_IVAR____TtC13FTMInternal_48MenuCell_menuIconImageView);
    result = IndexPath.item.getter();
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_47MenuBar_menuImageNames);
      if (result < *(_QWORD *)(v11 + 16))
      {
        v12 = *(_QWORD *)(v11 + 16 * result + 40);
        swift_bridgeObjectRetain(v12);
        v13 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v12);
        v14 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v13);

        objc_msgSend(v9, "setImage:", v14);
        v15 = v5;
        v16 = String._bridgeToObjectiveC()();
        v17 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v16);

        objc_msgSend(v8, "setTintColor:", v17);
        return (unint64_t)v8;
      }
    }
    __break(1u);
  }
  else
  {

    return (unint64_t)objc_msgSend(objc_allocWithZone((Class)UICollectionViewCell), "init");
  }
  return result;
}

uint64_t sub_1001A3244(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;

  if ((result & 1) != 0)
  {
    v2 = a2 + OBJC_IVAR____TtC13FTMInternal_47MenuBar_delegate;
    result = swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC13FTMInternal_47MenuBar_delegate);
    if (result)
    {
      v3 = result;
      v4 = *(_QWORD *)(v2 + 8);
      ObjectType = swift_getObjectType(result);
      v6 = IndexPath.item.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(v6, ObjectType, v4);
      return swift_unknownObjectRelease(v3);
    }
  }
  return result;
}

id sub_1001A3474()
{
  id v0;
  NSString v1;
  id v2;
  NSString v3;
  id v4;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v1);

  objc_msgSend(v0, "setImage:", v2);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v3);

  objc_msgSend(v0, "setTintColor:", v4);
  return v0;
}

void sub_1001A3614()
{
  char *v0;
  void *v1;
  NSString v2;
  id v3;

  v1 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_48MenuCell_menuIconImageView];
  objc_msgSend(v0, "isSelected");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v2);

  objc_msgSend(v1, "setTintColor:", v3);
}

void sub_1001A381C()
{
  char *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  double v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  Class isa;

  v1 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_48MenuCell_menuIconImageView];
  objc_msgSend(v0, "addSubview:", v1);
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v2 = (void *)objc_opt_self(NSLayoutConstraint);
  v3 = sub_100146438((uint64_t *)&unk_1002B42B0);
  v4 = swift_allocObject(v3, 56, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1002418A0;
  v5 = objc_msgSend(v1, "heightAnchor");
  v6 = *(double *)&v0[OBJC_IVAR____TtC13FTMInternal_48MenuCell_menuCellSize];
  v7 = objc_msgSend(v5, "constraintEqualToConstant:", v6);

  *(_QWORD *)(v4 + 32) = v7;
  v8 = objc_msgSend(v1, "widthAnchor");
  v9 = objc_msgSend(v8, "constraintEqualToConstant:", v6);

  *(_QWORD *)(v4 + 40) = v9;
  v10 = objc_msgSend(v1, "centerXAnchor");
  v11 = objc_msgSend(v0, "centerXAnchor");
  v12 = objc_msgSend(v10, "constraintEqualToAnchor:", v11);

  *(_QWORD *)(v4 + 48) = v12;
  specialized Array._endMutation()(v13);
  sub_10014C4C4();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v2, "activateConstraints:", isa);

}

id sub_1001A39F8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MenuCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MenuCell()
{
  return objc_opt_self(_TtC13FTMInternal_48MenuCell);
}

void sub_1001A3A58()
{
  char *v0;
  char *v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_animationDuration] = 0x3FE0000000000000;
  v1 = &v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_cellId];
  strcpy(&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_cellId], "MenuBarCellId");
  *((_WORD *)v1 + 7) = -4864;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_menuImageNames] = &off_100262250;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_numberOfSegments] = 2;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_horizontalViewBarHeight] = 0x4008000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_segmentWidthMultiplier] = 0x4000000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar____lazy_storage___collectionView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13FTMInternal_47MenuBar_horizontalBarLeftAnchorConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100211390, "FTMInternal_4/MenuBar.swift", 27, 2, 73, 0);
  __break(1u);
}

void sub_1001A3B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double Width;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  void **aBlock;
  uint64_t v26;
  double (*v27)(uint64_t, uint64_t);
  void *v28;
  void *v29;
  uint64_t v30;
  CGRect v31;

  v4 = v3;
  v6 = type metadata accessor for IndexPath(0, a2, a3);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v10 = IndexPath.item.getter(v9);
  objc_msgSend(v4, "frame");
  Width = CGRectGetWidth(v31);
  v12 = *(void **)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_horizontalBarLeftAnchorConstraint];
  if (v12)
    objc_msgSend(v12, "setConstant:", Width * (double)v10 / *(double *)&v4[OBJC_IVAR____TtC13FTMInternal_47MenuBar_segmentWidthMultiplier]);
  v13 = (void *)objc_opt_self(UIView);
  v14 = swift_allocObject(&unk_100265A90, 24, 7);
  *(_QWORD *)(v14 + 16) = v4;
  v29 = sub_1001A3DB4;
  v30 = v14;
  aBlock = _NSConcreteStackBlock;
  v26 = 1107296256;
  v27 = (double (*)(uint64_t, uint64_t))sub_1001BE428;
  v28 = &unk_100265AA8;
  v15 = _Block_copy(&aBlock);
  v16 = v30;
  v17 = v4;
  v18 = swift_release(v16);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v18);
  v19 = *(unsigned __int8 *)(v7 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = swift_allocObject(&unk_100265AE0, v20 + v8, v19 | 7);
  *(_QWORD *)(v21 + 16) = v17;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v21 + v20, (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v29 = sub_1001A3E50;
  v30 = v21;
  aBlock = _NSConcreteStackBlock;
  v26 = 1107296256;
  v27 = sub_1001A2D60;
  v28 = &unk_100265AF8;
  v22 = _Block_copy(&aBlock);
  v23 = v30;
  v24 = v17;
  swift_release(v23);
  objc_msgSend(v13, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 0x20000, v15, v22, 0.5, 0.0, 1.0, 1.0);
  _Block_release(v22);
  _Block_release(v15);
}

uint64_t sub_1001A3D90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1001A3DB4()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "layoutIfNeeded");
}

uint64_t sub_1001A3DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1001A3DD4(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1001A3DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for IndexPath(0, a2, a3);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = v7 + *(_QWORD *)(v5 + 64);
  v9 = v6 | 7;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3 + v7, v4);
  return swift_deallocObject(v3, v8, v9);
}

uint64_t sub_1001A3E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  type metadata accessor for IndexPath(0, a2, a3);
  return sub_1001A3244(a1, *(_QWORD *)(v3 + 16));
}

unint64_t sub_1001A3E9C()
{
  unint64_t result;

  result = qword_1002B6C58;
  if (!qword_1002B6C58)
  {
    result = swift_getWitnessTable(&unk_100242FB8, &type metadata for SPApplicationCategories);
    atomic_store(result, (unint64_t *)&qword_1002B6C58);
  }
  return result;
}

uint64_t sub_1001A3EE0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001A3F20 + 4 * byte_100242EF0[a1]))(0x63696E756D6D6F43, 0xED00006E6F697461);
}

uint64_t sub_1001A3F20()
{
  return 0x6E696D6165727453;
}

uint64_t sub_1001A3F40()
{
  return 0x7373656E69737542;
}

uint64_t sub_1001A3F58()
{
  return 0x72656874616557;
}

uint64_t sub_1001A3F70()
{
  return 0x656974696C697455;
}

uint64_t sub_1001A3F90()
{
  return 0x6C6576617254;
}

uint64_t sub_1001A3FA4()
{
  return 0x7374726F7053;
}

unint64_t sub_1001A3FB8()
{
  return 0xD000000000000011;
}

uint64_t sub_1001A3FD4()
{
  return 0x636E657265666552;
}

unint64_t sub_1001A4088()
{
  return 0xD000000000000014;
}

uint64_t sub_1001A40A8()
{
  return 0x73656D6147;
}

uint64_t sub_1001A40BC()
{
  return 0x65636E616E6946;
}

uint64_t sub_1001A40D4()
{
  return 0x6961747265746E45;
}

uint64_t sub_1001A40F8()
{
  return 0x6F69746163756445;
}

uint64_t sub_1001A4118()
{
  return 0x736B6F6F42;
}

uint64_t sub_1001A412C()
{
  return 7104878;
}

uint64_t sub_1001A413C()
{
  return 0x6C61636964654DLL;
}

uint64_t sub_1001A4154()
{
  return 0x6E776F6E6B6E55;
}

uint64_t sub_1001A416C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001A454C(*a1);
  *a2 = result;
  return result;
}

void sub_1001A4194(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1002430D8[*v1];
}

void sub_1001A41AC(_QWORD *a1@<X8>)
{
  *a1 = &off_100262290;
}

uint64_t sub_1001A41BC()
{
  unsigned __int8 *v0;

  return sub_1001A3EE0(*v0);
}

BOOL sub_1001A41C4(char *a1, char *a2)
{
  return qword_1002430D8[*a1] == qword_1002430D8[*a2];
}

uint64_t sub_1001A41E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A43AC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A4244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A43AC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_1001A4290()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(qword_1002430D8[v1]);
  return Hasher._finalize()();
}

void sub_1001A42DC()
{
  char *v0;

  Hasher._combine(_:)(qword_1002430D8[*v0]);
}

Swift::Int sub_1001A4310(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_1002430D8[v2]);
  return Hasher._finalize()();
}

unint64_t sub_1001A4360()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B6C60;
  if (!qword_1002B6C60)
  {
    v1 = sub_1001464C4(&qword_1002B3E28);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B6C60);
  }
  return result;
}

unint64_t sub_1001A43AC()
{
  unint64_t result;

  result = qword_1002B6C68;
  if (!qword_1002B6C68)
  {
    result = swift_getWitnessTable(&unk_100243098, &type metadata for SPApplicationCategories);
    atomic_store(result, (unint64_t *)&qword_1002B6C68);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SPApplicationCategories(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE9)
    goto LABEL_17;
  if (a2 + 23 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 23) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 23;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 23;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 23;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x18;
  v8 = v6 - 24;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SPApplicationCategories(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 23 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 23) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE8)
    return ((uint64_t (*)(void))((char *)&loc_1001A44CC + 4 * byte_100242F0D[v4]))();
  *a1 = a2 + 23;
  return ((uint64_t (*)(void))((char *)sub_1001A4500 + 4 * byte_100242F08[v4]))();
}

uint64_t sub_1001A4500(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A4508(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A4510);
  return result;
}

uint64_t sub_1001A451C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A4524);
  *(_BYTE *)result = a2 + 23;
  return result;
}

uint64_t sub_1001A4528(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A4530(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SPApplicationCategories()
{
  return &type metadata for SPApplicationCategories;
}

uint64_t sub_1001A454C(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;

  switch(a1)
  {
    case 6000:
      result = 2;
      break;
    case 6001:
      result = 3;
      break;
    case 6002:
      result = 4;
      break;
    case 6003:
      result = 5;
      break;
    case 6004:
      result = 6;
      break;
    case 6005:
      result = 7;
      break;
    case 6006:
      result = 8;
      break;
    case 6007:
      result = 9;
      break;
    case 6008:
      result = 10;
      break;
    case 6009:
      result = 11;
      break;
    case 6010:
      result = 12;
      break;
    case 6011:
      result = 13;
      break;
    case 6012:
      result = 14;
      break;
    case 6013:
      result = 15;
      break;
    case 6014:
      result = 16;
      break;
    case 6015:
      result = 17;
      break;
    case 6016:
      result = 18;
      break;
    case 6017:
      result = 19;
      break;
    case 6018:
      result = 20;
      break;
    case 6019:
      result = 21;
      break;
    case 6020:
      result = 22;
      break;
    default:
      if (a1 == 9001)
        v2 = 1;
      else
        v2 = 23;
      if (a1 == 9000)
        result = 0;
      else
        result = v2;
      break;
  }
  return result;
}

uint64_t *sub_1001A4640(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SymbolRenderingMode(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain(v16);
  }
  return v4;
}

uint64_t sub_1001A4704(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

_QWORD *sub_1001A4764(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SymbolRenderingMode(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

_QWORD *sub_1001A47FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

_OWORD *sub_1001A48AC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_1001A4924(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t sub_1001A49B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A49C0);
}

uint64_t sub_1001A49C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for SymbolRenderingMode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1001A4A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A4A48);
}

uint64_t sub_1001A4A48(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for SymbolRenderingMode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SSFImage(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B6CC8;
  if (!qword_1002B6CC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SSFImage);
  return result;
}

uint64_t sub_1001A4AF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1002431A8;
  result = type metadata accessor for SymbolRenderingMode(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1002431C0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001A4B74(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100247D14, 1);
}

double sub_1001A4B84@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _OWORD v29[2];
  uint64_t v30;
  char v31;
  _BYTE v32[32];
  __int128 v33;
  __int128 v34;
  char v35;

  v3 = sub_100146438(&qword_1002B6D08);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SSFImage(0);
  v7 = (uint64_t *)((char *)v1 + *(int *)(v6 + 24));
  v8 = v7[1];
  if (v8)
  {
    v9 = *v7;
    v10 = static HorizontalAlignment.center.getter(v6);
    sub_1001A4D4C(v1, v9, v8, (uint64_t)v32);
    v27 = v10;
    v28 = xmmword_100242C50;
    *(_QWORD *)&v29[0] = *(_QWORD *)v32;
    *(_OWORD *)((char *)v29 + 8) = *(_OWORD *)&v32[8];
    *((_QWORD *)&v29[1] + 1) = v32[24];
    v30 = v33;
    v31 = 0;
  }
  else
  {
    v11 = v6;
    v12 = *v1;
    v13 = v1[1];
    swift_bridgeObjectRetain(v13);
    v14 = Image.init(systemName:)(v12, v13);
    v15 = (char *)v1 + *(int *)(v11 + 20);
    v16 = type metadata accessor for SymbolRenderingMode(0);
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v5, v15, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v5, 0, 1, v16);
    v18 = Image.symbolRenderingMode(_:)(v5, v14);
    swift_release(v14);
    sub_1001A4EE0((uint64_t)v5);
    v27 = v18;
    v28 = 0u;
    memset(v29, 0, sizeof(v29));
    v30 = 0;
    v31 = 1;
  }
  v19 = sub_100146438(&qword_1002B6D10);
  v20 = sub_1001A4F20();
  _ConditionalContent<>.init(storage:)(&v27, v19, &type metadata for Image, v20, &protocol witness table for Image);
  result = *(double *)v32;
  v22 = *(_OWORD *)&v32[16];
  v23 = v33;
  v24 = v34;
  v25 = v35;
  *(_OWORD *)a1 = *(_OWORD *)v32;
  *(_OWORD *)(a1 + 16) = v22;
  *(_OWORD *)(a1 + 32) = v23;
  *(_OWORD *)(a1 + 48) = v24;
  *(_BYTE *)(a1 + 64) = v25;
  return result;
}

uint64_t sub_1001A4D4C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD v26[2];

  v8 = sub_100146438(&qword_1002B6D08);
  __chkstk_darwin(v8);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = a1[1];
  swift_bridgeObjectRetain(v12);
  v13 = Image.init(systemName:)(v11, v12);
  v14 = (char *)a1 + *(int *)(type metadata accessor for SSFImage(0) + 20);
  v15 = type metadata accessor for SymbolRenderingMode(0);
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v10, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v10, 0, 1, v15);
  v17 = Image.symbolRenderingMode(_:)(v10, v13);
  swift_release(v13);
  sub_1001A4EE0((uint64_t)v10);
  v26[0] = a2;
  v26[1] = a3;
  v18 = sub_10014654C();
  swift_bridgeObjectRetain(a3);
  v19 = Text.init<A>(_:)(v26, &type metadata for String, v18);
  v21 = v20;
  v23 = v22;
  *(_QWORD *)a4 = v17;
  *(_QWORD *)(a4 + 8) = v19;
  LOBYTE(v13) = v24 & 1;
  *(_QWORD *)(a4 + 16) = v20;
  *(_BYTE *)(a4 + 24) = v24 & 1;
  *(_QWORD *)(a4 + 32) = v22;
  swift_retain(v17);
  sub_10014BE1C(v19, v21, v13);
  swift_bridgeObjectRetain(v23);
  sub_10014BE2C(v19, v21, v13);
  swift_release(v17);
  return swift_bridgeObjectRelease(v23);
}

uint64_t sub_1001A4EE0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100146438(&qword_1002B6D08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001A4F20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B6D18;
  if (!qword_1002B6D18)
  {
    v1 = sub_1001464C4(&qword_1002B6D10);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B6D18);
  }
  return result;
}

unint64_t sub_1001A4F70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B6D20;
  if (!qword_1002B6D20)
  {
    v1 = sub_1001464C4(&qword_1002B6D28);
    sub_1001A4F20();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B6D20);
  }
  return result;
}

uint64_t sub_1001A4FDC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001A50A0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001A5104()
{
  _QWORD *v0;
  unint64_t v1;
  int64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t result;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v2;
  if (!v1)
  {
    v8 = v2 + 1;
    if (__OFADD__(v2, 1))
      goto LABEL_26;
    v9 = (unint64_t)(v0[2] + 64) >> 6;
    if (v8 < v9)
    {
      v10 = v0[1];
      v11 = *(_QWORD *)(v10 + 8 * v8);
      if (v11)
      {
LABEL_8:
        v4 = (v11 - 1) & v11;
        v5 = __clz(__rbit64(v11)) + (v8 << 6);
        v3 = v8;
        goto LABEL_3;
      }
      v12 = v2 + 2;
      v3 = v2 + 1;
      if (v2 + 2 < v9)
      {
        v11 = *(_QWORD *)(v10 + 8 * v12);
        if (v11)
        {
LABEL_11:
          v8 = v12;
          goto LABEL_8;
        }
        v3 = v2 + 2;
        if (v2 + 3 < v9)
        {
          v11 = *(_QWORD *)(v10 + 8 * (v2 + 3));
          if (v11)
          {
            v8 = v2 + 3;
            goto LABEL_8;
          }
          v12 = v2 + 4;
          v3 = v2 + 3;
          if (v2 + 4 < v9)
          {
            v11 = *(_QWORD *)(v10 + 8 * v12);
            if (v11)
              goto LABEL_11;
            v8 = v2 + 5;
            v3 = v2 + 4;
            if (v2 + 5 < v9)
            {
              v11 = *(_QWORD *)(v10 + 8 * v8);
              if (v11)
                goto LABEL_8;
              v3 = v9 - 1;
              v13 = v2 + 6;
              while (v9 != v13)
              {
                v11 = *(_QWORD *)(v10 + 8 * v13++);
                if (v11)
                {
                  v8 = v13 - 1;
                  goto LABEL_8;
                }
              }
            }
          }
        }
      }
    }
    v7 = 0;
    v0[3] = v3;
    v0[4] = 0;
    return v7;
  }
  v4 = (v1 - 1) & v1;
  v5 = __clz(__rbit64(v1)) | (v2 << 6);
LABEL_3:
  v6 = *(_QWORD *)(*(_QWORD *)(*v0 + 48) + 16 * v5 + 8);
  v0[3] = v3;
  v0[4] = v4;
  v7 = v0[5];
  if (!__OFADD__(v7, 1))
  {
    v0[5] = v7 + 1;
    swift_bridgeObjectRetain(v6);
    return v7;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void sub_1001A5270()
{
  qword_1002BF0F8 = (uint64_t)&off_1002622B8;
}

char *sub_1001A5284(void *a1, void *a2)
{
  char *v2;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  char *v11;
  void *v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_super v21;

  v5 = &v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_metricIDKey];
  strcpy(&v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_metricIDKey], "kKeyMetricID");
  v5[13] = 0;
  *((_WORD *)v5 + 7) = -5120;
  v6 = &v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey];
  *(_QWORD *)v6 = 0x6C79615079654B6BLL;
  *((_QWORD *)v6 + 1) = 0xEB0000000064616FLL;
  v7 = &v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_profileIDKey];
  strcpy(&v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_profileIDKey], "kKeyProfileID");
  *((_WORD *)v7 + 7) = -4864;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_edgeCaseIceMetrics] = &off_100260390;
  v8 = OBJC_IVAR____TtC13FTMInternal_413MetricService_dlbwlookup;
  *(_QWORD *)&v2[v8] = sub_1001CB774((uint64_t)&off_100260430);
  *(_QWORD *)&v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_newMetricHexIds] = &off_1002604B0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_persistanceStore] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13FTMInternal_413MetricService_aBMShared] = a2;
  v9 = a1;
  v10 = a2;
  objc_msgSend(v10, "listen");
  v21.receiver = v2;
  v21.super_class = (Class)type metadata accessor for MetricService();
  v11 = (char *)objc_msgSendSuper2(&v21, "init");
  v12 = *(void **)&v11[OBJC_IVAR____TtC13FTMInternal_413MetricService_aBMShared];
  v13 = v11;
  v14 = objc_msgSend(v12, "setDelegate:", v13);
  if (qword_1002B3A10 != -1)
    v14 = (id)swift_once(&qword_1002B3A10, sub_1001747E0);
  v18 = qword_1002BF000;
  v19 = static os_log_type_t.default.getter(v14, v15, v16, v17);
  os_log(_:dso:log:type:_:)("MetricService -  init()", 23, 2, &_mh_execute_header, v18, v19, _swiftEmptyArrayStorage);

  return v13;
}

void sub_1001A5460(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  __CFString **v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  void *object;
  _UNKNOWN **v45;
  __int128 v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSString *v59;
  Class v60;
  uint64_t ObjCClassMetadata;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  id v73;
  NSData v74;
  uint64_t v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  void *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  _QWORD *v131;
  id v132;
  uint64_t v133;
  __int128 v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  unint64_t v141;
  Swift::String v142;
  _QWORD v143[2];
  _QWORD v144[5];
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  uint64_t countAndFlagsBits;
  void *v150;
  int v151;
  __int128 v152;
  Swift::String v153;
  __int128 v154;
  __int128 v155;
  void *v156;
  __int128 v157;
  __int128 v158;
  int v159;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v138 = *(_QWORD *)(v4 - 8);
  v139 = v4;
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v126 - v8;
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_413MetricService_metricIDKey);
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13FTMInternal_413MetricService_metricIDKey + 8);
  *(_QWORD *)&v157 = v10;
  *((_QWORD *)&v157 + 1) = v11;
  swift_bridgeObjectRetain_n(v11, 2);
  v12 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v157, &type metadata for String);
  v140 = a1;
  v13 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", v12);
  swift_unknownObjectRelease(v12);
  if (v13)
  {
    _bridgeAnyObjectToAny(_:)(&v157, v13);
    swift_unknownObjectRelease(v13);
  }
  else
  {
    v157 = 0u;
    v158 = 0u;
  }
  sub_10014BC64((uint64_t)&v157, (uint64_t)&v152, (uint64_t *)&unk_1002B5670);
  if (!v153._object)
  {
    swift_bridgeObjectRelease(v11);
    v31 = sub_10014BDE0((uint64_t)&v152, (uint64_t *)&unk_1002B5670);
    goto LABEL_14;
  }
  if ((swift_dynamicCast(&v148, &v152, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
  {
    v31 = swift_bridgeObjectRelease(v11);
LABEL_14:
    if (qword_1002B39E8 != -1)
      goto LABEL_77;
    goto LABEL_15;
  }
  v14 = v148;
  swift_bridgeObjectRelease(v11);
  v15 = sub_1001548C8(0, (unint64_t *)&unk_1002B6E10, NSString_ptr);
  v16 = (void *)NSString.init(stringLiteral:)("%2X", v126);
  v137 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v17 = swift_allocObject(v137, 72, 7);
  v134 = xmmword_1002402A0;
  *(_OWORD *)(v17 + 16) = xmmword_1002402A0;
  *(_QWORD *)(v17 + 56) = &type metadata for Int;
  *(_QWORD *)(v17 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v17 + 32) = v14;
  v18 = (void *)NSString.init(format:_:)(v16, v17);

  if (qword_1002B3A78 != -1)
    v19 = swift_once(&qword_1002B3A78, sub_100183CA4);
  v23 = *(unsigned __int8 *)(qword_1002BF068 + 24);
  v132 = v18;
  v135 = v9;
  if (v23 == 1)
  {
    if (qword_1002B39E8 != -1)
      v19 = swift_once(&qword_1002B39E8, sub_100174680);
    v24 = qword_1002BEFD8;
    v25 = static os_log_type_t.default.getter(v19, v20, v21, v22);
    v26 = swift_allocObject(v137, 112, 7);
    *(_OWORD *)(v26 + 16) = xmmword_100242010;
    *(_QWORD *)(v26 + 56) = v15;
    *(_QWORD *)(v26 + 64) = sub_10017E27C(&qword_1002B5650, (unint64_t *)&unk_1002B6E10, NSString_ptr);
    v27 = v132;
    *(_QWORD *)(v26 + 32) = v132;
    *(_QWORD *)(v26 + 96) = sub_1001548C8(0, &qword_1002B6E98, NSDictionary_ptr);
    *(_QWORD *)(v26 + 104) = sub_10017E27C(&qword_1002B6EA0, &qword_1002B6E98, NSDictionary_ptr);
    v28 = v140;
    *(_QWORD *)(v26 + 72) = v140;
    v29 = v27;
    v30 = v28;
    os_log(_:dso:log:type:_:)("MetricValidator - processMetric - metricId: %{public}d - metric dictionary: %{public}@", 86, 2, &_mh_execute_header, v24, v25, v26);
    v9 = v135;
  }
  else
  {
    if (qword_1002B39E8 != -1)
      v19 = swift_once(&qword_1002B39E8, sub_100174680);
    v37 = qword_1002BEFD8;
    v38 = static os_log_type_t.default.getter(v19, v20, v21, v22);
    v26 = swift_allocObject(v137, 72, 7);
    *(_OWORD *)(v26 + 16) = v134;
    *(_QWORD *)(v26 + 56) = v15;
    *(_QWORD *)(v26 + 64) = sub_10017E27C(&qword_1002B5650, (unint64_t *)&unk_1002B6E10, NSString_ptr);
    *(_QWORD *)(v26 + 32) = v18;
    v39 = v18;
    os_log(_:dso:log:type:_:)("MetricValidator - processMetric - metricId: %{public}d", 54, 2, &_mh_execute_header, v37, v38, v26);
  }
  swift_bridgeObjectRelease(v26);
  v40 = off_100260000;
  v136 = 82;
  v129 = v7;
  v41 = 0;
  v131 = (_QWORD *)(v2 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey);
  v127 = OBJC_IVAR____TtC13FTMInternal_413MetricService_edgeCaseIceMetrics;
  v130 = (char *)&type metadata for Any + 8;
  v128 = 0x80000001002148A0;
  v42 = 82;
  v133 = v2;
  while (1)
  {
    if (v41 >= (unint64_t)v40[343])
    {
      __break(1u);
      goto LABEL_76;
    }
    v45 = &off_100260AA8 + 9 * v41;
    v46 = *((_OWORD *)v45 + 5);
    v154 = *((_OWORD *)v45 + 4);
    v155 = v46;
    v156 = v45[12];
    v47 = (Swift::String)*((_OWORD *)v45 + 3);
    v152 = *((_OWORD *)v45 + 2);
    v153 = v47;
    if ((_QWORD)v154 != v14)
      goto LABEL_21;
    v48 = *((_QWORD *)&v152 + 1);
    v142 = v153;
    v141 = v152;
    sub_1001ACE40(&v152);
    if (qword_1002B3AB0 != -1)
      swift_once(&qword_1002B3AB0, sub_1001A5270);
    v51 = *(_QWORD *)(qword_1002BF0F8 + 16);
    if (v51)
    {
      if (*(_QWORD *)(qword_1002BF0F8 + 32) == v14)
        goto LABEL_28;
      if (v51 != 1)
      {
        if (*(_QWORD *)(qword_1002BF0F8 + 40) == v14)
        {
LABEL_28:
          v52 = sub_1001A8D94(v14, v140, v49, v50);
          if (!v52)
          {

            sub_1001ACE94(&v152);
            return;
          }
          v53 = v52;
          sub_1001AA8F4(v52, (uint64_t)v9);
          v145 = sub_1001BE664((uint64_t)_swiftEmptyArrayStorage);
          sub_1001ABE24(v53, (uint64_t *)&v145, v54, v55);
          swift_bridgeObjectRelease(v53);
          v56 = v145;
          sub_1001AAA64(v145, &v152, (uint64_t)v9);
          swift_bridgeObjectRelease(v56);
          if ((*(_BYTE *)(qword_1002BF068 + 152) & 1) != 0)
          {
            (*(void (**)(char *, uint64_t))(v138 + 8))(v9, v139);
            sub_1001ACE94(&v152);
          }
          else
          {
            v43 = *(_DWORD *)(qword_1002BF068 + 148);
            swift_bridgeObjectRetain(v48);
            object = v142._object;
            swift_bridgeObjectRetain(v142._object);
            sub_1001ACE94(&v152);
            *(_QWORD *)&v157 = v141;
            *((_QWORD *)&v157 + 1) = v48;
            *(_QWORD *)&v158 = v142._countAndFlagsBits;
            *((_QWORD *)&v158 + 1) = object;
            v159 = v43;
            sub_1001AC8D0(&v157);
            swift_bridgeObjectRelease(object);
            swift_bridgeObjectRelease(v48);
            (*(void (**)(char *, uint64_t))(v138 + 8))(v9, v139);
          }
          goto LABEL_21;
        }
        if (v51 != 2)
          break;
      }
    }
LABEL_32:
    v58 = *((_QWORD *)&v154 + 1);
    v57 = v155;
    v59 = (NSString *)String._bridgeToObjectiveC()();
    v60 = NSClassFromString(v59);

    if (!v60
      || (ObjCClassMetadata = swift_getObjCClassMetadata(v60),
          v62 = sub_1001548C8(0, &qword_1002B6E88, PBCodable_ptr),
          (v63 = swift_dynamicCastMetatype(ObjCClassMetadata, v62)) == 0))
    {
LABEL_56:
      v86 = sub_1001ACE94(&v152);
      if (qword_1002B3A10 != -1)
        v86 = (_QWORD *)swift_once(&qword_1002B3A10, sub_1001747E0);
      v90 = qword_1002BF000;
      v91 = static os_log_type_t.default.getter(v86, v87, v88, v89);
      v92 = swift_allocObject(v137, 72, 7);
      *(_OWORD *)(v92 + 16) = v134;
      *(_QWORD *)(v92 + 56) = &type metadata for Int;
      *(_QWORD *)(v92 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v92 + 32) = v14;
      os_log(_:dso:log:type:_:)("MetricService - processMetric - exception - metricID %{public}d", 63, 2, &_mh_execute_header, v90, v91, v92);
      swift_bridgeObjectRelease(v92);
      v9 = v135;
      v42 = v136;
      v40 = off_100260000;
      goto LABEL_21;
    }
    v64 = v63;
    v65 = v131[1];
    v144[0] = *v131;
    v144[1] = v65;
    swift_bridgeObjectRetain_n(v65, 2);
    v66 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v144, &type metadata for String);
    v67 = objc_msgSend(v140, "__swift_objectForKeyedSubscript:", v66);
    swift_unknownObjectRelease(v66);
    if (v67)
    {
      _bridgeAnyObjectToAny(_:)(v144, v67);
      swift_unknownObjectRelease(v67);
    }
    else
    {
      memset(v144, 0, 32);
    }
    sub_10014BC64((uint64_t)v144, (uint64_t)&v145, (uint64_t *)&unk_1002B5670);
    v70 = v133;
    if (v147)
    {
      if ((swift_dynamicCast(v143, &v145, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
      {
        v71 = v143[0];
        v72 = v143[1];
        swift_bridgeObjectRelease(v65);
        v73 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v64));
        v74.super.isa = Data._bridgeToObjectiveC()().super.isa;
        v75 = v71;
        v70 = v133;
        sub_1001463B0(v75, v72);
        goto LABEL_50;
      }
      swift_bridgeObjectRelease(v65);
    }
    else
    {
      swift_bridgeObjectRelease(v65);
      sub_10014BDE0((uint64_t)&v145, (uint64_t *)&unk_1002B5670);
    }
    v73 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v64));
    v74.super.isa = 0;
LABEL_50:
    v76 = objc_msgSend(v73, "initWithData:", v74.super.isa);

    if (!v76)
      goto LABEL_56;
    v77 = objc_msgSend(v76, "dictionaryRepresentation");

    if (!v77)
      goto LABEL_56;
    v78 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v77, &type metadata for AnyHashable, v130, &protocol witness table for AnyHashable);

    if (*(_BYTE *)(qword_1002BF068 + 24) == 1)
    {
      if (qword_1002B3A10 != -1)
        v79 = swift_once(&qword_1002B3A10, sub_1001747E0);
      v83 = qword_1002BF000;
      v84 = static os_log_type_t.default.getter(v79, v80, v81, v82);
      v85 = swift_allocObject(v137, 72, 7);
      *(_OWORD *)(v85 + 16) = v134;
      *(_QWORD *)(v85 + 56) = &type metadata for String;
      *(_QWORD *)(v85 + 64) = sub_10016B1E0();
      *(_QWORD *)(v85 + 32) = v58;
      *(_QWORD *)(v85 + 40) = v57;
      swift_bridgeObjectRetain(v57);
      os_log(_:dso:log:type:_:)("MetricService - processMetric - NSClassFromString %{public}s", 60, 2, &_mh_execute_header, v83, v84, v85);
      swift_bridgeObjectRelease(v85);
      v70 = v133;
    }
    else
    {
      if (qword_1002B3A10 != -1)
        v79 = swift_once(&qword_1002B3A10, sub_1001747E0);
      v93 = qword_1002BF000;
      v94 = static os_log_type_t.default.getter(v79, v80, v81, v82);
      os_log(_:dso:log:type:_:)("MetricService - processMetric - NSClassFromString", 49, 2, &_mh_execute_header, v93, v94, _swiftEmptyArrayStorage);
    }
    v42 = v136;
    if (!*(_QWORD *)(v78 + 16))
    {
      swift_bridgeObjectRelease(v78);
      v115 = sub_1001ACE94(&v152);
      if (qword_1002B3A10 != -1)
        v115 = (_QWORD *)swift_once(&qword_1002B3A10, sub_1001747E0);
      v119 = qword_1002BF000;
      v120 = static os_log_type_t.default.getter(v115, v116, v117, v118);
      v121 = swift_allocObject(v137, 72, 7);
      *(_OWORD *)(v121 + 16) = v134;
      v145 = v14;
      LOBYTE(v146) = 0;
      v122 = sub_100146438(&qword_1002B6E90);
      v123 = String.init<A>(describing:)(&v145, v122);
      v125 = v124;
      *(_QWORD *)(v121 + 56) = &type metadata for String;
      *(_QWORD *)(v121 + 64) = sub_10016B1E0();
      *(_QWORD *)(v121 + 32) = v123;
      *(_QWORD *)(v121 + 40) = v125;
      os_log(_:dso:log:type:_:)("dictionary is empty  ---> %{public}s", 36, 2, &_mh_execute_header, v119, v120, v121);
      swift_bridgeObjectRelease(v121);
LABEL_74:

      return;
    }
    v145 = v141;
    v146 = v48;
    swift_bridgeObjectRetain(v48);
    String.append(_:)(v142);
    v95 = v146;
    sub_100174DC0(0xD00000000000002BLL, v128, v145, v146);
    swift_bridgeObjectRelease(v95);
    v145 = sub_1001BE664((uint64_t)_swiftEmptyArrayStorage);
    sub_1001ABE24(v78, (uint64_t *)&v145, v96, v97);
    v98 = v132;
    v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
    v101 = v100;
    sub_1001ACA5C((uint64_t)&v145, v99, v100);
    swift_bridgeObjectRelease(v101);
    if (*(_BYTE *)(qword_1002BF068 + 28) == 1)
    {
      v102 = *(_QWORD **)(v70 + v127);
      v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
      v105 = v104;
      LOBYTE(v102) = sub_1001A4FDC(v103, v104, v102);
      swift_bridgeObjectRelease(v105);
      if ((v102 & 1) != 0)
      {
        v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
        v108 = v107;
        v109 = (_QWORD *)v145;
        swift_bridgeObjectRetain(v145);
        v110 = sub_1001A61D0(v106, v108, v109);
        swift_bridgeObjectRelease(v108);
        swift_bridgeObjectRelease_n(v109, 2);
        v145 = v110;
      }
    }
    v111 = (uint64_t)v129;
    sub_1001AA8F4(v78, (uint64_t)v129);
    swift_bridgeObjectRelease(v78);
    v112 = v145;
    sub_1001AAA64(v145, &v152, v111);
    swift_bridgeObjectRelease(v112);
    if (*(_BYTE *)(qword_1002BF068 + 152) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v111, v139);
      sub_1001ACE94(&v152);
    }
    else
    {
      v113 = *(_DWORD *)(qword_1002BF068 + 148);
      swift_bridgeObjectRetain(v48);
      v114 = v142._object;
      swift_bridgeObjectRetain(v142._object);
      sub_1001ACE94(&v152);
      *(_QWORD *)&v148 = v141;
      *((_QWORD *)&v148 + 1) = v48;
      countAndFlagsBits = v142._countAndFlagsBits;
      v150 = v114;
      v151 = v113;
      sub_1001AC8D0(&v148);
      swift_bridgeObjectRelease(v114);
      swift_bridgeObjectRelease(v48);
      (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v111, v139);
    }
    v9 = v135;
    v40 = off_100260000;
LABEL_21:
    if (++v41 == v42)
      goto LABEL_74;
  }
  v68 = 6;
  while (1)
  {
    v69 = v68 - 3;
    if (__OFADD__(v68 - 4, 1))
      break;
    if (*(_QWORD *)(qword_1002BF0F8 + 8 * v68) == v14)
      goto LABEL_28;
    ++v68;
    if (v69 == v51)
      goto LABEL_32;
  }
LABEL_76:
  __break(1u);
LABEL_77:
  v31 = swift_once(&qword_1002B39E8, sub_100174680);
LABEL_15:
  v35 = qword_1002BEFD8;
  v36 = static os_log_type_t.default.getter(v31, v32, v33, v34);
  os_log(_:dso:log:type:_:)("Metric validator - processMetric - invalid metricId", 51, 2, &_mh_execute_header, v35, v36, _swiftEmptyArrayStorage);
}

unint64_t sub_1001A61D0(unint64_t a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  int64_t v79;
  unint64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  Swift::String v86;
  uint64_t v87;
  Swift::String v88;
  uint64_t v89;
  Swift::String v90;
  uint64_t v91;
  Swift::String v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _BOOL8 v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  _QWORD *v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  char v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t j;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t k;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  _QWORD *v135;
  char v136;
  uint64_t v137;
  __int128 *v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char v145;
  int v146;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t ii;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t *v173;
  char v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char v184;
  _QWORD *v185;
  char v186;
  uint64_t v187;
  __int128 *v188;
  uint64_t v189;
  unint64_t v190;
  char v191;
  _QWORD *v192;
  char v193;
  uint64_t v194;
  __int128 *v195;
  uint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t jj;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t kk;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t mm;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t n;
  uint64_t v236;
  uint64_t v237;
  _QWORD *m;
  unint64_t v239;
  unint64_t v240;
  _QWORD *v241;
  char *v242;
  _QWORD *v243;
  char *v244;
  uint64_t v245;
  _QWORD *v246;
  char *v247;
  int64_t v248;
  _QWORD *v249;
  uint64_t v250;
  int64_t v251;
  __int128 v252;
  _OWORD v253[2];
  __int128 v254;
  __int128 v255;
  unint64_t v256;
  __int128 v257;
  uint64_t v258;
  _QWORD *v259;

  v5 = v3;
  v9 = sub_1001BE664((uint64_t)_swiftEmptyArrayStorage);
  v13 = v9;
  if (qword_1002B3A10 != -1)
    goto LABEL_309;
  while (1)
  {
    v14 = qword_1002BF000;
    v15 = (_QWORD *)static os_log_type_t.default.getter(v9, v10, v11, v12);
    v16 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v17 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v17 + 16) = xmmword_1002402A0;
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 64) = sub_10016B1E0();
    *(_QWORD *)(v17 + 32) = a1;
    *(_QWORD *)(v17 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    os_log(_:dso:log:type:_:)("MetricService - parseIceMetric - metricID %{public}@", 52, 2, &_mh_execute_header, v14, v15, v17);
    swift_bridgeObjectRelease(v17);
    if (a1 == 0x443035444333 && a2 == 0xE600000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x443035444333, 0xE600000000000000, a1, a2, 0) & 1) != 0)
    {
      *(_QWORD *)&v257 = 0x635F726572616562;
      *((_QWORD *)&v257 + 1) = 0xEF73747865746E6FLL;
      AnyHashable.init<A>(_:)(&v257, &type metadata for String, &protocol witness table for String);
      if (a3[2] && (v18 = sub_1001C7CFC((uint64_t)&v254), (v19 & 1) != 0))
      {
        sub_10017E2BC(a3[7] + 32 * v18, (uint64_t)&v252);
      }
      else
      {
        v252 = 0u;
        v253[0] = 0u;
      }
      sub_10017F3E8((uint64_t)&v254);
      if (!*((_QWORD *)&v253[0] + 1))
      {
        sub_10014BDE0((uint64_t)&v252, (uint64_t *)&unk_1002B5670);
        goto LABEL_209;
      }
      v20 = sub_100146438(&qword_1002B6E58);
      if ((swift_dynamicCast(&v257, &v252, (char *)&type metadata for Any + 8, v20, 6) & 1) != 0)
      {
        v21 = v257;
        v22 = sub_100146438((uint64_t *)&unk_1002B6E78);
        a2 = swift_allocObject(v22, 40, 7);
        *(_OWORD *)(a2 + 16) = xmmword_1002402A0;
        v23 = sub_10017CFB8(0);
        *(_QWORD *)(a2 + 32) = sub_1001BE7A4((uint64_t)v23);
        *(_QWORD *)&v254 = a2;
        v24 = sub_1001BE420(v21);
        if (v24 < 0)
          goto LABEL_344;
        v25 = v24;
        if (v24)
        {
          sub_1001ABDA0();
          sub_1001ABDA0();
          v26 = 0;
          do
          {
            v27 = *(_QWORD *)(v21 + 8 * v26 + 32);
            swift_bridgeObjectRetain(v27);
            sub_1001ABDA0();
            a2 = v254;
            v29 = *(_QWORD *)(v254 + 16);
            v28 = *(_QWORD *)(v254 + 24);
            if (v29 >= v28 >> 1)
            {
              a2 = (unint64_t)sub_1001C76E4((_QWORD *)(v28 > 1), v29 + 1, 1, (_QWORD *)v254);
              *(_QWORD *)&v254 = a2;
            }
            ++v26;
            *(_QWORD *)(a2 + 16) = v29 + 1;
            *(_QWORD *)(a2 + 8 * v29 + 32) = v27;
          }
          while (v25 != v26);
        }
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRetain(a2);
        *(_QWORD *)&v252 = sub_10017CFC4(0);
        v35 = *(_QWORD *)(a2 + 16);
        if (v35)
        {
          swift_bridgeObjectRetain(a2);
          for (i = 0; i != v35; ++i)
          {
            v37 = *(_QWORD *)(a2 + 8 * i + 32);
            v38 = swift_bridgeObjectRetain(v37);
            sub_1001DA8B0(v38);
          }
          swift_bridgeObjectRelease(a2);
        }
        swift_bridgeObjectRelease(a2);
        v39 = v252;
        v40 = sub_1001A888C(v252);
        swift_bridgeObjectRelease(v39);
        v41 = sub_1001CD174((uint64_t)v40);
        if (v41)
        {
          v42 = v41;
          sub_100146438((uint64_t *)&unk_1002B69D0);
          v43 = (void *)static _DictionaryStorage.allocate(capacity:)(v42);
        }
        else
        {
          v43 = &_swiftEmptyDictionarySingleton;
        }
        *(_QWORD *)&v252 = v43;
        sub_1001ACB4C((uint64_t)v40, 1, &v252);
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v40);
        v52 = v252;
        goto LABEL_85;
      }
LABEL_209:
      strcpy((char *)&v257, "subs_id");
      *((_QWORD *)&v257 + 1) = 0xE700000000000000;
      AnyHashable.init<A>(_:)(&v257, &type metadata for String, &protocol witness table for String);
      if (a3[2] && (v144 = sub_1001C7CFC((uint64_t)&v254), (v145 & 1) != 0))
      {
        sub_10017E2BC(a3[7] + 32 * v144, (uint64_t)&v252);
      }
      else
      {
        v252 = 0u;
        v253[0] = 0u;
      }
      sub_10017F3E8((uint64_t)&v254);
      if (*((_QWORD *)&v253[0] + 1))
      {
        if ((swift_dynamicCast(&v257, &v252, (char *)&type metadata for Any + 8, &type metadata for Int32, 6) & 1) != 0)
        {
          v146 = v257;
          *(_QWORD *)&v252 = 0x64695F73627573;
          *((_QWORD *)&v252 + 1) = 0xE700000000000000;
          AnyHashable.init<A>(_:)(&v252, &type metadata for String, &protocol witness table for String);
          *((_QWORD *)&v253[0] + 1) = &type metadata for Int32;
          LODWORD(v252) = v146;
          sub_10017F278(&v252, &v257);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
          v259 = (_QWORD *)v13;
          sub_1001C99E8(&v257, (uint64_t)&v254, isUniquelyReferenced_nonNull_native);
          v13 = (unint64_t)v259;
          swift_bridgeObjectRelease(0x8000000000000000);
          sub_10017F3E8((uint64_t)&v254);
        }
      }
      else
      {
        sub_10014BDE0((uint64_t)&v252, (uint64_t *)&unk_1002B5670);
      }
      return v13;
    }
    if ((a1 != 0x333133444333 || a2 != 0xE600000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0x333133444333, 0xE600000000000000, a1, a2, 0) & 1) == 0)
    {
      break;
    }
    v30 = sub_100146438((uint64_t *)&unk_1002B6E78);
    v31 = swift_allocObject(v30, 40, 7);
    *(_OWORD *)(v31 + 16) = xmmword_1002402A0;
    v32 = sub_10017CFB8(0);
    *(_QWORD *)(v31 + 32) = sub_1001BE7A4((uint64_t)v32);
    v14 = v31;
    v259 = (_QWORD *)v31;
    strcpy((char *)&v257, "scc_list");
    BYTE9(v257) = 0;
    WORD5(v257) = 0;
    HIDWORD(v257) = -402653184;
    AnyHashable.init<A>(_:)(&v257, &type metadata for String, &protocol witness table for String);
    if (a3[2] && (a1 = (unint64_t)a3, v33 = sub_1001C7CFC((uint64_t)&v254), (v34 & 1) != 0))
    {
      sub_10017E2BC(a3[7] + 32 * v33, (uint64_t)&v252);
    }
    else
    {
      v252 = 0u;
      v253[0] = 0u;
    }
    sub_10017F3E8((uint64_t)&v254);
    if (!*((_QWORD *)&v253[0] + 1))
      goto LABEL_206;
    v44 = sub_100146438(&qword_1002B6E58);
    if ((swift_dynamicCast(&v257, &v252, (char *)&type metadata for Any + 8, v44, 6) & 1) == 0)
      goto LABEL_207;
    a2 = v257;
    v45 = sub_1001BE420(v257);
    if (v45 < 0)
      goto LABEL_370;
    v46 = v45;
    v245 = (uint64_t)a3;
    v246 = (_QWORD *)a2;
    v239 = v13;
    if (!v45)
    {
      v49 = (_QWORD *)v14;
      v51 = *(_QWORD *)(v14 + 16);
      if (!v51)
        goto LABEL_162;
LABEL_105:
      v5 = v49;
      swift_bridgeObjectRetain(v49);
      v66 = v5;
      v67 = 0;
      do
      {
        if (!*(_QWORD *)(v66[v67 + 4] + 16))
        {
          v68 = sub_1001AD44C(v67);
          swift_bridgeObjectRelease(v68);
          v66 = v5;
        }
        ++v67;
      }
      while (v51 != v67);
      swift_bridgeObjectRelease(v66);
      v49 = v259;
      v242 = (char *)v259[2];
      if (v242)
      {
        v241 = v259 + 4;
        v243 = v259;
        swift_bridgeObjectRetain(v259);
        v69 = 0;
        while (v243[2] > v69)
        {
          a3 = (_QWORD *)v241[v69];
          v244 = (char *)(v69 + 1);
          swift_bridgeObjectRetain(a3);
          v70 = sub_10017CFB8(0);
          v14 = sub_1001BE7A4((uint64_t)v70);
          v251 = 0;
          v247 = (char *)(a3 + 8);
          v71 = 1 << *((_BYTE *)a3 + 32);
          if (v71 < 64)
            v72 = ~(-1 << v71);
          else
            v72 = -1;
          a2 = v72 & a3[8];
          v248 = (unint64_t)(v71 + 63) >> 6;
          while (1)
          {
            if (a2)
            {
              v74 = __clz(__rbit64(a2));
              a2 &= a2 - 1;
              v75 = v74 | (v251 << 6);
              goto LABEL_120;
            }
            v79 = v251 + 1;
            if (__OFADD__(v251, 1))
            {
              __break(1u);
              goto LABEL_235;
            }
            if (v79 >= v248)
              goto LABEL_138;
            v80 = *(_QWORD *)&v247[8 * v79];
            if (v80)
              goto LABEL_124;
            v81 = v251 + 2;
            ++v251;
            if (v79 + 1 >= v248)
              goto LABEL_138;
            v80 = *(_QWORD *)&v247[8 * v81];
            if (v80)
            {
LABEL_127:
              v79 = v81;
              goto LABEL_124;
            }
            v251 = v79 + 1;
            if (v79 + 2 >= v248)
              goto LABEL_138;
            v80 = *(_QWORD *)&v247[8 * v79 + 16];
            if (v80)
            {
              v79 += 2;
LABEL_124:
              a2 = (v80 - 1) & v80;
              v75 = __clz(__rbit64(v80)) + (v79 << 6);
              v251 = v79;
LABEL_120:
              v76 = a3[7];
              v77 = (_QWORD *)(a3[6] + 16 * v75);
              v78 = v77[1];
              *(_QWORD *)&v252 = *v77;
              *((_QWORD *)&v252 + 1) = v78;
              sub_10017E2BC(v76 + 32 * v75, (uint64_t)v253);
              swift_bridgeObjectRetain(v78);
              goto LABEL_139;
            }
            v81 = v79 + 3;
            v251 = v79 + 2;
            if (v79 + 3 >= v248)
              goto LABEL_138;
            v80 = *(_QWORD *)&v247[8 * v81];
            if (v80)
              goto LABEL_127;
            while (1)
            {
              v79 = v81 + 1;
              if (__OFADD__(v81, 1))
              {
                __break(1u);
                goto LABEL_368;
              }
              if (v79 >= v248)
                break;
              v80 = *(_QWORD *)&v247[8 * v79];
              ++v81;
              if (v80)
                goto LABEL_124;
            }
            v251 = v248 - 1;
LABEL_138:
            a2 = 0;
            memset(v253, 0, sizeof(v253));
            v252 = 0u;
LABEL_139:
            sub_10014BC64((uint64_t)&v252, (uint64_t)&v254, &qword_1002B5690);
            v15 = (_QWORD *)*((_QWORD *)&v254 + 1);
            if (!*((_QWORD *)&v254 + 1))
              break;
            v82 = v254;
            sub_10017F278(&v255, &v252);
            v5 = (_QWORD *)v69;
            *(_QWORD *)&v257 = v69;
            v83 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
            v85 = v84;
            *(_QWORD *)&v257 = v83;
            *((_QWORD *)&v257 + 1) = v84;
            swift_bridgeObjectRetain(v84);
            v86._countAndFlagsBits = 45;
            v86._object = (void *)0xE100000000000000;
            String.append(_:)(v86);
            swift_bridgeObjectRelease(v85);
            v87 = *((_QWORD *)&v257 + 1);
            swift_bridgeObjectRetain(*((_QWORD *)&v257 + 1));
            v88._countAndFlagsBits = 0x6E6F6974636573;
            v88._object = (void *)0xE700000000000000;
            String.append(_:)(v88);
            swift_bridgeObjectRelease(v87);
            v89 = *((_QWORD *)&v257 + 1);
            swift_bridgeObjectRetain(*((_QWORD *)&v257 + 1));
            v90._countAndFlagsBits = 45;
            v90._object = (void *)0xE100000000000000;
            String.append(_:)(v90);
            swift_bridgeObjectRelease(v89);
            v91 = *((_QWORD *)&v257 + 1);
            swift_bridgeObjectRetain(*((_QWORD *)&v257 + 1));
            v92._countAndFlagsBits = v82;
            v92._object = v15;
            String.append(_:)(v92);
            swift_bridgeObjectRelease(v91);
            swift_bridgeObjectRelease(v15);
            v93 = *((_QWORD *)&v257 + 1);
            v15 = (_QWORD *)v257;
            sub_10017E2BC((uint64_t)&v252, (uint64_t)&v257);
            v13 = swift_isUniquelyReferenced_nonNull_native(v14);
            v256 = v14;
            v95 = sub_1001C7C98((uint64_t)v15, v93);
            v96 = *(_QWORD *)(v14 + 16);
            v97 = (v94 & 1) == 0;
            v98 = v96 + v97;
            if (__OFADD__(v96, v97))
            {
              __break(1u);
              goto LABEL_219;
            }
            v4 = v94;
            if (*(_QWORD *)(v14 + 24) >= v98)
            {
              if ((v13 & 1) != 0)
              {
                v14 = v256;
                if ((v94 & 1) == 0)
                  goto LABEL_147;
              }
              else
              {
                sub_1001CA558();
                v14 = v256;
                if ((v4 & 1) == 0)
                  goto LABEL_147;
              }
LABEL_116:
              v73 = (_QWORD *)(*(_QWORD *)(v14 + 56) + 32 * v95);
              sub_10014652C(v73);
              sub_10017F278(&v257, v73);
              goto LABEL_117;
            }
            sub_1001C8370(v98, v13);
            v99 = sub_1001C7C98((uint64_t)v15, v93);
            if ((v4 & 1) != (v100 & 1))
              goto LABEL_390;
            v95 = v99;
            v14 = v256;
            if ((v4 & 1) != 0)
              goto LABEL_116;
LABEL_147:
            *(_QWORD *)(v14 + 8 * (v95 >> 6) + 64) |= 1 << v95;
            v101 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v95);
            *v101 = v15;
            v101[1] = v93;
            sub_10017F278(&v257, (_OWORD *)(*(_QWORD *)(v14 + 56) + 32 * v95));
            v102 = *(_QWORD *)(v14 + 16);
            v103 = __OFADD__(v102, 1);
            v104 = v102 + 1;
            if (v103)
            {
              __break(1u);
              goto LABEL_228;
            }
            *(_QWORD *)(v14 + 16) = v104;
            swift_bridgeObjectRetain(v93);
LABEL_117:
            swift_bridgeObjectRelease(v93);
            swift_bridgeObjectRelease(0x8000000000000000);
            sub_10014652C(&v252);
            v69 = (unint64_t)v5;
          }
          swift_release(a3);
          v105 = v259;
          if ((swift_isUniquelyReferenced_nonNull_native(v259) & 1) == 0)
          {
            v105 = sub_100197F74(v105);
            v259 = v105;
          }
          if (v105[2] <= v69)
            goto LABEL_333;
          v106 = &v105[v69];
          v107 = v106[4];
          v106[4] = v14;
          swift_bridgeObjectRelease(v107);
          v69 = (unint64_t)v244;
          if (v244 == v242)
          {
            swift_bridgeObjectRelease(v243);
            v49 = v259;
            goto LABEL_162;
          }
        }
        __break(1u);
LABEL_333:
        __break(1u);
        goto LABEL_334;
      }
LABEL_162:
      v112 = v49;
      swift_bridgeObjectRetain(v49);
      *(_QWORD *)&v254 = sub_10017CFC4(0);
      v113 = v112[2];
      a3 = (_QWORD *)v245;
      if (v113)
      {
        swift_bridgeObjectRetain(v112);
        for (j = 0; j != v113; ++j)
        {
          v115 = v112[j + 4];
          v116 = swift_bridgeObjectRetain(v115);
          sub_1001DA8B0(v116);
        }
        swift_bridgeObjectRelease(v112);
      }
      swift_bridgeObjectRelease(v112);
      v117 = v254;
      v118 = sub_1001A888C(v254);
      swift_bridgeObjectRelease(v117);
      v119 = sub_1001CD174((uint64_t)v118);
      if (v119)
      {
        v120 = v119;
        sub_100146438((uint64_t *)&unk_1002B69D0);
        v121 = (void *)static _DictionaryStorage.allocate(capacity:)(v120);
      }
      else
      {
        v121 = &_swiftEmptyDictionarySingleton;
      }
      *(_QWORD *)&v254 = v121;
      sub_1001ACB4C((uint64_t)v118, 1, &v254);
      swift_bridgeObjectRelease(v112);
      swift_bridgeObjectRelease(v118);
      v52 = v254;
      swift_bridgeObjectRelease(v239);
      v13 = sub_1001A89D0(v52);
      swift_bridgeObjectRelease(v246);
LABEL_86:
      v53 = v52;
LABEL_87:
      swift_release(v53);
      goto LABEL_209;
    }
    a2 = 0;
    v249 = v5;
    v250 = OBJC_IVAR____TtC13FTMInternal_413MetricService_dlbwlookup;
    v4 = 32;
    a3 = &type metadata for Int;
    v5 = &type metadata for Float;
    v13 = (unint64_t)&unk_1002B5670;
    while (1)
    {
      *(_QWORD *)&v252 = 0x6D617473656D6974;
      *((_QWORD *)&v252 + 1) = 0xE900000000000070;
      AnyHashable.init<A>(_:)(&v252, &type metadata for String, &protocol witness table for String);
      sub_1001BC170((uint64_t)&v254, v245, &v257);
      sub_10017F3E8((uint64_t)&v254);
      if (v258)
      {
        sub_10017F278(&v257, &v252);
        sub_10017E2BC((uint64_t)&v252, (uint64_t)&v254);
        v47 = v246;
        if ((swift_isUniquelyReferenced_nonNull_native(v246) & 1) == 0)
          v47 = sub_100197F74(v246);
        if (v47[2] <= a2)
        {
          __break(1u);
LABEL_318:
          sub_10014BDE0((uint64_t)&v252, (uint64_t *)&unk_1002B5670);
          goto LABEL_319;
        }
        a1 = (unint64_t)v47 + v4;
        sub_100175F28((uint64_t)&v254, 0x6D617473656D6974, 0xE900000000000070);
        sub_10014652C(&v252);
      }
      else
      {
        sub_10014BDE0((uint64_t)&v257, (uint64_t *)&unk_1002B5670);
        v47 = v246;
      }
      if (v47[2] <= a2)
        break;
      a1 = *(_QWORD *)((char *)v47 + v4);
      swift_bridgeObjectRetain(a1);
      sub_1001BC120(1886548850, 0xE400000000000000, a1, &v254);
      swift_bridgeObjectRelease(a1);
      if (*((_QWORD *)&v255 + 1))
      {
        if ((swift_dynamicCast(&v252, &v254, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
        {
          *((_QWORD *)&v255 + 1) = &type metadata for Int;
          *(_QWORD *)&v254 = (uint64_t)v252 / 100;
          if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
            v47 = sub_100197F74(v47);
          if (v47[2] <= a2)
          {
            __break(1u);
LABEL_341:
            __break(1u);
LABEL_342:
            __break(1u);
LABEL_343:
            __break(1u);
LABEL_344:
            __break(1u);
LABEL_345:
            v220 = &_swiftEmptyDictionarySingleton;
            goto LABEL_346;
          }
          a1 = (unint64_t)v47 + v4;
          sub_100175F28((uint64_t)&v254, 1886548850, 0xE400000000000000);
        }
      }
      else
      {
        sub_10014BDE0((uint64_t)&v254, (uint64_t *)&unk_1002B5670);
      }
      if (v47[2] <= a2)
        goto LABEL_305;
      a1 = *(_QWORD *)((char *)v47 + v4);
      swift_bridgeObjectRetain(a1);
      sub_1001BC120(1903326066, 0xE400000000000000, a1, &v254);
      swift_bridgeObjectRelease(a1);
      if (*((_QWORD *)&v255 + 1))
      {
        if ((swift_dynamicCast(&v252, &v254, (char *)&type metadata for Any + 8, &type metadata for Float, 6) & 1) != 0)
        {
          *((_QWORD *)&v255 + 1) = &type metadata for Float;
          *(float *)&v254 = *(float *)&v252 / 100.0;
          if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
            v47 = sub_100197F74(v47);
          if (v47[2] <= a2)
            goto LABEL_341;
          a1 = (unint64_t)v47 + v4;
          sub_100175F28((uint64_t)&v254, 1903326066, 0xE400000000000000);
        }
      }
      else
      {
        sub_10014BDE0((uint64_t)&v254, (uint64_t *)&unk_1002B5670);
      }
      if (v47[2] <= a2)
        goto LABEL_306;
      a1 = *(_QWORD *)((char *)v47 + v4);
      swift_bridgeObjectRetain(a1);
      sub_1001BC120(1769173874, 0xE400000000000000, a1, &v254);
      swift_bridgeObjectRelease(a1);
      if (*((_QWORD *)&v255 + 1))
      {
        if ((swift_dynamicCast(&v252, &v254, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
        {
          *((_QWORD *)&v255 + 1) = &type metadata for Int;
          *(_QWORD *)&v254 = (uint64_t)v252 / 100;
          if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
            v47 = sub_100197F74(v47);
          if (v47[2] <= a2)
            goto LABEL_342;
          a1 = (unint64_t)v47 + v4;
          sub_100175F28((uint64_t)&v254, 1769173874, 0xE400000000000000);
        }
      }
      else
      {
        sub_10014BDE0((uint64_t)&v254, (uint64_t *)&unk_1002B5670);
      }
      if (v47[2] <= a2)
        goto LABEL_307;
      a1 = *(_QWORD *)((char *)v47 + v4);
      swift_bridgeObjectRetain(a1);
      sub_1001BC120(0x77646E61625F6C64, 0xEC00000068746469, a1, &v254);
      swift_bridgeObjectRelease(a1);
      if (*((_QWORD *)&v255 + 1))
      {
        if ((swift_dynamicCast(&v252, &v254, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
        {
          v48 = sub_1001BC1C0(v252, *(_QWORD *)((char *)v249 + v250));
          if ((v48 & 0x100000000) != 0)
          {
            v254 = 0u;
            v255 = 0u;
          }
          else
          {
            *((_QWORD *)&v255 + 1) = &type metadata for Float;
            LODWORD(v254) = v48;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
            v47 = sub_100197F74(v47);
          if (v47[2] <= a2)
            goto LABEL_343;
          a1 = (unint64_t)v47 + v4;
          sub_100175F28((uint64_t)&v254, 0x77646E61625F6C64, 0xEC00000068746469);
        }
      }
      else
      {
        sub_10014BDE0((uint64_t)&v254, (uint64_t *)&unk_1002B5670);
      }
      if (v47[2] <= a2)
        goto LABEL_308;
      v246 = v47;
      v15 = *(_QWORD **)((char *)v47 + v4);
      swift_bridgeObjectRetain(v15);
      sub_1001ABDA0();
      v49 = v259;
      a1 = v259[2];
      v50 = v259[3];
      v51 = a1 + 1;
      if (a1 >= v50 >> 1)
      {
        v49 = sub_1001C76E4((_QWORD *)(v50 > 1), a1 + 1, 1, v259);
        v259 = v49;
      }
      ++a2;
      v49[2] = v51;
      v49[a1 + 4] = v15;
      v4 += 8;
      if (v46 == a2)
        goto LABEL_105;
    }
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
LABEL_307:
    __break(1u);
LABEL_308:
    __break(1u);
LABEL_309:
    v9 = swift_once(&qword_1002B3A10, sub_1001747E0);
  }
  if (a1 == 0x423033444333 && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x423033444333, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v54 = sub_100146438((uint64_t *)&unk_1002B6E78);
    a2 = swift_allocObject(v54, 40, 7);
    *(_OWORD *)(a2 + 16) = xmmword_1002402A0;
    v55 = sub_10017CFB8(0);
    *(_QWORD *)(a2 + 32) = sub_1001BE7A4((uint64_t)v55);
    v259 = (_QWORD *)a2;
    strcpy((char *)&v257, "carrier_info");
    BYTE13(v257) = 0;
    HIWORD(v257) = -5120;
    AnyHashable.init<A>(_:)(&v257, &type metadata for String, &protocol witness table for String);
    if (a3[2] && (v56 = sub_1001C7CFC((uint64_t)&v254), (v57 & 1) != 0))
    {
      sub_10017E2BC(a3[7] + 32 * v56, (uint64_t)&v252);
    }
    else
    {
      v252 = 0u;
      v253[0] = 0u;
    }
    sub_10017F3E8((uint64_t)&v254);
    if (*((_QWORD *)&v253[0] + 1))
    {
      v58 = sub_100146438(&qword_1002B6E58);
      if ((swift_dynamicCast(&v257, &v252, (char *)&type metadata for Any + 8, v58, 6) & 1) != 0)
      {
        v59 = v257;
        v60 = sub_1001BE420(v257);
        if ((v60 & 0x8000000000000000) == 0)
        {
          v61 = v60;
          if (v60)
          {
            sub_1001ABDA0();
            sub_1001ABDA0();
            v62 = 0;
            do
            {
              v63 = *(_QWORD *)(v59 + 8 * v62 + 32);
              swift_bridgeObjectRetain(v63);
              sub_1001ABDA0();
              a2 = (unint64_t)v259;
              v65 = v259[2];
              v64 = v259[3];
              if (v65 >= v64 >> 1)
              {
                a2 = (unint64_t)sub_1001C76E4((_QWORD *)(v64 > 1), v65 + 1, 1, v259);
                v259 = (_QWORD *)a2;
              }
              ++v62;
              *(_QWORD *)(a2 + 16) = v65 + 1;
              *(_QWORD *)(a2 + 8 * v65 + 32) = v63;
            }
            while (v61 != v62);
          }
          swift_bridgeObjectRelease(v59);
          swift_bridgeObjectRetain(a2);
          *(_QWORD *)&v254 = sub_10017CFC4(0);
          v122 = *(_QWORD *)(a2 + 16);
          if (!v122)
            goto LABEL_174;
          swift_bridgeObjectRetain(a2);
          for (k = 0; k != v122; ++k)
          {
            v124 = *(_QWORD *)(a2 + 8 * k + 32);
            v125 = swift_bridgeObjectRetain(v124);
            sub_1001DA8B0(v125);
          }
LABEL_173:
          swift_bridgeObjectRelease(a2);
          goto LABEL_174;
        }
LABEL_376:
        __break(1u);
LABEL_377:
        __break(1u);
LABEL_378:
        __break(1u);
LABEL_379:
        __break(1u);
LABEL_380:
        __break(1u);
LABEL_381:
        __break(1u);
LABEL_382:
        __break(1u);
LABEL_383:
        __break(1u);
LABEL_384:
        __break(1u);
LABEL_385:
        __break(1u);
LABEL_386:
        __break(1u);
LABEL_387:
        __break(1u);
LABEL_388:
        __break(1u);
LABEL_389:
        __break(1u);
LABEL_390:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        swift_bridgeObjectRelease(v14);
        swift_release(v252);
        __break(1u);
        for (m = (_QWORD *)a2; ; m = v15)
        {
          swift_bridgeObjectRelease(m);
          swift_release(v254);
          __break(1u);
        }
      }
      goto LABEL_361;
    }
LABEL_360:
    sub_10014BDE0((uint64_t)&v252, (uint64_t *)&unk_1002B5670);
    goto LABEL_361;
  }
  if (a1 == 0x393030444333 && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x393030444333, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v108 = sub_100146438((uint64_t *)&unk_1002B6E78);
    v14 = swift_allocObject(v108, 40, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1002402A0;
    v109 = sub_10017CFB8(0);
    *(_QWORD *)(v14 + 32) = sub_1001BE7A4((uint64_t)v109);
    v259 = (_QWORD *)v14;
    strcpy((char *)&v257, "gsm_ncell_meas");
    HIBYTE(v257) = -18;
    AnyHashable.init<A>(_:)(&v257, &type metadata for String, &protocol witness table for String);
    if (a3[2] && (v110 = sub_1001C7CFC((uint64_t)&v254), (v111 & 1) != 0))
    {
      sub_10017E2BC(a3[7] + 32 * v110, (uint64_t)&v252);
    }
    else
    {
      v252 = 0u;
      v253[0] = 0u;
    }
    sub_10017F3E8((uint64_t)&v254);
    if (*((_QWORD *)&v253[0] + 1))
    {
      v130 = sub_100146438(&qword_1002B6E58);
      if ((swift_dynamicCast(&v257, &v252, (char *)&type metadata for Any + 8, v130, 6) & 1) != 0)
      {
        a2 = v257;
        v131 = sub_1001BE420(v257);
        if (v131 < 0)
          goto LABEL_382;
        v5 = (_QWORD *)v131;
        v239 = v13;
        if (!v131)
          goto LABEL_228;
        v13 = 0;
        v15 = (_QWORD *)((char *)&type metadata for Any + 8);
        while (2)
        {
          if (*(_QWORD *)(a2 + 16) <= v13)
          {
LABEL_368:
            __break(1u);
LABEL_369:
            __break(1u);
LABEL_370:
            __break(1u);
LABEL_371:
            swift_bridgeObjectRelease(v5);
            swift_bridgeObjectRetain(a2);
            *(_QWORD *)&v254 = sub_10017CFC4(0);
            v234 = *(_QWORD *)(a2 + 16);
            if (v234)
            {
              swift_bridgeObjectRetain(a2);
              for (n = 0; n != v234; ++n)
              {
                v236 = *(_QWORD *)(a2 + 8 * n + 32);
                v237 = swift_bridgeObjectRetain(v236);
                sub_1001DA8B0(v237);
              }
              goto LABEL_173;
            }
LABEL_174:
            swift_bridgeObjectRelease(a2);
LABEL_175:
            v126 = v254;
            goto LABEL_176;
          }
          v132 = *(_QWORD *)(a2 + 8 * v13 + 32);
          if (*(_QWORD *)(v132 + 16))
          {
            swift_bridgeObjectRetain(*(_QWORD *)(a2 + 8 * v13 + 32));
            v133 = sub_1001C7C98(0x76656C7872, 0xE500000000000000);
            if ((v134 & 1) != 0)
            {
              sub_10017E2BC(*(_QWORD *)(v132 + 56) + 32 * v133, (uint64_t)&v254);
            }
            else
            {
              v254 = 0u;
              v255 = 0u;
            }
            swift_bridgeObjectRelease(v132);
            if (*((_QWORD *)&v255 + 1))
            {
              if ((swift_dynamicCast(&v252, &v254, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
                goto LABEL_200;
              if (__OFSUB__((_QWORD)v252, 110))
                goto LABEL_377;
              *((_QWORD *)&v255 + 1) = &type metadata for Int;
              *(_QWORD *)&v254 = v252 - 110;
              if ((swift_isUniquelyReferenced_nonNull_native(a2) & 1) == 0)
                a2 = (unint64_t)sub_100197F74((_QWORD *)a2);
              if (*(_QWORD *)(a2 + 16) <= v13)
                goto LABEL_378;
              v135 = (_QWORD *)(a2 + 8 * v13 + 32);
              if (*((_QWORD *)&v255 + 1))
              {
                sub_10017F278(&v254, &v252);
                v136 = swift_isUniquelyReferenced_nonNull_native(*v135);
                *(_QWORD *)&v257 = *v135;
                *v135 = 0x8000000000000000;
                sub_1001C98B8(&v252, 0x76656C7872, 0xE500000000000000, v136);
                v137 = *v135;
                *v135 = v257;
                swift_bridgeObjectRelease(v137);
                goto LABEL_200;
              }
              sub_10014BDE0((uint64_t)&v254, (uint64_t *)&unk_1002B5670);
              sub_10017D0A4(0x76656C7872, 0xE500000000000000, &v252);
              v138 = &v252;
LABEL_199:
              sub_10014BDE0((uint64_t)v138, (uint64_t *)&unk_1002B5670);
LABEL_200:
              if (*(_QWORD *)(a2 + 16) <= v13)
                goto LABEL_369;
              v139 = a3;
              v140 = *(_QWORD *)(a2 + 8 * v13 + 32);
              swift_bridgeObjectRetain(v140);
              sub_1001ABDA0();
              v14 = (unint64_t)v259;
              v142 = v259[2];
              v141 = v259[3];
              if (v142 >= v141 >> 1)
              {
                v14 = (unint64_t)sub_1001C76E4((_QWORD *)(v141 > 1), v142 + 1, 1, v259);
                v259 = (_QWORD *)v14;
              }
              ++v13;
              *(_QWORD *)(v14 + 16) = v142 + 1;
              *(_QWORD *)(v14 + 8 * v142 + 32) = v140;
              a3 = v139;
              if ((_QWORD *)v13 == v5)
              {
LABEL_228:
                swift_bridgeObjectRetain(v14);
                *(_QWORD *)&v254 = sub_10017CFC4(0);
                v153 = *(_QWORD *)(v14 + 16);
                if (v153)
                {
                  swift_bridgeObjectRetain(v14);
                  for (ii = 0; ii != v153; ++ii)
                  {
                    v155 = *(_QWORD *)(v14 + 8 * ii + 32);
                    v156 = swift_bridgeObjectRetain(v155);
                    sub_1001DA8B0(v156);
                  }
                  swift_bridgeObjectRelease(v14);
                }
                swift_bridgeObjectRelease(v14);
                v157 = v254;
                v158 = sub_1001A888C(v254);
                swift_bridgeObjectRelease(v157);
                v159 = sub_1001CD174((uint64_t)v158);
                if (v159)
                {
                  v160 = v159;
                  sub_100146438((uint64_t *)&unk_1002B69D0);
                  v161 = (void *)static _DictionaryStorage.allocate(capacity:)(v160);
                }
                else
                {
                  v161 = &_swiftEmptyDictionarySingleton;
                }
                *(_QWORD *)&v254 = v161;
                sub_1001ACB4C((uint64_t)v158, 1, &v254);
                swift_bridgeObjectRelease(v14);
                swift_bridgeObjectRelease(v158);
                v176 = v254;
                swift_bridgeObjectRelease(v239);
                v13 = sub_1001A89D0(v176);
                swift_bridgeObjectRelease(a2);
                v53 = v176;
                goto LABEL_87;
              }
              continue;
            }
          }
          else
          {
            v254 = 0u;
            v255 = 0u;
          }
          break;
        }
        v138 = &v254;
        goto LABEL_199;
      }
    }
    else
    {
LABEL_206:
      sub_10014BDE0((uint64_t)&v252, (uint64_t *)&unk_1002B5670);
    }
LABEL_207:
    v143 = v14;
LABEL_208:
    swift_bridgeObjectRelease(v143);
    goto LABEL_209;
  }
  if (a1 == 0x323031444333 && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x323031444333, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v149 = sub_100146438((uint64_t *)&unk_1002B6E78);
    a2 = swift_allocObject(v149, 40, 7);
    *(_OWORD *)(a2 + 16) = xmmword_1002402A0;
    v150 = sub_10017CFB8(0);
    *(_QWORD *)(a2 + 32) = sub_1001BE7A4((uint64_t)v150);
    v259 = (_QWORD *)a2;
    strcpy((char *)&v257, "rx_info");
    *((_QWORD *)&v257 + 1) = 0xE700000000000000;
    AnyHashable.init<A>(_:)(&v257, &type metadata for String, &protocol witness table for String);
    if (a3[2] && (v151 = sub_1001C7CFC((uint64_t)&v254), (v152 & 1) != 0))
    {
      sub_10017E2BC(a3[7] + 32 * v151, (uint64_t)&v252);
    }
    else
    {
LABEL_235:
      v252 = 0u;
      v253[0] = 0u;
    }
    sub_10017F3E8((uint64_t)&v254);
    if (*((_QWORD *)&v253[0] + 1))
    {
      v162 = sub_100146438(&qword_1002B6E58);
      if ((swift_dynamicCast(&v257, &v252, (char *)&type metadata for Any + 8, v162, 6) & 1) != 0)
      {
        v240 = v13;
        v163 = v257;
        v164 = sub_1001BE420(v257);
        if (v164 < 0)
          goto LABEL_383;
        v14 = v164;
        if (v164)
        {
          v165 = 0;
          a2 = (unint64_t)&type metadata for String;
          v15 = &protocol witness table for String;
          while (1)
          {
            v166 = a3;
            v167 = *(_QWORD *)(v163 + 32 + 8 * v165);
            swift_bridgeObjectRetain(v167);
            sub_1001ABDA0();
            v168 = v259;
            v170 = v259[2];
            v169 = v259[3];
            if (v170 >= v169 >> 1)
            {
              v168 = sub_1001C76E4((_QWORD *)(v169 > 1), v170 + 1, 1, v259);
              v259 = v168;
            }
            v168[2] = v170 + 1;
            v168[v170 + 4] = v167;
            strcpy((char *)&v252, "connected_mode");
            HIBYTE(v252) = -18;
            AnyHashable.init<A>(_:)(&v252, &type metadata for String, &protocol witness table for String);
            a3 = v166;
            if (v166[2] && (v171 = sub_1001C7CFC((uint64_t)&v254), (v172 & 1) != 0))
            {
              sub_10017E2BC(v166[7] + 32 * v171, (uint64_t)&v252);
            }
            else
            {
              v252 = 0u;
              v253[0] = 0u;
            }
            sub_10017F3E8((uint64_t)&v254);
            if ((swift_isUniquelyReferenced_nonNull_native(v168) & 1) == 0)
            {
              v168 = sub_100197F74(v168);
              v259 = v168;
            }
            if (v168[2] <= v165)
              break;
            v173 = &v168[v165 + 4];
            if (*((_QWORD *)&v253[0] + 1))
            {
              sub_10017F278(&v252, &v257);
              v174 = swift_isUniquelyReferenced_nonNull_native(*v173);
              v256 = *v173;
              *v173 = 0x8000000000000000;
              sub_1001C98B8(&v257, 0x657463656E6E6F63, 0xEE0065646F6D5F64, v174);
              v175 = *v173;
              *v173 = v256;
              swift_bridgeObjectRelease(v175);
            }
            else
            {
              sub_10014BDE0((uint64_t)&v252, (uint64_t *)&unk_1002B5670);
              sub_10017D0A4(0x657463656E6E6F63, 0xEE0065646F6D5F64, &v257);
              sub_10014BDE0((uint64_t)&v257, (uint64_t *)&unk_1002B5670);
            }
            if (++v165 == v14)
            {
              swift_bridgeObjectRelease(v163);
              a2 = (unint64_t)v259;
              goto LABEL_311;
            }
          }
          __break(1u);
          goto LABEL_376;
        }
        swift_bridgeObjectRelease(v163);
LABEL_311:
        v13 = v240;
      }
    }
    else
    {
      sub_10014BDE0((uint64_t)&v252, (uint64_t *)&unk_1002B5670);
    }
    swift_bridgeObjectRetain(a2);
    v198 = sub_10017CFC4(0);
    *(_QWORD *)&v254 = v198;
    v199 = *(_QWORD *)(a2 + 16);
    if (v199)
    {
      swift_bridgeObjectRetain(a2);
      for (jj = 0; jj != v199; ++jj)
      {
        v201 = *(_QWORD *)(a2 + 8 * jj + 32);
        v202 = swift_bridgeObjectRetain(v201);
        sub_1001DA8B0(v202);
      }
      swift_bridgeObjectRelease_n(a2, 2);
      goto LABEL_175;
    }
    v126 = (uint64_t)v198;
    swift_bridgeObjectRelease(a2);
LABEL_176:
    v14 = (unint64_t)sub_1001A888C(v126);
    swift_bridgeObjectRelease(v126);
    v127 = sub_1001CD174(v14);
    if (v127)
    {
      v128 = v127;
      sub_100146438((uint64_t *)&unk_1002B69D0);
      v129 = (void *)static _DictionaryStorage.allocate(capacity:)(v128);
    }
    else
    {
LABEL_219:
      v129 = &_swiftEmptyDictionarySingleton;
    }
    *(_QWORD *)&v254 = v129;
    sub_1001ACB4C(v14, 1, &v254);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v14);
    v52 = v254;
LABEL_85:
    swift_bridgeObjectRelease(v13);
    v13 = sub_1001A89D0(v52);
    goto LABEL_86;
  }
  if (a1 == 0x353031444333 && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x353031444333, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v177 = sub_100146438((uint64_t *)&unk_1002B6E78);
    v4 = swift_allocObject(v177, 40, 7);
    *(_OWORD *)(v4 + 16) = xmmword_1002402A0;
    v178 = sub_10017CFB8(0);
    *(_QWORD *)(v4 + 32) = sub_1001BE7A4((uint64_t)v178);
    v259 = (_QWORD *)v4;
    *(_QWORD *)&v257 = 0xD000000000000010;
    *((_QWORD *)&v257 + 1) = 0x8000000100214750;
    AnyHashable.init<A>(_:)(&v257, &type metadata for String, &protocol witness table for String);
    sub_1001BC170((uint64_t)&v254, (uint64_t)a3, &v252);
    sub_10017F3E8((uint64_t)&v254);
    if (!*((_QWORD *)&v253[0] + 1))
      goto LABEL_318;
    v179 = sub_100146438(&qword_1002B6E58);
    if ((swift_dynamicCast(&v257, &v252, (char *)&type metadata for Any + 8, v179, 6) & 1) == 0)
    {
LABEL_319:
      v143 = v4;
      goto LABEL_208;
    }
    v15 = (_QWORD *)v257;
    v180 = sub_1001BE420(v257);
    if (v180 < 0)
      goto LABEL_387;
    a2 = v180;
    v245 = (uint64_t)a3;
    if (!v180)
    {
LABEL_334:
      swift_bridgeObjectRetain(v4);
      *(_QWORD *)&v254 = sub_10017CFC4(0);
      v213 = *(_QWORD *)(v4 + 16);
      a3 = (_QWORD *)v245;
      if (v213)
      {
        swift_bridgeObjectRetain(v4);
        for (kk = 0; kk != v213; ++kk)
        {
          v215 = *(_QWORD *)(v4 + 8 * kk + 32);
          v216 = swift_bridgeObjectRetain(v215);
          sub_1001DA8B0(v216);
        }
        swift_bridgeObjectRelease(v4);
      }
      swift_bridgeObjectRelease(v4);
      v217 = v254;
      a2 = (unint64_t)sub_1001A888C(v254);
      swift_bridgeObjectRelease(v217);
      v218 = sub_1001CD174(a2);
      if (!v218)
        goto LABEL_345;
      v219 = v218;
      sub_100146438((uint64_t *)&unk_1002B69D0);
      v220 = (void *)static _DictionaryStorage.allocate(capacity:)(v219);
LABEL_346:
      *(_QWORD *)&v254 = v220;
      sub_1001ACB4C(a2, 1, &v254);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(a2);
      v52 = v254;
      swift_bridgeObjectRelease(v13);
      v13 = sub_1001A89D0(v52);
      swift_bridgeObjectRelease(v15);
      goto LABEL_86;
    }
    v181 = 0;
    while (2)
    {
      if (v15[2] <= v181)
        goto LABEL_379;
      v182 = v15[v181 + 4];
      if (*(_QWORD *)(v182 + 16))
      {
        swift_bridgeObjectRetain(v15[v181 + 4]);
        v183 = sub_1001C7C98(1885565810, 0xE400000000000000);
        if ((v184 & 1) != 0)
        {
          sub_10017E2BC(*(_QWORD *)(v182 + 56) + 32 * v183, (uint64_t)&v254);
        }
        else
        {
          v254 = 0u;
          v255 = 0u;
        }
        swift_bridgeObjectRelease(v182);
        if (*((_QWORD *)&v255 + 1))
        {
          if ((swift_dynamicCast(&v252, &v254, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
            goto LABEL_281;
          if (__OFSUB__((_QWORD)v252, 116))
            goto LABEL_384;
          *((_QWORD *)&v255 + 1) = &type metadata for Int;
          *(_QWORD *)&v254 = v252 - 116;
          if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
            v15 = sub_100197F74(v15);
          if (v15[2] <= v181)
            goto LABEL_385;
          v185 = &v15[v181 + 4];
          if (*((_QWORD *)&v255 + 1))
          {
            sub_10017F278(&v254, &v252);
            v186 = swift_isUniquelyReferenced_nonNull_native(*v185);
            *(_QWORD *)&v257 = *v185;
            *v185 = 0x8000000000000000;
            sub_1001C98B8(&v252, 1885565810, 0xE400000000000000, v186);
            v187 = *v185;
            *v185 = v257;
            swift_bridgeObjectRelease(v187);
            goto LABEL_281;
          }
          sub_10014BDE0((uint64_t)&v254, (uint64_t *)&unk_1002B5670);
          sub_10017D0A4(1885565810, 0xE400000000000000, &v252);
          v188 = &v252;
LABEL_280:
          sub_10014BDE0((uint64_t)v188, (uint64_t *)&unk_1002B5670);
LABEL_281:
          if (v15[2] <= v181)
            goto LABEL_380;
          v189 = v15[v181 + 4];
          if (*(_QWORD *)(v189 + 16))
          {
            swift_bridgeObjectRetain(v15[v181 + 4]);
            v190 = sub_1001C7C98(1869505381, 0xE400000000000000);
            if ((v191 & 1) != 0)
            {
              sub_10017E2BC(*(_QWORD *)(v189 + 56) + 32 * v190, (uint64_t)&v254);
            }
            else
            {
              v254 = 0u;
              v255 = 0u;
            }
            swift_bridgeObjectRelease(v189);
            if (*((_QWORD *)&v255 + 1))
            {
              if ((swift_dynamicCast(&v252, &v254, (char *)&type metadata for Any + 8, &type metadata for Float, 6) & 1) == 0)
                goto LABEL_296;
              *((_QWORD *)&v255 + 1) = &type metadata for Float;
              *(float *)&v254 = (float)(*(float *)&v252 * 0.5) + -24.5;
              if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
                v15 = sub_100197F74(v15);
              if (v15[2] <= v181)
                goto LABEL_386;
              v192 = &v15[v181 + 4];
              if (*((_QWORD *)&v255 + 1))
              {
                sub_10017F278(&v254, &v252);
                v193 = swift_isUniquelyReferenced_nonNull_native(*v192);
                *(_QWORD *)&v257 = *v192;
                *v192 = 0x8000000000000000;
                sub_1001C98B8(&v252, 1869505381, 0xE400000000000000, v193);
                v194 = *v192;
                *v192 = v257;
                swift_bridgeObjectRelease(v194);
                goto LABEL_296;
              }
              sub_10014BDE0((uint64_t)&v254, (uint64_t *)&unk_1002B5670);
              sub_10017D0A4(1869505381, 0xE400000000000000, &v252);
              v195 = &v252;
LABEL_295:
              sub_10014BDE0((uint64_t)v195, (uint64_t *)&unk_1002B5670);
LABEL_296:
              if (v15[2] <= v181)
                goto LABEL_381;
              v196 = v15[v181 + 4];
              swift_bridgeObjectRetain(v196);
              sub_1001ABDA0();
              v4 = (uint64_t)v259;
              v14 = v259[2];
              v197 = v259[3];
              if (v14 >= v197 >> 1)
              {
                v4 = (uint64_t)sub_1001C76E4((_QWORD *)(v197 > 1), v14 + 1, 1, v259);
                v259 = (_QWORD *)v4;
              }
              ++v181;
              *(_QWORD *)(v4 + 16) = v14 + 1;
              *(_QWORD *)(v4 + 8 * v14 + 32) = v196;
              if (v181 == a2)
                goto LABEL_334;
              continue;
            }
          }
          else
          {
            v254 = 0u;
            v255 = 0u;
          }
          v195 = &v254;
          goto LABEL_295;
        }
      }
      else
      {
        v254 = 0u;
        v255 = 0u;
      }
      break;
    }
    v188 = &v254;
    goto LABEL_280;
  }
  if (a1 == 0x333130304333 && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x333130304333, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v203 = sub_100146438((uint64_t *)&unk_1002B6E78);
    a2 = swift_allocObject(v203, 40, 7);
    *(_OWORD *)(a2 + 16) = xmmword_1002402A0;
    v204 = sub_10017CFB8(0);
    *(_QWORD *)(a2 + 32) = sub_1001BE7A4((uint64_t)v204);
    v259 = (_QWORD *)a2;
    *(_QWORD *)&v257 = 26213;
    *((_QWORD *)&v257 + 1) = 0xE200000000000000;
    AnyHashable.init<A>(_:)(&v257, &type metadata for String, &protocol witness table for String);
    sub_1001BC170((uint64_t)&v254, (uint64_t)a3, &v252);
    sub_10017F3E8((uint64_t)&v254);
    if (*((_QWORD *)&v253[0] + 1))
    {
      v205 = sub_100146438(&qword_1002B6E58);
      if ((swift_dynamicCast(&v257, &v252, (char *)&type metadata for Any + 8, v205, 6) & 1) != 0)
      {
        v206 = v257;
        v207 = sub_1001BE420(v257);
        if (v207 < 0)
          goto LABEL_388;
        v208 = v207;
        if (v207)
        {
          sub_1001ABDA0();
          sub_1001ABDA0();
          v209 = 0;
          do
          {
            v210 = *(_QWORD *)(v206 + 8 * v209 + 32);
            swift_bridgeObjectRetain(v210);
            sub_1001ABDA0();
            a2 = (unint64_t)v259;
            v212 = v259[2];
            v211 = v259[3];
            if (v212 >= v211 >> 1)
            {
              a2 = (unint64_t)sub_1001C76E4((_QWORD *)(v211 > 1), v212 + 1, 1, v259);
              v259 = (_QWORD *)a2;
            }
            ++v209;
            *(_QWORD *)(a2 + 16) = v212 + 1;
            *(_QWORD *)(a2 + 8 * v212 + 32) = v210;
          }
          while (v208 != v209);
        }
        swift_bridgeObjectRelease(v206);
      }
    }
    else
    {
      sub_10014BDE0((uint64_t)&v252, (uint64_t *)&unk_1002B5670);
    }
    swift_bridgeObjectRetain(a2);
    *(_QWORD *)&v254 = sub_10017CFC4(0);
    v230 = *(_QWORD *)(a2 + 16);
    if (!v230)
      goto LABEL_174;
    swift_bridgeObjectRetain(a2);
    for (mm = 0; mm != v230; ++mm)
    {
      v232 = *(_QWORD *)(a2 + 8 * mm + 32);
      v233 = swift_bridgeObjectRetain(v232);
      sub_1001DA8B0(v233);
    }
    goto LABEL_173;
  }
  if (a1 == 0x323033444333 && a2 == 0xE600000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x323033444333, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v221 = sub_100146438((uint64_t *)&unk_1002B6E78);
    a2 = swift_allocObject(v221, 40, 7);
    *(_OWORD *)(a2 + 16) = xmmword_1002402A0;
    v222 = sub_10017CFB8(0);
    *(_QWORD *)(a2 + 32) = sub_1001BE7A4((uint64_t)v222);
    v259 = (_QWORD *)a2;
    strcpy((char *)&v257, "tx_power_info");
    HIWORD(v257) = -4864;
    AnyHashable.init<A>(_:)(&v257, &type metadata for String, &protocol witness table for String);
    sub_1001BC170((uint64_t)&v254, (uint64_t)a3, &v252);
    sub_10017F3E8((uint64_t)&v254);
    if (!*((_QWORD *)&v253[0] + 1))
      goto LABEL_360;
    v223 = sub_100146438(&qword_1002B6E58);
    if ((swift_dynamicCast(&v257, &v252, (char *)&type metadata for Any + 8, v223, 6) & 1) != 0)
    {
      v5 = (_QWORD *)v257;
      v224 = sub_1001BE420(v257);
      if ((v224 & 0x8000000000000000) == 0)
      {
        v225 = v224;
        if (v224)
        {
          sub_1001ABDA0();
          sub_1001ABDA0();
          v226 = 0;
          do
          {
            v227 = v5[v226 + 4];
            swift_bridgeObjectRetain(v227);
            sub_1001ABDA0();
            a2 = (unint64_t)v259;
            v229 = v259[2];
            v228 = v259[3];
            if (v229 >= v228 >> 1)
            {
              a2 = (unint64_t)sub_1001C76E4((_QWORD *)(v228 > 1), v229 + 1, 1, v259);
              v259 = (_QWORD *)a2;
            }
            ++v226;
            *(_QWORD *)(a2 + 16) = v229 + 1;
            *(_QWORD *)(a2 + 8 * v229 + 32) = v227;
          }
          while (v225 != v226);
        }
        goto LABEL_371;
      }
      goto LABEL_389;
    }
LABEL_361:
    v143 = a2;
    goto LABEL_208;
  }
  return v13;
}

_QWORD *sub_1001A888C(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  _BYTE v13[48];
  _OWORD v14[3];
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v15 = _swiftEmptyArrayStorage;
    sub_100195AC4(0, v1, 0);
    v4 = a1 + 32;
    v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_10014BD9C(v4, (uint64_t)v13, (uint64_t *)&unk_1002B56A0);
      v5 = sub_100146438((uint64_t *)&unk_1002B56A0);
      v6 = sub_100146438(&qword_1002B5698);
      swift_dynamicCast(v14, v13, v5, v6, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100195AC4(0, v2[2] + 1, 1);
        v2 = v15;
      }
      v8 = v2[2];
      v7 = v2[3];
      if (v8 >= v7 >> 1)
      {
        sub_100195AC4(v7 > 1, v8 + 1, 1);
        v2 = v15;
      }
      v2[2] = v8 + 1;
      v9 = &v2[6 * v8];
      v10 = v14[0];
      v11 = v14[2];
      v9[3] = v14[1];
      v9[4] = v11;
      v9[2] = v10;
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1001A89D0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100146438((uint64_t *)&unk_1002B6E60);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_10017E2BC(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(_QWORD *)&v40 = v20;
    *((_QWORD *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v20;
    *((_QWORD *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10017F278(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_10017F278(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_10017F278(v37, v38);
    sub_10017F278(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(_QWORD *)(v11 + 32) = v32;
    result = (uint64_t)sub_10017F278(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_100199AE8(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1001A8D94(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  NSData v39;
  __int128 v40;
  NSData v41;
  __int128 v42;
  NSData v43;
  __int128 v44;
  NSData v45;
  __int128 v46;
  NSData v47;
  id v48;
  _QWORD *v49;
  uint64_t v50;
  id v51;
  id v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  id v58;
  id v59;
  char *v60;
  id v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  id v67;
  uint64_t result;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  int v81;
  unint64_t v82;
  char v83;
  int v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  Swift::String v100;
  __int128 v101;
  uint64_t v102;
  void *v103;
  void *v104;
  Swift::String v105;
  uint64_t v106;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  void *v123;
  _QWORD *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  Swift::String v130;
  uint64_t v131;
  Swift::String v132;
  uint64_t v133;
  Swift::String v134;
  uint64_t v135;
  Swift::String v136;
  unint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  unint64_t v141;
  uint64_t v142;
  _BOOL8 v143;
  uint64_t v144;
  char v145;
  unint64_t v146;
  char v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  char v152;
  char v153;
  _QWORD *v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _OWORD v169[2];
  __int128 v170;
  __int128 v171;
  _QWORD *v172;

  v6 = a1;
  if (qword_1002B3A10 != -1)
    a1 = swift_once(&qword_1002B3A10, sub_1001747E0);
  v7 = qword_1002BF000;
  v8 = static os_log_type_t.default.getter(a1, a2, a3, a4);
  v9 = (void *)sub_100146438((uint64_t *)&unk_1002B57E0);
  v10 = swift_allocObject(v9, 72, 7);
  v11 = &type metadata for Int;
  v162 = xmmword_1002402A0;
  *(_OWORD *)(v10 + 16) = xmmword_1002402A0;
  v12 = &protocol witness table for Int;
  *(_QWORD *)(v10 + 56) = &type metadata for Int;
  *(_QWORD *)(v10 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v10 + 32) = v6;
  os_log(_:dso:log:type:_:)("exception metric %{public}d", 27, 2, &_mh_execute_header, v7, v8, v10);
  v13 = swift_bridgeObjectRelease(v10);
  if (v6 > 806912)
  {
    if (v6 != 806913)
    {
      if (v6 != 827650)
      {
        if (v6 == 827746)
        {
          v17 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey + 8);
          *(_QWORD *)&v170 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey);
          *((_QWORD *)&v170 + 1) = v17;
          swift_bridgeObjectRetain_n(v17, 2);
          v18 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v170, &type metadata for String);
          v19 = objc_msgSend(a2, "__swift_objectForKeyedSubscript:", v18);
          swift_unknownObjectRelease(v18);
          if (v19)
          {
            _bridgeAnyObjectToAny(_:)(&v170, v19);
            swift_unknownObjectRelease(v19);
          }
          else
          {
            v170 = 0u;
            v171 = 0u;
          }
          sub_10014BC64((uint64_t)&v170, (uint64_t)&v164, (uint64_t *)&unk_1002B5670);
          if (*((_QWORD *)&v165 + 1))
          {
            if ((swift_dynamicCast(v169, &v164, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
            {
              v42 = v169[0];
              swift_bridgeObjectRelease(v17);
              v43.super.isa = Data._bridgeToObjectiveC()().super.isa;
              sub_1001463B0(v42, *((unint64_t *)&v42 + 1));
              goto LABEL_66;
            }
            swift_bridgeObjectRelease(v17);
          }
          else
          {
            swift_bridgeObjectRelease(v17);
            sub_10014BDE0((uint64_t)&v164, (uint64_t *)&unk_1002B5670);
          }
          v43.super.isa = 0;
LABEL_66:
          v58 = objc_msgSend(objc_allocWithZone((Class)CellularRatLacSrvInfo), "initWithData:", v43.super.isa);

          if (v58)
          {
            v59 = objc_msgSend(v58, "dictionaryRepresentation");

            if (!v59)
              return 0;
            v60 = (char *)&type metadata for Any + 8;
LABEL_86:
            v49 = (_QWORD *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v59, &type metadata for AnyHashable, v60, &protocol witness table for AnyHashable);

            return (uint64_t)v49;
          }
          goto LABEL_189;
        }
LABEL_19:
        if (qword_1002B39E8 != -1)
          goto LABEL_185;
        goto LABEL_20;
      }
      v26 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey + 8);
      *(_QWORD *)&v170 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey);
      *((_QWORD *)&v170 + 1) = v26;
      swift_bridgeObjectRetain_n(v26, 2);
      v27 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v170, &type metadata for String);
      v28 = objc_msgSend(a2, "__swift_objectForKeyedSubscript:", v27);
      swift_unknownObjectRelease(v27);
      if (v28)
      {
        _bridgeAnyObjectToAny(_:)(&v170, v28);
        swift_unknownObjectRelease(v28);
      }
      else
      {
        v170 = 0u;
        v171 = 0u;
      }
      sub_10014BC64((uint64_t)&v170, (uint64_t)&v164, (uint64_t *)&unk_1002B5670);
      if (*((_QWORD *)&v165 + 1))
      {
        if ((swift_dynamicCast(v169, &v164, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
        {
          v40 = v169[0];
          swift_bridgeObjectRelease(v26);
          v41.super.isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1001463B0(v40, *((unint64_t *)&v40 + 1));
          goto LABEL_54;
        }
        swift_bridgeObjectRelease(v26);
      }
      else
      {
        swift_bridgeObjectRelease(v26);
        sub_10014BDE0((uint64_t)&v164, (uint64_t *)&unk_1002B5670);
      }
      v41.super.isa = 0;
LABEL_54:
      v51 = objc_msgSend(objc_allocWithZone((Class)CellularRegisteredPlmnStatus), "initWithData:", v41.super.isa);

      if (v51)
      {
        v52 = objc_msgSend(v51, "dictionaryRepresentation");

        if (!v52)
          return 0;
        v49 = (_QWORD *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v52, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

        v172 = v49;
        *(_QWORD *)&v170 = 0x6C5F6E6D6C706865;
        *((_QWORD *)&v170 + 1) = 0xEB00000000747369;
        swift_bridgeObjectRetain(v49);
        AnyHashable.init<A>(_:)(&v170, &type metadata for String, &protocol witness table for String);
        if (v49[2] && (v53 = sub_1001C7CFC((uint64_t)&v164), (v54 & 1) != 0))
        {
          sub_10017E2BC(v49[7] + 32 * v53, (uint64_t)&v170);
        }
        else
        {
          v170 = 0u;
          v171 = 0u;
        }
        sub_10017F3E8((uint64_t)&v164);
        v55 = *((_QWORD *)&v171 + 1);
        sub_10014BDE0((uint64_t)&v170, (uint64_t *)&unk_1002B5670);
        if (v55)
        {
          *(_QWORD *)&v169[0] = 0x6C5F6E6D6C706865;
          *((_QWORD *)&v169[0] + 1) = 0xEB00000000747369;
          AnyHashable.init<A>(_:)(v169, &type metadata for String, &protocol witness table for String);
          if (v49[2] && (v56 = sub_1001C7CFC((uint64_t)&v164), (v57 & 1) != 0))
          {
            sub_10017E2BC(v49[7] + 32 * v56, (uint64_t)&v170);
          }
          else
          {
            v170 = 0u;
            v171 = 0u;
          }
          swift_bridgeObjectRelease(v49);
          sub_10017F3E8((uint64_t)&v164);
          if (!*((_QWORD *)&v171 + 1))
          {
            sub_10014BDE0((uint64_t)&v170, (uint64_t *)&unk_1002B5670);
            return (uint64_t)v49;
          }
          v69 = sub_100146438(&qword_1002B6E48);
          if ((swift_dynamicCast(v169, &v170, (char *)&type metadata for Any + 8, v69, 6) & 1) == 0)
            return (uint64_t)v49;
          v70 = *(_QWORD **)&v169[0];
          v71 = *(_QWORD *)(*(_QWORD *)&v169[0] + 16);
          if (v71)
          {
            v72 = 0;
            v73 = 0;
            v163 = *(_QWORD *)&v169[0];
            v74 = *(_QWORD *)&v169[0] + 32;
            v75 = 1;
            v76 = 1;
            while (1)
            {
              sub_10017E2BC(v74, (uint64_t)&v164);
              v77 = sub_100146438(&qword_1002B6E50);
              if ((swift_dynamicCast(&v170, &v164, (char *)&type metadata for Any + 8, v77, 6) & 1) != 0)
                break;
LABEL_95:
              v74 += 32;
              if (!--v71)
              {
                swift_bridgeObjectRelease(v163);
                if (((v76 | v75) & 1) == 0)
                {
                  *(_QWORD *)&v170 = 1313688656;
                  *((_QWORD *)&v170 + 1) = 0xE400000000000000;
                  AnyHashable.init<A>(_:)(&v170, &type metadata for String, &protocol witness table for String);
                  *(_QWORD *)&v170 = v73;
                  v97 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
                  v99 = v98;
                  *(_QWORD *)&v170 = v97;
                  *((_QWORD *)&v170 + 1) = v98;
                  swift_bridgeObjectRetain(v98);
                  v100._countAndFlagsBits = 32;
                  v100._object = (void *)0xE100000000000000;
                  String.append(_:)(v100);
                  swift_bridgeObjectRelease(v99);
                  v101 = v170;
                  *(_QWORD *)&v170 = v72;
                  v102 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
                  v104 = v103;
                  v170 = v101;
                  swift_bridgeObjectRetain(*((_QWORD *)&v101 + 1));
                  v105._countAndFlagsBits = v102;
                  v105._object = v104;
                  String.append(_:)(v105);
                  swift_bridgeObjectRelease(*((_QWORD *)&v101 + 1));
                  swift_bridgeObjectRelease(v104);
                  *((_QWORD *)&v171 + 1) = &type metadata for String;
                  sub_10017F278(&v170, v169);
                  v106 = (uint64_t)v172;
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v172);
                  v168 = v106;
                  sub_1001C99E8(v169, (uint64_t)&v164, isUniquelyReferenced_nonNull_native);
                  v172 = (_QWORD *)v168;
                  swift_bridgeObjectRelease(0x8000000000000000);
                  sub_10017F3E8((uint64_t)&v164);
                  *(_QWORD *)&v170 = 0x6C5F6E6D6C706865;
                  *((_QWORD *)&v170 + 1) = 0xEB00000000747369;
                  AnyHashable.init<A>(_:)(&v170, &type metadata for String, &protocol witness table for String);
                  sub_10017D194((uint64_t)&v164, &v170);
                  sub_10017F3E8((uint64_t)&v164);
LABEL_51:
                  sub_10014BDE0((uint64_t)&v170, (uint64_t *)&unk_1002B5670);
                  return (uint64_t)v172;
                }
                return (uint64_t)v49;
              }
            }
            v78 = v170;
            if (*(_QWORD *)(v170 + 16) && (v79 = sub_1001C7C98(4408141, 0xE300000000000000), (v80 & 1) != 0))
            {
              sub_10017E2BC(*(_QWORD *)(v78 + 56) + 32 * v79, (uint64_t)&v164);
              v81 = swift_dynamicCast(&v170, &v164, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
              if (v81)
                v73 = v170;
              else
                v73 = 0;
              v76 = v81 ^ 1;
              if (!*(_QWORD *)(v78 + 16))
                goto LABEL_107;
            }
            else
            {
              v73 = 0;
              v76 = 1;
              if (!*(_QWORD *)(v78 + 16))
                goto LABEL_107;
            }
            v82 = sub_1001C7C98(4410957, 0xE300000000000000);
            if ((v83 & 1) != 0)
            {
              sub_10017E2BC(*(_QWORD *)(v78 + 56) + 32 * v82, (uint64_t)&v164);
              goto LABEL_108;
            }
LABEL_107:
            v164 = 0u;
            v165 = 0u;
LABEL_108:
            swift_bridgeObjectRelease(v78);
            if (*((_QWORD *)&v165 + 1))
            {
              v84 = swift_dynamicCast(&v170, &v164, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
              if (v84)
                v72 = v170;
              else
                v72 = 0;
              v75 = v84 ^ 1;
            }
            else
            {
              sub_10014BDE0((uint64_t)&v164, (uint64_t *)&unk_1002B5670);
              v72 = 0;
              v75 = 1;
            }
            goto LABEL_95;
          }
        }
        else
        {
          v70 = v49;
        }
        swift_bridgeObjectRelease(v70);
        return (uint64_t)v49;
      }
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
      goto LABEL_190;
    }
    v23 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey + 8);
    *(_QWORD *)&v170 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey);
    *((_QWORD *)&v170 + 1) = v23;
    swift_bridgeObjectRetain_n(v23, 2);
    v24 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v170, &type metadata for String);
    v25 = objc_msgSend(a2, "__swift_objectForKeyedSubscript:", v24);
    swift_unknownObjectRelease(v24);
    if (v25)
    {
      _bridgeAnyObjectToAny(_:)(&v170, v25);
      swift_unknownObjectRelease(v25);
    }
    else
    {
      v170 = 0u;
      v171 = 0u;
    }
    sub_10014BC64((uint64_t)&v170, (uint64_t)&v164, (uint64_t *)&unk_1002B5670);
    if (*((_QWORD *)&v165 + 1))
    {
      if ((swift_dynamicCast(v169, &v164, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
      {
        v38 = v169[0];
        swift_bridgeObjectRelease(v23);
        v39.super.isa = Data._bridgeToObjectiveC()().super.isa;
        sub_1001463B0(v38, *((unint64_t *)&v38 + 1));
        goto LABEL_48;
      }
      swift_bridgeObjectRelease(v23);
    }
    else
    {
      swift_bridgeObjectRelease(v23);
      sub_10014BDE0((uint64_t)&v164, (uint64_t *)&unk_1002B5670);
    }
    v39.super.isa = 0;
LABEL_48:
    v48 = objc_msgSend(objc_allocWithZone((Class)CellularNrOtaMsg), "initWithData:", v39.super.isa);

    if (v48)
    {
      v49 = objc_msgSend(v48, "dictionaryRepresentation");

      if (v49)
      {
        v50 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v49, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

        v172 = (_QWORD *)v50;
        *(_QWORD *)&v170 = 0x6E61725F71657266;
        *((_QWORD *)&v170 + 1) = 0xEA00000000006567;
        AnyHashable.init<A>(_:)(&v170, &type metadata for String, &protocol witness table for String);
        sub_10017D194((uint64_t)&v164, &v170);
        sub_10017F3E8((uint64_t)&v164);
        sub_10014BDE0((uint64_t)&v170, (uint64_t *)&unk_1002B5670);
        *(_QWORD *)&v170 = 0x6C6C65635F796870;
        *((_QWORD *)&v170 + 1) = 0xEB0000000064695FLL;
        AnyHashable.init<A>(_:)(&v170, &type metadata for String, &protocol witness table for String);
        sub_10017D194((uint64_t)&v164, &v170);
        sub_10017F3E8((uint64_t)&v164);
        sub_10014BDE0((uint64_t)&v170, (uint64_t *)&unk_1002B5670);
        *(_QWORD *)&v170 = 0x77625F6C64;
        *((_QWORD *)&v170 + 1) = 0xE500000000000000;
        AnyHashable.init<A>(_:)(&v170, &type metadata for String, &protocol witness table for String);
        sub_10017D194((uint64_t)&v164, &v170);
        sub_10017F3E8((uint64_t)&v164);
        sub_10014BDE0((uint64_t)&v170, (uint64_t *)&unk_1002B5670);
        strcpy((char *)&v170, "freq_band_ind");
        HIWORD(v170) = -4864;
        AnyHashable.init<A>(_:)(&v170, &type metadata for String, &protocol witness table for String);
        sub_10017D194((uint64_t)&v164, &v170);
        sub_10017F3E8((uint64_t)&v164);
        sub_10014BDE0((uint64_t)&v170, (uint64_t *)&unk_1002B5670);
        *(_QWORD *)&v170 = 0x77625F6C64;
        *((_QWORD *)&v170 + 1) = 0xE500000000000000;
        AnyHashable.init<A>(_:)(&v170, &type metadata for String, &protocol witness table for String);
        sub_10017D194((uint64_t)&v164, &v170);
        sub_10017F3E8((uint64_t)&v164);
        goto LABEL_51;
      }
      return (uint64_t)v49;
    }
    goto LABEL_187;
  }
  if (v6 != 806480)
  {
    if (v6 != 806743)
      goto LABEL_19;
    v20 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey + 8);
    *(_QWORD *)&v170 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey);
    *((_QWORD *)&v170 + 1) = v20;
    swift_bridgeObjectRetain_n(v20, 2);
    v21 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v170, &type metadata for String);
    v22 = objc_msgSend(a2, "__swift_objectForKeyedSubscript:", v21);
    swift_unknownObjectRelease(v21);
    if (v22)
    {
      _bridgeAnyObjectToAny(_:)(&v170, v22);
      swift_unknownObjectRelease(v22);
    }
    else
    {
      v170 = 0u;
      v171 = 0u;
    }
    sub_10014BC64((uint64_t)&v170, (uint64_t)&v164, (uint64_t *)&unk_1002B5670);
    if (*((_QWORD *)&v165 + 1))
    {
      if ((swift_dynamicCast(v169, &v164, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
      {
        v46 = v169[0];
        swift_bridgeObjectRelease(v20);
        v47.super.isa = Data._bridgeToObjectiveC()().super.isa;
        sub_1001463B0(v46, *((unint64_t *)&v46 + 1));
        goto LABEL_83;
      }
      swift_bridgeObjectRelease(v20);
    }
    else
    {
      swift_bridgeObjectRelease(v20);
      sub_10014BDE0((uint64_t)&v164, (uint64_t *)&unk_1002B5670);
    }
    v47.super.isa = 0;
LABEL_83:
    v67 = objc_msgSend(objc_allocWithZone((Class)CellularLteConnectionStats), "initWithData:", v47.super.isa);

    if (v67)
    {
      v59 = objc_msgSend(v67, "dictionaryRepresentation");

      if (!v59)
        return 0;
      v60 = (char *)&type metadata for Any + 8;
      goto LABEL_86;
    }
    goto LABEL_191;
  }
  v29 = sub_1001BE7A4((uint64_t)_swiftEmptyArrayStorage);
  v172 = (_QWORD *)v29;
  v30 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey);
  v31 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13FTMInternal_413MetricService_payloadKey + 8);
  *(_QWORD *)&v170 = v30;
  *((_QWORD *)&v170 + 1) = v31;
  swift_bridgeObjectRetain_n(v31, 2);
  v32 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v170, &type metadata for String);
  v33 = objc_msgSend(a2, "__swift_objectForKeyedSubscript:", v32);
  swift_unknownObjectRelease(v32);
  if (v33)
  {
    _bridgeAnyObjectToAny(_:)(&v170, v33);
    swift_unknownObjectRelease(v33);
  }
  else
  {
    v170 = 0u;
    v171 = 0u;
  }
  sub_10014BC64((uint64_t)&v170, (uint64_t)&v164, (uint64_t *)&unk_1002B5670);
  if (*((_QWORD *)&v165 + 1))
  {
    if ((swift_dynamicCast(v169, &v164, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
    {
      v44 = v169[0];
      swift_bridgeObjectRelease(v31);
      v45.super.isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1001463B0(v44, *((unint64_t *)&v44 + 1));
      goto LABEL_71;
    }
    swift_bridgeObjectRelease(v31);
  }
  else
  {
    swift_bridgeObjectRelease(v31);
    sub_10014BDE0((uint64_t)&v164, (uint64_t *)&unk_1002B5670);
  }
  v45.super.isa = 0;
LABEL_71:
  v61 = objc_msgSend(objc_allocWithZone((Class)CellularLteCellMetric), "initWithData:", v45.super.isa);

  if (v61)
  {
    v62 = objc_msgSend(v61, "dictionaryRepresentation");

    if (!v62)
    {
      v37 = v29;
      goto LABEL_80;
    }
    v63 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v62, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    *(_QWORD *)&v170 = 0x64695F73627573;
    *((_QWORD *)&v170 + 1) = 0xE700000000000000;
    AnyHashable.init<A>(_:)(&v170, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v63 + 16) && (v64 = sub_1001C7CFC((uint64_t)&v164), (v65 & 1) != 0))
    {
      sub_10017E2BC(*(_QWORD *)(v63 + 56) + 32 * v64, (uint64_t)&v170);
    }
    else
    {
      v170 = 0u;
      v171 = 0u;
    }
    sub_10017F3E8((uint64_t)&v164);
    if (*((_QWORD *)&v171 + 1))
    {
      sub_10017F278(&v170, v169);
      v66 = swift_isUniquelyReferenced_nonNull_native(v29);
      v168 = v29;
      sub_1001C98B8(v169, 0x64695F73627573, 0xE700000000000000, v66);
      v172 = (_QWORD *)v168;
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      sub_10014BDE0((uint64_t)&v170, (uint64_t *)&unk_1002B5670);
      sub_10017D0A4(0x64695F73627573, 0xE700000000000000, v169);
      sub_10014BDE0((uint64_t)v169, (uint64_t *)&unk_1002B5670);
    }
    *(_QWORD *)&v170 = 0x6D617473656D6974;
    *((_QWORD *)&v170 + 1) = 0xE900000000000070;
    AnyHashable.init<A>(_:)(&v170, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v63 + 16) && (v85 = sub_1001C7CFC((uint64_t)&v164), (v86 & 1) != 0))
    {
      sub_10017E2BC(*(_QWORD *)(v63 + 56) + 32 * v85, (uint64_t)&v170);
    }
    else
    {
      v170 = 0u;
      v171 = 0u;
    }
    sub_10017F3E8((uint64_t)&v164);
    if (*((_QWORD *)&v171 + 1))
    {
      sub_10017F278(&v170, v169);
      v87 = (uint64_t)v172;
      v88 = swift_isUniquelyReferenced_nonNull_native(v172);
      v168 = v87;
      sub_1001C98B8(v169, 0x6D617473656D6974, 0xE900000000000070, v88);
      v172 = (_QWORD *)v168;
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      sub_10014BDE0((uint64_t)&v170, (uint64_t *)&unk_1002B5670);
      sub_10017D0A4(0x6D617473656D6974, 0xE900000000000070, v169);
      sub_10014BDE0((uint64_t)v169, (uint64_t *)&unk_1002B5670);
    }
    v89 = sub_1001AA524(v63);
    swift_bridgeObjectRelease(v63);
    if (!v89)
      goto LABEL_181;
    if (*(_QWORD *)(v89 + 16) && (v90 = sub_1001C7C98(0x7274656D5F65746CLL, 0xEB00000000736369), (v91 & 1) != 0))
    {
      sub_10017E2BC(*(_QWORD *)(v89 + 56) + 32 * v90, (uint64_t)&v164);
    }
    else
    {
      v164 = 0u;
      v165 = 0u;
    }
    swift_bridgeObjectRelease(v89);
    if (*((_QWORD *)&v165 + 1))
    {
      v92 = sub_100146438(&qword_1002B6E58);
      if ((swift_dynamicCast(&v170, &v164, (char *)&type metadata for Any + 8, v92, 6) & 1) == 0)
        goto LABEL_181;
      v93 = v170;
      if (*(_QWORD *)(v170 + 16))
      {
        v94 = *(_QWORD *)(v170 + 32);
        swift_bridgeObjectRetain(v94);
        swift_bridgeObjectRelease(v93);
        if (*(_QWORD *)(v94 + 16) && (v95 = sub_1001C7C98(1819043171, 0xE400000000000000), (v96 & 1) != 0))
        {
          sub_10017E2BC(*(_QWORD *)(v94 + 56) + 32 * v95, (uint64_t)&v164);
        }
        else
        {
          v164 = 0u;
          v165 = 0u;
        }
        swift_bridgeObjectRelease(v94);
        if (*((_QWORD *)&v165 + 1))
        {
          if ((swift_dynamicCast(&v170, &v164, (char *)&type metadata for Any + 8, v92, 6) & 1) != 0)
          {
            v108 = v170;
            v161 = *(_QWORD *)(v170 + 16);
            if (v161)
            {
              v109 = 0;
              v160 = v170 + 32;
              v9 = &protocol witness table for Int;
              v159 = v170;
              while (1)
              {
                if (v109 >= *(_QWORD *)(v108 + 16))
                {
                  __break(1u);
LABEL_187:
                  __break(1u);
                  goto LABEL_188;
                }
                v110 = *(_QWORD *)(v160 + 8 * v109);
                v111 = *(_QWORD *)(v110 + 16);
                swift_bridgeObjectRetain(v110);
                *(_QWORD *)&v162 = v109;
                if (v111
                  && (v112 = sub_1001C7C98(1684955490, 0xE400000000000000), (v113 & 1) != 0)
                  && (sub_10017E2BC(*(_QWORD *)(v110 + 56) + 32 * v112, (uint64_t)&v164),
                      swift_dynamicCast(&v170, &v164, (char *)&type metadata for Any + 8, &type metadata for Int, 6)))
                {
                  v114 = v170;
                }
                else
                {
                  v114 = 0;
                }
                v115 = -1 << *(_BYTE *)(v110 + 32);
                v116 = *(_QWORD *)(v110 + 64);
                v117 = ~v115;
                v118 = -v115;
                *(_QWORD *)&v164 = v110;
                *((_QWORD *)&v164 + 1) = v110 + 64;
                v119 = v118 < 64 ? ~(-1 << v118) : -1;
                v165 = (unint64_t)v117;
                v166 = v119 & v116;
                v167 = 0;
                swift_bridgeObjectRetain(v110);
                sub_1001A5104();
                if (v121)
                  break;
LABEL_142:
                v109 = v162 + 1;
                sub_100199AE8(v164);
                swift_bridgeObjectRelease(v110);
                v108 = v159;
                if ((_QWORD)v162 + 1 == v161)
                  goto LABEL_182;
              }
              v122 = v120;
              v123 = v121;
              while (1)
              {
                *(_QWORD *)&v170 = v114;
                v127 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
                v129 = v128;
                *(_QWORD *)&v170 = v127;
                *((_QWORD *)&v170 + 1) = v128;
                swift_bridgeObjectRetain(v128);
                v130._countAndFlagsBits = 45;
                v130._object = (void *)0xE100000000000000;
                String.append(_:)(v130);
                swift_bridgeObjectRelease(v129);
                v131 = *((_QWORD *)&v170 + 1);
                swift_bridgeObjectRetain(*((_QWORD *)&v170 + 1));
                v132._countAndFlagsBits = 0x6E6F6974636573;
                v132._object = (void *)0xE700000000000000;
                String.append(_:)(v132);
                swift_bridgeObjectRelease(v131);
                v133 = *((_QWORD *)&v170 + 1);
                swift_bridgeObjectRetain(*((_QWORD *)&v170 + 1));
                v134._countAndFlagsBits = 45;
                v134._object = (void *)0xE100000000000000;
                String.append(_:)(v134);
                swift_bridgeObjectRelease(v133);
                v135 = *((_QWORD *)&v170 + 1);
                swift_bridgeObjectRetain(*((_QWORD *)&v170 + 1));
                v136._countAndFlagsBits = v122;
                v136._object = v123;
                String.append(_:)(v136);
                swift_bridgeObjectRelease(v135);
                v11 = (void *)*((_QWORD *)&v170 + 1);
                v12 = (void *)v170;
                if (*(_QWORD *)(v110 + 16) && (v137 = sub_1001C7C98(v122, (uint64_t)v123), (v138 & 1) != 0))
                {
                  sub_10017E2BC(*(_QWORD *)(v110 + 56) + 32 * v137, (uint64_t)&v170);
                }
                else
                {
                  v170 = 0u;
                  v171 = 0u;
                }
                swift_bridgeObjectRelease(v123);
                if (!*((_QWORD *)&v171 + 1))
                {
                  sub_10014BDE0((uint64_t)&v170, (uint64_t *)&unk_1002B5670);
                  v149 = (uint64_t)v172;
                  swift_bridgeObjectRetain(v172);
                  v150 = sub_1001C7C98((uint64_t)v12, (uint64_t)v11);
                  v152 = v151;
                  swift_bridgeObjectRelease(v149);
                  if ((v152 & 1) != 0)
                  {
                    v153 = swift_isUniquelyReferenced_nonNull_native(v149);
                    v168 = v149;
                    if ((v153 & 1) == 0)
                    {
                      sub_1001CA558();
                      v149 = v168;
                    }
                    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v149 + 48) + 16 * v150 + 8));
                    sub_10017F278((_OWORD *)(*(_QWORD *)(v149 + 56) + 32 * v150), v169);
                    sub_1001D5914(v150, v149);
                    v172 = (_QWORD *)v149;
                    swift_bridgeObjectRelease(0x8000000000000000);
                  }
                  else
                  {
                    memset(v169, 0, sizeof(v169));
                  }
                  swift_bridgeObjectRelease(v11);
                  sub_10014BDE0((uint64_t)v169, (uint64_t *)&unk_1002B5670);
                  goto LABEL_156;
                }
                sub_10017F278(&v170, v169);
                v139 = (uint64_t)v172;
                v6 = swift_isUniquelyReferenced_nonNull_native(v172);
                v168 = v139;
                v141 = sub_1001C7C98((uint64_t)v12, (uint64_t)v11);
                v142 = *(_QWORD *)(v139 + 16);
                v143 = (v140 & 1) == 0;
                v144 = v142 + v143;
                if (__OFADD__(v142, v143))
                {
                  __break(1u);
LABEL_184:
                  __break(1u);
LABEL_185:
                  v13 = swift_once(&qword_1002B39E8, sub_100174680);
LABEL_20:
                  v34 = qword_1002BEFD8;
                  v35 = static os_log_type_t.default.getter(v13, v14, v15, v16);
                  v36 = swift_allocObject(v9, 72, 7);
                  *(_OWORD *)(v36 + 16) = v162;
                  *(_QWORD *)(v36 + 56) = v11;
                  *(_QWORD *)(v36 + 64) = v12;
                  *(_QWORD *)(v36 + 32) = v6;
                  os_log(_:dso:log:type:_:)("handleEdgeCaseMetrics - unable to process metricId: %{public}d ", 63, 2, &_mh_execute_header, v34, v35, v36);
                  v37 = v36;
LABEL_80:
                  swift_bridgeObjectRelease(v37);
                  return 0;
                }
                v145 = v140;
                if (*(_QWORD *)(v139 + 24) >= v144)
                {
                  if ((v6 & 1) != 0)
                  {
                    v148 = (_QWORD *)v168;
                    if ((v140 & 1) == 0)
                      goto LABEL_173;
                  }
                  else
                  {
                    sub_1001CA558();
                    v148 = (_QWORD *)v168;
                    if ((v145 & 1) == 0)
                      goto LABEL_173;
                  }
                }
                else
                {
                  sub_1001C8370(v144, v6);
                  v146 = sub_1001C7C98((uint64_t)v12, (uint64_t)v11);
                  if ((v145 & 1) != (v147 & 1))
                    goto LABEL_192;
                  v141 = v146;
                  v148 = (_QWORD *)v168;
                  if ((v145 & 1) == 0)
                  {
LABEL_173:
                    v148[(v141 >> 6) + 8] |= 1 << v141;
                    v154 = (_QWORD *)(v148[6] + 16 * v141);
                    *v154 = v12;
                    v154[1] = v11;
                    sub_10017F278(v169, (_OWORD *)(v148[7] + 32 * v141));
                    v155 = v148[2];
                    v156 = __OFADD__(v155, 1);
                    v157 = v155 + 1;
                    if (v156)
                      goto LABEL_184;
                    v148[2] = v157;
                    swift_bridgeObjectRetain(v11);
                    goto LABEL_155;
                  }
                }
                v124 = (_QWORD *)(v148[7] + 32 * v141);
                sub_10014652C(v124);
                sub_10017F278(v169, v124);
LABEL_155:
                v172 = v148;
                swift_bridgeObjectRelease(v11);
                swift_bridgeObjectRelease(0x8000000000000000);
LABEL_156:
                sub_1001A5104();
                v122 = v125;
                v123 = v126;
                if (!v126)
                  goto LABEL_142;
              }
            }
LABEL_182:
            swift_bridgeObjectRelease(v108);
          }
LABEL_181:
          v158 = (uint64_t)v172;
          v49 = (_QWORD *)sub_1001A89D0((uint64_t)v172);
          swift_bridgeObjectRelease(v158);
          return (uint64_t)v49;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v170);
        v164 = 0u;
        v165 = 0u;
      }
    }
    sub_10014BDE0((uint64_t)&v164, (uint64_t *)&unk_1002B5670);
    goto LABEL_181;
  }
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_1001AA524(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  _OWORD v30[2];
  __int128 v31;
  _OWORD v32[2];
  _OWORD v33[2];
  _OWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[2];
  uint64_t v39;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100146438((uint64_t *)&unk_1002B69D0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v26 = a1 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(a1 + 64);
  v25 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = (v6 - 1) & v6;
      v12 = __clz(__rbit64(v6)) | (v8 << 6);
      v13 = v8;
    }
    else
    {
      v14 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_37;
      if (v14 >= v25)
      {
LABEL_33:
        sub_100199AE8(a1);
        return (unint64_t)v3;
      }
      v15 = *(_QWORD *)(v26 + 8 * v14);
      v13 = v8 + 1;
      if (!v15)
      {
        v13 = v8 + 2;
        if (v8 + 2 >= v25)
          goto LABEL_33;
        v15 = *(_QWORD *)(v26 + 8 * v13);
        if (!v15)
        {
          v13 = v8 + 3;
          if (v8 + 3 >= v25)
            goto LABEL_33;
          v15 = *(_QWORD *)(v26 + 8 * v13);
          if (!v15)
          {
            v13 = v8 + 4;
            if (v8 + 4 >= v25)
              goto LABEL_33;
            v15 = *(_QWORD *)(v26 + 8 * v13);
            if (!v15)
            {
              v16 = v8 + 5;
              if (v8 + 5 >= v25)
                goto LABEL_33;
              v15 = *(_QWORD *)(v26 + 8 * v16);
              if (!v15)
              {
                while (1)
                {
                  v13 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_38;
                  if (v13 >= v25)
                    goto LABEL_33;
                  v15 = *(_QWORD *)(v26 + 8 * v13);
                  ++v16;
                  if (v15)
                    goto LABEL_26;
                }
              }
              v13 = v8 + 5;
            }
          }
        }
      }
LABEL_26:
      v11 = (v15 - 1) & v15;
      v12 = __clz(__rbit64(v15)) + (v13 << 6);
    }
    sub_1001ABDE8(*(_QWORD *)(a1 + 48) + 40 * v12, (uint64_t)v37);
    sub_10017E2BC(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    sub_1001ABDE8((uint64_t)v34, (uint64_t)v29);
    if (!swift_dynamicCast(&v27, v29, &type metadata for AnyHashable, &type metadata for String, 6))
    {
      v27 = 0;
      v28 = 0;
      sub_10014BDE0((uint64_t)v34, &qword_1002B6E70);
      swift_bridgeObjectRelease(v28);
      sub_100199AE8(a1);
      swift_release(v3);
      return 0;
    }
    v17 = v27;
    v18 = v28;
    sub_10017E2BC((uint64_t)v35 + 8, (uint64_t)v29);
    sub_10014BDE0((uint64_t)v34, &qword_1002B6E70);
    sub_10017F278(v29, v30);
    *(_QWORD *)&v31 = v17;
    *((_QWORD *)&v31 + 1) = v18;
    sub_10017F278(v30, v32);
    v19 = v31;
    sub_10017F278(v32, v33);
    sub_10017F278(v33, &v31);
    result = sub_1001C7C98(v19, *((uint64_t *)&v19 + 1));
    v20 = result;
    if ((v21 & 1) != 0)
    {
      v9 = v3[6] + 16 * result;
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
      *(_OWORD *)v9 = v19;
      v10 = (_QWORD *)(v3[7] + 32 * v20);
      sub_10014652C(v10);
      result = (unint64_t)sub_10017F278(&v31, v10);
      goto LABEL_8;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v3[6] + 16 * result) = v19;
    result = (unint64_t)sub_10017F278(&v31, (_OWORD *)(v3[7] + 32 * result));
    v22 = v3[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_36;
    v3[2] = v24;
LABEL_8:
    v8 = v13;
    v6 = v11;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1001AA8F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char v10;
  uint64_t result;
  _QWORD v13[2];
  _BYTE v14[40];
  __int128 v15;
  __int128 v16;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v6);
  v13[0] = 0x6D617473656D6974;
  v13[1] = 0xE900000000000070;
  AnyHashable.init<A>(_:)(v13, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v9 = sub_1001C7CFC((uint64_t)v14), (v10 & 1) != 0))
  {
    sub_10017E2BC(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v15);
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
  }
  sub_10017F3E8((uint64_t)v14);
  if (!*((_QWORD *)&v16 + 1))
    return sub_10014BDE0((uint64_t)&v15, (uint64_t *)&unk_1002B5670);
  result = swift_dynamicCast(v13, &v15, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
  if ((result & 1) != 0)
  {
    Date.init(timeIntervalSince1970:)((double)v13[0] / 1000.0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
  }
  return result;
}

void sub_1001AAA64(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  NSObject v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void *v52;
  uint64_t v53;
  _OWORD *v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  id v95;
  id v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  id v108;
  id v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  char v127;
  unint64_t v128;
  uint64_t v129;
  _BOOL8 v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  char v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  int *v158;
  uint64_t v159;
  __int128 *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  NSString v174;
  void (*v175)(uint64_t, uint64_t, uint64_t);
  NSString v176;
  Class isa;
  NSString v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  int64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int128 v191;
  void *v192;
  _QWORD *v193;
  _OWORD v194[2];
  __int128 v195;
  void *v196;
  _OWORD v197[2];
  _QWORD *v198;
  uint64_t v199;
  _QWORD v200[4];
  _QWORD v201[4];
  _BYTE v202[32];
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  _OWORD v206[2];
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;

  v179 = a3;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t)&v154 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = type metadata accessor for UUID(0);
  v187 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v10 = (char *)&v154 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for Metric(0);
  v12 = __chkstk_darwin(v11);
  v166 = (uint64_t)&v154 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v186 = (uint64_t)&v154 - v14;
  *(_QWORD *)&v197[0] = 0x64695F73627573;
  *((_QWORD *)&v197[0] + 1) = 0xE700000000000000;
  AnyHashable.init<A>(_:)(v197, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16))
  {
    v15 = sub_1001C7CFC((uint64_t)v206);
    if ((v16 & 1) != 0)
    {
      sub_10017E2BC(*(_QWORD *)(a1 + 56) + 32 * v15, (uint64_t)&v203);
    }
    else
    {
      v203 = 0u;
      v204 = 0u;
    }
  }
  else
  {
    v203 = 0u;
    v204 = 0u;
  }
  sub_10017F3E8((uint64_t)v206);
  if (!*((_QWORD *)&v204 + 1))
  {
    sub_10014BDE0((uint64_t)&v203, (uint64_t *)&unk_1002B5670);
    return;
  }
  v17 = swift_dynamicCast(v197, &v203, (char *)&type metadata for Any + 8, &type metadata for Int32, 6);
  if ((v17 & 1) != 0)
  {
    v158 = v11;
    v183 = v6;
    v162 = v5;
    LODWORD(v11) = v197[0];
    if (qword_1002B3A10 != -1)
      goto LABEL_96;
LABEL_9:
    v21 = qword_1002BF000;
    v22 = static os_log_type_t.default.getter(v17, v18, v19, v20);
    v190 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v23 = swift_allocObject(v190, 72, 7);
    v154 = xmmword_1002402A0;
    *(_OWORD *)(v23 + 16) = xmmword_1002402A0;
    *(_QWORD *)(v23 + 56) = &type metadata for Int32;
    *(_QWORD *)(v23 + 64) = &protocol witness table for Int32;
    v188 = (int)v11;
    *(_DWORD *)(v23 + 32) = (_DWORD)v11;
    os_log(_:dso:log:type:_:)("subsId  ---> %{public}d", 23, 2, &_mh_execute_header, v21, v22, v23);
    swift_bridgeObjectRelease(v23);
    v24 = *(_QWORD *)(a1 + 64);
    v163 = a1 + 64;
    v25 = 1 << *(_BYTE *)(a1 + 32);
    v26 = -1;
    if (v25 < 64)
      v26 = ~(-1 << v25);
    v27 = v26 & v24;
    v164 = (unint64_t)(v25 + 63) >> 6;
    v160 = a2 + 1;
    swift_bridgeObjectRetain(a1);
    v28 = 0;
    v165 = (char *)&type metadata for Any + 8;
    v156 = xmmword_100243230;
    v157 = xmmword_100242020;
    v181 = xmmword_100242010;
    v155 = xmmword_100242000;
    v161 = v8;
    v8 = (uint64_t)&unk_1002B5670;
    v182 = v10;
    v10 = (char *)&type metadata for String;
    v11 = (int *)v202;
    v159 = a1;
    v168 = a2;
    if (!v27)
    {
LABEL_15:
      v31 = v28 + 1;
      a2 = (_OWORD *)v190;
      if (__OFADD__(v28, 1))
        goto LABEL_95;
      if (v31 >= v164)
      {
LABEL_92:
        swift_release(a1);
      }
      else
      {
        v32 = *(_QWORD *)(v163 + 8 * v31);
        ++v28;
        if (v32)
          goto LABEL_32;
        v28 = v31 + 1;
        if (v31 + 1 >= v164)
          goto LABEL_92;
        v32 = *(_QWORD *)(v163 + 8 * v28);
        if (v32)
          goto LABEL_32;
        v28 = v31 + 2;
        if (v31 + 2 >= v164)
          goto LABEL_92;
        v32 = *(_QWORD *)(v163 + 8 * v28);
        if (v32)
          goto LABEL_32;
        v28 = v31 + 3;
        if (v31 + 3 >= v164)
          goto LABEL_92;
        v32 = *(_QWORD *)(v163 + 8 * v28);
        if (v32)
          goto LABEL_32;
        v28 = v31 + 4;
        if (v31 + 4 >= v164)
          goto LABEL_92;
        v32 = *(_QWORD *)(v163 + 8 * v28);
        if (v32)
        {
LABEL_32:
          v27 = (v32 - 1) & v32;
          v30 = __clz(__rbit64(v32)) + (v28 << 6);
          goto LABEL_33;
        }
        v33 = v31 + 5;
        if (v33 >= v164)
          goto LABEL_92;
        v32 = *(_QWORD *)(v163 + 8 * v33);
        if (v32)
        {
          v28 = v33;
          goto LABEL_32;
        }
        while (1)
        {
          v28 = v33 + 1;
          if (__OFADD__(v33, 1))
            break;
          if (v28 >= v164)
            goto LABEL_92;
          v32 = *(_QWORD *)(v163 + 8 * v28);
          ++v33;
          if (v32)
            goto LABEL_32;
        }
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
        __break(1u);
      }
      return;
    }
    while (1)
    {
      v29 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      v30 = v29 | (v28 << 6);
      a2 = (_OWORD *)v190;
LABEL_33:
      sub_1001ABDE8(*(_QWORD *)(a1 + 48) + 40 * v30, (uint64_t)v206);
      v203 = v206[0];
      v204 = v206[1];
      v205 = v207;
      if (*(_QWORD *)(a1 + 16) && (v34 = sub_1001C7CFC((uint64_t)&v203), (v35 & 1) != 0))
        sub_10017E2BC(*(_QWORD *)(a1 + 56) + 32 * v34, (uint64_t)v202);
      else
        memset(v202, 0, sizeof(v202));
      v36 = sub_10014BD9C((uint64_t)v202, (uint64_t)v201, (uint64_t *)&unk_1002B5670);
      if (!v201[3])
        goto LABEL_85;
      sub_10014BD9C((uint64_t)v201, (uint64_t)v200, (uint64_t *)&unk_1002B5670);
      v37 = swift_dynamicCast(v197, v200, v165, &type metadata for Int, 0);
      v184 = v27;
      v185 = v28;
      if (v37)
      {
        *(_QWORD *)&v191 = *(_QWORD *)&v197[0];
        v38 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
LABEL_42:
        v40 = v38;
        v41 = v39;
        v42 = 0xE300000000000000;
        v189 = 5525065;
LABEL_43:
        v43 = &qword_1002BF000;
        goto LABEL_44;
      }
      if (swift_dynamicCast(v197, v200, (char *)&type metadata for Any + 8, &type metadata for Float, 0))
      {
        v38 = Float.description.getter(*(float *)v197);
        goto LABEL_42;
      }
      if (swift_dynamicCast(v197, v200, (char *)&type metadata for Any + 8, &type metadata for String, 0))
      {
        v41 = *((_QWORD *)&v197[0] + 1);
        v110 = *(_QWORD *)&v197[0];
        v191 = v197[0];
        *(_QWORD *)&v195 = 47;
        *((_QWORD *)&v195 + 1) = 0xE100000000000000;
        v111 = sub_10014654C();
        v112 = StringProtocol.contains<A>(_:)(&v195, &type metadata for String, &type metadata for String, v111, v111);
        v180 = v110;
        if ((v112 & 1) != 0)
        {
          v42 = 0xE400000000000000;
          v189 = 1163149636;
        }
        else
        {
          v191 = __PAIR128__(v41, v110);
          *(_QWORD *)&v195 = 58;
          *((_QWORD *)&v195 + 1) = 0xE100000000000000;
          v117 = StringProtocol.contains<A>(_:)(&v195, &type metadata for String, &type metadata for String, v111, v111);
          v118 = 1163149636;
          if ((v117 & 1) == 0)
            v118 = 0x474E49525453;
          v189 = v118;
          if ((v117 & 1) != 0)
            v42 = 0xE400000000000000;
          else
            v42 = 0xE600000000000000;
        }
        v43 = &qword_1002BF000;
        v40 = v180;
LABEL_44:
        sub_10014652C(v200);
        sub_10014BDE0((uint64_t)v201, (uint64_t *)&unk_1002B5670);
        v44.isa = AnyHashable._bridgeToObjectiveC()().isa;
        v45 = objc_opt_self(NSString);
        v46 = swift_dynamicCastObjCClassUnconditional(v44.isa, v45, 0, 0, 0);
        v180 = v46;
        v50 = HIBYTE(v41) & 0xF;
        if ((v41 & 0x2000000000000000) == 0)
          v50 = v40 & 0xFFFFFFFFFFFFLL;
        if (!v50 || (v42 & 0xF00000000000000) == 0)
        {
          swift_bridgeObjectRelease(v42);
          v148 = swift_bridgeObjectRelease(v41);
          v149 = *v43;
          v153 = static os_log_type_t.default.getter(v148, v150, v151, v152);
          os_log(_:dso:log:type:_:)("attribute value or value type is empty", 38, 2, &_mh_execute_header, v149, v153, _swiftEmptyArrayStorage);

          sub_10014BDE0((uint64_t)v202, (uint64_t *)&unk_1002B5670);
          sub_10017F3E8((uint64_t)&v203);
          goto LABEL_92;
        }
        if (qword_1002B3A78 != -1)
          v46 = swift_once(&qword_1002B3A78, sub_100183CA4);
        isa = v44.isa;
        v51 = *(unsigned __int8 *)(qword_1002BF068 + 24);
        v52 = (void *)*v43;
        LODWORD(v178) = static os_log_type_t.default.getter(v46, v47, v48, v49);
        if (v51 == 1)
        {
          v53 = swift_allocObject(a2, 272, 7);
          *(_OWORD *)(v53 + 16) = v156;
          v54 = v168;
          v209 = *v168;
          *(_QWORD *)(v53 + 56) = &type metadata for String;
          v55 = sub_10016B1E0();
          *(_QWORD *)(v53 + 64) = v55;
          *(_OWORD *)(v53 + 32) = *v54;
          v208 = *v160;
          v56 = v208;
          *(_QWORD *)(v53 + 96) = &type metadata for String;
          *(_QWORD *)(v53 + 104) = v55;
          *(_OWORD *)(v53 + 72) = v56;
          sub_10014BBB4((uint64_t)&v209);
          v57 = sub_10014BBB4((uint64_t)&v208);
          v58 = AnyHashable.description.getter(v57);
          *(_QWORD *)(v53 + 136) = &type metadata for String;
          *(_QWORD *)(v53 + 144) = v55;
          *(_QWORD *)(v53 + 112) = v58;
          *(_QWORD *)(v53 + 120) = v59;
          *(_QWORD *)(v53 + 176) = &type metadata for String;
          *(_QWORD *)(v53 + 184) = v55;
          v176 = v52;
          *(_QWORD *)(v53 + 152) = v40;
          *(_QWORD *)(v53 + 160) = v41;
          *(_QWORD *)(v53 + 216) = &type metadata for String;
          *(_QWORD *)(v53 + 224) = v55;
          *(_QWORD *)(v53 + 192) = v189;
          *(_QWORD *)(v53 + 200) = v42;
          LODWORD(v197[0]) = v188;
          swift_bridgeObjectRetain(v41);
          swift_bridgeObjectRetain(v42);
          v60 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
          *(_QWORD *)(v53 + 256) = &type metadata for String;
          *(_QWORD *)(v53 + 264) = v55;
          *(_QWORD *)(v53 + 232) = v60;
          *(_QWORD *)(v53 + 240) = v61;
          os_log(_:dso:log:type:_:)("metricTech: %{public}s, metricName: %{public}s, attributeName: %{public}s, attributeValue: %{public}s, attibuteValueType: %{public}s, subsId: %{public}s)", 153, 2, &_mh_execute_header, v176, v178, v53);
        }
        else
        {
          v53 = swift_allocObject(a2, 152, 7);
          *(_OWORD *)(v53 + 16) = v155;
          v54 = v168;
          v211 = *v168;
          *(_QWORD *)(v53 + 56) = &type metadata for String;
          v62 = sub_10016B1E0();
          *(_QWORD *)(v53 + 64) = v62;
          *(_OWORD *)(v53 + 32) = *v54;
          v210 = *v160;
          v63 = v210;
          *(_QWORD *)(v53 + 96) = &type metadata for String;
          *(_QWORD *)(v53 + 104) = v62;
          *(_OWORD *)(v53 + 72) = v63;
          sub_10014BBB4((uint64_t)&v211);
          v64 = sub_10014BBB4((uint64_t)&v210);
          v65 = AnyHashable.description.getter(v64);
          *(_QWORD *)(v53 + 136) = &type metadata for String;
          *(_QWORD *)(v53 + 144) = v62;
          *(_QWORD *)(v53 + 112) = v65;
          *(_QWORD *)(v53 + 120) = v66;
          os_log(_:dso:log:type:_:)("metricTech: %{public}s, metricName: %{public}s)", 47, 2, &_mh_execute_header, v52, v178, v53);
        }
        v67 = swift_bridgeObjectRelease(v53);
        UUID.init()(v67);
        v189 = (uint64_t)String._bridgeToObjectiveC()();
        v68 = *((_QWORD *)v54 + 2);
        v69 = *((_QWORD *)v54 + 3);
        v178 = String._bridgeToObjectiveC()();
        v176 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v41);
        v174 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v42);
        v71 = v161;
        v70 = v162;
        v175 = *(void (**)(uint64_t, uint64_t, uint64_t))(v183 + 16);
        v175(v161, v179, v162);
        v72 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *((_QWORD *)v54 + 4));
        v73 = objc_msgSend(v72, "stringValue");

        if (!v73)
          goto LABEL_98;
        v74 = v180;
        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v180);
        v77 = v76;
        v171 = sub_10018EAB4(v68, v69, v75, v76);
        swift_bridgeObjectRelease(v77);
        v78 = v158;
        v79 = v158[15];
        v169 = v158[14];
        v170 = v79;
        v80 = v186;
        v81 = (_QWORD *)(v186 + v158[16]);
        *v81 = 0;
        v81[1] = 0;
        v82 = v182;
        v83 = v167;
        (*(void (**)(uint64_t, char *, uint64_t))(v187 + 16))(v80, v182, v167);
        v172 = v78[5];
        *(_QWORD *)(v80 + v172) = v189;
        v173 = v78[6];
        *(_QWORD *)(v80 + v173) = v178;
        *(_QWORD *)(v80 + v78[7]) = v74;
        *(_QWORD *)(v80 + v78[8]) = v74;
        *(_QWORD *)(v80 + v78[9]) = v176;
        *(_QWORD *)(v80 + v78[10]) = v174;
        v175(v80 + v78[11], v71, v70);
        *(_QWORD *)(v80 + v78[12]) = v73;
        *(_DWORD *)(v80 + v78[13]) = v188;
        *(_BYTE *)(v80 + v169) = v171 & 1;
        *(_BYTE *)(v80 + v170) = 0;
        v189 = isa;
        (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v71, v70);
        (*(void (**)(char *, uint64_t))(v187 + 8))(v82, v83);
        v84 = swift_bridgeObjectRelease(v81[1]);
        *(_OWORD *)v81 = v157;
        v85 = qword_1002BF000;
        v89 = static os_log_type_t.default.getter(v84, v86, v87, v88);
        v90 = swift_allocObject(v190, 112, 7);
        *(_OWORD *)(v90 + 16) = v181;
        v91 = *(void **)(v80 + v172);
        v92 = sub_1001548C8(0, (unint64_t *)&unk_1002B6E10, NSString_ptr);
        *(_QWORD *)(v90 + 56) = v92;
        v93 = sub_10017E27C(&qword_1002B5650, (unint64_t *)&unk_1002B6E10, NSString_ptr);
        *(_QWORD *)(v90 + 32) = v91;
        v94 = *(void **)(v80 + v173);
        *(_QWORD *)(v90 + 96) = v92;
        *(_QWORD *)(v90 + 104) = v93;
        *(_QWORD *)(v90 + 64) = v93;
        *(_QWORD *)(v90 + 72) = v94;
        v95 = v91;
        v96 = v94;
        os_log(_:dso:log:type:_:)("MetricService - insertMetricToDatabase - metricTech %{public}s - metricName %{public}s", 86, 2, &_mh_execute_header, v85, v89, v90);
        swift_bridgeObjectRelease(v90);
        v97 = v166;
        sub_1001AC840(v80, v166);
        if (qword_1002B3A80 != -1)
          swift_once(&qword_1002B3A80, sub_100184F00);
        v98 = (id)qword_1002BF070;
        sub_10018732C(v80);

        v99 = qword_1002BF000;
        v104 = static os_log_type_t.default.getter(v100, v101, v102, v103);
        v105 = swift_allocObject(v190, 112, 7);
        *(_OWORD *)(v105 + 16) = v181;
        v106 = *(void **)(v97 + v78[5]);
        *(_QWORD *)(v105 + 56) = v92;
        *(_QWORD *)(v105 + 64) = v93;
        *(_QWORD *)(v105 + 32) = v106;
        v107 = *(void **)(v97 + v78[6]);
        *(_QWORD *)(v105 + 96) = v92;
        *(_QWORD *)(v105 + 104) = v93;
        *(_QWORD *)(v105 + 72) = v107;
        v108 = v106;
        v109 = v107;
        os_log(_:dso:log:type:_:)("metric service ---> tech %{public}s : name %{public}s ", 54, 2, &_mh_execute_header, v99, v104, v105);
        swift_bridgeObjectRelease(v105);
        sub_10017E214(v97);

        sub_10017E214(v186);
        v8 = (uint64_t)&unk_1002B5670;
        sub_10014BDE0((uint64_t)v202, (uint64_t *)&unk_1002B5670);
        sub_10017F3E8((uint64_t)&v203);
        a1 = v159;
        v11 = (int *)v202;
        v10 = (char *)&type metadata for String;
        v27 = v184;
        v28 = v185;
        if (!v184)
          goto LABEL_15;
      }
      else
      {
        v113 = sub_100146438(&qword_1002B6E00);
        if (swift_dynamicCast(v194, v200, (char *)&type metadata for Any + 8, v113, 0))
        {
          v114 = *(_QWORD *)&v194[0];
          *(_QWORD *)&v191 = 0x64695F73627573;
          *((_QWORD *)&v191 + 1) = 0xE700000000000000;
          AnyHashable.init<A>(_:)(&v191, &type metadata for String, &protocol witness table for String);
          v192 = &type metadata for Int32;
          LODWORD(v191) = v188;
          sub_10017F278(&v191, &v195);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v114);
          v199 = v114;
          sub_1001C99E8(&v195, (uint64_t)v197, isUniquelyReferenced_nonNull_native);
          v116 = v199;
          swift_bridgeObjectRelease(0x8000000000000000);
          sub_10017F3E8((uint64_t)v197);
          sub_1001AAA64(v116, v168, v179);
          swift_bridgeObjectRelease(v116);
          v189 = 0;
          v40 = 0;
          v42 = 0xE000000000000000;
          v41 = 0xE000000000000000;
          goto LABEL_43;
        }
        v119 = sub_100146438(&qword_1002B6E08);
        if (swift_dynamicCast(&v199, v200, (char *)&type metadata for Any + 8, v119, 0))
        {
          v120 = v199;
          v10 = *(char **)(v199 + 16);
          v121 = v188;
          if (!v10)
          {
LABEL_89:
            swift_bridgeObjectRelease(v120);
            v189 = 0;
            v40 = 0;
            v42 = 0xE000000000000000;
            v41 = 0xE000000000000000;
            v43 = &qword_1002BF000;
            goto LABEL_44;
          }
          v11 = (int *)(v199 + 32);
          while (2)
          {
            v122 = *(_QWORD *)v11;
            v198 = &_swiftEmptyDictionarySingleton;
            v123 = swift_bridgeObjectRetain(v122);
            sub_1001ABE24(v123, (uint64_t *)&v198, v124, v125);
            swift_bridgeObjectRelease(v122);
            *(_QWORD *)&v191 = 0x64695F73627573;
            *((_QWORD *)&v191 + 1) = 0xE700000000000000;
            AnyHashable.init<A>(_:)(&v191, &type metadata for String, &protocol witness table for String);
            v196 = &type metadata for Int32;
            LODWORD(v195) = v121;
            sub_10017F278(&v195, v194);
            v126 = v198;
            v8 = swift_isUniquelyReferenced_nonNull_native(v198);
            v193 = v126;
            v128 = sub_1001C7CFC((uint64_t)v197);
            v129 = v126[2];
            v130 = (v127 & 1) == 0;
            v131 = v129 + v130;
            if (__OFADD__(v129, v130))
            {
              __break(1u);
LABEL_95:
              __break(1u);
LABEL_96:
              v17 = swift_once(&qword_1002B3A10, sub_1001747E0);
              goto LABEL_9;
            }
            v132 = v127;
            if (v126[3] >= v131)
            {
              if ((v8 & 1) != 0)
              {
                v135 = v193;
                if ((v127 & 1) != 0)
                  goto LABEL_81;
              }
              else
              {
                sub_1001CA73C();
                v135 = v193;
                if ((v132 & 1) != 0)
                  goto LABEL_81;
              }
            }
            else
            {
              sub_1001C866C(v131, v8);
              v133 = sub_1001C7CFC((uint64_t)v197);
              if ((v132 & 1) != (v134 & 1))
                goto LABEL_99;
              v128 = v133;
              v135 = v193;
              if ((v132 & 1) != 0)
              {
LABEL_81:
                v136 = (_QWORD *)(v135[7] + 32 * v128);
                sub_10014652C(v136);
                sub_10017F278(v194, v136);
LABEL_73:
                swift_bridgeObjectRelease(0x8000000000000000);
                sub_10017F3E8((uint64_t)v197);
                sub_1001AAA64(v135, v168, v179);
                swift_bridgeObjectRelease(v135);
                v11 += 2;
                --v10;
                v121 = v188;
                if (!v10)
                  goto LABEL_89;
                continue;
              }
            }
            break;
          }
          sub_1001ABDE8((uint64_t)v197, (uint64_t)&v191);
          sub_1001C9EC0(v128, (uint64_t)&v191, v194, v135);
          goto LABEL_73;
        }
        v36 = sub_10014652C(v200);
LABEL_85:
        if (qword_1002B3A78 != -1)
          v36 = swift_once(&qword_1002B3A78, sub_100183CA4);
        if (*(_BYTE *)(qword_1002BF068 + 24) == 1)
        {
          v137 = qword_1002BF000;
          v138 = static os_log_type_t.error.getter(v36);
          v139 = swift_allocObject(a2, 72, 7);
          v140 = v28;
          v141 = (_QWORD *)v139;
          *(_OWORD *)(v139 + 16) = v154;
          sub_10014BD9C((uint64_t)v202, (uint64_t)v197, (uint64_t *)&unk_1002B5670);
          v142 = sub_100146438((uint64_t *)&unk_1002B5670);
          v143 = v27;
          v144 = String.init<A>(describing:)(v197, v142);
          v146 = v145;
          v141[7] = &type metadata for String;
          v141[8] = sub_10016B1E0();
          v141[4] = v144;
          v141[5] = v146;
          v27 = v143;
          v11 = (int *)v202;
          v8 = (uint64_t)&unk_1002B5670;
          os_log(_:dso:log:type:_:)("unknown attributevalue  ---> %{public}s", 39, 2, &_mh_execute_header, v137, v138, v141);
          v147 = v141;
          v28 = v140;
          swift_bridgeObjectRelease(v147);
        }
        sub_10014BDE0((uint64_t)v202, (uint64_t *)&unk_1002B5670);
        sub_10017F3E8((uint64_t)&v203);
        sub_10014BDE0((uint64_t)v201, (uint64_t *)&unk_1002B5670);
        if (!v27)
          goto LABEL_15;
      }
    }
  }
}

id sub_1001ABC00()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MetricService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MetricService()
{
  return objc_opt_self(_TtC13FTMInternal_413MetricService);
}

_QWORD *sub_1001ABDA0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *result;

  v1 = (_QWORD *)*v0;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if (!(_DWORD)result)
  {
    result = sub_1001C76E4(result, v1[2] + 1, 1, v1);
    *v0 = result;
  }
  return result;
}

uint64_t sub_1001ABDE8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

void sub_1001ABE24(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  Swift::String v65;
  uint64_t v66;
  Swift::String v67;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v69;
  unint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  char v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  unint64_t v84;
  int64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unsigned __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  void *v92;
  uint64_t v93;
  _QWORD v94[4];
  _OWORD v95[2];
  _OWORD v96[2];
  uint64_t v97;
  unsigned __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  void *v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106[3];

  v5 = a1;
  if (qword_1002B3A10 == -1)
    goto LABEL_2;
LABEL_106:
  a1 = swift_once(&qword_1002B3A10, sub_1001747E0);
LABEL_2:
  v6 = qword_1002BF000;
  v7 = static os_log_type_t.default.getter(a1, a2, a3, a4);
  os_log(_:dso:log:type:_:)("MetricService - flattenD", 24, 2, &_mh_execute_header, v6, v7, _swiftEmptyArrayStorage);
  v81 = v5 + 64;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v82 = (unint64_t)(v8 + 63) >> 6;
  v83 = v5;
  swift_bridgeObjectRetain(v5);
  v85 = 0;
LABEL_9:
  if (v10)
  {
    v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v14 = v13 | (v85 << 6);
    goto LABEL_11;
  }
  v15 = v85 + 1;
  if (__OFADD__(v85, 1))
    goto LABEL_103;
  if (v15 >= v82)
    goto LABEL_29;
  v16 = *(_QWORD *)(v81 + 8 * v15);
  if (v16)
    goto LABEL_15;
  v17 = v85 + 2;
  ++v85;
  if (v15 + 1 >= v82)
    goto LABEL_29;
  v16 = *(_QWORD *)(v81 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v85 = v15 + 1;
  if (v15 + 2 >= v82)
    goto LABEL_29;
  v16 = *(_QWORD *)(v81 + 8 * (v15 + 2));
  if (v16)
  {
    v15 += 2;
LABEL_15:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v85 = v15;
LABEL_11:
    sub_1001ABDE8(*(_QWORD *)(v83 + 48) + 40 * v14, (uint64_t)&v98);
    sub_10017E2BC(*(_QWORD *)(v83 + 56) + 32 * v14, (uint64_t)&v100 + 8);
    goto LABEL_30;
  }
  v17 = v15 + 3;
  v85 = v15 + 2;
  if (v15 + 3 >= v82)
    goto LABEL_29;
  v16 = *(_QWORD *)(v81 + 8 * v17);
  if (v16)
  {
LABEL_18:
    v15 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v82)
    {
      v85 = v82 - 1;
LABEL_29:
      v10 = 0;
      v102 = 0;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
LABEL_30:
      sub_10014BC64((uint64_t)&v98, (uint64_t)&v103, &qword_1002B6E28);
      if (!*((_QWORD *)&v104 + 1))
      {
        swift_release(v83);
        return;
      }
      v96[0] = v103;
      v96[1] = v104;
      v97 = v105;
      sub_10017F278(v106, v95);
      sub_10017E2BC((uint64_t)v95, (uint64_t)v94);
      v18 = sub_100146438(&qword_1002B6E30);
      if (swift_dynamicCast(&v93, v94, (char *)&type metadata for Any + 8, v18, 0))
      {
        v84 = v10;
        v5 = v93;
        v19 = v93 + 64;
        v20 = 1 << *(_BYTE *)(v93 + 32);
        if (v20 < 64)
          v21 = ~(-1 << v20);
        else
          v21 = -1;
        v22 = v21 & *(_QWORD *)(v93 + 64);
        v23 = (unint64_t)(v20 + 63) >> 6;
        swift_bridgeObjectRetain(v93);
        v24 = 0;
        v86 = _swiftEmptyArrayStorage;
        if (v22)
        {
LABEL_36:
          v25 = __clz(__rbit64(v22));
          v22 &= v22 - 1;
          v26 = v25 | (v24 << 6);
          goto LABEL_37;
        }
        while (2)
        {
          v30 = v24 + 1;
          if (__OFADD__(v24, 1))
          {
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            __break(1u);
            goto LABEL_102;
          }
          if (v30 >= v23)
            goto LABEL_68;
          v31 = *(_QWORD *)(v19 + 8 * v30);
          ++v24;
          if (v31)
            goto LABEL_62;
          v24 = v30 + 1;
          if (v30 + 1 >= v23)
            goto LABEL_68;
          v31 = *(_QWORD *)(v19 + 8 * v24);
          if (v31)
            goto LABEL_62;
          v24 = v30 + 2;
          if (v30 + 2 >= v23)
            goto LABEL_68;
          v31 = *(_QWORD *)(v19 + 8 * v24);
          if (v31)
            goto LABEL_62;
          v24 = v30 + 3;
          if (v30 + 3 >= v23)
            goto LABEL_68;
          v31 = *(_QWORD *)(v19 + 8 * v24);
          if (v31)
            goto LABEL_62;
          v24 = v30 + 4;
          if (v30 + 4 >= v23)
            goto LABEL_68;
          v31 = *(_QWORD *)(v19 + 8 * v24);
          if (v31)
          {
LABEL_62:
            v22 = (v31 - 1) & v31;
            v26 = __clz(__rbit64(v31)) + (v24 << 6);
LABEL_37:
            v27 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v26);
            v28 = v27[1];
            v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v26);
            *(_QWORD *)&v88 = *v27;
            *((_QWORD *)&v88 + 1) = v28;
            swift_bridgeObjectRetain_n(v28, 2);
            AnyHashable.init<A>(_:)(&v88, &type metadata for String, &protocol witness table for String);
            v102 = &type metadata for Int;
            *((_QWORD *)&v100 + 1) = v29;
            swift_bridgeObjectRelease(v28);
            if (*((_QWORD *)&v99 + 1))
            {
              v90 = v100;
              v91 = v101;
              v92 = v102;
              v88 = v98;
              v89 = v99;
              if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
                v86 = sub_1001C75BC(0, v86[2] + 1, 1, v86);
              v34 = v86[2];
              v33 = v86[3];
              if (v34 >= v33 >> 1)
                v86 = sub_1001C75BC((_QWORD *)(v33 > 1), v34 + 1, 1, v86);
              v86[2] = v34 + 1;
              v35 = &v86[9 * v34];
              *((_OWORD *)v35 + 2) = v88;
              v36 = v89;
              v37 = v90;
              v38 = v91;
              v35[12] = v92;
              *((_OWORD *)v35 + 4) = v37;
              *((_OWORD *)v35 + 5) = v38;
              *((_OWORD *)v35 + 3) = v36;
              if (v22)
                goto LABEL_36;
            }
            else
            {
              sub_10014BDE0((uint64_t)&v98, &qword_1002B6E28);
              if (v22)
                goto LABEL_36;
            }
            continue;
          }
          break;
        }
        v32 = v30 + 5;
        if (v32 >= v23)
        {
LABEL_68:
          swift_release(v5);
          v48 = swift_bridgeObjectRelease(v5);
          if (qword_1002B3A78 != -1)
            v48 = swift_once(&qword_1002B3A78, sub_100183CA4);
          v52 = *(unsigned __int8 *)(qword_1002BF068 + 24);
          v53 = qword_1002BF000;
          v5 = static os_log_type_t.default.getter(v48, v49, v50, v51);
          v54 = v86;
          if (v52 == 1)
          {
            v55 = sub_100146438((uint64_t *)&unk_1002B57E0);
            v56 = swift_allocObject(v55, 72, 7);
            *(_OWORD *)(v56 + 16) = xmmword_1002402A0;
            *(_QWORD *)(v56 + 56) = sub_100146438(&qword_1002B6E38);
            *(_QWORD *)(v56 + 64) = sub_1001AC884();
            *(_QWORD *)(v56 + 32) = v86;
            swift_bridgeObjectRetain(v86);
            os_log(_:dso:log:type:_:)("flattened : %{public}@", 22, 2, &_mh_execute_header, v53, v5, v56);
            swift_bridgeObjectRelease(v56);
          }
          else
          {
            os_log(_:dso:log:type:_:)("flattened", 9, 2, &_mh_execute_header, v53, v5, _swiftEmptyArrayStorage);
          }
          v60 = v86[2];
          if (v60)
          {
            swift_bridgeObjectRetain(v86);
            v61 = (uint64_t)(v86 + 9);
            do
            {
              sub_1001ABDE8((uint64_t)v96, (uint64_t)&v98);
              if (swift_dynamicCast(&v88, &v98, &type metadata for AnyHashable, &type metadata for String, 6))
              {
                v62 = *((_QWORD *)&v88 + 1);
                v5 = v88;
                sub_1001ABDE8(v61 - 40, (uint64_t)&v98);
                if ((swift_dynamicCast(&v88, &v98, &type metadata for AnyHashable, &type metadata for String, 6) & 1) != 0)
                {
                  v64 = (void *)*((_QWORD *)&v88 + 1);
                  v63 = v88;
                  v98 = __PAIR128__(v62, v5);
                  swift_bridgeObjectRetain(v62);
                  v65._countAndFlagsBits = 95;
                  v65._object = (void *)0xE100000000000000;
                  String.append(_:)(v65);
                  swift_bridgeObjectRelease(v62);
                  v66 = *((_QWORD *)&v98 + 1);
                  swift_bridgeObjectRetain(*((_QWORD *)&v98 + 1));
                  v67._countAndFlagsBits = v63;
                  v67._object = v64;
                  String.append(_:)(v67);
                  swift_bridgeObjectRelease(v66);
                  swift_bridgeObjectRelease(v64);
                  v88 = v98;
                  AnyHashable.init<A>(_:)(&v88, &type metadata for String, &protocol witness table for String);
                  sub_10017E2BC(v61, (uint64_t)&v88);
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
                  v5 = *a2;
                  v87 = (_QWORD *)*a2;
                  *a2 = 0x8000000000000000;
                  v70 = sub_1001C7CFC((uint64_t)&v98);
                  v71 = *(_QWORD *)(v5 + 16);
                  v72 = (v69 & 1) == 0;
                  v73 = v71 + v72;
                  if (__OFADD__(v71, v72))
                    goto LABEL_100;
                  v74 = v69;
                  if (*(_QWORD *)(v5 + 24) >= v73)
                  {
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                      sub_1001CA73C();
                  }
                  else
                  {
                    sub_1001C866C(v73, isUniquelyReferenced_nonNull_native);
                    v75 = sub_1001C7CFC((uint64_t)&v98);
                    if ((v74 & 1) != (v76 & 1))
                      goto LABEL_108;
                    v70 = v75;
                  }
                  v5 = (uint64_t)v87;
                  if ((v74 & 1) != 0)
                  {
                    v77 = (_QWORD *)(v87[7] + 32 * v70);
                    sub_10014652C(v77);
                    sub_10017F278(&v88, v77);
                  }
                  else
                  {
                    v87[(v70 >> 6) + 8] |= 1 << v70;
                    sub_1001ABDE8((uint64_t)&v98, v87[6] + 40 * v70);
                    sub_10017F278(&v88, (_OWORD *)(v87[7] + 32 * v70));
                    v78 = v87[2];
                    v58 = __OFADD__(v78, 1);
                    v79 = v78 + 1;
                    if (v58)
                      goto LABEL_101;
                    v87[2] = v79;
                  }
                  v80 = *a2;
                  *a2 = (uint64_t)v87;
                  swift_bridgeObjectRelease(v80);
                  sub_10017F3E8((uint64_t)&v98);
                }
                else
                {
                  swift_bridgeObjectRelease(v62);
                }
              }
              v61 += 72;
              --v60;
            }
            while (v60);
            v54 = v86;
            swift_bridgeObjectRelease(v86);
          }
          sub_10014652C(v95);
          sub_10017F3E8((uint64_t)v96);
          swift_bridgeObjectRelease(v54);
          v10 = v84;
          goto LABEL_8;
        }
        v31 = *(_QWORD *)(v19 + 8 * v32);
        if (v31)
        {
          v24 = v32;
          goto LABEL_62;
        }
        while (1)
        {
          v24 = v32 + 1;
          if (__OFADD__(v32, 1))
            break;
          if (v24 >= v23)
            goto LABEL_68;
          v31 = *(_QWORD *)(v19 + 8 * v24);
          ++v32;
          if (v31)
            goto LABEL_62;
        }
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
        goto LABEL_106;
      }
      sub_1001ABDE8((uint64_t)v96, (uint64_t)&v98);
      sub_10017E2BC((uint64_t)v95, (uint64_t)&v88);
      v39 = swift_isUniquelyReferenced_nonNull_native(*a2);
      v93 = *a2;
      v5 = v93;
      *a2 = 0x8000000000000000;
      v41 = sub_1001C7CFC((uint64_t)&v98);
      v42 = *(_QWORD *)(v5 + 16);
      v43 = (v40 & 1) == 0;
      v44 = v42 + v43;
      if (__OFADD__(v42, v43))
      {
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
        goto LABEL_104;
      }
      v45 = v40;
      if (*(_QWORD *)(v5 + 24) >= v44)
      {
        if ((v39 & 1) != 0)
        {
          v5 = v93;
          if ((v40 & 1) == 0)
            goto LABEL_74;
        }
        else
        {
          sub_1001CA73C();
          v5 = v93;
          if ((v45 & 1) == 0)
            goto LABEL_74;
        }
      }
      else
      {
        sub_1001C866C(v44, v39);
        v46 = sub_1001C7CFC((uint64_t)&v98);
        if ((v45 & 1) != (v47 & 1))
          goto LABEL_108;
        v41 = v46;
        v5 = v93;
        if ((v45 & 1) == 0)
        {
LABEL_74:
          *(_QWORD *)(v5 + 8 * (v41 >> 6) + 64) |= 1 << v41;
          sub_1001ABDE8((uint64_t)&v98, *(_QWORD *)(v5 + 48) + 40 * v41);
          sub_10017F278(&v88, (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v41));
          v57 = *(_QWORD *)(v5 + 16);
          v58 = __OFADD__(v57, 1);
          v59 = v57 + 1;
          if (v58)
            goto LABEL_105;
          *(_QWORD *)(v5 + 16) = v59;
          goto LABEL_7;
        }
      }
      v11 = (_QWORD *)(*(_QWORD *)(v5 + 56) + 32 * v41);
      sub_10014652C(v11);
      sub_10017F278(&v88, v11);
LABEL_7:
      v12 = *a2;
      *a2 = v5;
      swift_bridgeObjectRelease(v12);
      sub_10017F3E8((uint64_t)&v98);
      sub_10014652C(v95);
      sub_10017F3E8((uint64_t)v96);
LABEL_8:
      sub_10014652C(v94);
      goto LABEL_9;
    }
    v16 = *(_QWORD *)(v81 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_15;
  }
  __break(1u);
LABEL_108:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
}

uint64_t sub_1001AC840(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Metric(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001AC884()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B6E40;
  if (!qword_1002B6E40)
  {
    v1 = sub_1001464C4(&qword_1002B6E38);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B6E40);
  }
  return result;
}

void sub_1001AC8D0(__int128 *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  Class isa;
  _BYTE v11[104];
  __int128 v12;
  __int128 v13;

  v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1002B3A30 != -1)
    swift_once(&qword_1002B3A30, sub_100175074);
  v3 = static NSNotificationName.NewABMMetric;
  v4 = sub_100146438(&qword_1002B5608);
  inited = swift_initStackObject(v4, v11);
  *(_OWORD *)(inited + 16) = xmmword_1002402A0;
  strcpy((char *)&v13, "metricObject");
  BYTE13(v13) = 0;
  HIWORD(v13) = -5120;
  AnyHashable.init<A>(_:)(&v13, &type metadata for String, &protocol witness table for String);
  v6 = *a1;
  v12 = a1[1];
  v13 = v6;
  *(_QWORD *)(inited + 96) = &type metadata for MetricNotificationObject;
  v7 = swift_allocObject(&unk_100265CC0, 52, 7);
  *(_QWORD *)(inited + 72) = v7;
  *(_DWORD *)(v7 + 48) = *((_DWORD *)a1 + 8);
  v8 = a1[1];
  *(_OWORD *)(v7 + 16) = *a1;
  *(_OWORD *)(v7 + 32) = v8;
  sub_10014BBB4((uint64_t)&v13);
  sub_10014BBB4((uint64_t)&v12);
  v9 = sub_1001BE664(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v2, "postNotificationName:object:userInfo:", v3, 0, isa);

}

uint64_t sub_1001ACA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  _BYTE v7[40];

  v3 = a2 == 0x3243303443 && a3 == 0xE500000000000000;
  if (v3
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0x3243303443, 0xE500000000000000, 0),
        (result & 1) != 0))
  {
    *(_QWORD *)&v5 = 0x77625F6C64;
    *((_QWORD *)&v5 + 1) = 0xE500000000000000;
    AnyHashable.init<A>(_:)(&v5, &type metadata for String, &protocol witness table for String);
    v5 = 0u;
    v6 = 0u;
    sub_100175FFC((uint64_t)&v5, (uint64_t)v7);
    *(_QWORD *)&v5 = 0x77625F6C75;
    *((_QWORD *)&v5 + 1) = 0xE500000000000000;
    AnyHashable.init<A>(_:)(&v5, &type metadata for String, &protocol witness table for String);
    v5 = 0u;
    v6 = 0u;
    return sub_100175FFC((uint64_t)&v5, (uint64_t)v7);
  }
  return result;
}

uint64_t sub_1001ACB4C(uint64_t result, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t i;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  _OWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = result + 32;
    v49 = result;
    swift_bridgeObjectRetain(result);
    sub_10014BD9C(v6, (uint64_t)&v46, &qword_1002B5698);
    v8 = v46;
    v7 = v47;
    sub_10017F278(v48, v45);
    v9 = (_QWORD *)*a3;
    v11 = sub_1001C7C98(v8, v7);
    v12 = v9[2];
    v13 = (v10 & 1) == 0;
    v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v15 = v10;
    if (v9[3] < v14)
    {
      sub_1001C8370(v14, a2 & 1);
      v16 = sub_1001C7C98(v8, v7);
      if ((v15 & 1) != (v17 & 1))
      {
LABEL_28:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        return result;
      }
      v11 = v16;
      if ((v15 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      v18 = (_QWORD *)*a3;
      sub_10017F278(v45, v44);
      swift_bridgeObjectRelease(v7);
      v19 = (_QWORD *)(v18[7] + 32 * v11);
      sub_10014652C(v19);
      sub_10017F278(v44, v19);
      v20 = v3 - 1;
      if (v3 == 1)
        return swift_bridgeObjectRelease(v49);
LABEL_16:
      for (i = v49 + 80; ; i += 48)
      {
        sub_10014BD9C(i, (uint64_t)&v46, &qword_1002B5698);
        v30 = v46;
        v29 = v47;
        sub_10017F278(v48, v45);
        v31 = (_QWORD *)*a3;
        v33 = sub_1001C7C98(v30, v29);
        v34 = v31[2];
        v35 = (v32 & 1) == 0;
        v36 = v34 + v35;
        if (__OFADD__(v34, v35))
          break;
        v37 = v32;
        if (v31[3] < v36)
        {
          sub_1001C8370(v36, 1);
          v38 = sub_1001C7C98(v30, v29);
          if ((v37 & 1) != (v39 & 1))
            goto LABEL_28;
          v33 = v38;
        }
        if ((v37 & 1) != 0)
        {
          v27 = (_QWORD *)*a3;
          sub_10017F278(v45, v44);
          swift_bridgeObjectRelease(v29);
          v28 = (_QWORD *)(v27[7] + 32 * v33);
          sub_10014652C(v28);
          sub_10017F278(v44, v28);
        }
        else
        {
          v40 = (_QWORD *)*a3;
          *(_QWORD *)(*a3 + 8 * (v33 >> 6) + 64) |= 1 << v33;
          v41 = (uint64_t *)(v40[6] + 16 * v33);
          *v41 = v30;
          v41[1] = v29;
          sub_10017F278(v45, (_OWORD *)(v40[7] + 32 * v33));
          v42 = v40[2];
          v24 = __OFADD__(v42, 1);
          v43 = v42 + 1;
          if (v24)
            goto LABEL_27;
          v40[2] = v43;
        }
        if (!--v20)
          return swift_bridgeObjectRelease(v49);
      }
      goto LABEL_26;
    }
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1001CA558();
      if ((v15 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v22 = (uint64_t *)(v21[6] + 16 * v11);
    *v22 = v8;
    v22[1] = v7;
    sub_10017F278(v45, (_OWORD *)(v21[7] + 32 * v11));
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v21[2] = v25;
    v20 = v3 - 1;
    if (v3 == 1)
      return swift_bridgeObjectRelease(v49);
    goto LABEL_16;
  }
  return result;
}

_QWORD *sub_1001ACE40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[3];
  v3 = a1[6];
  v4 = a1[8];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *sub_1001ACE94(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1001ACEE8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 52, 7);
}

uint64_t sub_1001ACF14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;
  uint64_t *v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v8 = 0;
  v9 = _swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v10 | (v8 << 6); ; i = __clz(__rbit64(v15)) + (v8 << 6))
  {
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v13 = v12[1];
    if (v13)
    {
      v20 = *v12;
      swift_bridgeObjectRetain(v13);
      result = swift_isUniquelyReferenced_nonNull_native(v9);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1001C7118(0, v9[2] + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v18 = v9[2];
      v17 = v9[3];
      if (v18 >= v17 >> 1)
      {
        result = (uint64_t)sub_1001C7118((_QWORD *)(v17 > 1), v18 + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v9[2] = v18 + 1;
      v19 = &v9[2 * v18];
      v19[4] = v20;
      v19[5] = v13;
      if (v5)
        goto LABEL_4;
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v14 >= v6)
      goto LABEL_29;
    v15 = *(_QWORD *)(v2 + 8 * v14);
    ++v8;
    if (!v15)
    {
      v8 = v14 + 1;
      if (v14 + 1 >= v6)
        goto LABEL_29;
      v15 = *(_QWORD *)(v2 + 8 * v8);
      if (!v15)
      {
        v8 = v14 + 2;
        if (v14 + 2 >= v6)
          goto LABEL_29;
        v15 = *(_QWORD *)(v2 + 8 * v8);
        if (!v15)
        {
          v8 = v14 + 3;
          if (v14 + 3 >= v6)
            goto LABEL_29;
          v15 = *(_QWORD *)(v2 + 8 * v8);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v15 - 1) & v15;
  }
  v16 = v14 + 4;
  if (v16 >= v6)
  {
LABEL_29:
    swift_release(a1);
    return (uint64_t)v9;
  }
  v15 = *(_QWORD *)(v2 + 8 * v16);
  if (v15)
  {
    v8 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v8 >= v6)
      goto LABEL_29;
    v15 = *(_QWORD *)(v2 + 8 * v8);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1001AD104(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      v7 = (uint64_t)sub_1001B2460(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = (uint64_t)sub_1001B237C(result, a2, 10);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease(a2);
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

void *sub_1001AD350@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  int v11;
  void *result;
  char v13;
  __int128 v14;

  v5 = (_QWORD *)*v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_100197F4C(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = &v5[5 * a1];
      v10 = v9[2];
      v9 += 2;
      v11 = *((_DWORD *)v9 + 8);
      v14 = v9[1];
      result = memmove(v9, (char *)v9 + 40, 40 * v8);
      v5[2] = v7;
      *v2 = v5;
      *(_OWORD *)a2 = v10;
      *(_OWORD *)(a2 + 16) = v14;
      *(_DWORD *)(a2 + 32) = v11;
      return result;
    }
  }
  v13 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v13, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001AD44C(unint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  char v10;

  v3 = (_QWORD *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
    v3 = sub_100197F74(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 5, 8 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  v10 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v10, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001AD51C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  unint64_t v12;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_100197F9C(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = *(_QWORD *)(type metadata accessor for Metric(0) - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  result = sub_1001B5618(v10, a2, type metadata accessor for Metric);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  v12 = v10 + v9;
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    result = swift_arrayInitWithTakeFrontToBack(v10, v12);
  }
  else if (v9)
  {
    result = swift_arrayInitWithTakeBackToFront(v10, v12);
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

uint64_t sub_1001AD658()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_shouldShowSPinner);
}

uint64_t sub_1001AD668()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1002B3A60 != -1)
    swift_once(&qword_1002B3A60, sub_1001753E4);
  objc_msgSend(v1, "removeObserver:name:object:", v0, static NSNotificationName.isAirPlaneModeEnabled, 0);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  v2 = v0 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_collectedOn;
  v3 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t sub_1001AD758()
{
  uint64_t v0;

  sub_1001AD668();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001AD77C()
{
  return type metadata accessor for MetricDetailViewModel(0);
}

uint64_t type metadata accessor for MetricDetailViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B6ED0;
  if (!qword_1002B6ED0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetricDetailViewModel);
  return result;
}

uint64_t sub_1001AD7C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  int *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  void (*v34)(char *, uint64_t);
  char v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const char *v47;
  const char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t result;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, int *, uint64_t);
  uint64_t v90;
  unint64_t v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  _QWORD v103[3];
  char *v104;

  v2 = v1;
  v4 = (int *)type metadata accessor for Metric(0);
  v5 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v101 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100146438(&qword_1002B7140);
  v98 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v96 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100146438(&qword_1002B7148);
  v10 = __chkstk_darwin(v9);
  v99 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (unint64_t *)((char *)&v89 - v12);
  v14 = sub_100146438(&qword_1002B4168);
  __chkstk_darwin(v14);
  v16 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v92 = (void (*)(char *, uint64_t))((char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = __chkstk_darwin(v19);
  v97 = (char *)&v89 - v22;
  __chkstk_darwin(v21);
  v102 = (int *)((char *)&v89 - v23);
  v24 = type metadata accessor for MetricDetailViewModel(0);
  v93 = sub_100146004(&qword_1002B7138, type metadata accessor for MetricDetailViewModel, (uint64_t)&unk_100243368);
  v94 = v24;
  v25 = ObservableObject<>.objectWillChange.getter(v24, v93);
  ObservableObjectPublisher.send()();
  swift_release(v25);
  v26 = *(_QWORD *)(v2 + 16);
  v95 = v2;
  *(_QWORD *)(v2 + 16) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v26);
  v104 = (char *)a1;
  v27 = *(_QWORD *)(a1 + 16);
  v100 = v5;
  if (v27)
  {
    v28 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v18 + 16);
    v29(v16, a1 + v4[11] + v28, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
    {
      v89 = (void (*)(char *, int *, uint64_t))v29;
      v91 = v28;
      v30 = v102;
      (*(void (**)(int *, char *, uint64_t))(v18 + 32))(v102, v16, v17);
      v90 = a1;
      v31 = swift_bridgeObjectRetain(a1);
      v32 = v97;
      Date.init()(v31);
      v33 = v92;
      sub_1001754AC((uint64_t)v92);
      v34 = *(void (**)(char *, uint64_t))(v18 + 8);
      v34(v32, v17);
      v35 = static Date.< infix(_:_:)(v30, v33);
      v92 = v34;
      v36 = ((uint64_t (*)(_QWORD, uint64_t))v34)(v33, v17);
      if ((v35 & 1) != 0)
      {
        v37 = v102;
        v89(v32, v102, v17);
        v38 = v95;
        v39 = ObservableObject<>.objectWillChange.getter(v94, v93);
        ObservableObjectPublisher.send()();
        swift_release(v39);
        v40 = v38 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_collectedOn;
        swift_beginAccess(v38 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_collectedOn, v103, 33, 0);
        (*(void (**)(uint64_t, char *, uint64_t))(v18 + 40))(v40, v32, v17);
        swift_endAccess(v103);
        v41 = v37;
      }
      else
      {
        Date.init()(v36);
        v43 = v95;
        v44 = ObservableObject<>.objectWillChange.getter(v94, v93);
        ObservableObjectPublisher.send()();
        swift_release(v44);
        v45 = v43 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_collectedOn;
        swift_beginAccess(v43 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_collectedOn, v103, 33, 0);
        (*(void (**)(uint64_t, char *, uint64_t))(v18 + 40))(v45, v32, v17);
        swift_endAccess(v103);
        v41 = v102;
      }
      v92((char *)v41, v17);
      a1 = v90;
      v42 = v91;
      goto LABEL_10;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
  }
  swift_bridgeObjectRetain(a1);
  sub_10014BDE0((uint64_t)v16, &qword_1002B4168);
  if (v27)
  {
    v42 = (*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
LABEL_10:
    v46 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a1 + v42 + v4[6]));
    v48 = v47;
    sub_1001AE10C((uint64_t *)&v104, v46, v47);
    swift_bridgeObjectRelease(v48);
  }
  v49 = *((_QWORD *)v104 + 2);
  v97 = v104;
  swift_bridgeObjectRetain(v104);
  v50 = 0;
  v102 = v4;
  while (1)
  {
    if (v50 == v49)
    {
      v51 = 1;
      v50 = v49;
      v52 = (unint64_t *)v99;
    }
    else
    {
      v52 = (unint64_t *)v99;
      if (v50 >= *((_QWORD *)v97 + 2))
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
        __break(1u);
        return result;
      }
      v53 = (uint64_t)&v96[*(int *)(v7 + 48)];
      sub_10017417C((uint64_t)&v97[((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))+ *(_QWORD *)(v100 + 72) * v50], v53, type metadata accessor for Metric);
      v54 = (uint64_t)v52 + *(int *)(v7 + 48);
      *v52 = v50;
      sub_1001B5618(v53, v54, type metadata accessor for Metric);
      v51 = 0;
      ++v50;
    }
    v55 = v98;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v52, v51, 1, v7);
    sub_10014BC64((uint64_t)v52, (uint64_t)v13, &qword_1002B7148);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v55 + 48))(v13, 1, v7) == 1)
      break;
    v56 = *v13;
    v57 = (uint64_t)v13 + *(int *)(v7 + 48);
    sub_1001548C8(0, (unint64_t *)&unk_1002B6E10, NSString_ptr);
    v58 = *(id *)(v57 + v4[7]);
    sub_1001B565C(v57, type metadata accessor for Metric);
    v59 = (void *)NSString.init(stringLiteral:)("timestamp", 9, 2);
    v60 = static NSObject.== infix(_:_:)(v58, v59);

    if ((v60 & 1) != 0)
    {
      v61 = (unint64_t)v104;
      if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
      {
        v61 = sub_100197F9C(v61);
        v104 = (char *)v61;
      }
      v62 = *(_QWORD *)(v61 + 16);
      if (v56 >= v62)
        goto LABEL_53;
      v63 = v62 - 1;
      v64 = *(_QWORD *)(v100 + 72);
      v65 = v61
          + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))
          + v64 * v56;
      sub_1001B565C(v65, type metadata accessor for Metric);
      if ((uint64_t)(v63 - v56) < 0)
        goto LABEL_54;
      v66 = v65 + v64;
      if (v64 > 0 || v65 >= v66 + v64 * (v63 - v56))
      {
        swift_arrayInitWithTakeFrontToBack(v65, v66);
      }
      else if (v64)
      {
        swift_arrayInitWithTakeBackToFront(v65, v66);
      }
      *(_QWORD *)(v61 + 16) = v63;
      v104 = (char *)v61;
      v4 = v102;
    }
  }
  swift_bridgeObjectRelease(v97);
  v67 = v95;
  v68 = ObservableObject<>.objectWillChange.getter(v94, v93);
  ObservableObjectPublisher.send()();
  swift_release(v68);
  *(_BYTE *)(v67 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_shouldShowSPinner) = 0;
  v69 = *((_QWORD *)v104 + 2);
  if (v69)
  {
    v70 = (uint64_t)&v104[(*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80)];
    v71 = *(_QWORD *)(v100 + 72);
    v100 = (uint64_t)v104;
    swift_bridgeObjectRetain_n(v104, 2);
    v72 = v101;
    while (1)
    {
      sub_10017417C(v70, v72, type metadata accessor for Metric);
      v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v72 + v102[5]));
      if (v74 == 4543564 && v75 == 0xE300000000000000)
      {
        swift_bridgeObjectRelease(0xE300000000000000);
      }
      else
      {
        v77 = v75;
        v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v74, v75, 4543564, 0xE300000000000000, 0);
        swift_bridgeObjectRelease(v77);
        if ((v78 & 1) == 0)
          goto LABEL_34;
      }
      v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v101 + v102[6]));
      if (v79 == 0x207942206C6C6543 && v80 == 0xEC000000646E6142)
      {
        swift_bridgeObjectRelease(0xEC000000646E6142);
LABEL_31:
        if (qword_1002B3A80 != -1)
          swift_once(&qword_1002B3A80, sub_100184F00);
        v73 = (id)qword_1002BF070;
        sub_10018732C(v101);

        goto LABEL_34;
      }
      v82 = v80;
      v83 = _stringCompareWithSmolCheck(_:_:expecting:)(v79, v80, 0x207942206C6C6543, 0xEC000000646E6142, 0);
      swift_bridgeObjectRelease(v82);
      if ((v83 & 1) != 0)
        goto LABEL_31;
LABEL_34:
      v72 = v101;
      sub_1001B565C(v101, type metadata accessor for Metric);
      v70 += v71;
      if (!--v69)
      {
        swift_bridgeObjectRelease_n(v100, 2);
        v67 = v95;
        break;
      }
    }
  }
  v84 = (uint64_t)v104;
  if (*(_QWORD *)(*(_QWORD *)(v67 + 24) + 16))
  {
    swift_bridgeObjectRelease(v104);
    return sub_1001B1F28(*(_QWORD *)(*(_QWORD *)(v67 + 24) + 16));
  }
  else
  {
    sub_1001B1F28(*((_QWORD *)v104 + 2));
    v103[0] = *(_QWORD *)(v67 + 16);
    swift_bridgeObjectRetain(v103[0]);
    sub_1001DA5D8(v84);
    v86 = v103[0];
    v87 = ObservableObject<>.objectWillChange.getter(v94, v93);
    ObservableObjectPublisher.send()();
    swift_release(v87);
    v88 = *(_QWORD *)(v67 + 16);
    *(_QWORD *)(v67 + 16) = v86;
    return swift_bridgeObjectRelease(v88);
  }
}

uint64_t sub_1001AE10C(uint64_t *a1, char *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char *v81;
  int *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  id v86;
  void *v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  char v102;
  _QWORD *v103;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  id v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  char v153;
  _QWORD *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  void (*v178)(char *, uint64_t, uint64_t, unint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t *v182;
  uint64_t v183;
  id v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t (*v195)(_QWORD);
  id v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  char v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  int64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t i;
  uint64_t v266;
  char *v267;
  unint64_t *v268;
  char *v269;
  const char *v270;
  unint64_t v271;
  char *v272;
  unint64_t *v273;
  char *v274;
  uint64_t v275;
  uint64_t *v276;
  char *v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  char *v285;
  unint64_t v286;
  void (*v287)(uint64_t, uint64_t, uint64_t, unint64_t);
  int *v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  _QWORD *v292;
  unint64_t v293;

  v270 = a3;
  v264 = type metadata accessor for MetricSectional(0);
  v263 = *(_QWORD *)(v264 - 8);
  v5 = __chkstk_darwin(v264);
  v258 = (char *)&v255 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (unint64_t)&v255 - v8;
  v10 = __chkstk_darwin(v7);
  v260 = (uint64_t)&v255 - v11;
  __chkstk_darwin(v10);
  v259 = (uint64_t)&v255 - v12;
  v275 = type metadata accessor for Date(0);
  v286 = *(_QWORD *)(v275 - 8);
  __chkstk_darwin(v275);
  v285 = (char *)&v255 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v288 = (int *)type metadata accessor for Metric(0);
  v278 = (char *)*((_QWORD *)v288 - 1);
  v14 = __chkstk_darwin(v288);
  v257 = (char *)&v255 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v279 = (uint64_t)&v255 - v17;
  v18 = __chkstk_darwin(v16);
  v287 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))((char *)&v255 - v19);
  v20 = __chkstk_darwin(v18);
  v272 = (char *)&v255 - v21;
  v22 = __chkstk_darwin(v20);
  v256 = (unint64_t)&v255 - v23;
  __chkstk_darwin(v22);
  v25 = (uint64_t)&v255 - v24;
  v26 = sub_100146438(&qword_1002B7140);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v284 = (char *)&v255 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100146438(&qword_1002B7148);
  v30 = __chkstk_darwin(v29);
  v262 = (unint64_t *)((char *)&v255 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = __chkstk_darwin(v30);
  v261 = (uint64_t)&v255 - v33;
  v34 = __chkstk_darwin(v32);
  v267 = (char *)&v255 - v35;
  v36 = __chkstk_darwin(v34);
  v266 = (uint64_t)&v255 - v37;
  v38 = __chkstk_darwin(v36);
  v269 = (char *)&v255 - v39;
  v40 = __chkstk_darwin(v38);
  v268 = (unint64_t *)((char *)&v255 - v41);
  v42 = __chkstk_darwin(v40);
  v44 = (unint64_t)&v255 - v43;
  v45 = __chkstk_darwin(v42);
  v277 = (char *)&v255 - v46;
  v47 = __chkstk_darwin(v45);
  v274 = (char *)&v255 - v48;
  v49 = __chkstk_darwin(v47);
  v273 = (unint64_t *)((char *)&v255 - v50);
  v51 = __chkstk_darwin(v49);
  v281 = (char *)&v255 - v52;
  v53 = __chkstk_darwin(v51);
  v280 = (uint64_t)&v255 - v54;
  v55 = __chkstk_darwin(v53);
  v57 = (uint64_t)&v255 - v56;
  result = __chkstk_darwin(v55);
  v60 = (unint64_t *)((char *)&v255 - v59);
  v276 = a1;
  v61 = *a1;
  v62 = *(_QWORD *)(*a1 + 16);
  if (!v62)
    return result;
  v289 = v26;
  v282 = v61;
  v283 = v27;
  if (a2 == (char *)0xD000000000000011 && v270 == (const char *)0x8000000100210AE0
    || (v63 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, v270, 0xD000000000000011, 0x8000000100210AE0, 0),
        v61 = v282,
        (v63 & 1) != 0))
  {
    swift_bridgeObjectRetain(v61);
    v271 = 0;
    v64 = 0;
    v9 = 0;
    v279 = (uint64_t)"kCTCellMonitorTAC";
    v277 = (char *)0x8000000100210290;
    v270 = "avg_values_phy_cell_id";
    v269 = (char *)0x8000000100210250;
    while (1)
    {
      if (v9 == v62)
      {
        v287 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v27 + 56);
        v287(v57, 1, 1, v26);
        v9 = v62;
      }
      else
      {
        if (v9 >= *(_QWORD *)(v282 + 16))
        {
          __break(1u);
          goto LABEL_217;
        }
        a2 = &v284[*(int *)(v289 + 48)];
        v44 = (unint64_t)type metadata accessor for Metric;
        sub_10017417C(v282+ ((v278[80] + 32) & ~(unint64_t)v278[80])+ *((_QWORD *)v278 + 9) * v9, (uint64_t)a2, type metadata accessor for Metric);
        v66 = v57 + *(int *)(v289 + 48);
        *(_QWORD *)v57 = v9;
        sub_1001B5618((uint64_t)a2, v66, type metadata accessor for Metric);
        v287 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v27 + 56);
        v287(v57, 0, 1, v289);
        ++v9;
        v26 = v289;
      }
      sub_10014BC64(v57, (uint64_t)v60, &qword_1002B7148);
      v27 = *(_QWORD *)(v27 + 48);
      if (((unsigned int (*)(unint64_t *, uint64_t, unint64_t))v27)(v60, 1, v26) == 1)
        break;
      v44 = v64;
      v67 = v26;
      v68 = *v60;
      sub_1001B5618((uint64_t)v60 + *(int *)(v67 + 48), v25, type metadata accessor for Metric);
      a2 = *(char **)(v25 + v288[8]);
      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
      v71 = v70;
      if (v69 == 0xD000000000000027 && v70 == v277)
      {
        swift_bridgeObjectRelease(v279 | 0x8000000000000000);
LABEL_7:
        sub_1001B565C(v25, type metadata accessor for Metric);
        v64 = v68;
        v26 = v289;
        v27 = v283;
      }
      else
      {
        v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, 0xD000000000000027, v279 | 0x8000000000000000, 0);
        swift_bridgeObjectRelease(v71);
        if ((v65 & 1) != 0)
          goto LABEL_7;
        v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        a2 = v73;
        if (v72 == 0xD00000000000001CLL && v73 == v269)
        {
          swift_bridgeObjectRelease((unint64_t)v270 | 0x8000000000000000);
          sub_1001B565C(v25, type metadata accessor for Metric);
          v271 = v68;
        }
        else
        {
          v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v72, v73, 0xD00000000000001CLL, (unint64_t)v270 | 0x8000000000000000, 0);
          swift_bridgeObjectRelease(a2);
          sub_1001B565C(v25, type metadata accessor for Metric);
          v75 = v271;
          if ((v74 & 1) != 0)
            v75 = v68;
          v271 = v75;
        }
        v26 = v289;
        v27 = v283;
        v64 = v44;
      }
    }
    swift_bridgeObjectRelease(v282);
    v9 = v271;
    if ((v271 & 0x8000000000000000) != 0)
      goto LABEL_225;
    v57 = *v276;
    if (v271 >= *(_QWORD *)(*v276 + 16))
      goto LABEL_226;
    a2 = (char *)((v278[80] + 32) & ~(unint64_t)v278[80]);
    v62 = (unint64_t)&a2[v57];
    v283 = *((_QWORD *)v278 + 9);
    v44 = v283 * v271;
    v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)&a2[v57 + v283 * v271 + v288[9]]);
    v78 = sub_1001AD104(v76, v77);
    if ((v79 & 1) != 0)
      goto LABEL_34;
    v25 = v78;
    if (v78 < 0)
      goto LABEL_34;
    if ((v64 & 0x8000000000000000) != 0)
      goto LABEL_234;
    if (v64 >= *(_QWORD *)(v57 + 16))
      goto LABEL_235;
    v80 = v62 + v283 * v64;
    v62 = v256;
    sub_10017417C(v80, v256, type metadata accessor for Metric);
    v25 = (uint64_t)sub_1001B5698(v25);
    if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
      goto LABEL_236;
LABEL_30:
    if (v9 >= *(_QWORD *)(v57 + 16))
    {
      __break(1u);
LABEL_238:
      __break(1u);
LABEL_239:
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
      __break(1u);
      return result;
    }
    v81 = &a2[v57 + v44];
    v82 = v288;
    v83 = v288[9];
    v84 = *(void **)&v81[v83];
    *(_QWORD *)&v81[v83] = v25;

    *v276 = v57;
    v85 = *(void **)(v62 + v82[9]);
    sub_1001548C8(0, (unint64_t *)&unk_1002B6E10, NSString_ptr);
    v86 = v85;
    v87 = (void *)NSString.init(stringLiteral:)("LTE", 3, 2);
    v88 = static NSObject.== infix(_:_:)(v86, v87);

    if ((v88 & 1) == 0)
    {
      v89 = (uint64_t)v272;
      sub_1001AD51C(v9, (uint64_t)v272);
      sub_1001B565C(v89, type metadata accessor for Metric);
    }
    sub_1001B565C(v62, type metadata accessor for Metric);
LABEL_34:
    v25 = (uint64_t)v276;
    v44 = 0;
    sub_1001B03FC(v276, type metadata accessor for Metric, (uint64_t (*)(uint64_t))sub_100197F9C, sub_1001B3644);
    v277 = 0;
    v292 = (_QWORD *)sub_1001BE9F0((uint64_t)_swiftEmptyArrayStorage);
    v90 = *(_QWORD *)v25;
    v91 = *(_QWORD *)(*(_QWORD *)v25 + 16);
    v92 = (uint64_t)&a2[*(_QWORD *)v25];
    v278 = a2;
    v279 = v92;
    v282 = v90;
    swift_bridgeObjectRetain(v90);
    v9 = 0;
    v62 = v275;
    v57 = (uint64_t)v281;
    while (1)
    {
      if (v9 == v91)
      {
        v287(v57, 1, 1, v26);
        v9 = v91;
      }
      else
      {
        if (v9 >= *(_QWORD *)(v282 + 16))
        {
LABEL_217:
          __break(1u);
LABEL_218:
          __break(1u);
          goto LABEL_219;
        }
        v25 = (uint64_t)&v284[*(int *)(v26 + 48)];
        sub_10017417C(v279 + v9 * v283, v25, type metadata accessor for Metric);
        v93 = v57 + *(int *)(v26 + 48);
        *(_QWORD *)v57 = v9;
        sub_1001B5618(v25, v93, type metadata accessor for Metric);
        v287(v57, 0, 1, v26);
        ++v9;
      }
      v94 = v57;
      v95 = v280;
      sub_10014BC64(v94, v280, &qword_1002B7148);
      if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v27)(v95, 1, v26) == 1)
      {
        swift_bridgeObjectRelease(v282);
        v57 = (uint64_t)v292;
        if (v292[2] < 2uLL)
        {
LABEL_87:
          v131 = v57;
          return swift_bridgeObjectRelease(v131);
        }
        v44 = (unint64_t)(v292 + 8);
        v106 = 1 << *((_BYTE *)v292 + 32);
        v107 = -1;
        if (v106 < 64)
          v107 = ~(-1 << v106);
        v26 = v107 & v292[8];
        a2 = (char *)((unint64_t)(v106 + 63) >> 6);
        swift_bridgeObjectRetain(v292);
        v9 = 0;
        v108 = 0;
        v109 = 0;
        v62 = 0xE000000000000000;
        if (v26)
        {
LABEL_54:
          v110 = __clz(__rbit64(v26));
          v26 &= v26 - 1;
          v111 = v110 | (v109 << 6);
          goto LABEL_55;
        }
        while (1)
        {
          v113 = v109 + 1;
          if (__OFADD__(v109, 1))
            break;
          if (v113 >= (uint64_t)a2)
            goto LABEL_73;
          v114 = *(_QWORD *)(v44 + 8 * v113);
          ++v109;
          if (!v114)
          {
            v109 = v113 + 1;
            if (v113 + 1 >= (uint64_t)a2)
              goto LABEL_73;
            v114 = *(_QWORD *)(v44 + 8 * v109);
            if (!v114)
            {
              v109 = v113 + 2;
              if (v113 + 2 >= (uint64_t)a2)
                goto LABEL_73;
              v114 = *(_QWORD *)(v44 + 8 * v109);
              if (!v114)
              {
                v115 = v113 + 3;
                if (v115 >= (uint64_t)a2)
                {
LABEL_73:
                  swift_release(v57);
                  v25 = (uint64_t)&v292;
                  sub_10017D27C(v9, v62);
                  swift_bridgeObjectRelease(v62);
                  v117 = *v276;
                  v62 = *(_QWORD *)(*v276 + 16);
                  v281 = &v278[*v276];
                  v282 = v117;
                  swift_bridgeObjectRetain(v117);
                  v118 = 0;
                  v57 = (uint64_t)v274;
LABEL_75:
                  v9 = v289;
                  while (1)
                  {
                    if (v118 == v62)
                    {
                      v287(v57, 1, 1, v9);
                      v118 = v62;
                    }
                    else
                    {
                      if (v118 >= *(_QWORD *)(v282 + 16))
                        goto LABEL_220;
                      v119 = (uint64_t)&v284[*(int *)(v9 + 48)];
                      sub_10017417C((uint64_t)&v281[v118 * v283], v119, type metadata accessor for Metric);
                      v120 = v57 + *(int *)(v9 + 48);
                      *(_QWORD *)v57 = v118;
                      sub_1001B5618(v119, v120, type metadata accessor for Metric);
                      v287(v57, 0, 1, v9);
                      ++v118;
                    }
                    v121 = v57;
                    v122 = v273;
                    sub_10014BC64(v121, (uint64_t)v273, &qword_1002B7148);
                    if (((unsigned int (*)(unint64_t *, uint64_t, unint64_t))v27)(v122, 1, v9) == 1)break;
                    v44 = v27;
                    v123 = v62;
                    v26 = *v122;
                    v124 = (uint64_t)v122 + *(int *)(v9 + 48);
                    v125 = v285;
                    v126 = v286;
                    v127 = v275;
                    (*(void (**)(char *, uint64_t, uint64_t))(v286 + 16))(v285, v124 + v288[11], v275);
                    sub_1001B565C(v124, type metadata accessor for Metric);
                    v128 = sub_100174348();
                    a2 = v129;
                    (*(void (**)(char *, uint64_t))(v126 + 8))(v125, v127);
                    v25 = (uint64_t)v292;
                    if (!v292[2])
                    {
                      swift_bridgeObjectRelease(a2);
                      v57 = (uint64_t)v274;
                      v62 = v123;
                      v27 = v44;
                      goto LABEL_75;
                    }
                    sub_1001C7C98(v128, (uint64_t)a2);
                    v25 = v130;
                    swift_bridgeObjectRelease(a2);
                    v57 = (uint64_t)v274;
                    v62 = v123;
                    v27 = v44;
                    v9 = v289;
                    if ((v25 & 1) != 0
                      && (v26 & 0x8000000000000000) == 0
                      && (int64_t)v26 < *(_QWORD *)(*v276 + 16))
                    {
                      a2 = v272;
                      v25 = (uint64_t)v276;
                      sub_1001AD51C(v26, (uint64_t)v272);
                      sub_1001B565C((uint64_t)a2, type metadata accessor for Metric);
                    }
                  }
                  swift_bridgeObjectRelease(v282);
                  v57 = (uint64_t)v292;
                  goto LABEL_87;
                }
                v114 = *(_QWORD *)(v44 + 8 * v115);
                if (!v114)
                {
                  while (1)
                  {
                    v109 = v115 + 1;
                    if (__OFADD__(v115, 1))
                      goto LABEL_223;
                    if (v109 >= (uint64_t)a2)
                      goto LABEL_73;
                    v114 = *(_QWORD *)(v44 + 8 * v109);
                    ++v115;
                    if (v114)
                      goto LABEL_70;
                  }
                }
                v109 = v115;
              }
            }
          }
LABEL_70:
          v26 = (v114 - 1) & v114;
          v111 = __clz(__rbit64(v114)) + (v109 << 6);
LABEL_55:
          v112 = *(_QWORD *)(*(_QWORD *)(v57 + 56) + 8 * v111);
          if (v108 < v112)
          {
            v116 = (unint64_t *)(*(_QWORD *)(v57 + 48) + 16 * v111);
            v9 = *v116;
            v25 = v116[1];
            swift_bridgeObjectRetain(v25);
            swift_bridgeObjectRelease(v62);
            v62 = v25;
            v108 = v112;
            if (v26)
              goto LABEL_54;
          }
          else if (v26)
          {
            goto LABEL_54;
          }
        }
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
LABEL_235:
        __break(1u);
LABEL_236:
        v57 = sub_100197F9C(v57);
        goto LABEL_30;
      }
      v96 = v95 + *(int *)(v26 + 48);
      v97 = v285;
      v44 = v286;
      (*(void (**)(char *, uint64_t, unint64_t))(v286 + 16))(v285, v96 + v288[11], v62);
      sub_1001B565C(v96, type metadata accessor for Metric);
      v98 = sub_100174348();
      a2 = v99;
      (*(void (**)(char *, unint64_t))(v44 + 8))(v97, v62);
      v25 = (uint64_t)v292;
      if (!v292[2])
        break;
      swift_bridgeObjectRetain(a2);
      sub_1001C7C98(v98, (uint64_t)a2);
      v44 = v100;
      swift_bridgeObjectRelease(a2);
      v25 = (uint64_t)v292;
      if ((v44 & 1) == 0)
        break;
      v57 = (uint64_t)v281;
      if (v292[2])
      {
        swift_bridgeObjectRetain(a2);
        v101 = sub_1001C7C98(v98, (uint64_t)a2);
        if ((v102 & 1) != 0)
        {
          v25 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v101);
          swift_bridgeObjectRelease(a2);
          v44 = v25 + 1;
          if (__OFADD__(v25, 1))
            goto LABEL_222;
          v103 = v292;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v292);
          v290 = (uint64_t)v103;
          v292 = (_QWORD *)0x8000000000000000;
          v105 = v44;
LABEL_48:
          sub_1001C9B20(v105, v98, (uint64_t)a2, isUniquelyReferenced_nonNull_native);
          v25 = (uint64_t)v292;
          v292 = (_QWORD *)v290;
          swift_bridgeObjectRelease(a2);
          swift_bridgeObjectRelease(v25);
        }
        else
        {
          swift_bridgeObjectRelease_n(a2, 2);
        }
      }
      else
      {
        swift_bridgeObjectRelease(a2);
      }
    }
    v57 = (uint64_t)v281;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
    v290 = v25;
    v292 = (_QWORD *)0x8000000000000000;
    v105 = 1;
    goto LABEL_48;
  }
  if (a2 == (char *)0x7574617453204143 && v270 == (const char *)0xE900000000000073
    || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, v270, 0x7574617453204143, 0xE900000000000073, 0) & 1) != 0)
  {
    v132 = type metadata accessor for MetricDetailViewModel(0);
    v280 = sub_100146004(&qword_1002B7138, type metadata accessor for MetricDetailViewModel, (uint64_t)&unk_100243368);
    v281 = (char *)v132;
    v133 = v132;
    v134 = v271;
    v25 = ObservableObject<>.objectWillChange.getter(v133, v280);
    ObservableObjectPublisher.send()();
    swift_release(v25);
    v135 = *(_QWORD *)(v134 + 24);
    *(_QWORD *)(v134 + 24) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v135);
    v136 = *(_QWORD *)(v282 + 16);
    swift_bridgeObjectRetain(v282);
    v137 = 0;
    v57 = (uint64_t)&type metadata for String;
    for (i = v44; ; v44 = i)
    {
      while (1)
      {
        v9 = (unint64_t)v277;
        if (v137 == v136)
        {
          v138 = 1;
          v137 = v136;
        }
        else
        {
          if (v137 >= *(_QWORD *)(v282 + 16))
            goto LABEL_221;
          v62 = v137 + 1;
          v139 = (uint64_t)&v284[*(int *)(v26 + 48)];
          sub_10017417C(v282+ ((v278[80] + 32) & ~(unint64_t)v278[80])+ *((_QWORD *)v278 + 9) * v137, v139, type metadata accessor for Metric);
          v140 = v44 + *(int *)(v26 + 48);
          *(_QWORD *)v44 = v137;
          sub_1001B5618(v139, v140, type metadata accessor for Metric);
          v138 = 0;
          ++v137;
        }
        (*(void (**)(unint64_t, uint64_t, uint64_t, unint64_t))(v27 + 56))(v44, v138, 1, v26);
        sub_10014BC64(v44, v9, &qword_1002B7148);
        if ((*(unsigned int (**)(unint64_t, uint64_t, unint64_t))(v27 + 48))(v9, 1, v26) == 1)
          goto LABEL_110;
        v141 = v9;
        v9 = *(_QWORD *)v9;
        v142 = v141 + *(int *)(v26 + 48);
        v143 = *(id *)(v142 + v288[7]);
        sub_1001B565C(v142, type metadata accessor for Metric);
        a2 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
        v62 = v144;

        v292 = a2;
        v293 = v62;
        v290 = 0x2D6E6F6974636573;
        v291 = 0xE800000000000000;
        v145 = sub_10014654C();
        v25 = (uint64_t)&v292;
        if ((StringProtocol.contains<A>(_:)(&v290, &type metadata for String, &type metadata for String, v145, v145) & 1) != 0)
          break;
        swift_bridgeObjectRelease(v62);
        v27 = v283;
      }
      v292 = a2;
      v293 = v62;
      v290 = 45;
      v291 = 0xE100000000000000;
      v44 = (unint64_t)&type metadata for String;
      v146 = (char *)StringProtocol.components<A>(separatedBy:)(&v290, &type metadata for String, &type metadata for String, v145, v145);
      a2 = v146;
      if (*((_QWORD *)v146 + 2))
      {
        v26 = *((_QWORD *)v146 + 4);
        v25 = *((_QWORD *)v146 + 5);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRelease(v62);
        swift_bridgeObjectRelease(a2);
        v62 = *v276;
        v147 = swift_isUniquelyReferenced_nonNull_native(*v276);
        v27 = v283;
        if ((v147 & 1) != 0)
        {
          if ((v9 & 0x8000000000000000) != 0)
            goto LABEL_109;
        }
        else
        {
          v62 = sub_100197F9C(v62);
          if ((v9 & 0x8000000000000000) != 0)
          {
LABEL_109:
            __break(1u);
LABEL_110:
            result = swift_bridgeObjectRelease(v282);
            v150 = *v276;
            v151 = *(_QWORD *)(*v276 + 16);
            v26 = (unint64_t)_swiftEmptyArrayStorage;
            if (!v151)
              return result;
            v289 = (v278[80] + 32) & ~(unint64_t)v278[80];
            v27 = *((_QWORD *)v278 + 9);
            v152 = (uint64_t *)(v150 + v289 + v27 * (v151 - 1) + v288[16]);
            v57 = v152[1];
            if (!v57)
              return result;
            v25 = *v152;
            swift_bridgeObjectRetain(v152[1]);
            result = sub_1001AD104(v25, v57);
            if ((v153 & 1) != 0)
              return result;
            a2 = (char *)result;
            if (result < 0)
              goto LABEL_238;
            if (!result)
              return result;
            v154 = 0;
            v284 = (char *)result;
            while (2)
            {
              if (v154 == (_QWORD *)a2)
                goto LABEL_232;
              v292 = v154;
              v25 = (uint64_t)&v292;
              v155 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
              v285 = v156;
              v286 = v155;
              v62 = *v276;
              v292 = _swiftEmptyArrayStorage;
              v44 = *(_QWORD *)(v62 + 16);
              swift_bridgeObjectRetain(v62);
              if (!v44)
              {
                v163 = _swiftEmptyArrayStorage;
                goto LABEL_138;
              }
              v26 = 0;
              a2 = (char *)(v62 + v289);
LABEL_122:
              if (v26 >= *(_QWORD *)(v62 + 16))
                goto LABEL_218;
              v157 = (uint64_t)v287;
              sub_10017417C((uint64_t)a2, (uint64_t)v287, type metadata accessor for Metric);
              v158 = (uint64_t *)(v157 + v288[16]);
              v57 = *v158;
              v9 = v158[1];
              v290 = (uint64_t)v154;
              swift_bridgeObjectRetain(v9);
              v159 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
              v25 = v160;
              if (v9)
              {
                if (v57 == v159 && v9 == v160)
                {
                  swift_bridgeObjectRelease(v9);
                  swift_bridgeObjectRelease(v25);
                  goto LABEL_131;
                }
                v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v9, v159, v160, 0);
                swift_bridgeObjectRelease(v9);
                swift_bridgeObjectRelease(v25);
                if ((v57 & 1) != 0)
                {
LABEL_131:
                  sub_1001B5618((uint64_t)v287, v279, type metadata accessor for Metric);
                  v25 = (uint64_t)v292;
                  if ((swift_isUniquelyReferenced_nonNull_native(v292) & 1) == 0)
                  {
                    sub_100195AFC(0, *(_QWORD *)(v25 + 16) + 1, 1);
                    v25 = (uint64_t)v292;
                  }
                  v9 = *(_QWORD *)(v25 + 16);
                  v162 = *(_QWORD *)(v25 + 24);
                  v57 = v9 + 1;
                  if (v9 >= v162 >> 1)
                  {
                    sub_100195AFC(v162 > 1, v9 + 1, 1);
                    v25 = (uint64_t)v292;
                  }
                  *(_QWORD *)(v25 + 16) = v57;
                  sub_1001B5618(v279, v25 + v289 + v9 * v27, type metadata accessor for Metric);
LABEL_121:
                  ++v26;
                  a2 += v27;
                  if (v44 == v26)
                  {
                    v163 = v292;
                    v26 = (unint64_t)_swiftEmptyArrayStorage;
                    a2 = v284;
LABEL_138:
                    v164 = swift_bridgeObjectRelease(v62);
                    v165 = v259;
                    UUID.init()(v164);
                    v166 = v264;
                    v167 = (unint64_t *)(v165 + *(int *)(v264 + 20));
                    v168 = v285;
                    *v167 = v286;
                    v167[1] = (unint64_t)v168;
                    *(_QWORD *)(v165 + *(int *)(v166 + 24)) = v163;
                    sub_10017417C(v165, v260, type metadata accessor for MetricSectional);
                    v44 = v271;
                    v62 = *(_QWORD *)(v271 + 24);
                    v169 = swift_bridgeObjectRetain(v62);
                    if ((swift_isUniquelyReferenced_nonNull_native(v169) & 1) == 0)
                      v62 = sub_1001C7914(0, *(_QWORD *)(v62 + 16) + 1, 1, v62);
                    v171 = *(_QWORD *)(v62 + 16);
                    v170 = *(_QWORD *)(v62 + 24);
                    if (v171 >= v170 >> 1)
                      v62 = sub_1001C7914(v170 > 1, v171 + 1, 1, v62);
                    v154 = (_QWORD *)((char *)v154 + 1);
                    *(_QWORD *)(v62 + 16) = v171 + 1;
                    v57 = (uint64_t)type metadata accessor for MetricSectional;
                    sub_1001B5618(v260, v62+ ((*(unsigned __int8 *)(v263 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v263 + 80))+ *(_QWORD *)(v263 + 72) * v171, type metadata accessor for MetricSectional);
                    v25 = ObservableObject<>.objectWillChange.getter(v281, v280);
                    ObservableObjectPublisher.send()();
                    swift_release(v25);
                    v172 = *(_QWORD *)(v44 + 24);
                    *(_QWORD *)(v44 + 24) = v62;
                    swift_bridgeObjectRelease(v172);
                    result = sub_1001B565C(v259, type metadata accessor for MetricSectional);
                    if (v154 == (_QWORD *)a2)
                      return result;
                    continue;
                  }
                  goto LABEL_122;
                }
              }
              else
              {
                swift_bridgeObjectRelease(v160);
              }
              break;
            }
            sub_1001B565C((uint64_t)v287, type metadata accessor for Metric);
            goto LABEL_121;
          }
        }
        if (v9 >= *(_QWORD *)(v62 + 16))
          goto LABEL_224;
        v148 = (unint64_t *)(v62
                                  + ((v278[80] + 32) & ~(unint64_t)v278[80])
                                  + *((_QWORD *)v278 + 9) * v9
                                  + v288[16]);
        v149 = v148[1];
        *v148 = v26;
        v148[1] = v25;
        swift_bridgeObjectRelease(v149);
        *v276 = v62;
        v26 = v289;
      }
      else
      {
        swift_bridgeObjectRelease(v62);
        swift_bridgeObjectRelease(a2);
        v27 = v283;
      }
    }
  }
  v173 = v282;
  if (a2 != (char *)0x207942206C6C6543 || v270 != (const char *)0xEC000000646E6142)
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)(a2, v270, 0x207942206C6C6543, 0xEC000000646E6142, 0);
    v173 = v282;
    if ((result & 1) == 0)
      return result;
  }
  v279 = v9;
  v174 = type metadata accessor for MetricDetailViewModel(0);
  v280 = sub_100146004(&qword_1002B7138, type metadata accessor for MetricDetailViewModel, (uint64_t)&unk_100243368);
  v281 = (char *)v174;
  v175 = v174;
  v176 = v271;
  v25 = ObservableObject<>.objectWillChange.getter(v175, v280);
  ObservableObjectPublisher.send()();
  swift_release(v25);
  v177 = *(_QWORD *)(v176 + 24);
  *(_QWORD *)(v176 + 24) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v177);
  v57 = *(_QWORD *)(v173 + 16);
  swift_bridgeObjectRetain(v173);
  v27 = 0;
  v44 = (unint64_t)&type metadata for String;
  while (1)
  {
    a2 = v269;
    if (v27 == v57)
    {
      v25 = v283;
      v178 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(v283 + 56);
      v178(v269, 1, 1, v26);
      v27 = v57;
    }
    else
    {
      if (v27 >= *(_QWORD *)(v282 + 16))
        goto LABEL_227;
      v179 = (uint64_t)&v284[*(int *)(v26 + 48)];
      sub_10017417C(v282+ ((v278[80] + 32) & ~(unint64_t)v278[80])+ *((_QWORD *)v278 + 9) * v27, v179, type metadata accessor for Metric);
      v180 = (uint64_t)&a2[*(int *)(v26 + 48)];
      *(_QWORD *)a2 = v27;
      sub_1001B5618(v179, v180, type metadata accessor for Metric);
      v25 = v283;
      v178 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(v283 + 56);
      v178(a2, 0, 1, v26);
      ++v27;
    }
    v181 = (uint64_t)a2;
    v182 = v268;
    sub_10014BC64(v181, (uint64_t)v268, &qword_1002B7148);
    v62 = *(_QWORD *)(v25 + 48);
    if (((unsigned int (*)(unint64_t *, uint64_t, unint64_t))v62)(v182, 1, v26) == 1)
      break;
    v62 = *v182;
    v183 = (uint64_t)v182 + *(int *)(v26 + 48);
    v184 = *(id *)(v183 + v288[7]);
    sub_1001B565C(v183, type metadata accessor for Metric);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v184);
    v186 = v185;

    v292 = (_QWORD *)v9;
    v293 = v186;
    v290 = 0x2D6E6F6974636573;
    v291 = 0xE800000000000000;
    v187 = sub_10014654C();
    v25 = (uint64_t)&v292;
    if ((StringProtocol.contains<A>(_:)(&v290, &type metadata for String, &type metadata for String, v187, v187) & 1) != 0)
    {
      v292 = (_QWORD *)v9;
      v293 = v186;
      v290 = 45;
      v291 = 0xE100000000000000;
      v188 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(&v290, &type metadata for String, &type metadata for String, v187, v187);
      v9 = (unint64_t)v188;
      if (v188[2])
      {
        v26 = v188[4];
        v25 = v188[5];
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRelease(v186);
        swift_bridgeObjectRelease(v9);
        a2 = (char *)*v276;
        if ((swift_isUniquelyReferenced_nonNull_native(*v276) & 1) != 0)
        {
          if ((v62 & 0x8000000000000000) != 0)
            goto LABEL_162;
        }
        else
        {
          a2 = (char *)sub_100197F9C((unint64_t)a2);
          if ((v62 & 0x8000000000000000) != 0)
          {
LABEL_162:
            __break(1u);
            break;
          }
        }
        if (v62 >= *((_QWORD *)a2 + 2))
          goto LABEL_233;
        v189 = (unint64_t *)&a2[((v278[80] + 32) & ~(unint64_t)v278[80])
                                     + *((_QWORD *)v278 + 9) * v62
                                     + v288[16]];
        v190 = v189[1];
        *v189 = v26;
        v189[1] = v25;
        swift_bridgeObjectRelease(v190);
        *v276 = (uint64_t)a2;
        v26 = v289;
      }
      else
      {
        swift_bridgeObjectRelease(v186);
        swift_bridgeObjectRelease(v9);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v186);
    }
  }
  swift_bridgeObjectRelease(v282);
  v191 = *v276;
  a2 = *(char **)(*v276 + 16);
  v282 = v271 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_collectedOn;
  v283 = v191;
  swift_bridgeObjectRetain(v191);
  v192 = 0;
  v9 = (unint64_t)type metadata accessor for Metric;
  v27 = (unint64_t)v257;
  while (1)
  {
    v44 = (unint64_t)v267;
    if (v192 == a2)
    {
      v178(v267, 1, 1, v26);
      v192 = a2;
    }
    else
    {
      if ((unint64_t)v192 >= *(_QWORD *)(v283 + 16))
        goto LABEL_228;
      v57 = (uint64_t)(v192 + 1);
      v193 = (uint64_t)&v284[*(int *)(v26 + 48)];
      sub_10017417C(v283+ ((v278[80] + 32) & ~(unint64_t)v278[80])+ *((_QWORD *)v278 + 9) * (_QWORD)v192, v193, (uint64_t (*)(_QWORD))v9);
      v194 = v44 + *(int *)(v26 + 48);
      *(_QWORD *)v44 = v192;
      sub_1001B5618(v193, v194, (uint64_t (*)(_QWORD))v9);
      v178((char *)v44, 0, 1, v26);
      ++v192;
    }
    v25 = v266;
    sub_10014BC64(v44, v266, &qword_1002B7148);
    if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v62)(v25, 1, v26) == 1)
      break;
    v287 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))v178;
    v57 = *(_QWORD *)v25;
    sub_1001B5618(v25 + *(int *)(v26 + 48), v27, (uint64_t (*)(_QWORD))v9);
    sub_1001548C8(0, (unint64_t *)&unk_1002B6E10, NSString_ptr);
    v195 = (uint64_t (*)(_QWORD))v9;
    v196 = *(id *)(v27 + v288[7]);
    v44 = v27;
    v197 = (void *)NSString.init(stringLiteral:)("timestamp", 9, 2);
    v25 = static NSObject.== infix(_:_:)(v196, v197);

    if ((v25 & 1) != 0)
    {
      v27 = (unint64_t)v285;
      v9 = v286;
      v198 = v275;
      (*(void (**)(char *, unint64_t, uint64_t))(v286 + 16))(v285, v44 + v288[11], v275);
      v199 = ObservableObject<>.objectWillChange.getter(v281, v280);
      ObservableObjectPublisher.send()();
      swift_release(v199);
      v200 = v282;
      swift_beginAccess(v282, &v292, 33, 0);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 40))(v200, v27, v198);
      swift_endAccess(&v292);
      v26 = (unint64_t)v276;
      v25 = *v276;
      v201 = swift_isUniquelyReferenced_nonNull_native(*v276);
      *(_QWORD *)v26 = v25;
      if ((v201 & 1) == 0)
      {
        v25 = sub_100197F9C(v25);
        *v276 = v25;
      }
      v202 = *(_QWORD *)(v25 + 16);
      if (v57 >= v202)
        goto LABEL_230;
      v203 = v202 - 1;
      v204 = *((_QWORD *)v278 + 9);
      v205 = v25 + ((v278[80] + 32) & ~(unint64_t)v278[80]) + v204 * v57;
      sub_1001B565C(v205, v195);
      if ((uint64_t)(v203 - v57) < 0)
        goto LABEL_239;
      v206 = v205 + v204;
      if (v204 > 0 || v205 >= v206 + v204 * (v203 - v57))
      {
        swift_arrayInitWithTakeFrontToBack(v205, v206);
      }
      else if (v204)
      {
        swift_arrayInitWithTakeBackToFront(v205, v206);
      }
      *(_QWORD *)(v25 + 16) = v203;
      *v276 = v25;
      v26 = v289;
      v44 = (unint64_t)v257;
    }
    sub_1001B565C(v44, v195);
    v27 = v44;
    v9 = (unint64_t)v195;
    v178 = (void (*)(char *, uint64_t, uint64_t, unint64_t))v287;
  }
  swift_bridgeObjectRelease(v283);
  v9 = *(_QWORD *)(*v276 + 16);
  v287 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))*v276;
  swift_bridgeObjectRetain(v287);
  v44 = 0;
  v286 = 0;
  while (1)
  {
    if (v44 == v9)
    {
      v207 = (uint64_t)v262;
      v26 = v289;
      v178((char *)v262, 1, 1, v289);
      v44 = v9;
    }
    else
    {
      v26 = v289;
      if (v44 >= *((_QWORD *)v287 + 2))
        goto LABEL_229;
      v208 = (uint64_t)&v284[*(int *)(v289 + 48)];
      sub_10017417C((uint64_t)v287+ ((v278[80] + 32) & ~(unint64_t)v278[80])+ *((_QWORD *)v278 + 9) * v44, v208, type metadata accessor for Metric);
      v209 = v262;
      v210 = (uint64_t)v262 + *(int *)(v26 + 48);
      *v262 = v44;
      v211 = v208;
      v207 = (uint64_t)v209;
      sub_1001B5618(v211, v210, type metadata accessor for Metric);
      v178((char *)v207, 0, 1, v26);
      ++v44;
    }
    v57 = v261;
    sub_10014BC64(v207, v261, &qword_1002B7148);
    if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v62)(v57, 1, v26) == 1)
      break;
    v212 = v26;
    v26 = *(_QWORD *)v57;
    v213 = v57 + *(int *)(v212 + 48);
    sub_1001548C8(0, (unint64_t *)&unk_1002B6E10, NSString_ptr);
    a2 = (char *)*(id *)(v213 + v288[7]);
    sub_1001B565C(v213, type metadata accessor for Metric);
    v27 = NSString.init(stringLiteral:)("subs_id", 7, 2);
    v25 = static NSObject.== infix(_:_:)(a2, v27);

    if ((v25 & 1) != 0)
    {
      v57 = (uint64_t)v276;
      v25 = *v276;
      v214 = swift_isUniquelyReferenced_nonNull_native(*v276);
      *(_QWORD *)v57 = v25;
      if ((v214 & 1) == 0)
      {
        v25 = sub_100197F9C(v25);
        *v276 = v25;
      }
      v215 = *(_QWORD *)(v25 + 16);
      if (v26 >= v215)
        goto LABEL_231;
      a2 = (char *)(v215 - 1);
      v57 = *((_QWORD *)v278 + 9);
      v27 = v25 + ((v278[80] + 32) & ~(unint64_t)v278[80]) + v57 * v26;
      sub_1001B565C(v27, type metadata accessor for Metric);
      if ((uint64_t)&a2[-v26] < 0)
        goto LABEL_239;
      v216 = v27 + v57;
      if (v57 > 0 || v27 >= v216 + v57 * (_QWORD)&a2[-v26])
      {
        swift_arrayInitWithTakeFrontToBack(v27, v216);
      }
      else if (v57)
      {
        swift_arrayInitWithTakeBackToFront(v27, v216);
      }
      *(_QWORD *)(v25 + 16) = a2;
      *v276 = v25;
    }
  }
  swift_bridgeObjectRelease(v287);
  v217 = *v276;
  v218 = *(_QWORD *)(*v276 + 16);
  v219 = _swiftEmptyArrayStorage;
  if (v218)
  {
    v292 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v217);
    sub_100195AE0(0, v218, 0);
    v220 = v217 + ((v278[80] + 32) & ~(unint64_t)v278[80]);
    v221 = *((_QWORD *)v278 + 9);
    v219 = v292;
    do
    {
      v222 = (uint64_t)v272;
      sub_10017417C(v220, (uint64_t)v272, type metadata accessor for Metric);
      v223 = (uint64_t *)(v222 + v288[16]);
      v225 = *v223;
      v224 = v223[1];
      swift_bridgeObjectRetain(v224);
      sub_1001B565C(v222, type metadata accessor for Metric);
      if ((swift_isUniquelyReferenced_nonNull_native(v219) & 1) == 0)
      {
        sub_100195AE0(0, v219[2] + 1, 1);
        v219 = v292;
      }
      v227 = v219[2];
      v226 = v219[3];
      if (v227 >= v226 >> 1)
      {
        sub_100195AE0(v226 > 1, v227 + 1, 1);
        v219 = v292;
      }
      v219[2] = v227 + 1;
      v228 = &v219[2 * v227];
      v228[4] = v225;
      v228[5] = v224;
      v220 += v221;
      --v218;
    }
    while (v218);
    swift_bridgeObjectRelease(v217);
  }
  v229 = sub_10016A160((uint64_t)v219);
  swift_bridgeObjectRelease(v219);
  v230 = sub_1001ACF14(v229);
  swift_bridgeObjectRelease(v229);
  v231 = *(_QWORD *)(v230 + 16);
  v232 = sub_100146438(&qword_1002B5660);
  v233 = swift_allocObject(v232, 64, 7);
  *(_OWORD *)(v233 + 16) = xmmword_1002402A0;
  *(_QWORD *)(v233 + 56) = &type metadata for Int;
  *(_QWORD *)(v233 + 32) = v231;
  print(_:separator:terminator:)(v233, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease(v233);
  v234 = *(_QWORD *)(v230 + 16);
  v288 = (int *)v230;
  if (v234)
  {
    v235 = (uint64_t *)(v230 + 40);
    v236 = v271;
    v237 = (uint64_t)v258;
    v238 = v279;
    do
    {
      v289 = v234;
      v239 = *(v235 - 1);
      v240 = *v235;
      v241 = *v276;
      swift_bridgeObjectRetain_n(*v235, 2);
      v242 = swift_bridgeObjectRetain(v241);
      v243 = sub_1001B5424(v242, v239, v240);
      swift_bridgeObjectRelease(v241);
      v244 = swift_bridgeObjectRelease(v240);
      UUID.init()(v244);
      v245 = v264;
      v246 = (uint64_t *)(v238 + *(int *)(v264 + 20));
      *v246 = v239;
      v246[1] = v240;
      *(_QWORD *)(v238 + *(int *)(v245 + 24)) = v243;
      sub_10017417C(v238, v237, type metadata accessor for MetricSectional);
      v247 = *(_QWORD *)(v236 + 24);
      v248 = swift_bridgeObjectRetain(v247);
      if ((swift_isUniquelyReferenced_nonNull_native(v248) & 1) == 0)
        v247 = sub_1001C7914(0, *(_QWORD *)(v247 + 16) + 1, 1, v247);
      v250 = *(_QWORD *)(v247 + 16);
      v249 = *(_QWORD *)(v247 + 24);
      v237 = (uint64_t)v258;
      if (v250 >= v249 >> 1)
        v247 = sub_1001C7914(v249 > 1, v250 + 1, 1, v247);
      v235 += 2;
      *(_QWORD *)(v247 + 16) = v250 + 1;
      sub_1001B5618(v237, v247+ ((*(unsigned __int8 *)(v263 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v263 + 80))+ *(_QWORD *)(v263 + 72) * v250, type metadata accessor for MetricSectional);
      v236 = v271;
      v251 = ObservableObject<>.objectWillChange.getter(v281, v280);
      ObservableObjectPublisher.send()();
      swift_release(v251);
      v252 = *(_QWORD *)(v236 + 24);
      *(_QWORD *)(v236 + 24) = v247;
      swift_bridgeObjectRelease(v252);
      v238 = v279;
      sub_1001B565C(v279, type metadata accessor for MetricSectional);
      v234 = v289 - 1;
    }
    while (v289 != 1);
  }
  else
  {
    v236 = v271;
  }
  swift_bridgeObjectRelease(v288);
  v292 = *(_QWORD **)(v236 + 24);
  swift_bridgeObjectRetain(v292);
  sub_1001B03FC((uint64_t *)&v292, type metadata accessor for MetricSectional, (uint64_t (*)(uint64_t))sub_100197F88, sub_1001B2B98);
  v253 = v292;
  v254 = ObservableObject<>.objectWillChange.getter(v281, v280);
  ObservableObjectPublisher.send()();
  swift_release(v254);
  v131 = *(_QWORD *)(v236 + 24);
  *(_QWORD *)(v236 + 24) = v253;
  return swift_bridgeObjectRelease(v131);
}

uint64_t sub_1001B03FC(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t), uint64_t (*a4)(_QWORD *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v7 = *(_QWORD *)(a2(0) - 8);
  v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v8 = a3(v8);
  v9 = *(_QWORD *)(v8 + 16);
  v11[0] = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v11[1] = v9;
  result = a4(v11);
  *a1 = v8;
  return result;
}

void sub_1001B0490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  Class isa;
  _QWORD *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  void (*v81)(char *, uint64_t);
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  id v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  dispatch_group_t v93;
  _QWORD *v94;
  void **aBlock;
  uint64_t v96;
  uint64_t (*v97)();
  void *v98;
  uint64_t (*v99)();
  _QWORD *v100;

  v78 = a5;
  v90 = a4;
  v77 = a3;
  v76 = a2;
  v75 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v93 = *(dispatch_group_t *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v87 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = swift_allocObject(&unk_100265D48, 24, 7);
  *(_QWORD *)(v92 + 16) = _swiftEmptyArrayStorage;
  v74 = swift_allocObject(&unk_100265D70, 24, 7);
  *(_QWORD *)(v74 + 16) = _swiftEmptyArrayStorage;
  v15 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.background(_:), v11);
  v79 = v15;
  v16 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v17 = v91;
  v99 = sub_1001B52DC;
  v100 = v91;
  aBlock = _NSConcreteStackBlock;
  v96 = 1107296256;
  v97 = sub_1001BE428;
  v98 = &unk_100265D88;
  v18 = _Block_copy(&aBlock);
  v19 = v17;
  v20 = swift_retain(v17);
  static DispatchQoS.unspecified.getter(v20);
  v94 = _swiftEmptyArrayStorage;
  v21 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v23 = sub_1001924F4();
  v83 = v22;
  v80 = v23;
  v84 = v21;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v94, v22, v23, v5, v21);
  v85 = v16;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v18);
  _Block_release(v18);
  isa = v93[1].isa;
  v88 = v7;
  v89 = v5;
  v25 = v19;
  v82 = (void (*)(char *, uint64_t))isa;
  ((void (*)(char *, uint64_t))isa)(v7, v5);
  v26 = *(void (**)(char *, uint64_t))(v87 + 8);
  v86 = v10;
  v87 = v8;
  v27 = v92;
  v81 = v26;
  v26(v10, v8);
  swift_release(v100);
  v93 = (dispatch_group_t)v19[8];
  dispatch_group_enter(v93);
  v28 = swift_allocObject(&unk_100265DC0, 24, 7);
  swift_weakInit(v28 + 16, v19);
  v29 = swift_allocObject(&unk_100265DE8, 32, 7);
  *(_QWORD *)(v29 + 16) = v28;
  *(_QWORD *)(v29 + 24) = v27;
  v30 = (void *)v19[5];
  v31 = swift_allocObject(&unk_100265E10, 32, 7);
  *(_QWORD *)(v31 + 16) = sub_1001B5334;
  *(_QWORD *)(v31 + 24) = v29;
  swift_retain(v28);
  swift_retain(v27);
  v32 = v30;
  v33 = swift_retain(v29);
  v37 = sub_1001BC480(v33, v34, v35, v36);
  v38 = swift_allocObject(&unk_100265E38, 32, 7);
  *(_QWORD *)(v38 + 16) = sub_1001B5360;
  *(_QWORD *)(v38 + 24) = v31;
  swift_retain(v31);
  v39 = v75;
  v40 = v76;
  v41 = v77;
  sub_1001BF108(v75, v76, v77, v90, v78, 0, 0xE000000000000000, (uint64_t)sub_10014C774, v38);
  swift_release(v28);
  swift_release(v29);

  swift_release(v31);
  v42 = v37;
  v43 = v40;
  swift_release(v42);
  v44 = v41;
  swift_release(v38);
  dispatch_group_enter(v93);
  v45 = (char *)v25[5];
  v46 = swift_allocObject(&unk_100265DC0, 24, 7);
  swift_weakInit(v46 + 16, v25);
  v47 = (_QWORD *)swift_allocObject(&unk_100265E60, 64, 7);
  v47[2] = v46;
  v47[3] = v39;
  v47[4] = v43;
  v47[5] = v41;
  v48 = v90;
  v47[6] = v90;
  v49 = v74;
  v47[7] = v74;
  v50 = *(_QWORD *)&v45[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_hardwareManager];
  if ((*(_BYTE *)(v50 + 152) & 1) != 0)
  {
    swift_retain_n(v46, 2);
    swift_bridgeObjectRetain_n(v43, 2);
    swift_bridgeObjectRetain_n(v48, 2);
    swift_retain_n(v49, 2);
    v51 = v45;
    sub_1001B5128(0, v46, v39, v43, v44, v48, v49);
    swift_release(v46);
    v52 = v47;
  }
  else
  {
    v53 = *(_DWORD *)(v50 + 148);
    swift_retain_n(v46, 2);
    swift_bridgeObjectRetain_n(v43, 2);
    swift_bridgeObjectRetain_n(v48, 2);
    swift_retain_n(v49, 2);
    v54 = v45;
    v55 = v43;
    v59 = sub_1001BC480((uint64_t)v54, v56, v57, v58);
    v60 = swift_allocObject(&unk_100265ED8, 32, 7);
    *(_QWORD *)(v60 + 16) = sub_1001B53C4;
    *(_QWORD *)(v60 + 24) = v47;
    swift_retain(v47);
    sub_1001BF39C(v53, (uint64_t)sub_10014C774, v60);
    swift_release(v46);
    swift_release(v47);
    v61 = v59;
    v43 = v55;
    swift_release(v61);
    v52 = (_QWORD *)v60;
  }
  swift_release(v52);

  swift_release(v46);
  swift_release(v49);
  swift_bridgeObjectRelease(v48);
  v62 = swift_bridgeObjectRelease(v43);
  v63 = (void *)static OS_dispatch_queue.main.getter(v62);
  v64 = swift_allocObject(&unk_100265DC0, 24, 7);
  swift_weakInit(v64 + 16, v91);
  v65 = (_QWORD *)swift_allocObject(&unk_100265E88, 40, 7);
  v66 = v92;
  v65[2] = v49;
  v65[3] = v66;
  v65[4] = v64;
  v99 = sub_1001B5408;
  v100 = v65;
  aBlock = _NSConcreteStackBlock;
  v96 = 1107296256;
  v97 = sub_1001BE428;
  v98 = &unk_100265EA0;
  v67 = _Block_copy(&aBlock);
  swift_retain(v66);
  swift_retain(v49);
  v68 = swift_retain(v64);
  v69 = v86;
  static DispatchQoS.unspecified.getter(v68);
  v94 = _swiftEmptyArrayStorage;
  v70 = v49;
  v72 = v88;
  v71 = v89;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v94, v83, v80, v89, v84);
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v69, v72, v63, v67);
  _Block_release(v67);

  v82(v72, v71);
  v81(v69, v87);
  v73 = v100;
  swift_release(v66);
  swift_release(v70);
  swift_release(v64);
  swift_release(v73);
}

uint64_t sub_1001B0BEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  void (*v17)(char *, uint64_t);
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v5 - 8);
  v27 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v25 - v13;
  v15 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  v16 = (void *)static OS_dispatch_queue.main.getter(v15);
  static DispatchTime.now()();
  + infix(_:_:)(v12, 15.0);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v12, v8);
  aBlock[4] = sub_1001B541C;
  v30 = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_100265F18;
  v18 = _Block_copy(aBlock);
  v19 = v30;
  swift_retain(a1);
  swift_release(v19);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  v21 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v23 = sub_1001924F4();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v2, v21);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v14, v7, v4, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v27);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, v8);
}

void sub_1001B0E58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for MetricDetailViewModel(0);
  v3 = sub_100146004(&qword_1002B7138, type metadata accessor for MetricDetailViewModel, (uint64_t)&unk_100243368);
  v4 = ObservableObject<>.objectWillChange.getter(v2, v3);
  ObservableObjectPublisher.send()();
  swift_release(v4);
  *(_BYTE *)(a1 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_shouldShowSPinner) = 0;
}

void sub_1001B0EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  char v28;
  _QWORD v29[3];
  _BYTE v30[8];
  _QWORD v31[3];
  _BYTE v32[24];

  v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v32, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (Strong)
  {
    v9 = Strong;
    v10 = type metadata accessor for MetricDetailViewModel(0);
    v11 = sub_100146004(&qword_1002B7138, type metadata accessor for MetricDetailViewModel, (uint64_t)&unk_100243368);
    v12 = ObservableObject<>.objectWillChange.getter(v10, v11);
    ObservableObjectPublisher.send()();
    swift_release(v12);
    *(_BYTE *)(v9 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_shouldShowSPinner) = 0;
    swift_release(v9);
  }
  if (a1)
  {
    swift_beginAccess(a4 + 16, v31, 1, 0);
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = a1;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRelease(v13);
    v14 = &v28;
  }
  else
  {
    if (qword_1002B39E8 != -1)
      swift_once(&qword_1002B39E8, sub_100174680);
    v15 = qword_1002BEFD8;
    v16 = static os_log_type_t.error.getter();
    v17 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_1002402A0;
    if (a2)
    {
      swift_getErrorValue(a2, v30, v29);
      v19 = Error.localizedDescription.getter(v29[1], v29[2]);
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    v31[0] = v19;
    v31[1] = v20;
    v21 = sub_100146438((uint64_t *)&unk_1002B5640);
    v22 = String.init<A>(describing:)(v31, v21);
    v24 = v23;
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    *(_QWORD *)(v18 + 64) = sub_10016B1E0();
    *(_QWORD *)(v18 + 32) = v22;
    *(_QWORD *)(v18 + 40) = v24;
    os_log(_:dso:log:type:_:)("metricDetailsViewModel error - processNewMetric: %{public}@", 59, 2, &_mh_execute_header, v15, v16, v18);
    swift_bridgeObjectRelease(v18);
    v14 = (char *)v31;
  }
  swift_beginAccess(v7, v14, 0, 0);
  v25 = swift_weakLoadStrong(v7);
  v26 = v25;
  if (v25)
  {
    v27 = *(id *)(v25 + 64);
    swift_release(v26);
    dispatch_group_leave(v27);

  }
}

uint64_t sub_1001B1100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id *v13;
  Swift::String *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  Swift::String v19;
  id v20;
  id v21;
  Swift::String_optional v22;
  Swift::String v23;
  id v24;
  Swift::String v25;
  id v26;
  Swift::String_optional v27;
  Swift::String v28;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t Strong;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  char *v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  void *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  _QWORD aBlock[5];
  uint64_t v96;
  char v97[24];
  char v98[24];
  char v99[16];
  char v100[8];
  char v101[8];

  v81 = a3;
  v89 = type metadata accessor for DispatchWorkItemFlags(0);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for DispatchQoS(0);
  v85 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v84 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for DispatchTime(0);
  v80 = *(_QWORD *)(v83 - 8);
  v7 = __chkstk_darwin(v83);
  v79 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v82 = (char *)&v77 - v9;
  swift_beginAccess(a1 + 16, v101, 0, 0);
  v10 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(v10);
  v11 = (_QWORD *)sub_1001BE544((uint64_t)_swiftEmptyArrayStorage);
  v12 = *(_QWORD *)(v10 + 16);
  if (v12)
  {
    v78 = a2;
    v90 = (id)objc_opt_self(NSBundle);
    swift_bridgeObjectRetain(v10);
    v77 = v10;
    v13 = (id *)(v10 + 56);
    while (1)
    {
      v94 = v12;
      v15 = *(v13 - 3);
      v16 = *(v13 - 2);
      v17 = *(v13 - 1);
      v18 = *v13;
      v93 = v15;
      v92 = v16;
      v91 = v17;
      v19 = String.init(_:)(v18);
      v20 = v90;
      v21 = objc_msgSend(v90, "mainBundle");
      v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v22.value._object = (void *)0xEB00000000656C62;
      v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v22, (NSBundle)v21, v19, v19);
      swift_bridgeObjectRelease(v19._object);

      v24 = v18;
      v25 = String.init(_:)(v24);
      v26 = objc_msgSend(v20, "mainBundle");
      v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v27.value._object = (void *)0xEB00000000656C62;
      v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v25, v27, (NSBundle)v26, v25, v25);
      swift_bridgeObjectRelease(v25._object);

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
      aBlock[0] = v11;
      v31 = sub_1001C7C98(v23._countAndFlagsBits, (uint64_t)v23._object);
      v32 = v11[2];
      v33 = (v30 & 1) == 0;
      v34 = v32 + v33;
      if (__OFADD__(v32, v33))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        return result;
      }
      v35 = v30;
      if (v11[3] >= v34)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v11 = (_QWORD *)aBlock[0];
          if ((v30 & 1) == 0)
            goto LABEL_12;
        }
        else
        {
          sub_1001CAACC();
          v11 = (_QWORD *)aBlock[0];
          if ((v35 & 1) == 0)
            goto LABEL_12;
        }
      }
      else
      {
        sub_1001C8C88(v34, isUniquelyReferenced_nonNull_native);
        v36 = sub_1001C7C98(v23._countAndFlagsBits, (uint64_t)v23._object);
        if ((v35 & 1) != (v37 & 1))
          goto LABEL_35;
        v31 = v36;
        v11 = (_QWORD *)aBlock[0];
        if ((v35 & 1) == 0)
        {
LABEL_12:
          v11[(v31 >> 6) + 8] |= 1 << v31;
          *(Swift::String *)(v11[6] + 16 * v31) = v23;
          *(Swift::String *)(v11[7] + 16 * v31) = v28;
          v38 = v11[2];
          v39 = __OFADD__(v38, 1);
          v40 = v38 + 1;
          if (v39)
            goto LABEL_33;
          v11[2] = v40;
          swift_bridgeObjectRetain(v23._object);
          goto LABEL_4;
        }
      }
      v14 = (Swift::String *)(v11[7] + 16 * v31);
      swift_bridgeObjectRelease(v14->_object);
      *v14 = v28;
LABEL_4:

      swift_bridgeObjectRelease(v23._object);
      swift_bridgeObjectRelease(0x8000000000000000);
      v13 += 5;
      v12 = v94 - 1;
      if (v94 == 1)
      {
        v10 = v77;
        swift_bridgeObjectRelease(v77);
        a2 = v78;
        break;
      }
    }
  }
  v41 = (unint64_t *)(a2 + 16);
  swift_bridgeObjectRelease(v10);
  swift_beginAccess(a2 + 16, v100, 0, 0);
  v42 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  if (v42)
  {
    swift_beginAccess(a2 + 16, v99, 0, 0);
    v43 = 0;
    do
    {
      v44 = *v41;
      if (v43 >= *(_QWORD *)(*v41 + 16))
        goto LABEL_32;
      v45 = type metadata accessor for Metric(0);
      v46 = *(_QWORD *)(v45 - 8);
      v47 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
      v48 = *(_QWORD *)(v46 + 72) * v43;
      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v44 + v47 + v48 + *(int *)(v45 + 28)));
      v51 = v50;
      if (v11[2])
      {
        sub_1001C7C98(v49, v50);
        v53 = v52;
        swift_bridgeObjectRelease(v51);
        if ((v53 & 1) != 0)
        {
          swift_beginAccess(v41, aBlock, 33, 0);
          v54 = *v41;
          v55 = swift_isUniquelyReferenced_nonNull_native(*v41);
          *v41 = v54;
          if ((v55 & 1) == 0)
          {
            v54 = sub_100197F9C(v54);
            *v41 = v54;
          }
          if (v43 >= *(_QWORD *)(v54 + 16))
            goto LABEL_34;
          *(_BYTE *)(v54 + v47 + v48 + *(int *)(v45 + 60)) = 1;
          swift_endAccess(aBlock);
        }
      }
      else
      {
        swift_bridgeObjectRelease(v50);
      }
    }
    while (v42 != ++v43);
  }
  swift_bridgeObjectRelease(v11);
  v56 = v81;
  swift_beginAccess(v81 + 16, v98, 0, 0);
  Strong = swift_weakLoadStrong(v56 + 16);
  if (Strong)
  {
    v58 = Strong;
    swift_beginAccess(v41, v97, 0, 0);
    v59 = *v41;
    v60 = swift_bridgeObjectRetain(v59);
    sub_1001AD7C0(v60);
    swift_release(v58);
    swift_bridgeObjectRelease(v59);
  }
  v61 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  v62 = (void *)static OS_dispatch_queue.main.getter(v61);
  v63 = v79;
  static DispatchTime.now()();
  v64 = v82;
  + infix(_:_:)(v63, 0.3);
  v65 = *(void (**)(char *, uint64_t))(v80 + 8);
  v66 = v83;
  v65(v63, v83);
  aBlock[4] = sub_1001B5414;
  v96 = v56;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_100265EF0;
  v67 = _Block_copy(aBlock);
  v68 = v96;
  swift_retain(v56);
  swift_release(v68);
  v69 = v84;
  static DispatchQoS.unspecified.getter(v70);
  aBlock[0] = _swiftEmptyArrayStorage;
  v71 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v72 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v73 = sub_1001924F4();
  v74 = v87;
  v75 = v89;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v72, v73, v89, v71);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v64, v69, v74, v67);
  _Block_release(v67);

  (*(void (**)(char *, uint64_t))(v88 + 8))(v74, v75);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v69, v86);
  return ((uint64_t (*)(char *, uint64_t))v65)(v64, v66);
}

double sub_1001B18E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = type metadata accessor for MetricDetailViewModel(0);
    v5 = sub_100146004(&qword_1002B7138, type metadata accessor for MetricDetailViewModel, (uint64_t)&unk_100243368);
    v6 = ObservableObject<>.objectWillChange.getter(v4, v5);
    ObservableObjectPublisher.send()();
    swift_release(v6);
    *(_BYTE *)(v3 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_shouldShowSPinner) = 0;
    swift_release(v3);
  }
  swift_beginAccess(v1, &v13, 0, 0);
  v7 = swift_weakLoadStrong(v1);
  if (v7)
  {
    v9 = v7;
    v10 = type metadata accessor for MetricDetailViewModel(0);
    v11 = sub_100146004(&qword_1002B7138, type metadata accessor for MetricDetailViewModel, (uint64_t)&unk_100243368);
    v12 = ObservableObject<>.objectWillChange.getter(v10, v11);
    ObservableObjectPublisher.send()();
    swift_release(v12);
    *(_BYTE *)(v9 + 33) = 0;
    *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001B1A08(unint64_t a1, int a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  void (*v20)(_BYTE *, uint64_t, uint64_t, int *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  void *v32;
  void *v33;
  void *v34;
  int v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v50[12];
  int v51;
  _BYTE *v52;
  id v53[4];
  int v54;

  v51 = a2;
  v8 = (int *)type metadata accessor for Metric(0);
  v9 = *((_QWORD *)v8 - 1);
  __chkstk_darwin(v8);
  v52 = &v50[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100146438((uint64_t *)&unk_1002B4B20);
  v12 = __chkstk_darwin(v11);
  v14 = &v50[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v12);
  v17 = &v50[-v16];
  __chkstk_darwin(v15);
  v19 = &v50[-v18];
  v20 = *(void (**)(_BYTE *, uint64_t, uint64_t, int *))(v9 + 56);
  v20(&v50[-v18], 1, 1, v8);
  if ((a4 & 1) != 0)
    goto LABEL_7;
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v21 = v4[3];
  if (*(_QWORD *)(v21 + 16) <= a3)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v22 = type metadata accessor for MetricSectional(0);
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v23 = *(_QWORD *)(v21
                  + ((*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v22 - 8) + 80))
                  + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * a3
                  + *(int *)(v22 + 24));
  if (*(_QWORD *)(v23 + 16) > a1)
    goto LABEL_9;
  __break(1u);
LABEL_7:
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v23 = v4[2];
  if (*(_QWORD *)(v23 + 16) <= a1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_9:
  sub_10017417C(v23+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * a1, (uint64_t)v17, type metadata accessor for Metric);
  sub_10014BDE0((uint64_t)v19, (uint64_t *)&unk_1002B4B20);
  v20(v17, 0, 1, v8);
  sub_10014BC64((uint64_t)v17, (uint64_t)v19, (uint64_t *)&unk_1002B4B20);
  sub_100160534((uint64_t)v19, (uint64_t)v14);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v9 + 48))(v14, 1, v8) == 1)
  {
    v24 = sub_10014BDE0((uint64_t)v14, (uint64_t *)&unk_1002B4B20);
    if (qword_1002B3A20 == -1)
    {
LABEL_11:
      v28 = qword_1002BF010;
      v29 = static os_log_type_t.default.getter(v24, v25, v26, v27);
      os_log(_:dso:log:type:_:)("MetricDetailViewModel - updateDashboardItem - unable to unwrap metric", 69, 2, &_mh_execute_header, v28, v29, _swiftEmptyArrayStorage);
      return sub_10014BDE0((uint64_t)v19, (uint64_t *)&unk_1002B4B20);
    }
LABEL_22:
    v24 = swift_once(&qword_1002B3A20, sub_10017482C);
    goto LABEL_11;
  }
  v30 = (uint64_t)v14;
  v31 = v52;
  sub_1001B5618(v30, (uint64_t)v52, type metadata accessor for Metric);
  v32 = *(void **)&v31[v8[12]];
  v33 = *(void **)&v31[v8[6]];
  v34 = *(void **)&v31[v8[8]];
  v35 = *(_DWORD *)&v31[v8[13]];
  v53[0] = *(id *)&v31[v8[5]];
  v53[1] = v32;
  v53[2] = v33;
  v53[3] = v34;
  v54 = v35;
  v36 = (void *)v4[5];
  v37 = v53[0];
  v38 = v32;
  v39 = v33;
  v40 = v34;
  v41 = v36;
  v45 = sub_1001BC480((uint64_t)v41, v42, v43, v44);
  if ((v51 & 1) != 0)
  {
    v46 = sub_1001CB5D0(v37, v40);
    v48 = v47;
    sub_1001BF840(v46, v47, (uint64_t)sub_1001BDBD4, 0);

    swift_release(v45);
    swift_bridgeObjectRelease(v48);
  }
  else
  {
    sub_1001BF5E4((uint64_t)v53, (uint64_t)sub_1001BDB80, 0);

    swift_release(v45);
  }
  sub_1001B565C((uint64_t)v52, type metadata accessor for Metric);
  return sub_10014BDE0((uint64_t)v19, (uint64_t *)&unk_1002B4B20);
}

uint64_t sub_1001B1E60(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = &unk_1002432D8;
  v4[3] = &unk_1002432F0;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = &unk_100243308;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = &unk_100243308;
  v4[8] = &unk_100243308;
  v4[9] = (char *)&value witness table for Builtin.Int32 + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(result - 8) + 64;
    v4[11] = &unk_1002432F0;
    v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
    return swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_1001B1F28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  v12 = (void *)static OS_dispatch_queue.main.getter(v11);
  v13 = swift_allocObject(&unk_100265CF8, 32, 7);
  *(_QWORD *)(v13 + 16) = v1;
  *(_QWORD *)(v13 + 24) = a1;
  aBlock[4] = sub_1001B2348;
  v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_100265D10;
  v14 = _Block_copy(aBlock);
  v15 = v24;
  swift_retain(v2);
  swift_release(v15);
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v19 = sub_1001924F4();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v4, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void *sub_1001B212C()
{
  return &protocol witness table for ObjectIdentifier;
}

void sub_1001B2138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_1002B3A78 != -1)
    swift_once(&qword_1002B3A78, sub_100183CA4);
  if (*(_BYTE *)(qword_1002BF068 + 145) == 1)
  {
    v4 = type metadata accessor for MetricDetailViewModel(0);
    v5 = sub_100146004(&qword_1002B7138, type metadata accessor for MetricDetailViewModel, (uint64_t)&unk_100243368);
    v6 = ObservableObject<>.objectWillChange.getter(v4, v5);
    ObservableObjectPublisher.send()();
    swift_release(v6);
    v7 = 1;
  }
  else if (*(uint64_t *)(qword_1002BF068 + 160) <= 0)
  {
    v11 = type metadata accessor for MetricDetailViewModel(0);
    v12 = sub_100146004(&qword_1002B7138, type metadata accessor for MetricDetailViewModel, (uint64_t)&unk_100243368);
    v13 = ObservableObject<>.objectWillChange.getter(v11, v12);
    ObservableObjectPublisher.send()();
    swift_release(v13);
    v7 = 2;
  }
  else
  {
    v8 = type metadata accessor for MetricDetailViewModel(0);
    v9 = sub_100146004(&qword_1002B7138, type metadata accessor for MetricDetailViewModel, (uint64_t)&unk_100243368);
    v10 = ObservableObject<>.objectWillChange.getter(v8, v9);
    ObservableObjectPublisher.send()();
    swift_release(v10);
    if (a2 >= 1)
    {
      *(_BYTE *)(a1 + 32) = 0;
      return;
    }
    v7 = 3;
  }
  *(_BYTE *)(a1 + 32) = v7;
}

uint64_t sub_1001B22A8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for MetricDetailViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001B22E4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for MetricDetailViewModel(0);
  result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001B2324()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001B2348()
{
  uint64_t v0;

  sub_1001B2138(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001B2350(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1001B2360(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

unsigned __int8 *sub_1001B2368(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B2460(a1, a2, a3);
}

unsigned __int8 *sub_1001B237C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_1001B26DC(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_1001B2460(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *sub_1001B2460(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1001B26DC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_1001B2758(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_1001B2758(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_1001B289C(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100190178(v12, 0);
      v5 = sub_1001B2988((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_1001B289C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1001901DC(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1001901DC(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_1001B2988(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1001901DC(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1001901DC(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

Swift::Int sub_1001B2B98(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  Swift::Int v26;
  unint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  Swift::Int v56;
  uint64_t v57;
  Swift::Int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  Swift::Int v63;
  uint64_t v64;
  Swift::Int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  Swift::Int v80;
  char *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  char v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  Swift::Int v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  Swift::Int v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  Swift::Int v145;
  Swift::Int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  Swift::Int v158;
  uint64_t v159;
  uint64_t *v160;

  v156 = type metadata accessor for MetricSectional(0);
  v151 = *(_QWORD *)(v156 - 8);
  v2 = __chkstk_darwin(v156);
  v147 = (uint64_t)&v139 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v157 = (uint64_t)&v139 - v5;
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v139 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v139 - v10;
  v12 = __chkstk_darwin(v9);
  v149 = (uint64_t)&v139 - v13;
  v14 = __chkstk_darwin(v12);
  v148 = (uint64_t)&v139 - v15;
  v16 = __chkstk_darwin(v14);
  v144 = (uint64_t)&v139 - v17;
  __chkstk_darwin(v16);
  v143 = (uint64_t)&v139 - v18;
  v160 = a1;
  v19 = a1[1];
  result = _minimumMergeRunLength(_:)(v19);
  if (result >= v19)
  {
    if (v19 < 0)
      goto LABEL_154;
    if (v19)
      return sub_1001B4040(0, v19, 1, v160);
    return result;
  }
  if (v19 >= 0)
    v21 = v19;
  else
    v21 = v19 + 1;
  if (v19 < -1)
    goto LABEL_162;
  v153 = v11;
  v154 = v8;
  v141 = result;
  if (v19 < 2)
  {
    v25 = (char *)_swiftEmptyArrayStorage;
    v150 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v151 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80));
    v140 = _swiftEmptyArrayStorage;
    if (v19 != 1)
    {
      v27 = _swiftEmptyArrayStorage[2];
LABEL_120:
      v124 = v25;
      if (v27 >= 2)
      {
        v131 = *v160;
        do
        {
          v132 = v27 - 2;
          if (v27 < 2)
            goto LABEL_149;
          if (!v131)
            goto LABEL_161;
          v133 = *(_QWORD *)&v124[16 * v132 + 32];
          v134 = *(_QWORD *)&v124[16 * v27 + 24];
          v135 = v152;
          sub_1001B44F0(v131 + *(_QWORD *)(v151 + 72) * v133, v131 + *(_QWORD *)(v151 + 72) * *(_QWORD *)&v124[16 * v27 + 16], v131 + *(_QWORD *)(v151 + 72) * v134, v150);
          v152 = v135;
          if (v135)
            break;
          if (v134 < v133)
            goto LABEL_150;
          if ((swift_isUniquelyReferenced_nonNull_native(v124) & 1) == 0)
            v124 = sub_100197EBC((uint64_t)v124);
          if (v132 >= *((_QWORD *)v124 + 2))
            goto LABEL_151;
          v136 = &v124[16 * v132 + 32];
          *(_QWORD *)v136 = v133;
          *((_QWORD *)v136 + 1) = v134;
          v137 = *((_QWORD *)v124 + 2);
          if (v27 > v137)
            goto LABEL_152;
          memmove(&v124[16 * v27 + 16], &v124[16 * v27 + 32], 16 * (v137 - v27));
          *((_QWORD *)v124 + 2) = v137 - 1;
          v27 = v137 - 1;
        }
        while (v137 > 2);
      }
LABEL_131:
      swift_bridgeObjectRelease(v124);
      v138 = v140;
      v140[2] = 0;
      return swift_bridgeObjectRelease(v138);
    }
  }
  else
  {
    v22 = v21 >> 1;
    v23 = static Array._allocateBufferUninitialized(minimumCapacity:)(v21 >> 1, v156);
    *(_QWORD *)(v23 + 16) = v22;
    v24 = *(unsigned __int8 *)(v151 + 80);
    v140 = (_QWORD *)v23;
    v150 = v23 + ((v24 + 32) & ~v24);
  }
  v26 = 0;
  v25 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v28 = v26;
    v29 = v26 + 1;
    if (v26 + 1 >= v19)
      break;
    v30 = *v160;
    v31 = *(_QWORD *)(v151 + 72);
    v32 = v143;
    sub_10017417C(*v160 + v31 * v29, v143, type metadata accessor for MetricSectional);
    v155 = v30;
    v159 = v31;
    v33 = v30 + v31 * v28;
    v34 = v144;
    sub_10017417C(v33, v144, type metadata accessor for MetricSectional);
    v35 = *(int *)(v156 + 20);
    v36 = *(_QWORD *)(v32 + v35);
    v37 = *(_QWORD *)(v32 + v35 + 8);
    v38 = (_QWORD *)(v34 + v35);
    v39 = v38[1];
    if (*v38 == v36 && v39 == v37)
      LODWORD(v158) = 0;
    else
      LODWORD(v158) = _stringCompareWithSmolCheck(_:_:expecting:)(*v38, v39, v36, v37, 1);
    sub_1001B565C(v144, type metadata accessor for MetricSectional);
    sub_1001B565C(v143, type metadata accessor for MetricSectional);
    v26 = v28 + 2;
    if (v28 + 2 < v19)
    {
      v41 = v28;
      v142 = v25;
      v42 = v159 * v29;
      v43 = v155;
      v44 = v159 * v26;
      while (1)
      {
        v45 = v148;
        sub_10017417C(v43 + v44, v148, type metadata accessor for MetricSectional);
        v46 = v149;
        sub_10017417C(v43 + v42, v149, type metadata accessor for MetricSectional);
        v47 = *(int *)(v156 + 20);
        v48 = *(_QWORD *)(v45 + v47);
        v49 = *(_QWORD *)(v45 + v47 + 8);
        v50 = (_QWORD *)(v46 + v47);
        v51 = v50[1];
        v52 = *v50 == v48 && v51 == v49;
        v53 = v52 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)(*v50, v51, v48, v49, 1);
        sub_1001B565C(v149, type metadata accessor for MetricSectional);
        sub_1001B565C(v148, type metadata accessor for MetricSectional);
        if (((v158 ^ v53) & 1) != 0)
          break;
        v43 += v159;
        if (v19 == ++v26)
        {
          v26 = v19;
          break;
        }
      }
      v25 = v142;
      v28 = v41;
    }
    if ((v158 & 1) == 0)
      goto LABEL_48;
    if (v26 < v28)
      goto LABEL_155;
    if (v28 >= v26)
      goto LABEL_48;
    v158 = v19;
    v142 = v25;
    v54 = 0;
    v55 = v159 * (v26 - 1);
    v56 = v28;
    v57 = v26 * v159;
    v58 = v56;
    v146 = v56;
    v59 = v56 * v159;
    v60 = (uint64_t)v154;
    do
    {
      if (v58 != v26 + v54 - 1)
      {
        v61 = v155;
        if (!v155)
          goto LABEL_160;
        v62 = v155 + v59;
        sub_1001B5618(v155 + v59, v147, type metadata accessor for MetricSectional);
        if (v59 < v55 || v62 >= v61 + v57)
        {
          swift_arrayInitWithTakeFrontToBack(v61 + v59, v61 + v55);
        }
        else if (v59 != v55)
        {
          swift_arrayInitWithTakeBackToFront(v61 + v59, v61 + v55);
        }
        sub_1001B5618(v147, v61 + v55, type metadata accessor for MetricSectional);
        v60 = (uint64_t)v154;
      }
      ++v58;
      --v54;
      v55 -= v159;
      v57 -= v159;
      v59 += v159;
    }
    while (v58 < v26 + v54);
    v25 = v142;
    v19 = v158;
    v28 = v146;
    if (v26 < v158)
      goto LABEL_49;
LABEL_72:
    if (v26 < v28)
      goto LABEL_148;
    if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
      v25 = sub_100197984(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
    v79 = *((_QWORD *)v25 + 2);
    v78 = *((_QWORD *)v25 + 3);
    v27 = v79 + 1;
    v80 = v28;
    if (v79 >= v78 >> 1)
      v25 = sub_100197984((char *)(v78 > 1), v79 + 1, 1, v25);
    *((_QWORD *)v25 + 2) = v27;
    v81 = v25 + 32;
    v82 = &v25[16 * v79 + 32];
    *(_QWORD *)v82 = v80;
    *((_QWORD *)v82 + 1) = v26;
    if (v79)
    {
      while (1)
      {
        v83 = v27 - 1;
        if (v27 >= 4)
        {
          v88 = &v81[16 * v27];
          v89 = *((_QWORD *)v88 - 8);
          v90 = *((_QWORD *)v88 - 7);
          v94 = __OFSUB__(v90, v89);
          v91 = v90 - v89;
          if (v94)
            goto LABEL_137;
          v93 = *((_QWORD *)v88 - 6);
          v92 = *((_QWORD *)v88 - 5);
          v94 = __OFSUB__(v92, v93);
          v86 = v92 - v93;
          v87 = v94;
          if (v94)
            goto LABEL_138;
          v95 = v27 - 2;
          v96 = &v81[16 * v27 - 32];
          v98 = *(_QWORD *)v96;
          v97 = *((_QWORD *)v96 + 1);
          v94 = __OFSUB__(v97, v98);
          v99 = v97 - v98;
          if (v94)
            goto LABEL_140;
          v94 = __OFADD__(v86, v99);
          v100 = v86 + v99;
          if (v94)
            goto LABEL_143;
          if (v100 >= v91)
          {
            v118 = &v81[16 * v83];
            v120 = *(_QWORD *)v118;
            v119 = *((_QWORD *)v118 + 1);
            v94 = __OFSUB__(v119, v120);
            v121 = v119 - v120;
            if (v94)
              goto LABEL_147;
            v111 = v86 < v121;
            goto LABEL_109;
          }
        }
        else
        {
          if (v27 != 3)
          {
            v112 = *((_QWORD *)v25 + 4);
            v113 = *((_QWORD *)v25 + 5);
            v94 = __OFSUB__(v113, v112);
            v105 = v113 - v112;
            v106 = v94;
            goto LABEL_103;
          }
          v85 = *((_QWORD *)v25 + 4);
          v84 = *((_QWORD *)v25 + 5);
          v94 = __OFSUB__(v84, v85);
          v86 = v84 - v85;
          v87 = v94;
        }
        if ((v87 & 1) != 0)
          goto LABEL_139;
        v95 = v27 - 2;
        v101 = &v81[16 * v27 - 32];
        v103 = *(_QWORD *)v101;
        v102 = *((_QWORD *)v101 + 1);
        v104 = __OFSUB__(v102, v103);
        v105 = v102 - v103;
        v106 = v104;
        if (v104)
          goto LABEL_142;
        v107 = &v81[16 * v83];
        v109 = *(_QWORD *)v107;
        v108 = *((_QWORD *)v107 + 1);
        v94 = __OFSUB__(v108, v109);
        v110 = v108 - v109;
        if (v94)
          goto LABEL_145;
        if (__OFADD__(v105, v110))
          goto LABEL_146;
        if (v105 + v110 >= v86)
        {
          v111 = v86 < v110;
LABEL_109:
          if (v111)
            v83 = v95;
          goto LABEL_111;
        }
LABEL_103:
        if ((v106 & 1) != 0)
          goto LABEL_141;
        v114 = &v81[16 * v83];
        v116 = *(_QWORD *)v114;
        v115 = *((_QWORD *)v114 + 1);
        v94 = __OFSUB__(v115, v116);
        v117 = v115 - v116;
        if (v94)
          goto LABEL_144;
        if (v117 < v105)
          goto LABEL_14;
LABEL_111:
        v122 = v83 - 1;
        if (v83 - 1 >= v27)
        {
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
          goto LABEL_157;
        }
        if (!*v160)
          goto LABEL_159;
        v123 = v26;
        v124 = v25;
        v125 = &v81[16 * v122];
        v126 = *(_QWORD *)v125;
        v127 = &v81[16 * v83];
        v128 = *((_QWORD *)v127 + 1);
        v129 = v152;
        sub_1001B44F0(*v160 + *(_QWORD *)(v151 + 72) * *(_QWORD *)v125, *v160 + *(_QWORD *)(v151 + 72) * *(_QWORD *)v127, *v160 + *(_QWORD *)(v151 + 72) * v128, v150);
        v152 = v129;
        if (v129)
          goto LABEL_131;
        if (v128 < v126)
          goto LABEL_134;
        if (v83 > *((_QWORD *)v124 + 2))
          goto LABEL_135;
        *(_QWORD *)v125 = v126;
        *(_QWORD *)&v81[16 * v122 + 8] = v128;
        v130 = *((_QWORD *)v124 + 2);
        if (v83 >= v130)
          goto LABEL_136;
        v25 = v124;
        v27 = v130 - 1;
        memmove(&v81[16 * v83], v127 + 16, 16 * (v130 - 1 - v83));
        *((_QWORD *)v124 + 2) = v130 - 1;
        v26 = v123;
        if (v130 <= 2)
          goto LABEL_14;
      }
    }
    v27 = 1;
LABEL_14:
    v19 = v160[1];
    if (v26 >= v19)
      goto LABEL_120;
  }
  ++v26;
LABEL_48:
  v60 = (uint64_t)v154;
  if (v26 >= v19)
    goto LABEL_72;
LABEL_49:
  if (__OFSUB__(v26, v28))
    goto LABEL_153;
  if (v26 - v28 >= v141)
    goto LABEL_72;
  if (__OFADD__(v28, v141))
    goto LABEL_156;
  if (v28 + v141 >= v19)
    v63 = v19;
  else
    v63 = v28 + v141;
  if (v63 >= v28)
  {
    if (v26 != v63)
    {
      v142 = v25;
      v155 = *(_QWORD *)(v151 + 72);
      v158 = v26 * v155;
      v159 = v155 * (v26 - 1);
      v145 = v63;
      v146 = v28;
      do
      {
        v64 = 0;
        v65 = v28;
        while (1)
        {
          v66 = *v160;
          v67 = (uint64_t)v153;
          sub_10017417C(v158 + v64 + *v160, (uint64_t)v153, type metadata accessor for MetricSectional);
          sub_10017417C(v159 + v64 + v66, v60, type metadata accessor for MetricSectional);
          v68 = *(int *)(v156 + 20);
          v69 = *(_QWORD *)(v67 + v68);
          v70 = *(_QWORD *)(v67 + v68 + 8);
          v71 = (_QWORD *)(v60 + v68);
          v72 = v71[1];
          if (*v71 == v69 && v72 == v70)
            break;
          v74 = _stringCompareWithSmolCheck(_:_:expecting:)(*v71, v72, v69, v70, 1);
          sub_1001B565C(v60, type metadata accessor for MetricSectional);
          sub_1001B565C(v67, type metadata accessor for MetricSectional);
          if ((v74 & 1) == 0)
            goto LABEL_59;
          v75 = *v160;
          if (!*v160)
            goto LABEL_158;
          v76 = v75 + v158 + v64;
          v77 = v75 + v159 + v64;
          sub_1001B5618(v76, v157, type metadata accessor for MetricSectional);
          swift_arrayInitWithTakeFrontToBack(v76, v77);
          sub_1001B5618(v157, v77, type metadata accessor for MetricSectional);
          v60 = (uint64_t)v154;
          v64 -= v155;
          if (v26 == ++v65)
            goto LABEL_59;
        }
        sub_1001B565C(v60, type metadata accessor for MetricSectional);
        sub_1001B565C(v67, type metadata accessor for MetricSectional);
LABEL_59:
        ++v26;
        v159 += v155;
        v158 += v155;
        v28 = v146;
      }
      while (v26 != v145);
      v26 = v145;
      v25 = v142;
    }
    goto LABEL_72;
  }
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_1001B3644(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  Swift::Int v36;
  uint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  _QWORD *v119;
  char *v120;
  _QWORD *v121;
  Swift::Int v122;
  Swift::Int v123;
  uint64_t v124;
  Swift::Int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  Swift::Int v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v134 = type metadata accessor for Metric(0);
  v127 = *(_QWORD *)(v134 - 8);
  v3 = __chkstk_darwin(v134);
  v124 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v135 = (uint64_t)&v120 - v6;
  v7 = __chkstk_darwin(v5);
  v132 = (uint64_t)&v120 - v8;
  __chkstk_darwin(v7);
  v131 = (uint64_t)&v120 - v9;
  v10 = a1[1];
  result = _minimumMergeRunLength(_:)(v10);
  if (result >= v10)
  {
    if (v10 < 0)
      goto LABEL_139;
    if (v10)
      return sub_1001B42B4(0, v10, 1, a1);
    return result;
  }
  if (v10 >= 0)
    v12 = v10;
  else
    v12 = v10 + 1;
  if (v10 < -1)
    goto LABEL_147;
  v133 = a1;
  v122 = result;
  v128 = v1;
  if (v10 < 2)
  {
    v16 = (char *)_swiftEmptyArrayStorage;
    v126 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    v121 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      v18 = _swiftEmptyArrayStorage[2];
LABEL_105:
      v105 = v16;
      if (v18 >= 2)
      {
        v112 = *v133;
        do
        {
          v113 = v18 - 2;
          if (v18 < 2)
            goto LABEL_134;
          if (!v112)
            goto LABEL_146;
          v114 = *(_QWORD *)&v105[16 * v113 + 32];
          v115 = *(_QWORD *)&v105[16 * v18 + 24];
          v116 = v128;
          sub_1001B4A34(v112 + *(_QWORD *)(v127 + 72) * v114, v112 + *(_QWORD *)(v127 + 72) * *(_QWORD *)&v105[16 * v18 + 16], v112 + *(_QWORD *)(v127 + 72) * v115, v126);
          v128 = v116;
          if (v116)
            break;
          if (v115 < v114)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native(v105) & 1) == 0)
            v105 = sub_100197EBC((uint64_t)v105);
          if (v113 >= *((_QWORD *)v105 + 2))
            goto LABEL_136;
          v117 = &v105[16 * v113 + 32];
          *(_QWORD *)v117 = v114;
          *((_QWORD *)v117 + 1) = v115;
          v118 = *((_QWORD *)v105 + 2);
          if (v18 > v118)
            goto LABEL_137;
          memmove(&v105[16 * v18 + 16], &v105[16 * v18 + 32], 16 * (v118 - v18));
          *((_QWORD *)v105 + 2) = v118 - 1;
          v18 = v118 - 1;
        }
        while (v118 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease(v105);
      v119 = v121;
      v121[2] = 0;
      return swift_bridgeObjectRelease(v119);
    }
  }
  else
  {
    v13 = v12 >> 1;
    v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v134);
    *(_QWORD *)(v14 + 16) = v13;
    v15 = *(unsigned __int8 *)(v127 + 80);
    v121 = (_QWORD *)v14;
    v126 = v14 + ((v15 + 32) & ~v15);
  }
  v17 = 0;
  v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v19 = v17;
    v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }
    v21 = *v133;
    v22 = *(_QWORD *)(v127 + 72);
    v23 = v131;
    sub_10017417C(*v133 + v22 * v20, v131, type metadata accessor for Metric);
    v24 = v21 + v22 * v17;
    v25 = v132;
    sub_10017417C(v24, v132, type metadata accessor for Metric);
    LODWORD(v130) = static Date.> infix(_:_:)(v23 + *(int *)(v134 + 44), v25 + *(int *)(v134 + 44));
    sub_1001B565C(v25, type metadata accessor for Metric);
    sub_1001B565C(v23, type metadata accessor for Metric);
    v17 = v19 + 2;
    v129 = v21;
    v136 = v22;
    if (v19 + 2 >= v10)
      goto LABEL_21;
    v125 = v19;
    v26 = v16;
    v27 = v22 * v20;
    v28 = v21;
    v29 = v19 + 2;
    v30 = v22 * v29;
    do
    {
      v31 = v10;
      v32 = v131;
      sub_10017417C(v28 + v30, v131, type metadata accessor for Metric);
      v33 = v132;
      sub_10017417C(v28 + v27, v132, type metadata accessor for Metric);
      v34 = static Date.> infix(_:_:)(v32 + *(int *)(v134 + 44), v33 + *(int *)(v134 + 44));
      sub_1001B565C(v33, type metadata accessor for Metric);
      sub_1001B565C(v32, type metadata accessor for Metric);
      if (((v130 ^ v34) & 1) != 0)
      {
        v16 = v26;
        v17 = v29;
        v19 = v125;
        v10 = v31;
        if ((v130 & 1) != 0)
          goto LABEL_42;
        goto LABEL_24;
      }
      v28 += v136;
      ++v29;
      v10 = v31;
    }
    while (v31 != v29);
    v16 = v26;
    v17 = v31;
    v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0)
      goto LABEL_24;
LABEL_42:
    v51 = v136;
    if (v17 < v19)
      goto LABEL_140;
    if (v19 < v17)
      break;
LABEL_24:
    v35 = v133;
    if (v17 < v10)
      goto LABEL_25;
LABEL_57:
    if (v17 < v19)
      goto LABEL_133;
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      v16 = sub_100197984(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
    v61 = *((_QWORD *)v16 + 2);
    v60 = *((_QWORD *)v16 + 3);
    v18 = v61 + 1;
    if (v61 >= v60 >> 1)
      v16 = sub_100197984((char *)(v60 > 1), v61 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v18;
    v62 = v16 + 32;
    v63 = &v16[16 * v61 + 32];
    *(_QWORD *)v63 = v19;
    *((_QWORD *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        v64 = v18 - 1;
        if (v18 >= 4)
        {
          v69 = &v62[16 * v18];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_122;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_123;
          v76 = v18 - 2;
          v77 = &v62[16 * v18 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_125;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_128;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_132;
            v92 = v67 < v102;
            goto LABEL_94;
          }
        }
        else
        {
          if (v18 != 3)
          {
            v93 = *((_QWORD *)v16 + 4);
            v94 = *((_QWORD *)v16 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_88;
          }
          v66 = *((_QWORD *)v16 + 4);
          v65 = *((_QWORD *)v16 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_124;
        v76 = v18 - 2;
        v82 = &v62[16 * v18 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_127;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_130;
        if (__OFADD__(v86, v91))
          goto LABEL_131;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_94:
          if (v92)
            v64 = v76;
          goto LABEL_96;
        }
LABEL_88:
        if ((v87 & 1) != 0)
          goto LABEL_126;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_129;
        if (v98 < v86)
          goto LABEL_14;
LABEL_96:
        v103 = v17;
        v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!*v133)
          goto LABEL_144;
        v105 = v16;
        v106 = &v62[16 * v104];
        v107 = *(_QWORD *)v106;
        v108 = &v62[16 * v64];
        v109 = *((_QWORD *)v108 + 1);
        v110 = v128;
        sub_1001B4A34(*v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v106, *v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v108, *v133 + *(_QWORD *)(v127 + 72) * v109, v126);
        v128 = v110;
        if (v110)
          goto LABEL_116;
        if (v109 < v107)
          goto LABEL_119;
        if (v64 > *((_QWORD *)v105 + 2))
          goto LABEL_120;
        *(_QWORD *)v106 = v107;
        *(_QWORD *)&v62[16 * v104 + 8] = v109;
        v111 = *((_QWORD *)v105 + 2);
        if (v64 >= v111)
          goto LABEL_121;
        v16 = v105;
        v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((_QWORD *)v105 + 2) = v111 - 1;
        v92 = v111 > 2;
        v17 = v103;
        if (!v92)
          goto LABEL_14;
      }
    }
    v18 = 1;
LABEL_14:
    v10 = v133[1];
    if (v17 >= v10)
      goto LABEL_105;
  }
  v130 = v10;
  v120 = v16;
  v52 = 0;
  v53 = v136 * (v17 - 1);
  v54 = v17 * v136;
  v55 = v19;
  v56 = v19 * v136;
  v35 = v133;
  v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      v57 = v129;
      if (!v129)
        goto LABEL_145;
      v58 = v129 + v56;
      v59 = v129 + v53;
      sub_1001B5618(v129 + v56, v124, type metadata accessor for Metric);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53);
        v51 = v136;
      }
      else
      {
        v51 = v136;
        if (v56 != v53)
          swift_arrayInitWithTakeBackToFront(v58, v59);
      }
      sub_1001B5618(v124, v59, type metadata accessor for Metric);
      v35 = v133;
      v19 = v125;
    }
    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }
  while (v55 < v17 + v52);
  v16 = v120;
  v10 = v130;
  if (v17 >= v130)
    goto LABEL_57;
LABEL_25:
  if (__OFSUB__(v17, v19))
    goto LABEL_138;
  if (v17 - v19 >= v122)
    goto LABEL_57;
  if (__OFADD__(v19, v122))
    goto LABEL_141;
  if (v19 + v122 >= v10)
    v36 = v10;
  else
    v36 = v19 + v122;
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      v120 = v16;
      v37 = *(_QWORD *)(v127 + 72);
      v136 = v37 * (v17 - 1);
      v129 = v37;
      v38 = v17 * v37;
      v125 = v19;
      v123 = v36;
      do
      {
        v40 = 0;
        v41 = v19;
        v130 = v17;
        while (1)
        {
          v42 = *v35;
          v43 = v38;
          v44 = v38 + v40 + *v35;
          v45 = v131;
          v46 = v35;
          sub_10017417C(v44, v131, type metadata accessor for Metric);
          v47 = v132;
          sub_10017417C(v136 + v40 + v42, v132, type metadata accessor for Metric);
          LOBYTE(v42) = static Date.> infix(_:_:)(v45 + *(int *)(v134 + 44), v47 + *(int *)(v134 + 44));
          sub_1001B565C(v47, type metadata accessor for Metric);
          sub_1001B565C(v45, type metadata accessor for Metric);
          if ((v42 & 1) == 0)
            break;
          v48 = *v46;
          if (!*v46)
            goto LABEL_143;
          v38 = v43;
          v49 = v48 + v43 + v40;
          v50 = v48 + v136 + v40;
          sub_1001B5618(v49, v135, type metadata accessor for Metric);
          swift_arrayInitWithTakeFrontToBack(v49, v50);
          sub_1001B5618(v135, v50, type metadata accessor for Metric);
          v39 = v130;
          v40 -= v129;
          ++v41;
          v35 = v133;
          if (v130 == v41)
            goto LABEL_35;
        }
        v39 = v130;
        v38 = v43;
        v35 = v46;
LABEL_35:
        v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        v19 = v125;
      }
      while (v17 != v123);
      v17 = v123;
      v16 = v120;
    }
    goto LABEL_57;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001B4040(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v34 = a1;
  v38 = type metadata accessor for MetricSectional(0);
  v7 = __chkstk_darwin(v38);
  v39 = (uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v32 - v10;
  result = __chkstk_darwin(v9);
  v15 = (char *)&v32 - v14;
  v37 = a3;
  v33 = a2;
  if (a3 != a2)
  {
    v16 = *(_QWORD *)(v13 + 72);
    v41 = v16 * (v37 - 1);
    v36 = v16;
    v40 = v16 * v37;
    v35 = (char *)&v32 - v14;
LABEL_6:
    v17 = 0;
    v18 = v34;
    while (1)
    {
      v19 = *a4;
      sub_10017417C(v40 + v17 + *a4, (uint64_t)v15, type metadata accessor for MetricSectional);
      sub_10017417C(v41 + v17 + v19, (uint64_t)v11, type metadata accessor for MetricSectional);
      v20 = *(int *)(v38 + 20);
      v21 = *(_QWORD *)&v15[v20];
      v22 = *(_QWORD *)&v15[v20 + 8];
      v23 = &v11[v20];
      v24 = *((_QWORD *)v23 + 1);
      if (*(_QWORD *)v23 == v21 && v24 == v22)
      {
        sub_1001B565C((uint64_t)v11, type metadata accessor for MetricSectional);
        result = sub_1001B565C((uint64_t)v15, type metadata accessor for MetricSectional);
LABEL_5:
        v41 += v36;
        v40 += v36;
        if (++v37 == v33)
          return result;
        goto LABEL_6;
      }
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v23, v24, v21, v22, 1);
      sub_1001B565C((uint64_t)v11, type metadata accessor for MetricSectional);
      result = sub_1001B565C((uint64_t)v15, type metadata accessor for MetricSectional);
      if ((v26 & 1) == 0)
        goto LABEL_5;
      v27 = *a4;
      if (!*a4)
        break;
      v28 = v11;
      v29 = a4;
      v30 = v27 + v40 + v17;
      v31 = v27 + v41 + v17;
      sub_1001B5618(v30, v39, type metadata accessor for MetricSectional);
      swift_arrayInitWithTakeFrontToBack(v30, v31);
      result = sub_1001B5618(v39, v31, type metadata accessor for MetricSectional);
      v17 -= v36;
      ++v18;
      a4 = v29;
      v11 = v28;
      v15 = v35;
      if (v37 == v18)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001B42B4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a1;
  v30 = type metadata accessor for Metric(0);
  v7 = __chkstk_darwin(v30);
  v31 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v27 = (uint64_t)&v24 - v10;
  result = __chkstk_darwin(v9);
  v14 = (char *)&v24 - v13;
  v29 = a3;
  v25 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v33 = v15 * (v29 - 1);
    v28 = v15;
    v32 = v15 * v29;
LABEL_5:
    v16 = 0;
    v17 = v26;
    while (1)
    {
      v18 = *a4;
      sub_10017417C(v32 + v16 + *a4, (uint64_t)v14, type metadata accessor for Metric);
      v19 = v27;
      sub_10017417C(v33 + v16 + v18, v27, type metadata accessor for Metric);
      LOBYTE(v18) = static Date.> infix(_:_:)(&v14[*(int *)(v30 + 44)], v19 + *(int *)(v30 + 44));
      sub_1001B565C(v19, type metadata accessor for Metric);
      result = sub_1001B565C((uint64_t)v14, type metadata accessor for Metric);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v33 += v28;
        v32 += v28;
        if (++v29 == v25)
          return result;
        goto LABEL_5;
      }
      v20 = *a4;
      if (!*a4)
        break;
      v21 = a4;
      v22 = v20 + v32 + v16;
      v23 = v20 + v33 + v16;
      sub_1001B5618(v22, v31, type metadata accessor for Metric);
      swift_arrayInitWithTakeFrontToBack(v22, v23);
      result = sub_1001B5618(v31, v23, type metadata accessor for Metric);
      v16 -= v28;
      ++v17;
      a4 = v21;
      if (v29 == v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001B44F0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;

  v57 = type metadata accessor for MetricSectional(0);
  v8 = __chkstk_darwin(v57);
  v56 = (unint64_t)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v55 = (uint64_t)&v54 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v54 - v13;
  __chkstk_darwin(v12);
  v17 = (char *)&v54 - v16;
  v18 = *(_QWORD *)(v15 + 72);
  if (!v18)
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v19 = *(_QWORD *)(v15 + 72);
  if (a2 - a1 == 0x8000000000000000 && v19 == -1)
    goto LABEL_72;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v18 == -1)
    goto LABEL_73;
  v21 = (uint64_t)(a2 - a1) / v18;
  v60 = a1;
  v59 = a4;
  v22 = v20 / v18;
  if (v21 >= v20 / v19)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v24 = v22 * v19;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v36 = a4 + v24;
      v58 = a4 + v24;
      v60 = a2;
      if (v24 >= 1 && a1 < a2)
      {
        v38 = -v19;
        do
        {
          v39 = a1;
          v40 = v55;
          sub_10017417C(v36 + v38, v55, type metadata accessor for MetricSectional);
          v41 = a2 + v38;
          v42 = v56;
          sub_10017417C(a2 + v38, v56, type metadata accessor for MetricSectional);
          v43 = *(int *)(v57 + 20);
          v44 = *(_QWORD *)(v40 + v43);
          v45 = *(_QWORD *)(v40 + v43 + 8);
          v46 = (_QWORD *)(v42 + v43);
          v47 = v46[1];
          if (*v46 == v44 && v47 == v45)
            v49 = 0;
          else
            v49 = _stringCompareWithSmolCheck(_:_:expecting:)(*v46, v47, v44, v45, 1);
          v50 = a3 + v38;
          sub_1001B565C(v56, type metadata accessor for MetricSectional);
          sub_1001B565C(v55, type metadata accessor for MetricSectional);
          if ((v49 & 1) != 0)
          {
            if (a3 < a2 || v50 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v38, a2 + v38);
              a1 = v39;
            }
            else
            {
              a1 = v39;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront(a3 + v38, a2 + v38);
            }
            v60 += v38;
          }
          else
          {
            v51 = v58;
            v52 = v58 + v38;
            v58 += v38;
            if (a3 < v51 || v50 >= v51)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v38, v52);
              v41 = a2;
              a1 = v39;
            }
            else
            {
              a1 = v39;
              if (a3 != v51)
                swift_arrayInitWithTakeBackToFront(a3 + v38, v52);
              v41 = a2;
            }
          }
          v36 = v58;
          if (v58 <= a4)
            break;
          a2 = v41;
          a3 += v38;
        }
        while (v41 > a1);
      }
LABEL_70:
      sub_100197C88(&v60, &v59, (uint64_t *)&v58);
      return 1;
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21 * v19;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v56 = a4 + v23;
    v58 = a4 + v23;
    if (v23 >= 1 && a2 < a3)
    {
      while (1)
      {
        sub_10017417C(a2, (uint64_t)v17, type metadata accessor for MetricSectional);
        sub_10017417C(a4, (uint64_t)v14, type metadata accessor for MetricSectional);
        v26 = *(int *)(v57 + 20);
        v27 = *(_QWORD *)&v17[v26];
        v28 = *(_QWORD *)&v17[v26 + 8];
        v29 = &v14[v26];
        v30 = *((_QWORD *)v29 + 1);
        if (*(_QWORD *)v29 == v27 && v30 == v28)
          break;
        v32 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v29, v30, v27, v28, 1);
        sub_1001B565C((uint64_t)v14, type metadata accessor for MetricSectional);
        sub_1001B565C((uint64_t)v17, type metadata accessor for MetricSectional);
        if ((v32 & 1) == 0)
          goto LABEL_32;
        v33 = v60;
        v34 = a2 + v19;
        if (v60 < a2 || v60 >= v34)
        {
          swift_arrayInitWithTakeFrontToBack(v60, a2);
        }
        else if (v60 == a2)
        {
          v33 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v60, a2);
        }
LABEL_38:
        v60 = v33 + v19;
        a4 = v59;
        if (v59 < v56)
        {
          a2 = v34;
          if (v34 < a3)
            continue;
        }
        goto LABEL_70;
      }
      sub_1001B565C((uint64_t)v14, type metadata accessor for MetricSectional);
      sub_1001B565C((uint64_t)v17, type metadata accessor for MetricSectional);
LABEL_32:
      v33 = v60;
      v35 = v59 + v19;
      if (v60 < v59 || v60 >= v35)
      {
        swift_arrayInitWithTakeFrontToBack(v60, v59);
      }
      else if (v60 != v59)
      {
        swift_arrayInitWithTakeBackToFront(v60, v59);
      }
      v59 = v35;
      v34 = a2;
      goto LABEL_38;
    }
    goto LABEL_70;
  }
LABEL_74:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001B4A34(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v45 = type metadata accessor for Metric(0);
  v8 = __chkstk_darwin(v45);
  v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v48 = a1;
  v47 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v25 = a4 + v18;
      v46 = a4 + v18;
      v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v27 = -v13;
        v42 = a4;
        v43 = a1;
        do
        {
          v28 = a3 + v27;
          sub_10017417C(v25 + v27, (uint64_t)v11, type metadata accessor for Metric);
          v29 = a2 + v27;
          v30 = a3;
          v31 = (uint64_t)v11;
          v32 = v44;
          sub_10017417C(a2 + v27, v44, type metadata accessor for Metric);
          v33 = static Date.> infix(_:_:)(v31 + *(int *)(v45 + 44), v32 + *(int *)(v45 + 44));
          v34 = v32;
          v11 = (char *)v31;
          sub_1001B565C(v34, type metadata accessor for Metric);
          sub_1001B565C(v31, type metadata accessor for Metric);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27);
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == a2;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, a2 + v27);
            }
            v48 += v27;
          }
          else
          {
            v38 = v46;
            v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39);
              v29 = a2;
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == v38;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, v39);
              v29 = a2;
            }
          }
          v25 = v46;
          if (v46 <= v37)
            break;
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v36);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v43 = a4 + v17;
    v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = v44;
      do
      {
        sub_10017417C(a2, (uint64_t)v11, type metadata accessor for Metric);
        sub_10017417C(a4, v20, type metadata accessor for Metric);
        v21 = static Date.> infix(_:_:)(&v11[*(int *)(v45 + 44)], v20 + *(int *)(v45 + 44));
        sub_1001B565C(v20, type metadata accessor for Metric);
        sub_1001B565C((uint64_t)v11, type metadata accessor for Metric);
        v22 = v48;
        if ((v21 & 1) != 0)
        {
          v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2);
          }
          else if (v48 == a2)
          {
            v22 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v48, a2);
          }
        }
        else
        {
          v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47);
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48, v47);
          }
          v47 = v24;
          v23 = a2;
        }
        v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43)
          break;
        a2 = v23;
      }
      while (v23 < a3);
    }
LABEL_60:
    sub_100197C94(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_1001B4EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _DWORD *i;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  int v43;
  uint64_t v44;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return;
  v7 = a2;
  v8 = 0;
  v9 = a1 + 64;
  v41 = -(uint64_t)v5;
  v10 = _swiftEmptyArrayStorage;
  v37 = a1 + 64;
  v38 = *(_QWORD *)(a1 + 16);
  do
  {
    v39 = v10;
    if (v8 <= v5)
      v11 = v5;
    else
      v11 = v8;
    v44 = -(uint64_t)v11;
    for (i = (_DWORD *)(v9 + 40 * v8++); ; i += 10)
    {
      if (v44 + v8 == 1)
      {
        __break(1u);
        return;
      }
      v15 = (void *)*((_QWORD *)i - 4);
      v14 = (void *)*((_QWORD *)i - 3);
      v17 = (void *)*((_QWORD *)i - 2);
      v16 = (void *)*((_QWORD *)i - 1);
      v43 = *i;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      if (v18 == v7 && v19 == a3)
      {
        v27 = v15;
        v28 = v14;
        v29 = v17;
        v30 = v16;
        swift_bridgeObjectRelease(a3);
      }
      else
      {
        v21 = v19;
        v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v7, a3, 0);
        v23 = v15;
        v24 = v14;
        v25 = v17;
        v26 = v16;
        swift_bridgeObjectRelease(v21);
        if ((v22 & 1) == 0)
          goto LABEL_8;
      }
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v33 = v32;
      if (v31 == a4 && v32 == a5)
        break;
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, a4, a5, 0);
      swift_bridgeObjectRelease(v33);
      if ((v13 & 1) != 0)
        goto LABEL_20;
LABEL_8:

      ++v8;
      v7 = a2;
      if (v41 + v8 == 1)
        return;
    }
    swift_bridgeObjectRelease(a5);
LABEL_20:
    v10 = v39;
    if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
    {
      sub_100195B28(0, v39[2] + 1, 1);
      v10 = v39;
    }
    v9 = v37;
    v5 = v38;
    v35 = v10[2];
    v34 = v10[3];
    if (v35 >= v34 >> 1)
    {
      sub_100195B28(v34 > 1, v35 + 1, 1);
      v9 = v37;
      v5 = v38;
      v10 = v39;
    }
    v10[2] = v35 + 1;
    v36 = &v10[5 * v35];
    v36[4] = v15;
    v36[5] = v14;
    v36[6] = v17;
    v36[7] = v16;
    *((_DWORD *)v36 + 16) = v43;
    v7 = a2;
  }
  while (v41 + v8);
}

void sub_1001B5128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _BYTE v27[24];
  _BYTE v28[24];

  v7 = a2 + 16;
  if (a1)
  {
    v14 = a7 + 16;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    v15 = swift_bridgeObjectRetain(a1);
    sub_1001B4EE4(v15, a3, a4, a5, a6);
    v17 = v16;
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_beginAccess(v14, v28, 1, 0);
    v18 = *(_QWORD *)(a7 + 16);
    *(_QWORD *)(a7 + 16) = v17;
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    swift_beginAccess(v7, v28, 0, 0);
    Strong = swift_weakLoadStrong(v7);
    if (Strong)
    {
      v20 = Strong;
      v21 = type metadata accessor for MetricDetailViewModel(0);
      v22 = sub_100146004(&qword_1002B7138, type metadata accessor for MetricDetailViewModel, (uint64_t)&unk_100243368);
      v23 = ObservableObject<>.objectWillChange.getter(v21, v22);
      ObservableObjectPublisher.send()();
      swift_release(v23);
      *(_BYTE *)(v20 + OBJC_IVAR____TtC13FTMInternal_421MetricDetailViewModel_shouldShowSPinner) = 0;
      swift_release(v20);
    }
  }
  swift_beginAccess(v7, v27, 0, 0);
  v24 = swift_weakLoadStrong(v7);
  v25 = v24;
  if (v24)
  {
    v26 = *(id *)(v24 + 64);
    swift_release(v25);
    dispatch_group_leave(v26);

  }
}

uint64_t sub_1001B52B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001B52DC()
{
  uint64_t v0;

  return sub_1001B0BEC(v0);
}

uint64_t sub_1001B52E4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001B5308()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001B5334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001B0EC8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1001B533C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B5360()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1001B5388()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

void sub_1001B53C4(uint64_t a1)
{
  uint64_t *v1;

  sub_1001B5128(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1001B53D4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001B5408()
{
  uint64_t *v0;

  return sub_1001B1100(v0[2], v0[3], v0[4]);
}

double sub_1001B5414()
{
  uint64_t v0;

  return sub_1001B18E4(v0);
}

void sub_1001B541C()
{
  uint64_t v0;

  sub_1001B0E58(v0);
}

_QWORD *sub_1001B5424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v7 = type metadata accessor for Metric(0);
  v8 = __chkstk_darwin(v7);
  v29 = (uint64_t)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v25 - v11;
  result = _swiftEmptyArrayStorage;
  v30 = _swiftEmptyArrayStorage;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v25[1] = v3;
    v15 = *(_QWORD *)(v10 + 72);
    v28 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v16 = a1 + v28;
    v17 = _swiftEmptyArrayStorage;
    v26 = v15;
    v27 = v7;
    do
    {
      sub_10017417C(v16, (uint64_t)v12, type metadata accessor for Metric);
      v18 = &v12[*(int *)(v7 + 64)];
      v19 = *((_QWORD *)v18 + 1);
      if (v19
        && (*(_QWORD *)v18 == a2 ? (v20 = v19 == a3) : (v20 = 0),
            v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v18, v19, a2, a3, 0) & 1) != 0))
      {
        v21 = a2;
        v22 = a3;
        sub_1001B5618((uint64_t)v12, v29, type metadata accessor for Metric);
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
          sub_100195AFC(0, v17[2] + 1, 1);
        v17 = v30;
        v24 = v30[2];
        v23 = v30[3];
        if (v24 >= v23 >> 1)
        {
          sub_100195AFC(v23 > 1, v24 + 1, 1);
          v17 = v30;
        }
        v17[2] = v24 + 1;
        v15 = v26;
        sub_1001B5618(v29, (uint64_t)v17 + v28 + v24 * v26, type metadata accessor for Metric);
        a3 = v22;
        a2 = v21;
        v7 = v27;
      }
      else
      {
        sub_1001B565C((uint64_t)v12, type metadata accessor for Metric);
      }
      v16 += v15;
      --v14;
    }
    while (v14);
    return v30;
  }
  return result;
}

uint64_t sub_1001B5618(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001B565C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

NSString sub_1001B5698(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  NSString v6;
  unint64_t v8;

  switch(a1)
  {
    case 0:
      v8 = 0xE500000000000000;
      goto LABEL_11;
    case 1:
      v8 = 0xE800000000000000;
      goto LABEL_11;
    case 2:
      v8 = 0xE400000000000000;
      goto LABEL_11;
    case 3:
      v8 = 0xE800000000000000;
      goto LABEL_11;
    case 4:
      v8 = 0xE800000000000000;
      goto LABEL_11;
    case 5:
      v8 = 0xE800000000000000;
      goto LABEL_11;
    case 6:
      v8 = 0xE800000000000000;
      goto LABEL_11;
    case 7:
      v8 = 0xE800000000000000;
LABEL_11:
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      v5._countAndFlagsBits = 41;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      v2 = v8;
      break;
    default:
      dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v2 = v1;
      break;
  }
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  return v6;
}

uint64_t sub_1001B5874()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  void *object;
  Swift::String v11;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  if (*(_BYTE *)(v0 + 32))
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 32))
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 40;
}

uint64_t sub_1001B5978()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1002B3A50 != -1)
    swift_once(&qword_1002B3A50, sub_1001752C4);
  objc_msgSend(v1, "removeObserver:name:object:", v0, static NSNotificationName.numberOfSubsChanged, 0);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v2 = v0 + OBJC_IVAR____TtC13FTMInternal_423CarrierSegmentViewModel_id;
  v3 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC13FTMInternal_423CarrierSegmentViewModel_carrierCurrentSubsIdMap));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13FTMInternal_423CarrierSegmentViewModel_carriers));
  return v0;
}

uint64_t sub_1001B5A58()
{
  uint64_t v0;

  sub_1001B5978();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001B5A7C()
{
  return type metadata accessor for CarrierSegmentViewModel(0);
}

uint64_t type metadata accessor for CarrierSegmentViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B7178;
  if (!qword_1002B7178)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CarrierSegmentViewModel);
  return result;
}

uint64_t sub_1001B5AC0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1002433D8;
  v4[1] = &unk_1002433F0;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001B5B60@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for CarrierSegmentViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001B5B9C()
{
  return sub_1001B5874();
}

uint64_t sub_1001B5BBC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC13FTMInternal_423CarrierSegmentViewModel_id;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

_QWORD *sub_1001B5C04(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v19 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v19 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v19);
  }
  else
  {
    v5 = (void *)a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v7 = a2[3];
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
    v8 = a2[5];
    v9 = a2[6];
    v10 = *(int *)(a3 + 28);
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    v13 = v5;
    swift_retain(v7);
    swift_bridgeObjectRetain(v8);
    swift_retain(v9);
    v14 = sub_100146438(&qword_1002B3F00);
    if (swift_getEnumCaseMultiPayload(v12, v14) == 1)
    {
      v15 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v11, v12, v15);
      v16 = v11;
      v17 = v14;
      v18 = 1;
    }
    else
    {
      v20 = *v12;
      *v11 = *v12;
      swift_retain(v20);
      v16 = v11;
      v17 = v14;
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v17, v18);
  }
  return v3;
}

double sub_1001B5D18(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_release(*(_QWORD *)(a1 + 48));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 28));
  v5 = sub_100146438(&qword_1002B3F00);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001B5DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v5;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(int *)(a3 + 28);
  v10 = (uint64_t *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v12 = v4;
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  v13 = sub_100146438(&qword_1002B3F00);
  if (swift_getEnumCaseMultiPayload(v11, v13) == 1)
  {
    v14 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v10, v11, v14);
    v15 = 1;
  }
  else
  {
    v16 = *v11;
    *v10 = *v11;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v13, v15);
  return a1;
}

uint64_t sub_1001B5E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(void **)(a2 + 8);
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v8 = v6;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  swift_retain(v10);
  swift_release(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  swift_retain(v14);
  swift_release(v13);
  if (a1 != a2)
  {
    v15 = *(int *)(a3 + 28);
    v16 = (uint64_t *)(a1 + v15);
    v17 = (uint64_t *)(a2 + v15);
    sub_10014BDE0(a1 + v15, &qword_1002B3F00);
    v18 = sub_100146438(&qword_1002B3F00);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = 1;
    }
    else
    {
      v21 = *v17;
      *v16 = *v17;
      swift_retain(v21);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v20);
  }
  return a1;
}

uint64_t sub_1001B5FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 28);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = sub_100146438(&qword_1002B3F00);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v6, v7, v9);
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1001B6070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v8);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v11);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 28);
    v13 = (void *)(a1 + v12);
    v14 = (const void *)(a2 + v12);
    sub_10014BDE0(a1 + v12, &qword_1002B3F00);
    v15 = sub_100146438(&qword_1002B3F00);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for DismissAction(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1001B6178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001B6184);
}

uint64_t sub_1001B6184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100146438(&qword_1002B3F08);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_1001B6204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001B6210);
}

uint64_t sub_1001B6210(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100146438(&qword_1002B3F08);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SURLSessionRunningView(uint64_t a1)
{
  uint64_t result;

  result = qword_1002B7338;
  if (!qword_1002B7338)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SURLSessionRunningView);
  return result;
}

void sub_1001B62C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1002434C8;
  v4[1] = &unk_1002434E0;
  v4[2] = &unk_1002434F8;
  sub_10014CDC4(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t sub_1001B634C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002480A8, 1);
}

Swift::Int sub_1001B635C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(sub_100146438(&qword_1002B4AA0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10019893C(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1001BAD38(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1001B63E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (**v44)(uint64_t);
  void (*v45)(char *, uint64_t);
  id v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char v100[16];
  uint64_t v101;
  char v102;
  uint64_t v103;
  _QWORD v104[2];
  unsigned __int8 v105;

  v2 = v1;
  v97 = a1;
  v3 = type metadata accessor for SURLSessionRunningView(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v93 = *(_QWORD *)(v3 - 8);
  v94 = v4;
  __chkstk_darwin(v3);
  v92 = (uint64_t)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskPriority(0);
  v95 = *(_QWORD *)(v6 - 8);
  v96 = v6;
  __chkstk_darwin(v6);
  v91 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v89 = *(_QWORD *)(v8 - 8);
  v90 = v8;
  __chkstk_darwin(v8);
  v84 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100146438(&qword_1002B7378);
  __chkstk_darwin(v10);
  v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100146438(&qword_1002B7380);
  v83 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v14 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100146438(&qword_1002B7388);
  __chkstk_darwin(v85);
  v16 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100146438(&qword_1002B7390);
  __chkstk_darwin(v88);
  v87 = (uint64_t)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100146438(&qword_1002B7398);
  v18 = __chkstk_darwin(v99);
  v98 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v12 = static HorizontalAlignment.center.getter(v18);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v20 = (uint64_t)&v12[*(int *)(sub_100146438(&qword_1002B73A0) + 44)];
  v82 = v1;
  sub_1001B6A60(v1, v20);
  v21 = LocalizedStringKey.init(stringLiteral:)(0x20676E696E6E7552, 0xED0000736B736174);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v28 = sub_10014BEC0(&qword_1002B73A8, &qword_1002B7378, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.navigationTitle(_:)(v21, v23, v25 & 1, v27, v10, v28);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v23);
  sub_10014BDE0((uint64_t)v12, &qword_1002B7378);
  v29 = *(void **)(v2 + 8);
  v30 = (void *)objc_opt_self(NSNotificationCenter);
  v31 = v29;
  v32 = objc_msgSend(v30, "defaultCenter");
  v33 = v84;
  NSNotificationCenter.publisher(for:object:)(UIApplicationDidEnterBackgroundNotification, 0);

  v34 = swift_allocObject(&unk_100265FE8, 24, 7);
  *(_QWORD *)(v34 + 16) = v31;
  v35 = swift_allocObject(&unk_100266010, 32, 7);
  *(_QWORD *)(v35 + 16) = sub_1001BA5E4;
  *(_QWORD *)(v35 + 24) = v34;
  v36 = v83;
  v37 = (uint64_t)v16;
  v38 = v16;
  v39 = v14;
  v40 = v86;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v38, v14, v86);
  v41 = v85;
  v42 = v89;
  v43 = v90;
  (*(void (**)(uint64_t, char *, uint64_t))(v89 + 16))(v37 + *(int *)(v85 + 52), v33, v90);
  v44 = (uint64_t (**)(uint64_t))(v37 + *(int *)(v41 + 56));
  *v44 = sub_1001BA610;
  v44[1] = (uint64_t (*)(uint64_t))v35;
  v45 = *(void (**)(char *, uint64_t))(v42 + 8);
  v46 = v31;
  v45(v33, v43);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v40);
  v47 = v82;
  v48 = *(void **)(v82 + 8);
  v49 = swift_allocObject(&unk_100266038, 24, 7);
  *(_QWORD *)(v49 + 16) = v48;
  v50 = v87;
  sub_10014BD9C(v37, v87, &qword_1002B7388);
  v51 = (_QWORD *)(v50 + *(int *)(v88 + 36));
  *v51 = 0;
  v51[1] = 0;
  v51[2] = sub_1001BA618;
  v51[3] = v49;
  v52 = v48;
  v53 = sub_10014BDE0(v37, &qword_1002B7388);
  v54 = v91;
  static TaskPriority.userInitiated.getter(v53);
  v55 = v92;
  sub_1001BA638(v47, v92);
  v56 = *(unsigned __int8 *)(v93 + 80);
  v57 = (v56 + 16) & ~v56;
  v58 = swift_allocObject(&unk_100266060, v57 + v94, v56 | 7);
  sub_1001BA680(v55, v58 + v57);
  v59 = (uint64_t)v98;
  v60 = &v98[*(int *)(v99 + 36)];
  v61 = type metadata accessor for _TaskModifier(0);
  v63 = v95;
  v62 = v96;
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(&v60[*(int *)(v61 + 20)], v54, v96);
  *(_QWORD *)v60 = &unk_1002B73B8;
  *((_QWORD *)v60 + 1) = v58;
  sub_10014BD9C(v50, v59, &qword_1002B7390);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v54, v62);
  sub_10014BDE0(v50, &qword_1002B7390);
  v64 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x8000000100214B90);
  v66 = v65;
  LOBYTE(v63) = v67;
  v69 = v68;
  v70 = *(_QWORD *)(v47 + 24);
  v71 = v47;
  v102 = *(_BYTE *)(v47 + 16);
  v103 = v70;
  v72 = sub_100146438(&qword_1002B3CD8);
  State.projectedValue.getter(v104, v72);
  v73 = v104[0];
  v74 = v104[1];
  v75 = v105;
  v101 = v71;
  v76 = sub_100146438(&qword_1002B3C98);
  v77 = sub_1001BA730();
  v78 = sub_10014BEC0(&qword_1002B3CA8, &qword_1002B3C98, (uint64_t)&protocol conformance descriptor for Button<A>);
  v79 = v75;
  v80 = (uint64_t)v98;
  View.alert<A>(_:isPresented:actions:)(v64, v66, v63 & 1, v69, v73, v74, v79, sub_1001BA728, v100, v99, v76, v77, v78);
  swift_bridgeObjectRelease(v69);
  swift_bridgeObjectRelease(v66);
  swift_release(v74);
  swift_release(v73);
  return sub_10014BDE0(v80, &qword_1002B7398);
}

uint64_t sub_1001B6A60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t KeyPath;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;

  v62 = a2;
  v54 = sub_100146438(&qword_1002B73E0);
  __chkstk_darwin(v54);
  v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100146438(&qword_1002B73E8);
  __chkstk_darwin(v53);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100146438(&qword_1002B73F0);
  __chkstk_darwin(v61);
  v55 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100146438(&qword_1002B73F8);
  __chkstk_darwin(v58);
  v57 = (uint64_t)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100146438(&qword_1002B7400);
  __chkstk_darwin(v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100146438(&qword_1002B7408);
  __chkstk_darwin(v60);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100146438(&qword_1002B7410);
  v56 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1;
  v17 = *(void **)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_100243560);
  v19 = swift_getKeyPath(&unk_100243588);
  v20 = v17;
  static Published.subscript.getter(&v63, v20, KeyPath, v19);

  swift_release(KeyPath);
  swift_release(v19);
  v23 = v63;
  v22 = v64;
  switch(v64)
  {
    case 0uLL:
    case 3uLL:
      v24 = sub_1001BA8AC(v63, v64);
      *(_QWORD *)v4 = static HorizontalAlignment.center.getter(v24);
      *((_QWORD *)v4 + 1) = 0;
      v4[16] = 1;
      v25 = sub_100146438(&qword_1002B7418);
      sub_1001B7B84(v16, (uint64_t)&v4[*(int *)(v25 + 44)]);
      sub_10014BD9C((uint64_t)v4, (uint64_t)v6, &qword_1002B73E0);
      swift_storeEnumTagMultiPayload(v6, v53, 1);
      v26 = sub_10014BEC0(&qword_1002B7420, &qword_1002B7410, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
      v27 = sub_10014BEC0(&qword_1002B7428, &qword_1002B73E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
      v28 = (uint64_t)v55;
      _ConditionalContent<>.init(storage:)(v6, v59, v54, v26, v27);
      v29 = v57;
      sub_10014BD9C(v28, v57, &qword_1002B73F0);
      swift_storeEnumTagMultiPayload(v29, v58, 1);
      v30 = sub_1001BA8C0();
      v31 = sub_1001BA93C();
      _ConditionalContent<>.init(storage:)(v29, v60, v61, v30, v31);
      sub_10014BDE0(v28, &qword_1002B73F0);
      result = sub_10014BDE0((uint64_t)v4, &qword_1002B73E0);
      break;
    case 1uLL:
      ProgressView<>.init(label:)(sub_1001B7120);
      v39 = v56;
      v40 = v59;
      (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v11, v15, v59);
      swift_storeEnumTagMultiPayload(v11, v9, 0);
      v41 = sub_10014BEC0(&qword_1002B7420, &qword_1002B7410, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
      _ConditionalContent<>.init(storage:)(v11, v40, v40, v41, v41);
      v42 = v57;
      sub_10014BD9C((uint64_t)v13, v57, &qword_1002B7408);
      swift_storeEnumTagMultiPayload(v42, v58, 0);
      v43 = sub_1001BA8C0();
      v44 = sub_1001BA93C();
      _ConditionalContent<>.init(storage:)(v42, v60, v61, v43, v44);
      sub_10014BDE0((uint64_t)v13, &qword_1002B7408);
      result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v15, v40);
      break;
    case 2uLL:
      ProgressView<>.init(label:)(sub_1001B7140);
      v45 = v56;
      v46 = v59;
      (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v6, v15, v59);
      swift_storeEnumTagMultiPayload(v6, v53, 0);
      v47 = sub_10014BEC0(&qword_1002B7420, &qword_1002B7410, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
      v48 = sub_10014BEC0(&qword_1002B7428, &qword_1002B73E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
      v49 = (uint64_t)v55;
      _ConditionalContent<>.init(storage:)(v6, v46, v54, v47, v48);
      v50 = v57;
      sub_10014BD9C(v49, v57, &qword_1002B73F0);
      swift_storeEnumTagMultiPayload(v50, v58, 1);
      v51 = sub_1001BA8C0();
      v52 = sub_1001BA93C();
      _ConditionalContent<>.init(storage:)(v50, v60, v61, v51, v52);
      sub_10014BDE0(v49, &qword_1002B73F0);
      result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v15, v46);
      break;
    default:
      __chkstk_darwin(v21);
      *(&v53 - 2) = v23;
      *(&v53 - 1) = v22;
      ProgressView<>.init(label:)(sub_1001BA9D8);
      v33 = v56;
      v34 = v59;
      (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v11, v15, v59);
      swift_storeEnumTagMultiPayload(v11, v9, 1);
      v35 = sub_10014BEC0(&qword_1002B7420, &qword_1002B7410, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
      _ConditionalContent<>.init(storage:)(v11, v34, v34, v35, v35);
      v36 = v57;
      sub_10014BD9C((uint64_t)v13, v57, &qword_1002B7408);
      swift_storeEnumTagMultiPayload(v36, v58, 0);
      v37 = sub_1001BA8C0();
      v38 = sub_1001BA93C();
      _ConditionalContent<>.init(storage:)(v36, v60, v61, v37, v38);
      sub_1001BA8AC(v23, v22);
      sub_10014BDE0((uint64_t)v13, &qword_1002B7408);
      result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v15, v34);
      break;
  }
  return result;
}

uint64_t sub_1001B7120@<X0>(uint64_t a1@<X8>)
{
  return sub_100149E2C(0x2E676E6964616F4CLL, 0xEB000000002E2E2ELL, a1);
}

uint64_t sub_1001B7140@<X0>(uint64_t a1@<X8>)
{
  return sub_100149E2C(0x7720657361656C50, 0xEE002E2E2E746961, a1);
}

void sub_1001B7164()
{
  void *v0;
  id v1;
  unsigned int v2;
  id v3;

  v0 = (void *)objc_opt_self(UIApplication);
  v1 = objc_msgSend(v0, "sharedApplication");
  v2 = objc_msgSend(v1, "isIdleTimerDisabled");

  if (v2)
  {
    v3 = objc_msgSend(v0, "sharedApplication");
    objc_msgSend(v3, "setIdleTimerDisabled:", 0);

  }
}

uint64_t sub_1001B720C(uint64_t a1, void (*a2)(_QWORD *))
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD v7[4];

  v4 = type metadata accessor for Notification(0);
  v7[3] = v4;
  v5 = sub_1001BA868(v7);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v5, a1, v4);
  a2(v7);
  return sub_10014BDE0((uint64_t)v7, (uint64_t *)&unk_1002B5670);
}

uint64_t sub_1001B7284(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[14] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[15] = static MainActor.shared.getter();
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[16] = v3;
  v1[17] = v4;
  return swift_task_switch(sub_1001B72F0, v3, v4);
}

uint64_t sub_1001B72F0()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(void **)(v0[14] + 8);
  v0[18] = v1;
  v2 = v1;
  sub_10019AE6C();

  if (*((_BYTE *)v2 + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 81) == 1)
  {
    v3 = dword_1002B6964;
    v2;
    v4 = (_QWORD *)swift_task_alloc(v3);
    v0[19] = v4;
    *v4 = v0;
    v4[1] = sub_1001B73B4;
    return sub_10019D2CC();
  }
  else
  {
    v6 = dword_1002B69EC;
    v2;
    v7 = (_QWORD *)swift_task_alloc(v6);
    v0[21] = v7;
    *v7 = v0;
    v7[1] = sub_1001B7450;
    return sub_10019B31C();
  }
}

uint64_t sub_1001B73B4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 152);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 128);
    v5 = *(_QWORD *)(v2 + 136);
    v6 = sub_1001B74BC;
  }
  else
  {

    v4 = *(_QWORD *)(v2 + 128);
    v5 = *(_QWORD *)(v2 + 136);
    v6 = sub_1001B7420;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1001B7420()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_1001B7450()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 128);
    v5 = *(_QWORD *)(v2 + 136);
    v6 = sub_1001B7724;
  }
  else
  {

    v4 = *(_QWORD *)(v2 + 128);
    v5 = *(_QWORD *)(v2 + 136);
    v6 = sub_1001BC114;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1001B74BC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(void **)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 120));

  if (qword_1002B3A98 != -1)
    swift_once(&qword_1002B3A98, sub_100190468);
  v3 = type metadata accessor for Logger(0);
  sub_10018DBC8(v3, (uint64_t)qword_1002BF090);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v1);
    v9 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 104) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v7 + 4, v7 + 12);
    *v8 = v9;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "There was an error running the tasks: %@", v7, 0xCu);
    v10 = sub_100146438((uint64_t *)&unk_1002B6990);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(_QWORD *)(v0 + 112);
  swift_getErrorValue(v1, v0 + 96, v0 + 16);
  v12 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  v13 = *(_QWORD *)(v11 + 48);
  *(_OWORD *)(v0 + 40) = *(_OWORD *)(v11 + 32);
  *(_QWORD *)(v0 + 56) = v13;
  *(_QWORD *)(v0 + 64) = v12;
  *(_QWORD *)(v0 + 72) = v14;
  v15 = sub_100146438(&qword_1002B3D18);
  State.wrappedValue.setter(v0 + 64, v15);
  v16 = *(_QWORD *)(v11 + 24);
  *(_BYTE *)(v0 + 80) = *(_BYTE *)(v11 + 16);
  *(_QWORD *)(v0 + 88) = v16;
  *(_BYTE *)(v0 + 184) = 1;
  swift_retain(v16);
  v17 = sub_100146438(&qword_1002B3CD8);
  State.wrappedValue.setter(v0 + 184, v17);
  swift_errorRelease(v1);
  v18 = swift_release(v16);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v18);
}

uint64_t sub_1001B7724()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(void **)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 120));

  if (qword_1002B3A98 != -1)
    swift_once(&qword_1002B3A98, sub_100190468);
  v3 = type metadata accessor for Logger(0);
  sub_10018DBC8(v3, (uint64_t)qword_1002BF090);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v1);
    v9 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 104) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v7 + 4, v7 + 12);
    *v8 = v9;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "There was an error running the tasks: %@", v7, 0xCu);
    v10 = sub_100146438((uint64_t *)&unk_1002B6990);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(_QWORD *)(v0 + 112);
  swift_getErrorValue(v1, v0 + 96, v0 + 16);
  v12 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  v13 = *(_QWORD *)(v11 + 48);
  *(_OWORD *)(v0 + 40) = *(_OWORD *)(v11 + 32);
  *(_QWORD *)(v0 + 56) = v13;
  *(_QWORD *)(v0 + 64) = v12;
  *(_QWORD *)(v0 + 72) = v14;
  v15 = sub_100146438(&qword_1002B3D18);
  State.wrappedValue.setter(v0 + 64, v15);
  v16 = *(_QWORD *)(v11 + 24);
  *(_BYTE *)(v0 + 80) = *(_BYTE *)(v11 + 16);
  *(_QWORD *)(v0 + 88) = v16;
  *(_BYTE *)(v0 + 184) = 1;
  swift_retain(v16);
  v17 = sub_100146438(&qword_1002B3CD8);
  State.wrappedValue.setter(v0 + 184, v17);
  swift_errorRelease(v1);
  v18 = swift_release(v16);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v18);
}

uint64_t sub_1001B798C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = type metadata accessor for SURLSessionRunningView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = LocalizedStringKey.init(stringLiteral:)(0x7373696D736944, 0xE700000000000000);
  sub_1001BA638(a1, (uint64_t)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_100266088, v7 + v4, v6 | 7);
  sub_1001BA680((uint64_t)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  return Button<>.init(_:action:)(v5);
}

uint64_t sub_1001B7A8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;

  v2 = type metadata accessor for DismissAction(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 24);
  LOBYTE(v12) = *(_BYTE *)(a1 + 16);
  *((_QWORD *)&v12 + 1) = v6;
  LOBYTE(v11[0]) = 0;
  v7 = sub_100146438(&qword_1002B3CD8);
  State.wrappedValue.setter(v11, v7);
  v8 = *(_QWORD *)(a1 + 48);
  v12 = *(_OWORD *)(a1 + 32);
  v13 = v8;
  v11[0] = 0;
  v11[1] = 0;
  v9 = sub_100146438(&qword_1002B3D18);
  State.wrappedValue.setter(v11, v9);
  type metadata accessor for SURLSessionRunningView(0);
  sub_10018D348((uint64_t)v5);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1001B7B84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61[16];
  uint64_t v62;

  v60 = a2;
  v3 = type metadata accessor for GroupedListStyle(0);
  v4 = *(_QWORD *)(v3 - 8);
  v58 = v3;
  v59 = v4;
  __chkstk_darwin(v3);
  v54 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100146438(&qword_1002B7440);
  v57 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v52 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100146438(&qword_1002B7448);
  v56 = *(_QWORD *)(v51 - 8);
  v7 = __chkstk_darwin(v51);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v53 = (char *)&v49 - v10;
  v11 = sub_100146438(&qword_1002B7450);
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100146438(&qword_1002B7458);
  __chkstk_darwin(v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100146438(&qword_1002B7460);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v50 = (uint64_t)&v49 - v22;
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v21);
  *((_QWORD *)v13 + 1) = 0x4008000000000000;
  v13[16] = 0;
  v23 = sub_100146438(&qword_1002B7468);
  v24 = sub_1001B7FBC(a1, (uint64_t)&v13[*(int *)(v23 + 44)]);
  v26 = static Font.subheadline.getter(v24, v25);
  KeyPath = swift_getKeyPath(&unk_1002435A8);
  sub_10014BD9C((uint64_t)v13, (uint64_t)v16, &qword_1002B7450);
  v28 = (uint64_t *)&v16[*(int *)(v14 + 36)];
  *v28 = KeyPath;
  v28[1] = v26;
  v29 = sub_10014BDE0((uint64_t)v13, &qword_1002B7450);
  LOBYTE(KeyPath) = static Edge.Set.horizontal.getter(v29);
  sub_10014BD9C((uint64_t)v16, (uint64_t)v20, &qword_1002B7458);
  v30 = &v20[*(int *)(v17 + 36)];
  *v30 = KeyPath;
  *(_OWORD *)(v30 + 8) = 0u;
  *(_OWORD *)(v30 + 24) = 0u;
  v30[40] = 1;
  sub_10014BDE0((uint64_t)v16, &qword_1002B7458);
  v31 = v50;
  sub_10014BC64((uint64_t)v20, v50, &qword_1002B7460);
  v62 = a1;
  v32 = sub_100146438(&qword_1002B7470);
  v33 = sub_1001BAA88();
  v34 = v52;
  v35 = List<>.init(content:)(sub_1001BAA80, v61, v32, v33);
  v36 = v54;
  GroupedListStyle.init()(v35);
  v37 = sub_10014BEC0(&qword_1002B7490, &qword_1002B7440, (uint64_t)&protocol conformance descriptor for List<A, B>);
  v38 = v55;
  v39 = v58;
  View.listStyle<A>(_:)(v36, v55, v58, v37, &protocol witness table for GroupedListStyle);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v36, v39);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v34, v38);
  v40 = v56;
  v41 = v53;
  v42 = v51;
  (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v53, v9, v51);
  sub_10014BD9C(v31, (uint64_t)v20, &qword_1002B7460);
  v43 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  v44 = v40;
  v43(v9, v41, v42);
  v45 = v60;
  sub_10014BD9C((uint64_t)v20, v60, &qword_1002B7460);
  v46 = sub_100146438(&qword_1002B7498);
  v43((char *)(v45 + *(int *)(v46 + 48)), v9, v42);
  v47 = *(void (**)(char *, uint64_t))(v44 + 8);
  v47(v41, v42);
  sub_10014BDE0(v31, &qword_1002B7460);
  v47(v9, v42);
  return sub_10014BDE0((uint64_t)v20, &qword_1002B7460);
}

_QWORD *sub_1001B7FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  char *v106;
  void (*v107)(char *, char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  char v112;
  unsigned __int8 v113;
  unsigned __int8 v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  unsigned __int8 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(char *, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 v169;
  unsigned __int8 v170;
  unsigned __int8 v171;
  char v172;
  unsigned __int8 v173;
  unsigned __int8 v174;
  unsigned __int8 v175;
  char v176;
  _BYTE v177[208];
  _BYTE v178[208];
  _QWORD v179[26];
  _QWORD v180[26];
  _QWORD v181[26];
  __int128 v182;
  unsigned __int8 v183;
  uint64_t v184;
  uint64_t v185;
  unsigned __int8 v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int8 v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  __int128 v207;
  unsigned __int8 v208;
  uint64_t v209;
  uint64_t v210;
  unsigned __int8 v211;
  uint64_t v212;
  uint64_t v213;
  unsigned __int8 v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned __int8 v234;
  uint64_t v235;
  uint64_t v236;
  unsigned __int8 v237;
  uint64_t v238;
  uint64_t v239;
  unsigned __int8 v240;
  uint64_t v241;

  v154 = a2;
  v167 = type metadata accessor for Divider(0);
  v165 = *(_QWORD *)(v167 - 8);
  v3 = __chkstk_darwin(v167);
  v166 = (char *)&v140 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v164 = (char *)&v140 - v13;
  v168 = a1;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 48) == 1)
  {
    v158 = static VerticalAlignment.center.getter(v5, v6, v7, v8, v9, v10, v11, v12);
    v14 = v168;
    v15 = sub_1001B89F8(v168, 0x8000000100214BD0, (double (*)(__n128))sub_10015D7D0, (uint64_t)&v232);
    v141 = v232;
    v16 = v233;
    v17 = v234;
    v18 = v235;
    v157 = v236;
    v19 = v237;
    LODWORD(v151) = v237;
    v20 = v238;
    v149 = v238;
    v150 = v233;
    v21 = v239;
    v146 = v239;
    v147 = v235;
    v22 = v240;
    v23 = v241;
    v144 = v241;
    v156 = static VerticalAlignment.center.getter(v15, v24, v25, v26, v27, v28, v29, v30);
    sub_1001B8BF8(v14, 0x8000000100214BB0, (uint64_t (*)(__n128))sub_10015DB30, (uint64_t)&v232);
    v162 = v233;
    v163 = v232;
    v155 = v236;
    LODWORD(v152) = v237;
    v160 = v238;
    v161 = v235;
    v159 = v239;
    LOBYTE(v14) = v240;
    v142 = v241;
    LOBYTE(v182) = 1;
    v31 = v17;
    LODWORD(v148) = v17;
    LOBYTE(v181[0]) = v17;
    LOBYTE(v180[0]) = v19;
    v145 = v22;
    LOBYTE(v179[0]) = v22;
    v178[0] = 1;
    v177[0] = v234;
    v32 = v234;
    v176 = v237;
    v175 = v240;
    LODWORD(v153) = v240;
    v33 = v141;
    sub_10014BE1C(v141, v16, v31);
    swift_bridgeObjectRetain(v18);
    sub_10014BE1C(v20, v21, v22);
    swift_bridgeObjectRetain(v23);
    v35 = v162;
    v34 = v163;
    v143 = v32;
    sub_10014BE1C(v163, v162, v32);
    v36 = v161;
    swift_bridgeObjectRetain(v161);
    v37 = v159;
    v38 = v160;
    sub_10014BE1C(v160, v159, v14);
    v39 = v142;
    swift_bridgeObjectRetain(v142);
    sub_10014BE2C(v34, v35, v32);
    swift_bridgeObjectRelease(v36);
    sub_10014BE2C(v38, v37, v14);
    swift_bridgeObjectRelease(v39);
    v40 = v150;
    LOBYTE(v32) = v148;
    sub_10014BE2C(v33, v150, v148);
    v41 = v147;
    swift_bridgeObjectRelease(v147);
    v42 = v149;
    v43 = v146;
    LOBYTE(v37) = v145;
    sub_10014BE2C(v149, v146, v145);
    v44 = v144;
    swift_bridgeObjectRelease(v144);
    v207 = v158;
    v208 = 1;
    v209 = v33;
    v210 = v40;
    v211 = v32;
    v212 = v41;
    v213 = v157;
    v214 = v151;
    v215 = v42;
    v216 = v43;
    v217 = v37;
    v218 = v44;
    v219 = v156;
    v220 = 0;
    v221 = 1;
    v222 = v163;
    v223 = v162;
    v224 = v143;
    v225 = v161;
    v226 = v155;
    v227 = v152;
    v228 = v160;
    v229 = v159;
    v230 = v153;
    v231 = v39;
    nullsub_1(&v207);
  }
  else
  {
    sub_1001BBE4C(&v207);
  }
  v45 = sub_10014BC64((uint64_t)&v207, (uint64_t)&v232, &qword_1002B7510);
  if (*(_BYTE *)(*(_QWORD *)(v168 + 8) + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration + 49) == 1)
  {
    v158 = static VerticalAlignment.center.getter(v45, v46, v47, v48, v49, v50, v51, v52);
    v53 = v168;
    v54 = sub_1001B89F8(v168, 0x8000000100214C10, (double (*)(__n128))sub_10015D7DC, (uint64_t)&v207);
    v55 = *((_QWORD *)&v207 + 1);
    v141 = v207;
    v56 = v208;
    v57 = v209;
    v157 = v210;
    v58 = v211;
    LODWORD(v151) = v211;
    v59 = v212;
    v149 = v212;
    v150 = *((_QWORD *)&v207 + 1);
    v60 = v213;
    v146 = v213;
    v147 = v209;
    v61 = v214;
    v62 = v215;
    v144 = v215;
    v156 = static VerticalAlignment.center.getter(v54, v63, v64, v65, v66, v67, v68, v69);
    sub_1001B8BF8(v53, 0x8000000100214BF0, (uint64_t (*)(__n128))sub_10015DD88, (uint64_t)&v207);
    v162 = *((_QWORD *)&v207 + 1);
    v163 = v207;
    v155 = v210;
    LODWORD(v152) = v211;
    v160 = v212;
    v161 = v209;
    v159 = v213;
    LOBYTE(v53) = v214;
    v142 = v215;
    LOBYTE(v181[0]) = 1;
    v70 = v56;
    LODWORD(v148) = v56;
    LOBYTE(v180[0]) = v56;
    LOBYTE(v179[0]) = v58;
    v145 = v61;
    v178[0] = v61;
    v177[0] = 1;
    v176 = v208;
    v71 = v208;
    v175 = v211;
    v174 = v214;
    LODWORD(v153) = v214;
    v72 = v141;
    sub_10014BE1C(v141, v55, v70);
    swift_bridgeObjectRetain(v57);
    sub_10014BE1C(v59, v60, v61);
    swift_bridgeObjectRetain(v62);
    v74 = v162;
    v73 = v163;
    v143 = v71;
    sub_10014BE1C(v163, v162, v71);
    v75 = v161;
    swift_bridgeObjectRetain(v161);
    v76 = v159;
    v77 = v160;
    sub_10014BE1C(v160, v159, v53);
    v78 = v142;
    swift_bridgeObjectRetain(v142);
    sub_10014BE2C(v73, v74, v71);
    swift_bridgeObjectRelease(v75);
    sub_10014BE2C(v77, v76, v53);
    swift_bridgeObjectRelease(v78);
    v79 = v150;
    LOBYTE(v71) = v148;
    sub_10014BE2C(v72, v150, v148);
    v80 = v147;
    swift_bridgeObjectRelease(v147);
    v81 = v149;
    v82 = v146;
    LOBYTE(v76) = v145;
    sub_10014BE2C(v149, v146, v145);
    v83 = v144;
    swift_bridgeObjectRelease(v144);
    v182 = v158;
    v183 = 1;
    v184 = v72;
    v185 = v79;
    v186 = v71;
    v187 = v80;
    v188 = v157;
    v189 = v151;
    v190 = v81;
    v191 = v82;
    v192 = v76;
    v193 = v83;
    v194 = v156;
    v195 = 0;
    v196 = 1;
    v197 = v163;
    v198 = v162;
    v199 = v143;
    v200 = v161;
    v201 = v155;
    v202 = v152;
    v203 = v160;
    v204 = v159;
    v205 = v153;
    v206 = v78;
    nullsub_1(&v182);
  }
  else
  {
    sub_1001BBE4C(&v182);
  }
  v84 = sub_10014BC64((uint64_t)&v182, (uint64_t)&v207, &qword_1002B7510);
  v85 = v164;
  v86 = Divider.init()(v84);
  v153 = static VerticalAlignment.center.getter(v86, v87, v88, v89, v90, v91, v92, v93);
  v94 = v168;
  v95 = sub_1001B8DB4(v168, (uint64_t)&v182);
  v155 = *((_QWORD *)&v182 + 1);
  v156 = v182;
  LODWORD(v147) = v183;
  v151 = v185;
  LODWORD(v146) = v186;
  v157 = v184;
  v158 = v188;
  v96 = v189;
  v159 = v187;
  v160 = v190;
  v152 = static VerticalAlignment.center.getter(v95, v97, v98, v99, v100, v101, v102, v103);
  sub_1001B9024(v94, (uint64_t)&v182);
  v148 = *((_QWORD *)&v182 + 1);
  v149 = v182;
  LOBYTE(v94) = v183;
  v150 = v185;
  v104 = v186;
  v162 = v187;
  v163 = v184;
  v161 = v188;
  v105 = v189;
  v168 = v190;
  sub_10014BC64((uint64_t)&v232, (uint64_t)v178, &qword_1002B7510);
  sub_10014BC64((uint64_t)&v207, (uint64_t)v177, &qword_1002B7510);
  v106 = v166;
  v107 = *(void (**)(char *, char *, uint64_t))(v165 + 16);
  v108 = v167;
  v107(v166, v85, v167);
  v176 = 1;
  v175 = v147;
  v174 = v146;
  v173 = v96;
  v172 = 1;
  v171 = v94;
  v170 = v104;
  v169 = v105;
  sub_10014BC64((uint64_t)v178, (uint64_t)v179, &qword_1002B7510);
  v109 = v154;
  sub_10014BC64((uint64_t)v179, v154, &qword_1002B7510);
  sub_10014BC64((uint64_t)v177, (uint64_t)v180, &qword_1002B7510);
  sub_10014BC64((uint64_t)v180, v109 + 208, &qword_1002B7510);
  v110 = (int *)sub_100146438(&qword_1002B7518);
  v107((char *)(v109 + v110[16]), v106, v108);
  v111 = v109 + v110[20];
  v112 = v176;
  v113 = v175;
  LODWORD(v146) = v175;
  v114 = v174;
  v115 = v173;
  LODWORD(v147) = v173;
  *(_QWORD *)v111 = v153;
  *(_QWORD *)(v111 + 8) = 0;
  *(_BYTE *)(v111 + 16) = v112;
  v117 = v155;
  v116 = v156;
  *(_QWORD *)(v111 + 24) = v156;
  *(_QWORD *)(v111 + 32) = v117;
  *(_BYTE *)(v111 + 40) = v113;
  v118 = v157;
  v119 = v158;
  v120 = v151;
  v121 = v152;
  *(_QWORD *)(v111 + 48) = v157;
  *(_QWORD *)(v111 + 56) = v120;
  *(_BYTE *)(v111 + 64) = v114;
  v123 = v159;
  v122 = v160;
  *(_QWORD *)(v111 + 72) = v159;
  *(_QWORD *)(v111 + 80) = v119;
  *(_BYTE *)(v111 + 88) = v115;
  *(_QWORD *)(v111 + 96) = v122;
  v124 = v109 + v110[24];
  LOBYTE(v120) = v172;
  v125 = v171;
  LODWORD(v153) = v171;
  v126 = v170;
  v127 = v169;
  LODWORD(v154) = v169;
  *(_QWORD *)v124 = v121;
  *(_QWORD *)(v124 + 8) = 0;
  *(_BYTE *)(v124 + 16) = v120;
  v129 = v148;
  v128 = v149;
  *(_QWORD *)(v124 + 24) = v149;
  *(_QWORD *)(v124 + 32) = v129;
  *(_BYTE *)(v124 + 40) = v125;
  *(_QWORD *)(v124 + 48) = v163;
  *(_QWORD *)(v124 + 56) = v150;
  *(_BYTE *)(v124 + 64) = v126;
  v130 = v161;
  *(_QWORD *)(v124 + 72) = v162;
  *(_QWORD *)(v124 + 80) = v130;
  *(_BYTE *)(v124 + 88) = v127;
  *(_QWORD *)(v124 + 96) = v168;
  sub_1001BBF48(v179, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001BBE70);
  sub_1001BBF48(v180, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001BBE70);
  sub_10014BE1C(v116, v117, v146);
  swift_bridgeObjectRetain(v118);
  sub_10014BE1C(v123, v119, v147);
  swift_bridgeObjectRetain(v122);
  v131 = v128;
  v132 = v129;
  sub_10014BE1C(v128, v129, v153);
  v133 = v163;
  swift_bridgeObjectRetain(v163);
  v135 = v161;
  v134 = v162;
  sub_10014BE1C(v162, v161, v154);
  v136 = *(void (**)(char *, uint64_t))(v165 + 8);
  v137 = v168;
  swift_bridgeObjectRetain(v168);
  v138 = v167;
  v136(v164, v167);
  LOBYTE(v128) = v169;
  sub_10014BE2C(v131, v132, v171);
  swift_bridgeObjectRelease(v133);
  sub_10014BE2C(v134, v135, v128);
  swift_bridgeObjectRelease(v137);
  LOBYTE(v128) = v173;
  sub_10014BE2C(v156, v155, v175);
  swift_bridgeObjectRelease(v157);
  sub_10014BE2C(v159, v158, v128);
  swift_bridgeObjectRelease(v160);
  v136(v166, v138);
  sub_10014BC64((uint64_t)v177, (uint64_t)v181, &qword_1002B7510);
  sub_1001BBF48(v181, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001BBFB4);
  sub_10014BC64((uint64_t)v178, (uint64_t)&v182, &qword_1002B7510);
  return sub_1001BBF48(&v182, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001BBFB4);
}

uint64_t sub_1001B89F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double (*a3)(__n128)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t KeyPath;
  uint64_t v19;
  id v20;
  __n128 v21;
  void *v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD v33[3];

  v7 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, a2);
  v8 = Text.init(_:tableName:bundle:comment:)(v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1002402A0;
  v17 = *(void **)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_1002435D8);
  v19 = swift_getKeyPath(&unk_100243600);
  v20 = v17;
  static Published.subscript.getter(v33, v20, KeyPath, v19);

  swift_release(KeyPath);
  v21 = swift_release(v19);
  v22 = (void *)v33[0];
  v23 = a3(v21);

  *(_QWORD *)(v16 + 56) = &type metadata for Double;
  *(_QWORD *)(v16 + 64) = &protocol witness table for Double;
  *(double *)(v16 + 32) = v23;
  v33[0] = String.init(format:_:)(0x7370624D66322E25, 0xE800000000000000, v16);
  v33[1] = v24;
  v25 = sub_10014654C();
  v26 = Text.init<A>(_:)(v33, &type metadata for String, v25);
  v28 = v27;
  v30 = v29;
  LOBYTE(v33[0]) = v14;
  LOBYTE(v19) = v31 & 1;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  *(_BYTE *)(a4 + 16) = v14;
  *(_QWORD *)(a4 + 24) = v12;
  *(_QWORD *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 40) = 1;
  *(_QWORD *)(a4 + 48) = v26;
  *(_QWORD *)(a4 + 56) = v27;
  *(_BYTE *)(a4 + 64) = v31 & 1;
  *(_QWORD *)(a4 + 72) = v29;
  sub_10014BE1C(v8, v10, v14);
  swift_bridgeObjectRetain(v12);
  sub_10014BE1C(v26, v28, v19);
  swift_bridgeObjectRetain(v30);
  sub_10014BE2C(v26, v28, v19);
  swift_bridgeObjectRelease(v30);
  sub_10014BE2C(v8, v10, v33[0]);
  return swift_bridgeObjectRelease(v12);
}

uint64_t sub_1001B8BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(__n128)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  void *v15;
  uint64_t KeyPath;
  uint64_t v17;
  id v18;
  __n128 v19;
  void *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD v34[3];

  v7 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000014, a2);
  v8 = Text.init(_:tableName:bundle:comment:)(v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = *(void **)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_1002435D8);
  v17 = swift_getKeyPath(&unk_100243600);
  v18 = v15;
  static Published.subscript.getter(v34, v18, KeyPath, v17);

  swift_release(KeyPath);
  v19 = swift_release(v17);
  v20 = (void *)v34[0];
  v21 = a3(v19);
  LOBYTE(v17) = v22;

  v23 = sub_1001A1308(v21, v17);
  v25 = v24;

  v34[0] = v23;
  v34[1] = v25;
  v26 = sub_10014654C();
  v27 = Text.init<A>(_:)(v34, &type metadata for String, v26);
  v29 = v28;
  v31 = v30;
  LOBYTE(v34[0]) = v14;
  LOBYTE(v18) = v32 & 1;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  *(_BYTE *)(a4 + 16) = v14;
  *(_QWORD *)(a4 + 24) = v12;
  *(_QWORD *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 40) = 1;
  *(_QWORD *)(a4 + 48) = v27;
  *(_QWORD *)(a4 + 56) = v28;
  *(_BYTE *)(a4 + 64) = v32 & 1;
  *(_QWORD *)(a4 + 72) = v30;
  sub_10014BE1C(v8, v10, v14);
  swift_bridgeObjectRetain(v12);
  sub_10014BE1C(v27, v29, (char)v18);
  swift_bridgeObjectRetain(v31);
  sub_10014BE2C(v27, v29, (char)v18);
  swift_bridgeObjectRelease(v31);
  sub_10014BE2C(v8, v10, v34[0]);
  return swift_bridgeObjectRelease(v12);
}

uint64_t sub_1001B8DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  void *v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v34;
  char v35;

  v4 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = LocalizedStringKey.init(stringLiteral:)(0x79726F6765746143, 0xE90000000000003ALL);
  v8 = Text.init(_:tableName:bundle:comment:)(v7);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(3, 2);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v15);
  v16 = *(_QWORD *)(a1 + 8) + OBJC_IVAR____TtC13FTMInternal_427SURLSessionRunningViewModel_configuration;
  v17._countAndFlagsBits = sub_1001A3EE0(*(_BYTE *)(v16 + 26));
  object = v17._object;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v17);
  swift_bridgeObjectRelease(object);
  v19._countAndFlagsBits = 10272;
  v19._object = (void *)0xE200000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v19);
  v20 = qword_1002436C0[*(char *)(v16 + 26)];
  LOBYTE(object) = v12 & 1;
  v21 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v22 = swift_allocObject(v21, 72, 7);
  *(_OWORD *)(v22 + 16) = xmmword_1002402A0;
  *(_QWORD *)(v22 + 56) = &type metadata for Int;
  *(_QWORD *)(v22 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v22 + 32) = v20;
  v23._countAndFlagsBits = String.init(format:_:)(0x5832257830, 0xE500000000000000, v22);
  v24 = v23._object;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v23);
  swift_bridgeObjectRelease(v24);
  v25._countAndFlagsBits = 41;
  v25._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v25);
  v26 = LocalizedStringKey.init(stringInterpolation:)(v6);
  v27 = Text.init(_:tableName:bundle:comment:)(v26);
  v29 = v28;
  v31 = v30;
  v35 = (char)object;
  LOBYTE(v20) = v32 & 1;
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = (_BYTE)object;
  *(_QWORD *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = v27;
  *(_QWORD *)(a2 + 56) = v28;
  *(_BYTE *)(a2 + 64) = v32 & 1;
  *(_QWORD *)(a2 + 72) = v30;
  sub_10014BE1C(v8, v10, (char)object);
  swift_bridgeObjectRetain(v14);
  sub_10014BE1C(v27, v29, v20);
  swift_bridgeObjectRetain(v31);
  sub_10014BE2C(v27, v29, v20);
  swift_bridgeObjectRelease(v31);
  sub_10014BE2C(v8, v10, v35);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_1001B9024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t KeyPath;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v39[3];

  v4 = sub_100146438(&qword_1002B7520);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v39[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = LocalizedStringKey.init(stringLiteral:)(0x65746E4920504450, 0xEE003A6563616672);
  v8 = Text.init(_:tableName:bundle:comment:)(v7);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = *(void **)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_1002435D8);
  v17 = swift_getKeyPath(&unk_100243600);
  v18 = v15;
  static Published.subscript.getter(v39, v18, KeyPath, v17);

  swift_release(KeyPath);
  swift_release(v17);
  v19 = (void *)v39[0];
  v20 = swift_getKeyPath(&unk_100243620);
  v21 = swift_getKeyPath(&unk_100243648);
  static Published.subscript.getter(v39, v19, v20, v21);

  swift_release(v20);
  swift_release(v21);
  v22 = v39[0];
  sub_100184C0C(v39[0], v6);
  swift_bridgeObjectRelease(v22);
  v23 = sub_100146438(&qword_1002B4AA0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v6, 1, v23) == 1)
  {
    sub_10014BDE0((uint64_t)v6, &qword_1002B7520);
    v25 = *(_QWORD *)aPdpIp0;
    v24 = unk_1002B62A0;
    swift_bridgeObjectRetain(unk_1002B62A0);
  }
  else
  {
    v26 = (uint64_t)v6 + *(int *)(v23 + 48);
    v27 = (uint64_t *)(v26 + *(int *)(type metadata accessor for STransferMetrics(0) + 40));
    v25 = *v27;
    v24 = v27[1];
    swift_bridgeObjectRetain(v24);
    sub_100159F1C(v26);
  }
  v28 = v12 & 1;
  v39[0] = v25;
  v39[1] = v24;
  v29 = sub_10014654C();
  v30 = Text.init<A>(_:)(v39, &type metadata for String, v29);
  v32 = v31;
  v34 = v33;
  LOBYTE(v39[0]) = v28;
  v36 = v35 & 1;
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = v28;
  *(_QWORD *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = v30;
  *(_QWORD *)(a2 + 56) = v31;
  *(_BYTE *)(a2 + 64) = v35 & 1;
  *(_QWORD *)(a2 + 72) = v33;
  sub_10014BE1C(v8, v10, v28);
  swift_bridgeObjectRetain(v14);
  sub_10014BE1C(v30, v32, v36);
  swift_bridgeObjectRetain(v34);
  sub_10014BE2C(v30, v32, v36);
  swift_bridgeObjectRelease(v34);
  sub_10014BE2C(v8, v10, v39[0]);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_1001B92F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t KeyPath;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v31 = a2;
  v3 = type metadata accessor for SURLSessionRunningView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = sub_100146438(&qword_1002B7470);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_1002435D8);
  v12 = swift_getKeyPath(&unk_100243600);
  v13 = v10;
  static Published.subscript.getter(&v32, v13, KeyPath, v12);

  swift_release(KeyPath);
  swift_release(v12);
  v14 = v32;
  v15 = swift_getKeyPath(&unk_100243620);
  v16 = swift_getKeyPath(&unk_100243648);
  static Published.subscript.getter(&v32, v14, v15, v16);

  swift_release(v15);
  swift_release(v16);
  v17 = v32;
  v18 = swift_bridgeObjectRetain(v32);
  v19 = sub_1001958B4(v18);
  swift_bridgeObjectRelease(v17);
  v32 = v19;
  sub_1001B635C(&v32);
  swift_bridgeObjectRelease(v17);
  v20 = swift_getKeyPath(&unk_100243668);
  sub_1001BA638(a1, (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(unsigned __int8 *)(v4 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = swift_allocObject(&unk_1002660B0, v22 + v5, v21 | 7);
  sub_1001BA680((uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22);
  v24 = swift_allocObject(&unk_1002660D8, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_1001BABE0;
  *(_QWORD *)(v24 + 24) = v23;
  v25 = sub_100146438(&qword_1002B74A0);
  v26 = sub_100146438(&qword_1002B7488);
  v27 = sub_10014BEC0(&qword_1002B74A8, &qword_1002B74A0, (uint64_t)&protocol conformance descriptor for [A]);
  v28 = sub_10014BEC0(&qword_1002B7480, &qword_1002B7488, (uint64_t)&protocol conformance descriptor for VStack<A>);
  ForEach<>.init(_:id:content:)(&v32, v20, sub_1001BAC34, v24, v25, v26, v27, &protocol witness table for Int, v28);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v31, v9, v6);
}

int *sub_1001B95A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;

  *(_QWORD *)a4 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  v7 = sub_100146438(&qword_1002B74B0);
  return sub_1001B9604(a2, a3, a4 + *(int *)(v7 + 44));
}

int *sub_1001B9604@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  __n128 v49;
  uint64_t *v50;
  _QWORD v51[4];
  _QWORD v52[2];
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  char v66;

  v59 = a2;
  v5 = type metadata accessor for LinearProgressViewStyle(0);
  v62 = *(_QWORD *)(v5 - 8);
  v63 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100146438(&qword_1002B74B8);
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100146438(&qword_1002B74C0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100146438(&qword_1002B74C8);
  __chkstk_darwin(v15);
  v17 = (char *)v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (int *)type metadata accessor for STransferMetrics(0);
  v19 = *(_QWORD *)(a1 + result[15]);
  v20 = *(_QWORD *)(a1 + result[14]);
  v21 = __OFADD__(v19, v20);
  v22 = v19 + v20;
  if (v21)
  {
    __break(1u);
    goto LABEL_14;
  }
  v23 = result;
  v57 = v11;
  v58 = a3;
  v55 = v14;
  v56 = v12;
  v53 = v15;
  v54 = v17;
  if (!v22)
  {
    v27 = 0.0;
    goto LABEL_6;
  }
  v24 = *(_QWORD *)(a1 + result[13]);
  v25 = *(_QWORD *)(a1 + result[12]);
  v21 = __OFADD__(v24, v25);
  v26 = v24 + v25;
  if (v21)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v27 = (double)v26 / (double)v22;
LABEL_6:
  v52[1] = v52;
  v65 = v27;
  v66 = 0;
  v28 = __chkstk_darwin(result);
  __chkstk_darwin(v28);
  v64 = 0x3FF0000000000000;
  v29 = sub_100146438(&qword_1002B74D0);
  v30 = sub_100146438(&qword_1002B74D8);
  v31 = sub_1001BAC9C();
  v51[2] = sub_10014BEC0(&qword_1002B74F8, &qword_1002B74D8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v51[3] = sub_10014BD58();
  v51[0] = &type metadata for Double;
  v51[1] = v31;
  v32 = ((uint64_t (*)(double *, uint64_t *, uint64_t (*)@<X0>(uint64_t@<X1>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X4>, uint64_t@<X5>, uint64_t@<X6>, uint64_t@<X7>, uint64_t@<X8>), _QWORD *, double (*)@<D0>(uint64_t@<X8>), _QWORD *, uint64_t, uint64_t))ProgressView.init<A>(value:total:label:currentValueLabel:))(&v65, &v64, sub_1001BAC8C, v51, sub_1001BAC94, v51, v29, v30);
  LinearProgressViewStyle.init()(v32);
  v33 = sub_10014BEC0(&qword_1002B7500, &qword_1002B74B8, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
  v34 = sub_100146004(&qword_1002B7508, (uint64_t (*)(uint64_t))&type metadata accessor for LinearProgressViewStyle, (uint64_t)&protocol conformance descriptor for LinearProgressViewStyle);
  v35 = v55;
  v36 = v61;
  v37 = v63;
  View.progressViewStyle<A>(_:)(v7, v61, v63, v33, v34);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v7, v37);
  v38 = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v10, v36);
  if (*(_QWORD *)(a1 + v23[16]))
  {
    v40 = static Color.red.getter(v38);
    v42 = v56;
    v41 = v57;
    v44 = v53;
    v43 = (uint64_t)v54;
  }
  else
  {
    v45 = *(unsigned __int8 *)(a1 + v23[17]);
    v42 = v56;
    v41 = v57;
    v44 = v53;
    v43 = (uint64_t)v54;
    if (v45 == 1)
      v46 = static Color.green.getter(v38);
    else
      v46 = static Color.blue.getter(v38, v39);
    v40 = v46;
  }
  KeyPath = swift_getKeyPath(&unk_100243688);
  v65 = *(double *)&v40;
  swift_retain(v40);
  v48 = AnyShapeStyle.init<A>(_:)(&v65, &type metadata for Color, &protocol witness table for Color);
  (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v43, v35, v41);
  v49 = swift_release(v40);
  v50 = (uint64_t *)(v43 + *(int *)(v44 + 36));
  *v50 = KeyPath;
  v50[1] = v48;
  (*(void (**)(char *, uint64_t, __n128))(v42 + 8))(v35, v41, v49);
  return (int *)sub_10014BC64(v43, v58, &qword_1002B74C8);
}

uint64_t sub_1001B99F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD v25[2];
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v24 = static VerticalAlignment.center.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = sub_1001B9AC0(a1, (uint64_t)v25);
  v12 = v25[0];
  v13 = v25[1];
  v14 = v26;
  v15 = v27;
  v16 = v28;
  v17 = v29;
  v19 = v30;
  v18 = v31;
  v23 = v32;
  v22 = v33;
  v20 = static Font.caption.getter(v11);
  result = swift_getKeyPath(&unk_1002435A8);
  *(_QWORD *)a9 = v24;
  *(_QWORD *)(a9 + 8) = 0;
  *(_BYTE *)(a9 + 16) = 1;
  *(_QWORD *)(a9 + 24) = v12;
  *(_QWORD *)(a9 + 32) = v13;
  *(_BYTE *)(a9 + 40) = v14;
  *(_QWORD *)(a9 + 48) = v15;
  *(_QWORD *)(a9 + 56) = v16;
  *(_BYTE *)(a9 + 64) = v17;
  *(_QWORD *)(a9 + 72) = v19;
  *(_QWORD *)(a9 + 80) = v18;
  *(_BYTE *)(a9 + 88) = v23;
  *(_QWORD *)(a9 + 96) = v22;
  *(_QWORD *)(a9 + 104) = result;
  *(_QWORD *)(a9 + 112) = v20;
  return result;
}

uint64_t sub_1001B9AC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v4 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v37 - v8;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(7, 1);
  v10._countAndFlagsBits = 0x203A7373616C63;
  v10._object = (void *)0xE700000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v10);
  v11 = type metadata accessor for STransferMetrics(0);
  if ((*(_BYTE *)(a1 + *(int *)(v11 + 36)) & 1) == 0)
    __asm { BR              X10 }
  v12._countAndFlagsBits = 42;
  v12._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v12);
  swift_bridgeObjectRelease(0xE100000000000000);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v13);
  v14 = LocalizedStringKey.init(stringInterpolation:)(v9);
  v15 = Text.init(_:tableName:bundle:comment:)(v14);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 2);
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v22);
  if (*(_BYTE *)(a1 + 8))
    v23 = 0x4B4E494C4E574F44;
  else
    v23 = 0x4B4E494C5055;
  if (*(_BYTE *)(a1 + 8))
    v24 = 0xE800000000000000;
  else
    v24 = 0xE600000000000000;
  v25 = v24;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease(v24);
  v26._countAndFlagsBits = 46;
  v26._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v26);
  v39 = *(_QWORD *)(a1 + *(int *)(v11 + 32));
  LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v39, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v27);
  v28 = LocalizedStringKey.init(stringInterpolation:)(v7);
  v29 = Text.init(_:tableName:bundle:comment:)(v28);
  v31 = v30;
  v33 = v32;
  v38 = v21;
  v35 = v34 & 1;
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v17;
  *(_BYTE *)(a2 + 16) = v21;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = v29;
  *(_QWORD *)(a2 + 56) = v30;
  *(_BYTE *)(a2 + 64) = v34 & 1;
  *(_QWORD *)(a2 + 72) = v32;
  sub_10014BE1C(v15, v17, v21);
  swift_bridgeObjectRetain(v19);
  sub_10014BE1C(v29, v31, v35);
  swift_bridgeObjectRetain(v33);
  sub_10014BE2C(v29, v31, v35);
  swift_bridgeObjectRelease(v33);
  sub_10014BE2C(v15, v17, v38);
  return swift_bridgeObjectRelease(v19);
}

void sub_1001B9DA4()
{
  JUMPOUT(0x1001B9B80);
}

void sub_1001B9DB4()
{
  JUMPOUT(0x1001B9B80);
}

void sub_1001B9DC8()
{
  JUMPOUT(0x1001B9B80);
}

void sub_1001B9DE4()
{
  JUMPOUT(0x1001B9B80);
}

void sub_1001B9DF8()
{
  JUMPOUT(0x1001B9B80);
}

void sub_1001B9E4C()
{
  JUMPOUT(0x1001B9B80);
}

double sub_1001B9E70@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double result;
  __int128 v19;
  _OWORD v20[12];
  _BYTE v21[199];

  v6 = static HorizontalAlignment.center.getter(a1);
  sub_1001B9F74(a1, a2, v7, v8, v9, v10, v11, v12, (uint64_t)v20);
  *(_OWORD *)&v21[135] = v20[8];
  *(_OWORD *)&v21[151] = v20[9];
  *(_OWORD *)&v21[167] = v20[10];
  *(_OWORD *)&v21[183] = v20[11];
  *(_OWORD *)&v21[71] = v20[4];
  *(_OWORD *)&v21[87] = v20[5];
  *(_OWORD *)&v21[103] = v20[6];
  *(_OWORD *)&v21[119] = v20[7];
  *(_OWORD *)&v21[7] = v20[0];
  *(_OWORD *)&v21[23] = v20[1];
  *(_OWORD *)&v21[39] = v20[2];
  *(_OWORD *)&v21[55] = v20[3];
  v13 = *(_OWORD *)&v21[128];
  *(_OWORD *)(a3 + 161) = *(_OWORD *)&v21[144];
  v14 = *(_OWORD *)&v21[176];
  *(_OWORD *)(a3 + 177) = *(_OWORD *)&v21[160];
  *(_OWORD *)(a3 + 193) = v14;
  v15 = *(_OWORD *)&v21[64];
  *(_OWORD *)(a3 + 97) = *(_OWORD *)&v21[80];
  v16 = *(_OWORD *)&v21[112];
  *(_OWORD *)(a3 + 113) = *(_OWORD *)&v21[96];
  *(_OWORD *)(a3 + 129) = v16;
  *(_OWORD *)(a3 + 145) = v13;
  v17 = *(_OWORD *)v21;
  *(_OWORD *)(a3 + 33) = *(_OWORD *)&v21[16];
  result = *(double *)&v21[32];
  v19 = *(_OWORD *)&v21[48];
  *(_OWORD *)(a3 + 49) = *(_OWORD *)&v21[32];
  *(_OWORD *)(a3 + 65) = v19;
  *(_OWORD *)(a3 + 81) = v15;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 208) = *(_QWORD *)&v21[191];
  *(_OWORD *)(a3 + 17) = v17;
  return result;
}

uint64_t sub_1001B9F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;

  v40 = static VerticalAlignment.center.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = sub_1001BA16C(a2, (uint64_t)&v43);
  v41 = v44;
  v42 = v43;
  v12 = v45;
  v13 = v46;
  v33 = v46;
  v36 = v48;
  v37 = v47;
  v14 = v50;
  v15 = v52;
  v38 = v51;
  v39 = v49;
  v16 = v53;
  v17 = v54;
  v35 = static VerticalAlignment.center.getter(v11, v18, v19, v20, v21, v22, v23, v24);
  sub_1001BA3D8((uint64_t)&v43);
  v25 = v43;
  v26 = v44;
  v27 = v45;
  v28 = v46;
  v29 = v47;
  v30 = v48;
  v34 = v48;
  LOBYTE(v43) = 1;
  v60 = v12;
  v59 = v14;
  v58 = v16;
  v57 = 1;
  v56 = v44;
  v55 = v47;
  *(_QWORD *)a9 = v40;
  *(_QWORD *)(a9 + 8) = 0;
  *(_BYTE *)(a9 + 16) = 1;
  *(_QWORD *)(a9 + 24) = v42;
  *(_QWORD *)(a9 + 32) = v41;
  *(_BYTE *)(a9 + 40) = v12;
  *(_QWORD *)(a9 + 48) = v13;
  *(_QWORD *)(a9 + 56) = v37;
  *(_QWORD *)(a9 + 64) = v36;
  *(_QWORD *)(a9 + 72) = v39;
  *(_BYTE *)(a9 + 80) = v14;
  *(_QWORD *)(a9 + 88) = v38;
  *(_QWORD *)(a9 + 96) = v15;
  *(_BYTE *)(a9 + 104) = v16;
  *(_QWORD *)(a9 + 112) = v17;
  *(_QWORD *)(a9 + 120) = v35;
  *(_QWORD *)(a9 + 128) = 0;
  *(_BYTE *)(a9 + 136) = 1;
  *(_QWORD *)(a9 + 144) = v25;
  *(_BYTE *)(a9 + 152) = v26;
  v31 = v27;
  *(_QWORD *)(a9 + 160) = v27;
  *(_QWORD *)(a9 + 168) = v28;
  *(_BYTE *)(a9 + 176) = v29;
  *(_QWORD *)(a9 + 184) = v30;
  sub_10014BE1C(v42, v41, v12);
  swift_retain(v36);
  swift_bridgeObjectRetain(v33);
  swift_retain(v37);
  sub_10014BE1C(v38, v15, v16);
  swift_bridgeObjectRetain(v17);
  sub_10014BE1C(v31, v28, v29);
  swift_bridgeObjectRetain(v34);
  sub_10014BE2C(v31, v28, v29);
  swift_bridgeObjectRelease(v34);
  sub_10014BE2C(v42, v41, v12);
  swift_release(v36);
  swift_release(v37);
  swift_bridgeObjectRelease(v33);
  sub_10014BE2C(v38, v15, v16);
  return swift_bridgeObjectRelease(v17);
}

uint64_t sub_1001BA16C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = sub_1001A11E8(a1);
  v38 = v4;
  v5 = sub_10014654C();
  v6 = Text.init<A>(_:)(&v37, &type metadata for String, v5);
  v8 = v7;
  v10 = v9;
  v36 = v11;
  v12 = (int *)type metadata accessor for STransferMetrics(0);
  if (*(_QWORD *)(a1 + v12[16]))
    v13 = static Color.red.getter();
  else
    v13 = static Color.primary.getter();
  v14 = v13;
  KeyPath = swift_getKeyPath(&unk_100243688);
  v37 = v14;
  v16 = AnyShapeStyle.init<A>(_:)(&v37, &type metadata for Color, &protocol witness table for Color);
  v17 = sub_100146438((uint64_t *)&unk_1002B57E0);
  result = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(result + 16) = xmmword_1002402A0;
  v19 = *(_QWORD *)(a1 + v12[13]);
  v20 = *(_QWORD *)(a1 + v12[12]);
  v21 = __OFADD__(v19, v20);
  v22 = v19 + v20;
  if (v21)
  {
    __break(1u);
  }
  else if ((unint64_t)(v22 - 0x1000000000000000) >> 61 == 7)
  {
    v23 = result;
    v24 = v10 & 1;
    v25 = (double)(8 * v22);
    v26 = sub_10015924C();
    *(_QWORD *)(v23 + 56) = &type metadata for Double;
    *(_QWORD *)(v23 + 64) = &protocol witness table for Double;
    *(double *)(v23 + 32) = v25 / v26 / 1000000.0;
    v37 = String.init(format:_:)(0x7370624D66322E25, 0xE800000000000000, v23);
    v38 = v27;
    v28 = Text.init<A>(_:)(&v37, &type metadata for String, v5);
    v30 = v29;
    v31 = v28;
    v33 = v32;
    LOBYTE(v37) = v24;
    v35 = v34 & 1;
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v8;
    *(_BYTE *)(a2 + 16) = v24;
    *(_QWORD *)(a2 + 24) = v36;
    *(_QWORD *)(a2 + 32) = KeyPath;
    *(_QWORD *)(a2 + 40) = v16;
    *(_QWORD *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 56) = 1;
    *(_QWORD *)(a2 + 64) = v28;
    *(_QWORD *)(a2 + 72) = v29;
    *(_BYTE *)(a2 + 80) = v34 & 1;
    *(_QWORD *)(a2 + 88) = v32;
    sub_10014BE1C(v6, v8, v24);
    swift_bridgeObjectRetain(v36);
    swift_retain(KeyPath);
    swift_retain(v16);
    sub_10014BE1C(v31, v30, v35);
    swift_bridgeObjectRetain(v33);
    sub_10014BE2C(v31, v30, v35);
    swift_bridgeObjectRelease(v33);
    sub_10014BE2C(v6, v8, v37);
    swift_release(v16);
    swift_release(KeyPath);
    return swift_bridgeObjectRelease(v36);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001BA3D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::String v5;
  double v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v2 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 1);
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v5);
  v6 = sub_10015924C();
  if (qword_1002B39B8 != -1)
    swift_once(&qword_1002B39B8, sub_1001591E4);
  v7 = objc_msgSend((id)qword_1002B47A0, "stringFromTimeInterval:", v6);
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

  }
  else
  {
    v24 = 0;
    v25 = 0xE000000000000000;
    Double.write<A>(to:)(&v24, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v6);
    v9 = v24;
    v11 = (void *)v25;
  }
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v12);
  swift_bridgeObjectRelease(v11);
  v13._countAndFlagsBits = 0x64657370616C6520;
  v13._object = (void *)0xE800000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v13);
  v14 = LocalizedStringKey.init(stringInterpolation:)(v4);
  v15 = Text.init(_:tableName:bundle:comment:)(v14);
  v17 = v16;
  v19 = v18;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v21 = v20 & 1;
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 24) = v16;
  *(_BYTE *)(a1 + 32) = v20 & 1;
  *(_QWORD *)(a1 + 40) = v18;
  sub_10014BE1C(v15, v16, v20 & 1);
  swift_bridgeObjectRetain(v19);
  sub_10014BE2C(v15, v17, v21);
  return swift_bridgeObjectRelease(v19);
}

uint64_t sub_1001BA5C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1001BA5E4()
{
  sub_1001B7164();
}

uint64_t sub_1001BA5EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001BA610(uint64_t a1)
{
  uint64_t v1;

  return sub_1001B720C(a1, *(void (**)(_QWORD *))(v1 + 16));
}

uint64_t sub_1001BA618()
{
  return sub_10019B05C();
}

uint64_t sub_1001BA638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SURLSessionRunningView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BA680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SURLSessionRunningView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BA6C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SURLSessionRunningView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1002B73B4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10016A798;
  return sub_1001B7284(v3);
}

uint64_t sub_1001BA728()
{
  uint64_t v0;

  return sub_1001B798C(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1001BA730()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B73C0;
  if (!qword_1002B73C0)
  {
    v1 = sub_1001464C4(&qword_1002B7398);
    sub_1001BA7B4();
    sub_100146004(&qword_1002B73D8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B73C0);
  }
  return result;
}

unint64_t sub_1001BA7B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B73C8;
  if (!qword_1002B73C8)
  {
    v1 = sub_1001464C4(&qword_1002B7390);
    sub_10014BEC0(&qword_1002B73D0, &qword_1002B7388, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B73C8);
  }
  return result;
}

uint64_t sub_1001BA83C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SURLSessionRunningView(0) - 8) + 80);
  return sub_1001B7A8C(v0 + ((v1 + 16) & ~v1));
}

_QWORD *sub_1001BA868(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_1001BA8AC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRelease(a2);
  return result;
}

unint64_t sub_1001BA8C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B7430;
  if (!qword_1002B7430)
  {
    v1 = sub_1001464C4(&qword_1002B7408);
    sub_10014BEC0(&qword_1002B7420, &qword_1002B7410, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B7430);
  }
  return result;
}

unint64_t sub_1001BA93C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B7438;
  if (!qword_1002B7438)
  {
    v1 = sub_1001464C4(&qword_1002B73F0);
    sub_10014BEC0(&qword_1002B7420, &qword_1002B7410, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    sub_10014BEC0(&qword_1002B7428, &qword_1002B73E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B7438);
  }
  return result;
}

uint64_t sub_1001BA9D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100155C44(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1001BA9E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001BAA08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001BAA30(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_1001BAA58(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_1001BAA80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001B92F0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1001BAA88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B7478;
  if (!qword_1002B7478)
  {
    v1 = sub_1001464C4(&qword_1002B7470);
    sub_10014BEC0(&qword_1002B7480, &qword_1002B7488, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B7478);
  }
  return result;
}

uint64_t sub_1001BAB18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SURLSessionRunningView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  swift_release(*(_QWORD *)(v0 + v4 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 40));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v7 = sub_100146438(&qword_1002B3F00);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

int *sub_1001BABE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SURLSessionRunningView(0) - 8) + 80);
  return sub_1001B95A8(a1, a2, v3 + ((v7 + 16) & ~v7), a3);
}

uint64_t sub_1001BAC34(char *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, char *);
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = sub_100146438(&qword_1002B4AA0);
  return v3(v4, &a1[*(int *)(v5 + 48)]);
}

uint64_t sub_1001BAC8C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;

  return sub_1001B99F4(*(_QWORD *)(v8 + 16), a1, a2, a3, a4, a5, a6, a7, a8);
}

double sub_1001BAC94@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001B9E70(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1001BAC9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002B74E0;
  if (!qword_1002B74E0)
  {
    v1 = sub_1001464C4(&qword_1002B74D0);
    sub_10014BEC0(&qword_1002B74E8, &qword_1002B74F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10014BEC0(&qword_1002B4518, &qword_1002B4520, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1002B74E0);
  }
  return result;
}

Swift::Int sub_1001BAD38(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  Swift::Int v20;
  Swift::Int v21;
  unint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int *v28;
  Swift::Int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int *v36;
  int v37;
  Swift::Int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  Swift::Int v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::Int *v60;
  Swift::Int *v61;
  Swift::Int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  Swift::Int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  Swift::Int v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  Swift::Int v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  Swift::Int v136;
  Swift::Int *v137;
  Swift::Int *v138;
  Swift::Int v139;
  uint64_t *v140;
  uint64_t v141;
  Swift::Int v142;
  uint64_t v143;

  v2 = v1;
  v135 = sub_100146438(&qword_1002B4AA0);
  v4 = *(_QWORD *)(v135 - 8);
  v5 = __chkstk_darwin(v135);
  v7 = (char *)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v141 = (uint64_t)&v125 - v9;
  v10 = __chkstk_darwin(v8);
  v138 = (uint64_t *)((char *)&v125 - v11);
  __chkstk_darwin(v10);
  v137 = (uint64_t *)((char *)&v125 - v12);
  v13 = a1[1];
  result = _minimumMergeRunLength(_:)(v13);
  if (result >= v13)
  {
    if (v13 < 0)
      goto LABEL_139;
    if (v13)
      return sub_1001BB728(0, v13, 1, a1);
    return result;
  }
  if (v13 >= 0)
    v15 = v13;
  else
    v15 = v13 + 1;
  if (v13 < -1)
    goto LABEL_147;
  v127 = result;
  if (v13 < 2)
  {
    v19 = (char *)_swiftEmptyArrayStorage;
    v133 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v126 = _swiftEmptyArrayStorage;
    if (v13 != 1)
    {
      v22 = _swiftEmptyArrayStorage[2];
LABEL_105:
      if (v22 >= 2)
      {
        v118 = *a1;
        do
        {
          v119 = v22 - 2;
          if (v22 < 2)
            goto LABEL_134;
          if (!v118)
            goto LABEL_146;
          v120 = *(_QWORD *)&v19[16 * v119 + 32];
          v121 = *(_QWORD *)&v19[16 * v22 + 24];
          sub_1001BB96C(v118 + *(_QWORD *)(v4 + 72) * v120, v118 + *(_QWORD *)(v4 + 72) * *(_QWORD *)&v19[16 * v22 + 16], v118 + *(_QWORD *)(v4 + 72) * v121, v133);
          if (v2)
            break;
          if (v121 < v120)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
            v19 = sub_100197EBC((uint64_t)v19);
          if (v119 >= *((_QWORD *)v19 + 2))
            goto LABEL_136;
          v122 = &v19[16 * v119 + 32];
          *(_QWORD *)v122 = v120;
          *((_QWORD *)v122 + 1) = v121;
          v123 = *((_QWORD *)v19 + 2);
          if (v22 > v123)
            goto LABEL_137;
          memmove(&v19[16 * v22 + 16], &v19[16 * v22 + 32], 16 * (v123 - v22));
          *((_QWORD *)v19 + 2) = v123 - 1;
          v22 = v123 - 1;
        }
        while (v123 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease(v19);
      v124 = v126;
      v126[2] = 0;
      return swift_bridgeObjectRelease(v124);
    }
    v131 = v7;
  }
  else
  {
    v131 = v7;
    v16 = v15 >> 1;
    v17 = static Array._allocateBufferUninitialized(minimumCapacity:)(v15 >> 1, v135);
    *(_QWORD *)(v17 + 16) = v16;
    v18 = *(unsigned __int8 *)(v4 + 80);
    v126 = (_QWORD *)v17;
    v133 = v17 + ((v18 + 32) & ~v18);
  }
  v20 = 0;
  v19 = (char *)_swiftEmptyArrayStorage;
  v140 = a1;
  v21 = v13;
  v134 = v4;
  while (1)
  {
    v129 = v19;
    v23 = v20;
    v24 = v20 + 1;
    v132 = v20;
    v142 = v21;
    if (v20 + 1 >= v21)
    {
      v31 = v20 + 1;
      v19 = v129;
    }
    else
    {
      v25 = v21;
      v26 = *a1;
      v27 = *(_QWORD *)(v4 + 72);
      v28 = v137;
      sub_10014BD9C(*a1 + v27 * v24, (uint64_t)v137, &qword_1002B4AA0);
      v29 = v138;
      sub_10014BD9C(v26 + v27 * v23, (uint64_t)v138, &qword_1002B4AA0);
      v139 = *v28;
      v136 = *v29;
      sub_10014BDE0((uint64_t)v29, &qword_1002B4AA0);
      sub_10014BDE0((uint64_t)v28, &qword_1002B4AA0);
      v30 = v26;
      v31 = v23 + 2;
      v130 = v30;
      v143 = v27;
      if (v23 + 2 >= v25)
      {
        v4 = v134;
      }
      else
      {
        v128 = v2;
        v32 = v27 * v24;
        v33 = v30;
        v34 = v27 * v31;
        while (1)
        {
          v35 = v31;
          v36 = v137;
          v37 = v139 < v136;
          sub_10014BD9C(v33 + v34, (uint64_t)v137, &qword_1002B4AA0);
          v38 = v138;
          sub_10014BD9C(v33 + v32, (uint64_t)v138, &qword_1002B4AA0);
          v39 = *v36 >= *v38;
          sub_10014BDE0((uint64_t)v38, &qword_1002B4AA0);
          sub_10014BDE0((uint64_t)v36, &qword_1002B4AA0);
          if (v37 == v39)
            break;
          ++v31;
          v33 += v143;
          if (v142 == v35 + 1)
          {
            v31 = v142;
            v4 = v134;
            a1 = v140;
            goto LABEL_25;
          }
        }
        v4 = v134;
        a1 = v140;
LABEL_25:
        v2 = v128;
        v23 = v132;
      }
      v19 = v129;
      if (v139 < v136)
      {
        if (v31 < v23)
          goto LABEL_140;
        if (v23 < v31)
        {
          v128 = v2;
          v40 = 0;
          v41 = v143;
          v42 = v143 * (v31 - 1);
          v43 = v23;
          v44 = v31 * v143;
          v45 = v43;
          v46 = v43 * v143;
          do
          {
            if (v45 != v31 + v40 - 1)
            {
              v47 = v130;
              if (!v130)
                goto LABEL_145;
              v48 = v130 + v46;
              v49 = v130 + v42;
              sub_10014BC64(v130 + v46, (uint64_t)v131, &qword_1002B4AA0);
              if (v46 < v42 || v48 >= v47 + v44)
              {
                swift_arrayInitWithTakeFrontToBack(v47 + v46, v47 + v42);
                v41 = v143;
              }
              else
              {
                v41 = v143;
                if (v46 != v42)
                  swift_arrayInitWithTakeBackToFront(v48, v49);
              }
              sub_10014BC64((uint64_t)v131, v49, &qword_1002B4AA0);
            }
            ++v45;
            --v40;
            v42 -= v41;
            v44 -= v41;
            v46 += v41;
          }
          while (v45 < v31 + v40);
          v2 = v128;
          v19 = v129;
          a1 = v140;
          v4 = v134;
          v23 = v132;
        }
      }
    }
    if (v31 < v142)
    {
      if (__OFSUB__(v31, v23))
        goto LABEL_138;
      if (v31 - v23 < v127)
        break;
    }
LABEL_57:
    if (v31 < v23)
      goto LABEL_133;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    v139 = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v19 = sub_100197984(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v68 = *((_QWORD *)v19 + 2);
    v67 = *((_QWORD *)v19 + 3);
    v22 = v68 + 1;
    if (v68 >= v67 >> 1)
      v19 = sub_100197984((char *)(v67 > 1), v68 + 1, 1, v19);
    *((_QWORD *)v19 + 2) = v22;
    v69 = v19 + 32;
    v70 = &v19[16 * v68 + 32];
    v71 = v139;
    *(_QWORD *)v70 = v132;
    *((_QWORD *)v70 + 1) = v71;
    if (v68)
    {
      while (1)
      {
        v72 = v22 - 1;
        if (v22 >= 4)
        {
          v77 = &v69[16 * v22];
          v78 = *((_QWORD *)v77 - 8);
          v79 = *((_QWORD *)v77 - 7);
          v83 = __OFSUB__(v79, v78);
          v80 = v79 - v78;
          if (v83)
            goto LABEL_122;
          v82 = *((_QWORD *)v77 - 6);
          v81 = *((_QWORD *)v77 - 5);
          v83 = __OFSUB__(v81, v82);
          v75 = v81 - v82;
          v76 = v83;
          if (v83)
            goto LABEL_123;
          v84 = v22 - 2;
          v85 = &v69[16 * v22 - 32];
          v87 = *(_QWORD *)v85;
          v86 = *((_QWORD *)v85 + 1);
          v83 = __OFSUB__(v86, v87);
          v88 = v86 - v87;
          if (v83)
            goto LABEL_125;
          v83 = __OFADD__(v75, v88);
          v89 = v75 + v88;
          if (v83)
            goto LABEL_128;
          if (v89 >= v80)
          {
            v107 = &v69[16 * v72];
            v109 = *(_QWORD *)v107;
            v108 = *((_QWORD *)v107 + 1);
            v83 = __OFSUB__(v108, v109);
            v110 = v108 - v109;
            if (v83)
              goto LABEL_132;
            v100 = v75 < v110;
            goto LABEL_94;
          }
        }
        else
        {
          if (v22 != 3)
          {
            v101 = *((_QWORD *)v19 + 4);
            v102 = *((_QWORD *)v19 + 5);
            v83 = __OFSUB__(v102, v101);
            v94 = v102 - v101;
            v95 = v83;
            goto LABEL_88;
          }
          v74 = *((_QWORD *)v19 + 4);
          v73 = *((_QWORD *)v19 + 5);
          v83 = __OFSUB__(v73, v74);
          v75 = v73 - v74;
          v76 = v83;
        }
        if ((v76 & 1) != 0)
          goto LABEL_124;
        v84 = v22 - 2;
        v90 = &v69[16 * v22 - 32];
        v92 = *(_QWORD *)v90;
        v91 = *((_QWORD *)v90 + 1);
        v93 = __OFSUB__(v91, v92);
        v94 = v91 - v92;
        v95 = v93;
        if (v93)
          goto LABEL_127;
        v96 = &v69[16 * v72];
        v98 = *(_QWORD *)v96;
        v97 = *((_QWORD *)v96 + 1);
        v83 = __OFSUB__(v97, v98);
        v99 = v97 - v98;
        if (v83)
          goto LABEL_130;
        if (__OFADD__(v94, v99))
          goto LABEL_131;
        if (v94 + v99 >= v75)
        {
          v100 = v75 < v99;
LABEL_94:
          if (v100)
            v72 = v84;
          goto LABEL_96;
        }
LABEL_88:
        if ((v95 & 1) != 0)
          goto LABEL_126;
        v103 = &v69[16 * v72];
        v105 = *(_QWORD *)v103;
        v104 = *((_QWORD *)v103 + 1);
        v83 = __OFSUB__(v104, v105);
        v106 = v104 - v105;
        if (v83)
          goto LABEL_129;
        if (v106 < v94)
          goto LABEL_15;
LABEL_96:
        v111 = v72 - 1;
        if (v72 - 1 >= v22)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        v112 = *a1;
        if (!*a1)
          goto LABEL_144;
        v113 = &v69[16 * v111];
        v114 = *(_QWORD *)v113;
        v115 = &v69[16 * v72];
        v116 = *((_QWORD *)v115 + 1);
        sub_1001BB96C(v112 + *(_QWORD *)(v134 + 72) * *(_QWORD *)v113, v112 + *(_QWORD *)(v134 + 72) * *(_QWORD *)v115, v112 + *(_QWORD *)(v134 + 72) * v116, v133);
        if (v2)
          goto LABEL_116;
        if (v116 < v114)
          goto LABEL_119;
        if (v72 > *((_QWORD *)v19 + 2))
          goto LABEL_120;
        *(_QWORD *)v113 = v114;
        *(_QWORD *)&v69[16 * v111 + 8] = v116;
        v117 = *((_QWORD *)v19 + 2);
        if (v72 >= v117)
          goto LABEL_121;
        v22 = v117 - 1;
        memmove(&v69[16 * v72], v115 + 16, 16 * (v117 - 1 - v72));
        *((_QWORD *)v19 + 2) = v117 - 1;
        a1 = v140;
        if (v117 <= 2)
          goto LABEL_15;
      }
    }
    v22 = 1;
LABEL_15:
    v21 = a1[1];
    v20 = v139;
    v4 = v134;
    if (v139 >= v21)
      goto LABEL_105;
  }
  if (__OFADD__(v23, v127))
    goto LABEL_141;
  v50 = v142;
  if (v23 + v127 < v142)
    v50 = v23 + v127;
  if (v50 >= v23)
  {
    if (v31 != v50)
    {
      v128 = v2;
      v51 = *(_QWORD *)(v4 + 72);
      v143 = v51 * (v31 - 1);
      v136 = v51;
      v52 = v31 * v51;
      v130 = v50;
      do
      {
        v54 = 0;
        v55 = v132;
        v139 = v31;
        while (1)
        {
          v56 = v140;
          v57 = *v140;
          v58 = v52;
          v59 = v52 + v54 + *v140;
          v60 = v137;
          sub_10014BD9C(v59, (uint64_t)v137, &qword_1002B4AA0);
          v61 = v138;
          sub_10014BD9C(v143 + v54 + v57, (uint64_t)v138, &qword_1002B4AA0);
          v142 = *v60;
          v62 = *v61;
          sub_10014BDE0((uint64_t)v61, &qword_1002B4AA0);
          sub_10014BDE0((uint64_t)v60, &qword_1002B4AA0);
          if (v142 >= v62)
            break;
          v63 = *v56;
          if (!*v56)
            goto LABEL_143;
          v52 = v58;
          v64 = v63 + v58 + v54;
          v65 = v63 + v143 + v54;
          sub_10014BC64(v64, v141, &qword_1002B4AA0);
          swift_arrayInitWithTakeFrontToBack(v64, v65);
          sub_10014BC64(v141, v65, &qword_1002B4AA0);
          v54 -= v136;
          ++v55;
          v53 = v139;
          if (v139 == v55)
            goto LABEL_50;
        }
        v53 = v139;
        v52 = v58;
LABEL_50:
        v31 = v53 + 1;
        v143 += v136;
        v52 += v136;
      }
      while (v31 != v130);
      v31 = v130;
      v2 = v128;
      v19 = v129;
      a1 = v140;
      v23 = v132;
    }
    goto LABEL_57;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001BB728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;

  v37 = a1;
  v38 = sub_100146438(&qword_1002B4AA0);
  v7 = __chkstk_darwin(v38);
  v44 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v40 = (uint64_t *)((char *)&v35 - v10);
  result = __chkstk_darwin(v9);
  v39 = (uint64_t *)((char *)&v35 - v13);
  v43 = a3;
  v36 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v12 + 72);
    v15 = v14 * (v43 - 1);
    v41 = v14;
    v16 = v14 * v43;
    v17 = &qword_1002B4AA0;
    v46 = a4;
LABEL_5:
    v18 = 0;
    v19 = v37;
    v42 = v16;
    while (1)
    {
      v21 = *v46;
      v22 = v16 + v18 + *v46;
      v23 = v39;
      sub_10014BD9C(v22, (uint64_t)v39, v17);
      v24 = v15 + v18 + v21;
      v25 = v15;
      v26 = v40;
      sub_10014BD9C(v24, (uint64_t)v40, v17);
      v45 = *v23;
      v27 = v17;
      v28 = *v26;
      v29 = (uint64_t)v26;
      v15 = v25;
      sub_10014BDE0(v29, v27);
      v30 = (uint64_t)v23;
      v16 = v42;
      result = sub_10014BDE0(v30, v27);
      v31 = v45 < v28;
      v17 = v27;
      if (!v31)
      {
LABEL_4:
        v15 += v41;
        v16 += v41;
        if (++v43 == v36)
          return result;
        goto LABEL_5;
      }
      v32 = *v46;
      if (!*v46)
        break;
      v33 = v32 + v16 + v18;
      v34 = v32 + v15 + v18;
      sub_10014BC64(v33, v44, v27);
      swift_arrayInitWithTakeFrontToBack(v33, v34);
      v20 = v34;
      v17 = v27;
      result = sub_10014BC64(v44, v20, v27);
      v18 -= v41;
      if (v43 == ++v19)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001BB96C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;

  v49 = sub_100146438(&qword_1002B4AA0);
  v8 = __chkstk_darwin(v49);
  v51 = (uint64_t *)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v46 - v10);
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_70;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_71;
  v15 = (uint64_t)(a2 - a1) / v13;
  v54 = a1;
  v53 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v29 = a4 + v18;
      v52 = a4 + v18;
      v54 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v31 = -v13;
        v47 = a1;
        v48 = a4;
        do
        {
          v50 = a3 + v31;
          sub_10014BD9C(v29 + v31, (uint64_t)v11, &qword_1002B4AA0);
          v32 = a2 + v31;
          v33 = a3;
          v34 = v11;
          v35 = v51;
          sub_10014BD9C(a2 + v31, (uint64_t)v51, &qword_1002B4AA0);
          v36 = *v34;
          v37 = *v35;
          v38 = (uint64_t)v35;
          v11 = v34;
          sub_10014BDE0(v38, &qword_1002B4AA0);
          sub_10014BDE0((uint64_t)v34, &qword_1002B4AA0);
          if (v36 >= v37)
          {
            v42 = v52;
            v43 = v52 + v31;
            v52 += v31;
            a3 = v50;
            if (v33 < v42 || v50 >= v42)
            {
              swift_arrayInitWithTakeFrontToBack(v50, v43);
            }
            else if (v33 != v42)
            {
              swift_arrayInitWithTakeBackToFront(v50, v43);
            }
            v32 = a2;
            v41 = v47;
            v40 = v48;
          }
          else
          {
            a3 = v50;
            if (v33 < a2 || v50 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v50, a2 + v31);
              v41 = v47;
              v40 = v48;
            }
            else
            {
              v39 = v33 == a2;
              v41 = v47;
              v40 = v48;
              if (!v39)
                swift_arrayInitWithTakeBackToFront(v50, a2 + v31);
            }
            v54 += v31;
          }
          v29 = v52;
          if (v52 <= v40)
            break;
          a2 = v32;
        }
        while (v32 > v41);
      }
      goto LABEL_68;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v50 = a4 + v17;
    v52 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_10014BD9C(a2, (uint64_t)v11, &qword_1002B4AA0);
        v20 = a4;
        v21 = v51;
        sub_10014BD9C(v20, (uint64_t)v51, &qword_1002B4AA0);
        v22 = *v11;
        v23 = *v21;
        sub_10014BDE0((uint64_t)v21, &qword_1002B4AA0);
        sub_10014BDE0((uint64_t)v11, &qword_1002B4AA0);
        v24 = v54;
        if (v22 >= v23)
        {
          v27 = v53 + v13;
          if (v54 < v53 || v54 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack(v54, v53);
          }
          else if (v54 != v53)
          {
            swift_arrayInitWithTakeBackToFront(v54, v53);
          }
          v53 = v27;
          v25 = a2;
        }
        else
        {
          v25 = a2 + v13;
          if (v54 < a2 || v54 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack(v54, a2);
          }
          else if (v54 == a2)
          {
            v24 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v54, a2);
          }
        }
        v54 = v24 + v13;
        a4 = v53;
        if (v53 >= v50)
          break;
        a2 = v25;
      }
      while (v25 < a3);
    }
LABEL_68:
    sub_100197DAC(&v54, &v53, (uint64_t *)&v52);
    return 1;
  }
LABEL_72:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001BBDFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001BBE24(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

double sub_1001BBE4C(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1001BBE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26)
{
  uint64_t result;

  if (a7)
  {
    sub_10014BE1C(a4, a5, a6 & 1);
    swift_bridgeObjectRetain(a7);
    sub_10014BE1C(a10, a11, a12 & 1);
    swift_bridgeObjectRetain(a13);
    sub_10014BE1C(a17, a18, a19 & 1);
    swift_bridgeObjectRetain(a20);
    sub_10014BE1C(a23, a24, a25 & 1);
    return swift_bridgeObjectRetain(a26);
  }
  return result;
}

_QWORD *sub_1001BBF48(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25]);
  return a1;
}

uint64_t sub_1001BBFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26)
{
  uint64_t result;

  if (a7)
  {
    sub_10014BE2C(a4, a5, a6 & 1);
    swift_bridgeObjectRelease(a7);
    sub_10014BE2C(a10, a11, a12 & 1);
    swift_bridgeObjectRelease(a13);
    sub_10014BE2C(a17, a18, a19 & 1);
    swift_bridgeObjectRelease(a20);
    sub_10014BE2C(a23, a24, a25 & 1);
    return swift_bridgeObjectRelease(a26);
  }
  return result;
}

uint64_t sub_1001BC08C()
{
  _QWORD v1[4];

  v1[0] = sub_1001464C4(&qword_1002B7398);
  v1[1] = sub_1001464C4(&qword_1002B3C98);
  v1[2] = sub_1001BA730();
  v1[3] = sub_10014BEC0(&qword_1002B3CA8, &qword_1002B3C98, (uint64_t)&protocol conformance descriptor for Button<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.alert<A>(_:isPresented:actions:)>>, 1);
}

double sub_1001BC120@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v6;
  char v7;
  double result;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_1001C7C98(a1, a2), (v7 & 1) != 0))
  {
    sub_10017E2BC(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

double sub_1001BC170@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v5;
  char v6;
  double result;

  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1001C7CFC(a1), (v6 & 1) != 0))
  {
    sub_10017E2BC(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

unint64_t sub_1001BC1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  char v5;
  unsigned __int8 v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    goto LABEL_5;
  v4 = sub_1001C7C68(a1);
  if ((v5 & 1) == 0)
  {
    v2 = 0;
LABEL_5:
    v6 = 1;
    return v2 | ((unint64_t)v6 << 32);
  }
  v6 = 0;
  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 56) + 4 * v4);
  return v2 | ((unint64_t)v6 << 32);
}

uint64_t sub_1001BC218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  __n128 v10;
  uint64_t v12;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  v10 = swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v10);
}

uint64_t sub_1001BC2D0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t destroy for PersistanceStoreErrors(uint64_t *a1)
{
  return sub_1001BC2E8(*a1, a1[1]);
}

uint64_t sub_1001BC2E8(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t _s13FTMInternal_422PersistanceStoreErrorsOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1001BC2D0(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PersistanceStoreErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1001BC2D0(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1001BC2E8(v6, v7);
  return a1;
}

uint64_t assignWithTake for PersistanceStoreErrors(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1001BC2E8(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PersistanceStoreErrors(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PersistanceStoreErrors(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1001BC45C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1001BC464(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PersistanceStoreErrors()
{
  return &type metadata for PersistanceStoreErrors;
}

uint64_t sub_1001BC480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v6 = OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___database;
  v7 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___database);
  if (v7)
  {
    v8 = *(sqlite3 **)(v4 + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___database);
LABEL_9:
    swift_retain(v7);
    return (uint64_t)v8;
  }
  if (qword_1002B39F8 != -1)
    v7 = swift_once(&qword_1002B39F8, sub_100174778);
  v9 = qword_1002BEFE8;
  v10 = static os_log_type_t.default.getter(v7, a2, a3, a4);
  os_log(_:dso:log:type:_:)("Opening connection to database", 30, 2, &_mh_execute_header, v9, v10, &_swiftEmptyArrayStorage);
  if (qword_1002B3AC0 != -1)
    swift_once(&qword_1002B3AC0, sub_1001BFDC8);
  if (databasePath.value._object)
  {
    v8 = sub_1001CB07C();
    v11 = qword_1002BEFE8;
    v15 = static os_log_type_t.default.getter(v8, v12, v13, v14);
    os_log(_:dso:log:type:_:)("Successfully opened connection to database.", 43, 2, &_mh_execute_header, v11, v15, &_swiftEmptyArrayStorage);
    v16 = *(_QWORD *)(v4 + v6);
    *(_QWORD *)(v4 + v6) = v8;
    swift_retain(v8);
    swift_release(v16);
    v7 = 0;
    goto LABEL_9;
  }
  __break(1u);
  result = swift_unexpectedError(v5, "FTMInternal_4/PersistanceStore.swift", 36, 1, 52);
  __break(1u);
  return result;
}

char *sub_1001BC5F0()
{
  char *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  char *v4;
  id v5;
  char *v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___coreTelephonyService;
  v2 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___coreTelephonyService];
  if (v2)
  {
    v3 = *(char **)&v0[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___coreTelephonyService];
  }
  else
  {
    v4 = v0;
    v5 = objc_allocWithZone((Class)type metadata accessor for CoreTelephonyService());
    v6 = sub_1001760B8(v0);
    v7 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

char *sub_1001BC664()
{
  char *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  char *v4;
  char *result;
  char *v6;
  char *v7;
  void *v8;
  id v9;

  v1 = OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___metricService;
  v2 = *(void **)&v0[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___metricService];
  if (v2)
  {
    v3 = *(char **)&v0[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___metricService];
LABEL_5:
    v9 = v2;
    return v3;
  }
  v4 = v0;
  result = (char *)objc_msgSend((id)objc_opt_self(ABMWrapper), "sharedInstance");
  if (result)
  {
    v6 = result;
    objc_allocWithZone((Class)type metadata accessor for MetricService());
    v7 = sub_1001A5284(v4, v6);
    v8 = *(void **)&v4[v1];
    *(_QWORD *)&v4[v1] = v7;
    v3 = v7;

    v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id sub_1001BC70C(uint64_t a1, void *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  objc_class *v17;
  id v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v37;
  id v38;
  void **aBlock;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  void *v42;
  uint64_t (*v43)();
  uint64_t v44;
  objc_super v45;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___database] = 0;
  v9 = (uint64_t *)&v2[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_recordedTime];
  v10 = v2;
  Date.init()(v10);
  v11 = sub_10016AC60();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *v9 = v11;
  v9[1] = v13;
  v14 = OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_group;
  *(_QWORD *)&v10[v14] = dispatch_group_create();
  v15 = OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_firstTimeDashboard;
  *(_QWORD *)&v10[v15] = dispatch_group_create();
  v16 = &v10[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_storeDelegate];
  *((_QWORD *)v16 + 1) = 0;
  swift_unknownObjectWeakInit(v16, 0);
  *(_QWORD *)&v10[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___coreTelephonyService] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___metricService] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_hardwareManager] = a1;
  *(_QWORD *)&v10[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_aBMWrapper] = a2;
  swift_retain(a1);
  v38 = a2;

  v17 = (objc_class *)type metadata accessor for PersistanceStore();
  v45.receiver = v10;
  v45.super_class = v17;
  v18 = objc_msgSendSuper2(&v45, "init");
  v19 = swift_allocObject(&unk_100266228, 24, 7);
  *(_QWORD *)(v19 + 16) = v18;
  v20 = v18;
  sub_1001BD350((uint64_t)sub_1001BDE80, v19);
  swift_release(v19);

  v21 = (void *)objc_opt_self(NSNotificationCenter);
  v22 = objc_msgSend(v21, "defaultCenter");
  if (qword_1002B3A30 != -1)
    swift_once(&qword_1002B3A30, sub_100175074);
  v23 = static NSNotificationName.NewABMMetric;
  v24 = swift_allocObject(&unk_100266250, 24, 7);
  *(_QWORD *)(v24 + 16) = v20;
  v43 = sub_1001BE1A4;
  v44 = v24;
  aBlock = _NSConcreteStackBlock;
  v40 = 1107296256;
  v41 = sub_1001BC218;
  v42 = &unk_100266268;
  v25 = _Block_copy(&aBlock);
  v26 = v44;
  v27 = v20;
  v28 = objc_msgSend(v22, "addObserverForName:object:queue:usingBlock:", v23, 0, 0, v25, swift_release(v26).n128_f64[0]);
  _Block_release(v25);
  swift_unknownObjectRelease(v28);

  v29 = objc_msgSend(v21, "defaultCenter");
  if (qword_1002B3A38 != -1)
    swift_once(&qword_1002B3A38, sub_100175108);
  v30 = static NSNotificationName.NewCTMetric;
  v31 = swift_allocObject(&unk_1002662A0, 24, 7);
  *(_QWORD *)(v31 + 16) = v27;
  v43 = sub_1001BDEA0;
  v44 = v31;
  aBlock = _NSConcreteStackBlock;
  v40 = 1107296256;
  v41 = sub_1001BC218;
  v42 = &unk_1002662B8;
  v32 = _Block_copy(&aBlock);
  v33 = v44;
  v34 = v27;
  v35 = objc_msgSend(v29, "addObserverForName:object:queue:usingBlock:", v30, 0, 0, v32, swift_release(v33).n128_f64[0]);

  swift_release(a1);
  _Block_release(v32);
  swift_unknownObjectRelease(v35);

  return v34;
}

void sub_1001BCACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  _BYTE v22[8];
  _QWORD v23[2];
  char v24;

  if ((a1 & 1) != 0)
  {
    if (qword_1002B3A18 != -1)
      a1 = swift_once(&qword_1002B3A18, sub_10017480C);
    v4 = qword_1002BF008;
    v5 = static os_log_type_t.default.getter(a1, a2, a3, a4);
    v6 = os_log(_:dso:log:type:_:)("successfully created tables", 27, 2, &_mh_execute_header, v4, v5, _swiftEmptyArrayStorage);
    v10 = sub_1001BC480(v6, v7, v8, v9);
    sub_1001BEC84((uint64_t)sub_1001BCC8C, 0);
    swift_release(v10);
  }
  else
  {
    if (qword_1002B3A18 != -1)
      a1 = swift_once(&qword_1002B3A18, sub_10017480C);
    v12 = qword_1002BF008;
    v13 = static os_log_type_t.default.getter(a1, a2, a3, a4);
    v14 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_1002402A0;
    if (a2)
    {
      swift_getErrorValue(a2, v22, v21);
      v16 = Error.localizedDescription.getter(v21[1], v21[2]);
    }
    else
    {
      v16 = 0;
      v17 = 0xE000000000000000;
    }
    v23[0] = v16;
    v23[1] = v17;
    v24 = 0;
    v18 = String.init<A>(describing:)(v23, &type metadata for PersistanceStoreErrors);
    v20 = v19;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_10016B1E0();
    *(_QWORD *)(v15 + 32) = v18;
    *(_QWORD *)(v15 + 40) = v20;
    os_log(_:dso:log:type:_:)("unable to create tables %{public}s", 34, 2, &_mh_execute_header, v12, v13, v15);
    swift_bridgeObjectRelease(v15);
  }
}

uint64_t sub_1001BCC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;

  if ((a1 & 1) != 0)
  {
    if (qword_1002B3A18 != -1)
      a1 = swift_once(&qword_1002B3A18, sub_10017480C);
    v4 = qword_1002BF008;
    v5 = static os_log_type_t.default.getter(a1, a2, a3, a4);
    v6 = "successfully deleted older rows";
    v7 = 31;
  }
  else
  {
    if (qword_1002B3A18 != -1)
      a1 = swift_once(&qword_1002B3A18, sub_10017480C);
    v4 = qword_1002BF008;
    v5 = static os_log_type_t.default.getter(a1, a2, a3, a4);
    v6 = "unable to delete older rows";
    v7 = 27;
  }
  return os_log(_:dso:log:type:_:)(v6, v7, 2, &_mh_execute_header, v4, v5, _swiftEmptyArrayStorage);
}

void sub_1001BCD50()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  NSString v21;
  id v22;
  uint64_t v23;
  NSString v24;
  NSString v25;
  id v26;
  NSString v27;
  unsigned int v28;
  NSString v29;
  id v30;
  char *v31;
  char *v32;
  void *v33;
  id v34;
  void *v35;
  char *v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint64_t *)&v1[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_recordedTime];
  v7 = *(_QWORD *)&v1[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_recordedTime + 8];
  swift_bridgeObjectRetain(v7);
  v8 = sub_100185B10();
  v9 = swift_bridgeObjectRelease(v7);
  if (v8 >= 50)
  {
    Date.init()(v9);
    v10 = sub_10016AC60();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v13 = v6[1];
    *v6 = v10;
    v6[1] = v12;
    swift_bridgeObjectRelease(v13);
    if (qword_1002B3A80 != -1)
      swift_once(&qword_1002B3A80, sub_100184F00);
    v14 = (id)qword_1002BF070;
    sub_100184F2C(1, v15, v16, v17);

    v18 = (void *)objc_opt_self(ABMWrapper);
    v19 = objc_msgSend(v18, "sharedInstance");
    if (v19)
    {
      v20 = v19;
      v21 = String._bridgeToObjectiveC()();
      objc_msgSend(v20, "removeAWDConfigForAppid:", v21);

      v22 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      if (qword_1002B3A78 != -1)
        swift_once(&qword_1002B3A78, sub_100183CA4);
      v23 = *(_QWORD *)(qword_1002BF068 + 176);
      swift_bridgeObjectRetain(v23);
      v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v23);
      v25 = String._bridgeToObjectiveC()();
      v26 = objc_msgSend(v22, "pathForResource:ofType:", v24, v25);

      if (v26)
      {
        v27 = String._bridgeToObjectiveC()();
        v28 = objc_msgSend(v20, "addAWDConfigForAppId:andProtofFilePath:", v27, v26);

        if (v28)
        {
          objc_msgSend(v20, "listen");
          v29 = String._bridgeToObjectiveC()();
          objc_msgSend(v20, "querySpecificMetric:triggerRef:triggerType:triggerID:profileID:metricID:", v29, 9999, 0, *(unsigned int *)(qword_1002BF068 + 184), 0, 0);

        }
        v30 = objc_allocWithZone((Class)type metadata accessor for CoreTelephonyService());
        v31 = v1;
        v32 = sub_1001760B8(v31);
        v33 = *(void **)&v31[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___coreTelephonyService];
        *(_QWORD *)&v31[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___coreTelephonyService] = v32;

        v34 = objc_msgSend(v18, "sharedInstance");
        if (!v34)
        {
          __break(1u);
          return;
        }
        v35 = v34;
        objc_allocWithZone((Class)type metadata accessor for MetricService());
        v36 = v31;
        v37 = sub_1001A5284(v36, v35);
        v38 = *(void **)&v36[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___metricService];
        *(_QWORD *)&v36[OBJC_IVAR____TtC13FTMInternal_416PersistanceStore____lazy_storage___metricService] = v37;

        v20 = v38;
      }
      else
      {
        if (qword_1002B39E8 != -1)
          swift_once(&qword_1002B39E8, sub_100174680);
        v39 = qword_1002BEFD8;
        v40 = static os_log_type_t.error.getter();
        os_log(_:dso:log:type:_:)("Metric Log File path doesn't exist", 34, 2, &_mh_execute_header, v39, v40, _swiftEmptyArrayStorage);
      }

    }
  }
}

id sub_1001BD144()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  v1 = (void *)objc_opt_self(NSNotificationCenter);
  v2 = objc_msgSend(v1, "defaultCenter");
  v3 = qword_1002B3A30;
  v4 = v0;
  if (v3 != -1)
    swift_once(&qword_1002B3A30, sub_100175074);
  objc_msgSend(v2, "removeObserver:name:object:", v4, static NSNotificationName.NewABMMetric, 0);

  v5 = objc_msgSend(v1, "defaultCenter");
  v6 = qword_1002B3A38;
  v7 = v4;
  if (v6 != -1)
    swift_once(&qword_1002B3A38, sub_100175108);
  objc_msgSend(v5, "removeObserver:name:object:", v7, static NSNotificationName.NewCTMetric, 0);

  v9.receiver = v7;
  v9.super_class = (Class)type metadata accessor for PersistanceStore();
  return objc_msgSendSuper2(&v9, "dealloc");
}

double sub_1001BD350(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  double result;
  dispatch_group_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD aBlock[5];
  _QWORD *v44;

  v3 = v2;
  v38 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(dispatch_group_t *)(v2 + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_group);
  v11 = v37;
  dispatch_group_enter(v37);
  v12 = swift_allocObject(&unk_1002662F0, 17, 7);
  *(_BYTE *)(v12 + 16) = 0;
  v16 = sub_1001BC480(v12, v13, v14, v15);
  v17 = swift_allocObject(&unk_100266318, 24, 7);
  swift_unknownObjectWeakInit(v17 + 16, v3);
  v18 = (_QWORD *)swift_allocObject(&unk_100266340, 48, 7);
  v18[2] = v12;
  v18[3] = v17;
  v18[4] = a1;
  v18[5] = a2;
  swift_retain(v12);
  swift_retain(v17);
  swift_retain(a2);
  sub_1001BEEB4(0xD000000000000186, 0x8000000100214DB0, 0x325663697274654DLL, 0xE900000000000030, (uint64_t)sub_1001BE1B8, (uint64_t)v18);
  swift_release(v16);
  swift_release(v17);
  swift_release(v18);
  dispatch_group_enter(v11);
  v23 = sub_1001BC480(v19, v20, v21, v22);
  v24 = swift_allocObject(&unk_100266318, 24, 7);
  swift_unknownObjectWeakInit(v24 + 16, v3);
  v25 = (_QWORD *)swift_allocObject(&unk_100266368, 48, 7);
  v25[2] = v12;
  v25[3] = v24;
  v25[4] = a1;
  v25[5] = a2;
  swift_retain(v12);
  swift_retain(a2);
  swift_retain(v24);
  sub_1001BEEB4(0xD0000000000001B7, 0x8000000100214F40, 0x72616F6268736144, 0xE900000000000064, (uint64_t)sub_1001BDF30, (uint64_t)v25);
  swift_release(v23);
  swift_release(v24);
  swift_release(v25);
  v26 = sub_100192474();
  v27 = (void *)static OS_dispatch_queue.main.getter(v26);
  v28 = (_QWORD *)swift_allocObject(&unk_100266390, 40, 7);
  v28[2] = v12;
  v28[3] = a1;
  v28[4] = a2;
  aBlock[4] = sub_1001BDF78;
  v44 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_1002663A8;
  v29 = _Block_copy(aBlock);
  swift_retain(v12);
  v30 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v30);
  v42 = _swiftEmptyArrayStorage;
  v31 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v33 = sub_1001924F4();
  v34 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v32, v33, v38, v31);
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v10, v7, v27, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v41 + 8))(v7, v34);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v40);
  v35 = v44;
  swift_release(v12);
  *(_QWORD *)&result = swift_release(v35).n128_u64[0];
  return result;
}

void sub_1001BD720(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, uint64_t))
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  _QWORD v19[3];
  _BYTE v20[8];
  _BYTE v21[24];

  v5 = a4 + 16;
  if ((a1 & 1) != 0)
  {
    swift_beginAccess(a3 + 16, v21, 1, 0);
    *(_BYTE *)(a3 + 16) = 1;
    v7 = &v18;
  }
  else
  {
    if (a2)
    {
      swift_getErrorValue(a2, v20, v19);
      v9 = Error.localizedDescription.getter(v19[1], v19[2]);
      v11 = v10;
    }
    else
    {
      v9 = 0;
      v11 = 0xE000000000000000;
    }
    v12 = sub_1001BDF84();
    v13 = swift_allocError(&type metadata for PersistanceStoreErrors, v12, 0, 0);
    *(_QWORD *)v14 = v9;
    *(_QWORD *)(v14 + 8) = v11;
    *(_BYTE *)(v14 + 16) = 1;
    a5(0, v13);
    swift_errorRelease(v13);
    v7 = (uint64_t *)v21;
  }
  swift_beginAccess(v5, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v16 = (void *)Strong;
  if (Strong)
  {
    v17 = *(id *)(Strong + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_group);

    dispatch_group_leave(v17);
  }
}

uint64_t sub_1001BD84C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  swift_beginAccess(a1 + 16, v8, 0, 0);
  if (*(_BYTE *)(a1 + 16) == 1)
    return a2(1, 0);
  v5 = sub_1001BDF84();
  v6 = swift_allocError(&type metadata for PersistanceStoreErrors, v5, 0, 0);
  *(_OWORD *)v7 = xmmword_100242020;
  *(_BYTE *)(v7 + 16) = 1;
  a2(0, v6);
  return swift_errorRelease(v6);
}

uint64_t sub_1001BD8FC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC13FTMInternal_416PersistanceStore_storeDelegate);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 72);
    v6 = *(_QWORD *)(v4 + 80);
    v7 = *a1;
    v8 = a1[1];
    v9 = v5 == *a1 && v6 == v8;
    if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, *a1, a1[1], 0) & 1) != 0)
    {
      v10 = *(_QWORD *)(v4 + 88);
      v11 = *(_QWORD *)(v4 + 96);
      v12 = a1[2];
      v13 = a1[3];
      v14 = v10 == v12 && v11 == v13;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, a1[2], a1[3], 0) & 1) != 0)
      {
        v15 = *(_DWORD *)(v4 + 104);
        if (v15 == *((_DWORD *)a1 + 8))
        {
          sub_1001B0490(v7, v8, v12, v13, v15);
          v16 = type metadata accessor for MetricDetailViewModel(0);
          v17 = sub_100146004(&qword_1002B7138, type metadata accessor for MetricDetailViewModel, (uint64_t)&unk_100243368);
          v18 = ObservableObject<>.objectWillChange.getter(v16, v17);
          ObservableObjectPublisher.send()();
          swift_release(v18);
          *(_BYTE *)(v4 + 33) = 1;
        }
      }
    }
    return swift_unknownObjectRelease(v4);
  }
  return result;
}

uint64_t sub_1001BDA30()
{
  uint64_t result;
  uint64_t v1;
  unint64_t v2;
  char v3;
  _OWORD v4[2];
  int v5;
  _OWORD v6[3];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;

  result = Notification.userInfo.getter();
  if (result)
  {
    v1 = result;
    strcpy((char *)&v9, "metricObject");
    BYTE13(v9) = 0;
    HIWORD(v9) = -5120;
    AnyHashable.init<A>(_:)(&v9, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v1 + 16) && (v2 = sub_1001C7CFC((uint64_t)v6), (v3 & 1) != 0))
    {
      sub_10017E2BC(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)&v7);
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }
    swift_bridgeObjectRelease(v1);
    sub_10017F3E8((uint64_t)v6);
    if (*((_QWORD *)&v8 + 1))
    {
      result = swift_dynamicCast(v4, &v7, (char *)&type metadata for Any + 8, &type metadata for MetricNotificationObject, 6);
      if ((result & 1) != 0)
      {
        v9 = v4[0];
        v10 = v4[1];
        v11 = v5;
        sub_1001BD8FC((uint64_t *)&v9);
        v4[0] = v9;
        sub_1001834C0((uint64_t)v4);
        v6[0] = v10;
        return sub_1001834C0((uint64_t)v6);
      }
    }
    else
    {
      return sub_100157748((uint64_t)&v7);
    }
  }
  return result;
}

uint64_t sub_1001BDB58(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_1001BDB80(uint64_t a1, uint64_t a2)
{
  sub_1001BDBF4(a1, a2, "attribute deleted from dashboard table", 38, (uint64_t (*)(void))&static os_log_type_t.error.getter, "unable to delete attribute from dashboard table %{public}s");
}

uint64_t sub_1001BDBA0(char a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;

  if ((a1 & 1) != 0)
  {
    v3 = 1;
    a2 = 0;
  }
  else
  {
    v3 = 0;
  }
  return a3(v3, a2);
}

void sub_1001BDBD4(uint64_t a1, uint64_t a2)
{
  sub_1001BDBF4(a1, a2, "attribute inserted from dashboard table", 39, (uint64_t (*)(void))&static os_log_type_t.default.getter, "unable to insert attribute from dashboard table %{public}s");
}

void sub_1001BDBF4(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t (*a5)(void), const char *a6)
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  _QWORD v25[3];
  _BYTE v26[8];
  _QWORD v27[2];

  if ((a1 & 1) != 0)
  {
    if (qword_1002B39E8 != -1)
      a1 = swift_once(&qword_1002B39E8, sub_100174680);
    v8 = qword_1002BEFD8;
    v9 = static os_log_type_t.default.getter(a1, a2, a3, a4);
    os_log(_:dso:log:type:_:)(a3, a4, 2, &_mh_execute_header, v8, v9, _swiftEmptyArrayStorage);
    v10 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v24 = v10;
    if (qword_1002B3A58 != -1)
    {
      swift_once(&qword_1002B3A58, sub_100175354);
      v10 = v24;
    }
    objc_msgSend(v10, "postNotificationName:object:userInfo:", static NSNotificationName.dashboardMetricUpdate, 0, 0);

  }
  else
  {
    if (qword_1002B39E8 != -1)
      swift_once(&qword_1002B39E8, sub_100174680);
    v14 = qword_1002BEFD8;
    v15 = a5();
    v16 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v17 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v17 + 16) = xmmword_1002402A0;
    if (a2)
    {
      swift_getErrorValue(a2, v26, v25);
      v18 = Error.localizedDescription.getter(v25[1], v25[2]);
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    v27[0] = v18;
    v27[1] = v19;
    v20 = sub_100146438((uint64_t *)&unk_1002B5640);
    v21 = String.init<A>(describing:)(v27, v20);
    v23 = v22;
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 64) = sub_10016B1E0();
    *(_QWORD *)(v17 + 32) = v21;
    *(_QWORD *)(v17 + 40) = v23;
    os_log(_:dso:log:type:_:)(a6, 58, 2, &_mh_execute_header, v14, v15, v17);
    swift_bridgeObjectRelease(v17);
  }
}

uint64_t type metadata accessor for PersistanceStore()
{
  return objc_opt_self(_TtC13FTMInternal_416PersistanceStore);
}

uint64_t sub_1001BDE5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1001BDE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1001BCACC(a1, a2, *(_QWORD *)(v4 + 16), a4);
}

uint64_t sub_1001BDE88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1001BDE98(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1001BDEA0()
{
  return sub_1001BDA30();
}

uint64_t sub_1001BDEC0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001BDED0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001BDEFC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1001BDF30(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001BD720(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD, uint64_t))(v2 + 32));
}

uint64_t sub_1001BDF4C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001BDF78()
{
  uint64_t v0;

  return sub_1001BD84C(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v0 + 24));
}

unint64_t sub_1001BDF84()
{
  unint64_t result;

  result = qword_1002B7598;
  if (!qword_1002B7598)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PersistanceStoreErrors, &type metadata for PersistanceStoreErrors);
    atomic_store(result, (unint64_t *)&qword_1002B7598);
  }
  return result;
}

uint64_t destroy for MetricNotificationObject(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for MetricNotificationObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for MetricNotificationObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for DashboardTableItem(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MetricNotificationObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricNotificationObject(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 36))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricNotificationObject(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricNotificationObject()
{
  return &type metadata for MetricNotificationObject;
}

unint64_t destroy for SLoadableViewState(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s13FTMInternal_418SLoadableViewStateOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for SLoadableViewState(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for SLoadableViewState(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SLoadableViewState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SLoadableViewState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 3;
  }
  return result;
}

uint64_t sub_1001BE3D8(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1001BE3F0(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SLoadableViewState()
{
  return &type metadata for SLoadableViewState;
}

uint64_t sub_1001BE420(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

unint64_t sub_1001BE42C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100146438(&qword_1002B7848);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(v9);
    result = sub_1001C7C98(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001BE544(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100146438(&qword_1002B7810);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_1001C7C98(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001BE664(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100146438((uint64_t *)&unk_1002B6E60);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10014BD9C(v7, (uint64_t)v16, &qword_1002B7818);
    result = sub_1001C7CFC((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10017F278(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001BE7A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100146438((uint64_t *)&unk_1002B69D0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10014BD9C(v7, (uint64_t)&v16, &qword_1002B5698);
    v8 = v16;
    v9 = v17;
    result = sub_1001C7C98(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10017F278(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001BE8D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100146438(&qword_1002B7850);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_1001C7C98(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001BE9F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100146438(&qword_1002B7828);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_1001C7C98(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001BEB00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100146438(&qword_1002B77C8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_1001C7C98(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

double sub_1001BEC18(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  double result;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

Swift::String_optional *databasePath.unsafeMutableAddressor()
{
  if (qword_1002B3AC0 != -1)
    swift_once(&qword_1002B3AC0, sub_1001BFDC8);
  return &databasePath;
}

double sub_1001BEC84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  double result;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  _QWORD *v25;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(v2 + 24);
  v12 = swift_allocObject(&unk_100266748, 24, 7);
  swift_weakInit(v12 + 16, v2);
  v13 = (_QWORD *)swift_allocObject(&unk_100266770, 40, 7);
  v13[2] = v12;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_1001C6C00;
  v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_100266788;
  v14 = _Block_copy(aBlock);
  swift_retain(v12);
  v15 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v18 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19 = v25;
  swift_release(v12);
  *(_QWORD *)&result = swift_release(v19).n128_u64[0];
  return result;
}

double sub_1001BEEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  double result;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  _QWORD *v34;

  v28[0] = a3;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v15 - 8);
  v30 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[1] = *(_QWORD *)(v6 + 24);
  v18 = swift_allocObject(&unk_100266748, 24, 7);
  swift_weakInit(v18 + 16, v6);
  v19 = (_QWORD *)swift_allocObject(&unk_100266D10, 72, 7);
  v19[2] = v18;
  v19[3] = a1;
  v19[4] = a2;
  v19[5] = a5;
  v20 = v28[0];
  v19[6] = a6;
  v19[7] = v20;
  v19[8] = a4;
  aBlock[4] = sub_1001CC70C;
  v34 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_100266D28;
  v21 = _Block_copy(aBlock);
  swift_retain(v18);
  swift_bridgeObjectRetain(a2);
  swift_retain(a6);
  v22 = swift_bridgeObjectRetain(a4);
  static DispatchQoS.unspecified.getter(v22);
  v32 = _swiftEmptyArrayStorage;
  v23 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v25 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v12, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v30);
  v26 = v34;
  swift_release(v18);
  *(_QWORD *)&result = swift_release(v26).n128_u64[0];
  return result;
}

double sub_1001BF108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v34 = a7;
  v35 = a8;
  v32 = a6;
  v33 = a5;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v17 - 8);
  v38 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *(_QWORD *)(v9 + 24);
  v20 = swift_allocObject(&unk_100266748, 24, 7);
  swift_weakInit(v20 + 16, v9);
  v21 = swift_allocObject(&unk_100266CC0, 96, 7);
  *(_QWORD *)(v21 + 16) = v20;
  *(_QWORD *)(v21 + 24) = a1;
  *(_QWORD *)(v21 + 32) = a2;
  *(_QWORD *)(v21 + 40) = a3;
  v22 = v32;
  *(_QWORD *)(v21 + 48) = a4;
  *(_QWORD *)(v21 + 56) = v22;
  v23 = v34;
  *(_QWORD *)(v21 + 64) = v34;
  *(_DWORD *)(v21 + 72) = v33;
  *(_QWORD *)(v21 + 80) = v35;
  *(_QWORD *)(v21 + 88) = a9;
  aBlock[4] = sub_10017F3A8;
  v42 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_100266CD8;
  v24 = _Block_copy(aBlock);
  swift_retain(v20);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(v23);
  v25 = swift_retain(a9);
  static DispatchQoS.unspecified.getter(v25);
  v40 = _swiftEmptyArrayStorage;
  v26 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v28 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v27, v28, v14, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v16, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v38);
  v29 = v42;
  swift_release(v20);
  *(_QWORD *)&result = swift_release(v29).n128_u64[0];
  return result;
}

double sub_1001BF380(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1001BF3B8(a1, a2, a3, (uint64_t)&unk_1002668D8, (uint64_t)sub_1001C6ECC, (uint64_t)&unk_1002668F0);
}

double sub_1001BF39C(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1001BF3B8(a1, a2, a3, (uint64_t)&unk_100266AE0, (uint64_t)sub_1001CC5A4, (uint64_t)&unk_100266AF8);
}

double sub_1001BF3B8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v27[0] = a6;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v15 - 8);
  v29 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[1] = *(_QWORD *)(v6 + 24);
  v18 = swift_allocObject(&unk_100266748, 24, 7);
  swift_weakInit(v18 + 16, v6);
  v19 = swift_allocObject(a4, 48, 7);
  *(_QWORD *)(v19 + 16) = v18;
  *(_DWORD *)(v19 + 24) = a1;
  *(_QWORD *)(v19 + 32) = a2;
  *(_QWORD *)(v19 + 40) = a3;
  aBlock[4] = a5;
  v33 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = v27[0];
  v20 = _Block_copy(aBlock);
  swift_retain(v18);
  v21 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v21);
  v31 = _swiftEmptyArrayStorage;
  v22 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v24 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v12, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v29);
  v25 = v33;
  swift_release(v18);
  *(_QWORD *)&result = swift_release(v25).n128_u64[0];
  return result;
}

double sub_1001BF5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v31[0] = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v9 - 8);
  v33 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[1] = *(_QWORD *)(v3 + 24);
  v12 = swift_allocObject(&unk_100266748, 24, 7);
  swift_weakInit(v12 + 16, v3);
  v13 = *(void **)a1;
  v14 = *(void **)(a1 + 8);
  v16 = *(void **)(a1 + 16);
  v15 = *(void **)(a1 + 24);
  v17 = swift_allocObject(&unk_1002669F0, 80, 7);
  v18 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v17 + 24) = *(_OWORD *)a1;
  *(_QWORD *)(v17 + 16) = v12;
  *(_OWORD *)(v17 + 40) = v18;
  *(_DWORD *)(v17 + 56) = *(_DWORD *)(a1 + 32);
  v19 = v31[0];
  *(_QWORD *)(v17 + 64) = a2;
  *(_QWORD *)(v17 + 72) = v19;
  aBlock[4] = sub_1001CC57C;
  v37 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_100266A08;
  v20 = _Block_copy(aBlock);
  swift_retain(v12);
  v21 = v13;
  v22 = v14;
  v23 = v16;
  v24 = v15;
  v25 = swift_retain(v19);
  static DispatchQoS.unspecified.getter(v25);
  v35 = _swiftEmptyArrayStorage;
  v26 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v28 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v27, v28, v6, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v33);
  v29 = v37;
  swift_release(v12);
  *(_QWORD *)&result = swift_release(v29).n128_u64[0];
  return result;
}

double sub_1001BF840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  _QWORD *v29;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(v4 + 24);
  v15 = swift_allocObject(&unk_100266748, 24, 7);
  swift_weakInit(v15 + 16, v4);
  v16 = (_QWORD *)swift_allocObject(&unk_100266D60, 56, 7);
  v16[2] = v15;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = a4;
  aBlock[4] = sub_1001CC754;
  v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_100266D78;
  v17 = _Block_copy(aBlock);
  swift_retain(v15);
  swift_bridgeObjectRetain(a2);
  v18 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v18);
  v27 = _swiftEmptyArrayStorage;
  v19 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v21 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v9, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v25);
  v22 = v29;
  swift_release(v15);
  *(_QWORD *)&result = swift_release(v22).n128_u64[0];
  return result;
}

uint64_t sub_1001BFA7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  id v15;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100146438((uint64_t *)&unk_1002B69B0);
  sub_100190568(v4, qword_1002BF130);
  v5 = sub_10018DBC8(v4, (uint64_t)qword_1002BF130);
  v6 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v15 = 0;
  v7 = objc_msgSend(v6, "URLForDirectory:inDomain:appropriateForURL:create:error:", 9, 1, 0, 1, &v15);

  v8 = v15;
  if (v7)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v9 = v8;

    (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v5, v3, v0);
    v10 = 0;
  }
  else
  {
    v11 = v15;
    v12 = _convertNSErrorToError(_:)(v8);

    swift_willThrow();
    swift_errorRelease(v12);
    v10 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v5, v10, 1, v0);
}

uint64_t Database.rawValue.getter()
{
  return 0x615063697274656DLL;
}

BOOL Database.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100262300, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

Swift::Int sub_1001BFC78()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 0x615063697274656DLL, 0xED00003132567472);
  return Hasher._finalize()();
}

uint64_t sub_1001BFCD4(uint64_t a1)
{
  return String.hash(into:)(a1, 0x615063697274656DLL, 0xED00003132567472);
}

Swift::Int sub_1001BFCF8(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 0x615063697274656DLL, 0xED00003132567472);
  return Hasher._finalize()();
}

uint64_t sub_1001BFD50@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100262338, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1001BFDA0(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "metricPartV21");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_1001BFDC8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)(char *, uint64_t);
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v0 = sub_100146438((uint64_t *)&unk_1002B69B0);
  __chkstk_darwin(v0);
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002B3AB8 != -1)
    swift_once(&qword_1002B3AB8, sub_1001BFA7C);
  v7 = sub_10018DBC8(v0, (uint64_t)qword_1002BF130);
  sub_10014BD9C(v7, (uint64_t)v2, (uint64_t *)&unk_1002B69B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    result = sub_10014BDE0((uint64_t)v2, (uint64_t *)&unk_1002B69B0);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    URL.appendingPathComponent(_:)(0xD000000000000014, 0x8000000100215B40);
    v11 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
    v12 = v11(v2, v3);
    v9 = URL.relativePath.getter(v12);
    v10 = v13;
    result = v11(v6, v3);
  }
  databasePath.value._countAndFlagsBits = v9;
  databasePath.value._object = v10;
  return result;
}

unint64_t sub_1001BFF44()
{
  unint64_t result;

  result = qword_1002B75A0;
  if (!qword_1002B75A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Database, &type metadata for Database);
    atomic_store(result, (unint64_t *)&qword_1002B75A0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Database(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001BFFC8 + 4 * asc_1002438A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001BFFE8 + 4 * byte_1002438A5[v4]))();
}

_BYTE *sub_1001BFFC8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001BFFE8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001BFFF0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001BFFF8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001C0000(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001C0008(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Database()
{
  return &type metadata for Database;
}

ValueMetadata *type metadata accessor for MetricKey()
{
  return &type metadata for MetricKey;
}

uint64_t sub_1001C0038(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001C0074 + 4 * byte_1002438AA[a1]))(0x655463697274656DLL, 0xEA00000000006863);
}

uint64_t sub_1001C0074()
{
  return 0x614E63697274656DLL;
}

uint64_t sub_1001C0090()
{
  return 0x7475626972747461;
}

unint64_t sub_1001C00E8()
{
  return 0xD000000000000012;
}

uint64_t sub_1001C0104()
{
  return 0x644963697274656DLL;
}

uint64_t sub_1001C011C()
{
  return 0x657463656C6C6F63;
}

uint64_t sub_1001C013C()
{
  return 0x644973627573;
}

uint64_t sub_1001C0150()
{
  return 0x6C62616870617267;
}

uint64_t sub_1001C016C()
{
  return 0x616D6B6F6F427369;
}

uint64_t sub_1001C018C()
{
  return 0x4E6E6F6974636573;
}

uint64_t sub_1001C01B0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001C01EC + 4 * byte_1002438B6[a1]))(0x655463697274656DLL, 0xEA00000000006863);
}

uint64_t sub_1001C01EC()
{
  return 0x614E63697274656DLL;
}

uint64_t sub_1001C0208()
{
  return 0x7475626972747461;
}

unint64_t sub_1001C0260()
{
  return 0xD000000000000012;
}

uint64_t sub_1001C027C()
{
  return 0x644963697274656DLL;
}

uint64_t sub_1001C0294()
{
  return 0x657463656C6C6F63;
}

uint64_t sub_1001C02B4()
{
  return 0x644973627573;
}

uint64_t sub_1001C02C8()
{
  return 0x6C62616870617267;
}

uint64_t sub_1001C02E4()
{
  return 0x616D6B6F6F427369;
}

uint64_t sub_1001C0304()
{
  return 0x4E6E6F6974636573;
}

uint64_t sub_1001C0328(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_1001C0038(*a1);
  v5 = v4;
  v6 = sub_1001C0038(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_1001C03B0()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_1001C0038(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001C0410(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1001C0038(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1001C0450(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_1001C0038(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_1001C04AC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001CC064(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001C04D8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1001C0038(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001C0500()
{
  unsigned __int8 *v0;

  return sub_1001C01B0(*v0);
}

unint64_t sub_1001C0508@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001CC064(a1);
  *a2 = result;
  return result;
}

void sub_1001C052C(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_1001C0538(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001CC490();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C0560(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001CC490();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C0588@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  uint64_t v44;
  uint64_t v45;
  NSString v46;
  uint64_t v47;
  char *v48;
  char v49;
  char *v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  int *v68;
  char *v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;

  v61 = a2;
  v3 = type metadata accessor for Date(0);
  v64 = *(_QWORD *)(v3 - 8);
  v65 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100146438(&qword_1002B77D0);
  v6 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Metric(0);
  v10 = (int *)__chkstk_darwin(v9);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v10[14];
  v12[v13] = 0;
  v14 = v10[15];
  v12[v14] = 0;
  v15 = &v12[v10[16]];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v67 = v15;
  v68 = v10;
  v16 = a1[3];
  v17 = a1[4];
  v66 = a1;
  sub_100146508(a1, v16);
  v18 = sub_1001CC490();
  v62 = v8;
  v19 = v69;
  v20 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Metric.CodingKeys, &type metadata for Metric.CodingKeys, v18, v16, v17);
  if (v19)
  {
    v69 = v19;
    sub_10014652C(v66);
    LODWORD(v68) = 0;
    return swift_bridgeObjectRelease(*((_QWORD *)v67 + 1));
  }
  v69 = v5;
  v59 = v14;
  v60 = v13;
  v21 = v6;
  UUID.init()(v20);
  v81 = 0;
  v22 = v63;
  KeyedDecodingContainer.decode(_:forKey:)(&v81, v63);
  v26 = v25;
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  v28 = v68;
  *(_QWORD *)&v12[v68[5]] = v27;
  v80 = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v80, v22);
  v30 = v29;
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v30);
  *(_QWORD *)&v12[v28[6]] = v31;
  v79 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v79, v22);
  v33 = v32;
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v33);
  *(_QWORD *)&v12[v28[7]] = v34;
  v78 = 3;
  KeyedDecodingContainer.decode(_:forKey:)(&v78, v22);
  v36 = v35;
  v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v36);
  *(_QWORD *)&v12[v28[8]] = v37;
  v77 = 4;
  KeyedDecodingContainer.decode(_:forKey:)(&v77, v22);
  v39 = v38;
  v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v39);
  *(_QWORD *)&v12[v28[9]] = v40;
  v76 = 5;
  KeyedDecodingContainer.decode(_:forKey:)(&v76, v22);
  v42 = v41;
  v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v42);
  *(_QWORD *)&v12[v28[10]] = v43;
  v75 = 6;
  KeyedDecodingContainer.decode(_:forKey:)(&v75, v22);
  v45 = v44;
  v46 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v45);
  *(_QWORD *)&v12[v28[12]] = v46;
  v74 = 7;
  v47 = sub_100146004(&qword_1002B77E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v48 = v69;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v65, &v74, v22, v65, v47);
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v12[v28[11]], v48, v65);
  v73 = 8;
  *(_DWORD *)&v12[v28[13]] = KeyedDecodingContainer.decode(_:forKey:)(&v73, v22);
  v72 = 9;
  v49 = KeyedDecodingContainer.decode(_:forKey:)(&v72, v22);
  v69 = 0;
  v12[v60] = v49 & 1;
  v71 = 10;
  v50 = v69;
  v51 = KeyedDecodingContainer.decode(_:forKey:)(&v71, v63);
  v69 = v50;
  if (v50
    || (v12[v59] = v51 & 1,
        v70 = 11,
        v52 = v69,
        v53 = KeyedDecodingContainer.decode(_:forKey:)(&v70, v63),
        (v69 = v52) != 0))
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v62, v63);
    v55 = v68;
    sub_10014652C(v66);
    LODWORD(v68) = 1;
    v24 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v12, v24);

    (*(void (**)(char *, uint64_t))(v64 + 8))(&v12[v55[11]], v65);
    if ((v68 & 1) != 0)

    return swift_bridgeObjectRelease(*((_QWORD *)v67 + 1));
  }
  v56 = v53;
  v57 = v54;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v62, v63);
  v58 = v67;
  swift_bridgeObjectRelease(*((_QWORD *)v67 + 1));
  *v58 = v56;
  v58[1] = v57;
  sub_10017417C((uint64_t)v12, v61, type metadata accessor for Metric);
  sub_10014652C(v66);
  return sub_1001B565C((uint64_t)v12, type metadata accessor for Metric);
}

uint64_t sub_1001C0C6C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v43;
  char v44;
  __int128 v45;

  v3 = v1;
  v5 = sub_100146438(&qword_1002B77E8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100146508(a1, v9);
  v11 = sub_1001CC490();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Metric.CodingKeys, &type metadata for Metric.CodingKeys, v11, v9, v10);
  v12 = (int *)type metadata accessor for Metric(0);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v3 + v12[5]));
  v15 = v14;
  LOBYTE(v45) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v45, v5);
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease(v15);
  }
  else
  {
    swift_bridgeObjectRelease(v15);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v3 + v12[6]));
    v18 = v17;
    LOBYTE(v45) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v45, v5);
    swift_bridgeObjectRelease(v18);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v3 + v12[7]));
    v21 = v20;
    LOBYTE(v45) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v45, v5);
    swift_bridgeObjectRelease(v21);
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v3 + v12[8]));
    v24 = v23;
    LOBYTE(v45) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v45, v5);
    swift_bridgeObjectRelease(v24);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v3 + v12[9]));
    v27 = v26;
    LOBYTE(v45) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v26, &v45, v5);
    swift_bridgeObjectRelease(v27);
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v3 + v12[10]));
    v30 = v29;
    LOBYTE(v45) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v28, v29, &v45, v5);
    swift_bridgeObjectRelease(v30);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v3 + v12[12]));
    v33 = v32;
    LOBYTE(v45) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v31, v32, &v45, v5);
    swift_bridgeObjectRelease(v33);
    v34 = v3 + v12[11];
    LOBYTE(v45) = 7;
    v35 = type metadata accessor for Date(0);
    v36 = sub_100146004(&qword_1002B77F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v34, &v45, v5, v35, v36);
    v37 = *(unsigned int *)(v3 + v12[13]);
    LOBYTE(v45) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v37, &v45, v5);
    v38 = *(unsigned __int8 *)(v3 + v12[14]);
    LOBYTE(v45) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v38, &v45, v5);
    v39 = *(unsigned __int8 *)(v3 + v12[15]);
    LOBYTE(v45) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v39, &v45, v5);
    v45 = *(_OWORD *)(v3 + v12[16]);
    v44 = 11;
    v40 = sub_100146438((uint64_t *)&unk_1002B5640);
    v41 = sub_1001CC4D4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v45, &v44, v5, v40, v41);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_1001C1030@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C0588(a1, a2);
}

uint64_t sub_1001C1044(_QWORD *a1)
{
  return sub_1001C0C6C(a1);
}

uint64_t sub_1001C1058(sqlite3 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  sqlite3 *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  sqlite3 *v30;
  void *v31;
  unint64_t v32;

  v30 = a1;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v28 = *(_QWORD *)(v2 - 8);
  v29 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  v31 = 0;
  v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  v15 = swift_bridgeObjectRelease(v32);
  v31 = (void *)0xD00000000000001BLL;
  v32 = 0x80000001002157C0;
  UUID.init()(v15);
  v16 = sub_100146004(&qword_1002B7820, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v16);
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(object);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v20 = v31;
  v21 = v32;
  static DispatchQoS.unspecified.getter(v19);
  v31 = &_swiftEmptyArrayStorage;
  v22 = sub_100146004(&qword_1002B5E80, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v23 = sub_100146438(&qword_1002B5E88);
  v24 = sub_10018A668((unint64_t *)&unk_1002B5E90, &qword_1002B5E88);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v5, v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v29);
  *(_QWORD *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v20, v21, v10, v7, v4, 0);
  v25 = v30;
  *(_QWORD *)(v1 + 16) = v30;
  sqlite3_exec(v25, "PRAGMA journal_mode=WAL;", 0, 0, 0);
  return v1;
}

uint64_t sub_1001C130C()
{
  uint64_t v0;

  sqlite3_close(*(sqlite3 **)(v0 + 16));

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for SQLiteDatabase()
{
  return objc_opt_self(_TtC13FTMInternal_414SQLiteDatabase);
}

sqlite3_stmt *sub_1001C1358()
{
  uint64_t v0;
  sqlite3 *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  sqlite3_stmt *v10;

  v10 = 0;
  v1 = *(sqlite3 **)(v0 + 16);
  v2 = String.utf8CString.getter();
  v3 = sqlite3_prepare_v2(v1, (const char *)(v2 + 32), -1, &v10, 0);
  swift_release(v2);
  if (!v3)
    return v10;
  if (sqlite3_errmsg(v1))
  {
    v4 = String.init(cString:)();
    v6 = v5;
  }
  else
  {
    v6 = 0x8000000100215740;
    v4 = 0xD000000000000026;
  }
  v8 = sub_1001C6F6C();
  swift_allocError(&type metadata for SQLiteError, v8, 0, 0);
  *(_QWORD *)v9 = v4;
  *(_QWORD *)(v9 + 8) = v6;
  *(_BYTE *)(v9 + 16) = 1;
  return (sqlite3_stmt *)swift_willThrow();
}

uint64_t *sub_1001C145C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v13;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_1001C1500(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_1001C1554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v12;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_1001C15CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 24);
  v13 = *(_QWORD *)(a2 + v12);
  v14 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_1001C1664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1001C16C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 24);
  v14 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_1001C1748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C1754);
}

uint64_t sub_1001C1754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001C17D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C17E0);
}

uint64_t sub_1001C17E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MetricSectional(uint64_t a1)
{
  return sub_1001C6EF0(a1, qword_1002B76B8, (uint64_t)&nominal type descriptor for MetricSectional);
}

uint64_t sub_1001C1870(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1002439D8;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

void destroy for DashboardTableItem(id *a1)
{

}

uint64_t initializeWithCopy for DashboardTableItem(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v7 = v3;
  v8 = v4;
  v9 = v5;
  v10 = v6;
  return a1;
}

uint64_t assignWithCopy for DashboardTableItem(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 16);
  v11 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  v12 = v10;

  v13 = *(void **)(a2 + 24);
  v14 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  v15 = v13;

  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for DashboardTableItem(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DashboardTableItem(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 36))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DashboardTableItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DashboardTableItem()
{
  return &type metadata for DashboardTableItem;
}

_QWORD *sub_1001C1AF4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v37 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v37);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(void **)((char *)a2 + v8);
    *(_QWORD *)((char *)a1 + v8) = v10;
    v11 = *(void **)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v11;
    v12 = a3[7];
    v13 = a3[8];
    v14 = *(void **)((char *)a2 + v12);
    *(_QWORD *)((char *)a1 + v12) = v14;
    v15 = *(void **)((char *)a2 + v13);
    *(_QWORD *)((char *)a1 + v13) = v15;
    v16 = a3[9];
    v17 = a3[10];
    v18 = *(void **)((char *)a2 + v16);
    *(_QWORD *)((char *)a1 + v16) = v18;
    v19 = *(void **)((char *)a2 + v17);
    *(_QWORD *)((char *)a1 + v17) = v19;
    v20 = a3[11];
    v40 = (char *)a2 + v20;
    v41 = (char *)a1 + v20;
    v21 = type metadata accessor for Date(0);
    v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
    v22 = v10;
    v23 = v11;
    v24 = v14;
    v25 = v15;
    v26 = v18;
    v27 = v19;
    v39(v41, v40, v21);
    v28 = a3[12];
    v29 = a3[13];
    v30 = *(void **)((char *)a2 + v28);
    *(_QWORD *)((char *)a1 + v28) = v30;
    *(_DWORD *)((char *)a1 + v29) = *(_DWORD *)((char *)a2 + v29);
    v31 = a3[15];
    *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    *((_BYTE *)a1 + v31) = *((_BYTE *)a2 + v31);
    v32 = a3[16];
    v33 = (_QWORD *)((char *)a1 + v32);
    v34 = (_QWORD *)((char *)a2 + v32);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v36 = v30;
    swift_bridgeObjectRetain(v35);
  }
  return a1;
}

uint64_t sub_1001C1C64(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

  v5 = a1 + a2[11];
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[16] + 8));
}

uint64_t sub_1001C1D2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  id v35;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  v11 = a3[7];
  v12 = a3[8];
  v13 = *(void **)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v13;
  v14 = *(void **)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v14;
  v15 = a3[9];
  v16 = a3[10];
  v17 = *(void **)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = *(void **)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v18;
  v19 = a3[11];
  v38 = a2 + v19;
  v39 = a1 + v19;
  v20 = type metadata accessor for Date(0);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  v21 = v9;
  v22 = v10;
  v23 = v13;
  v24 = v14;
  v25 = v17;
  v26 = v18;
  v37(v39, v38, v20);
  v27 = a3[12];
  v28 = a3[13];
  v29 = *(void **)(a2 + v27);
  *(_QWORD *)(a1 + v27) = v29;
  *(_DWORD *)(a1 + v28) = *(_DWORD *)(a2 + v28);
  v30 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  v31 = a3[16];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = v29;
  swift_bridgeObjectRetain(v34);
  return a1;
}

uint64_t sub_1001C1E70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  v11 = a3[6];
  v12 = *(void **)(a2 + v11);
  v13 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  v14 = v12;

  v15 = a3[7];
  v16 = *(void **)(a2 + v15);
  v17 = *(void **)(a1 + v15);
  *(_QWORD *)(a1 + v15) = v16;
  v18 = v16;

  v19 = a3[8];
  v20 = *(void **)(a2 + v19);
  v21 = *(void **)(a1 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  v22 = v20;

  v23 = a3[9];
  v24 = *(void **)(a2 + v23);
  v25 = *(void **)(a1 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  v26 = v24;

  v27 = a3[10];
  v28 = *(void **)(a2 + v27);
  v29 = *(void **)(a1 + v27);
  *(_QWORD *)(a1 + v27) = v28;
  v30 = v28;

  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[12];
  v36 = *(void **)(a2 + v35);
  v37 = *(void **)(a1 + v35);
  *(_QWORD *)(a1 + v35) = v36;
  v38 = v36;

  *(_DWORD *)(a1 + a3[13]) = *(_DWORD *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v39 = a3[16];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (_QWORD *)(a2 + v39);
  *v40 = *v41;
  v42 = v41[1];
  v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  return a1;
}

uint64_t sub_1001C1FEC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = a3[11];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_DWORD *)(a1 + v14) = *(_DWORD *)(a2 + v14);
  v15 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_1001C20E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = a3[6];
  v10 = *(void **)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);

  v11 = a3[7];
  v12 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);

  v13 = a3[8];
  v14 = *(void **)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);

  v15 = a3[9];
  v16 = *(void **)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);

  v17 = a3[10];
  v18 = *(void **)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);

  v19 = a3[11];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[12];
  v24 = *(void **)(a1 + v23);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);

  v25 = a3[14];
  *(_DWORD *)(a1 + a3[13]) = *(_DWORD *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  v26 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  v27 = (_QWORD *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  v31 = v27[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t sub_1001C2228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C2234);
}

uint64_t sub_1001C2234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Date(0);
    v10 = a1 + *(int *)(a3 + 44);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1001C22DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C22E8);
}

uint64_t sub_1001C22E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 44);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for Metric(uint64_t a1)
{
  return sub_1001C6EF0(a1, qword_1002B7750, (uint64_t)&nominal type descriptor for Metric);
}

uint64_t sub_1001C23A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[13];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[7] = *(_QWORD *)(result - 8) + 64;
      v5[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[9] = (char *)&value witness table for Builtin.Int32 + 64;
      v5[10] = &unk_100243A10;
      v5[11] = &unk_100243A10;
      v5[12] = &unk_100243A28;
      swift_initStructMetadata(a1, 256, 13, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AttributeDetailTimeFrame(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001C24AC + 4 * byte_1002438C7[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001C24E0 + 4 * byte_1002438C2[v4]))();
}

uint64_t sub_1001C24E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C24E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001C24F0);
  return result;
}

uint64_t sub_1001C24FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001C2504);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001C2508(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C2510(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeDetailTimeFrame()
{
  return &type metadata for AttributeDetailTimeFrame;
}

unint64_t sub_1001C2530()
{
  unint64_t result;

  result = qword_1002B77B8;
  if (!qword_1002B77B8)
  {
    result = swift_getWitnessTable(&unk_100243A9C, &type metadata for AttributeDetailTimeFrame);
    atomic_store(result, (unint64_t *)&qword_1002B77B8);
  }
  return result;
}

uint64_t sub_1001C2574()
{
  return sub_100146004((unint64_t *)&qword_1002B4430, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_1001C25A0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

const char *sub_1001C25C4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  sqlite3_stmt *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];

  v10 = a1 + 16;
  swift_beginAccess(a1 + 16, v29, 0, 0);
  Strong = swift_weakLoadStrong(v10);
  if (Strong)
  {
    v12 = Strong;
    v13 = sub_1001C1358();
    swift_release(v12);
  }
  else
  {
    v13 = 0;
  }
  if (sqlite3_step(v13) == 101)
  {
    if (qword_1002B3A18 != -1)
      swift_once(&qword_1002B3A18, sub_10017480C);
    v14 = qword_1002BF008;
    v15 = static os_log_type_t.error.getter();
    v16 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v17 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v17 + 16) = xmmword_1002402A0;
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 64) = sub_10016B1E0();
    *(_QWORD *)(v17 + 32) = a6;
    *(_QWORD *)(v17 + 40) = a7;
    swift_bridgeObjectRetain(a7);
    os_log(_:dso:log:type:_:)("%{public}s table created.", 25, 2, &_mh_execute_header, v14, v15, v17);
    swift_bridgeObjectRelease(v17);
    a4(1, 0);
    return (const char *)sqlite3_finalize(v13);
  }
  result = sqlite3_errmsg(v13);
  if (result)
  {
    v19 = String.init(cString:)();
    v21 = v20;
    if (qword_1002B3A18 != -1)
      swift_once(&qword_1002B3A18, sub_10017480C);
    v22 = qword_1002BF008;
    v23 = static os_log_type_t.error.getter();
    v24 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v25 = swift_allocObject(v24, 72, 7);
    *(_OWORD *)(v25 + 16) = xmmword_1002402A0;
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    *(_QWORD *)(v25 + 64) = sub_10016B1E0();
    *(_QWORD *)(v25 + 32) = v19;
    *(_QWORD *)(v25 + 40) = v21;
    swift_bridgeObjectRetain(v21);
    os_log(_:dso:log:type:_:)("%{public}s error ocurred while creating a table (sqlite3_step)", 62, 2, &_mh_execute_header, v22, v23, v25);
    swift_bridgeObjectRelease(v25);
    v26 = sub_1001C6F6C();
    v27 = swift_allocError(&type metadata for SQLiteError, v26, 0, 0);
    *(_QWORD *)v28 = v19;
    *(_QWORD *)(v28 + 8) = v21;
    *(_BYTE *)(v28 + 16) = 1;
    a4(0, v27);
    swift_errorRelease(v27);
    return (const char *)sqlite3_finalize(v13);
  }
  __break(1u);
  return result;
}

void sub_1001C2958(uint64_t a1, int a2, void (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t Strong;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  void *object;
  Swift::String v30;
  unint64_t v31;
  sqlite3_stmt *v32;
  sqlite3_stmt *v33;
  _QWORD *v34;
  const unsigned __int8 *v35;
  const unsigned __int8 *v36;
  const unsigned __int8 *v37;
  const unsigned __int8 *v38;
  const unsigned __int8 *v39;
  const unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  NSString v47;
  char *v48;
  Class isa;
  NSString v50;
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(_QWORD, uint64_t);
  uint64_t v109;
  __int128 v110;
  unint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void **aBlock;
  unint64_t v126;
  uint64_t (*v127)();
  void *v128;
  uint64_t (*v129)();
  _QWORD *v130;
  int v131;
  char v132[8];

  v109 = a4;
  v108 = a3;
  v107 = type metadata accessor for DispatchWorkItemFlags(0);
  v106 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v105 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for DispatchQoS(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v102 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v120 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MetricList(0);
  v118 = *(_QWORD *)(v11 - 8);
  v119 = v11;
  v12 = __chkstk_darwin(v11);
  v101 = (uint64_t)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v113 = (uint64_t *)((char *)&v100 - v14);
  v15 = type metadata accessor for Locale(0);
  v116 = *(_QWORD *)(v15 - 8);
  v117 = v15;
  __chkstk_darwin(v15);
  v115 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100146438(&qword_1002B4168);
  v18 = __chkstk_darwin(v17);
  v114 = (uint64_t)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v112 = (char *)&v100 - v21;
  __chkstk_darwin(v20);
  v124 = (uint64_t)&v100 - v22;
  a1 += 16;
  v23 = swift_allocObject(&unk_100266928, 24, 7);
  v24 = sub_1001BEB00((uint64_t)_swiftEmptyArrayStorage);
  v123 = v23;
  *(_QWORD *)(v23 + 16) = v24;
  swift_beginAccess(a1, v132, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (!Strong)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x20736920666C6573, 0xEB000000006C696ELL, "FTMInternal_4/DBManager.swift", 29, 2, 562, 0);
    __break(1u);
    return;
  }
  v26 = Strong;
  aBlock = 0;
  v126 = 0xE000000000000000;
  _StringGuts.grow(_:)(186);
  v27._countAndFlagsBits = 0xD00000000000006ELL;
  v27._object = (void *)0x80000001002153B0;
  String.append(_:)(v27);
  v131 = a2;
  v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v28._object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(object);
  v30._countAndFlagsBits = 0xD00000000000004ALL;
  v30._object = (void *)0x8000000100215420;
  String.append(_:)(v30);
  v31 = v126;
  v32 = sub_1001C1358();
  v121 = v9;
  v122 = v8;
  v33 = v32;
  swift_bridgeObjectRelease(v31);
  swift_release(v26);
  v34 = &unk_100240000;
  if (sqlite3_step(v33) != 100)
  {
LABEL_25:
    v82 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
    v83 = (void *)static OS_dispatch_queue.main.getter(v82);
    v84 = (_QWORD *)swift_allocObject(&unk_1002669A0, 40, 7);
    v85 = v109;
    v84[2] = v108;
    v84[3] = v85;
    v86 = v123;
    v84[4] = v123;
    v129 = sub_1001C6F60;
    v130 = v84;
    aBlock = _NSConcreteStackBlock;
    v126 = v34[259];
    v127 = sub_1001BE428;
    v128 = &unk_1002669B8;
    v87 = _Block_copy(&aBlock);
    v88 = v130;
    swift_retain(v85);
    swift_retain(v86);
    swift_release(v88);
    v89 = v102;
    static DispatchQoS.unspecified.getter(v90);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v91 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v92 = sub_100146438((uint64_t *)&unk_1002B55F0);
    v93 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
    v94 = v105;
    v95 = v92;
    v96 = v107;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v95, v93, v107, v91);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v89, v94, v87);
    _Block_release(v87);

    (*(void (**)(char *, uint64_t))(v106 + 8))(v94, v96);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v89, v104);
    goto LABEL_27;
  }
  v111 = 0x8000000100211C90;
  v110 = xmmword_1002402A0;
  while (1)
  {
    v35 = sqlite3_column_text(v33, 0);
    if (!v35)
      break;
    v36 = v35;
    v37 = sqlite3_column_text(v33, 1);
    if (!v37)
      break;
    v38 = v37;
    v39 = sqlite3_column_text(v33, 2);
    if (!v39)
      break;
    v40 = v39;
    v41 = String.init(cString:)(v36);
    v43 = v42;
    String.init(cString:)(v40);
    v45 = v44;
    v46 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
    v47 = String._bridgeToObjectiveC()();
    objc_msgSend(v46, "setDateFormat:", v47);

    v48 = v115;
    static Locale.current.getter();
    isa = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v116 + 8))(v48, v117);
    objc_msgSend(v46, "setLocale:", isa);

    v50 = String._bridgeToObjectiveC()();
    v51 = objc_msgSend(v46, "dateFromString:", v50);

    if (v51)
    {
      v52 = v112;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

      v53 = 0;
      v46 = v51;
    }
    else
    {
      v53 = 1;
      v52 = v112;
    }

    v55 = v121;
    v54 = v122;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v52, v53, 1, v122);
    v56 = (uint64_t)v52;
    v57 = v124;
    sub_1001C6FB0(v56, v124);
    swift_bridgeObjectRelease(v45);
    v58 = String.init(cString:)(v38);
    v60 = v59;
    v61 = v114;
    sub_10014BD9C(v57, v114, &qword_1002B4168);
    v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v61, 1, v54);
    v63 = v120;
    if ((_DWORD)v62 == 1)
    {
      Date.init()(v62);
      sub_10014BDE0(v61, &qword_1002B4168);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v120, v61, v54);
    }
    v64 = sqlite3_column_int(v33, 3);
    v65 = (uint64_t)v113;
    *v113 = v58;
    *(_QWORD *)(v65 + 8) = v60;
    v66 = v119;
    (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v65 + *(int *)(v119 + 20), v63, v54);
    *(_DWORD *)(v65 + *(int *)(v66 + 24)) = v64;
    v67 = v123;
    v34 = (_QWORD *)&unk_100240000;
    if (*(_QWORD *)(*(_QWORD *)(v123 + 16) + 16))
    {
      swift_bridgeObjectRetain(v43);
      sub_1001C7C98(v41, v43);
      v69 = v68;
      swift_bridgeObjectRelease(v43);
      if ((v69 & 1) != 0)
      {
        v70 = *(_QWORD *)(v67 + 16);
        if (*(_QWORD *)(v70 + 16))
        {
          swift_bridgeObjectRetain(v43);
          v71 = sub_1001C7C98(v41, v43);
          if ((v72 & 1) != 0)
          {
            v73 = *(_QWORD *)(*(_QWORD *)(v70 + 56) + 8 * v71);
            swift_bridgeObjectRetain(v73);
            swift_bridgeObjectRelease(v43);
            sub_10017417C(v65, v101, type metadata accessor for MetricList);
            if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0)
              v73 = sub_1001C7A5C(0, *(_QWORD *)(v73 + 16) + 1, 1, v73, &qword_1002B6718, type metadata accessor for MetricList);
            v75 = *(_QWORD *)(v73 + 16);
            v74 = *(_QWORD *)(v73 + 24);
            if (v75 >= v74 >> 1)
              v73 = sub_1001C7A5C(v74 > 1, v75 + 1, 1, v73, &qword_1002B6718, type metadata accessor for MetricList);
            *(_QWORD *)(v73 + 16) = v75 + 1;
            sub_1001B5618(v101, v73+ ((*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80))+ *(_QWORD *)(v118 + 72) * v75, type metadata accessor for MetricList);
            goto LABEL_24;
          }
          swift_bridgeObjectRelease(v43);
        }
      }
    }
    v76 = sub_100146438(&qword_1002B6718);
    v77 = *(unsigned __int8 *)(v118 + 80);
    v78 = (v77 + 32) & ~v77;
    v73 = swift_allocObject(v76, v78 + *(_QWORD *)(v118 + 72), v77 | 7);
    *(_OWORD *)(v73 + 16) = v110;
    sub_10017417C(v65, v73 + v78, type metadata accessor for MetricList);
LABEL_24:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v67 + 16));
    aBlock = *(void ***)(v67 + 16);
    *(_QWORD *)(v67 + 16) = 0x8000000000000000;
    sub_1001C9C70(v73, v41, v43, isUniquelyReferenced_nonNull_native);
    v80 = v67;
    v81 = *(_QWORD *)(v67 + 16);
    *(_QWORD *)(v80 + 16) = aBlock;
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v81);
    sub_1001B565C(v65, type metadata accessor for MetricList);
    sub_10014BDE0(v124, &qword_1002B4168);
    if (sqlite3_step(v33) != 100)
      goto LABEL_25;
  }
  v97 = sub_1001C6F6C();
  v98 = swift_allocError(&type metadata for SQLiteError, v97, 0, 0);
  *(_QWORD *)v99 = 0;
  *(_QWORD *)(v99 + 8) = 0;
  *(_BYTE *)(v99 + 16) = 4;
  v108(0, v98);
  swift_errorRelease(v98);
  v86 = v123;
LABEL_27:
  sqlite3_finalize(v33);
  swift_release(v86);
}

uint64_t sub_1001C3570(void (*a1)(uint64_t, _QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(a3 + 16, v8, 0, 0);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = swift_bridgeObjectRetain(v5);
  a1(v6, 0);
  return swift_bridgeObjectRelease(v5);
}

void sub_1001C35D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7, uint64_t a8, void (*a9)(_QWORD, uint64_t), uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t Strong;
  uint64_t v33;
  uint64_t v34;
  sqlite3_stmt **v35;
  uint64_t v36;
  uint64_t v37;
  sqlite3_stmt *v38;
  sqlite3_stmt *v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  const unsigned __int8 *v43;
  const unsigned __int8 *v44;
  const unsigned __int8 *v45;
  const unsigned __int8 *v46;
  const unsigned __int8 *v47;
  const unsigned __int8 *v48;
  const unsigned __int8 *v49;
  const unsigned __int8 *v50;
  const unsigned __int8 *v51;
  const unsigned __int8 *v52;
  const unsigned __int8 *v53;
  const unsigned __int8 *v54;
  const unsigned __int8 *v55;
  const unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSString v61;
  uint64_t v62;
  uint64_t v63;
  NSString v64;
  uint64_t v65;
  uint64_t v66;
  NSString v67;
  uint64_t v68;
  uint64_t v69;
  NSString v70;
  uint64_t v71;
  uint64_t v72;
  NSString v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Swift::String v79;
  id v80;
  Swift::String_optional v81;
  void *object;
  NSString v83;
  Swift::String v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void (*v94)(char *, char *, uint64_t);
  char *v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  id v100;
  void *v101;
  NSString v102;
  void *v103;
  void *v104;
  id v105;
  id v106;
  id v107;
  void (*v108)(char *, uint64_t);
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  _QWORD *v113;
  void (*v114)(_QWORD, _QWORD);
  uint64_t v115;
  uint64_t v116;
  void *v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  _QWORD *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  char *v147;
  sqlite3_stmt **v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  int *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(_QWORD, uint64_t);
  uint64_t v161;
  NSString v162;
  uint64_t v163;
  NSString v164;
  NSString v165;
  NSString v166;
  NSString v167;
  NSString v168;
  NSString v169;
  int v170;
  id v171;
  id v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  _QWORD v182[2];
  uint64_t v183;
  uint64_t v184;
  Swift::String aBlock;
  uint64_t (*v186)();
  void *v187;
  uint64_t (*v188)();
  _QWORD *v189;
  char v190[8];

  v158 = type metadata accessor for DispatchWorkItemFlags(0);
  v156 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v155 = (char *)&v144 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = type metadata accessor for DispatchQoS(0);
  v154 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v153 = (char *)&v144 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID(0);
  v176 = *(_QWORD *)(v19 - 8);
  v177 = v19;
  __chkstk_darwin(v19);
  v180 = (char *)&v144 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = (int *)type metadata accessor for Metric(0);
  v151 = *((_QWORD *)v152 - 1);
  v21 = __chkstk_darwin(v152);
  v175 = (uint64_t)&v144 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v174 = (uint64_t)&v144 - v23;
  v178 = type metadata accessor for Date(0);
  v181 = *(_QWORD *)(v178 - 8);
  v24 = __chkstk_darwin(v178);
  v150 = (char *)&v144 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v179 = (char *)&v144 - v26;
  v27 = sub_100146438(&qword_1002B4168);
  v28 = __chkstk_darwin(v27);
  v159 = (uint64_t)&v144 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v31 = (char *)&v144 - v30;
  swift_beginAccess(a1 + 16, v190, 0, 0);
  Strong = swift_weakLoadStrong(a1 + 16);
  if (Strong)
  {
    v33 = Strong;
    v161 = a10;
    v160 = a9;
    v34 = swift_allocObject(&unk_1002667C0, 24, 7);
    v144 = v34;
    *(_QWORD *)(v34 + 16) = 0;
    v35 = (sqlite3_stmt **)(v34 + 16);
    sub_1001CC0AC(a2, a3, a4, a5, a6, a7);
    v37 = v36;
    v38 = sub_1001C1358();
    v145 = v33;
    v149 = 0;
    v39 = v38;
    swift_bridgeObjectRelease(v37);
    *v35 = v39;
    v40 = sqlite3_step(v39);
    v41 = _swiftEmptyArrayStorage;
    v42 = v178;
    if (v40 == 100)
    {
      v146 = xmmword_100242020;
      v147 = v31;
      v148 = v35;
      while (1)
      {
        v173 = v41;
        sqlite3_column_int(*v35, 0);
        v43 = sqlite3_column_text(*v35, 1);
        if (!v43)
          goto LABEL_27;
        v44 = v43;
        v45 = sqlite3_column_text(*v35, 2);
        if (!v45)
          goto LABEL_27;
        v46 = v45;
        v47 = sqlite3_column_text(*v35, 3);
        if (!v47)
          goto LABEL_27;
        v48 = v47;
        v49 = sqlite3_column_text(*v35, 4);
        if (!v49
          || (v50 = v49, (v51 = sqlite3_column_text(*v35, 5)) == 0)
          || (v52 = v51, (v53 = sqlite3_column_text(*v35, 7)) == 0)
          || (v54 = v53, (v55 = sqlite3_column_text(*v35, 9)) == 0))
        {
LABEL_27:
          swift_bridgeObjectRelease(v173);
          v127 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
          v128 = (void *)static OS_dispatch_queue.main.getter(v127);
          v129 = swift_allocObject(&unk_100266C70, 32, 7);
          v130 = v161;
          *(_QWORD *)(v129 + 16) = v160;
          *(_QWORD *)(v129 + 24) = v130;
          v188 = sub_1001CC684;
          v189 = (_QWORD *)v129;
          aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
          aBlock._object = (void *)1107296256;
          v186 = sub_1001BE428;
          v187 = &unk_100266C88;
          v131 = _Block_copy(&aBlock);
          v132 = v189;
          swift_retain(v130);
          swift_release(v132);
          v133 = v153;
          static DispatchQoS.unspecified.getter(v134);
          aBlock._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
          v135 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v136 = sub_100146438((uint64_t *)&unk_1002B55F0);
          v137 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
          v138 = v155;
          v139 = v136;
          v140 = v158;
          dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v139, v137, v158, v135);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v133, v138, v131);
          _Block_release(v131);

          (*(void (**)(char *, uint64_t))(v156 + 8))(v138, v140);
          (*(void (**)(char *, uint64_t))(v154 + 8))(v133, v157);
          goto LABEL_28;
        }
        v56 = v55;
        String.init(cString:)(v44);
        v58 = v57;
        v172 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v58);
        String.init(cString:)(v46);
        v60 = v59;
        v61 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v60);
        String.init(cString:)(v48);
        v63 = v62;
        v64 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v63);
        String.init(cString:)(v50);
        v66 = v65;
        v67 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v66);
        String.init(cString:)(v52);
        v69 = v68;
        v70 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v69);
        LODWORD(v171) = sqlite3_column_int(*v35, 6);
        String.init(cString:)(v54);
        v72 = v71;
        v73 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v72);
        String.init(cString:)(v56);
        v75 = v74;
        sub_10016A920((uint64_t)v31);
        swift_bridgeObjectRelease(v75);
        v170 = sqlite3_column_int(*v35, 8);
        v76 = v159;
        sub_10014BD9C((uint64_t)v31, v159, &qword_1002B4168);
        v77 = v181;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v181 + 48))(v76, 1, v42) == 1)
          break;
        v167 = v73;
        v168 = v70;
        v78 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 32))(v179, v76, v42);
        UUID.init()(v78);
        v165 = v64;
        v79 = String.init(_:)(v165);
        v80 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v81.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v81.value._object = (void *)0xEB00000000656C62;
        object = NSLocalizedString(_:tableName:bundle:value:comment:)(v79, v81, (NSBundle)v80, v79, v79)._object;
        swift_bridgeObjectRelease(v79._object);

        v83 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(object);
        v166 = v67;
        v84 = String.init(_:)(v166);
        v85 = v84._object;
        if (qword_1002B39C8 != -1)
          swift_once(&qword_1002B39C8, sub_10016A90C);
        v169 = v61;
        v86 = qword_1002BEFC0;
        v87 = *(_QWORD *)(qword_1002BEFC0 + 16);
        if (v87)
        {
          v164 = v83;
          swift_bridgeObjectRetain(qword_1002BEFC0);
          v88 = sub_10014654C();
          v89 = (uint64_t *)(v86 + 40);
          while (1)
          {
            v90 = *(v89 - 1);
            v91 = *v89;
            aBlock = v84;
            v183 = v90;
            v184 = v91;
            swift_bridgeObjectRetain(v91);
            if ((StringProtocol.contains<A>(_:)(&v183, &type metadata for String, &type metadata for String, v88, v88) & 1) != 0)
              break;
            v89 += 2;
            swift_bridgeObjectRelease(v91);
            if (!--v87)
            {
              swift_bridgeObjectRelease(v86);
              goto LABEL_20;
            }
          }
          swift_bridgeObjectRelease(v86);
          aBlock = v84;
          v183 = v90;
          v184 = v91;
          v182[0] = 0;
          v182[1] = 0xE000000000000000;
          StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v183, v182, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v88, v88, v88);
          v93 = v92;
          swift_bridgeObjectRelease(v84._object);
          swift_bridgeObjectRelease(v91);
          v85 = v93;
LABEL_20:
          v42 = v178;
          v83 = v164;
        }
        v162 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v85);
        v94 = *(void (**)(char *, char *, uint64_t))(v181 + 16);
        v95 = v150;
        v94(v150, v179, v42);
        LODWORD(v171) = (_DWORD)v171 == 1;
        v96 = v152;
        v163 = v152[14];
        v164 = (NSString)v152[15];
        v97 = v42;
        v98 = v174;
        v99 = (_QWORD *)(v174 + v152[16]);
        *v99 = 0;
        v99[1] = 0;
        (*(void (**)(uint64_t, char *, uint64_t))(v176 + 16))(v98, v180, v177);
        v100 = v172;
        *(_QWORD *)(v98 + v96[5]) = v172;
        v101 = v169;
        *(_QWORD *)(v98 + v96[6]) = v169;
        *(_QWORD *)(v98 + v96[7]) = v83;
        v102 = v165;
        *(_QWORD *)(v98 + v96[8]) = v165;
        *(_QWORD *)(v98 + v96[9]) = v162;
        v103 = v168;
        *(_QWORD *)(v98 + v96[10]) = v168;
        v94((char *)(v98 + v96[11]), v95, v97);
        v104 = v167;
        *(_QWORD *)(v98 + v96[12]) = v167;
        *(_DWORD *)(v98 + v96[13]) = v170;
        *(_BYTE *)(v98 + v163) = (_BYTE)v171;
        *((_BYTE *)v164 + v98) = 0;
        v171 = v102;
        v105 = v100;
        v172 = v101;
        v106 = v103;
        v107 = v104;
        v108 = *(void (**)(char *, uint64_t))(v181 + 8);
        v108(v95, v97);
        (*(void (**)(char *, uint64_t))(v176 + 8))(v180, v177);
        swift_bridgeObjectRelease(v99[1]);
        *(_OWORD *)v99 = v146;
        sub_10017417C(v98, v175, type metadata accessor for Metric);
        v41 = v173;
        if ((swift_isUniquelyReferenced_nonNull_native(v173) & 1) == 0)
          v41 = (_QWORD *)sub_1001C7A5C(0, v41[2] + 1, 1, (unint64_t)v41, &qword_1002B6758, type metadata accessor for Metric);
        v31 = v147;
        v110 = v41[2];
        v109 = v41[3];
        v42 = v178;
        if (v110 >= v109 >> 1)
          v41 = (_QWORD *)sub_1001C7A5C(v109 > 1, v110 + 1, 1, (unint64_t)v41, &qword_1002B6758, type metadata accessor for Metric);
        v41[2] = v110 + 1;
        sub_1001B5618(v175, (uint64_t)v41+ ((*(unsigned __int8 *)(v151 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80))+ *(_QWORD *)(v151 + 72) * v110, type metadata accessor for Metric);

        sub_1001B565C(v174, type metadata accessor for Metric);
        v108(v179, v42);
        sub_10014BDE0((uint64_t)v31, &qword_1002B4168);
        v35 = v148;
        if (sqlite3_step(*v148) != 100)
          goto LABEL_26;
      }
      swift_bridgeObjectRelease(v173);
      sub_10014BDE0(v76, &qword_1002B4168);
      v141 = sub_1001C6F6C();
      v142 = swift_allocError(&type metadata for SQLiteError, v141, 0, 0);
      *(_QWORD *)v143 = 0;
      *(_QWORD *)(v143 + 8) = 0;
      *(_BYTE *)(v143 + 16) = 4;
      v160(0, v142);
      swift_errorRelease(v142);

      sub_10014BDE0((uint64_t)v31, &qword_1002B4168);
LABEL_28:
      v116 = v144;
    }
    else
    {
LABEL_26:
      v111 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
      v112 = (void *)static OS_dispatch_queue.main.getter(v111);
      v113 = (_QWORD *)swift_allocObject(&unk_100266C20, 48, 7);
      v114 = v160;
      v113[2] = v41;
      v113[3] = v114;
      v115 = v161;
      v116 = v144;
      v113[4] = v161;
      v113[5] = v116;
      v188 = sub_1001CC624;
      v189 = v113;
      aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
      aBlock._object = (void *)1107296256;
      v186 = sub_1001BE428;
      v187 = &unk_100266C38;
      v117 = _Block_copy(&aBlock);
      v118 = v189;
      swift_retain(v115);
      swift_retain(v116);
      swift_release(v118);
      v119 = v153;
      static DispatchQoS.unspecified.getter(v120);
      aBlock._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
      v121 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v122 = sub_100146438((uint64_t *)&unk_1002B55F0);
      v123 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
      v124 = v155;
      v125 = v122;
      v126 = v158;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v125, v123, v158, v121);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v119, v124, v117);
      _Block_release(v117);

      (*(void (**)(char *, uint64_t))(v156 + 8))(v124, v126);
      (*(void (**)(char *, uint64_t))(v154 + 8))(v119, v157);
    }
    swift_beginAccess(v35, &aBlock, 0, 0);
    sqlite3_finalize(*(sqlite3_stmt **)(v116 + 16));
    swift_release(v145);
    swift_release(v116);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x20736920666C6573, 0xEB000000006C696ELL, "FTMInternal_4/DBManager.swift", 29, 2, 607, 0);
    __break(1u);
  }
}

uint64_t sub_1001C4648(void (*a1)(_QWORD, uint64_t))
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_1001C6F6C();
  v3 = swift_allocError(&type metadata for SQLiteError, v2, 0, 0);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 16) = 4;
  a1(0, v3);
  return swift_errorRelease(v3);
}

uint64_t sub_1001C46AC(uint64_t a1, char a2, void (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  unint64_t v23;
  sqlite3_stmt *v24;
  sqlite3_stmt *v25;
  sqlite3_stmt *v26;
  _QWORD *v27;
  const unsigned __int8 *v28;
  const unsigned __int8 *v29;
  const unsigned __int8 *v30;
  const unsigned __int8 *v31;
  const unsigned __int8 *v32;
  const unsigned __int8 *v33;
  const unsigned __int8 *v34;
  const unsigned __int8 *v35;
  const unsigned __int8 *v36;
  const unsigned __int8 *v37;
  const unsigned __int8 *v38;
  const unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  uint64_t v43;
  uint64_t v44;
  NSString v45;
  uint64_t v46;
  uint64_t v47;
  NSString v48;
  uint64_t v49;
  uint64_t v50;
  NSString v51;
  uint64_t v52;
  uint64_t v53;
  NSString v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  id v63;
  Swift::String v64;
  id v65;
  Swift::String_optional v66;
  void *object;
  id v68;
  id v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  int *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  void (*v81)(char *, uint64_t);
  void *v82;
  unint64_t v83;
  unint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  _QWORD *v88;
  uint64_t v89;
  void *v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t result;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  sqlite3_stmt *v116;
  void (*v117)(_QWORD, uint64_t);
  uint64_t v118;
  char *v119;
  uint64_t v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  NSString v128;
  id v129;
  id v130;
  int v131;
  _QWORD *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  id v139;
  char *v140;
  _QWORD aBlock[5];
  _QWORD *v142;
  char v143[8];

  v118 = a4;
  v117 = a3;
  v114 = type metadata accessor for DispatchWorkItemFlags(0);
  v113 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v112 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for DispatchQoS(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for UUID(0);
  v122 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v140 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = (int *)type metadata accessor for Metric(0);
  v120 = *((_QWORD *)v121 - 1);
  v9 = __chkstk_darwin(v121);
  v134 = (uint64_t)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v135 = (uint64_t)&v107 - v11;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v119 = (char *)&v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v133 = (char *)&v107 - v16;
  v17 = sub_100146438(&qword_1002B4168);
  v18 = __chkstk_darwin(v17);
  v124 = (uint64_t)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v137 = (uint64_t)&v107 - v20;
  a1 += 16;
  swift_beginAccess(a1, v143, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v22 = Strong;
    if (a2)
    {
      if (a2 == 1)
        v23 = 0x80000001002159E0;
      else
        v23 = 0x8000000100215A90;
    }
    else
    {
      v23 = 0x8000000100215920;
    }
    v24 = sub_1001C1358();
    v108 = v22;
    v136 = v13;
    v25 = v24;
    swift_bridgeObjectRelease(v23);
    v26 = v25;
    v27 = &_swiftEmptyArrayStorage;
    if (sqlite3_step(v25) == 100)
    {
      v115 = xmmword_100242020;
      v116 = v25;
      while (1)
      {
        v132 = v27;
        v28 = sqlite3_column_text(v26, 0);
        if (!v28)
          goto LABEL_22;
        v29 = v28;
        v30 = sqlite3_column_text(v26, 1);
        if (!v30)
          goto LABEL_22;
        v31 = v30;
        v32 = sqlite3_column_text(v26, 2);
        if (!v32
          || (v33 = v32, (v34 = sqlite3_column_text(v26, 3)) == 0)
          || (v35 = v34, (v36 = sqlite3_column_text(v26, 5)) == 0)
          || (v37 = v36, (v38 = sqlite3_column_text(v26, 6)) == 0))
        {
LABEL_22:
          swift_bridgeObjectRelease(v132);
          v101 = sub_1001C6F6C();
          v102 = swift_allocError(&type metadata for SQLiteError, v101, 0, 0);
          *(_QWORD *)v103 = 0;
          *(_QWORD *)(v103 + 8) = 0;
          *(_BYTE *)(v103 + 16) = 4;
          v117(0, v102);
          swift_release(v108);
          return swift_errorRelease(v102);
        }
        v39 = v38;
        String.init(cString:)(v29);
        v41 = v40;
        v42 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v41);
        String.init(cString:)(v31);
        v44 = v43;
        v45 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v44);
        String.init(cString:)(v33);
        v47 = v46;
        v48 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v47);
        String.init(cString:)(v35);
        v50 = v49;
        v51 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v50);
        v131 = sqlite3_column_int(v26, 4);
        String.init(cString:)(v37);
        v53 = v52;
        v54 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v53);
        String.init(cString:)(v39);
        v56 = v55;
        v57 = v137;
        sub_10016A920(v137);
        swift_bridgeObjectRelease(v56);
        v58 = v57;
        v59 = v124;
        sub_10014BD9C(v58, v124, &qword_1002B4168);
        v60 = v136;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48))(v59, 1, v12) == 1)
          break;
        v61 = v133;
        v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 32))(v133, v59, v12);
        UUID.init()(v62);
        v139 = v42;
        v138 = v45;
        v63 = v48;
        v64 = String.init(_:)(v63);
        v65 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v66.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v66.value._object = (void *)0xEB00000000656C62;
        object = NSLocalizedString(_:tableName:bundle:value:comment:)(v64, v66, (NSBundle)v65, v64, v64)._object;
        swift_bridgeObjectRelease(v64._object);

        v130 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(object);
        sub_1001548C8(0, (unint64_t *)&unk_1002B6E10, NSString_ptr);
        v68 = v63;
        v69 = v51;
        v125 = NSString.init(stringLiteral:)("", 0, 2);
        v70 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
        v128 = v54;
        v71 = v119;
        v70(v119, v61, v12);
        v72 = v121;
        v127 = v121[14];
        v126 = v121[15];
        v73 = v135;
        v74 = (_QWORD *)(v135 + v121[16]);
        *v74 = 0;
        v74[1] = 0;
        v75 = v122;
        v76 = v123;
        (*(void (**)(uint64_t, char *, uint64_t))(v122 + 16))(v73, v140, v123);
        *(_QWORD *)(v73 + v72[5]) = v139;
        *(_QWORD *)(v73 + v72[6]) = v138;
        *(_QWORD *)(v73 + v72[7]) = v130;
        v77 = v72[8];
        v130 = v68;
        *(_QWORD *)(v73 + v77) = v68;
        v78 = v72[9];
        v129 = v69;
        *(_QWORD *)(v73 + v78) = v69;
        *(_QWORD *)(v73 + v72[10]) = v125;
        v70((char *)(v73 + v72[11]), v71, v12);
        v79 = v128;
        *(_QWORD *)(v73 + v72[12]) = v128;
        *(_DWORD *)(v73 + v72[13]) = v131;
        *(_BYTE *)(v73 + v127) = 0;
        *(_BYTE *)(v73 + v126) = 0;
        v80 = v79;
        v81 = *(void (**)(char *, uint64_t))(v136 + 8);
        v81(v71, v12);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v140, v76);
        swift_bridgeObjectRelease(v74[1]);
        *(_OWORD *)v74 = v115;
        sub_10017417C(v73, v134, type metadata accessor for Metric);
        v27 = v132;
        v82 = v80;
        if ((swift_isUniquelyReferenced_nonNull_native(v132) & 1) == 0)
          v27 = (_QWORD *)sub_1001C7A5C(0, v27[2] + 1, 1, (unint64_t)v27, &qword_1002B6758, type metadata accessor for Metric);
        v84 = v27[2];
        v83 = v27[3];
        v26 = v116;
        if (v84 >= v83 >> 1)
          v27 = (_QWORD *)sub_1001C7A5C(v83 > 1, v84 + 1, 1, (unint64_t)v27, &qword_1002B6758, type metadata accessor for Metric);
        v86 = v138;
        v85 = v139;
        v27[2] = v84 + 1;
        sub_1001B5618(v134, (uint64_t)v27+ ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80))+ *(_QWORD *)(v120 + 72) * v84, type metadata accessor for Metric);

        sub_1001B565C(v135, type metadata accessor for Metric);
        v81(v133, v12);
        sub_10014BDE0(v137, &qword_1002B4168);
        if (sqlite3_step(v26) != 100)
          goto LABEL_21;
      }
      swift_bridgeObjectRelease(v132);
      sub_10014BDE0(v59, &qword_1002B4168);
      v104 = sub_1001C6F6C();
      v105 = swift_allocError(&type metadata for SQLiteError, v104, 0, 0);
      *(_QWORD *)v106 = 0;
      *(_QWORD *)(v106 + 8) = 0;
      *(_BYTE *)(v106 + 16) = 4;
      v117(0, v105);
      swift_errorRelease(v105);

      swift_release(v108);
      return sub_10014BDE0(v137, &qword_1002B4168);
    }
    else
    {
LABEL_21:
      sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
      v87 = (void *)static OS_dispatch_queue.main.getter();
      v88 = (_QWORD *)swift_allocObject(&unk_100266EF0, 40, 7);
      v89 = v118;
      v88[2] = v117;
      v88[3] = v89;
      v88[4] = v27;
      aBlock[4] = sub_1001CC5E8;
      v142 = v88;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1001BE428;
      aBlock[3] = &unk_100266F08;
      v90 = _Block_copy(aBlock);
      v91 = v142;
      swift_retain(v89);
      swift_release(v91);
      v92 = v109;
      static DispatchQoS.unspecified.getter(v93);
      aBlock[0] = &_swiftEmptyArrayStorage;
      v94 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v95 = sub_100146438((uint64_t *)&unk_1002B55F0);
      v96 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
      v97 = v112;
      v98 = v95;
      v99 = v114;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v98, v96, v114, v94);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v92, v97, v90);
      swift_release(v108);
      _Block_release(v90);

      (*(void (**)(char *, uint64_t))(v113 + 8))(v97, v99);
      return (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v92, v111);
    }
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x20736920666C6573, 0xEB000000006C696ELL, "FTMInternal_4/DBManager.swift", 29, 2, 840, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001C53C8(void (*a1)(_QWORD, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = sub_1001C6F6C();
  v8 = swift_allocError(&type metadata for SQLiteError, v7, 0, 0);
  *(_QWORD *)v9 = a3;
  *(_QWORD *)(v9 + 8) = a4;
  *(_BYTE *)(v9 + 16) = 1;
  swift_bridgeObjectRetain(a4);
  a1(0, v8);
  return swift_errorRelease(v8);
}

void sub_1001C5448(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  sqlite3_stmt **v15;
  uint64_t Strong;
  uint64_t v17;
  sqlite3_stmt *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD, uint64_t);
  char v39[24];
  _QWORD aBlock[5];
  uint64_t v41;
  char v42[32];

  v38 = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1 + 16;
  v14 = swift_allocObject(&unk_1002667C0, 24, 7);
  *(_QWORD *)(v14 + 16) = 0;
  v15 = (sqlite3_stmt **)(v14 + 16);
  swift_beginAccess(v13, v42, 0, 0);
  Strong = swift_weakLoadStrong(v13);
  if (Strong)
  {
    v17 = Strong;
    v18 = sub_1001C1358();
    swift_release(v17);
  }
  else
  {
    v18 = 0;
  }
  *v15 = v18;
  swift_beginAccess(v15, v39, 0, 0);
  if (sqlite3_step(*v15) == 101)
  {
    v19 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
    v20 = (void *)static OS_dispatch_queue.main.getter(v19);
    v21 = swift_allocObject(&unk_100266E00, 32, 7);
    *(_QWORD *)(v21 + 16) = v38;
    *(_QWORD *)(v21 + 24) = a5;
    aBlock[4] = sub_1001CC7BC;
    v41 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001BE428;
    aBlock[3] = &unk_100266E18;
    v22 = _Block_copy(aBlock);
    v23 = v41;
    swift_retain(a5);
    swift_release(v23);
    static DispatchQoS.unspecified.getter(v24);
    aBlock[0] = _swiftEmptyArrayStorage;
    v25 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = v12;
    v27 = sub_100146438((uint64_t *)&unk_1002B55F0);
    v28 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v7, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v26, v9, v22);
    _Block_release(v22);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v26, v36);
LABEL_8:
    sqlite3_finalize(*(sqlite3_stmt **)(v14 + 16));
    swift_release(v14);
    return;
  }
  if (sqlite3_errmsg(*v15))
  {
    v29 = String.init(cString:)();
    v31 = v30;
    v32 = sub_1001C6F6C();
    v33 = swift_allocError(&type metadata for SQLiteError, v32, 0, 0);
    *(_QWORD *)v34 = v29;
    *(_QWORD *)(v34 + 8) = v31;
    *(_BYTE *)(v34 + 16) = 1;
    v38(0, v33);
    swift_errorRelease(v33);
    goto LABEL_8;
  }
  __break(1u);
}

void sub_1001C5918(uint64_t a1, void **a2, void (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  sqlite3_stmt *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD, uint64_t);
  uint64_t v38;
  uint64_t Strong;
  char v40[24];
  _QWORD aBlock[5];
  uint64_t v42;
  char v43[32];

  v37 = a3;
  v38 = a4;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v9 - 8);
  v36 = v9;
  __chkstk_darwin(v9);
  v33 = &v32[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v43, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v11 = swift_allocObject(&unk_1002667C0, 24, 7);
    *(_QWORD *)(v11 + 16) = 0;
    sub_1001CC308(*a2, a2[3]);
    v13 = v12;
    v14 = sub_1001C1358();
    swift_bridgeObjectRelease(v13);
    *(_QWORD *)(v11 + 16) = v14;
    swift_beginAccess(v11 + 16, v40, 0, 0);
    if (sqlite3_step(*(sqlite3_stmt **)(v11 + 16)) == 101)
    {
      v15 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
      v16 = (void *)static OS_dispatch_queue.main.getter(v15);
      v17 = swift_allocObject(&unk_100266A90, 32, 7);
      v18 = v38;
      *(_QWORD *)(v17 + 16) = v37;
      *(_QWORD *)(v17 + 24) = v18;
      aBlock[4] = sub_1001CC598;
      v42 = v17;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1001BE428;
      aBlock[3] = &unk_100266AA8;
      v19 = _Block_copy(aBlock);
      v20 = v42;
      swift_retain(v18);
      swift_release(v20);
      v21 = v33;
      static DispatchQoS.unspecified.getter(v22);
      aBlock[0] = _swiftEmptyArrayStorage;
      v23 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v24 = sub_100146438((uint64_t *)&unk_1002B55F0);
      v25 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v6, v23);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v21, v8, v19);
      _Block_release(v19);

      (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v8, v6);
      (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v21, v36);
LABEL_6:
      sqlite3_finalize(*(sqlite3_stmt **)(v11 + 16));
      swift_release(Strong);
      swift_release(v11);
      return;
    }
    if (sqlite3_errmsg(*(sqlite3 **)(v11 + 16)))
    {
      v26 = String.init(cString:)();
      v28 = v27;
      v29 = sub_1001C6F6C();
      v30 = swift_allocError(&type metadata for SQLiteError, v29, 0, 0);
      *(_QWORD *)v31 = v26;
      *(_QWORD *)(v31 + 8) = v28;
      *(_BYTE *)(v31 + 16) = 1;
      v37(0, v30);
      swift_errorRelease(v30);
      goto LABEL_6;
    }
    __break(1u);
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x20736920666C6573, 0xEB000000006C696ELL, "FTMInternal_4/DBManager.swift", 29, 2, 929, 0);
  __break(1u);
}

const char *sub_1001C5E38(uint64_t a1, void (*a2)(_QWORD, uint64_t))
{
  const char *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  swift_beginAccess(a1 + 16, v11, 0, 0);
  result = sqlite3_errmsg(*(sqlite3 **)(a1 + 16));
  if (result)
  {
    v5 = String.init(cString:)();
    v7 = v6;
    v8 = sub_1001C6F6C();
    v9 = swift_allocError(&type metadata for SQLiteError, v8, 0, 0);
    *(_QWORD *)v10 = v5;
    *(_QWORD *)(v10 + 8) = v7;
    *(_BYTE *)(v10 + 16) = 1;
    a2(0, v9);
    return (const char *)swift_errorRelease(v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001C5EE4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, _QWORD);
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t (*)(uint64_t, _QWORD))a1;
  if (qword_1002B3A18 != -1)
    a1 = swift_once(&qword_1002B3A18, sub_10017480C);
  v2 = qword_1002BF008;
  v3 = static os_log_type_t.error.getter(a1);
  os_log(_:dso:log:type:_:)("Successfully deleted from dashboard table", 41, 2, &_mh_execute_header, v2, v3, _swiftEmptyArrayStorage);
  return v1(1, 0);
}

uint64_t sub_1001C5F78(uint64_t a1, int a2, void (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  void *object;
  Swift::String v16;
  unint64_t v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *v19;
  char *v20;
  _QWORD *v21;
  const unsigned __int8 *v22;
  const unsigned __int8 *v23;
  const unsigned __int8 *v24;
  const unsigned __int8 *v25;
  const unsigned __int8 *v26;
  const unsigned __int8 *v27;
  const unsigned __int8 *v28;
  const unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  int v42;
  id v43;
  id v44;
  id v45;
  id v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void (*v73)(_QWORD, uint64_t);
  uint64_t v74;
  void **aBlock;
  unint64_t v76;
  uint64_t (*v77)();
  void *v78;
  uint64_t (*v79)();
  _QWORD *v80;
  int v81;
  char v82[32];

  v73 = a3;
  v74 = a4;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v72 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v70 = *(_QWORD *)(v9 - 8);
  v71 = v9;
  __chkstk_darwin(v9);
  v69 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v82, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v12 = Strong;
    aBlock = 0;
    v76 = 0xE000000000000000;
    _StringGuts.grow(_:)(67);
    v13._countAndFlagsBits = 0xD000000000000029;
    v13._object = (void *)0x80000001002155B0;
    String.append(_:)(v13);
    v81 = a2;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    v16._object = (void *)0x80000001002155E0;
    v16._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v16);
    v17 = v76;
    v18 = sub_1001C1358();
    v67 = v7;
    v68 = v6;
    v19 = v18;
    swift_bridgeObjectRelease(v17);
    swift_release(v12);
    v20 = v69;
    v21 = _swiftEmptyArrayStorage;
    if (sqlite3_step(v19) == 100)
    {
      while (1)
      {
        v22 = sqlite3_column_text(v19, 0);
        if (!v22)
          break;
        v23 = v22;
        v24 = sqlite3_column_text(v19, 1);
        if (!v24)
          break;
        v25 = v24;
        v26 = sqlite3_column_text(v19, 2);
        if (!v26)
          break;
        v27 = v26;
        v28 = sqlite3_column_text(v19, 3);
        if (!v28)
          break;
        v29 = v28;
        String.init(cString:)(v23);
        v31 = v30;
        v32 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v31);
        String.init(cString:)(v25);
        v34 = v33;
        v35 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v34);
        String.init(cString:)(v27);
        v37 = v36;
        v38 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v37);
        String.init(cString:)(v29);
        v40 = v39;
        v41 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v40);
        v42 = sqlite3_column_int(v19, 4);
        v43 = v32;
        v44 = v35;
        v45 = v38;
        v46 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
          v21 = sub_1001C734C(0, v21[2] + 1, 1, v21);
        v48 = v21[2];
        v47 = v21[3];
        if (v48 >= v47 >> 1)
          v21 = sub_1001C734C((_QWORD *)(v47 > 1), v48 + 1, 1, v21);
        v21[2] = v48 + 1;
        v49 = &v21[5 * v48];
        v49[4] = v43;
        v49[5] = v44;
        v49[6] = v45;
        v49[7] = v46;
        *((_DWORD *)v49 + 16) = v42;

        if (sqlite3_step(v19) != 100)
          goto LABEL_12;
      }
      swift_bridgeObjectRelease(v21);
      v63 = sub_1001C6F6C();
      v64 = swift_allocError(&type metadata for SQLiteError, v63, 0, 0);
      *(_QWORD *)v65 = 0;
      *(_QWORD *)(v65 + 8) = 0;
      *(_BYTE *)(v65 + 16) = 4;
      v73(0, v64);
      swift_errorRelease(v64);
    }
    else
    {
LABEL_12:
      v50 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
      v51 = (void *)static OS_dispatch_queue.main.getter(v50);
      v52 = (_QWORD *)swift_allocObject(&unk_100266B80, 40, 7);
      v53 = v74;
      v52[2] = v73;
      v52[3] = v53;
      v52[4] = v21;
      v79 = sub_1001CC5E8;
      v80 = v52;
      aBlock = _NSConcreteStackBlock;
      v76 = 1107296256;
      v77 = sub_1001BE428;
      v78 = &unk_100266B98;
      v54 = _Block_copy(&aBlock);
      v55 = v80;
      swift_retain(v53);
      swift_release(v55);
      static DispatchQoS.unspecified.getter(v56);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v57 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v58 = sub_100146438((uint64_t *)&unk_1002B55F0);
      v59 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
      v60 = v72;
      v61 = v58;
      v62 = v68;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v61, v59, v68, v57);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v20, v60, v54);
      _Block_release(v54);

      (*(void (**)(char *, uint64_t))(v67 + 8))(v60, v62);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v20, v71);
    }
    return sqlite3_finalize(v19);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x20736920666C6573, 0xEB000000006C696ELL, "FTMInternal_4/DBManager.swift", 29, 2, 969, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001C6664(void (*a1)(_QWORD, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  _BYTE v12[8];

  swift_getErrorValue(a3, v12, v11);
  v4 = Error.localizedDescription.getter(v11[1], v11[2]);
  v6 = v5;
  v7 = sub_1001C6F6C();
  v8 = swift_allocError(&type metadata for SQLiteError, v7, 0, 0);
  *(_QWORD *)v9 = v4;
  *(_QWORD *)(v9 + 8) = v6;
  *(_BYTE *)(v9 + 16) = 1;
  a1(0, v8);
  return swift_errorRelease(v8);
}

double sub_1001C6708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  sqlite3_stmt **v12;
  uint64_t Strong;
  uint64_t v14;
  sqlite3_stmt *v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **aBlock;
  uint64_t v34;
  uint64_t (*v35)();
  void *v36;
  void *v37;
  _QWORD *v38;
  char v39[24];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  v11 = swift_allocObject(&unk_1002667C0, 24, 7);
  *(_QWORD *)(v11 + 16) = 0;
  v12 = (sqlite3_stmt **)(v11 + 16);
  swift_beginAccess(a1, v39, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v14 = Strong;
    v15 = sub_1001C1358();
    swift_release(v14);
  }
  else
  {
    v15 = 0;
  }
  *v12 = v15;
  v16 = sqlite3_step(v15);
  v17 = sub_1001548C8(0, (unint64_t *)&qword_1002B55E0, OS_dispatch_queue_ptr);
  v18 = (void *)static OS_dispatch_queue.main.getter(v17);
  if (v16 == 101)
  {
    v19 = swift_allocObject(&unk_100266888, 32, 7);
    *(_QWORD *)(v19 + 16) = a2;
    *(_QWORD *)(v19 + 24) = a3;
    v37 = sub_1001C6EA4;
    v38 = (_QWORD *)v19;
    aBlock = _NSConcreteStackBlock;
    v34 = 1107296256;
    v35 = sub_1001BE428;
    v36 = &unk_1002668A0;
    v20 = _Block_copy(&aBlock);
    v21 = v38;
    v22 = a3;
  }
  else
  {
    v23 = (_QWORD *)swift_allocObject(&unk_100266838, 40, 7);
    v23[2] = v11;
    v23[3] = a2;
    v23[4] = a3;
    v37 = sub_1001C6E98;
    v38 = v23;
    aBlock = _NSConcreteStackBlock;
    v34 = 1107296256;
    v35 = sub_1001BE428;
    v36 = &unk_100266850;
    v20 = _Block_copy(&aBlock);
    v21 = v38;
    swift_retain(a3);
    v22 = v11;
  }
  swift_retain(v22);
  swift_release(v21);
  static DispatchQoS.unspecified.getter(v24);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v25 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v27 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v26, v27, v6, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v8, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v32);
  swift_beginAccess(v12, &aBlock, 0, 0);
  sqlite3_finalize(*(sqlite3_stmt **)(v11 + 16));
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

uint64_t sub_1001C6BF4()
{
  return sub_1001CC770((void (*)(_QWORD))&_swift_release);
}

double sub_1001C6C00()
{
  uint64_t *v0;

  return sub_1001C6708(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001C6C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1001C6C1C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1001C6C24()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C6C34(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  _BYTE v13[8];

  if (qword_1002B3A18 != -1)
    swift_once(&qword_1002B3A18, sub_10017480C);
  v4 = qword_1002BF008;
  v5 = static os_log_type_t.error.getter();
  v6 = sub_100146438((uint64_t *)&unk_1002B57E0);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002402A0;
  swift_getErrorValue(a1, v13, v12);
  v8 = Error.localizedDescription.getter(v12[1], v12[2]);
  v10 = v9;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10016B1E0();
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = v10;
  os_log(_:dso:log:type:_:)("%{public}s error ocurred while deleting old rows (sqlite3_step)", 63, 2, &_mh_execute_header, v4, v5, v7);
  swift_bridgeObjectRelease(v7);
  return a2(0);
}

uint64_t sub_1001C6D50()
{
  return sub_1001CC770((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1001C6D5C()
{
  uint64_t v0;

  return sub_1001C6C34(*(_QWORD *)(v0 + 16), *(uint64_t (**)(_QWORD))(v0 + 24));
}

const char *sub_1001C6D68(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  const char *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  swift_beginAccess(a1 + 16, v12, 0, 0);
  result = sqlite3_errmsg(*(sqlite3 **)(a1 + 16));
  if (result)
  {
    v5 = String.init(cString:)();
    v7 = v6;
    if (qword_1002B3A18 != -1)
      swift_once(&qword_1002B3A18, sub_10017480C);
    v8 = qword_1002BF008;
    v9 = static os_log_type_t.error.getter();
    v10 = sub_100146438((uint64_t *)&unk_1002B57E0);
    v11 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_1002402A0;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 64) = sub_10016B1E0();
    *(_QWORD *)(v11 + 32) = v5;
    *(_QWORD *)(v11 + 40) = v7;
    os_log(_:dso:log:type:_:)("%{public}s error ocurred while creating a table (sqlite3_step)", 62, 2, &_mh_execute_header, v8, v9, v11);
    swift_bridgeObjectRelease(v11);
    return (const char *)a2(0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001C6E8C()
{
  return sub_1001CC770((void (*)(_QWORD))&_swift_release);
}

const char *sub_1001C6E98()
{
  uint64_t v0;

  return sub_1001C6D68(*(_QWORD *)(v0 + 16), *(uint64_t (**)(_QWORD))(v0 + 24));
}

uint64_t sub_1001C6EA4()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

void sub_1001C6ECC()
{
  uint64_t v0;

  sub_1001C2958(*(_QWORD *)(v0 + 16), *(_DWORD *)(v0 + 24), *(void (**)(_QWORD, uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t type metadata accessor for MetricList(uint64_t a1)
{
  return sub_1001C6EF0(a1, qword_1002B78B0, (uint64_t)&nominal type descriptor for MetricList);
}

uint64_t sub_1001C6EF0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_1001C6F24()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C6F48()
{
  return sub_1001CC894((void (*)(_QWORD, __n128))&_swift_errorRelease);
}

uint64_t sub_1001C6F54()
{
  return sub_1001CC894((void (*)(_QWORD, __n128))&_swift_release);
}

uint64_t sub_1001C6F60()
{
  uint64_t v0;

  return sub_1001C3570(*(void (**)(uint64_t, _QWORD))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

unint64_t sub_1001C6F6C()
{
  unint64_t result;

  result = qword_1002B77C0;
  if (!qword_1002B77C0)
  {
    result = swift_getWitnessTable(&unk_100243CF8, &type metadata for SQLiteError);
    atomic_store(result, (unint64_t *)&qword_1002B77C0);
  }
  return result;
}

uint64_t sub_1001C6FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100146438(&qword_1002B4168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_1001C6FF8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100146438(&qword_1002B7910);
      v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[8 * v8 + 32])
          memmove(v14, a4 + 32, 8 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1001CB3F8(0, v8, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C7104(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001C7A5C(a1, a2, a3, a4, &qword_1002B6758, type metadata accessor for Metric);
}

_QWORD *sub_1001C7118(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100146438(&qword_1002B57D0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001CB4E0(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C7224(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100146438(&qword_1002B6778);
      v11 = (_QWORD *)swift_allocObject(v10, 88 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[11 * v8 + 4])
          memmove(v13, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001CB848(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C734C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100146438(&qword_1002B6750);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001CBA44(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C7468(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1001C7490(a1, a2, a3, a4, &qword_1002B6728, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1001CBC40);
}

_QWORD *sub_1001C747C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1001C7490(a1, a2, a3, a4, &qword_1002B6710, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_1001CBD4C);
}

_QWORD *sub_1001C7490(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_100146438(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 24 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 24);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[3 * v11 + 4])
          memmove(v16, a4 + 4, 24 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    a6(0, v11, v16, a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C75BC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100146438(&qword_1002B7830);
      v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4])
          memmove(v13, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001CBE40(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C76E4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100146438((uint64_t *)&unk_1002B6E78);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001CBB38(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001C77F0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100146438(&qword_1002B7838);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1001CB938(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C7914(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001C7A5C(a1, a2, a3, a4, &qword_1002B6760, type metadata accessor for MetricSectional);
}

uint64_t sub_1001C7928(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001C7A5C(a1, a2, a3, a4, &qword_1002B6748, type metadata accessor for DashboardViewModelObject);
}

_QWORD *sub_1001C793C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100146438(&qword_1002B57D8);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001CB3F8(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C7A48(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1001C7A5C(a1, a2, a3, a4, &qword_1002B7908, type metadata accessor for FTMCellMonitorHardwareDetailModel);
}

uint64_t sub_1001C7A5C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100146438(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (unint64_t)v18 + v22;
  if ((a1 & 1) != 0)
  {
    v24 = a4 + v22;
    if ((unint64_t)v18 < a4 || v23 >= v24 + *(_QWORD *)(v21 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v22, v24);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v22, v24);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1001CBF4C(0, v11, v23, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

unint64_t sub_1001C7C68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_1001C9F38(a1, v3);
}

unint64_t sub_1001C7C98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1001C9FD4(a1, a2, v5);
}

unint64_t sub_1001C7CFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1001CA0B4(a1, v4);
}

void sub_1001C7D2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;

  v3 = v2;
  v6 = type metadata accessor for STransferMetrics(0);
  v40 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100146438(&qword_1002B7840);
  v41 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (*(_QWORD *)(v9 + 16))
  {
    v37 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 64);
    v39 = (_QWORD *)(v9 + 64);
    v14 = 1 << *(_BYTE *)(v9 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v38 = (unint64_t)(v14 + 63) >> 6;
    v17 = v10 + 64;
    while (1)
    {
      if (v16)
      {
        v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v20 = v19 | (v12 << 6);
      }
      else
      {
        v21 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v21 >= v38)
          goto LABEL_36;
        v22 = v39[v21];
        ++v12;
        if (!v22)
        {
          v12 = v21 + 1;
          if (v21 + 1 >= v38)
            goto LABEL_36;
          v22 = v39[v12];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v38)
            {
LABEL_36:
              if ((v41 & 1) == 0)
              {
                swift_release(v9);
                v3 = v37;
                goto LABEL_43;
              }
              v35 = 1 << *(_BYTE *)(v9 + 32);
              if (v35 >= 64)
                bzero(v39, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v35;
              v3 = v37;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                v12 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v12 >= v38)
                  goto LABEL_36;
                v22 = v39[v12];
                ++v23;
                if (v22)
                  goto LABEL_23;
              }
            }
            v12 = v23;
          }
        }
LABEL_23:
        v16 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v20);
      v25 = *(_QWORD *)(v40 + 72);
      v26 = *(_QWORD *)(v9 + 56) + v25 * v20;
      if ((v41 & 1) != 0)
        sub_1001B5618(v26, (uint64_t)v8, type metadata accessor for STransferMetrics);
      else
        sub_10017417C(v26, (uint64_t)v8, type metadata accessor for STransferMetrics);
      v27 = static Hasher._hash(seed:_:)(*(_QWORD *)(v11 + 40), v24);
      v28 = -1 << *(_BYTE *)(v11 + 32);
      v29 = v27 & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        v18 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v18) = v24;
      sub_1001B5618((uint64_t)v8, *(_QWORD *)(v11 + 56) + v25 * v18, type metadata accessor for STransferMetrics);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  swift_release(v9);
LABEL_43:
  *v3 = v11;
}

void sub_1001C805C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100146438(&qword_1002B7848);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1001C8370(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100146438((uint64_t *)&unk_1002B69D0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v18 >= v35)
          goto LABEL_37;
        v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v35)
            goto LABEL_37;
          v19 = v36[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v36[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_44;
                if (v13 >= v35)
                  goto LABEL_37;
                v19 = v36[v13];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v13 = v20;
          }
        }
LABEL_24:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_10017F278(v24, v38);
      }
      else
      {
        sub_10017E2BC((uint64_t)v24, (uint64_t)v38);
        swift_bridgeObjectRetain(v22);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v23, v22);
      v25 = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      sub_10017F278(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_1001C866C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100146438((uint64_t *)&unk_1002B6E60);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_25;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v21 >= v12)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_37;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_24;
          }
        }
        v14 = v24;
      }
    }
LABEL_24:
    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_25:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
      sub_10017F278((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v38);
    }
    else
    {
      sub_1001ABDE8(v25, (uint64_t)&v39);
      sub_10017E2BC(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v38);
    }
    v28 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v8 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    sub_10017F278(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

void sub_1001C8980(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100146438(&qword_1002B7828);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1001C8C88(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100146438(&qword_1002B7810);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v13;
    if (!v26)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v13);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v13 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v13 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v13);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v13 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1001C8FAC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100146438(&qword_1002B77C8);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1001C92C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  _QWORD v45[9];

  v3 = v2;
  v6 = type metadata accessor for DashboardViewModelObject(0);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100146438(&qword_1002B7800);
  v44 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v3;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  swift_retain(v9);
  v17 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v41)
      break;
    v23 = v42;
    v24 = v42[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v41)
        goto LABEL_36;
      v24 = v42[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_36:
          swift_release(v9);
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = v42[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v17 >= v41)
              goto LABEL_36;
            v24 = v42[v17];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v17 = v25;
      }
    }
LABEL_23:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_24:
    v26 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v43 + 72);
    v30 = *(_QWORD *)(v9 + 56) + v29 * v21;
    if ((v44 & 1) != 0)
    {
      sub_1001B5618(v30, (uint64_t)v8, type metadata accessor for DashboardViewModelObject);
    }
    else
    {
      sub_10017417C(v30, (uint64_t)v8, type metadata accessor for DashboardViewModelObject);
      swift_bridgeObjectRetain(v27);
    }
    Hasher.init(_seed:)(v45, *(_QWORD *)(v11 + 40));
    String.hash(into:)(v45, v28, v27);
    v31 = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v11 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    sub_1001B5618((uint64_t)v8, *(_QWORD *)(v11 + 56) + v29 * v18, type metadata accessor for DashboardViewModelObject);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v40;
  v23 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v9 + 32);
  if (v39 >= 64)
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v39;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  swift_release(v9);
  *v3 = v11;
}

uint64_t sub_1001C9640(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1001C7C68(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = v17 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for STransferMetrics(0) - 8) + 72) * v10;
        return sub_1001CC7E4(a1, v18);
      }
      return sub_1001C9DCC(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001CA178();
      goto LABEL_7;
    }
    sub_1001C7D2C(v13, a3 & 1);
    v20 = sub_1001C7C68(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_1001C9DCC(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

void sub_1001C975C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1001C7C98(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001CA3A4();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      swift_release(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1001C805C(v15, a4 & 1);
  v20 = sub_1001C7C98(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

_OWORD *sub_1001C98B8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1001C7C98(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_10014652C(v19);
        return sub_10017F278(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1001CA558();
      goto LABEL_7;
    }
    sub_1001C8370(v15, a4 & 1);
    v21 = sub_1001C7C98(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1001C9E58(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_1001C99E8(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1001C7CFC(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_10014652C(v17);
        return sub_10017F278(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001CA73C();
      goto LABEL_7;
    }
    sub_1001C866C(v13, a3 & 1);
    v19 = sub_1001C7CFC(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1001ABDE8(a2, (uint64_t)v21);
      return sub_1001C9EC0(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_1001C9B20(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1001C7C98(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001CA920();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (uint64_t *)(v18[6] + 16 * v12);
    *v21 = a2;
    v21[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1001C8980(v15, a4 & 1);
  v19 = sub_1001C7C98(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1001C9C70(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1001C7C98(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001CAC84();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_1001C8FAC(v15, a4 & 1);
  v21 = sub_1001C7C98(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1001C9DCC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for STransferMetrics(0);
  result = sub_1001B5618(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, type metadata accessor for STransferMetrics);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

_OWORD *sub_1001C9E58(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10017F278(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *sub_1001C9EC0(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_10017F278(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t sub_1001C9F38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1001C9FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1001CA0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1001ABDE8(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10017F3E8((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

void sub_1001CA178()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for STransferMetrics(0);
  v27 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100146438(&qword_1002B7840);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_release(v5);
LABEL_28:
    *v1 = v7;
    return;
  }
  v25 = v1;
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v15)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    v18 = 8 * v17;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v20 = *(_QWORD *)(v27 + 72) * v17;
    sub_10017417C(*(_QWORD *)(v5 + 56) + v20, (uint64_t)v4, type metadata accessor for STransferMetrics);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v19;
    sub_1001B5618((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20, type metadata accessor for STransferMetrics);
  }
  v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    swift_release(v5);
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_1001CA3A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100146438(&qword_1002B7848);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_retain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1001CA558()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_100146438((uint64_t *)&unk_1002B69D0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_10017E2BC(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10017F278(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_1001CA73C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_100146438((uint64_t *)&unk_1002B6E60);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_1001ABDE8(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_10017E2BC(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    sub_10017F278(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1001CA920()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100146438(&qword_1002B7828);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1001CAACC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_100146438(&qword_1002B7810);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1001CAC84()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100146438(&qword_1002B77C8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1001CAE38()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for DashboardViewModelObject(0);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100146438(&qword_1002B7800);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_release(v5);
LABEL_28:
    *v1 = v7;
    return;
  }
  v26 = v1;
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v27 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v11);
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(v29 + 72) * v16;
    sub_10017417C(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for DashboardViewModelObject);
    v22 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v17);
    *v22 = v19;
    v22[1] = v20;
    sub_1001B5618((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, type metadata accessor for DashboardViewModelObject);
    swift_bridgeObjectRetain(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    swift_release(v5);
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v11 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v11 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v11);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

sqlite3 *sub_1001CB07C()
{
  uint64_t v0;
  int v1;
  sqlite3 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  sqlite3 *result;
  unint64_t v10;
  sqlite3 *v11;

  v11 = 0;
  v0 = String.utf8CString.getter();
  v1 = sqlite3_open_v2((const char *)(v0 + 32), &v11, 65542, 0);
  swift_release(v0);
  v2 = v11;
  if (v1)
  {
    if (sqlite3_errmsg(v11))
    {
      v3 = String.init(cString:)();
      v5 = v4;
      v6 = sub_1001C6F6C();
      swift_allocError(&type metadata for SQLiteError, v6, 0, 0);
      *(_QWORD *)v7 = v3;
      *(_QWORD *)(v7 + 8) = v5;
    }
    else
    {
      v10 = sub_1001C6F6C();
      swift_allocError(&type metadata for SQLiteError, v10, 0, 0);
      *(_QWORD *)v7 = 0xD000000000000026;
      *(_QWORD *)(v7 + 8) = 0x8000000100215740;
    }
    *(_BYTE *)(v7 + 16) = 0;
    swift_willThrow();
    result = v11;
    if (v11)
      return (sqlite3 *)sqlite3_close(v11);
  }
  else
  {
    v8 = type metadata accessor for SQLiteDatabase();
    swift_allocObject(v8, 32, 7);
    return (sqlite3 *)sub_1001C1058(v2);
  }
  return result;
}

double sub_1001CB1C8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  _QWORD v23[2];
  uint64_t v24;
  void *v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(_QWORD *)(v3 + 24);
  v14 = swift_allocObject(&unk_100266748, 24, 7);
  swift_weakInit(v14 + 16, v3);
  v15 = swift_allocObject(&unk_100266E50, 48, 7);
  *(_QWORD *)(v15 + 16) = v14;
  *(_BYTE *)(v15 + 24) = a1;
  *(_QWORD *)(v15 + 32) = a2;
  *(_QWORD *)(v15 + 40) = a3;
  aBlock[4] = sub_1001CC82C;
  v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BE428;
  aBlock[3] = &unk_100266E68;
  v16 = _Block_copy(aBlock);
  swift_retain(v14);
  v17 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v17);
  v25 = &_swiftEmptyArrayStorage;
  v18 = sub_100146004((unint64_t *)&qword_1002B6530, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_100146438((uint64_t *)&unk_1002B55F0);
  v20 = sub_10018A668((unint64_t *)&qword_1002B6540, (uint64_t *)&unk_1002B55F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v21 = v27;
  swift_release(v14);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

char *sub_1001CB3F8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001CB4E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001CB5D0(void *a1, void *a2)
{
  Swift::String v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  void *object;
  Swift::String v21;

  _StringGuts.grow(_:)(283);
  v4._countAndFlagsBits = 0xD0000000000000C6;
  v4._object = (void *)0x8000000100215800;
  String.append(_:)(v4);
  v5 = a1;
  v6 = objc_msgSend(v5, "description");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);

  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 0xD000000000000019;
  v11._object = (void *)0x8000000100215570;
  String.append(_:)(v11);
  v12 = a2;
  v13 = objc_msgSend(v12, "description");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);

  swift_bridgeObjectRelease(v16);
  v18._object = (void *)0x80000001002158D0;
  v18._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v18);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(object);
  v21._countAndFlagsBits = 0xD000000000000024;
  v21._object = (void *)0x80000001002158F0;
  String.append(_:)(v21);
  return 0;
}

unint64_t sub_1001CB774(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _DWORD *i;
  uint64_t v5;
  int v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100146438(&qword_1002B7808);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (_DWORD *)(a1 + 40); ; i += 4)
    {
      v5 = *((_QWORD *)i - 1);
      v6 = *i;
      result = sub_1001C7C68(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      *(_DWORD *)(v3[7] + 4 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_1001CB848(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 88 * a1 + 32;
  v6 = a3 + 88 * v4;
  if (v5 >= v6 || v5 + 88 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001CB938(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 48 * a1 + 32;
  v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    sub_100146438((uint64_t *)&unk_1002B56A0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001CBA44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001CBB38(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_100146438(&qword_1002B6E50);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001CBC40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_100146438(&qword_1002B6720);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001CBD4C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001CBE40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 72 * a1 + 32;
  v7 = a3 + 72 * v4;
  if (v6 >= v7 || v6 + 72 * v4 <= a3)
  {
    sub_100146438(&qword_1002B6E70);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

