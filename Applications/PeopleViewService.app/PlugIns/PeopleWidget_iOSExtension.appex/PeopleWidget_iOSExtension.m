uint64_t sub_100002784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for MultipleContactsRowView(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetFamily(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v19 - v10;
  sub_10001BDA4((uint64_t)&v19 - v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for WidgetFamily.systemMedium(_:), v5);
  v12 = sub_100004FDC(&qword_100050710, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v20, v5, v12);
  dispatch thunk of RawRepresentable.rawValue.getter(&v19, v5, v12);
  v14 = v19;
  v13 = v20;
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, v5);
  v15(v11, v5);
  sub_100004E9C(v1, (uint64_t)v4, type metadata accessor for MultipleContactsRowView);
  if (v13 == v14)
  {
    v16 = *(_QWORD *)(*(_QWORD *)&v4[*(int *)(v2 + 24)] + 16);
    v17 = sub_10000501C((uint64_t)v4, type metadata accessor for MultipleContactsRowView);
    if (v16 == 4)
      return static Font.caption2.getter(v17);
  }
  else
  {
    v17 = sub_10000501C((uint64_t)v4, type metadata accessor for MultipleContactsRowView);
  }
  return static Font.footnote.getter(v17);
}

BOOL sub_100002944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  _BOOL8 v16;
  uint64_t v18;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for MultipleContactsRowView(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetFamily(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v18 - v10;
  sub_10001BDA4((uint64_t)&v18 - v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for WidgetFamily.systemMedium(_:), v5);
  v12 = sub_100004FDC(&qword_100050710, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v19, v5, v12);
  dispatch thunk of RawRepresentable.rawValue.getter(&v18, v5, v12);
  v14 = v18;
  v13 = v19;
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, v5);
  v15(v11, v5);
  sub_100004E9C(v1, (uint64_t)v4, type metadata accessor for MultipleContactsRowView);
  v16 = v13 == v14 && *(_QWORD *)(*(_QWORD *)&v4[*(int *)(v2 + 24)] + 16) == 4;
  sub_10000501C((uint64_t)v4, type metadata accessor for MultipleContactsRowView);
  return v16;
}

uint64_t sub_100002AF4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  __int128 v79;

  v60 = a2;
  v5 = sub_100003FC4(&qword_100050688);
  __chkstk_darwin(v5);
  v63 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003FC4(&qword_100050690);
  __chkstk_darwin(v7);
  v62 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003FC4(&qword_100050698);
  __chkstk_darwin(v9);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PersonStatusSet(0);
  v65 = *(_QWORD *)(v12 - 8);
  v66 = v12;
  __chkstk_darwin(v12);
  v64 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for Person(0);
  v14 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PersonEntryType(0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v59 - v21;
  v23 = type metadata accessor for PersonInfo(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v59 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = a1;
  sub_100004E9C(a1, (uint64_t)v22, type metadata accessor for PersonEntryType);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v27(v22, 2, v23))
  {
    v28 = &_swiftEmptyArrayStorage;
  }
  else
  {
    v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v26, v22, v23);
    PersonInfo.person.getter(v29);
    v30 = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    v28 = (void *)Person.statuses.getter(v30);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v59);
  }
  type metadata accessor for PeopleFeatureFlags(0);
  v31 = static PeopleFeatureFlags.shared.getter();
  v32 = (uint64_t)v64;
  static StatusCompatiblePicker.statusForDisplay(from:featureFlags:)(v28, v31);
  swift_release(v31);
  v33 = swift_bridgeObjectRelease(v28);
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v33);
  *((_QWORD *)v11 + 1) = 0x4020000000000000;
  v11[16] = 0;
  v34 = sub_100003FC4(&qword_1000506A0);
  v35 = v61;
  sub_100002F94(v60, v61, v32, (uint64_t)&v11[*(int *)(v34 + 44)]);
  sub_100004E9C(v35, (uint64_t)v20, type metadata accessor for PersonEntryType);
  v36 = v27(v20, 2, v23);
  v37 = 1;
  v38 = (uint64_t)v62;
  if (!v36)
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v62, v20, v23);
    v37 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v38, v37, 1, v23);
  v39 = (uint64_t)v63;
  static PersonInfo.urlForPerson(personInfo:)(v38);
  v40 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 0, 1, v40);
  v41 = sub_10000B0F8(v39);
  sub_100004EE0(v39, &qword_100050688);
  sub_100004EE0(v38, &qword_100050690);
  v42 = sub_100004EE0((uint64_t)v11, &qword_100050698);
  v43 = static Alignment.center.getter(v42);
  sub_10003A550(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v67, 0.0, 1, 0.0, 1, v43, v44, v41);
  swift_release(v41);
  v45 = v67[1];
  v46 = v68;
  v47 = v69;
  v48 = v70;
  v49 = v71;
  v50 = v72;
  v51 = v73;
  v52 = v74;
  v53 = v75;
  v54 = v76;
  v55 = v77;
  v56 = v78;
  v57 = v79;
  *(_QWORD *)a3 = v67[0];
  *(_QWORD *)(a3 + 8) = v45;
  *(_BYTE *)(a3 + 16) = v46;
  *(_QWORD *)(a3 + 24) = v47;
  *(_BYTE *)(a3 + 32) = v48;
  *(_QWORD *)(a3 + 40) = v49;
  *(_BYTE *)(a3 + 48) = v50;
  *(_QWORD *)(a3 + 56) = v51;
  *(_BYTE *)(a3 + 64) = v52;
  *(_QWORD *)(a3 + 72) = v53;
  *(_BYTE *)(a3 + 80) = v54;
  *(_QWORD *)(a3 + 88) = v55;
  *(_BYTE *)(a3 + 96) = v56;
  *(_OWORD *)(a3 + 104) = v57;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8))(v32, v66);
}

uint64_t sub_100002F94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t (*v54)(_QWORD);
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  unsigned int v58;
  uint64_t v59;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD, _QWORD);
  uint64_t v70;
  uint64_t *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t KeyPath;
  uint64_t v84;
  uint64_t *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int *v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t);
  char *v124;
  char *v125;
  uint64_t v126;
  void (*v127)(char *, char *, uint64_t);
  char *v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t);
  void (*v132)(char *, uint64_t);
  uint64_t v133;
  uint64_t v134;
  char *v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  void (*v141)(char *, uint64_t, uint64_t);
  int *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int (*v146)(char *, uint64_t, uint64_t);
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t *v161;
  char *v162;
  uint64_t *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  void *v182;

  v175 = a3;
  v176 = a1;
  v179 = a2;
  v169 = a4;
  v4 = sub_100003FC4(&qword_1000506A8);
  __chkstk_darwin(v4);
  v167 = (char *)&v134 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003FC4(&qword_1000506B0);
  __chkstk_darwin(v6);
  v163 = (uint64_t *)((char *)&v134 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100003FC4(&qword_1000506B8);
  __chkstk_darwin(v8);
  v161 = (uint64_t *)((char *)&v134 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v155 = type metadata accessor for ContactFormatter.Style(0);
  v154 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v156 = (char *)&v134 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for StatusAndNameView(0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v134 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v166 = sub_100003FC4(&qword_1000506C0);
  v164 = *(_QWORD *)(v166 - 8);
  v14 = __chkstk_darwin(v166);
  v165 = (char *)&v134 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v160 = (char *)&v134 - v17;
  __chkstk_darwin(v16);
  v162 = (char *)&v134 - v18;
  v159 = type metadata accessor for AccessibilityChildBehavior(0);
  v152 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v158 = (char *)&v134 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = type metadata accessor for UUID(0);
  v150 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v149 = (char *)&v134 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003FC4(&qword_1000506C8);
  __chkstk_darwin(v21);
  v172 = (uint64_t *)((char *)&v134 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v145 = type metadata accessor for Person(0);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v143 = (char *)&v134 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for PersonInfo(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v135 = (char *)&v134 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v140 = (char *)&v134 - v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v134 - v30;
  v177 = type metadata accessor for PersonStatusSet(0);
  v171 = *(_QWORD *)(v177 - 8);
  v32 = __chkstk_darwin(v177);
  v153 = (char *)&v134 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v170 = (char *)&v134 - v34;
  v35 = (int *)type metadata accessor for AvatarView(0);
  __chkstk_darwin(v35);
  v37 = (char *)&v134 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_100003FC4(&qword_1000506D0);
  v178 = *(_QWORD *)(v174 - 8);
  v38 = __chkstk_darwin(v174);
  v157 = (char *)&v134 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v147 = (char *)&v134 - v41;
  __chkstk_darwin(v40);
  v173 = (char *)&v134 - v42;
  v43 = type metadata accessor for PersonEntryType(0);
  v44 = __chkstk_darwin(v43);
  v148 = (uint64_t)&v134 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __chkstk_darwin(v44);
  v48 = (char *)&v134 - v47;
  v49 = __chkstk_darwin(v46);
  v51 = (char *)&v134 - v50;
  __chkstk_darwin(v49);
  v53 = (char *)&v134 - v52;
  sub_100004E9C(v179, (uint64_t)&v134 - v52, v54);
  v168 = v25;
  v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v56 = v24;
  v57 = v55;
  v58 = v55(v53, 2, v56);
  if (v58)
  {
    if (v58 != 1)
    {
      v59 = sub_100003FC4(&qword_1000506D8);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v169, 1, 1, v59);
    }
  }
  else
  {
    sub_10000501C((uint64_t)v53, type metadata accessor for PersonEntryType);
  }
  v141 = *(void (**)(char *, uint64_t, uint64_t))(v171 + 16);
  v141(v170, v175, v177);
  sub_100004E9C(v179, (uint64_t)v51, type metadata accessor for PersonEntryType);
  v61 = v57(v51, 2, v56);
  v146 = v57;
  if (v61)
  {
    v138 = 0;
  }
  else
  {
    v62 = v56;
    v63 = v168;
    v64 = (*(uint64_t (**)(char *, char *, uint64_t))(v168 + 32))(v31, v51, v62);
    v65 = v143;
    PersonInfo.person.getter(v64);
    v66 = *(uint64_t (**)(char *, uint64_t))(v63 + 8);
    v56 = v62;
    v57 = v146;
    v67 = v66(v31, v56);
    v138 = Person.contact.getter(v67);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v65, v145);
  }
  v68 = v176;
  v69 = (void (*)(_QWORD, _QWORD))v172;
  v70 = type metadata accessor for MultipleContactsRowView(0);
  v71 = (uint64_t *)(v68 + *(int *)(v70 + 32));
  v137 = *v71;
  v136 = *((unsigned __int8 *)v71 + 8);
  sub_100004E9C(v179, (uint64_t)v48, type metadata accessor for PersonEntryType);
  v72 = v57(v48, 2, v56);
  v142 = (int *)v11;
  v139 = v56;
  if (v72)
  {
    v73 = type metadata accessor for ContactImage(0);
    (*(void (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v69, 1, 1, v73);
  }
  else
  {
    v74 = v56;
    v75 = v168;
    v76 = v140;
    v77 = (*(uint64_t (**)(char *, char *, uint64_t))(v168 + 32))(v140, v48, v74);
    PersonInfo.contactImage.getter(v77);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v74);
  }
  v78 = sub_100002944();
  v79 = v150;
  v80 = v149;
  v81 = v151;
  (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v149, v68 + *(int *)(v70 + 40), v151);
  type metadata accessor for ContactFetcher(0);
  v82 = ContactFetcher.__allocating_init()();
  KeyPath = swift_getKeyPath(&unk_100040668);
  v84 = swift_getKeyPath(&unk_100040690);
  v85 = (uint64_t *)&v37[v35[15]];
  *v85 = v84;
  v140 = (char *)sub_100003FC4(&qword_1000506E0);
  swift_storeEnumTagMultiPayload(v85);
  v171 = *(_QWORD *)(v171 + 32);
  ((void (*)(char *, char *, uint64_t))v171)(v37, v170, v177);
  *(_QWORD *)&v37[v35[5]] = v138;
  v86 = &v37[v35[6]];
  *(_QWORD *)v86 = v137;
  v86[8] = v136;
  sub_100004F98((uint64_t)v172, (uint64_t)&v37[v35[7]], &qword_1000506C8);
  *(_QWORD *)&v37[v35[8]] = v82;
  v37[v35[9]] = v78;
  v37[v35[10]] = 0;
  v87 = (*(uint64_t (**)(char *, char *, uint64_t))(v79 + 32))(&v37[v35[11]], v80, v81);
  v88 = &v37[v35[12]];
  *((_QWORD *)v88 + 1) = 0;
  *((_QWORD *)v88 + 2) = 0;
  *(_QWORD *)v88 = KeyPath;
  *((_WORD *)v88 + 12) = 0;
  v89 = v35[13];
  *(double *)&v37[v89] = static PeopleWidgetConstants.maxContactAvatarSize.getter(v87);
  v90 = &v37[v35[14]];
  *(_OWORD *)v90 = xmmword_100040540;
  *((_OWORD *)v90 + 1) = xmmword_100040550;
  v91 = v158;
  ((void (*)(void))static AccessibilityChildBehavior.combine.getter)();
  v92 = sub_100004FDC(&qword_1000506E8, type metadata accessor for AvatarView, (uint64_t)&unk_100041BC0);
  v93 = v147;
  View.accessibilityElement(children:)(v91, v35, v92);
  v94 = v159;
  v172 = *(uint64_t **)(v152 + 8);
  ((void (*)(char *, uint64_t))v172)(v91, v159);
  sub_10000501C((uint64_t)v37, type metadata accessor for AvatarView);
  (*(void (**)(char *, char *, uint64_t))(v178 + 32))(v173, v93, v174);
  v95 = v148;
  sub_100004E9C(v179, v148, type metadata accessor for PersonEntryType);
  v96 = v139;
  v97 = 0;
  if (!v146((char *)v95, 2, v139))
  {
    v98 = v168;
    v99 = v135;
    v100 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v168 + 32))(v135, v95, v96);
    v101 = v143;
    PersonInfo.person.getter(v100);
    v102 = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v99, v96);
    v97 = Person.contact.getter(v102);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v101, v145);
  }
  v103 = v153;
  v104 = v177;
  v141(v153, v175, v177);
  v105 = sub_100002784();
  v106 = v156;
  (*(void (**)(char *, _QWORD, uint64_t))(v154 + 104))(v156, enum case for ContactFormatter.Style.shortName(_:), v155);
  v107 = String.localized.getter(0x656D614E206F4ELL, 0xE700000000000000);
  v109 = v108;
  v181 = type metadata accessor for ContactFormatter(0);
  v182 = &protocol witness table for ContactFormatter;
  sub_100004F2C(&v180);
  ContactFormatter.init(style:fallback:)(v106, v107, v109);
  v110 = swift_getKeyPath(&unk_100040690);
  v111 = (uint64_t)v161;
  *v161 = v110;
  swift_storeEnumTagMultiPayload(v111);
  v112 = swift_getKeyPath(&unk_1000406C0);
  v113 = (uint64_t)v163;
  *v163 = v112;
  sub_100003FC4(&qword_1000506F0);
  swift_storeEnumTagMultiPayload(v113);
  *v13 = v97;
  v114 = v142;
  ((void (*)(char *, char *, uint64_t))v171)((char *)v13 + v142[5], v103, v104);
  *(uint64_t *)((char *)v13 + v114[6]) = v105;
  *(uint64_t *)((char *)v13 + v114[7]) = 0x4008000000000000;
  sub_100004F70(&v180, (uint64_t)v13 + v114[8]);
  *(uint64_t *)((char *)v13 + v114[9]) = 2;
  *(uint64_t *)((char *)v13 + v114[10]) = 1;
  *(uint64_t *)((char *)v13 + v114[11]) = 0x7FF0000000000000;
  v115 = (char *)v13 + v114[12];
  *(_QWORD *)v115 = swift_getKeyPath(&unk_1000406F0);
  *((_QWORD *)v115 + 1) = 0;
  v115[16] = 0;
  v116 = (uint64_t *)((char *)v13 + v114[13]);
  *v116 = swift_getKeyPath(&unk_100040720);
  sub_100003FC4(&qword_1000506F8);
  swift_storeEnumTagMultiPayload(v116);
  sub_100004F98(v111, (uint64_t)v13 + v114[14], &qword_1000506B8);
  v117 = sub_100004F98(v113, (uint64_t)v13 + v114[15], &qword_1000506B0);
  static AccessibilityChildBehavior.combine.getter(v117);
  v118 = sub_100004FDC(&qword_100050700, type metadata accessor for StatusAndNameView, (uint64_t)&unk_100040F60);
  v119 = v160;
  View.accessibilityElement(children:)(v91, v114, v118);
  ((void (*)(char *, uint64_t))v172)(v91, v94);
  sub_10000501C((uint64_t)v13, type metadata accessor for StatusAndNameView);
  v120 = v164;
  v121 = v162;
  v122 = v166;
  (*(void (**)(char *, char *, uint64_t))(v164 + 32))(v162, v119, v166);
  v123 = *(void (**)(char *, char *, uint64_t))(v178 + 16);
  v124 = v157;
  v125 = v173;
  v126 = v174;
  v123(v157, v173, v174);
  v127 = *(void (**)(char *, char *, uint64_t))(v120 + 16);
  v128 = v165;
  v127(v165, v121, v122);
  v129 = (uint64_t)v167;
  v123(v167, v124, v126);
  v130 = sub_100003FC4(&qword_100050708);
  v127((char *)(v129 + *(int *)(v130 + 48)), v128, v122);
  v131 = *(void (**)(char *, uint64_t))(v120 + 8);
  v131(v121, v122);
  v132 = *(void (**)(char *, uint64_t))(v178 + 8);
  v132(v125, v126);
  v131(v128, v122);
  v132(v124, v126);
  v133 = sub_100003FC4(&qword_1000506D8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 56))(v129, 0, 1, v133);
  return sub_100004F98(v129, v169, &qword_1000506A8);
}

uint64_t sub_100003D40()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100003D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v4 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(a1);
  v9 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a2 = static VerticalAlignment.top.getter(v8);
  *(_QWORD *)(a2 + 8) = 0x4030000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  sub_100003FC4(&qword_100050658);
  v10 = *(_QWORD *)(v2 + *(int *)(a1 + 24));
  v11 = swift_bridgeObjectRetain(v10);
  v12 = sub_100010158(v11);
  swift_bridgeObjectRelease(v10);
  v24 = v12;
  KeyPath = swift_getKeyPath(&unk_100040648);
  sub_100004E9C(v4, (uint64_t)v9, type metadata accessor for MultipleContactsRowView);
  v14 = *(unsigned __int8 *)(v6 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_10004DDB0, v15 + v7, v14 | 7);
  sub_100004D24((uint64_t)v9, v16 + v15);
  v17 = swift_allocObject(&unk_10004DDD8, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_100004D68;
  *(_QWORD *)(v17 + 24) = v16;
  v18 = sub_100003FC4(&qword_100050660);
  v19 = sub_100003FC4(&qword_100050668);
  v20 = sub_100005084(&qword_100050670, &qword_100050660, (uint64_t)&protocol conformance descriptor for [A]);
  v21 = sub_100004E38();
  return ForEach<>.init(_:id:content:)(&v24, KeyPath, sub_100004DE0, v17, v18, v19, v20, &protocol witness table for Int, v21);
}

uint64_t sub_100003F04(__int128 *a1)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  if (!sub_10003E6AC(2, 17, 0, 0))
    return v2;
  v3 = v2;
  return swift_getOpaqueTypeMetadata2(0, &v3, &opaque type descriptor for <<opaque return type of WidgetConfiguration._contentMarginsDisabled()>>, 0);
}

uint64_t sub_100003F68(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *a1;
  v1 = a1[1];
  if (sub_10003E6AC(2, 17, 0, 0))
  {
    v4[0] = v2;
    v4[1] = v1;
    return swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of WidgetConfiguration._contentMarginsDisabled()>>, 1);
  }
  return v1;
}

uint64_t sub_100003FC4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100004004(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

__n128 sub_100004048(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100004058(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100004078(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100004BD4(a1, &qword_100050580, (uint64_t)&unk_10004DCD0);
}

uint64_t initializeBufferWithCopyOfBuffer for MultipleContactsProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_1000040E4(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000040F0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100004110(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_100004BD4(a1, &qword_100050588, (uint64_t)&unk_10004DD50);
}

uint64_t *sub_100004150(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = sub_100003FC4(&qword_100050590);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    else
    {
      v10 = *a2;
      *a1 = *a2;
      swift_retain(v10);
    }
    swift_storeEnumTagMultiPayload(a1);
    v11 = a3[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = a3[6];
    v16 = a3[7];
    v17 = *(uint64_t *)((char *)a2 + v15);
    *(uint64_t *)((char *)a1 + v15) = v17;
    *(uint64_t *)((char *)a1 + v16) = *(uint64_t *)((char *)a2 + v16);
    v18 = a3[8];
    v19 = a3[9];
    v20 = (char *)a1 + v18;
    v21 = (char *)a2 + v18;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v22 = *(uint64_t *)((char *)a2 + v19);
    v20[8] = v21[8];
    *(uint64_t *)((char *)a1 + v19) = v22;
    v23 = a3[10];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = type metadata accessor for UUID(0);
    v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
    swift_bridgeObjectRetain(v17);
    v27(v24, v25, v26);
  }
  return a1;
}

uint64_t sub_1000042C0(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v4 = sub_100003FC4(&qword_100050590);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + a2[5];
  v7 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[6]));
  v8 = (char *)a1 + a2[10];
  v9 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t *sub_100004380(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);

  v6 = sub_100003FC4(&qword_100050590);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  }
  else
  {
    v8 = *a2;
    *a1 = *a2;
    swift_retain(v8);
  }
  swift_storeEnumTagMultiPayload(a1);
  v9 = a3[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = a3[6];
  v14 = a3[7];
  v15 = *(uint64_t *)((char *)a2 + v13);
  *(uint64_t *)((char *)a1 + v13) = v15;
  *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
  v16 = a3[8];
  v17 = a3[9];
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v20 = *(uint64_t *)((char *)a2 + v17);
  v18[8] = v19[8];
  *(uint64_t *)((char *)a1 + v17) = v20;
  v21 = a3[10];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for UUID(0);
  v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
  swift_bridgeObjectRetain(v15);
  v25(v22, v23, v24);
  return a1;
}

uint64_t *sub_1000044C4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  if (a1 != a2)
  {
    sub_100004EE0((uint64_t)a1, &qword_100050590);
    v6 = sub_100003FC4(&qword_100050590);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      v8 = *a2;
      *a1 = *a2;
      swift_retain(v8);
    }
    swift_storeEnumTagMultiPayload(a1);
  }
  v9 = a3[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = a3[6];
  v14 = *(uint64_t *)((char *)a2 + v13);
  v15 = *(uint64_t *)((char *)a1 + v13);
  *(uint64_t *)((char *)a1 + v13) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  v16 = a3[8];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v19;
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  v20 = a3[10];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  return a1;
}

char *sub_10000462C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = sub_100003FC4(&qword_100050590);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v13 = a3[8];
  v14 = a3[9];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v17 = *(_QWORD *)&a2[v14];
  v15[8] = v16[8];
  *(_QWORD *)&a1[v14] = v17;
  v18 = a3[10];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

char *sub_100004760(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_100004EE0((uint64_t)a1, &qword_100050590);
    v6 = sub_100003FC4(&qword_100050590);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = *(_QWORD *)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_bridgeObjectRelease(v13);
  v14 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t sub_1000048B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000048C0);
}

uint64_t sub_1000048C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = sub_100003FC4(&qword_100050598);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Font.TextStyle(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for UUID(0);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[10];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[6]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100004990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000499C);
}

uint64_t sub_10000499C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_100003FC4(&qword_100050598);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for Font.TextStyle(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
        return result;
      }
      v10 = type metadata accessor for UUID(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[10];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for MultipleContactsRowView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000505F8;
  if (!qword_1000505F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MultipleContactsRowView);
  return result;
}

void sub_100004AA4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  sub_100004B6C(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Font.TextStyle(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[4] = "\t";
      v8[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v6 = type metadata accessor for UUID(319);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 7, v8, a1 + 16);
      }
    }
  }
}

void sub_100004B6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100050608)
  {
    v2 = type metadata accessor for WidgetFamily(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100050608);
  }
}

void type metadata accessor for CTFont(uint64_t a1)
{
  sub_100004BD4(a1, &qword_100050650, (uint64_t)&unk_10004DD80);
}

void sub_100004BD4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100004C18(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000420D8, 1);
}

uint64_t sub_100004C28()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for MultipleContactsRowView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100003FC4(&qword_100050590);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = v4 + v5;
  v10 = (char *)v6 + v1[5];
  v11 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[6]));
  v12 = (char *)v6 + v1[10];
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  return swift_deallocObject(v0, v9, v3 | 7);
}

uint64_t sub_100004D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MultipleContactsRowView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100004D68@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MultipleContactsRowView(0) - 8) + 80);
  return sub_100002AF4(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_100004DBC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100004DE0(char *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, char *);
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = sub_100003FC4(&qword_100050680);
  return v3(v4, &a1[*(int *)(v5 + 48)]);
}

unint64_t sub_100004E38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100050678;
  if (!qword_100050678)
  {
    v1 = sub_100004004(&qword_100050668);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050678);
  }
  return result;
}

uint64_t sub_100004E9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100004EE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100003FC4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_QWORD *sub_100004F2C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100004F70(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100004F98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003FC4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100004FDC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000501C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100005058()
{
  return sub_100005084(&qword_100050718, &qword_100050720, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_100005084(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100004004(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000050C4(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  uint64_t (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t i;
  id v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  uint8_t *v48;
  uint64_t v49;
  char *v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  NSObject *v74;
  os_signpost_type_t v75;
  uint8_t *v76;
  char *v77;
  _QWORD *v78;
  uint8_t *v79;
  os_signpost_id_t v80;
  void (*v81)(char *, _QWORD *);
  uint8_t *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  id v89;
  void *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  void (*v112)(_QWORD);
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint8_t *v118;
  _QWORD *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(_QWORD);
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  _OWORD v132[8];
  uint64_t v133;
  char v134[8];
  uint64_t v135;
  uint64_t v136;

  v126 = a4;
  v125 = a3;
  v119 = (_QWORD *)type metadata accessor for OSSignpostID(0);
  v118 = (uint8_t *)*(v119 - 1);
  v5 = __chkstk_darwin(v119);
  v115 = (char *)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v117 = (char *)&v115 - v7;
  v116 = type metadata accessor for MultipleContactsEntry(0);
  __chkstk_darwin(v116);
  v9 = (char **)((char *)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for WidgetFamily(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for Logger(0);
  v123 = *(_QWORD *)(v124 - 8);
  v14 = __chkstk_darwin(v124);
  v16 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v122 = (char *)&v115 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v115 - v19;
  v129 = type metadata accessor for OSSignposter(0);
  v128 = *(_QWORD *)(v129 - 8);
  v21 = __chkstk_darwin(v129);
  v121 = (char *)&v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v115 - v24;
  static PeopleLogger.extension.getter(v23);
  v127 = v25;
  v26 = OSSignposter.init(logger:)(v20);
  TimelineProviderContext.family.getter(v26);
  v130 = v4;
  v27 = sub_100005C00();
  v28 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  v29 = (uint64_t)v27;
  result = v28(v13, v10);
  v131 = v29;
  if ((unint64_t)v29 >> 62)
  {
    if (v29 < 0)
      v114 = v29;
    else
      v114 = v29 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v29);
    v31 = _CocoaArrayWrapper.endIndex.getter(v114);
    result = swift_bridgeObjectRelease(v29);
  }
  else
  {
    v31 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v31)
  {
    *(_QWORD *)&v132[0] = &_swiftEmptyArrayStorage;
    if (v31 < 1)
    {
      __break(1u);
    }
    else
    {
      v32 = v131;
      v33 = v131 & 0xC000000000000001;
      swift_bridgeObjectRetain(v131);
      for (i = 0; i != v31; ++i)
      {
        if (v33)
          v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v32);
        else
          v35 = *(id *)(v32 + 8 * i + 32);
        v36 = v35;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v38 = *(_QWORD *)((*(_QWORD *)&v132[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        v37 = *(_QWORD *)((*(_QWORD *)&v132[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v38 >= v37 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
        v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v36);
        specialized Array._endMutation()(v39);
      }
      swift_bridgeObjectRelease(v32);
      v40 = *(_QWORD *)&v132[0];
      v41 = sub_10002805C((uint64_t)&_swiftEmptyArrayStorage);
      v42 = (void *)__chkstk_darwin(v41);
      *(&v115 - 2) = v130;
      v119 = sub_100009BC8(v42, (void (*)(void **, id *))sub_1000125A0, (uint64_t)(&v115 - 4), v40);
      v43 = swift_bridgeObjectRelease(v40);
      v44 = v122;
      static PeopleLogger.extension.getter(v43);
      v45 = swift_bridgeObjectRetain_n(v32, 2);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, (os_log_type_t)v47))
      {
        LODWORD(v117) = v47;
        v48 = (uint8_t *)swift_slowAlloc(12, -1);
        v116 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v132[0] = v116;
        v118 = v48;
        *(_DWORD *)v48 = 136315138;
        swift_bridgeObjectRetain(v32);
        v49 = 0;
        v50 = (char *)&_swiftEmptyArrayStorage;
        do
        {
          if (v33)
            v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v49, v32);
          else
            v51 = *(id *)(v32 + 8 * v49 + 32);
          v52 = v51;
          v53 = objc_msgSend(v51, "identifier");
          v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
          v56 = v55;

          if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
            v50 = sub_10000F15C(0, *((_QWORD *)v50 + 2) + 1, 1, v50);
          v58 = *((_QWORD *)v50 + 2);
          v57 = *((_QWORD *)v50 + 3);
          if (v58 >= v57 >> 1)
            v50 = sub_10000F15C((char *)(v57 > 1), v58 + 1, 1, v50);
          ++v49;
          *((_QWORD *)v50 + 2) = v58 + 1;
          v59 = &v50[16 * v58];
          *((_QWORD *)v59 + 4) = v54;
          *((_QWORD *)v59 + 5) = v56;
          v32 = v131;
        }
        while (v31 != v49);
        swift_bridgeObjectRelease(v131);
        v82 = v118;
        v83 = Array.description.getter(v50, &type metadata for String);
        v85 = v84;
        swift_bridgeObjectRelease(v50);
        v133 = sub_10001CBB4(v83, v85, (uint64_t *)v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v82 + 4, v82 + 12);
        swift_bridgeObjectRelease_n(v32, 2);
        swift_bridgeObjectRelease(v85);
        _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v117, "get snapshot for multiple contacts widget with Ids %s", v82, 0xCu);
        v86 = v116;
        swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1, -1);
        swift_slowDealloc(v82, -1, -1);

        (*(void (**)(char *, uint64_t))(v123 + 8))(v122, v124);
      }
      else
      {

        swift_bridgeObjectRelease_n(v32, 2);
        (*(void (**)(char *, uint64_t))(v123 + 8))(v44, v124);
      }
      swift_bridgeObjectRetain(v32);
      v87 = 0;
      v88 = (char *)&_swiftEmptyArrayStorage;
      do
      {
        if (v33)
          v89 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v87, v32);
        else
          v89 = *(id *)(v32 + 8 * v87 + 32);
        v90 = v89;
        v91 = objc_msgSend(v89, "identifier");
        v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
        v94 = v93;

        if ((swift_isUniquelyReferenced_nonNull_native(v88) & 1) == 0)
          v88 = sub_10000F15C(0, *((_QWORD *)v88 + 2) + 1, 1, v88);
        v96 = *((_QWORD *)v88 + 2);
        v95 = *((_QWORD *)v88 + 3);
        if (v96 >= v95 >> 1)
          v88 = sub_10000F15C((char *)(v95 > 1), v96 + 1, 1, v88);
        ++v87;
        *((_QWORD *)v88 + 2) = v96 + 1;
        v97 = &v88[16 * v96];
        *((_QWORD *)v97 + 4) = v92;
        *((_QWORD *)v97 + 5) = v94;
      }
      while (v31 != v87);
      swift_bridgeObjectRelease(v32);
      v98 = (uint64_t)v130;
      sub_100011C0C((uint64_t)(v130 + 80), (uint64_t)&v133);
      v99 = v135;
      v131 = v136;
      sub_10001190C(&v133, v135);
      sub_100011948(v98, (uint64_t)v132);
      v100 = v128;
      v101 = v121;
      v102 = v32;
      v103 = v127;
      v104 = v129;
      (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v121, v127, v129);
      v105 = *(unsigned __int8 *)(v100 + 80);
      v106 = (v105 + 184) & ~v105;
      v107 = swift_allocObject(&unk_10004E020, v106 + v120, v105 | 7);
      *(_QWORD *)(v107 + 16) = v88;
      *(_QWORD *)(v107 + 24) = v102;
      v108 = v132[5];
      *(_OWORD *)(v107 + 96) = v132[4];
      *(_OWORD *)(v107 + 112) = v108;
      v109 = v132[7];
      *(_OWORD *)(v107 + 128) = v132[6];
      *(_OWORD *)(v107 + 144) = v109;
      v110 = v132[1];
      *(_OWORD *)(v107 + 32) = v132[0];
      *(_OWORD *)(v107 + 48) = v110;
      v111 = v132[3];
      *(_OWORD *)(v107 + 64) = v132[2];
      *(_OWORD *)(v107 + 80) = v111;
      v112 = v125;
      *(_QWORD *)(v107 + 160) = v119;
      *(_QWORD *)(v107 + 168) = v112;
      v113 = v126;
      *(_QWORD *)(v107 + 176) = v126;
      (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v107 + v106, v101, v104);
      swift_bridgeObjectRetain(v88);
      swift_retain(v113);
      StatusProviderProtocol.fetchStatus(for:completion:)(v88, sub_100011DB0, v107, v99, v131);
      swift_bridgeObjectRelease(v88);
      swift_release(v107);
      (*(void (**)(char *, uint64_t))(v100 + 8))(v103, v104);
      return sub_10000D160(&v133);
    }
  }
  else
  {
    v60 = swift_bridgeObjectRelease(v131);
    v61 = static PeopleLogger.extension.getter(v60);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Could not get any contacts for Mutiple contacts widget", v64, 2u);
      swift_slowDealloc(v64, -1, -1);
    }

    v65 = (*(uint64_t (**)(char *, uint64_t))(v123 + 8))(v16, v124);
    v66 = v116;
    Date.init()(v65);
    v67 = (char *)v9 + *(int *)(v66 + 32);
    v68 = type metadata accessor for TimelineEntryRelevance(0);
    v69 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v67, 1, 1, v68);
    *v9 = &_swiftEmptyArrayStorage;
    *((_BYTE *)v9 + *(int *)(v66 + 24)) = 0;
    UUID.init()(v69);
    v125(v9);
    v70 = sub_10000501C((uint64_t)v9, type metadata accessor for MultipleContactsEntry);
    v71 = v117;
    v72 = static OSSignpostID.exclusive.getter(v70);
    v73 = v127;
    v74 = OSSignposter.logHandle.getter(v72);
    v75 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v76 = v118;
      v77 = v115;
      v78 = v119;
      (*((void (**)(char *, char *, _QWORD *))v118 + 2))(v115, v71, v119);
      v79 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v79 = 0;
      v80 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v74, v75, v80, "getSnapshot", "no contacts", v79, 2u);
      swift_slowDealloc(v79, -1, -1);

      v81 = (void (*)(char *, _QWORD *))*((_QWORD *)v76 + 1);
      v81(v71, v78);
      (*(void (**)(char *, uint64_t))(v128 + 8))(v73, v129);
      return ((uint64_t (*)(char *, _QWORD *))v81)(v77, v78);
    }
    else
    {

      (*((void (**)(char *, _QWORD *))v118 + 1))(v71, v119);
      return (*(uint64_t (**)(char *, uint64_t))(v128 + 8))(v73, v129);
    }
  }
  return result;
}

void *sub_100005C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[2];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = WidgetFamily.chsFamily.getter(v4);
  v8 = SelectPeopleIntent.people(for:)(v7);
  static PeopleLogger.extension.getter();
  v9 = swift_bridgeObjectRetain_n(v8, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v26 = v1;
    v12 = swift_slowAlloc(12, -1);
    v25 = v3;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc(32, -1);
    v28[0] = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = type metadata accessor for PersonType(0);
    v16 = swift_bridgeObjectRetain(v8);
    v17 = Array.description.getter(v16, v15);
    v24 = v2;
    v19 = v18;
    swift_bridgeObjectRelease(v8);
    v20 = v17;
    v1 = v26;
    v27 = sub_10001CBB4(v20, v19, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Configuration returned contacts: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v21 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v24);
  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
    v21 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  __chkstk_darwin(v21);
  *(&v24 - 2) = v1;
  v22 = sub_100005E60((void (*)(uint64_t *__return_ptr, id *))sub_100011CEC, (uint64_t)(&v24 - 4), v8);
  swift_bridgeObjectRelease(v8);
  return v22;
}

void *sub_100005E60(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v18;
  id v19;
  unint64_t v20;

  v4 = v3;
  v20 = (unint64_t)&_swiftEmptyArrayStorage;
  if ((unint64_t)a3 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    for (i = 4; ; ++i)
    {
      v9 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a3)
         : *(id *)(a3 + 8 * i);
      v10 = v9;
      v11 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v19 = v9;
      a1(&v18, &v19);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return (void *)swift_bridgeObjectRelease(v20);
      }

      v12 = v18;
      if (v18)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v14 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v13 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v14 >= v13 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
        specialized Array._endMutation()(v8);
      }
      if (v11 == v6)
      {
        swift_bridgeObjectRelease(a3);
        return (void *)v20;
      }
    }
    __break(1u);
LABEL_17:
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
  swift_bridgeObjectRelease(a3);
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100005FF8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD *), uint64_t a8)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint8_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  _QWORD *v64;
  BOOL v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  os_signpost_type_t v125;
  uint64_t v126;
  char *v127;
  uint8_t *v128;
  os_signpost_id_t v129;
  void (*v130)(char *, _QWORD *);
  _QWORD *v132;
  char *v133;
  uint64_t *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  void (*v138)(_QWORD *);
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint8_t *v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  char *v162;
  char *v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168[5];
  _QWORD v169[3];
  char v170[8];
  void *v171;

  v137 = a8;
  v138 = a7;
  v158 = a5;
  v13 = (_QWORD *)type metadata accessor for OSSignpostID(0);
  v140 = *(v13 - 1);
  v14 = __chkstk_darwin(v13);
  v133 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v139 = (char *)&v132 - v16;
  v135 = type metadata accessor for MultipleContactsEntry(0);
  __chkstk_darwin(v135);
  v136 = (char *)&v132 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003FC4(&qword_1000506C8);
  __chkstk_darwin(v18);
  v157 = (char *)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for ContactFormatter.Style(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v154 = (char *)&v132 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Person(0);
  __chkstk_darwin(v21);
  v163 = (char *)&v132 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for PersonInfo(0);
  v153 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v162 = (char *)&v132 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for Date(0);
  v151 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v150 = (char *)&v132 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for Logger(0);
  v25 = *(_QWORD **)(v142 - 8);
  v26 = __chkstk_darwin(v142);
  v28 = (char *)&v132 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v26);
  v31 = (uint64_t)&v132 - v30;
  __chkstk_darwin(v29);
  v33 = (char *)&v132 - v32;
  v171 = &_swiftEmptyArrayStorage;
  v141 = v31;
  if ((a2 & 1) != 0)
  {
    v168[0] = a1;
    swift_errorRetain(a1);
    v50 = sub_100003FC4(&qword_100050A40);
    v51 = swift_willThrowTypedImpl(v168, v50, &protocol self-conformance witness table for Error);
    static PeopleLogger.extension.getter(v51);
    swift_errorRetain(a1);
    v52 = swift_errorRetain(a1);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.default.getter();
    v55 = a1;
    if (os_log_type_enabled(v53, v54))
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      v168[0] = v57;
      *(_DWORD *)v56 = 136315138;
      v161 = v25;
      swift_getErrorValue(v55, v170, v169);
      v58 = Error.localizedDescription.getter(v169[1], v169[2]);
      v60 = v59;
      *(_QWORD *)&v167 = sub_10001CBB4(v58, v59, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, (char *)&v167 + 8, v56 + 4, v56 + 12);
      swift_bridgeObjectRelease(v60);
      sub_100011B2C(v55, 1);
      sub_100011B2C(v55, 1);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "got failure fetching statuses for contactID's: %s", v56, 0xCu);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

      sub_100011B2C(v55, 1);
      v49 = (uint64_t *)v161[1];
    }
    else
    {
      sub_100011B2C(a1, 1);
      sub_100011B2C(a1, 1);
      swift_errorRelease(a1);

      v49 = (uint64_t *)v25[1];
    }
    v101 = ((uint64_t (*)(char *, uint64_t))v49)(v28, v142);
    v31 = v141;
  }
  else
  {
    v159 = a1;
    v34 = swift_bridgeObjectRetain(a1);
    static PeopleLogger.extension.getter(v34);
    v35 = swift_bridgeObjectRetain_n(a3, 2);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter();
    v38 = os_log_type_enabled(v36, v37);
    v149 = a6;
    if (v38)
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v148 = swift_slowAlloc(32, -1);
      v168[0] = v148;
      v161 = v25;
      *(_DWORD *)v39 = 136315138;
      v147 = v39 + 4;
      v40 = swift_bridgeObjectRetain(a3);
      v41 = v13;
      v42 = a4;
      v43 = Array.description.getter(v40, &type metadata for String);
      v45 = v44;
      swift_bridgeObjectRelease(a3);
      v46 = v43;
      a4 = v42;
      v47 = v41;
      v31 = v141;
      *(_QWORD *)&v167 = sub_10001CBB4(v46, v45, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, (char *)&v167 + 8, v147, v39 + 12);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease(v45);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "got statuses for contactIDs %s", v39, 0xCu);
      v48 = v148;
      swift_arrayDestroy(v148, 1, (char *)&type metadata for Any + 8);
      v13 = v47;
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      v49 = (uint64_t *)v161[1];
    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      v49 = (uint64_t *)v25[1];
    }
    ((void (*)(char *, uint64_t))v49)(v33, v142);
    v61 = v159;
    if ((unint64_t)a4 >> 62)
      goto LABEL_48;
    v62 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a4);
    for (; v62; v62 = _CocoaArrayWrapper.endIndex.getter(v104))
    {
      v134 = v49;
      v132 = v13;
      v63 = 0;
      v148 = a4 & 0xC000000000000001;
      v144 = a4 & 0xFFFFFFFFFFFFFF8;
      v145 = a4;
      v143 = a4 + 32;
      v146 = enum case for ContactFormatter.Style.shortName(_:);
      a4 = (uint64_t)&qword_100050A58;
      v49 = &qword_100050A60;
      v147 = (uint8_t *)v62;
      while (v148)
      {
        v64 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v63, v145);
        v65 = __OFADD__(v63++, 1);
        if (v65)
          goto LABEL_46;
LABEL_16:
        v161 = v64;
        v66 = objc_msgSend(v64, "identifier", v132);
        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v69 = v68;

        if (*(_QWORD *)(v61 + 16))
        {
          v70 = sub_100029798(v67, v69);
          v71 = &_swiftEmptyArrayStorage;
          if ((v72 & 1) != 0)
          {
            v71 = *(void **)(*(_QWORD *)(v61 + 56) + 8 * v70);
            swift_bridgeObjectRetain(v71);
          }
        }
        else
        {
          v71 = &_swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRelease(v69);
        v73 = sub_100006F8C((uint64_t)v71, (void (*)(BOOL, uint64_t, uint64_t))sub_100024CF8);
        v74 = swift_bridgeObjectRelease(v71);
        v75 = v150;
        Date.init()(v74);
        v76 = dispatch thunk of StatusPrioritizer.ranked(statuses:at:lockScreenCircular:)(v73, v75, 0);
        swift_bridgeObjectRelease(v73);
        (*(void (**)(char *, uint64_t))(v151 + 8))(v75, v152);
        v77 = *(_QWORD *)(v76 + 16);
        if (v77)
        {
          v78 = v76 + 32;
          swift_bridgeObjectRetain(v76);
          v79 = (char *)&_swiftEmptyArrayStorage;
          do
          {
            sub_100011C0C(v78, (uint64_t)v168);
            sub_100011C0C((uint64_t)v168, (uint64_t)&v167);
            v80 = sub_100003FC4(&qword_100050A58);
            v81 = sub_100003FC4(&qword_100050A60);
            if ((swift_dynamicCast(&v164, &v167, v80, v81, 6) & 1) == 0)
            {
              v166 = 0;
              v164 = 0u;
              v165 = 0u;
            }
            sub_10000D160(v168);
            if (*((_QWORD *)&v165 + 1))
            {
              sub_100004F70(&v164, (uint64_t)&v167);
              sub_100004F70(&v167, (uint64_t)&v164);
              if ((swift_isUniquelyReferenced_nonNull_native(v79) & 1) == 0)
                v79 = sub_10000F470(0, *((_QWORD *)v79 + 2) + 1, 1, v79);
              v83 = *((_QWORD *)v79 + 2);
              v82 = *((_QWORD *)v79 + 3);
              if (v83 >= v82 >> 1)
                v79 = sub_10000F470((char *)(v82 > 1), v83 + 1, 1, v79);
              *((_QWORD *)v79 + 2) = v83 + 1;
              sub_100004F70(&v164, (uint64_t)&v79[40 * v83 + 32]);
            }
            else
            {
              sub_100004EE0((uint64_t)&v164, &qword_100050A68);
            }
            v78 += 40;
            --v77;
          }
          while (v77);
          swift_bridgeObjectRelease_n(v76, 2);
        }
        else
        {
          swift_bridgeObjectRelease(v76);
        }
        v84 = v154;
        (*(void (**)(char *, _QWORD, uint64_t))(v155 + 104))(v154, v146, v156);
        v85 = String.localized.getter(0x656D614E206F4ELL, 0xE700000000000000);
        v87 = v86;
        v168[3] = type metadata accessor for ContactFormatter(0);
        v168[4] = (uint64_t)&protocol witness table for ContactFormatter;
        sub_100004F2C(v168);
        ContactFormatter.init(style:fallback:)(v84, v85, v87);
        v88 = v161;
        Person.init(from:statuses:contactFormatter:)();
        v13 = objc_msgSend(v88, "identifier");
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v90 = v89;

        v91 = v149;
        if (*(_QWORD *)(v149 + 16) && (v92 = sub_100029798(v31, v90), (v93 & 1) != 0))
        {
          v31 = v92;
          v94 = *(_QWORD *)(v91 + 56);
          v13 = (_QWORD *)type metadata accessor for ContactImage(0);
          v95 = *(v13 - 1);
          v96 = v157;
          (*(void (**)(char *, uint64_t, _QWORD *))(v95 + 16))(v157, v94 + *(_QWORD *)(v95 + 72) * v31, v13);
          (*(void (**)(char *, _QWORD, uint64_t, _QWORD *))(v95 + 56))(v96, 0, 1, v13);
        }
        else
        {
          v97 = type metadata accessor for ContactImage(0);
          v96 = v157;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v157, 1, 1, v97);
        }
        swift_bridgeObjectRelease(v90);
        PersonInfo.init(person:contactImage:)(v163, v96);
        v98 = (unint64_t)v171;
        if ((swift_isUniquelyReferenced_nonNull_native(v171) & 1) == 0)
          v98 = sub_10000F268(0, *(_QWORD *)(v98 + 16) + 1, 1, v98);
        v100 = *(_QWORD *)(v98 + 16);
        v99 = *(_QWORD *)(v98 + 24);
        if (v100 >= v99 >> 1)
          v98 = sub_10000F268(v99 > 1, v100 + 1, 1, v98);
        *(_QWORD *)(v98 + 16) = v100 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v153 + 32))(v98+ ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80))+ *(_QWORD *)(v153 + 72) * v100, v162, v160);

        v171 = (void *)v98;
        v61 = v159;
        if (v63 == v147)
        {
          swift_bridgeObjectRelease(v145);
          v101 = sub_100011B2C(v61, 0);
          v13 = v132;
          v31 = v141;
          v49 = v134;
          goto LABEL_53;
        }
      }
      if ((unint64_t)v63 >= *(_QWORD *)(v144 + 16))
        goto LABEL_47;
      v64 = *(id *)(v143 + 8 * (_QWORD)v63);
      v65 = __OFADD__(v63++, 1);
      if (!v65)
        goto LABEL_16;
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      v102 = v49;
      if (a4 < 0)
        v103 = a4;
      else
        v103 = a4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a4);
      v104 = v103;
      v49 = v102;
    }
    swift_bridgeObjectRelease(a4);
    v101 = sub_100011B2C(v61, 0);
  }
LABEL_53:
  static PeopleLogger.extension.getter(v101);
  v105 = v171;
  v106 = swift_bridgeObjectRetain_n(v171, 2);
  v107 = Logger.logObject.getter(v106);
  v108 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v107, v108))
  {
    v109 = (uint8_t *)swift_slowAlloc(12, -1);
    v110 = swift_slowAlloc(32, -1);
    v168[0] = v110;
    v134 = v49;
    *(_DWORD *)v109 = 136315138;
    v111 = Array.debugDescription.getter(v105, v160);
    v113 = v112;
    *(_QWORD *)&v167 = sub_10001CBB4(v111, v112, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v167, (char *)&v167 + 8, v109 + 4, v109 + 12);
    swift_bridgeObjectRelease_n(v105, 2);
    swift_bridgeObjectRelease(v113);
    _os_log_impl((void *)&_mh_execute_header, v107, v108, "snapshot created for multiple widget %s", v109, 0xCu);
    swift_arrayDestroy(v110, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v110, -1, -1);
    swift_slowDealloc(v109, -1, -1);

    ((void (*)(uint64_t, uint64_t))v134)(v141, v142);
  }
  else
  {

    swift_bridgeObjectRelease_n(v105, 2);
    ((void (*)(uint64_t, uint64_t))v49)(v31, v142);
  }
  v114 = v139;
  v115 = swift_beginAccess(&v171, v168, 0, 0);
  v116 = v171;
  v117 = v135;
  v118 = v136;
  Date.init()(v115);
  v119 = (char *)v118 + *(int *)(v117 + 32);
  v120 = type metadata accessor for TimelineEntryRelevance(0);
  v121 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 56))(v119, 1, 1, v120);
  *v118 = v116;
  *((_BYTE *)v118 + *(int *)(v117 + 24)) = 0;
  UUID.init()(v121);
  v138(v118);
  v122 = sub_10000501C((uint64_t)v118, type metadata accessor for MultipleContactsEntry);
  v123 = static OSSignpostID.exclusive.getter(v122);
  v124 = OSSignposter.logHandle.getter(v123);
  v125 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v126 = v140;
    v127 = v133;
    (*(void (**)(char *, char *, _QWORD *))(v140 + 16))(v133, v114, v13);
    v128 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v128 = 0;
    v129 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v124, v125, v129, "getSnapshot", "completed", v128, 2u);
    swift_slowDealloc(v128, -1, -1);

    v130 = *(void (**)(char *, _QWORD *))(v126 + 8);
    v130(v114, v13);
    return ((uint64_t (*)(char *, _QWORD *))v130)(v127, v13);
  }
  else
  {

    return (*(uint64_t (**)(char *, _QWORD *))(v140 + 8))(v114, v13);
  }
}

_QWORD *sub_100006F80(uint64_t a1)
{
  return sub_100006F8C(a1, (void (*)(BOOL, uint64_t, uint64_t))sub_100024CF8);
}

_QWORD *sub_100006F8C(uint64_t a1, void (*a2)(BOOL, uint64_t, uint64_t))
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE v12[40];
  __int128 v13[2];
  _QWORD *v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = &_swiftEmptyArrayStorage;
  if (v2)
  {
    v14 = &_swiftEmptyArrayStorage;
    a2(0, v2, 0);
    v6 = a1 + 32;
    v3 = &_swiftEmptyArrayStorage;
    do
    {
      sub_100011C0C(v6, (uint64_t)v12);
      v7 = sub_100003FC4(&qword_100050A60);
      v8 = sub_100003FC4(&qword_100050A58);
      swift_dynamicCast(v13, v12, v7, v8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        a2(0, v3[2] + 1, 1);
        v3 = v14;
      }
      v10 = v3[2];
      v9 = v3[3];
      if (v10 >= v9 >> 1)
      {
        a2(v9 > 1, v10 + 1, 1);
        v3 = v14;
      }
      v3[2] = v10 + 1;
      sub_100004F70(v13, (uint64_t)&v3[5 * v10 + 4]);
      v6 += 40;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1000070D0(uint8_t *a1, uint64_t a2, void (*a3)(char *), void (*a4)(char *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  uint8_t *v48;
  uint64_t result;
  uint64_t v50;
  char *v51;
  id v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint8_t *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  os_log_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t i;
  id v87;
  id v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  char *v109;
  void (**v110)(char *);
  void (*v111)(char *);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  uint64_t v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  os_log_t v135;
  uint64_t v136;
  char *v137;
  NSObject *v138;
  os_signpost_type_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint8_t *v143;
  os_signpost_id_t v144;
  void (*v145)(os_log_t, uint64_t);
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  os_log_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  void (*v166)(char *);
  void (*v167)(char *);
  _QWORD *v168;
  uint64_t v169;
  uint8_t *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  _OWORD v175[8];
  uint64_t v176;
  char v177[8];
  uint64_t v178;
  uint8_t *v179;

  v167 = a4;
  v166 = a3;
  v170 = a1;
  v148 = type metadata accessor for OSSignpostID(0);
  v147 = *(_QWORD *)(v148 - 8);
  v5 = __chkstk_darwin(v148);
  v146 = (char *)&v146 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v156 = (os_log_t)((char *)&v146 - v7);
  v8 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v8);
  v155 = (char *)&v146 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003FC4(&qword_100050778);
  __chkstk_darwin(v10);
  v151 = (char *)&v146 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100003FC4(&qword_1000509F8);
  v153 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v152 = (char *)&v146 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for TimelineProviderContext(0);
  v160 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v158 = v13;
  v159 = (char *)&v146 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003FC4(&qword_100050A00);
  __chkstk_darwin(v14);
  v163 = (char *)&v146 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for WidgetFamily(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v146 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v146 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = type metadata accessor for Logger(0);
  v168 = *(_QWORD **)(v169 - 8);
  v24 = __chkstk_darwin(v169);
  v26 = (char *)&v146 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v164 = (char *)&v146 - v28;
  __chkstk_darwin(v27);
  v30 = (char *)&v146 - v29;
  v172 = type metadata accessor for OSSignposter(0);
  v165 = *(_QWORD *)(v172 - 8);
  v31 = __chkstk_darwin(v172);
  v171 = (char *)&v146 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v146 - v34;
  static PeopleLogger.extension.getter(v33);
  v173 = v35;
  v36 = OSSignposter.init(logger:)(v30);
  v37 = Date.init()(v36);
  v38 = Date.timeIntervalSinceReferenceDate.getter(v37);
  v149 = v21;
  v39 = *(uint64_t (**)(char *, uint64_t))(v21 + 8);
  v150 = v20;
  v40 = v39(v23, v20);
  v162 = a2;
  TimelineProviderContext.family.getter(v40);
  v41 = (uint64_t)sub_100005C00();
  v42 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if ((unint64_t)v41 >> 62)
  {
    if (v41 < 0)
      v113 = v41;
    else
      v113 = v41 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v41);
    v43 = _CocoaArrayWrapper.endIndex.getter(v113);
    v42 = swift_bridgeObjectRelease(v41);
    if (v43)
    {
LABEL_3:
      v44 = v164;
      static PeopleLogger.extension.getter(v42);
      v45 = swift_bridgeObjectRetain_n(v41, 2);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, (os_log_type_t)v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(12, -1);
        result = swift_slowAlloc(32, -1);
        *(_QWORD *)&v175[0] = result;
        v170 = v48;
        *(_DWORD *)v48 = 136315138;
        if (v43 < 1)
          goto LABEL_44;
        v154 = result;
        LODWORD(v155) = v47;
        v156 = v46;
        swift_bridgeObjectRetain(v41);
        v50 = 0;
        v51 = (char *)&_swiftEmptyArrayStorage;
        do
        {
          if ((v41 & 0xC000000000000001) != 0)
            v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50, v41);
          else
            v52 = *(id *)(v41 + 8 * v50 + 32);
          v53 = v52;
          v54 = objc_msgSend(v52, "identifier");
          v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          v57 = v56;

          if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
            v51 = sub_10000F15C(0, *((_QWORD *)v51 + 2) + 1, 1, v51);
          v59 = *((_QWORD *)v51 + 2);
          v58 = *((_QWORD *)v51 + 3);
          if (v59 >= v58 >> 1)
            v51 = sub_10000F15C((char *)(v58 > 1), v59 + 1, 1, v51);
          ++v50;
          *((_QWORD *)v51 + 2) = v59 + 1;
          v60 = &v51[16 * v59];
          *((_QWORD *)v60 + 4) = v55;
          *((_QWORD *)v60 + 5) = v57;
        }
        while (v43 != v50);
        swift_bridgeObjectRelease(v41);
        v61 = v170;
        v62 = Array.description.getter(v51, &type metadata for String);
        v64 = v63;
        swift_bridgeObjectRelease(v51);
        v176 = sub_10001CBB4(v62, v64, (uint64_t *)v175);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177, v61 + 4, v61 + 12);
        swift_bridgeObjectRelease_n(v41, 2);
        swift_bridgeObjectRelease(v64);
        v65 = v156;
        _os_log_impl((void *)&_mh_execute_header, v156, (os_log_type_t)v155, "get timeline for multiple contacts widget with Ids %s", v61, 0xCu);
        v66 = v154;
        swift_arrayDestroy(v154, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v61, -1, -1);

        ((void (*)(char *, uint64_t))v168[1])(v164, v169);
      }
      else
      {

        swift_bridgeObjectRelease_n(v41, 2);
        ((void (*)(char *, uint64_t))v168[1])(v44, v169);
      }
      v67 = type metadata accessor for TaskPriority(0);
      v68 = (uint64_t)v163;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v163, 1, 1, v67);
      v69 = swift_allocObject(&unk_10004DFA8, 32, 7);
      *(_QWORD *)(v69 + 16) = 0;
      *(_QWORD *)(v69 + 24) = 0;
      v70 = sub_100027F10(v68, (uint64_t)&unk_100050A10, v69);
      result = swift_release(v70);
      if (v43 >= 1)
      {
        v71 = v41 & 0xC000000000000001;
        swift_bridgeObjectRetain(v41);
        v72 = 0;
        v73 = (char *)&_swiftEmptyArrayStorage;
        do
        {
          if (v71)
            v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v72, v41);
          else
            v74 = *(id *)(v41 + 8 * v72 + 32);
          v75 = v74;
          v76 = objc_msgSend(v74, "identifier");
          v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
          v79 = v78;

          if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0)
            v73 = sub_10000F15C(0, *((_QWORD *)v73 + 2) + 1, 1, v73);
          v81 = *((_QWORD *)v73 + 2);
          v80 = *((_QWORD *)v73 + 3);
          if (v81 >= v80 >> 1)
            v73 = sub_10000F15C((char *)(v80 > 1), v81 + 1, 1, v73);
          ++v72;
          *((_QWORD *)v73 + 2) = v81 + 1;
          v82 = &v73[16 * v81];
          *((_QWORD *)v82 + 4) = v77;
          *((_QWORD *)v82 + 5) = v79;
        }
        while (v43 != v72);
        swift_bridgeObjectRelease(v41);
        v83 = v174;
        v84 = *((_QWORD *)v174 + 3);
        v85 = *((_QWORD *)v174 + 4);
        sub_10001190C(v174, v84);
        dispatch thunk of ContactFetcherProtocol.provideFeedbackForContactRecommendations(for:)(v73, v84, v85);
        *(_QWORD *)&v175[0] = &_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v41);
        for (i = 0; i != v43; ++i)
        {
          if (v71)
            v87 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v41);
          else
            v87 = *(id *)(v41 + 8 * i + 32);
          v88 = v87;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          v90 = *(_QWORD *)((*(_QWORD *)&v175[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
          v89 = *(_QWORD *)((*(_QWORD *)&v175[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v90 >= v89 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1);
          v91 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v90, v88);
          specialized Array._endMutation()(v91);
        }
        swift_bridgeObjectRelease(v41);
        v92 = *(_QWORD *)&v175[0];
        v93 = sub_10002805C((uint64_t)&_swiftEmptyArrayStorage);
        v94 = (void *)__chkstk_darwin(v93);
        *(&v146 - 2) = v83;
        v164 = (char *)sub_100009BC8(v94, (void (*)(void **, id *))sub_100011930, (uint64_t)(&v146 - 4), v92);
        swift_bridgeObjectRelease(v92);
        sub_100011C0C((uint64_t)(v83 + 80), (uint64_t)&v176);
        v169 = v178;
        v170 = v179;
        v168 = sub_10001190C(&v176, v178);
        sub_100011948((uint64_t)v83, (uint64_t)v175);
        v95 = v160;
        v96 = v159;
        v97 = v161;
        (*(void (**)(char *, uint64_t, uint64_t))(v160 + 16))(v159, v162, v161);
        v98 = v165;
        (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v171, v173, v172);
        v99 = *(unsigned __int8 *)(v95 + 80);
        v100 = (v99 + 176) & ~v99;
        v101 = (v158 + v100 + 7) & 0xFFFFFFFFFFFFFFF8;
        v102 = *(unsigned __int8 *)(v98 + 80);
        v103 = (v102 + v101 + 16) & ~v102;
        v104 = swift_allocObject(&unk_10004DFD0, v103 + v157, v99 | v102 | 7);
        v105 = v175[5];
        *(_OWORD *)(v104 + 88) = v175[4];
        *(_OWORD *)(v104 + 104) = v105;
        v106 = v175[7];
        *(_OWORD *)(v104 + 120) = v175[6];
        *(_OWORD *)(v104 + 136) = v106;
        v107 = v175[1];
        *(_OWORD *)(v104 + 24) = v175[0];
        *(_OWORD *)(v104 + 40) = v107;
        v108 = v175[3];
        *(_OWORD *)(v104 + 56) = v175[2];
        *(_QWORD *)(v104 + 16) = v73;
        *(_OWORD *)(v104 + 72) = v108;
        v109 = v164;
        *(_QWORD *)(v104 + 152) = v41;
        *(_QWORD *)(v104 + 160) = v109;
        *(double *)(v104 + 168) = v38;
        (*(void (**)(uint64_t, char *, uint64_t))(v95 + 32))(v104 + v100, v96, v97);
        v110 = (void (**)(char *))(v104 + v101);
        v111 = v167;
        *v110 = v166;
        v110[1] = v111;
        v112 = v172;
        (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v104 + v103, v171, v172);
        swift_bridgeObjectRetain(v73);
        swift_retain(v111);
        StatusProviderProtocol.fetchStatus(for:completion:)(v73, sub_100011A80, v104, v169, v170);
        swift_bridgeObjectRelease(v73);
        swift_release(v104);
        (*(void (**)(char *, uint64_t))(v98 + 8))(v173, v112);
        return sub_10000D160(&v176);
      }
      __break(1u);
LABEL_44:
      __break(1u);
      return result;
    }
  }
  else
  {
    v43 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v43)
      goto LABEL_3;
  }
  v114 = swift_bridgeObjectRelease(v41);
  v115 = static PeopleLogger.extension.getter(v114);
  v116 = Logger.logObject.getter(v115);
  v117 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v116, v117))
  {
    v118 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v118 = 0;
    _os_log_impl((void *)&_mh_execute_header, v116, v117, "Could not get any contacts for Mutiple contacts widget", v118, 2u);
    swift_slowDealloc(v118, -1, -1);
  }

  ((void (*)(char *, uint64_t))v168[1])(v26, v169);
  v119 = sub_100003FC4(&qword_100050A18);
  v120 = (int *)type metadata accessor for MultipleContactsEntry(0);
  v121 = *((_QWORD *)v120 - 1);
  v122 = *(_QWORD *)(v121 + 72);
  v123 = *(unsigned __int8 *)(v121 + 80);
  v124 = (v123 + 32) & ~v123;
  v125 = swift_allocObject(v119, v124 + v122, v123 | 7);
  *(_OWORD *)(v125 + 16) = xmmword_100040770;
  v126 = (char *)(v125 + v124);
  Date.init()(v125);
  v127 = type metadata accessor for TimelineEntryRelevance(0);
  v128 = (uint64_t)v151;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 56))(v151, 1, 1, v127);
  *(_QWORD *)v126 = &_swiftEmptyArrayStorage;
  v129 = (*(uint64_t (**)(char *, char *, uint64_t))(v149 + 32))(&v126[v120[5]], v23, v150);
  v126[v120[6]] = 0;
  UUID.init()(v129);
  v130 = sub_100004F98(v128, (uint64_t)&v126[v120[8]], &qword_100050778);
  v131 = v155;
  static TimelineReloadPolicy.never.getter(v130);
  v132 = sub_100004FDC(qword_1000508E8, type metadata accessor for MultipleContactsEntry, (uint64_t)&unk_100040960);
  v133 = v152;
  Timeline.init(entries:policy:)(v125, v131, v120, v132);
  v166(v133);
  v134 = (*(uint64_t (**)(char *, uint64_t))(v153 + 8))(v133, v154);
  v135 = v156;
  v136 = static OSSignpostID.exclusive.getter(v134);
  v137 = v173;
  v138 = OSSignposter.logHandle.getter(v136);
  v139 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v140 = v147;
    v141 = v146;
    v142 = v148;
    (*(void (**)(char *, os_log_t, uint64_t))(v147 + 16))(v146, v135, v148);
    v143 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v143 = 0;
    v144 = OSSignpostID.rawValue.getter(v143);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v138, v139, v144, "getTimeline", "no contacts", v143, 2u);
    swift_slowDealloc(v143, -1, -1);

    v145 = *(void (**)(os_log_t, uint64_t))(v140 + 8);
    v145(v135, v142);
    (*(void (**)(char *, uint64_t))(v165 + 8))(v137, v172);
    return ((uint64_t (*)(char *, uint64_t))v145)(v141, v142);
  }
  else
  {

    (*(void (**)(os_log_t, uint64_t))(v147 + 8))(v135, v148);
    return (*(uint64_t (**)(char *, uint64_t))(v165 + 8))(v137, v172);
  }
}

uint64_t sub_100007F9C()
{
  return swift_task_switch(sub_100007FB0, 0, 0);
}

uint64_t sub_100007FB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0[2] = static PeopleConstants.multipleContactsWidgetKind.getter();
  v0[3] = v1;
  v2 = type metadata accessor for MainActor(0);
  v0[4] = static MainActor.shared.getter();
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_100008020, v3, v4);
}

uint64_t sub_100008020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  static MetricTemplate.updateTimelineCount(for:)(v2, v1);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100008068(char *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(char *), double a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  int *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  uint64_t v130;
  double v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  os_signpost_type_t v144;
  char *v145;
  uint64_t v146;
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  os_signpost_id_t v150;
  void (*v151)(char *, uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint8_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void (*v188)(char *);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD v201[3];
  char v202[8];
  double v203;
  char v204[8];

  v188 = a8;
  v186 = a7;
  v175 = a6;
  v185 = a5;
  v160 = a4;
  v197 = a3;
  v189 = a11;
  v187 = a10;
  v14 = sub_100003FC4(&qword_100050778);
  __chkstk_darwin(v14);
  v165 = (char *)&v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OSSignpostID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v168 = (char *)&v154 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v154 - v20;
  v184 = type metadata accessor for PeopleAnalytics.WidgetSize(0);
  v183 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v182 = (char *)&v154 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for WidgetFamily(0);
  v179 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v178 = (char *)&v154 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = type metadata accessor for PeopleAnalytics.WidgetType(0);
  v195 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v194 = (char *)&v154 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003FC4(&qword_100050A20);
  v26 = __chkstk_darwin(v25);
  v162 = (uint64_t)&v154 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v163 = (char *)&v154 - v28;
  v29 = sub_100003FC4(&qword_100050A28);
  __chkstk_darwin(v29);
  v164 = (char *)&v154 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for TimelineReloadPolicy(0);
  v174 = *(_QWORD *)(v31 - 8);
  v32 = __chkstk_darwin(v31);
  v176 = (char *)&v154 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v173 = (char *)&v154 - v34;
  v159 = sub_100003FC4(&qword_100050A30);
  v158 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v36 = (char *)&v154 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_100003FC4(&qword_100050A38);
  v166 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v171 = (char *)&v154 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = type metadata accessor for Logger(0);
  v169 = *(_QWORD *)(v191 - 8);
  v38 = __chkstk_darwin(v191);
  v40 = (char *)&v154 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __chkstk_darwin(v38);
  v170 = (char *)&v154 - v42;
  __chkstk_darwin(v41);
  v44 = (char *)&v154 - v43;
  v45 = type metadata accessor for Date(0);
  v198 = *(_QWORD *)(v45 - 8);
  v199 = v45;
  v46 = __chkstk_darwin(v45);
  v161 = (char *)&v154 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v49 = (char *)&v154 - v48;
  v193 = sub_100003FC4(&qword_1000509F8);
  v177 = *(_QWORD *)(v193 - 8);
  v50 = __chkstk_darwin(v193);
  v196 = (char *)&v154 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = v49;
  Date.init()(v50);
  v190 = v16;
  if ((a2 & 1) != 0)
  {
    v203 = *(double *)&a1;
    swift_errorRetain(a1);
    v64 = sub_100003FC4(&qword_100050A40);
    v65 = swift_willThrowTypedImpl(&v203, v64, &protocol self-conformance witness table for Error);
    static PeopleLogger.extension.getter(v65);
    swift_errorRetain(a1);
    v66 = swift_errorRetain(a1);
    v67 = Logger.logObject.getter(v66);
    v68 = (uint64_t)a1;
    v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v67, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      *(double *)&v71 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
      v167 = v21;
      v72 = v71;
      v203 = *(double *)&v71;
      *(_DWORD *)v70 = 136315138;
      swift_getErrorValue(v68, v202, v201);
      v73 = Error.localizedDescription.getter(v201[1], v201[2]);
      v75 = v74;
      v200 = sub_10001CBB4(v73, v74, (uint64_t *)&v203);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v70 + 4, v70 + 12);
      swift_bridgeObjectRelease(v75);
      sub_100011B2C(v68, 1);
      sub_100011B2C(v68, 1);
      _os_log_impl((void *)&_mh_execute_header, v67, v69, "got failure fetching statuses for contactID's: %s", v70, 0xCu);
      swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
      v76 = v72;
      v21 = v167;
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v70, -1, -1);
    }
    else
    {
      sub_100011B2C(v68, 1);
      sub_100011B2C(v68, 1);
    }

    (*(void (**)(char *, uint64_t))(v169 + 8))(v40, v191);
    v79 = v185;
    v100 = v181;
    v102 = sub_100003FC4(&qword_100050A18);
    v103 = (int *)type metadata accessor for MultipleContactsEntry(0);
    v104 = *((_QWORD *)v103 - 1);
    v105 = *(_QWORD *)(v104 + 72);
    v106 = *(unsigned __int8 *)(v104 + 80);
    v107 = (v106 + 32) & ~v106;
    v108 = swift_allocObject(v102, v107 + v105, v106 | 7);
    *(_OWORD *)(v108 + 16) = xmmword_100040770;
    v109 = (uint64_t *)(v108 + v107);
    v110 = v175;
    swift_bridgeObjectRetain(v175);
    v111 = sub_10001100C(v79, v110);
    v112 = swift_bridgeObjectRelease(v110);
    v113 = (uint64_t)v165;
    static PeopleWidgetConstants.minimumTimelineRelevance.getter(v112);
    v114 = type metadata accessor for TimelineEntryRelevance(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56))(v113, 0, 1, v114);
    *v109 = v111;
    v115 = (*(uint64_t (**)(char *, char *, uint64_t))(v198 + 16))((char *)v109 + v103[5], v192, v199);
    *((_BYTE *)v109 + v103[6]) = 0;
    UUID.init()(v115);
    v116 = sub_100004F98(v113, (uint64_t)v109 + v103[8], &qword_100050778);
    v117 = v176;
    static TimelineReloadPolicy.never.getter(v116);
    v118 = sub_100004FDC(qword_1000508E8, type metadata accessor for MultipleContactsEntry, (uint64_t)&unk_100040960);
    Timeline.init(entries:policy:)(v108, v117, v103, v118);
    sub_100011B2C(v68, 1);
  }
  else
  {
    v156 = v31;
    v167 = v21;
    v165 = a1;
    v52 = swift_bridgeObjectRetain(a1);
    static PeopleLogger.extension.getter(v52);
    v53 = v197;
    v54 = swift_bridgeObjectRetain_n(v197, 2);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter();
    v57 = os_log_type_enabled(v55, v56);
    v157 = v17;
    if (v57)
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      *(double *)&v59 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
      v203 = *(double *)&v59;
      *(_DWORD *)v58 = 136315138;
      v155 = v58 + 4;
      v60 = swift_bridgeObjectRetain(v53);
      v61 = Array.description.getter(v60, &type metadata for String);
      v63 = v62;
      swift_bridgeObjectRelease(v53);
      v200 = sub_10001CBB4(v61, v63, (uint64_t *)&v203);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v155, v58 + 12);
      swift_bridgeObjectRelease_n(v53, 2);
      swift_bridgeObjectRelease(v63);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "got statuses for contactID's: %s", v58, 0xCu);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v53, 2);
    }
    v77 = *(uint64_t (**)(char *, uint64_t))(v169 + 8);
    v78 = v77(v44, v191);
    v79 = v185;
    static PeopleConstants.timelineEntryDuration.getter(v78);
    v80 = swift_allocObject(&unk_10004DFF8, 24, 7);
    *(_QWORD *)(v80 + 16) = v165;
    v81 = __chkstk_darwin(v80);
    *(&v154 - 2) = (uint64_t)sub_100011B5C;
    *(&v154 - 1) = v81;
    __chkstk_darwin(v81);
    *(&v154 - 2) = (uint64_t)sub_100011B64;
    *(&v154 - 1) = v82;
    v83 = sub_100011BC8();
    dispatch thunk of StatusPrioritizer.timeline<A>(from:fromDate:interval:applying:lockScreenCircular:)(v79, v192, v36, sub_100011BA4, &v154 - 4, 0, v83);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v36, v159);
    swift_release(v80);
    v84 = v172;
    v85 = StatusPrioritizer.TimeLine.entries.getter(v172);
    v86 = v175;
    swift_bridgeObjectRetain(v175);
    v87 = (double *)sub_100010D9C(v85, v86);
    swift_bridgeObjectRelease(v85);
    swift_bridgeObjectRelease(v86);
    v88 = (uint64_t)v163;
    StatusPrioritizer.TimeLine.reloadDate.getter(v84);
    v89 = v162;
    sub_100012534(v88, v162, &qword_100050A20);
    v90 = 1;
    v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v198 + 48))(v89, 1, v199);
    v92 = v156;
    v93 = (uint64_t)v164;
    v94 = v161;
    if (v91 != 1)
    {
      v95 = v198;
      v96 = v89;
      v97 = v199;
      (*(void (**)(char *, uint64_t, uint64_t))(v198 + 32))(v161, v96, v199);
      static TimelineReloadPolicy.after(_:)(v94);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v94, v97);
      v90 = 0;
    }
    v98 = v174;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v174 + 56))(v93, v90, 1, v92);
    sub_100004EE0(v88, &qword_100050A20);
    v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v93, 1, v92);
    v100 = v181;
    v101 = v173;
    if (v99 == 1)
    {
      static TimelineReloadPolicy.atEnd.getter();
      sub_100004EE0(v93, &qword_100050A28);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v173, v93, v92);
    }
    v119 = v176;
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v176, v101, v92);
    v120 = type metadata accessor for MultipleContactsEntry(0);
    v121 = sub_100004FDC(qword_1000508E8, type metadata accessor for MultipleContactsEntry, (uint64_t)&unk_100040960);
    v122 = swift_bridgeObjectRetain(v87);
    v123 = Timeline.init(entries:policy:)(v122, v119, v120, v121);
    v124 = Date.init()(v123);
    v125 = Date.timeIntervalSinceReferenceDate.getter(v124);
    v126 = (*(uint64_t (**)(char *, uint64_t))(v198 + 8))(v94, v199);
    static PeopleLogger.extension.getter(v126);
    v127 = swift_bridgeObjectRetain(v87);
    v128 = Logger.logObject.getter(v127);
    v129 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v128, v129))
    {
      v130 = swift_slowAlloc(22, -1);
      *(_DWORD *)v130 = 134349312;
      v131 = v87[2];
      swift_bridgeObjectRelease(v87);
      v203 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v204, v130 + 4, v130 + 12);
      swift_bridgeObjectRelease(v87);
      *(_WORD *)(v130 + 12) = 2048;
      v203 = v125 - a9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v204, v130 + 14, v130 + 22);
      _os_log_impl((void *)&_mh_execute_header, v128, v129, "timeline created with %{public}ld entries elapsed %f", (uint8_t *)v130, 0x16u);
      swift_slowDealloc(v130, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v87, 2);
    }
    v17 = v157;
    v77(v170, v191);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v173, v92);
    (*(void (**)(char *, uint64_t))(v166 + 8))(v171, v172);
    v21 = v167;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v195 + 104))(v194, enum case for PeopleAnalytics.WidgetType.multiple(_:), v100);
  v132 = Timeline.entries.getter(v193);
  v133 = *(_QWORD *)(v132 + 16);
  swift_bridgeObjectRelease(v132);
  if ((unint64_t)v79 >> 62)
  {
    if (v79 < 0)
      v153 = v79;
    else
      v153 = v79 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v79);
    v134 = _CocoaArrayWrapper.endIndex.getter(v153);
    swift_bridgeObjectRelease(v79);
  }
  else
  {
    v134 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v135 = type metadata accessor for PeopleAnalytics(0);
  v136 = v178;
  v137 = TimelineProviderContext.family.getter(v135);
  v138 = v182;
  WidgetFamily.analyticSize.getter(v137);
  (*(void (**)(char *, uint64_t))(v179 + 8))(v136, v180);
  v139 = v194;
  static PeopleAnalytics.logTimelineEntries(_:entries:contacts:widgetSize:)(v194, v133, v134, v138);
  (*(void (**)(char *, uint64_t))(v183 + 8))(v138, v184);
  (*(void (**)(char *, uint64_t))(v195 + 8))(v139, v100);
  v140 = v196;
  v188(v196);
  v141 = swift_bridgeObjectRetain(v197);
  v142 = static OSSignpostID.exclusive.getter(v141);
  v143 = OSSignposter.logHandle.getter(v142);
  v144 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v145 = v168;
    v146 = v190;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v168, v21, v190);
    v147 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v147 = 134217984;
    v148 = v197;
    v203 = *(double *)(v197 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, v204, v147 + 4, v147 + 12);
    v149 = swift_bridgeObjectRelease(v148);
    v150 = OSSignpostID.rawValue.getter(v149);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v143, v144, v150, "getTimeline", "completed %ld contacts", v147, 0xCu);
    swift_slowDealloc(v147, -1, -1);

    v151 = *(void (**)(char *, uint64_t))(v17 + 8);
    v151(v21, v146);
    (*(void (**)(char *, uint64_t))(v198 + 8))(v192, v199);
    (*(void (**)(char *, uint64_t))(v177 + 8))(v140, v193);
    return ((uint64_t (*)(char *, uint64_t))v151)(v145, v146);
  }
  else
  {
    swift_bridgeObjectRelease(v197);

    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v190);
    (*(void (**)(char *, uint64_t))(v198 + 8))(v192, v199);
    return (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v140, v193);
  }
}

void *sub_100009120(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;

  v3 = objc_msgSend(a1, "identifier");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  if (*(_QWORD *)(a2 + 16) && (v7 = sub_100029798(v4, v6), (v8 & 1) != 0))
  {
    v9 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v7);
    swift_bridgeObjectRetain(v9);
  }
  else
  {
    v9 = &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_1000091AC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  id v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53[2];
  _QWORD v54[6];

  v49 = a1;
  v7 = sub_100003FC4(&qword_1000506C8);
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ContactFormatter.Style(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v48 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Person(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 + 16);
  if (v16)
  {
    v42 = v11;
    v43 = v10;
    v44 = a3;
    v45 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    v46 = v9;
    v47 = a4;
    v17 = a2 + 32;
    swift_bridgeObjectRetain(a2);
    v18 = (char *)&_swiftEmptyArrayStorage;
    do
    {
      sub_100011C0C(v17, (uint64_t)v54);
      sub_100011C0C((uint64_t)v54, (uint64_t)v53);
      v19 = sub_100003FC4(&qword_100050A58);
      v20 = sub_100003FC4(&qword_100050A60);
      if ((swift_dynamicCast(&v50, v53, v19, v20, 6) & 1) == 0)
      {
        v52 = 0;
        v50 = 0u;
        v51 = 0u;
      }
      sub_10000D160(v54);
      if (*((_QWORD *)&v51 + 1))
      {
        sub_100004F70(&v50, (uint64_t)v53);
        sub_100004F70(v53, (uint64_t)&v50);
        if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
          v18 = sub_10000F470(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
        v22 = *((_QWORD *)v18 + 2);
        v21 = *((_QWORD *)v18 + 3);
        if (v22 >= v21 >> 1)
          v18 = sub_10000F470((char *)(v21 > 1), v22 + 1, 1, v18);
        *((_QWORD *)v18 + 2) = v22 + 1;
        sub_100004F70(&v50, (uint64_t)&v18[40 * v22 + 32]);
      }
      else
      {
        sub_100004EE0((uint64_t)&v50, &qword_100050A68);
      }
      v17 += 40;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease(a2);
    v9 = v46;
    a3 = v44;
    v15 = v45;
    v10 = v43;
    v11 = v42;
  }
  v23 = v48;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v48, enum case for ContactFormatter.Style.shortName(_:), v10);
  v24 = String.localized.getter(0x656D614E206F4ELL, 0xE700000000000000);
  v26 = v25;
  v54[3] = type metadata accessor for ContactFormatter(0);
  v54[4] = &protocol witness table for ContactFormatter;
  sub_100004F2C(v54);
  ContactFormatter.init(style:fallback:)(v23, v24, v26);
  v27 = v49;
  Person.init(from:statuses:contactFormatter:)();
  v28 = objc_msgSend(v27, "identifier");
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  if (*(_QWORD *)(a3 + 16) && (v32 = sub_100029798(v29, v31), (v33 & 1) != 0))
  {
    v34 = v32;
    v35 = v15;
    v36 = *(_QWORD *)(a3 + 56);
    v37 = type metadata accessor for ContactImage(0);
    v38 = *(_QWORD *)(v37 - 8);
    v39 = v36 + *(_QWORD *)(v38 + 72) * v34;
    v15 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v9, v39, v37);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v9, 0, 1, v37);
  }
  else
  {
    v40 = type metadata accessor for ContactImage(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v9, 1, 1, v40);
  }
  swift_bridgeObjectRelease(v31);
  return PersonInfo.init(person:contactImage:)(v15, v9);
}

uint64_t sub_10000958C(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v32[5];

  v4 = sub_100003FC4(&qword_1000506C8);
  __chkstk_darwin(v4);
  v6 = (char *)&v32[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContactFormatter.Style(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Person(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v32[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for ContactFormatter.Style.shortName(_:), v7);
  v15 = v14;
  v16 = String.localized.getter(0x656D614E206F4ELL, 0xE700000000000000);
  v18 = v17;
  v32[3] = type metadata accessor for ContactFormatter(0);
  v32[4] = &protocol witness table for ContactFormatter;
  sub_100004F2C(v32);
  ContactFormatter.init(style:fallback:)(v10, v16, v18);
  Person.init(from:statuses:contactFormatter:)(v15, &_swiftEmptyArrayStorage, v32);
  v19 = objc_msgSend(v15, "identifier");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  if (*(_QWORD *)(a2 + 16) && (v23 = sub_100029798(v20, v22), (v24 & 1) != 0))
  {
    v25 = v23;
    v26 = *(_QWORD *)(a2 + 56);
    v27 = type metadata accessor for ContactImage(0);
    v28 = *(_QWORD *)(v27 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v6, v26 + *(_QWORD *)(v28 + 72) * v25, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v6, 0, 1, v27);
  }
  else
  {
    v29 = type metadata accessor for ContactImage(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v6, 1, 1, v29);
  }
  swift_bridgeObjectRelease(v22);
  return PersonInfo.init(person:contactImage:)(v13, v6);
}

void *sub_1000097DC@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  void *result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_10003C6F0();
  if (v5)
  {
    v6 = result;
    v7 = v5;
    v8 = a1[3];
    v9 = a1[4];
    sub_10001190C(a1, v8);
    v10 = dispatch thunk of ContactFetcherProtocol.contact(for:includeImages:)(v6, v7, 0, v8, v9);
    result = (void *)swift_bridgeObjectRelease(v7);
  }
  else
  {
    v10 = 0;
  }
  *a2 = v10;
  return result;
}

uint64_t sub_100009878(uint64_t a1, void **a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  double v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v27[1] = a1;
  v5 = sub_100003FC4(&qword_1000506C8);
  __chkstk_darwin(v5);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ContactImage(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a2;
  v13 = a3[3];
  v14 = a3[4];
  v15 = sub_10001190C(a3, v13);
  v16 = static PeopleWidgetConstants.maxContactAvatarSize.getter(v15);
  result = ContactFetcherProtocol.getContactImageData(for:size:locale:)(v12, a3 + 5, v13, v14, v16);
  if (v18 >> 60 != 15)
  {
    v19 = result;
    v20 = v18;
    sub_100011C50(result, v18);
    v21 = ContactImage.init(contactImageData:)(v19, v20);
    v22 = ContactImage.avatar.getter(v21);
    swift_release(v22);
    if (v22)
    {
      v23 = objc_msgSend(v12, "identifier");
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v7, v11, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
      sub_100009A54((uint64_t)v7, v24, v26);
      sub_100011C94(v19, v20);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return sub_100011C94(v19, v20);
    }
  }
  return result;
}

uint64_t sub_100009A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = sub_100003FC4(&qword_1000506C8);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ContactImage(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1, 1, v11) == 1)
  {
    sub_100004EE0(a1, &qword_1000506C8);
    sub_10000F69C(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease(a3);
    return sub_100004EE0((uint64_t)v10, &qword_1000506C8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, a1, v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v19 = *v4;
    *v4 = 0x8000000000000000;
    sub_10000FD30((uint64_t)v14, a2, a3, isUniquelyReferenced_nonNull_native);
    v17 = *v4;
    *v4 = v19;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v17);
  }
}

void *sub_100009BC8(void *a1, void (*a2)(void **, id *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v16;
  void *v17;

  v17 = a1;
  v5 = v4;
  v8 = a1;
  if ((unint64_t)a4 >> 62)
    goto LABEL_13;
  v9 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a4);
  for (; v9; v9 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    for (i = 4; ; ++i)
    {
      v11 = (a4 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a4)
          : *(id *)(a4 + 8 * i);
      v8 = v11;
      v12 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v16 = v11;
      a2(&v17, &v16);
      if (v5)
      {
        v13 = v17;
        swift_bridgeObjectRelease(a4);

        swift_bridgeObjectRelease(v13);
        return v8;
      }

      if (v12 == v9)
      {
        swift_bridgeObjectRelease(a4);
        return v17;
      }
    }
    __break(1u);
LABEL_13:
    if (a4 < 0)
      v14 = a4;
    else
      v14 = a4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a4);
  }
  swift_bridgeObjectRelease(a4);
  return v8;
}

uint64_t sub_100009D00@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for MultipleContactsEntry(0);
  Date.init()(v2);
  v3 = (char *)a1 + *(int *)(v2 + 32);
  v4 = type metadata accessor for TimelineEntryRelevance(0);
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *a1 = &_swiftEmptyArrayStorage;
  *((_BYTE *)a1 + *(int *)(v2 + 24)) = 1;
  return UUID.init()(v5);
}

uint64_t sub_100009D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100009E00;
  return IntentTimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_100009E00()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100009E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001259C;
  return IntentTimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_100009EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_100009EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100012534(v2 + *(int *)(a1 + 32), a2, &qword_100050778);
}

uint64_t sub_100009F1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = v0;
  v47 = type metadata accessor for WidgetFamily(0);
  v49 = *(_QWORD *)(v47 - 8);
  v2 = __chkstk_darwin(v47);
  v45 = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v48 = (uint64_t)v39 - v4;
  v5 = type metadata accessor for MultipleContactsEntryView(0);
  __chkstk_darwin(v5);
  v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ContentSizeCategory(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)v39 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)v39 - v16;
  v18 = v1 + *(int *)(v5 + 28);
  v19 = sub_10001BDD4((uint64_t)v39 - v16);
  LOBYTE(v5) = ContentSizeCategory.isAccessibilityCategory.getter(v19);
  v20 = v17;
  v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v20, v8);
  v46 = v1;
  sub_100004E9C(v1, (uint64_t)v7, type metadata accessor for MultipleContactsEntryView);
  if ((v5 & 1) == 0)
  {
    sub_10000501C((uint64_t)v7, type metadata accessor for MultipleContactsEntryView);
    v25 = v47;
    v22 = v48;
    goto LABEL_7;
  }
  v39[1] = v18;
  v40 = (void (*)(uint64_t, uint64_t))v21;
  v41 = v9;
  v42 = v15;
  v43 = v12;
  v44 = v8;
  v22 = v48;
  sub_10001BDA4(v48);
  v23 = v49;
  v24 = v45;
  v25 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v45, enum case for WidgetFamily.systemMedium(_:), v47);
  v26 = sub_100004FDC(&qword_100050710, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v51, v25, v26);
  dispatch thunk of RawRepresentable.rawValue.getter(&v50, v25, v26);
  v28 = v50;
  v27 = v51;
  v29 = *(void (**)(char *, uint64_t))(v23 + 8);
  v29(v24, v25);
  v29((char *)v22, v25);
  sub_10000501C((uint64_t)v7, type metadata accessor for MultipleContactsEntryView);
  if (v27 != v28)
  {
LABEL_7:
    v37 = sub_10001BDA4(v22);
    v38 = WidgetFamily.chsFamily.getter(v37);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v22, v25);
    return static PeopleWidgetConfiguration.maxContacts(forFamily:)(v38);
  }
  v30 = (uint64_t)v42;
  sub_10001BDD4((uint64_t)v42);
  v32 = (uint64_t)v43;
  v31 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v43, enum case for ContentSizeCategory.accessibilityLarge(_:), v44);
  v33 = sub_100011508(v30, v32);
  v34 = v32;
  v35 = v40;
  v40(v34, v31);
  v35(v30, v31);
  if (v33)
    return 2;
  else
    return 3;
}

uint64_t sub_10000A250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for WidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  type metadata accessor for MultipleContactsEntryView(0);
  sub_10001BDA4((uint64_t)v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for WidgetFamily.systemMedium(_:), v2);
  v9 = sub_100004FDC(&qword_100050710, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v17, v2, v9);
  dispatch thunk of RawRepresentable.rawValue.getter(&v16, v2, v9);
  v11 = v16;
  v10 = v17;
  v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v6, v2);
  v12(v8, v2);
  if (v10 != v11)
    return 1;
  v13 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v14 = 2;
  if (v13 != static PeopleWidgetConfiguration.maxContacts(forFamily:)(2))
    return 1;
  return v14;
}

uint64_t sub_10000A3AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = v0;
  v2 = sub_100003FC4(&qword_1000509E0);
  __chkstk_darwin(v2);
  v39 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PersonEntryType(0);
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WidgetFamily(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v40 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v37 - v11;
  v13 = *v0;
  swift_bridgeObjectRetain(*v0);
  v14 = sub_100009F1C();
  v15 = sub_10000A738(v14, v13);
  v19 = sub_1000111E8(v16, v17, v18);
  swift_unknownObjectRelease(v15);
  v44 = v19;
  LODWORD(v19) = *((unsigned __int8 *)v1 + *(int *)(type metadata accessor for MultipleContactsEntry(0) + 24));
  type metadata accessor for MultipleContactsEntryView(0);
  v20 = sub_10001BDA4((uint64_t)v12);
  v21 = WidgetFamily.chsFamily.getter(v20);
  v22 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v41 = v7;
  v38 = v22;
  v22((uint64_t)v12, v7);
  if ((_DWORD)v19 == 1)
    v23 = static PeopleWidgetConfiguration.maxContacts(forFamily:)(v21);
  else
    v23 = static PeopleWidgetConfiguration.minContacts(forFamily:)(v21);
  v24 = v23;
  v25 = type metadata accessor for PersonInfo(0);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v6, 1, 2, v25);
  v27 = sub_100003FC4(&qword_1000509E8);
  v28 = sub_100005084(&qword_1000509F0, &qword_1000509E8, (uint64_t)&protocol conformance descriptor for [A]);
  v29 = Collection.expanded(toSize:placeholder:)(v24, v6, v27, v28);
  sub_10000501C((uint64_t)v6, type metadata accessor for PersonEntryType);
  swift_bridgeObjectRelease(v44);
  v44 = v29;
  v30 = v40;
  sub_10001BDA4(v40);
  v31 = v41;
  v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88))(v30, v41);
  if (v32 == enum case for WidgetFamily.systemSmall(_:))
    goto LABEL_12;
  v33 = 1;
  if (v32 != enum case for WidgetFamily.systemMedium(_:))
  {
    v33 = 2;
    if (v32 != enum case for WidgetFamily.systemLarge(_:) && v32 != enum case for WidgetFamily.systemExtraLarge(_:))
    {
      v33 = 1;
      if (v32 != enum case for WidgetFamily.accessoryCircular(_:)
        && v32 != enum case for WidgetFamily.accessoryRectangular(_:)
        && v32 != enum case for WidgetFamily.accessoryInline(_:))
      {
        v38(v30, v31);
LABEL_12:
        v33 = 1;
      }
    }
  }
  v34 = (uint64_t)v39;
  v26(v39, 2, 2, v25);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v34, 0, 1, v43);
  v35 = Collection<>.matrix(rowCount:placeholder:)(v33, v34, v27, v28);
  sub_100004EE0(v34, &qword_1000509E0);
  swift_bridgeObjectRelease(v44);
  return v35;
}

uint64_t sub_10000A738(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v3 >= result)
      v4 = result;
    else
      v4 = *(_QWORD *)(a2 + 16);
    if (result)
      v5 = v4;
    else
      v5 = 0;
    if (v3 >= v5)
    {
      type metadata accessor for PersonInfo(0);
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10000A7A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[16];
  uint64_t v44;

  v42 = a1;
  v41 = type metadata accessor for TimeStampModifier(0);
  __chkstk_darwin(v41);
  v3 = (uint64_t *)((char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_100003FC4(&qword_100050688);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContainerBackgroundPlacement(0);
  v35 = *(_QWORD *)(v7 - 8);
  v36 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003FC4(&qword_100050900);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003FC4(&qword_100050908);
  v37 = *(_QWORD *)(v13 - 8);
  v38 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100003FC4(&qword_100050910);
  __chkstk_darwin(v39);
  v17 = (uint64_t *)((char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_100003FC4(&qword_100050918);
  __chkstk_darwin(v18);
  v40 = (uint64_t)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10000AB74((uint64_t)v12);
  v21 = static ContainerBackgroundPlacement.widget.getter(v20);
  v44 = v1;
  v22 = v1;
  v23 = static Alignment.center.getter(v21);
  v25 = v24;
  v26 = sub_10000EC5C();
  View.containerBackground<A>(for:alignment:content:)(v9, v23, v25, sub_10000EC54, v43, v10, &type metadata for Color, v26, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v36);
  sub_100004EE0((uint64_t)v12, &qword_100050900);
  v27 = v22 + *(int *)(type metadata accessor for MultipleContactsEntryView(0) + 40);
  v28 = *(_QWORD *)v27;
  LOBYTE(v22) = *(_BYTE *)(v27 + 8);
  sub_10000D848(*(_QWORD *)v27, v22);
  LOBYTE(v10) = sub_10001C064(v28, v22);
  v29 = sub_10000DA3C(v28, v22);
  if ((v10 & 1) != 0)
  {
    v30 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v6, 1, 1, v30);
  }
  else
  {
    IgnoredWidgetURL.getter(v29);
    v31 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v6, 0, 1, v31);
  }
  v32 = sub_10000B3A0((uint64_t)v6);
  sub_100004EE0((uint64_t)v6, &qword_100050688);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v38);
  *v3 = swift_getKeyPath(&unk_1000407F8);
  sub_100003FC4(&qword_1000506F0);
  swift_storeEnumTagMultiPayload(v3);
  *((_BYTE *)v3 + *(int *)(v41 + 20)) = 0;
  sub_100004E9C((uint64_t)v3, (uint64_t)v17 + *(int *)(v39 + 36), type metadata accessor for TimeStampModifier);
  *v17 = v32;
  sub_10000501C((uint64_t)v3, type metadata accessor for TimeStampModifier);
  v33 = v40;
  sub_100012534((uint64_t)v17, v40, &qword_100050910);
  sub_100004EE0((uint64_t)v17, &qword_100050910);
  return sub_100004F98(v33, v42, &qword_100050918);
}

uint64_t sub_10000AB74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v51;
  uint64_t KeyPath;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  char v63;

  v60 = a1;
  v58 = sub_100003FC4(&qword_100050980);
  __chkstk_darwin(v58);
  v59 = (uint64_t)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MultipleContactsEntryView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003FC4(&qword_100050958);
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100003FC4(&qword_100050948);
  __chkstk_darwin(v54);
  v53 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100003FC4(&qword_100050938);
  v11 = __chkstk_darwin(v57);
  v55 = (uint64_t)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v56 = (uint64_t)&v51 - v14;
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v13);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  v15 = sub_100003FC4(&qword_100050988);
  sub_10000B7D8(v1, (double *)&v9[*(int *)(v15 + 44)], 16.0);
  KeyPath = swift_getKeyPath(&unk_100040A48);
  sub_100004E9C(v1, (uint64_t)v6, type metadata accessor for MultipleContactsEntryView);
  type metadata accessor for MainActor(0);
  v16 = ((uint64_t (*)(void))static MainActor.shared.getter)();
  v17 = *(unsigned __int8 *)(v4 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = v18 + v5;
  v20 = v17 | 7;
  v21 = swift_allocObject(&unk_10004DF08, v19, v17 | 7);
  *(_QWORD *)(v21 + 16) = v16;
  *(_QWORD *)(v21 + 24) = &protocol witness table for MainActor;
  sub_10000EE60((uint64_t)v6, v21 + v18, type metadata accessor for MultipleContactsEntryView);
  v22 = sub_100004E9C(v1, (uint64_t)v6, type metadata accessor for MultipleContactsEntryView);
  v23 = static MainActor.shared.getter(v22);
  v24 = swift_allocObject(&unk_10004DF30, v19, v20);
  *(_QWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 24) = &protocol witness table for MainActor;
  v25 = (uint64_t)v6;
  v26 = (uint64_t)v53;
  sub_10000EE60(v25, v24 + v18, type metadata accessor for MultipleContactsEntryView);
  v27 = sub_100003FC4(&qword_100050770);
  Binding.init(get:set:)(&v61, sub_10000EEA4, v21, sub_10000F11C, v24, v27);
  v51 = v61;
  v28 = v62;
  LOBYTE(v24) = v63;
  sub_100012534((uint64_t)v9, v26, &qword_100050958);
  v29 = v26 + *(int *)(v54 + 36);
  *(_QWORD *)v29 = KeyPath;
  *(_OWORD *)(v29 + 8) = v51;
  *(_QWORD *)(v29 + 24) = v28;
  *(_BYTE *)(v29 + 32) = v24;
  v30 = sub_100004EE0((uint64_t)v9, &qword_100050958);
  v31 = static Edge.Set.leading.getter(v30);
  v32 = static Edge.Set.trailing.getter();
  v33 = Edge.Set.init(rawValue:)(0);
  v34 = Edge.Set.init(rawValue:)(v33);
  if (Edge.Set.init(rawValue:)(v34 & v31) != v31)
    v33 = Edge.Set.init(rawValue:)(v33 | v31);
  v35 = Edge.Set.init(rawValue:)(v33);
  if (Edge.Set.init(rawValue:)(v35 & v32) != v32)
    LOBYTE(v33) = Edge.Set.init(rawValue:)(v33 | v32);
  v36 = EdgeInsets.init(_all:)(16.0);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v43 = v55;
  sub_100012534(v26, v55, &qword_100050948);
  v44 = v57;
  v45 = v43 + *(int *)(v57 + 36);
  *(_BYTE *)v45 = v33;
  *(double *)(v45 + 8) = v36;
  *(_QWORD *)(v45 + 16) = v38;
  *(_QWORD *)(v45 + 24) = v40;
  *(_QWORD *)(v45 + 32) = v42;
  *(_BYTE *)(v45 + 40) = 0;
  sub_100004EE0(v26, &qword_100050948);
  v46 = v56;
  sub_100004F98(v43, v56, &qword_100050938);
  v47 = v59;
  sub_100012534(v46, v59, &qword_100050938);
  swift_storeEnumTagMultiPayload(v47);
  v48 = sub_10000ECC8();
  v49 = sub_10000ED0C();
  _ConditionalContent<>.init(storage:)(v47, &type metadata for NoContactsView, v44, v48, v49);
  return sub_100004EE0(v46, &qword_100050938);
}

uint64_t sub_10000AFDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for WidgetRenderingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  type metadata accessor for MultipleContactsEntryView(0);
  v9 = sub_10001C038((uint64_t)v8);
  if ((static PeopleConstants.isMac.getter(v9) & 1) != 0)
  {
    v10 = Color.init(_:bundle:)(0x33443344334423, 0xE700000000000000, 0);
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  else
  {
    static WidgetRenderingMode.vibrant.getter();
    v12 = static WidgetRenderingMode.== infix(_:_:)(v8, v6);
    v13 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    v14 = v13(v6, v2);
    if ((v12 & 1) != 0)
      v15 = static Color.black.getter(v14);
    else
      v15 = static Color.clear.getter(v14);
    v10 = v15;
    result = v13(v8, v2);
  }
  *a1 = v10;
  return result;
}

uint64_t sub_10000B0F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v2 = sub_100003FC4(&qword_100050698);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100003FC4(&qword_100050B38);
  __chkstk_darwin(v23);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003FC4(&qword_100050688);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v23 - v15;
  sub_100012534(a1, (uint64_t)v9, &qword_100050688);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100004EE0((uint64_t)v9, &qword_100050688);
    sub_100012534(v24, (uint64_t)v4, &qword_100050698);
    v17 = sub_100005084(&qword_100050B40, &qword_100050698, (uint64_t)&protocol conformance descriptor for VStack<A>);
    return AnyView.init<A>(_:)(v4, v2, v17);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
    v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    __chkstk_darwin(v19);
    *(&v23 - 2) = v24;
    v20 = sub_100005084(&qword_100050B40, &qword_100050698, (uint64_t)&protocol conformance descriptor for VStack<A>);
    Link.init(destination:label:)(v14, sub_100012578, &v23 - 4, v2, v20);
    v21 = sub_100005084(&qword_100050B48, &qword_100050B38, (uint64_t)&protocol conformance descriptor for Link<A>);
    v18 = AnyView.init<A>(_:)(v6, v23, v21);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
  return v18;
}

uint64_t sub_10000B3A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  void *v36;

  v32 = sub_100003FC4(&qword_100050908);
  v2 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100003FC4(&qword_100050970);
  __chkstk_darwin(v30);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003FC4(&qword_100050688);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v29 - v15;
  sub_100012534(a1, (uint64_t)v9, &qword_100050688);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100004EE0((uint64_t)v9, &qword_100050688);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    v18 = v32;
    v17(v4, v31, v32);
    v19 = sub_100004004(&qword_100050900);
    v20 = sub_10000EC5C();
    v33 = v19;
    v34 = &type metadata for Color;
    v35 = v20;
    v36 = &protocol witness table for Color;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    return AnyView.init<A>(_:)(v4, v18, OpaqueTypeConformance2);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
    v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    __chkstk_darwin(v23);
    *(&v29 - 2) = v31;
    v24 = sub_100004004(&qword_100050900);
    v25 = sub_10000EC5C();
    v33 = v24;
    v34 = &type metadata for Color;
    v35 = v25;
    v36 = &protocol witness table for Color;
    v26 = swift_getOpaqueTypeConformance2(&v33, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    Link.init(destination:label:)(v14, sub_10000EE14, &v29 - 4, v32, v26);
    v27 = sub_100005084(&qword_100050978, &qword_100050970, (uint64_t)&protocol conformance descriptor for Link<A>);
    v22 = AnyView.init<A>(_:)(v6, v30, v27);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
  return v22;
}

_QWORD *sub_10000B690@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  char v4;
  uint64_t v5;
  char v6;

  type metadata accessor for MultipleContactsEntryView(0);
  v2 = sub_100003FC4(&qword_100050990);
  result = State.wrappedValue.getter(&v5, v2);
  v4 = v6;
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_10000B710(uint64_t result)
{
  double v1;
  uint64_t v2;
  double v3;
  double v4;
  char v5;

  if ((*(_BYTE *)(result + 8) & 1) == 0)
  {
    v1 = *(double *)result;
    type metadata accessor for MultipleContactsEntryView(0);
    v2 = sub_100003FC4(&qword_100050990);
    State.wrappedValue.getter(&v4, v2);
    v3 = v4;
    if (v5)
      v3 = v1;
    if (v1 < v3)
      v3 = v1;
    v4 = v3;
    v5 = 0;
    return State.wrappedValue.setter(&v4, v2);
  }
  return result;
}

uint64_t sub_10000B7D8@<X0>(uint64_t a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  double *v29;
  double *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  double *v34;
  uint64_t v35;

  v34 = a2;
  v5 = type metadata accessor for MultipleContactsEntryView(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003FC4(&qword_100050998);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v34 - v14;
  v16 = sub_10000A3AC();
  v17 = sub_10001045C(v16);
  swift_bridgeObjectRelease(v16);
  v35 = v17;
  KeyPath = swift_getKeyPath(&unk_100040A70);
  sub_100004E9C(a1, (uint64_t)v8, type metadata accessor for MultipleContactsEntryView);
  v19 = *(unsigned __int8 *)(v6 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = (v7 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_10004DF58, v21 + 8, v19 | 7);
  sub_10000EE60((uint64_t)v8, v22 + v20, type metadata accessor for MultipleContactsEntryView);
  *(double *)(v22 + v21) = a3;
  v23 = swift_allocObject(&unk_10004DF80, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_100010820;
  *(_QWORD *)(v23 + 24) = v22;
  v24 = sub_100003FC4(&qword_1000509A0);
  v25 = sub_100003FC4(&qword_1000509A8);
  v26 = sub_100005084(&qword_1000509B0, &qword_1000509A0, (uint64_t)&protocol conformance descriptor for [A]);
  v27 = sub_100005084(&qword_1000509B8, &qword_1000509A8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  ForEach<>.init(_:id:content:)(&v35, KeyPath, sub_1000108AC, v23, v24, v25, v26, &protocol witness table for Int, v27);
  v28 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v28(v13, v15, v9);
  v29 = v34;
  *v34 = a3;
  *((_BYTE *)v29 + 8) = 0;
  v30 = v29;
  v31 = sub_100003FC4(&qword_1000509C0);
  v28((char *)v30 + *(int *)(v31 + 48), v13, v9);
  v32 = *(void (**)(char *, uint64_t))(v10 + 8);
  v32(v15, v9);
  return ((uint64_t (*)(char *, uint64_t))v32)(v13, v9);
}

uint64_t sub_10000BA5C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v35 = a1;
  v39 = a3;
  v37 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v36 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for MultipleContactsRowView(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100003FC4(&qword_1000509C8);
  v12 = __chkstk_darwin(v38);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v33 - v15;
  swift_bridgeObjectRetain(a1);
  v34 = sub_10000A250();
  v17 = (uint64_t *)(a2 + *(int *)(type metadata accessor for MultipleContactsEntryView(0) + 32));
  v18 = *v17;
  v19 = *((_BYTE *)v17 + 8);
  v20 = v17[2];
  v40 = v18;
  v41 = v19;
  v42 = v20;
  v21 = sub_100003FC4(&qword_100050990);
  State.wrappedValue.getter(&v43, v21);
  v33 = v43;
  v22 = v44;
  v23 = type metadata accessor for MultipleContactsEntry(0);
  v24 = v36;
  v25 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v36, a2 + *(int *)(v23 + 28), v37);
  *(_QWORD *)v11 = swift_getKeyPath(&unk_100040828);
  sub_100003FC4(&qword_100050590);
  swift_storeEnumTagMultiPayload(v11);
  v26 = &v11[v9[5]];
  v27 = enum case for Font.TextStyle.caption2(_:);
  v28 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v26, v27, v28);
  *(_QWORD *)&v11[v9[6]] = v35;
  *(_QWORD *)&v11[v9[7]] = v34;
  v29 = &v11[v9[8]];
  *(_QWORD *)v29 = v33;
  v29[8] = v22;
  *(_QWORD *)&v11[v9[9]] = 2;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v9[10]], v24, v25);
  sub_100004E9C((uint64_t)v11, (uint64_t)v14, type metadata accessor for MultipleContactsRowView);
  *(_QWORD *)&v14[*(int *)(v38 + 36)] = 0x3FF0000000000000;
  sub_10000501C((uint64_t)v11, type metadata accessor for MultipleContactsRowView);
  sub_100004F98((uint64_t)v14, (uint64_t)v16, &qword_1000509C8);
  sub_100012534((uint64_t)v16, (uint64_t)v14, &qword_1000509C8);
  v30 = v39;
  sub_100012534((uint64_t)v14, v39, &qword_1000509C8);
  v31 = v30 + *(int *)(sub_100003FC4(&qword_1000509D0) + 48);
  *(double *)v31 = a4;
  *(_BYTE *)(v31 + 8) = 0;
  sub_100004EE0((uint64_t)v16, &qword_1000509C8);
  return sub_100004EE0((uint64_t)v14, &qword_1000509C8);
}

uint64_t sub_10000BD60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t);
  uint64_t result;

  v0 = sub_100003FC4(&qword_100050728);
  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + 3 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_100040780;
  v7 = v6 + v5;
  v8 = *(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104);
  v8(v7, enum case for WidgetFamily.systemMedium(_:), v1);
  v8(v7 + v3, enum case for WidgetFamily.systemLarge(_:), v1);
  result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v8)(v7 + 2 * v3, enum case for WidgetFamily.systemExtraLarge(_:), v1);
  qword_100053460 = v6;
  return result;
}

ValueMetadata *type metadata accessor for MultipleContactsWidgetConfiguration()
{
  return &type metadata for MultipleContactsWidgetConfiguration;
}

uint64_t sub_10000BE48(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100042188, 1);
}

uint64_t sub_10000BE58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  void *v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  __int128 v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71[8];
  uint64_t v72;

  v54 = a1;
  v56 = type metadata accessor for WidgetBackgroundStyle(0);
  v55 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v53 = (char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100003FC4(&qword_100050730);
  v46 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003FC4(&qword_100050738);
  v47 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100003FC4(&qword_100050740);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100003FC4(&qword_100050748);
  v51 = *(_QWORD *)(v52 - 8);
  v10 = __chkstk_darwin(v52);
  v49 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static PeopleConstants.multipleContactsWidgetKind.getter(v10);
  v14 = v13;
  v15 = type metadata accessor for ContactFetcher(0);
  v16 = ContactFetcher.__allocating_init()();
  v64 = v15;
  v65 = &protocol witness table for ContactFetcher;
  *(_QWORD *)&v63 = v16;
  v61 = type metadata accessor for Locale(0);
  v62 = &protocol witness table for Locale;
  sub_100004F2C(&v60);
  static Locale.current.getter();
  type metadata accessor for PeopleDemoOverride(0);
  if ((static PeopleDemoOverride.isContactsOverrideEnabled()() & 1) != 0)
  {
    v17 = type metadata accessor for DemoStatusProvider(0);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    v18 = DemoStatusProvider.init()();
    v19 = &protocol witness table for DemoStatusProvider;
  }
  else
  {
    v17 = type metadata accessor for StatusProvider(0);
    v18 = static StatusProvider.shared.getter();
    v19 = &protocol witness table for StatusProvider;
  }
  v59 = v19;
  v58 = v17;
  *(_QWORD *)&v57 = v18;
  v20 = type metadata accessor for SelectPeopleIntent(0);
  v21 = type metadata accessor for StatusPrioritizer(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = StatusPrioritizer.init()();
  sub_100004F70(&v63, (uint64_t)&v66);
  sub_100004F70(&v60, (uint64_t)&v70);
  sub_100004F70(&v57, (uint64_t)v71);
  v72 = v22;
  v23 = type metadata accessor for MultipleContactsEntryView(0);
  v24 = sub_100004FDC(&qword_100050750, type metadata accessor for MultipleContactsEntryView, (uint64_t)&unk_1000409F8);
  v25 = sub_10000C600();
  IntentConfiguration.init<A>(kind:intent:provider:content:)(v12, v14, v20, &v66, sub_10000C3E4, 0, v20, v23, &type metadata for MultipleContactsProvider, v24, v25);
  v26 = String.localized.getter(0x73746361746E6F43, 0xE800000000000000);
  v28 = v27;
  v66 = v26;
  v67 = v27;
  v29 = sub_100005084(&qword_100050760, &qword_100050730, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  v30 = sub_10000C644();
  WidgetConfiguration.configurationDisplayName<A>(_:)(&v66, v2, &type metadata for String, v29, v30);
  swift_bridgeObjectRelease(v28);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v4, v2);
  v31 = String.localized.getter(0xD000000000000011, 0x8000000100049850);
  v33 = v32;
  *(_QWORD *)&v63 = v31;
  *((_QWORD *)&v63 + 1) = v32;
  v66 = v2;
  v67 = &type metadata for String;
  v68 = v29;
  v69 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v66, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  WidgetConfiguration.description<A>(_:)(&v63, v5, &type metadata for String, OpaqueTypeConformance2, v30);
  swift_bridgeObjectRelease(v33);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v7, v5);
  if (qword_100050540 != -1)
    swift_once(&qword_100050540, sub_10000BD60);
  v35 = qword_100053460;
  v66 = v5;
  v67 = &type metadata for String;
  v68 = OpaqueTypeConformance2;
  v69 = v30;
  v36 = swift_getOpaqueTypeConformance2(&v66, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v37 = v49;
  v38 = v50;
  WidgetConfiguration.supportedFamilies(_:)(v35, v50, v36);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v38);
  v39 = v55;
  v40 = v53;
  v41 = v56;
  (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v53, enum case for WidgetBackgroundStyle.blur(_:), v56);
  v66 = v38;
  v67 = (void *)v36;
  v42 = swift_getOpaqueTypeConformance2(&v66, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v43 = v52;
  WidgetConfiguration.preferredBackgroundStyle(_:)(v40, v52, v42);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v37, v43);
}

uint64_t sub_10000C3E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v4 = sub_100003FC4(&qword_1000506B0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for MultipleContactsEntry(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004E9C(a1, (uint64_t)v9, type metadata accessor for MultipleContactsEntry);
  *v6 = swift_getKeyPath(&unk_1000407F8);
  sub_100003FC4(&qword_1000506F0);
  swift_storeEnumTagMultiPayload(v6);
  sub_10000EE60((uint64_t)v9, a2, type metadata accessor for MultipleContactsEntry);
  v10 = (int *)type metadata accessor for MultipleContactsEntryView(0);
  v11 = v10[5];
  type metadata accessor for ContactFetcher(0);
  *(_QWORD *)(a2 + v11) = ContactFetcher.__allocating_init()();
  v12 = (_QWORD *)(a2 + v10[6]);
  *v12 = swift_getKeyPath(&unk_100040828);
  sub_100003FC4(&qword_100050590);
  swift_storeEnumTagMultiPayload(v12);
  v13 = (_QWORD *)(a2 + v10[7]);
  *v13 = swift_getKeyPath(&unk_100040858);
  sub_100003FC4(&qword_1000506F8);
  swift_storeEnumTagMultiPayload(v13);
  v14 = a2 + v10[8];
  v21 = 0;
  v22 = 1;
  v15 = sub_100003FC4(&qword_100050770);
  State.init(wrappedValue:)(&v23, &v21, v15);
  v16 = v24;
  v17 = v25;
  *(_QWORD *)v14 = v23;
  *(_BYTE *)(v14 + 8) = v16;
  *(_QWORD *)(v14 + 16) = v17;
  sub_100004F98((uint64_t)v6, a2 + v10[9], &qword_1000506B0);
  v18 = a2 + v10[10];
  result = swift_getKeyPath(&unk_100040888);
  *(_QWORD *)v18 = result;
  *(_BYTE *)(v18 + 8) = 0;
  return result;
}

uint64_t type metadata accessor for MultipleContactsEntryView(uint64_t a1)
{
  return sub_1000108EC(a1, (uint64_t *)&unk_100050888, (uint64_t)&nominal type descriptor for MultipleContactsEntryView);
}

unint64_t sub_10000C600()
{
  unint64_t result;

  result = qword_100050758;
  if (!qword_100050758)
  {
    result = swift_getWitnessTable(&unk_100040990, &type metadata for MultipleContactsProvider);
    atomic_store(result, (unint64_t *)&qword_100050758);
  }
  return result;
}

unint64_t sub_10000C644()
{
  unint64_t result;

  result = qword_100050768;
  if (!qword_100050768)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100050768);
  }
  return result;
}

uint64_t type metadata accessor for MultipleContactsEntry(uint64_t a1)
{
  return sub_1000108EC(a1, (uint64_t *)&unk_1000507D8, (uint64_t)&nominal type descriptor for MultipleContactsEntry);
}

uint64_t sub_10000C69C()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_10000C6C4()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_10000C6EC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10000C718(unsigned __int8 *a1)
{
  return EnvironmentValues.accessibilityEnabled.setter(*a1);
}

_QWORD *sub_10000C73C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    v13 = a3[7];
    *((_BYTE *)v7 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[8];
    v18 = (char *)v7 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for TimelineEntryRelevance(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = sub_100003FC4(&qword_100050778);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  return v7;
}

uint64_t sub_10000C89C(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + a2[5];
  v5 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + a2[7];
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (char *)a1 + a2[8];
  v9 = type metadata accessor for TimelineEntryRelevance(0);
  v10 = *(_QWORD *)(v9 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  return result;
}

_QWORD *sub_10000C960(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[8];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for TimelineEntryRelevance(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_100003FC4(&qword_100050778);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

_QWORD *sub_10000CA98(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[8];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for TimelineEntryRelevance(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v14) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v14)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v23 = sub_100003FC4(&qword_100050778);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

_QWORD *sub_10000CC1C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[8];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for TimelineEntryRelevance(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_100003FC4(&qword_100050778);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

_QWORD *sub_10000CD40(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  uint64_t v22;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[8];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for TimelineEntryRelevance(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v13) = v20(v16, 1, v18);
  v21 = v20(v17, 1, v18);
  if (!(_DWORD)v13)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = sub_100003FC4(&qword_100050778);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t sub_10000CEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000CEC4);
}

uint64_t sub_10000CEC4(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = type metadata accessor for UUID(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v10 = sub_100003FC4(&qword_100050778);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[8];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_10000CF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000CF98);
}

char *sub_10000CF98(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = type metadata accessor for UUID(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v10 = sub_100003FC4(&qword_100050778);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_10000D05C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v8[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v8[2] = &unk_1000408D8;
    v4 = type metadata accessor for UUID(319);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_10000EAB0(319, (unint64_t *)&unk_1000507E8, (uint64_t (*)(uint64_t))&type metadata accessor for TimelineEntryRelevance, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

uint64_t destroy for MultipleContactsProvider(_QWORD *a1)
{
  sub_10000D160(a1);
  sub_10000D160(a1 + 5);
  sub_10000D160(a1 + 10);
  return swift_release(a1[15]);
}

uint64_t sub_10000D160(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t initializeWithCopy for MultipleContactsProvider(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v7;
  swift_retain(v7);
  return a1;
}

_QWORD *assignWithCopy for MultipleContactsProvider(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10000D260(a1, a2);
  sub_10000D260(a1 + 5, a2 + 5);
  sub_10000D260(a1 + 10, a2 + 10);
  v4 = a2[15];
  v5 = a1[15];
  a1[15] = v4;
  swift_retain(v4);
  swift_release(v5);
  return a1;
}

_QWORD *sub_10000D260(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for MultipleContactsProvider(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for MultipleContactsProvider(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  sub_10000D160((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_10000D160((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_10000D160((_QWORD *)(a1 + 80));
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_QWORD *)(a2 + 120);
  v7 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v6;
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultipleContactsProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MultipleContactsProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MultipleContactsProvider()
{
  return &type metadata for MultipleContactsProvider;
}

_QWORD *sub_10000D51C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char v52;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = (int *)type metadata accessor for MultipleContactsEntry(0);
    v9 = v8[5];
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v13(v10, v11, v12);
    *((_BYTE *)v7 + v8[6]) = *((_BYTE *)a2 + v8[6]);
    v14 = v8[7];
    v15 = (char *)v7 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = v8[8];
    v19 = (char *)v7 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for TimelineEntryRelevance(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_100003FC4(&qword_100050778);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v24 = a3[5];
    v25 = a3[6];
    v26 = *(_QWORD *)((char *)a2 + v24);
    *(_QWORD *)((char *)v7 + v24) = v26;
    v27 = (_QWORD *)((char *)v7 + v25);
    v28 = (_QWORD *)((char *)a2 + v25);
    swift_retain(v26);
    v29 = sub_100003FC4(&qword_100050590);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
    }
    else
    {
      v31 = *v28;
      *v27 = *v28;
      swift_retain(v31);
    }
    swift_storeEnumTagMultiPayload(v27);
    v32 = a3[7];
    v33 = (_QWORD *)((char *)v7 + v32);
    v34 = (_QWORD *)((char *)a2 + v32);
    v35 = sub_100003FC4(&qword_1000506F8);
    if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
    {
      v36 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v33, v34, v36);
    }
    else
    {
      v37 = *v34;
      *v33 = *v34;
      swift_retain(v37);
    }
    swift_storeEnumTagMultiPayload(v33);
    v38 = a3[8];
    v39 = a3[9];
    v40 = (char *)v7 + v38;
    v41 = (char *)a2 + v38;
    *(_QWORD *)v40 = *(_QWORD *)v41;
    v40[8] = v41[8];
    v42 = *((_QWORD *)v41 + 2);
    *((_QWORD *)v40 + 2) = v42;
    v43 = (_QWORD *)((char *)v7 + v39);
    v44 = (_QWORD *)((char *)a2 + v39);
    swift_retain(v42);
    v45 = sub_100003FC4(&qword_1000506F0);
    if (swift_getEnumCaseMultiPayload(v44, v45) == 1)
    {
      v46 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v43, v44, v46);
    }
    else
    {
      v47 = *v44;
      *v43 = *v44;
      swift_retain(v47);
    }
    swift_storeEnumTagMultiPayload(v43);
    v48 = a3[10];
    v49 = (char *)v7 + v48;
    v50 = (char *)a2 + v48;
    v51 = *(_QWORD *)v50;
    v52 = v50[8];
    sub_10000D848(*(_QWORD *)v50, v52);
    *(_QWORD *)v49 = v51;
    v49[8] = v52;
  }
  return v7;
}

uint64_t sub_10000D848(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_10000D854(_QWORD *a1, int *a2)
{
  int *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRelease(*a1);
  v4 = (int *)type metadata accessor for MultipleContactsEntry(0);
  v5 = (char *)a1 + v4[5];
  v6 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)a1 + v4[7];
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (char *)a1 + v4[8];
  v10 = type metadata accessor for TimelineEntryRelevance(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  swift_release(*(_QWORD *)((char *)a1 + a2[5]));
  v12 = (_QWORD *)((char *)a1 + a2[6]);
  v13 = sub_100003FC4(&qword_100050590);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  v15 = (_QWORD *)((char *)a1 + a2[7]);
  v16 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[8] + 16));
  v18 = (_QWORD *)((char *)a1 + a2[9]);
  v19 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  return sub_10000DA3C(*(_QWORD *)((char *)a1 + a2[10]), *((_BYTE *)a1 + a2[10] + 8));
}

uint64_t sub_10000DA3C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

_QWORD *sub_10000DA48(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char v51;

  v6 = *a2;
  *a1 = *a2;
  v7 = (int *)type metadata accessor for MultipleContactsEntry(0);
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v12(v9, v10, v11);
  *((_BYTE *)a1 + v7[6]) = *((_BYTE *)a2 + v7[6]);
  v13 = v7[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = v7[8];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for TimelineEntryRelevance(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_100003FC4(&qword_100050778);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v23 = a3[5];
  v24 = a3[6];
  v25 = *(_QWORD *)((char *)a2 + v23);
  *(_QWORD *)((char *)a1 + v23) = v25;
  v26 = (_QWORD *)((char *)a1 + v24);
  v27 = (_QWORD *)((char *)a2 + v24);
  swift_retain(v25);
  v28 = sub_100003FC4(&qword_100050590);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    v29 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
  }
  else
  {
    v30 = *v27;
    *v26 = *v27;
    swift_retain(v30);
  }
  swift_storeEnumTagMultiPayload(v26);
  v31 = a3[7];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  v34 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
  {
    v35 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
  }
  else
  {
    v36 = *v33;
    *v32 = *v33;
    swift_retain(v36);
  }
  swift_storeEnumTagMultiPayload(v32);
  v37 = a3[8];
  v38 = a3[9];
  v39 = (char *)a1 + v37;
  v40 = (char *)a2 + v37;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v39[8] = v40[8];
  v41 = *((_QWORD *)v40 + 2);
  *((_QWORD *)v39 + 2) = v41;
  v42 = (_QWORD *)((char *)a1 + v38);
  v43 = (_QWORD *)((char *)a2 + v38);
  swift_retain(v41);
  v44 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
  {
    v45 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v42, v43, v45);
  }
  else
  {
    v46 = *v43;
    *v42 = *v43;
    swift_retain(v46);
  }
  swift_storeEnumTagMultiPayload(v42);
  v47 = a3[10];
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  v50 = *(_QWORD *)v49;
  v51 = v49[8];
  sub_10000D848(*(_QWORD *)v49, v51);
  *(_QWORD *)v48 = v50;
  v48[8] = v51;
  return a1;
}

_QWORD *sub_10000DD4C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (int *)type metadata accessor for MultipleContactsEntry(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  *((_BYTE *)a1 + v8[6]) = *((_BYTE *)a2 + v8[6]);
  v13 = v8[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = v8[8];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for TimelineEntryRelevance(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
LABEL_6:
    v25 = sub_100003FC4(&qword_100050778);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
LABEL_7:
  v26 = a3[5];
  v27 = *(_QWORD *)((char *)a2 + v26);
  v28 = *(_QWORD *)((char *)a1 + v26);
  *(_QWORD *)((char *)a1 + v26) = v27;
  swift_retain(v27);
  swift_release(v28);
  if (a1 != a2)
  {
    v29 = a3[6];
    v30 = (_QWORD *)((char *)a1 + v29);
    v31 = (_QWORD *)((char *)a2 + v29);
    sub_100004EE0((uint64_t)a1 + v29, &qword_100050590);
    v32 = sub_100003FC4(&qword_100050590);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
    }
    else
    {
      v34 = *v31;
      *v30 = *v31;
      swift_retain(v34);
    }
    swift_storeEnumTagMultiPayload(v30);
    v35 = a3[7];
    v36 = (_QWORD *)((char *)a1 + v35);
    v37 = (_QWORD *)((char *)a2 + v35);
    sub_100004EE0((uint64_t)a1 + v35, &qword_1000506F8);
    v38 = sub_100003FC4(&qword_1000506F8);
    if (swift_getEnumCaseMultiPayload(v37, v38) == 1)
    {
      v39 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v36, v37, v39);
    }
    else
    {
      v40 = *v37;
      *v36 = *v37;
      swift_retain(v40);
    }
    swift_storeEnumTagMultiPayload(v36);
  }
  v41 = a3[8];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = *(_QWORD *)v43;
  v42[8] = v43[8];
  *(_QWORD *)v42 = v44;
  v45 = *((_QWORD *)v42 + 2);
  v46 = *((_QWORD *)v43 + 2);
  *((_QWORD *)v42 + 2) = v46;
  swift_retain(v46);
  swift_release(v45);
  if (a1 != a2)
  {
    v47 = a3[9];
    v48 = (_QWORD *)((char *)a1 + v47);
    v49 = (_QWORD *)((char *)a2 + v47);
    sub_100004EE0((uint64_t)a1 + v47, &qword_1000506F0);
    v50 = sub_100003FC4(&qword_1000506F0);
    if (swift_getEnumCaseMultiPayload(v49, v50) == 1)
    {
      v51 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v48, v49, v51);
    }
    else
    {
      v52 = *v49;
      *v48 = *v49;
      swift_retain(v52);
    }
    swift_storeEnumTagMultiPayload(v48);
  }
  v53 = a3[10];
  v54 = (char *)a1 + v53;
  v55 = (char *)a2 + v53;
  v56 = *(_QWORD *)v55;
  v57 = v55[8];
  sub_10000D848(*(_QWORD *)v55, v57);
  v58 = *(_QWORD *)v54;
  v59 = v54[8];
  *(_QWORD *)v54 = v56;
  v54[8] = v57;
  sub_10000DA3C(v58, v59);
  return a1;
}

_QWORD *sub_10000E104(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for MultipleContactsEntry(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *((_BYTE *)a1 + v6[6]) = *((_BYTE *)a2 + v6[6]);
  v11 = v6[7];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = v6[8];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for TimelineEntryRelevance(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_100003FC4(&qword_100050778);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = sub_100003FC4(&qword_100050590);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
    swift_storeEnumTagMultiPayload(v22);
  }
  else
  {
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  v26 = a3[7];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v27, v28, v30);
    swift_storeEnumTagMultiPayload(v27);
  }
  else
  {
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  v31 = a3[8];
  v32 = a3[9];
  v33 = (char *)a1 + v31;
  v34 = (char *)a2 + v31;
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *((_QWORD *)v33 + 2) = *((_QWORD *)v34 + 2);
  v35 = (char *)a1 + v32;
  v36 = (char *)a2 + v32;
  v37 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
  {
    v38 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v35, v36, v38);
    swift_storeEnumTagMultiPayload(v35);
  }
  else
  {
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  v39 = a3[10];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v40[8] = v41[8];
  return a1;
}

_QWORD *sub_10000E3E4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = (int *)type metadata accessor for MultipleContactsEntry(0);
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *((_BYTE *)a1 + v7[6]) = *((_BYTE *)a2 + v7[6]);
  v12 = v7[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = v7[8];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for TimelineEntryRelevance(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    v24 = sub_100003FC4(&qword_100050778);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_7:
  v25 = a3[5];
  v26 = *(_QWORD *)((char *)a1 + v25);
  *(_QWORD *)((char *)a1 + v25) = *(_QWORD *)((char *)a2 + v25);
  swift_release(v26);
  if (a1 != a2)
  {
    v27 = a3[6];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    sub_100004EE0((uint64_t)a1 + v27, &qword_100050590);
    v30 = sub_100003FC4(&qword_100050590);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      v31 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v28, v29, v31);
      swift_storeEnumTagMultiPayload(v28);
    }
    else
    {
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    v32 = a3[7];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    sub_100004EE0((uint64_t)a1 + v32, &qword_1000506F8);
    v35 = sub_100003FC4(&qword_1000506F8);
    if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
    {
      v36 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v33, v34, v36);
      swift_storeEnumTagMultiPayload(v33);
    }
    else
    {
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
  }
  v37 = a3[8];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v38[8] = v39[8];
  v40 = *((_QWORD *)v38 + 2);
  *((_QWORD *)v38 + 2) = *((_QWORD *)v39 + 2);
  swift_release(v40);
  if (a1 != a2)
  {
    v41 = a3[9];
    v42 = (char *)a1 + v41;
    v43 = (char *)a2 + v41;
    sub_100004EE0((uint64_t)a1 + v41, &qword_1000506F0);
    v44 = sub_100003FC4(&qword_1000506F0);
    if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
    {
      v45 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v42, v43, v45);
      swift_storeEnumTagMultiPayload(v42);
    }
    else
    {
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
  }
  v46 = a3[10];
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = *(_QWORD *)v48;
  LOBYTE(v48) = v48[8];
  v50 = *(_QWORD *)v47;
  v51 = v47[8];
  *(_QWORD *)v47 = v49;
  v47[8] = (char)v48;
  sub_10000DA3C(v50, v51);
  return a1;
}

uint64_t sub_10000E784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000E790);
}

uint64_t sub_10000E790(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for MultipleContactsEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = sub_100003FC4(&qword_100050598);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[6];
    }
    else
    {
      v16 = sub_100003FC4(&qword_100050828);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
      {
        v8 = v16;
        v15 = a3[7];
      }
      else
      {
        v8 = sub_100003FC4(&qword_1000506B0);
        v14 = *(_QWORD *)(v8 - 8);
        v15 = a3[9];
      }
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_10000E88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000E898);
}

uint64_t sub_10000E898(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = type metadata accessor for MultipleContactsEntry(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5]) = (a2 - 1);
      return result;
    }
    v13 = sub_100003FC4(&qword_100050598);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v16 = sub_100003FC4(&qword_100050828);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        v10 = sub_100003FC4(&qword_1000506B0);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[9];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10000E990(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[7];

  v2 = type metadata accessor for MultipleContactsEntry(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_10000EAB0(319, (unint64_t *)&qword_100050608, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_10000EAB0(319, (unint64_t *)&qword_100050898, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v10[4] = &unk_100040930;
        sub_10000EAB0(319, (unint64_t *)&qword_1000508A0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
        if (v9 <= 0x3F)
        {
          v10[5] = *(_QWORD *)(v8 - 8) + 64;
          v10[6] = &unk_100040948;
          swift_initStructMetadata(a1, 256, 7, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_10000EAB0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_10000EB08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;

  v0 = sub_100004004(&qword_100050748);
  v1 = sub_100004004(&qword_100050740);
  v2 = sub_100004004(&qword_100050738);
  v3 = sub_100004004(&qword_100050730);
  v4 = sub_100005084(&qword_100050760, &qword_100050730, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  v5 = sub_10000C644();
  v10 = v3;
  v11 = &type metadata for String;
  v12 = v4;
  v13 = v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v10 = v2;
  v11 = &type metadata for String;
  v12 = OpaqueTypeConformance2;
  v13 = v5;
  v7 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v10 = v1;
  v11 = (void *)v7;
  v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v10 = v0;
  v11 = (void *)v8;
  return swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
}

uint64_t sub_10000EC18()
{
  return sub_100004FDC(qword_1000508E8, type metadata accessor for MultipleContactsEntry, (uint64_t)&unk_100040960);
}

uint64_t sub_10000EC44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000421D8, 1);
}

uint64_t sub_10000EC54@<X0>(uint64_t *a1@<X8>)
{
  return sub_10000AFDC(a1);
}

unint64_t sub_10000EC5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100050920;
  if (!qword_100050920)
  {
    v1 = sub_100004004(&qword_100050900);
    sub_10000ECC8();
    sub_10000ED0C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050920);
  }
  return result;
}

unint64_t sub_10000ECC8()
{
  unint64_t result;

  result = qword_100050928;
  if (!qword_100050928)
  {
    result = swift_getWitnessTable(&unk_1000412EC, &type metadata for NoContactsView);
    atomic_store(result, (unint64_t *)&qword_100050928);
  }
  return result;
}

unint64_t sub_10000ED0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100050930;
  if (!qword_100050930)
  {
    v1 = sub_100004004(&qword_100050938);
    sub_10000ED78();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050930);
  }
  return result;
}

unint64_t sub_10000ED78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100050940;
  if (!qword_100050940)
  {
    v1 = sub_100004004(&qword_100050948);
    sub_100005084(&qword_100050950, &qword_100050958, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100005084(&qword_100050960, &qword_100050968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050940);
  }
  return result;
}

uint64_t sub_10000EE14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = sub_100003FC4(&qword_100050908);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10000EE60(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_QWORD *sub_10000EEA4@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for MultipleContactsEntryView(0);
  return sub_10000B690(a1);
}

uint64_t sub_10000EEE8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v1 = (int *)type metadata accessor for MultipleContactsEntryView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4));
  v7 = (int *)type metadata accessor for MultipleContactsEntry(0);
  v8 = v0 + v4 + v7[5];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v0 + v4 + v7[7];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v7[8];
  v13 = type metadata accessor for TimelineEntryRelevance(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  swift_release(*(_QWORD *)(v6 + v1[5]));
  v15 = (_QWORD *)(v6 + v1[6]);
  v16 = sub_100003FC4(&qword_100050590);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  v18 = (_QWORD *)(v6 + v1[7]);
  v19 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  swift_release(*(_QWORD *)(v6 + v1[8] + 16));
  v21 = (_QWORD *)(v6 + v1[9]);
  v22 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
  }
  else
  {
    swift_release(*v21);
  }
  sub_10000DA3C(*(_QWORD *)(v6 + v1[10]), *(_BYTE *)(v6 + v1[10] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10000F11C(uint64_t a1)
{
  type metadata accessor for MultipleContactsEntryView(0);
  return sub_10000B710(a1);
}

char *sub_10000F15C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003FC4(&qword_100050A80);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100010920(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000F268(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100003FC4(&qword_100050A90);
  v11 = *(_QWORD *)(type metadata accessor for PersonInfo(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = *(_QWORD *)(type metadata accessor for PersonInfo(0) - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (unint64_t)v15 + v19;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v15 < a4 || v20 >= a4 + v19 + *(_QWORD *)(v18 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v19);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v19);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100010B1C(0, v8, v20, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

char *sub_10000F470(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003FC4(&qword_100050A70);
      v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[40 * v8 + 32])
          memmove(v13, a4 + 32, 40 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100010A10(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_10000F590(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003FC4(&qword_100050A88);
      v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[32 * v8 + 32])
          memmove(v14, a4 + 32, 32 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100011418(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000F69C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_100029798(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v19 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10000FEFC();
      v12 = v19;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    v13 = *(_QWORD *)(v12 + 56);
    v14 = type metadata accessor for ContactImage(0);
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a3, v13 + *(_QWORD *)(v15 + 72) * v9, v14);
    sub_10000FB34(v9, v12);
    v16 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a3, 0, 1, v14);
  }
  else
  {
    v18 = type metadata accessor for ContactImage(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a3, 1, 1, v18);
  }
}

Swift::Int sub_10000F7CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  Swift::Int result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[9];

  v3 = v2;
  v46 = type metadata accessor for ContactImage(0);
  v6 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100003FC4(&qword_100050A78);
  v44 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v41 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v42 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v42)
      goto LABEL_36;
    v23 = v43[v22];
    ++v17;
    if (!v23)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_36;
      v23 = v43[v17];
      if (!v23)
        break;
    }
LABEL_23:
    v14 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = v8;
    v27 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v6 + 72);
    v31 = v25 + v30 * v21;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v45, v31, v46);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, v31, v46);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v47, *(_QWORD *)(v10 + 40));
    String.hash(into:)(v47, v29, v28);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v29;
    v19[1] = v28;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v30 * v18, v45, v46);
    ++*(_QWORD *)(v10 + 16);
    v8 = v26;
  }
  v24 = v22 + 2;
  if (v24 < v42)
  {
    v23 = v43[v24];
    if (!v23)
    {
      while (1)
      {
        v17 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_43;
        if (v17 >= v42)
          goto LABEL_36;
        v23 = v43[v17];
        ++v24;
        if (v23)
          goto LABEL_23;
      }
    }
    v17 = v24;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v8);
  v3 = v41;
  if ((v44 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v8 + 32);
    if (v39 >= 64)
      bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v43 = -1 << v39;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  result = swift_release(v8);
  *v3 = v10;
  return result;
}

unint64_t sub_10000FB34(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v29, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v29, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v13 < v8)
          goto LABEL_11;
LABEL_12:
        v14 = *(_QWORD *)(a2 + 48);
        v15 = (_OWORD *)(v14 + 16 * v3);
        v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1)
          *v15 = *v16;
        v17 = *(_QWORD *)(a2 + 56);
        v18 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for ContactImage(0) - 8) + 72);
        v19 = v18 * v3;
        result = v17 + v18 * v3;
        v20 = v18 * v6;
        v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v19 == v20)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v13 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v13)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10000FD30(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100029798(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for ContactImage(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10000FEFC();
      goto LABEL_7;
    }
    sub_10000F7CC(v15, a4 & 1);
    v22 = sub_100029798(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10000FE6C(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10000FE6C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for ContactImage(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

void *sub_10000FEFC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for ContactImage(0);
  v1 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003FC4(&qword_100050A78);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    result = (void *)swift_release(v4);
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    result = (void *)swift_release(v4);
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100010158(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v52 = sub_100003FC4(&qword_100050680);
  v2 = *(_QWORD *)(v52 - 8);
  v3 = __chkstk_darwin(v52);
  v50 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v49 = (uint64_t *)((char *)&v43 - v6);
  __chkstk_darwin(v5);
  v8 = (char *)&v43 - v7;
  v9 = *(unsigned __int8 *)(v2 + 80);
  v10 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v11 = &_swiftEmptyArrayStorage;
  v48 = v10;
  v44 = a1;
  if (v10)
  {
    v46 = (v9 + 32) & ~v9;
    v12 = (char *)&_swiftEmptyArrayStorage + v46;
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)(type metadata accessor for PersonEntryType(0) - 8);
    v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v47 = *(_QWORD *)(v15 + 72);
    v45 = v9 | 7;
    v17 = &_swiftEmptyArrayStorage;
    v51 = v2;
    while (1)
    {
      v18 = v52;
      v19 = (uint64_t)&v50[*(int *)(v52 + 48)];
      sub_100004E9C(v16, v19, type metadata accessor for PersonEntryType);
      v20 = *(int *)(v18 + 48);
      v21 = (uint64_t)v49;
      v22 = (uint64_t)v49 + v20;
      *v49 = v13;
      sub_10000EE60(v19, v22, type metadata accessor for PersonEntryType);
      result = sub_100004F98(v21, (uint64_t)v8, &qword_100050680);
      if (v14)
      {
        v11 = v17;
      }
      else
      {
        v24 = v17[3];
        v25 = v51;
        if ((uint64_t)((v24 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_34;
        v26 = v24 & 0xFFFFFFFFFFFFFFFELL;
        if (v26 <= 1)
          v27 = 1;
        else
          v27 = v26;
        v28 = sub_100003FC4(&qword_100050B50);
        v29 = *(_QWORD *)(v25 + 72);
        v30 = v46;
        v11 = (_QWORD *)swift_allocObject(v28, v46 + v29 * v27, v45);
        result = j__malloc_size(v11);
        if (!v29)
          goto LABEL_35;
        v31 = result - v30;
        if (result - v30 == 0x8000000000000000 && v29 == -1)
          goto LABEL_36;
        v33 = v31 / v29;
        v11[2] = v27;
        v11[3] = 2 * (v31 / v29);
        v34 = (char *)v11 + v30;
        v35 = v17[3] >> 1;
        v36 = v35 * v29;
        if (v17[2])
        {
          if (v11 < v17 || v34 >= (char *)v17 + v46 + v36)
          {
            swift_arrayInitWithTakeFrontToBack(v34);
          }
          else if (v11 != v17)
          {
            swift_arrayInitWithTakeBackToFront(v34);
          }
          v17[2] = 0;
        }
        v12 = &v34[v36];
        v14 = (v33 & 0x7FFFFFFFFFFFFFFFLL) - v35;
        result = swift_release(v17);
      }
      v38 = v51;
      v39 = __OFSUB__(v14--, 1);
      if (v39)
        break;
      ++v13;
      sub_100004F98((uint64_t)v8, (uint64_t)v12, &qword_100050680);
      v12 += *(_QWORD *)(v38 + 72);
      v16 += v47;
      v17 = v11;
      if (v48 == v13)
        goto LABEL_29;
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v14 = 0;
LABEL_29:
  result = swift_bridgeObjectRelease(v44);
  v40 = v11[3];
  if (v40 < 2)
    return (uint64_t)v11;
  v41 = v40 >> 1;
  v39 = __OFSUB__(v41, v14);
  v42 = v41 - v14;
  if (!v39)
  {
    v11[2] = v42;
    return (uint64_t)v11;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10001045C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(result + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    v3 = result;
    result = swift_bridgeObjectRetain(result);
    v4 = 0;
    v5 = 0;
    v6 = (_QWORD *)((char *)&_swiftEmptyArrayStorage + 32);
    while (1)
    {
      v7 = v3 + 8 * v5;
      v8 = *(_QWORD *)(v7 + 32);
      if (v4)
      {
        result = swift_bridgeObjectRetain(*(_QWORD *)(v7 + 32));
        v9 = __OFSUB__(v4--, 1);
        if (v9)
          goto LABEL_30;
      }
      else
      {
        v10 = v2[3];
        if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_31;
        v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1)
          v12 = 1;
        else
          v12 = v11;
        v13 = sub_100003FC4(&qword_1000509D8);
        v14 = (_QWORD *)swift_allocObject(v13, 16 * v12 + 32, 7);
        v15 = j__malloc_size(v14);
        v16 = v15 - 32;
        if (v15 < 32)
          v16 = v15 - 17;
        v17 = v16 >> 4;
        v14[2] = v12;
        v14[3] = 2 * (v16 >> 4);
        v18 = v14 + 4;
        v19 = v2[3] >> 1;
        v6 = &v14[2 * v19 + 4];
        v20 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - v19;
        if (v2[2])
        {
          if (v14 != v2 || v18 >= &v2[2 * v19 + 4])
            memmove(v18, v2 + 4, 16 * v19);
          swift_bridgeObjectRetain(v8);
          v2[2] = 0;
        }
        else
        {
          swift_bridgeObjectRetain(v8);
        }
        result = swift_release(v2);
        v2 = v14;
        v9 = __OFSUB__(v20, 1);
        v4 = v20 - 1;
        if (v9)
        {
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
      }
      *v6 = v5;
      v6[1] = v8;
      v6 += 2;
      if (v1 == ++v5)
      {
        result = swift_bridgeObjectRelease(v3);
        goto LABEL_26;
      }
    }
  }
  v4 = 0;
LABEL_26:
  v22 = v2[3];
  if (v22 >= 2)
  {
    v23 = v22 >> 1;
    v9 = __OFSUB__(v23, v4);
    v24 = v23 - v4;
    if (v9)
      goto LABEL_32;
    v2[2] = v24;
  }
  return (uint64_t)v2;
}

uint64_t sub_1000105E8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v1 = (int *)type metadata accessor for MultipleContactsEntryView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4));
  v7 = (int *)type metadata accessor for MultipleContactsEntry(0);
  v8 = v0 + v4 + v7[5];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v0 + v4 + v7[7];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v7[8];
  v13 = type metadata accessor for TimelineEntryRelevance(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  swift_release(*(_QWORD *)(v6 + v1[5]));
  v15 = (_QWORD *)(v6 + v1[6]);
  v16 = sub_100003FC4(&qword_100050590);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  v18 = (_QWORD *)(v6 + v1[7]);
  v19 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  swift_release(*(_QWORD *)(v6 + v1[8] + 16));
  v21 = (_QWORD *)(v6 + v1[9]);
  v22 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
  }
  else
  {
    swift_release(*v21);
  }
  sub_10000DA3C(*(_QWORD *)(v6 + v1[10]), *(_BYTE *)(v6 + v1[10] + 8));
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_100010820@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for MultipleContactsEntryView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_10000BA5C(a1, v2 + v6, a2, *(double *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100010888()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000108AC(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*a1, a1[1]);
}

uint64_t type metadata accessor for PersonEntryType(uint64_t a1)
{
  return sub_1000108EC(a1, (uint64_t *)&unk_100050B08, (uint64_t)&nominal type descriptor for PersonEntryType);
}

uint64_t sub_1000108EC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100010920(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100010A10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_100003FC4(&qword_100050A60);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100010B1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(type metadata accessor for PersonInfo(0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t *sub_100010C34(uint64_t a1, void (*a2)(id, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  unint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v17[2];
  void (*v18)(id, uint64_t);
  uint64_t v19;
  unint64_t *v20;

  v18 = a2;
  v19 = a3;
  v5 = type metadata accessor for PersonInfo(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v9)
  {
    v17[1] = v3;
    v20 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_100024D14(0, v9, 0);
    v10 = v20;
    v11 = (uint64_t *)(a1 + 40);
    do
    {
      v12 = *v11;
      v13 = (id)*(v11 - 1);
      swift_bridgeObjectRetain(v12);
      v18(v13, v12);
      swift_bridgeObjectRelease(v12);

      v20 = v10;
      v15 = v10[2];
      v14 = v10[3];
      if (v15 >= v14 >> 1)
      {
        sub_100024D14(v14 > 1, v15 + 1, 1);
        v10 = v20;
      }
      v10[2] = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v15, v8, v5);
      v11 += 2;
      --v9;
    }
    while (v9);
  }
  return v10;
}

_QWORD *sub_100010D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t **v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  char *v14;
  float v15;
  float v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v26 = a2;
  v3 = type metadata accessor for MultipleContactsEntry(0);
  v25 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (unint64_t **)((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  v7 = &_swiftEmptyArrayStorage;
  if (v6)
  {
    v27 = &_swiftEmptyArrayStorage;
    sub_100024D40(0, v6, 0);
    v8 = sub_100003FC4(&qword_100050A50);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v24 = *(_QWORD *)(v9 + 72);
    do
    {
      v11 = StatusPrioritizer.TimeLineEntryMultipleItems.items.getter(v8);
      v12 = __chkstk_darwin(v11);
      *(&v23 - 2) = v26;
      v13 = sub_100010C34(v12, (void (*)(id, uint64_t))sub_100011C04, (uint64_t)(&v23 - 4));
      swift_bridgeObjectRelease(v11);
      StatusPrioritizer.TimeLineEntryMultipleItems.date.getter(v8);
      v14 = (char *)v5 + *(int *)(v3 + 32);
      v15 = StatusPrioritizer.TimeLineEntryMultipleItems.score.getter(v8);
      v16 = static PeopleWidgetConstants.adjustmentForWidgetSuggester.getter() + v15;
      v17 = StatusPrioritizer.TimeLineEntryMultipleItems.duration.getter(v8);
      TimelineEntryRelevance.init(score:duration:)(v16, v17);
      v18 = type metadata accessor for TimelineEntryRelevance(0);
      v19 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v14, 0, 1, v18);
      *v5 = v13;
      *((_BYTE *)v5 + *(int *)(v3 + 24)) = 0;
      UUID.init()(v19);
      v7 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
      {
        sub_100024D40(0, v7[2] + 1, 1);
        v7 = v27;
      }
      v21 = v7[2];
      v20 = v7[3];
      if (v21 >= v20 >> 1)
      {
        sub_100024D40(v20 > 1, v21 + 1, 1);
        v7 = v27;
      }
      v7[2] = v21 + 1;
      sub_10000EE60((uint64_t)v5, (uint64_t)v7+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(_QWORD *)(v25 + 72) * v21, type metadata accessor for MultipleContactsEntry);
      v10 += v24;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_10001100C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t result;
  uint64_t v11;
  id v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t *v21;

  v3 = v2;
  v19 = a2;
  v18 = type metadata accessor for PersonInfo(0);
  v5 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v9 = (unint64_t *)&_swiftEmptyArrayStorage;
    if (!v8)
      return (uint64_t)v9;
    v21 = (unint64_t *)&_swiftEmptyArrayStorage;
    result = sub_100024D14(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
      break;
    v11 = 0;
    v9 = v21;
    v17 = a1 & 0xC000000000000001;
    while (v8 != v11)
    {
      if (v17)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a1);
      else
        v12 = *(id *)(a1 + 8 * v11 + 32);
      v13 = v12;
      v20 = v12;
      sub_10000958C(&v20, v19);
      if (v3)
      {
        swift_release(v9);

        return (uint64_t)v9;
      }
      v3 = 0;

      v21 = v9;
      v15 = v9[2];
      v14 = v9[3];
      if (v15 >= v14 >> 1)
      {
        sub_100024D14(v14 > 1, v15 + 1, 1);
        v9 = v21;
      }
      ++v11;
      v9[2] = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v15, v7, v18);
      if (v8 == v11)
        return (uint64_t)v9;
    }
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000111E8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t i;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v24 = a1;
  v6 = type metadata accessor for PersonInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PersonEntryType(0);
  v23 = *(_QWORD *)(v10 - 8);
  result = __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a3 >> 1;
  v26 = a2;
  v14 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15 = &_swiftEmptyArrayStorage;
  if (!v14)
    return (uint64_t)v15;
  v27 = &_swiftEmptyArrayStorage;
  result = sub_100024D6C(0, v14 & ~(v14 >> 63), 0);
  if ((v14 & 0x8000000000000000) == 0)
  {
    v21 = v3;
    v22 = v14;
    for (i = 0; ; ++i)
    {
      v17 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if (v26 + i >= v25 || i >= v14)
        goto LABEL_15;
      v18 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v18(v9, v24 + *(_QWORD *)(v7 + 72) * (v26 + i), v6);
      v18(v13, (uint64_t)v9, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 2, v6);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v15 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
      {
        sub_100024D6C(0, v15[2] + 1, 1);
        v15 = v27;
      }
      v20 = v15[2];
      v19 = v15[3];
      if (v20 >= v19 >> 1)
      {
        sub_100024D6C(v19 > 1, v20 + 1, 1);
        v15 = v27;
      }
      v15[2] = v20 + 1;
      result = sub_10000EE60((uint64_t)v13, (uint64_t)v15+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(_QWORD *)(v23 + 72) * v20, type metadata accessor for PersonEntryType);
      v14 = v22;
      if (v17 == v22)
        return (uint64_t)v15;
    }
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_100011418(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

BOOL sub_100011508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v19 - v9, a2, v4);
  v12 = *(uint64_t (**)(char *, uint64_t))(v5 + 88);
  v13 = v12(v10, v4);
  v14 = 0;
  v15 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v13 != enum case for ContentSizeCategory.extraSmall(_:))
  {
    if (v13 == enum case for ContentSizeCategory.small(_:))
    {
      v14 = 1;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.medium(_:))
    {
      v14 = 2;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.large(_:))
      goto LABEL_7;
    if (v13 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      v14 = 4;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      v14 = 5;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      v14 = 6;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      v14 = 7;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      v14 = 8;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      v14 = 9;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      v14 = 10;
    }
    else
    {
      if (v13 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_7:
        v14 = 3;
        goto LABEL_24;
      }
      v14 = 11;
    }
  }
LABEL_24:
  v11(v8, a1, v4);
  v16 = v12(v8, v4);
  if (v16 == v15)
  {
    v17 = 0;
  }
  else if (v16 == enum case for ContentSizeCategory.small(_:))
  {
    v17 = 1;
  }
  else if (v16 == enum case for ContentSizeCategory.medium(_:))
  {
    v17 = 2;
  }
  else
  {
    if (v16 != enum case for ContentSizeCategory.large(_:))
    {
      if (v16 == enum case for ContentSizeCategory.extraLarge(_:))
      {
        v17 = 4;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraLarge(_:))
      {
        v17 = 5;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        v17 = 6;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityMedium(_:))
      {
        v17 = 7;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityLarge(_:))
      {
        v17 = 8;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
      {
        v17 = 9;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
      {
        v17 = 10;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        v17 = 11;
        return v14 < v17;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v17 = 3;
  }
  return v14 < v17;
}

uint64_t sub_100011890()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000118B4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100050A0C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001259C;
  return swift_task_switch(sub_100007FB0, 0, 0);
}

_QWORD *sub_10001190C(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100011930(uint64_t a1, void **a2)
{
  uint64_t v2;

  return sub_100009878(a1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t sub_100011948(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MultipleContactsProvider(a2, a1);
  return a2;
}

uint64_t sub_10001197C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 176) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for OSSignposter(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 16) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 2));
  sub_10000D160((_QWORD *)v0 + 3);
  sub_10000D160((_QWORD *)v0 + 8);
  sub_10000D160((_QWORD *)v0 + 13);
  swift_release(*((_QWORD *)v0 + 18));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 19));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 20));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  swift_release(*(_QWORD *)&v0[v5 + 8]);
  (*(void (**)(char *, uint64_t))(v7 + 8))(&v0[v9], v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100011A80(char *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 176) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OSSignposter(0) - 8) + 80);
  return sub_100008068(a1, v4, *(_QWORD *)(v2 + 16), v2 + 24, *(_QWORD *)(v2 + 152), *(_QWORD *)(v2 + 160), v2 + v6, *(void (**)(char *))(v2 + v7), *(double *)(v2 + 168), *(_QWORD *)(v2 + v7 + 8), v2 + ((v7 + v8 + 16) & ~v8));
}

uint64_t sub_100011B2C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease();
  else
    return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100011B38()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void *sub_100011B5C(void *a1)
{
  uint64_t v1;

  return sub_100009120(a1, *(_QWORD *)(v1 + 16));
}

_QWORD *sub_100011B64()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = (*(uint64_t (**)(void))(v0 + 16))();
  v2 = sub_100006F8C(v1, (void (*)(BOOL, uint64_t, uint64_t))sub_1000265D8);
  swift_bridgeObjectRelease(v1);
  return v2;
}

uint64_t sub_100011BA4(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

unint64_t sub_100011BC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100050A48;
  if (!qword_100050A48)
  {
    v1 = objc_opt_self(CNContact);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100050A48);
  }
  return result;
}

uint64_t sub_100011C04@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1000091AC(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_100011C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100011C50(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100011C94(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100011CA8(result, a2);
  return result;
}

uint64_t sub_100011CA8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void *sub_100011CEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000097DC(*(_QWORD **)(v1 + 16), a1);
}

uint64_t sub_100011D04()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for OSSignposter(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 184) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 3));
  sub_10000D160((_QWORD *)v0 + 4);
  sub_10000D160((_QWORD *)v0 + 9);
  sub_10000D160((_QWORD *)v0 + 14);
  swift_release(*((_QWORD *)v0 + 19));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 20));
  swift_release(*((_QWORD *)v0 + 22));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100011DB0(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;

  v4 = a2 & 1;
  type metadata accessor for OSSignposter(0);
  return sub_100005FF8(a1, v4, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + 32, *(_QWORD *)(v2 + 160), *(void (**)(_QWORD *))(v2 + 168), *(_QWORD *)(v2 + 176));
}

uint64_t *sub_100011E1C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for PersonInfo(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t sub_100011EE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for PersonInfo(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 2, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *sub_100011F4C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for PersonInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_100011FF0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for PersonInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *sub_1000120E0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for PersonInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_100012184(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for PersonInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_100012274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100012280);
}

uint64_t sub_100012280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for PersonInfo(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t sub_1000122CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000122D8);
}

uint64_t sub_1000122D8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = type metadata accessor for PersonInfo(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_10001232C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PersonInfo(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t sub_100012368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PersonInfo(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t sub_1000123A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for PersonInfo(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 2);
    return 0;
  }
  return result;
}

unint64_t sub_100012400()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100050B18;
  if (!qword_100050B18)
  {
    v1 = sub_100004004(&qword_100050918);
    sub_10001246C();
    sub_1000124F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050B18);
  }
  return result;
}

unint64_t sub_10001246C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100050B20;
  if (!qword_100050B20)
  {
    v1 = sub_100004004(&qword_100050910);
    sub_100004FDC(&qword_100050B28, type metadata accessor for TimeStampModifier, (uint64_t)&unk_100040E58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050B20);
  }
  return result;
}

unint64_t sub_1000124F0()
{
  unint64_t result;

  result = qword_100050B30;
  if (!qword_100050B30)
  {
    result = swift_getWitnessTable(&unk_100040DBC, &type metadata for MetricLauncher);
    atomic_store(result, (unint64_t *)&qword_100050B30);
  }
  return result;
}

uint64_t sub_100012534(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003FC4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100012578@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100012534(*(_QWORD *)(v1 + 16), a1, &qword_100050698);
}

uint64_t sub_1000125A0(uint64_t a1, void **a2)
{
  return sub_100011930(a1, a2);
}

_QWORD *sub_1000125B4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for SingleContactTimelineEntry(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for SelectPerson(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = v8[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for PersonInfo(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_100003FC4(&qword_100050690);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    *((_BYTE *)a1 + v8[7]) = *((_BYTE *)a2 + v8[7]);
    v20 = v8[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = v8[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = type metadata accessor for TimelineEntryRelevance(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = sub_100003FC4(&qword_100050778);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    *((_BYTE *)a1 + v8[10]) = *((_BYTE *)a2 + v8[10]);
    v30 = a3[5];
    v31 = a3[6];
    v32 = *(_QWORD *)((char *)a2 + v30);
    *(_QWORD *)((char *)a1 + v30) = v32;
    v33 = (_QWORD *)((char *)a1 + v31);
    v34 = (_QWORD *)((char *)a2 + v31);
    swift_retain(v32);
    v35 = sub_100003FC4(&qword_100050590);
    if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
    {
      v36 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v33, v34, v36);
    }
    else
    {
      v37 = *v34;
      *v33 = *v34;
      swift_retain(v37);
    }
    swift_storeEnumTagMultiPayload(v33);
    v38 = a3[7];
    v39 = (_QWORD *)((char *)a1 + v38);
    v40 = (_QWORD *)((char *)a2 + v38);
    v41 = sub_100003FC4(&qword_1000506F0);
    if (swift_getEnumCaseMultiPayload(v40, v41) == 1)
    {
      v42 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v39, v40, v42);
    }
    else
    {
      v43 = *v40;
      *v39 = *v40;
      swift_retain(v43);
    }
    swift_storeEnumTagMultiPayload(v39);
    v44 = a3[8];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    v47 = *(_QWORD *)v46;
    v48 = *((_QWORD *)v46 + 1);
    v49 = *((_QWORD *)v46 + 2);
    v50 = *((_QWORD *)v46 + 3);
    v51 = v46[32];
    sub_100012910(*(_QWORD *)v46, v48, v49, v50, v51);
    *(_QWORD *)v45 = v47;
    *((_QWORD *)v45 + 1) = v48;
    *((_QWORD *)v45 + 2) = v49;
    *((_QWORD *)v45 + 3) = v50;
    v45[32] = v51;
  }
  return a1;
}

uint64_t type metadata accessor for SingleContactTimelineEntry(uint64_t a1)
{
  return sub_1000108EC(a1, (uint64_t *)&unk_100050C50, (uint64_t)&nominal type descriptor for SingleContactTimelineEntry);
}

uint64_t sub_100012910(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_10001291C(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for SingleContactTimelineEntry(0);
  v6 = a1 + v5[5];
  v7 = type metadata accessor for SelectPerson(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + v5[6];
  v9 = type metadata accessor for PersonInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = a1 + v5[8];
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + v5[9];
  v14 = type metadata accessor for TimelineEntryRelevance(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  swift_release(*(_QWORD *)(a1 + a2[5]));
  v16 = (_QWORD *)(a1 + a2[6]);
  v17 = sub_100003FC4(&qword_100050590);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    swift_release(*v16);
  }
  v19 = (_QWORD *)(a1 + a2[7]);
  v20 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
  }
  else
  {
    swift_release(*v19);
  }
  v22 = a1 + a2[8];
  return sub_100012AFC(*(_QWORD *)v22, *(_QWORD *)(v22 + 8), *(_QWORD *)(v22 + 16), *(_QWORD *)(v22 + 24), *(_BYTE *)(v22 + 32));
}

uint64_t sub_100012AFC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_100012B08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SingleContactTimelineEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for SelectPerson(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = v7[6];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for PersonInfo(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_100003FC4(&qword_100050690);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  v18 = v7[8];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  v22 = v7[9];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v25 = type metadata accessor for TimelineEntryRelevance(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = sub_100003FC4(&qword_100050778);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v23, v24, v25);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  v28 = a3[5];
  v29 = a3[6];
  v30 = *(_QWORD *)(a2 + v28);
  *(_QWORD *)(a1 + v28) = v30;
  v31 = (uint64_t *)(a1 + v29);
  v32 = (uint64_t *)(a2 + v29);
  swift_retain(v30);
  v33 = sub_100003FC4(&qword_100050590);
  if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
  {
    v34 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
  }
  else
  {
    v35 = *v32;
    *v31 = *v32;
    swift_retain(v35);
  }
  swift_storeEnumTagMultiPayload(v31);
  v36 = a3[7];
  v37 = (uint64_t *)(a1 + v36);
  v38 = (uint64_t *)(a2 + v36);
  v39 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
  {
    v40 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v37, v38, v40);
  }
  else
  {
    v41 = *v38;
    *v37 = *v38;
    swift_retain(v41);
  }
  swift_storeEnumTagMultiPayload(v37);
  v42 = a3[8];
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = *(_QWORD *)v44;
  v46 = *(_QWORD *)(v44 + 8);
  v47 = *(_QWORD *)(v44 + 16);
  v48 = *(_QWORD *)(v44 + 24);
  v49 = *(_BYTE *)(v44 + 32);
  sub_100012910(*(_QWORD *)v44, v46, v47, v48, v49);
  *(_QWORD *)v43 = v45;
  *(_QWORD *)(v43 + 8) = v46;
  *(_QWORD *)(v43 + 16) = v47;
  *(_QWORD *)(v43 + 24) = v48;
  *(_BYTE *)(v43 + 32) = v49;
  return a1;
}

uint64_t sub_100012E24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SingleContactTimelineEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for SelectPerson(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = v7[6];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for PersonInfo(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_100003FC4(&qword_100050690);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  v21 = v7[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  v25 = v7[9];
  v26 = (void *)(a1 + v25);
  v27 = (void *)(a2 + v25);
  v28 = type metadata accessor for TimelineEntryRelevance(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v29 + 8))(v26, v28);
LABEL_12:
    v33 = sub_100003FC4(&qword_100050778);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v29 + 24))(v26, v27, v28);
LABEL_13:
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  v34 = a3[5];
  v35 = *(_QWORD *)(a2 + v34);
  v36 = *(_QWORD *)(a1 + v34);
  *(_QWORD *)(a1 + v34) = v35;
  swift_retain(v35);
  swift_release(v36);
  if (a1 != a2)
  {
    v37 = a3[6];
    v38 = (uint64_t *)(a1 + v37);
    v39 = (uint64_t *)(a2 + v37);
    sub_100004EE0(a1 + v37, &qword_100050590);
    v40 = sub_100003FC4(&qword_100050590);
    if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
    {
      v41 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v38, v39, v41);
    }
    else
    {
      v42 = *v39;
      *v38 = *v39;
      swift_retain(v42);
    }
    swift_storeEnumTagMultiPayload(v38);
    v43 = a3[7];
    v44 = (uint64_t *)(a1 + v43);
    v45 = (uint64_t *)(a2 + v43);
    sub_100004EE0(a1 + v43, &qword_1000506F0);
    v46 = sub_100003FC4(&qword_1000506F0);
    if (swift_getEnumCaseMultiPayload(v45, v46) == 1)
    {
      v47 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v44, v45, v47);
    }
    else
    {
      v48 = *v45;
      *v44 = *v45;
      swift_retain(v48);
    }
    swift_storeEnumTagMultiPayload(v44);
  }
  v49 = a3[8];
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = *(_QWORD *)v51;
  v53 = *(_QWORD *)(v51 + 8);
  v54 = *(_QWORD *)(v51 + 16);
  v55 = *(_QWORD *)(v51 + 24);
  v56 = *(_BYTE *)(v51 + 32);
  sub_100012910(*(_QWORD *)v51, v53, v54, v55, v56);
  v57 = *(_QWORD *)v50;
  v58 = *(_QWORD *)(v50 + 8);
  v59 = *(_QWORD *)(v50 + 16);
  v60 = *(_QWORD *)(v50 + 24);
  v61 = *(_BYTE *)(v50 + 32);
  *(_QWORD *)v50 = v52;
  *(_QWORD *)(v50 + 8) = v53;
  *(_QWORD *)(v50 + 16) = v54;
  *(_QWORD *)(v50 + 24) = v55;
  *(_BYTE *)(v50 + 32) = v56;
  sub_100012AFC(v57, v58, v59, v60, v61);
  return a1;
}

uint64_t sub_100013218(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SingleContactTimelineEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for SelectPerson(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = v7[6];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for PersonInfo(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_100003FC4(&qword_100050690);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  v18 = v7[8];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  v22 = v7[9];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v25 = type metadata accessor for TimelineEntryRelevance(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = sub_100003FC4(&qword_100050778);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  v28 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  v31 = sub_100003FC4(&qword_100050590);
  if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
  {
    v32 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
    swift_storeEnumTagMultiPayload(v29);
  }
  else
  {
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  v33 = a3[7];
  v34 = (void *)(a1 + v33);
  v35 = (const void *)(a2 + v33);
  v36 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
  {
    v37 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v34, v35, v37);
    swift_storeEnumTagMultiPayload(v34);
  }
  else
  {
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  v38 = a3[8];
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_OWORD *)(v39 + 16) = v41;
  *(_BYTE *)(v39 + 32) = *(_BYTE *)(v40 + 32);
  return a1;
}

uint64_t sub_100013510(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  __int128 v55;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SingleContactTimelineEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for SelectPerson(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = v7[6];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for PersonInfo(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_100003FC4(&qword_100050690);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  v21 = v7[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
  v25 = v7[9];
  v26 = (void *)(a1 + v25);
  v27 = (void *)(a2 + v25);
  v28 = type metadata accessor for TimelineEntryRelevance(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v29 + 8))(v26, v28);
LABEL_12:
    v33 = sub_100003FC4(&qword_100050778);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v29 + 40))(v26, v27, v28);
LABEL_13:
  *(_BYTE *)(a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
  v34 = a3[5];
  v35 = *(_QWORD *)(a1 + v34);
  *(_QWORD *)(a1 + v34) = *(_QWORD *)(a2 + v34);
  swift_release(v35);
  if (a1 != a2)
  {
    v36 = a3[6];
    v37 = (void *)(a1 + v36);
    v38 = (const void *)(a2 + v36);
    sub_100004EE0(a1 + v36, &qword_100050590);
    v39 = sub_100003FC4(&qword_100050590);
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      v40 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v37, v38, v40);
      swift_storeEnumTagMultiPayload(v37);
    }
    else
    {
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    v41 = a3[7];
    v42 = (void *)(a1 + v41);
    v43 = (const void *)(a2 + v41);
    sub_100004EE0(a1 + v41, &qword_1000506F0);
    v44 = sub_100003FC4(&qword_1000506F0);
    if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
    {
      v45 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v42, v43, v45);
      swift_storeEnumTagMultiPayload(v42);
    }
    else
    {
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
  }
  v46 = a3[8];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = *(_BYTE *)(v48 + 32);
  v50 = *(_QWORD *)v47;
  v51 = *(_QWORD *)(v47 + 8);
  v52 = *(_QWORD *)(v47 + 16);
  v53 = *(_QWORD *)(v47 + 24);
  v54 = *(_BYTE *)(v47 + 32);
  v55 = *(_OWORD *)(v48 + 16);
  *(_OWORD *)v47 = *(_OWORD *)v48;
  *(_OWORD *)(v47 + 16) = v55;
  *(_BYTE *)(v47 + 32) = v49;
  sub_100012AFC(v50, v51, v52, v53, v54);
  return a1;
}

uint64_t sub_1000138DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000138E8);
}

uint64_t sub_1000138E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for SingleContactTimelineEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = sub_100003FC4(&qword_100050598);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[6];
    }
    else
    {
      v8 = sub_100003FC4(&qword_1000506B0);
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[7];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000139BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000139C8);
}

uint64_t sub_1000139C8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = type metadata accessor for SingleContactTimelineEntry(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5]) = (a2 - 1);
      return result;
    }
    v13 = sub_100003FC4(&qword_100050598);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v10 = sub_100003FC4(&qword_1000506B0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SingleContactWidgetEntryView(uint64_t a1)
{
  return sub_1000108EC(a1, qword_100050BB0, (uint64_t)&nominal type descriptor for SingleContactWidgetEntryView);
}

void sub_100013AAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v2 = type metadata accessor for SingleContactTimelineEntry(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_10000EAB0(319, (unint64_t *)&qword_100050608, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_10000EAB0(319, (unint64_t *)&qword_1000508A0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = "!";
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

_QWORD *sub_100013B90(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SelectPerson(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for PersonInfo(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_100003FC4(&qword_100050690);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = a3[9];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = type metadata accessor for TimelineEntryRelevance(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = sub_100003FC4(&qword_100050778);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  }
  return a1;
}

uint64_t sub_100013D90(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for SelectPerson(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = type metadata accessor for PersonInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v10 = a1 + a2[8];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = a1 + a2[9];
  v13 = type metadata accessor for TimelineEntryRelevance(0);
  v14 = *(_QWORD *)(v13 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  return result;
}

uint64_t sub_100013EB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SelectPerson(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for PersonInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_100003FC4(&qword_100050690);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = a3[9];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = type metadata accessor for TimelineEntryRelevance(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = sub_100003FC4(&qword_100050778);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100014088(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SelectPerson(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = type metadata accessor for PersonInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    v19 = sub_100003FC4(&qword_100050690);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
LABEL_7:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v20 = a3[8];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  v24 = a3[9];
  v25 = (void *)(a1 + v24);
  v26 = (void *)(a2 + v24);
  v27 = type metadata accessor for TimelineEntryRelevance(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 24))(v25, v26, v27);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v32 = sub_100003FC4(&qword_100050778);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v28 + 16))(v25, v26, v27);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
LABEL_13:
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1000142F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SelectPerson(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for PersonInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_100003FC4(&qword_100050690);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  v21 = a3[9];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = type metadata accessor for TimelineEntryRelevance(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = sub_100003FC4(&qword_100050778);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1000144C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for SelectPerson(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = type metadata accessor for PersonInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    v19 = sub_100003FC4(&qword_100050690);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_7:
  v20 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  v24 = a3[9];
  v25 = (void *)(a1 + v24);
  v26 = (void *)(a2 + v24);
  v27 = type metadata accessor for TimelineEntryRelevance(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 40))(v25, v26, v27);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v32 = sub_100003FC4(&qword_100050778);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v28 + 32))(v25, v26, v27);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
LABEL_13:
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100014728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100014734);
}

uint64_t sub_100014734(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = type metadata accessor for SelectPerson(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = sub_100003FC4(&qword_100050690);
  v10 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v13;
    v12 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 254)
  {
    v15 = type metadata accessor for UUID(0);
    v10 = *(_QWORD *)(v15 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v15;
      v12 = a3[8];
    }
    else
    {
      v11 = sub_100003FC4(&qword_100050778);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = a3[9];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v14 = *(unsigned __int8 *)(a1 + a3[7]);
  if (v14 >= 2)
    return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10001485C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100014868);
}

uint64_t sub_100014868(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for SelectPerson(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      result = sub_100003FC4(&qword_100050690);
      v14 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = result;
        v15 = a4[6];
      }
      else
      {
        if (a3 == 254)
        {
          *(_BYTE *)(a1 + a4[7]) = a2 + 1;
          return result;
        }
        v17 = type metadata accessor for UUID(0);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[8];
        }
        else
        {
          v10 = sub_100003FC4(&qword_100050778);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[9];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10001497C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[7];

  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for SelectPerson(319);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_10000EAB0(319, (unint64_t *)&qword_100050C60, (uint64_t (*)(uint64_t))&type metadata accessor for PersonInfo, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        v12[3] = &unk_100040B10;
        v8 = type metadata accessor for UUID(319);
        if (v9 <= 0x3F)
        {
          v12[4] = *(_QWORD *)(v8 - 8) + 64;
          sub_10000EAB0(319, (unint64_t *)&unk_1000507E8, (uint64_t (*)(uint64_t))&type metadata accessor for TimelineEntryRelevance, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
          if (v11 <= 0x3F)
          {
            v12[5] = *(_QWORD *)(v10 - 8) + 64;
            v12[6] = &unk_100040B10;
            swift_initStructMetadata(a1, 256, 7, v12, a1 + 16);
          }
        }
      }
    }
  }
}

unint64_t *sub_100014A8C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  unint64_t *v21;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v6 = type metadata accessor for SingleContactTimelineEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v10)
  {
    v21 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_100024D98(0, v10, 0);
    v11 = v21;
    v12 = *(_QWORD *)(type metadata accessor for StatusPrioritizer.TimeLineEntrySingleItem(0) - 8);
    v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v18 = *(_QWORD *)(v12 + 72);
    while (1)
    {
      v19(v13);
      if (v4)
        break;
      v4 = 0;
      v21 = v11;
      v15 = v11[2];
      v14 = v11[3];
      if (v15 >= v14 >> 1)
      {
        sub_100024D98(v14 > 1, v15 + 1, 1);
        v11 = v21;
      }
      v11[2] = v15 + 1;
      sub_10001D444((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15);
      v13 += v18;
      if (!--v10)
        return v11;
    }
    swift_release(v11);
  }
  return v11;
}

uint64_t sub_100014BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for OSSignpostID(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[9] = swift_task_alloc(v6);
  v3[10] = swift_task_alloc(v6);
  v7 = sub_100003FC4(&qword_1000506C8);
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PersonTypeAppEntity(0);
  v3[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[13] = v9;
  v3[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003FC4(&qword_100050E38);
  v3[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v3[16] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[17] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[18] = swift_task_alloc(v13);
  v3[19] = swift_task_alloc(v13);
  v3[20] = swift_task_alloc(v13);
  v14 = type metadata accessor for OSSignposter(0);
  v3[21] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[22] = v15;
  v3[23] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100014D48, 0, 0);
}

uint64_t sub_100014D48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  NSObject *v44;
  os_signpost_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  os_signpost_id_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  os_log_type_t type;
  uint64_t v89;
  uint64_t v90;

  v2 = *(_QWORD *)(v1 + 160);
  static PeopleLogger.extension.getter(a1);
  v3 = OSSignposter.init(logger:)(v2);
  v4 = static PeopleLogger.extension.getter(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Snapshot requested for single contact widget", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(_QWORD *)(v1 + 152);
  v9 = *(_QWORD *)(v1 + 128);
  v10 = *(_QWORD *)(v1 + 136);
  v11 = *(_QWORD *)(v1 + 120);
  v12 = *(_QWORD *)(v1 + 96);
  v13 = *(_QWORD *)(v1 + 104);

  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  v15 = v14(v8, v9);
  SelectPerson.person.getter(v15);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  v17 = *(_QWORD *)(v1 + 120);
  if (v16)
  {
    v18 = sub_100004EE0(*(_QWORD *)(v1 + 120), &qword_100050E38);
LABEL_11:
    v42 = (uint64_t *)(v1 + 80);
    v43 = static OSSignpostID.exclusive.getter(v18);
    v44 = OSSignposter.logHandle.getter(v43);
    v45 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v46 = *(_QWORD *)(v1 + 80);
      v42 = (uint64_t *)(v1 + 72);
      v47 = *(_QWORD *)(v1 + 56);
      v48 = *(_QWORD *)(v1 + 64);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v48 + 16))(*(_QWORD *)(v1 + 72), v46, v47);
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      v50 = OSSignpostID.rawValue.getter(v49);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v44, v45, v50, "getSnapshot", "no contact", v49, 2u);
      swift_slowDealloc(v49, -1, -1);

      v51 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
      v51(v46, v47);
    }
    else
    {
      v52 = *(_QWORD *)(v1 + 64);

      v51 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    }
    v53 = *v42;
    v55 = *(_QWORD *)(v1 + 176);
    v54 = *(_QWORD *)(v1 + 184);
    v56 = *(_QWORD *)(v1 + 168);
    v57 = *(_QWORD *)(v1 + 32);
    v58 = *(_QWORD *)(v1 + 40);
    v59 = ((uint64_t (*)(uint64_t, _QWORD))v51)(v53, *(_QWORD *)(v1 + 56));
    Date.init()(v59);
    v60 = (int *)type metadata accessor for SingleContactTimelineEntry(0);
    v61 = v57 + v60[5];
    v62 = type metadata accessor for SelectPerson(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v61, v58, v62);
    v63 = v57 + v60[6];
    v64 = type metadata accessor for PersonInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v63, 1, 1, v64);
    v65 = v57 + v60[9];
    v66 = type metadata accessor for TimelineEntryRelevance(0);
    v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 1, 1, v66);
    *(_BYTE *)(v57 + v60[7]) = 0;
    UUID.init()(v67);
    *(_BYTE *)(v57 + v60[10]) = 0;
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
    v68 = *(_QWORD *)(v1 + 152);
    v69 = *(_QWORD *)(v1 + 160);
    v70 = *(_QWORD *)(v1 + 144);
    v72 = *(_QWORD *)(v1 + 112);
    v71 = *(_QWORD *)(v1 + 120);
    v74 = *(_QWORD *)(v1 + 80);
    v73 = *(_QWORD *)(v1 + 88);
    v75 = *(_QWORD *)(v1 + 72);
    swift_task_dealloc(*(_QWORD *)(v1 + 184));
    swift_task_dealloc(v69);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v19 = *(_QWORD *)(v1 + 104);
  v20 = *(_QWORD *)(v1 + 112);
  v21 = *(_QWORD *)(v1 + 96);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 16))(v20, *(_QWORD *)(v1 + 120), v21);
  v22 = sub_100004EE0(v17, &qword_100050E38);
  v23 = PersonTypeAppEntity.id.getter(v22);
  v25 = v24;
  *(_QWORD *)(v1 + 192) = v24;
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
  swift_bridgeObjectRetain(v25);
  v26 = static PersonTypeAppEntity.decodeContactID(for:)(v23, v25);
  v28 = v27;
  swift_bridgeObjectRelease(v25);
  if (!v28)
  {
LABEL_10:
    v18 = swift_bridgeObjectRelease(v25);
    goto LABEL_11;
  }
  v29 = *(_QWORD **)(v1 + 48);
  v30 = v29[3];
  v31 = v29[4];
  sub_10001190C(v29, v30);
  v32 = dispatch thunk of ContactFetcherProtocol.contact(for:includeImages:)(v26, v28, 0, v30, v31);
  *(_QWORD *)(v1 + 200) = v32;
  if (!v32)
  {
    swift_bridgeObjectRelease(v28);
    goto LABEL_10;
  }
  v33 = v32;
  v89 = v23;
  static PeopleLogger.extension.getter(v32);
  swift_bridgeObjectRetain_n(v25, 2);
  v34 = swift_bridgeObjectRetain(v28);
  v35 = Logger.logObject.getter(v34);
  type = static os_log_type_t.default.getter();
  v36 = os_log_type_enabled(v35, type);
  v37 = *(_QWORD *)(v1 + 144);
  v38 = *(_QWORD *)(v1 + 128);
  if (v36)
  {
    v87 = *(_QWORD *)(v1 + 128);
    v39 = swift_slowAlloc(22, -1);
    v86 = swift_slowAlloc(64, -1);
    v90 = v86;
    *(_DWORD *)v39 = 136315394;
    swift_bridgeObjectRetain(v25);
    *(_QWORD *)(v1 + 16) = sub_10001CBB4(v89, v25, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease_n(v25, 3);
    *(_WORD *)(v39 + 12) = 2080;
    swift_bridgeObjectRetain(v28);
    *(_QWORD *)(v1 + 24) = sub_10001CBB4(v26, v28, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v39 + 14, v39 + 22);
    swift_bridgeObjectRelease_n(v28, 3);
    _os_log_impl((void *)&_mh_execute_header, v35, type, "get snapshot for single contact widget with appEntityID: %s, contactID: %s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v39, -1, -1);

    v40 = v37;
    v41 = v87;
  }
  else
  {
    swift_bridgeObjectRelease_n(v25, 2);
    swift_bridgeObjectRelease_n(v28, 2);

    v40 = v37;
    v41 = v38;
  }
  v14(v40, v41);
  v77 = *(_QWORD *)(v1 + 184);
  v78 = *(_QWORD *)(v1 + 88);
  v80 = *(_QWORD *)(v1 + 40);
  v79 = *(_QWORD **)(v1 + 48);
  v81 = v29[3];
  v82 = v29[4];
  sub_10001190C(v79, v81);
  ContactFetcherProtocol.contactImage(for:locale:)(v33, v79 + 5, v81, v82);
  v83 = (_QWORD *)swift_task_alloc(80);
  *(_QWORD *)(v1 + 208) = v83;
  v83[2] = v79;
  v83[3] = v33;
  v83[4] = v80;
  v83[5] = v78;
  v83[6] = v89;
  v83[7] = v25;
  v83[8] = v77;
  v84 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 216) = v84;
  v85 = type metadata accessor for SingleContactTimelineEntry(0);
  *v84 = v1;
  v84[1] = sub_1000153D4;
  return withCheckedContinuation<A>(isolation:function:_:)(*(_QWORD *)(v1 + 32), 0, 0, 0xD000000000000011, 0x8000000100049C50, sub_10001DEB8, v83, v85);
}

uint64_t sub_1000153D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 216));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10001543C, 0, 0);
}

uint64_t sub_10001543C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 88);

  sub_100004EE0(v4, &qword_1000506C8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001550C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _OWORD v66[8];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v56 = a8;
  v62 = a7;
  v61 = a6;
  v53 = a5;
  v52 = a4;
  v47 = a3;
  v49 = a1;
  v65 = type metadata accessor for OSSignposter(0);
  v51 = *(_QWORD *)(v65 - 8);
  v57 = *(_QWORD *)(v51 + 64);
  __chkstk_darwin(v65);
  v64 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003FC4(&qword_1000506C8);
  v50 = *(_QWORD *)(v11 - 8);
  v48 = *(_QWORD *)(v50 + 64);
  __chkstk_darwin(v11);
  v63 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SelectPerson(0);
  v14 = *(_QWORD *)(v13 - 8);
  v45 = v13;
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v46 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003FC4(&qword_100050E80);
  v17 = *(_QWORD *)(v16 - 8);
  v43 = v16;
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16);
  v44 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100011C0C(a2 + 80, (uint64_t)&v68);
  v59 = v69;
  v60 = v70;
  v58 = sub_10001190C(&v68, v69);
  v19 = objc_msgSend(a3, "identifier");
  v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v54 = v20;

  sub_10001DB10(a2, (uint64_t)v66);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v49, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v52, v13);
  sub_100012534(v53, v63, &qword_1000506C8);
  v21 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v64, v56, v65);
  v22 = *(unsigned __int8 *)(v17 + 80);
  v23 = (v22 + 160) & ~v22;
  v24 = *(unsigned __int8 *)(v14 + 80);
  v25 = (v18 + v24 + v23) & ~v24;
  v26 = *(unsigned __int8 *)(v50 + 80);
  v27 = (v15 + v26 + v25) & ~v26;
  v28 = (v48 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = *(unsigned __int8 *)(v21 + 80);
  v30 = (v29 + v28 + 16) & ~v29;
  v31 = swift_allocObject(&unk_10004E250, v30 + v57, v22 | v24 | v26 | v29 | 7);
  v32 = v66[7];
  *(_OWORD *)(v31 + 112) = v66[6];
  *(_OWORD *)(v31 + 128) = v32;
  v33 = v67;
  v34 = v66[3];
  *(_OWORD *)(v31 + 48) = v66[2];
  *(_OWORD *)(v31 + 64) = v34;
  v35 = v66[5];
  *(_OWORD *)(v31 + 80) = v66[4];
  *(_OWORD *)(v31 + 96) = v35;
  v36 = v66[1];
  *(_OWORD *)(v31 + 16) = v66[0];
  *(_OWORD *)(v31 + 32) = v36;
  v37 = v47;
  *(_QWORD *)(v31 + 144) = v33;
  *(_QWORD *)(v31 + 152) = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v31 + v23, v44, v43);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v31 + v25, v46, v45);
  sub_100004F98(v63, v31 + v27, &qword_1000506C8);
  v38 = (_QWORD *)(v31 + v28);
  v39 = v62;
  *v38 = v61;
  v38[1] = v39;
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v31 + v30, v64, v65);
  v40 = v37;
  swift_bridgeObjectRetain(v39);
  v41 = v54;
  StatusProviderProtocol.fetchStatus(for:completion:)(v55, v54, sub_10001E090, v31, v59, v60);
  swift_release(v31);
  swift_bridgeObjectRelease(v41);
  return sub_10000D160(&v68);
}

uint64_t sub_100015958(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  id v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  NSObject *v101;
  os_signpost_type_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint8_t *v106;
  os_signpost_id_t v107;
  void (*v108)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  char *v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t (*v133)(char *, char *, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148[5];

  v134 = a8;
  v130 = a7;
  v135 = a6;
  v136 = a5;
  v113 = a4;
  v141 = a3;
  LODWORD(v117) = a2;
  v11 = type metadata accessor for OSSignpostID(0);
  v138 = *(_QWORD *)(v11 - 8);
  v139 = v11;
  v12 = __chkstk_darwin(v11);
  v112 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v110 - v14;
  v16 = sub_100003FC4(&qword_100050E68);
  __chkstk_darwin(v16);
  v131 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003FC4(&qword_100050778);
  __chkstk_darwin(v18);
  v132 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003FC4(&qword_1000506C8);
  __chkstk_darwin(v20);
  v123 = (uint64_t)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003FC4(&qword_100050690);
  __chkstk_darwin(v22);
  v129 = (char *)&v110 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for SelectPerson(0);
  v125 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v124 = (char *)&v110 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for SingleContactTimelineEntry(0);
  __chkstk_darwin(v127);
  v128 = (char *)&v110 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for ContactFormatter.Style(0);
  v115 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v118 = (char *)&v110 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Person(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v119 = (char *)&v110 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v133 = (uint64_t (*)(char *, char *, uint64_t))((char *)&v110 - v31);
  v32 = type metadata accessor for Logger(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v140 = (char *)&v110 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v37 = (char *)&v110 - v36;
  v38 = type metadata accessor for Date(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = __chkstk_darwin(v38);
  v42 = (char *)&v110 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = v15;
  v142 = v28;
  v143 = v27;
  v122 = v40;
  if ((v117 & 1) != 0)
  {
    v148[0] = a1;
    swift_errorRetain(a1);
    v48 = sub_100003FC4(&qword_100050A40);
    v49 = swift_willThrowTypedImpl(v148, v48, &protocol self-conformance witness table for Error);
    static PeopleLogger.extension.getter(v49);
    swift_errorRetain(a1);
    Logger.ifError(_:message:)(a1, 0xD000000000000021, 0x8000000100049C20);
    sub_100011B2C(a1, 1);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v37, v32);
    v47 = sub_100011B2C(a1, 1);
    v46 = &_swiftEmptyArrayStorage;
  }
  else
  {
    v43 = swift_bridgeObjectRetain(a1);
    v44 = sub_100006F80(v43);
    v45 = sub_100011B2C(a1, 0);
    Date.init()(v45);
    v46 = (_QWORD *)dispatch thunk of StatusPrioritizer.ranked(statuses:at:lockScreenCircular:)(v44, v42, 0);
    swift_bridgeObjectRelease(v44);
    v47 = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v42, v38);
  }
  v50 = v33;
  v117 = a10;
  v114 = a9;
  v51 = v140;
  static PeopleLogger.extension.getter(v47);
  v52 = v113;
  swift_bridgeObjectRetain_n(v46, 2);
  v53 = v52;
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.default.getter();
  v56 = os_log_type_enabled(v54, v55);
  v121 = v39;
  v120 = v42;
  v113 = v53;
  if (v56)
  {
    v57 = swift_slowAlloc(22, -1);
    v111 = v32;
    v110 = v50;
    v58 = v57;
    v59 = swift_slowAlloc(64, -1);
    v148[0] = v59;
    *(_DWORD *)v58 = 136315394;
    v60 = objc_msgSend(v53, "identifier");
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    v63 = v62;

    *(_QWORD *)&v147 = sub_10001CBB4(v61, v63, v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, (char *)&v147 + 8, v58 + 4, v58 + 12);

    swift_bridgeObjectRelease(v63);
    *(_WORD *)(v58 + 12) = 2080;
    swift_bridgeObjectRetain(v46);
    v64 = sub_100003FC4(&qword_100050A58);
    v65 = Array.description.getter(v46, v64);
    v67 = v66;
    swift_bridgeObjectRelease(v46);
    *(_QWORD *)&v147 = sub_10001CBB4(v65, v67, v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, (char *)&v147 + 8, v58 + 14, v58 + 22);
    swift_bridgeObjectRelease_n(v46, 2);
    swift_bridgeObjectRelease(v67);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Creating snapshot for contact %s with statues %s", (uint8_t *)v58, 0x16u);
    swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v58, -1, -1);

    (*(void (**)(char *, uint64_t))(v110 + 8))(v140, v111);
  }
  else
  {

    swift_bridgeObjectRelease_n(v46, 2);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v32);
  }
  v68 = v46[2];
  if (v68)
  {
    v69 = (uint64_t)(v46 + 4);
    swift_bridgeObjectRetain(v46);
    v70 = (char *)&_swiftEmptyArrayStorage;
    do
    {
      sub_100011C0C(v69, (uint64_t)v148);
      sub_100011C0C((uint64_t)v148, (uint64_t)&v147);
      v71 = sub_100003FC4(&qword_100050A58);
      v72 = sub_100003FC4(&qword_100050A60);
      if ((swift_dynamicCast(&v144, &v147, v71, v72, 6) & 1) == 0)
      {
        v146 = 0;
        v144 = 0u;
        v145 = 0u;
      }
      sub_10000D160(v148);
      if (*((_QWORD *)&v145 + 1))
      {
        sub_100004F70(&v144, (uint64_t)&v147);
        sub_100004F70(&v147, (uint64_t)&v144);
        if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
          v70 = sub_10000F470(0, *((_QWORD *)v70 + 2) + 1, 1, v70);
        v74 = *((_QWORD *)v70 + 2);
        v73 = *((_QWORD *)v70 + 3);
        if (v74 >= v73 >> 1)
          v70 = sub_10000F470((char *)(v73 > 1), v74 + 1, 1, v70);
        *((_QWORD *)v70 + 2) = v74 + 1;
        sub_100004F70(&v144, (uint64_t)&v70[40 * v74 + 32]);
      }
      else
      {
        sub_100004EE0((uint64_t)&v144, &qword_100050A68);
      }
      v69 += 40;
      --v68;
    }
    while (v68);
    swift_bridgeObjectRelease_n(v46, 2);
  }
  else
  {
    swift_bridgeObjectRelease(v46);
    v70 = (char *)&_swiftEmptyArrayStorage;
  }
  v75 = v118;
  (*(void (**)(char *, _QWORD, uint64_t))(v115 + 104))(v118, enum case for ContactFormatter.Style.shortName(_:), v116);
  v76 = String.localized.getter(0x656D614E206F4ELL, 0xE700000000000000);
  v78 = v77;
  v148[3] = type metadata accessor for ContactFormatter(0);
  v148[4] = (uint64_t)&protocol witness table for ContactFormatter;
  sub_100004F2C(v148);
  ContactFormatter.init(style:fallback:)(v75, v76, v78);
  v79 = v113;
  v80 = v133;
  v81 = Person.init(from:statuses:contactFormatter:)(v79, v70, v148);
  v82 = v120;
  Date.init()(v81);
  v83 = v125;
  v84 = v124;
  v85 = v135;
  v86 = v126;
  (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v124, v135, v126);
  v87 = v119;
  (*(void (**)(char *, uint64_t (*)(char *, char *, uint64_t), uint64_t))(v142 + 16))(v119, v80, v143);
  v88 = v123;
  sub_100012534(v130, v123, &qword_1000506C8);
  v89 = (uint64_t)v129;
  PersonInfo.init(person:contactImage:)(v87, v88);
  v90 = type metadata accessor for PersonInfo(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v89, 0, 1, v90);
  v91 = type metadata accessor for TimelineEntryRelevance(0);
  v92 = (uint64_t)v132;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v132, 1, 1, v91);
  v93 = (uint64_t)v131;
  static PeopleWidgetVerticalLayoutToggleKind.getVerticalToggleKind(from:)(v134, v114);
  LOBYTE(v85) = sub_1000277AC(v80, v85, v93);
  sub_100004EE0(v93, &qword_100050E68);
  v94 = v128;
  (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v128, v82, v122);
  v95 = (int *)v127;
  (*(void (**)(char *, char *, uint64_t))(v83 + 32))(&v94[*(int *)(v127 + 20)], v84, v86);
  v96 = sub_100004F98(v89, (uint64_t)&v94[v95[6]], &qword_100050690);
  v94[v95[7]] = 0;
  UUID.init()(v96);
  sub_100004F98(v92, (uint64_t)&v94[v95[9]], &qword_100050778);
  v94[v95[10]] = v85 & 1;
  v97 = sub_100003FC4(&qword_100050E80);
  v98 = CheckedContinuation.resume(returning:)(v94, v97);
  v99 = v137;
  v100 = static OSSignpostID.exclusive.getter(v98);
  v101 = OSSignposter.logHandle.getter(v100);
  v102 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v104 = v138;
    v103 = v139;
    v105 = v112;
    (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v112, v99, v139);
    v106 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v106 = 0;
    v107 = OSSignpostID.rawValue.getter(v106);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v101, v102, v107, "getSnapshot", "Completed", v106, 2u);
    swift_slowDealloc(v106, -1, -1);

    v108 = *(void (**)(char *, uint64_t))(v104 + 8);
    v108(v99, v103);
    (*(void (**)(uint64_t (*)(char *, char *, uint64_t), uint64_t))(v142 + 8))(v80, v143);
    return ((uint64_t (*)(char *, uint64_t))v108)(v105, v103);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v138 + 8))(v99, v139);
    return (*(uint64_t (**)(uint64_t (*)(char *, char *, uint64_t), uint64_t))(v142 + 8))(v80, v143);
  }
}

uint64_t sub_100016554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  v5 = type metadata accessor for TimelineReloadPolicy(0);
  v4[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003FC4(&qword_100050778);
  v4[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OSSignpostID(0);
  v4[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[13] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[14] = swift_task_alloc(v9);
  v4[15] = swift_task_alloc(v9);
  v10 = sub_100003FC4(&qword_1000506C8);
  v4[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v4[17] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[18] = v12;
  v4[19] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003FC4(&qword_100050A00);
  v4[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PersonTypeAppEntity(0);
  v4[21] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[22] = v15;
  v4[23] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (*(_QWORD *)(*(_QWORD *)(sub_100003FC4(&qword_100050E38) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[24] = swift_task_alloc(v16);
  v4[25] = swift_task_alloc(v16);
  v4[26] = swift_task_alloc(v16);
  v4[27] = swift_task_alloc(v16);
  v17 = type metadata accessor for SelectPerson(0);
  v4[28] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v4[29] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[30] = swift_task_alloc(v19);
  v4[31] = swift_task_alloc(v19);
  v20 = type metadata accessor for Logger(0);
  v4[32] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v4[33] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[34] = swift_task_alloc(v22);
  v4[35] = swift_task_alloc(v22);
  v4[36] = swift_task_alloc(v22);
  v4[37] = swift_task_alloc(v22);
  v4[38] = swift_task_alloc(v22);
  v23 = type metadata accessor for OSSignposter(0);
  v4[39] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v4[40] = v24;
  v4[41] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000167AC, 0, 0);
}

uint64_t sub_1000167AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  os_signpost_type_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint8_t *v132;
  os_signpost_id_t v133;
  void (*v134)(uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double *v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t (*type)(uint64_t, uint64_t, uint64_t);
  os_log_type_t typea[8];
  uint64_t v183;
  uint64_t v184;
  os_log_type_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  NSObject *log;
  os_log_t loga;
  os_log_t logb;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(uint64_t, uint64_t, uint64_t);
  id v200;
  id v201;
  uint64_t v202;
  uint64_t (*v203)(uint64_t, uint64_t);
  uint64_t (*v204)(uint64_t, uint64_t);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;

  v195 = v1 + 32;
  v2 = *(_QWORD *)(v1 + 304);
  static PeopleLogger.extension.getter(a1);
  v3 = OSSignposter.init(logger:)(v2);
  v4 = static PeopleLogger.extension.getter(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "getTimeline requested for single contact widget", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(_QWORD *)(v1 + 296);
  v9 = *(_QWORD *)(v1 + 256);
  v10 = *(_QWORD *)(v1 + 264);
  v11 = *(_QWORD *)(v1 + 248);
  v202 = *(_QWORD *)(v1 + 240);
  v13 = *(_QWORD *)(v1 + 224);
  v12 = *(_QWORD *)(v1 + 232);
  v14 = *(_QWORD *)(v1 + 56);

  v15 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  v16 = v15(v8, v9);
  static PeopleLogger.extension.getter(v16);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v17(v11, v14, v13);
  v18 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v17)(v202, v14, v13);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  v199 = v17;
  if (os_log_type_enabled(v19, v20))
  {
    v185 = v20;
    v203 = v15;
    v192 = v1 + 40;
    v21 = *(_QWORD *)(v1 + 216);
    v23 = *(_QWORD *)(v1 + 168);
    v22 = *(_QWORD *)(v1 + 176);
    v24 = swift_slowAlloc(22, -1);
    v183 = swift_slowAlloc(64, -1);
    v207 = v183;
    *(_DWORD *)v24 = 136315394;
    SelectPerson.person.getter(v183);
    type = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
    v25 = type(v21, 1, v23);
    v26 = *(_QWORD *)(v1 + 216);
    log = v19;
    if (v25)
    {
      sub_100004EE0(v26, &qword_100050E38);
      v27 = 0xE100000000000000;
      v28 = 45;
    }
    else
    {
      v36 = *(_QWORD *)(v1 + 176);
      v37 = *(_QWORD *)(v1 + 184);
      v38 = *(_QWORD *)(v1 + 168);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v37, v26, v38);
      v39 = sub_100004EE0(v26, &qword_100050E38);
      v28 = PersonTypeAppEntity.displayString.getter(v39);
      v27 = v40;
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
    }
    v41 = *(_QWORD *)(v1 + 248);
    v43 = *(_QWORD *)(v1 + 224);
    v42 = *(_QWORD *)(v1 + 232);
    v44 = *(_QWORD *)(v1 + 208);
    v179 = *(_QWORD *)(v1 + 168);
    *(_QWORD *)(v1 + 32) = sub_10001CBB4(v28, v27, &v207);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v195, v192, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v27);
    v45 = *(uint64_t (**)(uint64_t, uint64_t))(v42 + 8);
    v46 = v45(v41, v43);
    *(_WORD *)(v24 + 12) = 2080;
    SelectPerson.person.getter(v46);
    v47 = type(v44, 1, v179);
    v48 = *(_QWORD *)(v1 + 208);
    if (v47)
    {
      sub_100004EE0(*(_QWORD *)(v1 + 208), &qword_100050E38);
      v49 = 0xE100000000000000;
      v50 = 45;
    }
    else
    {
      v52 = *(_QWORD *)(v1 + 176);
      v51 = *(_QWORD *)(v1 + 184);
      v53 = *(_QWORD *)(v1 + 168);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v52 + 16))(v51, *(_QWORD *)(v1 + 208), v53);
      v54 = sub_100004EE0(v48, &qword_100050E38);
      v50 = PersonTypeAppEntity.id.getter(v54);
      v49 = v55;
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
    }
    v56 = *(_QWORD *)(v1 + 288);
    v57 = *(_QWORD *)(v1 + 256);
    v58 = *(_QWORD *)(v1 + 240);
    v59 = *(_QWORD *)(v1 + 224);
    *(_QWORD *)(v1 + 40) = sub_10001CBB4(v50, v49, &v207);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v192, v1 + 48, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease(v49);
    v45(v58, v59);
    _os_log_impl((void *)&_mh_execute_header, log, v185, "SingleContactTimelineProvider person: %s, id: %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy(v183, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v183, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    v34 = v56;
    v35 = v57;
    v15 = v203;
  }
  else
  {
    v29 = *(_QWORD *)(v1 + 288);
    v30 = *(_QWORD *)(v1 + 256);
    v31 = *(_QWORD *)(v1 + 240);
    v32 = *(_QWORD *)(v1 + 224);
    v33 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 232) + 8);
    v33(*(_QWORD *)(v1 + 248), v32);
    v33(v31, v32);

    v34 = v29;
    v35 = v30;
  }
  v15(v34, v35);
  v60 = *(_QWORD *)(v1 + 200);
  v61 = *(_QWORD *)(v1 + 168);
  v62 = *(_QWORD *)(v1 + 176);
  v63 = *(_QWORD *)(v1 + 160);
  v64 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v63, 1, 1, v64);
  v65 = swift_allocObject(&unk_10004E200, 32, 7);
  *(_QWORD *)(v65 + 16) = 0;
  *(_QWORD *)(v65 + 24) = 0;
  v66 = sub_100027F10(v63, (uint64_t)&unk_100050E48, v65);
  v67 = swift_release(v66);
  SelectPerson.person.getter(v67);
  v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  v69 = v68(v60, 1, v61);
  v70 = *(_QWORD *)(v1 + 200);
  if (v69)
  {
    v71 = sub_100004EE0(*(_QWORD *)(v1 + 200), &qword_100050E38);
  }
  else
  {
    v204 = v15;
    v73 = *(_QWORD *)(v1 + 184);
    v72 = *(_QWORD *)(v1 + 192);
    v74 = *(_QWORD *)(v1 + 168);
    v75 = *(_QWORD *)(v1 + 176);
    v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16);
    v76(v73, v70, v74);
    v77 = sub_100004EE0(v70, &qword_100050E38);
    v193 = PersonTypeAppEntity.id.getter(v77);
    v79 = v78;
    *(_QWORD *)(v1 + 336) = v78;
    v80 = *(uint64_t (**)(uint64_t, uint64_t))(v75 + 8);
    v81 = v80(v73, v74);
    SelectPerson.person.getter(v81);
    v82 = v68(v72, 1, v74);
    v83 = *(_QWORD *)(v1 + 192);
    if (v82)
    {
      sub_100004EE0(*(_QWORD *)(v1 + 192), &qword_100050E38);
      v84 = 0;
      v85 = 0;
    }
    else
    {
      v86 = *(_QWORD *)(v1 + 184);
      v87 = *(_QWORD *)(v1 + 168);
      v76(v86, *(_QWORD *)(v1 + 192), v87);
      v88 = sub_100004EE0(v83, &qword_100050E38);
      v84 = PersonTypeAppEntity.id.getter(v88);
      v85 = v89;
      v80(v86, v87);
    }
    v90 = static PersonTypeAppEntity.decodeContactID(for:)(v84, v85);
    v92 = v91;
    swift_bridgeObjectRelease(v85);
    v15 = v204;
    if (v92)
    {
      v93 = *(_QWORD **)(v1 + 72);
      v94 = v93[3];
      v95 = v93[4];
      sub_10001190C(v93, v94);
      v96 = dispatch thunk of ContactFetcherProtocol.contact(for:includeImages:)(v90, v92, 0, v94, v95);
      *(_QWORD *)(v1 + 344) = v96;
      if (v96)
      {
        v186 = v90;
        v98 = *(_QWORD *)(v1 + 144);
        v97 = *(_QWORD *)(v1 + 152);
        v99 = *(_QWORD *)(v1 + 136);
        v100 = *(_QWORD **)(v1 + 72);
        v101 = v79;
        v102 = (void *)v96;
        v103 = Date.init()(v96);
        v104 = Date.timeIntervalSinceReferenceDate.getter(v103);
        (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
        v105 = v93[3];
        v106 = v93[4];
        sub_10001190C(v100, v105);
        v200 = v102;
        v107 = v102;
        v108 = v101;
        v109 = ContactFetcherProtocol.contactImage(for:locale:)(v107, v100 + 5, v105, v106);
        static PeopleLogger.extension.getter(v109);
        swift_bridgeObjectRetain_n(v101, 2);
        v110 = swift_bridgeObjectRetain(v92);
        v111 = Logger.logObject.getter(v110);
        v112 = static os_log_type_t.default.getter();
        v113 = os_log_type_enabled(v111, v112);
        v114 = *(_QWORD *)(v1 + 280);
        v115 = *(_QWORD *)(v1 + 256);
        if (v113)
        {
          v116 = swift_slowAlloc(22, -1);
          v207 = swift_slowAlloc(64, -1);
          v117 = v207;
          *(_DWORD *)v116 = 136315394;
          swift_bridgeObjectRetain(v108);
          *(_QWORD *)(v1 + 16) = sub_10001CBB4(v193, v108, &v207);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v116 + 4, v116 + 12);
          swift_bridgeObjectRelease_n(v108, 3);
          *(_WORD *)(v116 + 12) = 2080;
          swift_bridgeObjectRetain(v92);
          *(_QWORD *)(v1 + 24) = sub_10001CBB4(v186, v92, &v207);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v195, v116 + 14, v116 + 22);
          swift_bridgeObjectRelease_n(v92, 3);
          _os_log_impl((void *)&_mh_execute_header, v111, v112, "Get timeline for single contact widget with appEntityID: %s, contactID: %s", (uint8_t *)v116, 0x16u);
          swift_arrayDestroy(v117, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v117, -1, -1);
          swift_slowDealloc(v116, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v108, 2);
          swift_bridgeObjectRelease_n(v92, 2);
        }

        v204(v114, v115);
        v206 = *(_QWORD *)(v1 + 328);
        v167 = *(_QWORD **)(v1 + 72);
        v198 = *(_QWORD *)(v1 + 64);
        v188 = *(_QWORD *)(v1 + 56);
        logb = *(os_log_t *)(v1 + 128);
        v168 = v93[3];
        v169 = v93[4];
        sub_10001190C(v167, v168);
        v170 = objc_msgSend(v200, "identifier");
        v171 = static String._unconditionallyBridgeFromObjectiveC(_:)(v170);
        v173 = v172;

        dispatch thunk of ContactFetcherProtocol.provideFeedbackForContactRecommendations(with:)(v171, v173, v168, v169);
        swift_bridgeObjectRelease(v173);
        v174 = (double *)swift_task_alloc(96);
        *(_QWORD *)(v1 + 352) = v174;
        *((_QWORD *)v174 + 2) = v167;
        *((_QWORD *)v174 + 3) = v200;
        *((_QWORD *)v174 + 4) = v188;
        *((_QWORD *)v174 + 5) = logb;
        *((_QWORD *)v174 + 6) = v193;
        *((_QWORD *)v174 + 7) = v108;
        v174[8] = v104;
        *((_QWORD *)v174 + 9) = v198;
        *((_QWORD *)v174 + 10) = v206;
        v175 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
        *(_QWORD *)(v1 + 360) = v175;
        v176 = sub_100003FC4(&qword_100050E58);
        *v175 = v1;
        v175[1] = sub_1000174F0;
        return withCheckedContinuation<A>(isolation:function:_:)(*(_QWORD *)(v1 + 48), 0, 0, 0xD000000000000011, 0x8000000100049C00, sub_10001DADC, v174, v176);
      }
      swift_bridgeObjectRelease(v92);
    }
    v71 = swift_bridgeObjectRelease(v79);
  }
  v118 = static PeopleLogger.extension.getter(v71);
  v119 = Logger.logObject.getter(v118);
  v120 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v119, v120))
  {
    v121 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v121 = 0;
    _os_log_impl((void *)&_mh_execute_header, v119, v120, "Could not get contact for SingleContactTimelineProvider", v121, 2u);
    swift_slowDealloc(v121, -1, -1);
  }
  v122 = (uint64_t *)(v1 + 120);
  v123 = *(_QWORD *)(v1 + 272);
  v124 = *(_QWORD *)(v1 + 256);

  v125 = v15(v123, v124);
  v126 = static OSSignpostID.exclusive.getter(v125);
  v127 = OSSignposter.logHandle.getter(v126);
  v128 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v129 = *(_QWORD *)(v1 + 120);
    v122 = (uint64_t *)(v1 + 112);
    v130 = *(_QWORD *)(v1 + 96);
    v131 = *(_QWORD *)(v1 + 104);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v131 + 16))(*(_QWORD *)(v1 + 112), v129, v130);
    v132 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v132 = 0;
    v133 = OSSignpostID.rawValue.getter(v132);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v127, v128, v133, "getTimeline", "no contact", v132, 2u);
    swift_slowDealloc(v132, -1, -1);

    v134 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
    v134(v129, v130);
  }
  else
  {
    v135 = *(_QWORD *)(v1 + 104);

    v134 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
  }
  v136 = *v122;
  v137 = *(_QWORD *)(v1 + 224);
  v139 = *(_QWORD *)(v1 + 144);
  v138 = *(_QWORD *)(v1 + 152);
  v196 = *(_QWORD *)(v1 + 136);
  v140 = *(_QWORD *)(v1 + 88);
  v141 = *(_QWORD *)(v1 + 80);
  v142 = *(_QWORD *)(v1 + 56);
  v134(v136, *(_QWORD *)(v1 + 96));
  v143 = sub_100003FC4(&qword_100050E50);
  v144 = (int *)type metadata accessor for SingleContactTimelineEntry(0);
  v145 = *((_QWORD *)v144 - 1);
  v146 = *(_QWORD *)(v145 + 72);
  v147 = *(unsigned __int8 *)(v145 + 80);
  v148 = (v147 + 32) & ~v147;
  v149 = swift_allocObject(v143, v148 + v146, v147 | 7);
  *(_OWORD *)(v149 + 16) = xmmword_100040770;
  v150 = v149 + v148;
  Date.init()(v149);
  v199(v150 + v144[5], v142, v137);
  v151 = v150 + v144[6];
  v152 = type metadata accessor for PersonInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v152 - 8) + 56))(v151, 1, 1, v152);
  v153 = type metadata accessor for TimelineEntryRelevance(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 56))(v140, 1, 1, v153);
  v154 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v139 + 32))(v150, v138, v196);
  *(_BYTE *)(v150 + v144[7]) = 0;
  UUID.init()(v154);
  v155 = sub_100004F98(v140, v150 + v144[9], &qword_100050778);
  *(_BYTE *)(v150 + v144[10]) = 0;
  static TimelineReloadPolicy.never.getter(v155);
  v156 = sub_100004FDC(&qword_100050E00, type metadata accessor for SingleContactTimelineEntry, (uint64_t)&unk_100040B28);
  Timeline.init(entries:policy:)(v149, v141, v144, v156);
  v157 = *(_QWORD *)(v1 + 328);
  v158 = *(_QWORD *)(v1 + 304);
  v160 = *(_QWORD *)(v1 + 288);
  v159 = *(_QWORD *)(v1 + 296);
  v162 = *(_QWORD *)(v1 + 272);
  v161 = *(_QWORD *)(v1 + 280);
  v164 = *(_QWORD *)(v1 + 240);
  v163 = *(_QWORD *)(v1 + 248);
  v165 = *(_QWORD *)(v1 + 216);
  v177 = *(_QWORD *)(v1 + 208);
  v178 = *(_QWORD *)(v1 + 200);
  v180 = *(_QWORD *)(v1 + 192);
  *(_QWORD *)typea = *(_QWORD *)(v1 + 184);
  v184 = *(_QWORD *)(v1 + 160);
  v187 = *(_QWORD *)(v1 + 152);
  loga = *(os_log_t *)(v1 + 128);
  v194 = *(_QWORD *)(v1 + 120);
  v197 = *(_QWORD *)(v1 + 112);
  v201 = *(id *)(v1 + 88);
  v205 = *(_QWORD *)(v1 + 80);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 320) + 8))(v157, *(_QWORD *)(v1 + 312));
  swift_task_dealloc(v157);
  swift_task_dealloc(v158);
  swift_task_dealloc(v159);
  swift_task_dealloc(v160);
  swift_task_dealloc(v161);
  swift_task_dealloc(v162);
  swift_task_dealloc(v163);
  swift_task_dealloc(v164);
  swift_task_dealloc(v165);
  swift_task_dealloc(v177);
  swift_task_dealloc(v178);
  swift_task_dealloc(v180);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(v184);
  swift_task_dealloc(v187);
  swift_task_dealloc(loga);
  swift_task_dealloc(v194);
  swift_task_dealloc(v197);
  swift_task_dealloc(v201);
  swift_task_dealloc(v205);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000174F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 352);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 336);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 360));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100017558, 0, 0);
}

uint64_t sub_100017558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 128);

  sub_100004EE0(v1, &qword_1000506C8);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 280);
  v9 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 192);
  v15 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 120);
  v20 = *(_QWORD *)(v0 + 112);
  v21 = *(_QWORD *)(v0 + 88);
  v22 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 320) + 8))(v2, *(_QWORD *)(v0 + 312));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000176C0()
{
  return swift_task_switch(sub_1000176D4, 0, 0);
}

uint64_t sub_1000176D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0[2] = static PeopleConstants.singleContactWidgetKind.getter();
  v0[3] = v1;
  v2 = type metadata accessor for MainActor(0);
  v0[4] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_100008020, v3, v4);
}

uint64_t sub_100017744(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  id v43;
  _QWORD *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  _OWORD v78[8];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v58 = a8;
  v68 = a7;
  v67 = a6;
  v56 = a5;
  v55 = a4;
  v70 = a3;
  v57 = a1;
  v59 = a10;
  v77 = type metadata accessor for OSSignposter(0);
  v73 = *(_QWORD *)(v77 - 8);
  v63 = *(_QWORD *)(v73 + 64);
  __chkstk_darwin(v77);
  v76 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100003FC4(&qword_100050E60);
  v71 = *(_QWORD *)(v75 - 8);
  v60 = *(_QWORD *)(v71 + 64);
  __chkstk_darwin(v75);
  v74 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for TimelineProviderContext(0);
  v69 = *(_QWORD *)(v72 - 8);
  v14 = *(_QWORD *)(v69 + 64);
  __chkstk_darwin(v72);
  v53 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003FC4(&qword_1000506C8);
  v54 = *(_QWORD *)(v15 - 8);
  v16 = *(_QWORD *)(v54 + 64);
  __chkstk_darwin(v15);
  v51 = (uint64_t)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SelectPerson(0);
  v18 = *(_QWORD *)(v17 - 8);
  v50 = v17;
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17);
  v52 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100011C0C(a2 + 80, (uint64_t)&v80);
  v65 = v81;
  v66 = v82;
  v64 = sub_10001190C(&v80, v81);
  v20 = objc_msgSend(v70, "identifier");
  v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v61 = v21;

  sub_10001DB10(a2, (uint64_t)v78);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v55, v17);
  sub_100012534(v56, (uint64_t)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_1000506C8);
  v22 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))((char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v58, v72);
  v23 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v74, v57, v75);
  v24 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v76, v59, v77);
  v25 = *(unsigned __int8 *)(v18 + 80);
  v26 = (v25 + 160) & ~v25;
  v27 = *(unsigned __int8 *)(v54 + 80);
  v28 = (v19 + v27 + v26) & ~v27;
  v29 = (v16 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(unsigned __int8 *)(v22 + 80);
  v32 = (v31 + v30 + 8) & ~v31;
  v33 = *(unsigned __int8 *)(v23 + 80);
  v34 = (v14 + v33 + v32) & ~v33;
  v35 = *(unsigned __int8 *)(v24 + 80);
  v36 = (v60 + v35 + v34) & ~v35;
  v37 = swift_allocObject(&unk_10004E228, v36 + v63, v25 | v31 | v27 | v33 | v35 | 7);
  v38 = v78[7];
  *(_OWORD *)(v37 + 112) = v78[6];
  *(_OWORD *)(v37 + 128) = v38;
  v39 = v79;
  v40 = v78[3];
  *(_OWORD *)(v37 + 48) = v78[2];
  *(_OWORD *)(v37 + 64) = v40;
  v41 = v78[5];
  *(_OWORD *)(v37 + 80) = v78[4];
  *(_OWORD *)(v37 + 96) = v41;
  v42 = v78[1];
  *(_OWORD *)(v37 + 16) = v78[0];
  *(_OWORD *)(v37 + 32) = v42;
  v43 = v70;
  *(_QWORD *)(v37 + 144) = v39;
  *(_QWORD *)(v37 + 152) = v43;
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v37 + v26, v52, v50);
  sub_100004F98(v51, v37 + v28, &qword_1000506C8);
  v44 = (_QWORD *)(v37 + v29);
  v45 = v68;
  *v44 = v67;
  v44[1] = v45;
  *(double *)(v37 + v30) = a9;
  (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(v37 + v32, v53, v72);
  (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v37 + v34, v74, v75);
  (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v37 + v36, v76, v77);
  v46 = v43;
  swift_bridgeObjectRetain(v45);
  v47 = v61;
  StatusProviderProtocol.fetchStatus(for:completion:)(v62, v61, sub_10001DD5C, v37, v65, v66);
  swift_release(v37);
  swift_bridgeObjectRelease(v47);
  return sub_10000D160(&v80);
}

uint64_t sub_100017C80(uint64_t a1, int a2, char *a3, void *a4, uint64_t a5, uint64_t a6, char *a7, char *a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (**v48)(char *, uint64_t (*)(char *, char *, uint64_t), uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (**v88)(char *, uint64_t (*)(char *, char *, uint64_t), uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  uint64_t v134;
  double v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  NSObject *v155;
  os_signpost_type_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint8_t *v161;
  os_signpost_id_t v162;
  void (*v163)(char *, uint64_t);
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t (*v175)(char *, char *, uint64_t);
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  id v185;
  uint64_t v186;
  void (**v187)(char *, uint64_t (*)(char *, char *, uint64_t), uint64_t);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  double v216;
  double v217;
  char v218[8];
  uint64_t v219;
  void *v220;

  v183 = a8;
  v193 = a7;
  v191 = (char *)a6;
  v194 = a5;
  v185 = a4;
  v215 = a3;
  LODWORD(v199) = a2;
  v216 = *(double *)&a1;
  v213 = a11;
  v214 = a12;
  v196 = a10;
  v13 = sub_100003FC4(&qword_100050E68);
  __chkstk_darwin(v13);
  v177 = (char *)&v165 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003FC4(&qword_100050778);
  __chkstk_darwin(v15);
  v178 = (char *)&v165 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003FC4(&qword_1000506C8);
  __chkstk_darwin(v17);
  v173 = (uint64_t)&v165 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003FC4(&qword_100050690);
  __chkstk_darwin(v19);
  v176 = (char *)&v165 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = type metadata accessor for SelectPerson(0);
  v174 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v184 = (char *)&v165 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for ContactFormatter.Style(0);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v171 = (char *)&v165 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = type metadata accessor for Person(0);
  v187 = *(void (***)(char *, uint64_t (*)(char *, char *, uint64_t), uint64_t))(v188 - 8);
  v23 = __chkstk_darwin(v188);
  v172 = (char *)&v165 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v175 = (uint64_t (*)(char *, char *, uint64_t))((char *)&v165 - v25);
  v198 = type metadata accessor for OSSignpostID(0);
  v197 = *(_QWORD *)(v198 - 8);
  v26 = __chkstk_darwin(v198);
  v179 = (char *)&v165 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v212 = (char *)&v165 - v28;
  v29 = type metadata accessor for PeopleAnalytics.WidgetSize(0);
  v210 = *(_QWORD *)(v29 - 8);
  v211 = v29;
  __chkstk_darwin(v29);
  v209 = (char *)&v165 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = type metadata accessor for WidgetFamily(0);
  v205 = *(_QWORD *)(v207 - 8);
  __chkstk_darwin(v207);
  v203 = (char *)&v165 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = type metadata accessor for PeopleAnalytics.WidgetType(0);
  v206 = *(_QWORD *)(v208 - 8);
  __chkstk_darwin(v208);
  v204 = (char *)&v165 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = type metadata accessor for Logger(0);
  v189 = *(_QWORD *)(v190 - 8);
  v33 = __chkstk_darwin(v190);
  v165 = (char *)&v165 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v36 = (char *)&v165 - v35;
  v37 = sub_100003FC4(&qword_100050A20);
  v38 = __chkstk_darwin(v37);
  v168 = (uint64_t)&v165 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v167 = (char *)&v165 - v40;
  v41 = sub_100003FC4(&qword_100050A28);
  __chkstk_darwin(v41);
  v166 = (char *)&v165 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for TimelineReloadPolicy(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = __chkstk_darwin(v43);
  v192 = (char *)&v165 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v48 = (void (**)(char *, uint64_t (*)(char *, char *, uint64_t), uint64_t))((char *)&v165 - v47);
  v49 = sub_100003FC4(&qword_100050A30);
  v50 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v52 = (char *)&v165 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for Date(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v165 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100003FC4(&qword_100050E70);
  v55 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v57 = (char *)&v165 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = sub_100003FC4(&qword_100050E58);
  v201 = *(_QWORD *)(v202 - 8);
  v58 = __chkstk_darwin(v202);
  __chkstk_darwin(v58);
  v195 = (char *)&v165 - v59;
  v200 = v60;
  if ((v199 & 1) != 0)
  {
    v89 = *(_QWORD *)&v216;
    v217 = v216;
    swift_errorRetain(*(_QWORD *)&v216);
    v90 = sub_100003FC4(&qword_100050A40);
    v91 = swift_willThrowTypedImpl(&v217, v90, &protocol self-conformance witness table for Error);
    v92 = v165;
    static PeopleLogger.extension.getter(v91);
    swift_errorRetain(v89);
    Logger.ifError(_:message:)(v89, 0xD000000000000021, 0x8000000100049C20);
    sub_100011B2C(v89, 1);
    (*(void (**)(char *, uint64_t))(v189 + 8))(v92, v190);
    v93 = v171;
    (*(void (**)(char *, _QWORD, uint64_t))(v169 + 104))(v171, enum case for ContactFormatter.Style.shortName(_:), v170);
    v94 = v185;
    v95 = String.localized.getter(0x656D614E206F4ELL, 0xE700000000000000);
    v97 = v96;
    v219 = type metadata accessor for ContactFormatter(0);
    v220 = &protocol witness table for ContactFormatter;
    sub_100004F2C(&v217);
    ContactFormatter.init(style:fallback:)(v93, v95, v97);
    v98 = v175;
    Person.init(from:statuses:contactFormatter:)(v94, &_swiftEmptyArrayStorage, &v217);
    v99 = sub_100003FC4(&qword_100050E50);
    v100 = (int *)type metadata accessor for SingleContactTimelineEntry(0);
    v101 = *((_QWORD *)v100 - 1);
    v102 = *(_QWORD *)(v101 + 72);
    v103 = *(unsigned __int8 *)(v101 + 80);
    v104 = (v103 + 32) & ~v103;
    v105 = swift_allocObject(v99, v104 + v102, v103 | 7);
    v199 = v105;
    *(_OWORD *)(v105 + 16) = xmmword_100040770;
    v106 = v105 + v104;
    v107 = v180;
    Date.init()(v105);
    v108 = v174;
    v109 = v194;
    (*(void (**)(char *, uint64_t, uint64_t))(v174 + 16))(v184, v194, v186);
    v110 = v172;
    v187[2](v172, v98, v188);
    v111 = v173;
    sub_100012534((uint64_t)v191, v173, &qword_1000506C8);
    v112 = (uint64_t)v176;
    PersonInfo.init(person:contactImage:)(v110, v111);
    v113 = type metadata accessor for PersonInfo(0);
    v114 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v112, 0, 1, v113);
    v115 = (uint64_t)v178;
    static PeopleWidgetConstants.minimumTimelineRelevance.getter(v114);
    v116 = type metadata accessor for TimelineEntryRelevance(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v115, 0, 1, v116);
    v117 = (uint64_t)v177;
    static PeopleWidgetVerticalLayoutToggleKind.getVerticalToggleKind(from:)(v193, v183);
    LOBYTE(v111) = sub_1000277AC(v98, v109, v117);
    sub_100004EE0(v117, &qword_100050E68);
    (*(void (**)(uint64_t, char *, uint64_t))(v181 + 32))(v106, v107, v182);
    (*(void (**)(uint64_t, char *, uint64_t))(v108 + 32))(v106 + v100[5], v184, v186);
    v118 = sub_100004F98(v112, v106 + v100[6], &qword_100050690);
    *(_BYTE *)(v106 + v100[7]) = 0;
    UUID.init()(v118);
    v119 = sub_100004F98(v115, v106 + v100[9], &qword_100050778);
    *(_BYTE *)(v106 + v100[10]) = v111 & 1;
    v120 = v192;
    static TimelineReloadPolicy.never.getter(v119);
    v121 = sub_100004FDC(&qword_100050E00, type metadata accessor for SingleContactTimelineEntry, (uint64_t)&unk_100040B28);
    v122 = v195;
    Timeline.init(entries:policy:)(v199, v120, v100, v121);
    sub_100011B2C(*(uint64_t *)&v216, 1);
    ((void (*)(uint64_t (*)(char *, char *, uint64_t), uint64_t))v187[1])(v98, v188);
  }
  else
  {
    v186 = v55;
    v187 = v48;
    v188 = v44;
    v199 = v43;
    v184 = v36;
    v61 = *(_QWORD *)&v216;
    v62 = swift_bridgeObjectRetain(*(_QWORD *)&v216);
    v63 = sub_100006F80(v62);
    v64 = sub_100011B2C(v61, 0);
    v65 = v180;
    v66 = Date.init()(v64);
    static PeopleConstants.timelineEntryDuration.getter(v66);
    dispatch thunk of StatusPrioritizer.timeline(statuses:fromDate:interval:lockScreenCircular:)(v63, v65, v52, 0);
    swift_bridgeObjectRelease(v63);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v49);
    v67 = v181;
    v68 = *(void (**)(char *, uint64_t))(v181 + 8);
    v69 = v182;
    v68(v65, v182);
    v70 = StatusPrioritizer.TimeLine.entries.getter(v54);
    __chkstk_darwin(v70);
    v71 = (char *)v194;
    *(&v165 - 6) = (char *)v185;
    *(&v165 - 5) = v71;
    v72 = v215;
    *(&v165 - 4) = v191;
    *(&v165 - 3) = v72;
    v73 = v183;
    *(&v165 - 2) = v193;
    *(&v165 - 1) = v73;
    v74 = sub_100014A8C((void (*)(uint64_t))sub_10001DE94, (uint64_t)(&v165 - 8), v70);
    swift_bridgeObjectRelease(v70);
    v75 = (uint64_t)v167;
    v215 = v57;
    v216 = *(double *)&v54;
    StatusPrioritizer.TimeLine.reloadDate.getter(v54);
    v76 = v168;
    sub_100012534(v75, v168, &qword_100050A20);
    v77 = 1;
    v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v76, 1, v69);
    v79 = v65;
    v80 = v166;
    if (v78 != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v79, v76, v69);
      static TimelineReloadPolicy.after(_:)(v79);
      v68(v79, v69);
      v77 = 0;
    }
    v81 = v188;
    v82 = v77;
    v83 = v199;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v188 + 56))(v80, v82, 1, v199);
    sub_100004EE0(v75, &qword_100050A20);
    v84 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48))(v80, 1, v83);
    v85 = v195;
    v86 = v192;
    v87 = (uint64_t)v80;
    v88 = v187;
    if (v84 == 1)
    {
      static TimelineReloadPolicy.atEnd.getter();
      sub_100004EE0(v87, &qword_100050A28);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))((char *)v187, v87, v83);
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v81 + 16))(v86, v88, v83);
    v123 = type metadata accessor for SingleContactTimelineEntry(0);
    v124 = sub_100004FDC(&qword_100050E00, type metadata accessor for SingleContactTimelineEntry, (uint64_t)&unk_100040B28);
    v125 = swift_bridgeObjectRetain(v74);
    v126 = Timeline.init(entries:policy:)(v125, v86, v123, v124);
    v127 = Date.init()(v126);
    v128 = Date.timeIntervalSinceReferenceDate.getter(v127);
    v129 = ((uint64_t (*)(char *, uint64_t))v68)(v79, v69);
    v130 = v184;
    static PeopleLogger.extension.getter(v129);
    v131 = swift_bridgeObjectRetain(v74);
    v132 = Logger.logObject.getter(v131);
    v133 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v132, v133))
    {
      v134 = swift_slowAlloc(22, -1);
      *(_DWORD *)v134 = 134349312;
      v135 = *((double *)v74 + 2);
      swift_bridgeObjectRelease(v74);
      v217 = v135;
      v88 = v187;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218, v134 + 4, v134 + 12);
      swift_bridgeObjectRelease(v74);
      *(_WORD *)(v134 + 12) = 2048;
      v217 = v128 - a9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218, v134 + 14, v134 + 22);
      _os_log_impl((void *)&_mh_execute_header, v132, v133, "Single contact timeline created with %{public}ld entries elasped %f", (uint8_t *)v134, 0x16u);
      swift_slowDealloc(v134, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v74, 2);
    }
    v137 = v215;
    v136 = *(_QWORD *)&v216;
    v138 = v186;
    (*(void (**)(char *, uint64_t))(v189 + 8))(v130, v190);
    (*(void (**)(void (**)(char *, uint64_t (*)(char *, char *, uint64_t), uint64_t), uint64_t))(v188 + 8))(v88, v199);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v137, v136);
    v122 = v85;
  }
  type metadata accessor for PeopleAnalytics(0);
  v139 = v206;
  v140 = v204;
  v141 = v208;
  (*(void (**)(char *, _QWORD, uint64_t))(v206 + 104))(v204, enum case for PeopleAnalytics.WidgetType.single(_:), v208);
  v142 = v202;
  v143 = Timeline.entries.getter(v202);
  v144 = *(_QWORD *)(v143 + 16);
  v145 = swift_bridgeObjectRelease(v143);
  v146 = v203;
  v147 = TimelineProviderContext.family.getter(v145);
  v148 = v209;
  WidgetFamily.analyticSize.getter(v147);
  (*(void (**)(char *, uint64_t))(v205 + 8))(v146, v207);
  static PeopleAnalytics.logTimelineEntries(_:entries:contacts:widgetSize:)(v140, v144, 1, v148);
  (*(void (**)(char *, uint64_t))(v210 + 8))(v148, v211);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v140, v141);
  v149 = v201;
  v150 = v200;
  (*(void (**)(uint64_t, char *, uint64_t))(v201 + 16))(v200, v122, v142);
  v151 = sub_100003FC4(&qword_100050E60);
  v152 = CheckedContinuation.resume(returning:)(v150, v151);
  v153 = v212;
  v154 = static OSSignpostID.exclusive.getter(v152);
  v155 = OSSignposter.logHandle.getter(v154);
  v156 = static os_signpost_type_t.event.getter();
  v157 = v122;
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v158 = v197;
    v159 = v179;
    v160 = v198;
    (*(void (**)(char *, char *, uint64_t))(v197 + 16))(v179, v153, v198);
    v161 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v161 = 0;
    v162 = OSSignpostID.rawValue.getter(v161);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v155, v156, v162, "getTimeline", "Completed", v161, 2u);
    swift_slowDealloc(v161, -1, -1);

    v163 = *(void (**)(char *, uint64_t))(v158 + 8);
    v163(v153, v160);
    (*(void (**)(char *, uint64_t))(v149 + 8))(v157, v142);
    return ((uint64_t (*)(char *, uint64_t))v163)(v159, v160);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v197 + 8))(v153, v198);
    return (*(uint64_t (**)(char *, uint64_t))(v149 + 8))(v122, v142);
  }
}

uint64_t sub_100018D68@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  _QWORD v93[5];

  v83 = a7;
  v82 = a6;
  v81 = a5;
  v77 = a4;
  v12 = sub_100003FC4(&qword_100050E68);
  __chkstk_darwin(v12);
  v80 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003FC4(&qword_100050778);
  __chkstk_darwin(v14);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003FC4(&qword_1000506C8);
  __chkstk_darwin(v17);
  v72 = (uint64_t)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003FC4(&qword_100050690);
  __chkstk_darwin(v19);
  v79 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for SelectPerson(0);
  v87 = *(_QWORD *)(v21 - 8);
  v88 = v21;
  __chkstk_darwin(v21);
  v86 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for Date(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v73 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for ContactFormatter.Style(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Person(0);
  v84 = *(_QWORD *)(v26 - 8);
  v85 = v26;
  v27 = __chkstk_darwin(v26);
  v71 = (char *)&v62 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v74 = (uint64_t (*)(char *, char *, uint64_t))((char *)&v62 - v30);
  v78 = a1;
  v31 = StatusPrioritizer.TimeLineEntrySingleItem.statuses.getter(v29);
  v32 = *(_QWORD *)(v31 + 16);
  if (v32)
  {
    v64 = v25;
    v65 = a2;
    v66 = a3;
    v67 = v16;
    v68 = a8;
    v63 = v31;
    v33 = v31 + 32;
    v34 = (char *)&_swiftEmptyArrayStorage;
    do
    {
      sub_100011C0C(v33, (uint64_t)v93);
      sub_100011C0C((uint64_t)v93, (uint64_t)&v92);
      v35 = sub_100003FC4(&qword_100050A58);
      v36 = sub_100003FC4(&qword_100050A60);
      if ((swift_dynamicCast(&v89, &v92, v35, v36, 6) & 1) == 0)
      {
        v91 = 0;
        v89 = 0u;
        v90 = 0u;
      }
      sub_10000D160(v93);
      if (*((_QWORD *)&v90 + 1))
      {
        sub_100004F70(&v89, (uint64_t)&v92);
        sub_100004F70(&v92, (uint64_t)&v89);
        if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
          v34 = sub_10000F470(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
        v38 = *((_QWORD *)v34 + 2);
        v37 = *((_QWORD *)v34 + 3);
        if (v38 >= v37 >> 1)
          v34 = sub_10000F470((char *)(v37 > 1), v38 + 1, 1, v34);
        *((_QWORD *)v34 + 2) = v38 + 1;
        sub_100004F70(&v89, (uint64_t)&v34[40 * v38 + 32]);
      }
      else
      {
        sub_100004EE0((uint64_t)&v89, &qword_100050A68);
      }
      v33 += 40;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease(v63);
    a8 = v68;
    v39 = (uint64_t)v67;
    v40 = v66;
    a2 = v65;
    v25 = v64;
  }
  else
  {
    swift_bridgeObjectRelease(v31);
    v34 = (char *)&_swiftEmptyArrayStorage;
    v39 = (uint64_t)v16;
    v40 = a3;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v25, enum case for ContactFormatter.Style.shortName(_:), v70);
  v41 = String.localized.getter(0x656D614E206F4ELL, 0xE700000000000000);
  v43 = v42;
  v93[3] = type metadata accessor for ContactFormatter(0);
  v93[4] = &protocol witness table for ContactFormatter;
  sub_100004F2C(v93);
  ContactFormatter.init(style:fallback:)(v25, v41, v43);
  v44 = a2;
  v45 = v74;
  v46 = Person.init(from:statuses:contactFormatter:)(v44, v34, v93);
  v47 = v73;
  StatusPrioritizer.TimeLineEntrySingleItem.date.getter(v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v86, v40, v88);
  v48 = v71;
  (*(void (**)(char *, uint64_t (*)(char *, char *, uint64_t), uint64_t))(v84 + 16))(v71, v45, v85);
  v49 = v72;
  sub_100012534(v77, v72, &qword_1000506C8);
  v50 = v40;
  v51 = (uint64_t)v79;
  PersonInfo.init(person:contactImage:)(v48, v49);
  v52 = type metadata accessor for PersonInfo(0);
  v53 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v51, 0, 1, v52);
  v54 = StatusPrioritizer.TimeLineEntrySingleItem.score.getter(v53);
  v55 = static PeopleWidgetConstants.adjustmentForWidgetSuggester.getter() + v54;
  v56 = StatusPrioritizer.TimeLineEntrySingleItem.duration.getter();
  TimelineEntryRelevance.init(score:duration:)(v55, v56);
  v57 = type metadata accessor for TimelineEntryRelevance(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v39, 0, 1, v57);
  v58 = (uint64_t)v80;
  static PeopleWidgetVerticalLayoutToggleKind.getVerticalToggleKind(from:)(v82, v83);
  LOBYTE(v49) = sub_1000277AC(v45, v50, v58);
  sub_100004EE0(v58, &qword_100050E68);
  (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(a8, v47, v76);
  v59 = (int *)type metadata accessor for SingleContactTimelineEntry(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v87 + 32))(a8 + v59[5], v86, v88);
  v60 = sub_100004F98(v51, a8 + v59[6], &qword_100050690);
  *(_BYTE *)(a8 + v59[7]) = 0;
  UUID.init()(v60);
  sub_100004F98(v39, a8 + v59[9], &qword_100050778);
  *(_BYTE *)(a8 + v59[10]) = v49 & 1;
  return (*(uint64_t (**)(uint64_t (*)(char *, char *, uint64_t), uint64_t))(v84 + 8))(v45, v85);
}

uint64_t sub_100019454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  Date.init()(a1);
  v3 = (int *)type metadata accessor for SingleContactTimelineEntry(0);
  SelectPerson.init()();
  v4 = a2 + v3[6];
  v5 = type metadata accessor for PersonInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + v3[9];
  v7 = type metadata accessor for TimelineEntryRelevance(0);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_BYTE *)(a2 + v3[7]) = 1;
  result = UUID.init()(v8);
  *(_BYTE *)(a2 + v3[10]) = 0;
  return result;
}

uint64_t sub_10001950C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100050E7C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001259C;
  return sub_100014BF8(a1, a2);
}

uint64_t sub_10001956C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_100050E34);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001259C;
  return sub_100016554(a1, a2, a3);
}

uint64_t sub_1000195D4(uint64_t a1, uint64_t a2)
{
  return sub_10001D8E0(a1, a2, 0x8000000100049BD0);
}

uint64_t sub_1000195F8(uint64_t a1, uint64_t a2)
{
  return sub_10001D8E0(a1, a2, 0x8000000100049BB0);
}

uint64_t sub_10001961C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to AppIntentTimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100009E00;
  return AppIntentTimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_100019688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to AppIntentTimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001259C;
  return AppIntentTimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_1000196F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_10001972C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100012534(v2 + *(int *)(a1 + 36), a2, &qword_100050778);
}

uint64_t sub_100019754(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100042250, 1);
}

uint64_t sub_100019764@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  int v35;
  uint8_t *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v2 = v1;
  v65 = a1;
  v3 = type metadata accessor for SingleContactWidgetEntryView(0);
  __chkstk_darwin(v3);
  v61 = (uint64_t)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for Logger(0);
  v60 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v62 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003FC4(&qword_100050690);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v54 - v10;
  v12 = type metadata accessor for Person(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v54 - v17;
  v19 = type metadata accessor for SingleContactTimelineEntry(0);
  v20 = *(int *)(v19 + 24);
  v63 = v2;
  sub_100012534(v2 + v20, (uint64_t)v11, &qword_100050690);
  v21 = type metadata accessor for PersonInfo(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v11, 1, v21);
  if ((_DWORD)v24 == 1)
  {
    v57 = v21;
    v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v23;
    v55 = v22;
    v56 = v16;
    v59 = v9;
    v26 = v64;
    v25 = v65;
    v27 = sub_100004EE0((uint64_t)v11, &qword_100050690);
    v28 = v63;
    if ((*(_BYTE *)(v63 + *(int *)(v19 + 28)) & 1) == 0)
    {
      v29 = v19;
      v30 = v62;
      static PeopleLogger.extension.getter(v27);
      v31 = v28;
      v32 = v61;
      v33 = sub_100004E9C(v31, v61, type metadata accessor for SingleContactWidgetEntryView);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, (os_log_type_t)v35))
      {
        LODWORD(v63) = v35;
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v54 = swift_slowAlloc(32, -1);
        v67 = v54;
        v37 = v36;
        *(_DWORD *)v36 = 136315138;
        v38 = (uint64_t)v59;
        sub_100012534(v32 + *(int *)(v29 + 24), (uint64_t)v59, &qword_100050690);
        v39 = v57;
        v40 = v58(v38, 1, v57);
        v41 = v60;
        if ((_DWORD)v40 == 1)
        {
          sub_100004EE0(v38, &qword_100050690);
          v42 = 0xE100000000000000;
          v43 = 45;
        }
        else
        {
          v47 = v56;
          PersonInfo.person.getter(v40);
          v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v38, v39);
          v49 = (void *)Person.contact.getter(v48);
          (*(void (**)(char *, uint64_t))(v13 + 8))(v47, v12);
          v50 = objc_msgSend(v49, "identifier");

          v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
          v42 = v51;

        }
        v66 = sub_10001CBB4(v43, v42, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v37 + 4, v37 + 12);
        swift_bridgeObjectRelease(v42);
        sub_10000501C(v61, type metadata accessor for SingleContactWidgetEntryView);
        _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v63, "contact not found for identifier: %s", v37, 0xCu);
        v45 = 1;
        v52 = v54;
        swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v37, -1, -1);

        (*(void (**)(char *, uint64_t))(v41 + 8))(v62, v64);
        goto LABEL_11;
      }
      sub_10000501C(v32, type metadata accessor for SingleContactWidgetEntryView);

      (*(void (**)(char *, uint64_t))(v60 + 8))(v30, v26);
    }
    v45 = 1;
LABEL_11:
    v46 = v25;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v46, v45, 1, v12);
  }
  PersonInfo.person.getter(v24);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v21);
  v44 = v65;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v65, v18, v12);
  v45 = 0;
  v46 = v44;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v46, v45, 1, v12);
}

uint64_t sub_100019BE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t OpaqueTypeConformance2;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  __int128 v150;
  double v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t KeyPath;
  uint64_t v182;
  char *v183;
  int *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  __int128 v200;
  double v201;
  double v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  __int128 v215;
  double v216;
  double v217;
  double v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  __int128 v229;
  double v230;
  double v231;
  double v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  __int128 v243;
  double v244;
  double v245;
  double v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  char *v290;
  char *v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  char *v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _OWORD v327[2];
  char v328;
  _OWORD v329[2];
  char v330;
  _OWORD v331[2];
  char v332;
  _OWORD v333[2];
  char v334;
  _BYTE v335[40];
  _BYTE v336[40];
  __int128 v337;
  __int128 v338;
  char v339;
  _QWORD v340[6];

  v326 = a1;
  v324 = sub_100003FC4(&qword_100050CB0);
  __chkstk_darwin(v324);
  v325 = (uint64_t)&v263 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v310 = type metadata accessor for SingleContactSmallWidgetView(0);
  __chkstk_darwin(v310);
  v311 = (char *)&v263 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003FC4(&qword_100050CB8);
  v293 = *(_QWORD *)(v4 - 8);
  v294 = v4;
  __chkstk_darwin(v4);
  v292 = (char *)&v263 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v316 = sub_100003FC4(&qword_100050CC0);
  v6 = __chkstk_darwin(v316);
  v291 = (char *)&v263 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v295 = (uint64_t)&v263 - v8;
  v314 = sub_100003FC4(&qword_100050CC8);
  __chkstk_darwin(v314);
  v315 = (uint64_t)&v263 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for QuickActionAppHandle(0);
  v270 = *(_QWORD *)(v10 - 8);
  v271 = v10;
  __chkstk_darwin(v10);
  v263 = (char *)&v263 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003FC4(&qword_100050CD0);
  v13 = __chkstk_darwin(v12);
  v265 = (char *)&v263 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v267 = (char *)&v263 - v15;
  v286 = type metadata accessor for SingleContactQuickActionWidgetView(0);
  __chkstk_darwin(v286);
  v287 = (char *)&v263 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003FC4(&qword_100050CD8);
  v274 = *(_QWORD *)(v17 - 8);
  v275 = v17;
  __chkstk_darwin(v17);
  v273 = (char *)&v263 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v272 = sub_100003FC4(&qword_100050CE0);
  __chkstk_darwin(v272);
  v277 = (char *)&v263 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v276 = sub_100003FC4(&qword_100050CE8);
  __chkstk_darwin(v276);
  v279 = (uint64_t)&v263 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v278 = sub_100003FC4(&qword_100050CF0);
  __chkstk_darwin(v278);
  v281 = (uint64_t)&v263 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v312 = sub_100003FC4(&qword_100050CF8);
  v22 = __chkstk_darwin(v312);
  v280 = (uint64_t)&v263 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v282 = (uint64_t)&v263 - v24;
  v317 = type metadata accessor for SingleContactWidgetEntryView(0);
  __chkstk_darwin(v317);
  v301 = (uint64_t)&v263 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v323 = sub_100003FC4(&qword_100050D00);
  __chkstk_darwin(v323);
  v313 = (char *)&v263 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v321 = sub_100003FC4(&qword_100050D08);
  __chkstk_darwin(v321);
  v322 = (uint64_t)&v263 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for ContainerBackgroundPlacement(0);
  v308 = *(_QWORD *)(v28 - 8);
  v309 = v28;
  __chkstk_darwin(v28);
  v307 = (char *)&v263 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100003FC4(&qword_100050D10);
  v31 = __chkstk_darwin(v30);
  v289 = (uint64_t)&v263 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v268 = (uint64_t)&v263 - v34;
  __chkstk_darwin(v33);
  v36 = (char *)&v263 - v35;
  v37 = sub_100003FC4(&qword_100050688);
  v38 = __chkstk_darwin(v37);
  v290 = (char *)&v263 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v288 = (char *)&v263 - v41;
  v42 = __chkstk_darwin(v40);
  v269 = (char *)&v263 - v43;
  v44 = __chkstk_darwin(v42);
  v266 = (char *)&v263 - v45;
  v46 = __chkstk_darwin(v44);
  v264 = (char *)&v263 - v47;
  v48 = __chkstk_darwin(v46);
  v283 = (uint64_t)&v263 - v49;
  v50 = __chkstk_darwin(v48);
  v296 = (char *)&v263 - v51;
  __chkstk_darwin(v50);
  v300 = (char *)&v263 - v52;
  v53 = type metadata accessor for UUID(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = __chkstk_darwin(v53);
  v285 = (char *)&v263 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v55);
  v58 = (char *)&v263 - v57;
  v59 = sub_100003FC4(&qword_100050690);
  v60 = __chkstk_darwin(v59);
  v284 = (uint64_t)&v263 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v60);
  v63 = (char *)&v263 - v62;
  v297 = type metadata accessor for SingleContactSmallWidgetVerticalView(0);
  __chkstk_darwin(v297);
  v65 = (char *)&v263 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100003FC4(&qword_100050D18);
  v298 = *(_QWORD *)(v66 - 8);
  v299 = v66;
  __chkstk_darwin(v66);
  v68 = (char *)&v263 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100003FC4(&qword_100050D20);
  v304 = *(_QWORD *)(v69 - 8);
  v305 = v69;
  __chkstk_darwin(v69);
  v303 = (char *)&v263 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v318 = sub_100003FC4(&qword_100050D28);
  v71 = __chkstk_darwin(v318);
  v302 = (char *)&v263 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v71);
  v306 = (uint64_t)&v263 - v73;
  v320 = sub_100003FC4(&qword_100050D30);
  __chkstk_darwin(v320);
  v319 = (char *)&v263 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for SingleContactTimelineEntry(0);
  v76 = v75;
  if (*(_BYTE *)(v1 + *(int *)(v75 + 40)) != 1)
  {
    v309 = v53;
    v82 = v1;
    if (qword_100050550 != -1)
      swift_once(&qword_100050550, sub_10002A9E8);
    v83 = byte_100053468;
    v84 = v301;
    v85 = sub_100004E9C(v82, v301, type metadata accessor for SingleContactWidgetEntryView);
    v87 = v310;
    v86 = (uint64_t)v311;
    v88 = v309;
    if (v83 == 1)
    {
      v89 = SelectPerson.shouldShowButtons.getter(v85);
      sub_10000501C(v84, type metadata accessor for SingleContactWidgetEntryView);
      if ((v89 & 1) != 0)
      {
        sub_100012534(v82 + *(int *)(v76 + 24), v284, &qword_100050690);
        v90 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 16))(v285, v82 + *(int *)(v76 + 32), v88);
        v91 = (uint64_t)v267;
        SelectPerson.messageButton.getter(v90);
        v93 = v270;
        v92 = v271;
        v94 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v270 + 48);
        if (v94(v91, 1, v271))
        {
          sub_100004EE0(v91, &qword_100050CD0);
          v95 = type metadata accessor for URL(0);
          v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v283, 1, 1, v95);
        }
        else
        {
          v173 = v263;
          (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v263, v91, v92);
          v174 = sub_100004EE0(v91, &qword_100050CD0);
          QuickActionAppHandle.url.getter(v174);
          v96 = (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v173, v92);
        }
        v175 = (uint64_t)v265;
        SelectPerson.callButton.getter(v96);
        if (v94(v175, 1, v92))
        {
          sub_100004EE0(v175, &qword_100050CD0);
          v176 = type metadata accessor for URL(0);
          v177 = (uint64_t)v264;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v176 - 8) + 56))(v264, 1, 1, v176);
        }
        else
        {
          v178 = v263;
          (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v263, v175, v92);
          v179 = sub_100004EE0(v175, &qword_100050CD0);
          v177 = (uint64_t)v264;
          QuickActionAppHandle.url.getter(v179);
          (*(void (**)(char *, uint64_t))(v93 + 8))(v178, v92);
        }
        v180 = (uint64_t)v266;
        KeyPath = swift_getKeyPath(&unk_100040BA8);
        v182 = swift_getKeyPath(&unk_100040BD0);
        v184 = (int *)v286;
        v183 = v287;
        v185 = (uint64_t *)&v287[*(int *)(v286 + 20)];
        *v185 = v182;
        sub_100003FC4(&qword_1000506E0);
        swift_storeEnumTagMultiPayload(v185);
        *(_QWORD *)v183 = KeyPath;
        v183[8] = 0;
        sub_100004F98(v284, (uint64_t)&v183[v184[6]], &qword_100050690);
        (*(void (**)(char *, char *, uint64_t))(v54 + 32))(&v183[v184[7]], v285, v309);
        sub_100004F98(v283, (uint64_t)&v183[v184[8]], &qword_100050688);
        sub_100004F98(v177, (uint64_t)&v183[v184[9]], &qword_100050688);
        *(_QWORD *)&v183[v184[10]] = 0x3FD999999999999ALL;
        *(_QWORD *)&v183[v184[11]] = 0x3FE0000000000000;
        *(_QWORD *)&v183[v184[12]] = 0x3FF8000000000000;
        v186 = v268;
        sub_100019764(v268);
        v187 = type metadata accessor for Person(0);
        v188 = *(_QWORD *)(v187 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v188 + 48))(v186, 1, v187) == 1)
        {
          sub_100004EE0(v186, &qword_100050D10);
          v189 = type metadata accessor for URL(0);
          v190 = (uint64_t)v269;
          v191 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v189 - 8) + 56))(v269, 1, 1, v189);
        }
        else
        {
          v190 = (uint64_t)v269;
          Person.contactSearchURL.getter();
          (*(void (**)(uint64_t, uint64_t))(v188 + 8))(v186, v187);
          v192 = type metadata accessor for URL(0);
          v193 = *(_QWORD *)(v192 - 8);
          v191 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v193 + 48))(v190, 1, v192);
          if ((_DWORD)v191 != 1)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v193 + 32))(v180, v190, v192);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v193 + 56))(v180, 0, 1, v192);
            goto LABEL_30;
          }
        }
        static Person.emptyContactSearchURL.getter(v191);
        sub_100004EE0(v190, &qword_100050688);
LABEL_30:
        v194 = sub_100004FDC(&qword_100050D68, type metadata accessor for SingleContactQuickActionWidgetView, (uint64_t)&unk_100041510);
        v195 = v273;
        v196 = (uint64_t)v287;
        View.widgetURL(_:)(v180, v286, v194);
        sub_100004EE0(v180, &qword_100050688);
        v197 = sub_10000501C(v196, type metadata accessor for SingleContactQuickActionWidgetView);
        v198 = static Edge.Set.top.getter(v197);
        v199 = v82 + *(int *)(v317 + 32);
        v334 = *(_BYTE *)(v199 + 32);
        v200 = *(_OWORD *)(v199 + 16);
        v333[0] = *(_OWORD *)v199;
        v333[1] = v200;
        sub_100004F98((uint64_t)v333, (uint64_t)v335, &qword_100050D40);
        sub_10001C3F8((uint64_t)v335, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012910);
        v201 = sub_10001C21C();
        sub_10001C3F8((uint64_t)v333, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AFC);
        v202 = EdgeInsets.init(_all:)(v201 * 0.5 + 4.0);
        v204 = v203;
        v206 = v205;
        v208 = v207;
        v210 = v274;
        v209 = v275;
        v211 = (uint64_t)v277;
        (*(void (**)(char *, char *, uint64_t))(v274 + 16))(v277, v195, v275);
        v212 = v211 + *(int *)(v272 + 36);
        *(_BYTE *)v212 = v198;
        *(double *)(v212 + 8) = v202;
        *(_QWORD *)(v212 + 16) = v204;
        *(_QWORD *)(v212 + 24) = v206;
        *(_QWORD *)(v212 + 32) = v208;
        *(_BYTE *)(v212 + 40) = 0;
        v213 = (*(uint64_t (**)(char *, uint64_t))(v210 + 8))(v195, v209);
        v214 = static Edge.Set.bottom.getter(v213);
        v215 = *(_OWORD *)(v199 + 16);
        v331[0] = *(_OWORD *)v199;
        v331[1] = v215;
        v332 = *(_BYTE *)(v199 + 32);
        sub_100004F98((uint64_t)v331, (uint64_t)v336, &qword_100050D40);
        sub_10001C3F8((uint64_t)v336, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012910);
        sub_10001C21C();
        v217 = v216;
        sub_10001C3F8((uint64_t)v331, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AFC);
        v218 = EdgeInsets.init(_all:)(v217 * 0.5);
        v220 = v219;
        v222 = v221;
        v224 = v223;
        v225 = v279;
        sub_100012534(v211, v279, &qword_100050CE0);
        v226 = v225 + *(int *)(v276 + 36);
        *(_BYTE *)v226 = v214;
        *(double *)(v226 + 8) = v218;
        *(_QWORD *)(v226 + 16) = v220;
        *(_QWORD *)(v226 + 24) = v222;
        *(_QWORD *)(v226 + 32) = v224;
        *(_BYTE *)(v226 + 40) = 0;
        v227 = sub_100004EE0(v211, &qword_100050CE0);
        v228 = static Edge.Set.leading.getter(v227);
        v229 = *(_OWORD *)(v199 + 16);
        v329[0] = *(_OWORD *)v199;
        v329[1] = v229;
        v330 = *(_BYTE *)(v199 + 32);
        sub_100004F98((uint64_t)v329, (uint64_t)&v337, &qword_100050D40);
        sub_10001C3F8((uint64_t)&v337, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012910);
        sub_10001C21C();
        v231 = v230;
        sub_10001C3F8((uint64_t)v329, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AFC);
        v232 = EdgeInsets.init(_all:)(v231 * 0.5);
        v234 = v233;
        v236 = v235;
        v238 = v237;
        v239 = v281;
        sub_100012534(v225, v281, &qword_100050CE8);
        v240 = v239 + *(int *)(v278 + 36);
        *(_BYTE *)v240 = v228;
        *(double *)(v240 + 8) = v232;
        *(_QWORD *)(v240 + 16) = v234;
        *(_QWORD *)(v240 + 24) = v236;
        *(_QWORD *)(v240 + 32) = v238;
        *(_BYTE *)(v240 + 40) = 0;
        v241 = sub_100004EE0(v225, &qword_100050CE8);
        v242 = static Edge.Set.trailing.getter(v241);
        v243 = *(_OWORD *)(v199 + 16);
        v327[0] = *(_OWORD *)v199;
        v327[1] = v243;
        v328 = *(_BYTE *)(v199 + 32);
        sub_100004F98((uint64_t)v327, (uint64_t)v340, &qword_100050D40);
        sub_10001C3F8((uint64_t)v340, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012910);
        sub_10001C21C();
        v245 = v244;
        sub_10001C3F8((uint64_t)v327, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AFC);
        v246 = EdgeInsets.init(_all:)(v245 * 0.5);
        v248 = v247;
        v250 = v249;
        v252 = v251;
        v253 = v280;
        sub_100012534(v239, v280, &qword_100050CF0);
        v254 = v312;
        v255 = v253 + *(int *)(v312 + 36);
        *(_BYTE *)v255 = v242;
        *(double *)(v255 + 8) = v246;
        *(_QWORD *)(v255 + 16) = v248;
        *(_QWORD *)(v255 + 24) = v250;
        *(_QWORD *)(v255 + 32) = v252;
        *(_BYTE *)(v255 + 40) = 0;
        sub_100004EE0(v239, &qword_100050CF0);
        v165 = &qword_100050CF8;
        v166 = v282;
        sub_100004F98(v253, v282, &qword_100050CF8);
        v256 = v315;
        sub_100012534(v166, v315, &qword_100050CF8);
        swift_storeEnumTagMultiPayload(v256);
        v168 = sub_10001C430();
        v169 = sub_10001C598();
        v140 = (uint64_t)v313;
        v171 = v256;
        v170 = v254;
        v172 = v316;
        goto LABEL_31;
      }
    }
    else
    {
      sub_10000501C(v84, type metadata accessor for SingleContactWidgetEntryView);
    }
    sub_100012534(v82 + *(int *)(v76 + 24), v86, &qword_100050690);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v86 + *(int *)(v87 + 20), v82 + *(int *)(v76 + 32), v88);
    v100 = v289;
    sub_100019764(v289);
    v101 = type metadata accessor for Person(0);
    v102 = *(_QWORD *)(v101 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101) == 1)
    {
      sub_100004EE0(v100, &qword_100050D10);
      v103 = type metadata accessor for URL(0);
      v104 = (uint64_t)v290;
      v105 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 56))(v290, 1, 1, v103);
    }
    else
    {
      v104 = (uint64_t)v290;
      Person.contactSearchURL.getter();
      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v100, v101);
      v106 = type metadata accessor for URL(0);
      v107 = *(_QWORD *)(v106 - 8);
      v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v104, 1, v106);
      if ((_DWORD)v105 != 1)
      {
        v108 = (uint64_t)v288;
        (*(void (**)(char *, uint64_t, uint64_t))(v107 + 32))(v288, v104, v106);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v107 + 56))(v108, 0, 1, v106);
        goto LABEL_20;
      }
    }
    v108 = (uint64_t)v288;
    static Person.emptyContactSearchURL.getter(v105);
    sub_100004EE0(v104, &qword_100050688);
LABEL_20:
    v147 = sub_100004FDC(&qword_100050D38, type metadata accessor for SingleContactSmallWidgetView, (uint64_t)&unk_100041C60);
    v148 = v292;
    View.widgetURL(_:)(v108, v87, v147);
    sub_100004EE0(v108, &qword_100050688);
    sub_10000501C(v86, type metadata accessor for SingleContactSmallWidgetView);
    v149 = v82 + *(int *)(v317 + 32);
    v339 = *(_BYTE *)(v149 + 32);
    v150 = *(_OWORD *)(v149 + 16);
    v337 = *(_OWORD *)v149;
    v338 = v150;
    sub_100004F98((uint64_t)&v337, (uint64_t)v340, &qword_100050D40);
    sub_10001C3F8((uint64_t)v340, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012910);
    v151 = sub_10001C21C();
    v153 = v152;
    v155 = v154;
    v157 = v156;
    v158 = sub_10001C3F8((uint64_t)&v337, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AFC);
    v159 = static Edge.Set.all.getter(v158);
    v161 = v293;
    v160 = v294;
    v162 = (uint64_t)v291;
    (*(void (**)(char *, char *, uint64_t))(v293 + 16))(v291, v148, v294);
    v163 = v316;
    v164 = v162 + *(int *)(v316 + 36);
    *(_BYTE *)v164 = v159;
    *(double *)(v164 + 8) = v151;
    *(_QWORD *)(v164 + 16) = v153;
    *(_QWORD *)(v164 + 24) = v155;
    *(_QWORD *)(v164 + 32) = v157;
    *(_BYTE *)(v164 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v161 + 8))(v148, v160);
    v165 = &qword_100050CC0;
    v166 = v295;
    sub_100004F98(v162, v295, &qword_100050CC0);
    v167 = v315;
    sub_100012534(v166, v315, &qword_100050CC0);
    swift_storeEnumTagMultiPayload(v167);
    v168 = sub_10001C430();
    v169 = sub_10001C598();
    v170 = v312;
    v140 = (uint64_t)v313;
    v171 = v167;
    v172 = v163;
LABEL_31:
    _ConditionalContent<>.init(storage:)(v171, v170, v172, v168, v169);
    sub_100004EE0(v166, v165);
    v139 = &qword_100050D00;
    v257 = v322;
    sub_100012534(v140, v322, &qword_100050D00);
    swift_storeEnumTagMultiPayload(v257);
    v142 = sub_10001C640();
    v143 = sub_10001D2C0(&qword_100050D88, &qword_100050D00, (void (*)(void))sub_10001C430, (void (*)(void))sub_10001C598);
    v146 = v318;
    v144 = (uint64_t)v319;
    v145 = v257;
    goto LABEL_32;
  }
  sub_100012534(v1 + *(int *)(v75 + 24), (uint64_t)v63, &qword_100050690);
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v58, v1 + *(int *)(v76 + 32), v53);
  sub_10003CEE4((uint64_t)v63, (uint64_t)v58, (uint64_t)v65);
  v316 = v1;
  sub_100019764((uint64_t)v36);
  v77 = type metadata accessor for Person(0);
  v78 = *(_QWORD *)(v77 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v36, 1, v77) == 1)
  {
    sub_100004EE0((uint64_t)v36, &qword_100050D10);
    v79 = type metadata accessor for URL(0);
    v80 = (uint64_t)v296;
    v81 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v296, 1, 1, v79);
  }
  else
  {
    v80 = (uint64_t)v296;
    Person.contactSearchURL.getter();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v36, v77);
    v97 = type metadata accessor for URL(0);
    v98 = *(_QWORD *)(v97 - 8);
    v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v80, 1, v97);
    if ((_DWORD)v81 != 1)
    {
      v99 = (uint64_t)v300;
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v300, v80, v97);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v98 + 56))(v99, 0, 1, v97);
      goto LABEL_18;
    }
  }
  v99 = (uint64_t)v300;
  static Person.emptyContactSearchURL.getter(v81);
  sub_100004EE0(v80, &qword_100050688);
LABEL_18:
  v109 = sub_100004FDC(&qword_100050D80, type metadata accessor for SingleContactSmallWidgetVerticalView, (uint64_t)&unk_100041EB8);
  v110 = v297;
  View.widgetURL(_:)(v99, v297, v109);
  sub_100004EE0(v99, &qword_100050688);
  v111 = sub_10000501C((uint64_t)v65, type metadata accessor for SingleContactSmallWidgetVerticalView);
  v112 = v307;
  v113 = static ContainerBackgroundPlacement.widget.getter(v111);
  v114 = __chkstk_darwin(v113);
  v115 = v316;
  v116 = static Alignment.center.getter(v114);
  v118 = v117;
  v340[0] = v110;
  v340[1] = v109;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v340, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  v120 = v303;
  v121 = v116;
  v122 = v299;
  View.containerBackground<A>(for:alignment:content:)(v112, v121, v118, sub_10001CBAC, &v263 - 4, v299, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v308 + 8))(v112, v309);
  (*(void (**)(char *, uint64_t))(v298 + 8))(v68, v122);
  v123 = v115 + *(int *)(v317 + 32);
  v124 = *(_OWORD *)(v123 + 16);
  v337 = *(_OWORD *)v123;
  v338 = v124;
  v339 = *(_BYTE *)(v123 + 32);
  sub_100004F98((uint64_t)&v337, (uint64_t)v340, &qword_100050D40);
  sub_10001C3F8((uint64_t)v340, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012910);
  v125 = sub_10001C21C();
  v127 = v126;
  v129 = v128;
  v131 = v130;
  v132 = sub_10001C3F8((uint64_t)&v337, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AFC);
  v133 = static Edge.Set.all.getter(v132);
  v135 = v304;
  v134 = v305;
  v136 = (uint64_t)v302;
  (*(void (**)(char *, char *, uint64_t))(v304 + 16))(v302, v120, v305);
  v137 = v318;
  v138 = v136 + *(int *)(v318 + 36);
  *(_BYTE *)v138 = v133;
  *(double *)(v138 + 8) = v125;
  *(_QWORD *)(v138 + 16) = v127;
  *(_QWORD *)(v138 + 24) = v129;
  *(_QWORD *)(v138 + 32) = v131;
  *(_BYTE *)(v138 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v135 + 8))(v120, v134);
  v139 = &qword_100050D28;
  v140 = v306;
  sub_100004F98(v136, v306, &qword_100050D28);
  v141 = v322;
  sub_100012534(v140, v322, &qword_100050D28);
  swift_storeEnumTagMultiPayload(v141);
  v142 = sub_10001C640();
  v143 = sub_10001D2C0(&qword_100050D88, &qword_100050D00, (void (*)(void))sub_10001C430, (void (*)(void))sub_10001C598);
  v144 = (uint64_t)v319;
  v145 = v141;
  v146 = v137;
LABEL_32:
  _ConditionalContent<>.init(storage:)(v145, v146, v323, v142, v143);
  sub_100004EE0(v140, v139);
  v258 = v325;
  sub_100012534(v144, v325, &qword_100050D30);
  swift_storeEnumTagMultiPayload(v258);
  v259 = sub_100003FC4(&qword_100050D90);
  v260 = sub_10001C72C();
  v261 = sub_10001C748();
  _ConditionalContent<>.init(storage:)(v258, v259, v320, v260, v261);
  return sub_100004EE0(v144, &qword_100050D30);
}

uint64_t sub_10001B37C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for WidgetRenderingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  type metadata accessor for SingleContactWidgetEntryView(0);
  v9 = sub_10001BE00(&qword_1000506F0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x8000000100049970, (uint64_t)v8);
  if ((static PeopleConstants.isMac.getter(v9) & 1) != 0)
  {
    v10 = Color.init(_:bundle:)(0x33443344334423, 0xE700000000000000, 0);
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  else
  {
    static WidgetRenderingMode.vibrant.getter();
    v12 = static WidgetRenderingMode.== infix(_:_:)(v8, v6);
    v13 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    v14 = v13(v6, v2);
    if ((v12 & 1) != 0)
      v15 = static Color.black.getter(v14);
    else
      v15 = static Color.clear.getter(v14);
    v10 = v15;
    result = v13(v8, v2);
  }
  *a1 = v10;
  return result;
}

uint64_t sub_10001B4CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100003FC4(&qword_100050CA8);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019BE0((uint64_t)v4);
  sub_100012534((uint64_t)v4, a1, &qword_100050CA8);
  return sub_100004EE0((uint64_t)v4, &qword_100050CA8);
}

uint64_t sub_10001B554@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  void *v80;
  __int128 v81;
  uint64_t v82;
  void *v83;
  __int128 v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD v92[8];

  v76 = a1;
  v77 = type metadata accessor for WidgetBackgroundStyle(0);
  v75 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v74 = (char *)&v59 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100003FC4(&qword_100050570);
  v61 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003FC4(&qword_100050568);
  v62 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100003FC4(&qword_100050DD0);
  v63 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100003FC4(&qword_100050DD8);
  v66 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v64 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100003FC4(&qword_100050DE0);
  v69 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v67 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003FC4(&qword_100050DE8);
  v72 = *(_QWORD *)(v12 - 8);
  v73 = v12;
  v13 = __chkstk_darwin(v12);
  v70 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static PeopleConstants.singleContactWidgetKind.getter(v13);
  v59 = v16;
  v60 = v15;
  v17 = type metadata accessor for ContactFetcher(0);
  v18 = ContactFetcher.__allocating_init()();
  v85 = v17;
  v86 = &protocol witness table for ContactFetcher;
  *(_QWORD *)&v84 = v18;
  v82 = type metadata accessor for Locale(0);
  v83 = &protocol witness table for Locale;
  sub_100004F2C(&v81);
  static Locale.current.getter();
  type metadata accessor for PeopleDemoOverride(0);
  if ((static PeopleDemoOverride.isContactsOverrideEnabled()() & 1) != 0)
  {
    v19 = type metadata accessor for DemoStatusProvider(0);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    v20 = DemoStatusProvider.init()();
    v21 = &protocol witness table for DemoStatusProvider;
  }
  else
  {
    v19 = type metadata accessor for StatusProvider(0);
    v20 = static StatusProvider.shared.getter();
    v21 = &protocol witness table for StatusProvider;
  }
  v79 = v19;
  v80 = v21;
  *(_QWORD *)&v78 = v20;
  v22 = type metadata accessor for SelectPerson(0);
  v23 = type metadata accessor for StatusPrioritizer(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v24 = StatusPrioritizer.init()();
  type metadata accessor for VerticalTextHelper(0);
  v25 = static VerticalTextHelper.shared.getter();
  sub_100004F70(&v84, (uint64_t)&v87);
  sub_100004F70(&v81, (uint64_t)&v91);
  sub_100004F70(&v78, (uint64_t)v92);
  v92[5] = v24;
  v92[6] = v25;
  v26 = type metadata accessor for SingleContactWidgetEntryView(0);
  v27 = sub_100004FDC(&qword_100050DF0, type metadata accessor for SingleContactWidgetEntryView, (uint64_t)&unk_100040B58);
  v28 = sub_10001D37C();
  AppIntentConfiguration.init<A>(kind:intent:provider:content:)(v60, v59, v22, &v87, sub_10001BBC8, 0, v22, v26, &type metadata for SingleContactTimelineProvider, v27, v28);
  v29 = sub_10001D3C0();
  WidgetConfiguration.enableContentMarginsForFirstParty(_:)(1, v2, v29);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v4, v2);
  v87 = v2;
  v88 = (void *)v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v87, &opaque type descriptor for <<opaque return type of WidgetConfiguration.enableContentMarginsForFirstParty(_:)>>, 1);
  WidgetConfiguration._contentMarginsDisabled()(v5, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v7, v5);
  v31 = String.localized.getter(0x73746361746E6F43, 0xE800000000000000);
  v33 = v32;
  v87 = v31;
  v88 = v32;
  *(_QWORD *)&v84 = v5;
  *((_QWORD *)&v84 + 1) = OpaqueTypeConformance2;
  v34 = swift_getOpaqueTypeConformance2(&v84, &unk_100041FF4, 1);
  v35 = sub_10000C644();
  v37 = v64;
  v36 = v65;
  WidgetConfiguration.configurationDisplayName<A>(_:)(&v87, v65, &type metadata for String, v34, v35);
  swift_bridgeObjectRelease(v33);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v9, v36);
  v38 = String.localized.getter(0xD000000000000011, 0x8000000100049850);
  v40 = v39;
  *(_QWORD *)&v84 = v38;
  *((_QWORD *)&v84 + 1) = v39;
  v87 = v36;
  v88 = &type metadata for String;
  v89 = v34;
  v90 = v35;
  v41 = swift_getOpaqueTypeConformance2(&v87, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v42 = v67;
  v43 = v68;
  WidgetConfiguration.description<A>(_:)(&v84, v68, &type metadata for String, v41, v35);
  swift_bridgeObjectRelease(v40);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v37, v43);
  v44 = sub_100003FC4(&qword_100050728);
  v45 = type metadata accessor for WidgetFamily(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(unsigned __int8 *)(v46 + 80);
  v48 = (v47 + 32) & ~v47;
  v49 = swift_allocObject(v44, v48 + *(_QWORD *)(v46 + 72), v47 | 7);
  *(_OWORD *)(v49 + 16) = xmmword_100040770;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104))(v49 + v48, enum case for WidgetFamily.systemSmall(_:), v45);
  v87 = v43;
  v88 = &type metadata for String;
  v89 = v41;
  v90 = v35;
  v50 = swift_getOpaqueTypeConformance2(&v87, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v52 = v70;
  v51 = v71;
  WidgetConfiguration.supportedFamilies(_:)(v49, v71, v50);
  swift_bridgeObjectRelease(v49);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v42, v51);
  v54 = v74;
  v53 = v75;
  v55 = v77;
  (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v74, enum case for WidgetBackgroundStyle.blur(_:), v77);
  v87 = v51;
  v88 = (void *)v50;
  v56 = swift_getOpaqueTypeConformance2(&v87, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v57 = v73;
  WidgetConfiguration.preferredBackgroundStyle(_:)(v54, v73, v56);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
  return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v52, v57);
}

uint64_t sub_10001BBC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t KeyPath;
  int *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v4 = sub_100003FC4(&qword_1000506B0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100003FC4(&qword_100050598);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for SingleContactTimelineEntry(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004E9C(a1, (uint64_t)v12, v13);
  *v9 = swift_getKeyPath(&unk_100040C68);
  sub_100003FC4(&qword_100050590);
  swift_storeEnumTagMultiPayload(v9);
  *v6 = swift_getKeyPath(&unk_100040C98);
  sub_100003FC4(&qword_1000506F0);
  swift_storeEnumTagMultiPayload(v6);
  KeyPath = swift_getKeyPath(&unk_100040CC8);
  sub_10001D444((uint64_t)v12, a2);
  v15 = (int *)type metadata accessor for SingleContactWidgetEntryView(0);
  v16 = v15[5];
  type metadata accessor for ContactFetcher(0);
  *(_QWORD *)(a2 + v16) = ContactFetcher.__allocating_init()();
  sub_100004F98((uint64_t)v9, a2 + v15[6], &qword_100050598);
  result = sub_100004F98((uint64_t)v6, a2 + v15[7], &qword_1000506B0);
  v18 = a2 + v15[8];
  *(_QWORD *)v18 = KeyPath;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_BYTE *)(v18 + 32) = 0;
  return result;
}

uint64_t sub_10001BDA4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001BE00(&qword_100050590, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, a1);
}

uint64_t sub_10001BDD4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001BE00(&qword_1000506F8, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x8000000100049B90, a1);
}

uint64_t sub_10001BE00@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003FC4(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100012534(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v27 = a4;
      v23 = swift_slowAlloc(12, -1);
      v28 = a5;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136315138;
      v30 = sub_10001CBB4(v29, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4, v24 + 12);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_10001C038@<X0>(uint64_t a1@<X8>)
{
  return sub_10001BE00(&qword_1000506F0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x8000000100049970, a1);
}

uint64_t sub_10001C064(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_10001CBB4(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_10000DA3C(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

double sub_10001C21C()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  double v15;

  v1 = type metadata accessor for EnvironmentValues(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)v0;
  if (v0[32] == 1)
    return *(double *)v0;
  v7 = swift_retain(*(_QWORD *)v0);
  v8 = static os_log_type_t.fault.getter(v7);
  v9 = static Log.runtimeIssuesLog.getter();
  v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v15 = *(double *)&v12;
    *(_DWORD *)v11 = 136315138;
    v13 = v11 + 4;
    v14 = sub_10001CBB4(0x65736E4965676445, 0xEA00000000007374, (uint64_t *)&v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v13, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v4, v5);
  sub_10001C3F8((uint64_t)v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100012AFC);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v15;
}

uint64_t sub_10001C3F8(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t sub_10001C430()
{
  return sub_10001C468(&qword_100050D48, &qword_100050CF8, (void (*)(void))sub_10001C44C);
}

uint64_t sub_10001C44C()
{
  return sub_10001C468(&qword_100050D50, &qword_100050CF0, (void (*)(void))sub_10001C4D4);
}

uint64_t sub_10001C468(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100004004(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001C4D4()
{
  return sub_10001C468(&qword_100050D58, &qword_100050CE8, (void (*)(void))sub_10001C4F0);
}

unint64_t sub_10001C4F0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100050D60;
  if (!qword_100050D60)
  {
    v1 = sub_100004004(&qword_100050CE0);
    v2[0] = type metadata accessor for SingleContactQuickActionWidgetView(255);
    v2[1] = sub_100004FDC(&qword_100050D68, type metadata accessor for SingleContactQuickActionWidgetView, (uint64_t)&unk_100041510);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050D60);
  }
  return result;
}

unint64_t sub_10001C598()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100050D70;
  if (!qword_100050D70)
  {
    v1 = sub_100004004(&qword_100050CC0);
    v2[0] = type metadata accessor for SingleContactSmallWidgetView(255);
    v2[1] = sub_100004FDC(&qword_100050D38, type metadata accessor for SingleContactSmallWidgetView, (uint64_t)&unk_100041C60);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050D70);
  }
  return result;
}

unint64_t sub_10001C640()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  result = qword_100050D78;
  if (!qword_100050D78)
  {
    v1 = sub_100004004(&qword_100050D28);
    v2 = sub_100004004(&qword_100050D18);
    v4 = type metadata accessor for SingleContactSmallWidgetVerticalView(255);
    v5 = (void *)sub_100004FDC(&qword_100050D80, type metadata accessor for SingleContactSmallWidgetVerticalView, (uint64_t)&unk_100041EB8);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v4 = v2;
    v5 = &type metadata for Color;
    v6 = OpaqueTypeConformance2;
    v7 = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050D78);
  }
  return result;
}

uint64_t sub_10001C72C()
{
  return sub_10001C468(&qword_100050D98, &qword_100050D90, (void (*)(void))sub_10000ECC8);
}

unint64_t sub_10001C748()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100050DA0;
  if (!qword_100050DA0)
  {
    v1 = sub_100004004(&qword_100050D30);
    sub_10001C640();
    sub_10001D2C0(&qword_100050D88, &qword_100050D00, (void (*)(void))sub_10001C430, (void (*)(void))sub_10001C598);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050DA0);
  }
  return result;
}

uint64_t sub_10001C7D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001BE00(&qword_1000506E0, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_10001C804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint8_t *v18;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = type metadata accessor for EnvironmentValues(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 0x100) != 0)
  {
    swift_retain(a1);
    swift_retain(a2);
  }
  else
  {
    v12 = swift_retain(a1);
    v13 = static os_log_type_t.fault.getter(v12);
    v14 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v14, v13))
    {
      v15 = swift_slowAlloc(12, -1);
      v22 = v8;
      v16 = (uint8_t *)v15;
      v21 = swift_slowAlloc(32, -1);
      v24 = v21;
      *(_DWORD *)v16 = 136315138;
      v20 = v16 + 4;
      v23 = sub_10001CBB4(0xD00000000000001ALL, 0x8000000100049B70, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v20, v16 + 12);
      _os_log_impl((void *)&_mh_execute_header, v14, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      v17 = v21;
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      v18 = v16;
      v8 = v22;
      swift_slowDealloc(v18, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v11, a1);
    sub_10001D350(a1, a2, a3, a4, 0);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return v24;
  }
  return a1;
}

uint64_t sub_10001CA14()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10001CA34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ColorScheme(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.colorScheme.setter(v4);
}

uint64_t sub_10001CAB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v1 = sub_100004FDC(&qword_100050DB0, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  EnvironmentValues.subscript.getter(&v3, v0, v0, v1);
  return v3;
}

_QWORD *sub_10001CB10@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v2 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v3 = sub_100004FDC(&qword_100050DB0, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  result = EnvironmentValues.subscript.getter(&v5, v2, v2, v3);
  *a1 = v5;
  return result;
}

uint64_t sub_10001CB88()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10001CBAC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001B37C(a1);
}

uint64_t sub_10001CBB4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10001CC84(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10001CE3C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10001CE3C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10000D160(v12);
  return v7;
}

uint64_t sub_10001CC84(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10001CE78(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

uint64_t sub_10001CE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001CE78(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10001CF0C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_10001D0E4(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10001D0E4(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10001CF0C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10001D080(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10001D080(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100003FC4(&qword_100050DA8);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10001D0E4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003FC4(&qword_100050DA8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_10001D234()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100050DB8;
  if (!qword_100050DB8)
  {
    v1 = sub_100004004(&qword_100050DC0);
    sub_10001D2C0(&qword_100050DC8, &qword_100050CA8, (void (*)(void))sub_10001C72C, (void (*)(void))sub_10001C748);
    sub_1000124F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050DB8);
  }
  return result;
}

uint64_t sub_10001D2C0(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100004004(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SingleContactWidgetConfiguration()
{
  return &type metadata for SingleContactWidgetConfiguration;
}

uint64_t sub_10001D340(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000422B0, 1);
}

uint64_t sub_10001D350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    swift_release(a2);
  return swift_release(a1);
}

unint64_t sub_10001D37C()
{
  unint64_t result;

  result = qword_100050DF8;
  if (!qword_100050DF8)
  {
    result = swift_getWitnessTable(&unk_100040D20, &type metadata for SingleContactTimelineProvider);
    atomic_store(result, (unint64_t *)&qword_100050DF8);
  }
  return result;
}

unint64_t sub_10001D3C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100050578;
  if (!qword_100050578)
  {
    v1 = sub_100004004(&qword_100050570);
    result = swift_getWitnessTable(&protocol conformance descriptor for AppIntentConfiguration<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050578);
  }
  return result;
}

void sub_10001D418(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = EnvironmentValues.widgetContentMargins.getter();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t sub_10001D444(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SingleContactTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for SingleContactTimelineProvider(_QWORD *a1)
{
  sub_10000D160(a1);
  sub_10000D160(a1 + 5);
  sub_10000D160(a1 + 10);
  swift_release(a1[15]);
  return swift_release(a1[16]);
}

uint64_t initializeWithCopy for SingleContactTimelineProvider(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  v7 = *(_QWORD *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 128) = v8;
  swift_retain(v7);
  swift_retain(v8);
  return a1;
}

_QWORD *assignWithCopy for SingleContactTimelineProvider(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10000D260(a1, a2);
  sub_10000D260(a1 + 5, a2 + 5);
  sub_10000D260(a1 + 10, a2 + 10);
  v4 = a2[15];
  v5 = a1[15];
  a1[15] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[16];
  v7 = a1[16];
  a1[16] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

__n128 initializeWithTake for SingleContactTimelineProvider(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for SingleContactTimelineProvider(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10000D160((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_10000D160((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_10000D160((_QWORD *)(a1 + 80));
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_QWORD *)(a2 + 120);
  v7 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v6;
  swift_release(v7);
  v8 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleContactTimelineProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SingleContactTimelineProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SingleContactTimelineProvider()
{
  return &type metadata for SingleContactTimelineProvider;
}

uint64_t sub_10001D740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;

  v0 = sub_100004004(&qword_100050DE8);
  v1 = sub_100004004(&qword_100050DE0);
  v2 = sub_100004004(&qword_100050DD8);
  v3 = sub_100004004(&qword_100050DD0);
  v4 = sub_100004004(&qword_100050568);
  v12 = sub_100004004(&qword_100050570);
  v13 = (void *)sub_10001D3C0();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of WidgetConfiguration.enableContentMarginsForFirstParty(_:)>>, 1);
  v12 = v4;
  v13 = (void *)OpaqueTypeConformance2;
  v6 = swift_getOpaqueTypeConformance2(&v12, &unk_100041FF4, 1);
  v7 = sub_10000C644();
  v12 = v3;
  v13 = &type metadata for String;
  v14 = v6;
  v15 = v7;
  v8 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v12 = v2;
  v13 = &type metadata for String;
  v14 = v8;
  v15 = v7;
  v9 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v12 = v1;
  v13 = (void *)v9;
  v10 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v12 = v0;
  v13 = (void *)v10;
  return swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
}

uint64_t sub_10001D888()
{
  return sub_100004FDC(&qword_100050E00, type metadata accessor for SingleContactTimelineEntry, (uint64_t)&unk_100040B28);
}

uint64_t sub_10001D8B4()
{
  return sub_100004FDC(qword_100050E08, (uint64_t (*)(uint64_t))&type metadata accessor for SelectPerson, (uint64_t)&protocol conformance descriptor for SelectPerson);
}

uint64_t sub_10001D8E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static PeopleLogger.extension.getter(v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_10001CBB4(0xD00000000000001FLL, a3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Should not be calling the completion version of %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_10001DA60()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001DA84()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100050E44);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10001259C;
  return swift_task_switch(sub_1000176D4, 0, 0);
}

uint64_t sub_10001DADC(uint64_t a1)
{
  uint64_t v1;

  return sub_100017744(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 72), *(double *)(v1 + 64), *(_QWORD *)(v1 + 80));
}

uint64_t sub_10001DB10(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SingleContactTimelineProvider(a2, a1);
  return a2;
}

uint64_t sub_10001DB44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = type metadata accessor for SelectPerson(0);
  v2 = *(_QWORD *)(v1 - 8);
  v31 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v31 + 160) & ~v31;
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(sub_100003FC4(&qword_1000506C8) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v4 + v6) & ~v6;
  v28 = *(_QWORD *)(v5 + 64);
  v8 = type metadata accessor for TimelineProviderContext(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v33 = v9;
  v34 = v8;
  v27 = *(_QWORD *)(v9 + 64);
  v32 = sub_100003FC4(&qword_100050E60);
  v11 = *(_QWORD *)(v32 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v29 = v11;
  v26 = *(_QWORD *)(v11 + 64);
  v30 = type metadata accessor for OSSignposter(0);
  v13 = *(_QWORD *)(v30 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v25 = *(_QWORD *)(v13 + 64);
  sub_10000D160((_QWORD *)(v0 + 16));
  sub_10000D160((_QWORD *)(v0 + 56));
  sub_10000D160((_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 144));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v15 = v7;
  v16 = v0 + v7;
  v17 = type metadata accessor for ContactImage(0);
  v18 = *(_QWORD *)(v17 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  v19 = v31 | v6 | v10 | v12 | v14 | 7;
  v20 = (v28 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v10 + ((v20 + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10;
  v22 = (v27 + v12 + v21) & ~v12;
  v23 = (v22 + v26 + v14) & ~v14;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v20 + 8));
  (*(void (**)(unint64_t, uint64_t))(v33 + 8))(v0 + v21, v34);
  (*(void (**)(unint64_t, uint64_t))(v29 + 8))(v0 + v22, v32);
  (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v0 + v23, v30);
  return swift_deallocObject(v0, v23 + v25, v19);
}

uint64_t sub_10001DD5C(uint64_t a1, char a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for SelectPerson(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 160) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(sub_100003FC4(&qword_1000506C8) - 8);
  v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + v11 + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 64);
  v15 = *(_QWORD *)(sub_100003FC4(&qword_100050E60) - 8);
  v16 = (v14 + *(unsigned __int8 *)(v15 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 64);
  v18 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OSSignposter(0) - 8) + 80);
  return sub_100017C80(a1, v4, (char *)(v2 + 16), *(void **)(v2 + 152), v2 + v6, v2 + v9, *(char **)(v2 + v10), *(char **)(v2 + v10 + 8), *(double *)(v2 + v11), v2 + v13, v2 + v16, v2 + ((v16 + v17 + v18) & ~v18));
}

uint64_t sub_10001DE94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100018D68(a1, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), a2);
}

uint64_t sub_10001DEB8(uint64_t a1)
{
  uint64_t v1;

  return sub_10001550C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_10001DECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v19 = sub_100003FC4(&qword_100050E80);
  v1 = *(_QWORD *)(v19 - 8);
  v23 = *(unsigned __int8 *)(v1 + 80);
  v2 = (v23 + 160) & ~v23;
  v3 = *(_QWORD *)(v1 + 64);
  v4 = type metadata accessor for SelectPerson(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v2 + v3 + v6) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = *(_QWORD *)(sub_100003FC4(&qword_1000506C8) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v7 + v8 + v10) & ~v10;
  v21 = *(_QWORD *)(v9 + 64);
  v22 = type metadata accessor for OSSignposter(0);
  v11 = *(_QWORD *)(v22 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v20 = *(_QWORD *)(v11 + 64);
  sub_10000D160((_QWORD *)(v0 + 16));
  sub_10000D160((_QWORD *)(v0 + 56));
  sub_10000D160((_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 144));

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v2, v19);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v4);
  v13 = type metadata accessor for ContactImage(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v0 + v18, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v0 + v18, v13);
  v15 = (v21 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + v12 + 16) & ~v12;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v15 + 8));
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0 + v16, v22);
  return swift_deallocObject(v0, v16 + v20, v23 | v6 | v10 | v12 | 7);
}

uint64_t sub_10001E090(uint64_t a1, char a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(sub_100003FC4(&qword_100050E80) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 160) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(type metadata accessor for SelectPerson(0) - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(sub_100003FC4(&qword_1000506C8) - 8);
  v12 = (v9 + v10 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = (*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OSSignposter(0) - 8) + 80);
  return sub_100015958(a1, v4, v2 + 16, *(void **)(v2 + 152), v2 + v6, v2 + v9, v2 + v12, *(_QWORD *)(v2 + v13), *(_QWORD *)(v2 + v13 + 8), v2 + ((v13 + v14 + 16) & ~v14));
}

ValueMetadata *type metadata accessor for MetricLauncher()
{
  return &type metadata for MetricLauncher;
}

uint64_t sub_10001E19C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100042344, 1);
}

uint64_t sub_10001E1AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v30 = a1;
  v33 = a2;
  v2 = sub_100003FC4(&qword_100051050);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100003FC4(&qword_100051058);
  __chkstk_darwin(v31);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100003FC4(&qword_100051060);
  v7 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetRenderingMode(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v28 - v15;
  v17 = sub_10001C038((uint64_t)&v28 - v15);
  static WidgetRenderingMode.accented.getter(v17);
  v18 = static WidgetRenderingMode.== infix(_:_:)(v16, v14);
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, v10);
  v19(v16, v10);
  if ((v18 & 1) != 0)
  {
    v20 = sub_100005084(&qword_100051068, &qword_100051050, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    View.widgetAccentable(_:)(1, v2, v20);
    v21 = v32;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v6, v9, v32);
    swift_storeEnumTagMultiPayload(v6);
    v34 = v2;
    v35 = v20;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v34, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v6, v21, v2, OpaqueTypeConformance2, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v21);
  }
  else
  {
    v24 = v29;
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
    v25(v4, v30, v2);
    v25(v6, (uint64_t)v4, v2);
    swift_storeEnumTagMultiPayload(v6);
    v26 = sub_100005084(&qword_100051068, &qword_100051050, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v34 = v2;
    v35 = v26;
    v27 = swift_getOpaqueTypeConformance2(&v34, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v6, v32, v2, v27, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v4, v2);
  }
}

uint64_t sub_10001E480()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_10001E49C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v64 = a1;
  v62 = a2;
  v2 = sub_100003FC4(&qword_100050E88);
  v61 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003FC4(&qword_100050E90);
  __chkstk_darwin(v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100003FC4(&qword_100050E98);
  __chkstk_darwin(v63);
  v57 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for PeopleURL.Scheme(0);
  v9 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PeopleURL.PathAction(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003FC4(&qword_100050688);
  __chkstk_darwin(v16);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for URL(0);
  v59 = *(_QWORD *)(v19 - 8);
  v60 = v19;
  v20 = __chkstk_darwin(v19);
  v55 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v56 = (char *)&v51 - v23;
  v24 = static MetricTemplate.metricsEnabled.getter(v22);
  v25 = v64;
  if ((v24 & 1) == 0)
    goto LABEL_4;
  v52 = v4;
  v53 = v7;
  v54 = v5;
  v26 = v63;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for PeopleURL.PathAction.showGatheredMetrics(_:), v12);
  v27 = sub_10001F44C((uint64_t)&_swiftEmptyArrayStorage);
  v28 = sub_10001F5E0((uint64_t)&_swiftEmptyArrayStorage);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for PeopleURL.Scheme.people(_:), v58);
  URL.init(action:params:arrayParams:scheme:)(v15, v27, v28, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v18, 1, v60) == 1)
  {
    sub_100004EE0((uint64_t)v18, &qword_100050688);
    v7 = v53;
    v25 = v64;
    v4 = v52;
LABEL_4:
    v29 = v61;
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
    v30(v4, v25, v2);
    v30(v7, (uint64_t)v4, v2);
    swift_storeEnumTagMultiPayload(v7);
    v31 = sub_10001EA60();
    v32 = sub_100005084(&qword_100050EA8, &qword_100050E88, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v7, v63, v2, v31, v32);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v4, v2);
  }
  v35 = v59;
  v34 = v60;
  v36 = v56;
  v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v59 + 32))(v56, v18, v60);
  v38 = static Alignment.topLeading.getter(v37);
  v40 = v39;
  v41 = (uint64_t)v57;
  v42 = &v57[*(int *)(v26 + 36)];
  v43 = v55;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v55, v36, v34);
  v44 = sub_100003FC4(&qword_100050EC0);
  v45 = sub_10001F774();
  Link.init(destination:label:)(v43, sub_10001E91C, 0, v44, v45);
  v46 = (uint64_t *)&v42[*(int *)(sub_100003FC4(&qword_100050EB8) + 36)];
  *v46 = v38;
  v46[1] = v40;
  v47 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v41, v64, v2);
  v48 = (uint64_t)v53;
  sub_100012534(v41, (uint64_t)v53, &qword_100050E98);
  swift_storeEnumTagMultiPayload(v48);
  v49 = sub_10001EA60();
  v50 = sub_100005084(&qword_100050EA8, &qword_100050E88, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  _ConditionalContent<>.init(storage:)(v48, v63, v47, v49, v50);
  sub_100004EE0(v41, &qword_100050E98);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v36, v34);
}

double sub_10001E91C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  double result;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v20;

  v2 = type metadata accessor for Image.ResizingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = Image.init(systemName:)(0x61622E7472616863, 0xEE006C6C69662E72);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v2);
  v7 = Image.resizable(capInsets:resizingMode:)(v5, v6, 0.0, 0.0, 0.0, 0.0);
  swift_release(v6);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v9 = static Alignment.center.getter(v8);
  _FrameLayout.init(width:height:alignment:)(&v16, 0x4034000000000000, 0, 0x4034000000000000, 0, v9, v10);
  v11 = v16;
  v12 = v17;
  v13 = v18;
  v14 = v19;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v13;
  *(_BYTE *)(a1 + 32) = v14;
  result = *(double *)&v20;
  *(_OWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 1;
  return result;
}

unint64_t sub_10001EA60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100050EA0;
  if (!qword_100050EA0)
  {
    v1 = sub_100004004(&qword_100050E98);
    sub_100005084(&qword_100050EA8, &qword_100050E88, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100005084(&qword_100050EB0, &qword_100050EB8, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050EA0);
  }
  return result;
}

uint64_t sub_10001EAFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  _QWORD v15[2];

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  objc_msgSend(v4, "setTimeStyle:", 1);
  objc_msgSend(v4, "setDateStyle:", 0);
  v5 = String.localized.getter(0x5F44455441445055, 0xEA00000000005441);
  v7 = v6;
  Date.init()();
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9 = objc_msgSend(v4, "stringFromDate:", isa);

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v15[0] = v5;
  v15[1] = v7;
  swift_bridgeObjectRetain(v7);
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);

  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v12);
  return v15[0];
}

uint64_t sub_10001EC5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  void (*v35)(char *, uint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;
  uint64_t v38[2];

  v38[1] = a2;
  v3 = sub_100003FC4(&qword_100051070);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003FC4(&qword_100051078);
  __chkstk_darwin(v7);
  v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003FC4(&qword_100051080);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_100003FC4(&qword_100051088);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)v38 - v18;
  if ((static MetricTemplate.displayTimeEnabled.getter(v17) & 1) != 0)
  {
    *v12 = static Alignment.bottomLeading.getter();
    v12[1] = v20;
    v21 = sub_100003FC4(&qword_1000510A8);
    v22 = sub_10001EF50(v38[0], (uint64_t)v12 + *(int *)(v21 + 44));
    v23 = static Edge.Set.all.getter(v22);
    v24 = EdgeInsets.init(_all:)(0.0);
    v26 = v25;
    v28 = v27;
    v30 = v29;
    sub_100012534((uint64_t)v12, (uint64_t)v16, &qword_100051080);
    v31 = &v16[*(int *)(v13 + 36)];
    *v31 = v23;
    *((double *)v31 + 1) = v24;
    *((_QWORD *)v31 + 2) = v26;
    *((_QWORD *)v31 + 3) = v28;
    *((_QWORD *)v31 + 4) = v30;
    v31[40] = 0;
    sub_100004EE0((uint64_t)v12, &qword_100051080);
    sub_10002065C((uint64_t)v16, (uint64_t)v19);
    sub_100012534((uint64_t)v19, (uint64_t)v9, &qword_100051088);
    swift_storeEnumTagMultiPayload(v9);
    v32 = sub_1000205D8();
    v33 = sub_100005084(&qword_1000510A0, &qword_100051070, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v9, v13, v3, v32, v33);
    return sub_100004EE0((uint64_t)v19, &qword_100051088);
  }
  else
  {
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v35(v6, a1, v3);
    v35(v9, (uint64_t)v6, v3);
    swift_storeEnumTagMultiPayload(v9);
    v36 = sub_1000205D8();
    v37 = sub_100005084(&qword_1000510A0, &qword_100051070, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v9, v13, v3, v36, v37);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_10001EF50@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  void (*v54)(void);
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 *v66;
  void (*v67)(_BYTE *, uint64_t);
  _BYTE v69[4];
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(void);
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD v82[10];
  _OWORD v83[11];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  double v99;

  v73 = a1;
  v80 = a2;
  v2 = type metadata accessor for Font.Leading(0);
  v74 = *(_QWORD *)(v2 - 8);
  v75 = v2;
  __chkstk_darwin(v2);
  v4 = &v69[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_100003FC4(&qword_1000510B0);
  __chkstk_darwin(v5);
  v7 = &v69[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100003FC4(&qword_100051070);
  v9 = *(_QWORD *)(v8 - 8);
  v77 = v8;
  v81 = v9;
  v10 = __chkstk_darwin(v8);
  v79 = &v69[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v78 = &v69[-v12];
  v76 = *(void (**)(void))(v13 + 16);
  v76();
  *(_QWORD *)&v84 = sub_10001EAFC();
  *((_QWORD *)&v84 + 1) = v14;
  v15 = sub_10000C644();
  v16 = Text.init<A>(_:)(&v84, &type metadata for String, v15);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = static Color.primary.getter();
  v24 = Text.foregroundColor(_:)(v23, v16, v18, v22, v20);
  v71 = v25;
  v72 = v26;
  v28 = v27;
  swift_release(v23);
  v70 = v28 & 1;
  sub_1000206A4(v16, v18, v22);
  v29 = swift_bridgeObjectRelease(v20);
  v30 = static Font.Weight.medium.getter(v29);
  v31 = type metadata accessor for Font.Design(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v7, 1, 1, v31);
  v32 = static Font.system(size:weight:design:)(*(_QWORD *)&v30, 0, v7, 9.0);
  sub_100004EE0((uint64_t)v7, &qword_1000510B0);
  v34 = v74;
  v33 = v75;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v74 + 104))(v4, enum case for Font.Leading.tight(_:), v75);
  v35 = Font.leading(_:)(v4, v32);
  swift_release(v32);
  (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v4, v33);
  v36 = v24;
  v37 = v24;
  v39 = v71;
  v38 = v72;
  LOBYTE(v34) = v70;
  v40 = Text.font(_:)(v35, v37, v71, v70, v72);
  v42 = v41;
  LOBYTE(v32) = v43;
  v45 = v44;
  swift_release(v35);
  v46 = v32 & 1;
  sub_1000206A4(v36, v39, v34);
  swift_bridgeObjectRelease(v38);
  v47 = type metadata accessor for TimeStampModifier(0);
  v48 = -8.0;
  if (*(_BYTE *)(v73 + *(int *)(v47 + 20)))
    v48 = 16.0;
  v94 = v40;
  v95 = v42;
  v96 = v46;
  v97 = v45;
  v98 = 0;
  v99 = v48;
  v49 = static Alignment.center.getter(v47);
  sub_10003A6F8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v84, 0.0, 1, 0.0, 1, v49, v50);
  sub_1000206A4(v40, v42, v46);
  swift_bridgeObjectRelease(v45);
  v52 = v78;
  v51 = v79;
  v54 = v76;
  v53 = v77;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v76)(v79, v78, v77);
  v55 = v80;
  ((void (*)(uint64_t, _BYTE *, uint64_t))v54)(v80, v51, v53);
  v56 = *(int *)(sub_100003FC4(&qword_1000510B8) + 48);
  v57 = v91;
  v82[6] = v90;
  v82[7] = v91;
  v58 = v92;
  v59 = v93;
  v82[8] = v92;
  v82[9] = v93;
  v60 = v88;
  v61 = v89;
  v82[4] = v88;
  v82[5] = v89;
  v62 = v86;
  v63 = v87;
  v82[2] = v86;
  v82[3] = v87;
  v64 = v84;
  v65 = v85;
  v82[0] = v84;
  v82[1] = v85;
  v66 = (__int128 *)(v55 + v56);
  v66[6] = v90;
  v66[7] = v57;
  v66[8] = v58;
  v66[9] = v59;
  v66[2] = v62;
  v66[3] = v63;
  v66[4] = v60;
  v66[5] = v61;
  *v66 = v64;
  v66[1] = v65;
  sub_1000206B4((uint64_t)v82);
  v67 = *(void (**)(_BYTE *, uint64_t))(v81 + 8);
  v67(v52, v53);
  v83[6] = v90;
  v83[7] = v91;
  v83[8] = v92;
  v83[9] = v93;
  v83[2] = v86;
  v83[3] = v87;
  v83[4] = v88;
  v83[5] = v89;
  v83[0] = v84;
  v83[1] = v85;
  sub_100020700((uint64_t)v83);
  return ((uint64_t (*)(_BYTE *, uint64_t))v67)(v51, v53);
}

unint64_t sub_10001F44C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100003FC4(&qword_100050F00);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100003FC4(&qword_100050F08);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100012534(v13, (uint64_t)v5, &qword_100050F00);
    result = sub_10001F8DC((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for PeopleURL.Parameter(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_OWORD *)(v8[7] + 16 * v17) = *(_OWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10001F5E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100003FC4(&qword_100050EE0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100003FC4(&qword_100050EE8);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100012534(v13, (uint64_t)v5, &qword_100050EE0);
    result = sub_10001F844((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for PeopleURL.ArrayParameter(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10001F774()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100050EC8;
  if (!qword_100050EC8)
  {
    v1 = sub_100004004(&qword_100050EC0);
    sub_10001F7E0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050EC8);
  }
  return result;
}

unint64_t sub_10001F7E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100050ED0;
  if (!qword_100050ED0)
  {
    v1 = sub_100004004(&qword_100050ED8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100050ED0);
  }
  return result;
}

unint64_t sub_10001F844(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for PeopleURL.ArrayParameter(0);
  v6 = sub_100004FDC(&qword_100050EF0, (uint64_t (*)(uint64_t))&type metadata accessor for PeopleURL.ArrayParameter, (uint64_t)&protocol conformance descriptor for PeopleURL.ArrayParameter);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10001F974(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for PeopleURL.ArrayParameter, &qword_100050EF8, (uint64_t)&protocol conformance descriptor for PeopleURL.ArrayParameter);
}

unint64_t sub_10001F8DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for PeopleURL.Parameter(0);
  v6 = sub_100004FDC(&qword_100050F10, (uint64_t (*)(uint64_t))&type metadata accessor for PeopleURL.Parameter, (uint64_t)&protocol conformance descriptor for PeopleURL.Parameter);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10001F974(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for PeopleURL.Parameter, &qword_100050F18, (uint64_t)&protocol conformance descriptor for PeopleURL.Parameter);
}

unint64_t sub_10001F974(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_100004FDC(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

_QWORD *sub_10001FAA4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = sub_100003FC4(&qword_1000506F0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    else
    {
      v10 = *a2;
      *a1 = *a2;
      swift_retain(v10);
    }
    swift_storeEnumTagMultiPayload(a1);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

_QWORD *sub_10001FB80(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  }
  else
  {
    v8 = *a2;
    *a1 = *a2;
    swift_retain(v8);
  }
  swift_storeEnumTagMultiPayload(a1);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_10001FC2C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_100004EE0((uint64_t)a1, &qword_1000506F0);
    v6 = sub_100003FC4(&qword_1000506F0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      v8 = *a2;
      *a1 = *a2;
      swift_retain(v8);
    }
    swift_storeEnumTagMultiPayload(a1);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_10001FCF0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_10001FD98(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_100004EE0((uint64_t)a1, &qword_1000506F0);
    v6 = sub_100003FC4(&qword_1000506F0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10001FE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001FE64);
}

uint64_t sub_10001FE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_100003FC4(&qword_1000506B0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10001FEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001FF00);
}

uint64_t sub_10001FF00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003FC4(&qword_1000506B0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for TimeStampModifier(uint64_t a1)
{
  return sub_1000108EC(a1, qword_100050F78, (uint64_t)&nominal type descriptor for TimeStampModifier);
}

void sub_10001FF90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100020000(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100040E28;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_100020000(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000508A0)
  {
    v2 = type metadata accessor for WidgetRenderingMode(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000508A0);
  }
}

uint64_t *sub_100020054(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_100003FC4(&qword_1000506F0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v7);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v6 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      v8 = *a2;
      *a1 = *a2;
      swift_retain(v8);
    }
    swift_storeEnumTagMultiPayload(a1);
  }
  return a1;
}

uint64_t sub_10002011C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(a1, v2) != 1)
    return swift_release(*a1);
  v3 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t *sub_100020180(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  }
  else
  {
    v6 = *a2;
    *a1 = *a2;
    swift_retain(v6);
  }
  swift_storeEnumTagMultiPayload(a1);
  return a1;
}

uint64_t *sub_10002021C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    sub_100004EE0((uint64_t)a1, &qword_1000506F0);
    v4 = sub_100003FC4(&qword_1000506F0);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    }
    else
    {
      v6 = *a2;
      *a1 = *a2;
      swift_retain(v6);
    }
    swift_storeEnumTagMultiPayload(a1);
  }
  return a1;
}

void *sub_1000202D0(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload(a1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

void *sub_100020368(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_100004EE0((uint64_t)a1, &qword_1000506F0);
    v4 = sub_100003FC4(&qword_1000506F0);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload(a1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100020418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100020424);
}

uint64_t sub_100020424(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003FC4(&qword_1000506B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100020464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100020470);
}

uint64_t sub_100020470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003FC4(&qword_1000506B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for WidgetAccentModifier(uint64_t a1)
{
  return sub_1000108EC(a1, qword_100051008, (uint64_t)&nominal type descriptor for WidgetAccentModifier);
}

void sub_1000204C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_100020000(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

unint64_t sub_100020534()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051040;
  if (!qword_100051040)
  {
    v1 = sub_100004004(&qword_100051048);
    sub_10001EA60();
    sub_100005084(&qword_100050EA8, &qword_100050E88, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051040);
  }
  return result;
}

uint64_t sub_1000205B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100042394, 1);
}

uint64_t sub_1000205C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10004236C, 1);
}

unint64_t sub_1000205D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051090;
  if (!qword_100051090)
  {
    v1 = sub_100004004(&qword_100051088);
    sub_100005084(&qword_100051098, &qword_100051080, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051090);
  }
  return result;
}

uint64_t sub_10002065C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003FC4(&qword_100051088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000206A4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1000206B4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_1000206F0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_1000206F0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100020700(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_1000206A4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_100020740()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000510C0;
  if (!qword_1000510C0)
  {
    v1 = sub_100004004(&qword_1000510C8);
    v2[0] = sub_100004004(&qword_100051050);
    v2[1] = sub_100005084(&qword_100051068, &qword_100051050, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000510C0);
  }
  return result;
}

unint64_t sub_1000207F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000510D0;
  if (!qword_1000510D0)
  {
    v1 = sub_100004004(&qword_1000510D8);
    sub_1000205D8();
    sub_100005084(&qword_1000510A0, &qword_100051070, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000510D0);
  }
  return result;
}

void **sub_10002087C(void **a1, void **a2, int *a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PersonStatusSet(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v13 = v4;
    v12(v9, v10, v11);
    v14 = a3[6];
    v15 = a3[7];
    v16 = *(void **)((char *)a2 + v14);
    *(void **)((char *)v7 + v14) = v16;
    *(void **)((char *)v7 + v15) = *(void **)((char *)a2 + v15);
    v17 = a3[8];
    v18 = (char *)v7 + v17;
    v19 = (char *)a2 + v17;
    v20 = *(_OWORD *)((char *)a2 + v17 + 24);
    *(_OWORD *)((char *)v7 + v17 + 24) = v20;
    v21 = v20;
    v22 = **(void (***)(char *, char *, uint64_t))(v20 - 8);
    swift_retain(v16);
    v22(v18, v19, v21);
    v23 = a3[10];
    *(void **)((char *)v7 + a3[9]) = *(void **)((char *)a2 + a3[9]);
    *(void **)((char *)v7 + v23) = *(void **)((char *)a2 + v23);
    v24 = a3[12];
    *(void **)((char *)v7 + a3[11]) = *(void **)((char *)a2 + a3[11]);
    v25 = (char *)v7 + v24;
    v26 = *(uint64_t *)((char *)a2 + v24);
    v27 = *(uint64_t *)((char *)a2 + v24 + 8);
    LOBYTE(v21) = *((_BYTE *)a2 + v24 + 16);
    sub_100020B14(v26, v27, v21);
    *(_QWORD *)v25 = v26;
    *((_QWORD *)v25 + 1) = v27;
    v25[16] = v21;
    v28 = a3[13];
    v29 = (uint64_t *)((char *)v7 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = sub_100003FC4(&qword_1000506F8);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
    }
    else
    {
      v33 = *v30;
      *v29 = *v30;
      swift_retain(v33);
    }
    swift_storeEnumTagMultiPayload(v29);
    v34 = a3[14];
    v35 = (uint64_t *)((char *)v7 + v34);
    v36 = (uint64_t *)((char *)a2 + v34);
    v37 = sub_100003FC4(&qword_1000506E0);
    if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
    {
      v38 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v35, v36, v38);
    }
    else
    {
      v39 = *v36;
      *v35 = *v36;
      swift_retain(v39);
    }
    swift_storeEnumTagMultiPayload(v35);
    v40 = a3[15];
    v41 = (uint64_t *)((char *)v7 + v40);
    v42 = (uint64_t *)((char *)a2 + v40);
    v43 = sub_100003FC4(&qword_1000506F0);
    if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
    {
      v44 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v41, v42, v44);
    }
    else
    {
      v45 = *v42;
      *v41 = *v42;
      swift_retain(v45);
    }
    swift_storeEnumTagMultiPayload(v41);
  }
  return v7;
}

uint64_t sub_100020B14(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_100020B20(id *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (char *)a1 + a2[5];
  v5 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release(*(id *)((char *)a1 + a2[6]));
  sub_10000D160((id *)((char *)a1 + a2[8]));
  sub_100020C94(*(uint64_t *)((char *)a1 + a2[12]), *(uint64_t *)((char *)a1 + a2[12] + 8), *((_BYTE *)a1 + a2[12] + 16));
  v6 = (id *)((char *)a1 + a2[13]);
  v7 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (id *)((char *)a1 + a2[14]);
  v10 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (id *)((char *)a1 + a2[15]);
  v13 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(v12, v13) != 1)
    return swift_release(*v12);
  v14 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
}

uint64_t sub_100020C94(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return swift_release(result);
  return result;
}

void **sub_100020CA0(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for PersonStatusSet(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12 = v6;
  v11(v8, v9, v10);
  v13 = a3[6];
  v14 = a3[7];
  v15 = *(void **)((char *)a2 + v13);
  *(void **)((char *)a1 + v13) = v15;
  *(void **)((char *)a1 + v14) = *(void **)((char *)a2 + v14);
  v16 = a3[8];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_OWORD *)((char *)a2 + v16 + 24);
  *(_OWORD *)((char *)a1 + v16 + 24) = v19;
  v20 = v19;
  v21 = **(void (***)(char *, char *, uint64_t))(v19 - 8);
  swift_retain(v15);
  v21(v17, v18, v20);
  v22 = a3[10];
  *(void **)((char *)a1 + a3[9]) = *(void **)((char *)a2 + a3[9]);
  *(void **)((char *)a1 + v22) = *(void **)((char *)a2 + v22);
  v23 = a3[12];
  *(void **)((char *)a1 + a3[11]) = *(void **)((char *)a2 + a3[11]);
  v24 = (char *)a1 + v23;
  v25 = *(uint64_t *)((char *)a2 + v23);
  v26 = *(uint64_t *)((char *)a2 + v23 + 8);
  LOBYTE(v20) = *((_BYTE *)a2 + v23 + 16);
  sub_100020B14(v25, v26, v20);
  *(_QWORD *)v24 = v25;
  *((_QWORD *)v24 + 1) = v26;
  v24[16] = v20;
  v27 = a3[13];
  v28 = (uint64_t *)((char *)a1 + v27);
  v29 = (uint64_t *)((char *)a2 + v27);
  v30 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
  {
    v31 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
  }
  else
  {
    v32 = *v29;
    *v28 = *v29;
    swift_retain(v32);
  }
  swift_storeEnumTagMultiPayload(v28);
  v33 = a3[14];
  v34 = (uint64_t *)((char *)a1 + v33);
  v35 = (uint64_t *)((char *)a2 + v33);
  v36 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
  {
    v37 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
  }
  else
  {
    v38 = *v35;
    *v34 = *v35;
    swift_retain(v38);
  }
  swift_storeEnumTagMultiPayload(v34);
  v39 = a3[15];
  v40 = (uint64_t *)((char *)a1 + v39);
  v41 = (uint64_t *)((char *)a2 + v39);
  v42 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
  {
    v43 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v40, v41, v43);
  }
  else
  {
    v44 = *v41;
    *v40 = *v41;
    swift_retain(v44);
  }
  swift_storeEnumTagMultiPayload(v40);
  return a1;
}

void **sub_100020F08(void **a1, void **a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  v8 = v7;

  v9 = a3[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = a3[6];
  v14 = *(void **)((char *)a2 + v13);
  v15 = *(uint64_t *)((char *)a1 + v13);
  *(void **)((char *)a1 + v13) = v14;
  swift_retain(v14);
  swift_release(v15);
  *(void **)((char *)a1 + a3[7]) = *(void **)((char *)a2 + a3[7]);
  sub_10000D260((void **)((char *)a1 + a3[8]), (void **)((char *)a2 + a3[8]));
  *(void **)((char *)a1 + a3[9]) = *(void **)((char *)a2 + a3[9]);
  *(void **)((char *)a1 + a3[10]) = *(void **)((char *)a2 + a3[10]);
  *(void **)((char *)a1 + a3[11]) = *(void **)((char *)a2 + a3[11]);
  v16 = a3[12];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = *((_QWORD *)v18 + 1);
  v21 = v18[16];
  sub_100020B14(*(_QWORD *)v18, v20, v21);
  v22 = *(_QWORD *)v17;
  v23 = *((_QWORD *)v17 + 1);
  v24 = v17[16];
  *(_QWORD *)v17 = v19;
  *((_QWORD *)v17 + 1) = v20;
  v17[16] = v21;
  sub_100020C94(v22, v23, v24);
  if (a1 != a2)
  {
    v25 = a3[13];
    v26 = (uint64_t *)((char *)a1 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    sub_100004EE0((uint64_t)a1 + v25, &qword_1000506F8);
    v28 = sub_100003FC4(&qword_1000506F8);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
    }
    else
    {
      v30 = *v27;
      *v26 = *v27;
      swift_retain(v30);
    }
    swift_storeEnumTagMultiPayload(v26);
    v31 = a3[14];
    v32 = (uint64_t *)((char *)a1 + v31);
    v33 = (uint64_t *)((char *)a2 + v31);
    sub_100004EE0((uint64_t)a1 + v31, &qword_1000506E0);
    v34 = sub_100003FC4(&qword_1000506E0);
    if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
    {
      v35 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
    }
    else
    {
      v36 = *v33;
      *v32 = *v33;
      swift_retain(v36);
    }
    swift_storeEnumTagMultiPayload(v32);
    v37 = a3[15];
    v38 = (uint64_t *)((char *)a1 + v37);
    v39 = (uint64_t *)((char *)a2 + v37);
    sub_100004EE0((uint64_t)a1 + v37, &qword_1000506F0);
    v40 = sub_100003FC4(&qword_1000506F0);
    if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
    {
      v41 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v38, v39, v41);
    }
    else
    {
      v42 = *v39;
      *v38 = *v39;
      swift_retain(v42);
    }
    swift_storeEnumTagMultiPayload(v38);
  }
  return a1;
}

_QWORD *sub_1000211B0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[8];
  v12 = a3[9];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  v16 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  v17 = a3[12];
  v18 = a3[13];
  v19 = (char *)a1 + v17;
  v20 = (char *)a2 + v17;
  v21 = *(_OWORD *)v20;
  v19[16] = v20[16];
  *(_OWORD *)v19 = v21;
  v22 = (char *)a1 + v18;
  v23 = (char *)a2 + v18;
  v24 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
    swift_storeEnumTagMultiPayload(v22);
  }
  else
  {
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  v26 = a3[14];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v27, v28, v30);
    swift_storeEnumTagMultiPayload(v27);
  }
  else
  {
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  v31 = a3[15];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = sub_100003FC4(&qword_1000506F0);
  if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
  {
    v35 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v32, v33, v35);
    swift_storeEnumTagMultiPayload(v32);
  }
  else
  {
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  return a1;
}

void **sub_1000213E8(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v6 = *a1;
  *a1 = *a2;

  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = *(uint64_t *)((char *)a1 + v11);
  *(void **)((char *)a1 + v11) = *(void **)((char *)a2 + v11);
  swift_release(v12);
  v13 = a3[8];
  *(void **)((char *)a1 + a3[7]) = *(void **)((char *)a2 + a3[7]);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  sub_10000D160((void **)((char *)a1 + v13));
  *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  v17 = a3[10];
  *(void **)((char *)a1 + a3[9]) = *(void **)((char *)a2 + a3[9]);
  *(void **)((char *)a1 + v17) = *(void **)((char *)a2 + v17);
  v18 = a3[12];
  *(void **)((char *)a1 + a3[11]) = *(void **)((char *)a2 + a3[11]);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = v20[16];
  v22 = *(_QWORD *)v19;
  v23 = *((_QWORD *)v19 + 1);
  v24 = v19[16];
  *(_OWORD *)v19 = *(_OWORD *)v20;
  v19[16] = v21;
  sub_100020C94(v22, v23, v24);
  if (a1 != a2)
  {
    v25 = a3[13];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    sub_100004EE0((uint64_t)a1 + v25, &qword_1000506F8);
    v28 = sub_100003FC4(&qword_1000506F8);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v26, v27, v29);
      swift_storeEnumTagMultiPayload(v26);
    }
    else
    {
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    v30 = a3[14];
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    sub_100004EE0((uint64_t)a1 + v30, &qword_1000506E0);
    v33 = sub_100003FC4(&qword_1000506E0);
    if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
    {
      v34 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v31, v32, v34);
      swift_storeEnumTagMultiPayload(v31);
    }
    else
    {
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    v35 = a3[15];
    v36 = (char *)a1 + v35;
    v37 = (char *)a2 + v35;
    sub_100004EE0((uint64_t)a1 + v35, &qword_1000506F0);
    v38 = sub_100003FC4(&qword_1000506F0);
    if (swift_getEnumCaseMultiPayload(v37, v38) == 1)
    {
      v39 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v36, v37, v39);
      swift_storeEnumTagMultiPayload(v36);
    }
    else
    {
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100021680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002168C);
}

uint64_t sub_10002168C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for PersonStatusSet(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v12 = sub_100003FC4(&qword_100050828);
    v7 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v12;
      v9 = a3[13];
    }
    else
    {
      v13 = sub_100003FC4(&qword_1000506B8);
      v7 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
      {
        v8 = v13;
        v9 = a3[14];
      }
      else
      {
        v8 = sub_100003FC4(&qword_1000506B0);
        v7 = *(_QWORD *)(v8 - 8);
        v9 = a3[15];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6]);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_100021784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100021790);
}

uint64_t sub_100021790(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = type metadata accessor for PersonStatusSet(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
      return result;
    }
    v12 = sub_100003FC4(&qword_100050828);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[13];
    }
    else
    {
      v13 = sub_100003FC4(&qword_1000506B8);
      v9 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v13;
        v11 = a4[14];
      }
      else
      {
        v10 = sub_100003FC4(&qword_1000506B0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[15];
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for StatusAndNameView(uint64_t a1)
{
  uint64_t result;

  result = qword_100051138;
  if (!qword_100051138)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StatusAndNameView);
  return result;
}

void sub_1000218C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[12];

  v10[0] = "\b";
  v2 = type metadata accessor for PersonStatusSet(319);
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    v10[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v10[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v10[4] = &unk_100040F30;
    v10[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v10[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v10[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v10[8] = &unk_100040F48;
    sub_1000219EC(319, (unint64_t *)&qword_100050898, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
    if (v5 <= 0x3F)
    {
      v10[9] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000219EC(319, (unint64_t *)&unk_100051148, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
      if (v7 <= 0x3F)
      {
        v10[10] = *(_QWORD *)(v6 - 8) + 64;
        sub_1000219EC(319, (unint64_t *)&qword_1000508A0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
        if (v9 <= 0x3F)
        {
          v10[11] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 12, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_1000219EC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_100021A38(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000423E4, 1);
}

uint64_t sub_100021A48@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  uint64_t KeyPath;
  uint64_t v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  char v135;

  v124 = a2;
  v3 = sub_100003FC4(&qword_1000511A8);
  __chkstk_darwin(v3);
  v106 = (uint64_t *)((char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v122 = sub_100003FC4(&qword_1000511B0);
  v120 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v105 = (uint64_t)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for ContentSizeCategory(0);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v107 = (uint64_t)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003FC4(&qword_1000511B8);
  v8 = __chkstk_darwin(v7);
  v123 = (uint64_t)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v121 = (char *)&v105 - v10;
  v11 = type metadata accessor for Font.Leading(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003FC4(&qword_1000511C0);
  v16 = __chkstk_darwin(v15);
  v119 = (uint64_t)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v117 = (char *)&v105 - v19;
  __chkstk_darwin(v18);
  v20 = *a1;
  v118 = (uint64_t)&v105 - v21;
  if (v20)
  {
    v22 = (void **)((char *)a1 + *(int *)(type metadata accessor for StatusAndNameView(0) + 32));
    v23 = v22[3];
    v24 = v22[4];
    sub_10001190C(v22, v23);
    v25 = v20;
    v26 = dispatch thunk of ContactFormatterProtocol.displayName(for:)(v25, v23, v24);
    v28 = v27;

  }
  else
  {
    v26 = String.localized.getter(0x74655320746F4ELL, 0xE700000000000000);
    v28 = v29;
  }
  v127 = v26;
  v128 = v28;
  v116 = sub_10000C644();
  v30 = Text.init<A>(_:)(&v127, &type metadata for String, v116);
  v32 = v31;
  v34 = v33;
  v36 = v35 & 1;
  v37 = type metadata accessor for StatusAndNameView(0);
  v38 = *(int *)(v37 + 24);
  v110 = a1;
  v39 = *(uint64_t *)((char *)a1 + v38);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for Font.Leading.tight(_:), v11);
  v40 = Font.leading(_:)(v14, v39);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v41 = Text.font(_:)(v40, v30, v32, v36, v34);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  v48 = v40;
  v49 = v37;
  swift_release(v48);
  v50 = v45 & 1;
  sub_1000206A4(v30, v32, v36);
  v51 = swift_bridgeObjectRelease(v34);
  v52 = static Font.Weight.semibold.getter(v51);
  v53 = Text.fontWeight(_:)(*(_QWORD *)&v52, 0, v41, v43, v50, v47);
  v55 = v54;
  LODWORD(v36) = v56;
  v58 = v57;
  v59 = v41;
  v60 = v110;
  sub_1000206A4(v59, v43, v50);
  swift_bridgeObjectRelease(v47);
  v61 = *(uint64_t *)((char *)v60 + *(int *)(v49 + 40));
  KeyPath = swift_getKeyPath(&unk_100040FB0);
  v63 = swift_getKeyPath(&unk_100040FE0);
  v114 = v53;
  v127 = v53;
  v128 = v55;
  v113 = v55;
  v112 = v36;
  v129 = v36 & 1;
  v115 = v58;
  v130 = v58;
  v131 = KeyPath;
  v111 = KeyPath;
  v132 = v61;
  v133 = 0;
  v134 = v63;
  v135 = 1;
  v64 = *v60;
  if (*v60)
  {
    v65 = (void **)((char *)v60 + *(int *)(v49 + 32));
    v66 = v65[3];
    v67 = v65[4];
    sub_10001190C(v65, v66);
    v68 = v64;
    v69 = dispatch thunk of ContactFormatterProtocol.displayName(for:)(v68, v66, v67);
    v71 = v70;

  }
  else
  {
    v69 = String.localized.getter(0x74655320746F4ELL, 0xE700000000000000);
    v71 = v72;
  }
  v73 = v49;
  *(_QWORD *)&v125 = v69;
  *((_QWORD *)&v125 + 1) = v71;
  v74 = Text.init<A>(_:)(&v125, &type metadata for String, v116);
  v76 = v75;
  v78 = v77;
  v80 = v79 & 1;
  v81 = sub_100003FC4(&qword_1000511C8);
  v82 = sub_100022D6C();
  v83 = (uint64_t)v117;
  View.accessibilityLabel(_:)(v74, v76, v80, v78, v81, v82);
  sub_1000206A4(v74, v76, v80);
  swift_bridgeObjectRelease(v78);
  sub_1000206A4(v114, v113, v112 & 1);
  swift_release(v63);
  swift_release(v111);
  swift_bridgeObjectRelease(v115);
  v84 = v118;
  v85 = sub_100004F98(v83, v118, &qword_1000511C0);
  PersonStatusSet.text.getter(&v125, v85);
  if (v126)
  {
    v86 = v73;
    sub_100004F70(&v125, (uint64_t)&v127);
    v87 = v107;
    v88 = sub_10001BDD4(v107);
    v89 = ContentSizeCategory.isAccessibilityCategory.getter(v88);
    v90 = (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 8))(v87, v109);
    v91 = (uint64_t)v121;
    if ((v89 & 1) == 0)
    {
      v92 = static VerticalAlignment.center.getter(v90);
      v93 = (uint64_t)v106;
      *v106 = v92;
      *(_QWORD *)(v93 + 8) = 0x4008000000000000;
      *(_BYTE *)(v93 + 16) = 0;
      v94 = sub_100003FC4(&qword_100051218);
      v95 = sub_10002220C((uint64_t)v60, &v127, v93 + *(int *)(v94 + 44));
      v96 = *(double *)((char *)v60 + *(int *)(v86 + 44));
      v97 = static Alignment.center.getter(v95);
      v98 = v105;
      sub_10003A8B4(0.0, 1, 0.0, 1, v96, 0, 0.0, 1, v105, 0.0, 1, 0.0, 1, v97, v99);
      sub_100004EE0(v93, &qword_1000511A8);
      sub_100004F98(v98, v91, &qword_1000511B0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v120 + 56))(v91, 0, 1, v122);
      sub_10000D160(&v127);
      goto LABEL_13;
    }
    sub_10000D160(&v127);
  }
  else
  {
    sub_100004EE0((uint64_t)&v125, &qword_100051208);
    v91 = (uint64_t)v121;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56))(v91, 1, 1, v122);
LABEL_13:
  v100 = v119;
  sub_100012534(v84, v119, &qword_1000511C0);
  v101 = v123;
  sub_100012534(v91, v123, &qword_1000511B8);
  v102 = v124;
  sub_100012534(v100, v124, &qword_1000511C0);
  v103 = sub_100003FC4(&qword_100051210);
  sub_100012534(v101, v102 + *(int *)(v103 + 48), &qword_1000511B8);
  sub_100004EE0(v91, &qword_1000511B8);
  sub_100004EE0(v84, &qword_1000511C0);
  sub_100004EE0(v101, &qword_1000511B8);
  return sub_100004EE0(v100, &qword_1000511C0);
}

uint64_t sub_10002220C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;

  v127 = a2;
  v5 = type metadata accessor for WidgetAccentModifier(0);
  v6 = __chkstk_darwin(v5);
  v132 = (uint64_t *)((char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v133 = (uint64_t)&v117 - v8;
  v131 = sub_100003FC4(&qword_100051220);
  v9 = __chkstk_darwin(v131);
  v11 = (char *)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v134 = (uint64_t)&v117 - v12;
  v13 = type metadata accessor for Font.Leading(0);
  v138 = *(_QWORD *)(v13 - 8);
  v139 = v13;
  __chkstk_darwin(v13);
  v137 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100003FC4(&qword_100051228);
  __chkstk_darwin(v125);
  v16 = (uint64_t *)((char *)&v117 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for Image.Scale(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v117 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003FC4(&qword_100051230);
  __chkstk_darwin(v21);
  v23 = (char *)&v117 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_100003FC4(&qword_100051238);
  __chkstk_darwin(v120);
  v122 = (uint64_t)&v117 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100003FC4(&qword_100051240);
  __chkstk_darwin(v123);
  v124 = (uint64_t)&v117 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100003FC4(&qword_100051248);
  v26 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v121 = (char *)&v117 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100003FC4(&qword_100051250);
  v29 = __chkstk_darwin(v28);
  v129 = (uint64_t)&v117 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v140 = (uint64_t)&v117 - v31;
  v128 = type metadata accessor for StatusAndNameView(0);
  v130 = a1;
  PersonStatusSet.badge.getter(&v141);
  v135 = v11;
  v136 = a3;
  if (!v142)
  {
    sub_100004EE0((uint64_t)&v141, &qword_100051258);
    goto LABEL_7;
  }
  sub_100004F70(&v141, (uint64_t)&v143);
  v33 = v145;
  v32 = v146;
  sub_10001190C(&v143, v145);
  if ((dispatch thunk of BadgeStatus.useIconAsTextPrefix.getter(v33, v32) & 1) == 0
    || (v34 = v145,
        v35 = v146,
        sub_10001190C(&v143, v145),
        (v36 = dispatch thunk of BadgeStatus.icon.getter(v34, v35)) == 0))
  {
    sub_10000D160(&v143);
LABEL_7:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v140, 1, 1, v126);
    LODWORD(v125) = enum case for Font.Leading.tight(_:);
    goto LABEL_8;
  }
  v119 = v36;
  v37 = swift_retain(v36);
  v38 = Text.init(_:)(v37);
  v117 = v39;
  v118 = v40;
  v42 = v41 & 1;
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for Image.Scale.small(_:), v17);
  KeyPath = swift_getKeyPath(&unk_100041070);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))((char *)v16 + *(int *)(v125 + 28), v20, v17);
  *v16 = KeyPath;
  sub_100012534((uint64_t)v16, (uint64_t)&v23[*(int *)(v21 + 36)], &qword_100051228);
  v44 = v117;
  *(_QWORD *)v23 = v38;
  *((_QWORD *)v23 + 1) = v44;
  v23[16] = v42;
  v45 = v118;
  *((_QWORD *)v23 + 3) = v118;
  sub_1000206F0(v38, v44, v42);
  swift_bridgeObjectRetain(v45);
  sub_100004EE0((uint64_t)v16, &qword_100051228);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  sub_1000206A4(v38, v44, v42);
  v46 = swift_bridgeObjectRelease(v45);
  v47 = static Font.caption2.getter(v46);
  v49 = v137;
  v48 = v138;
  v50 = *(void (**)(char *))(v138 + 104);
  LODWORD(v125) = enum case for Font.Leading.tight(_:);
  v51 = v139;
  v50(v137);
  v52 = Font.leading(_:)(v49, v47);
  swift_release(v47);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v51);
  v53 = swift_getKeyPath(&unk_1000410A0);
  v54 = v122;
  sub_100012534((uint64_t)v23, v122, &qword_100051230);
  v55 = (uint64_t *)(v54 + *(int *)(v120 + 36));
  *v55 = v53;
  v55[1] = v52;
  sub_100004EE0((uint64_t)v23, &qword_100051230);
  v56 = v145;
  v57 = v146;
  sub_10001190C(&v143, v145);
  v58 = dispatch thunk of BadgeStatus.iconForeground.getter(v56, v57);
  v59 = swift_getKeyPath(&unk_1000410D0);
  v60 = v124;
  sub_100012534(v54, v124, &qword_100051238);
  v61 = v123;
  v62 = (uint64_t *)(v60 + *(int *)(v123 + 36));
  *v62 = v59;
  v62[1] = v58;
  sub_100004EE0(v54, &qword_100051238);
  v63 = sub_100023070();
  v64 = (uint64_t)v121;
  View.accessibilityHidden(_:)(1, v61, v63);
  swift_release(v119);
  sub_100004EE0(v60, &qword_100051240);
  v65 = v140;
  sub_100004F98(v64, v140, &qword_100051248);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v65, 0, 1, v126);
  sub_10000D160(&v143);
LABEL_8:
  v66 = v127[3];
  v67 = v127[4];
  sub_10001190C(v127, v66);
  v143 = dispatch thunk of TextStatus.localizedDisplayString.getter(v66, v67);
  v144 = v68;
  v69 = sub_10000C644();
  v70 = Text.init<A>(_:)(&v143, &type metadata for String, v69);
  v72 = v71;
  v74 = v73;
  v76 = v75 & 1;
  v143 = dispatch thunk of TextStatus.localizedDisplayString.getter(v66, v67);
  v144 = v77;
  v78 = Text.init<A>(_:)(&v143, &type metadata for String, v69);
  v80 = v79;
  v82 = v81;
  LOBYTE(v66) = v83 & 1;
  v126 = Text.accessibilityLabel(_:)();
  v85 = v84;
  v127 = v86;
  v88 = v87 & 1;
  sub_1000206A4(v78, v80, v66);
  swift_bridgeObjectRelease(v82);
  sub_1000206A4(v70, v72, v76);
  v89 = swift_bridgeObjectRelease(v74);
  v90 = static Font.caption2.getter(v89);
  v92 = v137;
  v91 = v138;
  v93 = v139;
  (*(void (**)(char *, _QWORD, uint64_t))(v138 + 104))(v137, v125, v139);
  v94 = Font.leading(_:)(v92, v90);
  swift_release(v90);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v92, v93);
  v95 = v126;
  v96 = v127;
  v97 = Text.font(_:)(v94, v126, v85, v88, v127);
  v99 = v98;
  LOBYTE(v80) = v100;
  v102 = v101;
  swift_release(v94);
  sub_1000206A4(v95, v85, v88);
  swift_bridgeObjectRelease(v96);
  v103 = *(_QWORD *)(v130 + *(int *)(v128 + 36));
  v104 = swift_getKeyPath(&unk_100040FB0);
  v105 = swift_getKeyPath(&unk_100041010);
  v106 = swift_getKeyPath(&unk_100040FE0);
  v107 = swift_getKeyPath(&unk_100041040);
  v108 = (uint64_t)v132;
  *v132 = v107;
  sub_100003FC4(&qword_1000506F0);
  swift_storeEnumTagMultiPayload(v108);
  v109 = v133;
  sub_100022F30(v108, v133);
  v110 = (uint64_t)v135;
  sub_100022F74(v109, (uint64_t)&v135[*(int *)(v131 + 36)]);
  *(_QWORD *)v110 = v97;
  *(_QWORD *)(v110 + 8) = v99;
  *(_BYTE *)(v110 + 16) = v80 & 1;
  *(_QWORD *)(v110 + 24) = v102;
  *(_QWORD *)(v110 + 32) = v104;
  *(_QWORD *)(v110 + 40) = v103;
  *(_BYTE *)(v110 + 48) = 0;
  *(_QWORD *)(v110 + 56) = v105;
  *(_BYTE *)(v110 + 64) = 1;
  *(_QWORD *)(v110 + 72) = v106;
  *(_BYTE *)(v110 + 80) = 1;
  sub_100022FB8(v109);
  v111 = v134;
  sub_100004F98(v110, v134, &qword_100051220);
  v112 = v140;
  v113 = v129;
  sub_100012534(v140, v129, &qword_100051250);
  sub_100012534(v111, v110, &qword_100051220);
  v114 = v136;
  sub_100012534(v113, v136, &qword_100051250);
  v115 = sub_100003FC4(&qword_100051260);
  sub_100012534(v110, v114 + *(int *)(v115 + 48), &qword_100051220);
  sub_100004EE0(v111, &qword_100051220);
  sub_100004EE0(v112, &qword_100051250);
  sub_100004EE0(v110, &qword_100051220);
  return sub_100004EE0(v113, &qword_100051250);
}

uint64_t sub_100022BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void **v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_100003FC4(&qword_1000511A0);
  return sub_100021A48(v2, a2 + *(int *)(v4 + 44));
}

uint64_t sub_100022C14@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100022C44@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100022C74(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100022CA0(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100022CCC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100022CF8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100022D24(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

uint64_t sub_100022D48(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

unint64_t sub_100022D6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000511D0;
  if (!qword_1000511D0)
  {
    v1 = sub_100004004(&qword_1000511C8);
    sub_100023198(&qword_1000511D8, &qword_1000511E0, &qword_1000511E8, &qword_1000511F0);
    sub_100005084(&qword_1000511F8, &qword_100051200, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000511D0);
  }
  return result;
}

uint64_t sub_100022E10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Image.Scale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.imageScale.setter(v4);
}

uint64_t sub_100022E8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100022EB4(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_100022EDC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100022F04(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_100022F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetAccentModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100022F74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetAccentModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100022FB8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WidgetAccentModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100022FF4()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_100023020@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100023048(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

unint64_t sub_100023070()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051268;
  if (!qword_100051268)
  {
    v1 = sub_100004004(&qword_100051240);
    sub_1000230F4();
    sub_100005084(&qword_100051298, &qword_1000512A0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051268);
  }
  return result;
}

unint64_t sub_1000230F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051270;
  if (!qword_100051270)
  {
    v1 = sub_100004004(&qword_100051238);
    sub_100023198(&qword_100051278, &qword_100051230, &qword_100051280, &qword_100051228);
    sub_100005084(&qword_100051288, &qword_100051290, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051270);
  }
  return result;
}

uint64_t sub_100023198(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100004004(a2);
    sub_100005084(a3, a4, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100023218()
{
  return sub_100005084(&qword_1000512A8, &qword_1000512B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

void sub_100023244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v8;
  id v9;
  id v10;
  id v11;
  NSString v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *object;
  uint64_t v18;
  id v19;
  NSString v20;
  id v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[5];
  uint64_t v25;

  v8 = objc_msgSend(objc_allocWithZone((Class)TUCallProviderManager), "init");
  v9 = objc_msgSend(v8, "telephonyProvider");

  v10 = objc_msgSend(objc_allocWithZone((Class)TUDialRequest), "initWithProvider:", v9);
  v11 = objc_allocWithZone((Class)CNPhoneNumber);
  swift_bridgeObjectRetain(a2);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v13 = objc_msgSend(v11, "initWithStringValue:", v12);

  v14 = objc_msgSend(v13, "stringValue");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v16 = v15;

  object = String.trimToNil()().value._object;
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(object);
  if (object)
    v18 = 2;
  else
    v18 = 3;
  v19 = objc_allocWithZone((Class)TUHandle);
  swift_bridgeObjectRetain(a2);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v21 = objc_msgSend(v19, "initWithType:value:", v18, v20);

  objc_msgSend(v10, "setHandle:", v21);
  objc_msgSend(v10, "setVideo:", 0);
  v24[4] = a3;
  v25 = a4;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 1107296256;
  v24[2] = sub_10002348C;
  v24[3] = &unk_10004E4A0;
  v22 = _Block_copy(v24);
  v23 = v25;
  swift_retain(a4);
  swift_release(v23);
  objc_msgSend(v4, "launchAppForDialRequest:completion:", v10, v22);
  _Block_release(v22);

}

void sub_10002348C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

void sub_1000234E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100023244(a1, a2, a3, a4);
}

uint64_t sub_100023500(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v3 = v1[11];
  v4 = v1[12];
  sub_10001190C(v1 + 8, v3);
  v5 = dispatch thunk of IntentHandlingApplicationRegistry.applications(forIntentClass:)(a1, v3, v4);
  v6 = v5;
  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    v23 = &_swiftEmptyArrayStorage;
    sub_100024DC4(0, v7, 0);
    v8 = v6 + 32;
    v9 = &_swiftEmptyArrayStorage;
    do
    {
      sub_100011C0C(v8, (uint64_t)v20);
      v10 = v21;
      v11 = v22;
      sub_10001190C(v20, v21);
      v12 = dispatch thunk of ApplicationRecord.bundleIdentifier.getter(v10, v11);
      v14 = v13;
      sub_10000D160(v20);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        sub_100024DC4(0, v9[2] + 1, 1);
        v9 = v23;
      }
      v16 = v9[2];
      v15 = v9[3];
      if (v16 >= v15 >> 1)
      {
        sub_100024DC4(v15 > 1, v16 + 1, 1);
        v9 = v23;
      }
      v9[2] = v16 + 1;
      v17 = (char *)&v9[2 * v16];
      *((_QWORD *)v17 + 4) = v12;
      *((_QWORD *)v17 + 5) = v14;
      v8 += 40;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    v9 = &_swiftEmptyArrayStorage;
  }
  v18 = sub_1000264F4((uint64_t)v9);
  swift_bridgeObjectRelease(v9);
  return v18;
}

id sub_100023680(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  Class isa;
  id v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  id v18;
  Class v19;
  id v20;
  id v22;
  uint64_t v23;
  uint64_t v24;

  v8 = sub_100003FC4(&qword_1000513C0);
  v9 = swift_allocObject(v8, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100041120;
  *(_QWORD *)(v9 + 32) = a1;
  v23 = v9;
  specialized Array._endMutation()(v9);
  v10 = objc_allocWithZone((Class)INStartCallIntent);
  sub_100026588(0, (unint64_t *)&qword_1000513C8, INPerson_ptr);
  v22 = a1;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  v12 = objc_msgSend(v10, "initWithCallRecordFilter:callRecordToCallBack:audioRoute:destinationType:contacts:callCapability:", 0, 0, 0, 1, isa, a2);

  if (a4)
  {
    v13 = sub_100026588(0, &qword_1000513D0, INStartCallIntent_ptr);
    v14 = sub_100023500(v13);
    v15 = sub_100023870(a3, a4, v14);
    swift_bridgeObjectRelease(v14);
    if ((v15 & 1) == 0)
    {
      if (a2 == 2)
      {
        v16 = swift_allocObject(v8, 40, 7);
        *(_OWORD *)(v16 + 16) = xmmword_100041120;
        *(_QWORD *)(v16 + 32) = v22;
        v24 = v16;
        specialized Array._endMutation()(v16);
        v17 = objc_allocWithZone((Class)INStartVideoCallIntent);
        v18 = v22;
        v19 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v24);
        v20 = objc_msgSend(v17, "initWithContacts:", v19);

        return v20;
      }
      else
      {

        return 0;
      }
    }
  }
  return v12;
}

uint64_t sub_100023870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD v18[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v18, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v18, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

void sub_1000239A4(uint64_t a1, unsigned int (*a2)(uint64_t, uint64_t, uint64_t), void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  NSString v59;
  id v60;
  uint64_t v61;
  id v62;
  NSString v63;
  id v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, _QWORD, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  id v96;
  NSString v97;
  id v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  id v126;
  NSObject *v127;
  os_log_type_t v128;
  uint64_t v129;
  _QWORD *v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  unint64_t v140;
  NSObject *v141;
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  uint64_t v145;
  _BOOL4 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  uint64_t v161;
  unsigned int (*v162)(uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  Swift::String v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  void (*v172)(void *);
  void *v173;
  uint64_t v174;
  void (*v175)(_QWORD);
  uint64_t v176;
  void *v177;
  Swift::String v178;
  unint64_t v179;
  void *v180;
  char *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  NSObject *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  unsigned int (*v208)(uint64_t, uint64_t, uint64_t);
  uint64_t v209;
  void (*v210)(_QWORD);
  _QWORD *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;

  v210 = a3;
  v208 = a2;
  v209 = a4;
  v5 = type metadata accessor for Logger(0);
  v203 = *(_QWORD *)(v5 - 8);
  v204 = v5;
  v6 = __chkstk_darwin(v5);
  v200 = ((char *)&v187 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v206 = (char *)&v187 - v8;
  v9 = sub_100003FC4(&qword_100051398);
  __chkstk_darwin(v9);
  v207 = (char *)&v187 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = type metadata accessor for HandleType(0);
  v192 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v191 = (char *)&v187 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003FC4(&qword_100050D10);
  v13 = __chkstk_darwin(v12);
  v189 = (uint64_t)&v187 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v188 = (uint64_t)&v187 - v16;
  v17 = __chkstk_darwin(v15);
  v199 = (uint64_t)&v187 - v18;
  v19 = __chkstk_darwin(v17);
  v195 = (uint64_t)&v187 - v20;
  v21 = __chkstk_darwin(v19);
  v205 = (uint64_t)&v187 - v22;
  v23 = __chkstk_darwin(v21);
  v190 = (uint64_t)&v187 - v24;
  v25 = __chkstk_darwin(v23);
  v202 = (uint64_t)&v187 - v26;
  __chkstk_darwin(v25);
  v201 = (uint64_t *)((char *)&v187 - v27);
  v28 = type metadata accessor for QuickActionType(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v187 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v34 = (char *)&v187 - v33;
  v35 = sub_100003FC4(&qword_100050A00);
  __chkstk_darwin(v35);
  v198 = (char *)&v187 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100003FC4(&qword_100050688);
  __chkstk_darwin(v37);
  v39 = (char *)&v187 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for URL(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(_QWORD *)(v41 + 64);
  v43 = __chkstk_darwin(v40);
  v196 = (char *)&v187 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __chkstk_darwin(v43);
  v197 = (char *)&v187 - v45;
  v46 = a1;
  if ((QuickAction.useStandardProtocol.getter(v44) & 1) != 0)
  {
    v194 = a1;
    QuickAction.standardProtocolURL.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40) != 1)
    {
      v73 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
      v74 = v197;
      v73(v197, v39, v40);
      v75 = type metadata accessor for TaskPriority(0);
      v76 = (uint64_t)v198;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v198, 1, 1, v75);
      v77 = v196;
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v196, v74, v40);
      v78 = *(unsigned __int8 *)(v41 + 80);
      v79 = (v78 + 40) & ~v78;
      v80 = (v42 + v79 + 7) & 0xFFFFFFFFFFFFFFF8;
      v81 = (char *)swift_allocObject(&unk_10004E470, v80 + 16, v78 | 7);
      *((_QWORD *)v81 + 2) = 0;
      *((_QWORD *)v81 + 3) = 0;
      v82 = v211;
      *((_QWORD *)v81 + 4) = v211;
      v73(&v81[v79], v77, v40);
      v83 = &v81[v80];
      v84 = v209;
      *(_QWORD *)v83 = v210;
      *((_QWORD *)v83 + 1) = v84;
      swift_retain(v82);
      swift_retain(v84);
      v85 = sub_100027F10(v76, (uint64_t)&unk_1000513B0, (uint64_t)v81);
      swift_release(v85);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v74, v40);
      return;
    }
    sub_100004EE0((uint64_t)v39, &qword_100050688);
    v46 = v194;
  }
  QuickAction.type.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v32, enum case for QuickActionType.videoCall(_:), v28);
  v47 = sub_10002632C();
  dispatch thunk of RawRepresentable.rawValue.getter(&v214, v28, v47);
  dispatch thunk of RawRepresentable.rawValue.getter(&v212, v28, v47);
  v48 = v215;
  v49 = v213;
  v50 = v34;
  if (v214 == v212 && v215 == v213)
  {
    v51 = 1;
    v49 = v215;
  }
  else
  {
    v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  v52 = (uint64_t)v208;
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v49);
  v53 = *(void (**)(char *, uint64_t))(v29 + 8);
  v53(v32, v28);
  v54 = ((uint64_t (*)(char *, uint64_t))v53)(v50, v28);
  if ((v51 & 1) != 0)
    v55 = 2;
  else
    v55 = 1;
  QuickAction.handle.getter(v54);
  if (v56)
  {
    v57 = v56;
    v58 = objc_allocWithZone((Class)CNPhoneNumber);
    v59 = String._bridgeToObjectiveC()();
    v60 = objc_msgSend(v58, "initWithStringValue:", v59);

    if (v60)
      v61 = 2;
    else
      v61 = 1;
    v62 = objc_allocWithZone((Class)INPersonHandle);
    v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v57);
    v64 = objc_msgSend(v62, "initWithValue:type:", v63, v61);
    v65 = v211;
    v66 = v207;
    goto LABEL_33;
  }
  v67 = (uint64_t)v201;
  sub_100026374(v52, (uint64_t)v201);
  v68 = type metadata accessor for Person(0);
  v69 = *(_QWORD *)(v68 - 8);
  v70 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  if (v70(v67, 1, v68) == 1)
  {
    v71 = sub_100004EE0(v67, &qword_100050D10);
    v65 = v211;
    v72 = v202;
    goto LABEL_24;
  }
  v86 = v192;
  v87 = *(void (**)(char *, _QWORD, uint64_t))(v192 + 104);
  v208 = v70;
  v88 = v69;
  v89 = v52;
  v90 = v55;
  v91 = v191;
  v92 = v193;
  v87(v191, enum case for HandleType.phoneNumber(_:), v193);
  v198 = (char *)Person.preferredHandle(ofType:)(v91);
  v94 = v93;
  v95 = v91;
  v55 = v90;
  v52 = v89;
  v69 = v88;
  v70 = v208;
  (*(void (**)(char *, uint64_t))(v86 + 8))(v95, v92);
  v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v67, v68);
  v65 = v211;
  v72 = v202;
  if (!v94)
  {
LABEL_24:
    QuickAction.handle.getter(v71);
    v102 = v101;
    sub_100026374(v52, v72);
    if (v102)
    {
      sub_100004EE0(v72, &qword_100050D10);
      v103 = objc_allocWithZone((Class)INPersonHandle);
      v66 = v207;
    }
    else
    {
      v104 = v190;
      sub_100026374(v72, v190);
      if (v70(v104, 1, v68) == 1)
      {
        sub_100004EE0(v72, &qword_100050D10);
        sub_100004EE0(v104, &qword_100050D10);
        v103 = objc_allocWithZone((Class)INPersonHandle);
        v63 = 0;
        v66 = v207;
        goto LABEL_32;
      }
      v208 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v55;
      v105 = v192;
      v106 = v191;
      v107 = v193;
      (*(void (**)(char *, _QWORD, uint64_t))(v192 + 104))(v191, enum case for HandleType.email(_:), v193);
      Person.preferredHandle(ofType:)(v106);
      v102 = v108;
      (*(void (**)(char *, uint64_t))(v105 + 8))(v106, v107);
      sub_100004EE0(v202, &qword_100050D10);
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v190, v68);
      v103 = objc_allocWithZone((Class)INPersonHandle);
      v66 = v207;
      if (!v102)
      {
        v63 = 0;
        v55 = (uint64_t)v208;
        goto LABEL_32;
      }
      v55 = (uint64_t)v208;
    }
    v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v102);
LABEL_32:
    v64 = objc_msgSend(v103, "initWithValue:type:", v63, 1);
    goto LABEL_33;
  }
  v96 = objc_allocWithZone((Class)CNPhoneNumber);
  swift_bridgeObjectRetain(v94);
  v97 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v94);
  v98 = objc_msgSend(v96, "initWithStringValue:", v97);

  if (v98)
    v99 = 2;
  else
    v99 = 1;
  v100 = objc_allocWithZone((Class)INPersonHandle);
  v63 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v94);
  v64 = objc_msgSend(v100, "initWithValue:type:", v63, v99);
  v66 = v207;
LABEL_33:

  v109 = type metadata accessor for PersonNameComponents(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56))(v66, 1, 1, v109);
  v110 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v64;
  v111 = QuickAction.contactIdentifier.getter();
  v113 = v112;
  v114 = QuickAction.customIdentifier.getter();
  v116 = v115;
  v117 = objc_allocWithZone((Class)INPerson);
  v118 = (char *)sub_1000292F4(v110, (uint64_t)v66, 0, 0, 0, v111, v113, v114, v116);
  v119 = ((uint64_t (*)(void))QuickAction.bundleID.getter)();
  v121 = v120;
  v122 = sub_100023680(v118, v55, v119, v120);
  v123 = swift_bridgeObjectRelease(v121);
  if (v122)
  {
    v207 = v118;
    v208 = v110;
    v124 = v206;
    static PeopleLogger.common.getter(v123);
    v125 = v205;
    sub_100026374(v52, v205);
    v126 = v122;
    v127 = Logger.logObject.getter(v126);
    v128 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v127, v128))
    {
      v200 = v127;
      v194 = v46;
      v129 = swift_slowAlloc(22, -1);
      v130 = (_QWORD *)swift_slowAlloc(8, -1);
      v202 = swift_slowAlloc(32, -1);
      v214 = v202;
      *(_DWORD *)v129 = 138412546;
      v212 = (uint64_t)v126;
      v131 = v126;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, &v213, v129 + 4, v129 + 12);
      v201 = v130;
      *v130 = v122;

      *(_WORD *)(v129 + 12) = 2080;
      v132 = v195;
      sub_100026374(v125, v195);
      v133 = type metadata accessor for Person(0);
      v134 = *(_QWORD *)(v133 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133) == 1)
      {
        sub_100004EE0(v132, &qword_100050D10);
        v135 = 0xE100000000000000;
        v136 = 45;
      }
      else
      {
        v136 = Person.description.getter();
        v135 = v157;
        (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v132, v133);
      }
      v159 = (uint64_t)v201;
      v158 = v202;
      v160 = v200;
      v212 = sub_10001CBB4(v136, v135, &v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, &v213, v129 + 14, v129 + 22);
      swift_bridgeObjectRelease(v135);
      sub_100004EE0(v205, &qword_100050D10);
      _os_log_impl((void *)&_mh_execute_header, v160, v128, "handling call intent: %@ for person: %s", (uint8_t *)v129, 0x16u);
      v161 = sub_100003FC4(&qword_1000513A0);
      swift_arrayDestroy(v159, 1, v161);
      swift_slowDealloc(v159, -1, -1);
      swift_arrayDestroy(v158, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v158, -1, -1);
      swift_slowDealloc(v129, -1, -1);

      v154 = (*(uint64_t (**)(char *, uint64_t))(v203 + 8))(v206, v204);
      v155 = v209;
      v156 = (uint64_t)v210;
    }
    else
    {

      sub_100004EE0(v125, &qword_100050D10);
      v154 = (*(uint64_t (**)(char *, uint64_t))(v203 + 8))(v124, v204);
      v155 = v209;
      v156 = (uint64_t)v210;
    }
    v162 = v208;
    v163 = QuickAction.bundleID.getter(v154);
    v165 = v164;
    sub_10002A2E0(v126, v163, v164, v156, v155);

    swift_bridgeObjectRelease(v165);
  }
  else
  {
    v137 = QuickAction.handle.getter(v123);
    if (v138)
    {
      v139 = (char *)v137;
      v140 = v138;
      v141 = v200;
      static PeopleLogger.common.getter(v137);
      v142 = v199;
      sub_100026374(v52, v199);
      v143 = swift_bridgeObjectRetain_n(v140, 2);
      v144 = Logger.logObject.getter(v143);
      LODWORD(v145) = static os_log_type_t.default.getter();
      v146 = os_log_type_enabled(v144, (os_log_type_t)v145);
      v207 = v139;
      if (v146)
      {
        v208 = v110;
        v147 = swift_slowAlloc(22, -1);
        v148 = swift_slowAlloc(64, -1);
        v214 = v148;
        *(_DWORD *)v147 = 136315394;
        swift_bridgeObjectRetain(v140);
        v212 = sub_10001CBB4((uint64_t)v139, v140, &v214);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, &v213, v147 + 4, v147 + 12);
        swift_bridgeObjectRelease_n(v140, 3);
        *(_WORD *)(v147 + 12) = 2080;
        v149 = v188;
        sub_100026374(v142, v188);
        v150 = type metadata accessor for Person(0);
        v151 = *(_QWORD *)(v150 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v149, 1, v150) == 1)
        {
          sub_100004EE0(v149, &qword_100050D10);
          v152 = 0xE100000000000000;
          v153 = 45;
        }
        else
        {
          LODWORD(v206) = v145;
          v145 = v148;
          v181 = v118;
          v182 = v149;
          v153 = Person.description.getter();
          v152 = v183;
          v184 = v182;
          v118 = v181;
          v148 = v145;
          LOBYTE(v145) = (_BYTE)v206;
          (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v184, v150);
        }
        v176 = v209;
        v212 = sub_10001CBB4(v153, v152, &v214);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, &v213, v147 + 14, v147 + 22);
        swift_bridgeObjectRelease(v152);
        sub_100004EE0(v199, &qword_100050D10);
        _os_log_impl((void *)&_mh_execute_header, v144, (os_log_type_t)v145, "handling telephony voice call for handle: %s, person: %s", (uint8_t *)v147, 0x16u);
        swift_arrayDestroy(v148, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v148, -1, -1);
        swift_slowDealloc(v147, -1, -1);

        (*(void (**)(NSObject *, uint64_t))(v203 + 8))(v200, v204);
        v175 = v210;
        v65 = v211;
        v110 = v208;
      }
      else
      {
        swift_bridgeObjectRelease_n(v140, 2);
        sub_100004EE0(v142, &qword_100050D10);

        (*(void (**)(NSObject *, uint64_t))(v203 + 8))(v141, v204);
        v176 = v209;
        v175 = v210;
      }
      v185 = v65[5];
      v186 = v65[6];
      sub_10001190C(v65 + 2, v185);
      (*(void (**)(char *, unint64_t, void (*)(_QWORD), uint64_t, uint64_t, uint64_t))(v186 + 8))(v207, v140, v175, v176, v185, v186);

      swift_bridgeObjectRelease(v140);
    }
    else
    {
      v166 = v118;
      v214 = 0;
      v215 = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v167._object = (void *)0x8000000100049CE0;
      v167._countAndFlagsBits = 0xD000000000000036;
      String.append(_:)(v167);
      v168 = v189;
      sub_100026374(v52, v189);
      v169 = type metadata accessor for Person(0);
      v170 = *(_QWORD *)(v169 - 8);
      v171 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v170 + 48))(v168, 1, v169);
      v172 = (void (*)(void *))v210;
      if (v171 == 1)
      {
        sub_100004EE0(v168, &qword_100050D10);
        v173 = (void *)0xE100000000000000;
        v174 = 45;
      }
      else
      {
        v174 = Person.description.getter();
        v173 = v177;
        (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v168, v169);
      }
      v178._countAndFlagsBits = v174;
      v178._object = v173;
      String.append(_:)(v178);
      swift_bridgeObjectRelease(v173);
      v179 = v215;
      v180 = (void *)static PeopleErrors.createError(_:code:)(v214, v215, 500);
      swift_bridgeObjectRelease(v179);
      v172(v180);

    }
  }
}

uint64_t sub_100024A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[29] = a6;
  v7[30] = a7;
  v7[27] = a4;
  v7[28] = a5;
  return swift_task_switch(sub_100024A78, 0, 0);
}

uint64_t sub_100024A78()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  NSURL *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  uint64_t v14;

  v1 = v0;
  v2 = v0 + 2;
  v3 = v1[27];
  v4 = sub_100003FC4(&qword_1000513B8);
  inited = swift_initStackObject(v4, v1 + 10);
  *(_OWORD *)(inited + 16) = xmmword_100040770;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPromptUnlockDevice);
  *(_QWORD *)(inited + 40) = v6;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  v7 = sub_100028204(inited);
  v8 = *(void **)(v3 + 104);
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  v1[31] = v10;
  v12 = sub_10002834C(v7);
  swift_bridgeObjectRelease(v7);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v1[32] = isa;
  swift_bridgeObjectRelease(v12);
  v1[7] = v1 + 25;
  v1[2] = v1;
  v1[3] = sub_100024BDC;
  v14 = swift_continuation_init(v2, 0);
  v1[20] = _NSConcreteStackBlock;
  v1 += 20;
  v1[1] = 0x40000000;
  v1[2] = sub_100028710;
  v1[3] = &unk_10004E488;
  v1[4] = v14;
  objc_msgSend(v8, "openSensitiveURLInBackground:withOptions:completionHandler:", v11, isa, v1);
  return swift_continuation_await(v2);
}

uint64_t sub_100024BDC()
{
  return swift_task_switch(sub_100024C28, 0, 0);
}

uint64_t sub_100024C28()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void (*v3)(_QWORD);

  v2 = *(void **)(v0 + 248);
  v1 = *(void **)(v0 + 256);
  v3 = *(void (**)(_QWORD))(v0 + 232);
  swift_errorRelease(*(_QWORD *)(v0 + 208));

  v3(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100024C78()
{
  uint64_t v0;

  sub_10000D160((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  sub_10000D160((_QWORD *)(v0 + 64));

  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for CallActionHandler()
{
  return objc_opt_self(_TtC25PeopleWidget_iOSExtension17CallActionHandler);
}

void sub_100024CD8(uint64_t a1, unsigned int (*a2)(uint64_t, uint64_t, uint64_t), void (*a3)(_QWORD), uint64_t a4)
{
  sub_1000239A4(a1, a2, a3, a4);
}

uint64_t sub_100024CF8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100024DFC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100024D14(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100024F9C(a1, a2, a3, (_QWORD *)*v3, &qword_100050A90, (uint64_t (*)(_QWORD))&type metadata accessor for PersonInfo);
  *v3 = result;
  return result;
}

uint64_t sub_100024D40(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100024F9C(a1, a2, a3, (_QWORD *)*v3, &qword_100050A18, type metadata accessor for MultipleContactsEntry);
  *v3 = result;
  return result;
}

uint64_t sub_100024D6C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100024F9C(a1, a2, a3, (_QWORD *)*v3, &qword_1000513F0, type metadata accessor for PersonEntryType);
  *v3 = result;
  return result;
}

uint64_t sub_100024D98(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100024F9C(a1, a2, a3, (_QWORD *)*v3, &qword_100050E50, type metadata accessor for SingleContactTimelineEntry);
  *v3 = result;
  return result;
}

uint64_t sub_100024DC4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10002517C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100024DE0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000252E4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100024DFC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003FC4(&qword_1000513F8);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8)
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_100003FC4(&qword_100050A58);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100024F9C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100003FC4(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10002517C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003FC4(&qword_100050A80);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000252E4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003FC4(&qword_100051400);
    v11 = (char *)swift_allocObject(v10, 72 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[72 * v8])
      memmove(v13, v14, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[72 * v8] || v13 >= &v14[72 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10002546C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  _QWORD v22[9];

  v7 = *v3;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v22, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain(v15);
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v22[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1000258F4(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v21 = *v3;
  *v3 = v22[0];
  swift_bridgeObjectRelease(v21);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

Swift::Int sub_100025618(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003FC4(&qword_1000513D8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_1000258F4(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100025618(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100025A8C();
      goto LABEL_22;
    }
    sub_100025C3C(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v26, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v26, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = *v16 == v8 && v16[1] == a2;
    if (v17 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v18 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v19 = (_QWORD *)(v15 + 16 * a3);
        if (*v19 != v8 || v19[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v21 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v22 = (uint64_t *)(*(_QWORD *)(v21 + 48) + 16 * a3);
  *v22 = v8;
  v22[1] = a2;
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v21 + 16) = v25;
  return result;
}

void *sub_100025A8C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100003FC4(&qword_1000513D8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_100025C3C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003FC4(&qword_1000513D8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

id sub_100025EE8()
{
  id v0;
  void *v1;
  id result;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  _UNKNOWN **v16;

  v0 = objc_msgSend((id)objc_opt_self(TUCallCenter), "sharedInstance");
  v1 = (void *)objc_opt_self(LSApplicationWorkspace);
  result = objc_msgSend(v1, "defaultWorkspace");
  if (result)
  {
    v3 = result;
    v4 = sub_100026588(0, (unint64_t *)&qword_1000513E0, LSApplicationWorkspace_ptr);
    v15 = v4;
    v16 = &off_10004E630;
    *(_QWORD *)&v14 = v3;
    v5 = type metadata accessor for IntentLauncher();
    v6 = swift_allocObject(v5, 56, 7);
    sub_100004F70(&v14, v6 + 16);
    result = objc_msgSend(v1, "defaultWorkspace");
    if (result)
    {
      v7 = result;
      v8 = objc_msgSend(objc_allocWithZone((Class)CNLaunchServices), "init");
      v15 = sub_100026588(0, &qword_1000513E8, TUCallCenter_ptr);
      v16 = &off_10004E438;
      *(_QWORD *)&v14 = v0;
      v12 = v4;
      v13 = &protocol witness table for LSApplicationWorkspace;
      *(_QWORD *)&v11 = v7;
      v9 = type metadata accessor for CallActionHandler();
      v10 = swift_allocObject(v9, 112, 7);
      sub_100004F70(&v14, v10 + 16);
      *(_QWORD *)(v10 + 56) = v6;
      sub_100004F70(&v11, v10 + 64);
      *(_QWORD *)(v10 + 104) = v8;
      return (id)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100026068(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, _QWORD, uint64_t);
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = type metadata accessor for QuickAction(0);
  v34 = *(_QWORD *)(v2 - 8);
  v35 = v2;
  __chkstk_darwin(v2);
  v36 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for QuickActionType(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v33 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v32 = (char *)&v31 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v31 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v31 - v14;
  v16 = a1;
  QuickAction.type.getter(v13);
  v17 = *(void (**)(char *, _QWORD, uint64_t))(v5 + 104);
  v17(v12, enum case for QuickActionType.videoCall(_:), v4);
  v18 = sub_10002632C();
  dispatch thunk of RawRepresentable.rawValue.getter(&v39, v4, v18);
  dispatch thunk of RawRepresentable.rawValue.getter(&v37, v4, v18);
  v19 = v40;
  v20 = v38;
  if (v39 == v37 && v40 == v38)
  {
    v21 = 1;
    v20 = v40;
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v20);
  v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v12, v4);
  v22(v15, v4);
  v24 = v34;
  v23 = v35;
  v25 = v36;
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 16))(v36, v16, v35);
  if ((v21 & 1) != 0)
  {
    v27 = 1;
  }
  else
  {
    QuickAction.type.getter(v26);
    v17(v33, enum case for QuickActionType.voiceCall(_:), v4);
    dispatch thunk of RawRepresentable.rawValue.getter(&v39, v4, v18);
    dispatch thunk of RawRepresentable.rawValue.getter(&v37, v4, v18);
    v28 = v40;
    v29 = v38;
    if (v39 == v37 && v40 == v38)
    {
      v27 = 1;
      v29 = v40;
    }
    else
    {
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v29);
    v22(v33, v4);
    v22(v32, v4);
    v25 = v36;
  }
  (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v23);
  return v27 & 1;
}

unint64_t sub_10002632C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051390;
  if (!qword_100051390)
  {
    v1 = type metadata accessor for QuickActionType(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for QuickActionType, v1);
    atomic_store(result, (unint64_t *)&qword_100051390);
  }
  return result;
}

uint64_t sub_100026374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003FC4(&qword_100050D10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000263BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100026458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v2 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 32);
  v6 = v0 + v3;
  v7 = swift_task_alloc(dword_1000513AC);
  v8 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)v7 = v1;
  *(_QWORD *)(v7 + 8) = sub_100009E00;
  *(_OWORD *)(v7 + 232) = v8;
  *(_QWORD *)(v7 + 216) = v5;
  *(_QWORD *)(v7 + 224) = v6;
  return swift_task_switch(sub_100024A78, 0, 0);
}

uint64_t sub_1000264F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10002546C(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100026588(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000265C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000265D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000265DC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v22[5];

  v3 = type metadata accessor for ContactFormatter.Style(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[6];
  v8 = v1[7];
  v9 = sub_10001190C(v1 + 3, v7);
  v10 = QuickAction.contactIdentifier.getter(v9);
  v12 = v11;
  v13 = (void *)dispatch thunk of ContactFetcherProtocol.contact(for:includeImages:)(v10, v11, 0, v7, v8);
  swift_bridgeObjectRelease(v12);
  if (v13)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for ContactFormatter.Style.shortName(_:), v3);
    v14 = v13;
    v15 = String.localized.getter(0x656D614E206F4ELL, 0xE700000000000000);
    v17 = v16;
    v22[3] = type metadata accessor for ContactFormatter(0);
    v22[4] = &protocol witness table for ContactFormatter;
    sub_100004F2C(v22);
    ContactFormatter.init(style:fallback:)(v6, v15, v17);
    Person.init(from:statuses:contactFormatter:)(v14, &_swiftEmptyArrayStorage, v22);

    v18 = type metadata accessor for Person(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 0, 1, v18);
  }
  else
  {
    v20 = type metadata accessor for Person(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 1, 1, v20);
  }
}

uint64_t sub_100026794(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  void (*v31)(char *, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t DynamicType;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  int v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  void (*v117)(char *, uint64_t);
  void (*v118)(char *, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;

  v119 = type metadata accessor for QuickAction(0);
  v121 = *(_QWORD *)(v119 - 8);
  v2 = __chkstk_darwin(v119);
  v113 = (char *)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v110 = (char *)&v105 - v5;
  v6 = __chkstk_darwin(v4);
  v114 = (char *)&v105 - v7;
  v109 = v8;
  __chkstk_darwin(v6);
  v10 = (char *)&v105 - v9;
  v120 = type metadata accessor for Logger(0);
  v111 = *(_QWORD *)(v120 - 8);
  v11 = __chkstk_darwin(v120);
  v115 = (char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v116 = (char *)&v105 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v105 - v15;
  v17 = sub_100003FC4(&qword_100050D10);
  v18 = __chkstk_darwin(v17);
  v108 = (uint64_t)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v105 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v105 - v23;
  v25 = type metadata accessor for QuickActionType(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v105 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PeopleAnalytics(0);
  v29 = static PeopleAnalytics.shared.getter();
  QuickAction.type.getter(v29);
  dispatch thunk of PeopleAnalytics.sendWidgetPerformQuickAction(_:)(v28);
  swift_release(v29);
  v30 = *(void (**)(char *, uint64_t))(v26 + 8);
  v31 = v117;
  v32 = v28;
  v33 = v16;
  v34 = v10;
  v35 = v119;
  v36 = v25;
  v37 = v121;
  v30(v32, v36);
  v38 = sub_1000265DC((uint64_t)v24);
  static PeopleLogger.viewService.getter(v38);
  v118 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
  v118(v34, a1, v35);
  v39 = sub_100026374((uint64_t)v24, (uint64_t)v22);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v40, (os_log_type_t)v41))
  {
    v106 = v41;
    v107 = v33;
    v42 = swift_slowAlloc(22, -1);
    v105 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v130 = v105;
    *(_DWORD *)v42 = 136315394;
    v43 = sub_100027524();
    v44 = dispatch thunk of CustomStringConvertible.description.getter(v35, v43);
    v46 = v45;
    *(_QWORD *)&v127 = sub_10001CBB4(v44, v45, (uint64_t *)&v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, (char *)&v127 + 8, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease(v46);
    v47 = *(void (**)(char *, uint64_t))(v121 + 8);
    v47(v34, v35);
    *(_WORD *)(v42 + 12) = 2080;
    v48 = v108;
    sub_100026374((uint64_t)v22, v108);
    v49 = type metadata accessor for Person(0);
    v50 = *(_QWORD *)(v49 - 8);
    v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49);
    v112 = v47;
    v52 = (uint64_t)v22;
    if (v51 == 1)
    {
      sub_100004EE0(v48, &qword_100050D10);
      v53 = 0xE100000000000000;
      v54 = 45;
    }
    else
    {
      v56 = v48;
      v54 = Person.description.getter();
      v53 = v57;
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v56, v49);
    }
    v31 = v117;
    v58 = v111;
    *(_QWORD *)&v127 = sub_10001CBB4(v54, v53, (uint64_t *)&v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, (char *)&v127 + 8, v42 + 14, v42 + 22);
    swift_bridgeObjectRelease(v53);
    sub_100004EE0(v52, &qword_100050D10);
    _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v106, "Attempting to handle action: %s, for person: %s", (uint8_t *)v42, 0x16u);
    v59 = v105;
    swift_arrayDestroy(v105, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v42, -1, -1);

    v55 = *(void (**)(char *, uint64_t))(v58 + 8);
    v55(v107, v120);
  }
  else
  {
    v112 = *(void (**)(char *, uint64_t))(v37 + 8);
    v112(v34, v35);
    sub_100004EE0((uint64_t)v22, &qword_100050D10);

    v55 = *(void (**)(char *, uint64_t))(v111 + 8);
    v55(v33, v120);
  }
  v60 = *((_QWORD *)v31 + 2);
  v61 = *(_QWORD *)(v60 + 16);
  if (v61)
  {
    v62 = v60 + 32;
    swift_bridgeObjectRetain(*((_QWORD *)v31 + 2));
    v63 = v119;
    while (1)
    {
      sub_100011C0C(v62, (uint64_t)&v130);
      v64 = v131;
      v65 = v132;
      sub_10001190C(&v130, v131);
      if (((*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v65 + 8))(a1, v24, v64, v65) & 1) != 0)
        break;
      sub_10000D160(&v130);
      v62 += 40;
      if (!--v61)
        goto LABEL_13;
    }
    sub_100004F70(&v130, (uint64_t)&v127);
  }
  else
  {
    swift_bridgeObjectRetain(*((_QWORD *)v31 + 2));
    v63 = v119;
LABEL_13:
    v129 = 0;
    v127 = 0u;
    v128 = 0u;
  }
  swift_bridgeObjectRelease(v60);
  v66 = v116;
  v67 = v114;
  v68 = v115;
  v69 = v113;
  if (*((_QWORD *)&v128 + 1))
  {
    v70 = sub_100004F70(&v127, (uint64_t)&v130);
    static PeopleLogger.viewService.getter(v70);
    sub_100011C0C((uint64_t)&v130, (uint64_t)&v124);
    v71 = ((uint64_t (*)(char *, uint64_t, uint64_t))v118)(v67, a1, v63);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v72, v73))
    {
      v74 = swift_slowAlloc(22, -1);
      v115 = (char *)swift_slowAlloc(64, -1);
      v123 = v115;
      *(_DWORD *)v74 = 136315394;
      v75 = v126;
      v76 = sub_10001190C(&v124, v126);
      DynamicType = swift_getDynamicType(v76, v75, 1);
      v78 = _typeName(_:qualified:)(DynamicType, 0);
      v80 = v79;
      v122 = sub_10001CBB4(v78, v79, (uint64_t *)&v123);
      v117 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v74 + 4, v74 + 12);
      swift_bridgeObjectRelease(v80);
      sub_10000D160(&v124);
      *(_WORD *)(v74 + 12) = 2080;
      v81 = sub_100027524();
      v82 = dispatch thunk of CustomStringConvertible.description.getter(v63, v81);
      v84 = v83;
      v122 = sub_10001CBB4(v82, v83, (uint64_t *)&v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v74 + 14, v74 + 22);
      swift_bridgeObjectRelease(v84);
      v112(v67, v63);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Got handler: %s for action: %s", (uint8_t *)v74, 0x16u);
      v85 = v115;
      swift_arrayDestroy(v115, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v74, -1, -1);

      v117(v116, v120);
    }
    else
    {
      sub_10000D160(&v124);
      v112(v67, v63);

      v55(v66, v120);
    }
    v97 = v131;
    v98 = v132;
    sub_10001190C(&v130, v131);
    v99 = v110;
    v118(v110, a1, v63);
    v100 = v121;
    v101 = *(unsigned __int8 *)(v121 + 80);
    v102 = (v101 + 16) & ~v101;
    v103 = swift_allocObject(&unk_10004E4E0, v102 + v109, v101 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v103 + v102, v99, v63);
    (*(void (**)(uint64_t, char *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v98 + 16))(a1, v24, sub_1000275CC, v103, v97, v98);
    swift_release(v103);
    sub_100004EE0((uint64_t)v24, &qword_100050D10);
    return sub_10000D160(&v130);
  }
  else
  {
    v86 = sub_100004EE0((uint64_t)&v127, &qword_1000514C0);
    static PeopleLogger.viewService.getter(v86);
    v87 = ((uint64_t (*)(char *, uint64_t, uint64_t))v118)(v69, a1, v63);
    v88 = Logger.logObject.getter(v87);
    v89 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc(12, -1);
      v91 = swift_slowAlloc(32, -1);
      v117 = v55;
      v92 = v91;
      *(_QWORD *)&v130 = v91;
      *(_DWORD *)v90 = 136315138;
      v93 = sub_100027524();
      v94 = dispatch thunk of CustomStringConvertible.description.getter(v63, v93);
      v96 = v95;
      v124 = sub_10001CBB4(v94, v95, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, &v125, v90 + 4, v90 + 12);
      swift_bridgeObjectRelease(v96);
      v112(v69, v63);
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "No available handler for action: %s", v90, 0xCu);
      swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1, -1);
      swift_slowDealloc(v90, -1, -1);

      v117(v115, v120);
    }
    else
    {
      v112(v69, v63);

      v55(v68, v120);
    }
    return sub_100004EE0((uint64_t)v24, &qword_100050D10);
  }
}

uint64_t sub_10002720C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE v28[4];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  _BYTE v34[8];
  uint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for QuickAction(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8);
  v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a1)
  {
    v13 = swift_errorRetain(a1);
    static PeopleLogger.viewService.getter(v13);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
    swift_errorRetain(a1);
    v14 = swift_errorRetain(a1);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      v18 = swift_slowAlloc(22, -1);
      v32 = v9;
      v19 = v18;
      v31 = swift_slowAlloc(64, -1);
      v36 = v31;
      *(_DWORD *)v19 = 136315394;
      v20 = sub_100027524();
      v29 = v17;
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v4, v20);
      v23 = v22;
      v35 = sub_10001CBB4(v21, v22, &v36);
      v30 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v23);
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
      *(_WORD *)(v19 + 12) = 2080;
      swift_getErrorValue(a1, v34, v33);
      v24 = Error.localizedDescription.getter(v33[1], v33[2]);
      v26 = v25;
      v35 = sub_10001CBB4(v24, v25, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease(v26);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v29, "Failed to handle action: %s with error: %s", (uint8_t *)v19, 0x16u);
      v27 = v31;
      swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      swift_errorRelease(a1);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v32 + 8))(v12, v30);
    }
    else
    {
      swift_errorRelease(a1);
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
    }
  }
  return result;
}

uint64_t sub_1000274D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10000D160((_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for ActionLauncher()
{
  return objc_opt_self(_TtC25PeopleWidget_iOSExtension14ActionLauncher);
}

unint64_t sub_100027524()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000514C8;
  if (!qword_1000514C8)
  {
    v1 = type metadata accessor for QuickAction(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for QuickAction, v1);
    atomic_store(result, (unint64_t *)&qword_1000514C8);
  }
  return result;
}

uint64_t sub_10002756C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for QuickAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000275CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for QuickAction(0) - 8) + 80);
  return sub_10002720C(a1, v1 + ((v3 + 16) & ~v3));
}

id sub_100027608()
{
  uint64_t v0;
  uint64_t v1;
  id result;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  _UNKNOWN **v16;

  v0 = sub_100003FC4(&qword_1000514D0);
  v1 = swift_allocObject(v0, 112, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1000411C0;
  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (result)
  {
    v3 = result;
    v15 = sub_100027770();
    v16 = &off_10004E630;
    *(_QWORD *)&v14 = v3;
    v4 = type metadata accessor for IntentLauncher();
    v5 = swift_allocObject(v4, 56, 7);
    sub_100004F70(&v14, v5 + 16);
    v6 = objc_msgSend(objc_allocWithZone((Class)CNLaunchServices), "init");
    v7 = type metadata accessor for MessageActionHandler();
    v8 = swift_allocObject(v7, 32, 7);
    *(_QWORD *)(v8 + 16) = v5;
    *(_QWORD *)(v8 + 24) = v6;
    *(_QWORD *)(v1 + 56) = v7;
    *(_QWORD *)(v1 + 64) = &off_10004E4F8;
    *(_QWORD *)(v1 + 32) = v8;
    v9 = sub_100025EE8();
    *(_QWORD *)(v1 + 96) = type metadata accessor for CallActionHandler();
    *(_QWORD *)(v1 + 104) = &off_10004E448;
    *(_QWORD *)(v1 + 72) = v9;
    v10 = type metadata accessor for ContactFetcher(0);
    v11 = ContactFetcher.__allocating_init()();
    v15 = v10;
    v16 = (_UNKNOWN **)&protocol witness table for ContactFetcher;
    *(_QWORD *)&v14 = v11;
    v12 = type metadata accessor for ActionLauncher();
    v13 = swift_allocObject(v12, 64, 7);
    *(_QWORD *)(v13 + 16) = v1;
    sub_100004F70(&v14, v13 + 24);
    return (id)v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100027770()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000513E0;
  if (!qword_1000513E0)
  {
    v1 = objc_opt_self(LSApplicationWorkspace);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000513E0);
  }
  return result;
}

uint64_t sub_1000277AC(uint64_t (*a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Bool v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Bool v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  char *v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  uint64_t v75;
  char *v76;
  int v77;
  char v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  uint64_t v97[3];
  uint64_t v98;
  uint64_t v99;

  v93 = a3;
  v90 = a2;
  v95 = a1;
  v3 = type metadata accessor for Logger(0);
  v91 = *(_QWORD *)(v3 - 8);
  v92 = v3;
  v4 = __chkstk_darwin(v3);
  v89 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v79 - v6;
  v8 = sub_100003FC4(&qword_100050E68);
  __chkstk_darwin(v8);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PeopleWidgetVerticalLayoutToggleKind(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v79 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v79 - v19;
  v21 = type metadata accessor for PersonStatusSet(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (_AXSPrefersHorizontalTextLayout(v23))
    goto LABEL_7;
  v86 = v25;
  v87 = v22;
  v88 = v21;
  v81 = v10;
  v82 = v18;
  v79 = v15;
  v85 = v12;
  v80 = v7;
  v83 = v11;
  v84 = v20;
  if (qword_100050548 != -1)
    swift_once(&qword_100050548, sub_100027DFC);
  v27 = qword_1000514F0;
  v26 = unk_1000514F8;
  v28 = sub_10001190C(qword_1000514D8, qword_1000514F0);
  v29 = (void *)Person.contact.getter(v28);
  dispatch thunk of ContactFormatterProtocol.displayName(for:)(v29, v27, v26);
  v31 = v30;

  v32 = String.isSuitableForVerticalLayout(maxCount:)(8);
  v33 = swift_bridgeObjectRelease(v31);
  v35 = v87;
  v34 = v88;
  v36 = v86;
  if (!v32)
    goto LABEL_7;
  v37 = Person.statuses.getter(v33);
  v38 = v94;
  v39 = VerticalTextHelper.featureFlags.getter();
  static StatusCompatiblePicker.statusForDisplay(from:featureFlags:)(v37, v39);
  swift_bridgeObjectRelease(v37);
  v40 = swift_release(v39);
  PersonStatusSet.text.getter(v97, v40);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
  v41 = v98;
  v42 = v83;
  if (v98)
  {
    v43 = v99;
    sub_10001190C(v97, v98);
    dispatch thunk of TextStatus.localizedDisplayString.getter(v41, v43);
    v45 = v44;
    sub_10000D160(v97);
    v46 = String.isSuitableForVerticalLayout(maxCount:)(8);
    swift_bridgeObjectRelease(v45);
    v47 = v85;
    v48 = v82;
    v49 = v93;
    if (!v46)
    {
LABEL_7:
      v50 = 0;
      return v50 & 1;
    }
  }
  else
  {
    sub_100004EE0((uint64_t)v97, &qword_100051208);
    v47 = v85;
    v48 = v82;
    v49 = v93;
  }
  v52 = (uint64_t)v81;
  sub_100027EC8(v49, (uint64_t)v81);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v52, 1, v42) == 1)
  {
    v53 = sub_100004EE0(v52, &qword_100050E68);
    v54 = v89;
    static PeopleLogger.extension.getter(v53);
    v55 = swift_retain(v38);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v58 = 67109120;
      LOBYTE(v97[0]) = ((uint64_t (*)(void))dispatch thunk of VerticalTextHelper.isDeviceLanguageChineseOrJapanese())() & 1;
      LODWORD(v97[0]) = LOBYTE(v97[0]);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v97, (char *)v97 + 4, v58 + 4, v58 + 8);
      swift_release(v38);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Using device language to determine vertical layout: %{BOOL}d", v58, 8u);
      swift_slowDealloc(v58, -1, -1);

    }
    else
    {

      swift_release(v38);
    }
    v75 = (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v54, v92);
    v50 = dispatch thunk of VerticalTextHelper.isDeviceLanguageChineseOrJapanese()(v75);
    return v50 & 1;
  }
  v59 = v84;
  v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 32))(v84, v52, v42);
  v61 = v80;
  static PeopleLogger.extension.getter(v60);
  v62 = *(uint64_t (**)(char *, char *, uint64_t))(v47 + 16);
  v63 = v62(v48, v59, v42);
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = swift_slowAlloc(12, -1);
    v95 = v62;
    v67 = v48;
    v68 = (uint8_t *)v66;
    v69 = swift_slowAlloc(32, -1);
    v97[0] = v69;
    *(_DWORD *)v68 = 136315138;
    v70 = PeopleWidgetVerticalLayoutToggleKind.rawValue.getter();
    v72 = v71;
    v96 = sub_10001CBB4(v70, v71, v97);
    v47 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v68 + 4, v68 + 12);
    swift_bridgeObjectRelease(v72);
    v73 = *(void (**)(char *, uint64_t))(v47 + 8);
    v74 = v67;
    v62 = v95;
    v73(v74, v42);
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "Using app intent configuration to determine vertical layout, kind: %s", v68, 0xCu);
    swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v68, -1, -1);
  }
  else
  {
    v73 = *(void (**)(char *, uint64_t))(v47 + 8);
    v73(v48, v42);
  }

  (*(void (**)(char *, uint64_t))(v91 + 8))(v61, v92);
  v76 = v79;
  v62(v79, v84, v42);
  v77 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v76, v42);
  if (v77 == enum case for PeopleWidgetVerticalLayoutToggleKind.showVerticalLayoutToggleDT(_:))
  {
    v78 = SelectPerson.verticalLayoutDT.getter();
LABEL_22:
    v50 = v78;
    v73(v84, v42);
    return v50 & 1;
  }
  if (v77 == enum case for PeopleWidgetVerticalLayoutToggleKind.showVerticalLayoutToggleDF(_:))
  {
    v78 = SelectPerson.verticalLayoutDF.getter();
    goto LABEL_22;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v42, v42);
  __break(1u);
  return result;
}

uint64_t sub_100027DFC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for ContactFormatter.Style(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v3 + 104))(v2, enum case for ContactFormatter.Style.shortName(_:));
  v4 = String.localized.getter(0x656D614E206F4ELL, 0xE700000000000000);
  v6 = v5;
  qword_1000514F0 = type metadata accessor for ContactFormatter(0);
  unk_1000514F8 = &protocol witness table for ContactFormatter;
  sub_100004F2C(qword_1000514D8);
  return ContactFormatter.init(style:fallback:)(v2, v4, v6);
}

uint64_t sub_100027EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003FC4(&qword_100050E68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100004EE0(a1, &qword_100050A00);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9, v12);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v15 = v14;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_10004E548, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, (char *)&type metadata for () + 8, &unk_1000515D8, v17);
}

unint64_t sub_10002805C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_100003FC4(&qword_1000515F8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_100003FC4(&qword_100050A78);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100012534(v13, (uint64_t)v5, &qword_1000515F8);
    v15 = *v5;
    v16 = v5[1];
    result = sub_1000297A4(*v5, v16, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100029810);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for ContactImage(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100028204(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_100003FC4(&qword_1000515E8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100012534(v7, (uint64_t)&v17, &qword_1000515F0);
    v8 = v17;
    v9 = v18;
    result = sub_1000297A4(v17, v18, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100029810);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100029C60(&v19, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      v16 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10002834C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100003FC4(&qword_1000515E0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_10001CE3C(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(_QWORD *)&v40 = v20;
    *((_QWORD *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v20;
    *((_QWORD *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_100029C60(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_100029C60(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_100029C60(v37, v38);
    sub_100029C60(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(_QWORD *)(v11 + 32) = v32;
    result = (uint64_t)sub_100029C60(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_100029C70(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100028710(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
  *(_BYTE *)v4 = a2;
  *(_QWORD *)(v4 + 8) = a3;
  v5 = a3;
  return swift_continuation_resume(v3);
}

void sub_100028744(uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  NSString v47;
  id v48;
  uint64_t v49;
  id v50;
  NSString v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  id v67;
  Class isa;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(_QWORD, _QWORD, _QWORD);
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  void (**v87)(void *);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, _QWORD, uint64_t);
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint64_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void (*v113)(void *);
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  unsigned int (*v123)(_QWORD, _QWORD, _QWORD);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(void *);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144[2];

  v141 = a3;
  v142 = a4;
  v139 = a2;
  v5 = type metadata accessor for CocoaError.Code(0);
  __chkstk_darwin(v5);
  v132 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CocoaError(0);
  v133 = *(_QWORD *)(v7 - 8);
  v134 = v7;
  __chkstk_darwin(v7);
  v131 = (char *)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v130 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v137 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003FC4(&qword_100051398);
  __chkstk_darwin(v11);
  v138 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for HandleType(0);
  v128 = *(_QWORD *)(v13 - 8);
  v129 = v13;
  __chkstk_darwin(v13);
  v127 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003FC4(&qword_100050D10);
  v16 = __chkstk_darwin(v15);
  v126 = (uint64_t)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v136 = (uint64_t)&v122 - v19;
  v20 = __chkstk_darwin(v18);
  v135 = (uint64_t)&v122 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v122 - v22;
  v24 = sub_100003FC4(&qword_100050A00);
  __chkstk_darwin(v24);
  v26 = (char *)&v122 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100003FC4(&qword_100050688);
  __chkstk_darwin(v27);
  v29 = (char *)&v122 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(_QWORD *)(v31 + 64);
  v33 = __chkstk_darwin(v30);
  v34 = (char *)&v122 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v37 = (char *)&v122 - v36;
  v38 = QuickAction.useStandardProtocol.getter(v35);
  if ((v38 & 1) != 0)
  {
    v125 = v9;
    QuickAction.standardProtocolURL.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) != 1)
    {
      v80 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
      v80(v37, v29, v30);
      v81 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v26, 1, 1, v81);
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v34, v37, v30);
      v82 = *(unsigned __int8 *)(v31 + 80);
      v83 = (v82 + 40) & ~v82;
      v84 = (v32 + v83 + 7) & 0xFFFFFFFFFFFFFFF8;
      v85 = (char *)swift_allocObject(&unk_10004E520, v84 + 16, v82 | 7);
      *((_QWORD *)v85 + 2) = 0;
      *((_QWORD *)v85 + 3) = 0;
      v86 = v140;
      *((_QWORD *)v85 + 4) = v140;
      v80(&v85[v83], v34, v30);
      v87 = (void (**)(void *))&v85[v84];
      v88 = v142;
      *v87 = v141;
      v87[1] = (void (*)(void *))v88;
      swift_retain(v86);
      swift_retain(v88);
      v89 = sub_100027F10((uint64_t)v26, (uint64_t)&unk_1000515C8, (uint64_t)v85);
      swift_release(v89);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v37, v30);
      return;
    }
    v38 = sub_100004EE0((uint64_t)v29, &qword_100050688);
    v9 = v125;
  }
  v39 = v9;
  QuickAction.handle.getter(v38);
  v41 = v40;
  v42 = v139;
  sub_100012534(v139, (uint64_t)v23, &qword_100050D10);
  if (v41)
  {
    sub_100004EE0((uint64_t)v23, &qword_100050D10);
    v44 = (uint64_t)v141;
    v43 = v142;
LABEL_6:
    v45 = (uint64_t)v138;
    v46 = objc_allocWithZone((Class)CNPhoneNumber);
    swift_bridgeObjectRetain(v41);
    v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41);
    v48 = objc_msgSend(v46, "initWithStringValue:", v47);

    if (v48)
      v49 = 2;
    else
      v49 = 1;
    v50 = objc_allocWithZone((Class)INPersonHandle);
    v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41);
    v52 = objc_msgSend(v50, "initWithValue:type:", v51, v49);

    v53 = type metadata accessor for PersonNameComponents(0);
    v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v45, 1, 1, v53);
    v55 = QuickAction.contactIdentifier.getter(v54);
    v57 = v56;
    v58 = QuickAction.customIdentifier.getter();
    v60 = v59;
    v61 = objc_allocWithZone((Class)INPerson);
    v62 = sub_1000292F4(v52, v45, 0, 0, 0, v55, v57, v58, v60);
    v63 = sub_100003FC4(&qword_1000513C0);
    v64 = swift_allocObject(v63, 40, 7);
    *(_OWORD *)(v64 + 16) = xmmword_100041120;
    *(_QWORD *)(v64 + 32) = v62;
    v144[0] = v64;
    specialized Array._endMutation()(v64);
    v65 = v144[0];
    v66 = objc_allocWithZone((Class)INSendMessageIntent);
    sub_100029A58();
    v67 = v62;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v65);
    v69 = objc_msgSend(v66, "initWithRecipients:outgoingMessageType:content:speakableGroupName:conversationIdentifier:serviceName:sender:attachments:", isa, 1, 0, 0, 0, 0, 0, 0);

    v71 = QuickAction.bundleID.getter(v70);
    v73 = v72;
    sub_10002A2E0(v69, v71, v72, v44, v43);

    swift_bridgeObjectRelease(v73);
    return;
  }
  v125 = a1;
  v74 = v135;
  sub_100012534((uint64_t)v23, v135, &qword_100050D10);
  v75 = type metadata accessor for Person(0);
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v76 + 48);
  if (v77(v74, 1, v75) == 1)
  {
    sub_100004EE0((uint64_t)v23, &qword_100050D10);
    v78 = sub_100004EE0(v74, &qword_100050D10);
    v79 = v39;
  }
  else
  {
    v123 = v77;
    v91 = v128;
    v90 = v129;
    v92 = *(void (**)(char *, _QWORD, uint64_t))(v128 + 104);
    v124 = v75;
    v93 = v76;
    v94 = v127;
    v92(v127, enum case for HandleType.phoneNumber(_:), v129);
    Person.preferredHandle(ofType:)(v94);
    v41 = v95;
    v96 = *(void (**)(char *, uint64_t))(v91 + 8);
    v77 = v123;
    v97 = v94;
    v76 = v93;
    v75 = v124;
    v96(v97, v90);
    sub_100004EE0((uint64_t)v23, &qword_100050D10);
    v78 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 8))(v74, v75);
    v79 = v39;
    if (v41)
    {
      v44 = (uint64_t)v141;
      v43 = v142;
      goto LABEL_6;
    }
  }
  v98 = v137;
  static PeopleLogger.common.getter(v78);
  v99 = v136;
  v100 = sub_100012534(v42, v136, &qword_100050D10);
  v101 = Logger.logObject.getter(v100);
  v102 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v101, v102))
  {
    v103 = v99;
    v104 = (uint8_t *)swift_slowAlloc(12, -1);
    v105 = swift_slowAlloc(32, -1);
    v144[0] = v105;
    *(_DWORD *)v104 = 136315138;
    v106 = v103;
    v107 = v126;
    sub_100012534(v106, v126, &qword_100050D10);
    if (v77(v107, 1, v75) == 1)
    {
      sub_100004EE0(v107, &qword_100050D10);
      v108 = 0;
      v109 = 0xE000000000000000;
    }
    else
    {
      v111 = v107;
      v108 = Person.description.getter();
      v109 = v112;
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v111, v75);
    }
    v143 = sub_10001CBB4(v108, v109, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v104 + 4, v104 + 12);
    swift_bridgeObjectRelease(v109);
    sub_100004EE0(v136, &qword_100050D10);
    _os_log_impl((void *)&_mh_execute_header, v101, v102, "Could not find handle for person %s", v104, 0xCu);
    swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v105, -1, -1);
    swift_slowDealloc(v104, -1, -1);

    v110 = (*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v137, v79);
  }
  else
  {
    sub_100004EE0(v99, &qword_100050D10);

    v110 = (*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v98, v79);
  }
  v113 = v141;
  v115 = v133;
  v114 = v134;
  v117 = v131;
  v116 = v132;
  static CocoaError.Code.coderInvalidValue.getter(v110);
  v118 = sub_10002950C((uint64_t)&_swiftEmptyArrayStorage);
  v119 = sub_100004FDC(&qword_1000515B8, (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError, (uint64_t)&protocol conformance descriptor for CocoaError);
  v120 = _BridgedStoredNSError.init(_:userInfo:)(v116, v118, v114, v119);
  v121 = (void *)CocoaError._nsError.getter(v120);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v117, v114);
  v113(v121);

}

uint64_t sub_100029104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[29] = a6;
  v7[30] = a7;
  v7[27] = a4;
  v7[28] = a5;
  return swift_task_switch(sub_100029120, 0, 0);
}

uint64_t sub_100029120()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  NSURL *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  uint64_t v14;

  v1 = v0;
  v2 = v0 + 2;
  v3 = v1[27];
  v4 = sub_100003FC4(&qword_1000513B8);
  inited = swift_initStackObject(v4, v1 + 10);
  *(_OWORD *)(inited + 16) = xmmword_100040770;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPromptUnlockDevice);
  *(_QWORD *)(inited + 40) = v6;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  v7 = sub_100028204(inited);
  v8 = *(void **)(v3 + 24);
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  v1[31] = v10;
  v12 = sub_10002834C(v7);
  swift_bridgeObjectRelease(v7);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v1[32] = isa;
  swift_bridgeObjectRelease(v12);
  v1[7] = v1 + 25;
  v1[2] = v1;
  v1[3] = sub_100024BDC;
  v14 = swift_continuation_init(v2, 0);
  v1[20] = _NSConcreteStackBlock;
  v1 += 20;
  v1[1] = 0x40000000;
  v1[2] = sub_100028710;
  v1[3] = &unk_10004E560;
  v1[4] = v14;
  objc_msgSend(v8, "openSensitiveURLInBackground:withOptions:completionHandler:", v11, isa, v1);
  return swift_continuation_await(v2);
}

uint64_t sub_100029284()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for MessageActionHandler()
{
  return objc_opt_self(_TtC25PeopleWidget_iOSExtension20MessageActionHandler);
}

void sub_1000292D4(uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4)
{
  sub_100028744(a1, a2, a3, a4);
}

id sub_1000292F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  Class isa;
  NSString v17;
  uint64_t v18;
  NSString v19;
  NSString v20;
  id v21;
  id v23;

  v14 = type metadata accessor for PersonNameComponents(0);
  v15 = *(_QWORD *)(v14 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(a2, 1, v14) != 1)
  {
    isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, v14);
  }
  if (a4)
  {
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
    v18 = a9;
    if (a7)
      goto LABEL_5;
LABEL_8:
    v19 = 0;
    if (v18)
      goto LABEL_6;
LABEL_9:
    v20 = 0;
    goto LABEL_10;
  }
  v17 = 0;
  v18 = a9;
  if (!a7)
    goto LABEL_8;
LABEL_5:
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a7);
  if (!v18)
    goto LABEL_9;
LABEL_6:
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
LABEL_10:
  v21 = objc_msgSend(v23, "initWithPersonHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:", a1, isa, v17, a5, v19, v20);

  return v21;
}

uint64_t sub_10002945C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1000294C0;
  return v6(a1);
}

uint64_t sub_1000294C0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_10002950C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_100003FC4(&qword_1000515E8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100012534(v7, (uint64_t)&v17, &qword_1000515F0);
    v8 = v17;
    v9 = v18;
    result = sub_1000297A4(v17, v18, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100029654);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100029C60(&v19, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      v16 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100029654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_100029798(uint64_t a1, uint64_t a2)
{
  return sub_1000297A4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100029810);
}

uint64_t sub_1000297A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, Swift::Int))
{
  uint64_t v3;
  Swift::Int v6;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, *(_QWORD *)(v3 + 40));
  String.hash(into:)(v9, a1, a2);
  v6 = Hasher._finalize()();
  return a3(a1, a2, v6);
}

unint64_t sub_100029810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1000298F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v0 = type metadata accessor for QuickActionType(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v14 - v6;
  QuickAction.type.getter(v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for QuickActionType.message(_:), v0);
  v8 = sub_100004FDC((unint64_t *)&qword_100051390, (uint64_t (*)(uint64_t))&type metadata accessor for QuickActionType, (uint64_t)&protocol conformance descriptor for QuickActionType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v16, v0, v8);
  dispatch thunk of RawRepresentable.rawValue.getter(&v14, v0, v8);
  v9 = v17;
  v10 = v15;
  if (v16 == v14 && v17 == v15)
  {
    v11 = 1;
    v10 = v17;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v4, v0);
  v12(v7, v0);
  return v11 & 1;
}

unint64_t sub_100029A58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000513C8;
  if (!qword_1000513C8)
  {
    v1 = objc_opt_self(INPerson);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000513C8);
  }
  return result;
}

uint64_t sub_100029A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100029B30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v2 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 32);
  v6 = v0 + v3;
  v7 = swift_task_alloc(dword_1000515C4);
  v8 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)v7 = v1;
  *(_QWORD *)(v7 + 8) = sub_100009E00;
  *(_OWORD *)(v7 + 232) = v8;
  *(_QWORD *)(v7 + 216) = v5;
  *(_QWORD *)(v7 + 224) = v6;
  return swift_task_switch(sub_100029120, 0, 0);
}

uint64_t sub_100029BCC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100029BF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000515D4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100009E00;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000515D0 + dword_1000515D0))(a1, v4);
}

_OWORD *sub_100029C60(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100029C70(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100029C78()
{
  uint64_t v0;

  v0 = sub_100003FC4(&qword_100051608);
  return TupleWidget.init(_:)(v0, v0);
}

int main(int argc, const char **argv, const char **envp)
{
  sub_100029CE0();
  static WidgetBundle.main()();
  return 0;
}

unint64_t sub_100029CE0()
{
  unint64_t result;

  result = qword_100051600;
  if (!qword_100051600)
  {
    result = swift_getWitnessTable(&unk_100041284, &type metadata for HomeScreenWidgets);
    atomic_store(result, (unint64_t *)&qword_100051600);
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeScreenWidgets()
{
  return &type metadata for HomeScreenWidgets;
}

uint64_t sub_100029D34(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100042564, 1);
}

unint64_t sub_100029D48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051610;
  if (!qword_100051610)
  {
    v1 = sub_100004004(&qword_100051618);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleWidget<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100051610);
  }
  return result;
}

ValueMetadata *type metadata accessor for NoContactsView()
{
  return &type metadata for NoContactsView;
}

uint64_t sub_100029DA4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000425D0, 1);
}

uint64_t sub_100029DB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];

  v40 = Image.init(systemName:)(0xD00000000000002DLL, 0x8000000100049E00);
  v39 = static Font.body.getter();
  KeyPath = swift_getKeyPath(&unk_100041340);
  v41[0] = String.localized.getter(0x61746E6F43206F4ELL, 0xEB00000000737463);
  v41[1] = v2;
  v3 = sub_10000C644();
  v4 = Text.init<A>(_:)(v41, &type metadata for String, v3);
  v6 = v5;
  v8 = v7;
  v10 = v9 & 1;
  v11 = static Color.primary.getter();
  v12 = Text.foregroundColor(_:)(v11, v4, v6, v10, v8);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  swift_release(v11);
  v19 = v16 & 1;
  sub_1000206A4(v4, v6, v10);
  v20 = swift_bridgeObjectRelease(v8);
  v21 = static Font.footnote.getter(v20);
  v22 = Text.font(_:)(v21, v12, v14, v19, v18);
  v24 = v23;
  LOBYTE(v10) = v25;
  v27 = v26;
  swift_release(v21);
  v28 = v10 & 1;
  sub_1000206A4(v12, v14, v19);
  v29 = swift_bridgeObjectRelease(v18);
  v30 = static Font.Weight.semibold.getter(v29);
  v31 = Text.fontWeight(_:)(*(_QWORD *)&v30, 0, v22, v24, v28, v27);
  v33 = v32;
  v35 = v34;
  LOBYTE(v18) = v36 & 1;
  sub_1000206A4(v22, v24, v28);
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)a1 = v40;
  *(_QWORD *)(a1 + 8) = KeyPath;
  *(_QWORD *)(a1 + 16) = v39;
  *(_QWORD *)(a1 + 24) = v31;
  *(_QWORD *)(a1 + 32) = v33;
  *(_BYTE *)(a1 + 40) = v18;
  *(_QWORD *)(a1 + 48) = v35;
  swift_retain(v40);
  swift_retain(KeyPath);
  swift_retain(v39);
  sub_1000206F0(v31, v33, v18);
  swift_bridgeObjectRetain(v35);
  sub_1000206A4(v31, v33, v18);
  swift_release(v39);
  swift_release(KeyPath);
  swift_release(v40);
  return swift_bridgeObjectRelease(v35);
}

__n128 sub_100029FE0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  char v11;
  uint64_t v12;

  v3 = static HorizontalAlignment.center.getter(a1);
  sub_100029DB4((uint64_t)v9);
  v4 = v10;
  v5 = v11;
  v6 = v12;
  v8 = v9[0];
  result = (__n128)v9[1];
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = 0x4008000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 24) = v8;
  *(__n128 *)(a2 + 40) = result;
  *(_QWORD *)(a2 + 56) = v4;
  *(_BYTE *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = v6;
  return result;
}

uint64_t sub_10002A044@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002A06C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002A094(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10002A0BC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

unint64_t sub_10002A0E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051620;
  if (!qword_100051620)
  {
    v1 = sub_100004004(&qword_100051628);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100051620);
  }
  return result;
}

void sub_10002A134(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  id v8;
  NSString v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  v8 = a3;
  if (a3)
  {
    swift_bridgeObjectRetain(a3);
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
    v8 = objc_msgSend((id)objc_opt_self(LSApplicationProxy), "applicationProxyForIdentifier:", v10);

  }
  v11 = swift_allocObject(&unk_10004E678, 32, 7);
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = a5;
  v14[4] = sub_10002A9A8;
  v15 = v11;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_10002A260;
  v14[3] = &unk_10004E690;
  v12 = _Block_copy(v14);
  v13 = v15;
  swift_retain(a5);
  swift_release(v13);
  objc_msgSend(v5, "openUserActivity:withApplicationProxy:completionHandler:", a1, v8, v12);
  _Block_release(v12);

}

void sub_10002A260(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_10002A2C0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  sub_10002A134(a1, a2, a3, a4, a5);
}

uint64_t sub_10002A2E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSString v16;
  id v17;
  id v18;
  uint64_t ObjectType;
  objc_class *ObjCClassFromMetadata;
  NSString *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  _QWORD *v35;
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(id, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  void *v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v11 = type metadata accessor for Logger(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v5;
  v60 = a4;
  v57 = v15;
  v58 = v12;
  if (a3)
  {
    swift_bridgeObjectRetain(a3);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
    v17 = objc_msgSend((id)objc_opt_self(LSApplicationProxy), "applicationProxyForIdentifier:", v16);

  }
  else
  {
    v17 = 0;
  }
  v18 = objc_msgSend(objc_allocWithZone((Class)INInteraction), "initWithIntent:response:", a1, 0);
  ObjectType = swift_getObjectType(a1);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(ObjectType);
  v21 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v23 = v22;

  v24 = objc_allocWithZone((Class)NSUserActivity);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  v26 = objc_msgSend(v24, "initWithActivityType:", v25);

  v55 = v26;
  v56 = v18;
  static PeopleLogger.common.getter(objc_msgSend(v26, "_setInteraction:donate:", v18, 0));
  v54 = v17;
  v27 = v17;
  v28 = a1;
  v29 = v27;
  v30 = v28;
  v31 = v14;
  v32 = Logger.logObject.getter(v30);
  v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v50 = v31;
    v51 = a5;
    v52 = a2;
    v53 = a3;
    v34 = swift_slowAlloc(22, -1);
    v35 = (_QWORD *)swift_slowAlloc(8, -1);
    v49 = swift_slowAlloc(32, -1);
    v61 = (uint64_t)v30;
    v62 = v49;
    *(_DWORD *)v34 = 138412546;
    v36 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v34 + 4, v34 + 12);
    *v35 = v30;

    *(_WORD *)(v34 + 12) = 2080;
    if (v54)
    {
      v37 = objc_msgSend(v29, "description");
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v40 = v39;

    }
    else
    {
      v40 = 0xE100000000000000;
      v38 = 45;
    }
    a3 = v53;
    v61 = sub_10001CBB4(v38, v40, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v34 + 14, v34 + 22);

    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Launching intent: %@ with application proxy: %s", (uint8_t *)v34, 0x16u);
    v41 = sub_100003FC4(&qword_1000513A0);
    swift_arrayDestroy(v35, 1, v41);
    swift_slowDealloc(v35, -1, -1);
    v42 = v49;
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v34, -1, -1);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v50, v58);
    a5 = v51;
    a2 = v52;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v57 + 8))(v31, v58);
  }
  v43 = v59[5];
  v44 = v59[6];
  sub_10001190C(v59 + 2, v43);
  v45 = swift_allocObject(&unk_10004E650, 32, 7);
  *(_QWORD *)(v45 + 16) = v60;
  *(_QWORD *)(v45 + 24) = a5;
  v46 = *(void (**)(id, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v44 + 8);
  swift_retain(a5);
  v47 = v55;
  v46(v55, a2, a3, sub_10002A9A0, v45, v43, v44);

  return swift_release(v45);
}

uint64_t sub_10002A720(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8_t *v20;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD);
  uint64_t v26;
  _QWORD v27[3];
  _BYTE v28[8];
  uint64_t v29;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v10 = swift_errorRetain(a1);
    static PeopleLogger.viewService.getter(v10);
    swift_errorRetain(a1);
    v11 = swift_errorRetain(a1);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(12, -1);
      v25 = a2;
      v15 = (uint8_t *)v14;
      v16 = swift_slowAlloc(32, -1);
      v29 = v16;
      v24 = a3;
      *(_DWORD *)v15 = 136315138;
      v23 = v15 + 4;
      swift_getErrorValue(a1, v28, v27);
      v17 = Error.localizedDescription.getter(v27[1], v27[2]);
      v19 = v18;
      v26 = sub_10001CBB4(v17, v18, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v23, v15 + 12);
      swift_bridgeObjectRelease(v19);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to launch activity: %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      v20 = v15;
      a2 = v25;
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return a2(a1);
}

uint64_t sub_10002A938()
{
  uint64_t v0;

  sub_10000D160((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for IntentLauncher()
{
  return objc_opt_self(_TtC25PeopleWidget_iOSExtension14IntentLauncher);
}

uint64_t sub_10002A97C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002A9A0(uint64_t a1)
{
  uint64_t v1;

  return sub_10002A720(a1, *(uint64_t (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10002A9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

uint64_t sub_10002A9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002A9DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002A9E8()
{
  uint64_t result;

  type metadata accessor for PeopleFeatureFlags(0);
  result = static PeopleFeatureFlags.isDomainFeatureFlagEnabled(for:feature:)("Widgets", 7, 2, "InteractiveWidgets", 18, 2);
  byte_100053468 = result & 1;
  return result;
}

unint64_t sub_10002AA40()
{
  unint64_t result;

  result = qword_1000516D8;
  if (!qword_1000516D8)
  {
    result = swift_getWitnessTable(&unk_100041460, &type metadata for URLAppIntent);
    atomic_store(result, (unint64_t *)&qword_1000516D8);
  }
  return result;
}

unint64_t sub_10002AA88()
{
  unint64_t result;

  result = qword_1000516E0;
  if (!qword_1000516E0)
  {
    result = swift_getWitnessTable(&unk_100041488, &type metadata for URLAppIntent);
    atomic_store(result, (unint64_t *)&qword_1000516E0);
  }
  return result;
}

uint64_t sub_10002AACC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100042678, 1);
}

uint64_t sub_10002AADC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10002AB1C();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

unint64_t sub_10002AB1C()
{
  unint64_t result;

  result = qword_1000516E8;
  if (!qword_1000516E8)
  {
    result = swift_getWitnessTable(&unk_1000413D0, &type metadata for URLAppIntent);
    atomic_store(result, (unint64_t *)&qword_1000516E8);
  }
  return result;
}

uint64_t sub_10002AB60()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10002E0C0(v0, qword_100053470);
  sub_10002E0A8(v0, (uint64_t)qword_100053470);
  return LocalizedStringResource.init(stringLiteral:)(0x4C5255206E65704FLL, 0xE800000000000000);
}

uint64_t sub_10002ABBC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for URL(0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003FC4(&qword_100051728);
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for QuickAction(0);
  v2[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[7] = v6;
  v2[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002AC60, 0, 0);
}

uint64_t sub_10002AC60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  IntentParameter.wrappedValue.getter();
  QuickAction.init(from:)(v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v5 = sub_100004EE0(*(_QWORD *)(v0 + 40), &qword_100051728);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 32))(v6, *(_QWORD *)(v0 + 40), v8);
    v9 = sub_100027608();
    sub_100026794(v6);
    swift_release(v9);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  v10 = *(_QWORD *)(v0 + 64);
  v12 = *(_QWORD *)(v0 + 32);
  v11 = *(_QWORD *)(v0 + 40);
  static IntentResult.result<>()(v5);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002AD54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100050558 != -1)
    swift_once(&qword_100050558, sub_10002AB60);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10002E0A8(v2, (uint64_t)qword_100053470);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10002ADCC()
{
  return 0;
}

uint64_t sub_10002ADDC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_100051724);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100009E00;
  return sub_10002ABBC(a1, v4);
}

uint64_t sub_10002AE34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10002DE98();
  *a1 = result;
  return result;
}

uint64_t sub_10002AE58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002AB1C();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for URLAppIntent()
{
  return &type metadata for URLAppIntent;
}

uint64_t sub_10002AE90()
{
  return sub_100005084(&qword_1000516F8, &qword_100051700, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_10002AEBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD v35[4];
  _QWORD v36[2];

  v35[2] = a1;
  v35[0] = type metadata accessor for ButtonBorderShape(0);
  v2 = *(_QWORD *)(v35[0] - 8);
  __chkstk_darwin(v35[0]);
  v4 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003FC4(&qword_100051998);
  __chkstk_darwin(v5);
  v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003FC4(&qword_1000519A0);
  __chkstk_darwin(v8);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003FC4(&qword_1000519A8);
  __chkstk_darwin(v11);
  v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10002B158(v1, (uint64_t)v7);
  v15 = static Color.primary.getter(v14);
  KeyPath = swift_getKeyPath(&unk_1000416E0);
  sub_100012534((uint64_t)v7, (uint64_t)v10, &qword_100051998);
  v17 = (uint64_t *)&v10[*(int *)(v8 + 36)];
  *v17 = KeyPath;
  v17[1] = v15;
  v18 = sub_100004EE0((uint64_t)v7, &qword_100051998);
  static ButtonBorderShape.circle.getter(v18);
  v19 = swift_getKeyPath(&unk_100041710);
  v20 = (uint64_t *)&v13[*(int *)(v11 + 36)];
  v21 = sub_100003FC4(&qword_1000519B0);
  v22 = v35[0];
  (*(void (**)(char *, char *, _QWORD))(v2 + 16))((char *)v20 + *(int *)(v21 + 28), v4, v35[0]);
  *v20 = v19;
  sub_100012534((uint64_t)v10, (uint64_t)v13, &qword_1000519A0);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v22);
  sub_100004EE0((uint64_t)v10, &qword_1000519A0);
  v23 = (_QWORD *)(v35[1] + *(int *)(type metadata accessor for WidgetButton(0) + 24));
  v24 = v23[1];
  v36[0] = *v23;
  v36[1] = v24;
  v25 = sub_10000C644();
  swift_bridgeObjectRetain(v24);
  v26 = Text.init<A>(_:)(v36, &type metadata for String, v25);
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  v33 = sub_100030178();
  View.accessibilityLabel(_:)(v26, v28, v32, v30, v11, v33);
  sub_1000206A4(v26, v28, v32);
  swift_bridgeObjectRelease(v30);
  return sub_100004EE0((uint64_t)v13, &qword_1000519A8);
}

uint64_t sub_10002B158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v44 = a2;
  v41 = sub_100003FC4(&qword_100051A18);
  __chkstk_darwin(v41);
  v39 = (uint64_t)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100003FC4(&qword_1000519E8);
  v40 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100003FC4(&qword_1000519F8);
  v6 = __chkstk_darwin(v42);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v38 = (uint64_t)&v38 - v9;
  v10 = sub_100003FC4(&qword_100050688);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v38 - v18;
  sub_100012534(a1, (uint64_t)v12, &qword_100050688);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v20 = sub_100004EE0((uint64_t)v12, &qword_100050688);
    __chkstk_darwin(v20);
    *(&v38 - 2) = a1;
    Button.init(action:label:)(UIEdgeInsets.init(top:leading:bottom:trailing:), 0, sub_100030404);
    KeyPath = swift_getKeyPath(&unk_100041740);
    v22 = swift_allocObject(&unk_10004E718, 17, 7);
    *(_BYTE *)(v22 + 16) = 1;
    v23 = v40;
    v24 = v43;
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v8, v5, v43);
    v25 = v42;
    v26 = (uint64_t *)&v8[*(int *)(v42 + 36)];
    *v26 = KeyPath;
    v26[1] = (uint64_t)sub_10003047C;
    v26[2] = v22;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v24);
    v27 = v38;
    sub_100004F98((uint64_t)v8, v38, &qword_1000519F8);
    v28 = v39;
    sub_100012534(v27, v39, &qword_1000519F8);
    swift_storeEnumTagMultiPayload(v28);
    v29 = sub_100005084(&qword_1000519E0, &qword_1000519E8, (uint64_t)&protocol conformance descriptor for Button<A>);
    v30 = sub_100030368();
    _ConditionalContent<>.init(storage:)(v28, v24, v25, v29, v30);
    return sub_100004EE0(v27, &qword_1000519F8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, v12, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
    v45 = sub_100030494(v17);
    __chkstk_darwin(v45);
    *(&v38 - 2) = a1;
    v32 = sub_10002AB1C();
    Button.init<A>(intent:label:)(&v45, sub_1000307F0, &v38 - 4, &type metadata for Image, &type metadata for URLAppIntent, &protocol witness table for Image, v32);
    v33 = v39;
    v34 = v40;
    v35 = v43;
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 16))(v39, v5, v43);
    swift_storeEnumTagMultiPayload(v33);
    v36 = sub_100005084(&qword_1000519E0, &qword_1000519E8, (uint64_t)&protocol conformance descriptor for Button<A>);
    v37 = sub_100030368();
    _ConditionalContent<>.init(storage:)(v33, v35, v42, v36, v37);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v35);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  }
}

uint64_t sub_10002B5C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for WidgetButton(0) + 20));
  v4 = *v3;
  v5 = v3[1];
  swift_bridgeObjectRetain(v5);
  result = Image.init(systemName:)(v4, v5);
  *a2 = result;
  return result;
}

id sub_10002B620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v20;

  v1 = type metadata accessor for Person(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003FC4(&qword_100050690);
  __chkstk_darwin(v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SingleContactQuickActionWidgetView(0);
  sub_100012534(v0 + *(int *)(v8 + 24), (uint64_t)v7, &qword_100050690);
  v9 = type metadata accessor for PersonInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9);
  if ((_DWORD)v11 == 1)
  {
    sub_100004EE0((uint64_t)v7, &qword_100050690);
    isa = 0;
  }
  else
  {
    PersonInfo.person.getter(v11);
    v13 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    v14 = (void *)Person.contact.getter(v13);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    isa = (Class)objc_msgSend(v14, "memojiMetadata");

    if (isa)
    {
      v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(isa);
      v17 = v16;

      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100011CA8(v15, v17);
    }
  }
  v18 = objc_msgSend((id)objc_opt_self(CNMemojiMetadataUtilities), "memojiMetadataFromData:", isa);

  return v18;
}

unint64_t sub_10002B7E4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  void *v4;
  unint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v0 = type metadata accessor for Color.RGBColorSpace(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10002B620();
  if (!v3)
  {
    v33 = sub_100003FC4(&qword_100051860);
    v34 = swift_allocObject(v33, 40, 7);
    *(_OWORD *)(v34 + 16) = xmmword_100040770;
    v35 = static Color.clear.getter(v34);
    *(_QWORD *)(v34 + 32) = v35;
    v39 = (_QWORD *)v34;
    specialized Array._endMutation()(v35);
    return (unint64_t)v39;
  }
  v4 = v3;
  v39 = &_swiftEmptyArrayStorage;
  result = (unint64_t)objc_msgSend(v3, "backgroundColorDescription");
  if (!result)
    goto LABEL_19;
  v6 = (void *)result;
  static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v8 = v7;

  v9 = objc_allocWithZone((Class)CNMemojiBackgroundParameters);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v11 = objc_msgSend(v9, "initWithColorDescription:", v10);

  result = (unint64_t)objc_msgSend(v11, "numberOfLayers");
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  v12 = result;
  if (result)
  {
    v36 = v4;
    v13 = 0;
    v14 = enum case for Color.RGBColorSpace.sRGB(_:);
    do
    {
      v28 = objc_msgSend(v11, "colorAtIndex:forLayer:", 0, v13, v36);
      if (v28)
      {
        v15 = v28;
        objc_msgSend(v28, "red");
        v17 = v16 / 255.0;
        objc_msgSend(v15, "green");
        v19 = v18 / 255.0;
        objc_msgSend(v15, "blue");
        v21 = v20 / 255.0;
        objc_msgSend(v15, "alpha");
        v23 = v22;
        (*(void (**)(char *, uint64_t, uint64_t))(v37 + 104))(v2, v14, v38);
        v24 = Color.init(_:red:green:blue:opacity:)(v2, v17, v19, v21, v23);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v26 = v39[2];
        v25 = v39[3];
        if (v26 >= v25 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v24);
        specialized Array._endMutation()(v27);

      }
      else
      {
        v29 = static Color.white.getter();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v31 = v39[2];
        v30 = v39[3];
        if (v31 >= v30 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
        specialized Array._endMutation()(v32);
      }
      ++v13;
    }
    while (v12 != v13);

    return (unint64_t)v39;
  }

  return (unint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_10002BAE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t);
  double v16;
  double v17;
  char *v18;
  double v19;
  double v20;
  double v21;
  uint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v23 - v11;
  v13 = type metadata accessor for SingleContactQuickActionWidgetView(0);
  sub_10001C7D4((uint64_t)v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for ColorScheme.dark(_:), v6);
  v14 = static ColorScheme.== infix(_:_:)(v12, v10);
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  v15(v12, v6);
  if ((v14 & 1) != 0)
  {
    v16 = *(double *)(v1 + *(int *)(v13 + 40));
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
    v17 = 1.0;
    v18 = v5;
    v19 = v16;
    v20 = v16;
    v21 = v16;
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
    v19 = 1.0;
    v20 = 1.0;
    v21 = 1.0;
    v17 = 1.0;
    v18 = v5;
  }
  return Color.init(_:red:green:blue:opacity:)(v18, v19, v20, v21, v17);
}

uint64_t sub_10002BC8C@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v74 = a1;
  v2 = type metadata accessor for ContainerBackgroundPlacement(0);
  v72 = *(_QWORD *)(v2 - 8);
  v73 = v2;
  __chkstk_darwin(v2);
  v63 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003FC4(&qword_1000517E8);
  __chkstk_darwin(v4);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100003FC4(&qword_1000517F0);
  __chkstk_darwin(v68);
  v71 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003FC4(&qword_1000517F8);
  v69 = *(_QWORD *)(v8 - 8);
  v70 = v8;
  __chkstk_darwin(v8);
  v67 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PersonStatusSet(0);
  v65 = *(_QWORD *)(v10 - 8);
  v66 = v10;
  __chkstk_darwin(v10);
  v64 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Person(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003FC4(&qword_100050690);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v59 - v20;
  v22 = *(int *)(type metadata accessor for SingleContactQuickActionWidgetView(0) + 24);
  v62 = v1;
  v23 = (uint64_t)&v1[v22];
  sub_100012534((uint64_t)&v1[v22], (uint64_t)v21, &qword_100050690);
  v24 = type metadata accessor for PersonInfo(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v21, 1, v24);
  v61 = v25;
  if ((_DWORD)v27 == 1)
  {
    sub_100004EE0((uint64_t)v21, &qword_100050690);
  }
  else
  {
    v60 = v15;
    PersonInfo.person.getter(v27);
    v15 = v60;
    v28 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v21, v24);
    v29 = Person.displayName.getter(v28);
    v31 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if (v31)
      goto LABEL_5;
  }
  v29 = String.localized.getter(0x57746361746E6F43, 0xED00007465676469);
  v31 = v32;
  swift_bridgeObjectRelease(0);
LABEL_5:
  sub_100012534(v23, (uint64_t)v19, &qword_100050690);
  v33 = v26(v19, 1, v24);
  v34 = v29;
  if ((_DWORD)v33 == 1)
  {
    sub_100004EE0((uint64_t)v19, &qword_100050690);
    v35 = &_swiftEmptyArrayStorage;
  }
  else
  {
    PersonInfo.person.getter(v33);
    v36 = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v19, v24);
    v35 = (void *)Person.statuses.getter(v36);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  v37 = v62;
  v38 = v63;
  type metadata accessor for PeopleFeatureFlags(0);
  v39 = static PeopleFeatureFlags.shared.getter();
  v40 = (uint64_t)v64;
  static StatusCompatiblePicker.statusForDisplay(from:featureFlags:)(v35, v39);
  swift_release(v39);
  v41 = swift_bridgeObjectRelease(v35);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v41);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v42 = sub_100003FC4(&qword_100051800);
  sub_10002C1EC(v40, v37, v34, v31, (uint64_t)&v6[*(int *)(v42 + 44)]);
  v43 = swift_bridgeObjectRelease(v31);
  v44 = static Alignment.center.getter(v43);
  v45 = v71;
  sub_10003A90C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v71, 0.0, 1, INFINITY, 0, v44, v46);
  v47 = sub_100004EE0((uint64_t)v6, &qword_1000517E8);
  v48 = static ContainerBackgroundPlacement.widget.getter(v47);
  v49 = __chkstk_darwin(v48);
  v50 = static Alignment.center.getter(v49);
  v52 = v51;
  v53 = sub_100003FC4(&qword_100051808);
  v54 = sub_10002F4A0();
  v55 = sub_10002F524(&qword_100051820, &qword_100051808, (void (*)(void))sub_10002F58C);
  v56 = v67;
  View.containerBackground<A>(for:alignment:content:)(v38, v50, v52, sub_10002F498, &v58, v68, v53, v54, v55);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v38, v73);
  sub_100004EE0(v45, &qword_1000517F0);
  (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(v74, v56, v70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8))(v40, v66);
}

uint64_t sub_10002C1EC@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t OpaqueTypeConformance2;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v92 = a4;
  v97 = a3;
  v105 = a5;
  v7 = sub_100003FC4(&qword_100051868);
  __chkstk_darwin(v7);
  v91 = (uint64_t *)((char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100003FC4(&qword_100051870);
  v103 = *(_QWORD *)(v9 - 8);
  v104 = v9;
  __chkstk_darwin(v9);
  v90 = (uint64_t)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for SingleContactQuickActionWidgetView(0);
  __chkstk_darwin(v99);
  v98 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003FC4(&qword_100050688);
  v13 = __chkstk_darwin(v12);
  v89 = (uint64_t)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v96 = (uint64_t)&v88 - v15;
  v16 = sub_100003FC4(&qword_100051878);
  v17 = __chkstk_darwin(v16);
  v102 = (uint64_t)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v101 = (char *)&v88 - v19;
  v20 = type metadata accessor for AccessibilityChildBehavior(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003FC4(&qword_100051880);
  __chkstk_darwin(v24);
  v26 = (char *)&v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100003FC4(&qword_100051888);
  v28 = *(_QWORD *)(v27 - 8);
  v94 = v27;
  v95 = v28;
  __chkstk_darwin(v27);
  v30 = (char *)&v88 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100003FC4(&qword_100051890);
  v32 = __chkstk_darwin(v31);
  v100 = (uint64_t)&v88 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v88 - v35;
  v37 = __chkstk_darwin(v34);
  v93 = (char *)&v88 - v38;
  *(_QWORD *)v26 = static HorizontalAlignment.center.getter(v37);
  *((_QWORD *)v26 + 1) = 0;
  v26[16] = 0;
  v39 = (uint64_t)&v26[*(int *)(sub_100003FC4(&qword_100051898) + 44)];
  v40 = a1;
  v41 = (uint64_t)a2;
  v42 = sub_10002C8A0(v40, a2, v39);
  static AccessibilityChildBehavior.combine.getter(v42);
  v43 = sub_100005084(&qword_1000518A0, &qword_100051880, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibilityElement(children:)(v23, v24, v43);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  sub_100004EE0((uint64_t)v26, &qword_100051880);
  v44 = v92;
  v106 = v97;
  v107 = v92;
  v45 = sub_10000C644();
  swift_bridgeObjectRetain(v44);
  v46 = Text.init<A>(_:)(&v106, &type metadata for String, v45);
  v48 = v47;
  v50 = v49;
  v52 = v51 & 1;
  v106 = v24;
  v107 = v43;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v106, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v54 = v94;
  View.accessibilityLabel(_:)(v46, v48, v52, v50, v94, OpaqueTypeConformance2);
  v55 = v52;
  v56 = v99;
  sub_1000206A4(v46, v48, v55);
  swift_bridgeObjectRelease(v50);
  v57 = v30;
  v58 = (uint64_t)v98;
  v59 = (uint64_t)v93;
  (*(void (**)(char *, uint64_t))(v95 + 8))(v57, v54);
  sub_100004F98((uint64_t)v36, v59, &qword_100051890);
  v60 = v96;
  sub_100012534(v41 + *(int *)(v56 + 36), v96, &qword_100050688);
  v61 = type metadata accessor for URL(0);
  v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 48);
  v63 = v62(v60, 1, v61);
  sub_100004EE0(v60, &qword_100050688);
  sub_100004E9C(v41, v58, type metadata accessor for SingleContactQuickActionWidgetView);
  if ((_DWORD)v63 == 1)
  {
    v64 = v89;
    sub_100012534(v58 + *(int *)(v56 + 32), v89, &qword_100050688);
    sub_10000501C(v58, type metadata accessor for SingleContactQuickActionWidgetView);
    v65 = v62(v64, 1, v61);
    v66 = sub_100004EE0(v64, &qword_100050688);
    v67 = v104;
    v68 = (uint64_t)v101;
    if (v65 == 1)
      goto LABEL_6;
  }
  else
  {
    v66 = sub_10000501C(v58, type metadata accessor for SingleContactQuickActionWidgetView);
    v67 = v104;
    v68 = (uint64_t)v101;
  }
  v69 = static VerticalAlignment.center.getter(v66);
  v70 = (uint64_t)v91;
  *v91 = v69;
  *(_QWORD *)(v70 + 8) = 0;
  *(_BYTE *)(v70 + 16) = 1;
  v71 = sub_100003FC4(&qword_1000518B0);
  v72 = sub_10002D348(v41, v70 + *(int *)(v71 + 44));
  v73 = static Edge.Set.top.getter(v72);
  v74 = EdgeInsets.init(_all:)(6.0);
  v76 = v75;
  v78 = v77;
  v80 = v79;
  v81 = v90;
  sub_100012534(v70, v90, &qword_100051868);
  v82 = v81 + *(int *)(v67 + 36);
  *(_BYTE *)v82 = v73;
  *(double *)(v82 + 8) = v74;
  *(_QWORD *)(v82 + 16) = v76;
  *(_QWORD *)(v82 + 24) = v78;
  *(_QWORD *)(v82 + 32) = v80;
  *(_BYTE *)(v82 + 40) = 0;
  sub_100004EE0(v70, &qword_100051868);
  sub_100004F98(v81, v68, &qword_100051870);
  v63 = 0;
LABEL_6:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 56))(v68, v63, 1, v67);
  v83 = v100;
  sub_100012534(v59, v100, &qword_100051890);
  v84 = v102;
  sub_100012534(v68, v102, &qword_100051878);
  v85 = v105;
  sub_100012534(v83, v105, &qword_100051890);
  v86 = sub_100003FC4(&qword_1000518A8);
  sub_100012534(v84, v85 + *(int *)(v86 + 48), &qword_100051878);
  sub_100004EE0(v68, &qword_100051878);
  sub_100004EE0(v59, &qword_100051890);
  sub_100004EE0(v84, &qword_100051878);
  return sub_100004EE0(v83, &qword_100051890);
}

uint64_t sub_10002C8A0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t KeyPath;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(char *, uint64_t, uint64_t);
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(char *, uint64_t, uint64_t);
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  void *v136;

  v131 = a2;
  v133 = a1;
  v127 = a3;
  v3 = sub_100003FC4(&qword_1000506B0);
  __chkstk_darwin(v3);
  v125 = (uint64_t *)((char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100003FC4(&qword_1000506B8);
  __chkstk_darwin(v5);
  v123 = (uint64_t *)((char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v117 = type metadata accessor for ContactFormatter.Style(0);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v118 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for StatusAndNameView(0);
  __chkstk_darwin(v109);
  v9 = (uint64_t *)((char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v122 = sub_100003FC4(&qword_1000518F0);
  v10 = __chkstk_darwin(v122);
  v126 = (uint64_t)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v121 = (uint64_t)&v100 - v13;
  __chkstk_darwin(v12);
  v124 = (uint64_t)&v100 - v14;
  v112 = type metadata accessor for UUID(0);
  v110 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v108 = (char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003FC4(&qword_1000506C8);
  __chkstk_darwin(v16);
  v130 = (uint64_t)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for Person(0);
  v18 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v20 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003FC4(&qword_100050690);
  v22 = __chkstk_darwin(v21);
  v111 = (uint64_t)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v100 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v100 - v27;
  v29 = type metadata accessor for PersonStatusSet(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v115 = (char *)&v100 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v34 = (char *)&v100 - v33;
  v35 = (int *)type metadata accessor for AvatarView(0);
  v36 = __chkstk_darwin(v35);
  v120 = (uint64_t)&v100 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v36);
  v40 = (char *)&v100 - v39;
  __chkstk_darwin(v38);
  v119 = (uint64_t)&v100 - v41;
  v105 = v30;
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v104 = v34;
  v132 = v29;
  v107 = v42;
  v42(v34, v133, v29);
  v43 = type metadata accessor for SingleContactQuickActionWidgetView(0);
  v129 = &v131[*(int *)(v43 + 24)];
  sub_100012534((uint64_t)v129, (uint64_t)v28, &qword_100050690);
  v44 = type metadata accessor for PersonInfo(0);
  v45 = *(_QWORD *)(v44 - 8);
  v128 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  v46 = v128(v28, 1, v44);
  v113 = v20;
  v106 = v45;
  if ((_DWORD)v46 == 1)
  {
    sub_100004EE0((uint64_t)v28, &qword_100050690);
    v102 = 0;
  }
  else
  {
    PersonInfo.person.getter(v46);
    v47 = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v28, v44);
    v102 = Person.contact.getter(v47);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v114);
  }
  sub_100012534((uint64_t)v129, (uint64_t)v26, &qword_100050690);
  v48 = v128(v26, 1, v44);
  v49 = v130;
  v101 = v18;
  if ((_DWORD)v48 == 1)
  {
    sub_100004EE0((uint64_t)v26, &qword_100050690);
    v50 = type metadata accessor for ContactImage(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 1, 1, v50);
  }
  else
  {
    PersonInfo.contactImage.getter(v48);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v26, v44);
  }
  v51 = v110;
  v52 = v108;
  v53 = v112;
  (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v108, &v131[*(int *)(v43 + 28)], v112);
  type metadata accessor for ContactFetcher(0);
  v54 = ContactFetcher.__allocating_init()();
  KeyPath = swift_getKeyPath(&unk_1000415B0);
  v56 = swift_getKeyPath(&unk_1000415D8);
  v57 = (uint64_t *)&v40[v35[15]];
  *v57 = v56;
  v103 = sub_100003FC4(&qword_1000506E0);
  swift_storeEnumTagMultiPayload(v57);
  v131 = *(char **)(v105 + 32);
  ((void (*)(char *, char *, uint64_t))v131)(v40, v104, v132);
  *(_QWORD *)&v40[v35[5]] = v102;
  v58 = &v40[v35[6]];
  *(_QWORD *)v58 = 0;
  v58[8] = 1;
  sub_100004F98(v130, (uint64_t)&v40[v35[7]], &qword_1000506C8);
  *(_QWORD *)&v40[v35[8]] = v54;
  v40[v35[9]] = 0;
  v40[v35[10]] = 1;
  v59 = (*(uint64_t (**)(char *, char *, uint64_t))(v51 + 32))(&v40[v35[11]], v52, v53);
  v60 = &v40[v35[12]];
  *((_QWORD *)v60 + 1) = 0;
  *((_QWORD *)v60 + 2) = 0;
  *(_QWORD *)v60 = KeyPath;
  *((_WORD *)v60 + 12) = 0;
  v61 = v35[13];
  *(double *)&v40[v61] = static PeopleWidgetConstants.maxContactAvatarSize.getter(v59);
  v62 = &v40[v35[14]];
  *(_OWORD *)v62 = xmmword_100040540;
  *((_OWORD *)v62 + 1) = xmmword_100040550;
  v63 = v119;
  sub_10000EE60((uint64_t)v40, v119, type metadata accessor for AvatarView);
  v64 = v111;
  sub_100012534((uint64_t)v129, v111, &qword_100050690);
  v65 = v128((char *)v64, 1, v44);
  v66 = v113;
  if ((_DWORD)v65 == 1)
  {
    sub_100004EE0(v64, &qword_100050690);
    v67 = 0;
  }
  else
  {
    PersonInfo.person.getter(v65);
    v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v106 + 8))(v64, v44);
    v67 = Person.contact.getter(v68);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v66, v114);
  }
  v69 = v115;
  v70 = v132;
  v71 = v107(v115, v133, v132);
  v72 = static Font.footnote.getter(v71);
  v73 = v118;
  (*(void (**)(char *, _QWORD, uint64_t))(v116 + 104))(v118, enum case for ContactFormatter.Style.shortName(_:), v117);
  v74 = String.localized.getter(0x656D614E206F4ELL, 0xE700000000000000);
  v76 = v75;
  v135 = type metadata accessor for ContactFormatter(0);
  v136 = &protocol witness table for ContactFormatter;
  sub_100004F2C(&v134);
  ContactFormatter.init(style:fallback:)(v73, v74, v76);
  v77 = swift_getKeyPath(&unk_1000415D8);
  v78 = (uint64_t)v123;
  *v123 = v77;
  swift_storeEnumTagMultiPayload(v78);
  v79 = swift_getKeyPath(&unk_100041580);
  v80 = (uint64_t)v125;
  *v125 = v79;
  sub_100003FC4(&qword_1000506F0);
  swift_storeEnumTagMultiPayload(v80);
  *v9 = v67;
  v81 = (int *)v109;
  ((void (*)(char *, char *, uint64_t))v131)((char *)v9 + *(int *)(v109 + 20), v69, v70);
  *(uint64_t *)((char *)v9 + v81[6]) = v72;
  *(uint64_t *)((char *)v9 + v81[7]) = 0x4008000000000000;
  sub_100004F70(&v134, (uint64_t)v9 + v81[8]);
  *(uint64_t *)((char *)v9 + v81[9]) = 1;
  *(uint64_t *)((char *)v9 + v81[10]) = 1;
  *(uint64_t *)((char *)v9 + v81[11]) = 0x4060C00000000000;
  v82 = (char *)v9 + v81[12];
  *(_QWORD *)v82 = swift_getKeyPath(&unk_100041608);
  *((_QWORD *)v82 + 1) = 0;
  v82[16] = 0;
  v83 = (uint64_t *)((char *)v9 + v81[13]);
  *v83 = swift_getKeyPath(&unk_100041638);
  sub_100003FC4(&qword_1000506F8);
  swift_storeEnumTagMultiPayload(v83);
  sub_100004F98(v78, (uint64_t)v9 + v81[14], &qword_1000506B8);
  v84 = sub_100004F98(v80, (uint64_t)v9 + v81[15], &qword_1000506B0);
  LOBYTE(v83) = static Edge.Set.top.getter(v84);
  v85 = EdgeInsets.init(_all:)(4.0);
  v87 = v86;
  v89 = v88;
  v91 = v90;
  v92 = v121;
  sub_100004E9C((uint64_t)v9, v121, type metadata accessor for StatusAndNameView);
  v93 = v92 + *(int *)(v122 + 36);
  *(_BYTE *)v93 = (_BYTE)v83;
  *(double *)(v93 + 8) = v85;
  *(_QWORD *)(v93 + 16) = v87;
  *(_QWORD *)(v93 + 24) = v89;
  *(_QWORD *)(v93 + 32) = v91;
  *(_BYTE *)(v93 + 40) = 0;
  sub_10000501C((uint64_t)v9, type metadata accessor for StatusAndNameView);
  v94 = v124;
  sub_100004F98(v92, v124, &qword_1000518F0);
  v95 = v120;
  sub_100004E9C(v63, v120, type metadata accessor for AvatarView);
  v96 = v126;
  sub_100012534(v94, v126, &qword_1000518F0);
  v97 = v127;
  sub_100004E9C(v95, v127, type metadata accessor for AvatarView);
  v98 = sub_100003FC4(&qword_1000518F8);
  sub_100012534(v96, v97 + *(int *)(v98 + 48), &qword_1000518F0);
  sub_100004EE0(v94, &qword_1000518F0);
  sub_10000501C(v63, type metadata accessor for AvatarView);
  sub_100004EE0(v96, &qword_1000518F0);
  return sub_10000501C(v95, type metadata accessor for AvatarView);
}

uint64_t sub_10002D348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t KeyPath;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;

  v97 = a2;
  v88 = sub_100003FC4(&qword_1000518B8);
  __chkstk_darwin(v88);
  v89 = (uint64_t)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for WidgetAccentModifier(0);
  __chkstk_darwin(v4);
  v95 = (uint64_t *)((char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v91 = type metadata accessor for WidgetButton(0);
  v6 = __chkstk_darwin(v91);
  v93 = (uint64_t)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v80 - v9;
  __chkstk_darwin(v8);
  v81 = (char *)&v80 - v11;
  v90 = sub_100003FC4(&qword_1000518C0);
  v12 = __chkstk_darwin(v90);
  v96 = (uint64_t)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v94 = (char *)&v80 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v80 - v17;
  __chkstk_darwin(v16);
  v80 = (char *)&v80 - v19;
  v20 = sub_100003FC4(&qword_100051728);
  __chkstk_darwin(v20);
  v22 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for QuickAction(0);
  v83 = *(_QWORD *)(v23 - 8);
  v84 = v23;
  __chkstk_darwin(v23);
  v82 = (char *)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003FC4(&qword_100050688);
  __chkstk_darwin(v25);
  v27 = (char *)&v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for URL(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v80 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v34 = (char *)&v80 - v33;
  v35 = sub_100003FC4(&qword_1000518C8);
  v36 = __chkstk_darwin(v35);
  v87 = (uint64_t)&v80 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v86 = (char *)&v80 - v38;
  v85 = type metadata accessor for SingleContactQuickActionWidgetView(0);
  v39 = *(int *)(v85 + 36);
  v92 = a1;
  v40 = a1 + v39;
  sub_100012534(v40, (uint64_t)v27, &qword_100050688);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
  {
    v41 = &qword_100050688;
    v42 = (uint64_t)v27;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v34, v27, v28);
    v43 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v43(v32, v34, v28);
    QuickAction.init(from:)(v32);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v22, 1, v84) != 1)
    {
      (*(void (**)(void))(v83 + 32))();
      v55 = (uint64_t)v81;
      v43(v81, v34, v28);
      v56 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v55, 0, 1, v28);
      v57 = QuickAction.iconSystemName.getter(v56);
      v59 = v58;
      v60 = String.localized.getter(1819042115, 0xE400000000000000);
      v46 = v91;
      v61 = (uint64_t *)(v55 + *(int *)(v91 + 20));
      *v61 = v57;
      v61[1] = v59;
      v62 = (uint64_t *)(v55 + *(int *)(v46 + 24));
      *v62 = v60;
      v62[1] = v63;
      KeyPath = swift_getKeyPath(&unk_100041580);
      v51 = v95;
      *v95 = KeyPath;
      sub_100003FC4(&qword_1000506F0);
      swift_storeEnumTagMultiPayload(v51);
      v44 = v90;
      v65 = (uint64_t)v80;
      sub_10000EE60((uint64_t)v51, (uint64_t)&v80[*(int *)(v90 + 36)], type metadata accessor for WidgetAccentModifier);
      sub_10000EE60(v55, v65, type metadata accessor for WidgetButton);
      v66 = v89;
      sub_100012534(v65, v89, &qword_1000518C0);
      swift_storeEnumTagMultiPayload(v66);
      v67 = sub_10002F84C();
      v54 = (uint64_t)v86;
      _ConditionalContent<>.init(storage:)(v66, v44, v44, v67, v67);
      sub_100004EE0(v65, &qword_1000518C0);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v82, v84);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v34, v28);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v34, v28);
    v41 = &qword_100051728;
    v42 = (uint64_t)v22;
  }
  sub_100004EE0(v42, v41);
  v44 = v90;
  sub_100012534(v40, (uint64_t)v10, &qword_100050688);
  v45 = String.localized.getter(1819042115, 0xE400000000000000);
  v46 = v91;
  v47 = &v10[*(int *)(v91 + 20)];
  *(_QWORD *)v47 = 0x69662E656E6F6870;
  *((_QWORD *)v47 + 1) = 0xEA00000000006C6CLL;
  v48 = (uint64_t *)&v10[*(int *)(v46 + 24)];
  *v48 = v45;
  v48[1] = v49;
  v50 = swift_getKeyPath(&unk_100041580);
  v51 = v95;
  *v95 = v50;
  sub_100003FC4(&qword_1000506F0);
  swift_storeEnumTagMultiPayload(v51);
  sub_10000EE60((uint64_t)v51, (uint64_t)&v18[*(int *)(v44 + 36)], type metadata accessor for WidgetAccentModifier);
  sub_10000EE60((uint64_t)v10, (uint64_t)v18, type metadata accessor for WidgetButton);
  v52 = v89;
  sub_100012534((uint64_t)v18, v89, &qword_1000518C0);
  swift_storeEnumTagMultiPayload(v52);
  v53 = sub_10002F84C();
  v54 = (uint64_t)v86;
  _ConditionalContent<>.init(storage:)(v52, v44, v44, v53, v53);
  sub_100004EE0((uint64_t)v18, &qword_1000518C0);
LABEL_7:
  v68 = v93;
  sub_100012534(v92 + *(int *)(v85 + 32), v93, &qword_100050688);
  v69 = String.localized.getter(0x6567617373654DLL, 0xE700000000000000);
  v70 = v68 + *(int *)(v46 + 20);
  strcpy((char *)v70, "message.fill");
  *(_BYTE *)(v70 + 13) = 0;
  *(_WORD *)(v70 + 14) = -5120;
  v71 = (uint64_t *)(v68 + *(int *)(v46 + 24));
  *v71 = v69;
  v71[1] = v72;
  *v51 = swift_getKeyPath(&unk_100041580);
  sub_100003FC4(&qword_1000506F0);
  swift_storeEnumTagMultiPayload(v51);
  v73 = (uint64_t)v94;
  sub_10000EE60((uint64_t)v51, (uint64_t)&v94[*(int *)(v44 + 36)], type metadata accessor for WidgetAccentModifier);
  sub_10000EE60(v68, v73, type metadata accessor for WidgetButton);
  v74 = v87;
  sub_100012534(v54, v87, &qword_1000518C8);
  v75 = v96;
  sub_100012534(v73, v96, &qword_1000518C0);
  v76 = v97;
  sub_100012534(v74, v97, &qword_1000518C8);
  v77 = sub_100003FC4(&qword_1000518E8);
  v78 = v76 + *(int *)(v77 + 48);
  *(_QWORD *)v78 = 0;
  *(_BYTE *)(v78 + 8) = 1;
  sub_100012534(v75, v76 + *(int *)(v77 + 64), &qword_1000518C0);
  sub_100004EE0(v73, &qword_1000518C0);
  sub_100004EE0(v54, &qword_1000518C8);
  sub_100004EE0(v75, &qword_1000518C0);
  return sub_100004EE0(v74, &qword_1000518C8);
}

uint64_t sub_10002DB2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v27 = a2;
  v26 = type metadata accessor for SingleContactQuickActionWidgetView(0);
  v3 = *(_QWORD *)(v26 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v26);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003FC4(&qword_100051840);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003FC4(&qword_100051830);
  __chkstk_darwin(v25);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10002B7E4();
  KeyPath = swift_getKeyPath(&unk_100041568);
  sub_100004E9C(a1, (uint64_t)v5, type metadata accessor for SingleContactQuickActionWidgetView);
  v13 = *(unsigned __int8 *)(v3 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_10004E6F0, v14 + v4, v13 | 7);
  sub_10000EE60((uint64_t)v5, v15 + v14, type metadata accessor for SingleContactQuickActionWidgetView);
  v16 = sub_100003FC4(&qword_100051848);
  v17 = sub_100005084(&qword_100051850, &qword_100051848, (uint64_t)&protocol conformance descriptor for [A]);
  v18 = sub_10002F7EC();
  ForEach<>.init(_:id:content:)(&v28, KeyPath, sub_10002F7A0, v15, v16, &type metadata for Color, v17, v18, &protocol witness table for Color);
  v19 = v26;
  v20 = *(_QWORD *)(a1 + *(int *)(v26 + 48));
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v9, v6);
  *(_QWORD *)&v11[*(int *)(v25 + 36)] = v20;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v21 = sub_10002BAE0();
  v22 = Color.opacity(_:)(*(double *)(a1 + *(int *)(v19 + 44)));
  swift_release(v21);
  v23 = v27;
  sub_100012534((uint64_t)v11, v27, &qword_100051830);
  *(_QWORD *)(v23 + *(int *)(sub_100003FC4(&qword_100051808) + 36)) = v22;
  return sub_100004EE0((uint64_t)v11, &qword_100051830);
}

uint64_t sub_10002DD9C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t result;

  v4 = *a1;
  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 8);
  sub_10000D848(*(_QWORD *)a2, v6);
  v7 = sub_10001C064(v5, v6);
  v8 = sub_10000DA3C(v5, v6);
  if ((v7 & 1) != 0)
  {
    result = swift_retain(v4);
  }
  else
  {
    result = static Color.clear.getter(v8);
    v4 = result;
  }
  *a3 = v4;
  return result;
}

uint64_t sub_10002DE1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ButtonBorderShape(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues._buttonBorderShape.setter(v4);
}

uint64_t sub_10002DE98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003FC4(&qword_100051708);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003FC4(&qword_100050688);
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003FC4(&qword_100051710);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003FC4(&qword_100051718);
  LocalizedStringResource.init(stringLiteral:)(5001813, 0xE300000000000000);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v17 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 1, 1, v17);
  v18 = type metadata accessor for IntentDialog(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 1, 1, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  return IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)(v16, v12, v9, v6, v3);
}

uint64_t sub_10002E0A8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *sub_10002E0C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

unint64_t sub_10002E100(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(const void *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v14);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_10000D848(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    v12 = sub_100003FC4(&qword_1000506E0);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
    }
    else
    {
      v15 = *v11;
      *v10 = *v11;
      swift_retain(v15);
    }
    swift_storeEnumTagMultiPayload(v10);
    v16 = a3[6];
    v17 = (void *)(a1 + v16);
    v18 = (const void *)(a2 + v16);
    v19 = type metadata accessor for PersonInfo(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_100003FC4(&qword_100050690);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v22 = a3[7];
    v23 = a1 + v22;
    v24 = a2 + v22;
    v25 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
    v26 = a3[8];
    v27 = (void *)(a1 + v26);
    v28 = (const void *)(a2 + v26);
    v29 = type metadata accessor for URL(0);
    v30 = *(_QWORD *)(v29 - 8);
    v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
    if (v31(v28, 1, v29))
    {
      v32 = sub_100003FC4(&qword_100050688);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v33 = a3[9];
    v34 = (void *)(a1 + v33);
    v35 = (const void *)(a2 + v33);
    if (v31((const void *)(a2 + v33), 1, v29))
    {
      v36 = sub_100003FC4(&qword_100050688);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v34, v35, v29);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v34, 0, 1, v29);
    }
    v37 = a3[11];
    *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
    *(_QWORD *)(a1 + v37) = *(_QWORD *)(a2 + v37);
    *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  }
  return a1;
}

uint64_t sub_10002E3C0(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t result;

  sub_10000DA3C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = a1 + a2[6];
  v8 = type metadata accessor for PersonInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v10 = a1 + a2[7];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = a1 + a2[8];
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (!v15(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  v16 = a1 + a2[9];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v15)(v16, 1, v13);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v16, v13);
  return result;
}

uint64_t sub_10002E52C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(const void *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10000D848(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
  }
  else
  {
    v13 = *v10;
    *v9 = *v10;
    swift_retain(v13);
  }
  swift_storeEnumTagMultiPayload(v9);
  v14 = a3[6];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = type metadata accessor for PersonInfo(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_100003FC4(&qword_100050690);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  v24 = a3[8];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = type metadata accessor for URL(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  if (v29(v26, 1, v27))
  {
    v30 = sub_100003FC4(&qword_100050688);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v31 = a3[9];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  if (v29((const void *)(a2 + v31), 1, v27))
  {
    v34 = sub_100003FC4(&qword_100050688);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v32, v33, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
  }
  v35 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v35) = *(_QWORD *)(a2 + v35);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10002E7C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  int v41;
  int v42;
  uint64_t v43;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_10000D848(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10000DA3C(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_100004EE0(a1 + v10, &qword_1000506E0);
    v13 = sub_100003FC4(&qword_1000506E0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
    }
    else
    {
      v15 = *v12;
      *v11 = *v12;
      swift_retain(v15);
    }
    swift_storeEnumTagMultiPayload(v11);
  }
  v16 = a3[6];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for PersonInfo(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
LABEL_11:
    v24 = sub_100003FC4(&qword_100050690);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
LABEL_12:
  v25 = a3[7];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 24))(v26, v27, v28);
  v29 = a3[8];
  v30 = (void *)(a1 + v29);
  v31 = (void *)(a2 + v29);
  v32 = type metadata accessor for URL(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
  v35 = v34(v30, 1, v32);
  v36 = v34(v31, 1, v32);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v36)
  {
    (*(void (**)(void *, uint64_t))(v33 + 8))(v30, v32);
LABEL_17:
    v37 = sub_100003FC4(&qword_100050688);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(void *, void *, uint64_t))(v33 + 24))(v30, v31, v32);
LABEL_18:
  v38 = a3[9];
  v39 = (void *)(a1 + v38);
  v40 = (void *)(a2 + v38);
  v41 = v34((void *)(a1 + v38), 1, v32);
  v42 = v34(v40, 1, v32);
  if (!v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 24))(v39, v40, v32);
      goto LABEL_24;
    }
    (*(void (**)(void *, uint64_t))(v33 + 8))(v39, v32);
    goto LABEL_23;
  }
  if (v42)
  {
LABEL_23:
    v43 = sub_100003FC4(&qword_100050688);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(void *, void *, uint64_t))(v33 + 16))(v39, v40, v32);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v39, 0, 1, v32);
LABEL_24:
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10002EB50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(const void *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for PersonInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_100003FC4(&qword_100050690);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  v21 = a3[8];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = type metadata accessor for URL(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48);
  if (v26(v23, 1, v24))
  {
    v27 = sub_100003FC4(&qword_100050688);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v28 = a3[9];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  if (v26((const void *)(a2 + v28), 1, v24))
  {
    v31 = sub_100003FC4(&qword_100050688);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v29, v30, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v29, 0, 1, v24);
  }
  v32 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v32) = *(_QWORD *)(a2 + v32);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_10002EDDC(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10000DA3C(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_100004EE0(a1 + v10, &qword_1000506E0);
    v13 = sub_100003FC4(&qword_1000506E0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v15 = a3[6];
  v16 = (void *)(a1 + v15);
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for PersonInfo(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_10:
    v23 = sub_100003FC4(&qword_100050690);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(void *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
LABEL_11:
  v24 = a3[7];
  v25 = a1 + v24;
  v26 = (uint64_t)a2 + v24;
  v27 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  v28 = a3[8];
  v29 = (void *)(a1 + v28);
  v30 = (char *)a2 + v28;
  v31 = type metadata accessor for URL(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v35)
  {
    (*(void (**)(void *, uint64_t))(v32 + 8))(v29, v31);
LABEL_16:
    v36 = sub_100003FC4(&qword_100050688);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(void *, char *, uint64_t))(v32 + 40))(v29, v30, v31);
LABEL_17:
  v37 = a3[9];
  v38 = (void *)(a1 + v37);
  v39 = (char *)a2 + v37;
  v40 = v33((void *)(a1 + v37), 1, v31);
  v41 = v33(v39, 1, v31);
  if (!v40)
  {
    if (!v41)
    {
      (*(void (**)(void *, char *, uint64_t))(v32 + 40))(v38, v39, v31);
      goto LABEL_23;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v38, v31);
    goto LABEL_22;
  }
  if (v41)
  {
LABEL_22:
    v42 = sub_100003FC4(&qword_100050688);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(void *, char *, uint64_t))(v32 + 32))(v38, v39, v31);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v38, 0, 1, v31);
LABEL_23:
  v43 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *(_QWORD *)(a1 + v43) = *(uint64_t *)((char *)a2 + v43);
  *(_QWORD *)(a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  return a1;
}

uint64_t sub_10002F160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002F16C);
}

uint64_t sub_10002F16C(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_100003FC4(&qword_1000506B8);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = sub_100003FC4(&qword_100050690);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v13 = type metadata accessor for UUID(0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[7];
        }
        else
        {
          v10 = sub_100003FC4(&qword_100050688);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[8];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10002F258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002F264);
}

uint64_t sub_10002F264(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v8 = sub_100003FC4(&qword_1000506B8);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_100003FC4(&qword_100050690);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v13 = type metadata accessor for UUID(0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[7];
        }
        else
        {
          v10 = sub_100003FC4(&qword_100050688);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[8];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SingleContactQuickActionWidgetView(uint64_t a1)
{
  return sub_1000108EC(a1, (uint64_t *)&unk_100051788, (uint64_t)&nominal type descriptor for SingleContactQuickActionWidgetView);
}

void sub_10002F364(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;

  v10[0] = "\t";
  sub_10000EAB0(319, (unint64_t *)&unk_100051148, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000EAB0(319, (unint64_t *)&qword_100050C60, (uint64_t (*)(uint64_t))&type metadata accessor for PersonInfo, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for UUID(319);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_10000EAB0(319, (unint64_t *)&unk_100051798, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
        if (v9 <= 0x3F)
        {
          v11 = *(_QWORD *)(v8 - 8) + 64;
          v12 = v11;
          v13 = (char *)&value witness table for Builtin.Int64 + 64;
          v14 = (char *)&value witness table for Builtin.Int64 + 64;
          v15 = (char *)&value witness table for Builtin.Int64 + 64;
          swift_initStructMetadata(a1, 256, 9, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_10002F488(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000426F0, 1);
}

uint64_t sub_10002F498@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002DB2C(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10002F4A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051810;
  if (!qword_100051810)
  {
    v1 = sub_100004004(&qword_1000517F0);
    sub_100005084(&qword_100051818, &qword_1000517E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051810);
  }
  return result;
}

uint64_t sub_10002F524(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100004004(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002F58C()
{
  return sub_10002F524(&qword_100051828, &qword_100051830, (void (*)(void))sub_10002F5B0);
}

unint64_t sub_10002F5B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051838;
  if (!qword_100051838)
  {
    v1 = sub_100004004(&qword_100051840);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100051838);
  }
  return result;
}

uint64_t sub_10002F60C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;

  v1 = (int *)type metadata accessor for SingleContactQuickActionWidgetView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10000DA3C(*(_QWORD *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = v6 + v1[6];
  v11 = type metadata accessor for PersonInfo(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  v13 = v6 + v1[7];
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v6 + v1[8];
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (!v18(v15, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  v19 = v6 + v1[9];
  if (!v18(v19, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v16);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10002F7A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SingleContactQuickActionWidgetView(0) - 8) + 80);
  return sub_10002DD9C(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_10002F7EC()
{
  unint64_t result;

  result = qword_100051858;
  if (!qword_100051858)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Color, &type metadata for Color);
    atomic_store(result, (unint64_t *)&qword_100051858);
  }
  return result;
}

uint64_t type metadata accessor for WidgetButton(uint64_t a1)
{
  return sub_1000108EC(a1, qword_100051958, (uint64_t)&nominal type descriptor for WidgetButton);
}

unint64_t sub_10002F84C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000518D0;
  if (!qword_1000518D0)
  {
    v1 = sub_100004004(&qword_1000518C0);
    sub_100004FDC(&qword_1000518D8, type metadata accessor for WidgetButton, (uint64_t)&unk_100041690);
    sub_100004FDC(&qword_1000518E0, type metadata accessor for WidgetAccentModifier, (uint64_t)&unk_100040EA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000518D0);
  }
  return result;
}

uint64_t *sub_10002F908(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100003FC4(&qword_100050688);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = *(int *)(a3 + 24);
    v13 = (uint64_t *)((char *)a1 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (uint64_t *)((char *)a1 + v12);
    v17 = (uint64_t *)((char *)a2 + v12);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
  }
  return a1;
}

uint64_t sub_10002FA14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

char *sub_10002FA90(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100003FC4(&qword_100050688);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = &a1[v10];
  v15 = &a2[v10];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v16);
  return a1;
}

char *sub_10002FB70(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100003FC4(&qword_100050688);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  v16 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = *(int *)(a3 + 24);
  v18 = &a1[v17];
  v19 = &a2[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  v21 = *((_QWORD *)v18 + 1);
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

char *sub_10002FCC4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100003FC4(&qword_100050688);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  return a1;
}

char *sub_10002FD88(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100003FC4(&qword_100050688);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  v17 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease(v17);
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  v22 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  v23 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v19 = v22;
  *((_QWORD *)v19 + 1) = v21;
  swift_bridgeObjectRelease(v23);
  return a1;
}

uint64_t sub_10002FEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002FEC8);
}

uint64_t sub_10002FEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100003FC4(&qword_100050688);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10002FF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002FF58);
}

uint64_t sub_10002FF58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003FC4(&qword_100050688);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void sub_10002FFD8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10000EAB0(319, (unint64_t *)&unk_100051798, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100041678;
    v4[2] = &unk_100041678;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_100030064()
{
  _QWORD v1[4];

  v1[0] = sub_100004004(&qword_1000517F0);
  v1[1] = sub_100004004(&qword_100051808);
  v1[2] = sub_10002F4A0();
  v1[3] = sub_10002F524(&qword_100051820, &qword_100051808, (void (*)(void))sub_10002F58C);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

uint64_t sub_1000300F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100042718, 1);
}

uint64_t sub_100030104@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003012C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_100030154()
{
  return EnvironmentValues._buttonBorderShape.getter();
}

unint64_t sub_100030178()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000519B8;
  if (!qword_1000519B8)
  {
    v1 = sub_100004004(&qword_1000519A8);
    sub_1000301FC();
    sub_100005084(&qword_100051A10, &qword_1000519B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000519B8);
  }
  return result;
}

unint64_t sub_1000301FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000519C0;
  if (!qword_1000519C0)
  {
    v1 = sub_100004004(&qword_1000519A0);
    sub_100030280();
    sub_100005084(&qword_100051298, &qword_1000512A0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000519C0);
  }
  return result;
}

unint64_t sub_100030280()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000519C8;
  if (!qword_1000519C8)
  {
    v1 = sub_100004004(&qword_100051998);
    sub_1000302E4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000519C8);
  }
  return result;
}

unint64_t sub_1000302E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000519D0;
  if (!qword_1000519D0)
  {
    v1 = sub_100004004(&qword_1000519D8);
    sub_100005084(&qword_1000519E0, &qword_1000519E8, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100030368();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000519D0);
  }
  return result;
}

unint64_t sub_100030368()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000519F0;
  if (!qword_1000519F0)
  {
    v1 = sub_100004004(&qword_1000519F8);
    sub_100005084(&qword_1000519E0, &qword_1000519E8, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100005084(&qword_100051A00, &qword_100051A08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000519F0);
  }
  return result;
}

uint64_t sub_100030404@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10002B5C8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10003041C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100030448(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_10003046C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_10003047C(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

uint64_t sub_100030494(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v36 = a1;
  v1 = type metadata accessor for URL(0);
  v32 = *(_QWORD *)(v1 - 8);
  v2 = __chkstk_darwin(v1);
  v35 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - v4;
  v6 = type metadata accessor for InputConnectionBehavior(0);
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003FC4(&qword_100051708);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003FC4(&qword_100050688);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003FC4(&qword_100051710);
  __chkstk_darwin(v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for LocalizedStringResource(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003FC4(&qword_100051718);
  LocalizedStringResource.init(stringLiteral:)(5001813, 0xE300000000000000);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
  v22 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v14, 1, 1, v1);
  v23 = type metadata accessor for IntentDialog(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v11, 1, 1, v23);
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v8, enum case for InputConnectionBehavior.default(_:), v34);
  v24 = IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)(v21, v17, v14, v11, v8);
  v25 = v22;
  v26 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v27 = v36;
  v26(v5, v36, v1);
  v28 = v35;
  v26(v35, v5, v1);
  swift_retain(v24);
  IntentParameter.wrappedValue.setter(v28);
  v29 = *(void (**)(char *, uint64_t))(v25 + 8);
  v29(v5, v1);
  swift_release(v24);
  v29(v27, v1);
  return v24;
}

unint64_t sub_10003076C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051A20;
  if (!qword_100051A20)
  {
    v1 = sub_100004004(&qword_100051A28);
    sub_100030178();
    sub_100004FDC((unint64_t *)&qword_100051A30, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051A20);
  }
  return result;
}

void **sub_1000307F8(void **a1, void **a2, int *a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PersonStatusSet(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v13 = v4;
    v12(v9, v10, v11);
    v14 = a3[6];
    v15 = *(_OWORD *)((char *)a2 + v14 + 24);
    *(_OWORD *)((char *)v7 + v14 + 24) = v15;
    (**(void (***)(void))(v15 - 8))();
    v16 = a3[7];
    v17 = (uint64_t *)((char *)v7 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = sub_100003FC4(&qword_1000506F8);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    }
    else
    {
      v21 = *v18;
      *v17 = *v18;
      swift_retain(v21);
    }
    swift_storeEnumTagMultiPayload(v17);
    v22 = a3[8];
    v23 = (uint64_t *)((char *)v7 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = sub_100003FC4(&qword_1000506E0);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      v26 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
    }
    else
    {
      v27 = *v24;
      *v23 = *v24;
      swift_retain(v27);
    }
    swift_storeEnumTagMultiPayload(v23);
  }
  return v7;
}

uint64_t sub_1000309B0(id *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (char *)a1 + a2[5];
  v5 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  sub_10000D160((id *)((char *)a1 + a2[6]));
  v6 = (id *)((char *)a1 + a2[7]);
  v7 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (id *)((char *)a1 + a2[8]);
  v10 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v9, v10) != 1)
    return swift_release(*v9);
  v11 = type metadata accessor for ColorScheme(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
}

void **sub_100030AB4(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  id v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *a2;
  *a1 = *a2;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for PersonStatusSet(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12 = v6;
  v11(v8, v9, v10);
  v13 = a3[6];
  v14 = *(_OWORD *)((char *)a2 + v13 + 24);
  *(_OWORD *)((char *)a1 + v13 + 24) = v14;
  (**(void (***)(void))(v14 - 8))();
  v15 = a3[7];
  v16 = (uint64_t *)((char *)a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  v18 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
  }
  else
  {
    v20 = *v17;
    *v16 = *v17;
    swift_retain(v20);
  }
  swift_storeEnumTagMultiPayload(v16);
  v21 = a3[8];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v24 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
  }
  else
  {
    v26 = *v23;
    *v22 = *v23;
    swift_retain(v26);
  }
  swift_storeEnumTagMultiPayload(v22);
  return a1;
}

void **sub_100030C3C(void **a1, void **a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  v8 = v7;

  v9 = a3[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  sub_10000D260((void **)((char *)a1 + a3[6]), (void **)((char *)a2 + a3[6]));
  if (a1 != a2)
  {
    v13 = a3[7];
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    sub_100004EE0((uint64_t)a1 + v13, &qword_1000506F8);
    v16 = sub_100003FC4(&qword_1000506F8);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
    }
    else
    {
      v18 = *v15;
      *v14 = *v15;
      swift_retain(v18);
    }
    swift_storeEnumTagMultiPayload(v14);
    v19 = a3[8];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    sub_100004EE0((uint64_t)a1 + v19, &qword_1000506E0);
    v22 = sub_100003FC4(&qword_1000506E0);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
    }
    else
    {
      v24 = *v21;
      *v20 = *v21;
      swift_retain(v24);
    }
    swift_storeEnumTagMultiPayload(v20);
  }
  return a1;
}

_QWORD *sub_100030DD4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
  v15 = (char *)a1 + v11;
  v16 = (char *)a2 + v11;
  v17 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
    swift_storeEnumTagMultiPayload(v15);
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  v19 = a3[8];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
    swift_storeEnumTagMultiPayload(v20);
  }
  else
  {
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  return a1;
}

void **sub_100030F48(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a1;
  *a1 = *a2;

  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  sub_10000D160((void **)((char *)a1 + v11));
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
  if (a1 != a2)
  {
    v15 = a3[7];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    sub_100004EE0((uint64_t)a1 + v15, &qword_1000506F8);
    v18 = sub_100003FC4(&qword_1000506F8);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    sub_100004EE0((uint64_t)a1 + v20, &qword_1000506E0);
    v23 = sub_100003FC4(&qword_1000506E0);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload(v21);
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000310F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100031104);
}

uint64_t sub_100031104(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v6 = type metadata accessor for PersonStatusSet(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v12 = sub_100003FC4(&qword_100050828);
    v7 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v12;
      v9 = a3[7];
    }
    else
    {
      v8 = sub_100003FC4(&qword_1000506B8);
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[8];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6] + 24);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_1000311D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000311E4);
}

uint64_t sub_1000311E4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = type metadata accessor for PersonStatusSet(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6] + 24) = (a2 - 1);
      return result;
    }
    v12 = sub_100003FC4(&qword_100050828);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[7];
    }
    else
    {
      v10 = sub_100003FC4(&qword_1000506B8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[8];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for StatusAndNameViewVertical(uint64_t a1)
{
  uint64_t result;

  result = qword_100051A90;
  if (!qword_100051A90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StatusAndNameViewVertical);
  return result;
}

void sub_1000312F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v8[0] = "\b";
  v2 = type metadata accessor for PersonStatusSet(319);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v8[2] = &unk_1000417B8;
    sub_1000219EC(319, (unint64_t *)&qword_100050898, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000219EC(319, (unint64_t *)&unk_100051148, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_1000313C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100042768, 1);
}

uint64_t sub_1000313D4@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  double v77;
  uint64_t OpaqueTypeConformance2;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  void **v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;

  v148 = a2;
  v3 = sub_100003FC4(&qword_100051AE0);
  __chkstk_darwin(v3);
  v119 = (uint64_t *)((char *)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v146 = sub_100003FC4(&qword_100051AE8);
  v144 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v118 = (uint64_t)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for ContentSizeCategory(0);
  v121 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v120 = (uint64_t)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003FC4(&qword_100051AF0);
  v8 = __chkstk_darwin(v7);
  v147 = (uint64_t)&v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v145 = (char *)&v116 - v10;
  v126 = type metadata accessor for Text.WritingMode(0);
  v125 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v123 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003FC4(&qword_100051AF8);
  v130 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v128 = (char *)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100003FC4(&qword_100051B00);
  __chkstk_darwin(v124);
  v15 = (char *)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100003FC4(&qword_100051B08);
  __chkstk_darwin(v127);
  v17 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100003FC4(&qword_100051B10);
  __chkstk_darwin(v131);
  v19 = (char *)&v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100003FC4(&qword_100051B18);
  __chkstk_darwin(v137);
  v21 = (char *)&v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100003FC4(&qword_100051B20);
  v138 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v135 = (char *)&v116 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100003FC4(&qword_100051B28);
  v139 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v136 = (char *)&v116 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_100003FC4(&qword_100051B30);
  __chkstk_darwin(v133);
  v25 = (char *)&v116 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100003FC4(&qword_100051B38);
  v26 = __chkstk_darwin(v134);
  v143 = (uint64_t)&v116 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v132 = (uint64_t)&v116 - v29;
  __chkstk_darwin(v28);
  v142 = (uint64_t)&v116 - v30;
  v31 = *a1;
  v129 = a1;
  if (v31)
  {
    v32 = (void **)((char *)a1 + *(int *)(type metadata accessor for StatusAndNameViewVertical(0) + 24));
    v117 = v15;
    v34 = v32[3];
    v33 = v32[4];
    sub_10001190C(v32, v34);
    v35 = v31;
    v36 = dispatch thunk of ContactFormatterProtocol.displayName(for:)(v35, v34, v33);
    v38 = v37;

    v15 = v117;
  }
  else
  {
    v36 = String.localized.getter(0x74655320746F4ELL, 0xE700000000000000);
    v38 = v39;
  }
  v151 = v36;
  v152 = v38;
  v40 = sub_10000C644();
  v151 = Text.init<A>(_:)(&v151, &type metadata for String, v40);
  v152 = v41;
  v153 = v42 & 1;
  v154 = v43;
  v44 = v123;
  static Text.WritingMode.verticalRightToLeft.getter();
  v45 = v128;
  View.writingMode(_:)(v44, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v44, v126);
  sub_1000206A4(v151, v152, v153);
  v46 = swift_bridgeObjectRelease(v154);
  v47 = static Color.primary.getter(v46);
  KeyPath = swift_getKeyPath(&unk_100041820);
  v49 = v130;
  (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v15, v45, v12);
  v50 = (uint64_t *)&v15[*(int *)(v124 + 36)];
  *v50 = KeyPath;
  v50[1] = v47;
  v51 = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v45, v12);
  LOBYTE(v47) = static Edge.Set.leading.getter(v51);
  v52 = EdgeInsets.init(_all:)(-2.0);
  v54 = v53;
  v56 = v55;
  v58 = v57;
  sub_100012534((uint64_t)v15, (uint64_t)v17, &qword_100051B00);
  v59 = &v17[*(int *)(v127 + 36)];
  *v59 = v47;
  *((double *)v59 + 1) = v52;
  *((_QWORD *)v59 + 2) = v54;
  *((_QWORD *)v59 + 3) = v56;
  *((_QWORD *)v59 + 4) = v58;
  v59[40] = 0;
  v60 = sub_100004EE0((uint64_t)v15, &qword_100051B00);
  LOBYTE(v47) = static Edge.Set.bottom.getter(v60);
  v61 = EdgeInsets.init(_all:)(-1.0);
  v63 = v62;
  v65 = v64;
  v67 = v66;
  sub_100012534((uint64_t)v17, (uint64_t)v19, &qword_100051B08);
  v68 = &v19[*(int *)(v131 + 36)];
  *v68 = v47;
  *((double *)v68 + 1) = v61;
  *((_QWORD *)v68 + 2) = v63;
  *((_QWORD *)v68 + 3) = v65;
  *((_QWORD *)v68 + 4) = v67;
  v68[40] = 0;
  v69 = sub_100004EE0((uint64_t)v17, &qword_100051B08);
  v70 = static Font.footnote.getter(v69);
  v71 = swift_getKeyPath(&unk_100041850);
  sub_100012534((uint64_t)v19, (uint64_t)v21, &qword_100051B10);
  v72 = v137;
  v73 = (uint64_t *)&v21[*(int *)(v137 + 36)];
  *v73 = v71;
  v73[1] = v70;
  sub_100004EE0((uint64_t)v19, &qword_100051B10);
  v74 = sub_100032B38();
  v75 = v135;
  View.tracking(_:)(v72, v74, 1.4);
  v76 = sub_100004EE0((uint64_t)v21, &qword_100051B18);
  v77 = static Font.Weight.semibold.getter(v76);
  v151 = v72;
  v152 = v74;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v151, &opaque type descriptor for <<opaque return type of View.tracking(_:)>>, 1);
  v79 = v136;
  v80 = v140;
  View.fontWeight(_:)(*(_QWORD *)&v77, 0, v140, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v138 + 8))(v75, v80);
  v81 = swift_getKeyPath(&unk_100041880);
  v82 = v139;
  v83 = v141;
  (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v25, v79, v141);
  v84 = &v25[*(int *)(v133 + 36)];
  *(_QWORD *)v84 = v81;
  v84[8] = 1;
  (*(void (**)(char *, uint64_t))(v82 + 8))(v79, v83);
  v85 = swift_getKeyPath(&unk_1000418B0);
  v86 = v132;
  sub_100012534((uint64_t)v25, v132, &qword_100051B30);
  v87 = v86 + *(int *)(v134 + 36);
  *(_QWORD *)v87 = v85;
  *(_QWORD *)(v87 + 8) = 1;
  *(_BYTE *)(v87 + 16) = 0;
  sub_100004EE0((uint64_t)v25, &qword_100051B30);
  v88 = v142;
  sub_100004F98(v86, v142, &qword_100051B38);
  v89 = type metadata accessor for StatusAndNameViewVertical(0);
  v90 = (uint64_t)v129;
  PersonStatusSet.text.getter(&v149, v89);
  if (v150)
  {
    sub_100004F70(&v149, (uint64_t)&v151);
    v91 = v120;
    v92 = sub_10001BDD4(v120);
    v93 = ContentSizeCategory.isAccessibilityCategory.getter(v92);
    v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v121 + 8))(v91, v122);
    v95 = (uint64_t)v145;
    if ((v93 & 1) == 0)
    {
      v96 = static HorizontalAlignment.center.getter(v94);
      v97 = (uint64_t)v119;
      *v119 = v96;
      *(_QWORD *)(v97 + 8) = 0x4004000000000000;
      *(_BYTE *)(v97 + 16) = 0;
      v98 = sub_100003FC4(&qword_100051B68);
      v99 = sub_100031E88(v90, &v151, (double *)(v97 + *(int *)(v98 + 44)));
      v100 = static Edge.Set.bottom.getter(v99);
      v101 = EdgeInsets.init(_all:)(1.0);
      v103 = v102;
      v105 = v104;
      v107 = v106;
      v108 = v118;
      sub_100012534(v97, v118, &qword_100051AE0);
      v109 = v146;
      v110 = v108 + *(int *)(v146 + 36);
      *(_BYTE *)v110 = v100;
      *(double *)(v110 + 8) = v101;
      *(_QWORD *)(v110 + 16) = v103;
      *(_QWORD *)(v110 + 24) = v105;
      *(_QWORD *)(v110 + 32) = v107;
      *(_BYTE *)(v110 + 40) = 0;
      sub_100004EE0(v97, &qword_100051AE0);
      sub_100004F98(v108, v95, &qword_100051AE8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v144 + 56))(v95, 0, 1, v109);
      sub_10000D160(&v151);
      goto LABEL_10;
    }
    sub_10000D160(&v151);
  }
  else
  {
    sub_100004EE0((uint64_t)&v149, &qword_100051208);
    v95 = (uint64_t)v145;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v144 + 56))(v95, 1, 1, v146);
LABEL_10:
  v111 = v143;
  sub_100012534(v88, v143, &qword_100051B38);
  v112 = v147;
  sub_100012534(v95, v147, &qword_100051AF0);
  v113 = v148;
  sub_100012534(v111, v148, &qword_100051B38);
  v114 = sub_100003FC4(&qword_100051B60);
  sub_100012534(v112, v113 + *(int *)(v114 + 48), &qword_100051AF0);
  sub_100004EE0(v95, &qword_100051AF0);
  sub_100004EE0(v88, &qword_100051B38);
  sub_100004EE0(v112, &qword_100051AF0);
  return sub_100004EE0(v111, &qword_100051B38);
}

uint64_t sub_100031E88@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, double *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  double v73;
  unint64_t v74;
  char *v75;
  uint64_t OpaqueTypeConformance2;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  unsigned int *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t KeyPath;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  double v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;

  v124 = a2;
  v126 = type metadata accessor for ColorScheme(0);
  v150 = *(_QWORD *)(v126 - 8);
  v5 = __chkstk_darwin(v126);
  v149 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v148 = (uint64_t)&v119 - v7;
  v8 = type metadata accessor for BlendMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v151 = (char *)&v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Text.WritingMode(0);
  v131 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v129 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_100003FC4(&qword_100051AF8);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v132 = (char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100003FC4(&qword_100051B70);
  __chkstk_darwin(v130);
  v15 = (char *)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100003FC4(&qword_100051B78);
  __chkstk_darwin(v125);
  v17 = (char *)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100003FC4(&qword_100051B80);
  v137 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v136 = (char *)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100003FC4(&qword_100051B88);
  v145 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v143 = (char *)&v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100003FC4(&qword_100051B90);
  __chkstk_darwin(v139);
  v133 = (char *)&v119 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100003FC4(&qword_100051B98);
  __chkstk_darwin(v141);
  v144 = (uint64_t)&v119 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_100003FC4(&qword_100051BA0);
  v22 = __chkstk_darwin(v142);
  v160 = (uint64_t)&v119 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v140 = (uint64_t)&v119 - v25;
  __chkstk_darwin(v24);
  v159 = (uint64_t)&v119 - v26;
  v27 = type metadata accessor for Image.ResizingMode(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v119 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for StatusAndNameViewVertical(0);
  v147 = a1;
  PersonStatusSet.badge.getter(&v170);
  v153 = v8;
  v152 = v9;
  v128 = a3;
  if (!v172)
  {
    sub_100004EE0((uint64_t)&v170, &qword_100051258);
LABEL_7:
    v158 = 0;
    v123 = 0;
    v157 = 0;
    v156 = 0;
    v155 = 0;
    v164 = 0;
    v35 = 0;
    goto LABEL_8;
  }
  sub_100004F70(&v170, (uint64_t)&v165);
  v31 = v168;
  v32 = v169;
  sub_10001190C(&v165, v168);
  if ((dispatch thunk of BadgeStatus.useIconAsTextPrefix.getter(v31, v32) & 1) == 0)
  {
    sub_10000D160(&v165);
    goto LABEL_7;
  }
  v33 = v168;
  v34 = v169;
  sub_10001190C(&v165, v168);
  v35 = dispatch thunk of BadgeStatus.icon.getter(v33, v34);
  if (v35)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v30, enum case for Image.ResizingMode.stretch(_:), v27);
    v158 = Image.resizable(capInsets:resizingMode:)(v30, v35, 0.0, 0.0, 0.0, 0.0);
    v36 = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    v37 = static Alignment.center.getter(v36);
    _FrameLayout.init(width:height:alignment:)(&v170, 0x4020000000000000, 0, 0x4020000000000000, 0, v37, v38);
    v39 = v169;
    v123 = v170;
    v157 = BYTE8(v170);
    v156 = v171;
    v155 = v172;
    v164 = v173;
    v40 = v35;
    v35 = v174;
    v41 = v168;
    sub_10001190C(&v165, v168);
    v163 = dispatch thunk of BadgeStatus.iconForeground.getter(v41, v39);
    KeyPath = swift_getKeyPath(&unk_100041820);
    v42 = static Edge.Set.leading.getter(KeyPath);
    v43 = EdgeInsets.init(_all:)(1.0);
    v45 = v44;
    v47 = v46;
    v49 = v48;
    swift_release(v40);
    v162 = v43;
    v122 = v45;
    v121 = v47;
    v120 = v49;
    v161 = v42;
    sub_10000D160(&v165);
    goto LABEL_9;
  }
  sub_10000D160(&v165);
  v158 = 0;
  v123 = 0;
  v157 = 0;
  v156 = 0;
  v155 = 0;
  v164 = 0;
LABEL_8:
  KeyPath = 0;
  v162 = 0.0;
  v163 = 0;
  v161 = 0;
  v122 = 0;
  v121 = 0;
  v120 = 0;
LABEL_9:
  v50 = v126;
  v51 = v125;
  v52 = v11;
  v53 = v124[3];
  v54 = v124[4];
  sub_10001190C(v124, v53);
  v165 = dispatch thunk of TextStatus.localizedDisplayString.getter(v53, v54);
  v166 = v55;
  v56 = sub_10000C644();
  v165 = Text.init<A>(_:)(&v165, &type metadata for String, v56);
  v166 = v57;
  v167 = v58 & 1;
  v168 = v59;
  v60 = v129;
  static Text.WritingMode.verticalRightToLeft.getter();
  v61 = v132;
  View.writingMode(_:)(v60, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v131 + 8))(v60, v52);
  sub_1000206A4(v165, v166, v167);
  v62 = swift_bridgeObjectRelease(v168);
  v63 = static Font.caption2.getter(v62);
  v64 = swift_getKeyPath(&unk_100041850);
  v65 = v134;
  v66 = v135;
  (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v15, v61, v135);
  v67 = (uint64_t *)&v15[*(int *)(v130 + 36)];
  *v67 = v64;
  v67[1] = v63;
  v68 = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v61, v66);
  v69 = static Color.secondary.getter(v68);
  v70 = swift_getKeyPath(&unk_100041820);
  sub_100012534((uint64_t)v15, (uint64_t)v17, &qword_100051B70);
  v71 = (uint64_t *)&v17[*(int *)(v51 + 36)];
  *v71 = v70;
  v71[1] = v69;
  v72 = sub_100004EE0((uint64_t)v15, &qword_100051B70);
  v73 = static Font.Weight.regular.getter(v72);
  v74 = sub_100032CC4();
  v75 = v136;
  View.fontWeight(_:)(*(_QWORD *)&v73, 0, v51, v74);
  sub_100004EE0((uint64_t)v17, &qword_100051B78);
  v165 = v51;
  v166 = v74;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v165, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
  v77 = v143;
  v78 = v138;
  View.tracking(_:)(v138, OpaqueTypeConformance2, 0.2);
  (*(void (**)(char *, uint64_t))(v137 + 8))(v75, v78);
  v79 = v148;
  sub_10001C7D4(v148);
  v80 = v150;
  v81 = v149;
  (*(void (**)(char *, _QWORD, uint64_t))(v150 + 104))(v149, enum case for ColorScheme.dark(_:), v50);
  LOBYTE(v73) = static ColorScheme.== infix(_:_:)(v79, v81);
  v82 = *(void (**)(char *, uint64_t))(v80 + 8);
  v82(v81, v50);
  v82((char *)v79, v50);
  v83 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
  v84 = v152;
  if ((LOBYTE(v73) & 1) == 0)
    v83 = (unsigned int *)&enum case for BlendMode.plusDarker(_:);
  v85 = v151;
  v86 = v153;
  (*(void (**)(char *, _QWORD, uint64_t))(v152 + 104))(v151, *v83, v153);
  v87 = (uint64_t)v133;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(&v133[*(int *)(v139 + 36)], v85, v86);
  v88 = v145;
  v89 = v146;
  (*(void (**)(uint64_t, char *, uint64_t))(v145 + 16))(v87, v77, v146);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v86);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v77, v89);
  v90 = swift_getKeyPath(&unk_1000418B0);
  v91 = v144;
  sub_100012534(v87, v144, &qword_100051B90);
  v92 = v91 + *(int *)(v141 + 36);
  *(_QWORD *)v92 = v90;
  *(_QWORD *)(v92 + 8) = 1;
  *(_BYTE *)(v92 + 16) = 0;
  sub_100004EE0(v87, &qword_100051B90);
  v93 = swift_getKeyPath(&unk_100041880);
  v94 = v140;
  sub_100012534(v91, v140, &qword_100051B98);
  v95 = v94 + *(int *)(v142 + 36);
  *(_QWORD *)v95 = v93;
  *(_BYTE *)(v95 + 8) = 1;
  sub_100004EE0(v91, &qword_100051B98);
  v96 = v159;
  sub_100004F98(v94, v159, &qword_100051BA0);
  v97 = v96;
  v98 = v160;
  sub_100012534(v97, v160, &qword_100051BA0);
  v99 = v128;
  v100 = v123;
  *(_QWORD *)v128 = v158;
  *((_QWORD *)v99 + 1) = v100;
  v101 = v156;
  *((_QWORD *)v99 + 2) = v157;
  *((_QWORD *)v99 + 3) = v101;
  v102 = v164;
  *((_QWORD *)v99 + 4) = v155;
  *((_QWORD *)v99 + 5) = v102;
  v164 = v102;
  v126 = v35;
  v103 = KeyPath;
  *((_QWORD *)v99 + 6) = v35;
  *((_QWORD *)v99 + 7) = v103;
  v104 = v162;
  v105 = v163;
  v106 = v161;
  *((_QWORD *)v99 + 8) = v163;
  *((_QWORD *)v99 + 9) = v106;
  v161 = v106;
  v107 = v122;
  v99[10] = v104;
  *((_QWORD *)v99 + 11) = v107;
  v108 = v120;
  *((_QWORD *)v99 + 12) = v121;
  *((_QWORD *)v99 + 13) = v108;
  *((_BYTE *)v99 + 112) = 0;
  v109 = sub_100003FC4(&qword_100051BB8);
  sub_100012534(v98, (uint64_t)v99 + *(int *)(v109 + 48), &qword_100051BA0);
  v118 = v105;
  v110 = v158;
  v111 = v157;
  v112 = v156;
  v113 = v155;
  v114 = v102;
  v115 = v126;
  v116 = KeyPath;
  sub_100032E14(v158, v100, v157, v156, v155, v114, v126, KeyPath, v118);
  sub_100004EE0(v159, &qword_100051BA0);
  sub_100004EE0(v160, &qword_100051BA0);
  return sub_100032E50(v110, v100, v111, v112, v113, v164, v115, v116, v163);
}

uint64_t sub_100032AE0@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  uint64_t v3;

  *(_QWORD *)a1 = static VerticalAlignment.bottom.getter();
  *(_QWORD *)(a1 + 8) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  v3 = sub_100003FC4(&qword_100051AD8);
  return sub_1000313D4(v1, a1 + *(int *)(v3 + 44));
}

unint64_t sub_100032B38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051B40;
  if (!qword_100051B40)
  {
    v1 = sub_100004004(&qword_100051B18);
    sub_100032BBC();
    sub_100005084(&qword_100051288, &qword_100051290, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051B40);
  }
  return result;
}

unint64_t sub_100032BBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051B48;
  if (!qword_100051B48)
  {
    v1 = sub_100004004(&qword_100051B10);
    sub_100032C28();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051B48);
  }
  return result;
}

unint64_t sub_100032C28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051B50;
  if (!qword_100051B50)
  {
    v1 = sub_100004004(&qword_100051B08);
    sub_100032D68(&qword_100051B58, &qword_100051B00, &qword_100051298, &qword_1000512A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051B50);
  }
  return result;
}

unint64_t sub_100032CC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051BA8;
  if (!qword_100051BA8)
  {
    v1 = sub_100004004(&qword_100051B78);
    sub_100032D68(&qword_100051BB0, &qword_100051B70, &qword_100051288, &qword_100051290);
    sub_100005084(&qword_100051298, &qword_1000512A0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051BA8);
  }
  return result;
}

uint64_t sub_100032D68(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_100004004(a2);
    v9[0] = &type metadata for Text;
    v9[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v9, &opaque type descriptor for <<opaque return type of View.writingMode(_:)>>, 1);
    sub_100005084(a3, a4, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100032E14(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;

  if (result)
  {
    v10 = result;
    swift_retain(a9);
    swift_retain(v10);
    return swift_retain(a8);
  }
  return result;
}

uint64_t sub_100032E50(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (result)
  {
    swift_release(result);
    swift_release(a8);
    return swift_release(a9);
  }
  return result;
}

uint64_t sub_100032E88()
{
  return sub_100005084(&qword_100051BC0, &qword_100051BC8, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t *sub_100032EB4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for PersonStatusSet(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    v11 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = v10;
    v15 = sub_100003FC4(&qword_1000506F8);
    if (swift_getEnumCaseMultiPayload(v13, v15) == 1)
    {
      v16 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v12, v13, v16);
    }
    else
    {
      v18 = *v13;
      *v12 = *v13;
      swift_retain(v18);
    }
    swift_storeEnumTagMultiPayload(v12);
  }
  return a1;
}

uint64_t sub_100032FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

  v5 = (_QWORD *)(a1 + *(int *)(a2 + 32));
  v6 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v5, v6) != 1)
    return swift_release(*v5);
  v7 = type metadata accessor for ContentSizeCategory(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
}

uint64_t sub_100033064(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v10 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v13 = v9;
  v14 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v12, v14) == 1)
  {
    v15 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v11, v12, v15);
  }
  else
  {
    v16 = *v12;
    *v11 = *v12;
    swift_retain(v16);
  }
  swift_storeEnumTagMultiPayload(v11);
  return a1;
}

uint64_t sub_100033148(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a1 + v7);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = v9;

  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  if (a1 != a2)
  {
    v11 = a3[8];
    v12 = (uint64_t *)(a1 + v11);
    v13 = (uint64_t *)(a2 + v11);
    sub_100004EE0(a1 + v11, &qword_1000506F8);
    v14 = sub_100003FC4(&qword_1000506F8);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    }
    else
    {
      v16 = *v13;
      *v12 = *v13;
      swift_retain(v16);
    }
    swift_storeEnumTagMultiPayload(v12);
  }
  return a1;
}

uint64_t sub_100033254(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100033338(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  if (a1 != a2)
  {
    v10 = a3[8];
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_100004EE0(a1 + v10, &qword_1000506F8);
    v13 = sub_100003FC4(&qword_1000506F8);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100033440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003344C);
}

uint64_t sub_10003344C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for PersonStatusSet(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = sub_100003FC4(&qword_100050828);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v11);
  }
}

uint64_t sub_100033504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100033510);
}

uint64_t sub_100033510(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for PersonStatusSet(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
      return result;
    }
    v10 = sub_100003FC4(&qword_100050828);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for StatusBadgeView(uint64_t a1)
{
  uint64_t result;

  result = qword_100051C28;
  if (!qword_100051C28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StatusBadgeView);
  return result;
}

void sub_1000335F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v2 = type metadata accessor for PersonStatusSet(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\b";
    v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_100033690(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

void sub_100033690(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100050898)
  {
    v2 = type metadata accessor for ContentSizeCategory(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100050898);
  }
}

uint64_t sub_1000336E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000427DC, 1);
}

uint64_t sub_1000336F4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  void *v14;
  uint64_t v15;
  Swift::String v16;
  unint64_t v17;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;

  v2 = (_QWORD *)v1;
  v4 = type metadata accessor for StatusType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = 0;
  v21 = 0xE000000000000000;
  v19 = *(_OWORD *)(v1 + 40);
  type metadata accessor for CGSize(0);
  _print_unlocked<A, B>(_:_:)(&v19, &v20, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v10 = *(_QWORD *)(v1 + 24);
  v9 = *(_QWORD *)(v1 + 32);
  sub_10001190C(v2, v10);
  dispatch thunk of PersonStatus.statusType.getter(v10, *(_QWORD *)(v9 + 8));
  v11 = sub_1000359C4(&qword_100051DA0, (uint64_t)&protocol conformance descriptor for StatusType);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v11);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v15 = v2[7];
  v14 = (void *)v2[8];
  swift_bridgeObjectRetain(v14);
  v16._countAndFlagsBits = v15;
  v16._object = v14;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v14);
  v17 = v21;
  String.hash(into:)(a1, v20, v21);
  return swift_bridgeObjectRelease(v17);
}

Swift::Int sub_100033848()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000336F4((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100033888(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000336F4((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_1000338C4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 64);
  *a1 = *(_QWORD *)(v1 + 56);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000338D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, double a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>, double a10@<D6>, double a11@<D7>)
{
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  void *v45;
  CTFontRef v46;
  uint64_t result;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  double v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  double v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double *v102;
  uint64_t v103;
  double v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  double *v113;
  uint64_t v114;
  double v115;
  double v116;
  uint64_t v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  double v133;
  _OWORD v134[3];

  v118 = a3;
  v117 = a2;
  v132 = a4;
  v19 = sub_100003FC4(&qword_100051CB8);
  __chkstk_darwin(v19);
  v21 = (double *)((char *)&v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v119 = sub_100003FC4(&qword_100051CC0);
  __chkstk_darwin(v119);
  v23 = (char *)&v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_100003FC4(&qword_100051CC8);
  __chkstk_darwin(v120);
  v123 = (uint64_t)&v115 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100003FC4(&qword_100051CD0);
  __chkstk_darwin(v121);
  v125 = (uint64_t)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100003FC4(&qword_100051CD8);
  __chkstk_darwin(v122);
  v126 = (uint64_t)&v115 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100003FC4(&qword_100051CE0);
  __chkstk_darwin(v124);
  v130 = (uint64_t)&v115 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100003FC4(&qword_100051CE8);
  __chkstk_darwin(v127);
  v129 = (uint64_t)&v115 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100003FC4(&qword_100051CF0);
  __chkstk_darwin(v131);
  v128 = (uint64_t)&v115 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for ContentSizeCategory(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v115 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v36 = (char *)&v115 - v35;
  v37 = a1[3];
  v38 = a1[4];
  sub_10001190C(a1, v37);
  v39 = dispatch thunk of BadgeStatus.icon.getter(v37, v38);
  if (v39)
  {
    v40 = v39;
    v41 = type metadata accessor for StatusBadgeView(0);
    sub_10001BDD4((uint64_t)v36);
    (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(v34, enum case for ContentSizeCategory.accessibilityLarge(_:), v30);
    v42 = sub_100011508((uint64_t)v36, (uint64_t)v34);
    v43 = *(void (**)(char *, uint64_t))(v31 + 8);
    v43(v34, v30);
    v43(v36, v30);
    v116 = a9;
    v115 = a8;
    if (v42)
    {
      v44 = *(_QWORD *)&v133;
      v45 = *(void **)(*(_QWORD *)&v133 + *(int *)(v41 + 20));
      if (v45)
      {
        v46 = *(CTFontRef *)(*(_QWORD *)&v133 + *(int *)(v41 + 20));
      }
      else
      {
        v46 = sub_1000355F0();
        v45 = 0;
      }
      v49 = a7;
      v53 = v45;
      v52 = Font.init(_:)(v46);
    }
    else
    {
      v49 = a7;
      v50 = a1[3];
      v51 = a1[4];
      sub_10001190C(a1, v50);
      v52 = dispatch thunk of BadgeStatus.iconFontSize.getter(v50, v51);
      v44 = *(_QWORD *)&v133;
    }
    v54 = v118;
    *(_QWORD *)v21 = v117;
    v21[1] = v54;
    v55 = sub_100003FC4(&qword_100051CF8);
    v56 = sub_100034058(a1, v44, v40, v52, (uint64_t)v21 + *(int *)(v55 + 44), a10, a11);
    v57 = static Edge.Set.top.getter(v56);
    v58 = EdgeInsets.init(_all:)(a5);
    v60 = v59;
    v133 = a11;
    v62 = v61;
    v118 = a10;
    v64 = v63;
    sub_100012534((uint64_t)v21, (uint64_t)v23, &qword_100051CB8);
    v65 = &v23[*(int *)(v119 + 36)];
    *v65 = v57;
    *((double *)v65 + 1) = v58;
    *((_QWORD *)v65 + 2) = v60;
    *((_QWORD *)v65 + 3) = v62;
    *((_QWORD *)v65 + 4) = v64;
    v65[40] = 0;
    v66 = sub_100004EE0((uint64_t)v21, &qword_100051CB8);
    v67 = static Edge.Set.bottom.getter(v66);
    v68 = EdgeInsets.init(_all:)(v49);
    v70 = v69;
    v72 = v71;
    v74 = v73;
    v75 = v123;
    sub_100012534((uint64_t)v23, v123, &qword_100051CC0);
    v76 = v75 + *(int *)(v120 + 36);
    *(_BYTE *)v76 = v67;
    *(double *)(v76 + 8) = v68;
    *(_QWORD *)(v76 + 16) = v70;
    *(_QWORD *)(v76 + 24) = v72;
    *(_QWORD *)(v76 + 32) = v74;
    *(_BYTE *)(v76 + 40) = 0;
    v77 = sub_100004EE0((uint64_t)v23, &qword_100051CC0);
    v78 = static Edge.Set.leading.getter(v77);
    v79 = a6;
    v80 = EdgeInsets.init(_all:)(a6);
    v82 = v81;
    v84 = v83;
    v86 = v85;
    v87 = v125;
    sub_100012534(v75, v125, &qword_100051CC8);
    v88 = v87 + *(int *)(v121 + 36);
    *(_BYTE *)v88 = v78;
    *(double *)(v88 + 8) = v80;
    *(_QWORD *)(v88 + 16) = v82;
    *(_QWORD *)(v88 + 24) = v84;
    *(_QWORD *)(v88 + 32) = v86;
    *(_BYTE *)(v88 + 40) = 0;
    v89 = sub_100004EE0(v75, &qword_100051CC8);
    v90 = static Edge.Set.trailing.getter(v89);
    v91 = v115;
    v92 = EdgeInsets.init(_all:)(v115);
    v94 = v93;
    v96 = v95;
    v98 = v97;
    v99 = v126;
    sub_100012534(v87, v126, &qword_100051CD0);
    v100 = v99 + *(int *)(v122 + 36);
    *(_BYTE *)v100 = v90;
    *(double *)(v100 + 8) = v92;
    *(_QWORD *)(v100 + 16) = v94;
    *(_QWORD *)(v100 + 24) = v96;
    *(_QWORD *)(v100 + 32) = v98;
    *(_BYTE *)(v100 + 40) = 0;
    sub_100004EE0(v87, &qword_100051CD0);
    v101 = v130;
    sub_100012534(v99, v130, &qword_100051CD8);
    v102 = (double *)(v101 + *(int *)(v124 + 36));
    *v102 = (v91 - v79) * 0.5;
    v102[1] = (v49 - a5) * 0.5;
    v103 = sub_100004EE0(v99, &qword_100051CD8);
    v104 = v118;
    v105 = v133;
    v106 = static Alignment.center.getter(v103);
    _FrameLayout.init(width:height:alignment:)(v134, *(_QWORD *)&v104, 0, *(_QWORD *)&v105, 0, v106, v107);
    v108 = v129;
    sub_100012534(v101, v129, &qword_100051CE0);
    v109 = (_OWORD *)(v108 + *(int *)(v127 + 36));
    v110 = v134[1];
    *v109 = v134[0];
    v109[1] = v110;
    v109[2] = v134[2];
    sub_100004EE0(v101, &qword_100051CE0);
    v111 = v128;
    sub_100012534(v108, v128, &qword_100051CE8);
    v112 = v131;
    v113 = (double *)(v111 + *(int *)(v131 + 36));
    *v113 = v116;
    v113[1] = 0.0;
    sub_100004EE0(v108, &qword_100051CE8);
    v114 = sub_10002F524(&qword_100051D00, &qword_100051CF0, (void (*)(void))sub_1000354B8);
    v48 = AnyView.init<A>(_:)(v111, v112, v114);
    swift_release(v52);
    result = swift_release(v40);
  }
  else
  {
    result = AnyView.init<A>(_:)(0, &type metadata for EmptyView, &protocol witness table for EmptyView);
    v48 = result;
  }
  *v132 = v48;
  return result;
}

uint64_t sub_100034058@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  uint64_t KeyPath;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 v105;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint64_t v116;
  unsigned __int8 v117;
  uint64_t v118;
  uint64_t v119;

  v103 = a4;
  v100 = a3;
  v12 = type metadata accessor for WidgetAccentModifier(0);
  __chkstk_darwin(v12);
  v96 = (uint64_t *)((char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_100003FC4(&qword_100051D40);
  __chkstk_darwin(v14);
  v16 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100003FC4(&qword_100051D48);
  v95 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v86 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100003FC4(&qword_100051D50);
  __chkstk_darwin(v87);
  v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100003FC4(&qword_100051D58);
  __chkstk_darwin(v88);
  v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100003FC4(&qword_100051D60);
  __chkstk_darwin(v98);
  v77 = (uint64_t)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100003FC4(&qword_100051D68);
  v23 = __chkstk_darwin(v102);
  v25 = (char *)&v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v101 = (uint64_t)&v77 - v26;
  v28 = a1[3];
  v27 = a1[4];
  sub_10001190C(a1, v28);
  v99 = dispatch thunk of BadgeStatus.iconShadow.getter(v28, v27);
  v29 = type metadata accessor for StatusBadgeView(0);
  v30 = *(double *)(a2 + *(int *)(v29 + 24));
  v31 = a6 - v30;
  v32 = a7 - v30;
  v33 = static Alignment.center.getter(v29);
  _FrameLayout.init(width:height:alignment:)(&v104, *(_QWORD *)&v31, 0, *(_QWORD *)&v32, 0, v33, v34);
  v94 = v104;
  v93 = v105;
  v92 = v106;
  v91 = v107;
  v90 = v108;
  v89 = v109;
  v35 = *(_QWORD *)(a2 + *(int *)(v29 + 28));
  v36 = a1[3];
  v37 = a1[4];
  sub_10001190C(a1, v36);
  v38 = dispatch thunk of BadgeStatus.iconBackground.getter(v36, v37);
  v39 = Gradient.init(colors:)(v38);
  v40 = static UnitPoint.bottom.getter();
  v42 = v41;
  v43 = static UnitPoint.top.getter();
  v45 = LinearGradient.init(gradient:startPoint:endPoint:)(&v110, v39, v40, v42, v43, v44);
  v84 = v110;
  v85 = v111;
  v47 = v112;
  v46 = v113;
  v48 = static Alignment.center.getter(v45);
  v50 = _FrameLayout.init(width:height:alignment:)(&v114, *(_QWORD *)&a6, 0, *(_QWORD *)&a7, 0, v48, v49);
  v83 = v114;
  v82 = v115;
  v81 = v116;
  v80 = v117;
  v79 = v118;
  v78 = v119;
  static WidgetAccentedRenderingMode.fullColor.getter(v50);
  v51 = type metadata accessor for WidgetAccentedRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v16, 0, 1, v51);
  v52 = v86;
  Image.widgetAccentedRenderingMode(_:)(v16, v100);
  sub_100004EE0((uint64_t)v16, &qword_100051D40);
  KeyPath = swift_getKeyPath(&unk_100041968);
  v54 = (uint64_t)v96;
  *v96 = KeyPath;
  sub_100003FC4(&qword_1000506F0);
  swift_storeEnumTagMultiPayload(v54);
  sub_10000EE60(v54, (uint64_t)&v19[*(int *)(v87 + 36)], type metadata accessor for WidgetAccentModifier);
  (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v19, v52, v97);
  v55 = swift_getKeyPath(&unk_100041998);
  sub_100012534((uint64_t)v19, (uint64_t)v21, &qword_100051D50);
  v56 = (uint64_t *)&v21[*(int *)(v88 + 36)];
  v57 = v103;
  *v56 = v55;
  v56[1] = v57;
  swift_retain(v57);
  sub_100004EE0((uint64_t)v19, &qword_100051D50);
  v58 = a1[3];
  v59 = a1[4];
  sub_10001190C(a1, v58);
  v60 = dispatch thunk of BadgeStatus.iconForeground.getter(v58, v59);
  v61 = swift_getKeyPath(&unk_1000419C8);
  v62 = v77;
  sub_100012534((uint64_t)v21, v77, &qword_100051D58);
  v63 = (uint64_t *)(v62 + *(int *)(v98 + 36));
  *v63 = v61;
  v63[1] = v60;
  sub_100004EE0((uint64_t)v21, &qword_100051D58);
  v64 = a1[3];
  v65 = a1[4];
  sub_10001190C(a1, v64);
  v66 = dispatch thunk of BadgeStatus.iconOffset.getter(v64, v65);
  v68 = v67;
  sub_100012534(v62, (uint64_t)v25, &qword_100051D60);
  v69 = (double *)&v25[*(int *)(v102 + 36)];
  *v69 = v66;
  *((_QWORD *)v69 + 1) = v68;
  sub_100004EE0(v62, &qword_100051D60);
  v70 = v101;
  sub_100004F98((uint64_t)v25, v101, &qword_100051D68);
  sub_100012534(v70, (uint64_t)v25, &qword_100051D68);
  v71 = v99;
  *(_QWORD *)a5 = v99;
  *(_WORD *)(a5 + 8) = 256;
  *(_QWORD *)(a5 + 16) = 0x4010000000000000;
  *(_BYTE *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = 0x3FE3333333333333;
  *(_QWORD *)(a5 + 40) = v94;
  *(_BYTE *)(a5 + 48) = v93;
  *(_QWORD *)(a5 + 56) = v92;
  *(_BYTE *)(a5 + 64) = v91;
  v72 = v89;
  *(_QWORD *)(a5 + 72) = v90;
  *(_QWORD *)(a5 + 80) = v72;
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 96) = v35;
  v73 = v84;
  *(_QWORD *)(a5 + 104) = v84;
  *(_OWORD *)(a5 + 112) = v85;
  *(_QWORD *)(a5 + 128) = v47;
  *(_QWORD *)(a5 + 136) = v46;
  *(_WORD *)(a5 + 144) = 256;
  *(_QWORD *)(a5 + 152) = v83;
  *(_BYTE *)(a5 + 160) = v82;
  *(_QWORD *)(a5 + 168) = v81;
  *(_BYTE *)(a5 + 176) = v80;
  v74 = v78;
  *(_QWORD *)(a5 + 184) = v79;
  *(_QWORD *)(a5 + 192) = v74;
  v75 = sub_100003FC4(&qword_100051D70);
  sub_100012534((uint64_t)v25, a5 + *(int *)(v75 + 64), &qword_100051D68);
  swift_retain(v71);
  swift_bridgeObjectRetain(v73);
  sub_100004EE0(v70, &qword_100051D68);
  sub_100004EE0((uint64_t)v25, &qword_100051D68);
  swift_release(v71);
  return swift_bridgeObjectRelease(v73);
}

uint64_t sub_1000347C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83[2];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  _OWORD v89[3];
  void *v90;

  v2 = v1;
  v69 = a1;
  v3 = sub_100003FC4(&qword_100051C70);
  __chkstk_darwin(v3);
  v66 = (uint64_t *)((char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100003FC4(&qword_100051C78);
  v67 = *(_QWORD *)(v5 - 8);
  v68 = v5;
  __chkstk_darwin(v5);
  v65 = (uint64_t)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v74 = *(_QWORD *)(v7 - 8);
  v75 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ContentSizeCategory(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = PersonStatusSet.additionalBadges.getter(v12);
  v77 = *(_QWORD *)(v15 + 16);
  swift_bridgeObjectRelease(v15);
  type metadata accessor for StatusBadgeView(0);
  v16 = sub_10001BDD4((uint64_t)v14);
  v17 = ContentSizeCategory.isAccessibilityCategory.getter(v16);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  if ((v17 & 1) != 0)
    v19 = static PeopleWidgetConstants.statusBadgeAccessibilitySize.getter(v18);
  else
    v20 = static PeopleWidgetConstants.statusBadgeSize.getter(v18);
  v22 = v20;
  v23 = v21;
  v24 = PersonStatusSet.additionalBadges.getter(v19);
  v25 = *(_QWORD *)(v24 + 16);
  v26 = swift_bridgeObjectRelease(v24);
  if (v25)
    v27 = static Alignment.top.getter(v26);
  else
    v27 = static Alignment.center.getter(v26);
  v63 = v28;
  v64 = v27;
  v72 = v2;
  v29 = PersonStatusSet.additionalBadges.getter(v27);
  v71 = &v62;
  v90 = &_swiftEmptyArrayStorage;
  sub_100024DE0(0, 0, 0);
  v30 = (uint64_t)v90;
  v31 = *(_QWORD *)(v29 + 16);
  swift_bridgeObjectRetain(v29);
  v70 = v29;
  if (v31)
  {
    v32 = 0;
    v76 = (uint64_t)&v84 + 8;
    v73 = (uint64_t)v89 + 8;
    v33 = v29 + 40 * v31 - 8;
    while (1)
    {
      sub_100011C0C(v33, (uint64_t)&v78 + 8);
      *(_QWORD *)&v84 = v32;
      sub_100004F70((__int128 *)((char *)&v78 + 8), v76);
      v89[0] = v84;
      v89[1] = v85;
      v89[2] = v86;
      if (__OFSUB__(v77, (_QWORD)v84))
        break;
      v34 = (double)(v77 - v84) * 6.0;
      v35 = sub_100011C0C(v73, (uint64_t)v83);
      v36 = UUID.init()(v35);
      v37 = UUID.uuidString.getter(v36);
      v39 = v38;
      (*(void (**)(char *, uint64_t))(v74 + 8))(v9, v75);
      *((_QWORD *)&v81 + 1) = v37;
      v82 = v39;
      sub_100004F70(v83, (uint64_t)&v78);
      *((double *)&v80 + 1) = v34;
      *(_QWORD *)&v81 = 0;
      v88 = v82;
      v84 = v78;
      v85 = v79;
      v86 = v80;
      v87 = v81;
      sub_100004EE0((uint64_t)v89, &qword_100051C80);
      v30 = (uint64_t)v90;
      if ((swift_isUniquelyReferenced_nonNull_native(v90) & 1) == 0)
      {
        sub_100024DE0(0, *(_QWORD *)(v30 + 16) + 1, 1);
        v30 = (uint64_t)v90;
      }
      v41 = *(_QWORD *)(v30 + 16);
      v40 = *(_QWORD *)(v30 + 24);
      if (v41 >= v40 >> 1)
      {
        sub_100024DE0(v40 > 1, v41 + 1, 1);
        v30 = (uint64_t)v90;
      }
      ++v32;
      *(_QWORD *)(v30 + 16) = v41 + 1;
      v42 = v30 + 72 * v41;
      *(_OWORD *)(v42 + 32) = v84;
      v43 = v85;
      v44 = v86;
      v45 = v87;
      *(_QWORD *)(v42 + 96) = v88;
      *(_OWORD *)(v42 + 64) = v44;
      *(_OWORD *)(v42 + 80) = v45;
      *(_OWORD *)(v42 + 48) = v43;
      v33 -= 40;
      if (v31 == v32)
        goto LABEL_17;
    }
    __break(1u);
  }
LABEL_17:
  swift_bridgeObjectRelease_n(v70, 2);
  v46 = v72;
  PersonStatusSet.badge.getter(&v84);
  if (*((_QWORD *)&v85 + 1))
  {
    sub_100004F70(&v84, (uint64_t)&v78);
    v47 = *((_QWORD *)&v79 + 1);
    v48 = v80;
    sub_10001190C(&v78, *((uint64_t *)&v79 + 1));
    v49 = dispatch thunk of BadgeStatus.icon.getter(v47, v48);
    swift_release(v49);
    if (v49)
    {
      v50 = (uint64_t)v66;
      v51 = v63;
      *v66 = v64;
      *(_QWORD *)(v50 + 8) = v51;
      v52 = sub_100003FC4(&qword_100051C88);
      sub_100034D14(v30, v46, &v78, (char *)(v50 + *(int *)(v52 + 44)), 0.0, 6.0, 20.0, 6.0, v22, v23);
      v53 = swift_release(v30);
      v54 = static Alignment.center.getter(v53);
      _FrameLayout.init(width:height:alignment:)(&v84, *(_QWORD *)&v22, 0, *(_QWORD *)&v23, 0, v54, v55);
      v56 = v65;
      sub_100012534(v50, v65, &qword_100051C70);
      v57 = v68;
      v58 = (_OWORD *)(v56 + *(int *)(v68 + 36));
      v59 = v85;
      *v58 = v84;
      v58[1] = v59;
      v58[2] = v86;
      sub_100004EE0(v50, &qword_100051C70);
      v60 = v69;
      sub_100004F98(v56, v69, &qword_100051C78);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56))(v60, 0, 1, v57);
      return sub_10000D160(&v78);
    }
    swift_release(v30);
    sub_10000D160(&v78);
  }
  else
  {
    swift_release(v30);
    sub_100004EE0((uint64_t)&v84, &qword_100051258);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v69, 1, 1, v68);
}

uint64_t sub_100034D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, char *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>, double a10@<D5>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  double *v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;

  v47 = a2;
  v48 = a3;
  v49 = a4;
  v18 = type metadata accessor for StatusBadgeView(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  __chkstk_darwin(v18);
  v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003FC4(&qword_100051C90);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v47 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v47 - v27;
  v50 = a1;
  sub_10003506C(a2, (uint64_t)v21);
  v29 = *(unsigned __int8 *)(v19 + 80);
  v30 = (v29 + 16) & ~v29;
  v31 = (v20 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v31 + 39) & 0xFFFFFFFFFFFFFFF8;
  v33 = swift_allocObject(&unk_10004E8A0, v32 + 16, v29 | 7);
  sub_10000EE60((uint64_t)v21, v33 + v30, type metadata accessor for StatusBadgeView);
  v34 = (double *)(v33 + v31);
  *v34 = a5;
  v34[1] = a6;
  v34[2] = a7;
  v34[3] = a8;
  v35 = (double *)(v33 + v32);
  *v35 = a9;
  v35[1] = a10;
  swift_bridgeObjectRetain(a1);
  v36 = sub_100003FC4(&qword_100051C98);
  v37 = sub_100005084(&qword_100051CA0, &qword_100051C98, (uint64_t)&protocol conformance descriptor for [A]);
  v38 = sub_10003520C();
  v39 = ForEach<>.init(_:content:)(&v50, sub_100035194, v33, v36, &type metadata for String, &type metadata for AnyView, v37, &protocol witness table for AnyView, v38);
  v40 = static Alignment.center.getter(v39);
  sub_1000338D0(v48, v40, v41, &v50, a5, a6, a7, a8, 0.0, a9, a10);
  v42 = v50;
  v43 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v43(v26, v28, v22);
  v44 = v49;
  v43(v49, v26, v22);
  *(_QWORD *)&v44[*(int *)(sub_100003FC4(&qword_100051CB0) + 48)] = v42;
  v45 = *(void (**)(char *, uint64_t))(v23 + 8);
  swift_retain(v42);
  v45(v28, v22);
  swift_release(v42);
  return ((uint64_t (*)(char *, uint64_t))v45)(v26, v22);
}

uint64_t sub_100034FB4@<X0>(double *a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  double v16;
  uint64_t v17;
  double v18;
  uint64_t result;
  uint64_t v20;

  v16 = a1[5];
  v17 = static Alignment.top.getter();
  result = sub_1000338D0(a1, v17, v18, &v20, a3, a4, a5, a6, v16, a7, a8);
  *a2 = v20;
  return result;
}

uint64_t sub_10003506C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StatusBadgeView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000350B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for StatusBadgeView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);

  v7 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 32));
  v8 = sub_100003FC4(&qword_1000506F8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_100035194@<X0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = type metadata accessor for StatusBadgeView(0);
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100034FB4(a1, a2, *(double *)(v2 + v6), *(double *)(v2 + v6 + 8), *(double *)(v2 + v6 + 16), *(double *)(v2 + v6 + 24), *(double *)(v2 + ((v6 + 39) & 0xFFFFFFFFFFFFFFF8)), *(double *)(v2 + ((v6 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
}

unint64_t sub_10003520C()
{
  unint64_t result;

  result = qword_100051CA8;
  if (!qword_100051CA8)
  {
    result = swift_getWitnessTable(&unk_100041A70, &type metadata for BadgeDefinition);
    atomic_store(result, (unint64_t *)&qword_100051CA8);
  }
  return result;
}

uint64_t sub_100035250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;

  v4 = type metadata accessor for StatusType(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v27 - v9;
  v11 = *(double *)(a1 + 40);
  v12 = *(double *)(a1 + 48);
  v13 = *(double *)(a2 + 40);
  v14 = *(double *)(a2 + 48);
  sub_100035940(a1, (uint64_t)v39);
  sub_100035940(a2, (uint64_t)v36);
  if (v11 != v13 || v12 != v14)
  {
    sub_100035998(v39);
    sub_100035998(v36);
    sub_100035940(a1, (uint64_t)&v32);
    sub_100035940(a2, (uint64_t)&v28);
LABEL_14:
    v25 = 0;
    goto LABEL_15;
  }
  v17 = v40;
  v16 = v41;
  sub_10001190C(v39, v40);
  dispatch thunk of PersonStatus.statusType.getter(v17, *(_QWORD *)(v16 + 8));
  v19 = v37;
  v18 = v38;
  sub_10001190C(v36, v37);
  dispatch thunk of PersonStatus.statusType.getter(v19, *(_QWORD *)(v18 + 8));
  v20 = sub_1000359C4(&qword_100051DA8, (uint64_t)&protocol conformance descriptor for StatusType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v32, v4, v20);
  dispatch thunk of RawRepresentable.rawValue.getter(&v28, v4, v20);
  v21 = v33;
  v22 = v29;
  if (v32 == v28 && v33 == v29)
  {
    v23 = 1;
    v22 = v33;
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v22);
  v24 = *(void (**)(char *, uint64_t))(v5 + 8);
  v24(v8, v4);
  v24(v10, v4);
  sub_100035998(v39);
  sub_100035998(v36);
  sub_100035940(a1, (uint64_t)&v32);
  sub_100035940(a2, (uint64_t)&v28);
  if ((v23 & 1) == 0)
    goto LABEL_14;
  if (v34 == v30 && v35 == v31)
    v25 = 1;
  else
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_15:
  sub_100035998(&v32);
  sub_100035998(&v28);
  return v25 & 1;
}

uint64_t sub_1000354B8()
{
  return sub_10002F524(&qword_100051D08, &qword_100051CE8, (void (*)(void))sub_1000354DC);
}

uint64_t sub_1000354DC()
{
  return sub_10002F524(&qword_100051D10, &qword_100051CE0, (void (*)(void))sub_100035500);
}

uint64_t sub_100035500()
{
  return sub_10002F524(&qword_100051D18, &qword_100051CD8, (void (*)(void))sub_100035524);
}

uint64_t sub_100035524()
{
  return sub_10002F524(&qword_100051D20, &qword_100051CD0, (void (*)(void))sub_100035548);
}

uint64_t sub_100035548()
{
  return sub_10002F524(&qword_100051D28, &qword_100051CC8, (void (*)(void))sub_10003556C);
}

unint64_t sub_10003556C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051D30;
  if (!qword_100051D30)
  {
    v1 = sub_100004004(&qword_100051CC0);
    sub_100005084(&qword_100051D38, &qword_100051CB8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051D30);
  }
  return result;
}

CTFontRef sub_1000355F0()
{
  return CTFontCreateUIFontForLanguage(kCTFontUIFontSystem, 25.0, 0);
}

uint64_t destroy for BadgeDefinition(_QWORD *a1)
{
  sub_10000D160(a1);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for BadgeDefinition(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for BadgeDefinition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10000D260(a1, a2);
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  v4 = a2[8];
  v5 = a1[8];
  a1[8] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

__n128 initializeWithTake for BadgeDefinition(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for BadgeDefinition(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  sub_10000D160((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for BadgeDefinition(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BadgeDefinition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BadgeDefinition()
{
  return &type metadata for BadgeDefinition;
}

unint64_t sub_100035804()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051D78;
  if (!qword_100051D78)
  {
    v1 = sub_100004004(&qword_100051D80);
    sub_100035868();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100051D78);
  }
  return result;
}

unint64_t sub_100035868()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051D88;
  if (!qword_100051D88)
  {
    v1 = sub_100004004(&qword_100051C78);
    sub_100005084(&qword_100051D90, &qword_100051C70, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051D88);
  }
  return result;
}

unint64_t sub_1000358F0()
{
  unint64_t result;

  result = qword_100051D98;
  if (!qword_100051D98)
  {
    result = swift_getWitnessTable(&unk_100041A08, &type metadata for BadgeDefinition);
    atomic_store(result, (unint64_t *)&qword_100051D98);
  }
  return result;
}

void *sub_100035934()
{
  return &protocol witness table for String;
}

uint64_t sub_100035940(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 64) = v5;
  swift_bridgeObjectRetain(v5);
  return a2;
}

_QWORD *sub_100035998(_QWORD *a1)
{
  sub_10000D160(a1);
  swift_bridgeObjectRelease(a1[8]);
  return a1;
}

uint64_t sub_1000359C4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for StatusType(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t EnvironmentValues.avatarSizeBinding.getter()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_100035A44();
  EnvironmentValues.subscript.getter(&v2, &type metadata for AvatarSizeBindingEnvironmentKey, &type metadata for AvatarSizeBindingEnvironmentKey, v0);
  return v2;
}

unint64_t sub_100035A44()
{
  unint64_t result;

  result = qword_100051DD0;
  if (!qword_100051DD0)
  {
    result = swift_getWitnessTable(&unk_100041B00, &type metadata for AvatarSizeBindingEnvironmentKey);
    atomic_store(result, (unint64_t *)&qword_100051DD0);
  }
  return result;
}

uint64_t EnvironmentValues.avatarSizeBinding.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4;
  _QWORD v6[3];
  char v7;

  v6[0] = a1;
  v6[1] = a2;
  v6[2] = a3;
  v7 = a4 & 1;
  v4 = sub_100035A44();
  return EnvironmentValues.subscript.setter(v6, &type metadata for AvatarSizeBindingEnvironmentKey, &type metadata for AvatarSizeBindingEnvironmentKey, v4);
}

_QWORD *sub_100035ACC()
{
  uint64_t v0;
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 1;
  v0 = sub_100003FC4(&qword_100050770);
  return static Binding.constant(_:)(&qword_100051DB0, &v2, v0);
}

uint64_t sub_100035B10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (qword_100050560 != -1)
    swift_once(&qword_100050560, sub_100035ACC);
  v2 = qword_100051DB0;
  v3 = *(_QWORD *)algn_100051DB8;
  v4 = qword_100051DC0;
  v5 = byte_100051DC8;
  *(_QWORD *)a1 = qword_100051DB0;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  swift_retain(v2);
  return swift_retain(v3);
}

void (*EnvironmentValues.avatarSizeBinding.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[8] = v1;
  v4 = sub_100035A44();
  v3[9] = v4;
  EnvironmentValues.subscript.getter(v3 + 4, &type metadata for AvatarSizeBindingEnvironmentKey, &type metadata for AvatarSizeBindingEnvironmentKey, v4);
  v5 = v3[6];
  v6 = *((_BYTE *)v3 + 56);
  *(_OWORD *)v3 = *((_OWORD *)v3 + 2);
  v3[2] = v5;
  *((_BYTE *)v3 + 24) = v6;
  return sub_100035C00;
}

void sub_100035C00(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = **a1;
  v4 = v2[1];
  v2[4] = v3;
  v5 = v2[2];
  v6 = *((_BYTE *)v2 + 24);
  v7 = v2[9];
  v2[5] = v4;
  v2[6] = v5;
  *((_BYTE *)v2 + 56) = v6;
  if ((a2 & 1) != 0)
  {
    swift_retain(v3);
    swift_retain(v4);
    EnvironmentValues.subscript.setter(v2 + 4, &type metadata for AvatarSizeBindingEnvironmentKey, &type metadata for AvatarSizeBindingEnvironmentKey, v7);
    v8 = *v2;
    swift_release(v2[1]);
    swift_release(v8);
  }
  else
  {
    EnvironmentValues.subscript.setter(v2 + 4, &type metadata for AvatarSizeBindingEnvironmentKey, &type metadata for AvatarSizeBindingEnvironmentKey, v7);
  }
  free(v2);
}

ValueMetadata *type metadata accessor for AvatarSizeBindingEnvironmentKey()
{
  return &type metadata for AvatarSizeBindingEnvironmentKey;
}

_QWORD *sub_100035CB4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v7 = type metadata accessor for PersonStatusSet(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(void **)((char *)a2 + v8);
    *(_QWORD *)((char *)a1 + v8) = v10;
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    v13 = a3[7];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for ContactImage(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    v19 = v10;
    if (v18(v15, 1, v16))
    {
      v20 = sub_100003FC4(&qword_1000506C8);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v22 = a3[8];
    v23 = a3[9];
    v24 = *(_QWORD *)((char *)a2 + v22);
    *(_QWORD *)((char *)a1 + v22) = v24;
    *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
    v25 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = type metadata accessor for UUID(0);
    v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
    swift_retain(v24);
    v29(v26, v27, v28);
    v30 = a3[12];
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    v33 = *(_QWORD *)v32;
    v34 = *((_QWORD *)v32 + 1);
    v35 = *((_QWORD *)v32 + 2);
    LOBYTE(v28) = v32[25];
    LOBYTE(v29) = v32[24];
    sub_100035F24(*(_QWORD *)v32, v34, v35, v29, v28);
    *(_QWORD *)v31 = v33;
    *((_QWORD *)v31 + 1) = v34;
    *((_QWORD *)v31 + 2) = v35;
    v31[24] = (char)v29;
    v36 = a3[13];
    v37 = a3[14];
    v38 = *(_QWORD *)((char *)a2 + v36);
    v31[25] = v28;
    *(_QWORD *)((char *)a1 + v36) = v38;
    v39 = (_OWORD *)((char *)a1 + v37);
    v40 = (_OWORD *)((char *)a2 + v37);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = a3[15];
    v43 = (_QWORD *)((char *)a1 + v42);
    v44 = (_QWORD *)((char *)a2 + v42);
    v45 = sub_100003FC4(&qword_1000506E0);
    if (swift_getEnumCaseMultiPayload(v44, v45) == 1)
    {
      v46 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v43, v44, v46);
    }
    else
    {
      v47 = *v44;
      *v43 = *v44;
      swift_retain(v47);
    }
    swift_storeEnumTagMultiPayload(v43);
  }
  return a1;
}

uint64_t sub_100035F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    swift_retain(a1);
  else
    a2 = a1;
  return swift_retain(a2);
}

uint64_t sub_100035F54(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

  v5 = a1 + a2[7];
  v6 = type metadata accessor for ContactImage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_release(*(_QWORD *)(a1 + a2[8]));
  v8 = a1 + a2[11];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = a1 + a2[12];
  sub_10001D350(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), *(unsigned __int8 *)(v10 + 24), *(_BYTE *)(v10 + 25));
  v11 = (_QWORD *)(a1 + a2[15]);
  v12 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v11, v12) != 1)
    return swift_release(*v11);
  v13 = type metadata accessor for ColorScheme(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
}

uint64_t sub_100036090(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = a3[7];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for ContactImage(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v9;
  if (v17(v14, 1, v15))
  {
    v19 = sub_100003FC4(&qword_1000506C8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v20 = a3[8];
  v21 = a3[9];
  v22 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v22;
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  v23 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = type metadata accessor for UUID(0);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
  swift_retain(v22);
  v27(v24, v25, v26);
  v28 = a3[12];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_QWORD *)v30;
  v32 = *(_QWORD *)(v30 + 8);
  v33 = *(_QWORD *)(v30 + 16);
  LOBYTE(v26) = *(_BYTE *)(v30 + 25);
  LOBYTE(v27) = *(_BYTE *)(v30 + 24);
  sub_100035F24(*(_QWORD *)v30, v32, v33, v27, v26);
  *(_QWORD *)v29 = v31;
  *(_QWORD *)(v29 + 8) = v32;
  *(_QWORD *)(v29 + 16) = v33;
  *(_BYTE *)(v29 + 24) = (_BYTE)v27;
  v34 = a3[13];
  v35 = a3[14];
  v36 = *(_QWORD *)(a2 + v34);
  *(_BYTE *)(v29 + 25) = v26;
  *(_QWORD *)(a1 + v34) = v36;
  v37 = (_OWORD *)(a1 + v35);
  v38 = (_OWORD *)(a2 + v35);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = a3[15];
  v41 = (uint64_t *)(a1 + v40);
  v42 = (uint64_t *)(a2 + v40);
  v43 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
  {
    v44 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v41, v42, v44);
  }
  else
  {
    v45 = *v42;
    *v41 = *v42;
    swift_retain(v45);
  }
  swift_storeEnumTagMultiPayload(v41);
  return a1;
}

uint64_t sub_1000362CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a1 + v7);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = v9;

  v11 = a3[6];
  v12 = a1 + v11;
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  *(_BYTE *)(v12 + 8) = *((_BYTE *)v13 + 8);
  *(_QWORD *)v12 = v14;
  v15 = a3[7];
  v16 = (void *)(a1 + v15);
  v17 = (void *)(a2 + v15);
  v18 = type metadata accessor for ContactImage(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    v23 = sub_100003FC4(&qword_1000506C8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  v24 = a3[8];
  v25 = *(_QWORD *)(a2 + v24);
  v26 = *(_QWORD *)(a1 + v24);
  *(_QWORD *)(a1 + v24) = v25;
  swift_retain(v25);
  swift_release(v26);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v27 = a3[11];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  v31 = a3[12];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = *(_QWORD *)v33;
  v35 = *(_QWORD *)(v33 + 8);
  v36 = *(_QWORD *)(v33 + 16);
  v37 = *(_BYTE *)(v33 + 25);
  v38 = *(_BYTE *)(v33 + 24);
  sub_100035F24(*(_QWORD *)v33, v35, v36, v38, v37);
  v39 = *(_QWORD *)v32;
  v40 = *(_QWORD *)(v32 + 8);
  v41 = *(_QWORD *)(v32 + 16);
  v42 = *(_BYTE *)(v32 + 25);
  *(_QWORD *)v32 = v34;
  *(_QWORD *)(v32 + 8) = v35;
  *(_QWORD *)(v32 + 16) = v36;
  v43 = *(unsigned __int8 *)(v32 + 24);
  *(_BYTE *)(v32 + 24) = v38;
  *(_BYTE *)(v32 + 25) = v37;
  sub_10001D350(v39, v40, v41, v43, v42);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v44 = a3[14];
  v45 = (_QWORD *)(a1 + v44);
  v46 = (_QWORD *)(a2 + v44);
  *v45 = *v46;
  v45[1] = v46[1];
  v45[2] = v46[2];
  v45[3] = v46[3];
  if (a1 != a2)
  {
    v47 = a3[15];
    v48 = (uint64_t *)(a1 + v47);
    v49 = (uint64_t *)(a2 + v47);
    sub_100004EE0(a1 + v47, &qword_1000506E0);
    v50 = sub_100003FC4(&qword_1000506E0);
    if (swift_getEnumCaseMultiPayload(v49, v50) == 1)
    {
      v51 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v48, v49, v51);
    }
    else
    {
      v52 = *v49;
      *v48 = *v49;
      swift_retain(v52);
    }
    swift_storeEnumTagMultiPayload(v48);
  }
  return a1;
}

uint64_t sub_1000365AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  v10 = a3[7];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = type metadata accessor for ContactImage(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_100003FC4(&qword_1000506C8);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v17 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  v21 = a3[12];
  v22 = a3[13];
  v23 = *(_OWORD *)(a2 + v21);
  v24 = *(_OWORD *)(a2 + v21 + 10);
  v25 = (_OWORD *)(a1 + v21);
  *v25 = v23;
  *(_OWORD *)((char *)v25 + 10) = v24;
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  v26 = a3[14];
  v27 = a3[15];
  v28 = (_OWORD *)(a1 + v26);
  v29 = (_OWORD *)(a2 + v26);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = (void *)(a1 + v27);
  v32 = (const void *)(a2 + v27);
  v33 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
  {
    v34 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v31, v32, v34);
    swift_storeEnumTagMultiPayload(v31);
  }
  else
  {
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000367A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  __int128 v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;

  v6 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = a3[6];
  v10 = a3[7];
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = (void *)(a1 + v10);
  v14 = (void *)(a2 + v10);
  v15 = type metadata accessor for ContactImage(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_100003FC4(&qword_1000506C8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  v21 = a3[8];
  v22 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  swift_release(v22);
  v23 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  v24 = a3[11];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  v28 = a3[12];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_QWORD *)(v30 + 16);
  v32 = *(_BYTE *)(v30 + 24);
  v33 = *(_BYTE *)(v30 + 25);
  v34 = *(_QWORD *)v29;
  v35 = *(_QWORD *)(v29 + 8);
  v36 = *(_QWORD *)(v29 + 16);
  v37 = *(_BYTE *)(v29 + 25);
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *(_QWORD *)(v29 + 16) = v31;
  v38 = *(unsigned __int8 *)(v29 + 24);
  *(_BYTE *)(v29 + 24) = v32;
  *(_BYTE *)(v29 + 25) = v33;
  sub_10001D350(v34, v35, v36, v38, v37);
  v39 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v40 = (_OWORD *)(a1 + v39);
  v41 = (_OWORD *)(a2 + v39);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  if (a1 != a2)
  {
    v43 = a3[15];
    v44 = (void *)(a1 + v43);
    v45 = (const void *)(a2 + v43);
    sub_100004EE0(a1 + v43, &qword_1000506E0);
    v46 = sub_100003FC4(&qword_1000506E0);
    if (swift_getEnumCaseMultiPayload(v45, v46) == 1)
    {
      v47 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v44, v45, v47);
      swift_storeEnumTagMultiPayload(v44);
    }
    else
    {
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100036A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100036A50);
}

uint64_t sub_100036A50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v6 = type metadata accessor for PersonStatusSet(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100003FC4(&qword_1000506C8);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[7];
LABEL_12:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v16 = type metadata accessor for UUID(0);
    v12 = *(_QWORD *)(v16 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v16;
      v13 = a3[11];
    }
    else
    {
      v8 = sub_100003FC4(&qword_1000506B8);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = a3[15];
    }
    goto LABEL_12;
  }
  v14 = *(_QWORD *)(a1 + a3[8]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100036B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100036B54);
}

uint64_t sub_100036B54(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for PersonStatusSet(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_100003FC4(&qword_1000506C8);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[7];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[8]) = (a2 - 1);
        return result;
      }
      v16 = type metadata accessor for UUID(0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[11];
      }
      else
      {
        v10 = sub_100003FC4(&qword_1000506B8);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[15];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for AvatarView(uint64_t a1)
{
  uint64_t result;

  result = qword_100051E30;
  if (!qword_100051E30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AvatarView);
  return result;
}

void sub_100036C84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[12];

  v2 = type metadata accessor for PersonStatusSet(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = "\b";
    v10[2] = &unk_100041B60;
    sub_10000EAB0(319, (unint64_t *)&unk_100051E40, (uint64_t (*)(uint64_t))&type metadata accessor for ContactImage, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v10[3] = *(_QWORD *)(v4 - 8) + 64;
      v10[4] = (char *)&value witness table for Builtin.NativeObject + 64;
      v10[5] = &unk_100041B78;
      v10[6] = &unk_100041B78;
      v6 = type metadata accessor for UUID(319);
      if (v7 <= 0x3F)
      {
        v10[7] = *(_QWORD *)(v6 - 8) + 64;
        v10[8] = &unk_100041B90;
        v10[9] = (char *)&value witness table for Builtin.Int64 + 64;
        v10[10] = &unk_100041BA8;
        sub_10000EAB0(319, (unint64_t *)&unk_100051148, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
        if (v9 <= 0x3F)
        {
          v10[11] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 12, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_100036DBC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100042850, 1);
}

uint64_t sub_100036DCC(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  double v30;

  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v23 - v7;
  v9 = sub_100003FC4(&qword_100052030);
  v24 = *(_QWORD *)(v9 - 8);
  v25 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v23 - v13;
  v29 = 0x3FF0000000000000;
  v30 = 0.0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  v15 = sub_100039C6C();
  LinearScale.init(from:to:validRange:)(&v30, &v29, &v26, &type metadata for CGFloat, v15);
  v29 = 0x3FD3333333333333;
  v30 = 0.0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  LinearScale.init(from:to:validRange:)(&v30, &v29, &v26, &type metadata for CGFloat, v15);
  type metadata accessor for AvatarView(0);
  sub_10001C7D4((uint64_t)v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for ColorScheme.dark(_:), v2);
  v16 = static ColorScheme.== infix(_:_:)(v8, v6);
  v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v6, v2);
  v17(v8, v2);
  if ((v16 & 1) != 0)
  {
    v18 = v25;
    v19 = *(void (**)(char *, uint64_t))(v24 + 8);
    v19(v12, v25);
    return ((uint64_t (*)(char *, uint64_t))v19)(v14, v18);
  }
  else
  {
    v30 = a1;
    v21 = v25;
    LinearScale.convert<A>(_:to:)(&v26, &v30, v12, v25, &type metadata for CGFloat, v15);
    v22 = *(void (**)(char *, uint64_t))(v24 + 8);
    v22(v12, v21);
    return ((uint64_t (*)(char *, uint64_t))v22)(v14, v21);
  }
}

double sub_100037014(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  double v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  double v27;

  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v22 - v7;
  v9 = sub_100003FC4(&qword_100052030);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v22 - v14;
  v26 = 0x3FF0000000000000;
  v27 = 0.0;
  v23 = 0.0;
  v24 = 0;
  v25 = 1;
  v16 = sub_100039C6C();
  LinearScale.init(from:to:validRange:)(&v27, &v26, &v23, &type metadata for CGFloat, v16);
  type metadata accessor for AvatarView(0);
  sub_10001C7D4((uint64_t)v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for ColorScheme.dark(_:), v2);
  v17 = static ColorScheme.== infix(_:_:)(v8, v6);
  v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v6, v2);
  v18(v8, v2);
  if ((v17 & 1) != 0)
  {
    v27 = 0.75;
    v19 = 0x3FE4CCCCCCCCCCCDLL;
  }
  else
  {
    v27 = 0.6;
    v19 = 0x3FE199999999999ALL;
  }
  v26 = v19;
  v23 = 0.0;
  v24 = 0;
  v25 = 1;
  LinearScale.init(from:to:validRange:)(&v27, &v26, &v23, &type metadata for CGFloat, v16);
  v27 = a1;
  LinearScale.convert<A>(_:to:)(&v23, &v27, v13, v9, &type metadata for CGFloat, v16);
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v13, v9);
  v20(v15, v9);
  return v23;
}

uint64_t sub_100037254@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t result;
  __int128 v67;
  __int128 v68;
  _BYTE v69[12];
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v79;
  __int128 v80;
  __int128 v81;
  char v82;

  v2 = sub_100003FC4(&qword_100051ED8);
  __chkstk_darwin(v2);
  v4 = &v69[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocationPersonStatus(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v69[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  PersonStatusSet.text.getter(&v80, v7);
  if (!*((_QWORD *)&v81 + 1))
  {
    sub_100004EE0((uint64_t)&v80, &qword_100051208);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_6;
  }
  v10 = sub_100003FC4(&qword_100051EE0);
  v11 = swift_dynamicCast(v4, &v80, v10, v5, 6);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, v11 ^ 1u, 1, v5);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_6:
    sub_100004EE0((uint64_t)v4, &qword_100051ED8);
LABEL_7:
    v77 = 0u;
    v78 = 0u;
    v79 = 1;
    result = _ConditionalContent<>.init(storage:)(&v77, &type metadata for Text, &type metadata for EmptyView, &protocol witness table for Text, &protocol witness table for EmptyView);
    v67 = v80;
    v68 = v81;
    v65 = v82;
    goto LABEL_8;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v9, v4, v5);
  type metadata accessor for ServerFeatureFlag(0);
  v12 = static ServerFeatureFlag.shared.getter();
  v13 = ServerFeatureFlag.locationTriage.getter();
  v14 = swift_release(v12);
  if ((v13 & 1) == 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    goto LABEL_7;
  }
  *(_QWORD *)&v80 = LocationPersonStatus.formattedDateForTriage.getter(v14);
  *((_QWORD *)&v80 + 1) = v15;
  v16 = sub_10000C644();
  v17 = Text.init<A>(_:)(&v80, &type metadata for String, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = static Color.white.getter();
  *(_QWORD *)&v75 = Text.foregroundColor(_:)(v24, v17, v19, v23, v21);
  v74 = v25;
  v27 = v26;
  *(_QWORD *)&v76 = v28;
  swift_release(v24);
  v29 = v27 & 1;
  LODWORD(v71) = v27 & 1;
  sub_1000206A4(v17, v19, v23);
  v30 = swift_bridgeObjectRelease(v21);
  v31 = static Font.caption2.getter(v30);
  v32 = v75;
  v33 = v74;
  v34 = v29;
  v35 = v76;
  v72 = Text.font(_:)(v31, v75, v74, v34, v76);
  v37 = v36;
  LOBYTE(v23) = v38;
  v73 = v39;
  swift_release(v31);
  v40 = v23 & 1;
  sub_1000206A4(v32, v33, v71);
  swift_bridgeObjectRelease(v35);
  v41 = v72;
  v42 = v73;
  *(_QWORD *)&v75 = Text.bold()(v72, v37, v40, v73);
  v74 = v43;
  v45 = v44;
  v71 = v44;
  v47 = v46 & 1;
  v70 = v46 & 1;
  sub_1000206A4(v41, v37, v40);
  v48 = swift_bridgeObjectRelease(v42);
  v49 = static Color.black.getter(v48);
  v50 = v75;
  v51 = v74;
  v52 = Text.shadow(color:radius:x:y:)(v49, v75, v74, v47, v45, 10.0, -2.0, -2.0);
  *(_QWORD *)&v76 = v53;
  LOBYTE(v47) = v54;
  v56 = v55;
  swift_release(v49);
  v57 = v47 & 1;
  sub_1000206A4(v50, v51, v70);
  v58 = swift_bridgeObjectRelease(v71);
  v59 = static Color.blue.getter(v58);
  v60 = v52;
  v61 = v76;
  *(_QWORD *)&v75 = Text.shadow(color:radius:x:y:)(v59, v52, v76, v57, v56, 10.0, 2.0, 2.0);
  v74 = v62;
  LOBYTE(v52) = v63;
  v73 = v64;
  swift_release(v59);
  sub_1000206A4(v60, v61, v57);
  swift_bridgeObjectRelease(v56);
  *(_QWORD *)&v77 = v75;
  *((_QWORD *)&v77 + 1) = v74;
  *(_QWORD *)&v78 = v52 & 1;
  *((_QWORD *)&v78 + 1) = v73;
  v79 = 0;
  _ConditionalContent<>.init(storage:)(&v77, &type metadata for Text, &type metadata for EmptyView, &protocol witness table for Text, &protocol witness table for EmptyView);
  v75 = v81;
  v76 = v80;
  v65 = v82;
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  v68 = v75;
  v67 = v76;
LABEL_8:
  *(_OWORD *)a1 = v67;
  *(_OWORD *)(a1 + 16) = v68;
  *(_BYTE *)(a1 + 32) = v65;
  return result;
}

uint64_t sub_1000376F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v0 = sub_100003FC4(&qword_100051ED8);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v16[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  PersonStatusSet.text.getter(v16, v1);
  if (!v17)
  {
    sub_100004EE0((uint64_t)v16, &qword_100051208);
    v13 = type metadata accessor for LocationPersonStatus(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v3, 1, 1, v13);
    goto LABEL_7;
  }
  v4 = sub_100003FC4(&qword_100051EE0);
  v5 = type metadata accessor for LocationPersonStatus(0);
  v6 = swift_dynamicCast(v3, v16, v4, v5, 6);
  v7 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v3, v6 ^ 1u, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v5) == 1)
  {
LABEL_7:
    sub_100004EE0((uint64_t)v3, &qword_100051ED8);
    return 0;
  }
  sub_100004EE0((uint64_t)v3, &qword_100051ED8);
  PersonStatusSet.badge.getter(v16);
  v8 = v17;
  if (!v17)
  {
    sub_100004EE0((uint64_t)v16, &qword_100051258);
LABEL_9:
    swift_bridgeObjectRelease(0);
    return 0;
  }
  v9 = v18;
  sub_10001190C(v16, v17);
  v10 = dispatch thunk of BadgeStatus.accessibilityText.getter(v8, v9);
  v12 = v11;
  sub_10000D160(v16);
  if (!v12)
    goto LABEL_9;
  return v10;
}

double sub_100037894@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  _OWORD v35[9];
  char v36;
  char v37;

  v3 = type metadata accessor for AvatarView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004E9C(v1, (uint64_t)v6, v7);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10004EA18, v9 + v5, v8 | 7);
  v11 = sub_10003967C((uint64_t)v6, v10 + v9);
  v12 = *(double *)(v1 + *(int *)(v3 + 52));
  v13 = static Alignment.center.getter(v11);
  sub_10003AB30(0.0, 1, 0.0, 1, v12, 0, 0.0, 1, (uint64_t)v35, 0.0, 1, 0.0, 1, v13, v14, (uint64_t)sub_1000396C0, v10, 0x3FF0000000000000, 0);
  v15 = swift_release(v10);
  v16 = v1 + *(int *)(v3 + 24);
  v17 = *(_QWORD *)v16;
  v18 = *(unsigned __int8 *)(v16 + 8);
  v19 = static Alignment.center.getter(v15);
  _FrameLayout.init(width:height:alignment:)(&v30, v17, v18, 0, 1, v19, v20);
  v21 = v30;
  v22 = v32;
  v37 = v31;
  v36 = v33;
  v23 = v35[5];
  v24 = v35[7];
  v25 = v35[8];
  *(_OWORD *)(a1 + 96) = v35[6];
  *(_OWORD *)(a1 + 112) = v24;
  *(_OWORD *)(a1 + 128) = v25;
  v26 = v35[3];
  *(_OWORD *)(a1 + 32) = v35[2];
  *(_OWORD *)(a1 + 48) = v26;
  *(_OWORD *)(a1 + 64) = v35[4];
  *(_OWORD *)(a1 + 80) = v23;
  v27 = v35[1];
  *(_OWORD *)a1 = v35[0];
  *(_OWORD *)(a1 + 16) = v27;
  *(_QWORD *)(a1 + 144) = v21;
  *(_BYTE *)(a1 + 152) = v37;
  *(_QWORD *)(a1 + 160) = v22;
  *(_BYTE *)(a1 + 168) = v36;
  result = *(double *)&v34;
  *(_OWORD *)(a1 + 176) = v34;
  return result;
}

uint64_t sub_100037A60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *object;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  double *v49;
  uint64_t (**v50)();
  double *v51;
  double v52;
  double v53;
  uint64_t v54;
  double *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v70 = a3;
  v69 = type metadata accessor for AvatarView(0);
  v66 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v67 = v5;
  v68 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessibilityChildBehavior(0);
  v58 = *(_QWORD *)(v6 - 8);
  v59 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003FC4(&qword_100051E98);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v57 = sub_100003FC4(&qword_100051EA0);
  v60 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100003FC4(&qword_100051EA8);
  v14 = __chkstk_darwin(v62);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v65 = (char *)&v57 - v17;
  v63 = sub_100003FC4(&qword_100051EB0);
  __chkstk_darwin(v63);
  v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100003FC4(&qword_100051EB8);
  v20 = __chkstk_darwin(v64);
  v61 = (uint64_t)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = GeometryProxy.size.getter(v20);
  v24 = v23;
  *v11 = static Alignment.topTrailing.getter();
  v11[1] = v25;
  v26 = sub_100003FC4(&qword_100051EC0);
  v27 = sub_100037F08(a2, a1, (uint64_t)v11 + *(int *)(v26 + 44));
  static AccessibilityChildBehavior.combine.getter(v27);
  v28 = sub_100005084(&qword_100051EC8, &qword_100051E98, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.accessibilityElement(children:)(v8, v9, v28);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v8, v59);
  sub_100004EE0((uint64_t)v11, &qword_100051E98);
  sub_1000376F0();
  v30 = v29;
  object = String.trimToNil()().value._object;
  swift_bridgeObjectRelease(v30);
  if (object)
    swift_bridgeObjectRelease(object);
  v71 = v9;
  v72 = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v33 = v57;
  View.accessibilityHidden(_:)(object == 0, v57, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v33);
  v71 = sub_1000376F0();
  v72 = v34;
  v35 = sub_10000C644();
  v36 = Text.init<A>(_:)(&v71, &type metadata for String, v35);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  v43 = (uint64_t)v65;
  ModifiedContent<>.accessibilityLabel(_:)();
  sub_1000206A4(v36, v38, v42);
  swift_bridgeObjectRelease(v40);
  sub_100004EE0((uint64_t)v16, &qword_100051EA8);
  v44 = v68;
  sub_100004E9C(a2, v68, type metadata accessor for AvatarView);
  v45 = *(unsigned __int8 *)(v66 + 80);
  v46 = (v45 + 16) & ~v45;
  v47 = (v67 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = swift_allocObject(&unk_10004EA40, v47 + 16, v45 | 7);
  sub_10003967C(v44, v48 + v46);
  v49 = (double *)(v48 + v47);
  *v49 = v22;
  *((_QWORD *)v49 + 1) = v24;
  sub_100012534(v43, (uint64_t)v19, &qword_100051EA8);
  v50 = (uint64_t (**)())&v19[*(int *)(v63 + 36)];
  *v50 = sub_100039884;
  v50[1] = (uint64_t (*)())v48;
  v50[2] = 0;
  v50[3] = 0;
  sub_100004EE0(v43, &qword_100051EA8);
  v51 = (double *)(a2 + *(int *)(v69 + 56));
  v52 = -v51[1] - v51[3];
  v53 = -*v51;
  v54 = v61;
  sub_100012534((uint64_t)v19, v61, &qword_100051EB0);
  v55 = (double *)(v54 + *(int *)(v64 + 36));
  *v55 = v52;
  v55[1] = v53;
  sub_100004EE0((uint64_t)v19, &qword_100051EB0);
  return sub_100004F98(v54, v70, &qword_100051EB8);
}

uint64_t sub_100037F08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  uint64_t (*v48)(_QWORD);
  int v49;
  uint64_t v50;
  uint64_t v51;
  double v53;
  double *v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char v68;
  char v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  char v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  char v108;
  double v109;
  double v110;
  int v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  char v131;
  char v132;
  double v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  char v138;
  char v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char v192;
  void (*v193)(char *, uint64_t);
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char v200;
  double v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  char v221;
  __int128 v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t OpaqueTypeConformance2;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  CTFontRef UIFontForLanguage;
  int *v239;
  _QWORD *v240;
  double v241;
  double v242;
  double v243;
  uint64_t v244;
  double *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  double *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  char *v261;
  char *v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  double v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  __int128 v303;
  uint64_t v304;
  _BYTE v305[7];
  unsigned __int8 v306;
  _DWORD v307[2];
  char v308;
  _DWORD v309[2];
  char v310;
  __int128 v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  _OWORD v329[2];
  char v330;
  char v331;
  char v332;
  char v333;
  char v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  _OWORD v349[2];
  uint64_t v350;
  char v351;
  uint64_t v352;
  char v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  char v357;
  uint64_t v358;
  char v359;
  __int128 v360;

  *(_QWORD *)&v303 = a2;
  v301 = a3;
  v4 = sub_100003FC4(&qword_100051EE8);
  __chkstk_darwin(v4);
  v295 = (char *)&v251 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v267 = type metadata accessor for StatusBadgeView(0);
  __chkstk_darwin(v267);
  v270 = (char *)&v251 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003FC4(&qword_100051EF0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v269 = (uint64_t)&v251 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v268 = (uint64_t)&v251 - v11;
  v12 = sub_100003FC4(&qword_100051EF8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v251 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v251 - v16;
  v18 = type metadata accessor for ColorScheme(0);
  v287 = *(_QWORD *)(v18 - 8);
  v288 = v18;
  v19 = __chkstk_darwin(v18);
  v286 = (char *)&v251 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v285 = (uint64_t)&v251 - v21;
  v290 = sub_100003FC4(&qword_100051F00);
  __chkstk_darwin(v290);
  v292 = (char *)&v251 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ColorRenderingMode(0);
  v265 = *(_QWORD *)(v23 - 8);
  v266 = v23;
  __chkstk_darwin(v23);
  v264 = (char *)&v251 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v256 = sub_100003FC4(&qword_100051F08);
  __chkstk_darwin(v256);
  v257 = (uint64_t)&v251 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Image.ResizingMode(0);
  v253 = *(_QWORD *)(v26 - 8);
  v254 = v26;
  __chkstk_darwin(v26);
  v252 = (char *)&v251 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v255 = sub_100003FC4(&qword_100051F10);
  __chkstk_darwin(v255);
  v29 = (char *)&v251 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v259 = sub_100003FC4(&qword_100051F18);
  __chkstk_darwin(v259);
  v258 = (uint64_t)&v251 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v296 = sub_100003FC4(&qword_100051F20);
  __chkstk_darwin(v296);
  v261 = (char *)&v251 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v297 = sub_100003FC4(&qword_100051F28);
  v263 = *(_QWORD *)(v297 - 8);
  v32 = __chkstk_darwin(v297);
  v260 = (char *)&v251 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v262 = (char *)&v251 - v34;
  v35 = sub_100003FC4(&qword_1000506C8);
  __chkstk_darwin(v35);
  v293 = (uint64_t)&v251 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for ContactImage(0);
  v299 = *(_QWORD *)(v37 - 8);
  v300 = v37;
  __chkstk_darwin(v37);
  v289 = (char *)&v251 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100003FC4(&qword_100051F30);
  v40 = __chkstk_darwin(v39);
  v294 = (uint64_t)&v251 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v298 = (char *)&v251 - v42;
  v43 = type metadata accessor for AvatarView(0);
  v44 = __chkstk_darwin(v43);
  v46 = (char *)&v251 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = *(_BYTE *)(a1 + *(int *)(v44 + 24) + 8);
  v304 = a1;
  sub_100004E9C(a1, (uint64_t)v46, v48);
  if ((v47 & 1) != 0)
  {
    v49 = v46[*(int *)(v43 + 40)];
    v50 = sub_10000501C((uint64_t)v46, type metadata accessor for AvatarView);
    if (v49 != 1)
    {
      v51 = sub_100003FC4(&qword_100051F38);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v301, 1, 1, v51);
    }
  }
  else
  {
    v50 = sub_10000501C((uint64_t)v46, type metadata accessor for AvatarView);
  }
  v291 = v43;
  v281 = v8;
  v282 = v7;
  v283 = v17;
  v284 = v15;
  v302 = static Color.clear.getter(v50);
  v53 = GeometryProxy.size.getter(v302);
  v54 = (double *)(v304 + *(int *)(v43 + 56));
  v55 = v54[1];
  v56 = v54[3];
  v57 = v53 + v55 + v56;
  GeometryProxy.size.getter(v58);
  v59 = *v54;
  v61 = v60 + *v54;
  v251 = v54;
  v62 = v54[2];
  v63 = v61 + v62;
  v65 = static Alignment.center.getter(v64);
  v67 = _FrameLayout.init(width:height:alignment:)(&v350, *(_QWORD *)&v57, 0, *(_QWORD *)&v63, 0, v65, v66);
  v68 = v351;
  v279 = v352;
  v280 = v350;
  v69 = v353;
  v277 = v355;
  v278 = v354;
  v276 = static Edge.Set.leading.getter(v67);
  v70 = EdgeInsets.init(_all:)(v55);
  v274 = v71;
  v275 = v70;
  v272 = v73;
  v273 = v72;
  LOBYTE(v57) = static Edge.Set.trailing.getter(v74);
  v75 = EdgeInsets.init(_all:)(v56);
  v77 = v76;
  v271 = v78;
  v80 = v79;
  v333 = v68;
  v332 = v69;
  v331 = 0;
  v330 = 0;
  v82 = static Edge.Set.top.getter(v81);
  v83 = EdgeInsets.init(_all:)(v59);
  v85 = v84;
  v87 = v86;
  v89 = v88;
  LOBYTE(v54) = v333;
  v90 = v332;
  v91 = v331;
  LOBYTE(v63) = v330;
  v334 = 0;
  v93 = static Edge.Set.bottom.getter(v92);
  v94 = EdgeInsets.init(_all:)(v62);
  *(_QWORD *)&v335 = v302;
  WORD4(v335) = 256;
  *(_QWORD *)&v336 = v280;
  *(_QWORD *)&v337 = v279;
  BYTE8(v337) = v90;
  *(_QWORD *)&v338 = v278;
  *((_QWORD *)&v338 + 1) = v277;
  LOBYTE(v339) = v276;
  *((double *)&v339 + 1) = v275;
  *(_QWORD *)&v340 = v274;
  *((_QWORD *)&v340 + 1) = v273;
  *(_QWORD *)&v341 = v272;
  BYTE8(v341) = v91;
  LOBYTE(v342) = LOBYTE(v57);
  *((double *)&v342 + 1) = v75;
  *(_QWORD *)&v343 = v77;
  *((_QWORD *)&v343 + 1) = v271;
  *(_QWORD *)&v344 = v80;
  BYTE8(v344) = LOBYTE(v63);
  LOBYTE(v345) = v82;
  *((double *)&v345 + 1) = v83;
  *(_QWORD *)&v346 = v85;
  *((_QWORD *)&v346 + 1) = v87;
  *(_QWORD *)&v347 = v89;
  BYTE8(v347) = v334;
  LOBYTE(v348) = v93;
  *((double *)&v348 + 1) = v94;
  *(_QWORD *)&v349[0] = v95;
  *((_QWORD *)&v349[0] + 1) = v96;
  *(_QWORD *)&v349[1] = v97;
  BYTE8(v349[1]) = 0;
  v98 = v304 + *(int *)(v291 + 28);
  BYTE8(v336) = (_BYTE)v54;
  v99 = v293;
  sub_100012534(v98, v293, &qword_1000506C8);
  v101 = v299;
  v100 = v300;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v299 + 48))(v99, 1, v300) == 1)
  {
    v102 = sub_100004EE0(v99, &qword_1000506C8);
LABEL_16:
    v185 = static Alignment.top.getter(v102);
    v187 = v186;
    v188 = v285;
    sub_10001C7D4(v285);
    v190 = v286;
    v189 = v287;
    v191 = v288;
    (*(void (**)(char *, _QWORD, uint64_t))(v287 + 104))(v286, enum case for ColorScheme.dark(_:), v288);
    v192 = static ColorScheme.== infix(_:_:)(v188, v190);
    v193 = *(void (**)(char *, uint64_t))(v189 + 8);
    v193(v190, v191);
    v194 = ((uint64_t (*)(uint64_t, uint64_t))v193)(v188, v191);
    if ((v192 & 1) != 0)
    {
      v195 = 0x3FC3333333333333;
      v196 = static Color.white.getter(v194);
    }
    else
    {
      v195 = 0x3FAEB851EB851EB8;
      v196 = static Color.black.getter(v194);
    }
    v197 = v196;
    v198 = v292;
    v199 = static Edge.Set.all.getter(v196);
    v200 = v199;
    v201 = GeometryProxy.size.getter(v199);
    GeometryProxy.size.getter(v202);
    v204 = v203;
    v206 = static Alignment.center.getter(v205);
    _FrameLayout.init(width:height:alignment:)(&v356, *(_QWORD *)&v201, 0, v204, 0, v206, v207);
    v328 = v348;
    v329[0] = v349[0];
    *(_OWORD *)((char *)v329 + 9) = *(_OWORD *)((char *)v349 + 9);
    v324 = v344;
    v325 = v345;
    v326 = v346;
    v327 = v347;
    v320 = v340;
    v321 = v341;
    v322 = v342;
    v323 = v343;
    v315 = v335;
    v316 = v336;
    v317 = v337;
    v318 = v338;
    v319 = v339;
    v208 = v348;
    v209 = v329[0];
    v210 = v346;
    *((_OWORD *)v198 + 12) = v347;
    *((_OWORD *)v198 + 13) = v208;
    v211 = v329[1];
    *((_OWORD *)v198 + 14) = v209;
    *((_OWORD *)v198 + 15) = v211;
    v212 = v324;
    v213 = v325;
    v214 = v322;
    *((_OWORD *)v198 + 8) = v323;
    *((_OWORD *)v198 + 9) = v212;
    *((_OWORD *)v198 + 10) = v213;
    *((_OWORD *)v198 + 11) = v210;
    v215 = v320;
    v216 = v321;
    v217 = v318;
    *((_OWORD *)v198 + 4) = v319;
    *((_OWORD *)v198 + 5) = v215;
    v218 = v356;
    v219 = v357;
    v220 = v358;
    v221 = v359;
    LOBYTE(v309[0]) = v357;
    LOBYTE(v307[0]) = v359;
    *((_OWORD *)v198 + 6) = v216;
    *((_OWORD *)v198 + 7) = v214;
    v222 = v316;
    *(_OWORD *)v198 = v315;
    *((_OWORD *)v198 + 1) = v222;
    *((_OWORD *)v198 + 2) = v317;
    *((_OWORD *)v198 + 3) = v217;
    *((_QWORD *)v198 + 32) = v197;
    v198[264] = v200;
    *((_QWORD *)v198 + 34) = v195;
    *((_QWORD *)v198 + 35) = v218;
    v198[288] = v219;
    *((_QWORD *)v198 + 37) = v220;
    v198[304] = v221;
    *(_OWORD *)(v198 + 312) = v360;
    *((_WORD *)v198 + 164) = 256;
    *((_QWORD *)v198 + 42) = v185;
    *((_QWORD *)v198 + 43) = v187;
    swift_storeEnumTagMultiPayload(v198);
    sub_1000398C8(&v335);
    v223 = sub_100003FC4(&qword_100051F40);
    v224 = sub_1000398F0();
    *(_QWORD *)&v311 = v296;
    *((_QWORD *)&v311 + 1) = v224;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v311, &opaque type descriptor for <<opaque return type of View.drawingGroup(opaque:colorMode:)>>, 1);
    v226 = sub_100039A84(&qword_100051FF8, &qword_100051F40, &qword_100052000, &qword_100052008);
    v184 = (uint64_t)v298;
    _ConditionalContent<>.init(storage:)(v198, v297, v223, OpaqueTypeConformance2, v226);
    goto LABEL_20;
  }
  v103 = v289;
  v104 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v101 + 32))(v289, v99, v100);
  v105 = ContactImage.avatar.getter(v104);
  if (!v105)
  {
    v102 = (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v103, v100);
    goto LABEL_16;
  }
  v106 = v105;
  v107 = COERCE_DOUBLE(ContactImage.avatarLuminance.getter());
  if ((v108 & 1) != 0)
    v109 = 0.0;
  else
    v109 = v107;
  v110 = COERCE_DOUBLE(ContactImage.avatarSaturation.getter());
  LODWORD(v285) = v111;
  v112 = 2.1 - v110;
  v113 = sub_100036DCC(v109);
  v115 = v114;
  v116 = static Alignment.top.getter(v113);
  v287 = v117;
  v288 = v116;
  v119 = v252;
  v118 = v253;
  v120 = v254;
  (*(void (**)(char *, _QWORD, uint64_t))(v253 + 104))(v252, enum case for Image.ResizingMode.stretch(_:), v254);
  v293 = v106;
  v286 = (char *)Image.resizable(capInsets:resizingMode:)(v119, v106, 0.0, 0.0, 0.0, 0.0);
  v121 = (*(uint64_t (**)(char *, uint64_t))(v118 + 8))(v119, v120);
  v122 = v303;
  v123 = GeometryProxy.size.getter(v121);
  GeometryProxy.size.getter(v124);
  v126 = v125;
  v128 = static Alignment.center.getter(v127);
  v130 = _FrameLayout.init(width:height:alignment:)(&v356, *(_QWORD *)&v123, 0, v126, 0, v128, v129);
  v131 = v357;
  v278 = v356;
  v279 = v358;
  v132 = v359;
  if ((v285 & 1) != 0)
    v133 = 2.1;
  else
    v133 = v112;
  v285 = *((_QWORD *)&v360 + 1);
  v280 = v360;
  v134 = static UnitPoint.center.getter(v130);
  v136 = v135;
  v310 = v131;
  v308 = v132;
  v306 = 1;
  v137 = sub_100037014(v109);
  v328 = v348;
  v329[0] = v349[0];
  *(_OWORD *)((char *)v329 + 9) = *(_OWORD *)((char *)v349 + 9);
  v324 = v344;
  v325 = v345;
  v326 = v346;
  v327 = v347;
  v320 = v340;
  v321 = v341;
  v322 = v342;
  v323 = v343;
  v315 = v335;
  v316 = v336;
  v317 = v337;
  v138 = v310;
  v139 = v308;
  LODWORD(v277) = v306;
  v318 = v338;
  v319 = v339;
  v140 = sub_1000398C8(&v335);
  v141 = static Alignment.top.getter(v140);
  v143 = v142;
  v144 = v257;
  sub_100039104(v106, v122, v257);
  v145 = (uint64_t *)(v144 + *(int *)(v256 + 36));
  *v145 = v141;
  v145[1] = v143;
  sub_100012534(v144, (uint64_t)&v29[*(int *)(v255 + 36)], &qword_100051F08);
  v146 = v328;
  v147 = v329[0];
  v148 = v326;
  *((_OWORD *)v29 + 12) = v327;
  *((_OWORD *)v29 + 13) = v146;
  v149 = v329[1];
  *((_OWORD *)v29 + 14) = v147;
  *((_OWORD *)v29 + 15) = v149;
  v150 = v324;
  v151 = v325;
  v152 = v322;
  *((_OWORD *)v29 + 8) = v323;
  *((_OWORD *)v29 + 9) = v150;
  *((_OWORD *)v29 + 10) = v151;
  *((_OWORD *)v29 + 11) = v148;
  v153 = v320;
  v154 = v321;
  v155 = v318;
  *((_OWORD *)v29 + 4) = v319;
  *((_OWORD *)v29 + 5) = v153;
  *((_OWORD *)v29 + 6) = v154;
  *((_OWORD *)v29 + 7) = v152;
  v156 = v316;
  *(_OWORD *)v29 = v315;
  *((_OWORD *)v29 + 1) = v156;
  *((_OWORD *)v29 + 2) = v317;
  *((_OWORD *)v29 + 3) = v155;
  v157 = v278;
  *((_QWORD *)v29 + 32) = v286;
  *((_QWORD *)v29 + 33) = v157;
  v29[272] = v138;
  *(_DWORD *)(v29 + 273) = v309[0];
  *((_DWORD *)v29 + 69) = *(_DWORD *)((char *)v309 + 3);
  *((_QWORD *)v29 + 35) = v279;
  v29[288] = v139;
  *(_DWORD *)(v29 + 289) = v307[0];
  *((_DWORD *)v29 + 73) = *(_DWORD *)((char *)v307 + 3);
  v158 = v285;
  *((_QWORD *)v29 + 37) = v280;
  *((_QWORD *)v29 + 38) = v158;
  *((_QWORD *)v29 + 39) = 0;
  v29[320] = v277;
  *(_WORD *)(v29 + 321) = 0;
  v29[323] = 1;
  *((_QWORD *)v29 + 41) = v115;
  *((double *)v29 + 42) = v133;
  *((_QWORD *)v29 + 43) = 0x4020000000000000;
  v29[352] = 0;
  *((_DWORD *)v29 + 89) = *(_DWORD *)&v305[3];
  *(_DWORD *)(v29 + 353) = *(_DWORD *)v305;
  *((_QWORD *)v29 + 45) = 0x3FEB333333333333;
  *((_QWORD *)v29 + 46) = 0x3FEB333333333333;
  *((double *)v29 + 47) = v134;
  *((_QWORD *)v29 + 48) = v136;
  *((double *)v29 + 49) = v137;
  *((_OWORD *)v29 + 25) = xmmword_100041AC0;
  v159 = v287;
  *((_QWORD *)v29 + 52) = v288;
  *((_QWORD *)v29 + 53) = v159;
  v160 = sub_100004EE0(v144, &qword_100051F08);
  v161 = static Alignment.topLeading.getter(v160);
  v163 = v162;
  sub_100037254((uint64_t)&v311);
  v303 = v311;
  v164 = v312;
  v165 = v313;
  LOBYTE(v143) = v314;
  v166 = v258;
  sub_100012534((uint64_t)v29, v258, &qword_100051F10);
  v167 = v259;
  v168 = v166 + *(int *)(v259 + 36);
  *(_OWORD *)v168 = v303;
  *(_QWORD *)(v168 + 16) = v164;
  *(_QWORD *)(v168 + 24) = v165;
  *(_BYTE *)(v168 + 32) = v143;
  *(_QWORD *)(v168 + 40) = v161;
  *(_QWORD *)(v168 + 48) = v163;
  sub_100004EE0((uint64_t)v29, &qword_100051F10);
  v169 = sub_10003995C();
  v170 = (uint64_t)v261;
  View.accessibilityHidden(_:)(1, v167, v169);
  sub_100004EE0(v166, &qword_100051F18);
  v172 = v264;
  v171 = v265;
  v173 = v266;
  (*(void (**)(char *, _QWORD, uint64_t))(v265 + 104))(v264, enum case for ColorRenderingMode.nonLinear(_:), v266);
  v174 = sub_1000398F0();
  v175 = v260;
  v176 = v296;
  View.drawingGroup(opaque:colorMode:)(0, v172, v296, v174);
  (*(void (**)(char *, uint64_t))(v171 + 8))(v172, v173);
  sub_100004EE0(v170, &qword_100051F20);
  v178 = v262;
  v177 = v263;
  v179 = v297;
  (*(void (**)(char *, char *, uint64_t))(v263 + 32))(v262, v175, v297);
  v180 = v292;
  (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v292, v178, v179);
  swift_storeEnumTagMultiPayload(v180);
  v181 = sub_100003FC4(&qword_100051F40);
  *(_QWORD *)&v311 = v176;
  *((_QWORD *)&v311 + 1) = v174;
  v182 = swift_getOpaqueTypeConformance2(&v311, &opaque type descriptor for <<opaque return type of View.drawingGroup(opaque:colorMode:)>>, 1);
  v183 = sub_100039A84(&qword_100051FF8, &qword_100051F40, &qword_100052000, &qword_100052008);
  v184 = (uint64_t)v298;
  _ConditionalContent<>.init(storage:)(v180, v179, v181, v182, v183);
  swift_release(v293);
  (*(void (**)(char *, uint64_t))(v177 + 8))(v178, v179);
  (*(void (**)(char *, uint64_t))(v299 + 8))(v289, v300);
LABEL_20:
  PersonStatusSet.badge.getter(&v311);
  v227 = (uint64_t)v295;
  v229 = (uint64_t)v283;
  v228 = (uint64_t)v284;
  v231 = v281;
  v230 = v282;
  if (v313)
  {
    sub_100004F70(&v311, (uint64_t)&v315);
    v232 = *((_QWORD *)&v316 + 1);
    v233 = v317;
    sub_10001190C(&v315, *((uint64_t *)&v316 + 1));
    if ((dispatch thunk of BadgeStatus.useIconAsTextPrefix.getter(v232, v233) & 1) == 0)
    {
      v235 = type metadata accessor for PersonStatusSet(0);
      v236 = (uint64_t)v270;
      v237 = v304;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v235 - 8) + 16))(v270, v304, v235);
      UIFontForLanguage = CTFontCreateUIFontForLanguage(kCTFontUIFontSystem, 25.0, 0);
      v239 = (int *)v267;
      *(_QWORD *)(v236 + *(int *)(v267 + 20)) = UIFontForLanguage;
      *(_QWORD *)(v236 + v239[6]) = 0x4000000000000000;
      *(_QWORD *)(v236 + v239[7]) = 0x4010000000000000;
      v240 = (_QWORD *)(v236 + v239[8]);
      *v240 = swift_getKeyPath(&unk_100041C10);
      sub_100003FC4(&qword_1000506F8);
      swift_storeEnumTagMultiPayload(v240);
      v241 = 0.0;
      if (*(_BYTE *)(v237 + *(int *)(v291 + 36)))
        v241 = 2.0;
      v242 = v241 - v251[1] - v251[3];
      v243 = -v241 - *v251;
      v244 = v269;
      sub_100004E9C(v236, v269, type metadata accessor for StatusBadgeView);
      v245 = (double *)(v244 + *(int *)(v230 + 36));
      *v245 = v242;
      v245[1] = v243;
      sub_10000501C(v236, type metadata accessor for StatusBadgeView);
      v246 = v244;
      v247 = v268;
      sub_100004F98(v246, v268, &qword_100051EF0);
      sub_100004F98(v247, v229, &qword_100051EF0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v231 + 56))(v229, 0, 1, v230);
      sub_10000D160(&v315);
      v234 = v301;
      goto LABEL_28;
    }
    sub_10000D160(&v315);
  }
  else
  {
    sub_100004EE0((uint64_t)&v311, &qword_100051258);
  }
  v234 = v301;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v231 + 56))(v229, 1, 1, v230);
LABEL_28:
  v248 = v294;
  sub_100012534(v184, v294, &qword_100051F30);
  sub_100012534(v229, v228, &qword_100051EF8);
  sub_100012534(v248, v227, &qword_100051F30);
  v249 = sub_100003FC4(&qword_100052010);
  sub_100012534(v228, v227 + *(int *)(v249 + 48), &qword_100051EF8);
  swift_release(v302);
  sub_100004EE0(v229, &qword_100051EF8);
  sub_100004EE0(v184, &qword_100051F30);
  sub_100004EE0(v228, &qword_100051EF8);
  sub_100004EE0(v248, &qword_100051F30);
  v250 = sub_100003FC4(&qword_100051F38);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v250 - 8) + 56))(v227, 0, 1, v250);
  return sub_100004F98(v227, v234, &qword_100051EE8);
}

uint64_t sub_100039104@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[3];

  v37 = a2;
  v38 = a3;
  v4 = sub_100003FC4(&qword_100051D40);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Image.ResizingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003FC4(&qword_100051D48);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100003FC4(&qword_100052018);
  __chkstk_darwin(v35);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100003FC4(&qword_100052020);
  __chkstk_darwin(v36);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Image.ResizingMode.stretch(_:), v7);
  v19 = Image.resizable(capInsets:resizingMode:)(v10, a1, 0.0, 0.0, 0.0, 0.0);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  static WidgetAccentedRenderingMode.fullColor.getter(v20);
  v21 = type metadata accessor for WidgetAccentedRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 0, 1, v21);
  Image.widgetAccentedRenderingMode(_:)(v6, v19);
  swift_release(v19);
  sub_100004EE0((uint64_t)v6, &qword_100051D40);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v14, v11);
  v22 = &v16[*(int *)(v35 + 36)];
  *(_QWORD *)v22 = 0;
  *((_WORD *)v22 + 4) = 1;
  v23 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v24 = GeometryProxy.size.getter(v23);
  GeometryProxy.size.getter(v25);
  v27 = v26;
  v29 = static Alignment.center.getter(v28);
  _FrameLayout.init(width:height:alignment:)(v39, *(_QWORD *)&v24, 0, v27, 0, v29, v30);
  sub_100012534((uint64_t)v16, (uint64_t)v18, &qword_100052018);
  v31 = &v18[*(int *)(v36 + 36)];
  v32 = v39[1];
  *(_OWORD *)v31 = v39[0];
  *((_OWORD *)v31 + 1) = v32;
  *((_OWORD *)v31 + 2) = v39[2];
  sub_100004EE0((uint64_t)v16, &qword_100052018);
  v33 = v38;
  sub_100012534((uint64_t)v18, v38, &qword_100052020);
  *(_WORD *)(v33 + *(int *)(sub_100003FC4(&qword_100052028) + 36)) = 256;
  return sub_100004EE0((uint64_t)v18, &qword_100052020);
}

uint64_t sub_100039404(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  double v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v3 = a1 + *(int *)(type metadata accessor for AvatarView(0) + 48);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(unsigned __int8 *)(v3 + 24);
  v8 = *(unsigned __int8 *)(v3 + 25);
  sub_100035F24(*(_QWORD *)v3, v5, v6, v7, *(_BYTE *)(v3 + 25));
  v9 = sub_10001C804(v4, v5, v6, v7 | (v8 << 8));
  v11 = v10;
  v13 = v12;
  v15 = v14;
  sub_10001D350(v4, v5, v6, v7, v8);
  v20 = v9;
  v21 = v11;
  v22 = v13;
  v23 = v15 & 1;
  v18 = a2;
  v19 = 0;
  v16 = sub_100003FC4(&qword_100051ED0);
  Binding.wrappedValue.setter(&v18, v16);
  swift_release(v11);
  return swift_release(v9);
}

uint64_t sub_100039510()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for AvatarView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);

  v8 = v0 + v4 + v1[7];
  v9 = type metadata accessor for ContactImage(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_release(*(_QWORD *)(v6 + v1[8]));
  v11 = v6 + v1[11];
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v6 + v1[12];
  sub_10001D350(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(unsigned __int8 *)(v13 + 24), *(_BYTE *)(v13 + 25));
  v14 = (_QWORD *)(v6 + v1[15]);
  v15 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10003967C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AvatarView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000396C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AvatarView(0) - 8) + 80);
  return sub_100037A60(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_10003970C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for AvatarView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);

  v8 = v0 + v4 + v1[7];
  v9 = type metadata accessor for ContactImage(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_release(*(_QWORD *)(v6 + v1[8]));
  v11 = v6 + v1[11];
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v6 + v1[12];
  sub_10001D350(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(unsigned __int8 *)(v13 + 24), *(_BYTE *)(v13 + 25));
  v14 = (_QWORD *)(v6 + v1[15]);
  v15 = sub_100003FC4(&qword_1000506E0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_100039884()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for AvatarView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100039404(v0 + v2, *(double *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

_QWORD *sub_1000398C8(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

unint64_t sub_1000398F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051F48;
  if (!qword_100051F48)
  {
    v1 = sub_100004004(&qword_100051F20);
    sub_10003995C();
    sub_100039C1C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051F48);
  }
  return result;
}

unint64_t sub_10003995C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051F50;
  if (!qword_100051F50)
  {
    v1 = sub_100004004(&qword_100051F18);
    sub_1000399E0();
    sub_100005084(&qword_100051FE8, &qword_100051FF0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051F50);
  }
  return result;
}

unint64_t sub_1000399E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051F58;
  if (!qword_100051F58)
  {
    v1 = sub_100004004(&qword_100051F10);
    sub_100039A84(&qword_100051F60, &qword_100051F68, &qword_100051FD0, &qword_100051FD8);
    sub_100005084(&qword_100051FE0, &qword_100051F08, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051F58);
  }
  return result;
}

uint64_t sub_100039A84(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100004004(a2);
    sub_10002F524(&qword_100051F70, &qword_100051F78, (void (*)(void))sub_100039B2C);
    sub_100005084(a3, a4, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100039B2C()
{
  return sub_10002F524(&qword_100051F80, &qword_100051F88, (void (*)(void))sub_100039B50);
}

uint64_t sub_100039B50()
{
  return sub_10002F524(&qword_100051F90, &qword_100051F98, (void (*)(void))sub_100039B74);
}

uint64_t sub_100039B74()
{
  return sub_10002F524(&qword_100051FA0, &qword_100051FA8, (void (*)(void))sub_100039B98);
}

unint64_t sub_100039B98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051FB0;
  if (!qword_100051FB0)
  {
    v1 = sub_100004004(&qword_100051FB8);
    sub_100005084(&qword_100051FC0, &qword_100051FC8, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100051FB0);
  }
  return result;
}

unint64_t sub_100039C1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100051A30;
  if (!qword_100051A30)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_100051A30);
  }
  return result;
}

unint64_t sub_100039C6C()
{
  unint64_t result;

  result = qword_100052038;
  if (!qword_100052038)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100052038);
  }
  return result;
}

uint64_t sub_100039CB0()
{
  return sub_10002F524(&qword_100052040, &qword_100052048, (void (*)(void))sub_100039CE4);
}

uint64_t sub_100039CE4()
{
  return sub_10002F524(&qword_100052050, &qword_100052058, (void (*)(void))sub_100039D08);
}

unint64_t sub_100039D08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100052060;
  if (!qword_100052060)
  {
    v1 = sub_100004004(&qword_100052068);
    sub_100005084(&qword_100052070, &qword_100052078, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100052060);
  }
  return result;
}

uint64_t *sub_100039D8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for PersonInfo(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100003FC4(&qword_100050690);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_100039E94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for PersonInfo(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

char *sub_100039F14(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for PersonInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100003FC4(&qword_100050690);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

char *sub_100039FF0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for PersonInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100003FC4(&qword_100050690);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

char *sub_10003A118(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for PersonInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100003FC4(&qword_100050690);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

char *sub_10003A1F4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for PersonInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100003FC4(&qword_100050690);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_10003A31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003A328);
}

uint64_t sub_10003A328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_100003FC4(&qword_100050690);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10003A3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003A3AC);
}

uint64_t sub_10003A3AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_100003FC4(&qword_100050690);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for UUID(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SingleContactSmallWidgetView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000520D8;
  if (!qword_1000520D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SingleContactSmallWidgetView);
  return result;
}

void sub_10003A468(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_10003A4EC(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for UUID(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_10003A4EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100050C60)
  {
    v2 = type metadata accessor for PersonInfo(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100050C60);
  }
}

uint64_t sub_10003A540(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000428A0, 1);
}

uint64_t sub_10003A550@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _OWORD v43[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a7;
    v40 = a1;
    v41 = a5;
    v39 = a3;
    v38 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v38;
    v19 = a10;
    a3 = v39;
    a1 = v40;
    a5 = v41;
    v18 = a12;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v43[2];
  *(_OWORD *)(a9 + 56) = v43[3];
  v35 = v43[5];
  *(_OWORD *)(a9 + 72) = v43[4];
  *(_OWORD *)(a9 + 88) = v35;
  *(_OWORD *)(a9 + 104) = v43[6];
  v36 = v43[1];
  *(_OWORD *)(a9 + 8) = v43[0];
  *(_OWORD *)(a9 + 24) = v36;
  *(_QWORD *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v34;
  return swift_retain(a16);
}

_QWORD *sub_10003A6F8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, __int128 *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  __int128 *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unsigned int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _OWORD v49[7];
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _BYTE v53[32];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v47 = a5;
    v48 = a7;
    v46 = a3;
    v45 = a1;
    v44 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v44;
    v19 = a10;
    a1 = v45;
    a3 = v46;
    v18 = a12;
    a5 = v47;
    a7 = v48;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v49, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[1];
  v50 = *v15;
  v51 = v34;
  sub_10003C330((uint64_t)&v50, (uint64_t)v53);
  v35 = v15[1];
  *a9 = *v15;
  a9[1] = v35;
  v36 = v15[2];
  v37 = v49[4];
  v38 = v49[5];
  v39 = v49[2];
  a9[6] = v49[3];
  a9[7] = v37;
  v40 = v49[6];
  a9[8] = v38;
  a9[9] = v40;
  v41 = v49[0];
  v42 = v49[1];
  a9[2] = v36;
  a9[3] = v41;
  v52 = *((_QWORD *)&v51 + 1);
  a9[4] = v42;
  a9[5] = v39;
  sub_10003C36C((uint64_t)v53);
  return sub_10003C39C(&v52);
}

double sub_10003A8B4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10003A964(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000511A8, &qword_1000511B0).n128_u64[0];
  return result;
}

double sub_10003A90C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10003A964(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000517E8, &qword_1000517F0).n128_u64[0];
  return result;
}

__n128 sub_10003A964@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_100012534(v18, v19, a16);
  v41 = v19 + *(int *)(sub_100003FC4(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

uint64_t sub_10003AB30@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int16 a19)
{
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  double v33;
  double v35;
  double v36;
  double v37;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned int v46;
  unsigned int v47;
  double v48;
  double v49;
  double v50;
  double v51;
  _OWORD v52[7];

  v20 = a19;
  v21 = a15;
  v22 = a16;
  v23 = a14;
  v24 = a12;
  v25 = a10;
  v26 = a2 & 1;
  v27 = a1;
  if ((_DWORD)v26)
    v27 = -INFINITY;
  v28 = a4 & 1;
  v29 = a3;
  if ((_DWORD)v28)
    v29 = v27;
  v30 = a6 & 1;
  v31 = a8 & 1;
  v32 = a11 & 1;
  v33 = a5;
  if ((a6 & 1) != 0)
    v33 = v29;
  if (v27 > v29 || v29 > v33)
    goto LABEL_22;
  v35 = a7;
  if ((a8 & 1) != 0)
    v35 = -INFINITY;
  v36 = a10;
  if ((a11 & 1) != 0)
    v36 = v35;
  v37 = a12;
  if ((a13 & 1) != 0)
    v37 = v36;
  if (v35 > v36 || v36 > v37)
  {
LABEL_22:
    v51 = a7;
    v49 = a3;
    v50 = a5;
    v48 = a1;
    v47 = v26;
    v46 = v28;
    v39 = static os_log_type_t.fault.getter();
    v40 = (void *)static Log.runtimeIssuesLog.getter();
    v41 = v39;
    v20 = a19;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v40, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v32 = a11 & 1;
    v28 = v46;
    v23 = a14;
    v21 = a15;
    v26 = v47;
    v25 = a10;
    v24 = a12;
    a1 = v48;
    a3 = v49;
    a5 = v50;
    a7 = v51;
    v22 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v52, *(_QWORD *)&a1, v26, *(_QWORD *)&a3, v28, *(_QWORD *)&a5, v30, *(_QWORD *)&a7, v31, *(_QWORD *)&v25, v32, *(_QWORD *)&v24, a13 & 1, v23, v21);
  *(_QWORD *)a9 = v22;
  *(_QWORD *)(a9 + 8) = a17;
  *(_QWORD *)(a9 + 16) = a18;
  *(_BYTE *)(a9 + 24) = v20 & 1;
  *(_BYTE *)(a9 + 25) = HIBYTE(v20) & 1;
  v42 = v52[5];
  *(_OWORD *)(a9 + 96) = v52[4];
  *(_OWORD *)(a9 + 112) = v42;
  *(_OWORD *)(a9 + 128) = v52[6];
  v43 = v52[1];
  *(_OWORD *)(a9 + 32) = v52[0];
  *(_OWORD *)(a9 + 48) = v43;
  v44 = v52[3];
  *(_OWORD *)(a9 + 64) = v52[2];
  *(_OWORD *)(a9 + 80) = v44;
  return swift_retain(a17);
}

__n128 sub_10003AD04@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __n128 result;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v21;
    v33 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v40;
    a1 = v41;
    v20 = a10;
    a3 = v42;
    v19 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  v35 = sub_100003FC4(&qword_100052118);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(a9, v16, v35);
  v36 = a9 + *(int *)(sub_100003FC4(&qword_100052120) + 36);
  v37 = v45[5];
  *(_OWORD *)(v36 + 64) = v45[4];
  *(_OWORD *)(v36 + 80) = v37;
  *(_OWORD *)(v36 + 96) = v45[6];
  v38 = v45[1];
  *(_OWORD *)v36 = v45[0];
  *(_OWORD *)(v36 + 16) = v38;
  result = (__n128)v45[3];
  *(_OWORD *)(v36 + 32) = v45[2];
  *(__n128 *)(v36 + 48) = result;
  return result;
}

double sub_10003AED0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10003A964(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100052140, &qword_100052148).n128_u64[0];
  return result;
}

double sub_10003AF28@<D0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  double result;
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  char v8;

  v2 = sub_100035A44();
  EnvironmentValues.subscript.getter(&v6, &type metadata for AvatarSizeBindingEnvironmentKey, &type metadata for AvatarSizeBindingEnvironmentKey, v2);
  result = *(double *)&v6;
  v4 = v7;
  v5 = v8;
  *(_OWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_10003AF84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  _QWORD v6[3];
  char v7;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v6[0] = *(_QWORD *)a1;
  v6[1] = v1;
  v6[2] = v2;
  v7 = v3;
  v4 = sub_100035A44();
  swift_retain(v6[0]);
  swift_retain(v1);
  return EnvironmentValues.subscript.setter(v6, &type metadata for AvatarSizeBindingEnvironmentKey, &type metadata for AvatarSizeBindingEnvironmentKey, v4);
}

uint64_t sub_10003AFF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.fontDefinition.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10003B020(_QWORD *a1)
{
  return EnvironmentValues.fontDefinition.setter(*a1, a1[1]);
}

uint64_t sub_10003B048()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_10003B068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003C0D0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(char *))&EnvironmentValues.sizeCategory.setter);
}

uint64_t sub_10003B07C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = v1;
  v50 = a1;
  v46 = type metadata accessor for AccessibilityChildBehavior(0);
  v44 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100003FC4(&qword_100052110);
  __chkstk_darwin(v41);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100003FC4(&qword_100052118);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003FC4(&qword_100052120);
  __chkstk_darwin(v9);
  v49 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PersonStatusSet(0);
  v47 = *(_QWORD *)(v11 - 8);
  v48 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Person(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003FC4(&qword_100050690);
  __chkstk_darwin(v18);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v2;
  sub_100012534(v2, (uint64_t)v20, &qword_100050690);
  v21 = type metadata accessor for PersonInfo(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
  if ((_DWORD)v23 == 1)
  {
    sub_100004EE0((uint64_t)v20, &qword_100050690);
    v24 = &_swiftEmptyArrayStorage;
  }
  else
  {
    PersonInfo.person.getter(v23);
    v25 = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v20, v21);
    v24 = (void *)Person.statuses.getter(v25);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  type metadata accessor for PeopleFeatureFlags(0);
  v26 = static PeopleFeatureFlags.shared.getter();
  static StatusCompatiblePicker.statusForDisplay(from:featureFlags:)(v24, v26);
  swift_release(v26);
  v27 = swift_bridgeObjectRelease(v24);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v27);
  *((_QWORD *)v6 + 1) = 0x4020000000000000;
  v6[16] = 0;
  v28 = sub_100003FC4(&qword_100052128);
  v29 = sub_10003B484((uint64_t)v13, v42, &v6[*(int *)(v28 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v29);
  v30 = sub_10003C030();
  View.accessibilityElement(children:)(v4, v41, v30);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v4, v46);
  v31 = sub_100004EE0((uint64_t)v6, &qword_100052110);
  v32 = static Alignment.center.getter(v31);
  v33 = v49;
  v35 = sub_10003AD04(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v49, 0.0, 1, 0.0, 1, v32, v34);
  (*(void (**)(char *, uint64_t, __n128))(v43 + 8))(v8, v45, v35);
  KeyPath = swift_getKeyPath(&unk_100041CB0);
  v37 = sub_100003FC4(&qword_100052138);
  v38 = v50;
  v39 = (uint64_t *)(v50 + *(int *)(v37 + 36));
  *v39 = KeyPath;
  sub_100003FC4(&qword_1000506F0);
  swift_storeEnumTagMultiPayload(v39);
  *((_BYTE *)v39 + *(int *)(type metadata accessor for TimeStampModifier(0) + 20)) = 1;
  sub_100004F98(v33, v38, &qword_100052120);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v13, v48);
}

uint64_t sub_10003B484@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t KeyPath;
  uint64_t v59;
  uint64_t *v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  char *v101;
  char *v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  char *v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  void (*v109)(char *, uint64_t);
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t (*v120)(char *, uint64_t, uint64_t);
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t *v134;
  char *v135;
  uint64_t *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t (*v143)(char *, uint64_t, uint64_t);
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  void *v153;

  v142 = a2;
  v146 = a1;
  v140 = a3;
  v3 = sub_100003FC4(&qword_1000506B0);
  __chkstk_darwin(v3);
  v136 = (uint64_t *)((char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100003FC4(&qword_1000506B8);
  __chkstk_darwin(v5);
  v134 = (uint64_t *)((char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v130 = type metadata accessor for ContactFormatter.Style(0);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v131 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for StatusAndNameView(0);
  __chkstk_darwin(v122);
  v9 = (uint64_t *)((char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v139 = sub_100003FC4(&qword_1000506C0);
  v137 = *(_QWORD *)(v139 - 8);
  v10 = __chkstk_darwin(v139);
  v138 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v133 = (char *)&v111 - v13;
  __chkstk_darwin(v12);
  v135 = (char *)&v111 - v14;
  v149 = type metadata accessor for AccessibilityChildBehavior(0);
  v126 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v148 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for UUID(0);
  v123 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v121 = (char *)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003FC4(&qword_1000506C8);
  __chkstk_darwin(v17);
  v141 = (uint64_t)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for Person(0);
  v19 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v21 = (char *)&v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003FC4(&qword_100050690);
  v23 = __chkstk_darwin(v22);
  v125 = (uint64_t)&v111 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v111 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v111 - v28;
  v30 = type metadata accessor for PersonStatusSet(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v128 = (char *)&v111 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v35 = (char *)&v111 - v34;
  v36 = (int *)type metadata accessor for AvatarView(0);
  __chkstk_darwin(v36);
  v38 = (char *)&v111 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100003FC4(&qword_1000506D0);
  v150 = *(_QWORD *)(v147 - 8);
  v39 = __chkstk_darwin(v147);
  v132 = (char *)&v111 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __chkstk_darwin(v39);
  v119 = (char *)&v111 - v42;
  __chkstk_darwin(v41);
  v145 = (char *)&v111 - v43;
  v117 = v31;
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v116 = v35;
  v45 = v35;
  v46 = v142;
  v144 = v30;
  v120 = v44;
  v44(v45, v146, v30);
  sub_100012534(v46, (uint64_t)v29, &qword_100050690);
  v47 = type metadata accessor for PersonInfo(0);
  v48 = *(_QWORD *)(v47 - 8);
  v143 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v49 = v143(v29, 1, v47);
  v111 = v21;
  v118 = v48;
  if ((_DWORD)v49 == 1)
  {
    sub_100004EE0((uint64_t)v29, &qword_100050690);
    v113 = 0;
  }
  else
  {
    PersonInfo.person.getter(v49);
    v50 = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v29, v47);
    v113 = Person.contact.getter(v50);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v127);
  }
  sub_100012534(v46, (uint64_t)v27, &qword_100050690);
  v51 = v143(v27, 1, v47);
  v112 = v19;
  v114 = v47;
  if ((_DWORD)v51 == 1)
  {
    sub_100004EE0((uint64_t)v27, &qword_100050690);
    v52 = type metadata accessor for ContactImage(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v141, 1, 1, v52);
  }
  else
  {
    PersonInfo.contactImage.getter(v51);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v27, v47);
  }
  v53 = type metadata accessor for SingleContactSmallWidgetView(0);
  v54 = v123;
  v55 = v121;
  v56 = v124;
  (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v121, v46 + *(int *)(v53 + 20), v124);
  type metadata accessor for ContactFetcher(0);
  v57 = ContactFetcher.__allocating_init()();
  KeyPath = swift_getKeyPath(&unk_100041CE0);
  v59 = swift_getKeyPath(&unk_100041D08);
  v60 = (uint64_t *)&v38[v36[15]];
  *v60 = v59;
  v115 = sub_100003FC4(&qword_1000506E0);
  swift_storeEnumTagMultiPayload(v60);
  v61 = *(void (**)(char *, char *, uint64_t))(v117 + 32);
  v61(v38, v116, v144);
  *(_QWORD *)&v38[v36[5]] = v113;
  v62 = &v38[v36[6]];
  *(_QWORD *)v62 = 0;
  v62[8] = 1;
  sub_100004F98(v141, (uint64_t)&v38[v36[7]], &qword_1000506C8);
  *(_QWORD *)&v38[v36[8]] = v57;
  v38[v36[9]] = 0;
  v38[v36[10]] = 1;
  v63 = (*(uint64_t (**)(char *, char *, uint64_t))(v54 + 32))(&v38[v36[11]], v55, v56);
  v64 = &v38[v36[12]];
  *((_QWORD *)v64 + 1) = 0;
  *((_QWORD *)v64 + 2) = 0;
  *(_QWORD *)v64 = KeyPath;
  *((_WORD *)v64 + 12) = 0;
  v65 = v36[13];
  *(double *)&v38[v65] = static PeopleWidgetConstants.maxContactAvatarSize.getter(v63);
  v66 = &v38[v36[14]];
  *(_OWORD *)v66 = xmmword_100040540;
  *((_OWORD *)v66 + 1) = xmmword_100040550;
  v67 = v148;
  static AccessibilityChildBehavior.combine.getter(v68);
  v69 = sub_100004FDC(&qword_1000506E8, type metadata accessor for AvatarView, (uint64_t)&unk_100041BC0);
  v70 = v119;
  View.accessibilityElement(children:)(v67, v36, v69);
  v71 = *(void (**)(char *, uint64_t))(v126 + 8);
  v71(v67, v149);
  sub_10000501C((uint64_t)v38, type metadata accessor for AvatarView);
  (*(void (**)(char *, char *, uint64_t))(v150 + 32))(v145, v70, v147);
  v72 = v125;
  sub_100012534(v142, v125, &qword_100050690);
  v73 = v114;
  v74 = v143((char *)v72, 1, v114);
  if ((_DWORD)v74 == 1)
  {
    sub_100004EE0(v72, &qword_100050690);
    v75 = 0;
  }
  else
  {
    v76 = v111;
    PersonInfo.person.getter(v74);
    v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v118 + 8))(v72, v73);
    v75 = Person.contact.getter(v77);
    (*(void (**)(char *, uint64_t))(v112 + 8))(v76, v127);
  }
  v78 = v128;
  v79 = v144;
  v80 = v120(v128, v146, v144);
  v81 = static Font.footnote.getter(v80);
  v82 = v131;
  (*(void (**)(char *, _QWORD, uint64_t))(v129 + 104))(v131, enum case for ContactFormatter.Style.shortName(_:), v130);
  v83 = String.localized.getter(0x656D614E206F4ELL, 0xE700000000000000);
  v85 = v84;
  v152 = type metadata accessor for ContactFormatter(0);
  v153 = &protocol witness table for ContactFormatter;
  sub_100004F2C(&v151);
  ContactFormatter.init(style:fallback:)(v82, v83, v85);
  v86 = swift_getKeyPath(&unk_100041D08);
  v87 = (uint64_t)v134;
  *v134 = v86;
  swift_storeEnumTagMultiPayload(v87);
  v88 = swift_getKeyPath(&unk_100041CB0);
  v89 = (uint64_t)v136;
  *v136 = v88;
  sub_100003FC4(&qword_1000506F0);
  swift_storeEnumTagMultiPayload(v89);
  *v9 = v75;
  v90 = (int *)v122;
  v61((char *)v9 + *(int *)(v122 + 20), v78, v79);
  *(uint64_t *)((char *)v9 + v90[6]) = v81;
  *(uint64_t *)((char *)v9 + v90[7]) = 0x4008000000000000;
  sub_100004F70(&v151, (uint64_t)v9 + v90[8]);
  *(uint64_t *)((char *)v9 + v90[9]) = 2;
  *(uint64_t *)((char *)v9 + v90[10]) = 1;
  *(uint64_t *)((char *)v9 + v90[11]) = 0x7FF0000000000000;
  v91 = (char *)v9 + v90[12];
  *(_QWORD *)v91 = swift_getKeyPath(&unk_100041D38);
  *((_QWORD *)v91 + 1) = 0;
  v91[16] = 0;
  v92 = (uint64_t *)((char *)v9 + v90[13]);
  *v92 = swift_getKeyPath(&unk_100041D68);
  sub_100003FC4(&qword_1000506F8);
  swift_storeEnumTagMultiPayload(v92);
  sub_100004F98(v87, (uint64_t)v9 + v90[14], &qword_1000506B8);
  v93 = sub_100004F98(v89, (uint64_t)v9 + v90[15], &qword_1000506B0);
  v94 = v148;
  static AccessibilityChildBehavior.combine.getter(v93);
  v95 = sub_100004FDC(&qword_100050700, type metadata accessor for StatusAndNameView, (uint64_t)&unk_100040F60);
  v96 = v133;
  View.accessibilityElement(children:)(v94, v90, v95);
  v71(v94, v149);
  sub_10000501C((uint64_t)v9, type metadata accessor for StatusAndNameView);
  v97 = v137;
  v98 = v135;
  v99 = v139;
  (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v135, v96, v139);
  v100 = *(void (**)(char *, char *, uint64_t))(v150 + 16);
  v101 = v132;
  v102 = v145;
  v103 = v147;
  v100(v132, v145, v147);
  v104 = *(void (**)(char *, char *, uint64_t))(v97 + 16);
  v105 = v138;
  v104(v138, v98, v99);
  v106 = v140;
  v100(v140, v101, v103);
  v107 = sub_100003FC4(&qword_100050708);
  v104(&v106[*(int *)(v107 + 48)], v105, v99);
  v108 = *(void (**)(char *, uint64_t))(v97 + 8);
  v108(v98, v99);
  v109 = *(void (**)(char *, uint64_t))(v150 + 8);
  v109(v102, v103);
  v108(v105, v99);
  return ((uint64_t (*)(char *, uint64_t))v109)(v101, v103);
}

unint64_t sub_10003C030()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100052130;
  if (!qword_100052130)
  {
    v1 = sub_100004004(&qword_100052110);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100052130);
  }
  return result;
}

uint64_t sub_10003C07C()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_10003C09C()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_10003C0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003C0D0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_10003C0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_10003C14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003C0D0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_10003C180@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.fontDefinition.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10003C1A8(_QWORD *a1)
{
  return EnvironmentValues.fontDefinition.setter(*a1, a1[1]);
}

uint64_t sub_10003C1D0()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_10003C1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003C0D0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(char *))&EnvironmentValues.sizeCategory.setter);
}

unint64_t sub_10003C218()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100052150;
  if (!qword_100052150)
  {
    v1 = sub_100004004(&qword_100052138);
    sub_10003C29C();
    sub_100004FDC(&qword_100050B28, type metadata accessor for TimeStampModifier, (uint64_t)&unk_100040E58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100052150);
  }
  return result;
}

unint64_t sub_10003C29C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100052158;
  if (!qword_100052158)
  {
    v1 = sub_100004004(&qword_100052120);
    v2[0] = sub_100004004(&qword_100052110);
    v2[1] = sub_10003C030();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100052158);
  }
  return result;
}

uint64_t sub_10003C330(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Text.Storage - 1) + 32))(a2, a1);
  return a2;
}

uint64_t sub_10003C36C(uint64_t a1)
{
  sub_1000206F0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

_QWORD *sub_10003C39C(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

ValueMetadata *type metadata accessor for SingleContactWidgetNoRemote()
{
  return &type metadata for SingleContactWidgetNoRemote;
}

uint64_t sub_10003C3D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000428E4, 1);
}

uint64_t sub_10003C3E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v0 = sub_100003FC4(&qword_100052160);
  v1 = type metadata accessor for WidgetLocation(0);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_100040770;
  static WidgetLocation.iPhoneWidgetsOnMac.getter();
  v3 = sub_100003FC4(&qword_100050728);
  v4 = type metadata accessor for WidgetFamily(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v3, v7 + *(_QWORD *)(v5 + 72), v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_100040770;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v8 + v7, enum case for WidgetFamily.systemSmall(_:), v4);
  v9 = sub_10003C504();
  WidgetConfiguration.disfavoredLocations(_:for:)(v2, v8, &type metadata for SingleContactWidgetConfiguration, v9);
  swift_bridgeObjectRelease(v2);
  return swift_bridgeObjectRelease(v8);
}

unint64_t sub_10003C504()
{
  unint64_t result;

  result = qword_100052168;
  if (!qword_100052168)
  {
    result = swift_getWitnessTable(&unk_100040C24, &type metadata for SingleContactWidgetConfiguration);
    atomic_store(result, (unint64_t *)&qword_100052168);
  }
  return result;
}

uint64_t sub_10003C548()
{
  _QWORD v1[2];

  v1[0] = &type metadata for SingleContactWidgetConfiguration;
  v1[1] = sub_10003C504();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disfavoredLocations(_:for:)>>, 1);
}

ValueMetadata *type metadata accessor for MultipleContactsWidgetNoRemote()
{
  return &type metadata for MultipleContactsWidgetNoRemote;
}

uint64_t sub_10003C594(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100042950, 1);
}

uint64_t sub_10003C5A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v0 = sub_100003FC4(&qword_100052160);
  v1 = type metadata accessor for WidgetLocation(0);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_100040770;
  static WidgetLocation.iPhoneWidgetsOnMac.getter();
  if (qword_100050540 != -1)
    swift_once(&qword_100050540, sub_10000BD60);
  v3 = qword_100053460;
  v4 = sub_10003C670();
  WidgetConfiguration.disfavoredLocations(_:for:)(v2, v3, &type metadata for MultipleContactsWidgetConfiguration, v4);
  return swift_bridgeObjectRelease(v2);
}

unint64_t sub_10003C670()
{
  unint64_t result;

  result = qword_100052170;
  if (!qword_100052170)
  {
    result = swift_getWitnessTable(&unk_1000407B4, &type metadata for MultipleContactsWidgetConfiguration);
    atomic_store(result, (unint64_t *)&qword_100052170);
  }
  return result;
}

uint64_t sub_10003C6B4()
{
  _QWORD v1[2];

  v1[0] = &type metadata for MultipleContactsWidgetConfiguration;
  v1[1] = sub_10003C670();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of WidgetConfiguration.disfavoredLocations(_:for:)>>, 1);
}

void *sub_10003C6F0()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];
  _QWORD v16[2];

  v1 = objc_msgSend(v0, "id");
  if (v1)
  {
    v2 = v1;
    v3 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  }
  else
  {
    v5 = objc_msgSend(v0, "identifier");
    v3 = v5;
    if (v5)
    {
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v8 = v7;

      v16[0] = 124;
      v16[1] = 0xE100000000000000;
      __chkstk_darwin(v9);
      v15[2] = v16;
      swift_bridgeObjectRetain(v8);
      v10 = (_QWORD *)sub_10003C868(0x7FFFFFFFFFFFFFFFLL, 1, sub_10003CE5C, (uint64_t)v15, v6, v8);
      swift_bridgeObjectRelease(v8);
      if (v10[2])
      {
        v11 = v10[4];
        v12 = v10[5];
        v13 = v10[6];
        v14 = v10[7];
        swift_bridgeObjectRetain_n(v14, 2);
        swift_bridgeObjectRelease(v10);
        v3 = (void *)static String._fromSubstring(_:)(v11, v12, v13, v14);
        swift_bridgeObjectRelease_n(v14, 2);
      }
      else
      {
        swift_bridgeObjectRelease(v10);
        return 0;
      }
    }
  }
  return v3;
}

uint64_t sub_10003C868(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t result;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  _QWORD v57[4];

  v57[3] = a4;
  if (a1 < 0)
    goto LABEL_44;
  v10 = swift_allocObject(&unk_10004EBE0, 24, 7);
  *(_QWORD *)(v10 + 16) = &_swiftEmptyArrayStorage;
  v54 = swift_allocObject(&unk_10004EC08, 24, 7);
  *(_QWORD *)(v54 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v33 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v33 = 11;
    sub_10003CD04(v33 | (v11 << 16), v54, a2 & 1, v10);
    swift_bridgeObjectRelease(a6);
    v14 = *(char **)(v10 + 16);
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    v34 = v54;
LABEL_41:
    swift_release(v34);
    return (uint64_t)v14;
  }
  v49 = a1;
  v50 = v10;
  v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v48 = v13 | (v12 << 16);
  v55 = 4 * v12;
  v14 = (char *)&_swiftEmptyArrayStorage;
  v15 = 15;
  v16 = 15;
  v17 = 15;
  while (1)
  {
    v18 = String.subscript.getter(v15, a5, a6);
    v20 = v19;
    v57[0] = v18;
    v57[1] = v19;
    v21 = a3(v57);
    if (v6)
    {
      swift_release(v50);
      swift_release(v54);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(a6);
      return (uint64_t)v14;
    }
    v22 = v21;
    swift_bridgeObjectRelease(v20);
    if ((v22 & 1) != 0)
      break;
    v15 = String.index(after:)(v15, a5, a6);
LABEL_11:
    if (v55 == v15 >> 14)
      goto LABEL_31;
  }
  if (v16 >> 14 == v15 >> 14 && (a2 & 1) != 0)
  {
    v15 = String.index(after:)(v15, a5, a6);
    *(_QWORD *)(v54 + 16) = v15;
    v16 = v15;
    v17 = v15;
    goto LABEL_11;
  }
  if (v15 >> 14 < v16 >> 14)
    goto LABEL_43;
  v23 = String.subscript.getter(v16, v15, a5, a6);
  v51 = v24;
  v52 = v23;
  v26 = v25;
  v28 = v27;
  if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
    v14 = sub_10000F590(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
  v30 = *((_QWORD *)v14 + 2);
  v29 = *((_QWORD *)v14 + 3);
  if (v30 >= v29 >> 1)
    v14 = sub_10000F590((char *)(v29 > 1), v30 + 1, 1, v14);
  *((_QWORD *)v14 + 2) = v30 + 1;
  v31 = &v14[32 * v30];
  *((_QWORD *)v31 + 4) = v52;
  *((_QWORD *)v31 + 5) = v26;
  *((_QWORD *)v31 + 6) = v28;
  *((_QWORD *)v31 + 7) = v51;
  *(_QWORD *)(v50 + 16) = v14;
  v32 = String.index(after:)(v15, a5, a6);
  v15 = v32;
  *(_QWORD *)(v54 + 16) = v32;
  if (*((_QWORD *)v14 + 2) != v49)
  {
    v16 = v32;
    v17 = v32;
    goto LABEL_11;
  }
  v17 = v32;
  v16 = v32;
LABEL_31:
  if (v55 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
    v35 = v50;
LABEL_40:
    swift_bridgeObjectRetain(v14);
    swift_release(v35);
    v34 = v54;
    goto LABEL_41;
  }
  if (v55 >= v17 >> 14)
  {
    v36 = String.subscript.getter(v17, v48, a5, a6);
    v38 = v37;
    v40 = v39;
    v42 = v41;
    swift_bridgeObjectRelease(a6);
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      v14 = sub_10000F590(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
    v44 = *((_QWORD *)v14 + 2);
    v43 = *((_QWORD *)v14 + 3);
    if (v44 >= v43 >> 1)
      v14 = sub_10000F590((char *)(v43 > 1), v44 + 1, 1, v14);
    *((_QWORD *)v14 + 2) = v44 + 1;
    v45 = &v14[32 * v44];
    *((_QWORD *)v45 + 4) = v36;
    *((_QWORD *)v45 + 5) = v38;
    *((_QWORD *)v45 + 6) = v40;
    *((_QWORD *)v45 + 7) = v42;
    v35 = v50;
    *(_QWORD *)(v50 + 16) = v14;
    goto LABEL_40;
  }
LABEL_43:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
LABEL_44:
  LOBYTE(v47) = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Must take zero or more splits", 29, 2, "Swift/Collection.swift", 22, v47, 1552, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003CD04(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = String.subscript.getter();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(char **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_10000F590(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = *((_QWORD *)v14 + 2);
    v16 = *((_QWORD *)v14 + 3);
    if (v17 >= v16 >> 1)
    {
      v14 = sub_10000F590((char *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    *((_QWORD *)v14 + 2) = v17 + 1;
    v18 = &v14[32 * v17];
    *((_QWORD *)v18 + 4) = v7;
    *((_QWORD *)v18 + 5) = v9;
    *((_QWORD *)v18 + 6) = v11;
    *((_QWORD *)v18 + 7) = v13;
    return v5 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003CE5C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
}

uint64_t sub_10003CEB0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003CED4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003CEE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for Person(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003FC4(&qword_100050690);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v41 - v14;
  sub_100012534(a1, a3, &qword_100050690);
  v16 = *(int *)(type metadata accessor for SingleContactSmallWidgetVerticalView(0) + 20);
  v43 = a3;
  v17 = a3 + v16;
  v18 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v18 - 8);
  v46 = v18;
  v19 = *(void (**)(uint64_t, uint64_t))(v45 + 16);
  v47 = a2;
  v19(v17, a2);
  v44 = a1;
  sub_100012534(a1, (uint64_t)v15, &qword_100050690);
  v20 = type metadata accessor for PersonInfo(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v15, 1, v20);
  v41 = v7;
  v42 = v6;
  if ((_DWORD)v23 == 1)
  {
    sub_100004EE0((uint64_t)v15, &qword_100050690);
    v24 = &_swiftEmptyArrayStorage;
  }
  else
  {
    PersonInfo.person.getter(v23);
    v25 = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v15, v20);
    v24 = (void *)Person.statuses.getter(v25);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  type metadata accessor for PeopleFeatureFlags(0);
  v26 = static PeopleFeatureFlags.shared.getter();
  static StatusCompatiblePicker.statusForDisplay(from:featureFlags:)(v24, v26);
  swift_release(v26);
  swift_bridgeObjectRelease(v24);
  v27 = v44;
  sub_100012534(v44, (uint64_t)v13, &qword_100050690);
  v28 = v22(v13, 1, v20);
  if ((_DWORD)v28 == 1)
  {
    sub_100004EE0((uint64_t)v13, &qword_100050690);
    v29 = 0xE700000000000000;
    v30 = 0x6E776F6E6B6E55;
  }
  else
  {
    PersonInfo.person.getter(v28);
    v31 = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v13, v20);
    v32 = (void *)Person.contact.getter(v31);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v42);
    v33 = objc_msgSend(v32, "identifier");

    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v36 = v35;

    v37 = String.hashValue.getter(v34, v36);
    swift_bridgeObjectRelease(v36);
    v48 = v37;
    v38 = sub_10003D264();
    v30 = BinaryInteger.description.getter(&type metadata for Int, v38);
    v29 = v39;
  }
  type metadata accessor for PeopleAnalytics(0);
  static PeopleAnalytics.logContactWidgetUIRenderType(_:_:)(1, v30, v29);
  swift_bridgeObjectRelease(v29);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v46);
  return sub_100004EE0(v27, &qword_100050690);
}

uint64_t type metadata accessor for SingleContactSmallWidgetVerticalView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000521D8;
  if (!qword_1000521D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SingleContactSmallWidgetVerticalView);
  return result;
}

unint64_t sub_10003D264()
{
  unint64_t result;

  result = qword_100052178;
  if (!qword_100052178)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100052178);
  }
  return result;
}

uint64_t *sub_10003D2A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for PersonInfo(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100003FC4(&qword_100050690);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = *(int *)(a3 + 24);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for PersonStatusSet(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return a1;
}

uint64_t sub_10003D3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for PersonInfo(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + *(int *)(a2 + 24);
  v9 = type metadata accessor for PersonStatusSet(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

char *sub_10003D480(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for PersonInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100003FC4(&qword_100050690);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = *(int *)(a3 + 24);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

char *sub_10003D588(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = type metadata accessor for PersonInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100003FC4(&qword_100050690);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = *(int *)(a3 + 24);
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

char *sub_10003D6DC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for PersonInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100003FC4(&qword_100050690);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = *(int *)(a3 + 24);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

char *sub_10003D7E4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = type metadata accessor for PersonInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100003FC4(&qword_100050690);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = *(int *)(a3 + 24);
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t sub_10003D938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003D944);
}

uint64_t sub_10003D944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_100003FC4(&qword_100050690);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for UUID(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = type metadata accessor for PersonStatusSet(0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10003D9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003D9EC);
}

uint64_t sub_10003D9EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_100003FC4(&qword_100050690);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for UUID(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for PersonStatusSet(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10003DA90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_10003A4EC(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for UUID(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for PersonStatusSet(319);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_10003DB30(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000429A0, 1);
}

uint64_t sub_10003DB40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t KeyPath;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v85 = a2;
  v3 = type metadata accessor for UUID(0);
  v83 = *(_QWORD *)(v3 - 8);
  v84 = v3;
  __chkstk_darwin(v3);
  v82 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003FC4(&qword_1000506C8);
  __chkstk_darwin(v5);
  v80 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Person(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v70 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003FC4(&qword_100050690);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v70 - v13;
  v15 = type metadata accessor for PersonStatusSet(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for AvatarView(0);
  v20 = __chkstk_darwin(v19);
  v81 = (uint64_t)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v70 - v23;
  __chkstk_darwin(v22);
  v79 = (uint64_t)&v70 - v25;
  v26 = sub_100003FC4(&qword_100052220);
  v27 = __chkstk_darwin(v26);
  v78 = (uint64_t)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v70 - v30;
  v32 = __chkstk_darwin(v29);
  v34 = (char *)&v70 - v33;
  *(_QWORD *)v31 = static HorizontalAlignment.center.getter(v32);
  *((_QWORD *)v31 + 1) = 0;
  v31[16] = 1;
  v35 = sub_100003FC4(&qword_100052228);
  sub_10003E12C(a1, &v31[*(int *)(v35 + 44)]);
  v77 = v34;
  sub_100004F98((uint64_t)v31, (uint64_t)v34, &qword_100052220);
  v73 = type metadata accessor for SingleContactSmallWidgetVerticalView(0);
  v74 = v18;
  v36 = a1 + *(int *)(v73 + 24);
  v75 = v16;
  v76 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v36, v15);
  sub_100012534(a1, (uint64_t)v14, &qword_100050690);
  v37 = type metadata accessor for PersonInfo(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v14, 1, v37);
  if ((_DWORD)v40 == 1)
  {
    sub_100004EE0((uint64_t)v14, &qword_100050690);
    v41 = 0;
  }
  else
  {
    v42 = v70;
    PersonInfo.person.getter(v40);
    v43 = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v14, v37);
    v44 = Person.contact.getter(v43);
    v45 = v42;
    v41 = v44;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v45, v72);
  }
  sub_100012534(a1, (uint64_t)v12, &qword_100050690);
  v46 = v39(v12, 1, v37);
  if ((_DWORD)v46 == 1)
  {
    sub_100004EE0((uint64_t)v12, &qword_100050690);
    v47 = type metadata accessor for ContactImage(0);
    v48 = (uint64_t)v80;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v80, 1, 1, v47);
  }
  else
  {
    v48 = (uint64_t)v80;
    PersonInfo.contactImage.getter(v46);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v37);
  }
  v49 = a1 + *(int *)(v73 + 20);
  v51 = v82;
  v50 = v83;
  v52 = v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v82, v49, v84);
  type metadata accessor for ContactFetcher(0);
  v53 = ContactFetcher.__allocating_init()();
  KeyPath = swift_getKeyPath(&unk_100041F08);
  v55 = swift_getKeyPath(&unk_100041F30);
  v56 = (uint64_t *)&v24[v19[15]];
  *v56 = v55;
  sub_100003FC4(&qword_1000506E0);
  swift_storeEnumTagMultiPayload(v56);
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v24, v74, v76);
  *(_QWORD *)&v24[v19[5]] = v41;
  v57 = &v24[v19[6]];
  *(_QWORD *)v57 = 0;
  v57[8] = 1;
  sub_100004F98(v48, (uint64_t)&v24[v19[7]], &qword_1000506C8);
  *(_QWORD *)&v24[v19[8]] = v53;
  v24[v19[9]] = 0;
  v24[v19[10]] = 1;
  v58 = (*(uint64_t (**)(char *, char *, uint64_t))(v50 + 32))(&v24[v19[11]], v51, v52);
  v59 = &v24[v19[12]];
  *((_QWORD *)v59 + 1) = 0;
  *((_QWORD *)v59 + 2) = 0;
  *(_QWORD *)v59 = KeyPath;
  *((_WORD *)v59 + 12) = 0;
  v60 = v19[13];
  *(double *)&v24[v60] = static PeopleWidgetConstants.maxContactAvatarSize.getter(v58);
  v61 = &v24[v19[14]];
  *(_OWORD *)v61 = xmmword_100040540;
  *((_OWORD *)v61 + 1) = xmmword_100040550;
  v62 = v79;
  sub_10000EE60((uint64_t)v24, v79, type metadata accessor for AvatarView);
  v64 = (uint64_t)v77;
  v63 = v78;
  sub_100012534((uint64_t)v77, v78, &qword_100052220);
  v65 = v81;
  sub_100004E9C(v62, v81, type metadata accessor for AvatarView);
  v66 = v85;
  sub_100012534(v63, v85, &qword_100052220);
  v67 = sub_100003FC4(&qword_100052230);
  v68 = v66 + *(int *)(v67 + 48);
  *(_QWORD *)v68 = 0;
  *(_BYTE *)(v68 + 8) = 1;
  sub_100004E9C(v65, v66 + *(int *)(v67 + 64), type metadata accessor for AvatarView);
  sub_10000501C(v62, type metadata accessor for AvatarView);
  sub_100004EE0(v64, &qword_100052220);
  sub_10000501C(v65, type metadata accessor for AvatarView);
  return sub_100004EE0(v63, &qword_100052220);
}

uint64_t sub_10003E12C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;

  v44 = a2;
  v3 = type metadata accessor for ContactFormatter.Style(0);
  v41 = *(_QWORD *)(v3 - 8);
  v42 = v3;
  __chkstk_darwin(v3);
  v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Person(0);
  v5 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003FC4(&qword_100050690);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for StatusAndNameViewVertical(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (uint64_t *)((char *)&v39 - v16);
  __chkstk_darwin(v15);
  v19 = (char *)&v39 - v18;
  v20 = a1;
  sub_100012534(a1, (uint64_t)v10, &qword_100050690);
  v21 = type metadata accessor for PersonInfo(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v10, 1, v21);
  if ((_DWORD)v23 == 1)
  {
    sub_100004EE0((uint64_t)v10, &qword_100050690);
    v24 = 0;
  }
  else
  {
    PersonInfo.person.getter(v23);
    v25 = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v10, v21);
    v24 = Person.contact.getter(v25);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v40);
  }
  v26 = v20 + *(int *)(type metadata accessor for SingleContactSmallWidgetVerticalView(0) + 24);
  v27 = (char *)v17 + v11[5];
  v28 = type metadata accessor for PersonStatusSet(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v27, v26, v28);
  *v17 = v24;
  v29 = v43;
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v43, enum case for ContactFormatter.Style.shortName(_:), v42);
  v30 = (uint64_t *)((char *)v17 + v11[6]);
  v31 = String.localized.getter(0x656D614E206F4ELL, 0xE700000000000000);
  v33 = v32;
  v30[3] = type metadata accessor for ContactFormatter(0);
  v30[4] = &protocol witness table for ContactFormatter;
  sub_100004F2C(v30);
  ContactFormatter.init(style:fallback:)(v29, v31, v33);
  v34 = (uint64_t *)((char *)v17 + v11[7]);
  *v34 = swift_getKeyPath(&unk_100041F60);
  sub_100003FC4(&qword_1000506F8);
  swift_storeEnumTagMultiPayload(v34);
  v35 = (uint64_t *)((char *)v17 + v11[8]);
  *v35 = swift_getKeyPath(&unk_100041F30);
  sub_100003FC4(&qword_1000506E0);
  swift_storeEnumTagMultiPayload(v35);
  sub_10000EE60((uint64_t)v17, (uint64_t)v19, type metadata accessor for StatusAndNameViewVertical);
  sub_100004E9C((uint64_t)v19, (uint64_t)v14, type metadata accessor for StatusAndNameViewVertical);
  v36 = v44;
  *v44 = 0;
  *((_BYTE *)v36 + 8) = 1;
  v37 = sub_100003FC4(&qword_100052238);
  sub_100004E9C((uint64_t)v14, (uint64_t)v36 + *(int *)(v37 + 48), type metadata accessor for StatusAndNameViewVertical);
  sub_10000501C((uint64_t)v19, type metadata accessor for StatusAndNameViewVertical);
  return sub_10000501C((uint64_t)v14, type metadata accessor for StatusAndNameViewVertical);
}

uint64_t sub_10003E4AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_100003FC4(&qword_100052140);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static VerticalAlignment.top.getter(v4);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v7 = sub_100003FC4(&qword_100052218);
  v8 = sub_10003DB40(v1, (uint64_t)&v6[*(int *)(v7 + 44)]);
  v9 = static Alignment.top.getter(v8);
  sub_10003AED0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a1, 0.0, 1, INFINITY, 0, v9, v10);
  return sub_100004EE0((uint64_t)v6, &qword_100052140);
}

unint64_t sub_10003E5BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100052240;
  if (!qword_100052240)
  {
    v1 = sub_100004004(&qword_100052148);
    sub_10003E628();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100052240);
  }
  return result;
}

unint64_t sub_10003E628()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100052248;
  if (!qword_100052248)
  {
    v1 = sub_100004004(&qword_100052140);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100052248);
  }
  return result;
}

uint64_t sub_10003E674()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC25PeopleWidget_iOSExtensionP33_9CD9F975376D968EA51258B104B5CAF719ResourceBundleClass);
}

uint64_t sub_10003E6A4()
{
  return sub_10003E83C(1);
}

uint64_t sub_10003E6AC(int a1, int a2, int a3, int a4)
{
  BOOL v9;
  _DWORD v10[2];

  if (qword_100053450 == -1)
  {
    if (qword_100053458)
    {
LABEL_3:
      v10[0] = a1;
      v10[1] = (a2 << 16) | (a3 << 8) | a4;
      return _availability_version_check(1, v10);
    }
  }
  else
  {
    dispatch_once_f(&qword_100053450, 0, (dispatch_function_t)sub_10003E834);
    if (qword_100053458)
      goto LABEL_3;
  }
  if (qword_100053448 == -1)
  {
    v9 = dword_100053438 < a2;
    if (dword_100053438 > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_100053448, 0, (dispatch_function_t)sub_10003E6A4);
    v9 = dword_100053438 < a2;
    if (dword_100053438 > a2)
      return 1;
  }
  if (v9)
    return 0;
  if (dword_10005343C > a3)
    return 1;
  return dword_10005343C >= a3 && dword_100053440 >= a4;
}

uint64_t sub_10003E834()
{
  return sub_10003E83C(0);
}

uint64_t sub_10003E83C(uint64_t result)
{
  void *v1;
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];

  v1 = (void *)qword_100053458;
  if (qword_100053458)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (&__availability_version_check)
    {
      qword_100053458 = (uint64_t)&__availability_version_check;
      v1 = &__availability_version_check;
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = ftell(v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &dword_100053438, &dword_10005343C, &dword_100053440);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}
