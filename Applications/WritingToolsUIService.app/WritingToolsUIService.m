void sub_1000048C0()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  Class isa;
  _QWORD v52[4];

  v1 = v0;
  v2 = type metadata accessor for UIHostingControllerSizingOptions(0);
  __chkstk_darwin(v2);
  v4 = (char *)v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = &v0[OBJC_IVAR____TtC21WritingToolsUIService24SuggestionViewController_suggestionView];
  v6 = *(_QWORD *)&v0[OBJC_IVAR____TtC21WritingToolsUIService24SuggestionViewController_suggestionView];
  v7 = *(_QWORD *)&v0[OBJC_IVAR____TtC21WritingToolsUIService24SuggestionViewController_suggestionView + 8];
  v8 = (void *)*((_QWORD *)v5 + 2);
  v9 = (void *)*((_QWORD *)v5 + 3);
  v52[0] = v6;
  v52[1] = v7;
  v52[2] = v8;
  v52[3] = v9;
  objc_allocWithZone((Class)sub_100004EAC(&qword_1000C7568));
  swift_retain(v7);
  swift_retain(v6);
  v10 = v8;
  v11 = v9;
  v12 = (void *)UIHostingController.init(rootView:)(v52);
  static UIHostingControllerSizingOptions.preferredContentSize.getter();
  dispatch thunk of UIHostingController.sizingOptions.setter(v4);
  v13 = objc_msgSend(v1, "view");
  if (!v13)
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v13;
  v15 = objc_msgSend(v12, "view");
  if (!v15)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v15;
  objc_msgSend(v14, "addSubview:", v15);

  v17 = objc_msgSend(v12, "view");
  if (!v17)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v18 = v17;
  objc_msgSend(v17, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  objc_msgSend(v1, "addChildViewController:", v12);
  v19 = sub_100004EAC((uint64_t *)&unk_1000C7570);
  v20 = swift_allocObject(v19, 64, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100091440;
  v21 = objc_msgSend(v12, "view");
  if (!v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v22 = v21;
  v23 = objc_msgSend(v21, "leadingAnchor");

  v24 = objc_msgSend(v1, "view");
  if (!v24)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v25 = v24;
  v26 = objc_msgSend(v24, "leadingAnchor");

  v27 = objc_msgSend(v23, "constraintEqualToAnchor:", v26);
  *(_QWORD *)(v20 + 32) = v27;
  v28 = objc_msgSend(v12, "view");
  if (!v28)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v29 = v28;
  v30 = objc_msgSend(v28, "trailingAnchor");

  v31 = objc_msgSend(v1, "view");
  if (!v31)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v32 = v31;
  v33 = objc_msgSend(v31, "trailingAnchor");

  v34 = objc_msgSend(v30, "constraintEqualToAnchor:", v33);
  *(_QWORD *)(v20 + 40) = v34;
  v35 = objc_msgSend(v12, "view");
  if (!v35)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v36 = v35;
  v37 = objc_msgSend(v35, "topAnchor");

  v38 = objc_msgSend(v1, "view");
  if (!v38)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v39 = v38;
  v40 = objc_msgSend(v38, "topAnchor");

  v41 = objc_msgSend(v37, "constraintEqualToAnchor:", v40);
  *(_QWORD *)(v20 + 48) = v41;
  v42 = objc_msgSend(v12, "view");
  if (!v42)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v43 = v42;
  v44 = objc_msgSend(v42, "bottomAnchor");

  v45 = objc_msgSend(v1, "view");
  if (v45)
  {
    v46 = v45;
    v47 = (void *)objc_opt_self(NSLayoutConstraint);
    v48 = objc_msgSend(v46, "bottomAnchor");

    v49 = objc_msgSend(v44, "constraintEqualToAnchor:", v48);
    *(_QWORD *)(v20 + 56) = v49;
    v52[0] = v20;
    specialized Array._endMutation()();
    v50 = v52[0];
    sub_100005EA8();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v50);
    objc_msgSend(v47, "activateConstraints:", isa);

    return;
  }
LABEL_23:
  __break(1u);
}

id sub_100004E14()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SuggestionViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100004EAC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t variable initialization expression of ModelResponseView._dismiss@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000051A0(&qword_1000C74C8, a1);
}

uint64_t sub_100004F00()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t variable initialization expression of ModelResponseView._didTapDone()
{
  return 0;
}

uint64_t _s21WritingToolsUIService17ModelResponseViewV19_feedbackController33_6284D53BE05683D90FFE8C0F35353675LL7SwiftUI5StateVy8Feedback013FBKEvaluationH0CGvpfi_0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  id v4;
  uint64_t v6;

  v0 = sub_100004EAC(&qword_1000C74C0);
  __chkstk_darwin(v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for FBKSEvaluation.Subject(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = objc_allocWithZone((Class)type metadata accessor for FBKEvaluationController(0));
  return FBKEvaluationController.init(subject:)(v2);
}

uint64_t _s21WritingToolsUIService17ModelResponseViewV16_commonUIManager33_6284D53BE05683D90FFE8C0F35353675LL7SwiftUI11EnvironmentVyAA06CommonH0CGvpfi_0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for CommonUIManager(0);
  v1 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  return Environment.init<A>(_:)(v0, v0, v1);
}

uint64_t variable initialization expression of WritingToolsView.writingToolsDelegate()
{
  return 0;
}

uint64_t variable initialization expression of WritingToolsView._openEndedInstructions()
{
  return 0;
}

uint64_t variable initialization expression of WritingToolsView._rewritingModel()
{
  uint64_t v0;

  v0 = type metadata accessor for RewritingModel(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return sub_10002C5F4();
}

uint64_t variable initialization expression of WritingToolsView._proofreadingModel()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v0 = type metadata accessor for ProofreadingModel(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_QWORD *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__task) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping) = sub_100061DBC((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__expandedSuggestion) = 0;
  v2 = sub_100061F5C((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates) = v2;
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__modelInfoString);
  *v3 = 0;
  v3[1] = 0xE000000000000000;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__showingOriginal) = 0;
  ObservationRegistrar.init()(v2);
  v4 = swift_unknownObjectWeakInit(v1 + 16, 0);
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_BYTE *)(v1 + 56) = -1;
  *(_QWORD *)(v1 + 64) = 0;
  *(_BYTE *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  ObservationRegistrar.init()(v4);
  return v1;
}

uint64_t variable initialization expression of WritingToolsView._unifiedIconWidth()
{
  return 0;
}

uint64_t variable initialization expression of WritingToolsView._dynamicTypeSize@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000051A0(&qword_1000C74D0, a1);
}

uint64_t variable initialization expression of WritingToolsView._horizontalSizeClass@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000051A0(&qword_1000C74D8, a1);
}

uint64_t sub_1000051A0@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;

  *a2 = swift_getKeyPath();
  v4 = sub_100004EAC(a1);
  return swift_storeEnumTagMultiPayload(a2, v4, 0);
}

uint64_t type metadata accessor for SuggestionViewController()
{
  return objc_opt_self(_TtC21WritingToolsUIService24SuggestionViewController);
}

void type metadata accessor for WTTextSuggestionState(uint64_t a1)
{
  sub_100005F5C(a1, &qword_1000C7518, (uint64_t)&unk_1000BE4E0);
}

void type metadata accessor for UIModalPresentationStyle(uint64_t a1)
{
  sub_100005F5C(a1, &qword_1000C7520, (uint64_t)&unk_1000BE500);
}

__n128 initializeWithTake for CompositionMode(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_100005F5C(a1, &qword_1000C7528, (uint64_t)&unk_1000BE578);
}

uint64_t initializeBufferWithCopyOfBuffer for Mode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for ProofreadingSuggestionView(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10000528C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000052AC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_100005F5C(a1, &qword_1000C7530, (uint64_t)&unk_1000BE5F8);
}

uint64_t sub_1000052EC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10000530C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100005F5C(a1, &qword_1000C7538, (uint64_t)&unk_1000BE678);
}

void type metadata accessor for UIWritingToolsResultOptions(uint64_t a1)
{
  sub_100005F5C(a1, &qword_1000C7540, (uint64_t)&unk_1000BE6A0);
}

uint64_t sub_10000535C(uint64_t a1, uint64_t a2)
{
  return sub_100005650(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

void sub_10000537C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_100005384@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_100005398@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1000053AC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1000053C0(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1000053F0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_10000541C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_100005440(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_100005454(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_100005468(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_10000547C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100005490(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000054A4(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1000054B8(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000054CC()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1000054DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_1000054F4(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_100005508@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100005514(uint64_t a1, uint64_t a2)
{
  return sub_100005650(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100005520(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100005594(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100005610@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_100005650(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10000568C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000056CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

_QWORD *sub_10000573C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10000574C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_100005758(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10000576C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_100091EAC, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1000057B8(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100091EAC, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1000057F4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100091EAC, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_10000583C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  WitnessTable = swift_getWitnessTable(&unk_100091EAC, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_100005898@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100005E70(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1000058D4()
{
  return sub_100005900(&qword_1000C7548, (uint64_t (*)(uint64_t))type metadata accessor for UIWritingToolsResultOptions, (uint64_t)&unk_1000915CC);
}

uint64_t sub_100005900(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100005940()
{
  return sub_100005900(&qword_1000C7550, (uint64_t (*)(uint64_t))type metadata accessor for UIWritingToolsResultOptions, (uint64_t)&unk_100091598);
}

uint64_t sub_10000596C()
{
  return sub_100005900(&qword_1000C7558, (uint64_t (*)(uint64_t))type metadata accessor for UIWritingToolsResultOptions, (uint64_t)&unk_1000915F8);
}

uint64_t sub_100005998()
{
  return sub_100005900(&qword_1000C7560, (uint64_t (*)(uint64_t))type metadata accessor for UIWritingToolsResultOptions, (uint64_t)&unk_100091634);
}

uint64_t sub_1000059C4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100005A50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005900(&qword_1000C7620, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100091DE4);
  v3 = sub_100005900(&qword_1000C7628, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100091D38);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100005AD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005900(&qword_1000C7640, (uint64_t (*)(uint64_t))type metadata accessor for OptionKey, (uint64_t)&unk_100091E6C);
  v3 = sub_100005900(&qword_1000C7648, (uint64_t (*)(uint64_t))type metadata accessor for OptionKey, (uint64_t)&unk_100091B0C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100005B58@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100005B80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005900(&qword_1000C7630, (uint64_t (*)(uint64_t))type metadata accessor for IAPayloadKey, (uint64_t)&unk_100091E28);
  v3 = sub_100005900(&qword_1000C7638, (uint64_t (*)(uint64_t))type metadata accessor for IAPayloadKey, (uint64_t)&unk_100091C24);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100005C04@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100005C48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005900(&qword_1000C7650, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_100091A1C);
  v3 = sub_100005900(&qword_1000C7658, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1000919BC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

id sub_100005CCC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_class *v30;
  id v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  objc_super v38;

  v35 = a5;
  v36 = a4;
  v37 = a3;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v34 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v34 - v19;
  v21 = &v6[OBJC_IVAR____TtC21WritingToolsUIService24SuggestionViewController_preferredContentSizeHandler];
  *(_QWORD *)v21 = a1;
  *((_QWORD *)v21 + 1) = a2;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v22((char *)&v34 - v19, a3, v11);
  v23 = v35;
  v22(v18, v35, v11);
  v22(v15, a6, v11);
  v24 = v6;
  swift_retain(a2);
  v25 = sub_100075958((uint64_t)v20, v36, v18, v15);
  v26 = (uint64_t *)&v24[OBJC_IVAR____TtC21WritingToolsUIService24SuggestionViewController_suggestionView];
  *v26 = v25;
  v26[1] = v27;
  v26[2] = v28;
  v26[3] = v29;

  v30 = (objc_class *)type metadata accessor for SuggestionViewController();
  v38.receiver = v24;
  v38.super_class = v30;
  v31 = objc_msgSendSuper2(&v38, "initWithNibName:bundle:", 0, 0);
  v32 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v32(a6, v11);
  v32(v23, v11);
  v32(v37, v11);
  return v31;
}

uint64_t sub_100005E70(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t sub_100005EA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9D00;
  if (!qword_1000C9D00)
  {
    v1 = objc_opt_self(NSLayoutConstraint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000C9D00);
  }
  return result;
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_100005F5C(a1, &qword_1000C7580, (uint64_t)&unk_1000BE6C8);
}

void type metadata accessor for IAPayloadKey(uint64_t a1)
{
  sub_100005F5C(a1, &qword_1000C7588, (uint64_t)&unk_1000BE6F0);
}

void type metadata accessor for OptionKey(uint64_t a1)
{
  sub_100005F5C(a1, &qword_1000C7590, (uint64_t)&unk_1000BE718);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_100005F5C(a1, &qword_1000C7598, (uint64_t)&unk_1000BE740);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_100005F5C(a1, &qword_1000C75A0, (uint64_t)&unk_1000BE7C0);
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_100005F5C(a1, &qword_1000C75A8, (uint64_t)&unk_1000BE7E8);
}

void sub_100005F5C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100005FA0()
{
  return sub_100005900(&qword_1000C75B0, (uint64_t (*)(uint64_t))type metadata accessor for CGImage, (uint64_t)&unk_1000918D8);
}

uint64_t sub_100005FCC()
{
  return sub_100005900(&qword_1000C75B8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_100091980);
}

uint64_t sub_100005FF8()
{
  return sub_100005900(&qword_1000C75C0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_100091954);
}

uint64_t sub_100006024()
{
  return sub_100005900(&qword_1000C75C8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1000919F0);
}

uint64_t sub_100006050()
{
  return sub_100005900(&qword_1000C75D0, (uint64_t (*)(uint64_t))type metadata accessor for OptionKey, (uint64_t)&unk_100091AD4);
}

uint64_t sub_10000607C()
{
  return sub_100005900(&qword_1000C75D8, (uint64_t (*)(uint64_t))type metadata accessor for OptionKey, (uint64_t)&unk_100091AAC);
}

uint64_t sub_1000060A8()
{
  return sub_100005900(&qword_1000C75E0, (uint64_t (*)(uint64_t))type metadata accessor for IAPayloadKey, (uint64_t)&unk_100091BE8);
}

uint64_t sub_1000060D4()
{
  return sub_100005900(&qword_1000C75E8, (uint64_t (*)(uint64_t))type metadata accessor for IAPayloadKey, (uint64_t)&unk_100091BBC);
}

uint64_t sub_100006100()
{
  return sub_100005900(&qword_1000C75F0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100091CFC);
}

uint64_t sub_10000612C()
{
  return sub_100005900(&qword_1000C75F8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100091CD0);
}

uint64_t sub_100006158()
{
  return sub_100005900(&qword_1000C7600, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100091D6C);
}

uint64_t sub_100006184()
{
  return sub_100005900(&qword_1000C7608, (uint64_t (*)(uint64_t))type metadata accessor for IAPayloadKey, (uint64_t)&unk_100091C58);
}

uint64_t sub_1000061B0()
{
  return sub_100005900(&qword_1000C7610, (uint64_t (*)(uint64_t))type metadata accessor for OptionKey, (uint64_t)&unk_100091B3C);
}

uint64_t sub_1000061DC()
{
  return sub_100005900(&qword_1000C7618, (uint64_t (*)(uint64_t))type metadata accessor for CGImage, (uint64_t)&unk_100091904);
}

uint64_t sub_100006228()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006394(v0, qword_1000D1BD0);
  sub_1000063D4(v0, (uint64_t)qword_1000D1BD0);
  return Logger.init(subsystem:category:)(0xD000000000000016, 0x80000001000AB450, 0x746C7561666544, 0xE700000000000000);
}

uint64_t sub_10000629C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006394(v0, qword_1000D1BE8);
  sub_1000063D4(v0, (uint64_t)qword_1000D1BE8);
  return Logger.init(subsystem:category:)(0xD000000000000016, 0x80000001000AB450, 0x7065527472616D53, 0xEA0000000000796CLL);
}

uint64_t sub_100006314()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006394(v0, qword_1000D1C00);
  sub_1000063D4(v0, (uint64_t)qword_1000D1C00);
  return Logger.init(subsystem:category:)(0xD000000000000016, 0x80000001000AB450, 0xD000000000000013, 0x80000001000AB430);
}

uint64_t *sub_100006394(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_1000063D4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1000063EC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006394(v0, qword_1000D1C18);
  sub_1000063D4(v0, (uint64_t)qword_1000D1C18);
  return Logger.init(subsystem:category:)(0xD000000000000018, 0x80000001000AB470, 0x6973734174786554, 0xED0000746E617473);
}

uint64_t sub_10000646C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100006394(v0, qword_1000D1C30);
  sub_1000063D4(v0, (uint64_t)qword_1000D1C30);
  return Logger.init(subsystem:category:)(0xD000000000000016, 0x80000001000AB450, 0x6B63616264656546, 0xE800000000000000);
}

uint64_t sub_1000064E0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  v28 = a1;
  v29 = a2;
  v4 = sub_100004EAC(&qword_1000C7720);
  v5 = *(_QWORD *)(v4 - 8);
  v27 = v4;
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004EAC(&qword_1000C7728);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004EAC((uint64_t *)&unk_1000C87F0);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v28, v4);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 40) & ~v16;
  v18 = *(unsigned __int8 *)(v5 + 80);
  v19 = (v10 + v18 + v17) & ~v18;
  v20 = (char *)swift_allocObject(&unk_1000BE9D8, v19 + v6, v16 | v18 | 7);
  *((_QWORD *)v20 + 2) = 0;
  *((_QWORD *)v20 + 3) = 0;
  v21 = v29;
  *((_QWORD *)v20 + 4) = v29;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v20[v17], v11, v8);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v20[v19], v7, v27);
  v22 = v21;
  v23 = sub_1000596DC((uint64_t)v14, (uint64_t)&unk_1000C7738, (uint64_t)v20);
  return swift_release(v23, v24);
}

uint64_t sub_1000066B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[29] = a5;
  v6[30] = a6;
  v6[28] = a4;
  v7 = sub_100004EAC(&qword_1000C7740);
  v6[31] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[32] = v8;
  v6[33] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004EAC(&qword_1000C7748);
  v6[34] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[35] = v10;
  v6[36] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100006744, 0, 0);
}

uint64_t sub_100006744()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (void *)v0[28];
  v0[37] = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "init");
  v2 = objc_msgSend(v1, "range");
  v0[22] = v2;
  v0[23] = v3;
  v0[38] = v2;
  v4 = sub_100004EAC(&qword_1000C7728);
  AsyncThrowingStream.makeAsyncIterator()(v4);
  v5 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  v0[39] = v5;
  *v5 = v0;
  v5[1] = sub_100006810;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 14, 0, 0, v0[34], v0 + 26);
}

uint64_t sub_100006810()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 312));
  if (v0)
  {
    swift_bridgeObjectRelease(0xE000000000000000);
    v3 = sub_100006EB0;
  }
  else
  {
    v4 = TCTextCompositionAssistantOptionKeyContentWarning;
    v2[42] = 0xE000000000000000;
    v2[43] = 0;
    v2[40] = v4;
    v2[41] = 0;
    v3 = sub_100006890;
  }
  return swift_task_switch(v3, 0, 0);
}

void sub_100006890()
{
  uint64_t v0;
  void *v1;
  _OWORD *v2;
  NSUInteger v3;
  NSUInteger v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  _QWORD *v36;
  uint64_t v37;
  NSUInteger v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSString *v45;
  uint64_t v46;
  NSUInteger v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  NSString *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  NSString *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  NSUInteger v62;
  NSUInteger v63;
  uint64_t v64;
  void *v65;
  id v66;
  id v67;
  uint64_t v68;
  NSUInteger v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  NSUInteger v85;
  uint64_t v86;
  NSUInteger range;
  uint64_t range_8;
  NSRange v89;
  NSRange v90;
  NSRange v91;

  v1 = *(void **)(v0 + 112);
  if (v1)
  {
    v2 = (_OWORD *)(v0 + 144);
    v4 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 320);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 336));
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;
    if (*(_QWORD *)(v5 + 16))
    {
      v10 = v7;
      v11 = v1;
      swift_bridgeObjectRetain(v5);
      v12 = sub_10001CD50(v10, v9);
      if ((v13 & 1) != 0)
      {
        sub_1000071D0(*(_QWORD *)(v5 + 56) + 32 * v12, v0 + 144);
      }
      else
      {
        *v2 = 0u;
        *(_OWORD *)(v0 + 160) = 0u;
      }
    }
    else
    {
      *v2 = 0u;
      *(_OWORD *)(v0 + 160) = 0u;
      v35 = v1;
      swift_bridgeObjectRetain(v5);
    }
    swift_bridgeObjectRelease(v9);
    v84 = v1;
    if (*(_QWORD *)(v0 + 168))
    {
      v36 = (_QWORD *)(v0 + 216);
      if ((swift_dynamicCast(v0 + 216, v0 + 144, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
      {
        if (*v36 == 1)
          v37 = 1;
        else
          v37 = 2 * (*v36 == 2);
        v86 = v37;
LABEL_19:
        v38 = *(_QWORD *)(v0 + 328);
        range = *(_QWORD *)(v0 + 176);
        range_8 = *(_QWORD *)(v0 + 304);
        v39 = *(void **)(v0 + 224);
        v40 = sub_10002346C(v5);
        v42 = v41;
        v83 = v5;
        swift_bridgeObjectRelease(v5);
        v81 = v40;
        v82 = v42;
        *(_QWORD *)(v0 + 352) = v40;
        *(_QWORD *)(v0 + 360) = v42;
        v43 = sub_100004EAC(&qword_1000C7758);
        v44 = swift_allocObject(v43, 192, 7);
        *(_OWORD *)(v44 + 16) = xmmword_100091EE0;
        v89.location = v4;
        v85 = v3;
        v89.length = v3;
        v45 = NSStringFromRange(v89);
        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v47 = v4;
        v49 = v48;

        *(_QWORD *)(v44 + 56) = &type metadata for String;
        v50 = sub_100007150();
        *(_QWORD *)(v44 + 64) = v50;
        *(_QWORD *)(v44 + 32) = v46;
        *(_QWORD *)(v44 + 40) = v49;
        v90.location = (NSUInteger)objc_msgSend(v39, "range");
        v51 = NSStringFromRange(v90);
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v54 = v53;

        *(_QWORD *)(v44 + 96) = &type metadata for String;
        *(_QWORD *)(v44 + 104) = v50;
        *(_QWORD *)(v44 + 72) = v52;
        *(_QWORD *)(v44 + 80) = v54;
        v55 = v47;
        v91.location = range;
        v91.length = v38;
        v56 = NSStringFromRange(v91);
        v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
        v59 = v58;

        *(_QWORD *)(v44 + 136) = &type metadata for String;
        *(_QWORD *)(v44 + 144) = v50;
        *(_QWORD *)(v44 + 112) = v57;
        *(_QWORD *)(v44 + 120) = v59;
        *(_QWORD *)(v44 + 176) = &type metadata for Int;
        *(_QWORD *)(v44 + 184) = &protocol witness table for Int;
        *(_QWORD *)(v44 + 152) = v86;
        sub_100007194();
        v60 = (void *)static OS_os_log.default.getter();
        v61 = static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)("Received partial result with replacement range %@, context.range = %@, accumulatedReplacementRange = %@, warnings (OptionSet) = %d", 130, 2, &_mh_execute_header, v60, v61, v44);

        swift_bridgeObjectRelease(v44);
        v62 = range_8 + v38;
        if ((uint64_t)(range_8 + v38) < v55)
        {
          v63 = v55 - v62;
          if (__OFSUB__(v55, v62))
          {
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }
          v64 = *(_QWORD *)(v0 + 328);
          v65 = *(void **)(v0 + 296);
          v66 = objc_msgSend(*(id *)(v0 + 224), "attributedText");
          v67 = objc_msgSend(v66, "attributedSubstringFromRange:", v62, v55 - v62);

          objc_msgSend(v65, "appendAttributedString:", v67);
          v19 = __OFADD__(v64, v63);
          v68 = v64 + v63;
          if (!v19)
          {
LABEL_25:
            objc_msgSend(*(id *)(v0 + 296), "appendAttributedString:", v84);
            v69 = v68 + v85;
            if (!__OFADD__(v68, v85))
            {
              v71 = *(void **)(v0 + 296);
              v70 = *(_QWORD *)(v0 + 304);
              v72 = *(_QWORD *)(v0 + 256);
              v73 = *(_QWORD *)(v0 + 264);
              v74 = *(_QWORD *)(v0 + 248);
              *(_QWORD *)(v0 + 64) = v71;
              *(_QWORD *)(v0 + 368) = v69;
              *(_QWORD *)(v0 + 72) = v70;
              *(_QWORD *)(v0 + 80) = v69;
              *(_QWORD *)(v0 + 88) = v86;
              *(_QWORD *)(v0 + 96) = v81;
              *(_QWORD *)(v0 + 104) = v82;
              v75 = v71;
              swift_bridgeObjectRetain(v82);
              v76 = sub_100004EAC(&qword_1000C7720);
              AsyncThrowingStream.Continuation.yield(_:)(v0 + 64, v76);

              swift_bridgeObjectRelease(v83);
              (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v73, v74);
              v77 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
              *(_QWORD *)(v0 + 376) = v77;
              *v77 = v0;
              v77[1] = sub_100006E38;
              _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 112, 0, 0, *(_QWORD *)(v0 + 272), v0 + 208);
              return;
            }
            __break(1u);
            goto LABEL_30;
          }
          __break(1u);
        }
        v68 = *(_QWORD *)(v0 + 328);
        goto LABEL_25;
      }
    }
    else
    {
      sub_100007110(v0 + 144);
    }
    v86 = 0;
    goto LABEL_19;
  }
  v14 = *(_QWORD *)(v0 + 328);
  v15 = *(void **)(v0 + 224);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
  objc_msgSend(v15, "range");
  if (v14 >= v16)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 336));
    goto LABEL_28;
  }
  v17 = *(_QWORD *)(v0 + 328);
  objc_msgSend(*(id *)(v0 + 224), "range");
  v19 = __OFSUB__(v18, v17);
  v20 = v18 - v17;
  if (v19)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v21 = *(_QWORD *)(v0 + 328);
  v22 = *(void **)(v0 + 296);
  v23 = *(_QWORD *)(v0 + 304) + v21;
  v24 = objc_msgSend(*(id *)(v0 + 224), "attributedText");
  v25 = objc_msgSend(v24, "attributedSubstringFromRange:", v23, v20);

  objc_msgSend(v22, "appendAttributedString:", v25);
  if (!__OFADD__(v21, v20))
  {
    v27 = *(_QWORD *)(v0 + 336);
    v26 = *(_QWORD *)(v0 + 344);
    v29 = *(void **)(v0 + 296);
    v28 = *(_QWORD *)(v0 + 304);
    v31 = *(_QWORD *)(v0 + 256);
    v30 = *(_QWORD *)(v0 + 264);
    v32 = *(_QWORD *)(v0 + 248);
    *(_QWORD *)(v0 + 16) = v29;
    *(_QWORD *)(v0 + 24) = v28;
    *(_QWORD *)(v0 + 32) = v21 + v20;
    *(_QWORD *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 48) = v26;
    *(_QWORD *)(v0 + 56) = v27;
    v33 = v29;
    v34 = sub_100004EAC(&qword_1000C7720);
    AsyncThrowingStream.Continuation.yield(_:)(v0 + 16, v34);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
LABEL_28:
    v78 = *(void **)(v0 + 296);
    *(_QWORD *)(v0 + 192) = 0;
    v79 = sub_100004EAC(&qword_1000C7720);
    AsyncThrowingStream.Continuation.finish(throwing:)(v0 + 192, v79);

    v80 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 288));
    swift_task_dealloc(v80);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_100006E38()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 376));
  if (v0)
  {
    swift_bridgeObjectRelease(v2[45]);
    v3 = sub_100006EB0;
  }
  else
  {
    v4 = v2[46];
    v5 = v2[44];
    v2[42] = v2[45];
    v2[43] = v5;
    v2[41] = v4;
    v3 = sub_100006890;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100006EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 280);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  *(_QWORD *)(v0 + 200) = *(_QWORD *)(v0 + 208);
  v4 = sub_100004EAC(&qword_1000C7720);
  AsyncThrowingStream.Continuation.finish(throwing:)(v0 + 200, v4);
  v5 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100006F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_100004EAC(&qword_1000C7728);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_100004EAC(&qword_1000C7720);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100007004(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(sub_100004EAC(&qword_1000C7728) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_100004EAC(&qword_1000C7720) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc(dword_1000C7734);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_1000070C8;
  return sub_1000066B0(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_1000070C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100007110(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004EAC(&qword_1000C7750);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100007150()
{
  unint64_t result;

  result = qword_1000C7760;
  if (!qword_1000C7760)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000C7760);
  }
  return result;
}

unint64_t sub_100007194()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7768;
  if (!qword_1000C7768)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000C7768);
  }
  return result;
}

uint64_t sub_1000071D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000720C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v30 = a5;
  v29 = type metadata accessor for TaskPriority(0);
  v9 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004EAC(&qword_1000C7780);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004EAC(&qword_1000C7788);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v14 = static VerticalAlignment.center.getter(v16);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 1;
  v19 = sub_100004EAC(&qword_1000C7790);
  sub_100007458(a1, a2, a3, a4, (uint64_t)&v14[*(int *)(v19 + 44)]);
  v20 = swift_allocObject(&unk_1000BEA80, 48, 7);
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  *(_BYTE *)(v20 + 32) = a3;
  *(_QWORD *)(v20 + 40) = a4;
  swift_retain(a4);
  swift_retain(a1);
  v21 = swift_retain(a2);
  static TaskPriority.userInitiated.getter(v21);
  v22 = &v18[*(int *)(v15 + 36)];
  v23 = type metadata accessor for _TaskModifier(0);
  v24 = v29;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(&v22[*(int *)(v23 + 20)], v11, v29);
  *(_QWORD *)v22 = &unk_1000C77A0;
  *((_QWORD *)v22 + 1) = v20;
  sub_10000AD78((uint64_t)v14, (uint64_t)v18, &qword_1000C7780);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v24);
  v25 = sub_10000AE2C((uint64_t)v14, &qword_1000C7780);
  v26 = static Alignment.center.getter(v25);
  sub_10002D4E8(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v30, 0.0, 1, INFINITY, 0, v26, v27);
  return sub_10000AE2C((uint64_t)v18, &qword_1000C7788);
}

uint64_t sub_100007458@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t KeyPath;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, char *, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, uint64_t);
  uint64_t v147;
  uint64_t v148;
  _QWORD *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(char *, char *, uint64_t);
  unint64_t v157;
  void (*v158)(char *, uint64_t);
  void (*v159)(uint64_t, char *, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  _QWORD *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  unsigned __int8 v207;
  _OWORD v208[3];

  v169 = a5;
  v155 = sub_100004EAC(&qword_1000C77B0);
  v154 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v153 = (char *)&v150 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_100004EAC(&qword_1000C77B8);
  v167 = *(_QWORD *)(v168 - 8);
  __chkstk_darwin(v168);
  v152 = (char *)&v150 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004EAC(&qword_1000C77C0);
  v12 = __chkstk_darwin(v11);
  v195 = (uint64_t)&v150 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v183 = (uint64_t)&v150 - v14;
  v166 = sub_100004EAC(&qword_1000CBBB0);
  v164 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v165 = (char *)&v150 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_100004EAC(&qword_1000C77C8);
  v191 = *(_QWORD **)(v194 - 8);
  v16 = __chkstk_darwin(v194);
  v193 = (char *)&v150 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v190 = (char *)&v150 - v19;
  v20 = __chkstk_darwin(v18);
  v197 = (char *)&v150 - v21;
  __chkstk_darwin(v20);
  v189 = (char *)&v150 - v22;
  v23 = sub_100004EAC(&qword_1000C77D0);
  __chkstk_darwin(v23);
  v25 = (char *)&v150 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_100004EAC(&qword_1000C77D8);
  v26 = __chkstk_darwin(v177);
  v192 = (uint64_t)&v150 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v188 = (uint64_t)&v150 - v28;
  v180 = type metadata accessor for Divider(0);
  v176 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v179 = (char *)&v150 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100004EAC(&qword_1000CBB10);
  v30 = __chkstk_darwin(v178);
  v187 = (uint64_t)&v150 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v185 = (uint64_t)&v150 - v33;
  v34 = __chkstk_darwin(v32);
  v196 = (uint64_t)&v150 - v35;
  __chkstk_darwin(v34);
  v186 = (uint64_t)&v150 - v36;
  v175 = sub_100004EAC(&qword_1000C77E0);
  v174 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v38 = (char *)&v150 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100004EAC(&qword_1000C77E8);
  v40 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v42 = (char *)&v150 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100004EAC(&qword_1000C77F0);
  v44 = __chkstk_darwin(v43);
  v182 = (uint64_t)&v150 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v47 = (char *)&v150 - v46;
  v171 = a3 & 1;
  LODWORD(v184) = a3;
  LOBYTE(v202) = a3;
  *((_QWORD *)&v202 + 1) = a4;
  v172 = sub_100004EAC(&qword_1000C9FA0);
  State.wrappedValue.getter(v208, v172);
  v198 = a4;
  v181 = v47;
  if ((v208[0] & 1) != 0)
  {
    v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v47, 1, 1, v39);
  }
  else
  {
    v49 = swift_allocObject(&unk_1000BEAA8, 48, 7);
    *(_QWORD *)(v49 + 16) = a1;
    *(_QWORD *)(v49 + 24) = a2;
    *(_BYTE *)(v49 + 32) = v171;
    *(_QWORD *)(v49 + 40) = a4;
    swift_retain(a4);
    swift_retain(a1);
    swift_retain(a2);
    v50 = a1;
    v51 = a2;
    v52 = sub_100004EAC(&qword_1000C77F8);
    v53 = sub_10000AB6C();
    v173 = v25;
    v54 = v50;
    Button.init(action:label:)(sub_10000AB48, v49, sub_100008700, 0, v52, v53);
    LOWORD(v202) = 0;
    v55 = sub_10000B254(&qword_1000C7808, &qword_1000C77E0, (uint64_t)&protocol conformance descriptor for Button<A>);
    v56 = sub_10000AC14();
    v57 = v175;
    View.buttonStyle<A>(_:)(&v202, v175, &type metadata for InputDashboardButtonStyle, v55, v56);
    a2 = v51;
    a1 = v54;
    v25 = v173;
    (*(void (**)(char *, uint64_t))(v174 + 8))(v38, v57);
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v47, v42, v39);
    v48 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v47, 0, 1, v39);
  }
  v58 = v179;
  v59 = Divider.init()(v48);
  v60 = static Alignment.center.getter(v59);
  _FrameLayout.init(width:height:alignment:)(v208, 0, 1, 0x4034000000000000, 0, v60, v61);
  v62 = v176;
  v159 = *(void (**)(uint64_t, char *, uint64_t))(v176 + 16);
  v63 = v196;
  v64 = v180;
  v159(v196, v58, v180);
  v65 = (_OWORD *)(v63 + *(int *)(v178 + 36));
  v66 = v208[1];
  *v65 = v208[0];
  v65[1] = v66;
  v65[2] = v208[2];
  v158 = *(void (**)(char *, uint64_t))(v62 + 8);
  v158(v58, v64);
  v67 = sub_10000AC80(v63, v186, &qword_1000CBB10);
  *(_QWORD *)v25 = static VerticalAlignment.center.getter(v67);
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 1;
  v68 = sub_100004EAC(&qword_1000C7818);
  sub_1000087AC(a1, a2, &v25[*(int *)(v68 + 44)]);
  *(_QWORD *)&v202 = a1;
  *((_QWORD *)&v202 + 1) = a2;
  v170 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v200, v170);
  v69 = v200;
  KeyPath = swift_getKeyPath(&unk_100091FD8);
  *(_QWORD *)&v202 = v69;
  v151 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v202, KeyPath, v151);
  swift_release(KeyPath, v71);
  LOBYTE(v58) = *((_BYTE *)v69 + 72);
  swift_release(v69, v72);
  v73 = swift_getKeyPath(&unk_100092000);
  v74 = swift_allocObject(&unk_1000BEAD0, 17, 7);
  *(_BYTE *)(v74 + 16) = (_BYTE)v58;
  v75 = v192;
  sub_10000AD78((uint64_t)v25, v192, &qword_1000C77D0);
  v76 = (uint64_t *)(v75 + *(int *)(v177 + 36));
  *v76 = v73;
  v76[1] = (uint64_t)sub_10000AC78;
  v76[2] = v74;
  sub_10000AE2C((uint64_t)v25, &qword_1000C77D0);
  v77 = sub_10000AC80(v75, v188, &qword_1000C77D8);
  v160 = static HorizontalAlignment.center.getter(v77);
  sub_100009394((uint64_t)a1, a2, (uint64_t *)&v202);
  v174 = *((_QWORD *)&v202 + 1);
  v175 = v202;
  LODWORD(v173) = v203;
  v161 = *((_QWORD *)&v203 + 1);
  v163 = *((_QWORD *)&v204 + 1);
  v184 = v204;
  v162 = v205;
  v177 = v206;
  LODWORD(v176) = v207;
  v78 = swift_allocObject(&unk_1000BEAF8, 48, 7);
  *(_QWORD *)(v78 + 16) = a1;
  *(_QWORD *)(v78 + 24) = a2;
  v79 = v171;
  *(_BYTE *)(v78 + 32) = v171;
  *(_QWORD *)(v78 + 40) = v198;
  swift_retain(v198);
  swift_retain(a1);
  swift_retain(a2);
  v80 = v165;
  Button.init(action:label:)(sub_10000ACC8, v78, sub_100009F54, 0, &type metadata for Image, &protocol witness table for Image);
  *(_QWORD *)&v202 = a1;
  *((_QWORD *)&v202 + 1) = a2;
  v81 = v170;
  State.wrappedValue.getter(&v200, v170);
  v82 = v200;
  v83 = sub_10007F0F8();
  swift_release(v82, v84);
  LOBYTE(v202) = v79;
  *((_QWORD *)&v202 + 1) = v198;
  State.wrappedValue.getter(&v200, v172);
  LOBYTE(v202) = v83 & 1;
  BYTE1(v202) = (_BYTE)v200;
  v85 = sub_10000B254(&qword_1000CBBC0, &qword_1000CBBB0, (uint64_t)&protocol conformance descriptor for Button<A>);
  v157 = v85;
  v86 = sub_10000AC14();
  v87 = v197;
  v88 = v166;
  View.buttonStyle<A>(_:)(&v202, v166, &type metadata for InputDashboardButtonStyle, v85, v86);
  v164 = *(_QWORD *)(v164 + 8);
  ((void (*)(char *, uint64_t))v164)(v80, v88);
  v156 = (void (*)(char *, char *, uint64_t))v191[4];
  v89 = v194;
  v156(v189, v87, v194);
  v90 = swift_allocObject(&unk_1000BEB20, 48, 7);
  *(_QWORD *)(v90 + 16) = a1;
  *(_QWORD *)(v90 + 24) = a2;
  *(_BYTE *)(v90 + 32) = v79;
  *(_QWORD *)(v90 + 40) = v198;
  swift_retain(v198);
  swift_retain(a1);
  swift_retain(a2);
  Button.init(action:label:)(sub_10000ACF4, v90, sub_100009FE0, 0, &type metadata for Image, &protocol witness table for Image);
  v150 = a1;
  *(_QWORD *)&v202 = a1;
  *((_QWORD *)&v202 + 1) = a2;
  v91 = a2;
  State.wrappedValue.getter(&v200, v81);
  v92 = v200;
  LOBYTE(v81) = sub_10007F0F8();
  swift_release(v92, v93);
  LOBYTE(v202) = v79;
  *((_QWORD *)&v202 + 1) = v198;
  v94 = v172;
  State.wrappedValue.getter(&v200, v172);
  LOBYTE(v202) = v81 & 1;
  BYTE1(v202) = (_BYTE)v200;
  v95 = v157;
  v157 = v86;
  View.buttonStyle<A>(_:)(&v202, v88, &type metadata for InputDashboardButtonStyle, v95, v86);
  ((void (*)(char *, uint64_t))v164)(v80, v88);
  v96 = v87;
  v97 = v198;
  v98 = ((uint64_t (*)(char *, char *, uint64_t))v156)(v190, v96, v89);
  v99 = v179;
  v100 = Divider.init()(v98);
  v101 = static Alignment.center.getter(v100);
  _FrameLayout.init(width:height:alignment:)(&v202, 0, 1, 0x4034000000000000, 0, v101, v102);
  v103 = v196;
  v104 = v180;
  v159(v196, v99, v180);
  v105 = (_OWORD *)(v103 + *(int *)(v178 + 36));
  v106 = v203;
  *v105 = v202;
  v105[1] = v106;
  v105[2] = v204;
  v158(v99, v104);
  sub_10000AC80(v103, v185, &qword_1000CBB10);
  LOBYTE(v200) = v79;
  v201 = v97;
  State.wrappedValue.getter(&v199, v94);
  v107 = 1;
  v108 = v168;
  v109 = v167;
  if ((v199 & 1) == 0)
  {
    v110 = swift_allocObject(&unk_1000BEB48, 48, 7);
    v111 = v150;
    *(_QWORD *)(v110 + 16) = v150;
    *(_QWORD *)(v110 + 24) = v91;
    *(_BYTE *)(v110 + 32) = v79;
    *(_QWORD *)(v110 + 40) = v97;
    swift_retain(v97);
    swift_retain(v111);
    swift_retain(v91);
    v112 = v153;
    Button.init(action:label:)(sub_10000AD54, v110, sub_10000A0DC, 0, &type metadata for Text, &protocol witness table for Text);
    v200 = v111;
    v201 = v91;
    State.wrappedValue.getter(&v199, v170);
    v113 = v199;
    v114 = swift_getKeyPath(&unk_100091FD8);
    v200 = (_QWORD *)v113;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v200, v114, v151);
    swift_release(v114, v115);
    v116 = *(_BYTE *)(v113 + 72);
    swift_release(v113, v117);
    LOWORD(v200) = v116;
    v118 = sub_10000B254(&qword_1000C7820, &qword_1000C77B0, (uint64_t)&protocol conformance descriptor for Button<A>);
    v119 = v152;
    v120 = v155;
    View.buttonStyle<A>(_:)(&v200, v155, &type metadata for InputDashboardButtonStyle, v118, v157);
    (*(void (**)(char *, uint64_t))(v154 + 8))(v112, v120);
    (*(void (**)(uint64_t, char *, uint64_t))(v109 + 32))(v183, v119, v108);
    v107 = 0;
  }
  v121 = v183;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v109 + 56))(v183, v107, 1, v108);
  v122 = v182;
  sub_10000AD78((uint64_t)v181, v182, &qword_1000C77F0);
  v123 = v196;
  sub_10000AD78(v186, v196, &qword_1000CBB10);
  v124 = v192;
  sub_10000AD78(v188, v192, &qword_1000C77D8);
  v125 = (void (*)(char *, char *, uint64_t))v191[2];
  v126 = v194;
  v125(v197, v189, v194);
  v125(v193, v190, v126);
  sub_10000AD78(v185, v187, &qword_1000CBB10);
  sub_10000AD78(v121, v195, &qword_1000C77C0);
  v127 = v122;
  v128 = v169;
  sub_10000AD78(v127, v169, &qword_1000C77F0);
  v129 = (int *)sub_100004EAC(&qword_1000C7828);
  sub_10000AD78(v123, v128 + v129[12], &qword_1000CBB10);
  sub_10000AD78(v124, v128 + v129[16], &qword_1000C77D8);
  v130 = v128 + v129[20];
  *(_QWORD *)v130 = 0;
  *(_BYTE *)(v130 + 8) = 1;
  v131 = v128 + v129[24];
  *(_QWORD *)v131 = v160;
  *(_QWORD *)(v131 + 8) = 0;
  *(_BYTE *)(v131 + 16) = 1;
  v132 = v175;
  *(_QWORD *)(v131 + 24) = v175;
  v133 = v132;
  v134 = v174;
  *(_QWORD *)(v131 + 32) = v174;
  LOBYTE(v121) = (_BYTE)v173;
  *(_BYTE *)(v131 + 40) = (_BYTE)v173;
  v135 = v161;
  v136 = v184;
  *(_QWORD *)(v131 + 48) = v161;
  *(_QWORD *)(v131 + 56) = v136;
  v137 = v163;
  v138 = v162;
  *(_QWORD *)(v131 + 64) = v163;
  *(_QWORD *)(v131 + 72) = v138;
  *(_QWORD *)(v131 + 80) = v177;
  *(_BYTE *)(v131 + 88) = v176;
  v139 = v128 + v129[28];
  *(_QWORD *)v139 = 0;
  *(_BYTE *)(v139 + 8) = 1;
  v125((char *)(v128 + v129[32]), v197, v126);
  v125((char *)(v128 + v129[36]), v193, v126);
  sub_10000AD78(v187, v128 + v129[40], &qword_1000CBB10);
  sub_10000AD78(v195, v128 + v129[44], &qword_1000C77C0);
  sub_10000ADBC(v133, v134, v121);
  swift_bridgeObjectRetain(v135);
  v140 = v184;
  v141 = v177;
  sub_10000ADCC(v184, v137, v138, v177);
  sub_10000ADBC(v133, v134, v121);
  v142 = v135;
  swift_bridgeObjectRetain(v135);
  v143 = v140;
  v144 = v140;
  v145 = v141;
  sub_10000ADCC(v143, v137, v138, v141);
  sub_10000AE2C(v183, &qword_1000C77C0);
  sub_10000AE2C(v185, &qword_1000CBB10);
  v146 = (void (*)(char *, uint64_t))v191[1];
  v147 = v194;
  v146(v190, v194);
  v146(v189, v147);
  v148 = v174;
  LOBYTE(v141) = (_BYTE)v173;
  sub_10000ADF4(v133, v174, (char)v173);
  swift_bridgeObjectRelease(v142);
  sub_10000AE04(v144, v137, v138, v145);
  sub_10000AE2C(v188, &qword_1000C77D8);
  sub_10000AE2C(v186, &qword_1000CBB10);
  sub_10000AE2C((uint64_t)v181, &qword_1000C77F0);
  sub_10000AE2C(v195, &qword_1000C77C0);
  sub_10000AE2C(v187, &qword_1000CBB10);
  v146(v193, v147);
  v146(v197, v147);
  sub_10000ADF4(v175, v148, v141);
  swift_bridgeObjectRelease(v142);
  sub_10000AE04(v184, v137, v138, v145);
  sub_10000AE2C(v192, &qword_1000C77D8);
  sub_10000AE2C(v196, &qword_1000CBB10);
  return sub_10000AE2C(v182, &qword_1000C77F0);
}

void sub_100008700(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = LocalizedStringKey.init(stringLiteral:)(0x747265766552, 0xE600000000000000);
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = static Edge.Set.leading.getter();
  v11 = EdgeInsets.init(_all:)(10.0);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v7 & 1;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v10;
  *(double *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v14;
  *(_BYTE *)(a1 + 72) = 0;
}

uint64_t sub_1000087AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(char *, uint64_t);
  uint64_t v15;
  void (**v16)(char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void (**)(char *, uint64_t), char *, uint64_t);
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, void (**)(char *, uint64_t), uint64_t);
  void (**v98)(char *, uint64_t);
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  void (*v113)(_QWORD, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  void (**v127)(char *, uint64_t);
  uint64_t v128;
  uint64_t v129;
  void (**v130)(char *, uint64_t);
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unsigned __int8 v140;

  v125 = a3;
  v5 = type metadata accessor for ButtonToggleStyle(0);
  v6 = *(char **)(v5 - 8);
  v129 = v5;
  v130 = (void (**)(char *, uint64_t))v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100004EAC(&qword_1000C7830);
  v128 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v10 = (char *)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100004EAC(&qword_1000C7838);
  v11 = *(_QWORD *)(v131 - 8);
  v12 = __chkstk_darwin(v131);
  v14 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (void (**)(char *, uint64_t))((char *)&v115 - v15);
  v120 = (uint64_t)a1;
  v138 = a1;
  v139 = a2;
  v121 = a2;
  v122 = sub_100004EAC(&qword_1000C9CC0);
  State.projectedValue.getter(&v133);
  v18 = v133;
  v17 = v134;
  v19 = v135;
  KeyPath = swift_getKeyPath(&unk_100092058);
  v133 = v18;
  v134 = v17;
  v135 = v19;
  v21 = sub_100004EAC(&qword_1000C7840);
  Binding.subscript.getter(&v138, KeyPath, v21);
  swift_release(v19, v22);
  swift_release(v17, v23);
  swift_release(KeyPath, v24);
  swift_release(v18, v25);
  v26 = v138;
  v27 = v139;
  v28 = v140;
  v29 = sub_100004EAC(&qword_1000C7848);
  v30 = sub_10000AE78();
  v31 = Toggle.init(isOn:label:)(v26, v27, v28, sub_10000909C, 0, v29, v30);
  ButtonToggleStyle.init()(v31);
  v32 = sub_10000B254(&qword_1000C7860, &qword_1000C7830, (uint64_t)&protocol conformance descriptor for Toggle<A>);
  v33 = sub_100005900(&qword_1000C7868, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonToggleStyle, (uint64_t)&protocol conformance descriptor for ButtonToggleStyle);
  v34 = v126;
  v35 = v129;
  View.toggleStyle<A>(_:)(v8, v126, v129, v32, v33);
  v130[1](v8, v35);
  (*(void (**)(char *, uint64_t))(v128 + 8))(v10, v34);
  v129 = v11;
  v130 = v16;
  v36 = *(void (**)(void (**)(char *, uint64_t), char *, uint64_t))(v11 + 32);
  v127 = (void (**)(char *, uint64_t))v14;
  v36(v16, v14, v131);
  v37 = type metadata accessor for FeedbackFeatureFlags(0);
  v136 = v37;
  v137 = sub_100005900(&qword_1000C7870, (uint64_t (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags, (uint64_t)&protocol conformance descriptor for FeedbackFeatureFlags);
  v38 = sub_10000AF68(&v133);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v38, enum case for FeedbackFeatureFlags.CentralizedFeedback(_:), v37);
  LOBYTE(v37) = isFeatureEnabled(_:)(&v133);
  sub_10000AFA4(&v133);
  if ((v37 & 1) != 0)
  {
    v39 = (_QWORD *)v120;
    v40 = v121;
    v133 = (_QWORD *)v120;
    v134 = v121;
    v41 = v122;
    State.wrappedValue.getter(&v138, v122);
    v42 = v138;
    v43 = swift_getKeyPath(&unk_100092080);
    v133 = v42;
    v44 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v133, v43, v44);
    swift_release(v43, v45);
    v46 = v42[5];
    v47 = v42[6];
    v48 = *((_BYTE *)v42 + 56);
    v128 = v42[4];
    v123 = v47;
    v124 = v46;
    sub_10000B04C(v128, v46, v47, v48);
    swift_release(v42, v49);
    v133 = v39;
    v134 = v40;
    State.wrappedValue.getter(&v138, v41);
    v50 = v138;
    v51 = swift_getKeyPath(&unk_1000920A8);
    v133 = v50;
    v115 = v44;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v133, v51, v44);
    swift_release(v51, v52);
    v54 = v50[8];
    v55 = v41;
    if (v54)
    {
      v56 = swift_bridgeObjectRetain(v50[8]);
      v57 = sub_100014010(v56);
      swift_bridgeObjectRelease(v54);
      v133 = v57;
      v58 = sub_100004EAC(&qword_1000C7880);
      v59 = sub_10000B254(&qword_1000C7888, &qword_1000C7880, (uint64_t)&protocol conformance descriptor for [A]);
      v119 = BidirectionalCollection<>.joined(separator:)(2128928, 0xE300000000000000, v58, v59);
      v118 = v60;
      swift_release(v50, v60);
      swift_bridgeObjectRelease(v57);
    }
    else
    {
      swift_release(v50, v53);
      v119 = 0;
      v118 = 0xE000000000000000;
    }
    v117 = v48;
    v133 = v39;
    v134 = v40;
    State.wrappedValue.getter(&v138, v55);
    v67 = v138;
    v68 = swift_getKeyPath(&unk_100092030);
    v133 = v67;
    v69 = sub_100005900((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v133, v68, v69);
    swift_release(v68, v70);
    v71 = (_QWORD *)((char *)v67 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
    swift_beginAccess((char *)v67 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, &v133, 0, 0);
    v72 = *v71;
    v73 = swift_bridgeObjectRetain(v72);
    v74 = sub_1000141B8(v73);
    swift_bridgeObjectRelease(v72);
    v75 = sub_10001434C((uint64_t)v74);
    swift_bridgeObjectRelease(v74);
    v138 = v75;
    v76 = sub_100004EAC(&qword_1000C7880);
    v77 = sub_10000B254(&qword_1000C7888, &qword_1000C7880, (uint64_t)&protocol conformance descriptor for [A]);
    v122 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v76, v77);
    v116 = v78;
    swift_release(v67, v78);
    swift_bridgeObjectRelease(v75);
    v138 = v39;
    v139 = v40;
    State.wrappedValue.getter(&v132, v55);
    v79 = v132;
    v80 = swift_getKeyPath(&unk_1000920D0);
    v138 = v79;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v138, v80, v69);
    swift_release(v80, v81);
    v82 = v39;
    v83 = *(_QWORD *)((char *)v79 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__modelInfoString);
    v84 = *(_QWORD *)((char *)v79 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__modelInfoString + 8);
    swift_bridgeObjectRetain(v84);
    swift_release(v79, v85);
    v138 = v82;
    v139 = v40;
    State.wrappedValue.getter(&v132, v55);
    v86 = v132;
    v87 = swift_getKeyPath(&unk_100091FB0);
    v138 = v86;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v138, v87, v69);
    swift_release(v87, v88);
    v89 = *(_QWORD *)((char *)v86 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session);
    swift_release(v86, v90);
    v126 = v84;
    v64 = v83;
    if (v89)
    {
      v138 = v82;
      v139 = v40;
      State.wrappedValue.getter(&v132, v55);
      v91 = v132;
      v92 = swift_getKeyPath(&unk_100091FD8);
      v138 = v91;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v138, v92, v115);
      swift_release(v92, v93);
      v94 = *((unsigned __int8 *)v91 + 72);
      swift_release(v91, v95);
      v96 = 256;
      if (!v94)
        v96 = 0;
    }
    else
    {
      v96 = 256;
    }
    v121 = 0;
    v120 = v96 | v117;
    v66 = v128;
    v61 = v119;
    v62 = v118;
    v63 = v116;
    v65 = v126;
  }
  else
  {
    v61 = 0;
    v62 = 0;
    v122 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v123 = 0;
    v124 = 0;
    v120 = 0;
    v121 = 1;
  }
  v97 = *(void (**)(char *, void (**)(char *, uint64_t), uint64_t))(v129 + 16);
  v98 = v127;
  v99 = v131;
  v97((char *)v127, v130, v131);
  v100 = v125;
  v97(v125, v98, v99);
  v101 = (uint64_t *)&v100[*(int *)(sub_100004EAC(&qword_1000C7878) + 48)];
  v102 = (void *)v121;
  *v101 = v121;
  v101[1] = v61;
  v103 = v62;
  v104 = v122;
  v101[2] = v62;
  v101[3] = v104;
  v101[4] = v63;
  v101[5] = v64;
  v101[6] = v65;
  v101[7] = v66;
  v106 = v123;
  v105 = v124;
  v101[8] = v124;
  v101[9] = v106;
  v101[11] = 0;
  v101[12] = 0;
  v107 = v66;
  v128 = v66;
  v108 = v65;
  v126 = v65;
  v109 = v64;
  v119 = v64;
  v110 = v104;
  v111 = v103;
  v112 = v120;
  v101[10] = v120;
  sub_10000AFC4((uint64_t)v102, v61, v103, v104, v63, v109, v108, v107, v105, v106, v112, 0);
  v113 = *(void (**)(_QWORD, uint64_t))(v129 + 8);
  v113(v130, v99);
  sub_10000B094(v102, v61, v111, v110, v63, v119, v126, v128, v105, v106, v112, 0);
  return ((uint64_t (*)(_QWORD, uint64_t))v113)(v127, v99);
}

uint64_t sub_10000909C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v28 = a1;
  v1 = type metadata accessor for IconOnlyLabelStyle(0);
  v27 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004EAC(&qword_1000CBB00);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004EAC(&qword_1000C7890);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = Label.init(title:icon:)(sub_1000092DC, 0, sub_100009358, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
  IconOnlyLabelStyle.init()(v12);
  v13 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v14 = sub_100005900(&qword_1000CBD10, (uint64_t (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for IconOnlyLabelStyle);
  View.labelStyle<A>(_:)(v3, v4, v1, v13, v14);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v3, v1);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = static Edge.Set.horizontal.getter(v15);
  v17 = EdgeInsets.init(_all:)(-4.0);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v24 = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v28, v11, v8);
  v25 = v24 + *(int *)(sub_100004EAC(&qword_1000C7848) + 36);
  *(_BYTE *)v25 = v16;
  *(double *)(v25 + 8) = v17;
  *(_QWORD *)(v25 + 16) = v19;
  *(_QWORD *)(v25 + 24) = v21;
  *(_QWORD *)(v25 + 32) = v23;
  *(_BYTE *)(v25 + 40) = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1000092DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)(0x69724F20776F6853, 0xED00006C616E6967);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_100009358@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(_internalSystemName:)(0xD000000000000038, 0x80000001000AB540);
  *a1 = result;
  return result;
}

void sub_100009394(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  Swift::String v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char *v110;
  Swift::String v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  Swift::String v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  void (*v147)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v148;
  char *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157[24];
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  _BYTE v168[32];
  char v169[8];

  v156 = a2;
  v153 = a3;
  v4 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  v5 = __chkstk_darwin(v4);
  v145 = (char *)&v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v146 = (char *)&v144 - v7;
  v8 = sub_100004EAC(&qword_1000CA140);
  __chkstk_darwin(v8);
  v10 = (char *)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v144 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringResource.init(stringLiteral:)(0x616572666F6F7250, 0xE900000000000064);
  v14 = Text.init(_:)(v13);
  v16 = v15;
  v18 = v17;
  v20 = v19 & 1;
  v21 = Text.bold()();
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  sub_10000ADF4(v14, v16, v20);
  swift_bridgeObjectRelease(v18);
  v28 = type metadata accessor for Font.Design(0);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v148 = v28;
  v147 = v29;
  ((void (*)(char *, uint64_t, uint64_t))v29)(v10, 1, 1);
  v30 = static Font.system(size:weight:design:)(0, 1, v10, 14.0);
  v149 = v10;
  sub_10000AE2C((uint64_t)v10, &qword_1000CA140);
  v152 = Text.font(_:)(v30, v21, v23, v27, v25);
  v151 = v31;
  v150 = v32;
  v34 = v33;
  swift_release(v30, v31);
  sub_10000ADF4(v21, v23, v27);
  swift_bridgeObjectRelease(v25);
  v155 = a1;
  v163 = a1;
  v164 = v156;
  v35 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v158, v35);
  v36 = v158;
  KeyPath = swift_getKeyPath(&unk_100091FD8);
  v163 = v36;
  v38 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v163, KeyPath, v38);
  swift_release(KeyPath, v39);
  v41 = *(_BYTE *)(v36 + 72) == 1;
  v154 = v34;
  if (v41)
  {
    swift_release(v36, v40);
LABEL_14:
    v110 = v145;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(25, 1);
    v111._countAndFlagsBits = 23390;
    v111._object = (void *)0xE200000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v111);
    v163 = v155;
    v164 = v156;
    State.wrappedValue.getter(&v158, v35);
    v112 = v158;
    v113 = swift_getKeyPath(&unk_100092030);
    v163 = v112;
    v114 = sub_100005900((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v163, v113, v114);
    swift_release(v113, v115);
    v116 = (uint64_t *)(v112 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
    swift_beginAccess(v112 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v168, 0, 0);
    v117 = *v116;
    swift_bridgeObjectRetain(v117);
    swift_release(v112, v118);
    if ((unint64_t)v117 >> 62)
    {
      if (v117 < 0)
        v142 = v117;
      else
        v142 = v117 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v117);
      v119 = _CocoaArrayWrapper.endIndex.getter(v142);
      swift_bridgeObjectRelease(v117);
    }
    else
    {
      v119 = *(_QWORD *)((v117 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v117);
    v163 = v119;
    LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v163, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v120._object = (void *)0x80000001000AB520;
    v120._countAndFlagsBits = 0xD000000000000017;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v120);
    v121 = LocalizedStringKey.init(stringInterpolation:)(v110);
    v122 = Text.init(_:tableName:bundle:comment:)(v121);
    v124 = v123;
    v126 = v125;
    v128 = v127 & 1;
    v129 = (uint64_t)v149;
    v147(v149, 1, 1, v148);
    v130 = static Font.system(size:weight:design:)(0, 1, v129, 12.0);
    sub_10000AE2C(v129, &qword_1000CA140);
    v131 = Text.font(_:)(v130, v122, v124, v128, v126);
    v133 = v132;
    v135 = v134;
    v137 = v136;
    swift_release(v130, v132);
    sub_10000ADF4(v122, v124, v128);
    swift_bridgeObjectRelease(v126);
    v158 = v131;
    v159 = v133;
    v160 = v135 & 1;
    v161 = v137;
    v162 = 1;
    _ConditionalContent<>.init(storage:)(&v158, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
    v105 = v163;
    v106 = v164;
    v107 = v165;
    v108 = v166;
    v109 = v167;
    v34 = v154;
    goto LABEL_17;
  }
  v42 = swift_getKeyPath(&unk_100092030);
  v163 = v36;
  v144 = sub_100005900((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v163, v42, v144);
  swift_release(v42, v43);
  v44 = (uint64_t *)(v36 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
  swift_beginAccess(v36 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v169, 0, 0);
  v45 = *v44;
  swift_retain(v36);
  v46 = swift_bridgeObjectRetain(v45);
  v47 = sub_100014C2C(v46, v36);
  swift_bridgeObjectRelease(v45);
  swift_release_n(v36, 2);
  if (!v47)
    goto LABEL_14;

  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(4, 2);
  v48._countAndFlagsBits = 0;
  v48._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v48);
  v163 = v155;
  v164 = v156;
  State.wrappedValue.getter(&v158, v35);
  v49 = v158;
  v50 = swift_getKeyPath(&unk_100091FD8);
  v51 = v49 + OBJC_IVAR____TtC21WritingToolsUIService9ToolModel___observationRegistrar;
  v163 = v49;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v163, v50, v38);
  swift_release(v50, v52);
  if ((*(_BYTE *)(v49 + 72) & 1) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v145 = (char *)v51;
  v53 = swift_getKeyPath(&unk_100092030);
  v163 = v49;
  v34 = v144;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v163, v53, v144);
  swift_release(v53, v54);
  v55 = (uint64_t *)(v49 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
  swift_beginAccess(v49 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v168, 0, 0);
  v56 = *v55;
  swift_retain(v49);
  v57 = swift_bridgeObjectRetain(v56);
  v58 = sub_100014C2C(v57, v49);
  swift_bridgeObjectRelease(v56);
  swift_release(v49, v59);

  if (!v58)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v60 = swift_getKeyPath(&unk_100092030);
  v163 = v49;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v163, v60, v34);
  swift_release(v60, v61);
  v62 = *v55;
  swift_retain(v49);
  v63 = swift_bridgeObjectRetain(v62);
  v64 = sub_100083540(v63, v49);
  swift_bridgeObjectRelease(v62);
  swift_release(v49, v65);
  v66 = swift_getKeyPath(&unk_100091FD8);
  v163 = v49;
  v51 = (uint64_t)v145;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v163, v66, v38);
  swift_release(v66, v67);
  if ((*(_BYTE *)(v49 + 72) & 1) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v68 = swift_getKeyPath(&unk_100092030);
  v163 = v49;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v163, v68, v34);
  swift_release(v68, v69);
  v70 = *v55;
  swift_retain(v49);
  v71 = swift_bridgeObjectRetain(v70);
  v51 = (uint64_t)sub_100014C2C(v71, v49);
  swift_bridgeObjectRelease(v70);
  swift_release(v49, v72);
  if (v51)
  {
    v73 = sub_10007F3CC(v51, (uint64_t)v64);
    v75 = v74;
    swift_bridgeObjectRelease(v64);

    if ((v75 & 1) == 0)
    {
      swift_release(v49, v76);
      v34 = v154;
      if (!__OFADD__(v73, 1))
      {
        v163 = v73 + 1;
        LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v163, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
        v77._countAndFlagsBits = 543584032;
        v77._object = (void *)0xE400000000000000;
        LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v77);
        v163 = v155;
        v164 = v156;
        State.wrappedValue.getter(&v158, v35);
        v78 = v158;
        v79 = swift_getKeyPath(&unk_100092030);
        v163 = v78;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v163, v79, v144);
        swift_release(v79, v80);
        v81 = (_QWORD *)(v78 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
        swift_beginAccess(v78 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v157, 0, 0);
        v82 = *v81;
        v83 = swift_bridgeObjectRetain(*v81);
        v51 = (uint64_t)sub_100083540(v83, v78);
        swift_bridgeObjectRelease(v82);
        swift_release(v78, v84);
        if (!((unint64_t)v51 >> 62))
        {
          v85 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_13:
          swift_bridgeObjectRelease(v51);
          v163 = v85;
          v86 = v146;
          LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v163, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
          v87._countAndFlagsBits = 0;
          v87._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v87);
          v88 = LocalizedStringKey.init(stringInterpolation:)(v86);
          v89 = Text.init(_:tableName:bundle:comment:)(v88);
          v91 = v90;
          v93 = v92;
          v95 = v94 & 1;
          v96 = (uint64_t)v149;
          v147(v149, 1, 1, v148);
          v97 = static Font.system(size:weight:design:)(0, 1, v96, 12.0);
          sub_10000AE2C(v96, &qword_1000CA140);
          v98 = Text.font(_:)(v97, v89, v91, v95, v93);
          v100 = v99;
          v102 = v101;
          v104 = v103;
          swift_release(v97, v99);
          sub_10000ADF4(v89, v91, v95);
          swift_bridgeObjectRelease(v93);
          v158 = v98;
          v159 = v100;
          v160 = v102 & 1;
          v161 = v104;
          v162 = 0;
          _ConditionalContent<>.init(storage:)(&v158, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
          v105 = v163;
          v106 = v164;
          v107 = v165;
          v108 = v166;
          v109 = v167;
LABEL_17:
          v138 = v150 & 1;
          v139 = v153;
          v140 = v152;
          v141 = v151;
          *v153 = v152;
          v139[1] = v141;
          *((_BYTE *)v139 + 16) = v138;
          v139[3] = v34;
          v139[4] = v105;
          v139[5] = v106;
          v139[6] = v107;
          v139[7] = v108;
          *((_BYTE *)v139 + 64) = v109;
          sub_10000ADBC(v140, v141, v138);
          swift_bridgeObjectRetain(v34);
          sub_10000ADCC(v105, v106, v107, v108);
          sub_10000AE04(v105, v106, v107, v108);
          sub_10000ADF4(v140, v141, v138);
          swift_bridgeObjectRelease(v34);
          return;
        }
LABEL_25:
        if (v51 < 0)
          v143 = v51;
        else
          v143 = v51 & 0xFFFFFFFFFFFFFF8;
        v85 = _CocoaArrayWrapper.endIndex.getter(v143);
        goto LABEL_13;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    goto LABEL_29;
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_100009F54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0x2E6E6F7276656863, 0xEA00000000007075);
  *a1 = result;
  return result;
}

uint64_t sub_100009F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *))
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = sub_100004EAC(&qword_1000C9CC0);
  v7 = State.wrappedValue.getter(&v11, v6);
  v8 = v11;
  a5(v7);
  return swift_release(v8, v9);
}

uint64_t sub_100009FE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0x2E6E6F7276656863, 0xEC0000006E776F64);
  *a1 = result;
  return result;
}

uint64_t sub_10000A020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *Strong;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v6 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v13, v6);
  v7 = v13;
  sub_100082660(a5, 0);
  swift_release(v7, v8);
  State.wrappedValue.getter(&v13, v6);
  v9 = v13;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v13 + 16);
  result = swift_release(v9, v11);
  if (Strong)
  {
    objc_msgSend(Strong, "endWritingTools");
    return swift_unknownObjectRelease(Strong);
  }
  return result;
}

uint64_t sub_10000A0DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v2 = LocalizedStringKey.init(stringLiteral:)(1701736260, 0xE400000000000000);
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = Text.bold()(v3, v4);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  sub_10000ADF4(v3, v5, v9);
  result = swift_bridgeObjectRelease(v7);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v14 & 1;
  *(_QWORD *)(a1 + 24) = v16;
  return result;
}

uint64_t sub_10000A1A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[9] = a1;
  v2[10] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[11] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[12] = v4;
  v2[13] = v5;
  return swift_task_switch(sub_10000A210, v4, v5);
}

uint64_t sub_10000A210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 24) = v1;
  v2 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter((_QWORD *)(v0 + 48), v2);
  v3 = *(_QWORD *)(v0 + 48);
  KeyPath = swift_getKeyPath(&unk_100091FB0);
  *(_QWORD *)(v0 + 56) = v3;
  v5 = sub_100005900((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 56, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session);
  swift_release(v3, v8);
  if (v7)
  {
    swift_release(*(_QWORD *)(v0 + 88), v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v0 + 40) = v11;
    State.wrappedValue.getter((_QWORD *)(v0 + 64), v2);
    *(_QWORD *)(v0 + 112) = *(_QWORD *)(v0 + 64);
    v12 = (_QWORD *)swift_task_alloc(dword_1000CC3D4);
    *(_QWORD *)(v0 + 120) = v12;
    *v12 = v0;
    v12[1] = sub_10000A34C;
    return sub_10007F7DC();
  }
}

uint64_t sub_10000A34C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  swift_release(v2, v3);
  return swift_task_switch(sub_10000A3A0, *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
}

uint64_t sub_10000A3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 88), a2);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10000A3D8()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_10000A3F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000720C(*(_QWORD **)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10000A400(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void *a7, char a8)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v16 = sub_100004EAC(&qword_1000C7770);
  __chkstk_darwin(v16);
  v18 = (char *)v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A880(a1, a2, a3, a4);
  v19 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = 0;
  if (v21((char *)a6, 1, v19) != 1)
  {
    if (qword_1000C74A0 != -1)
      swift_once(&qword_1000C74A0, sub_10007DF64);
    sub_10000AD78(a6, (uint64_t)v18, &qword_1000C7770);
    result = v21(v18, 1, v19);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    swift_beginAccess(&qword_1000D1DF8, &v55, 32, 0);
    v24 = qword_1000D1DF8;
    if (*(_QWORD *)(qword_1000D1DF8 + 16) && (v25 = sub_10001CCB8((uint64_t)v18), (v26 & 1) != 0))
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
      swift_endAccess(&v55);
      v27 = *(void (**)(char *, uint64_t))(v20 + 8);
      swift_retain(v22);
      v27(v18, v19);
    }
    else
    {
      swift_endAccess(&v55);
      v22 = 0;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
    }
  }
  LOBYTE(v57) = a8 & 1;
  State.init(wrappedValue:)(&v55, &v57, &type metadata for Bool);
  v28 = v56;
  v54 = a6;
  v53 = v55;
  v52 = v56;
  v29 = a7;
  if (v22)
  {
    swift_retain(v56);
    v30 = v22;
  }
  else
  {
    v31 = type metadata accessor for ProofreadingModel(0);
    v30 = swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
    *(_QWORD *)(v30 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session) = 0;
    *(_QWORD *)(v30 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__task) = 0;
    *(_QWORD *)(v30 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions) = _swiftEmptyArrayStorage;
    swift_retain(v28);
    *(_QWORD *)(v30 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping) = sub_100061DBC((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v30 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__expandedSuggestion) = 0;
    v32 = sub_100061F5C((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v30 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates) = v32;
    v33 = (_QWORD *)(v30 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__modelInfoString);
    *v33 = 0;
    v33[1] = 0xE000000000000000;
    *(_BYTE *)(v30 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__showingOriginal) = 0;
    ObservationRegistrar.init()(v32);
    v34 = swift_unknownObjectWeakInit(v30 + 16, 0);
    *(_OWORD *)(v30 + 40) = 0u;
    *(_OWORD *)(v30 + 24) = 0u;
    *(_BYTE *)(v30 + 56) = -1;
    *(_QWORD *)(v30 + 64) = 0;
    *(_BYTE *)(v30 + 72) = 0;
    *(_QWORD *)(v30 + 80) = 0;
    *(_BYTE *)(v30 + 88) = 0;
    *(_QWORD *)(v30 + 96) = 0;
    *(_BYTE *)(v30 + 104) = 0;
    ObservationRegistrar.init()(v34);
    v22 = 0;
  }
  v57 = v30;
  v35 = type metadata accessor for ProofreadingModel(0);
  swift_retain(v22);
  State.init(wrappedValue:)(&v55, &v57, v35);
  v36 = v55;
  v37 = v56;
  swift_retain(v56);
  swift_retain(v36);
  v38 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v57, v38);
  v39 = v57;
  swift_unknownObjectWeakAssign(v57 + 16);
  swift_release(v39, v40);
  v55 = v36;
  v56 = v37;
  State.wrappedValue.getter(&v57, v38);
  v51[0] = a5;
  v41 = v57;
  KeyPath = swift_getKeyPath(&unk_100091F10);
  v51[1] = v51;
  __chkstk_darwin(KeyPath);
  v51[-2] = v41;
  v51[-1] = v29;
  v55 = v41;
  v43 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  v44 = v29;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v55, KeyPath, sub_10000A8BC, &v51[-4], (char *)&type metadata for () + 8, v43);
  swift_release(v41, v45);
  swift_release(v22, v46);
  swift_release(v52, v47);
  swift_release(v37, v48);
  swift_release(v36, v49);
  swift_unknownObjectRelease(v51[0]);
  swift_release(KeyPath, v50);

  sub_10000AE2C(v54, &qword_1000C7770);
  return v36;
}

uint64_t sub_10000A880(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1)
    return sub_10000A8A0(result, a2);
  if (!a4)
    return swift_bridgeObjectRelease(a3);
  return result;
}

uint64_t sub_10000A8A0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

void sub_10000A8BC()
{
  uint64_t v0;

  sub_10000B3AC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t destroy for ProofreadingInputDashboardView(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  swift_release(*a1, a2);
  swift_release(a1[1], v3);
  return swift_release(a1[3], v4);
}

uint64_t initializeWithCopy for ProofreadingInputDashboardView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v5 = a2[3];
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for ProofreadingInputDashboardView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5, v6);
  v7 = a1[1];
  v8 = a2[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v7, v9);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v10 = a1[3];
  v11 = a2[3];
  a1[3] = v11;
  swift_retain(v11);
  swift_release(v10, v12);
  return a1;
}

uint64_t assignWithTake for ProofreadingInputDashboardView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)a1, a2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProofreadingSuggestionView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProofreadingSuggestionView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProofreadingInputDashboardView()
{
  return &type metadata for ProofreadingInputDashboardView;
}

uint64_t sub_10000AAC0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000AF5E8, 1);
}

uint64_t sub_10000AAD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1000C779C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000070C8;
  return sub_10000A1A4(v2, v3);
}

uint64_t sub_10000AB48()
{
  uint64_t v0;

  return sub_10000A020(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40), 0);
}

unint64_t sub_10000AB6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7800;
  if (!qword_1000C7800)
  {
    v1 = sub_10000ABD0(&qword_1000C77F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7800);
  }
  return result;
}

uint64_t sub_10000ABD0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_10000AC14()
{
  unint64_t result;

  result = qword_1000C7810;
  if (!qword_1000C7810)
  {
    result = swift_getWitnessTable(&unk_1000941F4, &type metadata for InputDashboardButtonStyle);
    atomic_store(result, (unint64_t *)&qword_1000C7810);
  }
  return result;
}

uint64_t sub_10000AC68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_10000AC78(_BYTE *a1)
{
  uint64_t v1;

  return sub_10005DAFC(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_10000AC80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004EAC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000ACC8()
{
  uint64_t v0;

  return sub_100009F90(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40), (void (*)(_QWORD *))sub_100082880);
}

uint64_t sub_10000ACF4()
{
  uint64_t v0;

  return sub_100009F90(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40), (void (*)(_QWORD *))sub_100082B7C);
}

uint64_t sub_10000AD20(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(v2[2], a2);
  swift_release(v2[3], v3);
  swift_release(v2[5], v4);
  return swift_deallocObject(v2, 48, 7);
}

uint64_t sub_10000AD54()
{
  uint64_t v0;

  return sub_10000A020(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40), 1);
}

uint64_t sub_10000AD78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004EAC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000ADBC(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10000ADCC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_10000ADBC(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain(a4);
}

uint64_t sub_10000ADF4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1, a2);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10000AE04(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_10000ADF4(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_10000AE2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100004EAC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10000AE78()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000C7850;
  if (!qword_1000C7850)
  {
    v1 = sub_10000ABD0(&qword_1000C7848);
    v2[0] = sub_10000ABD0(&qword_1000CBB00);
    v2[1] = type metadata accessor for IconOnlyLabelStyle(255);
    v2[2] = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v2[3] = sub_100005900(&qword_1000CBD10, (uint64_t (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for IconOnlyLabelStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7850);
  }
  return result;
}

_QWORD *sub_10000AF68(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_10000AFA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = *(_QWORD *)(v1 - 8);
  if ((*(_BYTE *)(v2 + 82) & 2) != 0)
    return swift_release(*a1, v1);
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10000AFC4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  void *v15;
  id v16;

  if (result != 1)
  {
    v15 = (void *)result;
    swift_bridgeObjectRetain(a7);
    v16 = v15;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    sub_10000B04C(a8, a9, a10, a11);
    return swift_retain(a12);
  }
  return result;
}

uint64_t sub_10000B04C(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1)
    return sub_10000B060(result, a2, a3, a4);
  return result;
}

uint64_t sub_10000B060(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1)
    return sub_10000B080(result, a2);
  if (!a4)
    return swift_bridgeObjectRetain(a3);
  return result;
}

uint64_t sub_10000B080(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

void *sub_10000B094(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v16;

  if (result != (void *)1)
  {

    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a7);
    sub_10000B11C(a8, a9, a10, a11);
    return (void *)swift_release(a12, v16);
  }
  return result;
}

uint64_t sub_10000B11C(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1)
    return sub_10000A880(result, a2, a3, a4);
  return result;
}

unint64_t sub_10000B14C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7898;
  if (!qword_1000C7898)
  {
    v1 = sub_10000ABD0(&qword_1000C78A0);
    sub_10000B1B8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7898);
  }
  return result;
}

unint64_t sub_10000B1B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C78A8;
  if (!qword_1000C78A8)
  {
    v1 = sub_10000ABD0(&qword_1000C7788);
    sub_10000B254(&qword_1000C78B0, &qword_1000C7780, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100005900(&qword_1000C78B8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C78A8);
  }
  return result;
}

uint64_t sub_10000B254(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000ABD0(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000B294(uint64_t a1)
{
  return sub_10000B2DC(a1, qword_1000D1C48, 0xD000000000000010, 0x80000001000AB6A0);
}

uint64_t sub_10000B2B8(uint64_t a1)
{
  return sub_10000B2DC(a1, qword_1000D1C60, 0xD00000000000003ELL, 0x80000001000AB660);
}

uint64_t sub_10000B2DC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for LocalizedStringResource(0);
  sub_100006394(v7, a2);
  sub_1000063D4(v7, (uint64_t)a2);
  return LocalizedStringResource.init(stringLiteral:)(a3, a4);
}

void *sub_10000B338()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_100092310);
  v7 = v0;
  v2 = sub_10000C64C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath, v3);
  v4 = *(void **)(v0 + 24);
  v5 = v4;
  return v4;
}

void sub_10000B3AC(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a2;
  v3 = a2;

}

uint64_t sub_10000B3DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1000922E8);
  v7 = v0;
  v3 = sub_10000C64C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v3);
  swift_release(KeyPath, v4);
  v5 = *(_QWORD *)(v0 + 32);
  sub_10000B04C(v5, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56));
  return v5;
}

uint64_t sub_10000B474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  v8 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = a5;
  sub_10000B04C(a2, a3, a4, a5);
  return sub_10000B11C(v5, v6, v7, v8);
}

uint64_t sub_10000B4E4()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_1000922C0);
  v5 = v0;
  v2 = sub_10000C64C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
}

uint64_t sub_10000B554(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10000B58C(unsigned __int8 a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  void *Strong;
  void *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v9;

  v2 = v1[72];
  v1[72] = a1;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (Strong)
  {
    v4 = Strong;
    if ((objc_msgSend(Strong, "respondsToSelector:", "setIsProcessing:") & 1) != 0)
    {
      KeyPath = swift_getKeyPath(&unk_100092298);
      v9 = v1;
      v6 = sub_10000C64C();
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
      swift_release(KeyPath, v7);
      objc_msgSend(v4, "setIsProcessing:", v1[72]);
    }
    swift_unknownObjectRelease(v4);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 640))(v2);
}

uint64_t sub_10000B658()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100092298);
  v5 = v0;
  v2 = sub_10000C64C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t sub_10000B6C4(uint64_t a1, unsigned __int8 a2)
{
  return sub_10000B58C(a2);
}

uint64_t sub_10000B6F0()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000921F8);
  v6 = v0;
  v2 = sub_10000C64C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath, v3);
  v4 = *(_QWORD *)(v0 + 80);
  swift_errorRetain(v4);
  return v4;
}

uint64_t sub_10000B768@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000921F8);
  v9 = v3;
  v5 = sub_10000C64C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + 80);
  *a2 = v7;
  return swift_errorRetain(v7);
}

uint64_t sub_10000B7E0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000921F8);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  swift_errorRetain(v2);
  v5 = sub_10000C64C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10000C638, v8, (char *)&type metadata for () + 8, v5);
  swift_errorRelease(v2);
  return swift_release(KeyPath, v6);
}

uint64_t sub_10000B87C()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100092220);
  v5 = v0;
  v2 = sub_10000C64C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t sub_10000B8E8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100092220);
  v8 = v3;
  v5 = sub_10000C64C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  result = swift_release(KeyPath, v6);
  *a2 = *(_BYTE *)(v3 + 88);
  return result;
}

uint64_t sub_10000B95C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100092220);
  v8[2] = v3;
  v9 = v2;
  v10 = v3;
  v5 = sub_10000C64C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_10000C738, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

void sub_10000B9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;
  void *Strong;
  void *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;

  v1 = type metadata accessor for LocalizedStringResource(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100092270);
  v20 = v0;
  v6 = sub_10000C64C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, KeyPath, v6);
  swift_release(KeyPath, v7);
  if ((*(_BYTE *)(v0 + 96) & 1) != 0)
  {
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
    if (Strong)
    {
      v9 = Strong;
      if ((objc_msgSend(Strong, "respondsToSelector:", "showContentWarningWithTitle:message:") & 1) != 0)
      {
        if (qword_1000C73E8 != -1)
          swift_once(&qword_1000C73E8, sub_10000B294);
        v10 = sub_1000063D4(v1, (uint64_t)qword_1000D1C48);
        v11 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
        v11(v4, v10, v1);
        String.init(localized:)(v4);
        v13 = v12;
        if (qword_1000C73F0 != -1)
          swift_once(&qword_1000C73F0, sub_10000B2B8);
        v14 = sub_1000063D4(v1, (uint64_t)qword_1000D1C60);
        v11(v4, v14, v1);
        String.init(localized:)(v4);
        v16 = v15;
        v17 = String._bridgeToObjectiveC()();
        v18 = String._bridgeToObjectiveC()();
        objc_msgSend(v9, "showContentWarningWithTitle:message:", v17, v18);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v16);
        swift_unknownObjectRelease(v9);

      }
      else
      {
        swift_unknownObjectRelease(v9);
      }
    }
  }
}

uint64_t sub_10000BBE0()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100092270);
  v5 = v0;
  v2 = sub_10000C64C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return *(_QWORD *)(v0 + 96);
}

void sub_10000BC4C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 96) = a2;
  sub_10000B9EC();
}

uint64_t sub_10000BC78(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  char v19;
  uint64_t v20;

  if ((result & 1) == 0)
  {
    v2 = v1;
    KeyPath = swift_getKeyPath(&unk_100092248);
    v20 = v1;
    v4 = sub_10000C64C();
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, KeyPath, v4);
    result = swift_release(KeyPath, v5);
    if (*(_BYTE *)(v1 + 104) == 1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 648))(result);
      v6 = swift_getKeyPath(&unk_1000921F8);
      v20 = v1;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, v6, v4);
      result = swift_release(v6, v7);
      if (*(_QWORD *)(v1 + 80))
      {
        v8 = swift_getKeyPath(&unk_100092220);
        v20 = v1;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, v8, v4);
        result = swift_release(v8, v9);
        if ((*(_BYTE *)(v1 + 88) & 1) == 0)
        {
          Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
          if (Strong)
          {
            v11 = (void *)Strong;
            v12 = swift_getKeyPath(&unk_1000921F8);
            v20 = v1;
            ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, v12, v4);
            swift_release(v12, v13);
            v14 = *(_QWORD *)(v1 + 80);
            if (v14)
            {
              swift_errorRetain(*(_QWORD *)(v1 + 80));
              v15 = (void *)_convertErrorToNSError(_:)(v14);
              swift_errorRelease(v14);
            }
            else
            {
              v15 = 0;
            }
            objc_msgSend(v11, "endWritingToolsWithError:", v15);

            swift_unknownObjectRelease(v11);
          }
          v16 = swift_getKeyPath(&unk_100092220);
          __chkstk_darwin(v16);
          v18[2] = v2;
          v19 = 1;
          v20 = v2;
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v20, v16, sub_10000C738, v18, (char *)&type metadata for () + 8, v4);
          return swift_release(v16, v17);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10000BE84()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100092248);
  v5 = v0;
  v2 = sub_10000C64C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t sub_10000BEF0(uint64_t a1, char a2)
{
  uint64_t v3;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_BYTE *)(a1 + 104) = a2;
  return sub_10000BC78(v3);
}

uint64_t sub_10000BF20()
{
  _BYTE *v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v10;

  KeyPath = swift_getKeyPath(&unk_100092220);
  v10 = v0;
  v2 = sub_10000C64C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v2);
  swift_release(KeyPath, v3);
  if ((v0[88] & 1) == 0
    && (v4 = swift_getKeyPath(&unk_100092270),
        v10 = v0,
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, v4, v2),
        swift_release(v4, v5),
        (v0[96] & 1) != 0))
  {
    v7 = swift_getKeyPath(&unk_100092248);
    v10 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, v7, v2);
    swift_release(v7, v8);
    v6 = v0[104] ^ 1;
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

void sub_10000C00C()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000010, 0x80000001000AB6F0, "WritingToolsUIService/ToolModel.swift", 37, 2, 109, 0);
  __break(1u);
}

uint64_t sub_10000C064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10000C714(v0 + 16);

  sub_10000B11C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_errorRelease(*(_QWORD *)(v0 + 80));
  v1 = v0 + OBJC_IVAR____TtC21WritingToolsUIService9ToolModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10000C0E4()
{
  return type metadata accessor for ToolModel(0);
}

uint64_t type metadata accessor for ToolModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000C78F0;
  if (!qword_1000C78F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ToolModel);
  return result;
}

uint64_t sub_10000C128(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = "\b";
  v4[1] = &unk_100092188;
  v4[2] = &unk_1000921A0;
  v4[3] = &unk_100092188;
  v4[4] = &unk_1000921B8;
  v4[5] = &unk_100092188;
  v4[6] = &unk_1000921B8;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = &unk_1000921B8;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10000C1D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  NSString v24;
  Class isa;
  id v26;
  uint64_t KeyPath;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD, uint64_t);
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[16];
  uint64_t v46;
  id v47;
  _BYTE v48[8];
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[8];
  _BYTE v52[8];
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[8];
  _BYTE v56[136];
  _QWORD v57[2];

  v2 = v1;
  if (a1)
  {
    ((void (*)(void))swift_errorRetain)();
    v4 = (void *)_convertErrorToNSError(_:)(a1);
    v5 = objc_msgSend(v4, "domain");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v7 = v6;

    v8 = objc_msgSend(v4, "code");
    v9 = sub_100004EAC((uint64_t *)&unk_1000C7BD0);
    inited = swift_initStackObject(v9, v56);
    *(_OWORD *)(inited + 16) = xmmword_100092100;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v11;
    swift_getErrorValue(a1, v55, v52);
    v12 = sub_10004F620(v53, v54);
    v14 = v13;
    swift_bridgeObjectRelease(v15);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = v12;
    *(_QWORD *)(inited + 56) = v14;
    *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
    *(_QWORD *)(inited + 88) = v16;
    swift_getErrorValue(a1, v51, v48);
    sub_10004F620(v49, v50);
    v18 = v17;
    v20 = v19;
    swift_bridgeObjectRelease(v21);
    *(_QWORD *)(inited + 120) = &type metadata for String;
    *(_QWORD *)(inited + 96) = v18;
    *(_QWORD *)(inited + 104) = v20;
    v22 = sub_1000620F0(inited);
    v23 = objc_allocWithZone((Class)NSError);
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v22);
    v26 = objc_msgSend(v23, "initWithDomain:code:userInfo:", v24, v8, isa);

    KeyPath = swift_getKeyPath(&unk_1000921F8);
    __chkstk_darwin(KeyPath);
    v46 = v2;
    v47 = v26;
    v57[0] = v2;
    v28 = sub_10000C64C();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v57, KeyPath, sub_10000C638, v45, (char *)&type metadata for () + 8, v28);

    swift_release(KeyPath, v29);
    swift_errorRelease(a1);
  }
  else
  {
    v30 = swift_getKeyPath(&unk_1000921F8);
    __chkstk_darwin(v30);
    v46 = v1;
    v47 = 0;
    v57[0] = v1;
    v31 = sub_10000C64C();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v57, v30, sub_10000C638, v45, (char *)&type metadata for () + 8, v31);
    swift_release(v30, v32);
  }
  v33 = swift_getKeyPath(&unk_1000921F8);
  v57[0] = v2;
  v34 = sub_10000C64C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v57, v33, v34);
  result = swift_release(v33, v35);
  if (*(_QWORD *)(v2 + 80))
  {
    v37 = swift_getKeyPath(&unk_100092220);
    v57[0] = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v57, v37, v34);
    result = swift_release(v37, v38);
    if ((*(_BYTE *)(v2 + 88) & 1) == 0)
    {
      result = sub_10000BF20();
      if ((result & 1) == 0)
      {
        v39 = swift_getKeyPath(&unk_1000921F8);
        v57[0] = v2;
        ObservationRegistrar.access<A, B>(_:keyPath:)(v57, v39, v34);
        swift_release(v39, v40);
        v41 = *(_QWORD *)(v2 + 80);
        v42 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)v2 + 656);
        swift_errorRetain(v41);
        v42(0, v41);
        swift_errorRelease(v41);
        v43 = swift_getKeyPath(&unk_100092220);
        __chkstk_darwin(v43);
        v46 = v2;
        LOBYTE(v47) = 1;
        v57[0] = v2;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v57, v43, sub_10000C69C, v45, (char *)&type metadata for () + 8, v34);
        return swift_release(v43, v44);
      }
    }
  }
  return result;
}

uint64_t sub_10000C638()
{
  return sub_10000C6AC();
}

unint64_t sub_10000C64C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7778;
  if (!qword_1000C7778)
  {
    v1 = type metadata accessor for ToolModel(255);
    result = swift_getWitnessTable(&unk_1000921D8, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7778);
  }
  return result;
}

void sub_10000C69C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 88) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10000C6AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)(v2 + 80) = v1;
  swift_errorRetain();
  return swift_errorRelease(v3);
}

uint64_t sub_10000C714(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

void sub_10000C738()
{
  sub_10000C69C();
}

uint64_t sub_10000C74C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for ListTracker()
{
  return objc_opt_self(_TtC21WritingToolsUIService11ListTracker);
}

id sub_10000C798()
{
  char *v0;
  void *v1;
  objc_class *ObjectType;
  char *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  Class isa;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t ObjCClassFromMetadata;
  id v30;
  NSString v31;
  objc_super v33;
  uint64_t v34;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = &v0[OBJC_IVAR____TtC21WritingToolsUIService24AttachmentCollectionView_attachmentCollectionViewDelegate];
  *((_QWORD *)v3 + 1) = 0;
  swift_unknownObjectWeakInit(v3, 0);
  v4 = (void *)objc_opt_self(NSCollectionLayoutDimension);
  v5 = objc_msgSend(v4, "fractionalWidthDimension:", 1.0);
  v6 = objc_msgSend(v4, "fractionalHeightDimension:", 1.0);
  v7 = (void *)objc_opt_self(NSCollectionLayoutSize);
  v8 = objc_msgSend(v7, "sizeWithWidthDimension:heightDimension:", v5, v6);

  v9 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutItem), "itemWithLayoutSize:", v8);
  v10 = objc_msgSend(v4, "absoluteDimension:", 290.0);
  v11 = objc_msgSend(v4, "fractionalHeightDimension:", 1.0);
  v12 = objc_msgSend(v7, "sizeWithWidthDimension:heightDimension:", v10, v11);

  v13 = (void *)objc_opt_self(NSCollectionLayoutGroup);
  v14 = sub_100004EAC((uint64_t *)&unk_1000C7570);
  v15 = swift_allocObject(v14, 40, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100092370;
  *(_QWORD *)(v15 + 32) = v9;
  v34 = v15;
  specialized Array._endMutation()();
  sub_10000D294();
  v16 = v9;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v34);
  v18 = objc_msgSend(v13, "verticalGroupWithLayoutSize:subitems:", v12, isa);

  v19 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSection), "sectionWithGroup:", v18);
  objc_msgSend(v19, "setInterGroupSpacing:", 8.0);
  v20 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewCompositionalLayoutConfiguration), "init");
  objc_msgSend(v20, "setScrollDirection:", 1);
  v21 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewCompositionalLayout), "initWithSection:configuration:", v19, v20);
  v33.receiver = v1;
  v33.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v33, "initWithFrame:collectionViewLayout:", v21, 0.0, 0.0, 0.0, 0.0);
  v23 = (void *)objc_opt_self(UIColor);
  v24 = v22;
  v25 = objc_msgSend(v23, "clearColor");
  objc_msgSend(v24, "setBackgroundColor:", v25);

  v26 = v24;
  objc_msgSend(v26, "contentInset");
  objc_msgSend(v26, "setContentInset:");

  v27 = v26;
  objc_msgSend(v27, "contentInset");
  objc_msgSend(v27, "setContentInset:");

  v28 = type metadata accessor for AttachmentCollectionViewCell(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v28);
  v30 = v27;
  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "registerClass:forCellWithReuseIdentifier:", ObjCClassFromMetadata, v31);

  return v30;
}

uint64_t type metadata accessor for AttachmentCollectionView()
{
  return objc_opt_self(_TtC21WritingToolsUIService24AttachmentCollectionView);
}

char *sub_10000CC90(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  void *v10;
  char *v11;
  char *result;
  char *v13;
  uint64_t v14;
  char *v15;
  objc_super v16;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  swift_unknownObjectWeakInit(&v4[OBJC_IVAR____TtC21WritingToolsUIService28AttachmentCollectionViewCell_collectionView], 0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC21WritingToolsUIService28AttachmentCollectionViewCell_linkView] = 0;
  v10 = (void *)objc_opt_self(AEMessagesShelfRoundButton);
  v11 = v4;
  result = (char *)objc_msgSend(v10, "roundButtonWithStyle:", 0);
  if (result)
  {
    *(_QWORD *)&v11[OBJC_IVAR____TtC21WritingToolsUIService28AttachmentCollectionViewCell_closeButton] = result;
    v13 = &v11[OBJC_IVAR____TtC21WritingToolsUIService28AttachmentCollectionViewCell_attachment];
    v14 = type metadata accessor for Attachment(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);

    v16.receiver = v11;
    v16.super_class = ObjectType;
    v15 = (char *)objc_msgSendSuper2(&v16, "initWithFrame:", a1, a2, a3, a4);
    objc_msgSend(*(id *)&v15[OBJC_IVAR____TtC21WritingToolsUIService28AttachmentCollectionViewCell_closeButton], "addTarget:action:forControlEvents:", v15, "didTapCloseButton", 64);
    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10000CE14()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  id v7;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC21WritingToolsUIService28AttachmentCollectionViewCell_collectionView);
  if (Strong)
  {
    v7 = (id)Strong;
    v2 = Strong + OBJC_IVAR____TtC21WritingToolsUIService24AttachmentCollectionView_attachmentCollectionViewDelegate;
    v3 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC21WritingToolsUIService24AttachmentCollectionView_attachmentCollectionViewDelegate);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(v2 + 8);

      ObjectType = swift_getObjectType(v4);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(v0, ObjectType, v5);
      swift_unknownObjectRelease(v4);
    }
    else
    {

    }
  }
}

id sub_10000CFB8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10000D044()
{
  return type metadata accessor for AttachmentCollectionViewCell(0);
}

uint64_t type metadata accessor for AttachmentCollectionViewCell(uint64_t a1)
{
  uint64_t result;

  result = qword_1000C7D38;
  if (!qword_1000C7D38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AttachmentCollectionViewCell);
  return result;
}

void sub_10000D088(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "\b";
  v4[1] = &unk_100092408;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10000D118(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

void sub_10000D118(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000C7D48)
  {
    v2 = type metadata accessor for Attachment(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000C7D48);
  }
}

void sub_10000D16C()
{
  char *v0;
  id v1;
  char *v2;
  uint64_t v3;

  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC21WritingToolsUIService28AttachmentCollectionViewCell_collectionView], 0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC21WritingToolsUIService28AttachmentCollectionViewCell_linkView] = 0;
  v1 = objc_msgSend((id)objc_opt_self(AEMessagesShelfRoundButton), "roundButtonWithStyle:", 0);
  if (!v1)
    __break(1u);
  *(_QWORD *)&v0[OBJC_IVAR____TtC21WritingToolsUIService28AttachmentCollectionViewCell_closeButton] = v1;
  v2 = &v0[OBJC_IVAR____TtC21WritingToolsUIService28AttachmentCollectionViewCell_attachment];
  v3 = type metadata accessor for Attachment(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001000AB400, "WritingToolsUIService/AttachmentCollectionView.swift", 52, 2, 69, 0);
  __break(1u);
}

uint64_t sub_10000D254(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004EAC(&qword_1000C7D50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10000D294()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7D58;
  if (!qword_1000C7D58)
  {
    v1 = objc_opt_self(NSCollectionLayoutItem);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000C7D58);
  }
  return result;
}

uint64_t property wrapper backing initializer of ProofreadingView.proofreadingModel(uint64_t a1)
{
  return sub_10000D2E8(a1, type metadata accessor for ProofreadingModel);
}

uint64_t property wrapper backing initializer of ModelResponseView.feedbackController(uint64_t a1)
{
  return sub_10000D2E8(a1, (uint64_t (*)(_QWORD))&type metadata accessor for FBKEvaluationController);
}

uint64_t sub_10000D2E8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  v2 = a2(0);
  State.init(wrappedValue:)(&v5, &v4, v2);
  return v5;
}

uint64_t ProofreadingView.body.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = type metadata accessor for ProofreadingView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  sub_100015184(v1, (uint64_t)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_1000BEBB8, v8 + v5, v7 | 7);
  result = sub_10000D820((uint64_t)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  *a1 = sub_10000D864;
  a1[1] = v9;
  return result;
}

uint64_t type metadata accessor for ProofreadingView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000C7DB8;
  if (!qword_1000C7DB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ProofreadingView);
  return result;
}

uint64_t sub_10000D410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Strong;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v56 = a3;
  v52 = type metadata accessor for ProofreadingView(0);
  v5 = *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64);
  v54 = *(_QWORD *)(v52 - 8);
  v55 = v5;
  __chkstk_darwin(v52);
  v53 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100004EAC(&qword_1000C9E90);
  __chkstk_darwin(v51);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004EAC(&qword_1000C7E58);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = sub_100004EAC(&qword_1000C7E60);
  v12 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004EAC(&qword_1000C7E68);
  __chkstk_darwin(v15);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100004EAC(&qword_1000C7E70);
  v18 = __chkstk_darwin(v49);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v11 = static Alignment.center.getter(v18);
  v11[1] = v21;
  v22 = sub_100004EAC(&qword_1000C7E78);
  sub_10000D878(a2, a1, (_QWORD *)((char *)v11 + *(int *)(v22 + 44)));
  v23 = sub_10000B254(&qword_1000C7E80, &qword_1000C7E58, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.navigationBarBackButtonHidden(_:)(1, v9, v23);
  sub_10000AE2C((uint64_t)v11, &qword_1000C7E58);
  v24 = *(_QWORD *)(a2 + 24);
  v57 = *(_QWORD *)(a2 + 16);
  v58 = v24;
  v25 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v59, v25);
  v26 = v59;
  Strong = swift_unknownObjectWeakLoadStrong(v59 + 16);
  swift_release(v26, v28);
  Binding.projectedValue.getter(v51);
  sub_10003FA74(Strong, 1, 0, (uint64_t)v8, (uint64_t)&v17[*(int *)(v15 + 36)]);
  v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v17, v14, v50);
  v30 = static Alignment.center.getter(v29);
  v32 = v31;
  sub_10000AD78((uint64_t)v17, (uint64_t)v20, &qword_1000C7E68);
  v33 = v49;
  v34 = &v20[*(int *)(v49 + 36)];
  *(_WORD *)v34 = 1;
  *((_QWORD *)v34 + 1) = v30;
  *((_QWORD *)v34 + 2) = v32;
  sub_10000AE2C((uint64_t)v17, &qword_1000C7E68);
  v35 = *(_QWORD *)(a2 + 24);
  v57 = *(_QWORD *)(a2 + 16);
  v58 = v35;
  State.wrappedValue.getter(&v59, v25);
  v36 = v59;
  KeyPath = swift_getKeyPath(&unk_100092580);
  v57 = v36;
  v38 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v57, KeyPath, v38);
  swift_release(KeyPath, v39);
  LOBYTE(v32) = *(_BYTE *)(v36 + 72);
  swift_release(v36, v40);
  LOBYTE(v57) = v32;
  v41 = v53;
  sub_100015184(a2, v53, type metadata accessor for ProofreadingView);
  v42 = *(unsigned __int8 *)(v54 + 80);
  v43 = (v42 + 16) & ~v42;
  v44 = swift_allocObject(&unk_1000BEC28, v43 + v55, v42 | 7);
  sub_10000D820(v41, v44 + v43);
  v45 = sub_100014810();
  View.onChange<A>(of:initial:_:)(&v57, 0, sub_1000147C4, v44, v33, &type metadata for Bool, v45, &protocol witness table for Bool);
  swift_release(v44, v46);
  return sub_10000AE2C((uint64_t)v20, &qword_1000C7E70);
}

uint64_t sub_10000D820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ProofreadingView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000D868(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ProofreadingView.body>>, 1);
}

uint64_t sub_10000D878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  char v92[16];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;

  v4 = a1;
  v71 = a1;
  v91 = a3;
  v75 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v77 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v6 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100004EAC(&qword_1000C7EA8);
  __chkstk_darwin(v73);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100004EAC(&qword_1000C7EB0);
  v78 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100004EAC(&qword_1000C7EB8);
  v81 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v72 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100004EAC(&qword_1000C7EC0);
  v88 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v76 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004EAC(&qword_1000C7EC8);
  v89 = *(_QWORD *)(v13 - 8);
  v90 = v13;
  __chkstk_darwin(v13);
  v80 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100004EAC(&qword_1000C7ED0);
  v15 = __chkstk_darwin(v84);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v83 = (uint64_t)&v70 - v19;
  v87 = static Color.clear.getter(v18);
  v86 = static Edge.Set.vertical.getter(v87);
  v82 = static SafeAreaRegions.all.getter();
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v82);
  *((_QWORD *)v8 + 1) = 0x4024000000000000;
  v8[16] = 0;
  v20 = sub_100004EAC(&qword_1000C7ED8);
  sub_10000DEA0(v4, a2, (uint64_t)&v8[*(int *)(v20 + 44)]);
  v21 = LocalizedStringKey.init(stringLiteral:)(0x616572666F6F7250, 0xE900000000000064);
  v23 = v22;
  LOBYTE(v4) = v24;
  v26 = v25;
  v27 = sub_10000B254(&qword_1000C7EE0, &qword_1000C7EA8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v28 = v4 & 1;
  v29 = v73;
  View.navigationTitle(_:)(v21, v23, v28, v26, v73, v27);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v23);
  sub_10000AE2C((uint64_t)v8, &qword_1000C7EA8);
  v30 = v77;
  v31 = v75;
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v6, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v75);
  v96 = v29;
  v97 = v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v96, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v33 = v72;
  v34 = v74;
  View.navigationBarTitleDisplayMode(_:)(v6, v74, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v31);
  v35 = v34;
  (*(void (**)(char *, uint64_t))(v78 + 8))(v10, v34);
  v36 = v71;
  v37 = *(_QWORD *)(v71 + 40);
  v94 = *(_QWORD *)(v71 + 32);
  v95 = v37;
  sub_100004EAC(&qword_1000C7EE8);
  State.projectedValue.getter(&v96);
  v38 = v96;
  v39 = v97;
  v40 = v98;
  v96 = v35;
  v97 = OpaqueTypeConformance2;
  v41 = swift_getOpaqueTypeConformance2(&v96, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v42 = v76;
  v43 = v79;
  View.inlineFeedback(controller:completion:)(v38, v39, v40, 0, 0, v79, v41);

  swift_release(v39, v44);
  swift_release(v38, v45);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v33, v43);
  v93 = v36;
  v46 = sub_100004EAC(&qword_1000C7EF0);
  v96 = v43;
  v97 = v41;
  v47 = swift_getOpaqueTypeConformance2(&v96, &opaque type descriptor for <<opaque return type of View.inlineFeedback(controller:completion:)>>, 1);
  v48 = sub_10000B254(&qword_1000C7EF8, &qword_1000C7EF0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v49 = v80;
  v50 = v85;
  View.toolbar<A>(content:)(sub_100014984, v92, v85, v46, v47, v48);
  v51 = (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v42, v50);
  LOBYTE(v47) = static Edge.Set.horizontal.getter(v51);
  v52 = EdgeInsets.init(_all:)(10.0);
  v54 = v53;
  v56 = v55;
  v58 = v57;
  v60 = v89;
  v59 = v90;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v17, v49, v90);
  v61 = &v17[*(int *)(v84 + 36)];
  *v61 = v47;
  *((double *)v61 + 1) = v52;
  *((_QWORD *)v61 + 2) = v54;
  *((_QWORD *)v61 + 3) = v56;
  *((_QWORD *)v61 + 4) = v58;
  v61[40] = 0;
  (*(void (**)(char *, uint64_t))(v60 + 8))(v49, v59);
  v62 = v83;
  sub_10000AC80((uint64_t)v17, v83, &qword_1000C7ED0);
  sub_10000AD78(v62, (uint64_t)v17, &qword_1000C7ED0);
  v63 = v91;
  v64 = v87;
  v65 = v82;
  *v91 = v87;
  v63[1] = v65;
  *((_BYTE *)v63 + 16) = v86;
  v66 = v63;
  v67 = sub_100004EAC(&qword_1000C7F00);
  sub_10000AD78((uint64_t)v17, (uint64_t)v66 + *(int *)(v67 + 48), &qword_1000C7ED0);
  swift_retain(v64);
  sub_10000AE2C(v62, &qword_1000C7ED0);
  sub_10000AE2C((uint64_t)v17, &qword_1000C7ED0);
  return swift_release(v64, v68);
}

void sub_10000DEA0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t KeyPath;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  char *v101;
  Swift::String v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  Swift::String v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  Swift::String v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  int v161;
  char *v162;
  uint64_t v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  double v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _OWORD *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  char *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  __int128 v228;
  uint64_t v229;
  _OWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  Swift::String v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  Swift::String v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  char v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  double v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  char v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _OWORD *v296;
  __int128 v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _OWORD *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _OWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  _QWORD *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  _OWORD *v353;
  uint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  uint64_t v373;
  id v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  id v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  char *v391;
  char *v392;
  uint64_t v393;
  char *v394;
  char **v395;
  char *v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  _OWORD *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424[3];
  uint64_t v425;
  char v426[32];
  _QWORD *v427;
  uint64_t v428;
  _QWORD v429[2];
  _QWORD *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  _BYTE v435[32];
  char v436[24];
  char v437[24];
  __int128 v438;
  __int128 v439;
  __int128 v440;

  v404 = a2;
  v417 = a3;
  v421 = 0;
  v416 = sub_100004EAC(&qword_1000C7F48);
  __chkstk_darwin(v416);
  v409 = (uint64_t)&v384 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004EAC(&qword_1000C7F50);
  __chkstk_darwin(v5);
  v403 = (uint64_t *)((char *)&v384 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v402 = sub_100004EAC(&qword_1000C7F58);
  __chkstk_darwin(v402);
  v406 = (uint64_t)&v384 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v405 = sub_100004EAC(&qword_1000C7F60);
  v8 = __chkstk_darwin(v405);
  v407 = (char *)&v384 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v408 = (uint64_t)&v384 - v10;
  v399 = sub_100004EAC(&qword_1000C7F68);
  __chkstk_darwin(v399);
  v401 = (uint64_t *)((char *)&v384 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v400 = sub_100004EAC(&qword_1000C7F70);
  __chkstk_darwin(v400);
  v395 = (char **)((char *)&v384 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v389 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v389);
  v392 = (char *)&v384 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v390 = sub_100004EAC(&qword_1000CBCD0);
  __chkstk_darwin(v390);
  v393 = (uint64_t)&v384 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004EAC(&qword_1000C7F78);
  __chkstk_darwin(v15);
  v387 = (uint64_t *)((char *)&v384 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v386 = sub_100004EAC(&qword_1000C7F80);
  __chkstk_darwin(v386);
  v391 = (char *)&v384 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v388 = sub_100004EAC(&qword_1000C7F88);
  v18 = __chkstk_darwin(v388);
  v394 = (char *)&v384 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v397 = (uint64_t)&v384 - v20;
  v21 = sub_100004EAC(&qword_1000CA140);
  __chkstk_darwin(v21);
  v398 = (char *)&v384 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  v24 = __chkstk_darwin(v23);
  v410 = (char *)&v384 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v396 = (char *)&v384 - v26;
  v27 = sub_100004EAC(&qword_1000C7F90);
  v28 = __chkstk_darwin(v27);
  v411 = (uint64_t)&v384 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v413 = (uint64_t)&v384 - v30;
  v414 = sub_100004EAC(&qword_1000C7F98);
  __chkstk_darwin(v414);
  v415 = (_OWORD *)((char *)&v384 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = type metadata accessor for ProofreadingView(0);
  v33 = __chkstk_darwin(v32);
  v412 = (uint64_t)&v384 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v36 = (char *)&v384 - v35;
  v37 = sub_100004EAC(&qword_1000C7FA0);
  v38 = __chkstk_darwin(v37);
  v422 = (uint64_t)&v384 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v423 = (uint64_t)&v384 - v40;
  v41 = *(_QWORD *)(a1 + 16);
  v42 = *(_QWORD *)(a1 + 24);
  v419 = (_QWORD *)a1;
  *(_QWORD *)&v438 = v41;
  *((_QWORD *)&v438 + 1) = v42;
  v43 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v430, v43);
  v44 = v430;
  KeyPath = swift_getKeyPath(&unk_100092600);
  *(_QWORD *)&v438 = v44;
  v46 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v438, KeyPath, v46);
  swift_release(KeyPath, v47);
  v48 = v44[10];
  swift_errorRetain(v48);
  swift_release(v44, v49);
  v418 = v43;
  v420 = v46;
  if (!v48)
  {
    *(_QWORD *)&v438 = v41;
    *((_QWORD *)&v438 + 1) = v42;
    State.wrappedValue.getter(&v430, v43);
    v72 = v430;
    v73 = swift_getKeyPath(&unk_100092580);
    *(_QWORD *)&v438 = v72;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v438, v73, v46);
    swift_release(v73, v74);
    v75 = *((_BYTE *)v72 + 72);
    swift_release(v72, v76);
    v71 = v419;
    sub_100015184((uint64_t)v419, (uint64_t)v36, type metadata accessor for ProofreadingView);
    if ((v75 & 1) != 0)
    {
      sub_1000151C8((uint64_t)v36, type metadata accessor for ProofreadingView);
      v77 = v420;
      v78 = v411;
    }
    else
    {
      v79 = *((_QWORD *)v36 + 3);
      *(_QWORD *)&v438 = *((_QWORD *)v36 + 2);
      *((_QWORD *)&v438 + 1) = v79;
      State.wrappedValue.getter(&v430, v43);
      v80 = v430;
      v81 = swift_getKeyPath(&unk_100092628);
      *(_QWORD *)&v438 = v80;
      v82 = sub_100005900((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel, (uint64_t)&unk_1000921D8);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v438, v81, v82);
      swift_release(v81, v83);
      v84 = (_QWORD *)((char *)v80 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
      swift_beginAccess((char *)v80 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v437, 0, 0);
      v85 = *v84;
      swift_bridgeObjectRetain(v85);
      swift_release(v80, v86);
      v78 = v411;
      if ((unint64_t)v85 >> 62)
      {
        if (v85 < 0)
          v382 = v85;
        else
          v382 = v85 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v85);
        v87 = _CocoaArrayWrapper.endIndex.getter(v382);
        swift_bridgeObjectRelease(v85);
      }
      else
      {
        v87 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v77 = v420;
      swift_bridgeObjectRelease(v85);
      sub_1000151C8((uint64_t)v36, type metadata accessor for ProofreadingView);
      if (!v87)
      {
        v217 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000017, 0x80000001000AB950);
        v218 = Text.init(_:tableName:bundle:comment:)(v217);
        v220 = v219;
        v222 = v221;
        v224 = v223 & 1;
        v430 = (_QWORD *)v218;
        v431 = v219;
        v432 = v223 & 1;
        v433 = v221;
        LOBYTE(v434) = 1;
        sub_10000ADBC(v218, v219, v223 & 1);
        swift_bridgeObjectRetain(v222);
        v225 = sub_100004EAC(&qword_1000C8008);
        v226 = sub_100014F90();
        _ConditionalContent<>.init(storage:)(&v430, &type metadata for Text, v225, &protocol witness table for Text, v226);
        v227 = v440;
        v228 = v439;
        v229 = v414;
        v230 = v415;
        *v415 = v438;
        v230[1] = v228;
        *((_BYTE *)v230 + 32) = v227;
        swift_storeEnumTagMultiPayload(v230, v229, 0);
        v231 = sub_100004EAC(&qword_1000C7FF0);
        v232 = sub_100014FB4(&qword_1000C7FF8, &qword_1000C7FF0, (void (*)(void))sub_100014F90, (uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
        v233 = sub_10000B254(&qword_1000C8018, &qword_1000C7F48, (uint64_t)&protocol conformance descriptor for TupleView<A>);
        _ConditionalContent<>.init(storage:)(v230, v231, v416, v232, v233);
        sub_10000ADF4(v218, v220, v224);
        swift_bridgeObjectRelease(v222);
        goto LABEL_31;
      }
    }
    v88 = v71[2];
    v89 = v71[3];
    *(_QWORD *)&v438 = v88;
    *((_QWORD *)&v438 + 1) = v89;
    State.wrappedValue.getter(&v430, v43);
    v90 = (uint64_t)v430;
    v91 = swift_getKeyPath(&unk_100092580);
    *(_QWORD *)&v438 = v90;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v438, v91, v77);
    swift_release(v91, v92);
    if (*(_BYTE *)(v90 + 72) == 1)
    {
      swift_release(v90, v93);
LABEL_24:
      LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(25, 1);
      v234._countAndFlagsBits = 23390;
      v234._object = (void *)0xE200000000000000;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v234);
      *(_QWORD *)&v438 = v88;
      *((_QWORD *)&v438 + 1) = v89;
      State.wrappedValue.getter(&v430, v43);
      v235 = (uint64_t)v430;
      v236 = swift_getKeyPath(&unk_100092628);
      *(_QWORD *)&v438 = v235;
      v237 = sub_100005900((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel, (uint64_t)&unk_1000921D8);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v438, v236, v237);
      swift_release(v236, v238);
      v239 = (_QWORD *)(v235 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
      swift_beginAccess(v235 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v435, 0, 0);
      v240 = *v239;
      v241 = swift_bridgeObjectRetain(*v239);
      v242 = v421;
      v243 = (uint64_t)sub_100083540(v241, v235);
      swift_bridgeObjectRelease(v240);
      swift_release(v235, v244);
      v421 = v242;
      if ((unint64_t)v243 >> 62)
      {
        if (v243 < 0)
          v381 = v243;
        else
          v381 = v243 & 0xFFFFFFFFFFFFFF8;
        v245 = _CocoaArrayWrapper.endIndex.getter(v381);
      }
      else
      {
        v245 = *(_QWORD *)((v243 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v246 = (uint64_t)v398;
      swift_bridgeObjectRelease(v243);
      *(_QWORD *)&v438 = v245;
      v247 = v410;
      LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v438, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
      v248._object = (void *)0x80000001000AB520;
      v248._countAndFlagsBits = 0xD000000000000017;
      LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v248);
      v249 = LocalizedStringKey.init(stringInterpolation:)(v247);
      v250 = Text.init(_:tableName:bundle:comment:)(v249);
      v252 = v251;
      v254 = v253;
      v256 = v255 & 1;
      v257 = type metadata accessor for Font.Design(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v257 - 8) + 56))(v246, 1, 1, v257);
      v258 = static Font.system(size:weight:design:)(0, 1, v246, 15.0);
      sub_10000AE2C(v246, &qword_1000CA140);
      v411 = Text.font(_:)(v258, v250, v252, v256, v254);
      v260 = v259;
      v262 = v261;
      v264 = v263;
      swift_release(v258, v259);
      sub_10000ADF4(v250, v252, v256);
      v265 = swift_bridgeObjectRelease(v254);
      v266 = static Edge.Set.top.getter(v265);
      v267 = EdgeInsets.init(_all:)(-10.0);
      v269 = v268;
      v271 = v270;
      v273 = v272;
      v275 = static Edge.Set.bottom.getter(v274);
      v276 = v419[3];
      *(_QWORD *)&v438 = v419[2];
      *((_QWORD *)&v438 + 1) = v276;
      State.wrappedValue.getter(&v430, v418);
      v277 = v430;
      v278 = swift_getKeyPath(&unk_100092580);
      *(_QWORD *)&v438 = v277;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v438, v278, v420);
      swift_release(v278, v279);
      LODWORD(v254) = *((unsigned __int8 *)v277 + 72);
      v281 = swift_release(v277, v280);
      if ((_DWORD)v254 == 1)
        v282 = static HierarchicalShapeStyle.secondary.getter(v281);
      else
        v282 = static HierarchicalShapeStyle.primary.getter(v281);
      v216 = (uint64_t)v407;
      v283 = v399;
      v284 = v262 & 1;
      LOBYTE(v438) = v262 & 1;
      LOBYTE(v430) = 0;
      v426[0] = 1;
      v285 = v401;
      *v401 = v411;
      v285[1] = v260;
      *((_BYTE *)v285 + 16) = v284;
      v285[3] = v264;
      *((_BYTE *)v285 + 32) = v266;
      *((double *)v285 + 5) = v267;
      v285[6] = v269;
      v285[7] = v271;
      v285[8] = v273;
      *((_BYTE *)v285 + 72) = 0;
      *((_BYTE *)v285 + 80) = v275;
      *(_OWORD *)(v285 + 11) = 0u;
      *(_OWORD *)(v285 + 13) = 0u;
      *((_BYTE *)v285 + 120) = 1;
      *((_DWORD *)v285 + 31) = v282;
      swift_storeEnumTagMultiPayload(v285, v283, 1);
      v286 = sub_100004EAC(&qword_1000C7FA8);
      v287 = sub_10000B254(&qword_1000C7FB0, &qword_1000C7F70, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v288 = sub_100014E90();
      v214 = v413;
      v215 = _ConditionalContent<>.init(storage:)(v285, v400, v286, v287, v288);
LABEL_30:
      v289 = static VerticalAlignment.center.getter(v215);
      v290 = (uint64_t)v403;
      *v403 = v289;
      *(_QWORD *)(v290 + 8) = 0;
      *(_BYTE *)(v290 + 16) = 0;
      v291 = sub_100004EAC(&qword_1000C7FE0);
      v71 = v419;
      v292 = sub_100011C40((uint64_t)v419, (char *)(v290 + *(int *)(v291 + 44)));
      v293 = static Alignment.center.getter(v292);
      _FrameLayout.init(width:height:alignment:)(&v438, 0, 1, 0x4049000000000000, 0, v293, v294);
      v295 = v406;
      sub_10000AD78(v290, v406, &qword_1000C7F50);
      v296 = (_OWORD *)(v295 + *(int *)(v402 + 36));
      v297 = v439;
      *v296 = v438;
      v296[1] = v297;
      v296[2] = v440;
      sub_10000AE2C(v290, &qword_1000C7F50);
      v298 = v71[3];
      v430 = (_QWORD *)v71[2];
      v431 = v298;
      State.wrappedValue.getter(&v427, v418);
      v299 = v427;
      v300 = swift_getKeyPath(&unk_100092580);
      v430 = v299;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v430, v300, v420);
      swift_release(v300, v301);
      LOBYTE(v300) = *((_BYTE *)v299 + 72);
      swift_release(v299, v302);
      v303 = swift_getKeyPath(&unk_1000925D0);
      v304 = swift_allocObject(&unk_1000BECC8, 17, 7);
      *(_BYTE *)(v304 + 16) = v300;
      sub_10000AD78(v295, v216, &qword_1000C7F58);
      v305 = (uint64_t *)(v216 + *(int *)(v405 + 36));
      *v305 = v303;
      v305[1] = (uint64_t)sub_100015794;
      v305[2] = v304;
      sub_10000AE2C(v295, &qword_1000C7F58);
      v306 = v216;
      v307 = v216;
      v308 = v408;
      sub_10000AC80(v306, v408, &qword_1000C7F60);
      sub_10000AD78(v214, v78, &qword_1000C7F90);
      sub_10000AD78(v308, v307, &qword_1000C7F60);
      v309 = v409;
      sub_10000AD78(v78, v409, &qword_1000C7F90);
      v310 = sub_100004EAC(&qword_1000C7FE8);
      sub_10000AD78(v307, v309 + *(int *)(v310 + 48), &qword_1000C7F60);
      sub_10000AE2C(v307, &qword_1000C7F60);
      sub_10000AE2C(v78, &qword_1000C7F90);
      v311 = v415;
      sub_10000AD78(v309, (uint64_t)v415, &qword_1000C7F48);
      swift_storeEnumTagMultiPayload(v311, v414, 1);
      v312 = sub_100004EAC(&qword_1000C7FF0);
      v313 = sub_100014FB4(&qword_1000C7FF8, &qword_1000C7FF0, (void (*)(void))sub_100014F90, (uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
      v314 = sub_10000B254(&qword_1000C8018, &qword_1000C7F48, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      _ConditionalContent<>.init(storage:)(v311, v312, v416, v313, v314);
      sub_10000AE2C(v309, &qword_1000C7F48);
      sub_10000AE2C(v308, &qword_1000C7F60);
      sub_10000AE2C(v413, &qword_1000C7F90);
      goto LABEL_31;
    }
    v94 = swift_getKeyPath(&unk_100092628);
    *(_QWORD *)&v438 = v90;
    v385 = sub_100005900((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v438, v94, v385);
    swift_release(v94, v95);
    v96 = (uint64_t *)(v90 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
    swift_beginAccess(v90 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v436, 0, 0);
    v97 = *v96;
    swift_retain(v90);
    v98 = swift_bridgeObjectRetain(v97);
    v99 = v421;
    v100 = sub_100014C2C(v98, v90);
    v421 = v99;
    swift_bridgeObjectRelease(v97);
    swift_release_n(v90, 2);
    if (!v100)
    {
      v43 = v418;
      goto LABEL_24;
    }

    v101 = v396;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(4, 2);
    v102._countAndFlagsBits = 0;
    v102._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v102);
    *(_QWORD *)&v438 = v88;
    *((_QWORD *)&v438 + 1) = v89;
    State.wrappedValue.getter(&v430, v418);
    v103 = v77;
    v104 = (uint64_t)v430;
    v105 = swift_getKeyPath(&unk_100092580);
    v106 = v104 + OBJC_IVAR____TtC21WritingToolsUIService9ToolModel___observationRegistrar;
    *(_QWORD *)&v438 = v104;
    v410 = (char *)(v104 + OBJC_IVAR____TtC21WritingToolsUIService9ToolModel___observationRegistrar);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v438, v105, v103);
    swift_release(v105, v107);
    if ((*(_BYTE *)(v104 + 72) & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v108 = swift_getKeyPath(&unk_100092628);
      *(_QWORD *)&v438 = v104;
      v109 = v385;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v438, v108, v385);
      swift_release(v108, v110);
      v111 = (uint64_t *)(v104 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
      swift_beginAccess(v104 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v435, 0, 0);
      v112 = *v111;
      swift_retain(v104);
      v113 = swift_bridgeObjectRetain(v112);
      v114 = v421;
      v115 = sub_100014C2C(v113, v104);
      swift_bridgeObjectRelease(v112);
      swift_release(v104, v116);

      if (!v115)
        goto LABEL_58;
      v117 = swift_getKeyPath(&unk_100092628);
      *(_QWORD *)&v438 = v104;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v438, v117, v109);
      swift_release(v117, v118);
      v119 = *v111;
      swift_retain(v104);
      v120 = swift_bridgeObjectRetain(v119);
      v121 = sub_100083540(v120, v104);
      swift_bridgeObjectRelease(v119);
      swift_release(v104, v122);
      v123 = swift_getKeyPath(&unk_100092580);
      *(_QWORD *)&v438 = v104;
      v106 = (uint64_t)v410;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v438, v123, v420);
      swift_release(v123, v124);
      if ((*(_BYTE *)(v104 + 72) & 1) == 0)
      {
        v125 = swift_getKeyPath(&unk_100092628);
        *(_QWORD *)&v438 = v104;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v438, v125, v109);
        swift_release(v125, v126);
        v127 = *v111;
        swift_retain(v104);
        v128 = swift_bridgeObjectRetain(v127);
        v106 = (uint64_t)sub_100014C2C(v128, v104);
        swift_bridgeObjectRelease(v127);
        swift_release(v104, v129);
        if (!v106)
        {
LABEL_59:
          __break(1u);
          return;
        }
        v130 = sub_10007F3CC(v106, (uint64_t)v121);
        v132 = v131;
        swift_bridgeObjectRelease(v121);

        v134 = v385;
        if ((v132 & 1) == 0)
        {
          swift_release(v104, v133);
          if (!__OFADD__(v130, 1))
          {
            *(_QWORD *)&v438 = v130 + 1;
            LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v438, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
            v135._countAndFlagsBits = 543584032;
            v135._object = (void *)0xE400000000000000;
            LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v135);
            v136 = v419[3];
            *(_QWORD *)&v438 = v419[2];
            *((_QWORD *)&v438 + 1) = v136;
            State.wrappedValue.getter(&v430, v418);
            v137 = (uint64_t)v430;
            v138 = swift_getKeyPath(&unk_100092628);
            *(_QWORD *)&v438 = v137;
            ObservationRegistrar.access<A, B>(_:keyPath:)(&v438, v138, v134);
            swift_release(v138, v139);
            v140 = (_QWORD *)(v137 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
            swift_beginAccess(v137 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v426, 0, 0);
            v141 = *v140;
            v142 = swift_bridgeObjectRetain(*v140);
            v106 = (uint64_t)sub_100083540(v142, v137);
            swift_bridgeObjectRelease(v141);
            swift_release(v137, v143);
            v421 = v114;
            if (!((unint64_t)v106 >> 62))
            {
              v144 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_19:
              v145 = v397;
              v146 = (uint64_t)v394;
              v147 = (uint64_t)v391;
              swift_bridgeObjectRelease(v106);
              *(_QWORD *)&v438 = v144;
              LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v438, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
              v148._countAndFlagsBits = 0;
              v148._object = (void *)0xE000000000000000;
              LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v148);
              v149 = LocalizedStringKey.init(stringInterpolation:)(v101);
              v150 = Text.init(_:tableName:bundle:comment:)(v149);
              v152 = v151;
              v154 = v153;
              v156 = v155 & 1;
              v157 = type metadata accessor for Font.Design(0);
              v158 = (uint64_t)v398;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v157 - 8) + 56))(v398, 1, 1, v157);
              v159 = static Font.system(size:weight:design:)(0, 1, v158, 15.0);
              sub_10000AE2C(v158, &qword_1000CA140);
              v398 = (char *)Text.font(_:)(v159, v150, v152, v156, v154);
              v396 = v160;
              LODWORD(v394) = v161;
              v410 = v162;
              swift_release(v159, v160);
              sub_10000ADF4(v150, v152, v156);
              v163 = swift_bridgeObjectRelease(v154);
              LODWORD(v391) = static Edge.Set.top.getter(v163);
              v164 = EdgeInsets.init(_all:)(-10.0);
              v166 = v165;
              v168 = v167;
              v170 = v169;
              v171 = static HorizontalAlignment.leading.getter();
              v172 = (uint64_t)v387;
              *v387 = v171;
              *(_QWORD *)(v172 + 8) = 0x4020000000000000;
              *(_BYTE *)(v172 + 16) = 0;
              v173 = sub_100004EAC(&qword_1000C8028);
              v174 = sub_10000FE88((uint64_t)v419, v172 + *(int *)(v173 + 44));
              LOBYTE(v154) = static Edge.Set.bottom.getter(v174);
              v175 = EdgeInsets.init(_all:)(10.0);
              v177 = v176;
              v179 = v178;
              v181 = v180;
              sub_10000AD78(v172, v147, &qword_1000C7F78);
              v182 = v147 + *(int *)(v386 + 36);
              *(_BYTE *)v182 = v154;
              *(double *)(v182 + 8) = v175;
              *(_QWORD *)(v182 + 16) = v177;
              *(_QWORD *)(v182 + 24) = v179;
              *(_QWORD *)(v182 + 32) = v181;
              *(_BYTE *)(v182 + 40) = 0;
              sub_10000AE2C(v172, &qword_1000C7F78);
              v183 = v392;
              v184 = &v392[*(int *)(v389 + 20)];
              v185 = enum case for RoundedCornerStyle.continuous(_:);
              v186 = type metadata accessor for RoundedCornerStyle(0);
              (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v186 - 8) + 104))(v184, v185, v186);
              __asm { FMOV            V0.2D, #12.0 }
              *v183 = _Q0;
              v192 = v147;
              if (qword_1000C7458 != -1)
                swift_once(&qword_1000C7458, sub_100042230);
              v193 = qword_1000D1D10;
              v194 = v393;
              sub_100015184((uint64_t)v183, v393, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
              v195 = v390;
              *(_QWORD *)(v194 + *(int *)(v390 + 52)) = v193;
              *(_WORD *)(v194 + *(int *)(v195 + 56)) = 256;
              swift_retain(v193);
              v196 = sub_1000151C8((uint64_t)v183, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
              v197 = static Alignment.center.getter(v196);
              v199 = v198;
              v200 = v146 + *(int *)(v388 + 36);
              sub_10000AD78(v194, v200, &qword_1000CBCD0);
              v201 = (uint64_t *)(v200 + *(int *)(sub_100004EAC(&qword_1000C8030) + 36));
              *v201 = v197;
              v201[1] = v199;
              sub_10000AD78(v192, v146, &qword_1000C7F80);
              sub_10000AE2C(v194, &qword_1000CBCD0);
              sub_10000AE2C(v192, &qword_1000C7F80);
              sub_10000AC80(v146, v145, &qword_1000C7F88);
              sub_10000AD78(v145, v146, &qword_1000C7F88);
              v202 = v146;
              v204 = (uint64_t)v395;
              v203 = (uint64_t)v396;
              v205 = (uint64_t)v398;
              *v395 = v398;
              *(_QWORD *)(v204 + 8) = v203;
              v206 = v394 & 1;
              *(_BYTE *)(v204 + 16) = v394 & 1;
              v207 = v410;
              *(_QWORD *)(v204 + 24) = v410;
              *(_BYTE *)(v204 + 32) = (_BYTE)v391;
              *(double *)(v204 + 40) = v164;
              *(_QWORD *)(v204 + 48) = v166;
              *(_QWORD *)(v204 + 56) = v168;
              *(_QWORD *)(v204 + 64) = v170;
              *(_BYTE *)(v204 + 72) = 0;
              v208 = sub_100004EAC(&qword_1000C8038);
              sub_10000AD78(v202, v204 + *(int *)(v208 + 48), &qword_1000C7F88);
              sub_10000ADBC(v205, v203, v206);
              swift_bridgeObjectRetain(v207);
              sub_10000ADBC(v205, v203, v206);
              swift_bridgeObjectRetain(v207);
              sub_10000AE2C(v202, &qword_1000C7F88);
              sub_10000ADF4(v205, v203, v206);
              swift_bridgeObjectRelease(v207);
              v209 = v401;
              sub_10000AD78(v204, (uint64_t)v401, &qword_1000C7F70);
              swift_storeEnumTagMultiPayload(v209, v399, 0);
              v210 = sub_100004EAC(&qword_1000C7FA8);
              v211 = sub_10000B254(&qword_1000C7FB0, &qword_1000C7F70, (uint64_t)&protocol conformance descriptor for TupleView<A>);
              v212 = sub_100014E90();
              v213 = v209;
              v214 = v413;
              _ConditionalContent<>.init(storage:)(v213, v400, v210, v211, v212);
              sub_10000AE2C(v204, &qword_1000C7F70);
              sub_10000AE2C(v397, &qword_1000C7F88);
              sub_10000ADF4(v205, v203, v206);
              v215 = swift_bridgeObjectRelease(v207);
              v216 = (uint64_t)v407;
              v78 = v411;
              goto LABEL_30;
            }
LABEL_54:
            if (v106 < 0)
              v383 = v106;
            else
              v383 = v106 & 0xFFFFFFFFFFFFFF8;
            v144 = _CocoaArrayWrapper.endIndex.getter(v383);
            goto LABEL_19;
          }
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
    }
    __break(1u);
    goto LABEL_53;
  }
  swift_getErrorValue(v48, &v425, v424);
  sub_10004F620(v424[1], v424[2]);
  v51 = v50;
  v53 = v52;
  swift_bridgeObjectRelease(v54);
  *(_QWORD *)&v438 = v51;
  *((_QWORD *)&v438 + 1) = v53;
  v55 = sub_100015204();
  v56 = Text.init<A>(_:)(&v438, &type metadata for String, v55);
  v410 = v58;
  v411 = v57;
  v59 = v58;
  v413 = v56;
  v430 = (_QWORD *)v56;
  v431 = v57;
  v409 = v60 & 1;
  v432 = v409;
  v433 = (uint64_t)v58;
  LOBYTE(v434) = 0;
  sub_10000ADBC(v56, v57, v60 & 1);
  swift_bridgeObjectRetain(v59);
  v61 = sub_100004EAC(&qword_1000C8008);
  v62 = sub_100014F90();
  _ConditionalContent<>.init(storage:)(&v430, &type metadata for Text, v61, &protocol witness table for Text, v62);
  v63 = v438;
  v64 = *((_QWORD *)&v439 + 1);
  v65 = v439;
  LOBYTE(v61) = v440;
  v66 = v414;
  v67 = v415;
  *v415 = v438;
  v67[1] = __PAIR128__(v64, v65);
  *((_BYTE *)v67 + 32) = v61;
  swift_storeEnumTagMultiPayload(v67, v66, 0);
  sub_10000ADCC(v63, *((uint64_t *)&v63 + 1), v65, v64);
  v68 = sub_100004EAC(&qword_1000C7FF0);
  v69 = sub_100014FB4(&qword_1000C7FF8, &qword_1000C7FF0, (void (*)(void))sub_100014F90, (uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
  v70 = sub_10000B254(&qword_1000C8018, &qword_1000C7F48, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  _ConditionalContent<>.init(storage:)(v67, v68, v416, v69, v70);
  swift_errorRelease(v48);
  sub_10000AE04(v63, *((uint64_t *)&v63 + 1), v65, v64);
  sub_10000ADF4(v413, v411, v409);
  swift_bridgeObjectRelease(v410);
  v71 = v419;
LABEL_31:
  v315 = type metadata accessor for FeedbackFeatureFlags(0);
  v433 = v315;
  v434 = sub_100005900(&qword_1000C7870, (uint64_t (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags, (uint64_t)&protocol conformance descriptor for FeedbackFeatureFlags);
  v316 = sub_10000AF68(&v430);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v315 - 8) + 104))(v316, enum case for FeedbackFeatureFlags.CentralizedFeedback(_:), v315);
  LOBYTE(v315) = isFeatureEnabled(_:)(&v430);
  sub_10000AFA4(&v430);
  if ((v315 & 1) != 0)
  {
    v317 = v71[3];
    v430 = (_QWORD *)v71[2];
    v431 = v317;
    v318 = v418;
    State.wrappedValue.getter(&v427, v418);
    v319 = v427;
    v320 = swift_getKeyPath(&unk_100092650);
    v430 = v319;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v430, v320, v420);
    swift_release(v320, v321);
    v323 = v319[8];
    if (v323)
    {
      v324 = swift_bridgeObjectRetain(v319[8]);
      v325 = sub_100014010(v324);
      swift_bridgeObjectRelease(v323);
      v430 = v325;
      v326 = sub_100004EAC(&qword_1000C7880);
      v327 = sub_10000B254(&qword_1000C7888, &qword_1000C7880, (uint64_t)&protocol conformance descriptor for [A]);
      v413 = BidirectionalCollection<>.joined(separator:)(2128928, 0xE300000000000000, v326, v327);
      v419 = (_QWORD *)v328;
      swift_release(v319, v328);
      swift_bridgeObjectRelease(v325);
    }
    else
    {
      swift_release(v319, v322);
      v413 = 0;
      v419 = (_QWORD *)0xE000000000000000;
    }
    v335 = v71[3];
    v430 = (_QWORD *)v71[2];
    v431 = v335;
    State.wrappedValue.getter(&v427, v318);
    v336 = v318;
    v337 = v427;
    v338 = swift_getKeyPath(&unk_100092628);
    v430 = v337;
    v339 = sub_100005900((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v430, v338, v339);
    swift_release(v338, v340);
    v341 = (_QWORD *)((char *)v337 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
    swift_beginAccess((char *)v337 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, &v430, 0, 0);
    v342 = *v341;
    v343 = swift_bridgeObjectRetain(v342);
    v344 = sub_1000141B8(v343);
    swift_bridgeObjectRelease(v342);
    v345 = sub_10001434C((uint64_t)v344);
    swift_bridgeObjectRelease(v344);
    v427 = v345;
    v346 = sub_100004EAC(&qword_1000C7880);
    v347 = sub_10000B254(&qword_1000C7888, &qword_1000C7880, (uint64_t)&protocol conformance descriptor for [A]);
    v416 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v346, v347);
    v414 = v348;
    swift_release(v337, v348);
    swift_bridgeObjectRelease(v345);
    v349 = v71[3];
    v427 = (_QWORD *)v71[2];
    v428 = v349;
    State.wrappedValue.getter(v429, v336);
    v350 = (_QWORD *)v429[0];
    v351 = swift_getKeyPath(&unk_100092678);
    v427 = v350;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v427, v351, v339);
    swift_release(v351, v352);
    v353 = *(_OWORD **)((char *)v350 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__modelInfoString);
    v354 = *(_QWORD *)((char *)v350 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__modelInfoString + 8);
    swift_bridgeObjectRetain(v354);
    v355 = v350;
    v356 = v336;
    swift_release(v355, v357);
    v358 = v71[5];
    v427 = (_QWORD *)v71[4];
    v428 = v358;
    v359 = sub_100004EAC(&qword_1000C7EE8);
    State.wrappedValue.getter(v429, v359);
    v421 = v429[0];
    v360 = v71[3];
    v427 = (_QWORD *)v71[2];
    v428 = v360;
    State.wrappedValue.getter(v429, v336);
    v361 = (_QWORD *)v429[0];
    v362 = swift_getKeyPath(&unk_1000926A0);
    v427 = v361;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v427, v362, v339);
    swift_release(v362, v363);
    v364 = *(_QWORD *)((char *)v361 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session);
    swift_release(v361, v365);
    v366 = v412;
    sub_100015184((uint64_t)v71, v412, type metadata accessor for ProofreadingView);
    v415 = v353;
    if (v364)
    {
      v367 = *(_QWORD *)(v366 + 24);
      v427 = *(_QWORD **)(v366 + 16);
      v428 = v367;
      State.wrappedValue.getter(v429, v356);
      v368 = v429[0];
      v369 = swift_getKeyPath(&unk_100092580);
      v427 = (_QWORD *)v368;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v427, v369, v420);
      swift_release(v369, v370);
      v371 = *(unsigned __int8 *)(v368 + 72);
      swift_release(v368, v372);
      v373 = 65538;
      if (v371)
        v373 = 65794;
    }
    else
    {
      v373 = 65794;
    }
    v330 = (uint64_t)v419;
    v419 = (_QWORD *)v373;
    sub_1000151C8(v366, type metadata accessor for ProofreadingView);
    v374 = (id)v421;
    swift_bridgeObjectRetain(v330);
    v375 = v414;
    swift_bridgeObjectRetain(v414);
    swift_bridgeObjectRetain(v354);
    v334 = 1;
    sub_10000B04C(1, 0, 0, 2);
    swift_bridgeObjectRelease(v354);
    swift_bridgeObjectRelease(v375);
    swift_bridgeObjectRelease(v330);

    sub_10000B11C(1, 0, 0, 2);
    v420 = v354;
    v329 = v413;
    v332 = v375;
    v333 = v415;
    v331 = v416;
  }
  else
  {
    v329 = 0;
    v330 = 0;
    v331 = 0;
    v332 = 0;
    v333 = 0;
    v419 = 0;
    v420 = 0;
    v334 = 0;
    v421 = 1;
  }
  v376 = v422;
  sub_10000AD78(v423, v422, &qword_1000C7FA0);
  v377 = v417;
  sub_10000AD78(v376, v417, &qword_1000C7FA0);
  v378 = v377 + *(int *)(sub_100004EAC(&qword_1000C8020) + 48);
  *(_QWORD *)v378 = 0;
  *(_QWORD *)(v378 + 8) = v334;
  v380 = v420;
  v379 = (id)v421;
  *(_QWORD *)(v378 + 16) = v421;
  *(_QWORD *)(v378 + 24) = v329;
  *(_QWORD *)(v378 + 32) = v330;
  *(_QWORD *)(v378 + 40) = v331;
  *(_QWORD *)(v378 + 48) = v332;
  *(_QWORD *)(v378 + 56) = v333;
  *(_QWORD *)(v378 + 64) = v380;
  *(_QWORD *)(v378 + 72) = v334;
  *(_OWORD *)(v378 + 80) = 0u;
  LOBYTE(v376) = (_BYTE)v419;
  *(_QWORD *)(v378 + 96) = v419;
  *(_OWORD *)(v378 + 104) = 0u;
  sub_100015064(0, v334, v379, v329, v330, v331, v332, (uint64_t)v333, v380, v334, 0, 0, v376, 0);
  sub_10000AE2C(v423, &qword_1000C7FA0);
  sub_1000150E8(0, v334, v379, v329, v330, v331, v332, (uint64_t)v333, v380, v334, 0, 0, v376, 0);
  sub_10000AE2C(v422, &qword_1000C7FA0);
}

uint64_t sub_10000FE88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void (*v51)(_BYTE *, uint64_t);
  _BYTE v53[12];
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  _DWORD v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  char v70;
  _BYTE v71[7];
  _OWORD v72[8];
  uint64_t v73;
  _OWORD v74[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char v84;
  _OWORD v85[8];
  uint64_t v86;
  char v87;
  _BYTE v88[7];
  double v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;

  v57 = a2;
  v3 = type metadata accessor for Divider(0);
  v55 = *(_QWORD *)(v3 - 8);
  v4 = v55;
  v56 = v3;
  v5 = __chkstk_darwin(v3);
  v59 = &v53[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v58 = &v53[-v7];
  v8 = sub_100004EAC(&qword_1000C8040);
  __chkstk_darwin(v8);
  v10 = &v53[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100004EAC(&qword_1000C8048);
  v12 = __chkstk_darwin(v11);
  v14 = &v53[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v12);
  v17 = &v53[-v16];
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v15);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v18 = sub_100004EAC(&qword_1000C8050);
  v19 = sub_1000102BC(a1, (uint64_t *)&v10[*(int *)(v18 + 44)]);
  v20 = static Edge.Set.horizontal.getter(v19);
  v21 = EdgeInsets.init(_all:)(16.0);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  sub_10000AD78((uint64_t)v10, (uint64_t)v14, &qword_1000C8040);
  v28 = (double *)&v14[*(int *)(v11 + 36)];
  *(_BYTE *)v28 = v20;
  v28[1] = v21;
  *((_QWORD *)v28 + 2) = v23;
  *((_QWORD *)v28 + 3) = v25;
  *((_QWORD *)v28 + 4) = v27;
  *((_BYTE *)v28 + 40) = 0;
  sub_10000AE2C((uint64_t)v10, &qword_1000C8040);
  v29 = sub_10000AC80((uint64_t)v14, (uint64_t)v17, &qword_1000C8048);
  v30 = v58;
  Divider.init()(v29);
  v31 = sub_1000113FC(a1, (uint64_t)v72);
  v54 = static Edge.Set.horizontal.getter(v31);
  v32 = EdgeInsets.init(_all:)(16.0);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v70 = 0;
  sub_10000AD78((uint64_t)v17, (uint64_t)v14, &qword_1000C8048);
  v39 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16);
  v40 = v59;
  v41 = v56;
  v39(v59, v30, v56);
  v67 = v72[6];
  v68 = v72[7];
  v69 = v73;
  v63 = v72[2];
  v64 = v72[3];
  v65 = v72[4];
  v66 = v72[5];
  v61 = v72[0];
  v62 = v72[1];
  v60[0] = *(_DWORD *)v71;
  *(_DWORD *)((char *)v60 + 3) = *(_DWORD *)&v71[3];
  LOBYTE(v30) = v70;
  v42 = v57;
  sub_10000AD78((uint64_t)v14, v57, &qword_1000C8048);
  v43 = sub_100004EAC(&qword_1000C8058);
  v39((_BYTE *)(v42 + *(int *)(v43 + 48)), v40, v41);
  v44 = v42 + *(int *)(v43 + 64);
  v78 = v66;
  v79 = v67;
  v80 = v68;
  *(_QWORD *)&v81 = v69;
  v77 = v65;
  v75 = v63;
  v45 = v62;
  v74[1] = v62;
  v76 = v64;
  v74[0] = v61;
  LOBYTE(v40) = v54;
  BYTE8(v81) = v54;
  *(_DWORD *)((char *)&v81 + 9) = v60[0];
  HIDWORD(v81) = *(_DWORD *)((char *)v60 + 3);
  *(double *)&v82 = v32;
  *((_QWORD *)&v82 + 1) = v34;
  *(_QWORD *)&v83 = v36;
  *((_QWORD *)&v83 + 1) = v38;
  v84 = (char)v30;
  *(_BYTE *)(v44 + 176) = (_BYTE)v30;
  v46 = v78;
  *(_OWORD *)(v44 + 64) = v77;
  *(_OWORD *)(v44 + 80) = v46;
  v47 = v80;
  *(_OWORD *)(v44 + 96) = v79;
  *(_OWORD *)(v44 + 112) = v47;
  *(_OWORD *)v44 = v74[0];
  *(_OWORD *)(v44 + 16) = v45;
  v48 = v76;
  *(_OWORD *)(v44 + 32) = v75;
  *(_OWORD *)(v44 + 48) = v48;
  v49 = v83;
  v50 = v81;
  *(_OWORD *)(v44 + 144) = v82;
  *(_OWORD *)(v44 + 160) = v49;
  *(_OWORD *)(v44 + 128) = v50;
  sub_100015248((uint64_t)v74);
  v51 = *(void (**)(_BYTE *, uint64_t))(v55 + 8);
  v51(v58, v41);
  sub_10000AE2C((uint64_t)v17, &qword_1000C8048);
  v85[6] = v67;
  v85[7] = v68;
  v86 = v69;
  v85[2] = v63;
  v85[3] = v64;
  v85[4] = v65;
  v85[5] = v66;
  v85[0] = v61;
  v85[1] = v62;
  v87 = (char)v40;
  *(_DWORD *)v88 = v60[0];
  *(_DWORD *)&v88[3] = *(_DWORD *)((char *)v60 + 3);
  v89 = v32;
  v90 = v34;
  v91 = v36;
  v92 = v38;
  v93 = (char)v30;
  sub_1000152D4((uint64_t)v85);
  v51(v59, v41);
  return sub_10000AE2C((uint64_t)v14, &qword_1000C8048);
}

uint64_t sub_1000102BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t result;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  char *v183;
  _QWORD v184[2];
  _QWORD v185[2];
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;

  v181 = a2;
  v171 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v171);
  v177 = (char *)&v155 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100004EAC(&qword_1000CBCD0);
  __chkstk_darwin(v176);
  v179 = (uint64_t)&v155 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ProofreadingView(0);
  v159 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v160 = v6;
  v161 = (uint64_t)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_100004EAC(&qword_1000C8060);
  v166 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v165 = (char *)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = sub_100004EAC(&qword_1000C8068);
  __chkstk_darwin(v162);
  v168 = (char *)&v155 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100004EAC(&qword_1000C8070);
  __chkstk_darwin(v164);
  v172 = (uint64_t)&v155 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100004EAC(&qword_1000C8078);
  __chkstk_darwin(v169);
  v174 = (char *)&v155 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100004EAC(&qword_1000C8080);
  __chkstk_darwin(v170);
  v175 = (uint64_t)&v155 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_100004EAC(&qword_1000C8088);
  v12 = __chkstk_darwin(v173);
  v180 = (uint64_t)&v155 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v178 = (uint64_t)&v155 - v14;
  v15 = sub_100004EAC(&qword_1000CA140);
  __chkstk_darwin(v15);
  v158 = (char *)&v155 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = type metadata accessor for UUID(0);
  v156 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v183 = (char *)&v155 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  v163 = a1;
  v187 = v18;
  v188 = v19;
  v20 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v186, v20);
  v21 = v186;
  v187 = v18;
  v188 = v19;
  State.wrappedValue.getter(&v186, v20);
  v22 = v186;
  KeyPath = swift_getKeyPath(&unk_100092580);
  v187 = v22;
  v182 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v187, KeyPath, v182);
  swift_release(KeyPath, v24);
  if (*(_BYTE *)(v22 + 72) == 1)
    goto LABEL_11;
  v26 = swift_getKeyPath(&unk_100092628);
  v187 = v22;
  v27 = sub_100005900((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v187, v26, v27);
  swift_release(v26, v28);
  v29 = (uint64_t *)(v22 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
  swift_beginAccess(v22 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, &v187, 0, 0);
  v30 = *v29;
  swift_retain(v22);
  v31 = swift_bridgeObjectRetain(v30);
  v32 = sub_100014C2C(v31, v22);
  swift_bridgeObjectRelease(v30);
  swift_release_n(v22, 2);
  if (!v32)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v34 = objc_msgSend(v32, "uuid");

  v35 = (uint64_t)v183;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

  v36 = swift_getKeyPath(&unk_1000926C8);
  v186 = v21;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v186, v36, v27);
  swift_release(v36, v37);
  v22 = v21 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping;
  swift_beginAccess(v21 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping, &v186, 0, 0);
  v38 = *(_QWORD *)v22;
  swift_bridgeObjectRetain(*(_QWORD *)v22);
  swift_release(v21, v39);
  if (!*(_QWORD *)(v38 + 16) || (v40 = sub_10001CCB8(v35), (v41 & 1) == 0))
  {
    swift_bridgeObjectRelease(v38);
    __break(1u);
LABEL_11:
    swift_release(v22, v25);
    goto LABEL_12;
  }
  v42 = *(id *)(*(_QWORD *)(v38 + 56) + 8 * v40);
  swift_bridgeObjectRelease(v38);
  v43 = objc_msgSend(v42, "attributedText");

  v185[0] = v18;
  v185[1] = v19;
  State.wrappedValue.getter(v184, v20);
  v22 = v184[0];
  v44 = swift_getKeyPath(&unk_100092580);
  v185[0] = v22;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v185, v44, v182);
  swift_release(v44, v45);
  if (*(_BYTE *)(v22 + 72) == 1)
  {
LABEL_13:
    result = swift_release(v22, v33);
    goto LABEL_14;
  }
  v46 = swift_getKeyPath(&unk_100092628);
  v185[0] = v22;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v185, v46, v27);
  swift_release(v46, v47);
  v48 = (uint64_t *)(v22 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
  swift_beginAccess(v22 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v185, 0, 0);
  v49 = *v48;
  swift_retain(v22);
  v50 = swift_bridgeObjectRetain(v49);
  v51 = sub_100014C2C(v50, v22);
  swift_bridgeObjectRelease(v49);
  result = swift_release_n(v22, 2);
  if (!v51)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t))(v156 + 8))(v183, v157);
  v53 = objc_msgSend(v51, "originalRange");
  v55 = v54;

  v56 = objc_msgSend(v43, "attributedSubstringFromRange:", v53, v55);
  v57 = objc_msgSend(v56, "string");

  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
  v60 = v59;

  v184[0] = v58;
  v184[1] = v60;
  v61 = sub_100015204();
  v62 = Text.init<A>(_:)(v184, &type metadata for String, v61);
  v64 = v63;
  v66 = v65;
  v68 = v67 & 1;
  v69 = type metadata accessor for Font.Design(0);
  v70 = (uint64_t)v158;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v158, 1, 1, v69);
  v71 = static Font.system(size:weight:design:)(0, 1, v70, 15.0);
  sub_10000AE2C(v70, &qword_1000CA140);
  v72 = Text.font(_:)(v71, v62, v64, v68, v66);
  v74 = v73;
  v76 = v75;
  v78 = v77;
  swift_release(v71, v73);
  v79 = v76 & 1;
  sub_10000ADF4(v62, v64, v68);
  v80 = swift_bridgeObjectRelease(v66);
  LODWORD(v184[0]) = static HierarchicalShapeStyle.secondary.getter(v80);
  v81 = Text.foregroundStyle<A>(_:)(v184, v72, v74, v76 & 1, v78, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v83 = v82;
  v85 = v84;
  v183 = v86;
  sub_10000ADF4(v72, v74, v79);
  swift_bridgeObjectRelease(v78);
  v87 = v161;
  sub_100015184(v163, v161, type metadata accessor for ProofreadingView);
  v88 = *(unsigned __int8 *)(v159 + 80);
  v89 = (v88 + 16) & ~v88;
  v90 = swift_allocObject(&unk_1000BECF0, v89 + v160, v88 | 7);
  sub_10000D820(v87, v90 + v89);
  v91 = sub_100004EAC(&qword_1000C8090);
  v92 = sub_10000B254(&qword_1000C8098, &qword_1000C8090, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v93 = v165;
  v94 = Button.init(action:label:)(sub_10001536C, v90, sub_100011218, 0, v91, v92);
  LOBYTE(v90) = static Edge.Set.horizontal.getter(v94);
  v95 = EdgeInsets.init(_all:)(10.0);
  v97 = v96;
  v99 = v98;
  v101 = v100;
  v102 = v166;
  v103 = (uint64_t)v168;
  v104 = v167;
  (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v168, v93, v167);
  v105 = v103 + *(int *)(v162 + 36);
  *(_BYTE *)v105 = v90;
  *(double *)(v105 + 8) = v95;
  *(_QWORD *)(v105 + 16) = v97;
  *(_QWORD *)(v105 + 24) = v99;
  *(_QWORD *)(v105 + 32) = v101;
  *(_BYTE *)(v105 + 40) = 0;
  v106 = (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v93, v104);
  LOBYTE(v90) = static Edge.Set.vertical.getter(v106);
  v107 = EdgeInsets.init(_all:)(6.0);
  v109 = v108;
  v111 = v110;
  v113 = v112;
  v114 = v172;
  sub_10000AD78(v103, v172, &qword_1000C8068);
  v115 = v114 + *(int *)(v164 + 36);
  *(_BYTE *)v115 = v90;
  *(double *)(v115 + 8) = v107;
  *(_QWORD *)(v115 + 16) = v109;
  *(_QWORD *)(v115 + 24) = v111;
  *(_QWORD *)(v115 + 32) = v113;
  *(_BYTE *)(v115 + 40) = 0;
  sub_10000AE2C(v103, &qword_1000C8068);
  v116 = v177;
  v117 = &v177[*(int *)(v171 + 20)];
  v118 = enum case for RoundedCornerStyle.continuous(_:);
  v119 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 104))(v117, v118, v119);
  __asm { FMOV            V0.2D, #14.0 }
  *v116 = _Q0;
  if (qword_1000C7460 != -1)
    swift_once(&qword_1000C7460, sub_100042244);
  v125 = v85 & 1;
  v126 = qword_1000D1D18;
  v127 = v179;
  sub_100015184((uint64_t)v116, v179, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v128 = v176;
  *(_QWORD *)(v127 + *(int *)(v176 + 52)) = v126;
  *(_WORD *)(v127 + *(int *)(v128 + 56)) = 256;
  swift_retain(v126);
  v129 = sub_1000151C8((uint64_t)v116, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v130 = static Alignment.center.getter(v129);
  v132 = v131;
  v133 = (uint64_t)v174;
  v134 = (uint64_t)&v174[*(int *)(v169 + 36)];
  sub_10000AD78(v127, v134, &qword_1000CBCD0);
  v135 = (uint64_t *)(v134 + *(int *)(sub_100004EAC(&qword_1000C8030) + 36));
  *v135 = v130;
  v135[1] = v132;
  sub_10000AD78(v114, v133, &qword_1000C8070);
  sub_10000AE2C(v127, &qword_1000CBCD0);
  v136 = sub_10000AE2C(v114, &qword_1000C8070);
  v137 = static Color.accentColor.getter(v136);
  v138 = swift_getKeyPath(&unk_1000926F0);
  v139 = v175;
  sub_10000AD78(v133, v175, &qword_1000C8078);
  v140 = (uint64_t *)(v139 + *(int *)(v170 + 36));
  *v140 = v138;
  v140[1] = v137;
  v141 = sub_10000AE2C(v133, &qword_1000C8078);
  LOBYTE(v137) = static Edge.Set.vertical.getter(v141);
  v142 = EdgeInsets.init(_all:)(8.0);
  v144 = v143;
  v146 = v145;
  v148 = v147;
  v149 = v180;
  sub_10000AD78(v139, v180, &qword_1000C8080);
  v150 = v149 + *(int *)(v173 + 36);
  *(_BYTE *)v150 = v137;
  *(double *)(v150 + 8) = v142;
  *(_QWORD *)(v150 + 16) = v144;
  *(_QWORD *)(v150 + 24) = v146;
  *(_QWORD *)(v150 + 32) = v148;
  *(_BYTE *)(v150 + 40) = 0;
  sub_10000AE2C(v139, &qword_1000C8080);
  v151 = v178;
  sub_10000AC80(v149, v178, &qword_1000C8088);
  sub_10000AD78(v151, v149, &qword_1000C8088);
  v152 = v181;
  *v181 = v81;
  v152[1] = v83;
  *((_BYTE *)v152 + 16) = v125;
  v153 = v183;
  v152[3] = (uint64_t)v183;
  v152[4] = 0;
  *((_BYTE *)v152 + 40) = 1;
  v154 = sub_100004EAC(&qword_1000C80A0);
  sub_10000AD78(v149, (uint64_t)v152 + *(int *)(v154 + 64), &qword_1000C8088);
  sub_10000ADBC(v81, v83, v125);
  swift_bridgeObjectRetain(v153);
  sub_10000AE2C(v151, &qword_1000C8088);
  sub_10000AE2C(v149, &qword_1000C8088);
  sub_10000ADF4(v81, v83, v125);
  return swift_bridgeObjectRelease(v153);
}

uint64_t sub_100010FCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  _QWORD v31[3];

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v31[0] = v6;
  v31[1] = v7;
  v8 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v28, v8);
  v9 = v28;
  KeyPath = swift_getKeyPath(&unk_100092580);
  v31[0] = v9;
  v11 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v31, KeyPath, v11);
  swift_release(KeyPath, v12);
  if (*(_BYTE *)(v9 + 72) == 1)
  {
    result = swift_release(v9, v13);
  }
  else
  {
    v14 = swift_getKeyPath(&unk_100092628);
    v31[0] = v9;
    v15 = sub_100005900((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v31, v14, v15);
    swift_release(v14, v16);
    v17 = (uint64_t *)(v9 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
    swift_beginAccess(v9 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v31, 0, 0);
    v18 = *v17;
    swift_retain(v9);
    v19 = swift_bridgeObjectRetain(v18);
    v20 = sub_100014C2C(v19, v9);
    swift_bridgeObjectRelease(v18);
    result = swift_release_n(v9, 2);
    if (v20)
    {
      v28 = v6;
      v29 = v7;
      State.wrappedValue.getter(v30, v8);
      v22 = v30[0];
      sub_100082B7C();
      swift_release(v22, v23);
      v28 = v6;
      v29 = v7;
      State.wrappedValue.getter(v30, v8);
      v24 = v30[0];
      v25 = objc_msgSend(v20, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

      sub_100081FB0(3, (uint64_t)v5);
      swift_release(v24, v26);
      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100011218@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v2 = sub_100004EAC(&qword_1000CA140);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = Image.init(systemName:)(0xD000000000000014, 0x80000001000AB970);
  v5 = LocalizedStringKey.init(stringLiteral:)(0x6769724F20657355, 0xEC0000006C616E69);
  v6 = Text.init(_:tableName:bundle:comment:)(v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v4, 1, 1, v13);
  v14 = static Font.system(size:weight:design:)(0, 1, v4, 15.0);
  sub_10000AE2C((uint64_t)v4, &qword_1000CA140);
  v15 = Text.font(_:)(v14, v6, v8, v12, v10);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_release(v14, v16);
  sub_10000ADF4(v6, v8, v12);
  swift_bridgeObjectRelease(v10);
  v22 = v26;
  *(_QWORD *)a1 = v26;
  *(_QWORD *)(a1 + 8) = v15;
  *(_QWORD *)(a1 + 16) = v17;
  *(_BYTE *)(a1 + 24) = v19 & 1;
  *(_QWORD *)(a1 + 32) = v21;
  v23 = v22;
  swift_retain(v22);
  sub_10000ADBC(v15, v17, v19 & 1);
  swift_bridgeObjectRetain(v21);
  sub_10000ADF4(v15, v17, v19 & 1);
  swift_release(v23, v24);
  return swift_bridgeObjectRelease(v21);
}

uint64_t sub_1000113FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t result;
  id v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  void (*v102)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char v111;
  _QWORD v112[2];
  char v113;
  _BYTE v114[11];
  __int16 v115;
  _BYTE v116[7];
  char v117;
  char v118;
  _QWORD v119[3];
  uint64_t v120;
  unint64_t v121;
  _QWORD v122[2];

  v6 = type metadata accessor for ProofreadingView(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004EAC(&qword_1000CA140);
  __chkstk_darwin(v9);
  v109 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v110 = a1;
  v122[0] = v11;
  v122[1] = v12;
  v108 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v120, v108);
  v13 = v120;
  KeyPath = swift_getKeyPath(&unk_100092580);
  v122[0] = v13;
  v107 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v122, KeyPath, v107);
  swift_release(KeyPath, v15);
  if (*(_BYTE *)(v13 + 72) == 1)
  {
    swift_release(v13, v16);
    goto LABEL_19;
  }
  v17 = swift_getKeyPath(&unk_100092628);
  v122[0] = v13;
  v106 = sub_100005900((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v122, v17, v106);
  swift_release(v17, v18);
  v19 = (uint64_t *)(v13 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
  swift_beginAccess(v13 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v122, 0, 0);
  v20 = *v19;
  swift_retain(v13);
  v21 = swift_bridgeObjectRetain(v20);
  v22 = sub_100014C2C(v21, v13);
  swift_bridgeObjectRelease(v20);
  swift_release_n(v13, 2);
  if (!v22)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    swift_release(v3, v23);
    goto LABEL_21;
  }
  v24 = objc_msgSend(v22, "suggestionCategory");

  v105 = v8;
  if (v24)
  {
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0xE000000000000000;
  }
  v120 = v25;
  v121 = v27;
  v103 = sub_100015204();
  v28 = Text.init<A>(_:)(&v120, &type metadata for String, v103);
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  v35 = Text.bold()(v28, v29);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  sub_10000ADF4(v28, v30, v34);
  swift_bridgeObjectRelease(v32);
  v42 = type metadata accessor for Font.Design(0);
  v43 = (uint64_t)v109;
  v102 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56);
  v102(v109, 1, 1, v42);
  v44 = static Font.system(size:weight:design:)(0, 1, v43, 15.0);
  sub_10000AE2C(v43, &qword_1000CA140);
  v2 = Text.font(_:)(v44, v35, v37, v41, v39);
  v104 = v45;
  v101 = v46;
  v48 = v47;
  swift_release(v44, v45);
  sub_10000ADF4(v35, v37, v41);
  swift_bridgeObjectRelease(v39);
  v49 = *(_QWORD *)(v110 + 24);
  v120 = *(_QWORD *)(v110 + 16);
  v121 = v49;
  State.wrappedValue.getter(v119, v108);
  v3 = v119[0];
  v50 = swift_getKeyPath(&unk_100092580);
  v120 = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v120, v50, v107);
  swift_release(v50, v51);
  if (*(_BYTE *)(v3 + 72) == 1)
    goto LABEL_20;
  v52 = swift_getKeyPath(&unk_100092628);
  v120 = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v120, v52, v106);
  swift_release(v52, v53);
  v54 = (uint64_t *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
  swift_beginAccess(v3 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, &v120, 0, 0);
  v55 = *v54;
  swift_retain(v3);
  v56 = swift_bridgeObjectRetain(v55);
  v57 = sub_100014C2C(v56, v3);
  swift_bridgeObjectRelease(v55);
  swift_release_n(v3, 2);
  if (!v57)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    result = swift_release(v2, v58);
    goto LABEL_23;
  }
  v59 = objc_msgSend(v57, "suggestionDescription");

  v60 = (uint64_t)v105;
  v100 = v48;
  v99 = v2;
  v98 = a2;
  if (v59)
  {
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v63 = v62;

    sub_100015184(v110, v60, type metadata accessor for ProofreadingView);
    if (v63)
    {
LABEL_17:
      v76 = v101 & 1;
      sub_1000151C8(v60, type metadata accessor for ProofreadingView);
      v112[0] = v61;
      v112[1] = v63;
      v77 = Text.init<A>(_:)(v112, &type metadata for String, v103);
      v79 = v78;
      v110 = v80;
      v82 = v81 & 1;
      v83 = (uint64_t)v109;
      v102(v109, 1, 1, v42);
      v84 = static Font.system(size:weight:design:)(0, 1, v83, 15.0);
      sub_10000AE2C(v83, &qword_1000CA140);
      v85 = swift_getKeyPath(&unk_100092550);
      LODWORD(v109) = static Edge.Set.top.getter();
      v86 = EdgeInsets.init(_all:)(-2.0);
      v111 = v76;
      v118 = v76;
      v117 = v82;
      v113 = 0;
      v87 = v98;
      *(_DWORD *)(v98 + 17) = v112[0];
      *(_DWORD *)(v87 + 20) = *(_DWORD *)((char *)v112 + 3);
      *(_DWORD *)(v87 + 49) = *(_DWORD *)v116;
      *(_DWORD *)(v87 + 52) = *(_DWORD *)&v116[3];
      *(_DWORD *)(v87 + 66) = *(_DWORD *)&v114[7];
      *(_WORD *)(v87 + 70) = v115;
      v88 = *(_DWORD *)v114;
      *(_DWORD *)(v87 + 92) = *(_DWORD *)&v114[3];
      *(_DWORD *)(v87 + 89) = v88;
      v89 = v99;
      v90 = v104;
      *(_QWORD *)v87 = v99;
      *(_QWORD *)(v87 + 8) = v90;
      *(_BYTE *)(v87 + 16) = v76;
      v91 = v100;
      *(_QWORD *)(v87 + 24) = v100;
      *(_QWORD *)(v87 + 32) = v77;
      *(_QWORD *)(v87 + 40) = v79;
      *(_BYTE *)(v87 + 48) = v82;
      v92 = v110;
      *(_QWORD *)(v87 + 56) = v110;
      *(_WORD *)(v87 + 64) = 256;
      *(_QWORD *)(v87 + 72) = v85;
      *(_QWORD *)(v87 + 80) = v84;
      *(_BYTE *)(v87 + 88) = (_BYTE)v109;
      *(double *)(v87 + 96) = v86;
      *(_QWORD *)(v87 + 104) = v93;
      *(_QWORD *)(v87 + 112) = v94;
      *(_QWORD *)(v87 + 120) = v95;
      *(_BYTE *)(v87 + 128) = 0;
      sub_10000ADBC(v89, v90, v76);
      swift_bridgeObjectRetain(v91);
      sub_10000ADBC(v77, v79, v82);
      swift_bridgeObjectRetain(v92);
      swift_retain(v85);
      swift_retain(v84);
      sub_10000ADF4(v77, v79, v82);
      swift_release(v84, v96);
      swift_release(v85, v97);
      swift_bridgeObjectRelease(v92);
      sub_10000ADF4(v89, v90, v111);
      return swift_bridgeObjectRelease(v91);
    }
  }
  else
  {
    sub_100015184(v110, (uint64_t)v105, type metadata accessor for ProofreadingView);
  }
  v64 = *(_QWORD *)(v60 + 24);
  v119[0] = *(_QWORD *)(v60 + 16);
  v119[1] = v64;
  State.wrappedValue.getter(v112, v108);
  v2 = v112[0];
  v65 = swift_getKeyPath(&unk_100092580);
  v119[0] = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v119, v65, v107);
  swift_release(v65, v66);
  if (*(_BYTE *)(v2 + 72) == 1)
    goto LABEL_22;
  v67 = swift_getKeyPath(&unk_100092628);
  v119[0] = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v119, v67, v106);
  swift_release(v67, v68);
  v69 = (uint64_t *)(v2 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
  swift_beginAccess(v2 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v119, 0, 0);
  v70 = *v69;
  swift_retain(v2);
  v71 = swift_bridgeObjectRetain(v70);
  v72 = sub_100014C2C(v71, v2);
  swift_bridgeObjectRelease(v70);
  result = swift_release_n(v2, 2);
  if (v72)
  {
    v74 = objc_msgSend(v72, "suggestionShortDescription");

    if (v74)
    {
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
      v63 = v75;

    }
    else
    {
      v61 = 0;
      v63 = 0xE000000000000000;
    }
    goto LABEL_17;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_100011C40@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  ValueMetadata *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  ValueMetadata *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t OpaqueTypeConformance2;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  void (*v83)(char *, uint64_t);
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  ValueMetadata *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _OWORD v108[3];

  v100 = a2;
  v3 = type metadata accessor for IconOnlyLabelStyle(0);
  v4 = *(_QWORD *)(v3 - 8);
  v98 = v3;
  v99 = v4;
  __chkstk_darwin(v3);
  v94 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100004EAC(&qword_1000C80B0);
  __chkstk_darwin(v96);
  v91 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100004EAC(&qword_1000C80B8);
  v95 = *(_QWORD *)(v97 - 8);
  v7 = __chkstk_darwin(v97);
  v92 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v93 = (char *)&v85 - v9;
  v10 = type metadata accessor for ProofreadingView(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004EAC(&qword_1000CBB80);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004EAC(&qword_1000C80C0);
  __chkstk_darwin(v18);
  v20 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100004EAC(&qword_1000C80C8);
  v90 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v86 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100004EAC(&qword_1000C80D0);
  v102 = *(_QWORD *)(v89 - 8);
  v22 = __chkstk_darwin(v89);
  v101 = (char *)&v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v87 = (char *)&v85 - v24;
  sub_100015184(a1, (uint64_t)v13, type metadata accessor for ProofreadingView);
  v25 = *(unsigned __int8 *)(v11 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = swift_allocObject(&unk_1000BED18, v26 + v12, v25 | 7);
  sub_10000D820((uint64_t)v13, v27 + v26);
  v28 = sub_100004EAC(&qword_1000CBB00);
  v29 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v30 = Button.init(action:label:)(sub_1000153A8, v27, sub_1000124E4, 0, v28, v29);
  v31 = GeometryProxy.size.getter(v30);
  v33 = v32 * 0.5 + -20.0;
  v34 = static Alignment.center.getter(v31);
  _FrameLayout.init(width:height:alignment:)(v108, *(_QWORD *)&v33, 0, 0, 1, v34, v35);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v17, v14);
  v36 = &v20[*(int *)(v18 + 36)];
  v37 = v108[1];
  *(_OWORD *)v36 = v108[0];
  *((_OWORD *)v36 + 1) = v37;
  *((_OWORD *)v36 + 2) = v108[2];
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v85 = a1;
  v38 = *(ValueMetadata **)(a1 + 24);
  v103 = *(_QWORD *)(a1 + 16);
  v104 = v38;
  v39 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v107, v39);
  v40 = v107;
  KeyPath = swift_getKeyPath(&unk_100092720);
  v103 = v40;
  v42 = sub_100005900((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v103, KeyPath, v42);
  swift_release(KeyPath, v43);
  LOBYTE(v33) = *(_BYTE *)(v40 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__showingOriginal);
  swift_release(v40, v44);
  v45 = swift_getKeyPath(&unk_100092748);
  LOBYTE(v103) = 0;
  BYTE1(v103) = LOBYTE(v33);
  v104 = (ValueMetadata *)v45;
  LOBYTE(v105) = 0;
  v46 = sub_1000153C4();
  v47 = sub_100015448();
  v48 = v86;
  View.buttonStyle<A>(_:)(&v103, v18, &type metadata for PrimaryButtonStyle, v46, v47);
  swift_release(v45, v49);
  sub_10000AE2C((uint64_t)v20, &qword_1000C80C0);
  v50 = v85;
  v51 = *(ValueMetadata **)(v85 + 24);
  v103 = *(_QWORD *)(v85 + 16);
  v104 = v51;
  State.wrappedValue.getter(&v107, v39);
  v52 = v107;
  v53 = swift_getKeyPath(&unk_100092720);
  v103 = v52;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v103, v53, v42);
  swift_release(v53, v54);
  LOBYTE(v33) = *(_BYTE *)(v52 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__showingOriginal);
  swift_release(v52, v55);
  LOBYTE(v107) = LOBYTE(v33);
  v103 = v18;
  v104 = &type metadata for PrimaryButtonStyle;
  v105 = v46;
  v106 = v47;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v103, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v57 = sub_10001548C();
  v58 = v101;
  v59 = v88;
  View.labelStyle<A>(_:)(&v107, v88, &type metadata for HorizontalIconTitleLabelStyle, OpaqueTypeConformance2, v57);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v48, v59);
  v60 = v102;
  v61 = v87;
  v62 = v89;
  (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v87, v58, v89);
  v63 = v91;
  v64 = sub_100012538(v50, v91);
  v65 = v94;
  IconOnlyLabelStyle.init()(v64);
  v66 = sub_1000154D0();
  v67 = sub_100005900(&qword_1000CBD10, (uint64_t (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for IconOnlyLabelStyle);
  v68 = v92;
  v69 = v98;
  View.labelStyle<A>(_:)(v65, v96, v98, v66, v67);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v65, v69);
  sub_10000AE2C((uint64_t)v63, &qword_1000C80B0);
  v70 = v95;
  v71 = v93;
  v72 = v97;
  (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v93, v68, v97);
  v73 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
  v74 = v101;
  v75 = v61;
  v73(v101, v61, v62);
  v76 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
  v77 = v70;
  v78 = v68;
  v76(v68, v71, v72);
  v79 = v100;
  v73(v100, v74, v62);
  v80 = sub_100004EAC(&qword_1000C8108);
  v81 = &v79[*(int *)(v80 + 48)];
  *(_QWORD *)v81 = 0x4024000000000000;
  v81[8] = 0;
  v76(&v79[*(int *)(v80 + 64)], v78, v72);
  v82 = *(void (**)(char *, uint64_t))(v77 + 8);
  v82(v71, v72);
  v83 = *(void (**)(char *, uint64_t))(v102 + 8);
  v83(v75, v62);
  v82(v78, v72);
  return ((uint64_t (*)(char *, uint64_t))v83)(v74, v62);
}

uint64_t sub_100012388(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  BOOL v15;
  _QWORD v16[2];
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v17, v2);
  v3 = v17;
  v16[1] = v1;
  State.wrappedValue.getter(&v17, v2);
  v4 = v17;
  KeyPath = swift_getKeyPath(&unk_100092720);
  v16[0] = v4;
  v6 = sub_100005900((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v16, KeyPath, v6);
  swift_release(KeyPath, v7);
  v8 = *(_BYTE *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__showingOriginal);
  swift_release(v4, v9);
  v10 = swift_getKeyPath(&unk_100092720);
  v14[2] = v3;
  v15 = (v8 & 1) == 0;
  v16[0] = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v16, v10, sub_100015744, v14, (char *)&type metadata for () + 8, v6);
  swift_release(v3, v11);
  return swift_release(v10, v12);
}

uint64_t sub_1000124E4()
{
  return Label.init(title:icon:)(sub_100012520, 0, sub_100009358, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_100012520@<X0>(uint64_t a1@<X8>)
{
  return sub_100013330(0x6C616E696769724FLL, 0xE800000000000000, a1);
}

uint64_t sub_100012538@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  __int16 v59;
  uint64_t v60;
  char v61;

  v52 = a1;
  v57 = a2;
  v3 = type metadata accessor for ProofreadingView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004EAC(&qword_1000CBB80);
  v54 = *(_QWORD *)(v7 - 8);
  v8 = v7;
  __chkstk_darwin(v7);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004EAC(&qword_1000C8110);
  v53 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v56 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v55 = (char *)&v46 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v46 - v17;
  __chkstk_darwin(v16);
  v58 = (char *)&v46 - v19;
  sub_100015184(a1, (uint64_t)v6, type metadata accessor for ProofreadingView);
  v20 = *(unsigned __int8 *)(v4 + 80);
  v50 = ((v20 + 16) & ~v20) + v5;
  v51 = (v20 + 16) & ~v20;
  v21 = v51;
  v49 = v20 | 7;
  v22 = swift_allocObject(&unk_1000BED40, v50, v20 | 7);
  sub_10000D820((uint64_t)v6, v22 + v21);
  v23 = sub_100004EAC(&qword_1000CBB00);
  v48 = v23;
  v47 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_100015550, v22, sub_100012964, 0, v23, v47);
  KeyPath = swift_getKeyPath(&unk_100092748);
  v59 = 1;
  v60 = KeyPath;
  v61 = 0;
  v25 = sub_10000B254(&qword_1000C80E0, &qword_1000CBB80, (uint64_t)&protocol conformance descriptor for Button<A>);
  v46 = v25;
  v26 = sub_10001555C();
  v27 = v18;
  v28 = v8;
  View.buttonStyle<A>(_:)(&v59, v8, &type metadata for UnevenCornerPrimaryButtonStyle, v25, v26);
  swift_release(KeyPath, v29);
  v30 = *(void (**)(char *, uint64_t))(v54 + 8);
  v30(v10, v8);
  v31 = v53;
  v32 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
  v32(v58, v27, v11);
  sub_100015184(v52, (uint64_t)v6, type metadata accessor for ProofreadingView);
  v33 = swift_allocObject(&unk_1000BED68, v50, v49);
  sub_10000D820((uint64_t)v6, v33 + v51);
  Button.init(action:label:)(sub_100015674, v33, sub_1000129E8, 0, v48, v47);
  v34 = swift_getKeyPath(&unk_100092748);
  v59 = 256;
  v60 = v34;
  v61 = 0;
  v35 = v55;
  View.buttonStyle<A>(_:)(&v59, v28, &type metadata for UnevenCornerPrimaryButtonStyle, v46, v26);
  swift_release(v34, v36);
  v30(v10, v28);
  v32(v27, v35, v11);
  v37 = v31;
  v38 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  v39 = v58;
  v38(v35, v58, v11);
  v40 = v56;
  v38(v56, v27, v11);
  v41 = v57;
  v38(v57, v35, v11);
  v42 = sub_100004EAC(&qword_1000C8120);
  v43 = &v41[*(int *)(v42 + 48)];
  *(_QWORD *)v43 = 0x3FF0000000000000;
  v43[8] = 0;
  v38(&v41[*(int *)(v42 + 64)], v40, v11);
  v44 = *(void (**)(char *, uint64_t))(v37 + 8);
  v44(v27, v11);
  v44(v39, v11);
  v44(v40, v11);
  return ((uint64_t (*)(char *, uint64_t))v44)(v35, v11);
}

uint64_t sub_100012964()
{
  return sub_100012A04(0x73756F6976657250, 0xE800000000000000);
}

uint64_t sub_100012984(uint64_t a1, void (*a2)(_QWORD *))
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = sub_100004EAC(&qword_1000C9CC0);
  v4 = State.wrappedValue.getter(&v8, v3);
  v5 = v8;
  a2(v4);
  return swift_release(v5, v6);
}

uint64_t sub_1000129E8()
{
  return sub_100012A04(1954047310, 0xE400000000000000);
}

uint64_t sub_100012A04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = LocalizedStringKey.init(stringLiteral:)(a1, a2);
  return Label<>.init(_:systemImage:)(v2);
}

uint64_t sub_100012A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[16];
  uint64_t v31;
  char v32[16];
  uint64_t v33;

  v29 = a2;
  v28 = sub_100004EAC(&qword_1000C7F08);
  __chkstk_darwin(v28);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100004EAC(&qword_1000C7F10);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004EAC(&qword_1000C7F18);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.cancellationAction.getter(v13);
  v33 = a1;
  v16 = sub_100004EAC(&qword_1000C77B0);
  v17 = sub_10000B254(&qword_1000C7820, &qword_1000C77B0, (uint64_t)&protocol conformance descriptor for Button<A>);
  v18 = ToolbarItem<>.init(placement:content:)(v10, sub_10001498C, v32, v16, v17);
  static ToolbarItemPlacement.confirmationAction.getter(v18);
  v31 = a1;
  v19 = sub_100004EAC(&qword_1000C7F20);
  v20 = sub_10001499C(&qword_1000C7F28, &qword_1000C7F20, (void (*)(void))sub_100014A20);
  ToolbarItem<>.init(placement:content:)(v10, sub_100014994, v30, v19, v20);
  v21 = v28;
  v22 = &v4[*(int *)(v28 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v4, v15, v11);
  v23 = v22;
  v24 = v27;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v23, v7, v27);
  TupleToolbarContent.init(_:)(v4, v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_100012C8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = type metadata accessor for ProofreadingView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  sub_100015184(a1, (uint64_t)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1000BECA0, v7 + v4, v6 | 7);
  sub_10000D820((uint64_t)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  return Button.init(action:label:)(sub_100014AE4, v8, sub_100012EFC, 0, &type metadata for Text, &protocol witness table for Text);
}

uint64_t sub_100012D68(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  void *Strong;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for NavigationPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v22 = v8;
  v23 = v9;
  v10 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v24, v10);
  v11 = v24;
  sub_100082660(a1 & 1, 0);
  swift_release(v11, v12);
  if ((a1 & 1) != 0)
  {
    v22 = v8;
    v23 = v9;
  }
  else
  {
    type metadata accessor for ProofreadingView(0);
    v13 = sub_100004EAC(&qword_1000C9E90);
    v14 = ((uint64_t (*)(void))Binding.wrappedValue.getter)();
    v15 = NavigationPath.count.getter(v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (v15 >= 1)
    {
      Binding.wrappedValue.getter(v13);
      NavigationPath.removeLast(_:)(1);
      return Binding.wrappedValue.setter(v7, v13);
    }
    v17 = *(_QWORD *)(v2 + 24);
    v22 = *(_QWORD *)(v2 + 16);
    v23 = v17;
  }
  State.wrappedValue.getter(&v24, v10);
  v18 = v24;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v24 + 16);
  result = swift_release(v18, v20);
  if (Strong)
  {
    objc_msgSend(Strong, "endWritingTools");
    return swift_unknownObjectRelease(Strong);
  }
  return result;
}

uint64_t sub_100012EFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100013330(0x747265766552, 0xE600000000000000, a1);
}

uint64_t sub_100012F10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;

  v55 = a2;
  v3 = type metadata accessor for AccessibilityTraits(0);
  v53 = *(_QWORD *)(v3 - 8);
  v54 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ProofreadingView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004EAC(&qword_1000C77B0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100004EAC(&qword_1000C7F38);
  __chkstk_darwin(v50);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100004EAC(&qword_1000C7F20);
  v16 = __chkstk_darwin(v52);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v51 = (char *)&v50 - v19;
  sub_100015184(a1, (uint64_t)v9, type metadata accessor for ProofreadingView);
  v20 = *(unsigned __int8 *)(v7 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = swift_allocObject(&unk_1000BEC50, v21 + v8, v20 | 7);
  sub_10000D820((uint64_t)v9, v22 + v21);
  Button.init(action:label:)(sub_100014AC0, v22, sub_100013320, 0, &type metadata for Text, &protocol witness table for Text);
  v23 = *(_QWORD *)(a1 + 24);
  v56[0] = *(_QWORD *)(a1 + 16);
  v56[1] = v23;
  v24 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v57, v24);
  v25 = v57;
  KeyPath = swift_getKeyPath(&unk_100092580);
  v56[0] = v25;
  v27 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v56, KeyPath, v27);
  swift_release(KeyPath, v28);
  LOBYTE(KeyPath) = *(_BYTE *)(v25 + 72);
  swift_release(v25, v29);
  v30 = swift_getKeyPath(&unk_1000925D0);
  v31 = swift_allocObject(&unk_1000BEC78, 17, 7);
  *(_BYTE *)(v31 + 16) = KeyPath;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v13, v10);
  v32 = v50;
  v33 = (uint64_t *)&v15[*(int *)(v50 + 36)];
  *v33 = v30;
  v33[1] = (uint64_t)sub_10000AC78;
  v33[2] = v31;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v34 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001000AB930);
  v35 = Text.init(_:tableName:bundle:comment:)(v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v42 = sub_100014A20();
  View.accessibilityLabel(_:)(v35, v37, v41, v39, v32, v42);
  sub_10000ADF4(v35, v37, v41);
  swift_bridgeObjectRelease(v39);
  v43 = sub_10000AE2C((uint64_t)v15, &qword_1000C7F38);
  static AccessibilityTraits.isSelected.getter(v43);
  v45 = (uint64_t)v51;
  v44 = v52;
  ModifiedContent<>.accessibilityRemoveTraits(_:)(v5, v52);
  v46 = v54;
  v47 = *(void (**)(char *, uint64_t))(v53 + 8);
  v47(v5, v54);
  v48 = sub_10000AE2C((uint64_t)v18, &qword_1000C7F20);
  static AccessibilityTraits.isButton.getter(v48);
  ModifiedContent<>.accessibilityAddTraits(_:)(v5, v44);
  v47(v5, v46);
  return sub_10000AE2C(v45, &qword_1000C7F20);
}

uint64_t sub_100013320@<X0>(uint64_t a1@<X8>)
{
  return sub_100013330(1701736260, 0xE400000000000000, a1);
}

uint64_t sub_100013330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = LocalizedStringKey.init(stringLiteral:)(a1, a2);
  result = Text.init(_:tableName:bundle:comment:)(v4);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v7 & 1;
  *(_QWORD *)(a3 + 24) = v8;
  return result;
}

uint64_t sub_10001338C(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  char v22;
  uint64_t v23;

  v3 = *a2;
  v4 = *a3;
  v5 = *((_BYTE *)a3 + 8);
  v6 = swift_retain(*a3);
  v7 = sub_100046370(v6, v5);
  swift_release(v4, v8);
  KeyPath = swift_getKeyPath(&unk_1000925A8);
  v23 = v7;
  v10 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, KeyPath, v10);
  swift_release(KeyPath, v11);
  v12 = *(unsigned __int8 *)(v7 + 16);
  result = swift_release(v7, v13);
  if (v3 != v12)
  {
    v15 = swift_retain(v4);
    v16 = sub_100046370(v15, v5);
    swift_release(v4, v17);
    v18 = swift_getKeyPath(&unk_1000925A8);
    __chkstk_darwin(v18);
    v21[2] = v16;
    v22 = v3;
    v23 = v16;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v23, v18, sub_100014968, v21, (char *)&type metadata for () + 8, v10);
    swift_release(v16, v19);
    return swift_release(v18, v20);
  }
  return result;
}

uint64_t sub_1000134F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_100015184(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ProofreadingView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1000BEC00, v7 + v5, v6 | 7);
  result = sub_10000D820((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  *a2 = sub_10000D864;
  a2[1] = v8;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ProofreadingView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *(_QWORD *)a1 = *a2;
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v6 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v6;
    v7 = a2[2];
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    v10 = (void *)a2[4];
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v9;
    v11 = *(int *)(a3 + 28);
    v12 = (_QWORD *)(a1 + v11);
    v13 = (uint64_t)a2 + v11;
    v14 = *(uint64_t *)((char *)a2 + v11);
    v15 = *(uint64_t *)((char *)a2 + v11 + 8);
    *v12 = v14;
    v12[1] = v15;
    swift_retain(v5);
    swift_retain(v7);
    swift_retain(v8);
    v16 = v10;
    swift_retain(v9);
    swift_retain(v14);
    swift_retain(v15);
    v17 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
    v18 = (char *)v12 + v17;
    v19 = v13 + v17;
    v20 = type metadata accessor for NavigationPath(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

uint64_t destroy for ProofreadingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  swift_release(*(_QWORD *)a1, a2);
  swift_release(*(_QWORD *)(a1 + 16), v4);
  swift_release(*(_QWORD *)(a1 + 24), v5);

  swift_release(*(_QWORD *)(a1 + 40), v6);
  v7 = (_QWORD *)(a1 + *(int *)(a2 + 28));
  swift_release(*v7, v8);
  swift_release(v7[1], v9);
  v10 = (char *)v7 + *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v11 = type metadata accessor for NavigationPath(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

uint64_t initializeWithCopy for ProofreadingView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v9 = (void *)a2[4];
  v8 = a2[5];
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  v10 = *(int *)(a3 + 28);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t)a2 + v10;
  v13 = *(uint64_t *)((char *)a2 + v10);
  v14 = *(uint64_t *)((char *)a2 + v10 + 8);
  *v11 = v13;
  v11[1] = v14;
  swift_retain(v4);
  swift_retain(v6);
  swift_retain(v7);
  v15 = v9;
  swift_retain(v8);
  swift_retain(v13);
  swift_retain(v14);
  v16 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v17 = (char *)v11 + v16;
  v18 = v12 + v16;
  v19 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  return a1;
}

uint64_t *assignWithCopy for ProofreadingView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8, v9);
  v10 = a2[2];
  v11 = a1[2];
  a1[2] = v10;
  swift_retain(v10);
  swift_release(v11, v12);
  v13 = a1[3];
  v14 = a2[3];
  a1[3] = v14;
  swift_retain(v14);
  swift_release(v13, v15);
  v16 = (void *)a2[4];
  v17 = (void *)a1[4];
  a1[4] = (uint64_t)v16;
  v18 = v16;

  v19 = a1[5];
  v20 = a2[5];
  a1[5] = v20;
  swift_retain(v20);
  swift_release(v19, v21);
  v22 = *(int *)(a3 + 28);
  v23 = (uint64_t)a1 + v22;
  v24 = (uint64_t *)((char *)a2 + v22);
  v25 = *(uint64_t *)((char *)a1 + v22);
  v26 = *v24;
  *(uint64_t *)((char *)a1 + v22) = *v24;
  swift_retain(v26);
  swift_release(v25, v27);
  v28 = v24[1];
  v29 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v23 + 8) = v28;
  swift_retain(v28);
  swift_release(v29, v30);
  v31 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v32 = v23 + v31;
  v33 = (char *)v24 + v31;
  v34 = type metadata accessor for NavigationPath(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  return a1;
}

uint64_t initializeWithTake for ProofreadingView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(int *)(a3 + 28);
  v6 = (_QWORD *)(a1 + v5);
  v7 = a2 + v5;
  v8 = *(_QWORD *)(a2 + v5 + 8);
  *v6 = *(_QWORD *)(a2 + v5);
  v6[1] = v8;
  v9 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v10 = (char *)v6 + v9;
  v11 = v7 + v9;
  v12 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for ProofreadingView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7, a2);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_release(v8, v9);
  v10 = a1[3];
  a1[3] = a2[3];
  swift_release(v10, v11);
  v12 = (void *)a1[4];
  a1[4] = a2[4];

  v13 = a1[5];
  a1[5] = a2[5];
  swift_release(v13, v14);
  v15 = *(int *)(a3 + 28);
  v16 = (uint64_t)a1 + v15;
  v17 = (uint64_t *)((char *)a2 + v15);
  v18 = *(uint64_t *)((char *)a1 + v15);
  *(uint64_t *)((char *)a1 + v15) = *v17;
  swift_release(v18, v19);
  v20 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = v17[1];
  swift_release(v20, v21);
  v22 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v23 = v16 + v22;
  v24 = (char *)v17 + v22;
  v25 = type metadata accessor for NavigationPath(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProofreadingView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100013AB4);
}

uint64_t sub_100013AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004EAC(&qword_1000C9E90);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ProofreadingView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100013B40);
}

uint64_t sub_100013B40(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004EAC(&qword_1000C9E90);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_100013BB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "\t";
  v4[1] = &unk_1000924C0;
  v4[2] = &unk_1000924C0;
  sub_100013C38(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_100013C38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000C9F00)
  {
    v2 = type metadata accessor for NavigationPath(255);
    v3 = type metadata accessor for Binding(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000C9F00);
  }
}

uint64_t sub_100013C8C()
{
  return sub_10000B254(&qword_1000C7DF8, &qword_1000C7E00, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

ValueMetadata *type metadata accessor for RecommendedChangesViewModifier()
{
  return &type metadata for RecommendedChangesViewModifier;
}

uint64_t sub_100013CC8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000AF9E0, 1);
}

uint64_t sub_100013CD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v38 = a1;
  v41 = a2;
  v42 = type metadata accessor for AccessibilityTraits(0);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v39 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100004EAC(&qword_1000C7E08);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004EAC(&qword_1000C7E10);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100004EAC(&qword_1000C7E18);
  __chkstk_darwin(v37);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004EAC(&qword_1000C7E20);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = static Font.subheadline.getter(v13);
  KeyPath = swift_getKeyPath(&unk_100092550);
  v18 = sub_100004EAC(&qword_1000C7E28);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v5, v38, v18);
  v20 = (uint64_t *)&v5[*(int *)(v3 + 36)];
  *v20 = KeyPath;
  v20[1] = v16;
  v21 = static Font.Weight.semibold.getter(v19);
  v22 = sub_1000145B4();
  View.fontWeight(_:)(*(_QWORD *)&v21, 0, v3, v22);
  v23 = sub_10000AE2C((uint64_t)v5, &qword_1000C7E08);
  LOBYTE(v5) = static Edge.Set.leading.getter(v23);
  v24 = EdgeInsets.init(_all:)(7.0);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v9, v6);
  v31 = &v11[*(int *)(v37 + 36)];
  *v31 = (char)v5;
  *((double *)v31 + 1) = v24;
  *((_QWORD *)v31 + 2) = v26;
  *((_QWORD *)v31 + 3) = v28;
  *((_QWORD *)v31 + 4) = v30;
  v31[40] = 0;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (qword_1000C7448 != -1)
    swift_once(&qword_1000C7448, sub_1000421A8);
  v32 = qword_1000D1D00;
  sub_10000AD78((uint64_t)v11, (uint64_t)v15, &qword_1000C7E18);
  *(_QWORD *)&v15[*(int *)(v12 + 36)] = v32;
  swift_retain(v32);
  v33 = sub_10000AE2C((uint64_t)v11, &qword_1000C7E18);
  v34 = v39;
  static AccessibilityTraits.isHeader.getter(v33);
  v35 = sub_100014650();
  View.accessibility(addTraits:)(v34, v12, v35);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v34, v42);
  return sub_10000AE2C((uint64_t)v15, &qword_1000C7E20);
}

uint64_t sub_100013FF4()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

_QWORD *sub_100014010(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_10005DB38(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    v17 = v1 & 0xC000000000000001;
    v5 = v1;
    while (v2 != v4)
    {
      if (v17)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
      else
        v6 = *(id *)(v1 + 8 * v4 + 32);
      v7 = v6;
      v8 = objc_msgSend(v7, "attributedText");
      v9 = objc_msgSend(v8, "string");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
        sub_10005DB38(v13 > 1, v14 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      v15 = (char *)&_swiftEmptyArrayStorage[2 * v14];
      *((_QWORD *)v15 + 4) = v10;
      *((_QWORD *)v15 + 5) = v12;
      v1 = v5;
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (v1 < 0)
      v16 = v1;
    else
      v16 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(v1);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000141B8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  if ((unint64_t)a1 >> 62)
    goto LABEL_17;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    v3 = _swiftEmptyArrayStorage;
    v4 = 4;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1)
         : *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_msgSend(v5, "suggestionDescription");
      if (v8)
      {
        v9 = v8;
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        v12 = v11;

        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
          v3 = sub_1000144A0(0, v3[2] + 1, 1, v3);
        v14 = v3[2];
        v13 = v3[3];
        if (v14 >= v13 >> 1)
          v3 = sub_1000144A0((_QWORD *)(v13 > 1), v14 + 1, 1, v3);
        v3[2] = v14 + 1;
        v15 = &v3[2 * v14];
        v15[4] = v10;
        v15[5] = v12;
      }
      else
      {

      }
      ++v4;
      if (v7 == v2)
        goto LABEL_22;
    }
    __break(1u);
LABEL_17:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  v3 = _swiftEmptyArrayStorage;
LABEL_22:
  swift_bridgeObjectRelease(a1);
  return v3;
}

_QWORD *sub_10001434C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_10005DB38(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v15 = a1;
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)(a1 + 40);
    do
    {
      ++v3;
      v6 = *(v4 - 1);
      v5 = (void *)*v4;
      swift_bridgeObjectRetain(*v4);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v17 = v7;
      v8._countAndFlagsBits = 8250;
      v8._object = (void *)0xE200000000000000;
      String.append(_:)(v8);
      v9._countAndFlagsBits = v6;
      v9._object = v5;
      String.append(_:)(v9);
      v10._countAndFlagsBits = 10;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      swift_bridgeObjectRelease(v5);
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_10005DB38(v11 > 1, v12 + 1, 1);
      v4 += 2;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v16;
      v13[5] = v17;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease(v15);
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1000144A0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004EAC(&qword_1000C80A8);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100014B3C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000145B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7E30;
  if (!qword_1000C7E30)
  {
    v1 = sub_10000ABD0(&qword_1000C7E08);
    sub_10000B254(&qword_1000C7E38, &qword_1000C7E28, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000B254(&qword_1000C7E40, &qword_1000CA0D0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7E30);
  }
  return result;
}

unint64_t sub_100014650()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7E48;
  if (!qword_1000C7E48)
  {
    v1 = sub_10000ABD0(&qword_1000C7E20);
    sub_1000146D4();
    sub_10000B254((unint64_t *)&unk_1000CB710, (uint64_t *)&unk_1000CA0C0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7E48);
  }
  return result;
}

unint64_t sub_1000146D4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000C7E50;
  if (!qword_1000C7E50)
  {
    v1 = sub_10000ABD0(&qword_1000C7E18);
    v2[0] = sub_10000ABD0(&qword_1000C7E08);
    v2[1] = sub_1000145B4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7E50);
  }
  return result;
}

uint64_t sub_10001476C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ProofreadingView(0) - 8) + 80);
  return sub_10000D410(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_1000147C4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ProofreadingView(0) - 8) + 80);
  return sub_10001338C(a1, a2, (uint64_t *)(v2 + ((v5 + 16) & ~v5)));
}

unint64_t sub_100014810()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7E88;
  if (!qword_1000C7E88)
  {
    v1 = sub_10000ABD0(&qword_1000C7E70);
    sub_100014894();
    sub_10000B254((unint64_t *)&unk_1000CB530, &qword_1000C7EA0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7E88);
  }
  return result;
}

unint64_t sub_100014894()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000C7E90;
  if (!qword_1000C7E90)
  {
    v1 = sub_10000ABD0(&qword_1000C7E68);
    v2[0] = sub_10000ABD0(&qword_1000C7E58);
    v2[1] = sub_10000B254(&qword_1000C7E80, &qword_1000C7E58, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
    sub_100005900(&qword_1000C7E98, type metadata accessor for PreferredContentSizeModifier, (uint64_t)&unk_100093F08);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7E90);
  }
  return result;
}

uint64_t sub_100014968()
{
  uint64_t v0;

  return sub_100055C44(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100014984@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100012A44(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10001498C()
{
  uint64_t v0;

  return sub_100012C8C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100014994@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100012F10(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10001499C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000ABD0(a2);
    a3();
    sub_100005900(&qword_1000CA3D0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100014A20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7F30;
  if (!qword_1000C7F30)
  {
    v1 = sub_10000ABD0(&qword_1000C7F38);
    sub_10000B254(&qword_1000C7820, &qword_1000C77B0, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_10000B254((unint64_t *)&unk_1000CA4A0, &qword_1000C7F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7F30);
  }
  return result;
}

uint64_t sub_100014AC0()
{
  return sub_100014AEC(1);
}

uint64_t sub_100014AD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100014AE4()
{
  return sub_100014AEC(0);
}

uint64_t sub_100014AEC(char a1)
{
  type metadata accessor for ProofreadingView(0);
  return sub_100012D68(a1);
}

uint64_t sub_100014B3C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

void *sub_100014C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[3];
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[24];
  uint64_t v31;

  v3 = v2;
  v29 = a2;
  v5 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_17;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v8)
  {
    v26 = a1 & 0xC000000000000001;
    v25[1] = v3;
    v25[2] = v29 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel___observationRegistrar;
    v9 = (_QWORD *)(v29 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates);
    swift_beginAccess(v29 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates, v30, 0, 0);
    v10 = 4;
    v11 = a1;
    while (1)
    {
      v3 = v10 - 4;
      v12 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, a1) : *(id *)(a1 + 8 * v10);
      v13 = v12;
      v14 = v10 - 3;
      if (__OFADD__(v3, 1))
        break;
      v15 = objc_msgSend(v12, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

      KeyPath = swift_getKeyPath(&unk_100092778);
      v31 = v29;
      v17 = sub_100005900((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel, (uint64_t)&unk_1000921D8);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v31, KeyPath, v17);
      swift_release(KeyPath, v18);
      v19 = *v9;
      if (*(_QWORD *)(*v9 + 16))
      {
        swift_bridgeObjectRetain(*v9);
        v20 = sub_10001CCB8((uint64_t)v7);
        if ((v21 & 1) != 0)
        {
          v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
          swift_bridgeObjectRelease(v19);
          (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
          if (v22 == 1)
          {
            swift_bridgeObjectRelease(v11);
            return v13;
          }
          goto LABEL_6;
        }
        swift_bridgeObjectRelease(v19);
      }
      (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
LABEL_6:

      ++v10;
      a1 = v11;
      if (v14 == v8)
      {
        swift_bridgeObjectRelease(v11);
        return 0;
      }
    }
    __break(1u);
LABEL_17:
    if (a1 < 0)
      v23 = a1;
    else
      v23 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v23);
  }
  swift_bridgeObjectRelease(a1);
  return 0;
}

unint64_t sub_100014E90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7FB8;
  if (!qword_1000C7FB8)
  {
    v1 = sub_10000ABD0(&qword_1000C7FA8);
    sub_100014F14();
    sub_10000B254(&qword_1000C7FD0, &qword_1000C7FD8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7FB8);
  }
  return result;
}

unint64_t sub_100014F14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7FC0;
  if (!qword_1000C7FC0)
  {
    v1 = sub_10000ABD0(&qword_1000C7FC8);
    sub_10000AB6C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7FC0);
  }
  return result;
}

uint64_t sub_100014F80()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100014F90()
{
  return sub_100014FB4(&qword_1000C8000, &qword_1000C8008, (void (*)(void))sub_100015020, (uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>);
}

uint64_t sub_100014FB4(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000ABD0(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100015020()
{
  unint64_t result;

  result = qword_1000C8010;
  if (!qword_1000C8010)
  {
    result = swift_getWitnessTable(&unk_100092500, &type metadata for RecommendedChangesViewModifier);
    atomic_store(result, (unint64_t *)&qword_1000C8010);
  }
  return result;
}

uint64_t sub_100015064(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14)
{
  id v17;
  uint64_t result;

  if (a3 != (void *)1)
  {
    swift_bridgeObjectRetain(a9);
    v17 = a3;
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a7);
    sub_10000B04C(a10, a11, a12, a13);
    return swift_retain(a14);
  }
  return result;
}

uint64_t sub_1000150E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t result;

  if (a3 != (void *)1)
  {

    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a9);
    sub_10000B11C(a10, a11, a12, a13);
    return swift_release(a14, v16);
  }
  return result;
}

uint64_t sub_100015184(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000151C8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100015204()
{
  unint64_t result;

  result = qword_1000C87D0;
  if (!qword_1000C87D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000C87D0);
  }
  return result;
}

uint64_t sub_100015248(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  sub_10000ADBC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  sub_10000ADBC(v3, v4, v5);
  swift_retain(v8);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t sub_1000152D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_BYTE *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  sub_10000ADF4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  sub_10000ADF4(v3, v4, v5);
  swift_release(v7, v9);
  swift_bridgeObjectRelease(v6);
  swift_release(v8, v10);
  return a1;
}

uint64_t sub_10001536C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ProofreadingView(0) - 8) + 80);
  return sub_100010FCC(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1000153A8()
{
  return sub_100015680((uint64_t)sub_10001572C);
}

unint64_t sub_1000153C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C80D8;
  if (!qword_1000C80D8)
  {
    v1 = sub_10000ABD0(&qword_1000C80C0);
    sub_10000B254(&qword_1000C80E0, &qword_1000CBB80, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C80D8);
  }
  return result;
}

unint64_t sub_100015448()
{
  unint64_t result;

  result = qword_1000CBA50;
  if (!qword_1000CBA50)
  {
    result = swift_getWitnessTable(&unk_100093CC8, &type metadata for PrimaryButtonStyle);
    atomic_store(result, (unint64_t *)&qword_1000CBA50);
  }
  return result;
}

unint64_t sub_10001548C()
{
  unint64_t result;

  result = qword_1000C80E8;
  if (!qword_1000C80E8)
  {
    result = swift_getWitnessTable(&unk_100093E48, &type metadata for HorizontalIconTitleLabelStyle);
    atomic_store(result, (unint64_t *)&qword_1000C80E8);
  }
  return result;
}

unint64_t sub_1000154D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C80F0;
  if (!qword_1000C80F0)
  {
    v1 = sub_10000ABD0(&qword_1000C80B0);
    sub_10000B254(&qword_1000C80F8, &qword_1000C8100, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C80F0);
  }
  return result;
}

uint64_t sub_100015550()
{
  return sub_100015680((uint64_t)sub_10001570C);
}

unint64_t sub_10001555C()
{
  unint64_t result;

  result = qword_1000C8118;
  if (!qword_1000C8118)
  {
    result = swift_getWitnessTable(&unk_100093E80, &type metadata for UnevenCornerPrimaryButtonStyle);
    atomic_store(result, (unint64_t *)&qword_1000C8118);
  }
  return result;
}

uint64_t sub_1000155A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v1 = type metadata accessor for ProofreadingView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4), v8);
  swift_release(*(_QWORD *)(v7 + 16), v9);
  swift_release(*(_QWORD *)(v7 + 24), v10);

  swift_release(*(_QWORD *)(v7 + 40), v11);
  v12 = (_QWORD *)(v7 + *(int *)(v1 + 28));
  swift_release(*v12, v13);
  swift_release(v12[1], v14);
  v15 = (char *)v12 + *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v16 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100015674()
{
  return sub_100015680((uint64_t)sub_1000156EC);
}

uint64_t sub_100015680(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[4];

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ProofreadingView(0) - 8) + 80);
  v5[2] = v1 + ((v3 + 16) & ~v3);
  return withAnimation<A>(_:_:)(0, a1, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_1000156EC()
{
  uint64_t v0;

  return sub_100012984(*(_QWORD *)(v0 + 16), (void (*)(_QWORD *))sub_100082B7C);
}

uint64_t sub_10001570C()
{
  uint64_t v0;

  return sub_100012984(*(_QWORD *)(v0 + 16), (void (*)(_QWORD *))sub_100082880);
}

uint64_t sub_10001572C()
{
  uint64_t v0;

  return sub_100012388(*(_QWORD *)(v0 + 16));
}

void sub_100015744()
{
  uint64_t v0;

  sub_10007EFD0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100015768()
{
  return sub_10001499C(&qword_1000C8128, &qword_1000C8130, (void (*)(void))sub_100014650);
}

uint64_t initializeBufferWithCopyOfBuffer for CommonUIBackgroundPlaceholderView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for CommonUIBackgroundPlaceholderView(_QWORD *a1, uint64_t a2)
{
  return swift_release(*a1, a2);
}

uint64_t *assignWithCopy for CommonUIBackgroundPlaceholderView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_retain(v3);
  swift_release(v5, v6);
  return a1;
}

uint64_t initializeWithTake for CommonUIBackgroundPlaceholderView(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for CommonUIBackgroundPlaceholderView(uint64_t *a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;

  v3 = *((_BYTE *)a2 + 8);
  v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  swift_release(v4, a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for CommonUIBackgroundPlaceholderView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CommonUIBackgroundPlaceholderView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CommonUIBackgroundPlaceholderView()
{
  return &type metadata for CommonUIBackgroundPlaceholderView;
}

void *sub_1000158FC()
{
  return &protocol witness table for Never;
}

id sub_100015908(uint64_t a1, uint64_t a2, char a3)
{
  char v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  uint64_t v16;

  v4 = a3 & 1;
  v5 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v6 = swift_retain(a2);
  v7 = sub_100046370(v6, v4);
  swift_release(a2, v8);
  KeyPath = swift_getKeyPath(&unk_1000928A8);
  v15[2] = v7;
  v15[3] = v5;
  v16 = v7;
  v10 = sub_100015B78();
  v11 = v5;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v16, KeyPath, sub_100015B60, v15, (char *)&type metadata for () + 8, v10);
  swift_release(v7, v12);
  swift_release(KeyPath, v13);

  return v11;
}

id sub_1000159F0(uint64_t a1)
{
  uint64_t v1;

  return sub_100015908(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t sub_100015A0C(uint64_t a1, char a2)
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)(a1, a2 & 1);
}

uint64_t sub_100015A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100015BC0();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100015A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100015BC0();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100015AEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100015BC0();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_100015B14()
{
  unint64_t result;

  result = qword_1000C8138;
  if (!qword_1000C8138)
  {
    result = swift_getWitnessTable(&unk_1000927C4, &type metadata for CommonUIBackgroundPlaceholderView);
    atomic_store(result, (unint64_t *)&qword_1000C8138);
  }
  return result;
}

uint64_t sub_100015B60()
{
  uint64_t v0;

  return sub_1000563E4(*(_QWORD *)(v0 + 16));
}

unint64_t sub_100015B78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9C90;
  if (!qword_1000C9C90)
  {
    v1 = type metadata accessor for CommonUIManager(255);
    result = swift_getWitnessTable(&unk_100094CAC, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9C90);
  }
  return result;
}

unint64_t sub_100015BC0()
{
  unint64_t result;

  result = qword_1000C8140;
  if (!qword_1000C8140)
  {
    result = swift_getWitnessTable(&unk_100092814, &type metadata for CommonUIBackgroundPlaceholderView);
    atomic_store(result, (unint64_t *)&qword_1000C8140);
  }
  return result;
}

unint64_t sub_100015C08()
{
  unint64_t result;

  result = sub_100062224((uint64_t)_swiftEmptyArrayStorage);
  qword_1000D1C80 = result;
  return result;
}

uint64_t sub_100015C2C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100092A98);
  v5 = v0;
  v2 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries));
}

uint64_t sub_100015CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries) = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100015CFC()
{
  return sub_100016358((uint64_t)&unk_100092B68, &OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__hasEntries);
}

uint64_t sub_100015D10@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000163DC(a1, (uint64_t)&unk_100092B68, &OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__hasEntries, a2);
}

uint64_t sub_100015D24(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100092B68);
  v8[2] = v3;
  v9 = v2;
  v10 = v3;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_1000219F0, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

id sub_100015DCC()
{
  return sub_100015E2C((uint64_t)&unk_100092B10, &OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__inputContextHistory);
}

void sub_100015DE0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__inputContextHistory);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__inputContextHistory) = a2;
  v3 = a2;

}

id sub_100015E18()
{
  return sub_100015E2C((uint64_t)&unk_100092A70, &OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration);
}

id sub_100015E2C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  KeyPath = swift_getKeyPath(a1);
  v8 = v2;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath, v6);
  return *(id *)(v2 + *a2);
}

void sub_100015EB0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration) = a2;
  v3 = a2;

}

void *sub_100015EE8()
{
  double v0;
  double v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  void *result;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  double v17;
  uint64_t v18;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_100092B90);
  v17 = v0;
  v3 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, KeyPath, v3);
  result = (void *)swift_release(KeyPath, v4);
  v6 = (double *)(*(_QWORD *)&v0
                + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__questionnaireRectRelativeToInputDashboard);
  if ((*(_BYTE *)(*(_QWORD *)&v0
                 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__questionnaireRectRelativeToInputDashboard
                 + 32) & 1) == 0)
  {
    v8 = v6[2];
    v7 = v6[3];
    v10 = *v6;
    v9 = v6[1];
    if (qword_1000C73C8 != -1)
      swift_once(&qword_1000C73C8, sub_10000629C);
    v11 = type metadata accessor for Logger(0);
    sub_1000063D4(v11, (uint64_t)qword_1000D1BE8);
    v12 = static os_log_type_t.debug.getter();
    v13 = v12;
    v14 = Logger.logObject.getter(v12);
    if (os_log_type_enabled(v14, v13))
    {
      v15 = swift_slowAlloc(42, -1);
      *(_DWORD *)v15 = 134218752;
      v17 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v15 + 4, v15 + 12);
      *(_WORD *)(v15 + 12) = 2048;
      v17 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v15 + 14, v15 + 22);
      *(_WORD *)(v15 + 22) = 2048;
      v17 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v15 + 24, v15 + 32);
      *(_WORD *)(v15 + 32) = 2048;
      v17 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v15 + 34, v15 + 42);
      _os_log_impl((void *)&_mh_execute_header, v14, v13, "QuestionnaireModel: didSet questionnaireRectRelativeToInputDashboard (rect: %f, %f; %f, %f)",
        (uint8_t *)v15,
        0x2Au);
      swift_slowDealloc(v15, -1, -1);
    }

    result = (void *)swift_unknownObjectWeakLoadStrong(*(_QWORD *)&v1 + 16);
    if (result)
    {
      v16 = result;
      if ((objc_msgSend(result, "respondsToSelector:", "showSmartReplyQuestionnaireWithRect:") & 1) != 0)
        objc_msgSend(v16, "showSmartReplyQuestionnaireWithRect:", v10, v9, v8, v7);
      return (void *)swift_unknownObjectRelease(v16);
    }
  }
  return result;
}

__n128 sub_100016114@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_100092B90);
  v9 = v1;
  v4 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath, v5);
  v6 = *(_BYTE *)(v1
                + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__questionnaireRectRelativeToInputDashboard
                + 32);
  result = *(__n128 *)(v1
                     + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__questionnaireRectRelativeToInputDashboard);
  v8 = *(_OWORD *)(v1
                 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__questionnaireRectRelativeToInputDashboard
                 + 16);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v6;
  return result;
}

__n128 sub_1000161B4@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100092B90);
  v10 = v3;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_BYTE *)(v3
                + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__questionnaireRectRelativeToInputDashboard
                + 32);
  result = *(__n128 *)(v3
                     + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__questionnaireRectRelativeToInputDashboard);
  v9 = *(_OWORD *)(v3
                 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__questionnaireRectRelativeToInputDashboard
                 + 16);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 32) = v7;
  return result;
}

uint64_t sub_100016254(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];
  uint64_t v9;
  _BYTE v10[40];

  sub_100021910(a1, (uint64_t)v10);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100092B90);
  v8[2] = v3;
  v8[3] = v10;
  v9 = v3;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100021958, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

void *sub_100016304(uint64_t a1, uint64_t a2)
{
  sub_100021910(a2, a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__questionnaireRectRelativeToInputDashboard);
  return sub_100015EE8();
}

uint64_t sub_100016344()
{
  return sub_100016358((uint64_t)&unk_100092980, &OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__longFormUpdateInProgress);
}

uint64_t sub_100016358(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  KeyPath = swift_getKeyPath(a1);
  v8 = v2;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath, v6);
  return *(unsigned __int8 *)(v2 + *a2);
}

uint64_t sub_1000163DC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v11 = v6;
  v8 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v8);
  result = swift_release(KeyPath, v9);
  *a4 = *(_BYTE *)(v6 + *a3);
  return result;
}

uint64_t sub_100016474(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100092980);
  v8[2] = v3;
  v9 = v2;
  v10 = v3;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100020FC0, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_10001651C()
{
  return sub_100016358((uint64_t)&unk_1000929D0, &OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__sessionEndRequested);
}

uint64_t sub_100016530(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000929D0);
  v8[2] = v3;
  v9 = v2;
  v10 = v3;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_1000219C8, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

void *sub_1000165D8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  void *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000929A8);
  v22[0] = v1;
  v9 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v22, KeyPath, v9);
  result = (void *)swift_release(KeyPath, v10);
  v12 = OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__session;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__session))
  {
    sub_10000C1D4(0);
    if (qword_1000C73F8 != -1)
      swift_once(&qword_1000C73F8, sub_100015C08);
    v13 = swift_getKeyPath(&unk_1000929A8);
    v22[0] = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v22, v13, v9);
    swift_release(v13, v14);
    result = *(void **)(v1 + v12);
    if (result)
    {
      v15 = objc_msgSend(result, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

      swift_beginAccess(&qword_1000D1C80, v22, 33, 0);
      swift_retain(v2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(qword_1000D1C80);
      v21 = qword_1000D1C80;
      qword_1000D1C80 = 0x8000000000000000;
      sub_10001F078(v2, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
      v17 = qword_1000D1C80;
      qword_1000D1C80 = v21;
      swift_bridgeObjectRelease(v17);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return (void *)swift_endAccess(v22);
    }
    else
    {
      __break(1u);
    }
  }
  else if (a1)
  {
    if (qword_1000C73F8 != -1)
      swift_once(&qword_1000C73F8, sub_100015C08);
    v18 = objc_msgSend(a1, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

    swift_beginAccess(&qword_1000D1C80, v22, 33, 0);
    v19 = sub_10001D260((uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_endAccess(v22);
    return (void *)swift_release(v19, v20);
  }
  return result;
}

void *sub_100016870()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1000929A8);
  v7 = v0;
  v2 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath, v3);
  v4 = *(void **)(v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__session);
  v5 = v4;
  return v4;
}

id sub_100016904@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000929A8);
  v9 = v3;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(void **)(v3 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__session);
  *a2 = v7;
  return v7;
}

uint64_t sub_100016998(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v9[5];
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000929A8);
  v9[2] = v3;
  v9[3] = v2;
  v10 = v3;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_1000219B4, v9, (char *)&type metadata for () + 8, v5);

  return swift_release(KeyPath, v7);
}

void sub_100016A4C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__session);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__session) = a2;
  v3 = a2;
  sub_1000165D8(v2);

}

void sub_100016AA4(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  _QWORD v29[4];
  _QWORD v30[2];
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;

  v4 = v3;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries) = 0;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__hasEntries) = 0;
  v8 = v4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__questionnaireRectRelativeToInputDashboard;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_BYTE *)(v8 + 32) = 1;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__longFormUpdateInProgress) = 0;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__sessionEndRequested) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__session) = 0;
  v9 = swift_retain(v4);
  ObservationRegistrar.init()(v9);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration) = a1;
  v10 = a1;
  v11 = objc_msgSend(v10, "inputContextHistory");
  v12 = objc_msgSend(objc_allocWithZone((Class)TCInputContextHistory), "initWithTIInputContextHistory:", v11);

  if (v12)
  {
    *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__inputContextHistory) = v12;
    v13 = objc_msgSend(v10, "inputContextHistory");
    v14 = objc_msgSend(v13, "threadIdentifier");

    v33 = a3;
    if (v14)
    {
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

    }
    else
    {
      v15 = 0;
      v17 = 0;
    }
    v18 = type metadata accessor for SmartReplyAnalytics(0);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__analyticsInstance) = sub_1000527B0(v15, v17);
    swift_release(v4, v19);
    swift_unknownObjectWeakInit(v4 + 16, 0);
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_BYTE *)(v4 + 56) = -1;
    *(_QWORD *)(v4 + 64) = 0;
    *(_BYTE *)(v4 + 72) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    *(_BYTE *)(v4 + 88) = 0;
    *(_QWORD *)(v4 + 96) = 0;
    *(_BYTE *)(v4 + 104) = 0;
    v21 = swift_unknownObjectRetain(a2, v20);
    ObservationRegistrar.init()(v21);
    KeyPath = swift_getKeyPath(&unk_1000929F8);
    __chkstk_darwin(KeyPath);
    v29[2] = v4;
    v29[3] = 2;
    v30[0] = 0;
    v30[1] = 0;
    LOBYTE(v31) = 2;
    v34 = v4;
    v23 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v34, KeyPath, sub_100020FE0, v29, (char *)&type metadata for () + 8, v23);
    swift_release(KeyPath, v24);
    swift_unknownObjectWeakAssign(v4 + 16);
    swift_unknownObjectRelease(a2);
    v25 = swift_getKeyPath(&unk_100092A20);
    __chkstk_darwin(v25);
    v26 = v33;
    v31 = v4;
    v32 = v33;
    v34 = v4;
    swift_retain_n(v4, 2);
    v27 = v26;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v34, v25, sub_10000A8BC, v30, (char *)&type metadata for () + 8, v23);
    swift_release_n(v4, 2);

    swift_unknownObjectRelease(a2);
    swift_release(v25, v28);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100016E08(_QWORD *a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  KeyPath = swift_getKeyPath(&unk_100092A98);
  v33 = a1;
  v3 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v33, KeyPath, v3);
  result = swift_release(KeyPath, v4);
  v6 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries);
  if (v6)
  {
    if ((unint64_t)v6 >> 62)
    {
      if (v6 >= 0)
        v31 = v6 & 0xFFFFFFFFFFFFFF8;
      else
        v31 = v6;
      swift_bridgeObjectRetain(v6);
      v7 = _CocoaArrayWrapper.endIndex.getter(v31);
      if (v7)
        goto LABEL_4;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v6);
      if (v7)
      {
LABEL_4:
        v33 = _swiftEmptyArrayStorage;
        result = sub_10005DB54(0, v7 & ~(v7 >> 63), 0);
        if (v7 < 0)
        {
          __break(1u);
          return result;
        }
        if ((v6 & 0xC000000000000001) != 0)
        {
          v8 = 0;
          v9 = v33;
          do
          {
            v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
            v11 = swift_getKeyPath(&unk_100092B38);
            v32 = v10;
            v12 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
            ObservationRegistrar.access<A, B>(_:keyPath:)(&v32, v11, v12);
            swift_release(v11, v13);
            v14 = *(_QWORD *)(v10 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer);
            v15 = *(_QWORD *)(v10 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer + 8);
            swift_bridgeObjectRetain(v15);
            swift_unknownObjectRelease(v10);
            if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
            {
              sub_10005DB54(0, v9[2] + 1, 1);
              v9 = v33;
            }
            v18 = v9[2];
            v17 = v9[3];
            if (v18 >= v17 >> 1)
            {
              sub_10005DB54(v17 > 1, v18 + 1, 1);
              v9 = v33;
            }
            ++v8;
            v9[2] = v18 + 1;
            v19 = &v9[2 * v18];
            v19[4] = v14;
            v19[5] = v15;
          }
          while (v7 != v8);
        }
        else
        {
          v20 = (uint64_t *)(v6 + 32);
          v9 = v33;
          do
          {
            v21 = *v20;
            v22 = swift_getKeyPath(&unk_100092B38);
            v32 = v21;
            v23 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
            swift_retain(v21);
            ObservationRegistrar.access<A, B>(_:keyPath:)(&v32, v22, v23);
            swift_release(v22, v24);
            v25 = *(_QWORD *)(v21 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer);
            v26 = *(_QWORD *)(v21 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer + 8);
            swift_bridgeObjectRetain(v26);
            swift_release(v21, v27);
            if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
            {
              sub_10005DB54(0, v9[2] + 1, 1);
              v9 = v33;
            }
            v29 = v9[2];
            v28 = v9[3];
            if (v29 >= v28 >> 1)
            {
              sub_10005DB54(v28 > 1, v29 + 1, 1);
              v9 = v33;
            }
            v9[2] = v29 + 1;
            v30 = &v9[2 * v29];
            v30[4] = v25;
            v30[5] = v26;
            ++v20;
            --v7;
          }
          while (v7);
        }
        swift_release(v9, v16);
      }
    }
    return swift_bridgeObjectRelease(v6);
  }
  return result;
}

uint64_t sub_100017138(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[4];

  v2 = sub_100004EAC((uint64_t *)&unk_1000C87F0);
  __chkstk_darwin(v2);
  v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_1000BF000, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = a1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v10 = swift_retain(a1);
  if (v9 == 1)
  {
    sub_100021774((uint64_t)v4);
    v11 = 0;
    v12 = 0;
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v13 = v14 | 0x1C00;
    v15 = *v8;
    if (*v8)
    {
      v16 = v7[3];
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15, v18);
      v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v12 = v19;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v20 = swift_allocObject(&unk_1000BF028, 32, 7);
  *(_QWORD *)(v20 + 16) = &unk_1000C8848;
  *(_QWORD *)(v20 + 24) = v7;
  if (v12 | v11)
  {
    v25[0] = 0;
    v25[1] = 0;
    v21 = v25;
    v25[2] = v11;
    v25[3] = v12;
  }
  else
  {
    v21 = 0;
  }
  v22 = swift_task_create(v13, v21, (char *)&type metadata for () + 8, &unk_1000C8850, v20);
  return swift_release(v22, v23);
}

uint64_t sub_100017304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = (_QWORD *)swift_task_alloc(dword_1000C81FC);
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = v4;
  v5[1] = sub_100017350;
  return sub_10001A8E8();
}

uint64_t sub_100017350()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return swift_task_switch(sub_1000173A4, 0, 0);
}

uint64_t sub_1000173A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 32) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_10001740C, v2, v3);
}

uint64_t sub_10001740C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 16);
  swift_release(*(_QWORD *)(v2 + 32), a2);
  withObservationTracking<A>(_:onChange:)(sub_100021698, v3, sub_1000219A0, v3, (char *)&type metadata for () + 8);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100017468()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[23] = v0;
  v2 = sub_100004EAC((uint64_t *)&unk_1000C87F0);
  v1[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MainActor(0);
  v1[25] = v3;
  v1[26] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v1[27] = v4;
  v1[28] = v5;
  return swift_task_switch(sub_1000174FC, v4, v5);
}

uint64_t sub_1000174FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;

  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000063D4(v1, (uint64_t)qword_1000D1BE8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Requested session start...", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 184);

  Strong = swift_unknownObjectWeakLoadStrong(v6 + 16);
  *(_QWORD *)(v0 + 232) = Strong;
  if (Strong)
  {
    v9 = (void *)Strong;
    v10 = *(_QWORD *)(v0 + 184);
    v11 = objc_msgSend(objc_allocWithZone((Class)WTSession), "initWithType:textViewDelegate:", 2, 0);
    KeyPath = swift_getKeyPath(&unk_1000929A8);
    v13 = swift_task_alloc(32);
    *(_QWORD *)(v13 + 16) = v10;
    *(_QWORD *)(v13 + 24) = v11;
    *(_QWORD *)(v0 + 240) = OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel___observationRegistrar;
    *(_QWORD *)(v0 + 144) = v10;
    v14 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
    *(_QWORD *)(v0 + 248) = v14;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 144, KeyPath, sub_1000219B4, v13, (char *)&type metadata for () + 8, v14);
    *(_QWORD *)(v0 + 256) = 0;
    swift_release(KeyPath, v15);

    swift_task_dealloc(v13);
    v16 = swift_getKeyPath(&unk_1000929A8);
    *(_QWORD *)(v0 + 136) = v10;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 136, v16, v14);
    swift_release(v16, v17);
    v18 = OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__session;
    *(_QWORD *)(v0 + 264) = OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__session;
    v19 = *(void **)(v10 + v18);
    if (v19)
      objc_msgSend(v19, "setCompositionSessionType:", 11);
    v20 = *(_QWORD *)(v0 + 184);
    v21 = swift_getKeyPath(&unk_1000929A8);
    *(_QWORD *)(v0 + 128) = v20;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 128, v21, v14);
    result = swift_release(v21, v22);
    v24 = *(void **)(v10 + v18);
    *(_QWORD *)(v0 + 272) = v24;
    if (v24)
    {
      v25 = v0 + 16;
      *(_QWORD *)(v0 + 56) = v0 + 120;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_10001787C;
      v26 = swift_continuation_init(v0 + 16, 0);
      *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
      v27 = (_QWORD *)(v0 + 80);
      v27[1] = 0x40000000;
      v27[2] = sub_10007DD58;
      v27[3] = &unk_1000BEF38;
      v27[4] = v26;
      objc_msgSend(v9, "willBeginWritingToolsSession:requestContexts:", v24, v27);
      return swift_continuation_await(v25);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v28 = swift_release(*(_QWORD *)(v0 + 208), v8);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unexpected nil delegate when starting session", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_10001787C()
{
  uint64_t v0;

  return swift_task_switch(sub_1000178C0, *(_QWORD *)(*(_QWORD *)v0 + 216), *(_QWORD *)(*(_QWORD *)v0 + 224));
}

uint64_t sub_1000178C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  Class isa;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v3 = *(void **)(v2 + 272);
  v45 = *(_QWORD *)(v2 + 248);
  v46 = *(_QWORD *)(v2 + 264);
  v4 = *(_QWORD *)(v2 + 184);
  swift_release(*(_QWORD *)(v2 + 208), a2);
  v5 = *(_QWORD *)(v2 + 120);
  KeyPath = swift_getKeyPath(&unk_100092AE8);
  v7 = swift_task_alloc(32);
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v5;
  *(_QWORD *)(v2 + 152) = v4;
  v8 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v2 + 152, KeyPath, sub_100021414, v7, (char *)&type metadata for () + 8, v8);
  swift_release(KeyPath, v9);
  swift_bridgeObjectRelease(v5);
  swift_task_dealloc(v7);

  v10 = swift_getKeyPath(&unk_1000929A8);
  *(_QWORD *)(v2 + 160) = v4;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 160, v10, v45);
  result = swift_release(v10, v11);
  v13 = *(void **)(v4 + v46);
  if (!v13)
  {
    __break(1u);
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(v2 + 184);
  v15 = swift_getKeyPath(&unk_100092AE8);
  *(_QWORD *)(v2 + 168) = v14;
  v16 = v13;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 168, v15, v8);
  result = swift_release(v15, v17);
  v18 = *(_QWORD *)(v14 + 64);
  if (!v18)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v19 = *(_QWORD *)(v2 + 248);
  v20 = *(void **)(v2 + 232);
  v21 = *(_QWORD *)(v2 + 184);
  sub_100021548(0, (unint64_t *)&qword_1000C9CB0, WTContext_ptr);
  swift_bridgeObjectRetain(v18);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v20, "didBeginWritingToolsSession:contexts:", v16, isa);

  v23 = swift_getKeyPath(&unk_100092A70);
  *(_QWORD *)(v2 + 176) = v21;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 176, v23, v19);
  swift_release(v23, v24);
  v25 = objc_msgSend(*(id *)(v21 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration), "baseResponse");
  if (v25)
  {

  }
  else
  {
    if ((objc_msgSend(*(id *)(v2 + 232), "respondsToSelector:", "beginTextPlaceholder") & 1) != 0)
      objc_msgSend(*(id *)(v2 + 232), "beginTextPlaceholder");
    v26 = *(_QWORD *)(v2 + 232);
    v27 = *(_QWORD *)(v2 + 192);
    v28 = *(_QWORD *)(v2 + 184);
    v29 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v27, 1, 1, v29);
    swift_retain(v28);
    v31 = swift_unknownObjectRetain(v26, v30);
    v32 = static MainActor.shared.getter(v31);
    v33 = (_QWORD *)swift_allocObject(&unk_1000BEF60, 48, 7);
    v33[2] = v32;
    v33[3] = &protocol witness table for MainActor;
    v33[4] = v28;
    v33[5] = v26;
    v34 = sub_1000596DC(v27, (uint64_t)&unk_1000C8808, (uint64_t)v33);
    swift_release(v34, v35);
  }
  v36 = *(_QWORD *)(v2 + 232);
  v37 = *(_QWORD *)(v2 + 192);
  v38 = *(_QWORD *)(v2 + 184);
  v39 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v37, 1, 1, v39);
  v40 = swift_retain(v38);
  v41 = static MainActor.shared.getter(v40);
  v42 = (_QWORD *)swift_allocObject(&unk_1000BEF88, 40, 7);
  v42[2] = v41;
  v42[3] = &protocol witness table for MainActor;
  v42[4] = v38;
  v43 = sub_1000596DC(v37, (uint64_t)&unk_1000C8818, (uint64_t)v42);
  swift_unknownObjectRelease(v36);
  swift_release(v43, v44);
  swift_task_dealloc(*(_QWORD *)(v2 + 192));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100017C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5[17] = a4;
  v5[18] = a5;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v5[19] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[20] = v7;
  v5[21] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v5[22] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[23] = v9;
  v5[24] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MainActor(0);
  v5[25] = v10;
  v5[26] = static MainActor.shared.getter(v10);
  v11 = (_QWORD *)swift_task_alloc(dword_1000C81F4);
  v5[27] = v11;
  *v11 = v5;
  v11[1] = sub_100017D0C;
  return sub_100019B7C();
}

uint64_t sub_100017D0C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 216);
  v5 = *(_QWORD *)(*v2 + 200);
  *(_QWORD *)(v3 + 224) = a1;
  *(_QWORD *)(v3 + 232) = a2;
  swift_task_dealloc(v4);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_100017D84, v6, v7);
}

uint64_t sub_100017D84(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v3 = v2;
  v4 = v2[29];
  swift_release(v2[26], a2);
  if (!v4)
    goto LABEL_14;
  v5 = v2[29];
  v6 = v2[17];
  KeyPath = swift_getKeyPath(&unk_100092AE8);
  v3[15] = v6;
  v8 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v3 + 15, KeyPath, v8);
  result = swift_release(KeyPath, v9);
  v11 = *(_QWORD *)(v6 + 64);
  if (!v11)
    goto LABEL_18;
  if ((unint64_t)v11 >> 62)
  {
    if (v11 >= 0)
      v30 = v11 & 0xFFFFFFFFFFFFFF8;
    else
      v30 = *(_QWORD *)(v6 + 64);
    swift_bridgeObjectRetain(v11);
    result = _CocoaArrayWrapper.endIndex.getter(v30);
    if (result)
      goto LABEL_5;
    goto LABEL_13;
  }
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v11);
  if (!v12)
  {
LABEL_13:
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v11);
LABEL_14:
    v31 = v3[24];
    v32 = v3[21];
    v49 = v3[23];
    v50 = v3[22];
    v33 = v3[19];
    v47 = v3[20];
    v34 = v3[18];
    sub_100021548(0, (unint64_t *)&qword_1000C8820, OS_dispatch_queue_ptr);
    v35 = (void *)static OS_dispatch_queue.main.getter();
    v36 = swift_allocObject(&unk_1000BF050, 24, 7);
    *(_QWORD *)(v36 + 16) = v34;
    v3[7] = v36;
    v22 = v3 + 7;
    v3[6] = sub_10002186C;
    v3[2] = _NSConcreteStackBlock;
    v3[3] = 1107296256;
    v3[4] = sub_1000181D8;
    v3[5] = &unk_1000BF068;
    v37 = _Block_copy(v3 + 2);
    v39 = swift_unknownObjectRetain(v34, v38);
    static DispatchQoS.unspecified.getter(v39);
    v3[14] = _swiftEmptyArrayStorage;
    v40 = sub_100005900(&qword_1000C8828, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v41 = sub_100004EAC(&qword_1000C8830);
    v42 = sub_1000215CC();
    dispatch thunk of SetAlgebra.init<A>(_:)(v3 + 14, v41, v42, v33, v40);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v31, v32, v37);
    _Block_release(v37);

    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v32, v33);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v31, v50);
    goto LABEL_15;
  }
LABEL_5:
  if ((v11 & 0xC000000000000001) != 0)
  {
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v11);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(id *)(v11 + 32);
LABEL_8:
    v14 = v13;
    v15 = v3[28];
    v16 = v3[24];
    v17 = v3[21];
    v46 = v3[23];
    v48 = v3[22];
    v18 = v3[19];
    v45 = v3[20];
    v20 = v3[17];
    v19 = v3[18];
    swift_bridgeObjectRelease(v11);
    sub_100021548(0, (unint64_t *)&qword_1000C8820, OS_dispatch_queue_ptr);
    v44 = (void *)static OS_dispatch_queue.main.getter();
    v21 = (_QWORD *)swift_allocObject(&unk_1000BF0A0, 56, 7);
    v21[2] = v19;
    v21[3] = v15;
    v21[4] = v5;
    v21[5] = v20;
    v21[6] = v14;
    v3[13] = v21;
    v22 = v3 + 13;
    v3[12] = sub_1000218F8;
    v3[8] = _NSConcreteStackBlock;
    v3[9] = 1107296256;
    v3[10] = sub_1000181D8;
    v3[11] = &unk_1000BF0B8;
    v23 = _Block_copy(v3 + 8);
    swift_unknownObjectRetain(v19, v24);
    swift_retain(v20);
    v25 = v14;
    static DispatchQoS.unspecified.getter(v25);
    v3[16] = _swiftEmptyArrayStorage;
    v26 = sub_100005900(&qword_1000C8828, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v27 = sub_100004EAC(&qword_1000C8830);
    v28 = sub_1000215CC();
    dispatch thunk of SetAlgebra.init<A>(_:)(v3 + 16, v27, v28, v18, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v17, v23);
    _Block_release(v23);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v16, v48);
LABEL_15:
    swift_release(*v22, v29);
    v43 = v3[21];
    swift_task_dealloc(v3[24]);
    swift_task_dealloc(v43);
    return ((uint64_t (*)(void))v3[1])();
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1000181D8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2, v4);
}

void sub_100018204(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  swift_getObjectType(a1);
  if ((objc_msgSend(a1, "respondsToSelector:", "endTextPlaceholderAndWillInsertText:") & 1) != 0)
  {
    swift_unknownObjectRetain(a1, v10);
    objc_msgSend(a1, "endTextPlaceholderAndWillInsertText:", String.count.getter(a2, a3) > 0);
    swift_unknownObjectRelease(a1);
  }
  KeyPath = swift_getKeyPath(&unk_100092A70);
  v26 = a4;
  v12 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v26, KeyPath, v12);
  swift_release(KeyPath, v13);
  v14 = *(id *)(a4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration);
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setBaseResponse:", v15);

  sub_100020758(a2, a3, a1, a5, 0, a4);
  sub_10001C680();
  v16 = swift_getKeyPath(&unk_100092A98);
  v26 = a4;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v26, v16, v12);
  swift_release(v16, v17);
  v18 = *(_QWORD *)(a4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries);
  if (v18)
  {
    if ((unint64_t)v18 >> 62)
    {
      if (v18 >= 0)
        v24 = v18 & 0xFFFFFFFFFFFFFF8;
      else
        v24 = *(_QWORD *)(a4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries);
      swift_bridgeObjectRetain(*(_QWORD *)(a4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries));
      v25 = _CocoaArrayWrapper.endIndex.getter(v24);
      swift_bridgeObjectRelease(v18);
      if (v25)
        return;
    }
    else if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return;
    }
    if (qword_1000C73C8 != -1)
      swift_once(&qword_1000C73C8, sub_10000629C);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_1000063D4(v19, (uint64_t)qword_1000D1BE8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Ending questionnaire after longform base reply due to no questions", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    sub_100020B5C();
  }
}

uint64_t sub_1000184A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4[9] = a4;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v4[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[11] = v6;
  v4[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v4[13] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[14] = v8;
  v4[15] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v4[16] = v9;
  v4[17] = static MainActor.shared.getter(v9);
  v10 = (_QWORD *)swift_task_alloc(dword_1000C81E4);
  v4[18] = v10;
  *v10 = v4;
  v10[1] = sub_100018560;
  return sub_100018D30();
}

uint64_t sub_100018560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc(v2);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000185D8, v4, v5);
}

uint64_t sub_1000185D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2[19];
  v4 = v2[15];
  v5 = v2[12];
  v18 = v2[14];
  v19 = v2[13];
  v7 = v2[10];
  v6 = v2[11];
  v8 = v2[9];
  swift_release(v2[17], a2);
  sub_100021548(0, (unint64_t *)&qword_1000C8820, OS_dispatch_queue_ptr);
  v9 = (void *)static OS_dispatch_queue.main.getter();
  v10 = swift_allocObject(&unk_1000BEFB0, 32, 7);
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v10 + 24) = v3;
  v2[6] = sub_1000215AC;
  v2[7] = v10;
  v2[2] = _NSConcreteStackBlock;
  v2[3] = 1107296256;
  v2[4] = sub_1000181D8;
  v2[5] = &unk_1000BEFC8;
  v11 = _Block_copy(v2 + 2);
  v12 = swift_retain(v8);
  static DispatchQoS.unspecified.getter(v12);
  v2[8] = _swiftEmptyArrayStorage;
  v13 = sub_100005900(&qword_1000C8828, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_100004EAC(&qword_1000C8830);
  v15 = sub_1000215CC();
  dispatch thunk of SetAlgebra.init<A>(_:)(v2 + 8, v14, v15, v7, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v4, v5, v11);
  _Block_release(v11);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v4, v19);
  swift_release(v2[7], v16);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return ((uint64_t (*)(void))v2[1])();
}

void sub_100018790(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  _QWORD v22[3];
  BOOL v23;
  uint64_t v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  KeyPath = swift_getKeyPath(&unk_100092A98);
  v26 = a1;
  v27 = a2;
  v5 = a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel___observationRegistrar;
  v28 = a1;
  v6 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  swift_bridgeObjectRetain(a2);
  v24 = v5;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v28, KeyPath, sub_100021618, v25, (char *)&type metadata for () + 8, v6);
  swift_bridgeObjectRelease(a2);
  swift_release(KeyPath, v7);
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v21 = a2;
    else
      v21 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v8 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v9 = swift_getKeyPath(&unk_100092B68);
  __chkstk_darwin(v9);
  v22[2] = a1;
  v23 = v8 > 0;
  v28 = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v28, v9, sub_100021680, v22, (char *)&type metadata for () + 8, v6);
  swift_release(v9, v10);
  if (v8 >= 1)
  {
    sub_10001C680();
    withObservationTracking<A>(_:onChange:)(sub_100021698, a1, sub_1000216A0, a1, (char *)&type metadata for () + 8);
  }
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v11 = a2;
    else
      v11 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v12 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(a2);
    if (v12)
      return;
  }
  else if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  v13 = swift_getKeyPath(&unk_100092A70);
  v28 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, v13, v6);
  swift_release(v13, v14);
  v15 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration), "baseResponse");
  if (v15)
  {

    if (qword_1000C73C8 != -1)
      swift_once(&qword_1000C73C8, sub_10000629C);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_1000063D4(v16, (uint64_t)qword_1000D1BE8);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Ending questionnaire due to no questions", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    sub_100020B5C();
  }
}

void sub_100018A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *Strong;
  void *v13;
  unsigned __int8 v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;

  v1 = v0;
  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_1000063D4(v2, (uint64_t)qword_1000D1BE8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Requested session revert...", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  KeyPath = swift_getKeyPath(&unk_1000929A8);
  v21 = v1;
  v8 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, KeyPath, v8);
  v10 = swift_release(KeyPath, v9);
  v11 = *(void **)(v1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__session);
  if (v11)
  {
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + 16);
    if (Strong)
    {
      v13 = Strong;
      v14 = objc_msgSend(Strong, "respondsToSelector:", "endTextPlaceholderAndWillInsertText:");
      v15 = v11;
      if ((v14 & 1) != 0)
        objc_msgSend(v13, "endTextPlaceholderAndWillInsertText:", 0);
      objc_msgSend(v13, "writingToolsSession:didReceiveAction:", v15, 3);
      swift_unknownObjectRelease(v13);
    }
    else
    {
      v18 = v11;
      v15 = Logger.logObject.getter(v18);
      v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v19, "Unexpected nil delegate when reverting", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

    }
  }
  else
  {
    v15 = Logger.logObject.getter(v10);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unexpected nil session when reverting", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
  }

}

uint64_t sub_100018D30()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v3;
  v1[5] = v4;
  return swift_task_switch(sub_100018D9C, v3, v4);
}

uint64_t sub_100018D9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000063D4(v1, (uint64_t)qword_1000D1BE8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Requested questionnaire generation...", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_1000C81EC);
  *(_QWORD *)(v0 + 48) = v6;
  *v6 = v0;
  v6[1] = sub_100018E98;
  return sub_100018F24();
}

uint64_t sub_100018E98(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_100018EF0, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_100018EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 24), a2);
  return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 56));
}

uint64_t sub_100018F24()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[21] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[22] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[23] = v3;
  v1[24] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TextCompositionClient.TCDocumentType(0);
  v1[25] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[26] = v5;
  v1[27] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v1[28] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v1[29] = v7;
  v1[30] = v8;
  return swift_task_switch(sub_100018FE0, v7, v8);
}

void *sub_100018FE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *result;
  unsigned int v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;

  v1 = v0[21];
  KeyPath = swift_getKeyPath(&unk_100092A70);
  v0[14] = v1;
  v0[31] = OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel___observationRegistrar;
  v3 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  v0[32] = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 14, KeyPath, v3);
  swift_release(KeyPath, v4);
  v5 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration), "entryPoint");
  if (v5)
  {
    v6 = v5;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

  }
  else
  {
    v33 = 0;
    v8 = 0xE000000000000000;
  }
  v34 = v8;
  v0[33] = v8;
  v10 = v0[26];
  v9 = v0[27];
  v11 = v0[25];
  v12 = v0[21];
  v13 = swift_getKeyPath(&unk_100092A48);
  v0[12] = v12;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 12, v13, v3);
  swift_release(v13, v14);
  v15 = OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__analyticsInstance;
  v0[34] = OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__analyticsInstance;
  v16 = *(_QWORD *)(v12 + v15);
  v17 = (void *)IASignalSmartRepliesQuestionnaireRequested;
  swift_retain(v16);
  sub_1000528DC(v17);
  swift_release(v16, v18);
  v0[35] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TextCompositionClient(0)), "init");
  v19 = swift_getKeyPath(&unk_100092B10);
  v0[13] = v12;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 13, v19, v3);
  swift_release(v19, v20);
  v21 = *(void **)(v12 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__inputContextHistory);
  v0[36] = v21;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v9, enum case for TextCompositionClient.TCDocumentType.mail(_:), v11);
  v22 = sub_100004EAC((uint64_t *)&unk_1000C7BD0);
  inited = swift_initStackObject(v22, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_100092910;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(TCTextCompositionAssistantOptionKeyAppProcessIdentifier);
  *(_QWORD *)(inited + 40) = v24;
  v25 = swift_getKeyPath(&unk_100092A20);
  v0[15] = v12;
  v26 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  v27 = v21;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 15, v25, v26);
  swift_release(v25, v28);
  result = *(void **)(v12 + 24);
  if (result)
  {
    v30 = objc_msgSend(result, "pid");
    *(_QWORD *)(inited + 72) = &type metadata for Int32;
    *(_DWORD *)(inited + 48) = v30;
    v31 = sub_1000620F0(inited);
    v0[37] = v31;
    v35 = (char *)&async function pointer to dispatch thunk of TextCompositionClient.requestUserQuestionnaire(with:documentType:replyType:options:)
        + async function pointer to dispatch thunk of TextCompositionClient.requestUserQuestionnaire(with:documentType:replyType:options:);
    v32 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of TextCompositionClient.requestUserQuestionnaire(with:documentType:replyType:options:)
                                     + 1));
    v0[38] = v32;
    *v32 = v0;
    v32[1] = sub_1000192F8;
    return (void *)((uint64_t (*)(id, _QWORD, uint64_t, unint64_t, unint64_t))v35)(v27, v0[27], v33, v34, v31);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000192F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 304);
  v4[39] = a1;
  v4[40] = a2;
  v4[41] = v2;
  swift_task_dealloc(v5);
  v7 = (void *)v4[36];
  v6 = v4[37];
  v8 = (void *)v4[35];
  v9 = v4[33];
  (*(void (**)(_QWORD, _QWORD))(v4[26] + 8))(v4[27], v4[25]);
  swift_bridgeObjectRelease(v9);

  swift_bridgeObjectRelease(v6);
  if (v2)
    v10 = sub_1000198F0;
  else
    v10 = sub_1000193A8;
  return swift_task_switch(v10, v4[29], v4[30]);
}

void sub_1000193A8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  _BOOL4 v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  swift_release(v2[28], a2);
  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v3 = (void *)v2[39];
  v5 = v2[23];
  v4 = v2[24];
  v6 = v2[22];
  v7 = sub_1000063D4(v6, (uint64_t)qword_1000D1BE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  v8 = Logger.logObject.getter(v3);
  LOBYTE(v9) = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, (os_log_type_t)v9);
  v11 = (void *)v2[39];
  v55 = v2;
  if (!v10)
  {

    v8 = v2[39];
    v56 = (char *)v8;
    goto LABEL_9;
  }
  v12 = swift_slowAlloc(12, -1);
  *(_DWORD *)v12 = 134217984;
  v13 = objc_msgSend(v11, "entries");
  if (v13)
  {
    v14 = v13;
    v15 = v2 + 20;
    v16 = sub_100021548(0, &qword_1000C87E8, TCSmartReplyUserQuestionnaireEntry_ptr);
    v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v16);

    v18 = (void *)v2[39];
    if ((unint64_t)v17 >> 62)
      goto LABEL_26;
    v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {

      v2 = v55;
      v20 = (void *)v55[39];
      swift_bridgeObjectRelease(v17);
      v55[20] = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v15, v55 + 21, v12 + 4, v12 + 12);

      _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v9, "Received %ld questions", (uint8_t *)v12, 0xCu);
      swift_slowDealloc(v12, -1, -1);
      v56 = (char *)v55[39];
LABEL_9:
      v21 = v2 + 18;
      v15 = (void *)v2[40];
      v58 = v2[34];
      v22 = v2[32];
      v9 = v2[23];
      v23 = v2[24];
      v18 = (void *)v55[22];
      v24 = v55[21];

      v2 = v55;
      (*(void (**)(uint64_t, void *))(v9 + 8))(v23, v18);
      KeyPath = swift_getKeyPath(&unk_100092A48);
      v55[18] = v24;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v21, KeyPath, v22);
      swift_release(KeyPath, v26);
      v27 = *(_QWORD *)(v24 + v58);
      swift_retain(v27);
      sub_1000549A0(v15, v56);
      swift_release(v27, v28);
      swift_bridgeObjectRelease(v15);
      v29 = objc_msgSend(v56, "entries");
      if (!v29)
        break;
      v30 = v29;
      v31 = sub_100021548(0, &qword_1000C87E8, TCSmartReplyUserQuestionnaireEntry_ptr);
      v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);

      if ((unint64_t)v17 >> 62)
      {
        if (v17 < 0)
          v51 = v17;
        else
          v51 = v17 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v17);
        v12 = _CocoaArrayWrapper.endIndex.getter(v51);
        swift_bridgeObjectRelease(v17);
        if (!v12)
        {
LABEL_23:
          v52 = (void *)v55[39];
          swift_bridgeObjectRelease(v17);

          v50 = _swiftEmptyArrayStorage;
LABEL_24:
          v53 = v2[24];
          swift_task_dealloc(v2[27]);
          swift_task_dealloc(v53);
          ((void (*)(_QWORD *))v2[1])(v50);
          return;
        }
      }
      else
      {
        v12 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v12)
          goto LABEL_23;
      }
      v60 = _swiftEmptyArrayStorage;
      v8 = &v60;
      specialized ContiguousArray.reserveCapacity(_:)(v12);
      if ((v12 & 0x8000000000000000) == 0)
      {
        v32 = 0;
        v33 = v55 + 19;
        v57 = v17 & 0xC000000000000001;
        v59 = v17;
        v34 = v12;
        do
        {
          if (v57)
            v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v17);
          else
            v35 = *(id *)(v17 + 8 * v32 + 32);
          v36 = v35;
          ++v32;
          v37 = type metadata accessor for QuestionnaireEntry(0);
          v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
          v39 = UUID.init()();
          v40 = (_QWORD *)(v38 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer);
          *v40 = 0;
          v40[1] = 0;
          *(_QWORD *)(v38 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_maxStringLength) = 10;
          ObservationRegistrar.init()(v39);
          *(_QWORD *)(v38 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_entry) = v36;
          v41 = swift_getKeyPath(&unk_100092B38);
          v42 = (_QWORD *)swift_task_alloc(48);
          v42[3] = 0;
          v42[4] = 0;
          v42[2] = v38;
          *v33 = v38;
          v43 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
          v44 = v36;
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v33, v41, sub_1000213F8, v42, (char *)&type metadata for () + 8, v43);

          swift_release(v41, v45);
          v46 = swift_task_dealloc(v42);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v46);
          v47 = v60[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v47);
          v48 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v38);
          specialized ContiguousArray._endMutation()(v48);
          v17 = v59;
        }
        while (v34 != v32);
        v2 = v55;
        v49 = (void *)v55[39];
        v50 = v60;
        swift_bridgeObjectRelease(v59);

        goto LABEL_24;
      }
      __break(1u);
LABEL_26:
      if (v17 < 0)
        v54 = v17;
      else
        v54 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v17);
      v19 = _CocoaArrayWrapper.endIndex.getter(v54);
      swift_bridgeObjectRelease(v17);
    }
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1000198F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_QWORD *)(v2 + 328);
  swift_release(*(_QWORD *)(v2 + 224), a2);
  swift_errorRetain(v3);
  sub_10000C1D4(v3);
  swift_errorRelease(v3);
  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v4 = *(_QWORD *)(v2 + 328);
  sub_1000063D4(*(_QWORD *)(v2 + 176), (uint64_t)qword_1000D1BE8);
  swift_errorRetain(v4);
  v5 = swift_errorRetain(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v2 + 328);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    swift_errorRetain(v9);
    v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v2 + 136) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 136, v2 + 144, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error generating questionnaire: %@", v10, 0xCu);
    v13 = sub_100004EAC(&qword_1000C87C8);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v2 + 328));
    swift_errorRelease(v9);
  }
  v14 = *(_QWORD *)(v2 + 328);
  v15 = *(_QWORD *)(v2 + 272);
  v16 = *(_QWORD *)(v2 + 256);
  v17 = *(_QWORD *)(v2 + 168);

  KeyPath = swift_getKeyPath(&unk_100092A48);
  *(_QWORD *)(v2 + 128) = v17;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 128, KeyPath, v16);
  swift_release(KeyPath, v19);
  v20 = *(_QWORD *)(v17 + v15);
  v21 = (void *)IASignalSmartRepliesQuestionnaireNotShown;
  swift_retain(v20);
  v22 = sub_1000620F0((uint64_t)_swiftEmptyArrayStorage);
  sub_100053248(v21, v22, 0, 0xE000000000000000);
  swift_errorRelease(v14);
  swift_release(v20, v23);
  swift_bridgeObjectRelease(v22);
  v24 = *(_QWORD *)(v2 + 192);
  swift_task_dealloc(*(_QWORD *)(v2 + 216));
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(_QWORD *))(v2 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_100019B7C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[31] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[32] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[33] = v3;
  v1[34] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TextCompositionClient.TCDocumentType(0);
  v1[35] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[36] = v5;
  v1[37] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v1[38] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v1[39] = v7;
  v1[40] = v8;
  return swift_task_switch(sub_100019C38, v7, v8);
}

void *sub_100019C38()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  void *result;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 248) + 16);
  swift_unknownObjectRelease(Strong);
  if (Strong)
  {
    v3 = *(_QWORD *)(v0 + 248);
    KeyPath = swift_getKeyPath(&unk_100092A70);
    v5 = OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel___observationRegistrar;
    *(_QWORD *)(v0 + 224) = v3;
    *(_QWORD *)(v0 + 328) = v5;
    v6 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
    *(_QWORD *)(v0 + 336) = v6;
    v55 = v6;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 224, KeyPath, v6);
    swift_release(KeyPath, v7);
    v8 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration), "entryPoint");
    if (v8)
    {
      v9 = v8;
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;

    }
    else
    {
      v57 = 0;
      v11 = 0xE000000000000000;
    }
    v18 = v0 + 16;
    v19 = (_QWORD *)(v0 + 200);
    *(_QWORD *)(v0 + 344) = v11;
    if (qword_1000C73C8 != -1)
      swift_once(&qword_1000C73C8, sub_10000629C);
    *(_QWORD *)(v0 + 352) = sub_1000063D4(*(_QWORD *)(v0 + 256), (uint64_t)qword_1000D1BE8);
    v20 = swift_bridgeObjectRetain_n(v11, 2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v58 = v11;
    if (os_log_type_enabled(v21, v22))
    {
      v54 = (uint64_t *)(v0 + 240);
      v23 = 0xEC000000676E6972;
      v24 = 0x74535F7974706D45;
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v59 = v26;
      *(_DWORD *)v25 = 136380675;
      if (v57 || v58 != 0xE000000000000000)
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, 0, 0xE000000000000000, 0) & 1) == 0)
        {
          *(_QWORD *)(v0 + 120) = v57;
          *(_QWORD *)(v0 + 128) = v58;
          v27 = sub_100015204();
          *(_QWORD *)(v0 + 232) = StringProtocol.hash.getter(&type metadata for String, v27);
          v24 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          v23 = v28;
        }
        v19 = (_QWORD *)(v0 + 200);
      }
      *v54 = sub_10006DCA8(v24, v23, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v54, v0 + 248, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease_n(v58, 2);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Requested long form base generation for entry point hash: %{private}s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      v18 = v0 + 16;
    }
    else
    {

      swift_bridgeObjectRelease_n(v11, 2);
    }
    v29 = *(_QWORD *)(v0 + 248);
    v30 = sub_100004EAC((uint64_t *)&unk_1000C7BD0);
    inited = swift_initStackObject(v30, v18);
    *(_OWORD *)(inited + 16) = xmmword_100092910;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(TCTextCompositionAssistantOptionKeyProcessIdentifier);
    *(_QWORD *)(inited + 40) = v32;
    v33 = swift_getKeyPath(&unk_100092A20);
    *v19 = v29;
    v34 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v19, v33, v34);
    swift_release(v33, v35);
    result = *(void **)(v29 + 24);
    if (result)
    {
      v37 = *(_QWORD *)(v0 + 288);
      v36 = *(_QWORD *)(v0 + 296);
      v38 = *(_QWORD *)(v0 + 280);
      v39 = *(_QWORD *)(v0 + 248);
      v40 = objc_msgSend(result, "pid");
      *(_QWORD *)(inited + 72) = &type metadata for Int32;
      *(_DWORD *)(inited + 48) = v40;
      v41 = sub_1000620F0(inited);
      *(_QWORD *)(v0 + 360) = v41;
      v42 = swift_getKeyPath(&unk_100092A48);
      *(_QWORD *)(v0 + 176) = v39;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 176, v42, v55);
      swift_release(v42, v43);
      v44 = OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__analyticsInstance;
      *(_QWORD *)(v0 + 368) = OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__analyticsInstance;
      v45 = *(_QWORD *)(v39 + v44);
      v46 = (void *)IASignalSmartRepliesInitialResponseRequested;
      swift_retain(v45);
      sub_1000528DC(v46);
      swift_release(v45, v47);
      *(_QWORD *)(v0 + 376) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TextCompositionClient(0)), "init");
      v48 = swift_getKeyPath(&unk_100092B10);
      *(_QWORD *)(v0 + 152) = v39;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 152, v48, v55);
      swift_release(v48, v49);
      v50 = *(void **)(v39 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__inputContextHistory);
      *(_QWORD *)(v0 + 384) = v50;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104))(v36, enum case for TextCompositionClient.TCDocumentType.mail(_:), v38);
      v51 = *((unsigned int *)&async function pointer to dispatch thunk of TextCompositionClient.requestLongFormSmartReplies(with:documentType:replyType:options:)
            + 1);
      v56 = (char *)&async function pointer to dispatch thunk of TextCompositionClient.requestLongFormSmartReplies(with:documentType:replyType:options:)
          + async function pointer to dispatch thunk of TextCompositionClient.requestLongFormSmartReplies(with:documentType:replyType:options:);
      v52 = v50;
      v53 = (_QWORD *)swift_task_alloc(v51);
      *(_QWORD *)(v0 + 392) = v53;
      *v53 = v0;
      v53[1] = sub_10001A25C;
      return (void *)((uint64_t (*)(id, _QWORD, uint64_t, unint64_t, unint64_t))v56)(v52, *(_QWORD *)(v0 + 296), v57, v58, v41);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 304), v2);
    if (qword_1000C73C8 != -1)
      swift_once(&qword_1000C73C8, sub_10000629C);
    v12 = sub_1000063D4(*(_QWORD *)(v0 + 256), (uint64_t)qword_1000D1BE8);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unexpected nil writingToolsDelegate for long form base generation with entries", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    v16 = *(_QWORD *)(v0 + 272);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v16);
    return (void *)(*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
  }
  return result;
}

uint64_t sub_10001A25C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v4 = *(_QWORD **)v3;
  v6 = *(void **)(*(_QWORD *)v3 + 384);
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 392);
  v7 = *(void **)(*(_QWORD *)v3 + 376);
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 360);
  v9 = *(_QWORD *)(*(_QWORD *)v3 + 344);
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 288);
  v10 = *(_QWORD *)(*(_QWORD *)v3 + 296);
  v12 = *(_QWORD *)(*(_QWORD *)v3 + 280);
  v4[50] = a1;
  v4[51] = a2;
  v4[52] = v2;
  swift_task_dealloc(v5);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  swift_bridgeObjectRelease(v9);

  swift_bridgeObjectRelease(v8);
  if (v2)
    v13 = sub_10001A648;
  else
    v13 = sub_10001A324;
  return swift_task_switch(v13, v4[39], v4[40]);
}

id sub_10001A324(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id result;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(void **)(v2 + 400);
  swift_release(*(_QWORD *)(v2 + 304), a2);
  result = objc_msgSend(v3, "responseTexts");
  if (result)
  {
    v5 = result;
    v6 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(result, &type metadata for String);

    if (v6[2])
    {
      v7 = v6[4];
      v8 = v6[5];
      swift_bridgeObjectRetain_n(v8, 2);
      v9 = swift_bridgeObjectRelease(v6);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v12 = 134283521;
        *(_QWORD *)(v2 + 136) = v7;
        *(_QWORD *)(v2 + 144) = v8;
        v13 = sub_100015204();
        *(_QWORD *)(v2 + 208) = StringProtocol.hash.getter(&type metadata for String, v13);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 208, v2 + 216, v12 + 4, v12 + 12);
        swift_bridgeObjectRelease(v8);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Long form base generation with hashed response: %{private}ld", v12, 0xCu);
        swift_slowDealloc(v12, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease(v8);
      }

      v19 = *(void **)(v2 + 400);
      v18 = *(_QWORD *)(v2 + 408);
      v27 = *(_QWORD *)(v2 + 368);
      v28 = *(_QWORD *)(v2 + 336);
      v29 = *(_QWORD *)(v2 + 248);
      KeyPath = swift_getKeyPath(&unk_100092A48);
      *(_QWORD *)(v2 + 192) = v29;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 192, KeyPath, v28);
      swift_release(KeyPath, v31);
      v25 = *(_QWORD *)(v29 + v27);
      v32 = (void *)IASignalSmartRepliesInitialResponseCompleted;
      swift_bridgeObjectRetain(v8);
      swift_retain(v25);
      sub_1000528F0(v32, v18, v7, v8);
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      v14 = swift_bridgeObjectRelease(v6);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unexpected nil response for long form base generation", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
      }
      v19 = *(void **)(v2 + 400);
      v18 = *(_QWORD *)(v2 + 408);
      v20 = *(_QWORD *)(v2 + 368);
      v21 = *(_QWORD *)(v2 + 336);
      v22 = *(_QWORD *)(v2 + 248);

      v23 = swift_getKeyPath(&unk_100092A48);
      *(_QWORD *)(v2 + 216) = v22;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 216, v23, v21);
      swift_release(v23, v24);
      v25 = *(_QWORD *)(v22 + v20);
      v26 = (void *)IASignalSmartRepliesInitialResponseFailed;
      swift_retain(v25);
      sub_100053248(v26, v18, 0, 0xE000000000000000);
      v7 = 0;
      v8 = 0;
    }

    swift_bridgeObjectRelease(v18);
    swift_release(v25, v33);
    v34 = *(_QWORD *)(v2 + 272);
    swift_task_dealloc(*(_QWORD *)(v2 + 296));
    swift_task_dealloc(v34);
    return (id)(*(uint64_t (**)(uint64_t, unint64_t))(v2 + 8))(v7, v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001A648(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(_QWORD *)(v2 + 416);
  swift_release(*(_QWORD *)(v2 + 304), a2);
  swift_errorRetain(v3);
  sub_10000C1D4(v3);
  v4 = swift_errorRelease(v3);
  Logger.init()(v4);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v2 + 416);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    swift_errorRetain(v8);
    v11 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v2 + 184) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 184, v2 + 192, v9 + 4, v9 + 12);
    *v10 = v11;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error occurred in long form reply base generation: %@", v9, 0xCu);
    v12 = sub_100004EAC(&qword_1000C87C8);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    v13 = *(_QWORD *)(v2 + 416);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }
  v14 = *(_QWORD *)(v2 + 416);
  v15 = *(_QWORD *)(v2 + 368);
  v16 = *(_QWORD *)(v2 + 336);
  v17 = *(_QWORD *)(v2 + 264);
  v18 = *(_QWORD *)(v2 + 272);
  v19 = *(_QWORD *)(v2 + 248);
  v20 = *(_QWORD *)(v2 + 256);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v20);
  KeyPath = swift_getKeyPath(&unk_100092A48);
  *(_QWORD *)(v2 + 160) = v19;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 160, KeyPath, v16);
  swift_release(KeyPath, v22);
  v23 = *(_QWORD *)(v19 + v15);
  v24 = (void *)IASignalSmartRepliesInitialResponseFailed;
  swift_retain(v23);
  v25 = sub_1000620F0((uint64_t)_swiftEmptyArrayStorage);
  swift_getErrorValue(v14, v2 + 168, v2 + 96);
  v26 = Error.localizedDescription.getter(*(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112));
  v28 = v27;
  sub_100053248(v24, v25, v26, v27);
  swift_release(v23, v29);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v28);
  swift_errorRelease(v14);
  v30 = *(_QWORD *)(v2 + 272);
  swift_task_dealloc(*(_QWORD *)(v2 + 296));
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 8))(0, 0);
}

uint64_t sub_10001A8E8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1[51] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[52] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[53] = v3;
  v1[54] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TextCompositionClient.TCDocumentType(0);
  v1[55] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[56] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[57] = swift_task_alloc(v6);
  v1[58] = swift_task_alloc(v6);
  v7 = type metadata accessor for MainActor(0);
  v1[59] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v1[60] = v8;
  v1[61] = v9;
  return swift_task_switch(sub_10001A9B4, v8, v9);
}

void *sub_10001A9B4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t inited;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  id v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  id v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  os_log_type_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  char *v124;
  char *v125;

  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v1 = sub_1000063D4(*(_QWORD *)(v0 + 416), (uint64_t)qword_1000D1BE8);
  *(_QWORD *)(v0 + 496) = v1;
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Requested generation of long form reply with entries", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 408);

  Strong = swift_unknownObjectWeakLoadStrong(v5 + 16);
  *(_QWORD *)(v0 + 504) = Strong;
  if (!Strong)
  {
    v35 = swift_release(*(_QWORD *)(v0 + 472), v7);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unexpected nil writingToolsDelegate for long form generation with entries", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }
LABEL_35:

    goto LABEL_36;
  }
  v8 = Strong;
  v9 = *(_QWORD *)(v0 + 408);
  KeyPath = swift_getKeyPath(&unk_100092AE8);
  *(_QWORD *)(v0 + 296) = v9;
  v11 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 296, KeyPath, v11);
  result = (void *)swift_release(KeyPath, v12);
  v14 = *(_QWORD *)(v9 + 64);
  if (!v14)
    goto LABEL_40;
  if (!((unint64_t)v14 >> 62))
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = (void *)swift_bridgeObjectRetain(v14);
    if (v15)
      goto LABEL_9;
    goto LABEL_33;
  }
  if (v14 >= 0)
    v110 = v14 & 0xFFFFFFFFFFFFFF8;
  else
    v110 = *(_QWORD *)(v9 + 64);
  swift_bridgeObjectRetain(v14);
  result = (void *)_CocoaArrayWrapper.endIndex.getter(v110);
  if (!result)
  {
LABEL_33:
    swift_release(*(_QWORD *)(v0 + 472), v16);
    v111 = swift_bridgeObjectRelease(v14);
    v36 = Logger.logObject.getter(v111);
    v112 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v112))
    {

      swift_unknownObjectRelease(v8);
      goto LABEL_36;
    }
    v113 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v113 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v112, "Unexpected missing context for long form generation with entries", v113, 2u);
    swift_slowDealloc(v113, -1, -1);
    swift_unknownObjectRelease(v8);
    goto LABEL_35;
  }
LABEL_9:
  v122 = (uint64_t *)(v0 + 408);
  v123 = v11;
  if ((v14 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      v17 = *(id *)(v14 + 32);
      goto LABEL_12;
    }
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v14);
LABEL_12:
  v18 = v17;
  *(_QWORD *)(v0 + 512) = v17;
  v19 = *(_QWORD *)(v0 + 408);
  swift_bridgeObjectRelease(v14);
  v20 = swift_getKeyPath(&unk_100092A98);
  *(_QWORD *)(v0 + 520) = OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel___observationRegistrar;
  *(_QWORD *)(v0 + 392) = v19;
  v21 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  *(_QWORD *)(v0 + 528) = v21;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 392, v20, v21);
  swift_release(v20, v22);
  v23 = *(_QWORD *)(v19 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries);
  if (!v23)
  {
    v39 = *(_QWORD *)(v0 + 472);
    swift_unknownObjectRelease(v8);

    swift_release(v39, v40);
LABEL_36:
    v114 = *(_QWORD *)(v0 + 456);
    v115 = *(_QWORD *)(v0 + 432);
    swift_task_dealloc(*(_QWORD *)(v0 + 464));
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    return (void *)(*(uint64_t (**)(void))(v0 + 8))();
  }
  v24 = *(_QWORD *)(v0 + 408);
  v25 = swift_bridgeObjectRetain(v23);
  sub_10002109C(v25);
  v27 = v26;
  *(_QWORD *)(v0 + 536) = v26;
  v28 = swift_getKeyPath(&unk_100092A70);
  *(_QWORD *)(v0 + 368) = v24;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 368, v28, v21);
  swift_release(v28, v29);
  v30 = OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration;
  v31 = objc_msgSend(*(id *)(v24 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration), "entryPoint");
  v117 = v27;
  v119 = v30;
  if (v31)
  {
    v32 = v31;
    v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v34 = v33;

  }
  else
  {
    v116 = 0;
    v34 = 0xE000000000000000;
  }
  v118 = v34;
  *(_QWORD *)(v0 + 544) = v34;
  v41 = *(_QWORD *)(v0 + 408);
  v42 = swift_getKeyPath(&unk_100092980);
  v43 = swift_task_alloc(32);
  *(_QWORD *)(v43 + 16) = v41;
  *(_BYTE *)(v43 + 24) = 1;
  *(_QWORD *)(v0 + 344) = v41;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 344, v42, sub_1000219DC, v43, (char *)&type metadata for () + 8, v21);
  swift_release(v42, v44);
  swift_task_dealloc(v43);
  v45 = swift_getKeyPath(&unk_100092A48);
  *(_QWORD *)(v0 + 248) = v41;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 248, v45, v21);
  swift_release(v45, v46);
  v47 = OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__analyticsInstance;
  *(_QWORD *)(v0 + 552) = OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__analyticsInstance;
  v48 = *(_QWORD *)(v41 + v47);
  swift_retain(v48);
  sub_1000538A8(v23);
  swift_release(v48, v49);
  swift_bridgeObjectRelease(v23);
  v50 = swift_getKeyPath(&unk_100092A48);
  *(_QWORD *)(v0 + 232) = v41;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 232, v50, v21);
  swift_release(v50, v51);
  v52 = *(_QWORD *)(v41 + v47);
  v53 = (void *)IASignalSmartRepliesRewriteRequested;
  swift_retain(v52);
  sub_1000528DC(v53);
  swift_release(v52, v54);
  sub_10001C680();
  v55 = swift_getKeyPath(&unk_100092A70);
  *(_QWORD *)(v0 + 240) = v41;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 240, v55, v21);
  swift_release(v55, v56);
  v57 = objc_msgSend(*(id *)(v24 + v119), "baseResponse");
  if (!v57)
  {
    v70 = swift_bridgeObjectRelease(v118);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Requested generation without base response", v73, 2u);
      swift_slowDealloc(v73, -1, -1);
    }
    v74 = *v122;

    v75 = sub_100004EAC((uint64_t *)&unk_1000C7BD0);
    inited = swift_initStackObject(v75, v0 + 96);
    *(_OWORD *)(inited + 16) = xmmword_100092910;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(TCTextCompositionAssistantOptionKeyProcessIdentifier);
    *(_QWORD *)(inited + 40) = v77;
    v78 = swift_getKeyPath(&unk_100092A20);
    *(_QWORD *)(v0 + 256) = v74;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 256, v78, v123);
    swift_release(v78, v79);
    result = *(void **)(v74 + 24);
    if (result)
    {
      v81 = *(_QWORD *)(v0 + 448);
      v80 = *(_QWORD *)(v0 + 456);
      v82 = *(_QWORD *)(v0 + 440);
      v83 = *(_QWORD *)(v0 + 408);
      v84 = objc_msgSend(result, "pid");
      *(_QWORD *)(inited + 72) = &type metadata for Int32;
      *(_DWORD *)(inited + 48) = v84;
      v85 = sub_1000620F0(inited);
      *(_QWORD *)(v0 + 624) = v85;
      *(_QWORD *)(v0 + 632) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TextCompositionClient(0)), "init");
      v86 = swift_getKeyPath(&unk_100092B10);
      *(_QWORD *)(v0 + 264) = v83;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 264, v86, v21);
      swift_release(v86, v87);
      v88 = *(void **)(v83 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__inputContextHistory);
      *(_QWORD *)(v0 + 640) = v88;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v81 + 104))(v80, enum case for TextCompositionClient.TCDocumentType.mail(_:), v82);
      v89 = *((unsigned int *)&async function pointer to dispatch thunk of TextCompositionClient.requestLongFormSmartReplies(with:documentType:replyType:userFilledQuestionnaire:options:)
            + 1);
      v124 = (char *)&async function pointer to dispatch thunk of TextCompositionClient.requestLongFormSmartReplies(with:documentType:replyType:userFilledQuestionnaire:options:)
           + async function pointer to dispatch thunk of TextCompositionClient.requestLongFormSmartReplies(with:documentType:replyType:userFilledQuestionnaire:options:);
      v90 = v88;
      v91 = (_QWORD *)swift_task_alloc(v89);
      *(_QWORD *)(v0 + 648) = v91;
      *v91 = v0;
      v91[1] = sub_10001BA5C;
      return (void *)((uint64_t (*)(id, _QWORD, _QWORD, unint64_t, uint64_t, unint64_t))v124)(v90, *(_QWORD *)(v0 + 456), 0, 0xE000000000000000, v117, v85);
    }
    goto LABEL_42;
  }
  v58 = v57;
  v59 = v0 + 16;
  v60 = (_QWORD *)(v0 + 376);
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
  v63 = v62;

  *(_QWORD *)(v0 + 560) = v63;
  v64 = swift_bridgeObjectRetain(v63);
  v65 = Logger.logObject.getter(v64);
  v66 = static os_log_type_t.default.getter();
  v120 = v63;
  v121 = v61;
  if (os_log_type_enabled(v65, v66))
  {
    v67 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v67 = 134283521;
    *(_QWORD *)(v0 + 200) = v61;
    *(_QWORD *)(v0 + 208) = v63;
    v68 = sub_100015204();
    *(_QWORD *)(v0 + 400) = StringProtocol.hash.getter(&type metadata for String, v68);
    v69 = (uint64_t *)(v0 + 408);
    v59 = v0 + 16;
    v60 = (_QWORD *)(v0 + 376);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v122, v67 + 4, v67 + 12);
    swift_bridgeObjectRelease(v63);
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "Requested generation with hashed base response: %{private}ld", v67, 0xCu);
    swift_slowDealloc(v67, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v63);
    v69 = (uint64_t *)(v0 + 408);
  }

  v92 = *v69;
  v93 = sub_100004EAC((uint64_t *)&unk_1000C7BD0);
  v94 = swift_initStackObject(v93, v59);
  *(_OWORD *)(v94 + 16) = xmmword_100092910;
  *(_QWORD *)(v94 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(TCTextCompositionAssistantOptionKeyProcessIdentifier);
  *(_QWORD *)(v94 + 40) = v95;
  v96 = swift_getKeyPath(&unk_100092A20);
  *v60 = v92;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v60, v96, v123);
  swift_release(v96, v97);
  result = *(void **)(v92 + 24);
  if (result)
  {
    v98 = *(_QWORD *)(v0 + 464);
    v100 = *(_QWORD *)(v0 + 440);
    v99 = *(_QWORD *)(v0 + 448);
    v101 = *(_QWORD *)(v0 + 408);
    v102 = objc_msgSend(result, "pid");
    *(_QWORD *)(v94 + 72) = &type metadata for Int32;
    *(_DWORD *)(v94 + 48) = v102;
    v103 = sub_1000620F0(v94);
    *(_QWORD *)(v0 + 568) = v103;
    *(_QWORD *)(v0 + 576) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TextCompositionClient(0)), "init");
    v104 = swift_getKeyPath(&unk_100092B10);
    *(_QWORD *)(v0 + 384) = v101;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 384, v104, v21);
    swift_release(v104, v105);
    v106 = *(void **)(v101 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__inputContextHistory);
    *(_QWORD *)(v0 + 584) = v106;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v99 + 104))(v98, enum case for TextCompositionClient.TCDocumentType.mail(_:), v100);
    v107 = *((unsigned int *)&async function pointer to dispatch thunk of TextCompositionClient.requestLongFormSmartReplies(with:documentType:replyType:baseResponse:userFilledQuestionnaire:options:)
           + 1);
    v125 = (char *)&async function pointer to dispatch thunk of TextCompositionClient.requestLongFormSmartReplies(with:documentType:replyType:baseResponse:userFilledQuestionnaire:options:)
         + async function pointer to dispatch thunk of TextCompositionClient.requestLongFormSmartReplies(with:documentType:replyType:baseResponse:userFilledQuestionnaire:options:);
    v108 = v106;
    v109 = (_QWORD *)swift_task_alloc(v107);
    *(_QWORD *)(v0 + 592) = v109;
    *v109 = v0;
    v109[1] = sub_10001B4A0;
    return (void *)((uint64_t (*)(id, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t))v125)(v108, *(_QWORD *)(v0 + 464), v116, v118, v121, v120, v117, v103);
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_10001B4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 592);
  v4[75] = a1;
  v4[76] = a2;
  v4[77] = v2;
  swift_task_dealloc(v5);
  v6 = (void *)v4[73];
  v7 = (void *)v4[72];
  v8 = v4[71];
  v9 = v4[70];
  v10 = v4[68];
  (*(void (**)(_QWORD, _QWORD))(v4[56] + 8))(v4[58], v4[55]);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);

  swift_bridgeObjectRelease(v8);
  if (v2)
    v11 = sub_10001BFF8;
  else
    v11 = sub_10001B56C;
  return swift_task_switch(v11, v4[60], v4[61]);
}

id sub_10001B56C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id result;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v3 = *(void **)(v2 + 600);
  swift_release(*(_QWORD *)(v2 + 472), a2);
  result = objc_msgSend(v3, "responseTexts");
  if (result)
  {
    v5 = result;
    v6 = v2 + 328;
    v7 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(result, &type metadata for String);

    v8 = *(void **)(v2 + 600);
    if (v7[2])
    {
      v53 = *(_QWORD *)(v2 + 608);
      v10 = v7[4];
      v9 = v7[5];
      swift_bridgeObjectRetain_n(v9, 2);
      swift_bridgeObjectRelease(v7);

      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v14 = 134283521;
        *(_QWORD *)(v2 + 216) = v10;
        *(_QWORD *)(v2 + 224) = v9;
        v15 = sub_100015204();
        *(_QWORD *)(v2 + 352) = StringProtocol.hash.getter(&type metadata for String, v15);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 352, v2 + 360, v14 + 4, v14 + 12);
        swift_bridgeObjectRelease(v9);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Long form generation with entries hashed response: %{private}ld", v14, 0xCu);
        swift_slowDealloc(v14, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease(v9);
      }

      v28 = *(_QWORD *)(v2 + 552);
      v29 = *(_QWORD *)(v2 + 528);
      v31 = *(void **)(v2 + 504);
      v30 = *(void **)(v2 + 512);
      v32 = *(_QWORD *)(v2 + 408);
      swift_getObjectType(v31);
      swift_unknownObjectRetain(v31, v33);
      sub_100020758(v10, v9, v31, v30, 0, v32);
      swift_unknownObjectRelease(v31);
      KeyPath = swift_getKeyPath(&unk_100092A48);
      *(_QWORD *)(v2 + 312) = v32;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 312, KeyPath, v29);
      swift_release(KeyPath, v35);
      v25 = *(_QWORD *)(v32 + v28);
      v36 = (void *)IASignalSmartRepliesRewriteCompleted;
      swift_retain(v25);
      sub_1000528F0(v36, v53, v10, v9);
      swift_bridgeObjectRelease(v53);
      v6 = v2 + 328;
    }
    else
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v2 + 608));
      swift_bridgeObjectRelease(v7);

      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unexpected nil response for long form generation with entries", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }
      v20 = *(_QWORD *)(v2 + 552);
      v21 = *(_QWORD *)(v2 + 528);
      v22 = *(_QWORD *)(v2 + 408);

      v23 = swift_getKeyPath(&unk_100092A48);
      *(_QWORD *)(v2 + 360) = v22;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 360, v23, v21);
      swift_release(v23, v24);
      v25 = *(_QWORD *)(v22 + v20);
      v26 = (void *)IASignalSmartRepliesRewriteFailed;
      swift_retain(v25);
      v9 = sub_1000620F0((uint64_t)_swiftEmptyArrayStorage);
      sub_100053248(v26, v9, 0, 0xE000000000000000);
    }
    swift_release(v25, v27);
    v37 = *(_QWORD *)(v2 + 528);
    v38 = *(_QWORD *)(v2 + 408);
    swift_bridgeObjectRelease(v9);
    v39 = swift_getKeyPath(&unk_100092980);
    v40 = swift_task_alloc(32);
    *(_QWORD *)(v40 + 16) = v38;
    *(_BYTE *)(v40 + 24) = 0;
    *(_QWORD *)(v2 + 320) = v38;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v2 + 320, v39, sub_1000219DC, v40, (char *)&type metadata for () + 8, v37);
    swift_release(v39, v41);
    swift_task_dealloc(v40);
    sub_10001C680();
    v42 = swift_getKeyPath(&unk_1000929D0);
    *(_QWORD *)(v2 + 328) = v38;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v6, v42, v37);
    swift_release(v42, v43);
    v44 = *(void **)(v2 + 536);
    if (*(_BYTE *)(v38 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__sessionEndRequested) == 1)
    {
      v54 = *(_QWORD *)(v2 + 528);
      v45 = *(_QWORD *)(v2 + 504);
      v46 = *(void **)(v2 + 512);
      v47 = *(_QWORD *)(v2 + 408);
      v48 = swift_getKeyPath(&unk_1000929D0);
      v49 = swift_task_alloc(32);
      *(_QWORD *)(v49 + 16) = v47;
      *(_BYTE *)(v49 + 24) = 0;
      *(_QWORD *)(v2 + 336) = v47;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v2 + 336, v48, sub_1000219C8, v49, (char *)&type metadata for () + 8, v54);
      swift_release(v48, v50);
      swift_task_dealloc(v49);
      sub_100020B5C();
    }
    else
    {
      v45 = *(_QWORD *)(v2 + 504);
      v46 = *(void **)(v2 + 512);
    }
    swift_unknownObjectRelease(v45);

    v51 = *(_QWORD *)(v2 + 456);
    v52 = *(_QWORD *)(v2 + 432);
    swift_task_dealloc(*(_QWORD *)(v2 + 464));
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    return (id)(*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001BA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 648);
  v4[82] = a1;
  v4[83] = a2;
  v4[84] = v2;
  swift_task_dealloc(v5);
  v6 = (void *)v4[80];
  v7 = (void *)v4[79];
  v8 = v4[78];
  (*(void (**)(_QWORD, _QWORD))(v4[56] + 8))(v4[57], v4[55]);

  swift_bridgeObjectRelease(v8);
  if (v2)
    v9 = sub_10001C33C;
  else
    v9 = sub_10001BB08;
  return swift_task_switch(v9, v4[60], v4[61]);
}

id sub_10001BB08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id result;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v3 = *(void **)(v2 + 656);
  swift_release(*(_QWORD *)(v2 + 472), a2);
  result = objc_msgSend(v3, "responseTexts");
  if (result)
  {
    v5 = result;
    v6 = v2 + 328;
    v7 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(result, &type metadata for String);

    v8 = *(void **)(v2 + 656);
    if (v7[2])
    {
      v53 = *(_QWORD *)(v2 + 664);
      v10 = v7[4];
      v9 = v7[5];
      swift_bridgeObjectRetain_n(v9, 2);
      swift_bridgeObjectRelease(v7);

      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v14 = 134283521;
        *(_QWORD *)(v2 + 216) = v10;
        *(_QWORD *)(v2 + 224) = v9;
        v15 = sub_100015204();
        *(_QWORD *)(v2 + 352) = StringProtocol.hash.getter(&type metadata for String, v15);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 352, v2 + 360, v14 + 4, v14 + 12);
        swift_bridgeObjectRelease(v9);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Long form generation with entries hashed response: %{private}ld", v14, 0xCu);
        swift_slowDealloc(v14, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease(v9);
      }

      v28 = *(_QWORD *)(v2 + 552);
      v29 = *(_QWORD *)(v2 + 528);
      v31 = *(void **)(v2 + 504);
      v30 = *(void **)(v2 + 512);
      v32 = *(_QWORD *)(v2 + 408);
      swift_getObjectType(v31);
      swift_unknownObjectRetain(v31, v33);
      sub_100020758(v10, v9, v31, v30, 0, v32);
      swift_unknownObjectRelease(v31);
      KeyPath = swift_getKeyPath(&unk_100092A48);
      *(_QWORD *)(v2 + 312) = v32;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 312, KeyPath, v29);
      swift_release(KeyPath, v35);
      v25 = *(_QWORD *)(v32 + v28);
      v36 = (void *)IASignalSmartRepliesRewriteCompleted;
      swift_retain(v25);
      sub_1000528F0(v36, v53, v10, v9);
      swift_bridgeObjectRelease(v53);
      v6 = v2 + 328;
    }
    else
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v2 + 664));
      swift_bridgeObjectRelease(v7);

      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unexpected nil response for long form generation with entries", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }
      v20 = *(_QWORD *)(v2 + 552);
      v21 = *(_QWORD *)(v2 + 528);
      v22 = *(_QWORD *)(v2 + 408);

      v23 = swift_getKeyPath(&unk_100092A48);
      *(_QWORD *)(v2 + 360) = v22;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 360, v23, v21);
      swift_release(v23, v24);
      v25 = *(_QWORD *)(v22 + v20);
      v26 = (void *)IASignalSmartRepliesRewriteFailed;
      swift_retain(v25);
      v9 = sub_1000620F0((uint64_t)_swiftEmptyArrayStorage);
      sub_100053248(v26, v9, 0, 0xE000000000000000);
    }
    swift_release(v25, v27);
    v37 = *(_QWORD *)(v2 + 528);
    v38 = *(_QWORD *)(v2 + 408);
    swift_bridgeObjectRelease(v9);
    v39 = swift_getKeyPath(&unk_100092980);
    v40 = swift_task_alloc(32);
    *(_QWORD *)(v40 + 16) = v38;
    *(_BYTE *)(v40 + 24) = 0;
    *(_QWORD *)(v2 + 320) = v38;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v2 + 320, v39, sub_1000219DC, v40, (char *)&type metadata for () + 8, v37);
    swift_release(v39, v41);
    swift_task_dealloc(v40);
    sub_10001C680();
    v42 = swift_getKeyPath(&unk_1000929D0);
    *(_QWORD *)(v2 + 328) = v38;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v6, v42, v37);
    swift_release(v42, v43);
    v44 = *(void **)(v2 + 536);
    if (*(_BYTE *)(v38 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__sessionEndRequested) == 1)
    {
      v54 = *(_QWORD *)(v2 + 528);
      v45 = *(_QWORD *)(v2 + 504);
      v46 = *(void **)(v2 + 512);
      v47 = *(_QWORD *)(v2 + 408);
      v48 = swift_getKeyPath(&unk_1000929D0);
      v49 = swift_task_alloc(32);
      *(_QWORD *)(v49 + 16) = v47;
      *(_BYTE *)(v49 + 24) = 0;
      *(_QWORD *)(v2 + 336) = v47;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v2 + 336, v48, sub_1000219C8, v49, (char *)&type metadata for () + 8, v54);
      swift_release(v48, v50);
      swift_task_dealloc(v49);
      sub_100020B5C();
    }
    else
    {
      v45 = *(_QWORD *)(v2 + 504);
      v46 = *(void **)(v2 + 512);
    }
    swift_unknownObjectRelease(v45);

    v51 = *(_QWORD *)(v2 + 456);
    v52 = *(_QWORD *)(v2 + 432);
    swift_task_dealloc(*(_QWORD *)(v2 + 464));
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    return (id)(*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001BFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  void *v37;

  v3 = *(_QWORD *)(v2 + 616);
  v4 = *(void **)(v2 + 536);
  v5 = *(_QWORD *)(v2 + 528);
  v6 = *(_QWORD *)(v2 + 408);
  swift_release(*(_QWORD *)(v2 + 472), a2);

  KeyPath = swift_getKeyPath(&unk_100092980);
  v8 = swift_task_alloc(32);
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = 0;
  *(_QWORD *)(v2 + 272) = v6;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v2 + 272, KeyPath, sub_1000219DC, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v9);
  swift_task_dealloc(v8);
  sub_10001C680();
  swift_errorRetain(v3);
  sub_10000C1D4(v3);
  v10 = swift_errorRelease(v3);
  Logger.init()(v10);
  swift_errorRetain(v3);
  v11 = swift_errorRetain(v3);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v14 = 138412290;
    swift_errorRetain(v3);
    v16 = _swift_stdlib_bridgeErrorToNSError(v3);
    *(_QWORD *)(v2 + 304) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 304, v2 + 312, v14 + 4, v14 + 12);
    *v15 = v16;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error occurred in long form reply with entries generation: %@", v14, 0xCu);
    v17 = sub_100004EAC(&qword_1000C87C8);
    swift_arrayDestroy(v15, 1, v17);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
  }
  v18 = *(_QWORD *)(v2 + 552);
  v19 = *(_QWORD *)(v2 + 528);
  v36 = *(_QWORD *)(v2 + 504);
  v37 = *(void **)(v2 + 512);
  v20 = *(_QWORD *)(v2 + 424);
  v21 = *(_QWORD *)(v2 + 432);
  v22 = *(_QWORD *)(v2 + 408);
  v23 = *(_QWORD *)(v2 + 416);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v23);
  v24 = swift_getKeyPath(&unk_100092A48);
  *(_QWORD *)(v2 + 280) = v22;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 280, v24, v19);
  swift_release(v24, v25);
  v26 = *(_QWORD *)(v22 + v18);
  v27 = (void *)IASignalSmartRepliesRewriteFailed;
  swift_retain(v26);
  v28 = sub_1000620F0((uint64_t)_swiftEmptyArrayStorage);
  swift_getErrorValue(v3, v2 + 288, v2 + 176);
  v29 = Error.localizedDescription.getter(*(_QWORD *)(v2 + 184), *(_QWORD *)(v2 + 192));
  v31 = v30;
  sub_100053248(v27, v28, v29, v30);
  swift_release(v26, v32);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v31);
  swift_unknownObjectRelease(v36);

  swift_errorRelease(v3);
  v33 = *(_QWORD *)(v2 + 456);
  v34 = *(_QWORD *)(v2 + 432);
  swift_task_dealloc(*(_QWORD *)(v2 + 464));
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10001C33C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  void *v37;

  v3 = *(_QWORD *)(v2 + 672);
  v4 = *(void **)(v2 + 536);
  v5 = *(_QWORD *)(v2 + 528);
  v6 = *(_QWORD *)(v2 + 408);
  swift_release(*(_QWORD *)(v2 + 472), a2);

  KeyPath = swift_getKeyPath(&unk_100092980);
  v8 = swift_task_alloc(32);
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = 0;
  *(_QWORD *)(v2 + 272) = v6;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v2 + 272, KeyPath, sub_1000219DC, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v9);
  swift_task_dealloc(v8);
  sub_10001C680();
  swift_errorRetain(v3);
  sub_10000C1D4(v3);
  v10 = swift_errorRelease(v3);
  Logger.init()(v10);
  swift_errorRetain(v3);
  v11 = swift_errorRetain(v3);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v14 = 138412290;
    swift_errorRetain(v3);
    v16 = _swift_stdlib_bridgeErrorToNSError(v3);
    *(_QWORD *)(v2 + 304) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 304, v2 + 312, v14 + 4, v14 + 12);
    *v15 = v16;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error occurred in long form reply with entries generation: %@", v14, 0xCu);
    v17 = sub_100004EAC(&qword_1000C87C8);
    swift_arrayDestroy(v15, 1, v17);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
  }
  v18 = *(_QWORD *)(v2 + 552);
  v19 = *(_QWORD *)(v2 + 528);
  v36 = *(_QWORD *)(v2 + 504);
  v37 = *(void **)(v2 + 512);
  v20 = *(_QWORD *)(v2 + 424);
  v21 = *(_QWORD *)(v2 + 432);
  v22 = *(_QWORD *)(v2 + 408);
  v23 = *(_QWORD *)(v2 + 416);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v23);
  v24 = swift_getKeyPath(&unk_100092A48);
  *(_QWORD *)(v2 + 280) = v22;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 280, v24, v19);
  swift_release(v24, v25);
  v26 = *(_QWORD *)(v22 + v18);
  v27 = (void *)IASignalSmartRepliesRewriteFailed;
  swift_retain(v26);
  v28 = sub_1000620F0((uint64_t)_swiftEmptyArrayStorage);
  swift_getErrorValue(v3, v2 + 288, v2 + 176);
  v29 = Error.localizedDescription.getter(*(_QWORD *)(v2 + 184), *(_QWORD *)(v2 + 192));
  v31 = v30;
  sub_100053248(v27, v28, v29, v30);
  swift_release(v26, v32);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v31);
  swift_unknownObjectRelease(v36);

  swift_errorRelease(v3);
  v33 = *(_QWORD *)(v2 + 456);
  v34 = *(_QWORD *)(v2 + 432);
  swift_task_dealloc(*(_QWORD *)(v2 + 464));
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10001C680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  char v18;
  uint64_t v19;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_100092A70);
  v19 = v0;
  v3 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, KeyPath, v3);
  swift_release(KeyPath, v4);
  v5 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration), "baseResponse");
  v6 = v5;
  if (v5)

  v7 = swift_getKeyPath(&unk_100092A98);
  v19 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, v7, v3);
  swift_release(v7, v8);
  if (v6)
    v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries) == 0;
  else
    v9 = 1;
  if (v9)
  {
    v12 = 1;
  }
  else
  {
    v10 = swift_getKeyPath(&unk_100092980);
    v19 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, v10, v3);
    swift_release(v10, v11);
    v12 = *(_BYTE *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__longFormUpdateInProgress);
  }
  v13 = swift_getKeyPath(&unk_100092AC0);
  __chkstk_darwin(v13);
  v17[2] = v1;
  v18 = v12;
  v19 = v1;
  v14 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v19, v13, sub_100021078, v17, (char *)&type metadata for () + 8, v14);
  return swift_release(v13, v15);
}

uint64_t sub_10001C850()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100092A48);
  v5 = v0;
  v2 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__analyticsInstance));
}

uint64_t sub_10001C8E0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100092A48);
  v9 = v3;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__analyticsInstance);
  *a2 = v7;
  return swift_retain(v7);
}

uint64_t sub_10001C978(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100092A48);
  v9[2] = v3;
  v9[3] = v2;
  v10 = v3;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100021020, v9, (char *)&type metadata for () + 8, v5);
  swift_release(v2, v6);
  return swift_release(KeyPath, v7);
}

uint64_t sub_10001CA30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__analyticsInstance), v1);
  v2 = v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel___observationRegistrar;
  v3 = type metadata accessor for ObservationRegistrar(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_10001CABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  sub_10000C714(v0 + 16);

  sub_10000B11C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_errorRelease(*(_QWORD *)(v0 + 80));
  v1 = v0 + OBJC_IVAR____TtC21WritingToolsUIService9ToolModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__analyticsInstance), v4);
  v3(v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel___observationRegistrar, v2);
  return v0;
}

uint64_t sub_10001CBA0()
{
  uint64_t v0;

  sub_10001CABC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10001CBC4()
{
  return type metadata accessor for QuestionnaireModel(0);
}

uint64_t type metadata accessor for QuestionnaireModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000C81C8;
  if (!qword_1000C81C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for QuestionnaireModel);
  return result;
}

uint64_t sub_10001CC08(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = "\b";
  v4[1] = &unk_100092950;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = &unk_100092968;
  v4[5] = &unk_100092950;
  v4[6] = &unk_100092950;
  v4[7] = "\b";
  v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 688);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_10001CCB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100005900(&qword_1000C8758, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10001D130(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1000C8760, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_10001CD50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10001CEDC(a1, a2, v5);
}

unint64_t sub_10001CDB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_10001CFBC(a1, v7);
}

unint64_t sub_10001CE44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for FBKSForm.Question(0);
  v6 = sub_100005900(&qword_1000C8768, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSForm.Question, (uint64_t)&protocol conformance descriptor for FBKSForm.Question);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10001D130(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSForm.Question, (unint64_t *)&unk_1000C8770, (uint64_t)&protocol conformance descriptor for FBKSForm.Question);
}

unint64_t sub_10001CEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10001CFBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_10001D130(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_100005900(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

uint64_t sub_10001D260(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_10001CCB8(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10001FB08();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v5);
  sub_10001EC88(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10001D338(uint64_t a1)
{
  return sub_10001D34C(a1, (uint64_t)&unk_1000C87A0, (void (*)(uint64_t))sub_1000202F4);
}

uint64_t sub_10001D34C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = v3;
  v8 = *v6;
  swift_bridgeObjectRetain(*v6);
  v9 = sub_10001CCB8(a1);
  LOBYTE(a1) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  v12 = *v6;
  v18 = *v6;
  *v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3(a2);
    v12 = v18;
  }
  v13 = *(_QWORD *)(v12 + 48);
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v9, v14);
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v9);
  sub_10001EC88(v9, v12);
  v16 = *v6;
  *v6 = v12;
  swift_bridgeObjectRelease(v16);
  return v15;
}

uint64_t sub_10001D438(uint64_t a1)
{
  return sub_10001D34C(a1, (uint64_t)&unk_1000C87B8, (void (*)(uint64_t))sub_100020530);
}

uint64_t sub_10001D44C(uint64_t a1)
{
  return sub_10001D34C(a1, (uint64_t)&unk_1000CB790, (void (*)(uint64_t))sub_1000202F4);
}

uint64_t sub_10001D460(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;

  v5 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v2;
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100004EAC(&qword_1000C8780);
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v11 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8, v10);
    v40 = v44;
LABEL_44:
    *v40 = v11;
    return result;
  }
  v12 = 1 << *(_BYTE *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 64);
  v46 = (_QWORD *)(v8 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v45 = (unint64_t)(v12 + 63) >> 6;
  v16 = v9 + 64;
  result = swift_retain(v8);
  v19 = 0;
  HIDWORD(v43) = a2;
  v20 = 16;
  if ((a2 & 1) != 0)
    v20 = 32;
  v47 = v20;
  while (1)
  {
    if (v15)
    {
      v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v23 = v22 | (v19 << 6);
      goto LABEL_26;
    }
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v24 >= v45)
    {
      swift_release(v8, v18);
      v40 = v44;
      v25 = v46;
      if ((v43 & 0x100000000) != 0)
      {
LABEL_39:
        v42 = 1 << *(_BYTE *)(v8 + 32);
        if (v42 >= 64)
          bzero(v25, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v25 = -1 << v42;
        *(_QWORD *)(v8 + 16) = 0;
      }
LABEL_43:
      result = swift_release(v8, v41);
      goto LABEL_44;
    }
    v25 = v46;
    v26 = v46[v24];
    ++v19;
    if (!v26)
    {
      v19 = v24 + 1;
      if (v24 + 1 >= v45)
        goto LABEL_36;
      v26 = v46[v19];
      if (!v26)
        break;
    }
LABEL_25:
    v15 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_26:
    v28 = *(_QWORD *)(v48 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v48 + v47))(v7, *(_QWORD *)(v8 + 48) + v28 * v23, v5);
    v29 = v8;
    v30 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v23);
    v31 = *(_QWORD *)(v11 + 40);
    v32 = sub_100005900(&qword_1000C8758, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v5, v32);
    v33 = -1 << *(_BYTE *)(v11 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v16 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v48 + 32))(*(_QWORD *)(v11 + 48) + v28 * v21, v7, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v21) = v30;
    ++*(_QWORD *)(v11 + 16);
    v8 = v29;
  }
  v27 = v24 + 2;
  if (v27 >= v45)
  {
LABEL_36:
    swift_release(v8, v18);
    v40 = v44;
    if ((v43 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v26 = v46[v27];
  if (v26)
  {
    v19 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v19 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v19 >= v45)
      goto LABEL_36;
    v26 = v46[v19];
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_10001D7FC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  int v47;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100004EAC(&qword_1000C8750);
  v47 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v13 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v14 = 1 << *(_BYTE *)(v10 + 32);
  v15 = *(_QWORD *)(v10 + 64);
  v45 = (_QWORD *)(v10 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v43 = v2;
  v44 = (unint64_t)(v14 + 63) >> 6;
  v18 = v11 + 64;
  result = swift_retain(v10);
  v21 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_36;
      v27 = v45[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_36:
          swift_release(v10, v20);
          v3 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v44)
              goto LABEL_36;
            v27 = v45[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v17 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v7 + 72);
    v30 = *(_QWORD *)(v10 + 48) + v29 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v30, v6);
      v31 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v24);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v30, v6);
      v31 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v24);
      swift_retain(v31);
    }
    v32 = *(_QWORD *)(v13 + 40);
    v33 = sub_100005900(&qword_1000C8758, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v6, v33);
    v34 = -1 << *(_BYTE *)(v13 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v18 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v13 + 48) + v22 * v29, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v22) = v31;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release(v10, v20);
  v3 = v43;
  v26 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v10 + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10, v12);
  *v3 = v13;
  return result;
}

Swift::Int sub_10001DB90(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  uint64_t v44;
  char v45;
  _QWORD v46[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004EAC((uint64_t *)&unk_1000C8790);
  v45 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v44 = v5 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v42 = v3;
  v43 = (unint64_t)(v10 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v16 = 0;
  while (1)
  {
    if (v12)
    {
      v24 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v25 = v24 | (v16 << 6);
      goto LABEL_34;
    }
    v26 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v43)
      break;
    v27 = (_QWORD *)(v5 + 64);
    v28 = *(_QWORD *)(v44 + 8 * v26);
    ++v16;
    if (!v28)
    {
      v16 = v26 + 1;
      if (v26 + 1 >= v43)
        goto LABEL_36;
      v28 = *(_QWORD *)(v44 + 8 * v16);
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_36:
          swift_release(v5, v15);
          v3 = v42;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = *(_QWORD *)(v44 + 8 * v29);
        if (!v28)
        {
          while (1)
          {
            v16 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v16 >= v43)
              goto LABEL_36;
            v28 = *(_QWORD *)(v44 + 8 * v16);
            ++v29;
            if (v28)
              goto LABEL_33;
          }
        }
        v16 = v29;
      }
    }
LABEL_33:
    v12 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v16 << 6);
LABEL_34:
    v34 = 16 * v25;
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v34);
    v37 = *v35;
    v36 = v35[1];
    v38 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v34);
    v39 = *v38;
    v40 = v38[1];
    if ((v45 & 1) == 0)
    {
      swift_bridgeObjectRetain(v35[1]);
      swift_bridgeObjectRetain(v40);
    }
    Hasher.init(_seed:)(v46, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v46, v37, v36);
    result = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v13 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v32 = v19 == v31;
        if (v19 == v31)
          v19 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v13 + 8 * v19);
      }
      while (v33 == -1);
      v20 = __clz(__rbit64(~v33)) + (v19 << 6);
    }
    *(_QWORD *)(v13 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 16 * v20;
    v22 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v21);
    *v22 = v37;
    v22[1] = v36;
    v23 = (_QWORD *)(*(_QWORD *)(v9 + 56) + v21);
    *v23 = v39;
    v23[1] = v40;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v5, v15);
  v3 = v42;
  v27 = (_QWORD *)(v5 + 64);
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v5 + 32);
  if (v41 >= 64)
    bzero(v27, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v41;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5, v8);
  *v3 = v9;
  return result;
}

uint64_t sub_10001DEB4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;

  v5 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v2;
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100004EAC(&qword_1000C87A8);
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v11 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8, v10);
    v40 = v44;
LABEL_44:
    *v40 = v11;
    return result;
  }
  v12 = 1 << *(_BYTE *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 64);
  v46 = (_QWORD *)(v8 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v45 = (unint64_t)(v12 + 63) >> 6;
  v16 = v9 + 64;
  result = swift_retain(v8);
  v19 = 0;
  HIDWORD(v43) = a2;
  v20 = 16;
  if ((a2 & 1) != 0)
    v20 = 32;
  v47 = v20;
  while (1)
  {
    if (v15)
    {
      v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v23 = v22 | (v19 << 6);
      goto LABEL_26;
    }
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v24 >= v45)
    {
      swift_release(v8, v18);
      v40 = v44;
      v25 = v46;
      if ((v43 & 0x100000000) != 0)
      {
LABEL_39:
        v42 = 1 << *(_BYTE *)(v8 + 32);
        if (v42 >= 64)
          bzero(v25, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v25 = -1 << v42;
        *(_QWORD *)(v8 + 16) = 0;
      }
LABEL_43:
      result = swift_release(v8, v41);
      goto LABEL_44;
    }
    v25 = v46;
    v26 = v46[v24];
    ++v19;
    if (!v26)
    {
      v19 = v24 + 1;
      if (v24 + 1 >= v45)
        goto LABEL_36;
      v26 = v46[v19];
      if (!v26)
        break;
    }
LABEL_25:
    v15 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_26:
    v28 = *(_QWORD *)(v48 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v48 + v47))(v7, *(_QWORD *)(v8 + 48) + v28 * v23, v5);
    v29 = v8;
    v30 = *(_BYTE *)(*(_QWORD *)(v8 + 56) + v23);
    v31 = *(_QWORD *)(v11 + 40);
    v32 = sub_100005900(&qword_1000C8758, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v5, v32);
    v33 = -1 << *(_BYTE *)(v11 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v16 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v48 + 32))(*(_QWORD *)(v11 + 48) + v28 * v21, v7, v5);
    *(_BYTE *)(*(_QWORD *)(v11 + 56) + v21) = v30;
    ++*(_QWORD *)(v11 + 16);
    v8 = v29;
  }
  v27 = v24 + 2;
  if (v27 >= v45)
  {
LABEL_36:
    swift_release(v8, v18);
    v40 = v44;
    if ((v43 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v26 = v46[v27];
  if (v26)
  {
    v19 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v19 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v19 >= v45)
      goto LABEL_36;
    v26 = v46[v19];
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_10001E250(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  _QWORD v39[9];
  _OWORD v40[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004EAC(&qword_1000C87B0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    result = swift_retain(v5);
    v16 = 0;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v16 << 6);
      }
      else
      {
        v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v21 >= v37)
          goto LABEL_37;
        v22 = v38[v21];
        ++v16;
        if (!v22)
        {
          v16 = v21 + 1;
          if (v21 + 1 >= v37)
            goto LABEL_37;
          v22 = v38[v16];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_37:
              swift_release(v5, v15);
              v3 = v36;
              if ((a2 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                v16 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_44;
                if (v16 >= v37)
                  goto LABEL_37;
                v22 = v38[v16];
                ++v23;
                if (v22)
                  goto LABEL_24;
              }
            }
            v16 = v23;
          }
        }
LABEL_24:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      v24 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
      v26 = *v24;
      v25 = v24[1];
      v27 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20);
      if ((a2 & 1) != 0)
      {
        sub_100021008(v27, v40);
      }
      else
      {
        sub_1000071D0((uint64_t)v27, (uint64_t)v40);
        swift_bridgeObjectRetain(v25);
      }
      Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
      String.hash(into:)(v39, v26, v25);
      result = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v9 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v13 + 8 * (v29 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v13 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v13 + 8 * v30);
        }
        while (v34 == -1);
        v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v17);
      *v18 = v26;
      v18[1] = v25;
      result = (uint64_t)sub_100021008(v40, (_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v17));
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v5, v8);
  *v3 = v9;
  return result;
}

uint64_t sub_10001E54C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t i;
  int v49;

  v5 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_100004EAC(a3);
  v49 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v15 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v12 + 32);
  v17 = *(_QWORD *)(v12 + 64);
  v47 = (_QWORD *)(v12 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v45 = v5;
  v46 = (unint64_t)(v16 + 63) >> 6;
  v20 = v13 + 64;
  result = swift_retain(v12);
  v23 = 0;
  for (i = v12; ; v12 = i)
  {
    if (v19)
    {
      v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v26 = v25 | (v23 << 6);
      goto LABEL_24;
    }
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v27 >= v46)
      break;
    v28 = v47;
    v29 = v47[v27];
    ++v23;
    if (!v29)
    {
      v23 = v27 + 1;
      if (v27 + 1 >= v46)
        goto LABEL_36;
      v29 = v47[v23];
      if (!v29)
      {
        v30 = v27 + 2;
        if (v30 >= v46)
        {
LABEL_36:
          swift_release(v12, v22);
          v5 = v45;
          if ((v49 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v29 = v47[v30];
        if (!v29)
        {
          while (1)
          {
            v23 = v30 + 1;
            if (__OFADD__(v30, 1))
              goto LABEL_45;
            if (v23 >= v46)
              goto LABEL_36;
            v29 = v47[v23];
            ++v30;
            if (v29)
              goto LABEL_23;
          }
        }
        v23 = v30;
      }
    }
LABEL_23:
    v19 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_24:
    v31 = *(_QWORD *)(v9 + 72);
    v32 = *(_QWORD *)(v12 + 48) + v31 * v26;
    if ((v49 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v32, v8);
      v33 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v26);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v32, v8);
      v33 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v26);
      swift_retain(v33);
    }
    v34 = *(_QWORD *)(v15 + 40);
    v35 = sub_100005900(&qword_1000C8758, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v8, v35);
    v36 = -1 << *(_BYTE *)(v15 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v20 + 8 * (v37 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v20 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v20 + 8 * v38);
      }
      while (v42 == -1);
      v24 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v15 + 48) + v31 * v24, v11, v8);
    *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v24) = v33;
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release(v12, v22);
  v5 = v45;
  v28 = v47;
  if ((v49 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v43 = 1 << *(_BYTE *)(v12 + 32);
  if (v43 >= 64)
    bzero(v28, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v43;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release(v12, v14);
  *v5 = v15;
  return result;
}

uint64_t sub_10001E8E4(uint64_t a1, uint64_t a2)
{
  return sub_10001E8F0(a1, a2, &qword_1000C8788);
}

uint64_t sub_10001E8F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t i;
  int v49;

  v5 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_100004EAC(a3);
  v49 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v15 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v12 + 32);
  v17 = *(_QWORD *)(v12 + 64);
  v47 = (_QWORD *)(v12 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v45 = v5;
  v46 = (unint64_t)(v16 + 63) >> 6;
  v20 = v13 + 64;
  result = swift_retain(v12);
  v23 = 0;
  for (i = v12; ; v12 = i)
  {
    if (v19)
    {
      v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v26 = v25 | (v23 << 6);
      goto LABEL_24;
    }
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v27 >= v46)
      break;
    v28 = v47;
    v29 = v47[v27];
    ++v23;
    if (!v29)
    {
      v23 = v27 + 1;
      if (v27 + 1 >= v46)
        goto LABEL_36;
      v29 = v47[v23];
      if (!v29)
      {
        v30 = v27 + 2;
        if (v30 >= v46)
        {
LABEL_36:
          swift_release(v12, v22);
          v5 = v45;
          if ((v49 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v29 = v47[v30];
        if (!v29)
        {
          while (1)
          {
            v23 = v30 + 1;
            if (__OFADD__(v30, 1))
              goto LABEL_45;
            if (v23 >= v46)
              goto LABEL_36;
            v29 = v47[v23];
            ++v30;
            if (v29)
              goto LABEL_23;
          }
        }
        v23 = v30;
      }
    }
LABEL_23:
    v19 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_24:
    v31 = *(_QWORD *)(v9 + 72);
    v32 = *(_QWORD *)(v12 + 48) + v31 * v26;
    if ((v49 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v32, v8);
      v33 = *(id *)(*(_QWORD *)(v12 + 56) + 8 * v26);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v32, v8);
      v33 = *(id *)(*(_QWORD *)(v12 + 56) + 8 * v26);
    }
    v34 = *(_QWORD *)(v15 + 40);
    v35 = sub_100005900(&qword_1000C8758, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v8, v35);
    v36 = -1 << *(_BYTE *)(v15 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v20 + 8 * (v37 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v20 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v20 + 8 * v38);
      }
      while (v42 == -1);
      v24 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v15 + 48) + v31 * v24, v11, v8);
    *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v24) = v33;
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release(v12, v22);
  v5 = v45;
  v28 = v47;
  if ((v49 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v43 = 1 << *(_BYTE *)(v12 + 32);
  if (v43 >= 64)
    bzero(v28, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v43;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release(v12, v14);
  *v5 = v15;
  return result;
}

unint64_t sub_10001EC88(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100005900(&qword_1000C8758, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_QWORD *)(v26 + 8 * a1);
            v28 = (_QWORD *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10001EF28(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10001CCB8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_10001F8E4();
    goto LABEL_7;
  }
  sub_10001D460(result, a3 & 1);
  result = sub_10001CCB8(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = result;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10001F74C(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10001F078(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10001CCB8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_release(*(_QWORD *)(v21 + 8 * v14), v13);
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10001FB08();
    goto LABEL_7;
  }
  sub_10001D7FC(v17, a3 & 1);
  v23 = sub_10001CCB8(a2);
  if ((v18 & 1) != (v13 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10001F74C(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_10001F1D4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10001F1E0(a1, a2, a3, &qword_1000C87A0);
}

uint64_t sub_10001F1E0(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD **v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = (_QWORD **)v4;
  v26 = a1;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_10001CCB8(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];
      result = swift_release(*(_QWORD *)(v22 + 8 * v15), v14);
      *(_QWORD *)(v22 + 8 * v15) = v26;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_1000202F4(a4);
    goto LABEL_7;
  }
  sub_10001E54C(v18, a3 & 1, a4);
  v24 = sub_10001CCB8(a2);
  if ((v19 & 1) != (v14 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }
  v15 = v24;
  v21 = *v6;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  return sub_10001F74C(v15, (uint64_t)v12, v26, v21);
}

uint64_t sub_10001F350(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10001CCB8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v20[7] + v14) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_10001FEF0();
    goto LABEL_7;
  }
  sub_10001DEB4(result, a3 & 1);
  result = sub_10001CCB8(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = result;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10001F7E4(v14, (uint64_t)v11, a1 & 1, v20);
}

void sub_10001F4A4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10001CCB8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100020530((uint64_t *)&unk_1000C87B8);
    goto LABEL_7;
  }
  sub_10001E8F0(v17, a3 & 1, (uint64_t *)&unk_1000C87B8);
  v22 = sub_10001CCB8(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v14 = v22;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_10001F74C(v14, (uint64_t)v11, a1, v20);
}

_OWORD *sub_10001F610(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10001CD50(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_10000AFA4(v19);
        return sub_100021008(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100020110();
      goto LABEL_7;
    }
    sub_10001E250(v15, a4 & 1);
    v21 = sub_10001CD50(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10001F87C(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10001F740(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10001F1E0(a1, a2, a3, &qword_1000CB790);
}

uint64_t sub_10001F74C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_10001F7E4(unint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_BYTE *)(a4[7] + a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *sub_10001F87C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_100021008(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void *sub_10001F8E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004EAC(&qword_1000C8780);
  v25 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5, v7);
    *v25 = v8;
    return result;
  }
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v26 = v5 + 64;
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v18, v1);
    v19 = 8 * v17;
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v19);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v18, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v20;
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10001FB08()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004EAC(&qword_1000C8750);
  v26 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v6;
  v9 = *(_QWORD *)(v5 + 16);
  if (!v9)
  {
LABEL_26:
    result = (void *)swift_release(v5, v7);
    *v26 = v8;
    return result;
  }
  result = (void *)(v6 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v11)
  {
    result = memmove(result, (const void *)(v5 + 64), 8 * v11);
    v9 = *(_QWORD *)(v5 + 16);
  }
  v27 = v5 + 64;
  v13 = 0;
  *(_QWORD *)(v8 + 16) = v9;
  v14 = 1 << *(_BYTE *)(v5 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v5 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v2 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v19, v1);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v19, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v21;
    result = (void *)swift_retain(v21);
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10001FD38()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_100004EAC((uint64_t *)&unk_1000C8790);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2, v4);
    *v1 = v5;
    return result;
  }
  result = (void *)(v3 + 64);
  v7 = v2 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v2 || (unint64_t)result >= v2 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v2 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v2 + 16);
  v11 = 1 << *(_BYTE *)(v2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v2 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v26 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v14)
      goto LABEL_26;
    v27 = *(_QWORD *)(v7 + 8 * v26);
    ++v10;
    if (!v27)
    {
      v10 = v26 + 1;
      if (v26 + 1 >= v14)
        goto LABEL_26;
      v27 = *(_QWORD *)(v7 + 8 * v10);
      if (!v27)
        break;
    }
LABEL_25:
    v13 = (v27 - 1) & v27;
    v16 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v17);
    v20 = *v18;
    v19 = v18[1];
    v21 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v17);
    v22 = *v21;
    v23 = v21[1];
    v24 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v24 = v20;
    v24[1] = v19;
    v25 = (_QWORD *)(*(_QWORD *)(v5 + 56) + v17);
    *v25 = v22;
    v25[1] = v23;
    swift_bridgeObjectRetain(v19);
    result = (void *)swift_bridgeObjectRetain(v23);
  }
  v28 = v26 + 2;
  if (v28 >= v14)
    goto LABEL_26;
  v27 = *(_QWORD *)(v7 + 8 * v28);
  if (v27)
  {
    v10 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v27 = *(_QWORD *)(v7 + 8 * v10);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10001FEF0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004EAC(&qword_1000C87A8);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5, v7);
    *v24 = v8;
    return result;
  }
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v12);
      if (!v21)
        break;
    }
LABEL_25:
    v15 = (v21 - 1) & v21;
    v17 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v18, v1);
    v19 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v17);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v18, v4, v1);
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v17) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100020110()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  _OWORD v27[2];

  v1 = v0;
  sub_100004EAC(&qword_1000C87B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2, v4);
LABEL_28:
    *v1 = v5;
    return result;
  }
  v26 = v1;
  result = (void *)(v3 + 64);
  v7 = v2 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v2 || (unint64_t)result >= v2 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v2 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v2 + 16);
  v11 = 1 << *(_BYTE *)(v2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v2 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v16);
    v20 = *v18;
    v19 = v18[1];
    v21 = 32 * v16;
    sub_1000071D0(*(_QWORD *)(v2 + 56) + 32 * v16, (uint64_t)v27);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = v20;
    v22[1] = v19;
    sub_100021008(v27, (_OWORD *)(*(_QWORD *)(v5 + 56) + v21));
    result = (void *)swift_bridgeObjectRetain(v19);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_26:
    result = (void *)swift_release(v2, v4);
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000202F4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004EAC(a1);
  v27 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)(*v1);
  v10 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v7, v9);
    *v27 = v10;
    return result;
  }
  result = (void *)(v8 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v7 + 64), 8 * v12);
  v28 = v7 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 64);
  v29 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v29)
        goto LABEL_26;
      v24 = *(_QWORD *)(v28 + 8 * v14);
      if (!v24)
        break;
    }
LABEL_25:
    v17 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v4 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v20, v3);
    v21 = 8 * v19;
    v22 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v10 + 48) + v20, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + v21) = v22;
    result = (void *)swift_retain(v22);
  }
  v25 = v23 + 2;
  if (v25 >= v29)
    goto LABEL_26;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100020524()
{
  return sub_100020530(&qword_1000C8788);
}

id sub_100020530(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004EAC(a1);
  v27 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)(*v1);
  v10 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (id)swift_release(v7, v9);
    *v27 = v10;
    return result;
  }
  result = (id)(v8 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v7 + 64), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 64);
  v28 = v7 + 64;
  v29 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v29)
        goto LABEL_26;
      v24 = *(_QWORD *)(v28 + 8 * v14);
      if (!v24)
        break;
    }
LABEL_25:
    v17 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v4 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v20, v3);
    v21 = 8 * v19;
    v22 = *(void **)(*(_QWORD *)(v7 + 56) + v21);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v10 + 48) + v20, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + v21) = v22;
    result = v22;
  }
  v25 = v23 + 2;
  if (v25 >= v29)
    goto LABEL_26;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100020758(uint64_t a1, uint64_t a2, void *a3, void *a4, char a5, uint64_t a6)
{
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  NSString v17;
  NSObject *v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  NSDictionary v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  id v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;

  KeyPath = swift_getKeyPath(&unk_1000929A8);
  v47 = a6;
  v13 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v47, KeyPath, v13);
  swift_release(KeyPath, v14);
  v15 = *(void **)(a6 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__session);
  if (v15)
  {
    v46 = a3;
    v16 = objc_allocWithZone((Class)NSMutableAttributedString);
    v45 = v15;
    swift_bridgeObjectRetain(a2);
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v18 = objc_msgSend(v16, "initWithString:", v17);

    v19 = objc_msgSend(a4, "attributedText");
    v20 = objc_msgSend(v19, "string");

    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    swift_bridgeObjectRelease(v23);
    v24 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0)
      v24 = v21 & 0xFFFFFFFFFFFFLL;
    if (v24)
    {
      v25 = objc_msgSend(a4, "attributedText");
      v26 = objc_msgSend(v25, "attributesAtIndex:effectiveRange:", 0, 0);

      type metadata accessor for Key(0);
      v28 = v27;
      v29 = sub_100005900(&qword_1000C7620, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100091DE4);
      v30 = a5;
      v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v26, v28, (char *)&type metadata for Any + 8, v29);

      v32.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      v33 = v31;
      a5 = v30;
      swift_bridgeObjectRelease(v33);
      -[NSObject setAttributes:range:](v18, "setAttributes:range:", v32.super.isa, 0, String.count.getter(a1, a2));
      v34 = v46;
    }
    else
    {
      if (qword_1000C73C8 != -1)
        swift_once(&qword_1000C73C8, sub_10000629C);
      v39 = type metadata accessor for Logger(0);
      v40 = sub_1000063D4(v39, (uint64_t)qword_1000D1BE8);
      v32.super.isa = (Class)Logger.logObject.getter(v40);
      v41 = static os_log_type_t.default.getter();
      v34 = v46;
      if (os_log_type_enabled((os_log_t)v32.super.isa, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v32.super.isa, v41, "Unexpected empty string in writing tools context", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
      }
    }

    v43 = objc_msgSend(a4, "range");
    objc_msgSend(v34, "compositionSession:didReceiveText:replacementRange:inContext:finished:", v45, v18, v43, v44, a4, a5 & 1);

  }
  else
  {
    if (qword_1000C73C8 != -1)
      swift_once(&qword_1000C73C8, sub_10000629C);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_1000063D4(v35, (uint64_t)qword_1000D1BE8);
    v18 = Logger.logObject.getter(v36);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v37, "Unexpected missing session for didReceiveText", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }
  }

}

void sub_100020B5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *Strong;
  void *v17;
  unsigned __int8 v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  id v25;
  os_log_type_t v26;
  uint8_t *v27;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = v0;
  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_1000063D4(v2, (uint64_t)qword_1000D1BE8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Requested session end...", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  KeyPath = swift_getKeyPath(&unk_100092980);
  v31 = v1;
  v8 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v31, KeyPath, v8);
  swift_release(KeyPath, v9);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__longFormUpdateInProgress) & 1) != 0)
  {
    v10 = swift_getKeyPath(&unk_1000929D0);
    __chkstk_darwin(v10);
    v29 = v1;
    LOBYTE(v30) = 1;
    v31 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v31, v10, sub_100020FA8, v28, (char *)&type metadata for () + 8, v8);
    swift_release(v10, v11);
    return;
  }
  v12 = swift_getKeyPath(&unk_1000929A8);
  v31 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v31, v12, v8);
  v14 = swift_release(v12, v13);
  v15 = *(void **)(v1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__session);
  if (!v15)
  {
    v22 = Logger.logObject.getter(v14);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unexpected nil session when ending session", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }
    goto LABEL_17;
  }
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (!Strong)
  {
    v25 = v15;
    v22 = Logger.logObject.getter(v25);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v26, "Unexpected nil delegate when ending session", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

LABEL_17:
    return;
  }
  v17 = Strong;
  v18 = objc_msgSend(Strong, "respondsToSelector:", "endTextPlaceholderAndWillInsertText:");
  v19 = v15;
  if ((v18 & 1) != 0)
    objc_msgSend(v17, "endTextPlaceholderAndWillInsertText:", 0);
  objc_msgSend(v17, "didEndWritingToolsSession:accepted:", v19, 1);
  objc_msgSend(v17, "endWritingTools");
  v20 = swift_getKeyPath(&unk_1000929A8);
  __chkstk_darwin(v20);
  v29 = v1;
  v30 = 0;
  v31 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v31, v20, sub_100020F68, v28, (char *)&type metadata for () + 8, v8);
  swift_release(v20, v21);
  swift_unknownObjectRelease(v17);

}

uint64_t sub_100020F38@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000163DC(a1, (uint64_t)&unk_100092980, &OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__longFormUpdateInProgress, a2);
}

void sub_100020F68()
{
  uint64_t v0;

  sub_100016A4C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100020F80@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000163DC(a1, (uint64_t)&unk_1000929D0, &OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__sessionEndRequested, a2);
}

void sub_100020FA8()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__sessionEndRequested) = *(_BYTE *)(v0 + 24);
}

void sub_100020FC0()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__longFormUpdateInProgress) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100020FE0()
{
  uint64_t v0;

  return sub_10000B474(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
}

_OWORD *sub_100021008(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100021020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__analyticsInstance);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__analyticsInstance) = v1;
  swift_retain(v1);
  return swift_release(v3, v4);
}

uint64_t sub_100021078()
{
  uint64_t v0;

  return sub_10000B6C4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_10002109C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  id v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  Class isa;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v1 = a1;
  v34 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_20:
    if (v1 < 0)
      v26 = v1;
    else
      v26 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v26);
    if (v2)
    {
LABEL_3:
      v30 = v1;
      v31 = v1 & 0xC000000000000001;
      v3 = 4;
      while (1)
      {
        v4 = v3 - 4;
        if (v31)
        {
          v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, v1);
          v6 = v3 - 3;
          if (__OFADD__(v4, 1))
            goto LABEL_19;
        }
        else
        {
          v5 = *(_QWORD *)(v1 + 8 * v3);
          swift_retain(v5);
          v6 = v3 - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        v32 = v6;
        v7 = *(void **)(v5 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_entry);
        KeyPath = swift_getKeyPath(&unk_100092B38);
        v33 = v5;
        v9 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
        v10 = v7;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v33, KeyPath, v9);
        swift_release(KeyPath, v11);
        v12 = *(_QWORD *)(v5 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer + 8);
        swift_bridgeObjectRetain(v12);
        v13 = objc_msgSend(v10, "answerOptions");
        v14 = objc_msgSend(v10, "question");
        v15 = v14;
        if (v14)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
          v17 = v16;

          v15 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v17);
        }
        if (v12)
        {
          v18 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v12);
        }
        else
        {
          v18 = 0;
        }
        v19 = objc_msgSend(objc_allocWithZone((Class)TCSmartReplyUserQuestionnaireEntry), "initWithAnswerOptions:question:selectedOption:defaultOption:", v13, v15, v18, 0);

        if (!v19)
          break;
        v20 = v19;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v22 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v21 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v22 >= v21 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
        specialized Array._endMutation()(v23);
        swift_release(v5, v24);

        ++v3;
        v1 = v30;
        if (v32 == v2)
        {
          swift_bridgeObjectRelease(v30);
          v25 = (_QWORD *)v34;
          goto LABEL_25;
        }
      }
      __break(1u);
      goto LABEL_28;
    }
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v2)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease(v1);
  v25 = _swiftEmptyArrayStorage;
LABEL_25:
  v27 = objc_allocWithZone((Class)TCSmartReplyUserQuestionnaire);
  sub_100021548(0, &qword_1000C87E8, TCSmartReplyUserQuestionnaireEntry_ptr);
  swift_bridgeObjectRetain(v25);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v25);
  v29 = objc_msgSend(v27, "initWithEntries:", isa);

  if (v29)
  {
    swift_bridgeObjectRelease(v34);
    return;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1000213F8()
{
  uint64_t *v0;

  return sub_10007D3AC(v0[2], v0[3], v0[4]);
}

uint64_t sub_100021414()
{
  uint64_t v0;

  return sub_10000B554(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10002142C()
{
  _QWORD *v0;
  uint64_t v1;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4], v1);
  swift_unknownObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100021460(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1000C8804);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10002199C;
  return sub_100017C54(a1, v4, v5, v7, v6);
}

uint64_t sub_1000214DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1000C8814);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000070C8;
  return sub_1000184A8(a1, v4, v5, v6);
}

uint64_t sub_100021548(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100021580(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 16), a2);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
  return swift_deallocObject(v2, 32, 7);
}

void sub_1000215AC()
{
  uint64_t v0;

  sub_100018790(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000215B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000215C4(uint64_t a1, uint64_t a2)
{
  return swift_release(*(_QWORD *)(a1 + 40), a2);
}

unint64_t sub_1000215CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C8838;
  if (!qword_1000C8838)
  {
    v1 = sub_10000ABD0(&qword_1000C8830);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, &qword_1000C8838);
  }
  return result;
}

uint64_t sub_100021618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100021658@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000163DC(a1, (uint64_t)&unk_100092B68, &OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__hasEntries, a2);
}

void sub_100021680()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__hasEntries) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100021698()
{
  _QWORD *v0;

  return sub_100016E08(v0);
}

uint64_t (*sub_1000216A0())()
{
  uint64_t v0;

  swift_retain(v0);
  return sub_1000216D0;
}

uint64_t sub_1000216D0()
{
  uint64_t v0;

  return sub_100017138(v0);
}

uint64_t sub_1000216DC()
{
  uint64_t v0;
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32), v1);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100021708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1000C8844);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002199C;
  v3[2] = v2;
  v4 = (_QWORD *)swift_task_alloc(dword_1000C81FC);
  v3[3] = v4;
  *v4 = v3;
  v4[1] = sub_100017350;
  return sub_10001A8E8();
}

uint64_t sub_100021774(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004EAC((uint64_t *)&unk_1000C87F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000217B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 24), a2);
  return swift_deallocObject(v2, 32, 7);
}

uint64_t sub_1000217D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000CB034);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000070C8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000CB030 + dword_1000CB030))(a1, v4);
}

uint64_t sub_100021848()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_10002186C()
{
  uint64_t v0;
  void *v1;
  id result;

  v1 = *(void **)(v0 + 16);
  result = objc_msgSend(v1, "respondsToSelector:", "endTextPlaceholderAndWillInsertText:");
  if ((result & 1) != 0)
    return objc_msgSend(v1, "endTextPlaceholderAndWillInsertText:", 0);
  return result;
}

uint64_t sub_1000218BC()
{
  uint64_t v0;
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40), v1);

  return swift_deallocObject(v0, 56, 7);
}

void sub_1000218F8()
{
  uint64_t v0;

  sub_100018204(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t sub_100021910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000C8858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_100021958()
{
  uint64_t v0;

  sub_100021910(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__questionnaireRectRelativeToInputDashboard);
  return sub_100015EE8();
}

void sub_1000219B4()
{
  sub_100020F68();
}

void sub_1000219C8()
{
  sub_100020FA8();
}

void sub_1000219DC()
{
  sub_100020FC0();
}

void sub_1000219F0()
{
  sub_100021680();
}

uint64_t sub_100021A04()
{
  uint64_t result;

  sub_100007194();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000018, 0x80000001000AB470, 0x6973734174786554, 0xED0000746E617473);
  qword_1000C8860 = result;
  return result;
}

uint64_t sub_100021A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v36 = a4;
  v39 = a1;
  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C73D8 != -1)
    swift_once(&qword_1000C73D8, sub_1000063EC);
  v12 = type metadata accessor for Logger(0);
  sub_1000063D4(v12, (uint64_t)qword_1000D1C18);
  v13 = swift_bridgeObjectRetain_n(a5, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  v16 = os_log_type_enabled(v14, v15);
  v38 = a3;
  v37 = a2;
  if (v16)
  {
    v17 = swift_slowAlloc(22, -1);
    v35 = v11;
    v18 = v17;
    v19 = swift_slowAlloc(64, -1);
    v41 = v19;
    *(_DWORD *)v18 = 136315394;
    v20 = StaticString.description.getter(v39, a2, a3);
    v21 = v9;
    v22 = v8;
    v24 = v23;
    v40 = sub_10006DCA8(v20, v23, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v18 + 4, v18 + 12);
    v25 = v24;
    v8 = v22;
    v9 = v21;
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain(a5);
    v26 = v36;
    v40 = sub_10006DCA8(v36, a5, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease_n(a5, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "End signpost for %s, result = %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    v27 = v18;
    v11 = v35;
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a5, 2);
    v26 = v36;
  }
  v28 = static os_signpost_type_t.end.getter();
  if (qword_1000C7400 != -1)
    swift_once(&qword_1000C7400, sub_100021A04);
  v29 = qword_1000C8860;
  v30 = sub_100004EAC(&qword_1000C7758);
  v31 = swift_allocObject(v30, 72, 7);
  *(_OWORD *)(v31 + 16) = xmmword_100092910;
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 64) = sub_100007150();
  *(_QWORD *)(v31 + 32) = v26;
  *(_QWORD *)(v31 + 40) = a5;
  v32 = swift_bridgeObjectRetain(a5);
  static OSSignpostID.exclusive.getter(v32);
  os_signpost(_:dso:log:name:signpostID:_:_:)(v28, &_mh_execute_header, v29, v39, v37, v38, v11, "%{public,name=Result}@", 22, 2, v31);
  swift_bridgeObjectRelease(v31);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100021DA8(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if (!a4)
    return ((uint64_t (*)(const char *, uint64_t))((char *)&loc_100021E08
                                                          + 4 * byte_100092BC8[result]))("ProofreadGeneration", 19);
  if (a4 != 1 && a3 | a2 | result && result == 1 && !(a3 | a2))
    return sub_100021A6C((uint64_t)"ProofreadGeneration", 19, 2, a5, a6);
  return result;
}

void sub_100021E38()
{
  JUMPOUT(0x100021E28);
}

void sub_100021E48()
{
  JUMPOUT(0x100021E28);
}

uint64_t sub_100021E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for OSSignpostID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C73D8 != -1)
    swift_once(&qword_1000C73D8, sub_1000063EC);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_1000063D4(v10, (uint64_t)qword_1000D1C18);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  v14 = os_log_type_enabled(v12, v13);
  v31 = a1;
  v32 = a2;
  if (v14)
  {
    v15 = swift_slowAlloc(12, -1);
    v30 = v6;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc(32, -1);
    v29 = v7;
    v18 = v17;
    v34 = v17;
    *(_DWORD *)v16 = 136315138;
    v19 = a2;
    v20 = a3;
    v21 = StaticString.description.getter(a1, v19, a3);
    v23 = v22;
    v33 = sub_10006DCA8(v21, v22, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Begin signpost for %s", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v24 = v18;
    v7 = v29;
    swift_slowDealloc(v24, -1, -1);
    v25 = v16;
    v6 = v30;
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    v20 = a3;
  }

  v26 = static os_signpost_type_t.begin.getter();
  if (qword_1000C7400 != -1)
    swift_once(&qword_1000C7400, sub_100021A04);
  v27 = qword_1000C8860;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v26, &_mh_execute_header, v27, v31, v32, v20, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000220A8(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (!a4)
    return ((uint64_t (*)(const char *, uint64_t))((char *)&loc_100022108
                                                          + 4 * byte_100092BD2[result]))("ProofreadGeneration", 19);
  if (a4 != 1 && a3 | a2 | result && result == 1 && !(a3 | a2))
    return sub_100021E58((uint64_t)"ProofreadGeneration", 19, 2);
  return result;
}

uint64_t sub_100022134()
{
  return sub_100021E58((uint64_t)"RewriteGeneration", 17, 2);
}

void destroy for RichTextView(uint64_t a1, uint64_t a2)
{
  swift_release(*(_QWORD *)a1, a2);

}

uint64_t initializeWithCopy for RichTextView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  id v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = (void *)a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  swift_retain(v3);
  v6 = v5;
  return a1;
}

uint64_t *assignWithCopy for RichTextView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6, v7);
  v8 = (void *)a1[2];
  v9 = (void *)a2[2];
  a1[2] = (uint64_t)v9;
  v10 = v9;

  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  return a1;
}

__n128 initializeWithTake for Mode(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for RichTextView(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  void *v6;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5, a2);
  v6 = (void *)a1[2];
  a1[2] = a2[2];

  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for RichTextView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RichTextView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RichTextView()
{
  return &type metadata for RichTextView;
}

void sub_100022358()
{
  qword_1000D1C88 = 0x4008000000000000;
}

char *sub_100022368()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  char *result;
  id v14;
  unint64_t v15;

  v1 = objc_msgSend(v0, "string");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v5 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return (char *)swift_bridgeObjectRelease(v4);
  while (1)
  {
    v6 = ((v4 >> 60) & ((v2 & 0x800000000000000) == 0)) != 0 ? 11 : 7;
    v7 = String.index(before:)(v6 | (v5 << 16), v2, v4);
    v8 = String.subscript.getter(v7, v2, v4);
    v10 = v9;
    swift_bridgeObjectRelease(v4);
    if (v8 == 10 && v10 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease(0xE100000000000000);
    }
    else
    {
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, 10, 0xE100000000000000, 0);
      result = (char *)swift_bridgeObjectRelease(v10);
      if ((v12 & 1) == 0)
        return result;
    }
    result = (char *)objc_msgSend(v0, "length");
    if (__OFSUB__(result, 1))
      break;
    objc_msgSend(v0, "deleteCharactersInRange:", result - 1, 1);
    v14 = objc_msgSend(v0, "string");
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v4 = v15;

    v5 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v5 = v2 & 0xFFFFFFFFFFFFLL;
    if (!v5)
      return (char *)swift_bridgeObjectRelease(v4);
  }
  __break(1u);
  return result;
}

id sub_1000224F8()
{
  void *v0;
  id result;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[32];

  result = objc_msgSend(v0, "length");
  if (result)
  {
    v2 = objc_msgSend(v0, "attribute:atIndex:effectiveRange:", NSParagraphStyleAttributeName, 0, 0);
    if (v2)
    {
      v3 = v2;
      _bridgeAnyObjectToAny(_:)(&v12, v2);
      swift_unknownObjectRelease(v3);
    }
    else
    {
      v12 = 0u;
      v13 = 0u;
    }
    sub_1000233AC((uint64_t)&v12, (uint64_t)v14);
    sub_100023364((uint64_t)v14, (uint64_t)&v12);
    if (*((_QWORD *)&v13 + 1))
    {
      v4 = sub_100021548(0, &qword_1000C8878, NSParagraphStyle_ptr);
      if ((swift_dynamicCast(&v11, &v12, (char *)&type metadata for Any + 8, v4, 6) & 1) != 0)
      {
        v5 = v11;
        v6 = objc_msgSend(v11, "textLists");
        v7 = sub_100021548(0, &qword_1000C8888, NSTextList_ptr);
        v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

        if ((unint64_t)v8 >> 62)
        {
          if (v8 < 0)
            v10 = v8;
          else
            v10 = v8 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v8);
          v9 = _CocoaArrayWrapper.endIndex.getter(v10);

          swift_bridgeObjectRelease_n(v8, 2);
        }
        else
        {
          v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRelease(v8);

        }
        sub_100007110((uint64_t)v14);
        return (id)(v9 >= 1);
      }
    }
    else
    {
      sub_100007110((uint64_t)&v12);
    }
    sub_100007110((uint64_t)v14);
    return 0;
  }
  return result;
}

void sub_1000226A8()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  Class isa;
  id v8;
  unint64_t v9;
  id v10;
  Class v11;
  id v12;
  uint64_t v13;
  Class v14;
  id v15;
  id v16;

  v1 = v0;
  if ((sub_1000224F8() & 1) != 0)
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
    if (qword_1000C7408 != -1)
      swift_once(&qword_1000C7408, sub_100022358);
    objc_msgSend(v2, "setLineSpacing:", *(double *)&qword_1000D1C88);
    objc_msgSend(v2, "setHeadIndent:", 18.0);
    v3 = sub_100004EAC((uint64_t *)&unk_1000C7570);
    v15 = v2;
    v4 = swift_allocObject(v3, 48, 7);
    *(_OWORD *)(v4 + 16) = xmmword_100092BE0;
    v5 = sub_100062578((uint64_t)_swiftEmptyArrayStorage);
    v6 = objc_allocWithZone((Class)NSTextTab);
    type metadata accessor for OptionKey(0);
    sub_100005900(&qword_1000C7640, (uint64_t (*)(uint64_t))type metadata accessor for OptionKey, (uint64_t)&unk_100091E6C);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v5);
    v8 = objc_msgSend(v6, "initWithTextAlignment:location:options:", 0, isa, 5.0);

    *(_QWORD *)(v4 + 32) = v8;
    v9 = sub_100062578((uint64_t)_swiftEmptyArrayStorage);
    v10 = objc_allocWithZone((Class)NSTextTab);
    v11 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    v12 = objc_msgSend(v10, "initWithTextAlignment:location:options:", 0, v11, 18.0);

    *(_QWORD *)(v4 + 40) = v12;
    specialized Array._endMutation()(v13);
    sub_100021548(0, &qword_1000C8870, NSTextTab_ptr);
    v14 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
    objc_msgSend(v15, "setTabStops:", v14);

    v16 = v15;
    objc_msgSend(v1, "addAttribute:value:range:", NSParagraphStyleAttributeName, v16, 0, objc_msgSend(v1, "length"));

  }
}

void sub_100022960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD v14[4];

  sub_100023364(a1, (uint64_t)v14);
  if (v14[3])
  {
    v8 = sub_100021548(0, &qword_1000C8878, NSParagraphStyle_ptr);
    if ((swift_dynamicCast(&v13, v14, (char *)&type metadata for Any + 8, v8, 6) & 1) != 0)
    {
      v9 = v13;
      v10 = objc_msgSend(v13, "mutableCopy");
      _bridgeAnyObjectToAny(_:)(v14, v10);
      swift_unknownObjectRelease(v10);
      v11 = sub_100021548(0, &qword_1000C8880, NSMutableParagraphStyle_ptr);
      swift_dynamicCast(&v13, v14, (char *)&type metadata for Any + 8, v11, 7);
      v12 = v13;
      objc_msgSend(v13, "setSecondaryLineBreakMode:", 2);
      objc_msgSend(a5, "removeAttribute:range:", NSParagraphStyleAttributeName, a2, a3);
      objc_msgSend(a5, "addAttribute:value:range:", NSParagraphStyleAttributeName, v12, a2, a3);

    }
  }
  else
  {
    sub_100007110((uint64_t)v14);
  }
}

uint64_t sub_100022AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(__int128 *, uint64_t, uint64_t, uint64_t);
  __int128 v11;
  __int128 v12;

  v9 = *(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    *((_QWORD *)&v12 + 1) = swift_getObjectType(a2);
    *(_QWORD *)&v11 = a2;
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  swift_unknownObjectRetain(a2, a2);
  v9(&v11, a3, a4, a5);
  return sub_100007110((uint64_t)&v11);
}

id sub_100022B40(uint64_t a1)
{
  uint64_t v1;

  return sub_100022E3C(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8), *(_BYTE *)(v1 + 24));
}

void sub_100022B50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10002305C(a2, *(_QWORD *)v2, *(_BYTE *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24));
}

uint64_t sub_100022B70(uint64_t a1, char a2, int a3, int a4, id a5, double a6, double a7, double a8, double a9)
{
  double v10;

  if ((a2 & 1) != 0)
    return 0;
  LODWORD(a8) = 1148846080;
  LODWORD(a9) = 1144750080;
  objc_msgSend(a5, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", *(double *)&a1, 1.79769313e308, a8, a9);
  if (v10 < *(double *)&a1)
    v10 = *(double *)&a1;
  return *(_QWORD *)&v10;
}

uint64_t sub_100022BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100023414();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100022C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100023414();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100022C8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100023414();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_100022CB4()
{
  unint64_t result;

  result = qword_1000C8868;
  if (!qword_1000C8868)
  {
    result = swift_getWitnessTable(&unk_100092C04, &type metadata for RichTextView);
    atomic_store(result, (unint64_t *)&qword_1000C8868);
  }
  return result;
}

uint64_t sub_100022CF8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100092CE8);
  v8 = v3;
  v5 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath, v6);
  result = swift_unknownObjectWeakLoadStrong(v3 + 56);
  *a2 = result;
  return result;
}

void sub_100022D88(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100092CE8);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100023458, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v7);

}

id sub_100022E3C(uint64_t a1, uint64_t a2, char a3, char a4)
{
  char v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  double v19;
  double v20;
  id v21;
  _QWORD v23[5];
  uint64_t v24;

  v6 = a3 & 1;
  v7 = objc_msgSend(objc_allocWithZone((Class)UITextView), "init");
  v8 = swift_retain(a2);
  v9 = sub_100046370(v8, v6);
  swift_release(a2, v10);
  KeyPath = swift_getKeyPath(&unk_100092CE8);
  v23[2] = v9;
  v23[3] = v7;
  v24 = v9;
  v12 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  v13 = v7;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, KeyPath, sub_1000233FC, v23, (char *)&type metadata for () + 8, v12);
  swift_release(v9, v14);
  swift_release(KeyPath, v15);

  if ((a4 & 1) != 0)
  objc_msgSend(v13, "setWritingToolsBehavior:", -1);
  objc_msgSend(v13, "setEditable:", 0);
  v16 = (void *)objc_opt_self(UIColor);
  v17 = v13;
  v18 = objc_msgSend(v16, "clearColor");
  objc_msgSend(v17, "setBackgroundColor:", v18);

  objc_msgSend(v17, "setScrollEnabled:", 0);
  LODWORD(v19) = 1148846080;
  objc_msgSend(v17, "setContentCompressionResistancePriority:forAxis:", 0, v19);
  LODWORD(v20) = 1148846080;
  objc_msgSend(v17, "setContentCompressionResistancePriority:forAxis:", 1, v20);
  v21 = v17;
  objc_msgSend(v21, "frame");
  objc_msgSend(v21, "setFrame:");

  return v21;
}

void sub_10002305C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  char isEscapingClosureAtFileLocation;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;

  v8 = a3 & 1;
  swift_retain(a2);
  v9 = sub_100046370(a2, v8);
  swift_release(a2, v10);
  if (!a4)
    goto LABEL_7;
  v11 = objc_msgSend((id)objc_opt_self(TCAttributedStringDigest), "presentableAttributedString:withAttributes:", a4, 0);
  v12 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "initWithAttributedString:", v11);
  sub_100022368();
  v13 = objc_msgSend(v12, "length");
  v14 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  objc_msgSend(v12, "addAttribute:value:range:", NSForegroundColorAttributeName, v14, 0, v13);

  if ((sub_1000224F8() & 1) != 0)
    sub_1000226A8();
  if ((a5 & 1) == 0)
  {

    goto LABEL_9;
  }
  v15 = objc_msgSend(v12, "length");
  v16 = swift_allocObject(&unk_1000BF198, 24, 7);
  *(_QWORD *)(v16 + 16) = v12;
  v17 = swift_allocObject(&unk_1000BF1C0, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_100023314;
  *(_QWORD *)(v17 + 24) = v16;
  v26[4] = sub_10002332C;
  v27 = v17;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 1107296256;
  v26[2] = sub_100022AB8;
  v26[3] = &unk_1000BF1D8;
  v18 = _Block_copy(v26);
  v19 = v27;
  v20 = v12;
  swift_retain(v17);
  swift_release(v19, v21);
  objc_msgSend(v20, "enumerateAttribute:inRange:options:usingBlock:", NSParagraphStyleAttributeName, 0, v15, 0, v18);
  _Block_release(v18);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v17, "", 93, 78, 100, 1);

  swift_release(v16, v23);
  swift_release(v17, v24);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_7:
    v12 = 0;
  }
LABEL_9:
  sub_100056D54(v12);
  swift_release(v9, v25);

}

uint64_t sub_1000232F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100023314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_100022960(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t sub_10002331C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002332C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10002334C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002335C(uint64_t a1, uint64_t a2)
{
  return swift_release(*(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_100023364(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000C7750);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000233AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000C7750);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000233FC()
{
  uint64_t v0;

  return sub_10005646C(*(_QWORD *)(v0 + 16));
}

unint64_t sub_100023414()
{
  unint64_t result;

  result = qword_1000C8890;
  if (!qword_1000C8890)
  {
    result = swift_getWitnessTable(&unk_100092C54, &type metadata for RichTextView);
    atomic_store(result, (unint64_t *)&qword_1000C8890);
  }
  return result;
}

uint64_t sub_100023458()
{
  return sub_1000233FC();
}

uint64_t sub_10002346C(uint64_t a1)
{
  NSString v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  void *object;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  void *v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  void *v34;
  Swift::String v36;
  _QWORD v37[2];
  __int128 v38;
  __int128 v39;

  v2 = String._bridgeToObjectiveC()();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  if (*(_QWORD *)(a1 + 16) && (v6 = sub_10001CD50(v3, v5), (v7 & 1) != 0))
  {
    sub_1000071D0(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v38);
    swift_bridgeObjectRelease(v5);
    if (*((_QWORD *)&v39 + 1))
    {
      if (swift_dynamicCast(v37, &v38, (char *)&type metadata for Any + 8, &type metadata for String, 6))return v37[0];
      goto LABEL_8;
    }
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
    swift_bridgeObjectRelease(v5);
  }
  sub_10000AE2C((uint64_t)&v38, &qword_1000C7750);
LABEL_8:
  v37[0] = 0;
  v37[1] = 0xE000000000000000;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(TCTextCompositionAssistantOptionKeyBaseModelIdentifier);
  v10 = v9;
  if (*(_QWORD *)(a1 + 16) && (v11 = sub_10001CD50(v8, v9), (v12 & 1) != 0))
  {
    sub_1000071D0(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v38);
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
  }
  swift_bridgeObjectRelease(v10);
  if (*((_QWORD *)&v39 + 1))
  {
    if ((swift_dynamicCast(&v36, &v38, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      object = v36._object;
      String.append(_:)(v36);
      swift_bridgeObjectRelease(object);
    }
  }
  else
  {
    sub_10000AE2C((uint64_t)&v38, &qword_1000C7750);
  }
  v14._countAndFlagsBits = 58;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(TCTextCompositionAssistantOptionKeyBaseModelVersion);
  v17 = v16;
  if (*(_QWORD *)(a1 + 16) && (v18 = sub_10001CD50(v15, v16), (v19 & 1) != 0))
  {
    sub_1000071D0(*(_QWORD *)(a1 + 56) + 32 * v18, (uint64_t)&v38);
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
  }
  swift_bridgeObjectRelease(v17);
  if (*((_QWORD *)&v39 + 1))
  {
    if ((swift_dynamicCast(&v36, &v38, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v20 = v36._object;
      String.append(_:)(v36);
      swift_bridgeObjectRelease(v20);
    }
  }
  else
  {
    sub_10000AE2C((uint64_t)&v38, &qword_1000C7750);
  }
  v21._countAndFlagsBits = 124;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(TCTextCompositionAssistantOptionKeyModelIdentifier);
  v24 = v23;
  if (*(_QWORD *)(a1 + 16) && (v25 = sub_10001CD50(v22, v23), (v26 & 1) != 0))
  {
    sub_1000071D0(*(_QWORD *)(a1 + 56) + 32 * v25, (uint64_t)&v38);
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
  }
  swift_bridgeObjectRelease(v24);
  if (*((_QWORD *)&v39 + 1))
  {
    if ((swift_dynamicCast(&v36, &v38, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v27 = v36._object;
      String.append(_:)(v36);
      swift_bridgeObjectRelease(v27);
    }
  }
  else
  {
    sub_10000AE2C((uint64_t)&v38, &qword_1000C7750);
  }
  v28._countAndFlagsBits = 58;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(TCTextCompositionAssistantOptionKeyModelVersion);
  v31 = v30;
  if (*(_QWORD *)(a1 + 16) && (v32 = sub_10001CD50(v29, v30), (v33 & 1) != 0))
  {
    sub_1000071D0(*(_QWORD *)(a1 + 56) + 32 * v32, (uint64_t)&v38);
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
  }
  swift_bridgeObjectRelease(v31);
  if (*((_QWORD *)&v39 + 1))
  {
    if ((swift_dynamicCast(&v36, &v38, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v34 = v36._object;
      String.append(_:)(v36);
      swift_bridgeObjectRelease(v34);
    }
  }
  else
  {
    sub_10000AE2C((uint64_t)&v38, &qword_1000C7750);
  }
  return v37[0];
}

uint64_t sub_10002383C(uint64_t a1)
{
  NSString v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v2 = String._bridgeToObjectiveC()();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  if (!*(_QWORD *)(a1 + 16) || (v6 = sub_10001CD50(v3, v5), (v7 & 1) == 0))
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease(v5);
    goto LABEL_7;
  }
  sub_1000071D0(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v10);
  swift_bridgeObjectRelease(v5);
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_7:
    sub_10000AE2C((uint64_t)&v10, &qword_1000C7750);
    return 0;
  }
  if ((swift_dynamicCast(&v9, &v10, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    return v9;
  return 0;
}

uint64_t sub_100023928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  Swift::String v54;
  Swift::String v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  void *v64;
  void *v65;
  Swift::String v66;
  Swift::String v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90[3];
  uint64_t v91;
  unint64_t v92;

  v2 = sub_100004EAC(&qword_1000C8898);
  v3 = __chkstk_darwin(v2);
  v87 = (uint64_t)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v86 = (char *)&v83 - v6;
  v7 = __chkstk_darwin(v5);
  v85 = (char *)&v83 - v8;
  v9 = __chkstk_darwin(v7);
  v84 = (char *)&v83 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v83 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v83 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v83 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v83 - v20;
  v91 = 0;
  v92 = 0xE000000000000000;
  sub_100024044(a1, (uint64_t)&v83 - v20);
  v22 = type metadata accessor for InferenceEnvironmentInfo(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v21, 1, v22);
  v88 = v23;
  if (v25 == 1)
  {
    sub_10000AE2C((uint64_t)v21, &qword_1000C8898);
  }
  else
  {
    v26 = InferenceEnvironmentInfo.baseModelIdentifier.getter();
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
    if (v28)
    {
      v29._countAndFlagsBits = v26;
      v29._object = v28;
      String.append(_:)(v29);
      swift_bridgeObjectRelease(v28);
    }
  }
  v30._countAndFlagsBits = 58;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  sub_100024044(a1, (uint64_t)v19);
  v31 = v24(v19, 1, v22);
  v32 = (uint64_t)v84;
  if (v31 == 1)
  {
    sub_10000AE2C((uint64_t)v19, &qword_1000C8898);
  }
  else
  {
    v33 = InferenceEnvironmentInfo.baseModelVersion.getter();
    v35 = v34;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v19, v22);
    if (v35)
    {
      v36._countAndFlagsBits = v33;
      v36._object = v35;
      String.append(_:)(v36);
      swift_bridgeObjectRelease(v35);
    }
  }
  v37._countAndFlagsBits = 124;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  sub_100024044(a1, (uint64_t)v16);
  if (v24(v16, 1, v22) == 1)
  {
    sub_10000AE2C((uint64_t)v16, &qword_1000C8898);
    v38 = v88;
  }
  else
  {
    v39 = InferenceEnvironmentInfo.modelIdentifier.getter();
    v41 = v40;
    v38 = v88;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v16, v22);
    if (v41)
    {
      v42._countAndFlagsBits = v39;
      v42._object = v41;
      String.append(_:)(v42);
      swift_bridgeObjectRelease(v41);
    }
  }
  v43._countAndFlagsBits = 58;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  sub_100024044(a1, (uint64_t)v13);
  if (v24(v13, 1, v22) == 1)
  {
    sub_10000AE2C((uint64_t)v13, &qword_1000C8898);
  }
  else
  {
    v44 = InferenceEnvironmentInfo.modelVersion.getter();
    v46 = v45;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v22);
    if (v46)
    {
      v47._countAndFlagsBits = v44;
      v47._object = v46;
      String.append(_:)(v47);
      swift_bridgeObjectRelease(v46);
    }
  }
  v48._countAndFlagsBits = 124;
  v48._object = (void *)0xE100000000000000;
  String.append(_:)(v48);
  sub_100024044(a1, v32);
  v49 = v24((char *)v32, 1, v22);
  v50 = (uint64_t)v85;
  if (v49 == 1)
  {
    sub_10000AE2C(v32, &qword_1000C8898);
  }
  else
  {
    v51 = InferenceEnvironmentInfo.tokenizerIdentifier.getter();
    v53 = v52;
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v32, v22);
    if (v53)
    {
      v54._countAndFlagsBits = v51;
      v54._object = v53;
      String.append(_:)(v54);
      swift_bridgeObjectRelease(v53);
    }
  }
  v55._countAndFlagsBits = 58;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  sub_100024044(a1, v50);
  v56 = v24((char *)v50, 1, v22);
  v57 = (uint64_t)v86;
  if (v56 == 1)
  {
    sub_10000AE2C(v50, &qword_1000C8898);
  }
  else
  {
    v58 = InferenceEnvironmentInfo.tokenizerVersion.getter();
    v60 = v59;
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v50, v22);
    if (v60)
    {
      v61._countAndFlagsBits = v58;
      v61._object = v60;
      String.append(_:)(v61);
      swift_bridgeObjectRelease(v60);
    }
  }
  v62._countAndFlagsBits = 124;
  v62._object = (void *)0xE100000000000000;
  String.append(_:)(v62);
  sub_100024044(a1, v57);
  if (v24((char *)v57, 1, v22) == 1)
  {
    sub_10000AE2C(v57, &qword_1000C8898);
  }
  else
  {
    v63 = InferenceEnvironmentInfo.draftModelIdentifier.getter();
    v65 = v64;
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v57, v22);
    if (v65)
    {
      v66._countAndFlagsBits = v63;
      v66._object = v65;
      String.append(_:)(v66);
      swift_bridgeObjectRelease(v65);
    }
  }
  v67._countAndFlagsBits = 58;
  v67._object = (void *)0xE100000000000000;
  String.append(_:)(v67);
  v68 = v87;
  sub_100024044(a1, v87);
  if (v24((char *)v68, 1, v22) == 1)
  {
    sub_10000AE2C(v68, &qword_1000C8898);
  }
  else
  {
    v69 = InferenceEnvironmentInfo.draftModelVersion.getter();
    v71 = v70;
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v68, v22);
    if (v71)
    {
      v72._countAndFlagsBits = v69;
      v72._object = v71;
      String.append(_:)(v72);
      swift_bridgeObjectRelease(v71);
    }
  }
  v73._countAndFlagsBits = 124;
  v73._object = (void *)0xE100000000000000;
  String.append(_:)(v73);
  if (qword_1000C73E0 != -1)
    swift_once(&qword_1000C73E0, sub_10000646C);
  v74 = type metadata accessor for Logger(0);
  sub_1000063D4(v74, (uint64_t)qword_1000D1C30);
  v76 = v91;
  v75 = v92;
  v77 = swift_bridgeObjectRetain_n(v92, 2);
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.info.getter(v78);
  if (os_log_type_enabled(v78, v79))
  {
    v80 = (uint8_t *)swift_slowAlloc(12, -1);
    v81 = swift_slowAlloc(32, -1);
    v90[0] = v81;
    *(_DWORD *)v80 = 136315138;
    swift_bridgeObjectRetain(v75);
    v89 = sub_10006DCA8(v76, v75, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v80 + 4, v80 + 12);
    swift_bridgeObjectRelease_n(v75, 3);
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Calculate model info string = %s", v80, 0xCu);
    swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v80, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v75, 2);
  }
  swift_beginAccess(&v91, v90, 0, 0);
  return v91;
}

uint64_t sub_100024044(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000C8898);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_10002419C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *ObjCClassFromMetadata;
  NSString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = type metadata accessor for AppDelegate();
  v4 = static CommandLine.unsafeArgv.getter();
  v5 = ((uint64_t (*)(void))static CommandLine.argc.getter)();
  v6 = static CommandLine.argc.getter(v5);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v3);
  v8 = NSStringFromClass(ObjCClassFromMetadata);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  LODWORD(v8) = UIApplicationMain(_:_:_:_:)(v6, v4, 0, 0, v9, v11);
  swift_bridgeObjectRelease(v11);
  exit((int)v8);
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC21WritingToolsUIService11AppDelegate);
}

uint64_t sub_100024274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(v2 + 16), a2);
  swift_release(*(_QWORD *)(v2 + 24), v3);
  sub_10000A880(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_BYTE *)(v2 + 56));
  sub_100024460(v2 + OBJC_IVAR____TtC21WritingToolsUIService17WritingToolsModel__gmsAvailability);
  sub_10000C714(v2 + OBJC_IVAR____TtC21WritingToolsUIService17WritingToolsModel__writingToolsDelegate);
  v4 = v2 + OBJC_IVAR____TtC21WritingToolsUIService17WritingToolsModel___observationRegistrar;
  v5 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocClassInstance(v2, *(unsigned int *)(*(_QWORD *)v2 + 48), *(unsigned __int16 *)(*(_QWORD *)v2 + 52));
}

uint64_t sub_100024304()
{
  return type metadata accessor for WritingToolsModel(0);
}

uint64_t type metadata accessor for WritingToolsModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000C89E8;
  if (!qword_1000C89E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WritingToolsModel);
  return result;
}

void sub_100024348(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v6[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[2] = &unk_100092D68;
  sub_10002440C(319);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    v6[4] = &unk_100092D80;
    v6[5] = &unk_100092D98;
    v6[6] = &unk_100092DB0;
    v6[7] = &unk_100092D98;
    v4 = type metadata accessor for ObservationRegistrar(319);
    if (v5 <= 0x3F)
    {
      v6[8] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 9, v6, a1 + 80);
    }
  }
}

void sub_10002440C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000C89F8)
  {
    v2 = type metadata accessor for GenerativeModelsAvailability.Availability(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000C89F8);
  }
}

uint64_t sub_100024460(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004EAC((uint64_t *)&unk_1000C8CA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000244A0()
{
  unint64_t result;

  result = sub_10006284C((uint64_t)_swiftEmptyArrayStorage);
  qword_1000D1C90 = result;
  return result;
}

uint64_t sub_1000244C4()
{
  return sub_1000244FC((uint64_t)&unk_100093148, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__isForEditableContent);
}

uint64_t sub_1000244D8(uint64_t result, char a2)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__isForEditableContent) = a2;
  return result;
}

uint64_t sub_1000244E8()
{
  return sub_1000244FC((uint64_t)&unk_100093170, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__wantsInlineEditing);
}

uint64_t sub_1000244FC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  KeyPath = swift_getKeyPath(a1);
  v8 = v2;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath, v6);
  return *(unsigned __int8 *)(v2 + *a2);
}

uint64_t sub_100024578(uint64_t result, char a2)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__wantsInlineEditing) = a2;
  return result;
}

uint64_t sub_100024588()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  KeyPath = swift_getKeyPath(&unk_100092E78);
  v17 = v0;
  v2 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, KeyPath, v2);
  swift_release(KeyPath, v3);
  v4 = *(unsigned __int8 *)(v0 + 56);
  if (v4 == 255)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = swift_getKeyPath(&unk_100093148);
  v17 = v0;
  sub_10000B060(v5, v6, v7, v4);
  v9 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, v8, v9);
  swift_release(v8, v10);
  v11 = swift_getKeyPath(&unk_100093170);
  v17 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, v11, v9);
  swift_release(v11, v12);
  v13 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__wantsInlineEditing);
  v14 = swift_getKeyPath(&unk_100093120);
  v17 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v17, v14, v9);
  swift_release(v14, v15);
  if (v13 == 1)
  {
    if (!v4)
    {
      sub_10000B11C(v5, v6, v7, 0);
      __asm { BR              X10 }
    }
LABEL_7:
    v17 = 0;
    v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease(v18);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000069, 0x80000001000AC0C0, "WritingToolsUIService/RewritingModel.swift", 42, 2, 346, 0);
    __break(1u);
    JUMPOUT(0x1000247ECLL);
  }
  sub_10000B11C(v5, v6, v7, v4);
  return 0;
}

uint64_t sub_100024814()
{
  return sub_100025C10((uint64_t)&unk_100093120, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__allowedResultOptions);
}

uint64_t sub_100024828(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__allowedResultOptions) = a2;
  return result;
}

void *sub_100024838(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100092EA0);
  v45[0] = v1;
  v8 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v45, KeyPath, v8);
  result = (void *)swift_release(KeyPath, v9);
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session))
  {
    v40 = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session;
    v41 = v6;
    v42 = v4;
    v43 = v3;
    v11 = swift_getKeyPath(&unk_100092F18);
    __chkstk_darwin(v11);
    *(&v39 - 2) = v1;
    *(&v39 - 1) = 0;
    v45[0] = v1;
    v12 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v45, v11, sub_100021414, &v39 - 4, (char *)&type metadata for () + 8, v12);
    swift_release(v11, v13);
    v14 = swift_getKeyPath(&unk_100092F40);
    __chkstk_darwin(v14);
    *(&v39 - 2) = v1;
    *(&v39 - 1) = 0;
    v45[0] = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v45, v14, sub_10002CF04, &v39 - 4, (char *)&type metadata for () + 8, v8);
    swift_release(v14, v15);
    v16 = swift_getKeyPath(&unk_100092F68);
    __chkstk_darwin(v16);
    *(&v39 - 3) = 0;
    *(&v39 - 2) = 0;
    *(&v39 - 4) = v1;
    *((_BYTE *)&v39 - 8) = 1;
    v45[0] = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v45, v16, sub_10002CF20, &v39 - 6, (char *)&type metadata for () + 8, v8);
    swift_release(v16, v17);
    sub_10000C1D4(0);
    v18 = swift_getKeyPath(&unk_100092F90);
    __chkstk_darwin(v18);
    *(&v39 - 2) = v1;
    *(&v39 - 1) = 0;
    v45[0] = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v45, v18, sub_10002CF3C, &v39 - 4, (char *)&type metadata for () + 8, v12);
    swift_release(v18, v19);
    v20 = swift_getKeyPath(&unk_100092FB8);
    __chkstk_darwin(v20);
    *(&v39 - 2) = v1;
    *((_BYTE *)&v39 - 8) = 0;
    v45[0] = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v45, v20, sub_10002CF5C, &v39 - 4, (char *)&type metadata for () + 8, v12);
    swift_release(v20, v21);
    v22 = sub_1000626A4((uint64_t)_swiftEmptyArrayStorage);
    v23 = swift_getKeyPath(&unk_100092FE0);
    __chkstk_darwin(v23);
    *(&v39 - 2) = v1;
    *(&v39 - 1) = v22;
    v45[0] = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v45, v23, sub_10002CFA0, &v39 - 4, (char *)&type metadata for () + 8, v8);
    swift_bridgeObjectRelease(v22);
    swift_release(v23, v24);
    v25 = sub_100062838((uint64_t)_swiftEmptyArrayStorage);
    v26 = swift_getKeyPath(&unk_100093008);
    __chkstk_darwin(v26);
    *(&v39 - 2) = v1;
    *(&v39 - 1) = v25;
    v45[0] = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v45, v26, sub_10002CFE8, &v39 - 4, (char *)&type metadata for () + 8, v8);
    swift_bridgeObjectRelease(v25);
    swift_release(v26, v27);
    if (qword_1000C7410 != -1)
      swift_once(&qword_1000C7410, sub_1000244A0);
    v28 = swift_getKeyPath(&unk_100092EA0);
    v45[0] = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v45, v28, v8);
    swift_release(v28, v29);
    v30 = (uint64_t)v41;
    result = *(void **)(v1 + v40);
    v32 = v42;
    v31 = v43;
    if (result)
    {
      v33 = objc_msgSend(result, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

      swift_beginAccess(&qword_1000D1C90, v45, 33, 0);
      swift_retain(v1);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(qword_1000D1C90);
      v44 = qword_1000D1C90;
      qword_1000D1C90 = 0x8000000000000000;
      sub_10001F1D4(v1, v30, isUniquelyReferenced_nonNull_native);
      v35 = qword_1000D1C90;
      qword_1000D1C90 = v44;
      swift_bridgeObjectRelease(v35);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
      return (void *)swift_endAccess(v45);
    }
    else
    {
      __break(1u);
    }
  }
  else if (a1)
  {
    if (qword_1000C7410 != -1)
      swift_once(&qword_1000C7410, sub_1000244A0);
    v36 = objc_msgSend(a1, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v36);

    swift_beginAccess(&qword_1000D1C90, v45, 33, 0);
    v37 = sub_10001D338((uint64_t)v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_endAccess(v45);
    return (void *)swift_release(v37, v38);
  }
  return result;
}

void *sub_100024E00()
{
  return sub_100025180((uint64_t)&unk_100092EA0, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session);
}

id sub_100024E14@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100092EA0);
  v9 = v3;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(void **)(v3 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session);
  *a2 = v7;
  return v7;
}

uint64_t sub_100024EA0(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v9[5];
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100092EA0);
  v9[2] = v3;
  v9[3] = v2;
  v10 = v3;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_10002D364, v9, (char *)&type metadata for () + 8, v5);

  return swift_release(KeyPath, v7);
}

void sub_100024F4C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session) = a2;
  v3 = a2;
  sub_100024838(v2);

}

uint64_t sub_100024FA4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100092EC8);
  v5 = v0;
  v2 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__task));
}

uint64_t sub_10002502C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100092EC8);
  v9 = v3;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__task);
  *a2 = v7;
  return swift_retain(v7);
}

uint64_t sub_1000250BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100092EC8);
  v9[2] = v3;
  v9[3] = v2;
  v10 = v3;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_10002D008, v9, (char *)&type metadata for () + 8, v5);
  swift_release(v2, v6);
  return swift_release(KeyPath, v7);
}

void *sub_10002516C()
{
  return sub_100025180((uint64_t)&unk_100092F40, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString);
}

void *sub_100025180(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v10;

  KeyPath = swift_getKeyPath(a1);
  v10 = v2;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(void **)(v2 + *a2);
  v8 = v7;
  return v7;
}

void sub_100025204(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString) = a2;
  v3 = a2;

}

uint64_t sub_10002523C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100092F68);
  v5 = v0;
  v2 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedStringRange);
}

__n128 sub_1000252C8@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  __n128 result;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100092F68);
  v9 = v3;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_BYTE *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedStringRange + 16);
  result = *(__n128 *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedStringRange);
  *a2 = result;
  a2[1].n128_u8[0] = v7;
  return result;
}

uint64_t sub_100025360(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  char v11;
  uint64_t v12;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = *a2;
  KeyPath = swift_getKeyPath(&unk_100092F68);
  v10[2] = v5;
  v10[3] = v2;
  v10[4] = v3;
  v11 = v4;
  v12 = v5;
  v7 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, sub_10002CF20, v10, (char *)&type metadata for () + 8, v7);
  return swift_release(KeyPath, v8);
}

uint64_t sub_100025410()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000930F8);
  v6 = v0;
  v2 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath, v3);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString + 8));
  return v4;
}

uint64_t sub_1000254A8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000930F8);
  v9 = v3;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString + 8);
  *a2 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString);
  a2[1] = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_10002553C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[7];
  uint64_t v10;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000930F8);
  v9[2] = v4;
  v9[3] = v3;
  v9[4] = v2;
  v10 = v4;
  v6 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_10002D128, v9, (char *)&type metadata for () + 8, v6);
  swift_bridgeObjectRelease(v2);
  return swift_release(KeyPath, v7);
}

uint64_t sub_1000255F0()
{
  return sub_1000256C8((uint64_t)&unk_100092FE0, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__sentFinishedResultToClientForContextUUID);
}

uint64_t sub_100025604(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100092FE0);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002D350, v8, (char *)&type metadata for () + 8, v5);
  swift_bridgeObjectRelease(v2);
  return swift_release(KeyPath, v6);
}

uint64_t sub_1000256B4()
{
  return sub_1000256C8((uint64_t)&unk_100093008, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__finishedResultForContextUUID);
}

uint64_t sub_1000256C8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[3];

  KeyPath = swift_getKeyPath(a1);
  v9[0] = v2;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = (_QWORD *)(v2 + *a2);
  swift_beginAccess(v7, v9, 0, 0);
  return swift_bridgeObjectRetain(*v7);
}

uint64_t sub_100025760@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD v13[3];

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v13[0] = v6;
  v8 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v13, KeyPath, v8);
  swift_release(KeyPath, v9);
  v10 = (uint64_t *)(v6 + *a3);
  swift_beginAccess(v10, v13, 0, 0);
  v11 = *v10;
  *a4 = *v10;
  return swift_bridgeObjectRetain(v11);
}

uint64_t sub_10002580C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100093008);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002D33C, v8, (char *)&type metadata for () + 8, v5);
  swift_bridgeObjectRelease(v2);
  return swift_release(KeyPath, v6);
}

uint64_t sub_1000258BC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (uint64_t *)(a1 + *a3);
  swift_beginAccess(v4, v7, 1, 0);
  v5 = *v4;
  *v4 = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_100025924()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100092EF0);
  v5 = v0;
  v2 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__showingOriginal);
}

uint64_t sub_1000259A8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100092EF0);
  v8 = v3;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  result = swift_release(KeyPath, v6);
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__showingOriginal);
  return result;
}

uint64_t sub_100025A34(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100092EF0);
  v8[2] = v3;
  v9 = v2;
  v10 = v3;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_10002CED8, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

void sub_100025AD4(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__showingOriginal;
  *(_BYTE *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__showingOriginal) = a2;
  Strong = swift_unknownObjectWeakLoadStrong(a1 + 16);
  if (Strong)
  {
    v5 = (void *)Strong;
    KeyPath = swift_getKeyPath(&unk_100092EA0);
    v14 = a1;
    v7 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v14, KeyPath, v7);
    swift_release(KeyPath, v8);
    v9 = *(void **)(a1 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session);
    if (v9)
    {
      v10 = swift_getKeyPath(&unk_100092EF0);
      v14 = a1;
      v11 = v9;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v14, v10, v7);
      swift_release(v10, v12);
      if (*(_BYTE *)(a1 + v3))
        v13 = 1;
      else
        v13 = 2;
      objc_msgSend(v5, "writingToolsSession:didReceiveAction:", v11, v13);
      swift_unknownObjectRelease(v5);

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_100025BFC()
{
  return sub_100025C10((uint64_t)&unk_1000930A8, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount);
}

uint64_t sub_100025C10(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  KeyPath = swift_getKeyPath(a1);
  v8 = v2;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath, v6);
  return *(_QWORD *)(v2 + *a2);
}

uint64_t sub_100025C8C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100025D64(a1, (uint64_t)&unk_1000930A8, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount, a2);
}

uint64_t sub_100025CA0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000930A8);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002D0F0, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_100025D3C()
{
  return sub_100025C10((uint64_t)&unk_100093080, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__redoCount);
}

uint64_t sub_100025D50@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100025D64(a1, (uint64_t)&unk_100093080, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__redoCount, a2);
}

uint64_t sub_100025D64@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v11 = v6;
  v8 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v8);
  result = swift_release(KeyPath, v9);
  *a4 = *(_QWORD *)(v6 + *a3);
  return result;
}

uint64_t sub_100025DF4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100093080);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002D104, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_100025E90()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v19 = 0;
  v20 = 0xE000000000000000;
  KeyPath = swift_getKeyPath(&unk_100092F18);
  v18 = v0;
  v2 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v18, KeyPath, v2);
  swift_release(KeyPath, v3);
  v4 = *(_QWORD *)(v0 + 64);
  if (!v4)
    return 0;
  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v4);
    if (v5)
      goto LABEL_4;
LABEL_16:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (v4 >= 0)
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  else
    v17 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain(v4);
  result = _CocoaArrayWrapper.endIndex.getter(v17);
  v5 = result;
  if (!result)
    goto LABEL_16;
LABEL_4:
  if (v5 < 1)
  {
    __break(1u);
  }
  else
  {
    v7 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
      else
        v8 = *(id *)(v4 + 8 * v7 + 32);
      v9 = v8;
      ++v7;
      v10 = objc_msgSend(v8, "attributedText");
      v11 = objc_msgSend(v10, "string");

      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v15._countAndFlagsBits = v12;
      v15._object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(v14);
      v16._countAndFlagsBits = 2128928;
      v16._object = (void *)0xE300000000000000;
      String.append(_:)(v16);

    }
    while (v5 != v7);
    swift_bridgeObjectRelease(v4);
    return v19;
  }
  return result;
}

uint64_t sub_100026058(char a1)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  void *object;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[3];
  _BYTE v26[8];

  v2 = (_QWORD *)v1;
  KeyPath = swift_getKeyPath(&unk_100093030);
  v23 = v1;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, KeyPath, v5);
  result = swift_release(KeyPath, v6);
  if ((*(_BYTE *)(v1 + 72) & 1) == 0 && (a1 & 1) != 0)
  {
    v8 = swift_getKeyPath(&unk_100093058);
    v23 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, v8, v5);
    swift_release(v8, v9);
    v10 = *(_QWORD *)(v1 + 80);
    if (v10)
    {
      swift_getErrorValue(*(_QWORD *)(v1 + 80), v26, v25);
      v11 = v25[1];
      v12 = v25[2];
      swift_errorRetain(v10);
      v13._countAndFlagsBits = Error.localizedDescription.getter(v11, v12);
      object = v13._object;
      v23 = 0xD000000000000011;
      v24 = 0x80000001000ABFD0;
      String.append(_:)(v13);
      swift_errorRelease(v10);
      swift_bridgeObjectRelease(object);
      v16 = v23;
      v15 = v24;
    }
    else
    {
      v15 = 0xEF73736563637553;
      v16 = 0x203A746C75736552;
    }
    v17 = swift_getKeyPath(&unk_100092E78);
    v23 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, v17, v5);
    result = swift_release(v17, v18);
    v19 = *(unsigned __int8 *)(v1 + 56);
    if (v19 == 255)
    {
      __break(1u);
    }
    else
    {
      v21 = v2[5];
      v20 = v2[6];
      v22 = v2[4];
      sub_10000B04C(v22, v21, v20, v19);
      sub_100021DA8(v22, v21, v20, v19, v16, v15);
      swift_bridgeObjectRelease(v15);
      return sub_10000B11C(v22, v21, v20, v19);
    }
  }
  return result;
}

uint64_t sub_100026250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = sub_100004EAC((uint64_t *)&unk_1000C87F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  type metadata accessor for MainActor(0);
  v6 = swift_retain(v0);
  v7 = static MainActor.shared.getter(v6);
  v8 = (_QWORD *)swift_allocObject(&unk_1000BF2C8, 40, 7);
  v8[2] = v7;
  v8[3] = &protocol witness table for MainActor;
  v8[4] = v1;
  v9 = sub_1000596DC((uint64_t)v4, (uint64_t)&unk_1000C9390, (uint64_t)v8);
  return swift_release(v9, v10);
}

uint64_t sub_10002632C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[7] = a4;
  v5 = type metadata accessor for UUID(0);
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v4[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v4[11] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v4[12] = v8;
  v4[13] = v9;
  return swift_task_switch(sub_1000263C0, v8, v9);
}

uint64_t sub_1000263C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 56);
  KeyPath = swift_getKeyPath(&unk_100092F18);
  *(_QWORD *)(v0 + 40) = v1;
  v3 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 40, KeyPath, v3);
  swift_release(KeyPath, v4);
  result = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v0 + 112) = result;
  if (result)
  {
    if ((unint64_t)result >> 62)
    {
      if (result >= 0)
        v33 = result & 0xFFFFFFFFFFFFFF8;
      else
        v33 = result;
      swift_bridgeObjectRetain(result);
      result = _CocoaArrayWrapper.endIndex.getter(v33);
      v6 = result;
      *(_QWORD *)(v0 + 120) = result;
      if (result)
        goto LABEL_4;
    }
    else
    {
      v6 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain(result);
      *(_QWORD *)(v0 + 120) = v6;
      if (v6)
      {
LABEL_4:
        v8 = *(_QWORD *)(v0 + 56);
        v9 = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__finishedResultForContextUUID;
        *(_QWORD *)(v0 + 128) = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel___observationRegistrar;
        *(_QWORD *)(v0 + 136) = v9;
        if (v6 >= 1)
        {
          swift_beginAccess(v8 + v9, v0 + 16, 0, 0);
          v10 = 0;
          while (1)
          {
            *(_QWORD *)(v0 + 144) = v10;
            v11 = *(_QWORD *)(v0 + 112);
            if ((v11 & 0xC000000000000001) != 0)
              v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v11);
            else
              v12 = *(id *)(v11 + 8 * v10 + 32);
            v13 = v12;
            *(_QWORD *)(v0 + 152) = v12;
            v14 = *(_QWORD *)(v0 + 136);
            v15 = *(_QWORD *)(v0 + 56);
            v16 = objc_msgSend(v12, "uuid");
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);

            v17 = swift_getKeyPath(&unk_100093008);
            *(_QWORD *)(v0 + 48) = v15;
            v18 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
            ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 48, v17, v18);
            swift_release(v17, v19);
            v20 = *(_QWORD *)(v15 + v14);
            if (*(_QWORD *)(v20 + 16))
            {
              v21 = *(_QWORD *)(v0 + 80);
              swift_bridgeObjectRetain(*(_QWORD *)(v15 + v14));
              v22 = sub_10001CCB8(v21);
              if ((v23 & 1) != 0)
              {
                v25 = *(_QWORD *)(v0 + 72);
                v24 = *(_QWORD *)(v0 + 80);
                v26 = *(_QWORD *)(v0 + 64);
                v27 = *(void **)(*(_QWORD *)(v20 + 56) + 8 * v22);
                *(_QWORD *)(v0 + 160) = v27;
                v28 = v27;
                swift_bridgeObjectRelease(v20);
                (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
                v29 = objc_msgSend(v13, "range");
                v31 = v30;
                v32 = (_QWORD *)swift_task_alloc(dword_1000C8D6C);
                *(_QWORD *)(v0 + 168) = v32;
                *v32 = v0;
                v32[1] = sub_1000266AC;
                return sub_10002B938((uint64_t)v28, (uint64_t)v29, v31, (uint64_t)v13, 1);
              }
              swift_bridgeObjectRelease(v20);
            }
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));

            v10 = *(_QWORD *)(v0 + 144) + 1;
            if (v10 == *(_QWORD *)(v0 + 120))
              goto LABEL_18;
          }
        }
        __break(1u);
        goto LABEL_20;
      }
    }
LABEL_18:
    v34 = *(_QWORD *)(v0 + 112);
    v35 = *(_QWORD *)(v0 + 80);
    swift_release(*(_QWORD *)(v0 + 88), v7);
    swift_bridgeObjectRelease(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1000266AC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 168));
  return swift_task_switch(sub_1000266F8, *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
}

uint64_t sub_1000266F8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v1 = *(void **)(v0 + 152);

  v3 = *(_QWORD *)(v0 + 144) + 1;
  if (v3 == *(_QWORD *)(v0 + 120))
  {
LABEL_2:
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 80);
    swift_release(*(_QWORD *)(v0 + 88), v2);
    swift_bridgeObjectRelease(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  while (1)
  {
    *(_QWORD *)(v0 + 144) = v3;
    v7 = *(_QWORD *)(v0 + 112);
    if ((v7 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v7);
    else
      v8 = *(id *)(v7 + 8 * v3 + 32);
    v9 = v8;
    *(_QWORD *)(v0 + 152) = v8;
    v10 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 56);
    v12 = objc_msgSend(v8, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

    KeyPath = swift_getKeyPath(&unk_100093008);
    *(_QWORD *)(v0 + 48) = v11;
    v14 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 48, KeyPath, v14);
    swift_release(KeyPath, v15);
    v16 = *(_QWORD *)(v11 + v10);
    if (!*(_QWORD *)(v16 + 16))
      goto LABEL_4;
    v17 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRetain(*(_QWORD *)(v11 + v10));
    v18 = sub_10001CCB8(v17);
    if ((v19 & 1) != 0)
      break;
    swift_bridgeObjectRelease(v16);
LABEL_4:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));

    v3 = *(_QWORD *)(v0 + 144) + 1;
    if (v3 == *(_QWORD *)(v0 + 120))
      goto LABEL_2;
  }
  v21 = *(_QWORD *)(v0 + 72);
  v20 = *(_QWORD *)(v0 + 80);
  v22 = *(_QWORD *)(v0 + 64);
  v23 = *(void **)(*(_QWORD *)(v16 + 56) + 8 * v18);
  *(_QWORD *)(v0 + 160) = v23;
  v24 = v23;
  swift_bridgeObjectRelease(v16);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  v25 = objc_msgSend(v9, "range");
  v27 = v26;
  v28 = (_QWORD *)swift_task_alloc(dword_1000C8D6C);
  *(_QWORD *)(v0 + 168) = v28;
  *v28 = v0;
  v28[1] = sub_1000266AC;
  return sub_10002B938((uint64_t)v24, (uint64_t)v25, v27, (uint64_t)v9, 1);
}

uint64_t sub_100026928(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v2 + 336) = v1;
  *(_BYTE *)(v2 + 440) = a1;
  v3 = sub_100004EAC((uint64_t *)&unk_1000C87F0);
  *(_QWORD *)(v2 + 344) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004EAC(&qword_1000C93E8);
  *(_QWORD *)(v2 + 352) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 360) = v5;
  *(_QWORD *)(v2 + 368) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 376) = v6;
  *(_QWORD *)(v2 + 384) = v7;
  return swift_task_switch(sub_1000269E4, v6, v7);
}

uint64_t sub_1000269E4()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t result;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 336) + 16);
  *(_QWORD *)(v0 + 392) = Strong;
  if (!Strong)
  {
    v10 = *(_QWORD *)(v0 + 368);
    goto LABEL_6;
  }
  v3 = (void *)Strong;
  if (*(_BYTE *)(v0 + 440) != 1)
  {
    v11 = *(_QWORD *)(v0 + 336);
    swift_release(*(_QWORD *)(v0 + 368), v2);
    KeyPath = swift_getKeyPath(&unk_100092EA0);
    *(_QWORD *)(v0 + 256) = v11;
    v13 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 256, KeyPath, v13);
    swift_release(KeyPath, v14);
    v15 = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session;
    if (*(_QWORD *)(v11 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session))
    {
      v16 = *(_QWORD *)(v0 + 336);
      v17 = swift_getKeyPath(&unk_100092EA0);
      *(_QWORD *)(v0 + 320) = v16;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 320, v17, v13);
      swift_release(v17, v18);
      v19 = *(void **)(v11 + v15);
      if (v19)
      {
        v20 = v19;
        if ((sub_100024588() & 1) != 0)
        {
          v21 = *(_QWORD *)(v0 + 336);
          objc_msgSend(v3, "writingToolsSession:didReceiveAction:", v20, 3);
          v22 = sub_1000626A4((uint64_t)_swiftEmptyArrayStorage);
          v23 = swift_getKeyPath(&unk_100092FE0);
          v24 = swift_task_alloc(32);
          *(_QWORD *)(v24 + 16) = v21;
          *(_QWORD *)(v24 + 24) = v22;
          *(_QWORD *)(v0 + 200) = v21;
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 200, v23, sub_10002D350, v24, (char *)&type metadata for () + 8, v13);
          swift_release(v23, v25);
          swift_bridgeObjectRelease(v22);
          swift_task_dealloc(v24);
          v26 = sub_100062838((uint64_t)_swiftEmptyArrayStorage);
          v27 = swift_getKeyPath(&unk_100093008);
          v28 = swift_task_alloc(32);
          *(_QWORD *)(v28 + 16) = v21;
          *(_QWORD *)(v28 + 24) = v26;
          *(_QWORD *)(v0 + 208) = v21;
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 208, v27, sub_10002D33C, v28, (char *)&type metadata for () + 8, v13);

          swift_release(v27, v29);
          swift_bridgeObjectRelease(v26);
          swift_task_dealloc(v28);
        }
        else
        {

        }
      }
      v50 = *(_QWORD *)(v0 + 392);
      v52 = *(_QWORD *)(v0 + 336);
      v51 = *(_QWORD *)(v0 + 344);
      v53 = *(_BYTE *)(v0 + 440);
      v54 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v51, 1, 1, v54);
      v55 = swift_retain(v52);
      v56 = static MainActor.shared.getter(v55);
      v57 = swift_allocObject(&unk_1000BF2F0, 41, 7);
      *(_QWORD *)(v57 + 16) = v56;
      *(_QWORD *)(v57 + 24) = &protocol witness table for MainActor;
      *(_QWORD *)(v57 + 32) = v52;
      *(_BYTE *)(v57 + 40) = v53;
      v58 = sub_1000596DC(v51, (uint64_t)&unk_1000C93F8, v57);
      v59 = swift_getKeyPath(&unk_100092EC8);
      v60 = swift_task_alloc(32);
      *(_QWORD *)(v60 + 16) = v52;
      *(_QWORD *)(v60 + 24) = v58;
      *(_QWORD *)(v0 + 264) = v52;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 264, v59, sub_10002D008, v60, (char *)&type metadata for () + 8, v13);
      swift_unknownObjectRelease(v50);
      swift_release(v59, v61);
      swift_release(v58, v62);
      swift_task_dealloc(v60);
    }
    else
    {
      swift_unknownObjectRelease(v3);
    }
    goto LABEL_19;
  }
  v4 = *(_QWORD *)(v0 + 336);
  v5 = swift_getKeyPath(&unk_100092EA0);
  *(_QWORD *)(v0 + 400) = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel___observationRegistrar;
  *(_QWORD *)(v0 + 216) = v4;
  v6 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  *(_QWORD *)(v0 + 408) = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 216, v5, v6);
  swift_release(v5, v7);
  v8 = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session;
  *(_QWORD *)(v0 + 416) = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session;
  if (*(_QWORD *)(v4 + v8))
  {
    v9 = *(_QWORD *)(v0 + 368);
    swift_unknownObjectRelease(v3);
    v10 = v9;
LABEL_6:
    swift_release(v10, v2);
LABEL_19:
    v63 = *(_QWORD *)(v0 + 344);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v63);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v30 = *(_QWORD *)(v0 + 336);
  v31 = objc_msgSend(objc_allocWithZone((Class)WTSession), "initWithType:textViewDelegate:", 2, 0);
  v32 = swift_getKeyPath(&unk_100092EA0);
  v33 = swift_task_alloc(32);
  v67 = v30;
  *(_QWORD *)(v33 + 16) = v30;
  *(_QWORD *)(v33 + 24) = v31;
  *(_QWORD *)(v0 + 224) = v30;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 224, v32, sub_10002D364, v33, (char *)&type metadata for () + 8, v6);
  *(_QWORD *)(v0 + 424) = 0;
  swift_release(v32, v34);

  swift_task_dealloc(v33);
  v35 = swift_getKeyPath(&unk_100092EA0);
  *(_QWORD *)(v0 + 232) = v67;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 232, v35, v6);
  swift_release(v35, v36);
  v37 = *(void **)(v4 + v8);
  if (v37)
  {
    v38 = *(_QWORD *)(v0 + 336);
    v39 = swift_getKeyPath(&unk_100092E78);
    *(_QWORD *)(v0 + 240) = v38;
    v40 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
    v41 = v37;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 240, v39, v40);
    result = swift_release(v39, v42);
    v44 = *(unsigned __int8 *)(v38 + 56);
    if (v44 == 255)
    {
      __break(1u);
      return result;
    }
    objc_msgSend(v41, "setCompositionSessionType:", sub_100062D3C(*(_QWORD *)(*(_QWORD *)(v0 + 336) + 32), *(_QWORD *)(*(_QWORD *)(v0 + 336) + 40), *(_QWORD *)(*(_QWORD *)(v0 + 336) + 48), v44));

  }
  if ((sub_100024588() & 1) != 0)
  {
    v45 = *(_QWORD *)(v0 + 336);
    v46 = swift_getKeyPath(&unk_100092EA0);
    *(_QWORD *)(v0 + 328) = v45;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 328, v46, v6);
    swift_release(v46, v47);
    v48 = *(void **)(v4 + v8);
    v49 = v48;
  }
  else
  {
    v48 = 0;
  }
  v64 = v0 + 16;
  *(_QWORD *)(v0 + 432) = v48;
  *(_QWORD *)(v0 + 56) = v0 + 248;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_100027070;
  v65 = swift_continuation_init(v0 + 16, 0);
  *(_QWORD *)(v0 + 160) = _NSConcreteStackBlock;
  v66 = (_QWORD *)(v0 + 160);
  v66[1] = 0x40000000;
  v66[2] = sub_10007DD58;
  v66[3] = &unk_1000BF308;
  v66[4] = v65;
  objc_msgSend(v3, "willBeginWritingToolsSession:requestContexts:", v48, v66);
  return swift_continuation_await(v64);
}

uint64_t sub_100027070()
{
  uint64_t v0;

  return swift_task_switch(sub_1000270B4, *(_QWORD *)(*(_QWORD *)v0 + 376), *(_QWORD *)(*(_QWORD *)v0 + 384));
}

uint64_t sub_1000270B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  unint64_t v23;
  id v24;
  NSString v25;
  Class isa;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  Class v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;

  v3 = *(_QWORD *)(v2 + 424);
  v4 = *(void **)(v2 + 432);
  v5 = *(_QWORD *)(v2 + 336);
  swift_release(*(_QWORD *)(v2 + 368), a2);
  v6 = *(_QWORD *)(v2 + 248);
  KeyPath = swift_getKeyPath(&unk_100092F18);
  v8 = swift_task_alloc(32);
  *(_QWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v6;
  *(_QWORD *)(v2 + 272) = v5;
  v9 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v2 + 272, KeyPath, sub_10002D378, v8, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath, v10);
  swift_bridgeObjectRelease(v6);
  swift_task_dealloc(v8);

  v11 = swift_getKeyPath(&unk_100092F18);
  *(_QWORD *)(v2 + 280) = v5;
  v97 = v9;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 280, v11, v9);
  swift_release(v11, v12);
  v13 = *(_QWORD *)(v5 + 64);
  if (!v13)
  {
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v14 = v2 + 288;
  if ((unint64_t)v13 >> 62)
    goto LABEL_31;
  if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_4:
    if (qword_1000C73C0 != -1)
      swift_once(&qword_1000C73C0, sub_100006228);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_1000063D4(v15, (uint64_t)qword_1000D1BD0);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error in rewriting: Unable to retrieve text from selection", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v20 = sub_100004EAC((uint64_t *)&unk_1000C7BD0);
    inited = swift_initStackObject(v20, v2 + 80);
    *(_OWORD *)(inited + 16) = xmmword_100092910;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v22;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000026;
    *(_QWORD *)(inited + 56) = 0x80000001000AC090;
    v23 = sub_1000620F0(inited);
    v24 = objc_allocWithZone((Class)NSError);
    v25 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    v27 = objc_msgSend(v24, "initWithDomain:code:userInfo:", v25, 1, isa);

    sub_10000C1D4((uint64_t)v27);
    goto LABEL_9;
  }
  while (1)
  {
LABEL_9:
    v28 = *(_QWORD *)(v2 + 336);
    v29 = swift_getKeyPath(&unk_100092F18);
    *(_QWORD *)(v2 + 288) = v28;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v14, v29, v97);
    swift_release(v29, v30);
    v31 = *(_QWORD *)(v5 + 64);
    if (!v31)
      goto LABEL_47;
    if (!((unint64_t)v31 >> 62))
    {
      v13 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v5 + 64));
      v91 = v5;
      if (!v13)
        break;
      goto LABEL_12;
    }
    v62 = v31 >= 0 ? v31 & 0xFFFFFFFFFFFFFF8 : *(_QWORD *)(v5 + 64);
    swift_bridgeObjectRetain_n(*(_QWORD *)(v5 + 64), 2);
    v13 = _CocoaArrayWrapper.endIndex.getter(v62);
    swift_bridgeObjectRelease(v31);
    v91 = v5;
    if (!v13)
      break;
LABEL_12:
    v5 = 0;
    v32 = *(_QWORD *)(v2 + 336);
    v96 = v31 & 0xC000000000000001;
    v92 = enum case for TextCompositionClient.RewritingType.takeaways(_:);
    v94 = v13;
    v95 = v31;
    v93 = v32;
    while (1)
    {
      v35 = v96
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v31)
          : *(id *)(v31 + 8 * v5 + 32);
      v36 = v35;
      v14 = v5 + 1;
      if (__OFADD__(v5, 1))
        break;
      v37 = *(_QWORD *)(v2 + 336);
      v38 = swift_getKeyPath(&unk_100092E78);
      *(_QWORD *)(v2 + 296) = v37;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 296, v38, v97);
      swift_release(v38, v39);
      if (*(_BYTE *)(v32 + 56))
        return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "WritingToolsUIService/RewritingModel.swift", 42, 2, 156, 0);
      v40 = *(unsigned __int8 *)(v32 + 32);
      if (v40 != 6)
        __asm { BR              X9 }
      v41 = *(_QWORD *)(v2 + 352);
      v42 = type metadata accessor for TextCompositionClient.RewritingType(0);
      v43 = *(_QWORD *)(v42 - 8);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v43 + 104))(v41, v92, v42);
      v44 = *(_QWORD *)(v2 + 352);
      type metadata accessor for TextCompositionClient.RewritingType(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v44, 0, 1, v42);
      v45 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TextCompositionClient(0)), "init");
      v46 = objc_msgSend(v36, "attributedText");
      v47 = objc_msgSend(v36, "range");
      v49 = dispatch thunk of TextCompositionClient.actualRangeForRewritingOrReview(of:range:rewritingType:options:)(v46, v47, v48, v44, 0);
      if (v3)
      {

        swift_errorRetain(v3);
        sub_10000C1D4(v3);
        swift_errorRelease(v3);
        if (qword_1000C73C0 != -1)
          swift_once(&qword_1000C73C0, sub_100006228);
        v51 = type metadata accessor for Logger(0);
        sub_1000063D4(v51, (uint64_t)qword_1000D1BD0);
        swift_errorRetain(v3);
        v52 = swift_errorRetain(v3);
        v53 = Logger.logObject.getter(v52);
        v54 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v53, v54))
        {
          v55 = swift_slowAlloc(12, -1);
          v56 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v55 = 138412290;
          swift_errorRetain(v3);
          v57 = _swift_stdlib_bridgeErrorToNSError(v3);
          *(_QWORD *)(v55 + 4) = v57;
          *v56 = v57;
          swift_errorRelease(v3);
          swift_errorRelease(v3);
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Error occurred when getting actual range: %@", (uint8_t *)v55, 0xCu);
          v58 = sub_100004EAC(&qword_1000C87C8);
          swift_arrayDestroy(v56, 1, v58);
          swift_slowDealloc(v56, -1, -1);
          swift_slowDealloc(v55, -1, -1);

        }
        else
        {

          swift_errorRelease(v3);
          swift_errorRelease(v3);
        }
        swift_errorRelease(v3);
      }
      else
      {
        v33 = v49;
        v34 = v50;

        objc_msgSend(v36, "setRange:", v33, v34);
      }
      v13 = v94;
      v31 = v95;
      v32 = v93;
      sub_10000AE2C(*(_QWORD *)(v2 + 352), &qword_1000C93E8);
      v3 = 0;
      ++v5;
      if (v14 == v94)
        goto LABEL_40;
    }
    __break(1u);
LABEL_31:
    if (v13 >= 0)
      v60 = v13 & 0xFFFFFFFFFFFFFF8;
    else
      v60 = v13;
    swift_bridgeObjectRetain(v13);
    v61 = _CocoaArrayWrapper.endIndex.getter(v60);
    swift_bridgeObjectRelease(v13);
    if (!v61)
      goto LABEL_4;
  }
LABEL_40:
  v63 = *(_QWORD *)(v2 + 408);
  v64 = *(_QWORD *)(v2 + 416);
  v65 = *(_QWORD *)(v2 + 336);
  swift_bridgeObjectRelease(v31);
  v66 = swift_getKeyPath(&unk_100092EA0);
  *(_QWORD *)(v2 + 304) = v65;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 304, v66, v63);
  swift_release(v66, v67);
  v68 = *(void **)(v65 + v64);
  if (!v68)
    goto LABEL_45;
  v69 = v68;
  if ((sub_100024588() & 1) == 0)
    goto LABEL_44;
  v70 = *(_QWORD *)(v2 + 336);
  v71 = swift_getKeyPath(&unk_100092F18);
  *(_QWORD *)(v2 + 312) = v70;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 312, v71, v97);
  swift_release(v71, v72);
  v73 = *(_QWORD *)(v91 + 64);
  if (!v73)
  {
LABEL_48:
    __break(1u);
    JUMPOUT(0x100027C38);
  }
  v74 = *(void **)(v2 + 392);
  sub_10002D2E8();
  swift_bridgeObjectRetain(v73);
  v75 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v73);
  objc_msgSend(v74, "didBeginWritingToolsSession:contexts:", v69, v75);

  objc_msgSend(v74, "writingToolsSession:didReceiveAction:", v69, 3);
LABEL_44:

LABEL_45:
  v76 = *(_QWORD *)(v2 + 392);
  v77 = *(_QWORD *)(v2 + 336);
  v78 = *(_QWORD *)(v2 + 344);
  v79 = *(_BYTE *)(v2 + 440);
  v80 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v78, 1, 1, v80);
  v81 = swift_retain(v77);
  v82 = static MainActor.shared.getter(v81);
  v83 = swift_allocObject(&unk_1000BF2F0, 41, 7);
  *(_QWORD *)(v83 + 16) = v82;
  *(_QWORD *)(v83 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v83 + 32) = v77;
  *(_BYTE *)(v83 + 40) = v79;
  v84 = sub_1000596DC(v78, (uint64_t)&unk_1000C93F8, v83);
  v85 = swift_getKeyPath(&unk_100092EC8);
  v86 = swift_task_alloc(32);
  *(_QWORD *)(v86 + 16) = v77;
  *(_QWORD *)(v86 + 24) = v84;
  *(_QWORD *)(v2 + 264) = v77;
  v87 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v2 + 264, v85, sub_10002D008, v86, (char *)&type metadata for () + 8, v87);
  swift_unknownObjectRelease(v76);
  swift_release(v85, v88);
  swift_release(v84, v89);
  swift_task_dealloc(v86);
  v90 = *(_QWORD *)(v2 + 344);
  swift_task_dealloc(*(_QWORD *)(v2 + 352));
  swift_task_dealloc(v90);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100027C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v5 + 192) = a5;
  *(_QWORD *)(v5 + 80) = a4;
  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 88) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 104) = v8;
  return swift_task_switch(sub_100027CD0, v7, v8);
}

uint64_t sub_100027CD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 80);
  KeyPath = swift_getKeyPath(&unk_100093030);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = 1;
  *(_QWORD *)(v0 + 112) = OBJC_IVAR____TtC21WritingToolsUIService9ToolModel___observationRegistrar;
  *(_QWORD *)(v0 + 16) = v1;
  v4 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  *(_QWORD *)(v0 + 120) = v4;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_100021078, v3, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)(v0 + 128) = 0;
  swift_release(KeyPath, v5);
  swift_task_dealloc(v3);
  v6 = swift_getKeyPath(&unk_100092F18);
  *(_QWORD *)(v0 + 24) = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 24, v6, v4);
  swift_release(v6, v7);
  result = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v0 + 136) = result;
  if (!result)
    goto LABEL_20;
  if ((unint64_t)result >> 62)
  {
    if (result >= 0)
      v20 = result & 0xFFFFFFFFFFFFFF8;
    else
      v20 = result;
    swift_bridgeObjectRetain(result);
    v21 = _CocoaArrayWrapper.endIndex.getter(v20);
    *(_QWORD *)(v0 + 144) = v21;
    if (v21)
      goto LABEL_4;
  }
  else
  {
    v9 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(result);
    *(_QWORD *)(v0 + 144) = v9;
    if (v9)
    {
LABEL_4:
      v11 = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session;
      *(_QWORD *)(v0 + 152) = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel___observationRegistrar;
      *(_QWORD *)(v0 + 160) = v11;
      v12 = *(_QWORD *)(v0 + 136);
      if ((v12 & 0xC000000000000001) != 0)
      {
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
        v11 = *(_QWORD *)(v0 + 160);
      }
      else
      {
        v13 = *(id *)(v12 + 32);
      }
      *(_QWORD *)(v0 + 168) = v13;
      *(_QWORD *)(v0 + 176) = 1;
      v14 = *(_QWORD *)(v0 + 80);
      v15 = swift_getKeyPath(&unk_100092EA0);
      *(_QWORD *)(v0 + 32) = v14;
      v16 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
      ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 32, v15, v16);
      swift_release(v15, v17);
      if (*(_QWORD *)(v14 + v11))
      {
        v18 = (_QWORD *)swift_task_alloc(dword_1000C8D64);
        *(_QWORD *)(v0 + 184) = v18;
        *v18 = v0;
        v18[1] = sub_1000280F0;
        return sub_10002844C((uint64_t)v13, *(_BYTE *)(v0 + 192));
      }
      v19 = *(_QWORD *)(v0 + 88);

      goto LABEL_15;
    }
  }
  v19 = *(_QWORD *)(v0 + 88);
LABEL_15:
  swift_release(v19, v10);
  v22 = *(unsigned __int8 *)(v0 + 192);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  if (v22 == 1)
  {
LABEL_18:
    v38 = *(_QWORD *)(v0 + 120);
    v39 = *(_QWORD *)(v0 + 80);
    v40 = swift_getKeyPath(&unk_100093030);
    v41 = swift_task_alloc(32);
    *(_QWORD *)(v41 + 16) = v39;
    *(_BYTE *)(v41 + 24) = 0;
    *(_QWORD *)(v0 + 72) = v39;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 72, v40, sub_10002D38C, v41, (char *)&type metadata for () + 8, v38);
    swift_release(v40, v42);
    swift_task_dealloc(v41);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v23 = *(_QWORD *)(v0 + 80);
  v24 = swift_getKeyPath(&unk_1000930A8);
  *(_QWORD *)(v0 + 40) = v23;
  v25 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 40, v24, v25);
  swift_release(v24, v26);
  *(_QWORD *)(v0 + 48) = v23;
  v27 = swift_getKeyPath(&unk_1000930A8);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v0 + 48, v27, v25);
  result = swift_release(v27, v28);
  v29 = *(_QWORD *)(v23 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount);
  v30 = __CFADD__(v29, 1);
  v31 = v29 + 1;
  if (!v30)
  {
    v32 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v23 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount) = v31;
    *(_QWORD *)(v0 + 56) = v32;
    v33 = swift_getKeyPath(&unk_1000930A8);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v0 + 56, v33, v25);
    swift_release(v33, v34);
    v35 = swift_getKeyPath(&unk_100093080);
    v36 = swift_task_alloc(32);
    *(_QWORD *)(v36 + 16) = v32;
    *(_QWORD *)(v36 + 24) = 0;
    *(_QWORD *)(v0 + 64) = v32;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 64, v35, sub_10002D3A0, v36, (char *)&type metadata for () + 8, v25);
    swift_release(v35, v37);
    swift_task_dealloc(v36);
    goto LABEL_18;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1000280F0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 184));
  return swift_task_switch(sub_10002813C, *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
}

id sub_10002813C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 144);

  if (v1 == v2)
  {
    v4 = *(_QWORD *)(v0 + 88);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 176);
    v6 = *(_QWORD *)(v0 + 136);
    if ((v6 & 0xC000000000000001) != 0)
      result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(*(_QWORD *)(v0 + 176), v6);
    else
      result = *(id *)(v6 + 8 * v5 + 32);
    v8 = result;
    *(_QWORD *)(v0 + 168) = result;
    *(_QWORD *)(v0 + 176) = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_15;
    }
    v9 = *(_QWORD *)(v0 + 160);
    v10 = *(_QWORD *)(v0 + 80);
    KeyPath = swift_getKeyPath(&unk_100092EA0);
    *(_QWORD *)(v0 + 32) = v10;
    v12 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 32, KeyPath, v12);
    swift_release(KeyPath, v13);
    if (*(_QWORD *)(v10 + v9))
    {
      v14 = (_QWORD *)swift_task_alloc(dword_1000C8D64);
      *(_QWORD *)(v0 + 184) = v14;
      *v14 = v0;
      v14[1] = sub_1000280F0;
      return (id)sub_10002844C((uint64_t)v8, *(_BYTE *)(v0 + 192));
    }
    v4 = *(_QWORD *)(v0 + 88);

  }
  swift_release(v4, v3);
  v15 = *(unsigned __int8 *)(v0 + 192);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  if (v15 == 1)
  {
LABEL_13:
    v31 = *(_QWORD *)(v0 + 120);
    v32 = *(_QWORD *)(v0 + 80);
    v33 = swift_getKeyPath(&unk_100093030);
    v34 = swift_task_alloc(32);
    *(_QWORD *)(v34 + 16) = v32;
    *(_BYTE *)(v34 + 24) = 0;
    *(_QWORD *)(v0 + 72) = v32;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 72, v33, sub_10002D38C, v34, (char *)&type metadata for () + 8, v31);
    swift_release(v33, v35);
    swift_task_dealloc(v34);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  v16 = *(_QWORD *)(v0 + 80);
  v17 = swift_getKeyPath(&unk_1000930A8);
  *(_QWORD *)(v0 + 40) = v16;
  v18 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 40, v17, v18);
  swift_release(v17, v19);
  *(_QWORD *)(v0 + 48) = v16;
  v20 = swift_getKeyPath(&unk_1000930A8);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v0 + 48, v20, v18);
  result = (id)swift_release(v20, v21);
  v22 = *(_QWORD *)(v16 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount);
  v23 = __CFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    v25 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v16 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount) = v24;
    *(_QWORD *)(v0 + 56) = v25;
    v26 = swift_getKeyPath(&unk_1000930A8);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v0 + 56, v26, v18);
    swift_release(v26, v27);
    v28 = swift_getKeyPath(&unk_100093080);
    v29 = swift_task_alloc(32);
    *(_QWORD *)(v29 + 16) = v25;
    *(_QWORD *)(v29 + 24) = 0;
    *(_QWORD *)(v0 + 64) = v25;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 64, v28, sub_10002D3A0, v29, (char *)&type metadata for () + 8, v18);
    swift_release(v28, v30);
    swift_task_dealloc(v29);
    goto LABEL_13;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_10002844C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)(v3 + 728) = v2;
  *(_BYTE *)(v3 + 1312) = a2;
  *(_QWORD *)(v3 + 720) = a1;
  v4 = sub_100004EAC(&qword_1000C8898);
  *(_QWORD *)(v3 + 736) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004EAC(&qword_1000C9398);
  *(_QWORD *)(v3 + 744) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004EAC(&qword_1000C93A0);
  *(_QWORD *)(v3 + 752) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 760) = v7;
  *(_QWORD *)(v3 + 768) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004EAC(&qword_1000C93A8);
  *(_QWORD *)(v3 + 776) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 784) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v3 + 792) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 800) = swift_task_alloc(v11);
  *(_QWORD *)(v3 + 808) = swift_task_alloc(v11);
  v12 = sub_100004EAC(&qword_1000C93B0);
  *(_QWORD *)(v3 + 816) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SummarizationClient.TextAssistantSummarizationOptions.Source(0);
  *(_QWORD *)(v3 + 824) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v3 + 832) = v14;
  *(_QWORD *)(v3 + 840) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SummarizationClient.TextAssistantSummarizationOptions(0);
  *(_QWORD *)(v3 + 848) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v3 + 856) = v16;
  *(_QWORD *)(v3 + 864) = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004EAC(&qword_1000C93B8);
  *(_QWORD *)(v3 + 872) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v3 + 880) = v18;
  *(_QWORD *)(v3 + 888) = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004EAC(&qword_1000C93C0);
  *(_QWORD *)(v3 + 896) = v19;
  v20 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v3 + 904) = v20;
  *(_QWORD *)(v3 + 912) = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  *(_QWORD *)(v3 + 920) = v21;
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v3 + 928) = v22;
  *(_QWORD *)(v3 + 936) = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100004EAC(&qword_1000C93C8);
  *(_QWORD *)(v3 + 944) = v23;
  v24 = *(_QWORD *)(v23 - 8);
  *(_QWORD *)(v3 + 952) = v24;
  *(_QWORD *)(v3 + 960) = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for TextCompositionClient.RewritingType(0);
  *(_QWORD *)(v3 + 968) = v25;
  v26 = *(_QWORD *)(v25 - 8);
  *(_QWORD *)(v3 + 976) = v26;
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 984) = swift_task_alloc(v27);
  *(_QWORD *)(v3 + 992) = swift_task_alloc(v27);
  v28 = sub_100004EAC(&qword_1000C7728);
  *(_QWORD *)(v3 + 1000) = v28;
  v29 = *(_QWORD *)(v28 - 8);
  *(_QWORD *)(v3 + 1008) = v29;
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 1016) = swift_task_alloc(v30);
  *(_QWORD *)(v3 + 1024) = swift_task_alloc(v30);
  v31 = sub_100004EAC(&qword_1000C93D0);
  *(_QWORD *)(v3 + 1032) = v31;
  v32 = *(_QWORD *)(v31 - 8);
  *(_QWORD *)(v3 + 1040) = v32;
  v33 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 1048) = swift_task_alloc(v33);
  *(_QWORD *)(v3 + 1056) = swift_task_alloc(v33);
  v34 = sub_100004EAC(&qword_1000C93D8);
  *(_QWORD *)(v3 + 1064) = v34;
  v35 = *(_QWORD *)(v34 - 8);
  *(_QWORD *)(v3 + 1072) = v35;
  v36 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 1080) = swift_task_alloc(v36);
  *(_QWORD *)(v3 + 1088) = swift_task_alloc(v36);
  v37 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 1096) = v37;
  *(_QWORD *)(v3 + 1104) = static MainActor.shared.getter(v37);
  v38 = dispatch thunk of Actor.unownedExecutor.getter(v37, &protocol witness table for MainActor);
  *(_QWORD *)(v3 + 1112) = v38;
  *(_QWORD *)(v3 + 1120) = v39;
  return swift_task_switch(sub_1000287A4, v38, v39);
}

void *sub_1000287A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  _OWORD *v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  char v136;
  id v137;

  v1 = *(_QWORD *)(v0 + 728);
  KeyPath = swift_getKeyPath(&unk_100092E78);
  *(_QWORD *)(v0 + 1128) = OBJC_IVAR____TtC21WritingToolsUIService9ToolModel___observationRegistrar;
  *(_QWORD *)(v0 + 544) = v1;
  v3 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  *(_QWORD *)(v0 + 1136) = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 544, KeyPath, v3);
  swift_release(KeyPath, v4);
  if (*(unsigned __int8 *)(v1 + 56) > 1u || *(_BYTE *)(v1 + 56))
  {
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease(0xE000000000000000);
    return (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000038, 0x80000001000ABFF0, "WritingToolsUIService/RewritingModel.swift", 42, 2, 212, 0);
  }
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  if (((1 << v5) & 0x33F) != 0)
  {
    v132 = (_OWORD *)(v0 + 304);
    v125 = (_OWORD *)(v0 + 336);
    v8 = *(_QWORD *)(v0 + 728);
    v9 = sub_100004EAC((uint64_t *)&unk_1000C7BD0);
    inited = swift_initStackObject(v9, v0 + 96);
    *(_OWORD *)(inited + 16) = xmmword_100092910;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(TCTextCompositionAssistantOptionKeyAppProcessIdentifier);
    *(_QWORD *)(inited + 40) = v11;
    v12 = swift_getKeyPath(&unk_1000930D0);
    *(_QWORD *)(v0 + 616) = v8;
    v136 = v5;
    sub_10000B060(v5, v6, v7, 0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 616, v12, v3);
    swift_release(v12, v13);
    result = *(void **)(v8 + 24);
    if (result)
    {
      v15 = objc_msgSend(result, "pid");
      *(_QWORD *)(inited + 72) = &type metadata for Int32;
      *(_DWORD *)(inited + 48) = v15;
      v16 = sub_1000620F0(inited);
      if (v7)
      {
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(TCTextCompositionAssistantOptionKeyInstructions);
        v19 = v18;
        *(_QWORD *)(v0 + 392) = &type metadata for String;
        *(_QWORD *)(v0 + 368) = v6;
        *(_QWORD *)(v0 + 376) = v7;
        sub_100021008((_OWORD *)(v0 + 368), v132);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
        sub_10001F610(v132, v17, v19, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease(v19);
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      if ((v5 - 2 < 4 || !(_BYTE)v5) && (*(_BYTE *)(v0 + 1312) & 1) == 0)
      {
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(TCTextCompositionAssistantOptionKeySeed);
        v23 = v22;
        *(_QWORD *)(v0 + 296) = &type metadata for Int;
        *(_QWORD *)(v0 + 272) = sub_10002C9FC(0x7FFFFFFFFFFFFFFFuLL);
        sub_100021008((_OWORD *)(v0 + 272), v125);
        v24 = swift_isUniquelyReferenced_nonNull_native(v16);
        sub_10001F610(v125, v21, v23, v24);
        swift_bridgeObjectRelease(v23);
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      *(_QWORD *)(v0 + 1144) = v16;
      v25 = *(_QWORD *)(v0 + 1056);
      v126 = *(_QWORD *)(v0 + 1040);
      v26 = *(_QWORD *)(v0 + 1024);
      v119 = *(_QWORD *)(v0 + 1000);
      v122 = *(_QWORD *)(v0 + 1032);
      v27 = *(_QWORD *)(v0 + 992);
      v108 = *(_QWORD *)(v0 + 976);
      v110 = *(_QWORD *)(v0 + 968);
      v112 = *(_QWORD *)(v0 + 952);
      v114 = *(_QWORD *)(v0 + 960);
      v116 = *(_QWORD *)(v0 + 944);
      v118 = *(_QWORD *)(v0 + 1008);
      v28 = *(void **)(v0 + 720);
      v29 = objc_allocWithZone((Class)type metadata accessor for TextCompositionClient(0));
      v30 = v28;
      v31 = objc_msgSend(v29, "init");
      v32 = objc_msgSend(v30, "attributedText");
      v33 = objc_msgSend(v30, "range");
      v35 = v34;
      sub_100062D90(v136);
      swift_bridgeObjectRetain(v16);
      dispatch thunk of TextCompositionClient.streamForRewriting(of:range:rewritingType:options:)(v32, v33, v35, v27, v16);

      swift_bridgeObjectRelease(v16);
      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v27, v110);
      v36 = swift_task_alloc(32);
      *(_QWORD *)(v36 + 16) = v30;
      *(_QWORD *)(v36 + 24) = v26;
      v37 = sub_100004EAC(&qword_1000C93E0);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v112 + 104))(v114, enum case for AsyncThrowingStream.Continuation.BufferingPolicy.unbounded<A, B>(_:), v116);
      AsyncThrowingStream.init<>(_:bufferingPolicy:_:)(v37, v114, sub_10002D3B4, v36, v37);
      swift_task_dealloc(v36);
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v26, v119);
      AsyncThrowingStream.makeAsyncIterator()(v122);
      v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v126 + 8))(v25, v122);
      *(_QWORD *)(v0 + 1152) = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel___observationRegistrar;
      *(_QWORD *)(v0 + 1160) = 0;
      v39 = static MainActor.shared.getter(v38);
      *(_QWORD *)(v0 + 1168) = v39;
      v40 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
      *(_QWORD *)(v0 + 1176) = v40;
      *v40 = v0;
      v40[1] = sub_10002931C;
      v41 = *(_QWORD *)(v0 + 1064);
      v42 = v0 + 176;
      v43 = v0 + 632;
      return (void *)_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v42, v39, &protocol witness table for MainActor, v41, v43);
    }
    __break(1u);
    goto LABEL_21;
  }
  if (v5 == 6)
  {
    v127 = *(_QWORD *)(v0 + 832);
    v130 = *(_QWORD *)(v0 + 824);
    v133 = *(_QWORD *)(v0 + 840);
    v44 = *(_QWORD *)(v0 + 728);
    v45 = *(void **)(v0 + 720);
    v46 = objc_msgSend(v45, "range");
    v48 = v47;
    v49 = swift_getKeyPath(&unk_100092F68);
    v50 = swift_task_alloc(48);
    *(_QWORD *)(v50 + 16) = v44;
    *(_QWORD *)(v50 + 24) = v46;
    *(_QWORD *)(v50 + 32) = v48;
    *(_BYTE *)(v50 + 40) = 0;
    *(_QWORD *)(v0 + 1272) = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel___observationRegistrar;
    *(_QWORD *)(v0 + 704) = v44;
    v51 = v44;
    v52 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
    *(_QWORD *)(v0 + 1280) = v52;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 704, v49, sub_10002CF20, v50, (char *)&type metadata for () + 8, v52);
    swift_release(v49, v53);
    swift_task_dealloc(v50);
    v54 = objc_msgSend(v45, "attributedText");
    v55 = objc_msgSend(v45, "range");
    v57 = objc_msgSend(v54, "attributedSubstringFromRange:", v55, v56);

    v58 = objc_msgSend(v57, "string");
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
    v61 = v60;

    *(_QWORD *)(v0 + 424) = 0;
    *(_QWORD *)(v0 + 432) = 0xE000000000000000;
    v62 = type metadata accessor for SummarizationClient(0);
    swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
    v63 = SummarizationClient.init()();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v127 + 104))(v133, enum case for SummarizationClient.TextAssistantSummarizationOptions.Source.textAssistant(_:), v130);
    v64 = swift_getKeyPath(&unk_1000930D0);
    *(_QWORD *)(v0 + 696) = v51;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 696, v64, v3);
    swift_release(v64, v65);
    result = *(void **)(v51 + 24);
    if (result)
    {
      ClientProcessInfo.init(processIdentifier:)(objc_msgSend(result, "pid"));
      v66 = *(_QWORD *)(v0 + 816);
      v123 = v59;
      v124 = v61;
      v120 = v63;
      v90 = type metadata accessor for ClientProcessInfo(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v66, 0, 1, v90);
      v91 = *(_QWORD *)(v0 + 888);
      v135 = *(_QWORD *)(v0 + 880);
      v92 = *(_QWORD *)(v0 + 872);
      v93 = *(_QWORD *)(v0 + 864);
      v94 = *(_QWORD *)(v0 + 856);
      v129 = *(_QWORD *)(v0 + 848);
      v95 = *(_QWORD *)(v0 + 808);
      v96 = *(_QWORD *)(v0 + 792);
      v97 = *(_QWORD *)(v0 + 784);
      v98 = SummarizationClient.TextAssistantSummarizationOptions.init(source:originatingProcess:)(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 816));
      v99 = UUID.init()(v98);
      v100 = UUID.uuidString.getter(v99);
      v102 = v101;
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v97);
      SummarizationClient.partialSummaries(for:options:requestIdentifier:)(v123, v124, v93, v100, v102);
      swift_bridgeObjectRelease(v124);
      swift_release(v120, v103);
      swift_bridgeObjectRelease(v102);
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v129);
      AsyncThrowingStream.makeAsyncIterator()(v92);
      v104 = (*(uint64_t (**)(uint64_t, uint64_t))(v135 + 8))(v91, v92);
      v105 = static MainActor.shared.getter(v104);
      *(_QWORD *)(v0 + 1288) = v105;
      v106 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
      *(_QWORD *)(v0 + 1296) = v106;
      *v106 = v0;
      v106[1] = sub_10002A5B8;
      return (void *)_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(*(_QWORD *)(v0 + 776), v105, &protocol witness table for MainActor, *(_QWORD *)(v0 + 896), v0 + 688);
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v67 = *(_QWORD *)(v0 + 728);
  v68 = *(void **)(v0 + 720);
  v69 = objc_allocWithZone((Class)type metadata accessor for TextCompositionClient(0));
  v70 = v68;
  v137 = objc_msgSend(v69, "init");
  v134 = objc_msgSend(v70, "attributedText");
  v71 = objc_msgSend(v70, "range");
  v128 = v72;
  v131 = v71;
  sub_100062D90(7);
  v73 = sub_100004EAC((uint64_t *)&unk_1000C7BD0);
  v74 = swift_initStackObject(v73, v0 + 16);
  *(_OWORD *)(v74 + 16) = xmmword_100092910;
  *(_QWORD *)(v74 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(TCTextCompositionAssistantOptionKeyAppProcessIdentifier);
  *(_QWORD *)(v74 + 40) = v75;
  v76 = swift_getKeyPath(&unk_1000930D0);
  *(_QWORD *)(v0 + 528) = v67;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 528, v76, v3);
  swift_release(v76, v77);
  result = *(void **)(v67 + 24);
  if (!result)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  v78 = *(_QWORD *)(v0 + 1048);
  v121 = *(_QWORD *)(v0 + 1040);
  v79 = *(_QWORD *)(v0 + 1016);
  v115 = *(_QWORD *)(v0 + 1000);
  v117 = *(_QWORD *)(v0 + 1032);
  v80 = *(_QWORD *)(v0 + 984);
  v81 = *(_QWORD *)(v0 + 976);
  v82 = *(_QWORD *)(v0 + 968);
  v83 = *(_QWORD *)(v0 + 960);
  v111 = *(_QWORD *)(v0 + 944);
  v113 = *(_QWORD *)(v0 + 1008);
  v107 = *(_QWORD *)(v0 + 720);
  v109 = *(_QWORD *)(v0 + 952);
  v84 = objc_msgSend(result, "pid");
  *(_QWORD *)(v74 + 72) = &type metadata for Int32;
  *(_DWORD *)(v74 + 48) = v84;
  v85 = sub_1000620F0(v74);
  dispatch thunk of TextCompositionClient.streamForRewriting(of:range:rewritingType:options:)(v134, v131, v128, v80, v85);

  swift_bridgeObjectRelease(v85);
  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v80, v82);
  v86 = swift_task_alloc(32);
  *(_QWORD *)(v86 + 16) = v107;
  *(_QWORD *)(v86 + 24) = v79;
  v87 = sub_100004EAC(&qword_1000C93E0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v109 + 104))(v83, enum case for AsyncThrowingStream.Continuation.BufferingPolicy.unbounded<A, B>(_:), v111);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)(v87, v83, sub_10002D13C, v86, v87);
  swift_task_dealloc(v86);
  (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v79, v115);
  AsyncThrowingStream.makeAsyncIterator()(v117);
  v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v121 + 8))(v78, v117);
  *(_QWORD *)(v0 + 1240) = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel___observationRegistrar;
  v39 = static MainActor.shared.getter(v88);
  *(_QWORD *)(v0 + 1248) = v39;
  v89 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  *(_QWORD *)(v0 + 1256) = v89;
  *v89 = v0;
  v89[1] = sub_100029D5C;
  v41 = *(_QWORD *)(v0 + 1064);
  v42 = v0 + 224;
  v43 = v0 + 712;
  return (void *)_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v42, v39, &protocol witness table for MainActor, v41, v43);
}

uint64_t sub_10002931C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1176);
  *(_QWORD *)(*(_QWORD *)v1 + 1184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v5 = v2[143];
    swift_release(v2[146], v4);
    swift_bridgeObjectRelease(v5);
    v6 = v2[140];
    v7 = v2[139];
    v8 = sub_10002B608;
  }
  else
  {
    swift_release(v2[146], v4);
    v6 = v2[140];
    v7 = v2[139];
    v8 = sub_1000293A4;
  }
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_1000293A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *Strong;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  NSString v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v0 + 1192) = v1;
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 1200) = *(_OWORD *)(v0 + 208);
  if (v1)
  {
    v57 = v3;
    v58 = v2;
    v59 = v1;
    v5 = *(_QWORD *)(v0 + 1136);
    v6 = *(_QWORD *)(v0 + 728);
    KeyPath = swift_getKeyPath(&unk_100092F90);
    *(_QWORD *)(v0 + 648) = v6;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 648, KeyPath, v5);
    swift_release(KeyPath, v8);
    *(_QWORD *)(v0 + 656) = v6;
    v9 = swift_getKeyPath(&unk_100092F90);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v0 + 656, v9, v5);
    swift_release(v9, v10);
    *(_QWORD *)(v6 + 96) |= v4;
    v11 = swift_getKeyPath(&unk_100092F90);
    *(_QWORD *)(v0 + 664) = v6;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 664, v11, v5);
    swift_release(v11, v12);
    if ((*(_BYTE *)(v6 + 96) & 1) != 0)
    {
      Strong = (void *)swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 728) + 16);
      if (Strong)
      {
        v14 = Strong;
        if ((objc_msgSend(Strong, "respondsToSelector:", "showContentWarningWithTitle:message:") & 1) != 0)
        {
          if (qword_1000C73E8 != -1)
            swift_once(&qword_1000C73E8, sub_10000B294);
          v15 = *(_QWORD *)(v0 + 936);
          v16 = *(_QWORD *)(v0 + 928);
          v17 = *(_QWORD *)(v0 + 920);
          v18 = sub_1000063D4(v17, (uint64_t)qword_1000D1C48);
          v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
          v19(v15, v18, v17);
          String.init(localized:)(v15);
          v21 = v20;
          if (qword_1000C73F0 != -1)
            swift_once(&qword_1000C73F0, sub_10000B2B8);
          v22 = *(_QWORD *)(v0 + 936);
          v23 = *(_QWORD *)(v0 + 920);
          v24 = sub_1000063D4(v23, (uint64_t)qword_1000D1C60);
          v19(v22, v24, v23);
          String.init(localized:)(v22);
          v26 = v25;
          v27 = String._bridgeToObjectiveC()();
          v28 = String._bridgeToObjectiveC()();
          objc_msgSend(v14, "showContentWarningWithTitle:message:", v27, v28);
          swift_bridgeObjectRelease(v21);
          swift_bridgeObjectRelease(v26);
          swift_unknownObjectRelease(v14);

        }
        else
        {
          swift_unknownObjectRelease(v14);
        }
      }
    }
    v52 = *(_QWORD *)(v0 + 1136);
    *(_QWORD *)(v0 + 672) = *(_QWORD *)(v0 + 728);
    v53 = swift_getKeyPath(&unk_100092F90);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v0 + 672, v53, v52);
    swift_release(v53, v54);
    v55 = (_QWORD *)swift_task_alloc(dword_1000C8D6C);
    *(_QWORD *)(v0 + 1216) = v55;
    *v55 = v0;
    v55[1] = sub_1000297FC;
    v47 = *(_QWORD *)(v0 + 720);
    v49 = v58;
    v48 = v59;
    v50 = v57;
    v51 = 0;
  }
  else
  {
    v29 = *(_QWORD *)(v0 + 1160);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1072) + 8))(*(_QWORD *)(v0 + 1088), *(_QWORD *)(v0 + 1064));
    if (v29)
    {
      v30 = *(id *)(v0 + 1160);
    }
    else
    {
      v31 = *(void **)(v0 + 720);
      v32 = objc_msgSend(v31, "attributedText");
      v33 = objc_msgSend(v31, "range");
      v30 = objc_msgSend(v32, "attributedSubstringFromRange:", v33, v34);

    }
    *(_QWORD *)(v0 + 1224) = v30;
    v35 = *(_QWORD *)(v0 + 1144);
    v36 = *(_QWORD *)(v0 + 728);
    v37 = *(void **)(v0 + 720);
    v38 = swift_getKeyPath(&unk_100092F40);
    v39 = swift_task_alloc(32);
    *(_QWORD *)(v39 + 16) = v36;
    *(_QWORD *)(v39 + 24) = v30;
    *(_QWORD *)(v0 + 640) = v36;
    v40 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
    v41 = v30;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 640, v38, sub_10002CF04, v39, (char *)&type metadata for () + 8, v40);

    swift_release(v38, v42);
    swift_task_dealloc(v39);
    swift_bridgeObjectRelease(v35);
    v43 = objc_msgSend(v37, "range");
    v45 = v44;
    v46 = (_QWORD *)swift_task_alloc(dword_1000C8D6C);
    *(_QWORD *)(v0 + 1232) = v46;
    *v46 = v0;
    v46[1] = sub_1000299A8;
    v47 = *(_QWORD *)(v0 + 720);
    v48 = (uint64_t)v41;
    v49 = (uint64_t)v43;
    v50 = v45;
    v51 = 1;
  }
  return sub_10002B938(v48, v49, v50, v47, v51);
}

uint64_t sub_1000297FC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1216));
  return swift_task_switch(sub_10002984C, *(_QWORD *)(v1 + 1112), *(_QWORD *)(v1 + 1120));
}

uint64_t sub_10002984C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 1208);
  v2 = *(_QWORD *)(v0 + 1200);
  v3 = *(void **)(v0 + 1192);
  v4 = *(_QWORD *)(v0 + 728);

  KeyPath = swift_getKeyPath(&unk_1000930F8);
  v6 = (_QWORD *)swift_task_alloc(48);
  v6[2] = v4;
  v6[3] = v2;
  v6[4] = v1;
  *(_QWORD *)(v0 + 680) = v4;
  v7 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  v8 = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 680, KeyPath, sub_10002D128, v6, (char *)&type metadata for () + 8, v7);

  swift_release(KeyPath, v9);
  swift_bridgeObjectRelease(v1);
  v10 = swift_task_dealloc(v6);
  *(_QWORD *)(v0 + 1160) = *(_QWORD *)(v0 + 1192);
  v11 = static MainActor.shared.getter(v10);
  *(_QWORD *)(v0 + 1168) = v11;
  v12 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  *(_QWORD *)(v0 + 1176) = v12;
  *v12 = v0;
  v12[1] = sub_10002931C;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 176, v11, &protocol witness table for MainActor, *(_QWORD *)(v0 + 1064), v0 + 632);
}

uint64_t sub_1000299A8()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;

  v1 = *v0;
  v2 = *(void **)(*v0 + 1224);
  swift_task_dealloc(*(_QWORD *)(*v0 + 1232));

  return swift_task_switch(sub_100029A00, *(_QWORD *)(v1 + 1112), *(_QWORD *)(v1 + 1120));
}

uint64_t sub_100029A00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = *(void **)(v2 + 1224);
  v4 = *(void **)(v2 + 720);
  swift_release(*(_QWORD *)(v2 + 1104), a2);

  v5 = *(_QWORD *)(v2 + 728);
  v6 = objc_msgSend(*(id *)(v2 + 720), "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v6);

  KeyPath = swift_getKeyPath(&unk_100092F40);
  *(_QWORD *)(v2 + 536) = v5;
  v8 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 536, KeyPath, v8);
  swift_release(KeyPath, v9);
  v10 = *(void **)(v5 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString);
  v11 = swift_getKeyPath(&unk_100093008);
  *(_QWORD *)(v2 + 520) = v5;
  v44 = v10;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 520, v11, v8);
  swift_release(v11, v12);
  *(_QWORD *)(v2 + 464) = v5;
  v13 = swift_getKeyPath(&unk_100093008);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v2 + 464, v13, v8);
  swift_release(v13, v14);
  v15 = (_QWORD *)(v5 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__finishedResultForContextUUID);
  swift_beginAccess(v5 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__finishedResultForContextUUID, v2 + 400, 33, 0);
  v16 = *(_QWORD *)(v2 + 800);
  v17 = *(_QWORD *)(v2 + 792);
  v18 = *(_QWORD *)(v2 + 784);
  if (v10)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
    v47 = *v15;
    *v15 = 0x8000000000000000;
    sub_10001F4A4((uint64_t)v44, v16, isUniquelyReferenced_nonNull_native);
    v20 = *v15;
    *v15 = v47;
    swift_bridgeObjectRelease(v20);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  else
  {
    v21 = (void *)sub_10001D438(*(_QWORD *)(v2 + 800));
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);

  }
  v22 = *(_QWORD *)(v2 + 728);
  swift_endAccess(v2 + 400);
  *(_QWORD *)(v2 + 456) = v22;
  v23 = swift_getKeyPath(&unk_100093008);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v2 + 456, v23, v8);
  swift_release(v23, v24);
  v25 = *(_QWORD *)(v2 + 1080);
  v26 = *(_QWORD *)(v2 + 1056);
  v27 = *(_QWORD *)(v2 + 1048);
  v28 = *(_QWORD *)(v2 + 1024);
  v29 = *(_QWORD *)(v2 + 1016);
  v30 = *(_QWORD *)(v2 + 992);
  v31 = *(_QWORD *)(v2 + 984);
  v32 = *(_QWORD *)(v2 + 960);
  v33 = *(_QWORD *)(v2 + 936);
  v35 = *(_QWORD *)(v2 + 912);
  v36 = *(_QWORD *)(v2 + 888);
  v37 = *(_QWORD *)(v2 + 864);
  v38 = *(_QWORD *)(v2 + 840);
  v39 = *(_QWORD *)(v2 + 816);
  v40 = *(_QWORD *)(v2 + 808);
  v41 = *(_QWORD *)(v2 + 800);
  v42 = *(_QWORD *)(v2 + 776);
  v43 = *(_QWORD *)(v2 + 768);
  v45 = *(_QWORD *)(v2 + 744);
  v46 = *(_QWORD *)(v2 + 736);
  swift_task_dealloc(*(_QWORD *)(v2 + 1088));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100029D5C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1256);
  *(_QWORD *)(*(_QWORD *)v1 + 1264) = v0;
  swift_task_dealloc(v3);
  swift_release(v2[156], v4);
  if (v0)
    v5 = sub_10002AFD8;
  else
    v5 = sub_100029DD8;
  return swift_task_switch(v5, v2[139], v2[140]);
}

uint64_t sub_100029DD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *Strong;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  NSString v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  if (*(_QWORD *)(v0 + 224))
  {
    v81 = *(void **)(v0 + 224);
    v1 = *(_QWORD *)(v0 + 248);
    v84 = *(_QWORD *)(v0 + 240);
    v86 = *(_QWORD *)(v0 + 232);
    v88 = *(_QWORD *)(v0 + 256);
    v90 = *(_QWORD *)(v0 + 264);
    v2 = *(_QWORD *)(v0 + 1136);
    v3 = *(_QWORD *)(v0 + 728);
    KeyPath = swift_getKeyPath(&unk_100092F90);
    *(_QWORD *)(v0 + 552) = v3;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 552, KeyPath, v2);
    swift_release(KeyPath, v5);
    *(_QWORD *)(v0 + 560) = v3;
    v6 = swift_getKeyPath(&unk_100092F90);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v0 + 560, v6, v2);
    swift_release(v6, v7);
    *(_QWORD *)(v3 + 96) |= v1;
    v8 = swift_getKeyPath(&unk_100092F90);
    *(_QWORD *)(v0 + 568) = v3;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 568, v8, v2);
    swift_release(v8, v9);
    if ((*(_BYTE *)(v3 + 96) & 1) != 0)
    {
      Strong = (void *)swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 728) + 16);
      if (Strong)
      {
        v11 = Strong;
        if ((objc_msgSend(Strong, "respondsToSelector:", "showContentWarningWithTitle:message:") & 1) != 0)
        {
          if (qword_1000C73E8 != -1)
            swift_once(&qword_1000C73E8, sub_10000B294);
          v12 = *(_QWORD *)(v0 + 936);
          v13 = *(_QWORD *)(v0 + 928);
          v14 = *(_QWORD *)(v0 + 920);
          v15 = sub_1000063D4(v14, (uint64_t)qword_1000D1C48);
          v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
          v16(v12, v15, v14);
          String.init(localized:)(v12);
          v18 = v17;
          if (qword_1000C73F0 != -1)
            swift_once(&qword_1000C73F0, sub_10000B2B8);
          v19 = *(_QWORD *)(v0 + 936);
          v20 = *(_QWORD *)(v0 + 920);
          v21 = sub_1000063D4(v20, (uint64_t)qword_1000D1C60);
          v16(v19, v21, v20);
          String.init(localized:)(v19);
          v23 = v22;
          v24 = String._bridgeToObjectiveC()();
          v25 = String._bridgeToObjectiveC()();
          objc_msgSend(v11, "showContentWarningWithTitle:message:", v24, v25);
          swift_bridgeObjectRelease(v18);
          swift_bridgeObjectRelease(v23);
          swift_unknownObjectRelease(v11);

        }
        else
        {
          swift_unknownObjectRelease(v11);
        }
      }
    }
    v59 = *(_QWORD *)(v0 + 1136);
    v60 = *(_QWORD *)(v0 + 728);
    *(_QWORD *)(v0 + 576) = v60;
    v61 = swift_getKeyPath(&unk_100092F90);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v0 + 576, v61, v59);
    swift_release(v61, v62);
    v63 = swift_getKeyPath(&unk_100092F40);
    v64 = swift_task_alloc(32);
    *(_QWORD *)(v64 + 16) = v60;
    *(_QWORD *)(v64 + 24) = v81;
    *(_QWORD *)(v0 + 584) = v60;
    v65 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
    v83 = v81;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 584, v63, sub_10002CF04, v64, (char *)&type metadata for () + 8, v65);
    swift_release(v63, v66);

    swift_task_dealloc(v64);
    v67 = swift_getKeyPath(&unk_100092F68);
    v68 = swift_task_alloc(48);
    *(_QWORD *)(v68 + 16) = v60;
    *(_QWORD *)(v68 + 24) = v86;
    *(_QWORD *)(v68 + 32) = v84;
    *(_BYTE *)(v68 + 40) = 0;
    *(_QWORD *)(v0 + 592) = v60;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 592, v67, sub_10002CF20, v68, (char *)&type metadata for () + 8, v65);
    swift_release(v67, v69);
    swift_task_dealloc(v68);
    v70 = swift_getKeyPath(&unk_1000930F8);
    v71 = (_QWORD *)swift_task_alloc(48);
    v71[2] = v60;
    v71[3] = v88;
    v71[4] = v90;
    *(_QWORD *)(v0 + 600) = v60;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 600, v70, sub_10002D128, v71, (char *)&type metadata for () + 8, v65);

    swift_release(v70, v72);
    swift_bridgeObjectRelease(v90);
    v73 = swift_task_dealloc(v71);
    v74 = static MainActor.shared.getter(v73);
    *(_QWORD *)(v0 + 1248) = v74;
    v75 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(_QWORD *)(v0 + 1256) = v75;
    *v75 = v0;
    v75[1] = sub_100029D5C;
    return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 224, v74, &protocol witness table for MainActor, *(_QWORD *)(v0 + 1064), v0 + 712);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 1104);
    v27 = *(void **)(v0 + 720);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1072) + 8))(*(_QWORD *)(v0 + 1080), *(_QWORD *)(v0 + 1064));
    swift_release(v26, v28);

    v29 = *(_QWORD *)(v0 + 728);
    v30 = objc_msgSend(*(id *)(v0 + 720), "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v30);

    v31 = swift_getKeyPath(&unk_100092F40);
    *(_QWORD *)(v0 + 536) = v29;
    v32 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 536, v31, v32);
    swift_release(v31, v33);
    v34 = *(void **)(v29 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString);
    v35 = swift_getKeyPath(&unk_100093008);
    *(_QWORD *)(v0 + 520) = v29;
    v91 = v34;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 520, v35, v32);
    swift_release(v35, v36);
    *(_QWORD *)(v0 + 464) = v29;
    v37 = swift_getKeyPath(&unk_100093008);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v0 + 464, v37, v32);
    swift_release(v37, v38);
    v39 = (_QWORD *)(v29 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__finishedResultForContextUUID);
    swift_beginAccess(v29 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__finishedResultForContextUUID, v0 + 400, 33, 0);
    v40 = *(_QWORD *)(v0 + 800);
    v41 = *(_QWORD *)(v0 + 792);
    v42 = *(_QWORD *)(v0 + 784);
    if (v34)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v39);
      v94 = *v39;
      *v39 = 0x8000000000000000;
      sub_10001F4A4((uint64_t)v91, v40, isUniquelyReferenced_nonNull_native);
      v44 = *v39;
      *v39 = v94;
      swift_bridgeObjectRelease(v44);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
    }
    else
    {
      v45 = (void *)sub_10001D438(*(_QWORD *)(v0 + 800));
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);

    }
    v46 = *(_QWORD *)(v0 + 728);
    swift_endAccess(v0 + 400);
    *(_QWORD *)(v0 + 456) = v46;
    v47 = swift_getKeyPath(&unk_100093008);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v0 + 456, v47, v32);
    swift_release(v47, v48);
    v49 = *(_QWORD *)(v0 + 1080);
    v50 = *(_QWORD *)(v0 + 1056);
    v51 = *(_QWORD *)(v0 + 1048);
    v52 = *(_QWORD *)(v0 + 1024);
    v53 = *(_QWORD *)(v0 + 1016);
    v54 = *(_QWORD *)(v0 + 992);
    v55 = *(_QWORD *)(v0 + 984);
    v56 = *(_QWORD *)(v0 + 960);
    v57 = *(_QWORD *)(v0 + 936);
    v76 = *(_QWORD *)(v0 + 912);
    v77 = *(_QWORD *)(v0 + 888);
    v78 = *(_QWORD *)(v0 + 864);
    v79 = *(_QWORD *)(v0 + 840);
    v80 = *(_QWORD *)(v0 + 816);
    v82 = *(_QWORD *)(v0 + 808);
    v85 = *(_QWORD *)(v0 + 800);
    v87 = *(_QWORD *)(v0 + 776);
    v89 = *(_QWORD *)(v0 + 768);
    v92 = *(_QWORD *)(v0 + 744);
    v93 = *(_QWORD *)(v0 + 736);
    swift_task_dealloc(*(_QWORD *)(v0 + 1088));
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v89);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10002A5B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1296);
  *(_QWORD *)(*(_QWORD *)v1 + 1304) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v5 = v2[54];
    swift_release(v2[161], v4);
    swift_bridgeObjectRelease(v5);
    v6 = v2[140];
    v7 = v2[139];
    v8 = sub_10002B2F4;
  }
  else
  {
    swift_release(v2[161], v4);
    v6 = v2[140];
    v7 = v2[139];
    v8 = sub_10002A640;
  }
  return swift_task_switch(v8, v7, v6);
}

uint64_t sub_10002A640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  id v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *Strong;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSString v47;
  NSString v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  Swift::String v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  NSString v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v1 = *(_QWORD *)(v0 + 776);
  v2 = *(_QWORD *)(v0 + 760);
  v3 = *(_QWORD *)(v0 + 752);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v4 = v0 + 464;
    v118 = v0 + 400;
    v5 = v0 + 536;
    v6 = *(_QWORD *)(v0 + 1104);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 904) + 8))(*(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 896));
    swift_release(v6, v7);
    v8 = *(_QWORD *)(v0 + 432);
    v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v9 = *(_QWORD *)(v0 + 424) & 0xFFFFFFFFFFFFLL;
    if (v9)
    {
      v10 = *(_QWORD *)(v0 + 1280);
      v11 = *(_QWORD *)(v0 + 728);
      v12 = objc_allocWithZone((Class)NSAttributedString);
      v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v8);
      v14 = objc_msgSend(v12, "initWithString:", v13);

      KeyPath = swift_getKeyPath(&unk_100092F40);
      v16 = swift_task_alloc(32);
      *(_QWORD *)(v16 + 16) = v11;
      *(_QWORD *)(v16 + 24) = v14;
      *(_QWORD *)(v0 + 608) = v11;
      v4 = v0 + 464;
      v17 = v10;
      v5 = v0 + 536;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 608, KeyPath, sub_10002CF04, v16, (char *)&type metadata for () + 8, v17);
      swift_release(KeyPath, v18);

      swift_task_dealloc(v16);
    }
    else
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 432));
    }
    v49 = *(_QWORD *)(v0 + 728);
    v50 = objc_msgSend(*(id *)(v0 + 720), "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v50);

    v51 = swift_getKeyPath(&unk_100092F40);
    *(_QWORD *)(v0 + 536) = v49;
    v52 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v5, v51, v52);
    swift_release(v51, v53);
    v54 = *(void **)(v49 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString);
    v55 = swift_getKeyPath(&unk_100093008);
    *(_QWORD *)(v0 + 520) = v49;
    v56 = v54;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 520, v55, v52);
    swift_release(v55, v57);
    *(_QWORD *)(v0 + 464) = v49;
    v58 = swift_getKeyPath(&unk_100093008);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v58, v52);
    swift_release(v58, v59);
    v60 = (_QWORD *)(v49 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__finishedResultForContextUUID);
    swift_beginAccess(v49 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__finishedResultForContextUUID, v118, 33, 0);
    v61 = *(_QWORD *)(v0 + 800);
    v62 = *(_QWORD *)(v0 + 792);
    v63 = *(_QWORD *)(v0 + 784);
    if (v54)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v60);
      v120 = *v60;
      *v60 = 0x8000000000000000;
      sub_10001F4A4((uint64_t)v56, v61, isUniquelyReferenced_nonNull_native);
      v65 = *v60;
      *v60 = v120;
      swift_bridgeObjectRelease(v65);
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
    }
    else
    {
      v66 = (void *)sub_10001D438(*(_QWORD *)(v0 + 800));
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);

    }
    v67 = *(_QWORD *)(v0 + 728);
    swift_endAccess(v118);
    *(_QWORD *)(v0 + 456) = v67;
    v68 = swift_getKeyPath(&unk_100093008);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v0 + 456, v68, v52);
    swift_release(v68, v69);
    v70 = *(_QWORD *)(v0 + 1080);
    v71 = *(_QWORD *)(v0 + 1056);
    v72 = *(_QWORD *)(v0 + 1048);
    v73 = *(_QWORD *)(v0 + 1024);
    v74 = *(_QWORD *)(v0 + 1016);
    v75 = *(_QWORD *)(v0 + 992);
    v76 = *(_QWORD *)(v0 + 984);
    v77 = *(_QWORD *)(v0 + 960);
    v78 = *(_QWORD *)(v0 + 936);
    v105 = *(_QWORD *)(v0 + 912);
    v106 = *(_QWORD *)(v0 + 888);
    v107 = *(_QWORD *)(v0 + 864);
    v108 = *(_QWORD *)(v0 + 840);
    v109 = *(_QWORD *)(v0 + 816);
    v110 = *(_QWORD *)(v0 + 808);
    v111 = *(_QWORD *)(v0 + 800);
    v113 = *(_QWORD *)(v0 + 776);
    v115 = *(_QWORD *)(v0 + 768);
    v116 = *(_QWORD *)(v0 + 744);
    v119 = *(_QWORD *)(v0 + 736);
    swift_task_dealloc(*(_QWORD *)(v0 + 1088));
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v119);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 744);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 768), v1, v3);
    SummarizationClient.TextAssistantPartialSummary.safetyClassification.getter(v3);
    v20 = type metadata accessor for SummarySafetyClassification(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
    v23 = *(_QWORD *)(v0 + 744);
    if (v22 == 1)
    {
      sub_10000AE2C(*(_QWORD *)(v0 + 744), &qword_1000C9398);
    }
    else
    {
      v24 = SummarySafetyClassification.isSafe.getter();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v20);
      if ((v24 & 1) == 0)
      {
        v25 = *(_QWORD *)(v0 + 1136);
        v26 = *(_QWORD *)(v0 + 728);
        v27 = swift_getKeyPath(&unk_100092F90);
        *(_QWORD *)(v0 + 488) = v26;
        ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 488, v27, v25);
        swift_release(v27, v28);
        *(_QWORD *)(v0 + 496) = v26;
        v29 = swift_getKeyPath(&unk_100092F90);
        ObservationRegistrar.willSet<A, B>(_:keyPath:)(v0 + 496, v29, v25);
        swift_release(v29, v30);
        *(_QWORD *)(v26 + 96) |= 1uLL;
        v31 = swift_getKeyPath(&unk_100092F90);
        *(_QWORD *)(v0 + 504) = v26;
        ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 504, v31, v25);
        swift_release(v31, v32);
        if ((*(_BYTE *)(v26 + 96) & 1) != 0)
        {
          Strong = (void *)swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 728) + 16);
          if (Strong)
          {
            v34 = Strong;
            if ((objc_msgSend(Strong, "respondsToSelector:", "showContentWarningWithTitle:message:") & 1) != 0)
            {
              if (qword_1000C73E8 != -1)
                swift_once(&qword_1000C73E8, sub_10000B294);
              v35 = *(_QWORD *)(v0 + 936);
              v36 = *(_QWORD *)(v0 + 928);
              v37 = *(_QWORD *)(v0 + 920);
              v38 = sub_1000063D4(v37, (uint64_t)qword_1000D1C48);
              v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
              v39(v35, v38, v37);
              String.init(localized:)(v35);
              v41 = v40;
              if (qword_1000C73F0 != -1)
                swift_once(&qword_1000C73F0, sub_10000B2B8);
              v42 = *(_QWORD *)(v0 + 936);
              v43 = *(_QWORD *)(v0 + 920);
              v44 = sub_1000063D4(v43, (uint64_t)qword_1000D1C60);
              v39(v42, v44, v43);
              String.init(localized:)(v42);
              v46 = v45;
              v47 = String._bridgeToObjectiveC()();
              v48 = String._bridgeToObjectiveC()();
              objc_msgSend(v34, "showContentWarningWithTitle:message:", v47, v48);
              swift_bridgeObjectRelease(v41);
              swift_bridgeObjectRelease(v46);
              swift_unknownObjectRelease(v34);

            }
            else
            {
              swift_unknownObjectRelease(v34);
            }
          }
        }
        v80 = *(_QWORD *)(v0 + 1136);
        *(_QWORD *)(v0 + 512) = *(_QWORD *)(v0 + 728);
        v81 = swift_getKeyPath(&unk_100092F90);
        ObservationRegistrar.didSet<A, B>(_:keyPath:)(v0 + 512, v81, v80);
        swift_release(v81, v82);
      }
    }
    v83 = *(_QWORD *)(v0 + 1280);
    v117 = *(_QWORD *)(v0 + 760);
    v84 = *(_QWORD *)(v0 + 752);
    v85 = *(_QWORD *)(v0 + 736);
    v86 = *(_QWORD *)(v0 + 728);
    v114 = v84;
    v112 = *(_QWORD *)(v0 + 768);
    SummarizationClient.TextAssistantPartialSummary.content.getter(v84);
    v87._countAndFlagsBits = *(_QWORD *)(v0 + 440);
    v88 = *(void **)(v0 + 448);
    v87._object = v88;
    String.append(_:)(v87);
    swift_bridgeObjectRelease(v88);
    SummarizationClient.TextAssistantPartialSummary.inferenceEnvironmentInfo.getter(v84);
    v89 = sub_100023928(v85);
    v91 = v90;
    sub_10000AE2C(v85, &qword_1000C8898);
    v92 = swift_getKeyPath(&unk_1000930F8);
    v93 = (_QWORD *)swift_task_alloc(48);
    v93[2] = v86;
    v93[3] = v89;
    v93[4] = v91;
    *(_QWORD *)(v0 + 472) = v86;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 472, v92, sub_10002D128, v93, (char *)&type metadata for () + 8, v83);
    swift_release(v92, v94);
    swift_bridgeObjectRelease(v91);
    swift_task_dealloc(v93);
    v95 = *(_QWORD *)(v0 + 432);
    v96 = objc_allocWithZone((Class)NSAttributedString);
    swift_bridgeObjectRetain(v95);
    v97 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v95);
    v98 = objc_msgSend(v96, "initWithString:", v97);

    v99 = swift_getKeyPath(&unk_100092F40);
    v100 = swift_task_alloc(32);
    *(_QWORD *)(v100 + 16) = v86;
    *(_QWORD *)(v100 + 24) = v98;
    *(_QWORD *)(v0 + 480) = v86;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 480, v99, sub_10002CF04, v100, (char *)&type metadata for () + 8, v83);
    swift_release(v99, v101);

    swift_task_dealloc(v100);
    v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v117 + 8))(v112, v114);
    v103 = static MainActor.shared.getter(v102);
    *(_QWORD *)(v0 + 1288) = v103;
    v104 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(_QWORD *)(v0 + 1296) = v104;
    *v104 = v0;
    v104[1] = sub_10002A5B8;
    return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(*(_QWORD *)(v0 + 776), v103, &protocol witness table for MainActor, *(_QWORD *)(v0 + 896), v0 + 688);
  }
}

uint64_t sub_10002AFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = *(_QWORD *)(v2 + 1080);
  v4 = *(_QWORD *)(v2 + 1072);
  v5 = *(_QWORD *)(v2 + 1064);
  v6 = *(void **)(v2 + 720);
  swift_release(*(_QWORD *)(v2 + 1104), a2);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v7 = *(_QWORD *)(v2 + 712);
  swift_errorRetain(v7);
  sub_10000C1D4(v7);
  swift_errorRelease(v7);
  if (qword_1000C73C0 != -1)
    swift_once(&qword_1000C73C0, sub_100006228);
  v8 = type metadata accessor for Logger(0);
  sub_1000063D4(v8, (uint64_t)qword_1000D1BD0);
  swift_errorRetain(v7);
  v9 = swift_errorRetain(v7);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 138412290;
    swift_errorRetain(v7);
    v14 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v2 + 624) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 624, v2 + 632, v12 + 4, v12 + 12);
    *v13 = v14;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error occurred in rewriting: %@", v12, 0xCu);
    v15 = sub_100004EAC(&qword_1000C87C8);
    swift_arrayDestroy(v13, 1, v15);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v16 = *(_QWORD *)(v2 + 1080);
  v17 = *(_QWORD *)(v2 + 1056);
  v18 = *(_QWORD *)(v2 + 1048);
  v19 = *(_QWORD *)(v2 + 1024);
  v20 = *(_QWORD *)(v2 + 1016);
  v21 = *(_QWORD *)(v2 + 992);
  v22 = *(_QWORD *)(v2 + 984);
  v23 = *(_QWORD *)(v2 + 960);
  v24 = *(_QWORD *)(v2 + 936);
  v26 = *(_QWORD *)(v2 + 912);
  v27 = *(_QWORD *)(v2 + 888);
  v28 = *(_QWORD *)(v2 + 864);
  v29 = *(_QWORD *)(v2 + 840);
  v30 = *(_QWORD *)(v2 + 816);
  v31 = *(_QWORD *)(v2 + 808);
  v32 = *(_QWORD *)(v2 + 800);
  v33 = *(_QWORD *)(v2 + 776);
  v34 = *(_QWORD *)(v2 + 768);
  v35 = *(_QWORD *)(v2 + 744);
  v36 = *(_QWORD *)(v2 + 736);
  swift_task_dealloc(*(_QWORD *)(v2 + 1088));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10002B2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = *(_QWORD *)(v2 + 912);
  v4 = *(_QWORD *)(v2 + 904);
  v5 = *(_QWORD *)(v2 + 896);
  swift_release(*(_QWORD *)(v2 + 1104), a2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v2 + 688);
  swift_errorRetain(v6);
  sub_10000C1D4(v6);
  swift_errorRelease(v6);
  if (qword_1000C73C0 != -1)
    swift_once(&qword_1000C73C0, sub_100006228);
  v7 = type metadata accessor for Logger(0);
  sub_1000063D4(v7, (uint64_t)qword_1000D1BD0);
  swift_errorRetain(v6);
  v8 = swift_errorRetain(v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(v6);
    v13 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v2 + 624) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 624, v2 + 632, v11 + 4, v11 + 12);
    *v12 = v13;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error occurred in rewriting: %@", v11, 0xCu);
    v14 = sub_100004EAC(&qword_1000C87C8);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v6);
  }
  else
  {
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    swift_errorRelease(v6);

  }
  v15 = *(_QWORD *)(v2 + 1080);
  v16 = *(_QWORD *)(v2 + 1056);
  v17 = *(_QWORD *)(v2 + 1048);
  v18 = *(_QWORD *)(v2 + 1024);
  v19 = *(_QWORD *)(v2 + 1016);
  v20 = *(_QWORD *)(v2 + 992);
  v21 = *(_QWORD *)(v2 + 984);
  v22 = *(_QWORD *)(v2 + 960);
  v23 = *(_QWORD *)(v2 + 936);
  v25 = *(_QWORD *)(v2 + 912);
  v26 = *(_QWORD *)(v2 + 888);
  v27 = *(_QWORD *)(v2 + 864);
  v28 = *(_QWORD *)(v2 + 840);
  v29 = *(_QWORD *)(v2 + 816);
  v30 = *(_QWORD *)(v2 + 808);
  v31 = *(_QWORD *)(v2 + 800);
  v32 = *(_QWORD *)(v2 + 776);
  v33 = *(_QWORD *)(v2 + 768);
  v34 = *(_QWORD *)(v2 + 744);
  v35 = *(_QWORD *)(v2 + 736);
  swift_task_dealloc(*(_QWORD *)(v2 + 1088));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10002B608()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(void **)(v0 + 1160);
  v2 = *(_QWORD *)(v0 + 1104);
  v3 = *(_QWORD *)(v0 + 1088);
  v4 = *(_QWORD *)(v0 + 1072);
  v5 = *(_QWORD *)(v0 + 1064);

  swift_release(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v7 = *(_QWORD *)(v0 + 632);
  swift_errorRetain(v7);
  sub_10000C1D4(v7);
  swift_errorRelease(v7);
  if (qword_1000C73C0 != -1)
    swift_once(&qword_1000C73C0, sub_100006228);
  v8 = type metadata accessor for Logger(0);
  sub_1000063D4(v8, (uint64_t)qword_1000D1BD0);
  swift_errorRetain(v7);
  v9 = swift_errorRetain(v7);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 138412290;
    swift_errorRetain(v7);
    v14 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 624) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 624, v0 + 632, v12 + 4, v12 + 12);
    *v13 = v14;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error occurred in rewriting: %@", v12, 0xCu);
    v15 = sub_100004EAC(&qword_1000C87C8);
    swift_arrayDestroy(v13, 1, v15);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v16 = *(_QWORD *)(v0 + 1080);
  v17 = *(_QWORD *)(v0 + 1056);
  v18 = *(_QWORD *)(v0 + 1048);
  v19 = *(_QWORD *)(v0 + 1024);
  v20 = *(_QWORD *)(v0 + 1016);
  v21 = *(_QWORD *)(v0 + 992);
  v22 = *(_QWORD *)(v0 + 984);
  v23 = *(_QWORD *)(v0 + 960);
  v24 = *(_QWORD *)(v0 + 936);
  v26 = *(_QWORD *)(v0 + 912);
  v27 = *(_QWORD *)(v0 + 888);
  v28 = *(_QWORD *)(v0 + 864);
  v29 = *(_QWORD *)(v0 + 840);
  v30 = *(_QWORD *)(v0 + 816);
  v31 = *(_QWORD *)(v0 + 808);
  v32 = *(_QWORD *)(v0 + 800);
  v33 = *(_QWORD *)(v0 + 776);
  v34 = *(_QWORD *)(v0 + 768);
  v35 = *(_QWORD *)(v0 + 744);
  v36 = *(_QWORD *)(v0 + 736);
  swift_task_dealloc(*(_QWORD *)(v0 + 1088));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002B938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v6 + 184) = a4;
  *(_QWORD *)(v6 + 192) = v5;
  *(_BYTE *)(v6 + 248) = a5;
  *(_QWORD *)(v6 + 168) = a2;
  *(_QWORD *)(v6 + 176) = a3;
  *(_QWORD *)(v6 + 160) = a1;
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 200) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 208) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 216) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 224) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 232) = swift_task_alloc(v9);
  v10 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v6 + 240) = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  return swift_task_switch(sub_10002B9F4, v11, v12);
}

uint64_t sub_10002B9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t Strong;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(_QWORD);
  uint64_t v60;
  uint64_t v61;

  v3 = *(void **)(v2 + 184);
  v4 = *(_QWORD *)(v2 + 192);
  swift_release(*(_QWORD *)(v2 + 240), a2);
  v5 = objc_msgSend(v3, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v5);

  KeyPath = swift_getKeyPath(&unk_100092FE0);
  *(_QWORD *)(v2 + 112) = v4;
  v7 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 112, KeyPath, v7);
  swift_release(KeyPath, v8);
  v9 = (_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__sentFinishedResultToClientForContextUUID);
  swift_beginAccess(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__sentFinishedResultToClientForContextUUID, v2 + 40, 0, 0);
  v10 = *v9;
  if (*(_QWORD *)(*v9 + 16))
  {
    v11 = *(_QWORD *)(v2 + 232);
    swift_bridgeObjectRetain(*v9);
    v12 = sub_10001CCB8(v11);
    if ((v13 & 1) != 0)
      v14 = *(_BYTE *)(*(_QWORD *)(v10 + 56) + v12);
    else
      v14 = 0;
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v14 = 0;
  }
  v15 = *(_QWORD *)(v2 + 192);
  v59 = *(void (**)(_QWORD))(*(_QWORD *)(v2 + 208) + 8);
  ((void (*)(_QWORD, _QWORD))v59)(*(_QWORD *)(v2 + 232), *(_QWORD *)(v2 + 200));
  v16 = swift_getKeyPath(&unk_100092EA0);
  *(_QWORD *)(v2 + 144) = v15;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 144, v16, v7);
  swift_release(v16, v17);
  v18 = *(void **)(v15 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session);
  if (v18)
  {
    Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v2 + 192) + 16);
    if (Strong)
    {
      v20 = (void *)Strong;
      v21 = v18;
      if ((sub_100024588() & 1) == 0 || (sub_10000BF20() & 1) != 0 || (v14 & 1) != 0)
        goto LABEL_12;
      v26 = *(void **)(v2 + 184);
      v25 = *(_QWORD *)(v2 + 192);
      objc_msgSend(v20, "compositionSession:didReceiveText:replacementRange:inContext:finished:", v21, *(_QWORD *)(v2 + 160), *(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 176), v26, *(unsigned __int8 *)(v2 + 248));
      v27 = objc_msgSend(v26, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

      v28 = swift_getKeyPath(&unk_100092FE0);
      *(_QWORD *)(v2 + 88) = v25;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 88, v28, v7);
      swift_release(v28, v29);
      v30 = *v9;
      if (*(_QWORD *)(*v9 + 16)
        && (v31 = *(_QWORD *)(v2 + 224),
            swift_bridgeObjectRetain(*v9),
            sub_10001CCB8(v31),
            LOBYTE(v31) = v32,
            swift_bridgeObjectRelease(v30),
            (v31 & 1) != 0))
      {
        v33 = *(_BYTE *)(v2 + 248);
        ((void (*)(_QWORD, _QWORD))v59)(*(_QWORD *)(v2 + 224), *(_QWORD *)(v2 + 200));
        if ((v33 & 1) == 0)
        {
LABEL_12:
          swift_unknownObjectRelease(v20);

          goto LABEL_13;
        }
        v54 = *(_QWORD *)(v2 + 216);
        v34 = *(_QWORD *)(v2 + 192);
        v56 = *(_QWORD *)(v2 + 200);
        v58 = v2 + 152;
        v35 = objc_msgSend(*(id *)(v2 + 184), "uuid");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

        v36 = swift_getKeyPath(&unk_100092FE0);
        *(_QWORD *)(v2 + 128) = v34;
        ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 128, v36, v7);
        swift_release(v36, v37);
        *(_QWORD *)(v2 + 136) = v34;
        v38 = swift_getKeyPath(&unk_100092FE0);
        ObservationRegistrar.willSet<A, B>(_:keyPath:)(v2 + 136, v38, v7);
        swift_release(v38, v39);
        swift_beginAccess(v9, v2 + 64, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
        v60 = *v9;
        *v9 = 0x8000000000000000;
        sub_10001F350(1, v54, isUniquelyReferenced_nonNull_native);
        v41 = *v9;
        *v9 = v60;
        swift_bridgeObjectRelease(v41);
        ((void (*)(uint64_t, uint64_t))v59)(v54, v56);
        swift_endAccess(v2 + 64);
        *(_QWORD *)(v2 + 152) = v34;
      }
      else
      {
        v53 = *(_QWORD *)(v2 + 216);
        v42 = *(_QWORD *)(v2 + 192);
        v57 = *(_QWORD *)(v2 + 200);
        v58 = v2 + 120;
        v55 = *(_BYTE *)(v2 + 248);
        v43 = *(void **)(v2 + 184);
        v59(*(_QWORD *)(v2 + 224));
        v44 = objc_msgSend(v43, "uuid");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v44);

        v45 = swift_getKeyPath(&unk_100092FE0);
        *(_QWORD *)(v2 + 96) = v42;
        ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 96, v45, v7);
        swift_release(v45, v46);
        *(_QWORD *)(v2 + 104) = v42;
        v47 = swift_getKeyPath(&unk_100092FE0);
        ObservationRegistrar.willSet<A, B>(_:keyPath:)(v2 + 104, v47, v7);
        swift_release(v47, v48);
        swift_beginAccess(v9, v2 + 16, 33, 0);
        v49 = swift_isUniquelyReferenced_nonNull_native(*v9);
        v61 = *v9;
        *v9 = 0x8000000000000000;
        sub_10001F350(v55, v53, v49);
        v50 = *v9;
        *v9 = v61;
        swift_bridgeObjectRelease(v50);
        ((void (*)(uint64_t, uint64_t))v59)(v53, v57);
        swift_endAccess(v2 + 16);
        *(_QWORD *)(v2 + 120) = v42;
      }
      v51 = swift_getKeyPath(&unk_100092FE0);
      ObservationRegistrar.didSet<A, B>(_:keyPath:)(v58, v51, v7);
      swift_unknownObjectRelease(v20);

      swift_release(v51, v52);
    }
  }
LABEL_13:
  v22 = *(_QWORD *)(v2 + 224);
  v23 = *(_QWORD *)(v2 + 216);
  swift_task_dealloc(*(_QWORD *)(v2 + 232));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_10002BF64(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  uint64_t v26;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_100092EA0);
  v26 = v2;
  v7 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v26, KeyPath, v7);
  swift_release(KeyPath, v8);
  v9 = *(void **)(v2 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session);
  if (v9)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v3 + 16);
    if (Strong)
    {
      v11 = (void *)Strong;
      v12 = swift_getKeyPath(&unk_100092EC8);
      v26 = v3;
      v13 = v9;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v26, v12, v7);
      swift_release(v12, v14);
      v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__task);
      if (v15)
      {
        swift_retain(*(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__task));
        Task.cancel()();
        swift_release(v15, v16);
      }
      if (a2)
      {
        v17 = swift_unknownObjectWeakLoadStrong(v3 + 16);
        if (v17)
        {
          v18 = (void *)v17;
          swift_errorRetain(a2);
          v19 = (void *)_convertErrorToNSError(_:)(a2);
          objc_msgSend(v18, "endWritingToolsWithError:", v19);
          swift_errorRelease(a2);
          swift_unknownObjectRelease(v18);

        }
      }
      else if ((sub_100024588() & 1) != 0)
      {
        if (a1 == 2)
        {
          v20 = swift_getKeyPath(&unk_100092EF0);
          v26 = v3;
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v26, v20, v7);
          swift_release(v20, v21);
          v22 = *(_BYTE *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__showingOriginal) ^ 1;
        }
        else
        {
          v22 = a1 & 1;
        }
        objc_msgSend(v11, "didEndWritingToolsSession:accepted:", v13, v22 & 1);
      }
      v23 = swift_getKeyPath(&unk_100092EA0);
      __chkstk_darwin(v23);
      v25[2] = v3;
      v25[3] = 0;
      v26 = v3;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v26, v23, sub_10002CEB8, v25, (char *)&type metadata for () + 8, v7);
      swift_release(v23, v24);
      swift_unknownObjectRelease(v11);

    }
  }
}

void *sub_10002C1E4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  KeyPath = swift_getKeyPath(&unk_1000930A8);
  v24 = v0;
  v2 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, KeyPath, v2);
  result = (void *)swift_release(KeyPath, v3);
  v5 = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount))
  {
    v6 = swift_getKeyPath(&unk_1000930A8);
    v24 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v6, v2);
    swift_release(v6, v7);
    v24 = v0;
    v8 = swift_getKeyPath(&unk_1000930A8);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v24, v8, v2);
    result = (void *)swift_release(v8, v9);
    v10 = *(_QWORD *)(v0 + v5);
    v11 = v10 != 0;
    v12 = v10 - 1;
    if (!v11)
    {
      __break(1u);
LABEL_10:
      __break(1u);
      return result;
    }
    *(_QWORD *)(v0 + v5) = v12;
    v24 = v0;
    v13 = swift_getKeyPath(&unk_1000930A8);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v24, v13, v2);
    swift_release(v13, v14);
    v15 = swift_getKeyPath(&unk_100093080);
    v24 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v15, v2);
    swift_release(v15, v16);
    v24 = v0;
    v17 = swift_getKeyPath(&unk_100093080);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v24, v17, v2);
    result = (void *)swift_release(v17, v18);
    v19 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__redoCount);
    v11 = __CFADD__(v19, 1);
    v20 = v19 + 1;
    if (v11)
      goto LABEL_10;
    *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__redoCount) = v20;
    v24 = v0;
    v21 = swift_getKeyPath(&unk_100093080);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v24, v21, v2);
    swift_release(v21, v22);
    result = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
    if (result)
    {
      v23 = result;
      if ((objc_msgSend(result, "respondsToSelector:", "undo") & 1) != 0)
        objc_msgSend(v23, "undo");
      return (void *)swift_unknownObjectRelease(v23);
    }
  }
  return result;
}

void *sub_10002C3EC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  KeyPath = swift_getKeyPath(&unk_100093080);
  v24 = v0;
  v2 = sub_10002CE70(&qword_1000CB2B0, type metadata accessor for RewritingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, KeyPath, v2);
  result = (void *)swift_release(KeyPath, v3);
  v5 = OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__redoCount;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__redoCount))
  {
    v6 = swift_getKeyPath(&unk_100093080);
    v24 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v6, v2);
    swift_release(v6, v7);
    v24 = v0;
    v8 = swift_getKeyPath(&unk_100093080);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v24, v8, v2);
    result = (void *)swift_release(v8, v9);
    v10 = *(_QWORD *)(v0 + v5);
    v11 = v10 != 0;
    v12 = v10 - 1;
    if (!v11)
    {
      __break(1u);
LABEL_10:
      __break(1u);
      return result;
    }
    *(_QWORD *)(v0 + v5) = v12;
    v24 = v0;
    v13 = swift_getKeyPath(&unk_100093080);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v24, v13, v2);
    swift_release(v13, v14);
    v15 = swift_getKeyPath(&unk_1000930A8);
    v24 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v15, v2);
    swift_release(v15, v16);
    v24 = v0;
    v17 = swift_getKeyPath(&unk_1000930A8);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v24, v17, v2);
    result = (void *)swift_release(v17, v18);
    v19 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount);
    v11 = __CFADD__(v19, 1);
    v20 = v19 + 1;
    if (v11)
      goto LABEL_10;
    *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount) = v20;
    v24 = v0;
    v21 = swift_getKeyPath(&unk_1000930A8);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v24, v21, v2);
    swift_release(v21, v22);
    result = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
    if (result)
    {
      v23 = result;
      if ((objc_msgSend(result, "respondsToSelector:", "redo") & 1) != 0)
        objc_msgSend(v23, "redo");
      return (void *)swift_unknownObjectRelease(v23);
    }
  }
  return result;
}

uint64_t sub_10002C5F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__isForEditableContent) = 1;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__wantsInlineEditing) = 1;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__allowedResultOptions) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__task) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString) = 0;
  v1 = v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedStringRange;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 16) = 1;
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString);
  *v2 = 0;
  v2[1] = 0xE000000000000000;
  swift_retain(v0);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__sentFinishedResultToClientForContextUUID) = sub_1000626A4((uint64_t)&_swiftEmptyArrayStorage);
  v3 = sub_100062838((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__finishedResultForContextUUID) = v3;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__showingOriginal) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__redoCount) = 0;
  ObservationRegistrar.init()(v3);
  swift_release(v0, v4);
  v5 = swift_unknownObjectWeakInit(v0 + 16, 0);
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_BYTE *)(v0 + 56) = -1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_BYTE *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 104) = 0;
  ObservationRegistrar.init()(v5);
  return v0;
}

uint64_t sub_10002C740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__task), v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__sentFinishedResultToClientForContextUUID));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__finishedResultForContextUUID));
  v2 = v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel___observationRegistrar;
  v3 = type metadata accessor for ObservationRegistrar(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_10002C7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  sub_10000C714(v0 + 16);

  sub_10000B11C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_errorRelease(*(_QWORD *)(v0 + 80));
  v1 = v0 + OBJC_IVAR____TtC21WritingToolsUIService9ToolModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__task), v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__sentFinishedResultToClientForContextUUID));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__finishedResultForContextUUID));
  v3(v0 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel___observationRegistrar, v2);
  return v0;
}

uint64_t sub_10002C8D8()
{
  uint64_t v0;

  sub_10002C7E0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10002C8FC()
{
  return type metadata accessor for RewritingModel(0);
}

uint64_t type metadata accessor for RewritingModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000C8D48;
  if (!qword_1000C8D48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RewritingModel);
  return result;
}

uint64_t sub_10002C940(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[14];

  v4[0] = &unk_100092E18;
  v4[1] = &unk_100092E18;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_100092E30;
  v4[4] = &unk_100092E30;
  v4[5] = &unk_100092E30;
  v4[6] = &unk_100092E48;
  v4[7] = &unk_100092E60;
  v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[10] = &unk_100092E18;
  v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[13] = *(_QWORD *)(result - 8) + 64;
    return swift_updateClassMetadata2(a1, 256, 14, v4, a1 + 688);
  }
  return result;
}

unint64_t sub_10002C9FC(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002CA84(char a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t result;
  Swift::String v6;
  _QWORD v7[2];

  if (a4)
  {
    v7[0] = 0;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease(0xE000000000000000);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003BLL, 0x80000001000ABF70, "WritingToolsUIService/RewritingModel.swift", 42, 2, 371, 0);
LABEL_14:
    __break(1u);
  }
  else
  {
    switch(a1)
    {
      case 6:
        result = 0x732E61742E6D675FLL;
        strcpy((char *)v7, "_gm.ta.summary");
        HIBYTE(v7[1]) = -18;
        if ((a5 & 1) == 0)
          return result;
        goto LABEL_10;
      case 7:
        result = 0xD000000000000010;
        v7[0] = 0xD000000000000010;
        v7[1] = 0x80000001000ABFB0;
        if ((a5 & 1) != 0)
          goto LABEL_10;
        return result;
      case 8:
        result = 0x6C2E61742E6D675FLL;
        strcpy((char *)v7, "_gm.ta.list");
        HIDWORD(v7[1]) = -352321536;
        if ((a5 & 1) == 0)
          return result;
        goto LABEL_10;
      case 9:
        result = 0x742E61742E6D675FLL;
        strcpy((char *)v7, "_gm.ta.table");
        BYTE5(v7[1]) = 0;
        HIWORD(v7[1]) = -5120;
        if ((a5 & 1) == 0)
          return result;
LABEL_10:
        v6._countAndFlagsBits = 7889198;
        v6._object = (void *)0xE300000000000000;
        String.append(_:)(v6);
        result = v7[0];
        break;
      default:
        v7[0] = 0;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease(0xE000000000000000);
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003BLL, 0x80000001000ABF70, "WritingToolsUIService/RewritingModel.swift", 42, 2, 364, 0);
        goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_10002CC44(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  *(_BYTE *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__isForEditableContent) = 1;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__wantsInlineEditing) = 1;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__allowedResultOptions) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__task) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString) = 0;
  v9 = v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedStringRange;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 16) = 1;
  v10 = (_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString);
  *v10 = 0;
  v10[1] = 0xE000000000000000;
  swift_retain(v4);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__sentFinishedResultToClientForContextUUID) = sub_1000626A4((uint64_t)_swiftEmptyArrayStorage);
  v11 = sub_100062838((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__finishedResultForContextUUID) = v11;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__showingOriginal) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__redoCount) = 0;
  ObservationRegistrar.init()(v11);
  swift_release(v4, v12);
  v13 = swift_unknownObjectWeakInit(v4 + 16, 0);
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_BYTE *)(v4 + 56) = -1;
  *(_QWORD *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  ObservationRegistrar.init()(v13);
  KeyPath = swift_getKeyPath(&unk_100092E78);
  v19 = v4;
  v20 = a1;
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = v4;
  v15 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, KeyPath, sub_100020FE0, &v18, (char *)&type metadata for () + 8, v15);
  sub_10000A880(a1, a2, a3, a4);
  swift_release(KeyPath, v16);
  swift_unknownObjectWeakAssign(v4 + 16);
  return v4;
}

uint64_t sub_10002CE70(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = swift_getWitnessTable(&unk_1000921D8, v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10002CEB8()
{
  uint64_t v0;

  sub_100024F4C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_10002CED8()
{
  uint64_t v0;

  sub_100025AD4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_10002CF04()
{
  sub_10002D168();
}

double sub_10002CF20()
{
  double result;

  *(_QWORD *)&result = sub_10002D144().n128_u64[0];
  return result;
}

void sub_10002CF3C()
{
  uint64_t v0;

  sub_10000BC4C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10002CF5C()
{
  uint64_t v0;

  return sub_10000BEF0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10002CF78@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100025760(a1, (uint64_t)&unk_100092FE0, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__sentFinishedResultToClientForContextUUID, a2);
}

uint64_t sub_10002CFA0()
{
  uint64_t v0;

  return sub_1000258BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__sentFinishedResultToClientForContextUUID);
}

uint64_t sub_10002CFC0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100025760(a1, (uint64_t)&unk_100093008, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__finishedResultForContextUUID, a2);
}

uint64_t sub_10002CFE8()
{
  uint64_t v0;

  return sub_1000258BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__finishedResultForContextUUID);
}

uint64_t sub_10002D008()
{
  return sub_10002D2A8();
}

uint64_t sub_10002D01C()
{
  return sub_10002D1F4(40);
}

uint64_t sub_10002D024(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1000C938C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000070C8;
  return sub_10002632C(a1, v4, v5, v6);
}

uint64_t sub_10002D0A0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100025D64(a1, (uint64_t)&unk_100093080, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__redoCount, a2);
}

uint64_t sub_10002D0C8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100025D64(a1, (uint64_t)&unk_1000930A8, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount, a2);
}

void sub_10002D0F0()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount) = *(_QWORD *)(v0 + 24);
}

void sub_10002D104()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__redoCount) = *(_QWORD *)(v0 + 24);
}

uint64_t sub_10002D128()
{
  return sub_10002D1A4();
}

uint64_t sub_10002D13C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000064E0(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

__n128 sub_10002D144()
{
  uint64_t v0;
  unsigned __int8 v1;
  __n128 *v2;
  __n128 result;

  v1 = *(_BYTE *)(v0 + 40);
  v2 = (__n128 *)(*(_QWORD *)(v0 + 16)
                + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedStringRange);
  result = *(__n128 *)(v0 + 24);
  *v2 = result;
  v2[1].n128_u8[0] = v1;
  return result;
}

void sub_10002D168()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString) = v2;
  v4 = v2;

}

uint64_t sub_10002D1A4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[4];
  v2 = (_QWORD *)(v0[2] + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString);
  v3 = v2[1];
  *v2 = v0[3];
  v2[1] = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10002D1EC()
{
  return sub_10002D1F4(41);
}

uint64_t sub_10002D1F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32), v3);
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10002D22C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_1000C93F4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10002199C;
  return sub_100027C60(a1, v4, v5, v6, v7);
}

uint64_t sub_10002D2A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__task);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__task) = v1;
  swift_retain(v1);
  return swift_release(v3, v4);
}

unint64_t sub_10002D2E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9CB0;
  if (!qword_1000C9CB0)
  {
    v1 = objc_opt_self(WTContext);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000C9CB0);
  }
  return result;
}

uint64_t sub_10002D33C()
{
  return sub_10002CFE8();
}

uint64_t sub_10002D350()
{
  return sub_10002CFA0();
}

void sub_10002D364()
{
  sub_10002CEB8();
}

uint64_t sub_10002D378()
{
  return sub_100021414();
}

uint64_t sub_10002D38C()
{
  return sub_100021078();
}

void sub_10002D3A0()
{
  sub_10002D104();
}

ValueMetadata *type metadata accessor for Warnings()
{
  return &type metadata for Warnings;
}

unint64_t sub_10002D3CC()
{
  unint64_t result;

  result = qword_1000C9400;
  if (!qword_1000C9400)
  {
    result = swift_getWitnessTable(&unk_1000931E0, &type metadata for Warnings);
    atomic_store(result, (unint64_t *)&qword_1000C9400);
  }
  return result;
}

unint64_t sub_10002D414()
{
  unint64_t result;

  result = qword_1000C9408;
  if (!qword_1000C9408)
  {
    result = swift_getWitnessTable(&unk_1000931B0, &type metadata for Warnings);
    atomic_store(result, (unint64_t *)&qword_1000C9408);
  }
  return result;
}

unint64_t sub_10002D45C()
{
  unint64_t result;

  result = qword_1000C9410;
  if (!qword_1000C9410)
  {
    result = swift_getWitnessTable(&unk_100093208, &type metadata for Warnings);
    atomic_store(result, (unint64_t *)&qword_1000C9410);
  }
  return result;
}

unint64_t sub_10002D4A4()
{
  unint64_t result;

  result = qword_1000C9418;
  if (!qword_1000C9418)
  {
    result = swift_getWitnessTable(&unk_100093240, &type metadata for Warnings);
    atomic_store(result, (unint64_t *)&qword_1000C9418);
  }
  return result;
}

double sub_10002D4E8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10002D540(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000C7788, &qword_1000C78A0).n128_u64[0];
  return result;
}

__n128 sub_10002D540@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter();
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_10000AD78(v18, v19, a16);
  v41 = v19 + *(int *)(sub_100004EAC(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

__n128 sub_10002D70C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __n128 result;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v21;
    v33 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v40;
    a1 = v41;
    v20 = a10;
    a3 = v42;
    v19 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  v35 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(a9, v16, v35);
  v36 = a9 + *(int *)(sub_100004EAC(&qword_1000C9FE0) + 36);
  v37 = v45[5];
  *(_OWORD *)(v36 + 64) = v45[4];
  *(_OWORD *)(v36 + 80) = v37;
  *(_OWORD *)(v36 + 96) = v45[6];
  v38 = v45[1];
  *(_OWORD *)v36 = v45[0];
  *(_OWORD *)(v36 + 16) = v38;
  result = (__n128)v45[3];
  *(_OWORD *)(v36 + 32) = v45[2];
  *(__n128 *)(v36 + 48) = result;
  return result;
}

double sub_10002D8D4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10002DF60(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000C9608, &qword_1000C9610).n128_u64[0];
  return result;
}

double sub_10002D92C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10002D540(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000C9540, &qword_1000C9548).n128_u64[0];
  return result;
}

uint64_t sub_10002D984@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  _OWORD *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unsigned int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _OWORD v49[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v47 = a5;
    v48 = a7;
    v46 = a3;
    v45 = a1;
    v44 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v44;
    v19 = a10;
    a1 = v45;
    a3 = v46;
    v18 = a12;
    a5 = v47;
    a7 = v48;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v49, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[5];
  a9[4] = v15[4];
  a9[5] = v34;
  v35 = v15[7];
  a9[6] = v15[6];
  a9[7] = v35;
  v36 = v15[1];
  *a9 = *v15;
  a9[1] = v36;
  v37 = v15[3];
  a9[2] = v15[2];
  a9[3] = v37;
  v38 = v49[1];
  a9[8] = v49[0];
  a9[9] = v38;
  v39 = v49[2];
  v40 = v49[3];
  v41 = v49[6];
  v42 = v49[4];
  a9[13] = v49[5];
  a9[14] = v41;
  a9[11] = v40;
  a9[12] = v42;
  a9[10] = v39;
  return sub_100034B38((uint64_t)v15);
}

_QWORD *sub_10002DB38@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  __int128 *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _OWORD v46[8];
  _BYTE v47[40];
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _BYTE v51[40];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a5;
    v45 = a7;
    v42 = a1;
    v43 = a3;
    v41 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v41;
    v19 = a10;
    v18 = a12;
    a1 = v42;
    a3 = v43;
    a5 = v44;
    a7 = v45;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[2];
  *(_QWORD *)&v47[32] = *((_QWORD *)v15 + 6);
  v35 = *v15;
  *(_OWORD *)v47 = v15[1];
  *(_OWORD *)&v47[16] = v34;
  v46[7] = v35;
  v48 = *(_OWORD *)&v47[8];
  v49 = *(_OWORD *)&v47[24];
  sub_100034AA4((uint64_t)&v48, (uint64_t)v51);
  v36 = v15[1];
  *(_OWORD *)a9 = *v15;
  *(_OWORD *)(a9 + 16) = v36;
  *(_OWORD *)(a9 + 32) = v15[2];
  v37 = v46[2];
  *(_OWORD *)(a9 + 104) = v46[3];
  v38 = v46[5];
  *(_OWORD *)(a9 + 120) = v46[4];
  *(_OWORD *)(a9 + 136) = v38;
  *(_OWORD *)(a9 + 152) = v46[6];
  v39 = v46[1];
  *(_OWORD *)(a9 + 56) = v46[0];
  *(_OWORD *)(a9 + 72) = v39;
  v50 = *((_QWORD *)&v49 + 1);
  *(_QWORD *)(a9 + 48) = *((_QWORD *)v15 + 6);
  *(_OWORD *)(a9 + 88) = v37;
  sub_100034AE0((uint64_t)v51);
  return sub_100034B10(&v50);
}

uint64_t sub_10002DD30@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unsigned int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _OWORD v49[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v48 = a7;
    v46 = a1;
    v47 = a5;
    v45 = a3;
    v44 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v44;
    a3 = v45;
    a1 = v46;
    a5 = v47;
    v18 = a12;
    a7 = v48;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v49, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 144);
  *(_OWORD *)(a9 + 128) = *(_OWORD *)(v15 + 128);
  *(_OWORD *)(a9 + 144) = v34;
  *(_OWORD *)(a9 + 160) = *(_OWORD *)(v15 + 160);
  v35 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(a9 + 80) = v35;
  v36 = *(_OWORD *)(v15 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v15 + 96);
  *(_OWORD *)(a9 + 112) = v36;
  v37 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v37;
  v38 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v38;
  v39 = v49[2];
  *(_OWORD *)(a9 + 232) = v49[3];
  v40 = v49[5];
  *(_OWORD *)(a9 + 248) = v49[4];
  v41 = v49[6];
  *(_OWORD *)(a9 + 264) = v40;
  *(_OWORD *)(a9 + 280) = v41;
  v42 = v49[1];
  *(_OWORD *)(a9 + 184) = v49[0];
  *(_OWORD *)(a9 + 200) = v42;
  *(_BYTE *)(a9 + 176) = *(_BYTE *)(v15 + 176);
  *(_OWORD *)(a9 + 216) = v39;
  return sub_100034A7C(v15);
}

double sub_10002DF08@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10002DF60(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000CBB00, &qword_1000C9600).n128_u64[0];
  return result;
}

__n128 sub_10002DF60@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v32;
  double v33;
  double v34;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __n128 result;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = a9;
  v19 = a16;
  v21 = a14;
  v20 = a15;
  v22 = a12;
  v23 = a10;
  v24 = a2 & 1;
  v25 = a1;
  if ((_DWORD)v24)
    v25 = -INFINITY;
  v26 = a4 & 1;
  v27 = a3;
  if ((_DWORD)v26)
    v27 = v25;
  v28 = a6 & 1;
  v29 = a8 & 1;
  v30 = a5;
  if ((a6 & 1) != 0)
    v30 = v27;
  if (v25 > v27 || v27 > v30)
    goto LABEL_22;
  v32 = a7;
  if ((a8 & 1) != 0)
    v32 = -INFINITY;
  v33 = a10;
  if ((a11 & 1) != 0)
    v33 = v32;
  v34 = a12;
  if ((a13 & 1) != 0)
    v34 = v33;
  if (v32 > v33 || v33 > v34)
  {
LABEL_22:
    v49 = a7;
    v50 = a5;
    v47 = a1;
    v48 = a3;
    v46 = v24;
    v36 = v26;
    v38 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v18 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v26 = v36;
    v21 = a14;
    v20 = a15;
    v24 = v46;
    v23 = a10;
    v22 = a12;
    a1 = v47;
    a3 = v48;
    a7 = v49;
    a5 = v50;
    v19 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v24, *(_QWORD *)&a3, v26, *(_QWORD *)&a5, v28, *(_QWORD *)&a7, v29, *(_QWORD *)&v23, a11 & 1, *(_QWORD *)&v22, a13 & 1, v21, v20);
  v41 = sub_100004EAC(v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v18, v17, v41);
  v42 = v18 + *(int *)(sub_100004EAC(a17) + 36);
  v43 = v51[5];
  *(_OWORD *)(v42 + 64) = v51[4];
  *(_OWORD *)(v42 + 80) = v43;
  *(_OWORD *)(v42 + 96) = v51[6];
  v44 = v51[1];
  *(_OWORD *)v42 = v51[0];
  *(_OWORD *)(v42 + 16) = v44;
  result = (__n128)v51[3];
  *(_OWORD *)(v42 + 32) = v51[2];
  *(__n128 *)(v42 + 48) = result;
  return result;
}

double sub_10002E13C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10002D540(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000C9768, &qword_1000C9770).n128_u64[0];
  return result;
}

uint64_t sub_10002E194@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _OWORD v44[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v43 = a7;
    v41 = a1;
    v42 = a5;
    v40 = a3;
    v39 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v39;
    a3 = v40;
    a1 = v41;
    a5 = v42;
    v18 = a12;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v34;
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  v35 = v44[2];
  *(_OWORD *)(a9 + 104) = v44[3];
  v36 = v44[5];
  *(_OWORD *)(a9 + 120) = v44[4];
  *(_OWORD *)(a9 + 136) = v36;
  *(_OWORD *)(a9 + 152) = v44[6];
  v37 = v44[1];
  *(_OWORD *)(a9 + 56) = v44[0];
  *(_OWORD *)(a9 + 72) = v37;
  *(_BYTE *)(a9 + 48) = *(_BYTE *)(v15 + 48);
  *(_OWORD *)(a9 + 88) = v35;
  return swift_bridgeObjectRetain(*(_QWORD *)(v15 + 32));
}

uint64_t sub_10002E34C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100093340);
  v8 = v3;
  v5 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  result = swift_release(KeyPath, v6);
  *a2 = *(_BYTE *)(v3 + 72);
  return result;
}

uint64_t sub_10002E3D8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100093340);
  v8[2] = v3;
  v9 = v2;
  v10 = v3;
  v5 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100021078, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

id sub_10002E480@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000936A0);
  v9 = v3;
  v5 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(void **)(v3 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString);
  *a2 = v7;
  return v7;
}

void sub_10002E514(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000936A0);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000343E0, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v7);

}

void sub_10002E5C8()
{
  qword_1000D1C98 = 0x407C200000000000;
}

uint64_t property wrapper backing initializer of ModelResponseView.rewritingModel(uint64_t a1)
{
  return sub_10000D2E8(a1, type metadata accessor for RewritingModel);
}

uint64_t property wrapper backing initializer of ModelResponseView.didTapDone(char a1)
{
  char v2;
  uint64_t v3;

  v2 = a1;
  State.init(wrappedValue:)(&v3, &v2, &type metadata for Bool);
  return v3;
}

uint64_t sub_10002E620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  objc_class *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = sub_100004EAC(&qword_1000C74C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a3 = swift_getKeyPath(&unk_1000936F0);
  v9 = sub_100004EAC(&qword_1000C74C8);
  swift_storeEnumTagMultiPayload(a3, v9, 0);
  v10 = (int *)type metadata accessor for ModelResponseView(0);
  v11 = (char *)a3 + v10[5];
  v12 = type metadata accessor for CommonUIManager(0);
  v13 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  *(_QWORD *)v11 = Environment.init<A>(_:)(v12, v12, v13);
  v11[8] = v14 & 1;
  v15 = (char *)a3 + v10[7];
  LOBYTE(v27) = 0;
  State.init(wrappedValue:)(&v28, &v27, &type metadata for Bool);
  v16 = v29;
  *v15 = v28;
  *((_QWORD *)v15 + 1) = v16;
  v17 = (_QWORD *)((char *)a3 + v10[8]);
  v18 = type metadata accessor for FBKSEvaluation.Subject(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v8, 1, 1, v18);
  v19 = (objc_class *)type metadata accessor for FBKEvaluationController(0);
  v20 = objc_allocWithZone(v19);
  v27 = FBKEvaluationController.init(subject:)(v8);
  State.init(wrappedValue:)(&v28, &v27, v19);
  v21 = v29;
  *v17 = v28;
  v17[1] = v21;
  v22 = (_QWORD *)((char *)a3 + v10[6]);
  v27 = a1;
  v23 = type metadata accessor for RewritingModel(0);
  State.init(wrappedValue:)(&v28, &v27, v23);
  v24 = v29;
  *v22 = v28;
  v22[1] = v24;
  return sub_10000AC80(a2, (uint64_t)a3 + v10[9], &qword_1000C9E90);
}

uint64_t ModelResponseView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t Strong;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t OpaqueTypeConformance2;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67[16];
  uint64_t v68;
  uint64_t v69;
  void *v70;
  unint64_t v71;
  void *v72;
  _QWORD v73[2];

  v2 = v1;
  v66 = a1;
  v57 = type metadata accessor for ModelResponseView(0);
  v3 = *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64);
  v62 = *(_QWORD *)(v57 - 8);
  v63 = v3;
  __chkstk_darwin(v57);
  v61 = (uint64_t)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100004EAC(&qword_1000C9E90);
  __chkstk_darwin(v59);
  v58 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004EAC(&qword_1000C9420);
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004EAC(&qword_1000C9428);
  __chkstk_darwin(v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004EAC(&qword_1000C9430);
  __chkstk_darwin(v12);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004EAC(&qword_1000C9438);
  v56 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004EAC(&qword_1000C9440);
  v19 = *(_QWORD *)(v18 - 8);
  v64 = v18;
  v65 = v19;
  v20 = __chkstk_darwin(v18);
  v60 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v20);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v22 = sub_100004EAC(&qword_1000C9448);
  v23 = sub_10002ED48(v1, (uint64_t)&v8[*(int *)(v22 + 44)]);
  v24 = static Alignment.center.getter(v23);
  sub_10002D540(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v11, 0.0, 1, 0.0, 1, v24, v25, &qword_1000C9420, &qword_1000C9428);
  sub_10000AE2C((uint64_t)v8, &qword_1000C9420);
  sub_10000AD78((uint64_t)v11, (uint64_t)v14, &qword_1000C9428);
  sub_10000AE2C((uint64_t)v11, &qword_1000C9428);
  v26 = (uint64_t *)(v1 + *(int *)(v57 + 24));
  v27 = (void *)v26[1];
  v69 = *v26;
  v28 = v69;
  v70 = v27;
  v29 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(v73, v29);
  v30 = v73[0];
  Strong = swift_unknownObjectWeakLoadStrong(v73[0] + 16);
  swift_release(v30, v32);
  v33 = (uint64_t)v58;
  Binding.projectedValue.getter(v59);
  sub_10003FA74(Strong, 1, 0, v33, (uint64_t)&v17[*(int *)(v15 + 36)]);
  sub_10000AC80((uint64_t)v14, (uint64_t)v17, &qword_1000C9430);
  v69 = v28;
  v70 = v27;
  State.wrappedValue.getter(v73, v29);
  v34 = v73[0];
  KeyPath = swift_getKeyPath(&unk_100093340);
  v69 = v34;
  v36 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v69, KeyPath, v36);
  swift_release(KeyPath, v37);
  LOBYTE(v30) = *(_BYTE *)(v34 + 72);
  swift_release(v34, v38);
  LOBYTE(v69) = v30;
  v39 = v2;
  v40 = v61;
  sub_1000312C4(v2, v61);
  v41 = *(unsigned __int8 *)(v62 + 80);
  v42 = (v41 + 16) & ~v41;
  v43 = swift_allocObject(&unk_1000BF4A0, v42 + v63, v41 | 7);
  sub_10003130C(v40, v43 + v42);
  v44 = sub_10003139C();
  v45 = v60;
  v46 = v56;
  View.onChange<A>(of:initial:_:)(&v69, 0, sub_100031350, v43, v56, &type metadata for Bool, v44, &protocol witness table for Bool);
  swift_release(v43, v47);
  sub_10000AE2C((uint64_t)v17, &qword_1000C9438);
  v68 = v39;
  v48 = sub_100004EAC(&qword_1000C9478);
  v69 = v46;
  v70 = &type metadata for Bool;
  v71 = v44;
  v72 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v69, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v50 = sub_10000ABD0(&qword_1000C9480);
  v51 = sub_10000B254(&qword_1000C9488, &qword_1000C9480, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v69 = v50;
  v70 = (void *)v51;
  v52 = swift_getOpaqueTypeConformance2(&v69, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v53 = v64;
  View.toolbar<A>(content:)(sub_100031638, v67, v64, v48, OpaqueTypeConformance2, v52);
  return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v45, v53);
}

uint64_t type metadata accessor for ModelResponseView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000C94F0;
  if (!qword_1000C94F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ModelResponseView);
  return result;
}

uint64_t sub_10002ED48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t OpaqueTypeConformance2;
  uint64_t v99;
  uint64_t v100;
  uint64_t result;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD v173[3];
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t KeyPath;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  _QWORD v221[2];

  v214 = a2;
  v188 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v187 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v185 = (char *)&v174 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ModelResponseView(0);
  v202 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  KeyPath = v5;
  v204 = (uint64_t)&v174 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_100004EAC(&qword_1000C9630);
  v199 = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200);
  v189 = (char *)&v174 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004EAC(&qword_1000C9638);
  __chkstk_darwin(v7);
  v201 = (uint64_t)&v174 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_100004EAC(&qword_1000C9640);
  __chkstk_darwin(v206);
  v207 = (uint64_t)&v174 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100004EAC(&qword_1000C9648);
  v177 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v176 = (char *)&v174 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = sub_100004EAC(&qword_1000C9650);
  __chkstk_darwin(v209);
  v179 = (char *)&v174 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = sub_100004EAC(&qword_1000C9658);
  v182 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v181 = (char *)&v174 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = sub_100004EAC(&qword_1000C9660);
  v184 = *(_QWORD *)(v213 - 8);
  v13 = __chkstk_darwin(v213);
  v180 = (char *)&v174 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v183 = (char *)&v174 - v15;
  v208 = sub_100004EAC(&qword_1000C9668);
  __chkstk_darwin(v208);
  v211 = (uint64_t)&v174 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = sub_100004EAC(&qword_1000C9670);
  __chkstk_darwin(v210);
  v18 = (char *)&v174 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = type metadata accessor for ParagraphTypesetting(0);
  v191 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v190 = (char *)&v174 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_100004EAC(&qword_1000C9560);
  v197 = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198);
  v195 = (char *)&v174 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100004EAC(&qword_1000C9578);
  __chkstk_darwin(v192);
  v196 = (char *)&v174 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_100004EAC(&qword_1000C9678);
  v22 = __chkstk_darwin(v194);
  v24 = (char *)&v174 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v205 = (uint64_t)&v174 - v25;
  v26 = type metadata accessor for LocalizedStringResource(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v175 = (char *)&v174 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v31 = (char *)&v174 - v30;
  v186 = v4;
  v32 = a1;
  v33 = (uint64_t *)(a1 + *(int *)(v4 + 24));
  v34 = v33[1];
  v215 = *v33;
  v216 = v34;
  v35 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(v221, v35);
  v36 = v221[0];
  LOBYTE(a1) = sub_10000BF20();
  v38 = swift_release(v36, v37);
  if ((a1 & 1) != 0)
  {
    if (qword_1000C73E8 != -1)
      swift_once(&qword_1000C73E8, sub_10000B294);
    v39 = sub_1000063D4(v26, (uint64_t)qword_1000D1C48);
    v40 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    v40(v31, v39, v26);
    v41 = Text.init(_:)(v31);
    v43 = v42;
    v45 = v44;
    v47 = v46 & 1;
    v48 = static Font.headline.getter();
    v206 = Text.font(_:)(v48, v41, v43, v47, v45);
    v204 = v49;
    LODWORD(v202) = v50;
    v207 = v51;
    swift_release(v48, v49);
    sub_10000ADF4(v41, v43, v47);
    swift_bridgeObjectRelease(v45);
    KeyPath = swift_getKeyPath(&unk_100093568);
    LODWORD(v201) = static Edge.Set.top.getter(KeyPath);
    v52 = EdgeInsets.init(_all:)(-16.0);
    v54 = v53;
    v56 = v55;
    v58 = v57;
    if (qword_1000C73F0 != -1)
      swift_once(&qword_1000C73F0, sub_10000B2B8);
    v59 = sub_1000063D4(v26, (uint64_t)qword_1000D1C60);
    v40(v31, v59, v26);
    v60 = Text.init(_:)(v31);
    v62 = v61;
    v64 = v63;
    v66 = v65 & 1;
    LODWORD(v215) = static HierarchicalShapeStyle.secondary.getter(v60);
    v67 = Text.foregroundStyle<A>(_:)(&v215, v60, v62, v66, v64, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v69 = v68;
    v71 = v70;
    v73 = v72;
    sub_10000ADF4(v60, v62, v66);
    swift_bridgeObjectRelease(v64);
    v74 = swift_getKeyPath(&unk_100093568);
    v215 = v67;
    v216 = v69;
    LOBYTE(v217) = v71 & 1;
    v218 = v73;
    v219 = v74;
    v220 = 1;
    v75 = v190;
    static ParagraphTypesetting.balanced.getter();
    v76 = sub_100004EAC(&qword_1000C9568);
    v77 = sub_100033F30();
    v78 = v195;
    View.paragraphTypesetting(_:isEnabled:)(v75, 1, v76, v77);
    (*(void (**)(char *, uint64_t))(v191 + 8))(v75, v193);
    sub_10000ADF4(v215, v216, (char)v217);
    swift_bridgeObjectRelease(v218);
    v80 = swift_release(v219, v79);
    LOBYTE(v76) = static Edge.Set.all.getter(v80);
    v81 = v197;
    v82 = (uint64_t)v196;
    v83 = v198;
    (*(void (**)(char *, char *, uint64_t))(v197 + 16))(v196, v78, v198);
    v84 = v82 + *(int *)(v192 + 36);
    *(_BYTE *)v84 = v76;
    *(_OWORD *)(v84 + 8) = 0u;
    *(_OWORD *)(v84 + 24) = 0u;
    *(_BYTE *)(v84 + 40) = 1;
    v85 = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v78, v83);
    LOBYTE(v76) = static Edge.Set.bottom.getter(v85);
    sub_10000AD78(v82, (uint64_t)v24, &qword_1000C9578);
    v86 = &v24[*(int *)(v194 + 36)];
    *v86 = v76;
    *(_OWORD *)(v86 + 8) = 0u;
    *(_OWORD *)(v86 + 24) = 0u;
    v86[40] = 1;
    sub_10000AE2C(v82, &qword_1000C9578);
    v87 = v205;
    sub_10000AC80((uint64_t)v24, v205, &qword_1000C9678);
    sub_10000AD78(v87, (uint64_t)v24, &qword_1000C9678);
    v88 = v206;
    v89 = v204;
    *(_QWORD *)v18 = v206;
    *((_QWORD *)v18 + 1) = v89;
    LOBYTE(v83) = v202 & 1;
    v18[16] = v202 & 1;
    v90 = v207;
    v91 = (uint64_t)v24;
    v92 = KeyPath;
    *((_QWORD *)v18 + 3) = v207;
    *((_QWORD *)v18 + 4) = v92;
    v18[40] = 1;
    v18[48] = v201;
    *((double *)v18 + 7) = v52;
    *((_QWORD *)v18 + 8) = v54;
    *((_QWORD *)v18 + 9) = v56;
    *((_QWORD *)v18 + 10) = v58;
    v18[88] = 0;
    v93 = sub_100004EAC(&qword_1000C96B8);
    sub_10000AD78(v91, (uint64_t)&v18[*(int *)(v93 + 48)], &qword_1000C9678);
    sub_10000ADBC(v88, v89, v83);
    swift_bridgeObjectRetain(v90);
    swift_retain(v92);
    sub_10000ADBC(v88, v89, v83);
    swift_bridgeObjectRetain(v90);
    swift_retain(v92);
    sub_10000AE2C(v91, &qword_1000C9678);
    sub_10000ADF4(v88, v89, v83);
    swift_release(v92, v94);
    swift_bridgeObjectRelease(v90);
    v95 = v211;
    sub_10000AD78((uint64_t)v18, v211, &qword_1000C9670);
    swift_storeEnumTagMultiPayload(v95, v208, 0);
    v96 = sub_10000B254(&qword_1000C96B0, &qword_1000C9670, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v97 = sub_1000346C4();
    v215 = v209;
    v216 = v97;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v215, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v215 = v212;
    v216 = OpaqueTypeConformance2;
    v99 = swift_getOpaqueTypeConformance2(&v215, &opaque type descriptor for <<opaque return type of View.inlineFeedback(controller:completion:)>>, 1);
    _ConditionalContent<>.init(storage:)(v95, v210, v213, v96, v99);
    sub_10000AE2C((uint64_t)v18, &qword_1000C9670);
    sub_10000AE2C(v87, &qword_1000C9678);
    sub_10000ADF4(v88, v89, v83);
    swift_release(v92, v100);
    return swift_bridgeObjectRelease(v90);
  }
  else
  {
    v102 = __chkstk_darwin(v38);
    v173[2] = v32;
    v103 = static Axis.Set.vertical.getter(v102);
    v104 = sub_100004EAC(&qword_1000C9680);
    v105 = sub_10000B254(&qword_1000C9688, &qword_1000C9680, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v106 = v189;
    v107 = ScrollView.init(_:showsIndicators:content:)(v103, 0, sub_1000344B0, v173, v104, v105);
    if (qword_1000C7418 != -1)
      v107 = swift_once(&qword_1000C7418, sub_10002E5C8);
    v108 = *(double *)&qword_1000D1C98;
    v109 = static Alignment.center.getter(v107);
    v110 = v201;
    v112 = sub_10002DF60(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v201, 0.0, 1, v108, 0, v109, v111, &qword_1000C9630, &qword_1000C9638);
    (*(void (**)(char *, uint64_t, __n128))(v199 + 8))(v106, v200, v112);
    v113 = v204;
    sub_1000312C4(v32, v204);
    v114 = *(unsigned __int8 *)(v202 + 80);
    v115 = (v114 + 16) & ~v114;
    v116 = swift_allocObject(&unk_1000BF650, v115 + KeyPath, v114 | 7);
    sub_10003130C(v113, v116 + v115);
    v117 = v207;
    sub_10000AD78(v110, v207, &qword_1000C9638);
    v118 = v206;
    v119 = (_QWORD *)(v117 + *(int *)(v206 + 36));
    *v119 = 0;
    v119[1] = 0;
    v119[2] = sub_1000345F8;
    v119[3] = v116;
    sub_10000AE2C(v110, &qword_1000C9638);
    v120 = v33[1];
    v215 = *v33;
    v216 = v120;
    State.wrappedValue.getter(v221, v35);
    v121 = v221[0];
    v122 = swift_getKeyPath(&unk_100093650);
    v215 = v121;
    v123 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v215, v122, v123);
    swift_release(v122, v124);
    v125 = *(_QWORD *)(v121 + 32);
    v126 = *(_QWORD *)(v121 + 40);
    v127 = *(_QWORD *)(v121 + 48);
    v128 = v32;
    v129 = *(unsigned __int8 *)(v121 + 56);
    sub_10000B04C(v125, v126, v127, *(_BYTE *)(v121 + 56));
    result = swift_release(v121, v130);
    if (v129 == 255)
    {
      __break(1u);
    }
    else
    {
      v131 = v175;
      sub_100061960(v125, v126, v127, v129);
      sub_10000B11C(v125, v126, v127, v129);
      v132 = String.init(localized:)(v131);
      v134 = v133;
      v215 = v132;
      v216 = v133;
      v135 = sub_100034050(&qword_1000C9690, &qword_1000C9640, (void (*)(void))sub_100034640);
      v136 = sub_100015204();
      v137 = v176;
      View.navigationTitle<A>(_:)(&v215, v118, &type metadata for String, v135, v136);
      swift_bridgeObjectRelease(v134);
      v138 = sub_10000AE2C(v117, &qword_1000C9640);
      LOBYTE(v134) = static Edge.Set.top.getter(v138);
      v139 = EdgeInsets.init(_all:)(-10.0);
      v141 = v140;
      v143 = v142;
      v145 = v144;
      v146 = v177;
      v147 = (uint64_t)v179;
      v148 = v178;
      (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v179, v137, v178);
      v149 = v209;
      v150 = v147 + *(int *)(v209 + 36);
      *(_BYTE *)v150 = v134;
      *(double *)(v150 + 8) = v139;
      *(_QWORD *)(v150 + 16) = v141;
      *(_QWORD *)(v150 + 24) = v143;
      *(_QWORD *)(v150 + 32) = v145;
      *(_BYTE *)(v150 + 40) = 0;
      (*(void (**)(char *, uint64_t))(v146 + 8))(v137, v148);
      v151 = v187;
      v152 = v185;
      v153 = v188;
      (*(void (**)(char *, _QWORD, uint64_t))(v187 + 104))(v185, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v188);
      v154 = sub_1000346C4();
      v155 = v181;
      View.navigationBarTitleDisplayMode(_:)(v152, v149, v154);
      (*(void (**)(char *, uint64_t))(v151 + 8))(v152, v153);
      sub_10000AE2C(v147, &qword_1000C9650);
      v156 = (uint64_t *)(v128 + *(int *)(v186 + 32));
      v158 = *v156;
      v157 = v156[1];
      v221[0] = v158;
      v221[1] = v157;
      sub_100004EAC(&qword_1000C7EE8);
      State.projectedValue.getter(&v215);
      v159 = v215;
      v160 = v216;
      v161 = v217;
      v215 = v149;
      v216 = v154;
      v162 = swift_getOpaqueTypeConformance2(&v215, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
      v163 = v180;
      v164 = v212;
      View.inlineFeedback(controller:completion:)(v159, v160, v161, 0, 0, v212, v162);

      swift_release(v160, v165);
      swift_release(v159, v166);
      (*(void (**)(char *, uint64_t))(v182 + 8))(v155, v164);
      v167 = v184;
      v168 = v183;
      v169 = v213;
      (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v183, v163, v213);
      v170 = v211;
      (*(void (**)(uint64_t, char *, uint64_t))(v167 + 16))(v211, v168, v169);
      swift_storeEnumTagMultiPayload(v170, v208, 1);
      v171 = sub_10000B254(&qword_1000C96B0, &qword_1000C9670, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v215 = v164;
      v216 = v162;
      v172 = swift_getOpaqueTypeConformance2(&v215, &opaque type descriptor for <<opaque return type of View.inlineFeedback(controller:completion:)>>, 1);
      _ConditionalContent<>.init(storage:)(v170, v210, v169, v171, v172);
      return (*(uint64_t (**)(char *, uint64_t))(v167 + 8))(v168, v169);
    }
  }
  return result;
}

uint64_t sub_10002FD64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v4 = sub_100004EAC(&qword_1000C96C0);
  return sub_10002FDB0(a1, (char *)(a2 + *(int *)(v4 + 44)));
}

uint64_t sub_10002FDB0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t OpaqueTypeConformance2;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  id v129;
  id v130;
  unint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  int *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  int *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  void (*v167)(char *, char *, uint64_t);
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  int *v173;
  char *v174;
  uint64_t *v175;
  int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(char *, uint64_t);
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  char *v207;
  _QWORD *v208;
  int *v209;
  char *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;

  v207 = a2;
  v3 = type metadata accessor for ModelResponseView(0);
  __chkstk_darwin(v3);
  v201 = (char *)&v190 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_100004EAC(&qword_1000C96C8);
  __chkstk_darwin(v204);
  v206 = (char **)((char *)&v190 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v193 = type metadata accessor for ScrollBounceBehavior(0);
  v202 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v191 = (char *)&v190 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_100004EAC(&qword_1000C96D0);
  v192 = *(_QWORD *)(v203 - 8);
  __chkstk_darwin(v203);
  v200 = (char *)&v190 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = sub_100004EAC(&qword_1000C96D8);
  v199 = *(_QWORD *)(v205 - 8);
  v8 = __chkstk_darwin(v205);
  v190 = (char *)&v190 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v194 = (char *)&v190 - v10;
  v11 = sub_100004EAC(&qword_1000C96E0);
  v12 = __chkstk_darwin(v11);
  v213 = (uint64_t)&v190 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v217 = (uint64_t)&v190 - v14;
  v216 = type metadata accessor for Divider(0);
  v214 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216);
  v208 = (char **)((char *)&v190 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v209 = (int *)sub_100004EAC(&qword_1000C96E8);
  v16 = __chkstk_darwin(v209);
  v219 = (uint64_t)&v190 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v218 = (uint64_t)&v190 - v18;
  v220 = sub_100004EAC(&qword_1000C96F0);
  v211 = *(_QWORD *)(v220 - 8);
  v19 = __chkstk_darwin(v220);
  v212 = (char *)&v190 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v190 - v21;
  v23 = type metadata accessor for RewritingModel(0);
  v215 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
  v24 = Environment.init<A>(_:)(v23, v23, v215);
  v26 = v25;
  v221 = 0;
  LOBYTE(v222) = 1;
  v27 = sub_100004EAC(&qword_1000C96F8);
  State.init(wrappedValue:)(&v224, &v221, v27);
  v28 = v224;
  v29 = v225;
  v30 = v226;
  v224 = v24;
  LOBYTE(v225) = v26 & 1;
  v226 = v28;
  LOBYTE(v227) = v29;
  v228 = v30;
  v196 = v3;
  v31 = *(int *)(v3 + 24);
  v197 = a1;
  v32 = (_QWORD *)(a1 + v31);
  v34 = *(_QWORD *)(a1 + v31 + 8);
  v221 = *(int **)(a1 + v31);
  v33 = v221;
  v222 = v34;
  v35 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v223, v35);
  v36 = v223;
  v37 = sub_100034794();
  v210 = v22;
  View.environment<A>(_:)(v36, &type metadata for ActionButtonView, v23, v37, v215);
  swift_release(v36, v38);
  swift_release(v24, v39);
  swift_release(v30, v40);
  v224 = (uint64_t)v33;
  v225 = v34;
  State.wrappedValue.getter(&v221, v35);
  v41 = v221;
  KeyPath = swift_getKeyPath(&unk_100093770);
  v224 = (uint64_t)v41;
  v43 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v224, KeyPath, v43);
  swift_release(KeyPath, v44);
  v45 = *((_QWORD *)v41 + 12);
  v47 = swift_release(v41, v46);
  v48 = v208;
  v49 = Divider.init()(v47);
  v50 = static Edge.Set.bottom.getter(v49);
  v51 = EdgeInsets.init(_all:)(2.0);
  v53 = v52;
  v55 = v54;
  v57 = v56;
  v58 = v214;
  v59 = v219;
  v60 = v216;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v214 + 16))(v219, v48, v216);
  v61 = v59 + v209[9];
  *(_BYTE *)v61 = v50;
  *(double *)(v61 + 8) = v51;
  *(_QWORD *)(v61 + 16) = v53;
  *(_QWORD *)(v61 + 24) = v55;
  *(_QWORD *)(v61 + 32) = v57;
  *(_BYTE *)(v61 + 40) = 0;
  (*(void (**)(_QWORD *, uint64_t))(v58 + 8))(v48, v60);
  sub_10000AC80(v59, v218, &qword_1000C96E8);
  v208 = v32;
  v62 = v32[1];
  v224 = *v32;
  v225 = v62;
  v214 = v35;
  State.wrappedValue.getter(&v221, v35);
  v63 = v221;
  v64 = swift_getKeyPath(&unk_100093650);
  v224 = (uint64_t)v63;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v224, v64, v43);
  swift_release(v64, v65);
  v67 = *((unsigned __int8 *)v63 + 56);
  v198 = v43;
  if (v67)
  {
    swift_release(v63, v66);
LABEL_7:
    v92 = v208[1];
    v224 = *v208;
    v225 = v92;
    State.wrappedValue.getter(&v221, v214);
    v93 = v221;
    v94 = swift_getKeyPath(&unk_1000936A0);
    v224 = (uint64_t)v93;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v224, v94, v215);
    swift_release(v94, v95);
    v96 = *(void **)((char *)v93 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString);
    v97 = v96;
    swift_release(v93, v98);
    v99 = type metadata accessor for CommonUIManager(0);
    v100 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
    v101 = Environment.init<A>(_:)(v99, v99, v100);
    v102 = v206;
    *v206 = v101;
    *((_BYTE *)v102 + 8) = v103 & 1;
    v102[2] = v96;
    *((_BYTE *)v102 + 24) = 0;
    swift_storeEnumTagMultiPayload(v102, v204, 1);
    v104 = sub_100004EAC(&qword_1000C9708);
    v105 = sub_10000B254(&qword_1000C9710, &qword_1000C96D0, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
    v224 = v203;
    v225 = v105;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v224, &opaque type descriptor for <<opaque return type of View.scrollBounceBehavior(_:axes:)>>, 1);
    v107 = sub_100033FBC(&qword_1000C9718, &qword_1000C9708, (void (*)(void))sub_100022CB4, (void (*)(void))sub_1000347E0);
    _ConditionalContent<>.init(storage:)(v102, v205, v104, OpaqueTypeConformance2, v107);
    goto LABEL_8;
  }
  v68 = v200;
  v69 = v202;
  v70 = *((unsigned __int8 *)v63 + 32);
  v71 = swift_release(v63, v66);
  if (v70 != 9)
    goto LABEL_7;
  v195 = v45;
  v72 = static Axis.Set.horizontal.getter(v71);
  __chkstk_darwin(v72);
  v189 = v197;
  v73 = sub_100004EAC(&qword_1000C9730);
  v74 = sub_10003483C();
  v75 = ScrollView.init(_:showsIndicators:content:)(v72, 1, sub_100034834, &v188, v73, v74);
  v76 = v191;
  v77 = static ScrollBounceBehavior.basedOnSize.getter(v75);
  v78 = static Axis.Set.horizontal.getter(v77);
  v79 = Axis.Set.init(rawValue:)(0);
  v80 = Axis.Set.init(rawValue:)(v79);
  if (Axis.Set.init(rawValue:)(v80 & v78) != v78)
    v79 = Axis.Set.init(rawValue:)(v79 | v78);
  v81 = sub_10000B254(&qword_1000C9710, &qword_1000C96D0, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  v82 = v190;
  v83 = v203;
  View.scrollBounceBehavior(_:axes:)(v76, v79, v203, v81);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v76, v193);
  (*(void (**)(char *, uint64_t))(v192 + 8))(v68, v83);
  v84 = v199;
  v85 = v194;
  v86 = v82;
  v87 = v205;
  (*(void (**)(char *, char *, uint64_t))(v199 + 32))(v194, v86, v205);
  v88 = v206;
  (*(void (**)(_QWORD *, char *, uint64_t))(v84 + 16))(v206, v85, v87);
  swift_storeEnumTagMultiPayload(v88, v204, 0);
  v89 = sub_100004EAC(&qword_1000C9708);
  v224 = v83;
  v225 = v81;
  v90 = swift_getOpaqueTypeConformance2(&v224, &opaque type descriptor for <<opaque return type of View.scrollBounceBehavior(_:axes:)>>, 1);
  v91 = sub_100033FBC(&qword_1000C9718, &qword_1000C9708, (void (*)(void))sub_100022CB4, (void (*)(void))sub_1000347E0);
  _ConditionalContent<>.init(storage:)(v88, v87, v89, v90, v91);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v87);
  v45 = v195;
LABEL_8:
  v108 = type metadata accessor for FeedbackFeatureFlags(0);
  v227 = v108;
  v228 = sub_100005900(&qword_1000C7870, (uint64_t (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags, (uint64_t)&protocol conformance descriptor for FeedbackFeatureFlags);
  v109 = sub_10000AF68(&v224);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v108 - 8) + 104))(v109, enum case for FeedbackFeatureFlags.CentralizedFeedback(_:), v108);
  LOBYTE(v108) = isFeatureEnabled(_:)(&v224);
  sub_10000AFA4(&v224);
  if ((v108 & 1) != 0)
  {
    v195 = v45;
    v110 = v208;
    v111 = v208[1];
    v224 = *v208;
    v225 = v111;
    v112 = v214;
    State.wrappedValue.getter(&v221, v214);
    v113 = v221;
    v114 = swift_getKeyPath(&unk_100093650);
    v224 = (uint64_t)v113;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v224, v114, v198);
    swift_release(v114, v115);
    v116 = *((_QWORD *)v113 + 4);
    v117 = *((_QWORD *)v113 + 5);
    v118 = *((_BYTE *)v113 + 56);
    v205 = *((_QWORD *)v113 + 6);
    sub_10000B04C(v116, v117, v205, v118);
    swift_release(v113, v119);
    v121 = v110[1];
    v224 = *v110;
    v120 = v224;
    v225 = v121;
    State.wrappedValue.getter(&v221, v112);
    v122 = v221;
    v204 = sub_100025E90();
    v203 = v123;
    swift_release(v122, v123);
    v224 = v120;
    v225 = v121;
    State.wrappedValue.getter(&v221, v112);
    v124 = v221;
    v125 = swift_getKeyPath(&unk_1000936A0);
    v224 = (uint64_t)v124;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v224, v125, v215);
    swift_release(v125, v126);
    v128 = *(void **)((char *)v124 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString);
    v206 = (_QWORD *)v117;
    v202 = v116;
    if (v128)
    {
      v129 = v128;
      v130 = objc_msgSend(v129, "string");
      v200 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
      v199 = v131;
      swift_release(v124, v131);

    }
    else
    {
      swift_release(v124, v127);
      v200 = 0;
      v199 = 0xE000000000000000;
    }
    v134 = (uint64_t)v201;
    v135 = v196;
    v196 = v118;
    v136 = v208;
    v137 = v208[1];
    v224 = *v208;
    v225 = v137;
    v138 = v214;
    State.wrappedValue.getter(&v221, v214);
    v139 = v221;
    v140 = swift_getKeyPath(&unk_100093798);
    v224 = (uint64_t)v139;
    v141 = v215;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v224, v140, v215);
    swift_release(v140, v142);
    v143 = *(char **)((char *)v139 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString + 8);
    v216 = *(_QWORD *)((char *)v139 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString);
    v201 = v143;
    swift_bridgeObjectRetain(v143);
    swift_release(v139, v144);
    v145 = v197;
    v146 = (uint64_t *)(v197 + *(int *)(v135 + 32));
    v148 = *v146;
    v147 = v146[1];
    v224 = v148;
    v225 = v147;
    v149 = sub_100004EAC(&qword_1000C7EE8);
    State.wrappedValue.getter(&v221, v149);
    v209 = v221;
    v150 = v136[1];
    v224 = *v136;
    v225 = v150;
    State.wrappedValue.getter(&v221, v138);
    v151 = v221;
    v152 = swift_getKeyPath(&unk_1000937C0);
    v224 = (uint64_t)v151;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v224, v152, v141);
    swift_release(v152, v153);
    v154 = *(_QWORD *)((char *)v151 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session);
    swift_release(v151, v155);
    sub_1000312C4(v145, v134);
    if (v154)
    {
      v156 = (uint64_t *)(v134 + *(int *)(v135 + 24));
      v158 = *v156;
      v157 = v156[1];
      v224 = v158;
      v225 = v157;
      State.wrappedValue.getter(&v221, v214);
      v159 = v221;
      v160 = swift_getKeyPath(&unk_100093340);
      v224 = (uint64_t)v159;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v224, v160, v198);
      swift_release(v160, v161);
      v162 = *((unsigned __int8 *)v159 + 72);
      swift_release(v159, v163);
      if (v162)
        v164 = 256;
      else
        v164 = 0;
    }
    else
    {
      v164 = 256;
    }
    v132 = v195;
    v165 = v196;
    sub_1000151C8(v134, type metadata accessor for ModelResponseView);
    v215 = v164 | v165 | 0x10000;
    v133 = (uint64_t)v209;
  }
  else
  {
    v132 = v45;
    v204 = 0;
    v203 = 0;
    v200 = 0;
    v199 = 0;
    v216 = 0;
    v201 = 0;
    v202 = 0;
    v206 = 0;
    v205 = 0;
    v215 = 0;
    v133 = 1;
  }
  v166 = (v132 & 2) == 0;
  v167 = *(void (**)(char *, char *, uint64_t))(v211 + 16);
  v168 = v212;
  v169 = v220;
  v167(v212, v210, v220);
  v170 = v219;
  sub_10000AD78(v218, v219, &qword_1000C96E8);
  v171 = v213;
  sub_10000AD78(v217, v213, &qword_1000C96E0);
  v172 = v207;
  v167(v207, v168, v169);
  v173 = (int *)sub_100004EAC(&qword_1000C9728);
  v172[v173[12]] = v166;
  sub_10000AD78(v170, (uint64_t)&v172[v173[16]], &qword_1000C96E8);
  sub_10000AD78(v171, (uint64_t)&v172[v173[20]], &qword_1000C96E0);
  v174 = &v172[v173[24]];
  *(_QWORD *)v174 = 0;
  v174[8] = 1;
  v175 = (uint64_t *)&v172[v173[28]];
  v176 = (int *)v133;
  v177 = v204;
  *v175 = v133;
  v175[1] = v177;
  v178 = v203;
  v179 = (uint64_t)v200;
  v175[2] = v203;
  v175[3] = v179;
  v180 = v199;
  v181 = v216;
  v175[4] = v199;
  v175[5] = v181;
  v216 = v181;
  v182 = (uint64_t)v201;
  v183 = v202;
  v175[6] = (uint64_t)v201;
  v175[7] = v183;
  v209 = v176;
  v184 = (uint64_t)v206;
  v185 = v205;
  v175[8] = (uint64_t)v206;
  v175[9] = v185;
  v175[11] = 0;
  v175[12] = 0;
  LOBYTE(v172) = v215;
  v175[10] = v215;
  v189 = 0;
  sub_10000AFC4((uint64_t)v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, (char)v172, 0);
  sub_10000AE2C(v217, &qword_1000C96E0);
  sub_10000AE2C(v218, &qword_1000C96E8);
  v186 = *(void (**)(char *, uint64_t))(v211 + 8);
  v186(v210, v220);
  v189 = 0;
  sub_10000B094(v209, v177, v178, v179, v180, v216, v182, v183, v184, v185, (char)v172, 0);
  sub_10000AE2C(v213, &qword_1000C96E0);
  sub_10000AE2C(v219, &qword_1000C96E8);
  return ((uint64_t (*)(char *, uint64_t))v186)(v212, v220);
}

double sub_100030DF0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  double result;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  __int128 v48;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ModelResponseView(0) + 24));
  v5 = *v3;
  v4 = v3[1];
  v36 = v5;
  v37 = v4;
  v6 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v35, v6);
  v7 = v35;
  KeyPath = swift_getKeyPath(&unk_1000936A0);
  v36 = v7;
  v9 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v36, KeyPath, v9);
  swift_release(KeyPath, v10);
  v11 = *(void **)(v7 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString);
  v12 = v11;
  swift_release(v7, v13);
  v14 = type metadata accessor for CommonUIManager(0);
  v15 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  v16 = Environment.init<A>(_:)(v14, v14, v15);
  LOBYTE(v7) = v17;
  v18 = static Alignment.center.getter(v16);
  v34 = 1;
  v33 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v36, 0x4074F00000000000, 0, 0, 1, 0, 1, 0, 1, 0, v33, 0, v34, v18, v19);
  v20 = v36;
  v21 = v37;
  v22 = v38;
  v23 = v39;
  v24 = v40;
  v25 = v41;
  v26 = v42;
  v27 = v43;
  v28 = v44;
  v29 = v45;
  v30 = v46;
  v31 = v47;
  *(_QWORD *)a2 = v16;
  *(_BYTE *)(a2 + 8) = v7 & 1;
  *(_QWORD *)(a2 + 16) = v11;
  *(_BYTE *)(a2 + 24) = 1;
  *(_QWORD *)(a2 + 32) = v20;
  *(_BYTE *)(a2 + 40) = v21;
  *(_QWORD *)(a2 + 48) = v22;
  *(_BYTE *)(a2 + 56) = v23;
  *(_QWORD *)(a2 + 64) = v24;
  *(_BYTE *)(a2 + 72) = v25;
  *(_QWORD *)(a2 + 80) = v26;
  *(_BYTE *)(a2 + 88) = v27;
  *(_QWORD *)(a2 + 96) = v28;
  *(_BYTE *)(a2 + 104) = v29;
  *(_QWORD *)(a2 + 112) = v30;
  *(_BYTE *)(a2 + 120) = v31;
  result = *(double *)&v48;
  *(_OWORD *)(a2 + 128) = v48;
  return result;
}

uint64_t sub_100030FF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = type metadata accessor for ModelResponseView(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 + *(int *)(v3 + 28);
  v7 = *(_BYTE *)v6;
  v8 = *(_QWORD *)(v6 + 8);
  LOBYTE(v26) = v7;
  v27 = v8;
  v9 = sub_100004EAC(&qword_1000C9FA0);
  State.wrappedValue.getter(&v25, v9);
  v10 = v25;
  sub_1000312C4(a1, (uint64_t)v5);
  if ((v10 & 1) != 0)
    return sub_1000151C8((uint64_t)v5, type metadata accessor for ModelResponseView);
  v12 = &v5[*(int *)(v2 + 24)];
  v14 = *(_QWORD *)v12;
  v13 = *((_QWORD *)v12 + 1);
  v26 = v14;
  v27 = v13;
  v15 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v25, v15);
  v16 = v25;
  v17 = sub_10000BF20();
  swift_release(v16, v18);
  result = sub_1000151C8((uint64_t)v5, type metadata accessor for ModelResponseView);
  if ((v17 & 1) == 0)
  {
    v19 = (uint64_t *)(a1 + *(int *)(v2 + 24));
    v21 = *v19;
    v20 = v19[1];
    v26 = v21;
    v27 = v20;
    State.wrappedValue.getter(&v25, v15);
    v22 = v25;
    sub_10002BF64(0, 0);
    return swift_release(v22, v23);
  }
  return result;
}

uint64_t sub_100031148(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  char v23;
  uint64_t v24;

  v3 = *a2;
  v4 = (uint64_t *)(a3 + *(int *)(type metadata accessor for ModelResponseView(0) + 20));
  v5 = *v4;
  v6 = *((_BYTE *)v4 + 8);
  v7 = swift_retain(*v4);
  v8 = sub_100046370(v7, v6);
  swift_release(v5, v9);
  KeyPath = swift_getKeyPath(&unk_100093748);
  v24 = v8;
  v11 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, KeyPath, v11);
  swift_release(KeyPath, v12);
  v13 = *(unsigned __int8 *)(v8 + 16);
  result = swift_release(v8, v14);
  if (v3 != v13)
  {
    v16 = swift_retain(v5);
    v17 = sub_100046370(v16, v6);
    swift_release(v5, v18);
    v19 = swift_getKeyPath(&unk_100093748);
    __chkstk_darwin(v19);
    v22[2] = v17;
    v23 = v3;
    v24 = v17;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, v19, sub_100014968, v22, (char *)&type metadata for () + 8, v11);
    swift_release(v17, v20);
    return swift_release(v19, v21);
  }
  return result;
}

uint64_t sub_1000312C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModelResponseView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003130C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModelResponseView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031350(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ModelResponseView(0) - 8) + 80);
  return sub_100031148(a1, a2, v2 + ((v5 + 16) & ~v5));
}

unint64_t sub_10003139C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9450;
  if (!qword_1000C9450)
  {
    v1 = sub_10000ABD0(&qword_1000C9438);
    sub_100033FBC(&qword_1000C9458, &qword_1000C9430, (void (*)(void))sub_100031440, (void (*)(void))sub_1000314C4);
    sub_100005900(&qword_1000C7E98, type metadata accessor for PreferredContentSizeModifier, (uint64_t)&unk_100093F08);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9450);
  }
  return result;
}

unint64_t sub_100031440()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9460;
  if (!qword_1000C9460)
  {
    v1 = sub_10000ABD0(&qword_1000C9428);
    sub_10000B254(&qword_1000C9468, &qword_1000C9420, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9460);
  }
  return result;
}

unint64_t sub_1000314C4()
{
  unint64_t result;

  result = qword_1000C9470;
  if (!qword_1000C9470)
  {
    result = swift_getWitnessTable(&unk_100093F58, &type metadata for ParentPaddingViewModifier);
    atomic_store(result, (unint64_t *)&qword_1000C9470);
  }
  return result;
}

uint64_t sub_100031508(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;

  v2 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v2);
  v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_100004EAC(&qword_1000C9480);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ToolbarItemPlacement.confirmationAction.getter(v7);
  v15 = a1;
  v10 = sub_100004EAC(&qword_1000C9618);
  v11 = sub_100034404();
  ToolbarItem<>.init(placement:content:)(v4, sub_1000343FC, v14, v10, v11);
  v12 = sub_10000B254(&qword_1000C9488, &qword_1000C9480, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v9, v5, v12);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_100031638()
{
  uint64_t v0;

  return sub_100031508(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100031640(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ModelResponseView.body>>, 1);
}

uint64_t sub_100031650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v46 = a2;
  v44 = sub_100004EAC(&qword_1000C9628);
  __chkstk_darwin(v44);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ModelResponseView(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = sub_100004EAC(&qword_1000C77B0);
  v45 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t *)(a1 + *(int *)(v5 + 24));
  v13 = *v11;
  v12 = v11[1];
  v47 = v13;
  v48 = v12;
  v14 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v49, v14);
  v15 = v49;
  v16 = sub_10000BF20();
  swift_release(v15, v17);
  if ((v16 & 1) != 0)
  {
    v43 = LocalizedStringKey.init(stringLiteral:)(0x65756E69746E6F43, 0xE800000000000000);
    v19 = v18;
    v21 = v20;
    v23 = v22;
    sub_1000312C4(a1, (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    v24 = *(unsigned __int8 *)(v6 + 80);
    v25 = (v24 + 16) & ~v24;
    v26 = swift_allocObject(&unk_1000BF628, v25 + v7, v24 | 7);
    sub_10003130C((uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v26 + v25);
    Button<>.init(_:action:)(v43, v19, v21 & 1, v23, sub_100034494, v26);
    v27 = v45;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v4, v10, v8);
    v28 = v4;
    v29 = v44;
    v30 = 0;
  }
  else
  {
    v43 = LocalizedStringKey.init(stringLiteral:)(1701736260, 0xE400000000000000);
    v32 = v31;
    v34 = v33;
    v36 = v35;
    sub_1000312C4(a1, (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    v37 = *(unsigned __int8 *)(v6 + 80);
    v38 = (v37 + 16) & ~v37;
    v39 = swift_allocObject(&unk_1000BF600, v38 + v7, v37 | 7);
    sub_10003130C((uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v39 + v38);
    Button<>.init(_:action:)(v43, v32, v34 & 1, v36, sub_100034484, v39);
    v27 = v45;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v4, v10, v8);
    v28 = v4;
    v29 = v44;
    v30 = 1;
  }
  swift_storeEnumTagMultiPayload(v28, v29, v30);
  v40 = sub_10000B254(&qword_1000C7820, &qword_1000C77B0, (uint64_t)&protocol conformance descriptor for Button<A>);
  _ConditionalContent<>.init(storage:)(v4, v8, v8, v40, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v10, v8);
}

uint64_t sub_10003192C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD v10[2];
  uint64_t v11;

  v10[1] = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ModelResponseView(0) + 24) + 8);
  v1 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v11, v1);
  v2 = v11;
  KeyPath = swift_getKeyPath(&unk_100093720);
  v8[2] = v2;
  v9 = 1;
  v10[0] = v2;
  v4 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v10, KeyPath, sub_10002CF5C, v8, (char *)&type metadata for () + 8, v4);
  swift_release(v2, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_100031A10(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *Strong;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for ModelResponseView(0);
  v3 = (char *)(a1 + *(int *)(v2 + 28));
  v4 = *v3;
  v5 = *((_QWORD *)v3 + 1);
  LOBYTE(v18) = v4;
  v19 = v5;
  LOBYTE(v17) = 1;
  v6 = sub_100004EAC(&qword_1000C9FA0);
  State.wrappedValue.setter(&v17, v6);
  v7 = (uint64_t *)(a1 + *(int *)(v2 + 24));
  v9 = v7[1];
  v18 = *v7;
  v8 = v18;
  v19 = v9;
  v10 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v17, v10);
  v11 = v17;
  sub_10002BF64(2, 0);
  swift_release(v11, v12);
  v18 = v8;
  v19 = v9;
  State.wrappedValue.getter(&v17, v10);
  v13 = v17;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v17 + 16);
  result = swift_release(v13, v15);
  if (Strong)
  {
    objc_msgSend(Strong, "endWritingTools");
    return swift_unknownObjectRelease(Strong);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ModelResponseView(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100004EAC(&qword_1000C74C8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = v17[8];
    *(_QWORD *)v16 = v18;
    v16[8] = (char)v17;
    v19 = (uint64_t *)((char *)a1 + v15);
    v20 = (uint64_t *)((char *)a2 + v15);
    v21 = *v20;
    v22 = v20[1];
    *v19 = *v20;
    v19[1] = v22;
    v23 = a3[7];
    v24 = a3[8];
    v25 = (char *)a1 + v23;
    v26 = (char *)a2 + v23;
    *v25 = *v26;
    v27 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v25 + 1) = v27;
    v28 = (uint64_t *)((char *)a1 + v24);
    v29 = (char *)a2 + v24;
    v31 = *(void **)v29;
    v30 = *((_QWORD *)v29 + 1);
    *v28 = *(_QWORD *)v29;
    v28[1] = v30;
    v32 = a3[9];
    v33 = (uint64_t *)((char *)a1 + v32);
    v34 = (char *)a2 + v32;
    v35 = *(uint64_t *)((char *)a2 + v32);
    v36 = *((_QWORD *)v34 + 1);
    *v33 = v35;
    v33[1] = v36;
    swift_retain(v18);
    swift_retain(v21);
    swift_retain(v22);
    swift_retain(v27);
    v37 = v31;
    swift_retain(v30);
    swift_retain(v35);
    swift_retain(v36);
    v38 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
    v39 = (char *)v33 + v38;
    v40 = &v34[v38];
    v41 = type metadata accessor for NavigationPath(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
  }
  return a1;
}

uint64_t destroy for ModelResponseView(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v4 = sub_100004EAC(&qword_1000C74C8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v6 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  else
  {
    swift_release(*a1, v5);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[5]), v7);
  v8 = (_QWORD *)((char *)a1 + a2[6]);
  swift_release(*v8, v9);
  swift_release(v8[1], v10);
  swift_release(*(_QWORD *)((char *)a1 + a2[7] + 8), v11);
  v12 = (char *)a1 + a2[8];

  swift_release(*((_QWORD *)v12 + 1), v13);
  v14 = (_QWORD *)((char *)a1 + a2[9]);
  swift_release(*v14, v15);
  swift_release(v14[1], v16);
  v17 = (char *)v14 + *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v18 = type metadata accessor for NavigationPath(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
}

uint64_t *initializeWithCopy for ModelResponseView(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v6 = sub_100004EAC(&qword_1000C74C8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  v17 = (uint64_t *)((char *)a1 + v13);
  v18 = (uint64_t *)((char *)a2 + v13);
  v19 = *v18;
  v20 = v18[1];
  *v17 = *v18;
  v17[1] = v20;
  v21 = a3[7];
  v22 = a3[8];
  v23 = (char *)a1 + v21;
  v24 = (char *)a2 + v21;
  *v23 = *v24;
  v25 = *((_QWORD *)v24 + 1);
  *((_QWORD *)v23 + 1) = v25;
  v26 = (uint64_t *)((char *)a1 + v22);
  v27 = (char *)a2 + v22;
  v29 = *(void **)v27;
  v28 = *((_QWORD *)v27 + 1);
  *v26 = *(_QWORD *)v27;
  v26[1] = v28;
  v30 = a3[9];
  v31 = (uint64_t *)((char *)a1 + v30);
  v32 = (char *)a2 + v30;
  v33 = *(uint64_t *)((char *)a2 + v30);
  v34 = *((_QWORD *)v32 + 1);
  *v31 = v33;
  v31[1] = v34;
  swift_retain(v16);
  swift_retain(v19);
  swift_retain(v20);
  swift_retain(v25);
  v35 = v29;
  swift_retain(v28);
  swift_retain(v33);
  swift_retain(v34);
  v36 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v37 = (char *)v31 + v36;
  v38 = &v32[v36];
  v39 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
  return a1;
}

uint64_t *assignWithCopy for ModelResponseView(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;

  if (a1 != a2)
  {
    sub_10000AE2C((uint64_t)a1, &qword_1000C74C8);
    v6 = sub_100004EAC(&qword_1000C74C8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  LOBYTE(v14) = v14[8];
  v16 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v15;
  v13[8] = (char)v14;
  swift_retain(v15);
  swift_release(v16, v17);
  v18 = a3[6];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *(uint64_t *)((char *)a2 + v18);
  v22 = *(uint64_t *)((char *)a1 + v18);
  *(uint64_t *)((char *)a1 + v18) = v21;
  swift_retain(v21);
  swift_release(v22, v23);
  v24 = *((_QWORD *)v19 + 1);
  v25 = *((_QWORD *)v20 + 1);
  *((_QWORD *)v19 + 1) = v25;
  swift_retain(v25);
  swift_release(v24, v26);
  v27 = a3[7];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  *v28 = *v29;
  v30 = *((_QWORD *)v28 + 1);
  v31 = *((_QWORD *)v29 + 1);
  *((_QWORD *)v28 + 1) = v31;
  swift_retain(v31);
  swift_release(v30, v32);
  v33 = a3[8];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = *(void **)((char *)a2 + v33);
  v37 = *(void **)v34;
  *(_QWORD *)v34 = v36;
  v38 = v36;

  v39 = *((_QWORD *)v34 + 1);
  v40 = *((_QWORD *)v35 + 1);
  *((_QWORD *)v34 + 1) = v40;
  swift_retain(v40);
  swift_release(v39, v41);
  v42 = a3[9];
  v43 = (char *)a1 + v42;
  v44 = (uint64_t *)((char *)a2 + v42);
  v45 = *(uint64_t *)((char *)a1 + v42);
  v46 = *v44;
  *(uint64_t *)((char *)a1 + v42) = *v44;
  swift_retain(v46);
  swift_release(v45, v47);
  v48 = v44[1];
  v49 = *((_QWORD *)v43 + 1);
  *((_QWORD *)v43 + 1) = v48;
  swift_retain(v48);
  swift_release(v49, v50);
  v51 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v52 = &v43[v51];
  v53 = (char *)v44 + v51;
  v54 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 24))(v52, v53, v54);
  return a1;
}

char *initializeWithTake for ModelResponseView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = sub_100004EAC(&qword_1000C74C8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DismissAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v12 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  v13 = a3[9];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)&a2[v13 + 8];
  *(_QWORD *)v14 = *(_QWORD *)&a2[v13];
  *((_QWORD *)v14 + 1) = v16;
  v17 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v18 = &v14[v17];
  v19 = &v15[v17];
  v20 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  return a1;
}

char *assignWithTake for ModelResponseView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  if (a1 != a2)
  {
    sub_10000AE2C((uint64_t)a1, &qword_1000C74C8);
    v6 = sub_100004EAC(&qword_1000C74C8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DismissAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  swift_release(v12, a2);
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)&a1[v13];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  swift_release(v16, v17);
  v18 = *((_QWORD *)v14 + 1);
  *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
  swift_release(v18, v19);
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  *v21 = *v22;
  v23 = *((_QWORD *)v21 + 1);
  *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
  swift_release(v23, v24);
  v25 = a3[8];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = *(void **)&a1[v25];
  *(_QWORD *)&a1[v25] = *(_QWORD *)&a2[v25];

  v29 = *((_QWORD *)v26 + 1);
  *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
  swift_release(v29, v30);
  v31 = a3[9];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = *(_QWORD *)&a1[v31];
  *(_QWORD *)&a1[v31] = *(_QWORD *)&a2[v31];
  swift_release(v34, v35);
  v36 = *((_QWORD *)v32 + 1);
  *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
  swift_release(v36, v37);
  v38 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v39 = &v32[v38];
  v40 = &v33[v38];
  v41 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 40))(v39, v40, v41);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelResponseView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100032454);
}

uint64_t sub_100032454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_100004EAC(&qword_1000C9490);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_100004EAC(&qword_1000C9E90);
    v10 = a1 + *(int *)(a3 + 36);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelResponseView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100032510);
}

uint64_t sub_100032510(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_100004EAC(&qword_1000C9490);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return result;
    }
    v10 = sub_100004EAC(&qword_1000C9E90);
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000325BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  sub_100032690(319, (unint64_t *)&unk_1000C9500, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\t";
    v6[2] = &unk_1000933F0;
    v6[3] = &unk_100093408;
    v6[4] = &unk_1000933F0;
    sub_100032690(319, (unint64_t *)&qword_1000C9F00, (uint64_t (*)(uint64_t))&type metadata accessor for NavigationPath, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

void sub_100032690(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_1000326E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;

  v0 = sub_10000ABD0(&qword_1000C9440);
  v1 = sub_10000ABD0(&qword_1000C9478);
  v7 = sub_10000ABD0(&qword_1000C9438);
  v8 = &type metadata for Bool;
  v9 = sub_10003139C();
  v10 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v3 = sub_10000ABD0(&qword_1000C9480);
  v4 = sub_10000B254(&qword_1000C9488, &qword_1000C9480, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v7 = v3;
  v8 = (void *)v4;
  v5 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v7 = v0;
  v8 = (void *)v1;
  v9 = OpaqueTypeConformance2;
  v10 = (void *)v5;
  return swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
}

ValueMetadata *type metadata accessor for ModelResponseTextViewModifier()
{
  return &type metadata for ModelResponseTextViewModifier;
}

ValueMetadata *type metadata accessor for OutputWarningView()
{
  return &type metadata for OutputWarningView;
}

uint64_t destroy for ActionButtonView(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  swift_release(*a1, a2);
  return swift_release(a1[4], v3);
}

uint64_t initializeWithCopy for ActionButtonView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v5 = a2[4];
  *(_QWORD *)(a1 + 32) = v5;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for ActionButtonView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6, v7);
  v8 = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  a1[2] = v8;
  v9 = a1[4];
  v10 = a2[4];
  a1[4] = v10;
  swift_retain(v10);
  swift_release(v9, v11);
  return a1;
}

__n128 initializeWithTake for ActionButtonView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for ActionButtonView(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5, a2);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v6 = a1[4];
  a1[4] = a2[4];
  swift_release(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionButtonView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionButtonView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionButtonView()
{
  return &type metadata for ActionButtonView;
}

uint64_t sub_100032A24(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0364, 1);
}

uint64_t sub_100032A34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  v36 = a1;
  v1 = type metadata accessor for ParagraphTypesetting(0);
  v32 = *(_QWORD *)(v1 - 8);
  v33 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004EAC(&qword_1000C9560);
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = LocalizedStringKey.init(stringLiteral:)(0x1000000000000046, 0x80000001000AC160);
  v8 = Text.init(_:tableName:bundle:comment:)(v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  LODWORD(v37) = static HierarchicalShapeStyle.secondary.getter(v8);
  v15 = Text.foregroundStyle<A>(_:)(&v37, v8, v10, v14, v12, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  sub_10000ADF4(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  KeyPath = swift_getKeyPath(&unk_100093568);
  v37 = v15;
  v38 = v17;
  v39 = v19 & 1;
  v40 = v21;
  v41 = KeyPath;
  v42 = 1;
  static ParagraphTypesetting.balanced.getter();
  v23 = sub_100004EAC(&qword_1000C9568);
  v24 = sub_100033F30();
  View.paragraphTypesetting(_:isEnabled:)(v3, 1, v23, v24);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v3, v33);
  sub_10000ADF4(v37, v38, v39);
  swift_bridgeObjectRelease(v40);
  v26 = swift_release(v41, v25);
  LOBYTE(v23) = static Edge.Set.bottom.getter(v26);
  v28 = v34;
  v27 = v35;
  v29 = v36;
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 16))(v36, v6, v35);
  v30 = v29 + *(int *)(sub_100004EAC(&qword_1000C9578) + 36);
  *(_BYTE *)v30 = v23;
  *(_OWORD *)(v30 + 8) = 0u;
  *(_OWORD *)(v30 + 24) = 0u;
  *(_BYTE *)(v30 + 40) = 1;
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v6, v27);
}

uint64_t sub_100032C84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t KeyPath;
  uint64_t OpaqueTypeConformance2;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;

  v95 = a2;
  v87 = type metadata accessor for SmallIconTitleLabelStyle(0);
  __chkstk_darwin(v87);
  v4 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004EAC(&qword_1000C95C8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v78 = (uint64_t)&v77 - v9;
  v85 = sub_100004EAC(&qword_1000C95C0);
  v83 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v81 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100004EAC(&qword_1000C95D8);
  v82 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v80 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100004EAC(&qword_1000C95B8);
  __chkstk_darwin(v79);
  v88 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100004EAC(&qword_1000C95A8);
  __chkstk_darwin(v89);
  *(_QWORD *)&v91 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100004EAC(&qword_1000C9598);
  __chkstk_darwin(v90);
  v94 = (uint64_t)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100004EAC(&qword_1000C9580);
  v15 = __chkstk_darwin(v92);
  v93 = (uint64_t)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C7430 != -1)
    v15 = swift_once(&qword_1000C7430, sub_100042084);
  v17 = xmmword_1000D1CE0;
  v18 = static Alignment.center.getter(v15);
  v20 = v19;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  v8[40] = 1;
  v21 = &v8[*(int *)(v5 + 48)];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_100093598);
  v22 = sub_100004EAC(&qword_1000C74D0);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  *v8 = 0;
  *((_QWORD *)v8 + 1) = v18;
  *((_QWORD *)v8 + 2) = v20;
  *(_OWORD *)(v8 + 24) = v17;
  v8[40] = 0;
  sub_100033450(a1, &v8[*(int *)(v5 + 44)]);
  v23 = v78;
  sub_10000AC80((uint64_t)v8, v78, &qword_1000C95C8);
  v101 = *((_OWORD *)a1 + 1);
  v102 = a1[4];
  v99 = *((_OWORD *)a1 + 1);
  v100 = a1[4];
  v86 = sub_100004EAC(&qword_1000C95E0);
  State.projectedValue.getter(&v96);
  v24 = v97;
  v25 = v98;
  *(_OWORD *)v4 = v96;
  *((_QWORD *)v4 + 2) = v24;
  v4[24] = v25;
  v26 = v87;
  v27 = &v4[*(int *)(v87 + 20)];
  *(_QWORD *)v27 = swift_getKeyPath(&unk_100093598);
  swift_storeEnumTagMultiPayload(v27, v22, 0);
  v28 = sub_10000B254(&qword_1000C95D0, &qword_1000C95C8, (uint64_t)&unk_1000947E8);
  v29 = sub_100005900(&qword_1000CBA80, type metadata accessor for SmallIconTitleLabelStyle, (uint64_t)&unk_100093E10);
  v30 = v81;
  View.labelStyle<A>(_:)(v4, v5, v26, v28, v29);
  sub_1000151C8((uint64_t)v4, type metadata accessor for SmallIconTitleLabelStyle);
  sub_10000AE2C(v23, &qword_1000C95C8);
  KeyPath = swift_getKeyPath(&unk_1000935C8);
  LOWORD(v99) = 0;
  *((_QWORD *)&v99 + 1) = KeyPath;
  LOBYTE(v100) = 0;
  *(_QWORD *)&v96 = v5;
  *((_QWORD *)&v96 + 1) = v26;
  v97 = v28;
  v98 = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v96, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
  v33 = sub_100015448();
  v34 = v80;
  v35 = v85;
  View.buttonStyle<A>(_:)(&v99, v85, &type metadata for PrimaryButtonStyle, OpaqueTypeConformance2, v33);
  swift_release(KeyPath, v36);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v30, v35);
  v37 = v82;
  v38 = (uint64_t)v88;
  v39 = v84;
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v88, v34, v84);
  *(_WORD *)(v38 + *(int *)(v79 + 36)) = 256;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v39);
  v40 = *a1;
  v41 = *((_BYTE *)a1 + 8);
  v42 = swift_retain(*a1);
  v43 = sub_100046394(v42, v41);
  swift_release(v40, v44);
  v45 = swift_getKeyPath(&unk_100093340);
  *(_QWORD *)&v96 = v43;
  v46 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v96, v45, v46);
  swift_release(v45, v47);
  LOBYTE(v37) = *(_BYTE *)(v43 + 72);
  v48 = v43;
  v49 = 1;
  swift_release(v48, v50);
  if ((v37 & 1) == 0)
  {
    v51 = swift_retain(v40);
    v52 = sub_100046394(v51, v41);
    swift_release(v40, v53);
    v54 = swift_getKeyPath(&unk_1000935F8);
    *(_QWORD *)&v96 = v52;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v96, v54, v46);
    swift_release(v54, v55);
    v56 = *(_QWORD *)(v52 + 80);
    swift_errorRetain(v56);
    swift_release(v52, v57);
    if (v56)
    {
      swift_errorRelease(v56);
      v49 = 1;
    }
    else
    {
      v49 = 0;
    }
  }
  v58 = swift_getKeyPath(&unk_100093620);
  v59 = swift_allocObject(&unk_1000BF588, 17, 7);
  *(_BYTE *)(v59 + 16) = v49;
  v60 = v91;
  sub_10000AD78(v38, v91, &qword_1000C95B8);
  v61 = (uint64_t *)(v60 + *(int *)(v89 + 36));
  *v61 = v58;
  v61[1] = (uint64_t)sub_10000AC78;
  v61[2] = v59;
  v62 = sub_10000AE2C(v38, &qword_1000C95B8);
  LOBYTE(v58) = static Edge.Set.bottom.getter(v62);
  v63 = EdgeInsets.init(_all:)(10.0);
  v65 = v64;
  v67 = v66;
  v69 = v68;
  v70 = v94;
  sub_10000AD78(v60, v94, &qword_1000C95A8);
  v71 = v70 + *(int *)(v90 + 36);
  *(_BYTE *)v71 = v58;
  *(double *)(v71 + 8) = v63;
  *(_QWORD *)(v71 + 16) = v65;
  *(_QWORD *)(v71 + 24) = v67;
  *(_QWORD *)(v71 + 32) = v69;
  *(_BYTE *)(v71 + 40) = 0;
  sub_10000AE2C(v60, &qword_1000C95A8);
  v99 = v101;
  v100 = v102;
  State.projectedValue.getter(&v96);
  v91 = v96;
  v72 = v97;
  v73 = v98;
  v74 = v93;
  sub_10000AD78(v70, v93, &qword_1000C9598);
  v75 = v74 + *(int *)(v92 + 36);
  *(_OWORD *)v75 = v91;
  *(_QWORD *)(v75 + 16) = v72;
  *(_BYTE *)(v75 + 24) = v73;
  sub_10000AE2C(v70, &qword_1000C9598);
  return sub_10000AC80(v74, v95, &qword_1000C9580);
}

uint64_t sub_100033450@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  void (*v72)(char *, uint64_t);
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;

  v79 = a2;
  v77 = sub_100004EAC(&qword_1000C95E8);
  v80 = *(_QWORD *)(v77 - 8);
  v3 = __chkstk_darwin(v77);
  v81 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v74 = (uint64_t)&v74 - v6;
  __chkstk_darwin(v5);
  v75 = (char *)&v74 - v7;
  v8 = sub_100004EAC(&qword_1000C95F0);
  v9 = __chkstk_darwin(v8);
  v78 = (uint64_t)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v74 - v11;
  v82 = sub_100004EAC(&qword_1000CBB80);
  v84 = *(_QWORD *)(v82 - 8);
  v13 = __chkstk_darwin(v82);
  v76 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v74 - v15;
  v17 = *a1;
  v18 = *((_BYTE *)a1 + 8);
  v86 = *((_OWORD *)a1 + 1);
  v87 = a1[4];
  v19 = swift_allocObject(&unk_1000BF5B0, 56, 7);
  v20 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v19 + 32) = v20;
  *(_QWORD *)(v19 + 48) = a1[4];
  swift_retain(v17);
  sub_100034348((uint64_t)&v86);
  v21 = sub_100004EAC(&qword_1000CBB00);
  v22 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v83 = v16;
  v23 = v21;
  v24 = v21;
  v25 = v22;
  Button.init(action:label:)(sub_100034328, v19, sub_100033AAC, 0, v24, v22);
  v26 = swift_retain(v17);
  v27 = sub_100046394(v26, v18);
  swift_release(v17, v28);
  KeyPath = swift_getKeyPath(&unk_100093650);
  v85 = v27;
  v30 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v85, KeyPath, v30);
  swift_release(KeyPath, v31);
  if (*(_BYTE *)(v27 + 56) || *(_BYTE *)(v27 + 32) != 9)
  {
    v41 = swift_getKeyPath(&unk_100093678);
    v85 = v27;
    v42 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v85, v41, v42);
    swift_release(v41, v43);
    v44 = *(unsigned __int8 *)(v27 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__isForEditableContent);
    swift_release(v27, v45);
    if (v44 == 1)
      goto LABEL_4;
  }
  else
  {
    v32 = swift_getKeyPath(&unk_1000936C8);
    v85 = v27;
    v33 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v85, v32, v33);
    swift_release(v32, v34);
    v35 = *(_QWORD *)(v27 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__allowedResultOptions);
    swift_release(v27, v36);
    if ((v35 & 8) != 0)
    {
LABEL_4:
      v37 = swift_allocObject(&unk_1000BF5D8, 56, 7);
      v38 = *((_OWORD *)a1 + 1);
      *(_OWORD *)(v37 + 16) = *(_OWORD *)a1;
      *(_OWORD *)(v37 + 32) = v38;
      *(_QWORD *)(v37 + 48) = a1[4];
      swift_retain(v17);
      sub_100034348((uint64_t)&v86);
      v39 = (uint64_t)v12;
      Button.init(action:label:)(sub_1000343B8, v37, sub_100033C44, 0, v23, v25);
      v40 = 0;
      goto LABEL_7;
    }
  }
  v40 = 1;
  v39 = (uint64_t)v12;
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v39, v40, 1, v82);
  v46 = swift_retain(v17);
  v47 = sub_100046394(v46, v18);
  swift_release(v17, v48);
  v49 = swift_getKeyPath(&unk_1000936A0);
  v85 = v47;
  v50 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v85, v49, v50);
  swift_release(v49, v51);
  v52 = *(void **)(v47 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString);
  v53 = v52;
  swift_release(v47, v54);
  if (v52)
  {
    v55 = objc_msgSend(v53, "string");

    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v58 = v57;

  }
  else
  {
    v56 = 0;
    v58 = 0xE000000000000000;
  }
  v59 = v74;
  ShareLink<>.init<>(item:subject:message:label:)(v56, v58, 0, 0, 0, 0, 0, 0, 0, 0, sub_100033D34, 0, v23, v25);
  v60 = v80;
  v61 = v75;
  v62 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(v75, v59, v77);
  v63 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
  v64 = v76;
  v65 = v82;
  v63(v76, v83, v82);
  v66 = v78;
  sub_10000AD78(v39, v78, &qword_1000C95F0);
  v67 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
  v74 = v39;
  v68 = v81;
  v67(v81, v61, v62);
  v69 = v79;
  v63(v79, v64, v65);
  v70 = sub_100004EAC(&qword_1000C95F8);
  sub_10000AD78(v66, (uint64_t)&v69[*(int *)(v70 + 48)], &qword_1000C95F0);
  v67(&v69[*(int *)(v70 + 64)], v68, v62);
  v71 = *(void (**)(char *, uint64_t))(v60 + 8);
  v71(v61, v62);
  sub_10000AE2C(v74, &qword_1000C95F0);
  v72 = *(void (**)(char *, uint64_t))(v84 + 8);
  v72(v83, v65);
  v71(v68, v62);
  sub_10000AE2C(v66, &qword_1000C95F0);
  return ((uint64_t (*)(char *, uint64_t))v72)(v64, v65);
}

uint64_t sub_100033AAC()
{
  return sub_100033D60(2037411651, 0xE400000000000000);
}

uint64_t sub_100033AD4(uint64_t *a1, SEL *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = swift_retain(*a1);
  v6 = sub_100046394(v5, v4);
  swift_release(v3, v7);
  KeyPath = swift_getKeyPath(&unk_1000936A0);
  v25 = v6;
  v9 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, KeyPath, v9);
  swift_release(KeyPath, v10);
  v11 = *(void **)(v6 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString);
  v12 = v11;
  swift_release(v6, v13);
  if (v11)
  {
    v14 = swift_retain(v3);
    v15 = sub_100046394(v14, v4);
    swift_release(v3, v16);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v15 + 16);
    swift_release(v15, v18);
    if (Strong)
    {
      objc_msgSend(Strong, *a2, v12);

      swift_unknownObjectRelease(Strong);
    }
    else
    {

    }
  }
  v19 = swift_retain(v3);
  v20 = sub_100046394(v19, v4);
  swift_release(v3, v21);
  v22 = (void *)swift_unknownObjectWeakLoadStrong(v20 + 16);
  result = swift_release(v20, v23);
  if (v22)
  {
    objc_msgSend(v22, "endWritingTools");
    return swift_unknownObjectRelease(v22);
  }
  return result;
}

uint64_t sub_100033C44()
{
  return Label.init(title:icon:)(sub_100033C80, 0, sub_100033CF0, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_100033C80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)(0x6563616C706552, 0xE700000000000000);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_100033CF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(_:bundle:)(0x6C7065722E6D675FLL, 0xEB00000000656361, 0);
  *a1 = result;
  return result;
}

uint64_t sub_100033D34()
{
  return sub_100033D60(0x6572616853, 0xE500000000000000);
}

uint64_t sub_100033D60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = LocalizedStringKey.init(stringLiteral:)(a1, a2);
  return Label<>.init(_:systemImage:)(v2);
}

uint64_t sub_100033DA0()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];
  _OWORD v6[2];
  uint64_t v7;

  v1 = *(_OWORD *)(v0 + 16);
  v6[0] = *(_OWORD *)v0;
  v6[1] = v1;
  v7 = *(_QWORD *)(v0 + 32);
  v5[2] = v6;
  v2 = sub_100004EAC(&qword_1000C9580);
  v3 = sub_100033FBC(&qword_1000C9588, &qword_1000C9580, (void (*)(void))sub_10003402C, (void (*)(void))sub_100034268);
  return Section<>.init(content:)(sub_100033FB4, v5, v2, v3);
}

uint64_t sub_100033E34(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B033C, 1);
}

uint64_t sub_100033E44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0314, 1);
}

double sub_100033E54@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = static Alignment.center.getter(a1);
  *(_QWORD *)&result = sub_10002DF60(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a2, 0.0, 1, INFINITY, 0, v3, v4, &qword_1000C9550, &qword_1000C9558).n128_u64[0];
  return result;
}

uint64_t sub_100033ED8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100033F04(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

unint64_t sub_100033F30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9570;
  if (!qword_1000C9570)
  {
    v1 = sub_10000ABD0(&qword_1000C9568);
    sub_10000B254((unint64_t *)&unk_1000CA1E0, &qword_1000CBD60, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9570);
  }
  return result;
}

uint64_t sub_100033FB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100032C84(*(_QWORD **)(v1 + 16), a1);
}

uint64_t sub_100033FBC(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000ABD0(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003402C()
{
  return sub_100034050(&qword_1000C9590, &qword_1000C9598, (void (*)(void))sub_1000340B8);
}

uint64_t sub_100034050(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000ABD0(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000340B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C95A0;
  if (!qword_1000C95A0)
  {
    v1 = sub_10000ABD0(&qword_1000C95A8);
    sub_10003413C();
    sub_10000B254((unint64_t *)&unk_1000CA4A0, &qword_1000C7F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C95A0);
  }
  return result;
}

unint64_t sub_10003413C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  unint64_t v4;
  uint64_t v5;
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;

  result = qword_1000C95B0;
  if (!qword_1000C95B0)
  {
    v1 = sub_10000ABD0(&qword_1000C95B8);
    v2 = sub_10000ABD0(&qword_1000C95C0);
    v5 = sub_10000ABD0(&qword_1000C95C8);
    v6 = (ValueMetadata *)type metadata accessor for SmallIconTitleLabelStyle(255);
    v7 = sub_10000B254(&qword_1000C95D0, &qword_1000C95C8, (uint64_t)&unk_1000947E8);
    v8 = sub_100005900(&qword_1000CBA80, type metadata accessor for SmallIconTitleLabelStyle, (uint64_t)&unk_100093E10);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
    v4 = sub_100015448();
    v5 = v2;
    v6 = &type metadata for PrimaryButtonStyle;
    v7 = OpaqueTypeConformance2;
    v8 = v4;
    swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C95B0);
  }
  return result;
}

unint64_t sub_100034268()
{
  unint64_t result;

  result = qword_1000CB8D0;
  if (!qword_1000CB8D0)
  {
    result = swift_getWitnessTable(&unk_100094838, &type metadata for IconWidthUpdatingModifier);
    atomic_store(result, (unint64_t *)&qword_1000CB8D0);
  }
  return result;
}

uint64_t sub_1000342B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000342E0(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_100034314()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100034328()
{
  uint64_t v0;

  return sub_100033AD4((uint64_t *)(v0 + 16), (SEL *)&selRef_copyText_);
}

uint64_t sub_100034348(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_10003438C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v2 + 16), a2);
  swift_release(*(_QWORD *)(v2 + 48), v3);
  return swift_deallocObject(v2, 56, 7);
}

uint64_t sub_1000343B8()
{
  uint64_t v0;

  return sub_100033AD4((uint64_t *)(v0 + 16), (SEL *)&selRef_replaceSelectionWithText_);
}

void sub_1000343E0()
{
  uint64_t v0;

  sub_100025204(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000343FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100031650(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100034404()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9620;
  if (!qword_1000C9620)
  {
    v1 = sub_10000ABD0(&qword_1000C9618);
    sub_10000B254(&qword_1000C7820, &qword_1000C77B0, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9620);
  }
  return result;
}

uint64_t sub_100034484()
{
  return sub_100034604(sub_100031A10);
}

uint64_t sub_100034494()
{
  return sub_100034604(sub_10003192C);
}

uint64_t sub_1000344B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002FD64(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000344BC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for ModelResponseView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100004EAC(&qword_1000C74C8);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v9 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v0 + v4, v9);
  }
  else
  {
    swift_release(*v6, v8);
  }
  v11 = v4 + v5;
  swift_release(*(_QWORD *)((char *)v6 + v1[5]), v10);
  v12 = (_QWORD *)((char *)v6 + v1[6]);
  swift_release(*v12, v13);
  swift_release(v12[1], v14);
  swift_release(*(_QWORD *)((char *)v6 + v1[7] + 8), v15);
  v16 = (char *)v6 + v1[8];

  swift_release(*((_QWORD *)v16 + 1), v17);
  v18 = (_QWORD *)((char *)v6 + v1[9]);
  swift_release(*v18, v19);
  swift_release(v18[1], v20);
  v21 = (char *)v18 + *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v22 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  return swift_deallocObject(v0, v11, v3 | 7);
}

uint64_t sub_1000345F8()
{
  return sub_100034604(sub_100030FF8);
}

uint64_t sub_100034604(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ModelResponseView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

unint64_t sub_100034640()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9698;
  if (!qword_1000C9698)
  {
    v1 = sub_10000ABD0(&qword_1000C9638);
    sub_10000B254(&qword_1000C96A0, &qword_1000C9630, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9698);
  }
  return result;
}

unint64_t sub_1000346C4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000C96A8;
  if (!qword_1000C96A8)
  {
    v1 = sub_10000ABD0(&qword_1000C9650);
    v2[0] = sub_10000ABD0(&qword_1000C9640);
    v2[1] = &type metadata for String;
    v2[2] = sub_100034050(&qword_1000C9690, &qword_1000C9640, (void (*)(void))sub_100034640);
    v2[3] = sub_100015204();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C96A8);
  }
  return result;
}

unint64_t sub_100034794()
{
  unint64_t result;

  result = qword_1000C9700;
  if (!qword_1000C9700)
  {
    result = swift_getWitnessTable(&unk_100093474, &type metadata for ActionButtonView);
    atomic_store(result, (unint64_t *)&qword_1000C9700);
  }
  return result;
}

unint64_t sub_1000347E0()
{
  unint64_t result;

  result = qword_1000C9720;
  if (!qword_1000C9720)
  {
    result = swift_getWitnessTable(&unk_100093514, &type metadata for ModelResponseTextViewModifier);
    atomic_store(result, (unint64_t *)&qword_1000C9720);
  }
  return result;
}

double sub_100034834@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100030DF0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10003483C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9738;
  if (!qword_1000C9738)
  {
    v1 = sub_10000ABD0(&qword_1000C9730);
    sub_100033FBC(&qword_1000C9718, &qword_1000C9708, (void (*)(void))sub_100022CB4, (void (*)(void))sub_1000347E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9738);
  }
  return result;
}

unint64_t sub_1000348CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9740;
  if (!qword_1000C9740)
  {
    v1 = sub_10000ABD0(&qword_1000C9558);
    sub_10000B254(&qword_1000C9748, &qword_1000C9550, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9740);
  }
  return result;
}

unint64_t sub_100034954()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000C9750;
  if (!qword_1000C9750)
  {
    v1 = sub_10000ABD0(&qword_1000C9578);
    v2[0] = sub_10000ABD0(&qword_1000C9568);
    v2[1] = sub_100033F30();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.paragraphTypesetting(_:isEnabled:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9750);
  }
  return result;
}

unint64_t sub_1000349EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9758;
  if (!qword_1000C9758)
  {
    v1 = sub_10000ABD0(&qword_1000C9760);
    sub_100033FBC(&qword_1000C9588, &qword_1000C9580, (void (*)(void))sub_10003402C, (void (*)(void))sub_100034268);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9758);
  }
  return result;
}

uint64_t sub_100034A7C(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_100034AA4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Text.Storage - 1) + 32))(a2, a1);
  return a2;
}

uint64_t sub_100034AE0(uint64_t a1)
{
  sub_10000ADBC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

_QWORD *sub_100034B10(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_100034B38(uint64_t a1)
{
  sub_10000AFC4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_OWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
  return a1;
}

id sub_100034BE8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  id v33;
  void *v34;
  char *v35;
  id result;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  Class isa;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;

  v1 = v0;
  v2 = type metadata accessor for UIHostingControllerSizingOptions(0);
  __chkstk_darwin(v2);
  v75 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for QuestionnaireView(0);
  __chkstk_darwin(v74);
  v5 = (uint64_t *)((char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100004EAC(&qword_1000C97B0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v73 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v67 - v10;
  v12 = sub_100004EAC(&qword_1000C9E90);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v67 - v16;
  v18 = type metadata accessor for NavigationPath(0);
  v69 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v68 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  NavigationPath.init()(v19);
  v21 = swift_allocObject(&unk_1000BF708, 32, 7);
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  v22 = swift_allocObject(&unk_1000BF730, 32, 7);
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  v70 = v18;
  Binding.init(get:set:)(variable initialization expression of WritingToolsView._navigationPath, v21, nullsub_1, v22, v18);
  v23 = type metadata accessor for CommonUIManager(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v24 = sub_10005871C();
  v25 = *(_QWORD *)&v1[OBJC_IVAR____TtC21WritingToolsUIService31QuestionnaireOnlyViewController_questionnaireModel];
  v71 = v17;
  sub_100035598((uint64_t)v17, (uint64_t)v15);
  v26 = swift_retain(v25);
  sub_100059BA0(v26, (uint64_t)v15, v5);
  v27 = sub_100005900(&qword_1000C97B8, type metadata accessor for QuestionnaireView, (uint64_t)&unk_100094F08);
  v28 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  v29 = swift_retain(v24);
  View.environment<A>(_:)(v29, v74, v23, v27, v28);
  v67 = v24;
  swift_release(v24, v30);
  sub_1000355E0((uint64_t)v5);
  v72 = v7;
  v31 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v32 = v73;
  v74 = v6;
  v31(v73, v11, v6);
  v33 = objc_allocWithZone((Class)sub_100004EAC(&qword_1000C97C0));
  v34 = (void *)UIHostingController.init(rootView:)(v32);
  v35 = v75;
  static UIHostingControllerSizingOptions.preferredContentSize.getter();
  dispatch thunk of UIHostingController.sizingOptions.setter(v35);
  result = objc_msgSend(v1, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_14;
  }
  v37 = result;
  result = objc_msgSend(v34, "view");
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v38 = result;
  objc_msgSend(v37, "addSubview:", result);

  result = objc_msgSend(v34, "view");
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v39 = result;
  objc_msgSend(result, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  objc_msgSend(v1, "addChildViewController:", v34);
  v40 = sub_100004EAC((uint64_t *)&unk_1000C7570);
  v41 = swift_allocObject(v40, 64, 7);
  *(_OWORD *)(v41 + 16) = xmmword_100091440;
  result = objc_msgSend(v34, "view");
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v42 = result;
  v43 = objc_msgSend(result, "leadingAnchor");

  result = objc_msgSend(v1, "view");
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v44 = result;
  v45 = objc_msgSend(result, "leadingAnchor");

  v46 = objc_msgSend(v43, "constraintEqualToAnchor:", v45);
  *(_QWORD *)(v41 + 32) = v46;
  result = objc_msgSend(v34, "view");
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v47 = result;
  v48 = objc_msgSend(result, "trailingAnchor");

  result = objc_msgSend(v1, "view");
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v49 = result;
  v50 = objc_msgSend(result, "trailingAnchor");

  v51 = objc_msgSend(v48, "constraintEqualToAnchor:", v50);
  *(_QWORD *)(v41 + 40) = v51;
  result = objc_msgSend(v34, "view");
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v52 = result;
  v53 = objc_msgSend(result, "topAnchor");

  result = objc_msgSend(v1, "view");
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v54 = result;
  v55 = objc_msgSend(result, "topAnchor");

  v56 = objc_msgSend(v53, "constraintEqualToAnchor:", v55);
  *(_QWORD *)(v41 + 48) = v56;
  result = objc_msgSend(v34, "view");
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v57 = result;
  v58 = objc_msgSend(result, "bottomAnchor");

  result = objc_msgSend(v1, "view");
  if (result)
  {
    v59 = result;
    v60 = (void *)objc_opt_self(NSLayoutConstraint);
    v61 = objc_msgSend(v59, "bottomAnchor");

    v62 = objc_msgSend(v58, "constraintEqualToAnchor:", v61);
    *(_QWORD *)(v41 + 56) = v62;
    v76 = v41;
    specialized Array._endMutation()(v63);
    v64 = v76;
    sub_100005EA8();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v64);
    objc_msgSend(v60, "activateConstraints:", isa);
    swift_release(v67, v66);

    (*(void (**)(char *, uint64_t))(v72 + 8))(v11, v74);
    sub_10003561C((uint64_t)v71);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v68, v70);
  }
LABEL_23:
  __break(1u);
  return result;
}

id sub_1000353BC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for QuestionnaireOnlyViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for QuestionnaireOnlyViewController()
{
  return objc_opt_self(_TtC21WritingToolsUIService31QuestionnaireOnlyViewController);
}

uint64_t sub_100035448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t result;
  objc_super v16;
  _BYTE v17[24];

  v6 = &v3[OBJC_IVAR____TtC21WritingToolsUIService31QuestionnaireOnlyViewController_preferredContentSizeHandler];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v7 = qword_1000C73F8;
  v8 = v3;
  swift_retain(a2);
  if (v7 != -1)
    swift_once(&qword_1000C73F8, sub_100015C08);
  swift_beginAccess(&qword_1000D1C80, v17, 32, 0);
  v9 = qword_1000D1C80;
  if (*(_QWORD *)(qword_1000D1C80 + 16) && (v10 = sub_10001CCB8(a3), (v11 & 1) != 0))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
    swift_endAccess(v17);
    *(_QWORD *)&v8[OBJC_IVAR____TtC21WritingToolsUIService31QuestionnaireOnlyViewController_questionnaireModel] = v12;
    swift_retain(v12);

    v16.receiver = v8;
    v16.super_class = (Class)type metadata accessor for QuestionnaireOnlyViewController();
    v13 = objc_msgSendSuper2(&v16, "initWithNibName:bundle:", 0, 0);
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a3, v14);
    return (uint64_t)v13;
  }
  else
  {
    result = swift_endAccess(v17);
    __break(1u);
  }
  return result;
}

uint64_t sub_100035574()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100035598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000C9E90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000355E0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for QuestionnaireView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003561C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004EAC(&qword_1000C9E90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for FeedbackView(uint64_t a1)
{
  uint64_t v2;
  int v3;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 != 255)
    sub_10000A880(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v3);
  return swift_release(*(_QWORD *)(a1 + 88), v2);
}

uint64_t initializeWithCopy for FeedbackView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  v11 = *(unsigned __int8 *)(a2 + 80);
  v12 = v4;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  if (v11 == 255)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 56);
    v14 = *(_QWORD *)(a2 + 64);
    v15 = *(_QWORD *)(a2 + 72);
    sub_10000B060(v13, v14, v15, v11);
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v15;
    *(_BYTE *)(a1 + 80) = v11;
  }
  *(_WORD *)(a1 + 81) = *(_WORD *)(a2 + 81);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v17;
  swift_retain(v16);
  return a1;
}

uint64_t assignWithCopy for FeedbackView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = (__int128 *)(a1 + 56);
  v14 = (__int128 *)(a2 + 56);
  v15 = *(unsigned __int8 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v15 == 255)
    {
      v27 = *v14;
      *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
      *v13 = v27;
    }
    else
    {
      v23 = *(_QWORD *)(a2 + 56);
      v24 = *(_QWORD *)(a2 + 64);
      v25 = *(_QWORD *)(a2 + 72);
      sub_10000B060(v23, v24, v25, *(_BYTE *)(a2 + 80));
      *(_QWORD *)(a1 + 56) = v23;
      *(_QWORD *)(a1 + 64) = v24;
      *(_QWORD *)(a1 + 72) = v25;
      *(_BYTE *)(a1 + 80) = v15;
    }
  }
  else if (v15 == 255)
  {
    sub_100035920(a1 + 56);
    v26 = *(_OWORD *)(a2 + 65);
    *v13 = *v14;
    *(_OWORD *)(a1 + 65) = v26;
  }
  else
  {
    v16 = *(_QWORD *)(a2 + 56);
    v17 = *(_QWORD *)(a2 + 64);
    v18 = *(_QWORD *)(a2 + 72);
    sub_10000B060(v16, v17, v18, *(_BYTE *)(a2 + 80));
    v19 = *(_QWORD *)(a1 + 56);
    v20 = *(_QWORD *)(a1 + 64);
    v21 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 56) = v16;
    *(_QWORD *)(a1 + 64) = v17;
    *(_QWORD *)(a1 + 72) = v18;
    v22 = *(_BYTE *)(a1 + 80);
    *(_BYTE *)(a1 + 80) = v15;
    sub_10000A880(v19, v20, v21, v22);
  }
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v29;
  swift_retain(v29);
  swift_release(v28, v30);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t sub_100035920(uint64_t a1)
{
  destroy for Mode(a1);
  return a1;
}

__n128 initializeWithTake for FeedbackView(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for FeedbackView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  swift_bridgeObjectRelease(v10);
  v12 = *(unsigned __int8 *)(a1 + 80);
  if (v12 == 255)
    goto LABEL_5;
  v13 = *(unsigned __int8 *)(a2 + 80);
  if (v13 == 255)
  {
    sub_100035920(a1 + 56);
LABEL_5:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
    goto LABEL_6;
  }
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = v14;
  *(_BYTE *)(a1 + 80) = v13;
  sub_10000A880(v15, v16, v17, v12);
LABEL_6:
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  v18 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release(v18, v11);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeedbackView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 104))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FeedbackView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedbackView()
{
  return &type metadata for FeedbackView;
}

uint64_t sub_100035B48(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0400, 1);
}

void sub_100035B58()
{
  NSString v0;
  char v1;

  v0 = String._bridgeToObjectiveC()();
  v1 = MGGetBoolAnswer();

  byte_1000D1CA0 = v1;
}

BOOL sub_100035BAC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100035BC0()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100035C04()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100035C2C(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100035C6C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for FBKSEvaluation.Subject(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MainActor(0);
  v2[8] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v2[9] = v6;
  v2[10] = v7;
  return swift_task_switch(sub_100035D00, v6, v7);
}

uint64_t sub_100035D00()
{
  uint64_t v0;
  _QWORD *v1;

  sub_100035FF8(*(_QWORD **)(v0 + 56));
  v1 = (_QWORD *)swift_task_alloc(async function pointer to FBKSEvaluation.Subject._remoteEvaluate(action:showFeedbackForm:)[1]);
  *(_QWORD *)(v0 + 88) = v1;
  *v1 = v0;
  v1[1] = sub_100035D64;
  return FBKSEvaluation.Subject._remoteEvaluate(action:showFeedbackForm:)(*(_QWORD *)(v0 + 24), 1);
}

uint64_t sub_100035D64()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100035E10;
  else
    v4 = sub_100035DC4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
}

uint64_t sub_100035DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v2 + 64), a2);
  v3 = *(_QWORD *)(v2 + 56);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 + 48) + 8))(v3, *(_QWORD *)(v2 + 40));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100035E10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_release(*(_QWORD *)(v2 + 64), a2);
  if (qword_1000C73E0 != -1)
    swift_once(&qword_1000C73E0, sub_10000646C);
  v3 = *(_QWORD *)(v2 + 96);
  v4 = type metadata accessor for Logger(0);
  sub_1000063D4(v4, (uint64_t)qword_1000D1C30);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v2 + 96);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    swift_errorRetain(v9);
    v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v2 + 16) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 16, v2 + 24, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unexpected error trying to launch remote evaluation: %@.", v10, 0xCu);
    v13 = sub_100004EAC(&qword_1000C87C8);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_errorRelease(v9);
    swift_errorRelease(v9);
  }
  swift_errorRelease(v9);
  v14 = *(_QWORD *)(v2 + 56);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 + 48) + 8))(v14, *(_QWORD *)(v2 + 40));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100035FF8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint8_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  char *v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint8_t *v102;
  uint8_t *v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;

  v2 = v1;
  v100 = a1;
  v3 = type metadata accessor for LocalizedStringResource(0);
  v98 = *(_QWORD *)(v3 - 8);
  v99 = v3;
  __chkstk_darwin(v3);
  v106 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint8_t *)type metadata accessor for FBKSInteraction.FeatureDomain(0);
  v102 = (uint8_t *)*((_QWORD *)v5 - 1);
  v103 = v5;
  __chkstk_darwin(v5);
  v105 = (uint64_t)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004EAC(&qword_1000C9880);
  v8 = __chkstk_darwin(v7);
  *(_QWORD *)&v104 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v96 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (uint64_t *)((char *)&v96 - v14);
  __chkstk_darwin(v13);
  v17 = (char *)&v96 - v16;
  v18 = type metadata accessor for FBKSInteraction.Content(0);
  v101 = *(_QWORD *)(v18 - 8);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56);
  v19(v17, 1, 1, v18);
  v20 = *(_QWORD *)(v1 + 16);
  v107 = v12;
  v108 = v17;
  if (v20)
  {
    v21 = *(_QWORD *)(v1 + 8);
    if (String.count.getter(v21, v20) >= 1)
    {
      swift_bridgeObjectRetain(v20);
      sub_10000AE2C((uint64_t)v17, &qword_1000C9880);
      *v15 = v21;
      v15[1] = v20;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v101 + 104))(v15, enum case for FBKSInteraction.Content.text(_:), v18);
      v19((char *)v15, 0, 1, v18);
      sub_10000AC80((uint64_t)v15, (uint64_t)v17, &qword_1000C9880);
      if (qword_1000C73E0 != -1)
        swift_once(&qword_1000C73E0, sub_10000646C);
      v22 = type metadata accessor for Logger(0);
      sub_1000063D4(v22, (uint64_t)qword_1000D1C30);
      v23 = sub_10003AA34(v1);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.info.getter(v24);
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(12, -1);
        v97 = swift_slowAlloc(32, -1);
        v110 = v97;
        *(_DWORD *)v26 = 136642819;
        v96 = v26 + 4;
        swift_bridgeObjectRetain(v20);
        v109 = sub_10006DCA8(v21, v20, &v110);
        v12 = v107;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v96, v26 + 12);
        swift_bridgeObjectRelease(v20);
        sub_10003ACA8(v2);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Feedback Initiated - originalContent: %{sensitive}s", v26, 0xCu);
        v27 = v97;
        swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1, -1);
        v28 = v26;
        v17 = v108;
        swift_slowDealloc(v28, -1, -1);
      }
      else
      {
        sub_10003ACA8(v2);
      }

    }
  }
  v19(v12, 1, 1, v18);
  v29 = *(_QWORD *)(v2 + 32);
  if (v29)
  {
    v30 = *(_QWORD *)(v2 + 24);
    if (String.count.getter(v30, *(_QWORD *)(v2 + 32)) >= 1)
    {
      swift_bridgeObjectRetain(v29);
      sub_10000AE2C((uint64_t)v12, &qword_1000C9880);
      *v15 = v30;
      v15[1] = v29;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v101 + 104))(v15, enum case for FBKSInteraction.Content.text(_:), v18);
      v19((char *)v15, 0, 1, v18);
      sub_10000AC80((uint64_t)v15, (uint64_t)v12, &qword_1000C9880);
      if (qword_1000C73E0 != -1)
        swift_once(&qword_1000C73E0, sub_10000646C);
      v31 = type metadata accessor for Logger(0);
      sub_1000063D4(v31, (uint64_t)qword_1000D1C30);
      v32 = sub_10003AA34(v2);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.info.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = swift_slowAlloc(32, -1);
        v110 = v36;
        *(_DWORD *)v35 = 136642819;
        swift_bridgeObjectRetain(v29);
        v109 = sub_10006DCA8(v30, v29, &v110);
        v17 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v35 + 4, v35 + 12);
        swift_bridgeObjectRelease(v29);
        sub_10003ACA8(v2);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Feedback Initiated - generatedContent: %{sensitive}s", v35, 0xCu);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        v37 = v35;
        v12 = v107;
        swift_slowDealloc(v37, -1, -1);
      }
      else
      {
        sub_10003ACA8(v2);
      }

    }
  }
  if (qword_1000C73E0 != -1)
    swift_once(&qword_1000C73E0, sub_10000646C);
  v38 = type metadata accessor for Logger(0);
  v39 = sub_1000063D4(v38, (uint64_t)qword_1000D1C30);
  sub_10003AA34(v2);
  v40 = sub_10003AA34(v2);
  v101 = v39;
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.info.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v43 = v12;
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    v110 = v45;
    *(_DWORD *)v44 = 136380675;
    v46 = *(_QWORD *)(v2 + 48);
    if (v46)
    {
      v47 = *(_QWORD *)(v2 + 40);
      v48 = *(_QWORD *)(v2 + 48);
    }
    else
    {
      v47 = 0;
      v48 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain(v46);
    v109 = sub_10006DCA8(v47, v48, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease(v48);
    sub_10003ACA8(v2);
    sub_10003ACA8(v2);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Feedback Initiated - modelInfoString: %{private}s", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);

    v17 = v108;
    v12 = v43;
  }
  else
  {
    sub_10003ACA8(v2);
    sub_10003ACA8(v2);

  }
  v49 = v105;
  v50 = v106;
  (*((void (**)(uint64_t, _QWORD, uint8_t *))v102 + 13))(v105, enum case for FBKSInteraction.FeatureDomain.writingTools(_:), v103);
  sub_10000AD78((uint64_t)v17, (uint64_t)v15, &qword_1000C9880);
  v51 = v104;
  sub_10000AD78((uint64_t)v12, v104, &qword_1000C9880);
  v52 = *(_QWORD *)(v2 + 40);
  v53 = *(_QWORD *)(v2 + 48);
  objc_allocWithZone((Class)type metadata accessor for FBKSInteraction(0));
  swift_bridgeObjectRetain(v53);
  v54 = FBKSInteraction.init(featureDomain:bundleID:prefillQuestions:originalContent:generatedContent:modelVersion:diagnostics:auxiliaryMetrics:isHighPriority:)(v49, 0, 0, 0, v15, v51, v52, v53, 0, 0, 0, 0);
  v55 = (char *)v54;
  v56 = *(unsigned __int8 *)(v2 + 80);
  if (v56 == 255)
  {
    v88 = Logger.logObject.getter(v54);
    v89 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v90 = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "Feedback Initiated - No Subject", v90, 2u);
      swift_slowDealloc(v90, -1, -1);
    }

    sub_10000AE2C((uint64_t)v107, &qword_1000C9880);
    v91 = (uint64_t)v17;
  }
  else
  {
    v57 = *(_QWORD *)(v2 + 56);
    v58 = *(_QWORD *)(v2 + 64);
    v59 = *(_QWORD *)(v2 + 72);
    v60 = sub_100004EAC(&qword_1000C9888);
    v61 = sub_100004EAC(&qword_1000C9890);
    v62 = *(_QWORD *)(v61 - 8);
    v63 = *(_QWORD *)(v62 + 72);
    v64 = *(unsigned __int8 *)(v62 + 80);
    v65 = (v64 + 32) & ~v64;
    v66 = swift_allocObject(v60, v65 + v63, v64 | 7);
    v104 = xmmword_100092910;
    *(_OWORD *)(v66 + 16) = xmmword_100092910;
    v106 = v55;
    v67 = v66 + v65;
    v105 = *(int *)(v61 + 48);
    strcpy((char *)(v66 + v65), ":sub_feature");
    *(_BYTE *)(v67 + 13) = 0;
    *(_WORD *)(v67 + 14) = -5120;
    v68 = enum case for FBKSForm.Question.custom(_:);
    v69 = type metadata accessor for FBKSForm.Question(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 104))(v66 + v65, v68, v69);
    v70 = sub_100004EAC(&qword_1000C80A8);
    v71 = swift_allocObject(v70, 48, 7);
    *(_OWORD *)(v71 + 16) = v104;
    sub_10000B060(v57, v58, v59, v56);
    v72 = sub_100061960(v57, v58, v59, v56);
    v73 = LocalizedStringResource.key.getter(v72);
    v75 = v74;
    *(_QWORD *)&v104 = *(_QWORD *)(v98 + 8);
    ((void (*)(char *, uint64_t))v104)(v50, v99);
    *(_QWORD *)(v71 + 32) = v73;
    *(_QWORD *)(v71 + 40) = v75;
    *(_QWORD *)(v67 + v105) = v71;
    v55 = v106;
    v76 = sub_100062860(v66);
    dispatch thunk of FBKSInteraction.prefillQuestions.setter(v76);
    v77 = sub_10000B060(v57, v58, v59, v56);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.info.getter(v78);
    if (os_log_type_enabled(v78, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc(12, -1);
      v105 = swift_slowAlloc(32, -1);
      v110 = v105;
      v103 = v80;
      *(_DWORD *)v80 = 136315138;
      v102 = v80 + 4;
      v81 = sub_100061960(v57, v58, v59, v56);
      v82 = LocalizedStringResource.key.getter(v81);
      v84 = v83;
      ((void (*)(char *, uint64_t))v104)(v50, v99);
      v109 = sub_10006DCA8(v82, v84, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v102, v80 + 12);
      v85 = v84;
      v55 = v106;
      swift_bridgeObjectRelease(v85);
      sub_10000B11C(v57, v58, v59, v56);
      sub_10000B11C(v57, v58, v59, v56);
      v86 = v103;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Feedback Initiated - Subject: %s", v103, 0xCu);
      v87 = v105;
      swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v87, -1, -1);
      swift_slowDealloc(v86, -1, -1);

    }
    else
    {

      sub_10000B11C(v57, v58, v59, v56);
      sub_10000B11C(v57, v58, v59, v56);
    }
    sub_10000AE2C((uint64_t)v107, &qword_1000C9880);
    v91 = (uint64_t)v108;
  }
  sub_10000AE2C(v91, &qword_1000C9880);
  v92 = v100;
  *v100 = v55;
  v93 = enum case for FBKSEvaluation.Subject.interaction(_:);
  v94 = type metadata accessor for FBKSEvaluation.Subject(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 104))(v92, v93, v94);
}

uint64_t sub_100036B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72[16];
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v3 = v2;
  v71 = a2;
  v64 = sub_100004EAC(&qword_1000C98D8);
  v66 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004EAC(&qword_1000C9938);
  v68 = *(_QWORD *)(v7 - 8);
  v69 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100004EAC(&qword_1000C98D0);
  __chkstk_darwin(v65);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100004EAC(&qword_1000C98C0);
  __chkstk_darwin(v70);
  v67 = (uint64_t)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(&unk_1000BF938, 120, 7);
  v14 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v13 + 80) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v13 + 96) = v14;
  *(_QWORD *)(v13 + 112) = *(_QWORD *)(v3 + 96);
  v15 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)v3;
  *(_OWORD *)(v13 + 32) = v15;
  v16 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v13 + 64) = v16;
  v73 = a1;
  sub_10003AA34(v3);
  v17 = sub_100004EAC(&qword_1000C7890);
  v18 = sub_10000ABD0(&qword_1000CBB00);
  v19 = type metadata accessor for IconOnlyLabelStyle(255);
  v20 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v21 = sub_100005900(&qword_1000CBD10, (uint64_t (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for IconOnlyLabelStyle);
  v74 = *(double *)&v18;
  v75 = v19;
  v76 = v20;
  v77 = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v74, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
  Button.init(action:label:)(sub_10003B2D0, v13, sub_10003B300, v72, v17, OpaqueTypeConformance2);
  v23 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x80000001000AC320);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v30 = sub_10000B254(&qword_1000C98E0, &qword_1000C98D8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v31 = v23;
  v32 = v64;
  View.help(_:)(v31, v25, v27 & 1, v29, v64, v30);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v25);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v6, v32);
  v34 = static Edge.Set.bottom.getter(v33);
  v35 = 0.0;
  if ((unint64_t)*(unsigned __int8 *)(v3 + 82) - 1 < 2)
    v35 = 20.0;
  v36 = EdgeInsets.init(_all:)(v35);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v44 = v68;
  v43 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v11, v9, v69);
  v45 = &v11[*(int *)(v65 + 36)];
  *v45 = v34;
  *((double *)v45 + 1) = v36;
  *((_QWORD *)v45 + 2) = v38;
  *((_QWORD *)v45 + 3) = v40;
  *((_QWORD *)v45 + 4) = v42;
  v45[40] = 0;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v43);
  LOBYTE(v44) = *(_BYTE *)(v3 + 81);
  KeyPath = swift_getKeyPath(&unk_100093898);
  v47 = swift_allocObject(&unk_1000BF960, 17, 7);
  *(_BYTE *)(v47 + 16) = v44;
  v48 = v67;
  sub_10000AD78((uint64_t)v11, v67, &qword_1000C98D0);
  v49 = (uint64_t *)(v48 + *(int *)(v70 + 36));
  *v49 = KeyPath;
  v49[1] = (uint64_t)sub_100015794;
  v49[2] = v47;
  v50 = sub_10000AE2C((uint64_t)v11, &qword_1000C98D0);
  v51 = static Color.blue.getter(v50);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v74, 0, 0, _swiftEmptyArrayStorage, *(double *)(v3 + 96), 10.0, 0.0);
  v52 = v74;
  v53 = v76;
  v54 = v77;
  v55 = v78;
  v56 = swift_retain(v51);
  v57 = static Alignment.center.getter(v56);
  v59 = v58;
  v60 = v71;
  sub_10000AD78(v48, v71, &qword_1000C98C0);
  swift_release(v51, v61);
  v62 = v60 + *(int *)(sub_100004EAC(&qword_1000C98A8) + 36);
  *(double *)v62 = v52 * 0.5;
  *(double *)(v62 + 8) = v52;
  *(_QWORD *)(v62 + 16) = v75;
  *(_QWORD *)(v62 + 24) = v53;
  *(_QWORD *)(v62 + 32) = v54;
  *(_QWORD *)(v62 + 40) = v55;
  *(_QWORD *)(v62 + 48) = v51;
  *(_WORD *)(v62 + 56) = 256;
  *(_QWORD *)(v62 + 64) = v57;
  *(_QWORD *)(v62 + 72) = v59;
  return sub_10000AE2C(v48, &qword_1000C98C0);
}

uint64_t sub_100036FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72[16];
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v3 = v2;
  v71 = a2;
  v64 = sub_100004EAC(&qword_1000C99D8);
  v66 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004EAC(&qword_1000C99E0);
  v68 = *(_QWORD *)(v7 - 8);
  v69 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100004EAC(&qword_1000C99E8);
  __chkstk_darwin(v65);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100004EAC(&qword_1000C99F0);
  __chkstk_darwin(v70);
  v67 = (uint64_t)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(&unk_1000BF9B0, 120, 7);
  v14 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v13 + 80) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v13 + 96) = v14;
  *(_QWORD *)(v13 + 112) = *(_QWORD *)(v3 + 96);
  v15 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)v3;
  *(_OWORD *)(v13 + 32) = v15;
  v16 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v13 + 64) = v16;
  v73 = a1;
  sub_10003AA34(v3);
  v17 = sub_100004EAC(&qword_1000C99F8);
  v18 = sub_10000ABD0(&qword_1000CBB00);
  v19 = type metadata accessor for TitleAndIconLabelStyle(255);
  v20 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v21 = sub_100005900(&qword_1000C9A00, (uint64_t (*)(uint64_t))&type metadata accessor for TitleAndIconLabelStyle, (uint64_t)&protocol conformance descriptor for TitleAndIconLabelStyle);
  v74 = *(double *)&v18;
  v75 = v19;
  v76 = v20;
  v77 = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v74, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
  Button.init(action:label:)(sub_10003B870, v13, sub_10003B474, v72, v17, OpaqueTypeConformance2);
  v23 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x80000001000AC320);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v30 = sub_10000B254(&qword_1000C9A08, &qword_1000C99D8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v31 = v23;
  v32 = v64;
  View.help(_:)(v31, v25, v27 & 1, v29, v64, v30);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v25);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v6, v32);
  v34 = static Edge.Set.bottom.getter(v33);
  v35 = 0.0;
  if ((unint64_t)*(unsigned __int8 *)(v3 + 82) - 1 < 2)
    v35 = 20.0;
  v36 = EdgeInsets.init(_all:)(v35);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v44 = v68;
  v43 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v11, v9, v69);
  v45 = &v11[*(int *)(v65 + 36)];
  *v45 = v34;
  *((double *)v45 + 1) = v36;
  *((_QWORD *)v45 + 2) = v38;
  *((_QWORD *)v45 + 3) = v40;
  *((_QWORD *)v45 + 4) = v42;
  v45[40] = 0;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v43);
  LOBYTE(v44) = *(_BYTE *)(v3 + 81);
  KeyPath = swift_getKeyPath(&unk_100093898);
  v47 = swift_allocObject(&unk_1000BF9D8, 17, 7);
  *(_BYTE *)(v47 + 16) = v44;
  v48 = v67;
  sub_10000AD78((uint64_t)v11, v67, &qword_1000C99E8);
  v49 = (uint64_t *)(v48 + *(int *)(v70 + 36));
  *v49 = KeyPath;
  v49[1] = (uint64_t)sub_100015794;
  v49[2] = v47;
  v50 = sub_10000AE2C((uint64_t)v11, &qword_1000C99E8);
  v51 = static Color.blue.getter(v50);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v74, 0, 0, _swiftEmptyArrayStorage, *(double *)(v3 + 96), 10.0, 0.0);
  v52 = v74;
  v53 = v76;
  v54 = v77;
  v55 = v78;
  v56 = swift_retain(v51);
  v57 = static Alignment.center.getter(v56);
  v59 = v58;
  v60 = v71;
  sub_10000AD78(v48, v71, &qword_1000C99F0);
  swift_release(v51, v61);
  v62 = v60 + *(int *)(sub_100004EAC(&qword_1000C99C0) + 36);
  *(double *)v62 = v52 * 0.5;
  *(double *)(v62 + 8) = v52;
  *(_QWORD *)(v62 + 16) = v75;
  *(_QWORD *)(v62 + 24) = v53;
  *(_QWORD *)(v62 + 32) = v54;
  *(_QWORD *)(v62 + 40) = v55;
  *(_QWORD *)(v62 + 48) = v51;
  *(_WORD *)(v62 + 56) = 256;
  *(_QWORD *)(v62 + 64) = v57;
  *(_QWORD *)(v62 + 72) = v59;
  return sub_10000AE2C(v48, &qword_1000C99F0);
}

uint64_t sub_100037478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[2] = a4;
  v5 = type metadata accessor for FBKSEvaluation.Action(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v4[7] = v8;
  v4[8] = v9;
  return swift_task_switch(sub_10003750C, v8, v9);
}

uint64_t sub_10003750C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (qword_1000C73E0 != -1)
    swift_once(&qword_1000C73E0, sub_10000646C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000063D4(v1, (uint64_t)qword_1000D1C30);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Report Concern button pressed - launching remote eval", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v0[4];
  v6 = v0[5];
  v8 = v0[3];

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for FBKSEvaluation.Action.reportConcern(_:), v8);
  v9 = (_QWORD *)swift_task_alloc(dword_1000C998C);
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_100037634;
  return sub_100035C6C(v0[5]);
}

uint64_t sub_100037634()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 32);
  v2 = *(_QWORD *)(*v0 + 40);
  v4 = *(_QWORD *)(*v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_1000376A0, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_1000376A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 40);
  swift_release(*(_QWORD *)(v2 + 48), a2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000376D8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a3;
  v23 = a4;
  v20 = a2;
  v24 = a5;
  v25 = a1;
  v5 = type metadata accessor for FBKSEvaluation.Action(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004EAC(&qword_1000CBB00);
  v21 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = LocalizedStringKey.init(stringLiteral:)(0x432074726F706552, 0xEE006E7265636E6FLL);
  v19[1] = v13;
  type metadata accessor for FBKEvaluationController(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for FBKSEvaluation.Action.reportConcern(_:), v5);
  static FBKEvaluationController.systemImageName(for:hasResponse:)(v8, 0);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  Label<>.init(_:systemImage:)(v12);
  v14 = v20;
  v15 = v20(0);
  v16 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v17 = sub_100005900(v22, v14, v23);
  View.labelStyle<A>(_:)(v25, v9, v15, v16, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v11, v9);
}

uint64_t sub_1000378A8@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v46[5];

  v3 = v2;
  v6 = sub_100004EAC(&qword_1000C9928);
  __chkstk_darwin(v6);
  v8 = (char *)&v46[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004EAC(&qword_1000C9918);
  __chkstk_darwin(v9);
  v11 = (char *)&v46[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004EAC(&qword_1000C9908);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v46[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v13);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v16 = sub_100004EAC(&qword_1000C9930);
  v17 = sub_100037B6C(a1, v3, &v8[*(int *)(v16 + 44)]);
  v18 = static Edge.Set.bottom.getter(v17);
  v19 = 0.0;
  if (*(_BYTE *)(v3 + 82) == 1)
    v19 = 20.0;
  v20 = EdgeInsets.init(_all:)(v19);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  sub_10000AD78((uint64_t)v8, (uint64_t)v11, &qword_1000C9928);
  v27 = &v11[*(int *)(v9 + 36)];
  *v27 = v18;
  *((double *)v27 + 1) = v20;
  *((_QWORD *)v27 + 2) = v22;
  *((_QWORD *)v27 + 3) = v24;
  *((_QWORD *)v27 + 4) = v26;
  v27[40] = 0;
  sub_10000AE2C((uint64_t)v8, &qword_1000C9928);
  v28 = *(_BYTE *)(v3 + 81);
  KeyPath = swift_getKeyPath(&unk_100093898);
  v30 = swift_allocObject(&unk_1000BF870, 17, 7);
  *(_BYTE *)(v30 + 16) = v28;
  sub_10000AD78((uint64_t)v11, (uint64_t)v15, &qword_1000C9918);
  v31 = (uint64_t *)&v15[*(int *)(v12 + 36)];
  *v31 = KeyPath;
  v31[1] = (uint64_t)sub_10000AC78;
  v31[2] = v30;
  v32 = sub_10000AE2C((uint64_t)v11, &qword_1000C9918);
  v33 = static Color.blue.getter(v32);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v46, 0, 0, _swiftEmptyArrayStorage, *(double *)(v3 + 96), 10.0, 0.0);
  v34 = *(double *)v46;
  v35 = v46[2];
  v36 = v46[3];
  v37 = v46[4];
  v38 = swift_retain(v33);
  v39 = static Alignment.center.getter(v38);
  v41 = v40;
  sub_10000AD78((uint64_t)v15, a2, &qword_1000C9908);
  swift_release(v33, v42);
  v43 = a2 + *(int *)(sub_100004EAC(&qword_1000C9898) + 36);
  *(double *)v43 = v34 * 0.5;
  *(double *)(v43 + 8) = v34;
  *(_QWORD *)(v43 + 16) = v46[1];
  *(_QWORD *)(v43 + 24) = v35;
  *(_QWORD *)(v43 + 32) = v36;
  *(_QWORD *)(v43 + 40) = v37;
  *(_QWORD *)(v43 + 48) = v33;
  *(_WORD *)(v43 + 56) = 256;
  *(_QWORD *)(v43 + 64) = v39;
  *(_QWORD *)(v43 + 72) = v41;
  return sub_10000AE2C((uint64_t)v15, &qword_1000C9908);
}

uint64_t sub_100037B6C@<X0>(int a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  int *v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  char *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  char *v147;
  int v149;
  int v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(char *, uint64_t);
  void (*v169)(char *, char *, uint64_t);
  uint64_t (*v170)(char *, uint64_t);
  uint64_t v171;
  unint64_t v172;
  uint64_t OpaqueTypeConformance2;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  _BYTE v186[7];
  unsigned __int8 v187;
  _BYTE v188[7];
  unsigned __int8 v189;
  _BYTE v190[7];
  char v191;
  int v192;
  __int16 v193;
  _BYTE v194[7];
  char v195;
  _BYTE v196[7];
  unsigned __int8 v197;
  _BYTE v198[7];
  char v199;
  _BYTE v200[7];
  char v201;
  _DWORD v202[2];
  _DWORD v203[2];
  _DWORD v204[2];
  int v205;
  __int16 v206;
  _DWORD v207[2];
  _DWORD v208[2];
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  char v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  char v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  char v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  char v272;
  _QWORD v273[5];
  uint64_t v274;
  unsigned __int8 v275;
  uint64_t v276;
  unsigned __int8 v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD v280[5];
  uint64_t v281;
  unsigned __int8 v282;
  uint64_t v283;
  unsigned __int8 v284;
  __int128 v285;
  _QWORD v286[7];

  v185 = a1;
  v179 = a3;
  v180 = sub_100004EAC(&qword_1000C98D8);
  v175 = *(char **)(v180 - 8);
  __chkstk_darwin(v180);
  v5 = (char *)&v149 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_100004EAC(&qword_1000C9938);
  v178 = *(char **)(v183 - 8);
  __chkstk_darwin(v183);
  v182 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_100004EAC(&qword_1000C9940);
  v7 = __chkstk_darwin(v181);
  v177 = (uint64_t)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v176 = (uint64_t)&v149 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v149 - v12;
  __chkstk_darwin(v11);
  v184 = (uint64_t)&v149 - v14;
  v15 = swift_allocObject(&unk_1000BF898, 120, 7);
  v16 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v15 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v15 + 96) = v16;
  *(_QWORD *)(v15 + 112) = *(_QWORD *)(a2 + 96);
  v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v15 + 32) = v17;
  v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v15 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v15 + 64) = v18;
  sub_10003AA34(a2);
  v19 = sub_100004EAC(&qword_1000C7890);
  v20 = sub_10000ABD0(&qword_1000CBB00);
  v21 = type metadata accessor for IconOnlyLabelStyle(255);
  v22 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v23 = sub_100005900(&qword_1000CBD10, (uint64_t (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for IconOnlyLabelStyle);
  *(_QWORD *)&v257 = v20;
  *((_QWORD *)&v257 + 1) = v21;
  *(_QWORD *)&v258 = v22;
  *((_QWORD *)&v258 + 1) = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v257, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
  v174 = v19;
  Button.init(action:label:)(sub_10003AFCC, v15, sub_100038BDC, 0, v19, OpaqueTypeConformance2);
  v172 = (unint64_t)"SmartRepliesFeedbackUIPresented";
  v24 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x80000001000AC300);
  v26 = v25;
  LOBYTE(v22) = v27;
  v29 = v28;
  v30 = sub_10000B254(&qword_1000C98E0, &qword_1000C98D8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v31 = v22 & 1;
  v32 = v182;
  v33 = v24;
  v34 = v180;
  v171 = v30;
  View.help(_:)(v33, v26, v31, v29, v180, v30);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v26);
  v35 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v175 + 1);
  v175 = v5;
  v170 = v35;
  v36 = v35(v5, v34);
  v37 = static Color.red.getter(v36);
  v38 = *(double *)(a2 + 96);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v273, 0, 0, _swiftEmptyArrayStorage, v38, 10.0, 0.0);
  v39 = *(double *)v273;
  v40 = v273[2];
  v41 = v273[3];
  v42 = v273[4];
  v43 = swift_retain(v37);
  v44 = static Alignment.center.getter(v43);
  v46 = v45;
  v47 = v178;
  v48 = v183;
  v169 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v178 + 2);
  v169(v13, v32, v183);
  swift_release(v37, v49);
  v50 = &v13[*(int *)(v181 + 36)];
  *(double *)v50 = v39 * 0.5;
  *((double *)v50 + 1) = v39;
  *((_QWORD *)v50 + 2) = v273[1];
  *((_QWORD *)v50 + 3) = v40;
  *((_QWORD *)v50 + 4) = v41;
  *((_QWORD *)v50 + 5) = v42;
  *((_QWORD *)v50 + 6) = v37;
  *((_WORD *)v50 + 28) = 256;
  *((_QWORD *)v50 + 8) = v44;
  *((_QWORD *)v50 + 9) = v46;
  v168 = (void (*)(char *, uint64_t))*((_QWORD *)v47 + 1);
  v168(v32, v48);
  v178 = v13;
  v51 = sub_10000AC80((uint64_t)v13, v184, &qword_1000C9940);
  if ((v185 & 1) != 0)
  {
    v52 = static Alignment.center.getter(v51);
    _FrameLayout.init(width:height:alignment:)(&v274, 0x402E000000000000, 0, 0, 1, v52, v53);
    v156 = v275;
    v164 = v274;
    v165 = v276;
    v54 = v277;
    v150 = v277;
    v166 = v279;
    v167 = v278;
    v55 = LocalizedStringKey.init(stringLiteral:)(0x6546206572616853, 0xEE006B6361626465);
    v56 = Text.init(_:tableName:bundle:comment:)(v55);
    v58 = v57;
    v60 = v59;
    v62 = v61 & 1;
    v63 = static Color.gray.getter();
    v64 = Text.foregroundColor(_:)(v63, v56, v58, v62, v60);
    v151 = v65;
    v67 = v66;
    v155 = v68;
    swift_release(v63, v65);
    v69 = v67 & 1;
    sub_10000ADF4(v56, v58, v62);
    v70 = swift_bridgeObjectRelease(v60);
    v71 = static Color.red.getter(v70);
    v72 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v280, 0, 0, _swiftEmptyArrayStorage, v38, 10.0, 0.0);
    v73 = *(double *)v280;
    v74 = v280[2];
    v75 = v280[3];
    v76 = v280[4];
    v77 = static Alignment.center.getter(v72);
    v162 = v78;
    v163 = v77;
    v79 = static Alignment.center.getter(v77);
    _FrameLayout.init(width:height:alignment:)(&v281, 0x402E000000000000, 0, 0, 1, v79, v80);
    v158 = v281;
    v159 = v283;
    v160 = *((_QWORD *)&v285 + 1);
    v161 = v285;
    v201 = 1;
    LOBYTE(v60) = v156;
    v199 = v156;
    v197 = v54;
    v195 = v69;
    v191 = 1;
    v189 = v282;
    v187 = v284;
    LODWORD(v209) = *(_DWORD *)v200;
    *(_DWORD *)((char *)&v209 + 3) = *(_DWORD *)&v200[3];
    *(_DWORD *)((char *)v286 + 3) = *(_DWORD *)&v198[3];
    LODWORD(v286[0]) = *(_DWORD *)v198;
    *(_DWORD *)((char *)v208 + 3) = *(_DWORD *)&v196[3];
    v208[0] = *(_DWORD *)v196;
    v149 = v69;
    *(_DWORD *)((char *)v207 + 3) = *(_DWORD *)&v194[3];
    v207[0] = *(_DWORD *)v194;
    v206 = v193;
    v205 = v192;
    *(_DWORD *)((char *)v204 + 3) = *(_DWORD *)&v190[3];
    v204[0] = *(_DWORD *)v190;
    v152 = 1;
    v153 = v282;
    *(_DWORD *)((char *)v203 + 3) = *(_DWORD *)&v188[3];
    v203[0] = *(_DWORD *)v188;
    v154 = v284;
    *(_DWORD *)((char *)v202 + 3) = *(_DWORD *)&v186[3];
    v202[0] = *(_DWORD *)v186;
    v81 = v151;
    sub_10000ADBC(v64, v151, v69);
    v82 = v155;
    swift_bridgeObjectRetain(v155);
    swift_bridgeObjectRetain(v75);
    swift_retain(v71);
    v157 = v69;
    sub_10000ADBC(v64, v81, v69);
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRetain(v75);
    swift_retain(v71);
    sub_10000ADF4(v64, v81, v69);
    swift_release(v71, v83);
    swift_bridgeObjectRelease(v75);
    v84 = v280[1];
    swift_bridgeObjectRelease(v82);
    *(_QWORD *)&v241 = 0;
    BYTE8(v241) = 1;
    *(_DWORD *)((char *)&v241 + 9) = v209;
    HIDWORD(v241) = *(_DWORD *)((char *)&v209 + 3);
    *(_QWORD *)&v242 = v164;
    BYTE8(v242) = v60;
    *(_DWORD *)((char *)&v242 + 9) = v286[0];
    HIDWORD(v242) = *(_DWORD *)((char *)v286 + 3);
    *(_QWORD *)&v243 = v165;
    BYTE8(v243) = v150;
    HIDWORD(v243) = *(_DWORD *)((char *)v208 + 3);
    *(_DWORD *)((char *)&v243 + 9) = v208[0];
    *(_QWORD *)&v244 = v167;
    *((_QWORD *)&v244 + 1) = v166;
    *(_QWORD *)&v245 = v64;
    *((_QWORD *)&v245 + 1) = v81;
    LOBYTE(v246) = v149;
    DWORD1(v246) = *(_DWORD *)((char *)v207 + 3);
    *(_DWORD *)((char *)&v246 + 1) = v207[0];
    *((_QWORD *)&v246 + 1) = v82;
    *(double *)&v247 = v73 * 0.5;
    *((double *)&v247 + 1) = v73;
    *(_QWORD *)&v248 = v84;
    *((_QWORD *)&v248 + 1) = v74;
    *(_QWORD *)&v249 = v75;
    *((_QWORD *)&v249 + 1) = v76;
    *(_QWORD *)&v250 = v71;
    WORD4(v250) = 256;
    HIWORD(v250) = v206;
    *(_DWORD *)((char *)&v250 + 10) = v205;
    *(_QWORD *)&v251 = v163;
    *((_QWORD *)&v251 + 1) = v162;
    *(_QWORD *)&v252 = 0;
    BYTE8(v252) = v152;
    *(_DWORD *)((char *)&v252 + 9) = v204[0];
    HIDWORD(v252) = *(_DWORD *)((char *)v204 + 3);
    *(_QWORD *)&v253 = v158;
    BYTE8(v253) = v153;
    HIDWORD(v253) = *(_DWORD *)((char *)v203 + 3);
    *(_DWORD *)((char *)&v253 + 9) = v203[0];
    *(_QWORD *)&v254 = v159;
    BYTE8(v254) = v154;
    *(_DWORD *)((char *)&v254 + 9) = v202[0];
    HIDWORD(v254) = *(_DWORD *)((char *)v202 + 3);
    *(_QWORD *)&v255 = v161;
    *((_QWORD *)&v255 + 1) = v160;
    sub_10003B1E4((uint64_t)&v241);
    sub_10000AC80((uint64_t)&v241, (uint64_t)&v257, &qword_1000C9948);
    v85 = sub_100004EAC(&qword_1000C9950);
    v86 = sub_100004EAC(&qword_1000C9958);
    v87 = sub_10000B254(&qword_1000C9960, &qword_1000C9950, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v88 = sub_10003B008();
    _ConditionalContent<>.init(storage:)(&v257, v85, v86, v87, v88);
    sub_10000ADF4(v64, v81, v157);
    swift_release(v71, v89);
    swift_bridgeObjectRelease(v75);
    swift_bridgeObjectRelease(v82);
    v269 = v237;
    v270 = v238;
    v271 = v239;
    v272 = v240;
    v265 = v233;
    v266 = v234;
    v267 = v235;
    v268 = v236;
    v261 = v229;
    v262 = v230;
    v263 = v231;
    v264 = v232;
    v257 = v225;
    v258 = v226;
    v259 = v227;
    v260 = v228;
  }
  else
  {
    v90 = static Alignment.center.getter(v51);
    _FrameLayout.init(width:height:alignment:)(&v281, 0x4014000000000000, 0, 0, 1, v90, v91);
    *(_QWORD *)&v241 = 0;
    BYTE8(v241) = 1;
    *(_QWORD *)&v242 = v281;
    BYTE8(v242) = v282;
    *(_QWORD *)&v243 = v283;
    BYTE8(v243) = v284;
    v244 = v285;
    sub_10003AFFC((uint64_t)&v241);
    sub_10000AC80((uint64_t)&v241, (uint64_t)&v225, &qword_1000C9948);
    v92 = sub_100004EAC(&qword_1000C9950);
    v93 = sub_100004EAC(&qword_1000C9958);
    v94 = sub_10000B254(&qword_1000C9960, &qword_1000C9950, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v95 = sub_10003B008();
    _ConditionalContent<>.init(storage:)(&v225, v92, v93, v94, v95);
  }
  v96 = v185 & 1;
  v97 = swift_allocObject(&unk_1000BF8C0, 120, 7);
  v98 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v97 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v97 + 96) = v98;
  *(_QWORD *)(v97 + 112) = *(_QWORD *)(a2 + 96);
  v99 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v97 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v97 + 32) = v99;
  v100 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v97 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v97 + 64) = v100;
  sub_10003AA34(a2);
  v101 = v175;
  Button.init(action:label:)(sub_10003B070, v97, sub_100038EFC, 0, v174, OpaqueTypeConformance2);
  v102 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, v172 | 0x8000000000000000);
  v104 = v103;
  v106 = v105;
  v108 = v182;
  v109 = v180;
  View.help(_:)(v102, v103, v107 & 1, v105, v180, v171);
  swift_bridgeObjectRelease(v106);
  swift_bridgeObjectRelease(v104);
  v110 = v170(v101, v109);
  v111 = static Color.red.getter(v110);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v286, 0, 0, _swiftEmptyArrayStorage, v38, 10.0, 0.0);
  v112 = *(double *)v286;
  v113 = v286[2];
  v114 = v286[3];
  v115 = v286[4];
  v116 = swift_retain(v111);
  v117 = static Alignment.center.getter(v116);
  v119 = v118;
  v120 = (uint64_t)v178;
  v121 = v183;
  v169(v178, v108, v183);
  swift_release(v111, v122);
  v123 = v120 + *(int *)(v181 + 36);
  *(double *)v123 = v112 * 0.5;
  *(double *)(v123 + 8) = v112;
  *(_QWORD *)(v123 + 16) = v286[1];
  *(_QWORD *)(v123 + 24) = v113;
  *(_QWORD *)(v123 + 32) = v114;
  *(_QWORD *)(v123 + 40) = v115;
  *(_QWORD *)(v123 + 48) = v111;
  *(_WORD *)(v123 + 56) = 256;
  *(_QWORD *)(v123 + 64) = v117;
  *(_QWORD *)(v123 + 72) = v119;
  v168(v108, v121);
  v124 = v176;
  sub_10000AC80(v120, v176, &qword_1000C9940);
  v125 = v184;
  sub_10000AD78(v184, v120, &qword_1000C9940);
  v221 = v269;
  v222 = v270;
  v223 = v271;
  v224 = v272;
  v217 = v265;
  v218 = v266;
  v219 = v267;
  v220 = v268;
  v213 = v261;
  v214 = v262;
  v215 = v263;
  v216 = v264;
  v209 = v257;
  v210 = v258;
  v211 = v259;
  v212 = v260;
  v126 = v177;
  sub_10000AD78(v124, v177, &qword_1000C9940);
  v127 = v179;
  *v179 = 0;
  *((_BYTE *)v127 + 8) = v96;
  LOBYTE(v114) = (v185 & 1) == 0;
  *((_BYTE *)v127 + 9) = v114;
  v128 = (int *)sub_100004EAC(&qword_1000C9970);
  sub_10000AD78(v120, (uint64_t)v127 + v128[12], &qword_1000C9940);
  v129 = v128[16];
  v130 = v222;
  v237 = v221;
  v238 = v222;
  v131 = v223;
  v239 = v223;
  v132 = v217;
  v133 = v218;
  v233 = v217;
  v234 = v218;
  v134 = v219;
  v135 = v220;
  v235 = v219;
  v236 = v220;
  v136 = v213;
  v137 = v214;
  v229 = v213;
  v230 = v214;
  v138 = v215;
  v139 = v216;
  v231 = v215;
  v232 = v216;
  v140 = v209;
  v141 = v210;
  v225 = v209;
  v226 = v210;
  v142 = (char *)v127 + v129;
  *((_OWORD *)v142 + 12) = v221;
  *((_OWORD *)v142 + 13) = v130;
  *((_OWORD *)v142 + 14) = v131;
  *((_OWORD *)v142 + 8) = v132;
  *((_OWORD *)v142 + 9) = v133;
  *((_OWORD *)v142 + 10) = v134;
  *((_OWORD *)v142 + 11) = v135;
  *((_OWORD *)v142 + 4) = v136;
  *((_OWORD *)v142 + 5) = v137;
  *((_OWORD *)v142 + 6) = v138;
  *((_OWORD *)v142 + 7) = v139;
  *(_OWORD *)v142 = v140;
  *((_OWORD *)v142 + 1) = v141;
  v143 = v211;
  v144 = v212;
  v145 = v212;
  *((_OWORD *)v142 + 2) = v211;
  *((_OWORD *)v142 + 3) = v145;
  v240 = v224;
  v142[240] = v224;
  v146 = (uint64_t)v127 + v128[20];
  v227 = v143;
  v228 = v144;
  sub_10000AD78(v126, v146, &qword_1000C9940);
  v147 = (char *)v127 + v128[24];
  *(_QWORD *)v147 = 0;
  v147[8] = v96;
  v147[9] = v114;
  sub_10003B104((uint64_t)&v225, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003B0A0);
  sub_10000AE2C(v124, &qword_1000C9940);
  sub_10000AE2C(v125, &qword_1000C9940);
  sub_10000AE2C(v126, &qword_1000C9940);
  v253 = v221;
  v254 = v222;
  v255 = v223;
  v256 = v224;
  v249 = v217;
  v250 = v218;
  v251 = v219;
  v252 = v220;
  v245 = v213;
  v246 = v214;
  v247 = v215;
  v248 = v216;
  v241 = v209;
  v242 = v210;
  v243 = v211;
  v244 = v212;
  sub_10003B104((uint64_t)&v241, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10003B180);
  return sub_10000AE2C(v120, &qword_1000C9940);
}

uint64_t sub_1000389B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[2] = a4;
  v5 = type metadata accessor for FBKSEvaluation.Action(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v4[7] = v8;
  v4[8] = v9;
  return swift_task_switch(sub_100038A48, v8, v9);
}

uint64_t sub_100038A48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (qword_1000C73E0 != -1)
    swift_once(&qword_1000C73E0, sub_10000646C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000063D4(v1, (uint64_t)qword_1000D1C30);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Thumbs Up button pressed - launching remote eval", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v0[4];
  v6 = v0[5];
  v8 = v0[3];

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for FBKSEvaluation.Action.thumbsUp(_:), v8);
  v9 = (_QWORD *)swift_task_alloc(dword_1000C998C);
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_100038B70;
  return sub_100035C6C(v0[5]);
}

uint64_t sub_100038B70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 32);
  v2 = *(_QWORD *)(*v0 + 40);
  v4 = *(_QWORD *)(*v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_10003B868, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_100038BDC@<X0>(uint64_t a1@<X8>)
{
  return sub_100038F24(0x552073626D756854, 0xE900000000000070, (unsigned int *)&enum case for FBKSEvaluation.Action.thumbsUp(_:), a1);
}

uint64_t sub_100038C00(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = sub_100004EAC((uint64_t *)&unk_1000C87F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 88);
  if (v11)
  {
    v12 = *a2;
    swift_retain(*(_QWORD *)(a1 + 88));
    sub_1000554F8(v12);
    return swift_release(v11, v13);
  }
  else
  {
    v15 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
    type metadata accessor for MainActor(0);
    v16 = sub_10003AA34(a1);
    v17 = static MainActor.shared.getter(v16);
    v18 = swift_allocObject(a3, 136, 7);
    *(_QWORD *)(v18 + 16) = v17;
    *(_QWORD *)(v18 + 24) = &protocol witness table for MainActor;
    v19 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v18 + 96) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v18 + 112) = v19;
    *(_QWORD *)(v18 + 128) = *(_QWORD *)(a1 + 96);
    v20 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v18 + 32) = *(_OWORD *)a1;
    *(_OWORD *)(v18 + 48) = v20;
    v21 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v18 + 64) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v18 + 80) = v21;
    v22 = sub_1000596DC((uint64_t)v10, a4, v18);
    return swift_release(v22, v23);
  }
}

uint64_t sub_100038D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[2] = a4;
  v5 = type metadata accessor for FBKSEvaluation.Action(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v4[7] = v8;
  v4[8] = v9;
  return swift_task_switch(sub_100038DD4, v8, v9);
}

uint64_t sub_100038DD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (qword_1000C73E0 != -1)
    swift_once(&qword_1000C73E0, sub_10000646C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000063D4(v1, (uint64_t)qword_1000D1C30);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Thumbs Down button pressed - launching remote eval", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v0[4];
  v6 = v0[5];
  v8 = v0[3];

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, enum case for FBKSEvaluation.Action.thumbsDown(_:), v8);
  v9 = (_QWORD *)swift_task_alloc(dword_1000C998C);
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_100038B70;
  return sub_100035C6C(v0[5]);
}

uint64_t sub_100038EFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100038F24(0x442073626D756854, 0xEB000000006E776FLL, (unsigned int *)&enum case for FBKSEvaluation.Action.thumbsDown(_:), a1);
}

uint64_t sub_100038F24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a4;
  v7 = type metadata accessor for IconOnlyLabelStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  v31 = v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FBKSEvaluation.Action(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004EAC(&qword_1000CBB00);
  v16 = *(_QWORD *)(v15 - 8);
  v28 = v15;
  v29 = v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = LocalizedStringKey.init(stringLiteral:)(a1, a2);
  v27 = v20;
  type metadata accessor for FBKEvaluationController(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *a3, v11);
  static FBKEvaluationController.systemImageName(for:hasResponse:)(v14, 0);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v21 = Label<>.init(_:systemImage:)(v19);
  IconOnlyLabelStyle.init()(v21);
  v22 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v23 = sub_100005900(&qword_1000CBD10, (uint64_t (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for IconOnlyLabelStyle);
  v24 = v28;
  v25 = v30;
  View.labelStyle<A>(_:)(v10, v28, v30, v22, v23);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v18, v24);
}

void sub_100039134()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = (_QWORD *)v0;
  v2 = type metadata accessor for FBKSEvaluation.Subject(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (void **)((char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000C73E0 != -1)
    swift_once(&qword_1000C73E0, sub_10000646C);
  v6 = type metadata accessor for Logger(0);
  sub_1000063D4(v6, (uint64_t)qword_1000D1C30);
  sub_10003AA34(v0);
  sub_10003AA34(v0);
  sub_10003AA34(v0);
  v7 = sub_10003AA34(v0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  if (!os_log_type_enabled(v8, v9))
  {
    sub_10003ACA8((uint64_t)v1);
    sub_10003ACA8((uint64_t)v1);
    sub_10003ACA8((uint64_t)v1);
    sub_10003ACA8((uint64_t)v1);

    v15 = v1[11];
    if (!v15)
      goto LABEL_13;
LABEL_7:
    swift_retain(v15);
    v16 = String._bridgeToObjectiveC()();
    sub_1000554F8(v16);
    swift_release(v15, v17);

    return;
  }
  v26 = v3;
  v27 = v2;
  v10 = swift_slowAlloc(22, -1);
  v11 = swift_slowAlloc(64, -1);
  v29 = v11;
  *(_DWORD *)v10 = 136643075;
  v12 = v1[2];
  if (v12)
  {
    v13 = v1[1];
    v14 = v1[2];
  }
  else
  {
    v13 = 0;
    v14 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain(v12);
  v28 = sub_10006DCA8(v13, v14, &v29);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v10 + 4, v10 + 12);
  swift_bridgeObjectRelease(v14);
  sub_10003ACA8((uint64_t)v1);
  sub_10003ACA8((uint64_t)v1);
  *(_WORD *)(v10 + 12) = 2085;
  v18 = v1[4];
  if (v18)
  {
    v19 = v1[3];
    v20 = v1[4];
  }
  else
  {
    v19 = 0;
    v20 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain(v18);
  v28 = sub_10006DCA8(v19, v20, &v29);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v10 + 14, v10 + 22);
  swift_bridgeObjectRelease(v20);
  sub_10003ACA8((uint64_t)v1);
  sub_10003ACA8((uint64_t)v1);
  _os_log_impl((void *)&_mh_execute_header, v8, v9, "Feedback View with input string: <%{sensitive}s>, output string: <%{sensitive}s>", (uint8_t *)v10, 0x16u);
  swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v11, -1, -1);
  swift_slowDealloc(v10, -1, -1);

  v3 = v26;
  v2 = v27;
  v15 = v1[11];
  if (v15)
    goto LABEL_7;
LABEL_13:
  sub_100035FF8(v5);
  v21 = (*(uint64_t (**)(void **, uint64_t))(v3 + 88))(v5, v2);
  if ((_DWORD)v21 != enum case for FBKSEvaluation.Subject.id(_:))
  {
    if ((_DWORD)v21 == enum case for FBKSEvaluation.Subject.interaction(_:))
    {
      (*(void (**)(void **, uint64_t))(v3 + 96))(v5, v2);
      v22 = *v5;
      dispatch thunk of FBKSInteraction.presented(_:)(sub_100039504, 0);

      return;
    }
    v23 = Logger.logObject.getter(v21);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to mark the interaction - unknown interaction case", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

  }
  (*(void (**)(void **, uint64_t))(v3 + 8))(v5, v2);
}

void sub_100039504(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *oslog;
  uint64_t v10;
  uint64_t v11;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1000C73E0 != -1)
      swift_once(&qword_1000C73E0, sub_10000646C);
    v2 = type metadata accessor for Logger(0);
    sub_1000063D4(v2, (uint64_t)qword_1000D1C30);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v5 = 138412290;
      swift_errorRetain(a1);
      v7 = _swift_stdlib_bridgeErrorToNSError(a1);
      v10 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
      *v6 = v7;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Failed to mark the interaction as presented: %@", v5, 0xCu);
      v8 = sub_100004EAC(&qword_1000C87C8);
      swift_arrayDestroy(v6, 1, v8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
}

uint64_t sub_1000396DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  void (**v46)();
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void (**v62)();
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  void (**v78)();
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v2 = v1;
  v95 = a1;
  v3 = sub_100004EAC(&qword_1000C97C8);
  __chkstk_darwin(v3);
  v5 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100004EAC(&qword_1000C97D0);
  v6 = __chkstk_darwin(v94);
  v85 = (uint64_t)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v86 = (uint64_t)&v84 - v8;
  v9 = sub_100004EAC(&qword_1000C97D8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v84 - v13;
  v15 = sub_100004EAC(&qword_1000C97E0);
  __chkstk_darwin(v15);
  v17 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100004EAC(&qword_1000C97E8);
  v18 = __chkstk_darwin(v90);
  v20 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v87 = (uint64_t)&v84 - v21;
  v91 = sub_100004EAC(&qword_1000C97F0);
  __chkstk_darwin(v91);
  v93 = (uint64_t)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100004EAC(&qword_1000C97F8);
  __chkstk_darwin(v88);
  v24 = (char *)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100004EAC(&qword_1000C9800);
  __chkstk_darwin(v92);
  v89 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100004EAC(&qword_1000C9808);
  __chkstk_darwin(v26);
  v28 = (char *)&v84 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100004EAC(&qword_1000C9810);
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v84 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v84 - v34;
  if (*(_BYTE *)(v2 + 82))
  {
    if (*(_BYTE *)(v2 + 82) == 1)
    {
      v36 = v33;
      *(_QWORD *)v17 = static HorizontalAlignment.center.getter(v33);
      *((_QWORD *)v17 + 1) = 0;
      v17[16] = 1;
      v37 = sub_100004EAC(&qword_1000C9860);
      v38 = &v17[*(int *)(v37 + 44)];
      *(_QWORD *)v14 = static VerticalAlignment.center.getter(v37);
      *((_QWORD *)v14 + 1) = 0;
      v14[16] = 1;
      v39 = sub_100004EAC(&qword_1000C9868);
      sub_10003A288(v2, (uint64_t)&v14[*(int *)(v39 + 44)]);
      sub_10000AD78((uint64_t)v14, (uint64_t)v12, &qword_1000C97D8);
      *(_QWORD *)v38 = 0x4028000000000000;
      v38[8] = 0;
      v40 = sub_100004EAC(&qword_1000C9870);
      sub_10000AD78((uint64_t)v12, (uint64_t)&v38[*(int *)(v40 + 48)], &qword_1000C97D8);
      sub_10000AE2C((uint64_t)v14, &qword_1000C97D8);
      sub_10000AE2C((uint64_t)v12, &qword_1000C97D8);
      v41 = swift_allocObject(&unk_1000BF820, 120, 7);
      v42 = *(_OWORD *)(v2 + 80);
      *(_OWORD *)(v41 + 80) = *(_OWORD *)(v2 + 64);
      *(_OWORD *)(v41 + 96) = v42;
      *(_QWORD *)(v41 + 112) = *(_QWORD *)(v2 + 96);
      v43 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v41 + 16) = *(_OWORD *)v2;
      *(_OWORD *)(v41 + 32) = v43;
      v44 = *(_OWORD *)(v2 + 48);
      *(_OWORD *)(v41 + 48) = *(_OWORD *)(v2 + 32);
      *(_OWORD *)(v41 + 64) = v44;
      sub_10000AD78((uint64_t)v17, (uint64_t)v20, &qword_1000C97E0);
      v45 = v90;
      v46 = (void (**)())&v20[*(int *)(v90 + 36)];
      *v46 = sub_10003AC7C;
      v46[1] = (void (*)())v41;
      v46[2] = 0;
      v46[3] = 0;
      sub_10003AA34(v2);
      sub_10000AE2C((uint64_t)v17, &qword_1000C97E0);
      v47 = &qword_1000C97E8;
      v48 = v87;
      sub_10000AC80((uint64_t)v20, v87, &qword_1000C97E8);
      sub_10000AD78(v48, (uint64_t)v24, &qword_1000C97E8);
      swift_storeEnumTagMultiPayload(v24, v88, 1);
      v49 = sub_10003AAEC();
      v50 = sub_10003AB70();
      v51 = (uint64_t)v89;
      _ConditionalContent<>.init(storage:)(v24, v36, v45, v49, v50);
      v52 = v93;
      sub_10000AD78(v51, v93, &qword_1000C9800);
      swift_storeEnumTagMultiPayload(v52, v91, 0);
      v53 = sub_10003AAC8();
      v54 = sub_10003ABF4();
      _ConditionalContent<>.init(storage:)(v52, v92, v94, v53, v54);
      sub_10000AE2C(v51, &qword_1000C9800);
      v55 = v48;
    }
    else
    {
      *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v33);
      *((_QWORD *)v5 + 1) = 0;
      v5[16] = 1;
      v69 = sub_100004EAC(&qword_1000C9818);
      v70 = &v5[*(int *)(v69 + 44)];
      *(_QWORD *)v70 = static VerticalAlignment.center.getter(v69);
      *((_QWORD *)v70 + 1) = 0;
      v70[16] = 1;
      v71 = sub_100004EAC(&qword_1000C9820);
      sub_10003A624(v2, (uint64_t)&v70[*(int *)(v71 + 44)]);
      v72 = swift_allocObject(&unk_1000BF7F8, 120, 7);
      v73 = *(_OWORD *)(v2 + 80);
      *(_OWORD *)(v72 + 80) = *(_OWORD *)(v2 + 64);
      *(_OWORD *)(v72 + 96) = v73;
      *(_QWORD *)(v72 + 112) = *(_QWORD *)(v2 + 96);
      v74 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v72 + 16) = *(_OWORD *)v2;
      *(_OWORD *)(v72 + 32) = v74;
      v75 = *(_OWORD *)(v2 + 48);
      *(_OWORD *)(v72 + 48) = *(_OWORD *)(v2 + 32);
      *(_OWORD *)(v72 + 64) = v75;
      v76 = v85;
      sub_10000AD78((uint64_t)v5, v85, &qword_1000C97C8);
      v77 = v94;
      v78 = (void (**)())(v76 + *(int *)(v94 + 36));
      *v78 = sub_10003B86C;
      v78[1] = (void (*)())v72;
      v78[2] = 0;
      v78[3] = 0;
      sub_10003AA34(v2);
      sub_10000AE2C((uint64_t)v5, &qword_1000C97C8);
      v47 = &qword_1000C97D0;
      v79 = v86;
      sub_10000AC80(v76, v86, &qword_1000C97D0);
      v80 = v93;
      sub_10000AD78(v79, v93, &qword_1000C97D0);
      swift_storeEnumTagMultiPayload(v80, v91, 1);
      v81 = sub_10003AAC8();
      v82 = sub_10003ABF4();
      _ConditionalContent<>.init(storage:)(v80, v92, v77, v81, v82);
      v55 = v79;
    }
  }
  else
  {
    v56 = v33;
    *(_QWORD *)v28 = static HorizontalAlignment.center.getter(v33);
    *((_QWORD *)v28 + 1) = 0;
    v28[16] = 1;
    v57 = sub_100004EAC(&qword_1000C9878);
    sub_100039EA8((uint64_t)&v28[*(int *)(v57 + 44)]);
    v58 = swift_allocObject(&unk_1000BF848, 120, 7);
    v59 = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(v58 + 80) = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(v58 + 96) = v59;
    *(_QWORD *)(v58 + 112) = *(_QWORD *)(v2 + 96);
    v60 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v58 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v58 + 32) = v60;
    v61 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v58 + 48) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v58 + 64) = v61;
    sub_10000AD78((uint64_t)v28, (uint64_t)v32, &qword_1000C9808);
    v62 = (void (**)())&v32[*(int *)(v56 + 36)];
    *v62 = sub_10003ACA0;
    v62[1] = (void (*)())v58;
    v62[2] = 0;
    v62[3] = 0;
    sub_10003AA34(v2);
    sub_10000AE2C((uint64_t)v28, &qword_1000C9808);
    v47 = &qword_1000C9810;
    sub_10000AC80((uint64_t)v32, (uint64_t)v35, &qword_1000C9810);
    sub_10000AD78((uint64_t)v35, (uint64_t)v24, &qword_1000C9810);
    swift_storeEnumTagMultiPayload(v24, v88, 0);
    v63 = sub_10003AAEC();
    v64 = sub_10003AB70();
    v65 = (uint64_t)v89;
    _ConditionalContent<>.init(storage:)(v24, v56, v90, v63, v64);
    v66 = v93;
    sub_10000AD78(v65, v93, &qword_1000C9800);
    swift_storeEnumTagMultiPayload(v66, v91, 0);
    v67 = sub_10003AAC8();
    v68 = sub_10003ABF4();
    _ConditionalContent<>.init(storage:)(v66, v92, v94, v67, v68);
    sub_10000AE2C(v65, &qword_1000C9800);
    v55 = (uint64_t)v35;
  }
  return sub_10000AE2C(v55, v47);
}

uint64_t sub_100039EA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25[2];
  uint64_t v26;
  _QWORD v27[5];

  v25[1] = a1;
  v26 = sub_100004EAC(&qword_1000C9898);
  __chkstk_darwin(v26);
  v25[0] = (uint64_t)v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100004EAC(&qword_1000C98A0);
  __chkstk_darwin(v2);
  v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for IconOnlyLabelStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004EAC(&qword_1000C98A8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)v25 - v14;
  if (qword_1000C7420 != -1)
    v13 = swift_once(&qword_1000C7420, sub_100035B58);
  if (byte_1000D1CA0 == 1
    && (v27[3] = &type metadata for WritingTools,
        v27[4] = sub_10003AF6C(),
        LOBYTE(v27[0]) = 9,
        v16 = isFeatureEnabled(_:)(v27),
        v13 = sub_10000AFA4(v27),
        (v16 & 1) == 0))
  {
    v21 = v25[0];
    sub_1000378A8(0, v25[0]);
    v17 = &qword_1000C9898;
    sub_10000AD78(v21, (uint64_t)v4, &qword_1000C9898);
    swift_storeEnumTagMultiPayload(v4, v2, 1);
    v22 = sub_10003ADE0(&qword_1000C98B0, &qword_1000C98A8, (void (*)(void))sub_10003AD3C);
    v23 = sub_10003ADE0(&qword_1000C98F8, &qword_1000C9898, (void (*)(void))sub_10003AE64);
    _ConditionalContent<>.init(storage:)(v4, v9, v26, v22, v23);
    v20 = v21;
  }
  else
  {
    IconOnlyLabelStyle.init()(v13);
    sub_100036B70((uint64_t)v8, (uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v17 = &qword_1000C98A8;
    sub_10000AC80((uint64_t)v12, (uint64_t)v15, &qword_1000C98A8);
    sub_10000AD78((uint64_t)v15, (uint64_t)v4, &qword_1000C98A8);
    swift_storeEnumTagMultiPayload(v4, v2, 0);
    v18 = sub_10003ADE0(&qword_1000C98B0, &qword_1000C98A8, (void (*)(void))sub_10003AD3C);
    v19 = sub_10003ADE0(&qword_1000C98F8, &qword_1000C9898, (void (*)(void))sub_10003AE64);
    _ConditionalContent<>.init(storage:)(v4, v9, v26, v18, v19);
    v20 = (uint64_t)v15;
  }
  return sub_10000AE2C(v20, v17);
}

void sub_10003A1B0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_1000C73E0 != -1)
    swift_once(&qword_1000C73E0, sub_10000646C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_1000063D4(v0, (uint64_t)qword_1000D1C30);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.info.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Report Concern button - horizontal", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  sub_100039134();
}

uint64_t sub_10003A288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];

  v29[1] = a1;
  v31 = a2;
  v32 = sub_100004EAC(&qword_1000C9898);
  __chkstk_darwin(v32);
  v3 = (char *)v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004EAC(&qword_1000C99B0);
  __chkstk_darwin(v4);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100004EAC(&qword_1000C99B8);
  __chkstk_darwin(v30);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TitleAndIconLabelStyle(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004EAC(&qword_1000C99C0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)v29 - v18;
  if (qword_1000C7420 != -1)
    v17 = swift_once(&qword_1000C7420, sub_100035B58);
  if (byte_1000D1CA0 == 1
    && (v33[3] = &type metadata for WritingTools,
        v33[4] = sub_10003AF6C(),
        LOBYTE(v33[0]) = 9,
        v20 = isFeatureEnabled(_:)(v33),
        v17 = sub_10000AFA4(v33),
        (v20 & 1) == 0))
  {
    sub_1000378A8(1, (uint64_t)v3);
    v21 = &qword_1000C9898;
    sub_10000AD78((uint64_t)v3, (uint64_t)v6, &qword_1000C9898);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v26 = sub_10000B254(&qword_1000C99D0, &qword_1000C99B8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v27 = sub_10003ADE0(&qword_1000C98F8, &qword_1000C9898, (void (*)(void))sub_10003AE64);
    _ConditionalContent<>.init(storage:)(v6, v30, v32, v26, v27);
    v25 = (uint64_t)v3;
  }
  else
  {
    TitleAndIconLabelStyle.init()(v17);
    sub_100036FF4((uint64_t)v12, (uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v21 = &qword_1000C99C0;
    sub_10000AC80((uint64_t)v16, (uint64_t)v19, &qword_1000C99C0);
    sub_10000AD78((uint64_t)v19, (uint64_t)v16, &qword_1000C99C0);
    *(_QWORD *)v8 = 0;
    v8[8] = 1;
    v22 = sub_100004EAC(&qword_1000C99C8);
    sub_10000AD78((uint64_t)v16, (uint64_t)&v8[*(int *)(v22 + 48)], &qword_1000C99C0);
    sub_10000AE2C((uint64_t)v16, &qword_1000C99C0);
    sub_10000AD78((uint64_t)v8, (uint64_t)v6, &qword_1000C99B8);
    swift_storeEnumTagMultiPayload(v6, v4, 0);
    v23 = sub_10000B254(&qword_1000C99D0, &qword_1000C99B8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v24 = sub_10003ADE0(&qword_1000C98F8, &qword_1000C9898, (void (*)(void))sub_10003AE64);
    _ConditionalContent<>.init(storage:)(v6, v30, v32, v23, v24);
    sub_10000AE2C((uint64_t)v8, &qword_1000C99B8);
    v25 = (uint64_t)v19;
  }
  return sub_10000AE2C(v25, v21);
}

uint64_t sub_10003A624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];

  v32[1] = a1;
  v35 = sub_100004EAC(&qword_1000C9898);
  __chkstk_darwin(v35);
  v32[0] = (uint64_t)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100004EAC(&qword_1000C9A10);
  __chkstk_darwin(v33);
  v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TitleAndIconLabelStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100004EAC(&qword_1000C99C0);
  v10 = __chkstk_darwin(v34);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v32 - v13;
  v15 = sub_100004EAC(&qword_1000C9A18);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)v32 - v20;
  if (qword_1000C7420 != -1)
    v19 = swift_once(&qword_1000C7420, sub_100035B58);
  if (byte_1000D1CA0 == 1
    && (v36[3] = &type metadata for WritingTools,
        v36[4] = sub_10003AF6C(),
        LOBYTE(v36[0]) = 9,
        v22 = isFeatureEnabled(_:)(v36),
        v19 = sub_10000AFA4(v36),
        (v22 & 1) == 0))
  {
    v27 = v32[0];
    sub_1000378A8(0, v32[0]);
    v23 = &qword_1000C9898;
    sub_10000AD78(v27, (uint64_t)v5, &qword_1000C9898);
    swift_storeEnumTagMultiPayload(v5, v33, 1);
    v28 = sub_10003ADE0(&qword_1000C9A20, &qword_1000C99C0, (void (*)(void))sub_10003B4B4);
    v29 = sub_10003ADE0(&qword_1000C98F8, &qword_1000C9898, (void (*)(void))sub_10003AE64);
    _ConditionalContent<>.init(storage:)(v5, v34, v35, v28, v29);
    v26 = v27;
  }
  else
  {
    TitleAndIconLabelStyle.init()(v19);
    sub_100036FF4((uint64_t)v9, (uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v23 = &qword_1000C99C0;
    sub_10000AC80((uint64_t)v12, (uint64_t)v14, &qword_1000C99C0);
    sub_10000AD78((uint64_t)v14, (uint64_t)v5, &qword_1000C99C0);
    swift_storeEnumTagMultiPayload(v5, v33, 0);
    v24 = sub_10003ADE0(&qword_1000C9A20, &qword_1000C99C0, (void (*)(void))sub_10003B4B4);
    v25 = sub_10003ADE0(&qword_1000C98F8, &qword_1000C9898, (void (*)(void))sub_10003AE64);
    _ConditionalContent<>.init(storage:)(v5, v34, v35, v24, v25);
    v26 = (uint64_t)v14;
  }
  sub_10000AE2C(v26, v23);
  sub_10000AD78((uint64_t)v21, (uint64_t)v18, &qword_1000C9A18);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  v30 = sub_100004EAC(&qword_1000C9A38);
  sub_10000AD78((uint64_t)v18, a2 + *(int *)(v30 + 64), &qword_1000C9A18);
  sub_10000AE2C((uint64_t)v21, &qword_1000C9A18);
  return sub_10000AE2C((uint64_t)v18, &qword_1000C9A18);
}

uint64_t sub_10003A9E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000396DC(a1);
}

uint64_t sub_10003AA34(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_BYTE *)(a1 + 80);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 48));
  v10 = v2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_10000B04C(v5, v6, v7, v9);
  swift_retain(v8);
  return a1;
}

uint64_t sub_10003AAC8()
{
  return sub_10003B7B0(&qword_1000C9828, &qword_1000C9800, (void (*)(void))sub_10003AAEC, (void (*)(void))sub_10003AB70);
}

unint64_t sub_10003AAEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9830;
  if (!qword_1000C9830)
  {
    v1 = sub_10000ABD0(&qword_1000C9810);
    sub_10000B254(&qword_1000C9838, &qword_1000C9808, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9830);
  }
  return result;
}

unint64_t sub_10003AB70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9840;
  if (!qword_1000C9840)
  {
    v1 = sub_10000ABD0(&qword_1000C97E8);
    sub_10000B254(&qword_1000C9848, &qword_1000C97E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9840);
  }
  return result;
}

unint64_t sub_10003ABF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9850;
  if (!qword_1000C9850)
  {
    v1 = sub_10000ABD0(&qword_1000C97D0);
    sub_10000B254(&qword_1000C9858, &qword_1000C97C8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9850);
  }
  return result;
}

void sub_10003AC7C()
{
  sub_100039134();
}

void sub_10003ACA0()
{
  sub_10003A1B0();
}

uint64_t sub_10003ACA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_BYTE *)(a1 + 80);

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  sub_10000B11C(v5, v6, v7, v9);
  swift_release(v8, v10);
  return a1;
}

unint64_t sub_10003AD3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C98B8;
  if (!qword_1000C98B8)
  {
    v1 = sub_10000ABD0(&qword_1000C98C0);
    sub_10003B558(&qword_1000C98C8, &qword_1000C98D0, &qword_1000C98D8, &qword_1000C98E0);
    sub_10000B254((unint64_t *)&unk_1000CA4A0, &qword_1000C7F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C98B8);
  }
  return result;
}

uint64_t sub_10003ADE0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000ABD0(a2);
    a3();
    sub_10000B254(&qword_1000C98E8, &qword_1000C98F0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003AE64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9900;
  if (!qword_1000C9900)
  {
    v1 = sub_10000ABD0(&qword_1000C9908);
    sub_10003AEE8();
    sub_10000B254((unint64_t *)&unk_1000CA4A0, &qword_1000C7F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9900);
  }
  return result;
}

unint64_t sub_10003AEE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9910;
  if (!qword_1000C9910)
  {
    v1 = sub_10000ABD0(&qword_1000C9918);
    sub_10000B254(&qword_1000C9920, &qword_1000C9928, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9910);
  }
  return result;
}

unint64_t sub_10003AF6C()
{
  unint64_t result;

  result = qword_1000CBA10;
  if (!qword_1000CBA10)
  {
    result = swift_getWitnessTable(&unk_10009431C, &type metadata for WritingTools);
    atomic_store(result, (unint64_t *)&qword_1000CBA10);
  }
  return result;
}

uint64_t sub_10003AFB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10003AFCC()
{
  uint64_t v0;

  return sub_100038C00(v0 + 16, &IASignalFeedbackServiceLaunchSmartRepliesThumbsUp, (uint64_t)&unk_1000BF910, (uint64_t)&unk_1000C9998);
}

uint64_t sub_10003AFFC(uint64_t result)
{
  *(_BYTE *)(result + 240) = 1;
  return result;
}

unint64_t sub_10003B008()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9968;
  if (!qword_1000C9968)
  {
    v1 = sub_10000ABD0(&qword_1000C9958);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9968);
  }
  return result;
}

uint64_t sub_10003B070()
{
  uint64_t v0;

  return sub_100038C00(v0 + 16, &IASignalFeedbackServiceLaunchSmartRepliesThumbsDown, (uint64_t)&unk_1000BF8E8, (uint64_t)&unk_1000C9980);
}

uint64_t sub_10003B0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t result;

  if ((a31 & 1) == 0)
  {
    sub_10000ADBC(a9, a10, a11 & 1);
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a17);
    return swift_retain(a19);
  }
  return result;
}

uint64_t sub_10003B104(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 240);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4);
  return a1;
}

uint64_t sub_10003B180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t result;

  if ((a31 & 1) == 0)
  {
    sub_10000ADF4(a9, a10, a11 & 1);
    swift_release(a19, v31);
    swift_bridgeObjectRelease(a17);
    return swift_bridgeObjectRelease(a12);
  }
  return result;
}

uint64_t sub_10003B1E4(uint64_t result)
{
  *(_BYTE *)(result + 240) = 0;
  return result;
}

uint64_t sub_10003B1F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1000C997C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10002199C;
  return sub_100038D40(a1, v4, v5, v1 + 32);
}

uint64_t sub_10003B260(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1000C9994);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10002199C;
  return sub_1000389B4(a1, v4, v5, v1 + 32);
}

uint64_t sub_10003B2D0()
{
  uint64_t v0;

  return sub_100038C00(v0 + 16, &IASignalFeedbackServiceLaunchSmartRepliesReportConcern, (uint64_t)&unk_1000BF988, (uint64_t)&unk_1000C99A8);
}

uint64_t sub_10003B300@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000376D8(*(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle, &qword_1000CBD10, (uint64_t)&protocol conformance descriptor for IconOnlyLabelStyle, a1);
}

uint64_t sub_10003B330()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10003B344()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  v2 = *(unsigned __int8 *)(v0 + 112);
  if (v2 != 255)
    sub_10000A880(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), v2);
  swift_release(*(_QWORD *)(v0 + 120), v1);
  return swift_deallocObject(v0, 136, 7);
}

uint64_t sub_10003B3A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1000C99A4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1000070C8;
  return sub_100037478(a1, v4, v5, v1 + 32);
}

uint64_t sub_10003B418()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  v2 = *(unsigned __int8 *)(v0 + 96);
  if (v2 != 255)
    sub_10000A880(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), v2);
  swift_release(*(_QWORD *)(v0 + 104), v1);
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10003B474@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000376D8(*(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))&type metadata accessor for TitleAndIconLabelStyle, &qword_1000C9A00, (uint64_t)&protocol conformance descriptor for TitleAndIconLabelStyle, a1);
}

uint64_t sub_10003B4A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_10003B4B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9A28;
  if (!qword_1000C9A28)
  {
    v1 = sub_10000ABD0(&qword_1000C99F0);
    sub_10003B558(&qword_1000C9A30, &qword_1000C99E8, &qword_1000C99D8, &qword_1000C9A08);
    sub_10000B254((unint64_t *)&unk_1000CA4A0, &qword_1000C7F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9A28);
  }
  return result;
}

uint64_t sub_10003B558(unint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_10000ABD0(a2);
    v9[0] = sub_10000ABD0(a3);
    v9[1] = sub_10000B254(a4, a3, (uint64_t)&protocol conformance descriptor for Button<A>);
    swift_getOpaqueTypeConformance2(v9, &opaque type descriptor for <<opaque return type of View.help(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for RewriteType(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WTUIRootViewType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FeedbackView.LayoutStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10003B6EC + 4 * byte_100093825[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10003B720 + 4 * byte_100093820[v4]))();
}

uint64_t sub_10003B720(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B728(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003B730);
  return result;
}

uint64_t sub_10003B73C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003B744);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10003B748(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B750(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B75C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10003B764(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FeedbackView.LayoutStyle()
{
  return &type metadata for FeedbackView.LayoutStyle;
}

uint64_t sub_10003B77C()
{
  return sub_10003B7B0(&qword_1000C9A40, &qword_1000C9A48, (void (*)(void))sub_10003AAC8, (void (*)(void))sub_10003ABF4);
}

uint64_t sub_10003B7B0(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000ABD0(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003B824()
{
  unint64_t result;

  result = qword_1000C9A50;
  if (!qword_1000C9A50)
  {
    result = swift_getWitnessTable(&unk_100093914, &type metadata for FeedbackView.LayoutStyle);
    atomic_store(result, (unint64_t *)&qword_1000C9A50);
  }
  return result;
}

void sub_10003B8FC(uint64_t a1, double a2, double a3)
{
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  void *v7;
  void *v8;
  _BYTE v9[24];

  v4 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    v7 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_scene);
    if (v7)
    {
      v8 = v7;
      objc_msgSend(v7, "_setPreferredContentSize:", 0.0, nullsub_1(a3));

      v6 = v8;
    }

  }
}

id sub_10003BA14()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  id v4;
  NSObject *v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  objc_class *v10;
  id v12;
  objc_super v13;

  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000063D4(v1, (uint64_t)qword_1000D1BE8);
  v3 = static os_log_type_t.debug.getter(v2);
  v4 = v0;
  v5 = Logger.logObject.getter(v4);
  if (os_log_type_enabled(v5, v3))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    v12 = v4;
    v8 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
    *v7 = v4;

    _os_log_impl((void *)&_mh_execute_header, v5, v3, "SceneDelegate deinit %@", v6, 0xCu);
    v9 = sub_100004EAC(&qword_1000C87C8);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
  v10 = (objc_class *)type metadata accessor for SceneDelegate(0);
  v13.receiver = v4;
  v13.super_class = v10;
  return objc_msgSendSuper2(&v13, "dealloc");
}

uint64_t sub_10003BC54()
{
  return type metadata accessor for SceneDelegate(0);
}

uint64_t type metadata accessor for SceneDelegate(uint64_t a1)
{
  uint64_t result;

  result = qword_1000C9C78;
  if (!qword_1000C9C78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SceneDelegate);
  return result;
}

uint64_t sub_10003BC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  _BYTE v23[24];

  v6 = sub_100004EAC(&qword_1000C9CB8);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WritingToolsView(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v3 + OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_writingToolsView;
  swift_beginAccess(v13, v23, 0, 0);
  sub_10000AD78(v13, (uint64_t)v8, &qword_1000C9CB8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_10000AE2C((uint64_t)v8, &qword_1000C9CB8);
  sub_10003DE2C((uint64_t)v8, (uint64_t)v12);
  v15 = &v12[*(int *)(v9 + 68)];
  v17 = *(_QWORD *)v15;
  v16 = *((_QWORD *)v15 + 1);
  v21[0] = v17;
  v21[1] = v16;
  v18 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v22, v18);
  v19 = v22;
  sub_100081FB0(a2, a3);
  swift_release(v19, v20);
  return sub_10003DE70((uint64_t)v12);
}

void sub_10003C068(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t aBlock[5];
  uint64_t v38;

  v7 = sub_100004EAC(&qword_1000C7770);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v10 = objc_msgSend(a1, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

    v11 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 0, 1, v11);
  }
  else
  {
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
  }
  sub_10000AE2C((uint64_t)v9, &qword_1000C7770);
  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v13 = type metadata accessor for Logger(0);
  sub_1000063D4(v13, (uint64_t)qword_1000D1BE8);
  v14 = v3;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v18 = (_QWORD *)swift_slowAlloc(8, -1);
    v19 = swift_slowAlloc(32, -1);
    v35 = a3;
    v36 = (uint64_t)v14;
    v20 = v19;
    aBlock[0] = v19;
    *(_DWORD *)v17 = 138412546;
    v33 = a1;
    v34 = a2;
    v21 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, aBlock, v17 + 4, v17 + 12);
    *v18 = v14;

    *(_WORD *)(v17 + 12) = 2080;
    v36 = sub_10006DCA8(0, 0xE000000000000000, aBlock);
    a1 = v33;
    a2 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, aBlock, v17 + 14, v17 + 22);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "SceneDelegate %@: willBeginWritingToolsSession (sessionID=%s)", (uint8_t *)v17, 0x16u);
    v22 = sub_100004EAC(&qword_1000C87C8);
    swift_arrayDestroy(v18, 1, v22);
    swift_slowDealloc(v18, -1, -1);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v23 = v20;
    a3 = v35;
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  v24 = *(void **)&v14[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_session];
  *(_QWORD *)&v14[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_session] = a1;
  v25 = a1;

  v26 = (void *)objc_opt_self(WTUIActionClientToHost);
  aBlock[4] = a2;
  v38 = a3;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10003C438;
  aBlock[3] = (uint64_t)&unk_1000BFAF8;
  v27 = _Block_copy(aBlock);
  v28 = v38;
  swift_retain(a3);
  swift_release(v28, v29);
  v30 = objc_msgSend(v26, "actionForWillBeginWritingToolsSession:requestContextsCompletion:", v25, v27);
  _Block_release(v27);
  v31 = objc_msgSend(*(id *)&v14[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_window], "rootViewController");
  v32 = objc_msgSend(v31, "_hostedWindowScene");

  objc_msgSend(v32, "sendAction:", v30);
}

uint64_t sub_10003C438(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_100021548(0, (unint64_t *)&qword_1000C9CB0, WTContext_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain(v3);
  v4(v6);
  swift_release(v3, v7);
  return swift_bridgeObjectRelease(v6);
}

void sub_10003C524(uint64_t a1, uint64_t a2)
{
  Class isa;

  sub_100021548(0, (unint64_t *)&qword_1000C9CB0, WTContext_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

void sub_10003C790(void *a1, int a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  id v11;
  id v12;
  char *v13;
  id v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  os_log_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  os_log_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_1000063D4(v8, (uint64_t)qword_1000D1BE8);
  v10 = static os_log_type_t.debug.getter(v9);
  v11 = v2;
  v12 = a1;
  v13 = (char *)v11;
  v14 = v12;
  v15 = Logger.logObject.getter(v14);
  v16 = v10;
  if (os_log_type_enabled(v15, v10))
  {
    v17 = swift_slowAlloc(22, -1);
    v18 = (_QWORD *)swift_slowAlloc(8, -1);
    v38 = swift_slowAlloc(32, -1);
    v40 = (uint64_t)v13;
    v41 = v38;
    *(_DWORD *)v17 = 138412546;
    v37 = v16;
    v36 = v15;
    v35 = &v41;
    v19 = v13;
    v34 = v5;
    v20 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v17 + 4, v17 + 12);
    *v18 = v13;

    *(_WORD *)(v17 + 12) = 2080;
    v21 = objc_msgSend(v14, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

    v22 = sub_100005900((unint64_t *)&unk_1000C9CA0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v4, v22);
    v25 = v24;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v4);
    v40 = sub_10006DCA8(v23, v25, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v35, v17 + 14, v17 + 22);

    swift_bridgeObjectRelease(v25);
    v26 = v36;
    _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v37, "SceneDelegate %@: didEndWritingToolsSession (sessionID=%s)", (uint8_t *)v17, 0x16u);
    v27 = sub_100004EAC(&qword_1000C87C8);
    swift_arrayDestroy(v18, 1, v27);
    swift_slowDealloc(v18, -1, -1);
    v28 = v38;
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  v29 = (void *)objc_opt_self(WTUIActionClientToHost);
  v30 = objc_msgSend(v29, "actionForDidEndWritingToolsSession:accepted:", v14, v39 & 1);
  v31 = objc_msgSend(*(id *)&v13[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_window], "rootViewController");
  v32 = objc_msgSend(v31, "_hostedWindowScene");

  objc_msgSend(v32, "sendAction:", v30);
  v33 = *(void **)&v13[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_session];
  *(_QWORD *)&v13[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_session] = 0;

}

void sub_10003CBB4(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  id v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  char *v18;
  uint64_t v19;

  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_1000063D4(v3, (uint64_t)qword_1000D1BE8);
  v5 = static os_log_type_t.debug.getter(v4);
  v6 = v1;
  swift_errorRetain(a1);
  v7 = (char *)v6;
  v8 = swift_errorRetain(a1);
  v9 = Logger.logObject.getter(v8);
  if (!os_log_type_enabled(v9, v5))
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);

    if (!a1)
      goto LABEL_11;
    goto LABEL_10;
  }
  v10 = swift_slowAlloc(22, -1);
  v11 = (_QWORD *)swift_slowAlloc(16, -1);
  *(_DWORD *)v10 = 138412546;
  v18 = v7;
  v12 = v7;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);
  *v11 = v7;

  *(_WORD *)(v10 + 12) = 2112;
  if (a1)
  {
    swift_errorRetain(a1);
    v13 = _swift_stdlib_bridgeErrorToNSError(a1);
    v18 = (char *)v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 14, v10 + 22);
  }
  else
  {
    v18 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 14, v10 + 22);
    v13 = 0;
  }
  v11[1] = v13;
  swift_errorRelease(a1);
  swift_errorRelease(a1);
  _os_log_impl((void *)&_mh_execute_header, v9, v5, "SceneDelegate %@: endWritingTools (error=%@)", (uint8_t *)v10, 0x16u);
  v14 = sub_100004EAC(&qword_1000C87C8);
  swift_arrayDestroy(v11, 2, v14);
  swift_slowDealloc(v11, -1, -1);
  swift_slowDealloc(v10, -1, -1);

  if (a1)
LABEL_10:
    a1 = (void *)_convertErrorToNSError(_:)(a1);
LABEL_11:
  v15 = objc_msgSend((id)objc_opt_self(WTUIActionClientToHost), "actionForEndWritingToolsWithError:", a1);

  v16 = objc_msgSend(*(id *)&v7[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_window], "rootViewController");
  v17 = objc_msgSend(v16, "_hostedWindowScene");

  objc_msgSend(v17, "sendAction:", v15);
}

void sub_10003CEE0()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  NSString v3;
  id v4;
  id v5;
  id v6;

  v1 = (void *)objc_opt_self(WTUIActionClientToHost);
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "actionForShowContentWarningWithTitle:message:", v2, v3);

  v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_window), "rootViewController"));
  v6 = objc_msgSend(v5, "_hostedWindowScene");

  objc_msgSend(v6, "sendAction:", v4);
}

void sub_10003D464(void *a1, uint64_t a2, void *a3, SEL *a4)
{
  void *v7;
  id v8;
  char *v9;
  id v10;
  id v11;
  id v12;

  v7 = (void *)objc_opt_self(WTUIActionClientToHost);
  v8 = a3;
  v9 = a1;
  v10 = objc_msgSend(v7, *a4, v8);
  v11 = objc_msgSend(*(id *)&v9[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_window], "rootViewController");
  v12 = objc_msgSend(v11, "_hostedWindowScene");

  objc_msgSend(v12, "sendAction:", v10);
}

void sub_10003D55C(void *a1, uint64_t a2, SEL *a3)
{
  void *v5;
  char *v6;
  id v7;
  id v8;
  id v9;

  v5 = (void *)objc_opt_self(WTUIActionClientToHost);
  v6 = a1;
  v7 = objc_msgSend(v5, *a3);
  v8 = objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_window], "rootViewController");
  v9 = objc_msgSend(v8, "_hostedWindowScene");

  objc_msgSend(v9, "sendAction:", v7);
}

void sub_10003D640(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  void *v7;
  char *v8;
  id v9;
  id v10;
  id v11;

  v7 = (void *)objc_opt_self(WTUIActionClientToHost);
  v8 = a1;
  v9 = objc_msgSend(v7, *a4, a3);
  v10 = objc_msgSend(*(id *)&v8[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_window], "rootViewController");
  v11 = objc_msgSend(v10, "_hostedWindowScene");

  objc_msgSend(v11, "sendAction:", v9);
}

void sub_10003D79C(double a1, double a2, double a3, double a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  char *v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  double v21;
  uint64_t v22;

  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_1000063D4(v9, (uint64_t)qword_1000D1BE8);
  v11 = static os_log_type_t.debug.getter(v10);
  v12 = v4;
  v13 = Logger.logObject.getter(v12);
  if (os_log_type_enabled(v13, v11))
  {
    v14 = swift_slowAlloc(52, -1);
    v15 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v14 = 138413314;
    v21 = *(double *)&v12;
    v16 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 4, v14 + 12);
    *v15 = v12;

    *(_WORD *)(v14 + 12) = 2048;
    v21 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 14, v14 + 22);
    *(_WORD *)(v14 + 22) = 2048;
    v21 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 24, v14 + 32);
    *(_WORD *)(v14 + 32) = 2048;
    v21 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 34, v14 + 42);
    *(_WORD *)(v14 + 42) = 2048;
    v21 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 44, v14 + 52);
    _os_log_impl((void *)&_mh_execute_header, v13, v11, "SceneDelegate %@: show smart reply questionnaire (rect: %f, %f; %f, %f)",
      (uint8_t *)v14,
      0x34u);
    v17 = sub_100004EAC(&qword_1000C87C8);
    swift_arrayDestroy(v15, 1, v17);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
  v18 = objc_msgSend((id)objc_opt_self(WTUIActionClientToHost), "actionForShowSmartReplyQuestionnaireWithRect:", a1, a2, a3, a4);
  v19 = objc_msgSend(*(id *)&v12[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_window], "rootViewController");
  v20 = objc_msgSend(v19, "_hostedWindowScene");

  objc_msgSend(v20, "sendAction:", v18);
}

void sub_10003DAB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_commonUIManager);
  KeyPath = swift_getKeyPath(&unk_1000939C0);
  v11 = v3;
  v5 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v5);
  swift_release(KeyPath, v6);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0 || *(_QWORD *)(v3 + 24) != a1)
  {
    v7 = swift_getKeyPath(&unk_1000939C0);
    __chkstk_darwin(v7);
    v9[2] = v3;
    v9[3] = a1;
    v10 = 0;
    v11 = v3;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, v7, sub_10003DDF8, v9, (char *)&type metadata for () + 8, v5);
    swift_release(v7, v8);
    sub_100056A1C();
  }
}

id sub_10003DC14()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  objc_super v8;

  v1 = v0;
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_scene], 0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_window] = 0;
  v2 = &v0[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_writingToolsView];
  v3 = type metadata accessor for WritingToolsView(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_session] = 0;
  v4 = OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_commonUIManager;
  v5 = type metadata accessor for CommonUIManager(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = v1;
  *(_QWORD *)&v1[v4] = sub_10005871C();

  v8.receiver = v6;
  v8.super_class = (Class)type metadata accessor for SceneDelegate(0);
  return objc_msgSendSuper2(&v8, "init");
}

void sub_10003DD0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "\b";
  v4[1] = &unk_100093980;
  sub_10003DD9C(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_100093980;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_10003DD9C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000C9C88)
  {
    v2 = type metadata accessor for WritingToolsView(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000C9C88);
  }
}

uint64_t sub_10003DDF8()
{
  uint64_t v0;

  return sub_100055F3C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_10003DE14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003DE24(uint64_t a1, uint64_t a2)
{
  return swift_release(*(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_10003DE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WritingToolsView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003DE70(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WritingToolsView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003DEAC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10003DED0(uint64_t a1)
{
  uint64_t v1;

  sub_10003C524(a1, *(_QWORD *)(v1 + 16));
}

void sub_10003DED8(uint8_t *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  char *v35;
  NSObject *v36;
  _BOOL4 v37;
  uint8_t *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint8_t *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  id v69;
  id v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint8_t *v74;
  void *v75;
  uint8_t *v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  id v90;
  void *v91;
  id v92;
  void *v93;
  id v94;
  id v95;
  void *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  os_log_type_t v104;
  char *v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  char **v109;
  uint8_t *v110;
  uint8_t *v111;
  char *v112;
  uint8_t *v113;
  uint8_t *v114;
  os_log_type_t v115;
  uint8_t *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  id v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  id v131;
  uint64_t v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  id v141;
  void *v142;
  id v143;
  void *v144;
  id v145;
  id v146;
  void *v147;
  id v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  os_log_type_t v153;
  char *v154;
  NSObject *v155;
  os_log_type_t v156;
  _BOOL4 v157;
  uint8_t *v158;
  char *v159;
  _QWORD *v160;
  uint64_t v161;
  os_log_type_t v162;
  NSObject *v163;
  NSObject *v164;
  os_log_type_t v165;
  _BOOL4 v166;
  uint8_t *v167;
  NSObject *v168;
  uint8_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  id v173;
  id v174;
  id v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  id v180;
  id v181;
  char *v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint8_t *v190;
  char *v191;
  id v192;
  void *v193;
  id v194;
  void *v195;
  id v196;
  id v197;
  void *v198;
  id v199;
  void *v200;
  id v201;
  void *v202;
  id v203;
  id v204;
  void *v205;
  id v206;
  void *v207;
  void *v208;
  id v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  id v214;
  void *v215;
  id v216;
  id v217;
  void *v218;
  id v219;
  id v220;
  id v221;
  void *v222;
  id v223;
  id v224;
  void *v225;
  id v226;
  id v227;
  id v228;
  void *v229;
  id v230;
  id v231;
  void *v232;
  id v233;
  id v234;
  id v235;
  void *v236;
  void *v237;
  id v238;
  id v239;
  uint64_t v240;
  id v241;
  Class isa;
  id v243;
  uint64_t KeyPath;
  void *v245;
  id v246;
  uint8_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  id v255;
  NSObject *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  id v262;
  void *v263;
  id v264;
  void *v265;
  id v266;
  id v267;
  void *v268;
  id v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD v273[2];
  void *v274;
  id v275;
  uint64_t v276;
  id v277;
  int v278;
  id v279;
  char *v280;
  int v281;
  int v282;
  uint64_t v283;
  int v284;
  char *v285;
  char *v286;
  char *v287;
  char *v288;
  uint64_t v289;
  id v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  _QWORD *v296;
  char *v297;
  id v298;
  char *v299;
  char *v300;
  id v301;
  uint8_t *v302;
  __int128 v303;
  uint8_t *v304;
  uint64_t v305;
  id v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;

  *((_QWORD *)&v303 + 1) = a2;
  v304 = a1;
  v3 = sub_100004EAC(&qword_1000C9CD0);
  v292 = *(_QWORD *)(v3 - 8);
  v293 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v276 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v291 = (char *)&v276 - v7;
  v8 = sub_100004EAC(&qword_1000C9CB8);
  __chkstk_darwin(v8);
  v10 = (char *)&v276 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004EAC(&qword_1000C7770);
  v12 = __chkstk_darwin(v11);
  v286 = (char *)&v276 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v276 - v15;
  v17 = __chkstk_darwin(v14);
  v299 = (char *)&v276 - v18;
  v19 = __chkstk_darwin(v17);
  v300 = (char *)&v276 - v20;
  v21 = __chkstk_darwin(v19);
  v285 = (char *)&v276 - v22;
  v23 = __chkstk_darwin(v21);
  v295 = (uint64_t)&v276 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v276 - v26;
  v28 = __chkstk_darwin(v25);
  v305 = (uint64_t)&v276 - v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v276 - v30;
  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v294 = v16;
  v32 = type metadata accessor for Logger(0);
  v33 = sub_1000063D4(v32, (uint64_t)qword_1000D1BE8);
  v34 = ((uint64_t (*)(void))static os_log_type_t.debug.getter)();
  v35 = v2;
  v296 = (_QWORD *)v33;
  v36 = Logger.logObject.getter(v35);
  v37 = os_log_type_enabled(v36, v34);
  v287 = v6;
  v289 = v8;
  v288 = v10;
  if (v37)
  {
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = swift_slowAlloc(8, -1);
    v297 = v27;
    v40 = (_QWORD *)v39;
    *(_DWORD *)v38 = 138412290;
    v306 = v35;
    v41 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, &v307, v38 + 4, v38 + 12);
    v42 = v35;
    *v40 = v35;

    _os_log_impl((void *)&_mh_execute_header, v36, v34, "SceneDelegate %@: scene will connnect to session ", v38, 0xCu);
    v43 = sub_100004EAC(&qword_1000C87C8);
    swift_arrayDestroy(v40, 1, v43);
    v44 = v40;
    v27 = v297;
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

    v42 = v35;
  }
  v45 = objc_opt_self(UIWindowScene);
  v46 = v304;
  v47 = swift_dynamicCastObjCClass(v304, v45);
  if (v47)
  {
    v48 = v47;
    v49 = type metadata accessor for WTSceneConnectionOptionsDefinition(0);
    v50 = type metadata accessor for WTStartupOptions(0);
    v51 = sub_100005900(&qword_1000C9CD8, (uint64_t (*)(uint64_t))&type metadata accessor for WTSceneConnectionOptionsDefinition, (uint64_t)&protocol conformance descriptor for WTSceneConnectionOptionsDefinition);
    v302 = v46;
    v52 = UISceneConnectionOptions.subscript.getter(&v306, v49, v49, v50, v51);
    v53 = v306;
    if (v306)
    {
      v54 = dispatch thunk of WTStartupOptions.prompt.getter(v52);
      v56 = v55;
      v57 = dispatch thunk of WTStartupOptions.requestedTool.getter();
      v283 = v54;
      v58 = (uint8_t *)sub_100071AD0(v57, v54, (uint64_t)v56);
      v60 = v59;
      LODWORD(v54) = v59;
      *((_QWORD *)&v303 + 1) = v61;
      v304 = v58;
      *(_QWORD *)&v303 = v62;
      v63 = sub_1000220A8((uint64_t)v58, v62, v61, v59);
      v282 = dispatch thunk of WTStartupOptions.editable.getter(v63);
      v281 = dispatch thunk of WTStartupOptions.wantsInlineEditing.getter();
      v280 = (char *)dispatch thunk of WTStartupOptions.allowedResultOptions.getter();
      v301 = (id)dispatch thunk of WTStartupOptions.smartReplyConfiguration.getter();
      v64 = dispatch thunk of WTStartupOptions.isForInputDashboard.getter();
      v278 = dispatch thunk of WTStartupOptions.isForAssistant.getter();
      v65 = dispatch thunk of WTStartupOptions.sessionUUID.getter();
      v66 = dispatch thunk of WTStartupOptions.suggestionUUID.getter(v65);
      v67 = dispatch thunk of WTStartupOptions.contextUUID.getter(v66);
      v298 = v53;
      v284 = dispatch thunk of WTStartupOptions.isQuestionnairePopover.getter(v67);
      v68 = v42;
      if (v54 >= 2 && !(*((_QWORD *)&v303 + 1) | (unint64_t)v303 | (unint64_t)v304))
      {
        v69 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TextCompositionClient(0)), "init");
        dispatch thunk of TextCompositionClient.requestPrewarming(for:)(_swiftEmptyArrayStorage);

      }
      v70 = objc_msgSend(objc_allocWithZone((Class)UIWindow), "initWithWindowScene:", v48);
      v71 = *(void **)&v42[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_window];
      *(_QWORD *)&v42[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_window] = v70;
      v279 = v70;
      v72 = v70;

      v73 = objc_opt_self(_UIHostedWindowScene);
      v74 = v302;
      v75 = (void *)swift_dynamicCastObjCClass(v302, v73);
      if (v75)
        v76 = v74;
      swift_unknownObjectWeakAssign(&v68[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_scene]);

      v77 = -[uint8_t _FBSScene](v74, "_FBSScene");
      v78 = objc_msgSend(v77, "hostHandle");

      if (v78)
      {
        v79 = objc_msgSend(v78, "auditToken");

        if ((v64 & 1) != 0)
        {
          v80 = swift_bridgeObjectRelease(v56);
          if ((_BYTE)v60)
          {
            if (v60 == 2)
            {
              if (v304 == (uint8_t *)1 && v303 == 0)
              {
                v299 = v31;
                v81 = v295;
                sub_10000AD78((uint64_t)v31, v295, &qword_1000C7770);
                v82 = v68;
                v290 = v79;
                v83 = v79;
                v84 = sub_10000A400(1, 0, 0, 2, (uint64_t)v68, v81, v83, v278 & 1);
                v86 = v85;
                v88 = v87;
                v306 = (id)v84;
                v307 = v85;
                LOBYTE(v308) = v89 & 1;
                v309 = v87;
                v90 = objc_allocWithZone((Class)sub_100004EAC(&qword_1000C9D10));
                swift_retain(v88);
                swift_retain(v84);
                swift_retain(v86);
                v91 = (void *)UIHostingController.init(rootView:)(&v306);
                UIHostingController.safeAreaRegions.setter(0);
                v92 = objc_msgSend(v91, "view");
                if (v92)
                {
                  v93 = v92;
                  v94 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
                  objc_msgSend(v93, "setBackgroundColor:", v94);

                  v95 = objc_msgSend(v91, "view");
                  if (v95)
                  {
                    v96 = v95;
                    v97 = objc_msgSend(v95, "layer");

                    objc_msgSend(v97, "setHitTestsAsOpaque:", 1);
                    objc_msgSend(v72, "setRootViewController:", v91);
                    swift_release(v88, v98);
                    swift_release(v86, v99);
                    swift_release(v84, v100);

                    v31 = v299;
                    v74 = v302;
LABEL_59:
                    v79 = v290;
                    goto LABEL_60;
                  }
                  goto LABEL_89;
                }
LABEL_88:
                __break(1u);
LABEL_89:
                __break(1u);
                goto LABEL_90;
              }
              if (v304 == (uint8_t *)2 && v303 == 0)
              {
                v290 = v79;
                v162 = static os_log_type_t.debug.getter(v80);
                v300 = v68;
                v163 = v68;
                v164 = Logger.logObject.getter(v163);
                v165 = v162;
                v166 = os_log_type_enabled(v164, v162);
                v277 = v72;
                if (v166)
                {
                  v167 = (uint8_t *)swift_slowAlloc(12, -1);
                  v304 = (uint8_t *)swift_slowAlloc(8, -1);
                  *(_DWORD *)v167 = 138412290;
                  v306 = v163;
                  v168 = v163;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, &v307, v167 + 4, v167 + 12);
                  v169 = v304;
                  *(_QWORD *)v304 = v163;

                  v74 = v302;
                  _os_log_impl((void *)&_mh_execute_header, v164, v165, "SceneDelegate %@: creating SmartReplyInputDashboardView with delegate=self", v167, 0xCu);
                  v170 = sub_100004EAC(&qword_1000C87C8);
                  swift_arrayDestroy(v169, 1, v170);
                  swift_slowDealloc(v169, -1, -1);
                  swift_slowDealloc(v167, -1, -1);
                }
                else
                {

                  v164 = v163;
                }
                v253 = (uint64_t)v285;

                v254 = v31;
                sub_10000AD78((uint64_t)v31, v253, &qword_1000C7770);
                v255 = v301;
                if (v301)
                {
                  v256 = v163;
                  v257 = sub_100060D28(2, 0, 0, 2, (uint64_t)v163, v253, v290, v255);
                  v259 = v258;
                  v261 = v260;
                  v306 = (id)v257;
                  v307 = v258;
                  v308 = v260;
                  v262 = objc_allocWithZone((Class)sub_100004EAC(&qword_1000C9D08));
                  swift_retain(v259);
                  swift_retain(v257);
                  swift_retain(v261);
                  v263 = (void *)UIHostingController.init(rootView:)(&v306);
                  UIHostingController.safeAreaRegions.setter(0);
                  v264 = objc_msgSend(v263, "view");
                  if (v264)
                  {
                    v265 = v264;
                    v266 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
                    objc_msgSend(v265, "setBackgroundColor:", v266);

                    v267 = objc_msgSend(v263, "view");
                    if (v267)
                    {
                      v268 = v267;
                      v269 = objc_msgSend(v267, "layer");

                      objc_msgSend(v269, "setHitTestsAsOpaque:", 1);
                      v72 = v277;
                      objc_msgSend(v277, "setRootViewController:", v263);
                      swift_release(v261, v270);
                      swift_release(v259, v271);
                      swift_release(v257, v272);

                      v31 = v254;
                      goto LABEL_59;
                    }
LABEL_92:
                    __break(1u);
                    return;
                  }
LABEL_91:
                  __break(1u);
                  goto LABEL_92;
                }
LABEL_90:
                __break(1u);
                goto LABEL_91;
              }
            }
            sub_10000A880((uint64_t)v304, v303, *((uint64_t *)&v303 + 1), v60);
LABEL_60:
            objc_msgSend(v72, "makeKeyAndVisible");
            sub_100056A1C();

            sub_10000AE2C((uint64_t)v27, &qword_1000C7770);
            sub_10000AE2C((uint64_t)v31, &qword_1000C7770);
            sub_10000AE2C(v305, &qword_1000C7770);
            return;
          }
          v299 = v31;
          v129 = v295;
          sub_10000AD78((uint64_t)v31, v295, &qword_1000C7770);
          v130 = v68;
          v290 = v79;
          v131 = v79;
          v132 = *((_QWORD *)&v303 + 1);
          v133 = v304;
          v134 = v303;
          sub_10000B060((uint64_t)v304, v303, *((uint64_t *)&v303 + 1), 0);
          v300 = v68;
          v135 = sub_10007C94C((uint64_t)v133, v134, v132, 0, (uint64_t)v68, v129, v131);
          v137 = v136;
          v139 = v138;
          v306 = (id)v135;
          v307 = v136;
          LOBYTE(v308) = v140 & 1;
          v309 = v138;
          v141 = objc_allocWithZone((Class)sub_100004EAC(&qword_1000C9D18));
          swift_retain(v139);
          swift_retain(v135);
          swift_retain(v137);
          v142 = (void *)UIHostingController.init(rootView:)(&v306);
          UIHostingController.safeAreaRegions.setter(0);
          v143 = objc_msgSend(v142, "view");
          if (v143)
          {
            v144 = v143;
            v145 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
            objc_msgSend(v144, "setBackgroundColor:", v145);

            v146 = objc_msgSend(v142, "view");
            if (v146)
            {
              v147 = v146;
              v148 = objc_msgSend(v146, "layer");

              objc_msgSend(v148, "setHitTestsAsOpaque:", 1);
              v149 = v142;
              objc_msgSend(v72, "setRootViewController:", v149);
              sub_10000A880((uint64_t)v304, v303, *((uint64_t *)&v303 + 1), 0);
              swift_release(v139, v150);
              swift_release(v137, v151);
              swift_release(v135, v152);

LABEL_58:
              v31 = v299;
              goto LABEL_59;
            }
            goto LABEL_73;
          }
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
        v290 = v79;
        v101 = type metadata accessor for UUID(0);
        v102 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 48);
        if (v102(v305, 1, v101) == 1)
        {
          v299 = v31;
          v300 = v68;
          if ((v284 & 1) == 0)
          {
            v153 = ((uint64_t (*)(void))static os_log_type_t.debug.getter)();
            v154 = v300;
            v155 = Logger.logObject.getter(v154);
            v156 = v153;
            v157 = os_log_type_enabled(v155, v153);
            v297 = v27;
            v277 = v72;
            if (v157)
            {
              v158 = (uint8_t *)swift_slowAlloc(12, -1);
              v296 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v158 = 138412290;
              v306 = v154;
              v159 = v154;
              v74 = v302;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, &v307, v158 + 4, v158 + 12);
              v160 = v296;
              *v296 = v154;

              _os_log_impl((void *)&_mh_execute_header, v155, v156, "SceneDelegate %@: creating WritingToolsView with delegate=self", v158, 0xCu);
              v161 = sub_100004EAC(&qword_1000C87C8);
              swift_arrayDestroy(v160, 1, v161);
              swift_slowDealloc(v160, -1, -1);
              swift_slowDealloc(v158, -1, -1);

            }
            else
            {

            }
            v179 = v287;
            v180 = v301;
            v181 = v301;
            v182 = v154;
            v183 = v290;
            v184 = (uint64_t)v288;
            WritingToolsView.init(writingToolsDelegate:requestedMode:hostAppAuditToken:prompt:smartReplyConfiguration:isForEditableContent:wantsInlineEditing:allowedResultOptions:)((uint64_t)v154, (uint64_t)v304, v303, *((uint64_t *)&v303 + 1), v60, (uint64_t)v183, v283, v56, (uint64_t)v288, v180, v282 & 1, v281 & 1, v280);
            v185 = type metadata accessor for WritingToolsView(0);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v185 - 8) + 56))(v184, 0, 1, v185);
            v186 = (uint64_t)&v182[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_writingToolsView];
            swift_beginAccess(&v182[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_writingToolsView], &v306, 33, 0);
            sub_10003F91C(v184, v186);
            swift_endAccess(&v306);
            sub_10000AD78(v186, v184, &qword_1000C9CB8);
            v187 = *(_QWORD *)&v182[OBJC_IVAR____TtC21WritingToolsUIService13SceneDelegate_commonUIManager];
            v188 = type metadata accessor for CommonUIManager(0);
            v189 = sub_10003F964();
            v190 = (uint8_t *)sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
            v191 = v291;
            View.environment<A>(_:)(v187, v289, v188, v189, v190);
            sub_10000AE2C(v184, &qword_1000C9CB8);
            (*(void (**)(char *, char *, uint64_t))(v292 + 16))(v179, v191, v293);
            v192 = objc_allocWithZone((Class)sub_100004EAC((uint64_t *)&unk_1000C9CF0));
            v193 = (void *)UIHostingController.init(rootView:)(v179);
            UIHostingController.safeAreaRegions.setter(0);
            v194 = objc_msgSend(v193, "view");
            if (v194)
            {
              v195 = v194;
              v196 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
              objc_msgSend(v195, "setBackgroundColor:", v196);

              v197 = objc_msgSend(v193, "view");
              if (v197)
              {
                v198 = v197;
                v199 = objc_msgSend(v197, "layer");

                objc_msgSend(v199, "setHitTestsAsOpaque:", 1);
                v200 = v193;
                v201 = objc_msgSend(v193, "view");
                if (v201)
                {
                  v202 = v201;
                  objc_msgSend(v201, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

                  v203 = objc_msgSend(objc_allocWithZone((Class)UIViewController), "init");
                  v204 = objc_msgSend(v203, "view");
                  if (v204)
                  {
                    v205 = v204;
                    objc_msgSend(v204, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

                    v206 = objc_msgSend(v203, "view");
                    if (v206)
                    {
                      v207 = v206;
                      v208 = v193;
                      v209 = objc_msgSend(v193, "view");
                      if (v209)
                      {
                        v210 = v209;
                        objc_msgSend(v207, "addSubview:", v209);

                        objc_msgSend(v203, "addChildViewController:", v200);
                        v211 = sub_100004EAC((uint64_t *)&unk_1000C7570);
                        v212 = swift_allocObject(v211, 64, 7);
                        *(_OWORD *)(v212 + 16) = xmmword_100091440;
                        v213 = v203;
                        v214 = objc_msgSend(v203, "view");
                        if (v214)
                        {
                          v215 = v214;
                          v304 = v190;
                          v216 = objc_msgSend(v214, "leadingAnchor");

                          v217 = objc_msgSend(v208, "view");
                          if (v217)
                          {
                            v218 = v217;
                            v219 = objc_msgSend(v217, "leadingAnchor");

                            v220 = objc_msgSend(v216, "constraintEqualToAnchor:", v219);
                            *(_QWORD *)(v212 + 32) = v220;
                            v221 = objc_msgSend(v213, "view");
                            if (v221)
                            {
                              v222 = v221;
                              v223 = objc_msgSend(v221, "trailingAnchor");

                              v224 = objc_msgSend(v208, "view");
                              if (v224)
                              {
                                v225 = v224;
                                v226 = objc_msgSend(v224, "trailingAnchor");

                                v227 = objc_msgSend(v223, "constraintEqualToAnchor:", v226);
                                *(_QWORD *)(v212 + 40) = v227;
                                v228 = objc_msgSend(v213, "view");
                                if (v228)
                                {
                                  v229 = v228;
                                  v230 = objc_msgSend(v228, "topAnchor");

                                  v231 = objc_msgSend(v208, "view");
                                  if (v231)
                                  {
                                    v232 = v231;
                                    *((_QWORD *)&v303 + 1) = v187;
                                    v233 = objc_msgSend(v231, "topAnchor");

                                    v234 = objc_msgSend(v230, "constraintEqualToAnchor:", v233);
                                    *(_QWORD *)(v212 + 48) = v234;
                                    v235 = objc_msgSend(v208, "view");
                                    *(_QWORD *)&v303 = v208;
                                    if (v235)
                                    {
                                      v236 = v235;
                                      v237 = (void *)objc_opt_self(NSLayoutConstraint);
                                      v238 = objc_msgSend(v236, "heightAnchor");

                                      v239 = objc_msgSend(v238, "constraintEqualToConstant:", 2000.0);
                                      *(_QWORD *)(v212 + 56) = v239;
                                      v306 = (id)v212;
                                      specialized Array._endMutation()(v240);
                                      v241 = v306;
                                      sub_100021548(0, (unint64_t *)&qword_1000C9D00, NSLayoutConstraint_ptr);
                                      isa = Array._bridgeToObjectiveC()().super.isa;
                                      swift_bridgeObjectRelease(v241);
                                      objc_msgSend(v237, "activateConstraints:", isa);

                                      v243 = v277;
                                      v302 = (uint8_t *)v213;
                                      objc_msgSend(v277, "setRootViewController:", v213);
                                      KeyPath = swift_getKeyPath(&unk_1000939E8);
                                      __chkstk_darwin(KeyPath);
                                      v245 = (void *)*((_QWORD *)&v303 + 1);
                                      v274 = (void *)*((_QWORD *)&v303 + 1);
                                      v275 = v279;
                                      v306 = (id)*((_QWORD *)&v303 + 1);
                                      v246 = v243;
                                      v247 = v304;
                                      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v306, KeyPath, sub_10003F9E8, v273, (char *)&type metadata for () + 8, v304);
                                      swift_release(KeyPath, v248);

                                      v249 = swift_getKeyPath(&unk_100093A10);
                                      __chkstk_darwin(v249);
                                      v274 = v245;
                                      LOBYTE(v275) = 2;
                                      v306 = v245;
                                      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v306, v249, sub_10003FA08, v273, (char *)&type metadata for () + 8, v247);
                                      swift_release(v249, v250);
                                      v251 = swift_getKeyPath(&unk_1000939C0);
                                      __chkstk_darwin(v251);
                                      v273[0] = v245;
                                      v273[1] = 7;
                                      LOBYTE(v274) = 0;
                                      v306 = v245;
                                      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v306, v251, sub_10003FA60, &v276 - 6, (char *)&type metadata for () + 8, v247);

                                      swift_release(v251, v252);
                                      v72 = v243;
                                      (*(void (**)(char *, uint64_t))(v292 + 8))(v291, v293);
                                      v27 = v297;
                                      goto LABEL_58;
                                    }
LABEL_87:
                                    __break(1u);
                                    goto LABEL_88;
                                  }
LABEL_86:
                                  __break(1u);
                                  goto LABEL_87;
                                }
LABEL_85:
                                __break(1u);
                                goto LABEL_86;
                              }
LABEL_84:
                              __break(1u);
                              goto LABEL_85;
                            }
LABEL_83:
                            __break(1u);
                            goto LABEL_84;
                          }
LABEL_82:
                          __break(1u);
                          goto LABEL_83;
                        }
LABEL_81:
                        __break(1u);
                        goto LABEL_82;
                      }
LABEL_80:
                      __break(1u);
                      goto LABEL_81;
                    }
LABEL_79:
                    __break(1u);
                    goto LABEL_80;
                  }
LABEL_78:
                  __break(1u);
                  goto LABEL_79;
                }
LABEL_77:
                __break(1u);
                goto LABEL_78;
              }
LABEL_76:
              __break(1u);
              goto LABEL_77;
            }
LABEL_75:
            __break(1u);
            goto LABEL_76;
          }
          swift_bridgeObjectRelease(v56);
          v103 = sub_10000A880((uint64_t)v304, v303, *((uint64_t *)&v303 + 1), v60);
          v104 = static os_log_type_t.debug.getter(v103);
          v105 = v300;
          v106 = Logger.logObject.getter(v105);
          v107 = v104;
          if (os_log_type_enabled(v106, v104))
          {
            v297 = v27;
            v108 = (uint8_t *)swift_slowAlloc(12, -1);
            v109 = (char **)swift_slowAlloc(8, -1);
            v277 = v72;
            v304 = v108;
            *(_DWORD *)v108 = 138412290;
            v110 = v108 + 12;
            v111 = v108 + 4;
            v306 = v105;
            v112 = v105;
            v74 = v302;
            v113 = v111;
            v27 = v297;
            v114 = v110;
            v72 = v277;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, &v307, v113, v114);
            *v109 = v105;

            v115 = v107;
            v116 = v304;
            _os_log_impl((void *)&_mh_execute_header, v106, v115, "SceneDelegate %@: creating QuestionnaireOnlyViewController with delegate=self", v304, 0xCu);
            v117 = sub_100004EAC(&qword_1000C87C8);
            swift_arrayDestroy(v109, 1, v117);
            swift_slowDealloc(v109, -1, -1);
            swift_slowDealloc(v116, -1, -1);
          }
          else
          {

            v106 = v105;
          }
          v171 = (uint64_t)v286;

          v172 = swift_allocObject(&unk_1000BFB58, 24, 7);
          swift_unknownObjectWeakInit(v172 + 16, v105);
          v31 = v299;
          sub_10000AD78((uint64_t)v299, v171, &qword_1000C7770);
          if (v102(v171, 1, v101) != 1)
          {
            v173 = objc_allocWithZone((Class)type metadata accessor for QuestionnaireOnlyViewController());
            v174 = v290;
            v175 = v290;
            swift_retain(v172);
            v176 = (void *)sub_100035448((uint64_t)sub_10003FA48, v172, v171);
            swift_release(v172, v177);

            v79 = v174;
            objc_msgSend(v72, "setRootViewController:", v176);
            swift_release(v172, v178);

            goto LABEL_60;
          }
LABEL_74:
          __break(1u);
          goto LABEL_75;
        }
        swift_bridgeObjectRelease(v56);
        sub_10000A880((uint64_t)v304, v303, *((uint64_t *)&v303 + 1), v60);
        v118 = swift_allocObject(&unk_1000BFB58, 24, 7);
        swift_unknownObjectWeakInit(v118 + 16, v68);
        v119 = v300;
        sub_10000AD78((uint64_t)v31, (uint64_t)v300, &qword_1000C7770);
        if (v102((uint64_t)v119, 1, v101) != 1)
        {
          v120 = v74;
          v121 = (uint64_t)v299;
          sub_10000AD78(v305, (uint64_t)v299, &qword_1000C7770);
          if (v102(v121, 1, v101) != 1)
          {
            v122 = (uint64_t)v294;
            sub_10000AD78((uint64_t)v27, (uint64_t)v294, &qword_1000C7770);
            if (v102(v122, 1, v101) != 1)
            {
              v123 = objc_allocWithZone((Class)type metadata accessor for SuggestionViewController());
              v124 = v290;
              v125 = v290;
              swift_retain(v118);
              v126 = sub_100005CCC((uint64_t)sub_10003FA48, v118, (uint64_t)v300, v125, (uint64_t)v299, v122);
              swift_release(v118, v127);

              v79 = v124;
              objc_msgSend(v72, "setRootViewController:", v126);
              swift_release(v118, v128);

              v74 = v120;
              goto LABEL_60;
            }
            goto LABEL_71;
          }
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
          goto LABEL_72;
        }
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_69;
  }
}

uint64_t sub_10003F91C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000C9CB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10003F964()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9CE0;
  if (!qword_1000C9CE0)
  {
    v1 = sub_10000ABD0(&qword_1000C9CB8);
    sub_100005900(&qword_1000C9CE8, type metadata accessor for WritingToolsView, (uint64_t)&protocol conformance descriptor for WritingToolsView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9CE0);
  }
  return result;
}

uint64_t sub_10003F9E8()
{
  uint64_t v0;

  return sub_100056248(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10003FA08()
{
  uint64_t v0;

  return sub_1000560BC(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10003FA24()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10003FA48(double a1, double a2)
{
  uint64_t v2;

  sub_10003B8FC(v2, a1, a2);
}

uint64_t sub_10003FA60()
{
  return sub_10003DDF8();
}

_QWORD *sub_10003FA74@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  swift_unknownObjectWeakInit(a5, a1);
  swift_unknownObjectRelease(a1);
  *(_BYTE *)(a5 + 8) = a2;
  *(_BYTE *)(a5 + 9) = a3;
  v10 = (int *)type metadata accessor for PreferredContentSizeModifier(0);
  sub_10000AC80(a4, a5 + v10[7], &qword_1000C9E90);
  v11 = a5 + v10[8];
  type metadata accessor for CGSize(0);
  v23 = 0;
  v24 = 0;
  State.init(wrappedValue:)(&v25, &v23, v12);
  v13 = v26;
  *(_OWORD *)v11 = v25;
  *(_QWORD *)(v11 + 16) = v13;
  v14 = a5 + v10[9];
  LOBYTE(v23) = 0;
  State.init(wrappedValue:)(&v25, &v23, &type metadata for Bool);
  v15 = *((_QWORD *)&v25 + 1);
  *(_BYTE *)v14 = v25;
  *(_QWORD *)(v14 + 8) = v15;
  v16 = a5 + v10[10];
  v23 = 0;
  LOBYTE(v24) = 1;
  v17 = sub_100004EAC(&qword_1000CA228);
  State.init(wrappedValue:)(&v25, &v23, v17);
  v18 = BYTE8(v25);
  v19 = v26;
  *(_QWORD *)v16 = v25;
  *(_BYTE *)(v16 + 8) = v18;
  *(_QWORD *)(v16 + 16) = v19;
  v20 = a5 + v10[11];
  LOBYTE(v23) = 0;
  result = State.init(wrappedValue:)(&v25, &v23, &type metadata for Bool);
  v22 = *((_QWORD *)&v25 + 1);
  *(_BYTE *)v20 = v25;
  *(_QWORD *)(v20 + 8) = v22;
  return result;
}

BOOL static WTIcon.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void WTIcon.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int WTIcon.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

unint64_t sub_10003FC50()
{
  unint64_t result;

  result = qword_1000C9DE0;
  if (!qword_1000C9DE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WTIcon, &type metadata for WTIcon);
    atomic_store(result, (unint64_t *)&qword_1000C9DE0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WTIcon(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WTIcon(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_10003FD70 + 4 * byte_100093A45[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_10003FDA4 + 4 * byte_100093A40[v4]))();
}

uint64_t sub_10003FDA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003FDAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003FDB4);
  return result;
}

uint64_t sub_10003FDC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003FDC8);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_10003FDCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003FDD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WTIcon()
{
  return &type metadata for WTIcon;
}

uint64_t sub_10003FDF4(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_10003FE00(uint64_t result, uint64_t a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result, a2);
  return result;
}

__n128 initializeWithTake for UnevenCornerPrimaryButtonStyle(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for UnevenCornerPrimaryButtonStyle()
{
  return &type metadata for UnevenCornerPrimaryButtonStyle;
}

ValueMetadata *type metadata accessor for HorizontalIconTitleLabelStyle()
{
  return &type metadata for HorizontalIconTitleLabelStyle;
}

uint64_t sub_10003FE58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v7 = a2[1];
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)(a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    swift_retain(v5);
    swift_retain(v7);
    v11 = sub_100004EAC(&qword_1000C74D0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = v9;
      v14 = v11;
      v15 = 1;
    }
    else
    {
      v16 = *v10;
      *v9 = *v10;
      swift_retain(v16);
      v13 = v9;
      v14 = v11;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_10003FF44(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*a1, a2);
  swift_release(a1[1], v4);
  v5 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v6 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v5, v6) != 1)
    return swift_release(*v5, v7);
  v8 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5, v8);
}

uint64_t sub_10003FFC4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v6 = *(int *)(a3 + 20);
  v7 = (uint64_t *)(a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  swift_retain(v4);
  swift_retain(v5);
  v9 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    v11 = 1;
  }
  else
  {
    v12 = *v8;
    *v7 = *v8;
    swift_retain(v12);
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v11);
  return a1;
}

uint64_t *sub_100040084(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6, v8);
  v9 = a2[1];
  v10 = a1[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v10, v11);
  v12 = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  a1[2] = v12;
  if (a1 != a2)
  {
    v13 = *(int *)(a3 + 20);
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    sub_10000AE2C((uint64_t)a1 + v13, &qword_1000C74D0);
    v16 = sub_100004EAC(&qword_1000C74D0);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
      v18 = 1;
    }
    else
    {
      v19 = *v15;
      *v14 = *v15;
      swift_retain(v19);
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v16, v18);
  }
  return a1;
}

_OWORD *sub_100040180(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  *(_OWORD *)((char *)a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100040230(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6, a2);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7, v8);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    sub_10000AE2C((uint64_t)a1 + v9, &qword_1000C74D0);
    v12 = sub_100004EAC(&qword_1000C74D0);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100040320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004032C);
}

uint64_t sub_10004032C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004EAC(&qword_1000C9DF0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1000403AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000403B8);
}

uint64_t sub_1000403B8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004EAC(&qword_1000C9DF0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SmallIconTitleLabelStyle(uint64_t a1)
{
  return sub_1000469DC(a1, (uint64_t *)&unk_1000C9E50, (uint64_t)&nominal type descriptor for SmallIconTitleLabelStyle);
}

void sub_100040444(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100093B40;
  sub_100032690(319, (unint64_t *)&qword_1000C9E60, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

ValueMetadata *type metadata accessor for MagicButtonModifier()
{
  return &type metadata for MagicButtonModifier;
}

ValueMetadata *type metadata accessor for MagicButtonLabelStyle()
{
  return &type metadata for MagicButtonLabelStyle;
}

ValueMetadata *type metadata accessor for HeaderButtonWithIconStyle()
{
  return &type metadata for HeaderButtonWithIconStyle;
}

ValueMetadata *type metadata accessor for ScreenTitleModifier()
{
  return &type metadata for ScreenTitleModifier;
}

ValueMetadata *type metadata accessor for AlignToTopModifier()
{
  return &type metadata for AlignToTopModifier;
}

uint64_t destroy for PrimaryButtonStyle(uint64_t a1)
{
  return sub_10003FE00(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t _s21WritingToolsUIService30UnevenCornerPrimaryButtonStyleVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  sub_10003FDF4(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return a1;
}

uint64_t _s21WritingToolsUIService30UnevenCornerPrimaryButtonStyleVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  sub_10003FDF4(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  sub_10003FE00(v5, v6);
  return a1;
}

uint64_t _s21WritingToolsUIService30UnevenCornerPrimaryButtonStyleVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  sub_10003FE00(v5, v6);
  return a1;
}

uint64_t _s21WritingToolsUIService30UnevenCornerPrimaryButtonStyleVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[17])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s21WritingToolsUIService30UnevenCornerPrimaryButtonStyleVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrimaryButtonStyle()
{
  return &type metadata for PrimaryButtonStyle;
}

_QWORD *sub_1000406D0(_QWORD *a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    swift_unknownObjectWeakCopyInit(a1, a2);
    *((_WORD *)v4 + 4) = *((_WORD *)a2 + 4);
    v7 = a3[7];
    v8 = (_QWORD *)((char *)v4 + v7);
    v9 = (uint64_t)a2 + v7;
    v10 = *(uint64_t *)((char *)a2 + v7);
    v11 = *(uint64_t *)((char *)a2 + v7 + 8);
    *v8 = v10;
    v8[1] = v11;
    swift_retain(v10);
    swift_retain(v11);
    v12 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
    v13 = (char *)v8 + v12;
    v14 = v9 + v12;
    v15 = type metadata accessor for NavigationPath(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[8];
    v17 = a3[9];
    v18 = (char *)v4 + v16;
    v19 = (uint64_t)a2 + v16;
    *(_OWORD *)v18 = *(_OWORD *)v19;
    v20 = *(_QWORD *)(v19 + 16);
    *((_QWORD *)v18 + 2) = v20;
    v21 = (char *)v4 + v17;
    v22 = (char *)a2 + v17;
    *v21 = *v22;
    v23 = *((_QWORD *)v22 + 1);
    *((_QWORD *)v21 + 1) = v23;
    v24 = a3[10];
    v25 = a3[11];
    v26 = (char *)v4 + v24;
    v27 = (uint64_t)a2 + v24;
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = *(_BYTE *)(v27 + 8);
    v28 = *(_QWORD *)(v27 + 16);
    *((_QWORD *)v26 + 2) = v28;
    v29 = (char *)v4 + v25;
    v30 = (char *)a2 + v25;
    *v29 = *v30;
    v31 = *((_QWORD *)v30 + 1);
    *((_QWORD *)v29 + 1) = v31;
    swift_retain(v20);
    swift_retain(v23);
    swift_retain(v28);
  }
  swift_retain(v31);
  return v4;
}

uint64_t sub_100040828(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_unknownObjectWeakDestroy(a1);
  v4 = (_QWORD *)(a1 + a2[7]);
  swift_release(*v4, v5);
  swift_release(v4[1], v6);
  v7 = (char *)v4 + *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v8 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(a1 + a2[8] + 16), v9);
  swift_release(*(_QWORD *)(a1 + a2[9] + 8), v10);
  swift_release(*(_QWORD *)(a1 + a2[10] + 16), v11);
  return swift_release(*(_QWORD *)(a1 + a2[11] + 8), v12);
}

uint64_t sub_1000408D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = swift_unknownObjectWeakCopyInit(a1, a2);
  *(_WORD *)(v6 + 8) = *(_WORD *)(a2 + 8);
  v7 = a3[7];
  v8 = (_QWORD *)(v6 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7);
  v11 = *(_QWORD *)(a2 + v7 + 8);
  *v8 = v10;
  v8[1] = v11;
  swift_retain(v10);
  swift_retain(v11);
  v12 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v13 = (char *)v8 + v12;
  v14 = v9 + v12;
  v15 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[8];
  v17 = a3[9];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_OWORD *)v18 = *(_OWORD *)v19;
  v20 = *(_QWORD *)(v19 + 16);
  *(_QWORD *)(v18 + 16) = v20;
  v21 = a1 + v17;
  v22 = a2 + v17;
  *(_BYTE *)v21 = *(_BYTE *)v22;
  v23 = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v21 + 8) = v23;
  v24 = a3[10];
  v25 = a3[11];
  v26 = a1 + v24;
  v27 = a2 + v24;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  v28 = *(_QWORD *)(v27 + 16);
  *(_QWORD *)(v26 + 16) = v28;
  v29 = a1 + v25;
  v30 = a2 + v25;
  *(_BYTE *)v29 = *(_BYTE *)v30;
  v31 = *(_QWORD *)(v30 + 8);
  *(_QWORD *)(v29 + 8) = v31;
  swift_retain(v20);
  swift_retain(v23);
  swift_retain(v28);
  swift_retain(v31);
  return a1;
}

uint64_t sub_100040A00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = swift_unknownObjectWeakCopyAssign();
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(v6 + 9) = *(_BYTE *)(a2 + 9);
  v7 = a3[7];
  v8 = (_QWORD *)(v6 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(v6 + v7);
  v11 = *(_QWORD *)(a2 + v7);
  *v8 = v11;
  swift_retain(v11);
  swift_release(v10, v12);
  v13 = *(_QWORD *)(v9 + 8);
  v14 = v8[1];
  v8[1] = v13;
  swift_retain(v13);
  swift_release(v14, v15);
  v16 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v17 = (char *)v8 + v16;
  v18 = v9 + v16;
  v19 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = a3[8];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  v23 = v21[2];
  v24 = v22[2];
  v21[2] = v24;
  swift_retain(v24);
  swift_release(v23, v25);
  v26 = a3[9];
  v27 = a1 + v26;
  v28 = a2 + v26;
  *(_BYTE *)v27 = *(_BYTE *)v28;
  v29 = *(_QWORD *)(v27 + 8);
  v30 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)(v27 + 8) = v30;
  swift_retain(v30);
  swift_release(v29, v31);
  v32 = a3[10];
  v33 = a1 + v32;
  v34 = (uint64_t *)(a2 + v32);
  v35 = *v34;
  *(_BYTE *)(v33 + 8) = *((_BYTE *)v34 + 8);
  *(_QWORD *)v33 = v35;
  v36 = *(_QWORD *)(v33 + 16);
  v37 = v34[2];
  *(_QWORD *)(v33 + 16) = v37;
  swift_retain(v37);
  swift_release(v36, v38);
  v39 = a3[11];
  v40 = a1 + v39;
  v41 = a2 + v39;
  *(_BYTE *)v40 = *(_BYTE *)v41;
  v42 = *(_QWORD *)(v40 + 8);
  v43 = *(_QWORD *)(v41 + 8);
  *(_QWORD *)(v40 + 8) = v43;
  swift_retain(v43);
  swift_release(v42, v44);
  return a1;
}

uint64_t sub_100040B80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = swift_unknownObjectWeakTakeInit();
  *(_WORD *)(v6 + 8) = *(_WORD *)(a2 + 8);
  v7 = a3[7];
  v8 = (_QWORD *)(v6 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = v10;
  v11 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v12 = (char *)v8 + v11;
  v13 = v9 + v11;
  v14 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[8];
  v16 = a3[9];
  v17 = a1 + v15;
  v18 = (__int128 *)(a2 + v15);
  v19 = *v18;
  *(_QWORD *)(v17 + 16) = *((_QWORD *)v18 + 2);
  *(_OWORD *)v17 = v19;
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  v20 = a3[10];
  v21 = a3[11];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  return a1;
}

uint64_t sub_100040C58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = swift_unknownObjectWeakTakeAssign();
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(v6 + 9) = *(_BYTE *)(a2 + 9);
  v7 = a3[7];
  v8 = (_QWORD *)(v6 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(v6 + v7);
  *v8 = *(_QWORD *)(a2 + v7);
  swift_release(v10, v11);
  v12 = v8[1];
  v8[1] = *(_QWORD *)(v9 + 8);
  swift_release(v12, v13);
  v14 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v15 = (char *)v8 + v14;
  v16 = v9 + v14;
  v17 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = a3[8];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  v21 = *(_QWORD *)(v19 + 16);
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
  swift_release(v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_BYTE *)v24 = *(_BYTE *)v25;
  v26 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  swift_release(v26, v27);
  v28 = a3[10];
  v29 = a1 + v28;
  v30 = a2 + v28;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  v31 = *(_QWORD *)(v29 + 16);
  *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
  swift_release(v31, v32);
  v33 = a3[11];
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_BYTE *)v34 = *(_BYTE *)v35;
  v36 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
  swift_release(v36, v37);
  return a1;
}

uint64_t sub_100040DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100040DAC);
}

uint64_t sub_100040DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_100004EAC(&qword_1000C9E90);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 16);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100040E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100040E4C);
}

uint64_t sub_100040E4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100004EAC(&qword_1000C9E90);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 28), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 16) = a2;
  return result;
}

uint64_t type metadata accessor for PreferredContentSizeModifier(uint64_t a1)
{
  return sub_1000469DC(a1, (uint64_t *)&unk_1000C9EF0, (uint64_t)&nominal type descriptor for PreferredContentSizeModifier);
}

void sub_100040EE4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = "\b";
  v4[1] = &unk_100093C58;
  v4[2] = &unk_100093C58;
  sub_100032690(319, (unint64_t *)&qword_1000C9F00, (uint64_t (*)(uint64_t))&type metadata accessor for NavigationPath, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_100093C70;
    v4[5] = &unk_100093C88;
    v4[6] = &unk_100093C70;
    v4[7] = &unk_100093C88;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
  }
}

ValueMetadata *type metadata accessor for ParentPaddingViewModifier()
{
  return &type metadata for ParentPaddingViewModifier;
}

uint64_t sub_100040FA4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B08C8, 1);
}

uint64_t sub_100040FB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t *v24;
  uint64_t v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;

  v66 = a1;
  v1 = type metadata accessor for CommonUIBlendModifier(0);
  v2 = __chkstk_darwin(v1);
  v63 = (uint64_t *)((char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  v64 = (uint64_t)&v57 - v4;
  v62 = sub_100004EAC(&qword_1000CA158);
  __chkstk_darwin(v62);
  v65 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004EAC(&qword_1000CA160);
  __chkstk_darwin(v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004EAC(&qword_1000CA168);
  v60 = *(_QWORD *)(v13 - 8);
  v61 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100004EAC(&qword_1000CA170);
  __chkstk_darwin(v58);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100004EAC(&qword_1000CA178);
  v18 = __chkstk_darwin(v59);
  v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = ButtonStyleConfiguration.label.getter(v18);
  v22 = static Font.footnote.getter(v21);
  KeyPath = swift_getKeyPath(&unk_100094038);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, v9, v6);
  v24 = (uint64_t *)&v12[*(int *)(v10 + 36)];
  *v24 = KeyPath;
  v24[1] = v22;
  v25 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v26 = static Font.Weight.bold.getter(v25);
  v27 = sub_100046DE0();
  View.fontWeight(_:)(*(_QWORD *)&v26, 0, v10, v27);
  sub_10000AE2C((uint64_t)v12, &qword_1000CA160);
  if (qword_1000C7450 != -1)
    swift_once(&qword_1000C7450, sub_1000421BC);
  v28 = qword_1000D1D08;
  v29 = v60;
  v30 = v61;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v17, v15, v61);
  *(_QWORD *)&v17[*(int *)(v58 + 36)] = v28;
  v31 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
  swift_retain(v28);
  v32 = v31(v15, v30);
  LOBYTE(v28) = static Edge.Set.all.getter(v32);
  v33 = EdgeInsets.init(_all:)(10.0);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  sub_10000AD78((uint64_t)v17, (uint64_t)v20, &qword_1000CA170);
  v40 = &v20[*(int *)(v59 + 36)];
  *v40 = v28;
  *((double *)v40 + 1) = v33;
  *((_QWORD *)v40 + 2) = v35;
  *((_QWORD *)v40 + 3) = v37;
  *((_QWORD *)v40 + 4) = v39;
  v40[40] = 0;
  sub_10000AE2C((uint64_t)v17, &qword_1000CA170);
  if (qword_1000C7458 != -1)
    swift_once(&qword_1000C7458, sub_100042230);
  v41 = qword_1000D1D10;
  v42 = swift_getKeyPath(&unk_100093FA8);
  v43 = v63;
  *v63 = v42;
  v44 = sub_100004EAC(&qword_1000CA000);
  swift_storeEnumTagMultiPayload(v43, v44, 0);
  v45 = (uint64_t)v43;
  v46 = v64;
  sub_100046A54(v45, v64, type metadata accessor for CommonUIBlendModifier);
  v47 = (uint64_t)v65;
  sub_100015184(v46, (uint64_t)&v65[*(int *)(v62 + 36)], type metadata accessor for CommonUIBlendModifier);
  *(_QWORD *)v47 = v41;
  *(_WORD *)(v47 + 8) = 256;
  swift_retain(v41);
  v48 = sub_1000151C8(v46, type metadata accessor for CommonUIBlendModifier);
  v49 = static Alignment.center.getter(v48);
  v51 = v50;
  v52 = sub_100004EAC(&qword_1000CA190);
  v53 = v66;
  v54 = v66 + *(int *)(v52 + 36);
  sub_10000AD78(v47, v54, &qword_1000CA158);
  v55 = (uint64_t *)(v54 + *(int *)(sub_100004EAC(&qword_1000CA198) + 36));
  *v55 = v49;
  v55[1] = v51;
  sub_10000AD78((uint64_t)v20, v53, &qword_1000CA178);
  sub_10000AE2C(v47, &qword_1000CA158);
  return sub_10000AE2C((uint64_t)v20, &qword_1000CA178);
}

uint64_t sub_100041460@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  BOOL v35;
  double v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  char *v50;
  uint64_t v51;

  v47 = a1;
  v51 = a2;
  v49 = (unsigned __int16)a1;
  v2 = sub_100004EAC(&qword_1000CA140);
  __chkstk_darwin(v2);
  v50 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004EAC(&qword_1000CA428);
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100004EAC(&qword_1000CA430);
  __chkstk_darwin(v44);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100004EAC(&qword_1000CA438);
  __chkstk_darwin(v46);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100004EAC(&qword_1000CA440);
  __chkstk_darwin(v45);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100004EAC(&qword_1000CA448);
  v17 = __chkstk_darwin(v48);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = ButtonStyleConfiguration.label.getter(v17);
  v21 = static Edge.Set.all.getter(v20);
  v22 = EdgeInsets.init(_all:)(8.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v7, v4);
  v29 = &v10[*(int *)(v8 + 36)];
  *v29 = v21;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  v30 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v47 & 0x100) != 0)
    v31 = static Color.primary.getter(v30);
  else
    v31 = static Color.accentColor.getter(v30);
  v32 = v31;
  sub_10000AD78((uint64_t)v10, (uint64_t)v12, &qword_1000CA428);
  *(_QWORD *)&v12[*(int *)(v44 + 36)] = v32;
  sub_10000AE2C((uint64_t)v10, &qword_1000CA428);
  KeyPath = swift_getKeyPath(&unk_100094230);
  v34 = swift_allocObject(&unk_1000C0060, 17, 7);
  v35 = (v49 & 1) == 0;
  *(_BYTE *)(v34 + 16) = v49 & 1;
  if (v35)
    v36 = 1.0;
  else
    v36 = 0.2;
  sub_10000AD78((uint64_t)v12, (uint64_t)v14, &qword_1000CA430);
  v37 = (uint64_t *)&v14[*(int *)(v46 + 36)];
  *v37 = KeyPath;
  v37[1] = (uint64_t)sub_10000AC78;
  v37[2] = v34;
  sub_10000AE2C((uint64_t)v12, &qword_1000CA430);
  sub_10000AD78((uint64_t)v14, (uint64_t)v16, &qword_1000CA438);
  *(double *)&v16[*(int *)(v45 + 36)] = v36;
  sub_10000AE2C((uint64_t)v14, &qword_1000CA438);
  v38 = type metadata accessor for Font.Design(0);
  v39 = (uint64_t)v50;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v50, 1, 1, v38);
  v40 = static Font.system(size:weight:design:)(0, 1, v39, 15.0);
  sub_10000AE2C(v39, &qword_1000CA140);
  v41 = swift_getKeyPath(&unk_100094038);
  sub_10000AD78((uint64_t)v16, (uint64_t)v19, &qword_1000CA440);
  v42 = (uint64_t *)&v19[*(int *)(v48 + 36)];
  *v42 = v41;
  v42[1] = v40;
  sub_10000AE2C((uint64_t)v16, &qword_1000CA440);
  return sub_10000AC80((uint64_t)v19, v51, &qword_1000CA448);
}

uint64_t sub_10004186C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  int v2;

  if (v1[1])
    v2 = 256;
  else
    v2 = 0;
  return sub_100041460(v2 | *v1, a1);
}

uint64_t sub_100041888@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v44;
  uint64_t KeyPath;
  uint64_t v46;
  double v47;
  uint64_t *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int v58;
  uint64_t v59;

  v58 = a1;
  v59 = a2;
  v56 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v56);
  v57 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100004EAC(&qword_1000CA428);
  __chkstk_darwin(v50);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100004EAC(&qword_1000CA430);
  __chkstk_darwin(v51);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100004EAC(&qword_1000CA450);
  __chkstk_darwin(v52);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100004EAC(&qword_1000CA458);
  __chkstk_darwin(v53);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100004EAC(&qword_1000CA460);
  __chkstk_darwin(v55);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100004EAC(&qword_1000CA468);
  v17 = __chkstk_darwin(v54);
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = ButtonStyleConfiguration.label.getter(v17);
  v21 = static Edge.Set.all.getter(v20);
  v22 = EdgeInsets.init(_all:)(6.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v6, v3);
  v29 = &v8[*(int *)(v50 + 36)];
  *v29 = v21;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (qword_1000C7438 != -1)
    swift_once(&qword_1000C7438, sub_10004215C);
  v30 = qword_1000D1CF0;
  sub_10000AD78((uint64_t)v8, (uint64_t)v10, &qword_1000CA428);
  *(_QWORD *)&v10[*(int *)(v51 + 36)] = v30;
  swift_retain(v30);
  v31 = sub_10000AE2C((uint64_t)v8, &qword_1000CA428);
  v32 = static Color.blue.getter(v31);
  v33 = static Edge.Set.all.getter(v32);
  sub_10000AD78((uint64_t)v10, (uint64_t)v12, &qword_1000CA430);
  v34 = &v12[*(int *)(v52 + 36)];
  *(_QWORD *)v34 = v32;
  v34[8] = v33;
  sub_10000AE2C((uint64_t)v10, &qword_1000CA430);
  v35 = v57;
  v36 = &v57[*(int *)(v56 + 20)];
  v37 = enum case for RoundedCornerStyle.continuous(_:);
  v38 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v36, v37, v38);
  __asm { FMOV            V0.2D, #6.0 }
  *v35 = _Q0;
  v44 = (uint64_t)&v14[*(int *)(v53 + 36)];
  sub_100015184((uint64_t)v35, v44, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v44 + *(int *)(sub_100004EAC(&qword_1000CA470) + 36)) = 256;
  sub_10000AD78((uint64_t)v12, (uint64_t)v14, &qword_1000CA450);
  sub_1000151C8((uint64_t)v35, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_10000AE2C((uint64_t)v12, &qword_1000CA450);
  KeyPath = swift_getKeyPath(&unk_100094230);
  v46 = swift_allocObject(&unk_1000C0088, 17, 7);
  _ZF = (v58 & 1) == 0;
  *(_BYTE *)(v46 + 16) = v58 & 1;
  if (_ZF)
    v47 = 1.0;
  else
    v47 = 0.2;
  sub_10000AD78((uint64_t)v14, (uint64_t)v16, &qword_1000CA458);
  v48 = (uint64_t *)&v16[*(int *)(v55 + 36)];
  *v48 = KeyPath;
  v48[1] = (uint64_t)sub_100015794;
  v48[2] = v46;
  sub_10000AE2C((uint64_t)v14, &qword_1000CA458);
  sub_10000AD78((uint64_t)v16, (uint64_t)v19, &qword_1000CA460);
  *(double *)&v19[*(int *)(v54 + 36)] = v47;
  sub_10000AE2C((uint64_t)v16, &qword_1000CA460);
  return sub_10000AC80((uint64_t)v19, v59, &qword_1000CA468);
}

uint64_t sub_100041D4C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;

  return sub_100041888(*v1, a1);
}

uint64_t sub_100041D54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = a2;
  v38 = type metadata accessor for AccessibilityTraits(0);
  v36 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v35 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004EAC(&qword_1000CA1A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004EAC(&qword_1000CA1A8);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004EAC(&qword_1000CA1B0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100004EAC(&qword_1000CA1B8);
  __chkstk_darwin(v34);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100094098);
  v17 = sub_100004EAC(&qword_1000CA1C0);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v6, a1, v17);
  v19 = &v6[*(int *)(v4 + 36)];
  *(_QWORD *)v19 = KeyPath;
  v19[8] = 1;
  v20 = static Font.title2.getter(v18);
  v21 = swift_getKeyPath(&unk_100094038);
  sub_10000AD78((uint64_t)v6, (uint64_t)v9, &qword_1000CA1A0);
  v22 = (uint64_t *)&v9[*(int *)(v7 + 36)];
  *v22 = v21;
  v22[1] = v20;
  v23 = sub_10000AE2C((uint64_t)v6, &qword_1000CA1A0);
  v24 = static Font.Weight.semibold.getter(v23);
  v25 = sub_100046EC8();
  View.fontWeight(_:)(*(_QWORD *)&v24, 0, v7, v25);
  sub_10000AE2C((uint64_t)v9, &qword_1000CA1A8);
  if (qword_1000C7440 != -1)
    swift_once(&qword_1000C7440, sub_100042194);
  v26 = qword_1000D1CF8;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v13, v10);
  v27 = v34;
  *(_QWORD *)&v15[*(int *)(v34 + 36)] = v26;
  v28 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  swift_retain(v26);
  v29 = v28(v13, v10);
  v30 = v35;
  static AccessibilityTraits.isHeader.getter(v29);
  v31 = sub_100047BD8((unint64_t *)&unk_1000CA1F0, &qword_1000CA1B8, &qword_1000CA1A8, (uint64_t (*)(void))sub_100046EC8);
  View.accessibility(addTraits:)(v30, v27, v31);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v30, v38);
  return sub_10000AE2C((uint64_t)v15, &qword_1000CA1B8);
}

double sub_100042068()
{
  double result;

  result = 0.0;
  __asm { FMOV            V1.2D, #16.0 }
  xmmword_1000D1CC0 = _Q1;
  *(_OWORD *)&qword_1000D1CD0 = xmmword_100094270;
  return result;
}

__n128 sub_100042084()
{
  __n128 result;

  __asm { FMOV            V0.2D, #10.0 }
  xmmword_1000D1CE0 = (__int128)result;
  return result;
}

__n128 sub_100042094@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;

  v2 = a1;
  if (qword_1000C7428 != -1)
    a1 = swift_once(&qword_1000C7428, sub_100042068);
  v10 = xmmword_1000D1CC0;
  v4 = qword_1000D1CD0;
  v5 = unk_1000D1CD8;
  v6 = static Edge.Set.all.getter(a1);
  v7 = sub_100004EAC(&qword_1000C9F48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v2, v7);
  v8 = a2 + *(int *)(sub_100004EAC(&qword_1000C9F50) + 36);
  *(_BYTE *)v8 = v6;
  result = (__n128)v10;
  *(_OWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v8 + 24) = v4;
  *(_QWORD *)(v8 + 32) = v5;
  *(_BYTE *)(v8 + 40) = 0;
  return result;
}

uint64_t sub_10004215C()
{
  uint64_t result;

  result = Color.init(_:bundle:)(0xD000000000000011, 0x80000001000AC590, 0);
  qword_1000D1CF0 = result;
  return result;
}

uint64_t sub_100042194(uint64_t a1)
{
  return sub_100042258(a1, (SEL *)&selRef_labelColor, &qword_1000D1CF8);
}

uint64_t sub_1000421A8(uint64_t a1)
{
  return sub_1000421CC(0.65, a1, &qword_1000D1D00);
}

uint64_t sub_1000421BC(uint64_t a1)
{
  return sub_1000421CC(0.5, a1, &qword_1000D1D08);
}

uint64_t sub_1000421CC(double a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;

  if (qword_1000C7440 != -1)
    swift_once(&qword_1000C7440, sub_100042194);
  result = Color.opacity(_:)(qword_1000D1CF8, a1);
  *a3 = result;
  return result;
}

uint64_t sub_100042230(uint64_t a1)
{
  return sub_100042258(a1, (SEL *)&selRef_secondarySystemFillColor, &qword_1000D1D10);
}

uint64_t sub_100042244(uint64_t a1)
{
  return sub_100042258(a1, (SEL *)&selRef_tertiarySystemFillColor, &qword_1000D1D18);
}

uint64_t sub_100042258(uint64_t a1, SEL *a2, uint64_t *a3)
{
  id v4;
  uint64_t result;

  v4 = objc_msgSend((id)objc_opt_self(UIColor), *a2);
  result = Color.init(_:)(v4);
  *a3 = result;
  return result;
}

uint64_t sub_10004229C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;

  v54 = a1;
  v1 = type metadata accessor for LabelStyleConfiguration.Title(0);
  v52 = *(_QWORD *)(v1 - 8);
  v53 = v1;
  __chkstk_darwin(v1);
  v48 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100004EAC(&qword_1000CA138);
  v3 = __chkstk_darwin(v51);
  v49 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v50 = (uint64_t)&v42 - v5;
  v6 = sub_100004EAC(&qword_1000CA140);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LabelStyleConfiguration.Icon(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004EAC(&qword_1000CA148);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v42 = (uint64_t)&v42 - v18;
  LabelStyleConfiguration.icon.getter(v17);
  v19 = type metadata accessor for Font.Design(0);
  v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v43(v8, 1, 1, v19);
  v20 = static Font.system(size:weight:design:)(0, 1, v8, 22.0);
  sub_10000AE2C((uint64_t)v8, &qword_1000CA140);
  KeyPath = swift_getKeyPath(&unk_100094038);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v12, v9);
  v22 = (uint64_t *)&v16[*(int *)(v13 + 36)];
  *v22 = KeyPath;
  v22[1] = v20;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v23 = v42;
  v24 = sub_10000AC80((uint64_t)v16, v42, &qword_1000CA148);
  v25 = static Alignment.center.getter(v24);
  v27 = _FrameLayout.init(width:height:alignment:)(&v55, 0x4010000000000000, 0, 0, 1, v25, v26);
  v47 = v55;
  v46 = v56;
  v28 = v57;
  LOBYTE(v20) = v58;
  v44 = v60;
  v45 = v59;
  v29 = v48;
  LabelStyleConfiguration.title.getter(v27);
  v43(v8, 1, 1, v19);
  v30 = static Font.system(size:weight:design:)(0, 1, v8, 17.0);
  sub_10000AE2C((uint64_t)v8, &qword_1000CA140);
  v31 = swift_getKeyPath(&unk_100094038);
  v33 = v52;
  v32 = v53;
  v34 = (uint64_t)v49;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v49, v29, v53);
  v35 = (uint64_t *)(v34 + *(int *)(v51 + 36));
  *v35 = v31;
  v35[1] = v30;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v29, v32);
  v36 = v50;
  sub_10000AC80(v34, v50, &qword_1000CA138);
  sub_10000AD78(v23, (uint64_t)v16, &qword_1000CA148);
  sub_10000AD78(v36, v34, &qword_1000CA138);
  v37 = v54;
  sub_10000AD78((uint64_t)v16, v54, &qword_1000CA148);
  v38 = sub_100004EAC(&qword_1000CA150);
  v39 = v37 + *(int *)(v38 + 48);
  *(_QWORD *)v39 = 0;
  *(_BYTE *)(v39 + 8) = 1;
  *(_QWORD *)(v39 + 16) = v47;
  *(_BYTE *)(v39 + 24) = v46;
  *(_QWORD *)(v39 + 32) = v28;
  *(_BYTE *)(v39 + 40) = v20;
  v40 = v44;
  *(_QWORD *)(v39 + 48) = v45;
  *(_QWORD *)(v39 + 56) = v40;
  sub_10000AD78(v34, v37 + *(int *)(v38 + 64), &qword_1000CA138);
  sub_10000AE2C(v36, &qword_1000CA138);
  sub_10000AE2C(v23, &qword_1000CA148);
  sub_10000AE2C(v34, &qword_1000CA138);
  return sub_10000AE2C((uint64_t)v16, &qword_1000CA148);
}

uint64_t sub_1000426C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100045E28(a1, (uint64_t (*)(void))&static VerticalAlignment.center.getter, &qword_1000CA130, (uint64_t (*)(uint64_t))sub_10004229C, a2);
}

uint64_t sub_1000426E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD v59[2];
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  uint64_t v69;

  v59[1] = a1;
  v69 = a2;
  v2 = type metadata accessor for CommonUIBlendModifier(0);
  __chkstk_darwin(v2);
  v68 = (_QWORD *)((char *)v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for Capsule(0);
  __chkstk_darwin(v4);
  v65 = (char *)v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100004EAC(&qword_1000CA0E0);
  __chkstk_darwin(v63);
  v66 = (uint64_t)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100004EAC(&qword_1000CA0E8);
  __chkstk_darwin(v64);
  v67 = (char *)v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PlainTextFieldStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004EAC(&qword_1000CA0F0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004EAC(&qword_1000CA0F8);
  __chkstk_darwin(v16);
  v18 = (char *)v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59[0] = sub_100004EAC(&qword_1000CA100);
  __chkstk_darwin(v59[0]);
  v62 = (uint64_t)v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100004EAC(&qword_1000CA108);
  v20 = __chkstk_darwin(v60);
  v61 = (char *)v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  PlainTextFieldStyle.init()(v20);
  v22 = sub_100004EAC(&qword_1000CA110);
  v23 = sub_10000B254(&qword_1000CA118, &qword_1000CA110, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v24 = sub_100005900(&qword_1000CA120, (uint64_t (*)(uint64_t))&type metadata accessor for PlainTextFieldStyle, (uint64_t)&protocol conformance descriptor for PlainTextFieldStyle);
  View.textFieldStyle<A>(_:)(v11, v22, v8, v23, v24);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (qword_1000C7440 != -1)
    swift_once(&qword_1000C7440, sub_100042194);
  v25 = qword_1000D1CF8;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v18, v15, v12);
  *(_QWORD *)&v18[*(int *)(v16 + 36)] = v25;
  v26 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
  swift_retain(v25);
  v27 = v26(v15, v12);
  v28 = static Edge.Set.all.getter(v27);
  v29 = Edge.Set.init(rawValue:)(0);
  v30 = v29;
  v31 = Edge.Set.init(rawValue:)(v29);
  if (Edge.Set.init(rawValue:)(v31 & v28) != v28)
    LOBYTE(v30) = Edge.Set.init(rawValue:)(v30 | v28);
  v32 = EdgeInsets.init(_all:)(10.0);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v39 = v62;
  sub_10000AD78((uint64_t)v18, v62, &qword_1000CA0F8);
  v40 = v39 + *(int *)(v59[0] + 36);
  *(_BYTE *)v40 = v30;
  *(double *)(v40 + 8) = v32;
  *(_QWORD *)(v40 + 16) = v34;
  *(_QWORD *)(v40 + 24) = v36;
  *(_QWORD *)(v40 + 32) = v38;
  *(_BYTE *)(v40 + 40) = 0;
  sub_10000AE2C((uint64_t)v18, &qword_1000CA0F8);
  v41 = enum case for RoundedCornerStyle.continuous(_:);
  v42 = type metadata accessor for RoundedCornerStyle(0);
  v43 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 104))(v65, v41, v42);
  if (qword_1000C7458 != -1)
    swift_once(&qword_1000C7458, sub_100042230);
  v44 = qword_1000D1D10;
  v45 = v66;
  sub_100015184(v43, v66, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
  v46 = v63;
  *(_QWORD *)(v45 + *(int *)(v63 + 52)) = v44;
  *(_WORD *)(v45 + *(int *)(v46 + 56)) = 256;
  swift_retain(v44);
  sub_1000151C8(v43, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
  KeyPath = swift_getKeyPath(&unk_100093FA8);
  v48 = (uint64_t)v68;
  *v68 = KeyPath;
  v49 = sub_100004EAC(&qword_1000CA000);
  swift_storeEnumTagMultiPayload(v48, v49, 0);
  v50 = (uint64_t)v67;
  sub_100046A54(v48, (uint64_t)&v67[*(int *)(v64 + 36)], type metadata accessor for CommonUIBlendModifier);
  v51 = sub_10000AC80(v45, v50, &qword_1000CA0E0);
  v52 = static Alignment.center.getter(v51);
  v54 = v53;
  v55 = (uint64_t)v61;
  v56 = (uint64_t)&v61[*(int *)(v60 + 36)];
  sub_10000AD78(v50, v56, &qword_1000CA0E8);
  v57 = (uint64_t *)(v56 + *(int *)(sub_100004EAC(&qword_1000CA128) + 36));
  *v57 = v52;
  v57[1] = v54;
  sub_10000AD78(v39, v55, &qword_1000CA100);
  sub_10000AE2C(v50, &qword_1000CA0E8);
  sub_10000AE2C(v39, &qword_1000CA100);
  return sub_10000AC80(v55, v69, &qword_1000CA108);
}

uint64_t sub_100042C70@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v72 = a2;
  v3 = type metadata accessor for LabelStyleConfiguration.Title(0);
  v68 = *(_QWORD *)(v3 - 8);
  v69 = v3;
  __chkstk_darwin(v3);
  v67 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100004EAC(&qword_1000CA018);
  v5 = __chkstk_darwin(v66);
  v71 = (uint64_t)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v65 = (char *)&v58 - v8;
  __chkstk_darwin(v7);
  v70 = (uint64_t)&v58 - v9;
  v61 = type metadata accessor for Image.Scale(0);
  v10 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LabelStyleConfiguration.Icon(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100004EAC(&qword_1000CA020);
  __chkstk_darwin(v58);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100004EAC(&qword_1000CA028);
  __chkstk_darwin(v59);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100004EAC((uint64_t *)&unk_1000CA030);
  v21 = __chkstk_darwin(v60);
  v63 = (uint64_t)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v58 - v24;
  v26 = __chkstk_darwin(v23);
  v62 = (uint64_t)&v58 - v27;
  v28 = LabelStyleConfiguration.icon.getter(v26);
  v64 = a1;
  if ((a1 & 1) != 0)
  {
    v29 = static Color.white.getter(v28);
  }
  else
  {
    if (qword_1000C7448 != -1)
      swift_once(&qword_1000C7448, sub_1000421A8);
    v29 = qword_1000D1D00;
    swift_retain(qword_1000D1D00);
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v18, v16, v13);
  *(_QWORD *)&v18[*(int *)(v58 + 36)] = v29;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v30 = v61;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for Image.Scale.large(_:), v61);
  KeyPath = swift_getKeyPath(&unk_100093FD8);
  v32 = (uint64_t *)&v20[*(int *)(v59 + 36)];
  v33 = sub_100004EAC((uint64_t *)&unk_1000CB750);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v32 + *(int *)(v33 + 28), v12, v30);
  *v32 = KeyPath;
  sub_10000AD78((uint64_t)v18, (uint64_t)v20, &qword_1000CA020);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v30);
  v34 = sub_10000AE2C((uint64_t)v18, &qword_1000CA020);
  LOBYTE(KeyPath) = static Edge.Set.vertical.getter(v34);
  v35 = EdgeInsets.init(_all:)(2.0);
  v37 = v36;
  v39 = v38;
  v41 = v40;
  sub_10000AD78((uint64_t)v20, (uint64_t)v25, &qword_1000CA028);
  v42 = &v25[*(int *)(v60 + 36)];
  *v42 = KeyPath;
  *((double *)v42 + 1) = v35;
  *((_QWORD *)v42 + 2) = v37;
  *((_QWORD *)v42 + 3) = v39;
  *((_QWORD *)v42 + 4) = v41;
  v42[40] = 0;
  sub_10000AE2C((uint64_t)v20, &qword_1000CA028);
  v43 = v62;
  v44 = sub_10000AC80((uint64_t)v25, v62, (uint64_t *)&unk_1000CA030);
  v45 = v67;
  v46 = LabelStyleConfiguration.title.getter(v44);
  if ((v64 & 1) != 0)
  {
    v47 = static Color.white.getter(v46);
  }
  else
  {
    if (qword_1000C7440 != -1)
      swift_once(&qword_1000C7440, sub_100042194);
    v47 = qword_1000D1CF8;
    swift_retain(qword_1000D1CF8);
  }
  v49 = v68;
  v48 = v69;
  v50 = v65;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v65, v45, v69);
  *(_QWORD *)&v50[*(int *)(v66 + 36)] = v47;
  (*(void (**)(char *, uint64_t))(v49 + 8))(v45, v48);
  v51 = (uint64_t)v50;
  v52 = v70;
  sub_10000AC80(v51, v70, &qword_1000CA018);
  v53 = v63;
  sub_10000AD78(v43, v63, (uint64_t *)&unk_1000CA030);
  v54 = v71;
  sub_10000AD78(v52, v71, &qword_1000CA018);
  v55 = v72;
  sub_10000AD78(v53, v72, (uint64_t *)&unk_1000CA030);
  v56 = sub_100004EAC(&qword_1000CA040);
  sub_10000AD78(v54, v55 + *(int *)(v56 + 48), &qword_1000CA018);
  sub_10000AE2C(v52, &qword_1000CA018);
  sub_10000AE2C(v43, (uint64_t *)&unk_1000CA030);
  sub_10000AE2C(v54, &qword_1000CA018);
  return sub_10000AE2C(v53, (uint64_t *)&unk_1000CA030);
}

uint64_t sub_1000431C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  int v4;
  uint64_t v5;

  v4 = *v2;
  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v5 = sub_100004EAC(&qword_1000CA010);
  return sub_100042C70(v4, a2 + *(int *)(v5 + 44));
}

uint64_t sub_10004321C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD *, uint64_t);
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v59 = a1;
  v66 = a2;
  v2 = type metadata accessor for DynamicTypeSize(0);
  v61 = *(_QWORD *)(v2 - 8);
  v62 = v2;
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100004EAC(&qword_1000CA048);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v58 - v9;
  v60 = sub_100004EAC(&qword_1000CA050);
  __chkstk_darwin(v60);
  v12 = (char *)v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100004EAC(&qword_1000CA058);
  __chkstk_darwin(v63);
  v14 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100004EAC(&qword_1000CA060);
  v15 = __chkstk_darwin(v64);
  v65 = (uint64_t)v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = static Alignment.center.getter(v15);
  v19 = v18;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  v8[40] = 1;
  v20 = &v8[*(int *)(v5 + 48)];
  *(_QWORD *)v20 = swift_getKeyPath(&unk_100094008);
  v21 = sub_100004EAC(&qword_1000C74D0);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  *v8 = 1;
  *((_QWORD *)v8 + 1) = v17;
  *((_QWORD *)v8 + 2) = v19;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  v8[40] = 1;
  sub_100043670(v58[1], v59, &v8[*(int *)(v5 + 44)]);
  v22 = sub_10000AC80((uint64_t)v8, (uint64_t)v10, &qword_1000CA048);
  LOBYTE(v20) = static Edge.Set.bottom.getter(v22);
  type metadata accessor for SmallIconTitleLabelStyle(0);
  v23 = sub_100046790(&qword_1000C74D0, (uint64_t (*)(_QWORD))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, v4);
  DynamicTypeSize.isAccessibilitySize.getter(v23);
  v24 = v62;
  v25 = *(void (**)(_QWORD *, uint64_t))(v61 + 8);
  v25(v4, v62);
  v26 = EdgeInsets.init(_all:)(6.0);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_10000AD78((uint64_t)v10, (uint64_t)v12, &qword_1000CA048);
  v33 = &v12[*(int *)(v60 + 36)];
  *v33 = (char)v20;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  v34 = sub_10000AE2C((uint64_t)v10, &qword_1000CA048);
  v35 = static Edge.Set.top.getter(v34);
  v36 = sub_100046790(&qword_1000C74D0, (uint64_t (*)(_QWORD))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, v4);
  LOBYTE(v19) = DynamicTypeSize.isAccessibilitySize.getter(v36);
  v25(v4, v24);
  v37 = 0.0;
  if ((v19 & 1) != 0)
    v37 = 6.0;
  v38 = EdgeInsets.init(_all:)(v37);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  sub_10000AD78((uint64_t)v12, (uint64_t)v14, &qword_1000CA050);
  v45 = &v14[*(int *)(v63 + 36)];
  *v45 = v35;
  *((double *)v45 + 1) = v38;
  *((_QWORD *)v45 + 2) = v40;
  *((_QWORD *)v45 + 3) = v42;
  *((_QWORD *)v45 + 4) = v44;
  v45[40] = 0;
  v46 = sub_10000AE2C((uint64_t)v12, &qword_1000CA050);
  v47 = static Edge.Set.horizontal.getter(v46);
  if (qword_1000C7490 != -1)
    swift_once(&qword_1000C7490, sub_10006C3C4);
  v48 = EdgeInsets.init(_all:)(*(double *)&qword_1000D1DC0);
  v50 = v49;
  v52 = v51;
  v54 = v53;
  v55 = v65;
  sub_10000AD78((uint64_t)v14, v65, &qword_1000CA058);
  v56 = v55 + *(int *)(v64 + 36);
  *(_BYTE *)v56 = v47;
  *(double *)(v56 + 8) = v48;
  *(_QWORD *)(v56 + 16) = v50;
  *(_QWORD *)(v56 + 24) = v52;
  *(_QWORD *)(v56 + 32) = v54;
  *(_BYTE *)(v56 + 40) = 0;
  sub_10000AE2C((uint64_t)v14, &qword_1000CA058);
  return sub_10000AC80(v55, v66, &qword_1000CA060);
}

uint64_t sub_100043670@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD *, uint64_t);
  uint64_t v34;
  void (*v35)(_QWORD *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  double v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  int *v93;
  char *v94;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  __int128 v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  char v130;
  __int128 v131;
  uint64_t v132;
  char v133;

  v127 = a2;
  v122 = a3;
  v114 = type metadata accessor for LabelStyleConfiguration.Title(0);
  v111 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v107 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100004EAC(&qword_1000CA018);
  __chkstk_darwin(v108);
  v110 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100004EAC(&qword_1000CA068);
  __chkstk_darwin(v109);
  v113 = (uint64_t)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100004EAC(&qword_1000CA070);
  __chkstk_darwin(v116);
  v115 = (uint64_t)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_100004EAC(&qword_1000CA078);
  v118 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v117 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_100004EAC(&qword_1000CA080);
  v9 = __chkstk_darwin(v112);
  v121 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v120 = (uint64_t)&v96 - v11;
  v98 = type metadata accessor for Image.Scale(0);
  v104 = *(_QWORD *)(v98 - 8);
  v12 = __chkstk_darwin(v98);
  v97 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v103 = (uint64_t)&v96 - v14;
  v15 = type metadata accessor for LabelStyleConfiguration.Icon(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100004EAC(&qword_1000CA020);
  __chkstk_darwin(v96);
  v20 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100004EAC(&qword_1000CA028);
  __chkstk_darwin(v102);
  v22 = (char *)&v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100004EAC((uint64_t *)&unk_1000CA030);
  __chkstk_darwin(v99);
  v100 = (uint64_t)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100004EAC(&qword_1000CA088);
  v24 = __chkstk_darwin(v101);
  v126 = (uint64_t)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v125 = (uint64_t)&v96 - v26;
  v27 = type metadata accessor for DynamicTypeSize(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (uint64_t *)((char *)&v96 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = *(int *)(type metadata accessor for SmallIconTitleLabelStyle(0) + 20);
  *(_QWORD *)&v106 = a1;
  v123 = a1 + v31;
  v32 = sub_100046790(&qword_1000C74D0, (uint64_t (*)(_QWORD))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, v30);
  v105 = DynamicTypeSize.isAccessibilitySize.getter(v32);
  v33 = *(void (**)(_QWORD *, uint64_t))(v28 + 8);
  v124 = v27;
  v34 = v27;
  v35 = v33;
  v36 = ((uint64_t (*)(_QWORD *, uint64_t))v33)(v30, v34);
  LabelStyleConfiguration.icon.getter(v36);
  if (qword_1000C7448 != -1)
    swift_once(&qword_1000C7448, sub_1000421A8);
  v37 = qword_1000D1D00;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v20, v18, v15);
  *(_QWORD *)&v20[*(int *)(v96 + 36)] = v37;
  v38 = *(void (**)(char *, uint64_t))(v16 + 8);
  swift_retain(v37);
  v38(v18, v15);
  sub_100046790(&qword_1000C74D0, (uint64_t (*)(_QWORD))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, v30);
  v39 = v104;
  v40 = (uint64_t)v97;
  v41 = v98;
  (*(void (**)(char *, _QWORD, uint64_t))(v104 + 104))(v97, enum case for Image.Scale.medium(_:), v98);
  v42 = v103;
  sub_100050CA4(v40, v103);
  v43 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  v43(v40, v41);
  v35(v30, v124);
  KeyPath = swift_getKeyPath(&unk_100093FD8);
  v45 = *(int *)(v102 + 36);
  v102 = (uint64_t)v35;
  v46 = (uint64_t *)&v22[v45];
  v47 = sub_100004EAC((uint64_t *)&unk_1000CB750);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))((char *)v46 + *(int *)(v47 + 28), v42, v41);
  *v46 = KeyPath;
  sub_10000AD78((uint64_t)v20, (uint64_t)v22, &qword_1000CA020);
  v43(v42, v41);
  v48 = sub_10000AE2C((uint64_t)v20, &qword_1000CA020);
  LOBYTE(KeyPath) = static Edge.Set.bottom.getter(v48);
  v49 = EdgeInsets.init(_all:)(2.0);
  v51 = v50;
  v53 = v52;
  v55 = v54;
  v56 = v100;
  sub_10000AD78((uint64_t)v22, v100, &qword_1000CA028);
  v57 = v56 + *(int *)(v99 + 36);
  *(_BYTE *)v57 = KeyPath;
  *(double *)(v57 + 8) = v49;
  *(_QWORD *)(v57 + 16) = v51;
  *(_QWORD *)(v57 + 24) = v53;
  *(_QWORD *)(v57 + 32) = v55;
  *(_BYTE *)(v57 + 40) = 0;
  sub_10000AE2C((uint64_t)v22, &qword_1000CA028);
  v58 = *(_QWORD *)(v106 + 16);
  v59 = *(_BYTE *)(v106 + 24);
  v128 = *(_OWORD *)v106;
  v129 = v58;
  v130 = v59;
  v60 = sub_100004EAC(&qword_1000CA090);
  Binding.projectedValue.getter(v60);
  v106 = v131;
  v61 = v132;
  LOBYTE(v40) = v133;
  v62 = v126;
  sub_10000AD78(v56, v126, (uint64_t *)&unk_1000CA030);
  v63 = v62 + *(int *)(v101 + 36);
  *(_OWORD *)v63 = v106;
  *(_QWORD *)(v63 + 16) = v61;
  *(_BYTE *)(v63 + 24) = v40;
  sub_10000AE2C(v56, (uint64_t *)&unk_1000CA030);
  v64 = sub_10000AC80(v62, v125, &qword_1000CA088);
  v65 = v107;
  LabelStyleConfiguration.title.getter(v64);
  if (qword_1000C7440 != -1)
    swift_once(&qword_1000C7440, sub_100042194);
  v66 = v105;
  LODWORD(v127) = (v105 & 1) == 0;
  v67 = qword_1000D1CF8;
  v68 = v111;
  v69 = (uint64_t)v110;
  v70 = v114;
  (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v110, v65, v114);
  *(_QWORD *)(v69 + *(int *)(v108 + 36)) = v67;
  v71 = *(void (**)(char *, uint64_t))(v68 + 8);
  swift_retain(v67);
  v71(v65, v70);
  v72 = v113;
  sub_10000AD78(v69, v113, &qword_1000CA018);
  *(_WORD *)(v72 + *(int *)(v109 + 36)) = 257;
  v73 = sub_10000AE2C(v69, &qword_1000CA018);
  v74 = static Font.caption.getter(v73);
  v75 = swift_getKeyPath(&unk_100094038);
  v76 = v115;
  sub_10000AD78(v72, v115, &qword_1000CA068);
  v77 = v116;
  v78 = (uint64_t *)(v76 + *(int *)(v116 + 36));
  *v78 = v75;
  v78[1] = v74;
  v79 = sub_10000AE2C(v72, &qword_1000CA068);
  v80 = static Font.Weight.medium.getter(v79);
  v81 = sub_100046BE8();
  v82 = v117;
  View.fontWeight(_:)(*(_QWORD *)&v80, 0, v77, v81);
  sub_10000AE2C(v76, &qword_1000CA070);
  v83 = swift_getKeyPath(&unk_100094068);
  v84 = v118;
  v85 = (uint64_t)v121;
  v86 = v119;
  (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v121, v82, v119);
  v87 = v85 + *(int *)(v112 + 36);
  *(_QWORD *)v87 = v83;
  *(_QWORD *)(v87 + 8) = 1;
  *(_BYTE *)(v87 + 16) = 0;
  (*(void (**)(char *, uint64_t))(v84 + 8))(v82, v86);
  v88 = v120;
  sub_10000AC80(v85, v120, &qword_1000CA080);
  v89 = sub_100046790(&qword_1000C74D0, (uint64_t (*)(_QWORD))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, v30);
  LOBYTE(v83) = DynamicTypeSize.isAccessibilitySize.getter(v89);
  ((void (*)(_QWORD *, uint64_t))v102)(v30, v124);
  v90 = v125;
  v91 = v126;
  sub_10000AD78(v125, v126, &qword_1000CA088);
  sub_10000AD78(v88, v85, &qword_1000CA080);
  v92 = v122;
  *v122 = 0;
  *((_BYTE *)v92 + 8) = v127;
  *((_BYTE *)v92 + 9) = v66 & 1;
  v93 = (int *)sub_100004EAC(&qword_1000CA0D8);
  sub_10000AD78(v91, (uint64_t)v92 + v93[12], &qword_1000CA088);
  sub_10000AD78(v85, (uint64_t)v92 + v93[16], &qword_1000CA080);
  v94 = (char *)v92 + v93[20];
  *(_QWORD *)v94 = 0;
  v94[8] = 0;
  v94[9] = (v83 & 1) == 0;
  sub_10000AE2C(v88, &qword_1000CA080);
  sub_10000AE2C(v90, &qword_1000CA088);
  sub_10000AE2C(v85, &qword_1000CA080);
  return sub_10000AE2C(v91, &qword_1000CA088);
}

uint64_t sub_100044108@<X0>(int a1@<W1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t KeyPath;
  uint64_t *v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;

  v91 = a3;
  v92 = a2;
  v93 = a4;
  v5 = type metadata accessor for CommonUIBlendModifier(0);
  __chkstk_darwin(v5);
  v90 = (uint64_t *)((char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v81 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v81);
  v87 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100004EAC(&qword_1000CBCD0);
  __chkstk_darwin(v85);
  v88 = (uint64_t)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100004EAC(&qword_1000CA200);
  __chkstk_darwin(v86);
  v89 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004EAC(&qword_1000C9FE0);
  __chkstk_darwin(v14);
  v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004EAC(&qword_1000C9FE8);
  __chkstk_darwin(v17);
  v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100004EAC(&qword_1000CA208);
  __chkstk_darwin(v79);
  v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100004EAC(&qword_1000CA210);
  __chkstk_darwin(v80);
  v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100004EAC(&qword_1000CA218);
  v24 = __chkstk_darwin(v84);
  v83 = (uint64_t)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = ButtonStyleConfiguration.label.getter(v24);
  v82 = a1;
  v27 = a1 & 1;
  if ((a1 & 1) != 0)
    v28 = 0.0;
  else
    v28 = INFINITY;
  v29 = static Alignment.center.getter(v26);
  v31 = sub_10002D70C(0.0, 1, 0.0, 1, v28, v27, 0.0, 1, (uint64_t)v16, 0.0, 1, v28, v27, v29, v30);
  v32 = (*(uint64_t (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v10, v31);
  v33 = static Edge.Set.leading.getter(v32);
  v34 = static Edge.Set.trailing.getter();
  v35 = Edge.Set.init(rawValue:)(0);
  v36 = Edge.Set.init(rawValue:)(v35);
  if (Edge.Set.init(rawValue:)(v36 & v33) != v33)
    v35 = Edge.Set.init(rawValue:)(v35 | v33);
  v37 = Edge.Set.init(rawValue:)(v35);
  if (Edge.Set.init(rawValue:)(v37 & v34) != v34)
    LOBYTE(v35) = Edge.Set.init(rawValue:)(v35 | v34);
  v38 = EdgeInsets.init(_all:)(3.0);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  sub_10000AD78((uint64_t)v16, (uint64_t)v19, &qword_1000C9FE0);
  v45 = &v19[*(int *)(v17 + 36)];
  *v45 = v35;
  *((double *)v45 + 1) = v38;
  *((_QWORD *)v45 + 2) = v40;
  *((_QWORD *)v45 + 3) = v42;
  *((_QWORD *)v45 + 4) = v44;
  v45[40] = 0;
  v46 = sub_10000AE2C((uint64_t)v16, &qword_1000C9FE0);
  v47 = v82;
  if ((v82 & 0x100) != 0)
  {
    v48 = static Color.white.getter(v46);
  }
  else
  {
    if (qword_1000C7440 != -1)
      swift_once(&qword_1000C7440, sub_100042194);
    v48 = qword_1000D1CF8;
    swift_retain(qword_1000D1CF8);
  }
  KeyPath = swift_getKeyPath(&unk_1000940C8);
  sub_10000AD78((uint64_t)v19, (uint64_t)v21, &qword_1000C9FE8);
  v50 = (uint64_t *)&v21[*(int *)(v79 + 36)];
  *v50 = KeyPath;
  v50[1] = v48;
  sub_10000AE2C((uint64_t)v19, &qword_1000C9FE8);
  v51 = v87;
  v52 = &v87[*(int *)(v81 + 20)];
  v53 = enum case for RoundedCornerStyle.continuous(_:);
  v54 = type metadata accessor for RoundedCornerStyle(0);
  v55 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 104))(v52, v53, v54);
  __asm { FMOV            V0.2D, #12.0 }
  *v51 = _Q0;
  if ((v47 & 0x100) != 0)
  {
    v61 = static Color.accentColor.getter(v55);
  }
  else
  {
    if (qword_1000C7458 != -1)
      swift_once(&qword_1000C7458, sub_100042230);
    v61 = qword_1000D1D10;
    swift_retain(qword_1000D1D10);
  }
  v62 = v88;
  sub_100015184((uint64_t)v51, v88, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v63 = v85;
  *(_QWORD *)(v62 + *(int *)(v85 + 52)) = v61;
  *(_WORD *)(v62 + *(int *)(v63 + 56)) = 256;
  sub_1000151C8((uint64_t)v51, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v64 = swift_getKeyPath(&unk_100093FA8);
  v65 = (uint64_t)v90;
  *v90 = v64;
  v66 = sub_100004EAC(&qword_1000CA000);
  swift_storeEnumTagMultiPayload(v65, v66, 0);
  v67 = (uint64_t)v89;
  sub_100046A54(v65, (uint64_t)&v89[*(int *)(v86 + 36)], type metadata accessor for CommonUIBlendModifier);
  v68 = sub_10000AC80(v62, v67, &qword_1000CBCD0);
  v69 = static Alignment.center.getter(v68);
  v71 = v70;
  v72 = (uint64_t)&v23[*(int *)(v80 + 36)];
  sub_10000AD78(v67, v72, &qword_1000CA200);
  v73 = (uint64_t *)(v72 + *(int *)(sub_100004EAC(&qword_1000CA220) + 36));
  *v73 = v69;
  v73[1] = v71;
  sub_10000AD78((uint64_t)v21, (uint64_t)v23, &qword_1000CA208);
  sub_10000AE2C(v67, &qword_1000CA200);
  sub_10000AE2C((uint64_t)v21, &qword_1000CA208);
  v74 = v91 & 1;
  v75 = v92;
  sub_10003FDF4(v92, v91 & 1);
  LOBYTE(v71) = sub_1000465A8(v75, v74);
  sub_10003FE00(v75, v74);
  if ((v71 & 1) != 0)
    v76 = 1.0;
  else
    v76 = 0.2;
  v77 = v83;
  sub_10000AD78((uint64_t)v23, v83, &qword_1000CA210);
  *(double *)(v77 + *(int *)(v84 + 36)) = v76;
  sub_10000AE2C((uint64_t)v23, &qword_1000CA210);
  return sub_10000AC80(v77, v93, &qword_1000CA218);
}

uint64_t sub_1000447BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100044E2C(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_100044108);
}

uint64_t sub_1000447C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B08A0, 1);
}

uint64_t sub_1000447D8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0878, 1);
}

uint64_t sub_1000447E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0850, 1);
}

uint64_t sub_1000447F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0828, 1);
}

uint64_t sub_100044808(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0800, 1);
}

uint64_t sub_100044818(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B07D8, 1);
}

uint64_t sub_100044828(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B07B0, 1);
}

uint64_t sub_100044838@<X0>(int a1@<W1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  double v43;
  double v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t KeyPath;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;

  v76 = a3;
  v77 = a2;
  v78 = a4;
  v70 = a1;
  v4 = type metadata accessor for CommonUIBlendModifier(0);
  __chkstk_darwin(v4);
  v75 = (uint64_t *)((char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v68 = type metadata accessor for UnevenRoundedRectangle(0);
  __chkstk_darwin(v68);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100004EAC(&qword_1000C9FD0);
  __chkstk_darwin(v71);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100004EAC(&qword_1000C9FD8);
  __chkstk_darwin(v72);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004EAC(&qword_1000C9FE0);
  __chkstk_darwin(v16);
  v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100004EAC(&qword_1000C9FE8);
  __chkstk_darwin(v67);
  v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100004EAC(&qword_1000C9FF0);
  __chkstk_darwin(v69);
  v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100004EAC(&qword_1000C9FF8);
  v23 = __chkstk_darwin(v74);
  v73 = (uint64_t)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = ButtonStyleConfiguration.label.getter(v23);
  v26 = static Alignment.center.getter(v25);
  v28 = sub_10002D70C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v18, 0.0, 1, INFINITY, 0, v26, v27);
  v29 = (*(uint64_t (**)(char *, uint64_t, __n128))(v13 + 8))(v15, v12, v28);
  v30 = static Edge.Set.leading.getter(v29);
  v31 = static Edge.Set.trailing.getter();
  v32 = Edge.Set.init(rawValue:)(0);
  v33 = Edge.Set.init(rawValue:)(v32);
  if (Edge.Set.init(rawValue:)(v33 & v30) != v30)
    v32 = Edge.Set.init(rawValue:)(v32 | v30);
  v34 = Edge.Set.init(rawValue:)(v32);
  if (Edge.Set.init(rawValue:)(v34 & v31) != v31)
    LOBYTE(v32) = Edge.Set.init(rawValue:)(v32 | v31);
  v35 = EdgeInsets.init(_all:)(3.0);
  v37 = v36;
  v39 = v38;
  v41 = v40;
  sub_10000AD78((uint64_t)v18, (uint64_t)v20, &qword_1000C9FE0);
  v42 = &v20[*(int *)(v67 + 36)];
  *v42 = v32;
  *((double *)v42 + 1) = v35;
  *((_QWORD *)v42 + 2) = v37;
  *((_QWORD *)v42 + 3) = v39;
  *((_QWORD *)v42 + 4) = v41;
  v42[40] = 0;
  sub_10000AE2C((uint64_t)v18, &qword_1000C9FE0);
  if ((v70 & 1) != 0)
    v43 = 12.0;
  else
    v43 = 0.0;
  if ((v70 & 0x100) != 0)
    v44 = 12.0;
  else
    v44 = 0.0;
  v45 = &v7[*(int *)(v68 + 20)];
  v46 = enum case for RoundedCornerStyle.continuous(_:);
  v47 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v45, v46, v47);
  *(double *)v7 = RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)(v43, v44, v44, v43);
  *((_QWORD *)v7 + 1) = v48;
  *((_QWORD *)v7 + 2) = v49;
  *((_QWORD *)v7 + 3) = v50;
  if (qword_1000C7458 != -1)
    swift_once(&qword_1000C7458, sub_100042230);
  v51 = qword_1000D1D10;
  sub_100015184((uint64_t)v7, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  v52 = v71;
  *(_QWORD *)&v9[*(int *)(v71 + 52)] = v51;
  *(_WORD *)&v9[*(int *)(v52 + 56)] = 256;
  swift_retain(v51);
  sub_1000151C8((uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  KeyPath = swift_getKeyPath(&unk_100093FA8);
  v54 = (uint64_t)v75;
  *v75 = KeyPath;
  v55 = sub_100004EAC(&qword_1000CA000);
  swift_storeEnumTagMultiPayload(v54, v55, 0);
  sub_100046A54(v54, (uint64_t)&v11[*(int *)(v72 + 36)], type metadata accessor for CommonUIBlendModifier);
  v56 = sub_10000AC80((uint64_t)v9, (uint64_t)v11, &qword_1000C9FD0);
  v57 = static Alignment.center.getter(v56);
  v59 = v58;
  v60 = (uint64_t)&v22[*(int *)(v69 + 36)];
  sub_10000AD78((uint64_t)v11, v60, &qword_1000C9FD8);
  v61 = (uint64_t *)(v60 + *(int *)(sub_100004EAC(&qword_1000CA008) + 36));
  *v61 = v57;
  v61[1] = v59;
  sub_10000AD78((uint64_t)v20, (uint64_t)v22, &qword_1000C9FE8);
  sub_10000AE2C((uint64_t)v11, &qword_1000C9FD8);
  sub_10000AE2C((uint64_t)v20, &qword_1000C9FE8);
  v62 = v76 & 1;
  v63 = v77;
  sub_10003FDF4(v77, v76 & 1);
  LOBYTE(v59) = sub_1000465A8(v63, v62);
  sub_10003FE00(v63, v62);
  if ((v59 & 1) != 0)
    v64 = 1.0;
  else
    v64 = 0.2;
  v65 = v73;
  sub_10000AD78((uint64_t)v22, v73, &qword_1000C9FF0);
  *(double *)(v65 + *(int *)(v74 + 36)) = v64;
  sub_10000AE2C((uint64_t)v22, &qword_1000C9FF0);
  return sub_10000AC80(v65, v78, &qword_1000C9FF8);
}

uint64_t sub_100044E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100044E2C(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_100044838);
}

uint64_t sub_100044E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD))
{
  unsigned __int8 *v4;
  int v5;

  if (v4[1])
    v5 = 256;
  else
    v5 = 0;
  return a4(a1, v5 | *v4, *((_QWORD *)v4 + 1), v4[16]);
}

uint64_t sub_100044E5C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0788, 1);
}

uint64_t sub_100044E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (**v37)(uint64_t@<X8>);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (**v41)();
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = a2;
  v4 = type metadata accessor for PreferredContentSizeModifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for NavigationPath(0);
  v56 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004EAC(&qword_1000C9F58);
  __chkstk_darwin(v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100004EAC(&qword_1000C9F60);
  v54 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v50 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100004EAC(&qword_1000C9F68);
  __chkstk_darwin(v52);
  v51 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100004EAC(&qword_1000C9F70);
  __chkstk_darwin(v58);
  v55 = (uint64_t)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004EAC(&qword_1000C9F78);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v12, a1, v16);
  *(_WORD *)&v12[*(int *)(v10 + 36)] = 256;
  v49 = v2;
  v17 = sub_100004EAC(&qword_1000C9E90);
  Binding.wrappedValue.getter(v17);
  sub_100015184(v2, (uint64_t)v7, type metadata accessor for PreferredContentSizeModifier);
  v18 = *(unsigned __int8 *)(v5 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = v19 + v6;
  v47 = v19 + v6;
  v48 = v18 | 7;
  v21 = swift_allocObject(&unk_1000BFE70, v19 + v6, v18 | 7);
  sub_100046A54((uint64_t)v7, v21 + v19, type metadata accessor for PreferredContentSizeModifier);
  v22 = sub_100045EB0();
  v23 = sub_100005900(&qword_1000C9F90, (uint64_t (*)(uint64_t))&type metadata accessor for NavigationPath, (uint64_t)&protocol conformance descriptor for NavigationPath);
  v24 = v50;
  v25 = v10;
  v26 = v53;
  View.onChange<A>(of:initial:_:)(v9, 0, sub_100045EA4, v21, v25, v53, v22, v23);
  swift_release(v21, v27);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v9, v26);
  sub_10000AE2C((uint64_t)v12, &qword_1000C9F58);
  v28 = v49;
  sub_100015184(v49, (uint64_t)v7, type metadata accessor for PreferredContentSizeModifier);
  v29 = v20;
  v30 = v48;
  v31 = swift_allocObject(&unk_1000BFE98, v29, v48);
  sub_100046A54((uint64_t)v7, v31 + v19, type metadata accessor for PreferredContentSizeModifier);
  v32 = v54;
  v33 = (uint64_t)v51;
  v34 = v24;
  v35 = v24;
  v36 = v57;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v51, v35, v57);
  v37 = (void (**)(uint64_t@<X8>))(v33 + *(int *)(v52 + 36));
  *v37 = sub_10004544C;
  v37[1] = 0;
  v37[2] = (void (*)(uint64_t@<X8>))sub_100046028;
  v37[3] = (void (*)(uint64_t@<X8>))v31;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v36);
  sub_100015184(v28, (uint64_t)v7, type metadata accessor for PreferredContentSizeModifier);
  v38 = v47;
  v39 = swift_allocObject(&unk_1000BFEC0, v47, v30);
  sub_100046A54((uint64_t)v7, v39 + v19, type metadata accessor for PreferredContentSizeModifier);
  v40 = v55;
  sub_10000AD78(v33, v55, &qword_1000C9F68);
  v41 = (uint64_t (**)())(v40 + *(int *)(v58 + 36));
  *v41 = sub_100046068;
  v41[1] = (uint64_t (*)())v39;
  v41[2] = 0;
  v41[3] = 0;
  sub_10000AE2C(v33, &qword_1000C9F68);
  sub_100015184(v28, (uint64_t)v7, type metadata accessor for PreferredContentSizeModifier);
  v42 = swift_allocObject(&unk_1000BFEE8, v38, v30);
  sub_100046A54((uint64_t)v7, v42 + v19, type metadata accessor for PreferredContentSizeModifier);
  v43 = v59;
  sub_10000AD78(v40, v59, &qword_1000C9F70);
  v44 = (_QWORD *)(v43 + *(int *)(sub_100004EAC(&qword_1000C9F98) + 36));
  *v44 = 0;
  v44[1] = 0;
  v44[2] = sub_1000460B4;
  v44[3] = v42;
  return sub_10000AE2C(v40, &qword_1000C9F70);
}

_QWORD *sub_10004530C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v2 = type metadata accessor for NavigationPath(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PreferredContentSizeModifier(0);
  v7 = (uint64_t *)(a1 + *(int *)(v6 + 40));
  v8 = *v7;
  v9 = *((_BYTE *)v7 + 8);
  v10 = v7[2];
  v22 = v8;
  LOBYTE(v23) = v9;
  v24 = v10;
  v11 = sub_100004EAC(&qword_1000C9FA8);
  result = State.wrappedValue.getter(&v25, v11);
  if ((v26 & 1) == 0)
  {
    v13 = v25;
    v14 = sub_100004EAC(&qword_1000C9E90);
    v15 = Binding.wrappedValue.getter(v14);
    v16 = NavigationPath.count.getter(v15);
    result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v16 < v13)
    {
      v17 = (char *)(a1 + *(int *)(v6 + 44));
      v18 = *v17;
      v19 = *((_QWORD *)v17 + 1);
      LOBYTE(v22) = v18;
      v23 = v19;
      LOBYTE(v25) = 1;
      v20 = sub_100004EAC(&qword_1000C9FA0);
      return (_QWORD *)State.wrappedValue.setter(&v25, v20);
    }
  }
  return result;
}

void sub_10004544C(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(double *)a1 = GeometryProxy.size.getter();
  *(_QWORD *)(a1 + 8) = v2;
}

void *sub_100045474(double *a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  id v9;
  id v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  char v21;
  uint64_t v22;
  void *result;
  void *v24;
  _QWORD v25[2];
  __int128 v26;
  uint64_t v27;

  v4 = (int *)type metadata accessor for PreferredContentSizeModifier(0);
  __chkstk_darwin(v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = a1[1];
  if (*(_BYTE *)(a2 + 8) == 1)
  {
    v9 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v10 = objc_msgSend(v9, "userInterfaceIdiom");

    v11 = 44.0;
    if (v10 == (id)1)
      v11 = 50.0;
    v8 = v8 + v11;
  }
  v12 = a2 + v4[8];
  v13 = *(_QWORD *)(v12 + 16);
  v26 = *(_OWORD *)v12;
  v27 = v13;
  *(double *)v25 = v7;
  *(double *)&v25[1] = v8;
  v14 = sub_100004EAC(&qword_1000C9FB0);
  State.wrappedValue.setter(v25, v14);
  v15 = a2 + v4[9];
  v16 = *(_BYTE *)v15;
  v17 = *(_QWORD *)(v15 + 8);
  LOBYTE(v26) = v16;
  *((_QWORD *)&v26 + 1) = v17;
  v18 = sub_100004EAC(&qword_1000C9FA0);
  State.wrappedValue.getter(v25, v18);
  v19 = LOBYTE(v25[0]);
  sub_100015184(a2, (uint64_t)v6, type metadata accessor for PreferredContentSizeModifier);
  if (v19 != 1)
    return (void *)sub_1000151C8((uint64_t)v6, type metadata accessor for PreferredContentSizeModifier);
  v20 = &v6[v4[11]];
  v21 = *v20;
  v22 = *((_QWORD *)v20 + 1);
  LOBYTE(v26) = v21;
  *((_QWORD *)&v26 + 1) = v22;
  State.wrappedValue.getter(v25, v18);
  result = (void *)sub_1000151C8((uint64_t)v6, type metadata accessor for PreferredContentSizeModifier);
  if ((v25[0] & 1) == 0)
  {
    result = (void *)swift_unknownObjectWeakLoadStrong(a2);
    if (result)
    {
      v24 = result;
      objc_msgSend(result, "preferredContentSizeChanged:", v7, v8);
      return (void *)swift_unknownObjectRelease(v24);
    }
  }
  return result;
}

uint64_t sub_100045658(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  char v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void **aBlock;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  void *v79;
  uint64_t (*v80)();
  uint64_t v81;
  uint64_t v82;
  char v83;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v72 = *(_QWORD *)(v2 - 8);
  v73 = v2;
  __chkstk_darwin(v2);
  v71 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v69 = *(_QWORD *)(v4 - 8);
  v70 = v4;
  __chkstk_darwin(v4);
  v68 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PreferredContentSizeModifier(0);
  v63 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v64 = v7;
  v65 = (uint64_t)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for DispatchTimeInterval(0);
  v61 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v60 = (uint64_t *)((char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v67 = type metadata accessor for DispatchTime(0);
  v59 = *(_QWORD *)(v67 - 8);
  v9 = __chkstk_darwin(v67);
  v58 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v66 = (char *)&v57 - v11;
  v74 = type metadata accessor for NavigationPath(0);
  v12 = *(_QWORD *)(v74 - 8);
  v13 = __chkstk_darwin(v74);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v57 - v16;
  v18 = *(int *)(v6 + 40);
  v75 = a1;
  v19 = a1 + v18;
  v20 = *(void ***)v19;
  v21 = *(_BYTE *)(v19 + 8);
  v22 = *(uint64_t (**)(uint64_t))(v19 + 16);
  aBlock = *(void ***)v19;
  LOBYTE(v77) = v21;
  v78 = v22;
  v23 = sub_100004EAC(&qword_1000C9FA8);
  State.wrappedValue.getter(&v82, v23);
  if (v83 == 1)
  {
    v24 = sub_100004EAC(&qword_1000C9E90);
    v25 = Binding.wrappedValue.getter(v24);
    v26 = NavigationPath.count.getter(v25);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v74);
    v20 = *(void ***)v19;
    v21 = *(_BYTE *)(v19 + 8);
    v22 = *(uint64_t (**)(uint64_t))(v19 + 16);
    aBlock = *(void ***)v19;
    LOBYTE(v77) = v21;
    v78 = v22;
    v82 = v26;
    v83 = 0;
    State.wrappedValue.setter(&v82, v23);
  }
  aBlock = v20;
  LOBYTE(v77) = v21;
  v78 = v22;
  State.wrappedValue.getter(&v82, v23);
  v27 = v82;
  v28 = v83;
  v29 = v75;
  v30 = sub_100004EAC(&qword_1000C9E90);
  v31 = Binding.wrappedValue.getter(v30);
  v32 = NavigationPath.count.getter(v31);
  result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v74);
  if ((v28 & 1) == 0 && v27 == v32)
  {
    sub_1000460C0();
    v34 = (void *)static OS_dispatch_queue.main.getter();
    v35 = v58;
    static DispatchTime.now()();
    v36 = v60;
    *v60 = 200;
    v37 = v61;
    v38 = v62;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v61 + 104))(v36, enum case for DispatchTimeInterval.milliseconds(_:), v62);
    v39 = v66;
    + infix(_:_:)(v35, v36);
    (*(void (**)(_QWORD *, uint64_t))(v37 + 8))(v36, v38);
    v40 = *(void (**)(char *, uint64_t))(v59 + 8);
    v41 = v67;
    v40(v35, v67);
    v42 = v29;
    v43 = v65;
    sub_100015184(v42, v65, type metadata accessor for PreferredContentSizeModifier);
    v44 = *(unsigned __int8 *)(v63 + 80);
    v45 = (v44 + 16) & ~v44;
    v46 = swift_allocObject(&unk_1000BFF10, v45 + v64, v44 | 7);
    sub_100046A54(v43, v46 + v45, type metadata accessor for PreferredContentSizeModifier);
    v80 = sub_100046100;
    v81 = v46;
    aBlock = _NSConcreteStackBlock;
    v77 = 1107296256;
    v78 = sub_1000181D8;
    v79 = &unk_1000BFF28;
    v47 = _Block_copy(&aBlock);
    v49 = swift_release(v81, v48);
    v50 = v68;
    static DispatchQoS.unspecified.getter(v49);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v51 = sub_100005900(&qword_1000C8828, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v52 = sub_100004EAC(&qword_1000C8830);
    v53 = sub_10000B254(&qword_1000C8838, &qword_1000C8830, (uint64_t)&protocol conformance descriptor for [A]);
    v54 = v71;
    v55 = v52;
    v56 = v73;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v55, v53, v73, v51);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v39, v50, v54, v47);
    _Block_release(v47);

    (*(void (**)(char *, uint64_t))(v72 + 8))(v54, v56);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v50, v70);
    return ((uint64_t (*)(char *, uint64_t))v40)(v39, v41);
  }
  return result;
}

uint64_t sub_100045BA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *Strong;
  void *v6;
  uint64_t result;
  void *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  double v15[2];

  v2 = type metadata accessor for PreferredContentSizeModifier(0);
  v3 = a1 + *(int *)(v2 + 36);
  LOBYTE(v11) = *(_BYTE *)v3;
  v13 = *(_QWORD *)(v3 + 8);
  LOBYTE(v15[0]) = 1;
  v4 = sub_100004EAC(&qword_1000C9FA0);
  State.wrappedValue.setter(v15, v4);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v6 = Strong;
    objc_msgSend(Strong, "enableSmallDetent:", *(unsigned __int8 *)(a1 + 9), v11, v13);
    swift_unknownObjectRelease(v6);
  }
  result = swift_unknownObjectWeakLoadStrong(a1);
  if (result)
  {
    v8 = (void *)result;
    v9 = (__int128 *)(a1 + *(int *)(v2 + 32));
    v12 = *v9;
    v14 = *((_QWORD *)v9 + 2);
    v10 = sub_100004EAC(&qword_1000C9FB0);
    State.wrappedValue.getter(v15, v10);
    objc_msgSend(v8, "preferredContentSizeChanged:", v15[0], v15[1], v12, v14);
    return swift_unknownObjectRelease(v8);
  }
  return result;
}

uint64_t sub_100045C98(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for PreferredContentSizeModifier(0) + 36));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 0;
  v4 = sub_100004EAC(&qword_1000C9FA0);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_100045D00@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  char *v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = sub_100004EAC(&qword_1000C9FC0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v15 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v15 - v9, a1, v4);
  v11(v8, (uint64_t)v10, v4);
  v11(a2, (uint64_t)v8, v4);
  v12 = &a2[*(int *)(sub_100004EAC(&qword_1000C9FC8) + 48)];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  *((_QWORD *)v12 + 2) = 0x3FF0000000000000;
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v10, v4);
  return ((uint64_t (*)(char *, uint64_t))v13)(v8, v4);
}

uint64_t sub_100045E0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100045E28(a1, (uint64_t (*)(void))&static HorizontalAlignment.center.getter, &qword_1000C9FB8, (uint64_t (*)(uint64_t))sub_100045D00, a2);
}

uint64_t sub_100045E28@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t *a3@<X4>, uint64_t (*a4)(uint64_t)@<X5>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = a2();
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 16) = 1;
  sub_100004EAC(a3);
  return a4(a1);
}

uint64_t sub_100045E80(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0760, 1);
}

uint64_t sub_100045E90(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0738, 1);
}

uint64_t sub_100045EA4()
{
  return sub_100046074((uint64_t (*)(uint64_t))sub_10004530C);
}

unint64_t sub_100045EB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C9F80;
  if (!qword_1000C9F80)
  {
    v1 = sub_10000ABD0(&qword_1000C9F58);
    sub_10000B254(&qword_1000C9F88, &qword_1000C9F78, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C9F80);
  }
  return result;
}

uint64_t sub_100045F38()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for PreferredContentSizeModifier(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_unknownObjectWeakDestroy(v0 + v4);
  v8 = (_QWORD *)(v7 + v1[7]);
  swift_release(*v8, v9);
  swift_release(v8[1], v10);
  v11 = (char *)v8 + *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v12 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_release(*(_QWORD *)(v7 + v1[8] + 16), v13);
  swift_release(*(_QWORD *)(v7 + v1[9] + 8), v14);
  swift_release(*(_QWORD *)(v7 + v1[10] + 16), v15);
  swift_release(*(_QWORD *)(v7 + v1[11] + 8), v16);
  return swift_deallocObject(v0, v5, v6);
}

void *sub_100046028(double *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PreferredContentSizeModifier(0) - 8) + 80);
  return sub_100045474(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_100046068()
{
  return sub_100046074(sub_100045658);
}

uint64_t sub_100046074(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PreferredContentSizeModifier(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_1000460B4()
{
  return sub_100046074(sub_100045C98);
}

unint64_t sub_1000460C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C8820;
  if (!qword_1000C8820)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000C8820);
  }
  return result;
}

uint64_t sub_100046100()
{
  return sub_100046074(sub_100045BA0);
}

uint64_t sub_10004610C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004611C(uint64_t a1, uint64_t a2)
{
  return swift_release(*(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_100046124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  void (*v17)(char *, uint64_t);
  unsigned int *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  v22 = a2;
  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v21 - v7;
  v9 = type metadata accessor for BlendMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004EAC(&qword_1000CA408);
  __chkstk_darwin(v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100046790(&qword_1000CA000, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for ColorScheme.dark(_:), v2);
  v16 = static ColorScheme.== infix(_:_:)(v8, v6);
  v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v6, v2);
  v17(v8, v2);
  v18 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
  if ((v16 & 1) == 0)
    v18 = (unsigned int *)&enum case for BlendMode.plusDarker(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *v18, v9);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v15[*(int *)(v13 + 36)], v12, v9);
  v19 = sub_100004EAC(&qword_1000CA410);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v15, v21, v19);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return sub_10000AC80((uint64_t)v15, v22, &qword_1000CA408);
}

uint64_t sub_10004633C()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10004635C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100046B38(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_100046370(uint64_t a1, char a2)
{
  return sub_1000463B8(a1, a2, 0x49556E6F6D6D6F43, 0xEF726567616E614DLL);
}

uint64_t sub_100046394(uint64_t a1, char a2)
{
  return sub_1000463B8(a1, a2, 0x6E69746972776552, 0xEE006C65646F4D67);
}

uint64_t sub_1000463B8(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = type metadata accessor for EnvironmentValues(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_retain(a1);
  if ((a2 & 1) == 0)
  {
    v13 = static os_log_type_t.fault.getter(v12);
    v14 = static Log.runtimeIssuesLog.getter();
    v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      v23 = a4;
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v18 = a3;
      v19 = v17;
      v25 = v17;
      *(_DWORD *)v16 = 136315138;
      v24 = sub_10006DCA8(v18, v23, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v16 + 4, v16 + 12);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v16, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(&v25, v11, a1);
    swift_release(a1, v20);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return v25;
  }
  return a1;
}

uint64_t sub_100046574@<X0>(_QWORD *a1@<X8>)
{
  return sub_100046790(&qword_1000C74D0, (uint64_t (*)(_QWORD))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, a1);
}

uint64_t sub_1000465A8(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_10006DCA8(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v16, v7, a1);
  sub_10003FE00(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_100046760@<X0>(_QWORD *a1@<X8>)
{
  return sub_100046790(&qword_1000CA000, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_100046790@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004EAC(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000AD78(v9, (uint64_t)v17, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v19 = a2(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a5, v17, v19);
  }
  else
  {
    v21 = *v17;
    v22 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
    v23 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v23, v22))
    {
      v30 = a4;
      v24 = swift_slowAlloc(12, -1);
      v31 = a5;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc(32, -1);
      v34 = v26;
      *(_DWORD *)v25 = 136315138;
      v33 = sub_10006DCA8(v32, v30, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v25 + 4, v25 + 12);
      _os_log_impl((void *)&_mh_execute_header, v23, v22, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      v27 = v25;
      a5 = v31;
      swift_slowDealloc(v27, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(a5, v14, v21);
    swift_release(v21, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t type metadata accessor for CommonUIBlendModifier(uint64_t a1)
{
  return sub_1000469DC(a1, (uint64_t *)&unk_1000CA290, (uint64_t)&nominal type descriptor for CommonUIBlendModifier);
}

uint64_t sub_1000469DC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100046A10()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100046A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100046B38(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_100046A54(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100046A98@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100046AC0(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_100046AE4()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_100046B04()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_100046B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100046B38(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

uint64_t sub_100046B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_100046BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100046B38(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

unint64_t sub_100046BE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA098;
  if (!qword_1000CA098)
  {
    v1 = sub_10000ABD0(&qword_1000CA070);
    sub_100034050(&qword_1000CA0A0, &qword_1000CA068, (void (*)(void))sub_100046C8C);
    sub_10000B254(&qword_1000C7E40, &qword_1000CA0D0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA098);
  }
  return result;
}

unint64_t sub_100046C8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA0A8;
  if (!qword_1000CA0A8)
  {
    v1 = sub_10000ABD0(&qword_1000CA018);
    sub_100005900((unint64_t *)&unk_1000CA0B0, (uint64_t (*)(uint64_t))&type metadata accessor for LabelStyleConfiguration.Title, (uint64_t)&protocol conformance descriptor for LabelStyleConfiguration.Title);
    sub_10000B254((unint64_t *)&unk_1000CB710, (uint64_t *)&unk_1000CA0C0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA0A8);
  }
  return result;
}

uint64_t sub_100046D28@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100046D58@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100046D88(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100046DB4(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

unint64_t sub_100046DE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA180;
  if (!qword_1000CA180)
  {
    v1 = sub_10000ABD0(&qword_1000CA160);
    sub_100005900(&qword_1000CA188, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    sub_10000B254(&qword_1000C7E40, &qword_1000CA0D0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA180);
  }
  return result;
}

uint64_t sub_100046E7C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100046EA4(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

unint64_t sub_100046EC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA1C8;
  if (!qword_1000CA1C8)
  {
    v1 = sub_10000ABD0(&qword_1000CA1A8);
    sub_100046F4C();
    sub_10000B254(&qword_1000C7E40, &qword_1000CA0D0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA1C8);
  }
  return result;
}

unint64_t sub_100046F4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA1D0;
  if (!qword_1000CA1D0)
  {
    v1 = sub_10000ABD0(&qword_1000CA1A0);
    sub_10000B254(&qword_1000CA1D8, &qword_1000CA1C0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000B254((unint64_t *)&unk_1000CA1E0, &qword_1000CBD60, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA1D0);
  }
  return result;
}

uint64_t *sub_100046FF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_100004EAC(&qword_1000CA000);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v6 = v4;
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_1000470B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_100004EAC(&qword_1000CA000);
  if (swift_getEnumCaseMultiPayload(a1, v2) != 1)
    return swift_release(*a1, v3);
  v4 = type metadata accessor for ColorScheme(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t *sub_10004711C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_100004EAC(&qword_1000CA000);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    v6 = a1;
    v7 = v4;
    v8 = 1;
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    swift_retain(v9);
    v6 = a1;
    v7 = v4;
    v8 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v7, v8);
  return a1;
}

uint64_t *sub_1000471B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_10000AE2C((uint64_t)a1, &qword_1000CA000);
    v4 = sub_100004EAC(&qword_1000CA000);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 1;
    }
    else
    {
      v9 = *a2;
      *a1 = *a2;
      swift_retain(v9);
      v6 = a1;
      v7 = v4;
      v8 = 0;
    }
    swift_storeEnumTagMultiPayload(v6, v7, v8);
  }
  return a1;
}

void *sub_10004726C(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100004EAC(&qword_1000CA000);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

void *sub_100047304(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_10000AE2C((uint64_t)a1, &qword_1000CA000);
    v4 = sub_100004EAC(&qword_1000CA000);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000473B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000473C0);
}

uint64_t sub_1000473C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CA230);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100047400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004740C);
}

uint64_t sub_10004740C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CA230);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_100047450(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_100032690(319, (unint64_t *)&unk_1000CA2A0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

unint64_t sub_1000474D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA2D0;
  if (!qword_1000CA2D0)
  {
    v1 = sub_10000ABD0(&qword_1000C9F50);
    sub_10000B254(&qword_1000CA2D8, &qword_1000C9F48, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA2D0);
  }
  return result;
}

uint64_t sub_100047558()
{
  return sub_100034050(&qword_1000CA2E0, &qword_1000C9F98, (void (*)(void))sub_10004758C);
}

uint64_t sub_10004758C()
{
  return sub_100034050(&qword_1000CA2E8, &qword_1000C9F70, (void (*)(void))sub_1000475B0);
}

unint64_t sub_1000475B0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000CA2F0;
  if (!qword_1000CA2F0)
  {
    v1 = sub_10000ABD0(&qword_1000C9F68);
    v2[0] = sub_10000ABD0(&qword_1000C9F58);
    v2[1] = type metadata accessor for NavigationPath(255);
    v2[2] = sub_100045EB0();
    v2[3] = sub_100005900(&qword_1000C9F90, (uint64_t (*)(uint64_t))&type metadata accessor for NavigationPath, (uint64_t)&protocol conformance descriptor for NavigationPath);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    sub_10000B254(&qword_1000CA2F8, &qword_1000CA300, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA2F0);
  }
  return result;
}

uint64_t sub_1000476A0()
{
  return sub_10000B254(&qword_1000CA308, &qword_1000CA310, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_1000476CC()
{
  return sub_100034050(&qword_1000CA318, &qword_1000C9FF8, (void (*)(void))sub_100047700);
}

unint64_t sub_100047700()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA320;
  if (!qword_1000CA320)
  {
    v1 = sub_10000ABD0(&qword_1000C9FF0);
    sub_100034050(&qword_1000CA328, &qword_1000C9FE8, (void (*)(void))sub_1000477A4);
    sub_10000B254(&qword_1000CA338, &qword_1000CA008, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA320);
  }
  return result;
}

unint64_t sub_1000477A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA330;
  if (!qword_1000CA330)
  {
    v1 = sub_10000ABD0(&qword_1000C9FE0);
    sub_100005900(&qword_1000CA188, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA330);
  }
  return result;
}

uint64_t sub_100047828()
{
  return sub_10000B254(&qword_1000CA340, &qword_1000CA348, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_100047854()
{
  return sub_100034050(&qword_1000CA350, &qword_1000CA060, (void (*)(void))sub_100047888);
}

uint64_t sub_100047888()
{
  return sub_100034050(&qword_1000CA358, &qword_1000CA058, (void (*)(void))sub_1000478AC);
}

unint64_t sub_1000478AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA360;
  if (!qword_1000CA360)
  {
    v1 = sub_10000ABD0(&qword_1000CA050);
    sub_10000B254(&qword_1000CA368, &qword_1000CA048, (uint64_t)&unk_1000947E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA360);
  }
  return result;
}

unint64_t sub_100047934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA370;
  if (!qword_1000CA370)
  {
    v1 = sub_10000ABD0(&qword_1000CA108);
    sub_100034050(&qword_1000CA378, &qword_1000CA100, (void (*)(void))sub_1000479D8);
    sub_10000B254(&qword_1000CA388, &qword_1000CA128, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA370);
  }
  return result;
}

unint64_t sub_1000479D8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000CA380;
  if (!qword_1000CA380)
  {
    v1 = sub_10000ABD0(&qword_1000CA0F8);
    v2[0] = sub_10000ABD0(&qword_1000CA110);
    v2[1] = type metadata accessor for PlainTextFieldStyle(255);
    v2[2] = sub_10000B254(&qword_1000CA118, &qword_1000CA110, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v2[3] = sub_100005900(&qword_1000CA120, (uint64_t (*)(uint64_t))&type metadata accessor for PlainTextFieldStyle, (uint64_t)&protocol conformance descriptor for PlainTextFieldStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.textFieldStyle<A>(_:)>>, 1);
    sub_10000B254((unint64_t *)&unk_1000CB710, (uint64_t *)&unk_1000CA0C0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA380);
  }
  return result;
}

uint64_t sub_100047AE0()
{
  return sub_10000B254(&qword_1000CA390, &qword_1000CA398, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

unint64_t sub_100047B10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA3A0;
  if (!qword_1000CA3A0)
  {
    v1 = sub_10000ABD0(&qword_1000CA190);
    sub_100034050(&qword_1000CA3A8, &qword_1000CA178, (void (*)(void))sub_100047BB4);
    sub_10000B254(&qword_1000CA3B8, &qword_1000CA198, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA3A0);
  }
  return result;
}

uint64_t sub_100047BB4()
{
  return sub_100047BD8(&qword_1000CA3B0, &qword_1000CA170, &qword_1000CA160, (uint64_t (*)(void))sub_100046DE0);
}

uint64_t sub_100047BD8(unint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_10000ABD0(a2);
    v9[0] = sub_10000ABD0(a3);
    v9[1] = a4();
    swift_getOpaqueTypeConformance2(v9, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_10000B254((unint64_t *)&unk_1000CB710, (uint64_t *)&unk_1000CA0C0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100047C88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA3C0;
  if (!qword_1000CA3C0)
  {
    v1 = sub_10000ABD0(&qword_1000CA3C8);
    sub_100047BD8((unint64_t *)&unk_1000CA1F0, &qword_1000CA1B8, &qword_1000CA1A8, (uint64_t (*)(void))sub_100046EC8);
    sub_100005900(&qword_1000CA3D0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA3C0);
  }
  return result;
}

uint64_t sub_100047D2C()
{
  return sub_100034050(&qword_1000CA3D8, &qword_1000CA218, (void (*)(void))sub_100047D60);
}

unint64_t sub_100047D60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA3E0;
  if (!qword_1000CA3E0)
  {
    v1 = sub_10000ABD0(&qword_1000CA210);
    sub_100047DE4();
    sub_10000B254(&qword_1000CA400, &qword_1000CA220, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA3E0);
  }
  return result;
}

unint64_t sub_100047DE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA3E8;
  if (!qword_1000CA3E8)
  {
    v1 = sub_10000ABD0(&qword_1000CA208);
    sub_100034050(&qword_1000CA328, &qword_1000C9FE8, (void (*)(void))sub_1000477A4);
    sub_10000B254(&qword_1000CA3F0, &qword_1000CA3F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA3E8);
  }
  return result;
}

uint64_t sub_100047E88(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0928, 1);
}

uint64_t getEnumTagSinglePayload for RewriteIconTitleLabelStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s21WritingToolsUIService29HorizontalIconTitleLabelStyleVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100047F84 + 4 * byte_100093A4F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100047FB8 + 4 * byte_100093A4A[v4]))();
}

uint64_t sub_100047FB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047FC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100047FC8);
  return result;
}

uint64_t sub_100047FD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100047FDCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100047FE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047FE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InputDashboardQuestionnaireButtonStyle()
{
  return &type metadata for InputDashboardQuestionnaireButtonStyle;
}

_WORD *initializeBufferWithCopyOfBuffer for InputDashboardButtonStyle(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for InputDashboardButtonStyle(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for InputDashboardButtonStyle(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100048100 + 4 * byte_100093A59[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_100048134 + 4 * byte_100093A54[v4]))();
}

uint64_t sub_100048134(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_10004813C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x100048144);
  return result;
}

uint64_t sub_100048150(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x100048158);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10004815C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100048164(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InputDashboardButtonStyle()
{
  return &type metadata for InputDashboardButtonStyle;
}

unint64_t sub_100048184()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA418;
  if (!qword_1000CA418)
  {
    v1 = sub_10000ABD0(&qword_1000CA408);
    sub_10000B254(&qword_1000CA420, &qword_1000CA410, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA418);
  }
  return result;
}

uint64_t sub_100048208(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0978, 1);
}

uint64_t sub_100048218(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0950, 1);
}

uint64_t sub_100048230()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100048240()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100048254()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA478;
  if (!qword_1000CA478)
  {
    v1 = sub_10000ABD0(&qword_1000CA448);
    sub_100034050(&qword_1000CA480, &qword_1000CA440, (void (*)(void))sub_1000482F8);
    sub_10000B254(&qword_1000C7E40, &qword_1000CA0D0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA478);
  }
  return result;
}

unint64_t sub_1000482F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA488;
  if (!qword_1000CA488)
  {
    v1 = sub_10000ABD0(&qword_1000CA438);
    sub_10004837C();
    sub_10000B254((unint64_t *)&unk_1000CA4A0, &qword_1000C7F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA488);
  }
  return result;
}

unint64_t sub_10004837C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA490;
  if (!qword_1000CA490)
  {
    v1 = sub_10000ABD0(&qword_1000CA430);
    sub_100048400();
    sub_10000B254((unint64_t *)&unk_1000CB710, (uint64_t *)&unk_1000CA0C0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA490);
  }
  return result;
}

unint64_t sub_100048400()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA498;
  if (!qword_1000CA498)
  {
    v1 = sub_10000ABD0(&qword_1000CA428);
    sub_100005900(&qword_1000CA188, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA498);
  }
  return result;
}

uint64_t sub_100048484()
{
  return sub_100034050(&qword_1000CA4B0, &qword_1000CA468, (void (*)(void))sub_1000484B8);
}

unint64_t sub_1000484B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA4B8;
  if (!qword_1000CA4B8)
  {
    v1 = sub_10000ABD0(&qword_1000CA460);
    sub_10004853C();
    sub_10000B254((unint64_t *)&unk_1000CA4A0, &qword_1000C7F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA4B8);
  }
  return result;
}

unint64_t sub_10004853C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA4C0;
  if (!qword_1000CA4C0)
  {
    v1 = sub_10000ABD0(&qword_1000CA458);
    sub_1000485C0();
    sub_10000B254((unint64_t *)&unk_1000CA4E0, &qword_1000CA470, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA4C0);
  }
  return result;
}

unint64_t sub_1000485C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA4C8;
  if (!qword_1000CA4C8)
  {
    v1 = sub_10000ABD0(&qword_1000CA450);
    sub_10004837C();
    sub_10000B254(&qword_1000CA4D0, &qword_1000CA4D8, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA4C8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RewriteType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WritingTools(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100048728 + 4 * byte_100094285[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10004875C + 4 * byte_100094280[v4]))();
}

uint64_t sub_10004875C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100048764(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004876CLL);
  return result;
}

uint64_t sub_100048778(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100048780);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100048784(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004878C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WritingTools()
{
  return &type metadata for WritingTools;
}

unint64_t sub_1000487AC()
{
  unint64_t result;

  result = qword_1000CA4F0;
  if (!qword_1000CA4F0)
  {
    result = swift_getWitnessTable(&unk_1000942F4, &type metadata for WritingTools);
    atomic_store(result, (unint64_t *)&qword_1000CA4F0);
  }
  return result;
}

uint64_t sub_1000487F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_10004881C + 4 * byte_10009428A[a1]))("Panel_iOS", 9);
}

const char *sub_10004881C()
{
  return "Panel_iPadOS";
}

const char *sub_100048830()
{
  return "Panel_visionOS";
}

const char *sub_100048864()
{
  return "OpenEndedAdjustment";
}

const char *sub_1000488C0()
{
  return "WritingTools";
}

uint64_t sub_1000488D4()
{
  unsigned __int8 *v0;

  return sub_1000487F0(*v0);
}

uint64_t sub_1000488F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = sub_100004EAC(&qword_1000C74C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CommonUIManager(0);
  v10 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  *(_QWORD *)a3 = Environment.init<A>(_:)(v9, v9, v10);
  *(_BYTE *)(a3 + 8) = v11 & 1;
  LOBYTE(v23) = 0;
  State.init(wrappedValue:)(&v24, &v23, &type metadata for Bool);
  v12 = v25;
  *(_BYTE *)(a3 + 32) = v24;
  *(_QWORD *)(a3 + 40) = v12;
  v13 = type metadata accessor for FBKSEvaluation.Subject(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 1, 1, v13);
  v14 = (objc_class *)type metadata accessor for FBKEvaluationController(0);
  v15 = objc_allocWithZone(v14);
  v23 = FBKEvaluationController.init(subject:)(v8);
  State.init(wrappedValue:)(&v24, &v23, v14);
  v16 = v25;
  *(_QWORD *)(a3 + 48) = v24;
  *(_QWORD *)(a3 + 56) = v16;
  v17 = type metadata accessor for RewritingView(0);
  sub_10000AD78(a2, a3 + *(int *)(v17 + 32), &qword_1000C9E90);
  v23 = a1;
  v18 = type metadata accessor for RewritingModel(0);
  State.init(wrappedValue:)(&v24, &v23, v18);
  v19 = v24;
  v20 = v25;
  result = sub_10000AE2C(a2, &qword_1000C9E90);
  *(_QWORD *)(a3 + 16) = v19;
  *(_QWORD *)(a3 + 24) = v20;
  return result;
}

uint64_t RewritingView.body.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  *a2 = static Alignment.center.getter(a1);
  a2[1] = v4;
  v5 = sub_100004EAC(&qword_1000CA4F8);
  return sub_100048AC4(v2, (_QWORD *)((char *)a2 + *(int *)(v5 + 44)));
}

uint64_t sub_100048AC4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t result;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t OpaqueTypeConformance2;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t Strong;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t KeyPath;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  void (*v115)(char *, char *, uint64_t);
  char *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t);
  uint64_t v122;
  _QWORD v123[3];
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  int v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  _QWORD v165[2];
  uint64_t v166;
  void *v167;
  void *v168;
  unint64_t v169;

  v164 = a2;
  v3 = type metadata accessor for RewritingView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v160 = v3;
  v161 = v4;
  __chkstk_darwin(v3);
  v162 = v5;
  v163 = (uint64_t)&v124 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_100004EAC(&qword_1000C9E90);
  __chkstk_darwin(v158);
  v159 = (char *)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v132 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v131 = (char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v8);
  v125 = (char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004EAC(&qword_1000CA5E8);
  __chkstk_darwin(v10);
  v12 = (char *)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100004EAC(&qword_1000CA5F0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v14 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100004EAC(&qword_1000CA5F8);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v126 = (char *)&v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100004EAC(&qword_1000CA600);
  v135 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v133 = (char *)&v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100004EAC(&qword_1000CA608);
  v139 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v138 = (char *)&v124 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_100004EAC(&qword_1000C9608);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v142 = (char *)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004EAC(&qword_1000C9610);
  __chkstk_darwin(v19);
  v141 = (uint64_t)&v124 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100004EAC(&qword_1000CA610);
  __chkstk_darwin(v21);
  v146 = (uint64_t)&v124 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100004EAC(&qword_1000CA618);
  __chkstk_darwin(v143);
  v147 = (char *)&v124 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = sub_100004EAC(&qword_1000CA620);
  __chkstk_darwin(v151);
  v152 = (uint64_t)&v124 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_100004EAC(&qword_1000CA628);
  v155 = *(_QWORD *)(v157 - 8);
  v25 = __chkstk_darwin(v157);
  v156 = (char *)&v124 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v150 = (char *)&v124 - v28;
  v29 = __chkstk_darwin(v27);
  v153 = (char *)&v124 - v30;
  v154 = static Color.clear.getter(v29);
  v149 = static Edge.Set.vertical.getter(v154);
  v148 = static SafeAreaRegions.all.getter();
  *(_QWORD *)v12 = static HorizontalAlignment.center.getter(v148);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v31 = sub_100004EAC(&qword_1000CA630);
  sub_1000496FC((uint64_t)a1, (uint64_t)&v12[*(int *)(v31 + 44)]);
  v32 = a1[2];
  v33 = (void *)a1[3];
  v166 = v32;
  v167 = v33;
  v34 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(v165, v34);
  v35 = v165[0];
  v36 = sub_10000BF20();
  swift_release(v35, v37);
  v136 = v34;
  if ((v36 & 1) != 0)
  {
    v38 = 0;
    v39 = 0xE000000000000000;
LABEL_5:
    v166 = v38;
    v167 = (void *)v39;
    v52 = sub_10000B254(&qword_1000CA638, &qword_1000CA5E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v53 = sub_100015204();
    View.navigationTitle<A>(_:)(&v166, v10, &type metadata for String, v52, v53);
    swift_bridgeObjectRelease(v39);
    sub_10000AE2C((uint64_t)v12, &qword_1000CA5E8);
    v54 = v132;
    v55 = v131;
    v56 = v134;
    (*(void (**)(char *, _QWORD, uint64_t))(v132 + 104))(v131, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v134);
    v166 = v10;
    v167 = &type metadata for String;
    v168 = (void *)v52;
    v169 = v53;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v166, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 1);
    v58 = v126;
    v59 = v128;
    View.navigationBarTitleDisplayMode(_:)(v55, v128, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v14, v59);
    v166 = v59;
    v167 = (void *)OpaqueTypeConformance2;
    v60 = swift_getOpaqueTypeConformance2(&v166, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v61 = v133;
    v62 = v130;
    View.navigationBarBackButtonHidden(_:)(1, v130, v60);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v58, v62);
    v63 = a1[7];
    v165[0] = a1[6];
    v165[1] = v63;
    sub_100004EAC(&qword_1000C7EE8);
    State.projectedValue.getter(&v166);
    v64 = v166;
    v65 = v167;
    v66 = v168;
    v166 = v62;
    v167 = (void *)v60;
    v67 = swift_getOpaqueTypeConformance2(&v166, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
    v68 = v138;
    v69 = v137;
    View.inlineFeedback(controller:completion:)(v64, v65, v66, 0, 0, v137, v67);

    swift_release(v65, v70);
    swift_release(v64, v71);
    v72 = (*(uint64_t (**)(char *, uint64_t))(v135 + 8))(v61, v69);
    __chkstk_darwin(v72);
    v123[2] = a1;
    v73 = sub_100004EAC(&qword_1000CA640);
    v166 = v69;
    v167 = (void *)v67;
    v74 = swift_getOpaqueTypeConformance2(&v166, &opaque type descriptor for <<opaque return type of View.inlineFeedback(controller:completion:)>>, 1);
    v75 = sub_10000B254(&qword_1000CA648, &qword_1000CA640, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v76 = v142;
    v77 = v140;
    View.toolbar<A>(content:)(sub_10004E808, v123, v140, v73, v74, v75);
    v78 = (*(uint64_t (**)(char *, uint64_t))(v139 + 8))(v68, v77);
    v79 = static Alignment.center.getter(v78);
    v80 = v141;
    v82 = sub_10002D8D4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v141, 0.0, 1, 0.0, 1, v79, v81);
    (*(void (**)(char *, uint64_t, double))(v144 + 8))(v76, v145, v82);
    v83 = v146;
    sub_10000AD78(v80, v146, &qword_1000C9610);
    sub_10000AE2C(v80, &qword_1000C9610);
    v84 = (void *)a1[3];
    v166 = a1[2];
    v167 = v84;
    v85 = v136;
    State.wrappedValue.getter(v165, v136);
    v86 = v165[0];
    Strong = swift_unknownObjectWeakLoadStrong(v165[0] + 16);
    swift_release(v86, v88);
    v89 = (uint64_t)v159;
    Binding.projectedValue.getter(v158);
    v90 = (uint64_t)v147;
    sub_10003FA74(Strong, 1, 0, v89, (uint64_t)&v147[*(int *)(v143 + 36)]);
    v91 = sub_10000AC80(v83, v90, &qword_1000CA610);
    v92 = static Alignment.center.getter(v91);
    v94 = v93;
    v95 = v152;
    sub_10000AD78(v90, v152, &qword_1000CA618);
    v96 = v151;
    v97 = v95 + *(int *)(v151 + 36);
    *(_WORD *)v97 = 1;
    *(_QWORD *)(v97 + 8) = v92;
    *(_QWORD *)(v97 + 16) = v94;
    sub_10000AE2C(v90, &qword_1000CA618);
    v98 = (void *)a1[3];
    v166 = a1[2];
    v167 = v98;
    State.wrappedValue.getter(v165, v85);
    v99 = v165[0];
    KeyPath = swift_getKeyPath(&unk_1000944E8);
    v166 = v99;
    v101 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v166, KeyPath, v101);
    swift_release(KeyPath, v102);
    LOBYTE(v94) = *(_BYTE *)(v99 + 72);
    swift_release(v99, v103);
    LOBYTE(v166) = v94;
    v104 = v163;
    sub_10004E818((uint64_t)a1, v163);
    v105 = *(unsigned __int8 *)(v161 + 80);
    v106 = (v105 + 16) & ~v105;
    v107 = swift_allocObject(&unk_1000C0328, v106 + v162, v105 | 7);
    sub_10004E860(v104, v107 + v106);
    v108 = sub_10004E8F0();
    v109 = v150;
    View.onChange<A>(of:initial:_:)(&v166, 0, sub_10004E8A4, v107, v96, &type metadata for Bool, v108, &protocol witness table for Bool);
    swift_release(v107, v110);
    sub_10000AE2C(v95, &qword_1000CA620);
    v111 = v155;
    v112 = v153;
    v113 = v109;
    v114 = v157;
    (*(void (**)(char *, char *, uint64_t))(v155 + 32))(v153, v113, v157);
    v115 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
    v116 = v156;
    v115(v156, v112, v114);
    v117 = v164;
    v118 = v154;
    v119 = v148;
    *v164 = v154;
    v117[1] = v119;
    *((_BYTE *)v117 + 16) = v149;
    v120 = sub_100004EAC(&qword_1000CA670);
    v115((char *)v117 + *(int *)(v120 + 48), v116, v114);
    v121 = *(void (**)(char *, uint64_t))(v111 + 8);
    swift_retain(v118);
    v121(v112, v114);
    v121(v116, v114);
    return swift_release(v118, v122);
  }
  v166 = v32;
  v167 = v33;
  State.wrappedValue.getter(v165, v34);
  v40 = v165[0];
  v41 = swift_getKeyPath(&unk_1000944C0);
  v166 = v40;
  v42 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v166, v41, v42);
  swift_release(v41, v43);
  v44 = *(_QWORD *)(v40 + 32);
  v45 = *(_QWORD *)(v40 + 40);
  v46 = *(_QWORD *)(v40 + 48);
  v47 = *(unsigned __int8 *)(v40 + 56);
  sub_10000B04C(v44, v45, v46, *(_BYTE *)(v40 + 56));
  result = swift_release(v40, v48);
  if (v47 != 255)
  {
    v50 = v125;
    sub_100061960(v44, v45, v46, v47);
    sub_10000B11C(v44, v45, v46, v47);
    v38 = String.init(localized:)(v50);
    v39 = v51;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000496EC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of RewritingView.body>>, 1);
}

uint64_t sub_1000496FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  BOOL *v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  id v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  BOOL v185;
  uint64_t v186;
  BOOL *v187;
  int *v188;
  BOOL *v189;
  BOOL *v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t KeyPath;
  uint64_t v238;
  uint64_t v239;
  BOOL *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  uint64_t v248;

  v234 = a2;
  v235 = sub_100004EAC(&qword_1000CA6C8);
  __chkstk_darwin(v235);
  v240 = (BOOL *)&v216 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RewritingView(0);
  v5 = __chkstk_darwin(v4);
  v218 = (char *)&v216 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v224 = (uint64_t)&v216 - v7;
  v8 = sub_100004EAC(&qword_1000CA6D0);
  __chkstk_darwin(v8);
  v219 = (uint64_t *)((char *)&v216 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v238 = sub_100004EAC(&qword_1000CA6D8);
  v10 = __chkstk_darwin(v238);
  v230 = (uint64_t)&v216 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  KeyPath = (uint64_t)&v216 - v13;
  __chkstk_darwin(v12);
  v239 = (uint64_t)&v216 - v14;
  v231 = sub_100004EAC(&qword_1000CA6E0);
  __chkstk_darwin(v231);
  v233 = (uint64_t)&v216 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = sub_100004EAC(&qword_1000C9670);
  __chkstk_darwin(v232);
  v17 = (char *)&v216 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = type metadata accessor for ParagraphTypesetting(0);
  v221 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v220 = (char *)&v216 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = sub_100004EAC(&qword_1000C9560);
  v229 = *(_QWORD *)(v236 - 8);
  __chkstk_darwin(v236);
  v226 = (uint64_t)&v216 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = sub_100004EAC(&qword_1000C9578);
  __chkstk_darwin(v222);
  v228 = (uint64_t)&v216 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = sub_100004EAC(&qword_1000C9678);
  v21 = __chkstk_darwin(v225);
  v23 = (char *)&v216 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v241 = (uint64_t)&v216 - v24;
  v25 = type metadata accessor for LocalizedStringResource(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v216 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD *)(a1 + 16);
  v29 = *(_QWORD *)(a1 + 24);
  v227 = a1;
  v242 = v30;
  v243 = v29;
  v31 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v248, v31);
  v32 = v248;
  LOBYTE(a1) = sub_10000BF20();
  swift_release(v32, v33);
  if ((a1 & 1) != 0)
  {
    if (qword_1000C73E8 != -1)
      swift_once(&qword_1000C73E8, sub_10000B294);
    v34 = sub_1000063D4(v25, (uint64_t)qword_1000D1C48);
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    v35(v28, v34, v25);
    v36 = Text.init(_:)(v28);
    v38 = v37;
    v40 = v39;
    v42 = v41 & 1;
    v43 = static Font.headline.getter();
    v44 = Text.font(_:)(v43, v36, v38, v42, v40);
    v238 = v45;
    v239 = v44;
    LODWORD(v230) = v46;
    v240 = v47;
    swift_release(v43, v45);
    sub_10000ADF4(v36, v38, v42);
    swift_bridgeObjectRelease(v40);
    KeyPath = swift_getKeyPath(&unk_100094630);
    LODWORD(v227) = static Edge.Set.top.getter(KeyPath);
    v48 = EdgeInsets.init(_all:)(-16.0);
    v50 = v49;
    v52 = v51;
    v54 = v53;
    if (qword_1000C73F0 != -1)
      swift_once(&qword_1000C73F0, sub_10000B2B8);
    v55 = sub_1000063D4(v25, (uint64_t)qword_1000D1C60);
    v35(v28, v55, v25);
    v56 = Text.init(_:)(v28);
    v58 = v57;
    v60 = v59;
    v62 = v61 & 1;
    LODWORD(v242) = static HierarchicalShapeStyle.secondary.getter(v56);
    v63 = Text.foregroundStyle<A>(_:)(&v242, v56, v58, v62, v60, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v65 = v64;
    v67 = v66;
    v69 = v68;
    sub_10000ADF4(v56, v58, v62);
    swift_bridgeObjectRelease(v60);
    v70 = swift_getKeyPath(&unk_100094630);
    v242 = v63;
    v243 = v65;
    v244 = v67 & 1;
    v245 = v69;
    v246 = v70;
    v247 = 1;
    v71 = v220;
    static ParagraphTypesetting.balanced.getter();
    v72 = sub_100004EAC(&qword_1000C9568);
    v73 = sub_100033F30();
    v74 = v226;
    View.paragraphTypesetting(_:isEnabled:)(v71, 1, v72, v73);
    (*(void (**)(char *, uint64_t))(v221 + 8))(v71, v223);
    sub_10000ADF4(v242, v243, v244);
    swift_bridgeObjectRelease(v245);
    v76 = swift_release(v246, v75);
    LOBYTE(v72) = static Edge.Set.all.getter(v76);
    v77 = v229;
    v78 = v228;
    v79 = v236;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v229 + 16))(v228, v74, v236);
    v80 = v78 + *(int *)(v222 + 36);
    *(_BYTE *)v80 = v72;
    *(_OWORD *)(v80 + 8) = 0u;
    *(_OWORD *)(v80 + 24) = 0u;
    *(_BYTE *)(v80 + 40) = 1;
    v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 8))(v74, v79);
    LOBYTE(v72) = static Edge.Set.bottom.getter(v81);
    sub_10000AD78(v78, (uint64_t)v23, &qword_1000C9578);
    v82 = &v23[*(int *)(v225 + 36)];
    *v82 = v72;
    *(_OWORD *)(v82 + 8) = 0u;
    *(_OWORD *)(v82 + 24) = 0u;
    v82[40] = 1;
    sub_10000AE2C(v78, &qword_1000C9578);
    v83 = v241;
    sub_10000AC80((uint64_t)v23, v241, &qword_1000C9678);
    sub_10000AD78(v83, (uint64_t)v23, &qword_1000C9678);
    v84 = v238;
    v85 = v239;
    *(_QWORD *)v17 = v239;
    *((_QWORD *)v17 + 1) = v84;
    LOBYTE(v83) = v230 & 1;
    v17[16] = v230 & 1;
    v86 = v240;
    v87 = KeyPath;
    *((_QWORD *)v17 + 3) = v240;
    *((_QWORD *)v17 + 4) = v87;
    v17[40] = 1;
    v17[48] = v227;
    *((double *)v17 + 7) = v48;
    *((_QWORD *)v17 + 8) = v50;
    *((_QWORD *)v17 + 9) = v52;
    *((_QWORD *)v17 + 10) = v54;
    v17[88] = 0;
    v88 = sub_100004EAC(&qword_1000C96B8);
    sub_10000AD78((uint64_t)v23, (uint64_t)&v17[*(int *)(v88 + 48)], &qword_1000C9678);
    sub_10000ADBC(v85, v84, v83);
    swift_bridgeObjectRetain(v86);
    swift_retain(v87);
    sub_10000ADBC(v85, v84, v83);
    swift_bridgeObjectRetain(v86);
    swift_retain(v87);
    sub_10000AE2C((uint64_t)v23, &qword_1000C9678);
    sub_10000ADF4(v85, v84, v83);
    swift_release(v87, v89);
    swift_bridgeObjectRelease(v86);
    v90 = v233;
    sub_10000AD78((uint64_t)v17, v233, &qword_1000C9670);
    swift_storeEnumTagMultiPayload(v90, v231, 0);
    v91 = sub_10000B254(&qword_1000C96B0, &qword_1000C9670, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v92 = sub_10000B254(&qword_1000CA6F8, &qword_1000CA6C8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v90, v232, v235, v91, v92);
    sub_10000AE2C((uint64_t)v17, &qword_1000C9670);
    sub_10000AE2C(v241, &qword_1000C9678);
    sub_10000ADF4(v85, v84, v83);
    swift_release(v87, v93);
    return swift_bridgeObjectRelease(v86);
  }
  else
  {
    v242 = v30;
    v243 = v29;
    State.wrappedValue.getter(&v248, v31);
    v95 = v248;
    v96 = swift_getKeyPath(&unk_100094590);
    v242 = v95;
    v97 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v242, v96, v97);
    swift_release(v96, v98);
    v223 = *(_QWORD *)(v95 + 96);
    v100 = swift_release(v95, v99);
    v101 = static VerticalAlignment.center.getter(v100);
    v102 = v219;
    *v219 = v101;
    v102[1] = 0;
    v103 = 1;
    *((_BYTE *)v102 + 16) = 1;
    v104 = sub_100004EAC(&qword_1000CA6E8);
    v105 = (uint64_t)v102;
    v106 = (_QWORD *)v227;
    sub_10004A9A8(v227, (char *)v102 + *(int *)(v104 + 44));
    v107 = v106[3];
    v242 = v106[2];
    v243 = v107;
    State.wrappedValue.getter(&v248, v31);
    v108 = v248;
    v109 = swift_getKeyPath(&unk_1000945B8);
    v242 = v108;
    v222 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v242, v109, v222);
    swift_release(v109, v110);
    v111 = *(_QWORD *)(v108 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session);
    swift_release(v108, v112);
    v113 = v224;
    sub_10004E818((uint64_t)v106, v224);
    v114 = v31;
    if (v111)
    {
      v115 = *(_QWORD *)(v113 + 24);
      v242 = *(_QWORD *)(v113 + 16);
      v243 = v115;
      State.wrappedValue.getter(&v248, v31);
      v116 = v248;
      v117 = swift_getKeyPath(&unk_1000944E8);
      v242 = v116;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v242, v117, v97);
      swift_release(v117, v118);
      v103 = *(_BYTE *)(v116 + 72);
      swift_release(v116, v119);
    }
    sub_10004ED78(v113);
    v120 = swift_getKeyPath(&unk_100094538);
    v121 = swift_allocObject(&unk_1000C03F0, 17, 7);
    *(_BYTE *)(v121 + 16) = v103;
    v122 = (char *)KeyPath;
    sub_10000AD78(v105, KeyPath, &qword_1000CA6D0);
    v123 = (uint64_t *)&v122[*(int *)(v238 + 36)];
    *v123 = v120;
    v123[1] = (uint64_t)sub_100015794;
    v123[2] = v121;
    sub_10000AE2C(v105, &qword_1000CA6D0);
    sub_10000AC80((uint64_t)v122, v239, &qword_1000CA6D8);
    v124 = type metadata accessor for FeedbackFeatureFlags(0);
    v245 = v124;
    v246 = sub_100005900(&qword_1000C7870, (uint64_t (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags, (uint64_t)&protocol conformance descriptor for FeedbackFeatureFlags);
    v125 = sub_10000AF68(&v242);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v124 - 8) + 104))(v125, enum case for FeedbackFeatureFlags.CentralizedFeedback(_:), v124);
    LOBYTE(v124) = isFeatureEnabled(_:)(&v242);
    sub_10000AFA4(&v242);
    if ((v124 & 1) != 0)
    {
      v126 = v106[3];
      v242 = v106[2];
      v243 = v126;
      State.wrappedValue.getter(&v248, v114);
      v127 = v248;
      v128 = swift_getKeyPath(&unk_1000944C0);
      v242 = v127;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v242, v128, v97);
      swift_release(v128, v129);
      v130 = *(_QWORD *)(v127 + 40);
      v131 = *(_QWORD *)(v127 + 48);
      v132 = *(_BYTE *)(v127 + 56);
      v133 = (char *)v132;
      v236 = *(_QWORD *)(v127 + 32);
      v229 = v130;
      v225 = v131;
      sub_10000B04C(v236, v130, v131, v132);
      swift_release(v127, v134);
      v135 = v114;
      v137 = v106[3];
      v242 = v106[2];
      v136 = v242;
      v243 = v137;
      State.wrappedValue.getter(&v248, v135);
      v138 = v248;
      v228 = sub_100025E90();
      v224 = v139;
      swift_release(v138, v139);
      v242 = v136;
      v243 = v137;
      v140 = v135;
      State.wrappedValue.getter(&v248, v135);
      v141 = v248;
      v142 = swift_getKeyPath(&unk_1000945E0);
      v242 = v141;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v242, v142, v222);
      swift_release(v142, v143);
      v145 = *(void **)(v141 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString);
      v217 = v97;
      v220 = v133;
      if (v145)
      {
        v146 = v145;
        v147 = objc_msgSend(v146, "string");
        v221 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
        v241 = v148;
        swift_release(v141, v148);

      }
      else
      {
        swift_release(v141, v144);
        v221 = 0;
        v241 = 0xE000000000000000;
      }
      v155 = (uint64_t)v218;
      v156 = v106[3];
      v242 = v106[2];
      v243 = v156;
      State.wrappedValue.getter(&v248, v140);
      v157 = v248;
      v158 = swift_getKeyPath(&unk_100094608);
      v242 = v157;
      v159 = v222;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v242, v158, v222);
      swift_release(v158, v160);
      v161 = *(_QWORD *)(v157 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString + 8);
      v226 = *(_QWORD *)(v157 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString);
      v238 = v161;
      swift_bridgeObjectRetain(v161);
      swift_release(v157, v162);
      v163 = v106[7];
      v242 = v106[6];
      v243 = v163;
      v164 = sub_100004EAC(&qword_1000C7EE8);
      State.wrappedValue.getter(&v248, v164);
      KeyPath = v248;
      v165 = v106[3];
      v242 = v106[2];
      v243 = v165;
      State.wrappedValue.getter(&v248, v140);
      v166 = v248;
      v167 = swift_getKeyPath(&unk_1000945B8);
      v242 = v166;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v242, v167, v159);
      swift_release(v167, v168);
      v169 = *(_QWORD *)(v166 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session);
      swift_release(v166, v170);
      sub_10004E818((uint64_t)v106, v155);
      if (v169)
      {
        v171 = *(_QWORD *)(v155 + 24);
        v242 = *(_QWORD *)(v155 + 16);
        v243 = v171;
        State.wrappedValue.getter(&v248, v140);
        v172 = v248;
        v173 = swift_getKeyPath(&unk_1000944E8);
        v242 = v172;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v242, v173, v217);
        swift_release(v173, v174);
        v175 = *(unsigned __int8 *)(v172 + 72);
        swift_release(v172, v176);
        if (v175)
          v177 = 256;
        else
          v177 = 0;
      }
      else
      {
        v177 = 256;
      }
      v178 = v236;
      v179 = v224;
      v180 = v241;
      v181 = (unint64_t)v220;
      sub_10004ED78(v155);
      v182 = (id)KeyPath;
      swift_bridgeObjectRetain(v179);
      swift_bridgeObjectRetain(v180);
      v183 = v238;
      swift_bridgeObjectRetain(v238);
      v153 = v229;
      v184 = v225;
      sub_10000B04C(v178, v229, v225, v181);
      swift_bridgeObjectRelease(v183);
      swift_bridgeObjectRelease(v180);
      swift_bridgeObjectRelease(v179);

      sub_10000B11C(v178, v153, v184, v181);
      v224 = v177 | v181 | 0x10000;
      v227 = 1;
      v154 = v223;
      v150 = v179;
      v151 = v221;
      v152 = v226;
      v149 = v228;
    }
    else
    {
      v227 = 0;
      v149 = 0;
      v150 = 0;
      v151 = 0;
      v241 = 0;
      v152 = 0;
      v238 = 0;
      v236 = 0;
      v153 = 0;
      v225 = 0;
      v224 = 0;
      KeyPath = 1;
      v154 = v223;
    }
    v185 = (v154 & 2) == 0;
    v186 = v230;
    sub_10000AD78(v239, v230, &qword_1000CA6D8);
    v187 = v240;
    *v240 = v185;
    v188 = (int *)sub_100004EAC(&qword_1000CA6F0);
    sub_10000AD78(v186, (uint64_t)&v187[v188[12]], &qword_1000CA6D8);
    v189 = &v187[v188[16]];
    *(_QWORD *)v189 = 0;
    v189[8] = 1;
    v190 = &v187[v188[20]];
    v191 = v227;
    *(_QWORD *)v190 = 0;
    *((_QWORD *)v190 + 1) = v191;
    v192 = (void *)KeyPath;
    *((_QWORD *)v190 + 2) = KeyPath;
    *((_QWORD *)v190 + 3) = v149;
    *((_QWORD *)v190 + 4) = v150;
    *((_QWORD *)v190 + 5) = v151;
    v193 = v150;
    v194 = v151;
    v195 = v241;
    *((_QWORD *)v190 + 6) = v241;
    *((_QWORD *)v190 + 7) = v152;
    v196 = v195;
    v241 = v195;
    v197 = v191;
    v198 = v238;
    KeyPath = (uint64_t)v192;
    v199 = v152;
    v200 = v236;
    *((_QWORD *)v190 + 8) = v238;
    *((_QWORD *)v190 + 9) = v200;
    v201 = v225;
    *((_QWORD *)v190 + 10) = v153;
    *((_QWORD *)v190 + 11) = v201;
    *((_QWORD *)v190 + 13) = 0;
    *((_QWORD *)v190 + 14) = 0;
    LOBYTE(v188) = v224;
    *((_QWORD *)v190 + 12) = v224;
    v214 = v153;
    v228 = v149;
    v202 = v193;
    v203 = v153;
    v229 = v153;
    v204 = v199;
    sub_100015064(0, v197, v192, v149, v193, v194, v196, v199, v198, v200, v214, v201, (char)v188, 0);
    v215 = v203;
    v205 = v238;
    v206 = v197;
    v207 = v197;
    v227 = v197;
    v208 = (void *)KeyPath;
    v209 = v149;
    v210 = v241;
    v226 = v204;
    sub_100015064(0, v206, (void *)KeyPath, v209, v202, v194, v241, v204, v238, v200, v215, v201, (char)v188, 0);
    sub_1000150E8(0, v207, v208, v228, v202, v194, v210, v204, v205, v200, v229, v201, (char)v188, 0);
    sub_10000AE2C(v230, &qword_1000CA6D8);
    v211 = v233;
    sub_10000AD78((uint64_t)v240, v233, &qword_1000CA6C8);
    swift_storeEnumTagMultiPayload(v211, v231, 1);
    v212 = sub_10000B254(&qword_1000C96B0, &qword_1000C9670, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v213 = sub_10000B254(&qword_1000CA6F8, &qword_1000CA6C8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v211, v232, v235, v212, v213);
    sub_1000150E8(0, v227, v208, v228, v202, v194, v241, v226, v205, v236, v229, v201, (char)v188, 0);
    sub_10000AE2C((uint64_t)v240, &qword_1000CA6C8);
    return sub_10000AE2C(v239, &qword_1000CA6D8);
  }
}

uint64_t sub_10004A9A8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  ValueMetadata *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  ValueMetadata *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int v62;
  uint64_t OpaqueTypeConformance2;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  ValueMetadata *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  ValueMetadata *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  ValueMetadata *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  ValueMetadata *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t result;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(char *, char *, uint64_t);
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  void (*v149)(char *, uint64_t);
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  ValueMetadata *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;

  v181 = a2;
  v157 = sub_100004EAC(&qword_1000CA700);
  v156 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v155 = (char *)&v150 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100004EAC(&qword_1000CA708);
  v159 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v158 = (char *)&v150 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100004EAC(&qword_1000CA710);
  v163 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v162 = (char *)&v150 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100004EAC(&qword_1000CA718);
  v6 = __chkstk_darwin(v178);
  v160 = (char *)&v150 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v165 = (uint64_t)&v150 - v8;
  v174 = sub_100004EAC(&qword_1000CA720);
  __chkstk_darwin(v174);
  v177 = (uint64_t)&v150 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_100004EAC(&qword_1000CA728);
  __chkstk_darwin(v173);
  v167 = (uint64_t *)((char *)&v150 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v175 = sub_100004EAC(&qword_1000CA730);
  v170 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v169 = (char *)&v150 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100004EAC(&qword_1000CA738);
  v172 = *(_QWORD *)(v176 - 8);
  v12 = __chkstk_darwin(v176);
  v168 = (char *)&v150 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v171 = (char *)&v150 - v14;
  v15 = sub_100004EAC(&qword_1000CA740);
  v16 = __chkstk_darwin(v15);
  v180 = (char *)&v150 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v179 = (uint64_t)&v150 - v18;
  v19 = type metadata accessor for RewritingView(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  v22 = __chkstk_darwin(v19);
  v189 = (char *)&v150 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v150 - v23;
  v185 = sub_100004EAC(&qword_1000CBB80);
  v25 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v27 = (char *)&v150 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100004EAC(&qword_1000CA748);
  v29 = *(_QWORD *)(v28 - 8);
  v187 = v28;
  v188 = v29;
  __chkstk_darwin(v28);
  v184 = (char *)&v150 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_100004EAC(&qword_1000CA750);
  v31 = *(_QWORD *)(v190 - 8);
  v32 = __chkstk_darwin(v190);
  v186 = (char *)&v150 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v191 = (char *)&v150 - v34;
  sub_10004E818(a1, (uint64_t)v24);
  v35 = *(unsigned __int8 *)(v20 + 80);
  v36 = (v35 + 16) & ~v35;
  v152 = v36 + v21;
  v151 = v35 | 7;
  v37 = swift_allocObject(&unk_1000C0418, v36 + v21, v35 | 7);
  v153 = v36;
  v154 = v24;
  sub_10004E860((uint64_t)v24, v37 + v36);
  v38 = sub_100004EAC(&qword_1000CBB00);
  v39 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_10004EDE0, v37, sub_1000124E4, 0, v38, v39);
  v182 = a1;
  v40 = *(ValueMetadata **)(a1 + 24);
  v192 = *(_QWORD *)(a1 + 16);
  v193 = v40;
  v41 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  v183 = v41;
  State.wrappedValue.getter(&v196, v41);
  v42 = v196;
  KeyPath = swift_getKeyPath(&unk_100094660);
  v192 = v42;
  v44 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v192, KeyPath, v44);
  swift_release(KeyPath, v45);
  LOBYTE(v21) = *(_BYTE *)(v42 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__showingOriginal);
  swift_release(v42, v46);
  LOBYTE(v192) = v21;
  v47 = sub_10000B254(&qword_1000C80E0, &qword_1000CBB80, (uint64_t)&protocol conformance descriptor for Button<A>);
  v48 = sub_10004EDF4();
  v50 = v184;
  v49 = v185;
  View.labelStyle<A>(_:)(&v192, v185, &type metadata for RewriteIconTitleLabelStyle, v47, v48);
  v51 = *(void (**)(char *, uint64_t))(v25 + 8);
  v52 = v49;
  v51(v27, v49);
  v53 = v182;
  v54 = *(ValueMetadata **)(v182 + 24);
  v192 = *(_QWORD *)(v182 + 16);
  v193 = v54;
  State.wrappedValue.getter(&v196, v41);
  v55 = v196;
  v56 = swift_getKeyPath(&unk_100094660);
  v192 = v55;
  v166 = v44;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v192, v56, v44);
  swift_release(v56, v57);
  LOBYTE(v21) = *(_BYTE *)(v55 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__showingOriginal);
  swift_release(v55, v58);
  v59 = swift_getKeyPath(&unk_100094688);
  LOBYTE(v196) = 0;
  BYTE1(v196) = v21;
  v197 = v59;
  v198 = 0;
  v192 = v52;
  v60 = v186;
  v193 = &type metadata for RewriteIconTitleLabelStyle;
  v194 = v47;
  v61 = v53;
  v150 = v48;
  v195 = v48;
  v62 = 1;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v192, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
  v64 = sub_100015448();
  v65 = v187;
  v185 = v64;
  View.buttonStyle<A>(_:)(&v196, v187, &type metadata for PrimaryButtonStyle, OpaqueTypeConformance2, v64);
  swift_release(v59, v66);
  (*(void (**)(char *, uint64_t))(v188 + 8))(v50, v65);
  v188 = v31;
  v67 = v60;
  v68 = (uint64_t)v189;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v191, v60, v190);
  v69 = *(ValueMetadata **)(v61 + 24);
  v192 = *(_QWORD *)(v61 + 16);
  v193 = v69;
  v70 = v183;
  State.wrappedValue.getter(&v196, v183);
  v71 = v196;
  v72 = swift_getKeyPath(&unk_1000944E8);
  v192 = v71;
  v73 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v192, v72, v73);
  swift_release(v72, v74);
  LOBYTE(v21) = *(_BYTE *)(v71 + 72);
  swift_release(v71, v75);
  sub_10004E818(v61, v68);
  if ((v21 & 1) == 0)
  {
    v76 = *(ValueMetadata **)(v68 + 24);
    v192 = *(_QWORD *)(v68 + 16);
    v193 = v76;
    State.wrappedValue.getter(&v196, v70);
    v77 = v196;
    v78 = swift_getKeyPath(&unk_100094660);
    v192 = v77;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v192, v78, v166);
    swift_release(v78, v79);
    v62 = *(unsigned __int8 *)(v77 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__showingOriginal);
    swift_release(v77, v80);
  }
  sub_10004ED78(v68);
  v81 = *(ValueMetadata **)(v61 + 40);
  LOBYTE(v192) = *(_BYTE *)(v61 + 32);
  v193 = v81;
  v82 = sub_100004EAC(&qword_1000C9FA0);
  v83 = State.wrappedValue.getter(&v196, v82);
  if (v196 == 1)
  {
    v84 = static VerticalAlignment.center.getter(v83);
    v85 = (uint64_t)v167;
    *v167 = v84;
    *(_QWORD *)(v85 + 8) = 0;
    *(_BYTE *)(v85 + 16) = 1;
    v86 = sub_100004EAC(&qword_1000CA7A0);
    sub_10004BA54(v62, v61, v85 + *(int *)(v86 + 44));
    v87 = sub_10000B254(&qword_1000CA788, &qword_1000CA728, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v88 = sub_10004EEFC();
    v89 = v169;
    v90 = v173;
    View.labelStyle<A>(_:)(v88, v173, &type metadata for RewriteIconLabelStyle, v87, v88);
    sub_10000AE2C(v85, &qword_1000CA728);
    v91 = swift_getKeyPath(&unk_100094688);
    LOWORD(v196) = 0;
    v197 = v91;
    v198 = 0;
    v192 = v90;
    v193 = &type metadata for RewriteIconLabelStyle;
    v194 = v87;
    v195 = v88;
    v92 = swift_getOpaqueTypeConformance2(&v192, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
    v93 = v168;
    v94 = v175;
    v95 = v185;
    View.buttonStyle<A>(_:)(&v196, v175, &type metadata for PrimaryButtonStyle, v92, v185);
    swift_release(v91, v96);
    (*(void (**)(char *, uint64_t))(v170 + 8))(v89, v94);
    v97 = v172;
    v98 = v171;
    v99 = v93;
    v100 = v176;
    (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v171, v99, v176);
    v101 = v177;
    (*(void (**)(uint64_t, char *, uint64_t))(v97 + 16))(v177, v98, v100);
    swift_storeEnumTagMultiPayload(v101, v174, 0);
    v192 = v94;
    v193 = &type metadata for PrimaryButtonStyle;
    v194 = v92;
    v195 = v95;
    v102 = swift_getOpaqueTypeConformance2(&v192, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v103 = sub_10004EF40();
    v104 = (uint64_t)v180;
    _ConditionalContent<>.init(storage:)(v101, v100, v178, v102, v103);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v98, v100);
LABEL_11:
    v142 = sub_100004EAC(&qword_1000CA760);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v142 - 8) + 56))(v104, 0, 1, v142);
    v112 = v179;
    sub_10000AC80(v104, v179, &qword_1000CA740);
    goto LABEL_12;
  }
  v105 = *(ValueMetadata **)(v61 + 24);
  v192 = *(_QWORD *)(v61 + 16);
  v193 = v105;
  State.wrappedValue.getter(&v196, v70);
  v106 = v196;
  v107 = swift_getKeyPath(&unk_1000944C0);
  v192 = v106;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v192, v107, v73);
  result = swift_release(v107, v108);
  if (!*(_BYTE *)(v106 + 56))
  {
    if (*(unsigned __int8 *)(v106 + 32) - 2 < 4 || !*(_BYTE *)(v106 + 32))
    {
      swift_release(v106, v110);
      v113 = (uint64_t)v154;
      sub_10004E818(v61, (uint64_t)v154);
      v114 = swift_allocObject(&unk_1000C0440, v152, v151);
      sub_10004E860(v113, v114 + v153);
      v115 = sub_100004EAC(&qword_1000CA770);
      v116 = sub_10004EE50();
      v117 = v155;
      Button.init(action:label:)(sub_10004EE44, v114, sub_10004C900, 0, v115, v116);
      LOBYTE(v192) = 0;
      v118 = sub_10000B254(&qword_1000CA780, &qword_1000CA700, (uint64_t)&protocol conformance descriptor for Button<A>);
      v119 = v158;
      v120 = v157;
      v121 = v150;
      View.labelStyle<A>(_:)(&v192, v157, &type metadata for RewriteIconTitleLabelStyle, v118, v150);
      (*(void (**)(char *, uint64_t))(v156 + 8))(v117, v120);
      v122 = swift_getKeyPath(&unk_100094688);
      LOWORD(v196) = 0;
      v197 = v122;
      v198 = 0;
      v192 = v120;
      v193 = &type metadata for RewriteIconTitleLabelStyle;
      v194 = v118;
      v195 = v121;
      v123 = swift_getOpaqueTypeConformance2(&v192, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
      LOBYTE(v118) = v62;
      v124 = v162;
      v125 = v161;
      v126 = v185;
      View.buttonStyle<A>(_:)(&v196, v161, &type metadata for PrimaryButtonStyle, v123, v185);
      swift_release(v122, v127);
      (*(void (**)(char *, uint64_t))(v159 + 8))(v119, v125);
      v128 = swift_getKeyPath(&unk_100094538);
      v129 = swift_allocObject(&unk_1000C0468, 17, 7);
      *(_BYTE *)(v129 + 16) = v118;
      v130 = v163;
      v131 = (uint64_t)v160;
      v132 = v164;
      (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v160, v124, v164);
      v133 = v178;
      v134 = (uint64_t *)(v131 + *(int *)(v178 + 36));
      *v134 = v128;
      v134[1] = (uint64_t)sub_100015794;
      v134[2] = v129;
      (*(void (**)(char *, uint64_t))(v130 + 8))(v124, v132);
      v135 = v165;
      sub_10000AC80(v131, v165, &qword_1000CA718);
      v136 = v177;
      sub_10000AD78(v135, v177, &qword_1000CA718);
      swift_storeEnumTagMultiPayload(v136, v174, 1);
      v137 = sub_10000B254(&qword_1000CA788, &qword_1000CA728, (uint64_t)&protocol conformance descriptor for HStack<A>);
      v138 = sub_10004EEFC();
      v192 = v173;
      v193 = &type metadata for RewriteIconLabelStyle;
      v194 = v137;
      v195 = v138;
      v139 = swift_getOpaqueTypeConformance2(&v192, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
      v192 = v175;
      v193 = &type metadata for PrimaryButtonStyle;
      v194 = v139;
      v195 = v126;
      v140 = swift_getOpaqueTypeConformance2(&v192, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v141 = sub_10004EF40();
      v104 = (uint64_t)v180;
      _ConditionalContent<>.init(storage:)(v136, v176, v133, v140, v141);
      sub_10000AE2C(v135, &qword_1000CA718);
      goto LABEL_11;
    }
LABEL_7:
    swift_release(v106, v110);
    v111 = sub_100004EAC(&qword_1000CA760);
    v112 = v179;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 56))(v179, 1, 1, v111);
    v104 = (uint64_t)v180;
LABEL_12:
    v143 = v188;
    v144 = *(void (**)(char *, char *, uint64_t))(v188 + 16);
    v146 = v190;
    v145 = v191;
    v144(v67, v191, v190);
    sub_10000AD78(v112, v104, &qword_1000CA740);
    v147 = v181;
    v144(v181, v67, v146);
    v148 = sub_100004EAC(&qword_1000CA768);
    sub_10000AD78(v104, (uint64_t)&v147[*(int *)(v148 + 48)], &qword_1000CA740);
    sub_10000AE2C(v112, &qword_1000CA740);
    v149 = *(void (**)(char *, uint64_t))(v143 + 8);
    v149(v145, v146);
    sub_10000AE2C(v104, &qword_1000CA740);
    return ((uint64_t (*)(char *, uint64_t))v149)(v67, v146);
  }
  if (*(unsigned __int8 *)(v106 + 56) != 255)
    goto LABEL_7;
  __break(1u);
  return result;
}

uint64_t sub_10004B8F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  BOOL v15;
  _QWORD v16[2];
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v17, v2);
  v3 = v17;
  v16[1] = v1;
  State.wrappedValue.getter(&v17, v2);
  v4 = v17;
  KeyPath = swift_getKeyPath(&unk_100094660);
  v16[0] = v4;
  v6 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v16, KeyPath, v6);
  swift_release(KeyPath, v7);
  v8 = *(_BYTE *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__showingOriginal);
  swift_release(v4, v9);
  v10 = swift_getKeyPath(&unk_100094660);
  v14[2] = v3;
  v15 = (v8 & 1) == 0;
  v16[0] = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v16, v10, sub_10002CED8, v14, (char *)&type metadata for () + 8, v6);
  swift_release(v3, v11);
  return swift_release(v10, v12);
}

uint64_t sub_10004BA54@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_BYTE *, uint64_t);
  _BYTE v32[4];
  int v33;
  uint64_t v34;

  v33 = a1;
  v34 = a3;
  v4 = type metadata accessor for RewritingView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_100004EAC(&qword_1000CBB80);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v32[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v32[-v12];
  v14 = sub_100004EAC(&qword_1000CA7A8);
  v15 = __chkstk_darwin(v14);
  v17 = &v32[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __chkstk_darwin(v15);
  v20 = &v32[-v19];
  *(_QWORD *)v20 = static VerticalAlignment.center.getter(v18);
  *((_QWORD *)v20 + 1) = 0x3FF0000000000000;
  v20[16] = 0;
  v21 = sub_100004EAC(&qword_1000CA7B0);
  sub_10004BCD4(v33, a2, (uint64_t)&v20[*(int *)(v21 + 44)]);
  sub_10004E818(a2, (uint64_t)&v32[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  v22 = *(unsigned __int8 *)(v5 + 80);
  v23 = (v22 + 16) & ~v22;
  v24 = swift_allocObject(&unk_1000C0490, v23 + v6, v22 | 7);
  sub_10004E860((uint64_t)&v32[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v24 + v23);
  v25 = sub_100004EAC(&qword_1000CBB00);
  v26 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_10004F060, v24, sub_10004C5CC, 0, v25, v26);
  sub_10000AD78((uint64_t)v20, (uint64_t)v17, &qword_1000CA7A8);
  v27 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16);
  v27(v11, v13, v7);
  v28 = v34;
  sub_10000AD78((uint64_t)v17, v34, &qword_1000CA7A8);
  v29 = sub_100004EAC(&qword_1000CA7B8);
  v27((_BYTE *)(v28 + *(int *)(v29 + 48)), v11, v7);
  v30 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v30(v13, v7);
  sub_10000AE2C((uint64_t)v20, &qword_1000CA7A8);
  v30(v11, v7);
  return sub_10000AE2C((uint64_t)v17, &qword_1000CA7A8);
}

uint64_t sub_10004BCD4@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  LODWORD(v4) = a1;
  v81 = a3;
  v78 = sub_100004EAC(&qword_1000CBB80);
  v76 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v74 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100004EAC(&qword_1000CA7D0);
  v6 = __chkstk_darwin(v77);
  v80 = (uint64_t)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v79 = (char *)&v68 - v9;
  v10 = __chkstk_darwin(v8);
  v75 = (char *)&v68 - v11;
  __chkstk_darwin(v10);
  v82 = (uint64_t)&v68 - v12;
  v13 = type metadata accessor for RewritingView(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v68 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v68 - v20;
  sub_10004E818(a2, (uint64_t)&v68 - v20);
  if ((v4 & 1) != 0)
  {
    v22 = 1;
  }
  else
  {
    v23 = *((_QWORD *)v21 + 3);
    v83 = *((_QWORD *)v21 + 2);
    v84 = v23;
    v24 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
    v73 = v4;
    State.wrappedValue.getter(&v85, v24);
    v25 = v85;
    KeyPath = swift_getKeyPath(&unk_1000946B8);
    v83 = v25;
    v27 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v83, KeyPath, v27);
    swift_release(KeyPath, v28);
    v4 = *(_QWORD *)(v25 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount);
    swift_release(v25, v29);
    v30 = v4 == 0;
    LOBYTE(v4) = v73;
    v22 = v30;
  }
  sub_10004ED78((uint64_t)v21);
  sub_10004E818(a2, (uint64_t)v19);
  if ((v4 & 1) != 0)
  {
    v31 = 1;
  }
  else
  {
    v32 = *((_QWORD *)v19 + 3);
    v83 = *((_QWORD *)v19 + 2);
    v84 = v32;
    v33 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
    State.wrappedValue.getter(&v85, v33);
    v34 = v22;
    v35 = v85;
    v36 = swift_getKeyPath(&unk_1000946E0);
    v83 = v35;
    v37 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v83, v36, v37);
    swift_release(v36, v38);
    v39 = *(_QWORD *)(v35 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__redoCount);
    v40 = v35;
    v22 = v34;
    swift_release(v40, v41);
    v31 = v39 == 0;
  }
  v73 = v31;
  sub_10004ED78((uint64_t)v19);
  sub_10004E818(a2, (uint64_t)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = *(unsigned __int8 *)(v14 + 80);
  v43 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = (v42 + 16) & ~v42;
  v71 = v42 | 7;
  v72 = v44 + v15;
  v45 = swift_allocObject(&unk_1000C04E0, v44 + v15, v42 | 7);
  sub_10004E860((uint64_t)v43, v45 + v44);
  v46 = sub_100004EAC(&qword_1000CBB00);
  v70 = v46;
  v47 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v68 = a2;
  v69 = v47;
  v48 = v74;
  Button.init(action:label:)(sub_10004F144, v45, sub_10004C270, 0, v46, v47);
  v49 = swift_getKeyPath(&unk_100094538);
  v50 = swift_allocObject(&unk_1000C0508, 17, 7);
  *(_BYTE *)(v50 + 16) = v22;
  v52 = (uint64_t)v75;
  v51 = v76;
  v53 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
  v54 = v78;
  v53(v75, v48, v78);
  v55 = v77;
  v56 = (uint64_t *)(v52 + *(int *)(v77 + 36));
  *v56 = v49;
  v56[1] = (uint64_t)sub_100015794;
  v56[2] = v50;
  v57 = *(void (**)(char *, uint64_t))(v51 + 8);
  v57(v48, v54);
  sub_10000AC80(v52, v82, &qword_1000CA7D0);
  sub_10004E818(v68, (uint64_t)v43);
  v58 = swift_allocObject(&unk_1000C0530, v72, v71);
  sub_10004E860((uint64_t)v43, v58 + v44);
  Button.init(action:label:)(sub_10004F23C, v58, sub_10004C304, 0, v70, v69);
  v59 = swift_getKeyPath(&unk_100094538);
  v60 = swift_allocObject(&unk_1000C0558, 17, 7);
  *(_BYTE *)(v60 + 16) = v73;
  v61 = (uint64_t)v79;
  v53(v79, v48, v54);
  v62 = (uint64_t *)(v61 + *(int *)(v55 + 36));
  *v62 = v59;
  v62[1] = (uint64_t)sub_100015794;
  v62[2] = v60;
  v57(v48, v54);
  sub_10000AC80(v61, v52, &qword_1000CA7D0);
  v63 = v82;
  sub_10000AD78(v82, v61, &qword_1000CA7D0);
  v64 = v80;
  sub_10000AD78(v52, v80, &qword_1000CA7D0);
  v65 = v81;
  sub_10000AD78(v61, v81, &qword_1000CA7D0);
  v66 = sub_100004EAC(&qword_1000CA7D8);
  sub_10000AD78(v64, v65 + *(int *)(v66 + 48), &qword_1000CA7D0);
  sub_10000AE2C(v52, &qword_1000CA7D0);
  sub_10000AE2C(v63, &qword_1000CA7D0);
  sub_10000AE2C(v64, &qword_1000CA7D0);
  return sub_10000AE2C(v61, &qword_1000CA7D0);
}

uint64_t sub_10004C270()
{
  return sub_100033D60(0x73756F6976657250, 0xE800000000000000);
}

uint64_t sub_10004C2A0(uint64_t a1, void (*a2)(_QWORD *))
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  v4 = State.wrappedValue.getter(&v8, v3);
  v5 = v8;
  a2(v4);
  return swift_release(v5, v6);
}

uint64_t sub_10004C304()
{
  return sub_100033D60(1954047310, 0xE400000000000000);
}

uint64_t sub_10004C32C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = type metadata accessor for RewritingView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004EAC((uint64_t *)&unk_1000C87F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_10004E818(a1, (uint64_t)v5);
  v10 = type metadata accessor for MainActor(0);
  v11 = static MainActor.shared.getter(v10);
  v12 = *(unsigned __int8 *)(v3 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(&unk_1000C04B8, v13 + v4, v12 | 7);
  *(_QWORD *)(v14 + 16) = v11;
  *(_QWORD *)(v14 + 24) = &protocol witness table for MainActor;
  sub_10004E860((uint64_t)v5, v14 + v13);
  v15 = sub_1000596DC((uint64_t)v8, (uint64_t)&unk_1000CA7C8, v14);
  return swift_release(v15, v16);
}

uint64_t sub_10004C460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[7] = v6;
  v4[8] = v7;
  return swift_task_switch(sub_10004C4CC, v6, v7);
}

uint64_t sub_10004C4CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[5];
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v0[2] = v3;
  v0[3] = v2;
  v4 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(v0 + 4, v4);
  v0[9] = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1000C8D5C);
  v0[10] = v5;
  *v5 = v0;
  v5[1] = sub_10004C548;
  return sub_100026928(0);
}

uint64_t sub_10004C548()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v2, v3);
  return swift_task_switch(sub_10004C59C, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_10004C59C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 48), a2);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10004C5CC()
{
  return Label.init(title:icon:)(sub_10004C608, 0, sub_10004C61C, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_10004C608@<X0>(uint64_t a1@<X8>)
{
  return sub_100013330(0x7972746552, 0xE500000000000000, a1);
}

uint64_t sub_10004C61C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(_internalSystemName:)(0xD000000000000023, 0x80000001000AC690);
  *a1 = result;
  return result;
}

uint64_t sub_10004C658(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[15];
  _BYTE v21[9];
  uint64_t v22;

  v2 = type metadata accessor for RewritingView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100004EAC((uint64_t *)&unk_1000C87F0);
  __chkstk_darwin(v6);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(_QWORD *)(a1 + 40);
  v21[1] = *(_BYTE *)(a1 + 32);
  v22 = v9;
  v21[0] = 1;
  v10 = sub_100004EAC(&qword_1000C9FA0);
  State.wrappedValue.setter(v21, v10);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
  sub_10004E818(a1, (uint64_t)v5);
  v12 = type metadata accessor for MainActor(0);
  v13 = static MainActor.shared.getter(v12);
  v14 = *(unsigned __int8 *)(v3 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(&unk_1000C0580, v15 + v4, v14 | 7);
  *(_QWORD *)(v16 + 16) = v13;
  *(_QWORD *)(v16 + 24) = &protocol witness table for MainActor;
  sub_10004E860((uint64_t)v5, v16 + v15);
  v17 = sub_1000596DC((uint64_t)v8, (uint64_t)&unk_1000CA7E8, v16);
  return swift_release(v17, v18);
}

uint64_t sub_10004C7C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[7] = v6;
  v4[8] = v7;
  return swift_task_switch(sub_10004C830, v6, v7);
}

uint64_t sub_10004C830()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[5];
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v0[2] = v3;
  v0[3] = v2;
  v4 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(v0 + 4, v4);
  v0[9] = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1000C8D5C);
  v0[10] = v5;
  *v5 = v0;
  v5[1] = sub_10004C8AC;
  return sub_100026928(0);
}

uint64_t sub_10004C8AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v2, v3);
  return swift_task_switch(sub_10004F618, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_10004C900@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t);
  uint64_t v9;

  v2 = sub_100004EAC(&qword_1000CBB00);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Label.init(title:icon:)(sub_10004C608, 0, sub_10004F61C, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
  if (qword_1000C7440 != -1)
    swift_once(&qword_1000C7440, sub_100042194);
  v6 = qword_1000D1CF8;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v5, v2);
  *(_QWORD *)(a1 + *(int *)(sub_100004EAC(&qword_1000CA770) + 36)) = v6;
  v7 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  swift_retain(v6);
  return v7(v5, v2);
}

uint64_t sub_10004CA1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[16];
  uint64_t v31;
  char v32[16];
  uint64_t v33;

  v29 = a2;
  v28 = sub_100004EAC(&qword_1000CA678);
  __chkstk_darwin(v28);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100004EAC(&qword_1000CA680);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004EAC(&qword_1000CA688);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.cancellationAction.getter(v13);
  v33 = a1;
  v16 = sub_100004EAC(&qword_1000CA690);
  v17 = sub_10000B254(&qword_1000CA698, &qword_1000CA690, (uint64_t)&protocol conformance descriptor for Button<A>);
  v18 = ToolbarItem<>.init(placement:content:)(v10, sub_10004EC20, v32, v16, v17);
  static ToolbarItemPlacement.confirmationAction.getter(v18);
  v31 = a1;
  v19 = sub_100004EAC(&qword_1000CA6A0);
  v20 = sub_10004EC30();
  ToolbarItem<>.init(placement:content:)(v10, sub_10004EC28, v30, v19, v20);
  v21 = v28;
  v22 = &v4[*(int *)(v28 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v4, v15, v11);
  v23 = v22;
  v24 = v27;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v23, v7, v27);
  TupleToolbarContent.init(_:)(v4, v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_10004CC4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v12[16];
  uint64_t v13;

  v2 = type metadata accessor for RewritingView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10004E818(a1, (uint64_t)v5);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1000C03C8, v7 + v4, v6 | 7);
  sub_10004E860((uint64_t)v5, v8 + v7);
  v13 = a1;
  v9 = sub_100004EAC(&qword_1000CA6B8);
  v10 = sub_10004ED0C();
  return Button.init(action:label:)(sub_10004ECF8, v8, sub_10004ED04, v12, v9, v10);
}

uint64_t sub_10004CD34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  void *Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for NavigationPath(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 16);
  v20 = v6;
  v7 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v21, v7);
  v8 = v21;
  sub_10002BF64(0, 0);
  swift_release(v8, v9);
  type metadata accessor for RewritingView(0);
  v10 = sub_100004EAC(&qword_1000C9E90);
  v11 = Binding.wrappedValue.getter(v10);
  v12 = NavigationPath.count.getter(v11);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v12 < 1)
  {
    v14 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(a1 + 16);
    v20 = v14;
    State.wrappedValue.getter(&v21, v7);
    v15 = v21;
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v21 + 16);
    result = swift_release(v15, v17);
    if (Strong)
    {
      objc_msgSend(Strong, "endWritingTools");
      return swift_unknownObjectRelease(Strong);
    }
  }
  else
  {
    Binding.wrappedValue.getter(v10);
    NavigationPath.removeLast(_:)(1);
    return Binding.wrappedValue.setter(v5, v10);
  }
  return result;
}

double sub_10004CEB0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  char v26;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v24 = *(_QWORD *)(a1 + 16);
  *((_QWORD *)&v24 + 1) = v3;
  v4 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v19, v4);
  v5 = v19;
  v6 = sub_10000BF20();
  swift_release(v5, v7);
  if ((v6 & 1) != 0)
  {
    v8 = LocalizedStringKey.init(stringLiteral:)(0x6C65636E6143, 0xE600000000000000);
    v19 = Text.init(_:tableName:bundle:comment:)(v8);
    v20 = v9;
    v21 = v10 & 1;
    v22 = v11;
    v23 = 0;
  }
  else
  {
    v12 = LocalizedStringKey.init(stringLiteral:)(0x747265766552, 0xE600000000000000);
    v19 = Text.init(_:tableName:bundle:comment:)(v12);
    v20 = v14;
    v21 = v13 & 1;
    v22 = v15;
    v23 = 1;
  }
  _ConditionalContent<>.init(storage:)(&v19, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  result = *(double *)&v24;
  v17 = v25;
  v18 = v26;
  *(_OWORD *)a2 = v24;
  *(_OWORD *)(a2 + 16) = v17;
  *(_BYTE *)(a2 + 32) = v18;
  return result;
}

uint64_t sub_10004CFE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v71 = a2;
  v72 = sub_100004EAC(&qword_1000C7F38);
  v3 = __chkstk_darwin(v72);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v64 - v6;
  v68 = sub_100004EAC(&qword_1000CA6B0);
  __chkstk_darwin(v68);
  v70 = (uint64_t)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RewritingView(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100004EAC(&qword_1000C77B0);
  v67 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 24);
  v73 = *(_QWORD *)(a1 + 16);
  v74 = v15;
  v16 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v75, v16);
  v17 = v75;
  v18 = sub_10000BF20();
  swift_release(v17, v19);
  if ((v18 & 1) != 0)
  {
    v20 = LocalizedStringKey.init(stringLiteral:)(0x65756E69746E6F43, 0xE800000000000000);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    sub_10004E818(a1, (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    v27 = *(unsigned __int8 *)(v10 + 80);
    v28 = (v27 + 16) & ~v27;
    v29 = swift_allocObject(&unk_1000C03A0, v28 + v11, v27 | 7);
    sub_10004E860((uint64_t)v12, v29 + v28);
    Button<>.init(_:action:)(v20, v22, v24 & 1, v26, sub_10004ECE0, v29);
    v30 = v67;
    v32 = v69;
    v31 = v70;
    (*(void (**)(uint64_t, char *, uint64_t))(v67 + 16))(v70, v14, v69);
    swift_storeEnumTagMultiPayload(v31, v68, 0);
    v33 = sub_10000B254(&qword_1000C7820, &qword_1000C77B0, (uint64_t)&protocol conformance descriptor for Button<A>);
    v34 = sub_100014A20();
    _ConditionalContent<>.init(storage:)(v31, v32, v72, v33, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v14, v32);
  }
  else
  {
    v36 = LocalizedStringKey.init(stringLiteral:)(1701736260, 0xE400000000000000);
    v38 = v37;
    v65 = v5;
    v66 = v7;
    v40 = v39;
    v42 = v41;
    sub_10004E818(a1, (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    v43 = *(unsigned __int8 *)(v10 + 80);
    v44 = (v43 + 16) & ~v43;
    v45 = swift_allocObject(&unk_1000C0350, v44 + v11, v43 | 7);
    sub_10004E860((uint64_t)v12, v45 + v44);
    Button<>.init(_:action:)(v36, v38, v40 & 1, v42, sub_10004ECB8, v45);
    v46 = *(_QWORD *)(a1 + 24);
    v73 = *(_QWORD *)(a1 + 16);
    v74 = v46;
    State.wrappedValue.getter(&v75, v16);
    v47 = v75;
    KeyPath = swift_getKeyPath(&unk_1000944E8);
    v73 = v47;
    v49 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v73, KeyPath, v49);
    swift_release(KeyPath, v50);
    LOBYTE(KeyPath) = *(_BYTE *)(v47 + 72);
    swift_release(v47, v51);
    v52 = swift_getKeyPath(&unk_100094538);
    v53 = swift_allocObject(&unk_1000C0378, 17, 7);
    *(_BYTE *)(v53 + 16) = KeyPath;
    v54 = v67;
    v55 = (uint64_t)v65;
    v56 = v69;
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v65, v14, v69);
    v57 = v72;
    v58 = (uint64_t *)(v55 + *(int *)(v72 + 36));
    *v58 = v52;
    v58[1] = (uint64_t)sub_10000AC78;
    v58[2] = v53;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v14, v56);
    v59 = v55;
    v60 = (uint64_t)v66;
    sub_10000AC80(v59, (uint64_t)v66, &qword_1000C7F38);
    v61 = v70;
    sub_10000AD78(v60, v70, &qword_1000C7F38);
    swift_storeEnumTagMultiPayload(v61, v68, 1);
    v62 = sub_10000B254(&qword_1000C7820, &qword_1000C77B0, (uint64_t)&protocol conformance descriptor for Button<A>);
    v63 = sub_100014A20();
    _ConditionalContent<>.init(storage:)(v61, v56, v57, v62, v63);
    return sub_10000AE2C(v60, &qword_1000C7F38);
  }
}

uint64_t sub_10004D478(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD v10[2];
  uint64_t v11;

  v10[1] = *(_QWORD *)(a1 + 24);
  v1 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v11, v1);
  v2 = v11;
  KeyPath = swift_getKeyPath(&unk_100094568);
  v8[2] = v2;
  v9 = 1;
  v10[0] = v2;
  v4 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v10, KeyPath, sub_10002CF5C, v8, (char *)&type metadata for () + 8, v4);
  swift_release(v2, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_10004D548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *Strong;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v7, v0);
  v1 = v7;
  sub_10002BF64(2, 0);
  swift_release(v1, v2);
  State.wrappedValue.getter(&v7, v0);
  v3 = v7;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v7 + 16);
  result = swift_release(v3, v5);
  if (Strong)
  {
    objc_msgSend(Strong, "endWritingTools");
    return swift_unknownObjectRelease(Strong);
  }
  return result;
}

uint64_t sub_10004D5F4(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  char v22;
  uint64_t v23;

  v3 = *a2;
  v4 = *a3;
  v5 = *((_BYTE *)a3 + 8);
  v6 = swift_retain(*a3);
  v7 = sub_100046370(v6, v5);
  swift_release(v4, v8);
  KeyPath = swift_getKeyPath(&unk_100094510);
  v23 = v7;
  v10 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, KeyPath, v10);
  swift_release(KeyPath, v11);
  v12 = *(unsigned __int8 *)(v7 + 16);
  result = swift_release(v7, v13);
  if (v3 != v12)
  {
    v15 = swift_retain(v4);
    v16 = sub_100046370(v15, v5);
    swift_release(v4, v17);
    v18 = swift_getKeyPath(&unk_100094510);
    __chkstk_darwin(v18);
    v21[2] = v16;
    v22 = v3;
    v23 = v16;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v23, v18, sub_100014968, v21, (char *)&type metadata for () + 8, v10);
    swift_release(v16, v19);
    return swift_release(v18, v20);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RewritingView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *(_QWORD *)a1 = *a2;
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v6 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v6;
    v7 = a2[2];
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v9 = a2[5];
    v10 = (void *)a2[6];
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    v11 = a2[7];
    *(_QWORD *)(a1 + 56) = v11;
    v12 = *(int *)(a3 + 32);
    v13 = (_QWORD *)(a1 + v12);
    v14 = (uint64_t)a2 + v12;
    v15 = *(uint64_t *)((char *)a2 + v12);
    v16 = *(uint64_t *)((char *)a2 + v12 + 8);
    *v13 = v15;
    v13[1] = v16;
    swift_retain(v5);
    swift_retain(v7);
    swift_retain(v8);
    swift_retain(v9);
    v17 = v10;
    swift_retain(v11);
    swift_retain(v15);
    swift_retain(v16);
    v18 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
    v19 = (char *)v13 + v18;
    v20 = v14 + v18;
    v21 = type metadata accessor for NavigationPath(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  }
  return a1;
}

uint64_t destroy for RewritingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  swift_release(*(_QWORD *)a1, a2);
  swift_release(*(_QWORD *)(a1 + 16), v4);
  swift_release(*(_QWORD *)(a1 + 24), v5);
  swift_release(*(_QWORD *)(a1 + 40), v6);

  swift_release(*(_QWORD *)(a1 + 56), v7);
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 32));
  swift_release(*v8, v9);
  swift_release(v8[1], v10);
  v11 = (char *)v8 + *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v12 = type metadata accessor for NavigationPath(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t initializeWithCopy for RewritingView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v8 = a2[5];
  v9 = (void *)a2[6];
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = a2[7];
  *(_QWORD *)(a1 + 56) = v10;
  v11 = *(int *)(a3 + 32);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t)a2 + v11;
  v14 = *(uint64_t *)((char *)a2 + v11);
  v15 = *(uint64_t *)((char *)a2 + v11 + 8);
  *v12 = v14;
  v12[1] = v15;
  swift_retain(v4);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  v16 = v9;
  swift_retain(v10);
  swift_retain(v14);
  swift_retain(v15);
  v17 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v18 = (char *)v12 + v17;
  v19 = v13 + v17;
  v20 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  return a1;
}

uint64_t *assignWithCopy for RewritingView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8, v9);
  v10 = a2[2];
  v11 = a1[2];
  a1[2] = v10;
  swift_retain(v10);
  swift_release(v11, v12);
  v13 = a1[3];
  v14 = a2[3];
  a1[3] = v14;
  swift_retain(v14);
  swift_release(v13, v15);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  v16 = a1[5];
  v17 = a2[5];
  a1[5] = v17;
  swift_retain(v17);
  swift_release(v16, v18);
  v19 = (void *)a2[6];
  v20 = (void *)a1[6];
  a1[6] = (uint64_t)v19;
  v21 = v19;

  v22 = a1[7];
  v23 = a2[7];
  a1[7] = v23;
  swift_retain(v23);
  swift_release(v22, v24);
  v25 = *(int *)(a3 + 32);
  v26 = (uint64_t)a1 + v25;
  v27 = (uint64_t *)((char *)a2 + v25);
  v28 = *(uint64_t *)((char *)a1 + v25);
  v29 = *v27;
  *(uint64_t *)((char *)a1 + v25) = *v27;
  swift_retain(v29);
  swift_release(v28, v30);
  v31 = v27[1];
  v32 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v26 + 8) = v31;
  swift_retain(v31);
  swift_release(v32, v33);
  v34 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v35 = v26 + v34;
  v36 = (char *)v27 + v34;
  v37 = type metadata accessor for NavigationPath(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v35, v36, v37);
  return a1;
}

uint64_t initializeWithTake for RewritingView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 32);
  v6 = (_QWORD *)(a1 + v5);
  v7 = a2 + v5;
  v8 = *(_QWORD *)(a2 + v5 + 8);
  *v6 = *(_QWORD *)(a2 + v5);
  v6[1] = v8;
  v9 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v10 = (char *)v6 + v9;
  v11 = v7 + v9;
  v12 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for RewritingView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7, a2);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_release(v8, v9);
  v10 = a1[3];
  a1[3] = a2[3];
  swift_release(v10, v11);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  v12 = a1[5];
  a1[5] = a2[5];
  swift_release(v12, v13);
  v14 = (void *)a1[6];
  a1[6] = a2[6];

  v15 = a1[7];
  a1[7] = a2[7];
  swift_release(v15, v16);
  v17 = *(int *)(a3 + 32);
  v18 = (uint64_t)a1 + v17;
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = *(uint64_t *)((char *)a1 + v17);
  *(uint64_t *)((char *)a1 + v17) = *v19;
  swift_release(v20, v21);
  v22 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 8) = v19[1];
  swift_release(v22, v23);
  v24 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v25 = v18 + v24;
  v26 = (char *)v19 + v24;
  v27 = type metadata accessor for NavigationPath(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for RewritingView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004DCE8);
}

uint64_t sub_10004DCE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004EAC(&qword_1000C9E90);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RewritingView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004DD74);
}

uint64_t sub_10004DD74(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004EAC(&qword_1000C9E90);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for RewritingView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000CA558;
  if (!qword_1000CA558)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RewritingView);
  return result;
}

void sub_10004DE28(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "\t";
  v4[1] = &unk_1000943E0;
  v4[2] = &unk_1000943F8;
  v4[3] = &unk_1000943E0;
  sub_100013C38(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t sub_10004DEB0()
{
  return sub_10000B254(&qword_1000CA5A0, &qword_1000CA5A8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

ValueMetadata *type metadata accessor for RewriteIconLabelStyle()
{
  return &type metadata for RewriteIconLabelStyle;
}

uint64_t storeEnumTagSinglePayload for RewriteIconTitleLabelStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10004DF38 + 4 * byte_100094355[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10004DF6C + 4 * byte_100094350[v4]))();
}

uint64_t sub_10004DF6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004DF74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004DF7CLL);
  return result;
}

uint64_t sub_10004DF88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004DF90);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10004DF94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004DF9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RewriteIconTitleLabelStyle()
{
  return &type metadata for RewriteIconTitleLabelStyle;
}

uint64_t sub_10004DFB8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0A6C, 1);
}

uint64_t sub_10004DFC8@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v28;

  v4 = sub_100004EAC(&qword_1000CA5B8);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004EAC(&qword_1000CA5C0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v8);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v11 = sub_100004EAC(&qword_1000CA5C8);
  v12 = sub_10004E18C(a1, (uint64_t)&v6[*(int *)(v11 + 44)]);
  v13 = static Edge.Set.top.getter(v12);
  v14 = v13;
  v15 = static Edge.Set.bottom.getter(v13);
  v16 = Edge.Set.init(rawValue:)(0);
  v17 = Edge.Set.init(rawValue:)(v16);
  if (Edge.Set.init(rawValue:)(v17 & v14) != v14)
    v16 = Edge.Set.init(rawValue:)(v16 | v14);
  v18 = Edge.Set.init(rawValue:)(v16);
  if (Edge.Set.init(rawValue:)(v18 & v15) != v15)
    LOBYTE(v16) = Edge.Set.init(rawValue:)(v16 | v15);
  v19 = EdgeInsets.init(_all:)(10.0);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  sub_10000AD78((uint64_t)v6, (uint64_t)v10, &qword_1000CA5B8);
  v26 = &v10[*(int *)(v7 + 36)];
  *v26 = v16;
  *((double *)v26 + 1) = v19;
  *((_QWORD *)v26 + 2) = v21;
  *((_QWORD *)v26 + 3) = v23;
  *((_QWORD *)v26 + 4) = v25;
  v26[40] = 0;
  sub_10000AE2C((uint64_t)v6, &qword_1000CA5B8);
  return sub_10000AC80((uint64_t)v10, a2, &qword_1000CA5C0);
}

uint64_t sub_10004E18C@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = a2;
  v3 = type metadata accessor for LabelStyleConfiguration.Title(0);
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004EAC(&qword_1000CA5D0);
  v53 = *(_QWORD *)(v6 - 8);
  v54 = v6;
  __chkstk_darwin(v6);
  v52 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100004EAC(&qword_1000CA5D8);
  v8 = __chkstk_darwin(v49);
  v56 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v46 - v11;
  __chkstk_darwin(v10);
  v55 = (uint64_t)&v46 - v13;
  v14 = type metadata accessor for LabelStyleConfiguration.Icon(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004EAC(&qword_1000CA020);
  v19 = __chkstk_darwin(v18);
  v51 = (uint64_t)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v46 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v46 - v25;
  v27 = LabelStyleConfiguration.icon.getter(v24);
  v50 = a1;
  if ((a1 & 1) != 0)
  {
    v28 = static Color.white.getter(v27);
  }
  else
  {
    if (qword_1000C7448 != -1)
      swift_once(&qword_1000C7448, sub_1000421A8);
    v28 = qword_1000D1D00;
    swift_retain(qword_1000D1D00);
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v23, v17, v14);
  *(_QWORD *)&v23[*(int *)(v18 + 36)] = v28;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v29 = sub_10000AC80((uint64_t)v23, (uint64_t)v26, &qword_1000CA020);
  v30 = LabelStyleConfiguration.title.getter(v29);
  v31 = static Font.Weight.semibold.getter(v30);
  v32 = sub_100005900((unint64_t *)&unk_1000CA0B0, (uint64_t (*)(uint64_t))&type metadata accessor for LabelStyleConfiguration.Title, (uint64_t)&protocol conformance descriptor for LabelStyleConfiguration.Title);
  v33 = v52;
  v34 = v31;
  v35 = v48;
  View.fontWeight(_:)(*(_QWORD *)&v34, 0, v48, v32);
  v36 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v5, v35);
  if ((v50 & 1) != 0)
  {
    v37 = static Color.white.getter(v36);
  }
  else
  {
    if (qword_1000C7440 != -1)
      swift_once(&qword_1000C7440, sub_100042194);
    v37 = qword_1000D1CF8;
    swift_retain(qword_1000D1CF8);
  }
  v39 = v53;
  v38 = v54;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v12, v33, v54);
  *(_QWORD *)&v12[*(int *)(v49 + 36)] = v37;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v38);
  v40 = v55;
  sub_10000AC80((uint64_t)v12, v55, &qword_1000CA5D8);
  v41 = v51;
  sub_10000AD78((uint64_t)v26, v51, &qword_1000CA020);
  v42 = v56;
  sub_10000AD78(v40, v56, &qword_1000CA5D8);
  v43 = v57;
  sub_10000AD78(v41, v57, &qword_1000CA020);
  v44 = sub_100004EAC(&qword_1000CA5E0);
  sub_10000AD78(v42, v43 + *(int *)(v44 + 48), &qword_1000CA5D8);
  sub_10000AE2C(v40, &qword_1000CA5D8);
  sub_10000AE2C((uint64_t)v26, &qword_1000CA020);
  sub_10000AE2C(v42, &qword_1000CA5D8);
  return sub_10000AE2C(v41, &qword_1000CA020);
}

uint64_t sub_10004E5A4@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;

  return sub_10004DFC8(*v1, a1);
}

uint64_t sub_10004E5AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0A44, 1);
}

uint64_t sub_10004E5BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;

  v2 = type metadata accessor for LabelStyleConfiguration.Icon(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004EAC(&qword_1000CA020);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004EAC(&qword_1000CA5B0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LabelStyleConfiguration.icon.getter(v10);
  if (qword_1000C7448 != -1)
    swift_once(&qword_1000C7448, sub_1000421A8);
  v13 = qword_1000D1D00;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v8, v5, v2);
  *(_QWORD *)&v8[*(int *)(v6 + 36)] = v13;
  v14 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  swift_retain(v13);
  v15 = v14(v5, v2);
  v16 = static Edge.Set.top.getter(v15);
  v17 = v16;
  v18 = static Edge.Set.bottom.getter(v16);
  v19 = Edge.Set.init(rawValue:)(0);
  v20 = Edge.Set.init(rawValue:)(v19);
  if (Edge.Set.init(rawValue:)(v20 & v17) != v17)
    v19 = Edge.Set.init(rawValue:)(v19 | v17);
  v21 = Edge.Set.init(rawValue:)(v19);
  if (Edge.Set.init(rawValue:)(v21 & v18) != v18)
    LOBYTE(v19) = Edge.Set.init(rawValue:)(v19 | v18);
  v22 = EdgeInsets.init(_all:)(10.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_10000AD78((uint64_t)v8, (uint64_t)v12, &qword_1000CA020);
  v29 = &v12[*(int *)(v9 + 36)];
  *v29 = v19;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  sub_10000AE2C((uint64_t)v8, &qword_1000CA020);
  return sub_10000AC80((uint64_t)v12, a1, &qword_1000CA5B0);
}

uint64_t sub_10004E808@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10004CA1C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10004E818(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RewritingView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E860(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RewritingView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E8A4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RewritingView(0) - 8) + 80);
  return sub_10004D5F4(a1, a2, (uint64_t *)(v2 + ((v5 + 16) & ~v5)));
}

unint64_t sub_10004E8F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA650;
  if (!qword_1000CA650)
  {
    v1 = sub_10000ABD0(&qword_1000CA620);
    sub_10004E974();
    sub_10000B254((unint64_t *)&unk_1000CB530, &qword_1000C7EA0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA650);
  }
  return result;
}

unint64_t sub_10004E974()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA658;
  if (!qword_1000CA658)
  {
    v1 = sub_10000ABD0(&qword_1000CA618);
    sub_10004E9F8();
    sub_100005900(&qword_1000C7E98, type metadata accessor for PreferredContentSizeModifier, (uint64_t)&unk_100093F08);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA658);
  }
  return result;
}

unint64_t sub_10004E9F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA660;
  if (!qword_1000CA660)
  {
    v1 = sub_10000ABD0(&qword_1000CA610);
    sub_10004EA64();
    sub_1000314C4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA660);
  }
  return result;
}

unint64_t sub_10004EA64()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;

  result = qword_1000CA668;
  if (!qword_1000CA668)
  {
    v1 = sub_10000ABD0(&qword_1000C9610);
    v2 = sub_10000ABD0(&qword_1000CA608);
    v3 = sub_10000ABD0(&qword_1000CA640);
    v4 = sub_10000ABD0(&qword_1000CA600);
    v5 = sub_10000ABD0(&qword_1000CA5F8);
    v6 = sub_10000ABD0(&qword_1000CA5F0);
    v12 = sub_10000ABD0(&qword_1000CA5E8);
    v13 = &type metadata for String;
    v14 = sub_10000B254(&qword_1000CA638, &qword_1000CA5E8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v15 = sub_100015204();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 1);
    v12 = v6;
    v13 = (void *)OpaqueTypeConformance2;
    v8 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v12 = v5;
    v13 = (void *)v8;
    v9 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
    v12 = v4;
    v13 = (void *)v9;
    v10 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.inlineFeedback(controller:completion:)>>, 1);
    v11 = sub_10000B254(&qword_1000CA648, &qword_1000CA640, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v12 = v2;
    v13 = (void *)v3;
    v14 = v10;
    v15 = v11;
    swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA668);
  }
  return result;
}

uint64_t sub_10004EC20()
{
  uint64_t v0;

  return sub_10004CC4C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10004EC28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10004CFE0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10004EC30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA6A8;
  if (!qword_1000CA6A8)
  {
    v1 = sub_10000ABD0(&qword_1000CA6A0);
    sub_10000B254(&qword_1000C7820, &qword_1000C77B0, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100014A20();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA6A8);
  }
  return result;
}

uint64_t sub_10004ECB8()
{
  return sub_10004F06C((uint64_t (*)(uint64_t))sub_10004D548);
}

uint64_t sub_10004ECCC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10004ECE0()
{
  return sub_10004F06C(sub_10004D478);
}

uint64_t sub_10004ECF8()
{
  return sub_10004F06C(sub_10004CD34);
}

double sub_10004ED04@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10004CEB0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10004ED0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA6C0;
  if (!qword_1000CA6C0)
  {
    v1 = sub_10000ABD0(&qword_1000CA6B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA6C0);
  }
  return result;
}

uint64_t sub_10004ED78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RewritingView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004EDB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10004EDE0()
{
  return sub_10004F248((uint64_t)sub_10004F46C);
}

unint64_t sub_10004EDF4()
{
  unint64_t result;

  result = qword_1000CA758;
  if (!qword_1000CA758)
  {
    result = swift_getWitnessTable(&unk_10009444C, &type metadata for RewriteIconTitleLabelStyle);
    atomic_store(result, (unint64_t *)&qword_1000CA758);
  }
  return result;
}

uint64_t sub_10004EE44()
{
  return sub_10004F06C(sub_10004C658);
}

unint64_t sub_10004EE50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA778;
  if (!qword_1000CA778)
  {
    v1 = sub_10000ABD0(&qword_1000CA770);
    sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    sub_10000B254((unint64_t *)&unk_1000CB710, (uint64_t *)&unk_1000CA0C0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA778);
  }
  return result;
}

uint64_t sub_10004EEEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_10004EEFC()
{
  unint64_t result;

  result = qword_1000CA790;
  if (!qword_1000CA790)
  {
    result = swift_getWitnessTable(&unk_100094484, &type metadata for RewriteIconLabelStyle);
    atomic_store(result, (unint64_t *)&qword_1000CA790);
  }
  return result;
}

unint64_t sub_10004EF40()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  unint64_t v4;
  uint64_t v5;
  ValueMetadata *v6;
  uint64_t v7;
  unint64_t v8;

  result = qword_1000CA798;
  if (!qword_1000CA798)
  {
    v1 = sub_10000ABD0(&qword_1000CA718);
    v2 = sub_10000ABD0(&qword_1000CA708);
    v5 = sub_10000ABD0(&qword_1000CA700);
    v6 = &type metadata for RewriteIconTitleLabelStyle;
    v7 = sub_10000B254(&qword_1000CA780, &qword_1000CA700, (uint64_t)&protocol conformance descriptor for Button<A>);
    v8 = sub_10004EDF4();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
    v4 = sub_100015448();
    v5 = v2;
    v6 = &type metadata for PrimaryButtonStyle;
    v7 = OpaqueTypeConformance2;
    v8 = v4;
    swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_10000B254((unint64_t *)&unk_1000CA4A0, &qword_1000C7F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA798);
  }
  return result;
}

uint64_t sub_10004F060()
{
  return sub_10004F06C(sub_10004C32C);
}

uint64_t sub_10004F06C(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RewritingView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_10004F0AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RewritingView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1000CA7C4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000070C8;
  return sub_10004C460(a1, v5, v6, v7);
}

uint64_t sub_10004F144()
{
  return sub_10004F248((uint64_t)sub_10004F2E4);
}

uint64_t sub_10004F150()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10004F164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v1 = type metadata accessor for RewritingView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4), v8);
  swift_release(*(_QWORD *)(v7 + 16), v9);
  swift_release(*(_QWORD *)(v7 + 24), v10);
  swift_release(*(_QWORD *)(v7 + 40), v11);

  swift_release(*(_QWORD *)(v7 + 56), v12);
  v13 = (_QWORD *)(v7 + *(int *)(v1 + 32));
  swift_release(*v13, v14);
  swift_release(v13[1], v15);
  v16 = (char *)v13 + *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v17 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004F23C()
{
  return sub_10004F248((uint64_t)sub_10004F2C4);
}

uint64_t sub_10004F248(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[4];

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RewritingView(0) - 8) + 80);
  v5[2] = v1 + ((v3 + 16) & ~v3);
  return withAnimation<A>(_:_:)(0, a1, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_10004F2B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10004F2C4()
{
  uint64_t v0;

  return sub_10004C2A0(*(_QWORD *)(v0 + 16), (void (*)(_QWORD *))sub_10002C3EC);
}

uint64_t sub_10004F2E4()
{
  uint64_t v0;

  return sub_10004C2A0(*(_QWORD *)(v0 + 16), (void (*)(_QWORD *))sub_10002C1E4);
}

uint64_t sub_10004F308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v1 = type metadata accessor for RewritingView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  swift_release(*(_QWORD *)v7, v8);
  swift_release(*(_QWORD *)(v7 + 16), v9);
  swift_release(*(_QWORD *)(v7 + 24), v10);
  swift_release(*(_QWORD *)(v7 + 40), v11);

  swift_release(*(_QWORD *)(v7 + 56), v12);
  v13 = (_QWORD *)(v7 + *(int *)(v1 + 32));
  swift_release(*v13, v14);
  swift_release(v13[1], v15);
  v16 = (char *)v13 + *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v17 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004F3E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RewritingView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1000CA7E4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10002199C;
  return sub_10004C7C4(a1, v5, v6, v7);
}

uint64_t sub_10004F46C()
{
  uint64_t v0;

  return sub_10004B8F8(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10004F488()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA7F0;
  if (!qword_1000CA7F0)
  {
    v1 = sub_10000ABD0(&qword_1000CA5B0);
    sub_10004F4F4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA7F0);
  }
  return result;
}

unint64_t sub_10004F4F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA7F8;
  if (!qword_1000CA7F8)
  {
    v1 = sub_10000ABD0(&qword_1000CA020);
    sub_100005900(&qword_1000CA800, (uint64_t (*)(uint64_t))&type metadata accessor for LabelStyleConfiguration.Icon, (uint64_t)&protocol conformance descriptor for LabelStyleConfiguration.Icon);
    sub_10000B254((unint64_t *)&unk_1000CB710, (uint64_t *)&unk_1000CA0C0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA7F8);
  }
  return result;
}

unint64_t sub_10004F594()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA808;
  if (!qword_1000CA808)
  {
    v1 = sub_10000ABD0(&qword_1000CA5C0);
    sub_10000B254(qword_1000CA810, &qword_1000CA5B8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA808);
  }
  return result;
}

uint64_t sub_10004F620(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  _BYTE v41[16];

  v3 = v2;
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = &v41[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for String.LocalizationValue(0);
  v10 = __chkstk_darwin(v9);
  v12 = &v41[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(v10);
  v15 = &v41[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v15, v3, a1);
  v16 = _getErrorEmbeddedNSError<A>(_:)(v15, a1, a2);
  if (v16)
  {
    v17 = v16;
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, a1);
  }
  else
  {
    v17 = swift_allocError(a1, a2, 0, 0);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v13 + 32))(v18, v15, a1);
  }
  v19 = (void *)_convertErrorToNSError(_:)(v17);
  swift_errorRelease(v17);
  v20 = objc_msgSend(v19, "domain");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(TCTextCompositionAssistantErrorDomain);
  if (v24 == v21 && v25 == v23)
  {
    swift_bridgeObjectRelease_n(v23, 2);
  }
  else
  {
    v27 = v25;
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v21, v23, 0);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v27);
    if ((v28 & 1) == 0)
    {
LABEL_9:
      v29 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000019, 0x80000001000AC700);
      static Locale.current.getter(v29);
      v30 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, 0, v8, 0, 0, 256);
      v31 = 0xD000000000000043;
      v32 = "Certain capabilities are unavailable at this time. Try again later.";
LABEL_16:
      v37 = (unint64_t)(v32 - 32) | 0x8000000000000000;
      goto LABEL_17;
    }
  }
  switch((unint64_t)objc_msgSend(v19, "code"))
  {
    case 1uLL:
      v35 = String.LocalizationValue.init(stringLiteral:)(0x634F20726F727245, 0xEE00646572727563);
      static Locale.current.getter(v35);
      v30 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, 0, v8, 0, 0, 256);
      v31 = 0xD000000000000017;
      v32 = "Try a longer selection.";
      goto LABEL_16;
    case 2uLL:
      v36 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x80000001000AC7C0);
      static Locale.current.getter(v36);
      v30 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, 0, v8, 0, 0, 256);
      v31 = 0xD00000000000002DLL;
      v32 = "Writing Tools only work with text in English.";
      goto LABEL_16;
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xBuLL:
    case 0xCuLL:
      v33 = String.LocalizationValue.init(stringLiteral:)(0x634F20726F727245, 0xEE00646572727563);
      static Locale.current.getter(v33);
      v30 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, 0, v8, 0, 0, 256);
      v31 = 0xD00000000000002CLL;
      v32 = "An error occurred while using Writing Tools.";
      goto LABEL_16;
    case 8uLL:
      v40 = String.LocalizationValue.init(stringLiteral:)(0x634F20726F727245, 0xEE00646572727563);
      static Locale.current.getter(v40);
      v30 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, 0, v8, 0, 0, 256);
      v31 = 0x656C6C65636E6143;
      v37 = 0xE900000000000064;
      break;
    case 0xEuLL:
    case 0xFuLL:
      v34 = String.LocalizationValue.init(stringLiteral:)(0x634F20726F727245, 0xEE00646572727563);
      static Locale.current.getter(v34);
      v30 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, 0, v8, 0, 0, 256);
      v31 = 0xD000000000000018;
      v32 = "Try another description.";
      goto LABEL_16;
    default:
      goto LABEL_9;
  }
LABEL_17:
  v38 = String.LocalizationValue.init(stringLiteral:)(v31, v37);
  static Locale.current.getter(v38);
  String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, 0, v8, 0, 0, 256);

  return v30;
}

ValueMetadata *type metadata accessor for IconWidthUpdatingModifier()
{
  return &type metadata for IconWidthUpdatingModifier;
}

uint64_t sub_10004FB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

void sub_10004FB98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_100094790;
  v6[1] = &unk_1000947A8;
  v6[2] = &unk_1000947C0;
  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_100050A94(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 0, 5, v6, a1 + 32);
    }
  }
}

unint64_t sub_10004FC40(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = *(_QWORD *)(type metadata accessor for DynamicTypeSize(0) - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11 & 0xF8 | 7;
  v13 = v9 + v12;
  if (*(_QWORD *)(v10 + 64) <= 8uLL)
    v14 = 8;
  else
    v14 = *(_QWORD *)(v10 + 64);
  v15 = (v11 | v7) & 0x100000;
  if ((v12 | v7) != 7
    || v15 != 0
    || v14 + ((v13 + ((v7 + 41) & ~(unint64_t)v7)) & ~v12) + 1 > 0x18)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v18 + (((v12 | v7) + 16) & ~(v12 | v7));
LABEL_21:
    swift_retain(v18);
    return a1;
  }
  v19 = ~v12;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v20 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_OWORD *)v21;
  *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
  *(_OWORD *)v20 = v22;
  v23 = (v20 + v8 + 17) & ~v8;
  v24 = (v21 + v8 + 17) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v23, v24, v5);
  v25 = (_QWORD *)((v23 + v13) & v19);
  v26 = (uint64_t *)((v24 + v13) & v19);
  v27 = *((unsigned __int8 *)v26 + v14);
  if (v27 >= 2)
  {
    if (v14 <= 3)
      v28 = v14;
    else
      v28 = 4;
    __asm { BR              X12 }
  }
  if (v27 != 1)
  {
    v18 = *v26;
    *v25 = *v26;
    *((_BYTE *)v25 + v14) = 0;
    goto LABEL_21;
  }
  (*(void (**)(uint64_t))(v10 + 16))((v23 + v13) & v19);
  *((_BYTE *)v25 + v14) = 1;
  return a1;
}

uint64_t sub_10004FE34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = ((((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v2 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v3);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for DynamicTypeSize(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v8 = (_QWORD *)((v3 + v4 + v7) & ~v7);
  v9 = *(_QWORD *)(v6 + 64);
  if (v9 <= 8)
    v9 = 8;
  v10 = *((unsigned __int8 *)v8 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X14 }
  }
  if (v10 == 1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  else
    return swift_release(*v8, v5);
}

unint64_t sub_10004FF44(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(v5 + 16);
  *(_OWORD *)v4 = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 17 + v4) & ~v8;
  v10 = (v8 + 17 + v5) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(type metadata accessor for DynamicTypeSize(0) - 8);
  v13 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  v14 = (_QWORD *)((v11 + v13 + v9) & ~v13);
  v15 = (uint64_t *)((v11 + v13 + v10) & ~v13);
  if (*(_QWORD *)(v12 + 64) <= 8uLL)
    v16 = 8;
  else
    v16 = *(_QWORD *)(v12 + 64);
  v17 = *((unsigned __int8 *)v15 + v16);
  if (v17 >= 2)
  {
    if (v16 <= 3)
      v18 = v16;
    else
      v18 = 4;
    __asm { BR              X13 }
  }
  if (v17 == 1)
  {
    (*(void (**)(_QWORD *))(v12 + 16))(v14);
    v19 = 1;
  }
  else
  {
    v20 = *v15;
    *v14 = *v15;
    swift_retain(v20);
    v19 = 0;
  }
  *((_BYTE *)v14 + v16) = v19;
  return a1;
}

unint64_t sub_1000500B8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v5 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_OWORD *)v6;
  *(_BYTE *)(v5 + 16) = *(_BYTE *)(v6 + 16);
  *(_OWORD *)v5 = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 17 + v5) & ~v9;
  v11 = (v9 + 17 + v6) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = type metadata accessor for DynamicTypeSize(0);
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(_DWORD *)(v15 + 80) & 0xF8 | 7;
  v17 = (uint64_t *)((v12 + v16 + v10) & ~v16);
  v18 = (uint64_t *)((v12 + v16 + v11) & ~v16);
  if (v17 != v18)
  {
    v19 = v13;
    if (*(_QWORD *)(v15 + 64) <= 8uLL)
      v20 = 8;
    else
      v20 = *(_QWORD *)(v15 + 64);
    v21 = *((unsigned __int8 *)v17 + v20);
    if (v21 >= 2)
    {
      if (v20 <= 3)
        v22 = v20;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v21 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v17, v13);
    else
      swift_release(*v17, v14);
    v23 = *((unsigned __int8 *)v18 + v20);
    if (v23 >= 2)
    {
      if (v20 <= 3)
        v24 = v20;
      else
        v24 = 4;
      __asm { BR              X12 }
    }
    if (v23 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v15 + 16))(v17, v18, v19);
      *((_BYTE *)v17 + v20) = 1;
    }
    else
    {
      v25 = *v18;
      *v17 = *v18;
      *((_BYTE *)v17 + v20) = 0;
      swift_retain(v25);
    }
  }
  return a1;
}

unint64_t sub_1000502E0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v4 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(v5 + 16);
  *(_OWORD *)v4 = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 17 + v4) & ~v8;
  v10 = (v8 + 17 + v5) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(type metadata accessor for DynamicTypeSize(0) - 8);
  v13 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  v14 = (_QWORD *)((v11 + v13 + v9) & ~v13);
  v15 = (_QWORD *)((v11 + v13 + v10) & ~v13);
  if (*(_QWORD *)(v12 + 64) <= 8uLL)
    v16 = 8;
  else
    v16 = *(_QWORD *)(v12 + 64);
  v17 = *((unsigned __int8 *)v15 + v16);
  if (v17 >= 2)
  {
    if (v16 <= 3)
      v18 = v16;
    else
      v18 = 4;
    __asm { BR              X13 }
  }
  if (v17 == 1)
  {
    (*(void (**)(_QWORD *))(v12 + 32))(v14);
    v19 = 1;
  }
  else
  {
    v19 = 0;
    *v14 = *v15;
  }
  *((_BYTE *)v14 + v16) = v19;
  return a1;
}

unint64_t sub_100050450(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v5 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_OWORD *)v6;
  *(_BYTE *)(v5 + 16) = *(_BYTE *)(v6 + 16);
  *(_OWORD *)v5 = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 17 + v5) & ~v9;
  v11 = (v9 + 17 + v6) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = type metadata accessor for DynamicTypeSize(0);
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(_DWORD *)(v15 + 80) & 0xF8 | 7;
  v17 = (_QWORD *)((v12 + v16 + v10) & ~v16);
  v18 = (_QWORD *)((v12 + v16 + v11) & ~v16);
  if (v17 != v18)
  {
    v19 = v13;
    if (*(_QWORD *)(v15 + 64) <= 8uLL)
      v20 = 8;
    else
      v20 = *(_QWORD *)(v15 + 64);
    v21 = *((unsigned __int8 *)v17 + v20);
    if (v21 >= 2)
    {
      if (v20 <= 3)
        v22 = v20;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v21 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v13);
    else
      swift_release(*v17, v14);
    v23 = *((unsigned __int8 *)v18 + v20);
    if (v23 >= 2)
    {
      if (v20 <= 3)
        v24 = v20;
      else
        v24 = 4;
      __asm { BR              X12 }
    }
    if (v23 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v15 + 32))(v17, v18, v19);
      v25 = 1;
    }
    else
    {
      v25 = 0;
      *v17 = *v18;
    }
    *((_BYTE *)v17 + v20) = v25;
  }
  return a1;
}

uint64_t sub_100050674(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(type metadata accessor for DynamicTypeSize(0) - 8);
  v10 = 8;
  if (*(_QWORD *)(v9 + 64) > 8uLL)
    v10 = *(_QWORD *)(v9 + 64);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  if (a2 <= v8)
    goto LABEL_24;
  v12 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v13 = v10 + ((((v11 + 41) & ~v11) + *(_QWORD *)(v6 + 64) + v12) & ~v12) + 1;
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v17 = ((a2 - v8 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v17 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v7 > 0xFE)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + v11 + 17) & ~v11, v7, v5);
      v19 = *(unsigned __int8 *)a1;
      if (v19 >= 2)
        return v19 - 1;
      else
        return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_24;
LABEL_17:
  v18 = (v15 - 1) << v14;
  if (v13 > 3)
    v18 = 0;
  if ((_DWORD)v13)
  {
    if (v13 > 3)
      LODWORD(v13) = 4;
    __asm { BR              X11 }
  }
  return v8 + v18 + 1;
}

void sub_10005083C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0xFEu)
    v8 = 254;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for DynamicTypeSize(0) - 8);
  v10 = 8;
  if (*(_QWORD *)(v9 + 64) > 8uLL)
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v12 = v10
      + ((((*(unsigned __int8 *)(v7 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
        + *(_QWORD *)(v7 + 64)
        + v11) & ~v11)
      + 1;
  if (a3 <= v8)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v8 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = &dword_100000004;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = &_mh_execute_header.magic + 1;
  }
  if (v8 < a2)
  {
    v14 = ~v8 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t type metadata accessor for DynamicTypeAdjustingStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000517B0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicTypeAdjustingStack);
}

void sub_100050A94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000C9E60)
  {
    v2 = type metadata accessor for DynamicTypeSize(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000C9E60);
  }
}

uint64_t sub_100050AE8(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1000B0B64, 1);
}

uint64_t sub_100050B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v14 - v11, a1, a2);
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_100050BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v14 - v11, a1, a3);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_100050CA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, _QWORD, uint64_t);
  unint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = v2;
  v23 = a1;
  v24 = a2;
  v4 = type metadata accessor for Image.Scale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DynamicTypeSize(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v12(v11, enum case for DynamicTypeSize.accessibility3(_:), v8);
  v13 = sub_10005174C();
  v14 = dispatch thunk of static Comparable.< infix(_:_:)(v3, v11, v8, v13);
  v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v11, v8);
  if ((v14 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v24, enum case for Image.Scale.small(_:), v4);
  v16 = v23;
  v12(v11, enum case for DynamicTypeSize.accessibility1(_:), v8);
  v17 = dispatch thunk of static Comparable.< infix(_:_:)(v3, v11, v8, v13);
  v15(v11, v8);
  if ((v17 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v24, v16, v4);
  v19 = enum case for Image.Scale.small(_:);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 104);
  v20((uint64_t)v7, enum case for Image.Scale.small(_:), v4);
  v21 = static Image.Scale.== infix(_:_:)(v16, v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v21 & 1) != 0)
    v22 = v19;
  else
    v22 = enum case for Image.Scale.medium(_:);
  return v20(v24, v22, v4);
}

uint64_t sub_100050E8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t WitnessTable;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v50 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = type metadata accessor for HStack(0, v3, v4);
  v44 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v46 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v43 - v9;
  __chkstk_darwin(v8);
  v45 = (char *)&v43 - v11;
  v12 = type metadata accessor for VStack(0, v3, v4);
  v43 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v43 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v43 - v19;
  v21 = type metadata accessor for _ConditionalContent(0, v12, v5);
  v48 = *(_QWORD *)(v21 - 8);
  v49 = v21;
  __chkstk_darwin(v21);
  v47 = (char *)&v43 - v22;
  if (sub_100051270())
  {
    v23 = __chkstk_darwin(*(_QWORD *)(v2 + 8));
    *(&v43 - 4) = v3;
    *(&v43 - 3) = v4;
    *(&v43 - 2) = v2;
    VStack.init(alignment:spacing:content:)(v23);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v12);
    v25 = v43;
    v26 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v26(v20, v18, v12);
    v27 = *(void (**)(char *, uint64_t))(v25 + 8);
    v27(v18, v12);
    v26(v15, v20, v12);
    v28 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v5);
    v29 = v47;
    sub_100050B1C((uint64_t)v15, v12, v5, WitnessTable, v28);
    v27(v15, v12);
    v27(v20, v12);
  }
  else
  {
    v30 = __chkstk_darwin(*(_QWORD *)(v2 + 16));
    *(&v43 - 4) = v3;
    *(&v43 - 3) = v4;
    *(&v43 - 2) = v2;
    HStack.init(alignment:spacing:content:)(v30);
    v31 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v5);
    v32 = v44;
    v33 = v45;
    v34 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
    v34(v45, v10, v5);
    v35 = *(void (**)(char *, uint64_t))(v32 + 8);
    v35(v10, v5);
    v36 = (uint64_t)v46;
    v34(v46, v33, v5);
    v37 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v12);
    v29 = v47;
    sub_100050BE0(v36, v12, v5, v37, v31);
    v35((char *)v36, v5);
    v35(v33, v5);
  }
  v38 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v12);
  v39 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v5);
  v51 = v38;
  v52 = v39;
  v40 = v49;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v49);
  v41 = v48;
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 16))(v50, v29, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v29, v40);
}

BOOL sub_100051270()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v1 = v0;
  v2 = type metadata accessor for DynamicTypeSize(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100046574(v5);
  v7 = DynamicTypeSize.isAccessibilitySize.getter(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  LODWORD(v1) = Axis.rawValue.getter(*v1);
  return (_DWORD)v1 == Axis.rawValue.getter((v7 & 1) == 0);
}

uint64_t sub_100051328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v15;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1 + *(int *)(type metadata accessor for DynamicTypeAdjustingStack(0, v9, v10, v11) + 44);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13(v8, v12, a2);
  v13(a3, (uint64_t)v8, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

uint64_t sub_1000513D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0B3C, 1);
}

void sub_1000513E0(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

_QWORD *sub_1000513F0(uint64_t a1, _QWORD *(*a2)(double *__return_ptr))
{
  _QWORD *result;
  double v4;
  double v5;
  char v6;

  result = a2(&v5);
  if ((v6 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    {
      v4 = v5;
    }
    else
    {
      v4 = *(double *)a1;
      if (*(double *)a1 <= v5)
        v4 = v5;
    }
    *(double *)a1 = v4;
    *(_BYTE *)(a1 + 8) = 0;
  }
  return result;
}

void sub_10005145C(uint64_t a1@<X8>)
{
  uint64_t v2;
  double v3;

  v2 = static Color.clear.getter();
  v3 = GeometryProxy.size.getter();
  *(_QWORD *)a1 = v2;
  *(double *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t sub_10005149C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void (*v12)(uint64_t@<X8>);
  void (*v13)(uint64_t@<X8>);
  uint64_t v14;
  void (**v15)(uint64_t@<X8>);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v25;
  uint64_t v26;
  unsigned __int8 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v5 = sub_100004EAC(&qword_1000CA8D0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *v2;
  v9 = *((_QWORD *)v2 + 2);
  v10 = *((_BYTE *)v2 + 24);
  v11 = static Alignment.center.getter(v6);
  v13 = v12;
  v14 = sub_100004EAC(&qword_1000CA8D8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v8, a1, v14);
  v15 = (void (**)(uint64_t@<X8>))&v8[*(int *)(v5 + 36)];
  *v15 = sub_10005145C;
  v15[1] = 0;
  v15[2] = (void (*)(uint64_t@<X8>))v11;
  v15[3] = v13;
  v28 = v25;
  *(_QWORD *)&v29 = v9;
  BYTE8(v29) = v10;
  v16 = sub_100004EAC(&qword_1000CA090);
  v17 = Binding.wrappedValue.getter(v16);
  v18 = v26;
  v19 = v27;
  v20 = static Alignment.center.getter(v17);
  _FrameLayout.init(width:height:alignment:)(&v28, v18, v19, 0, 1, v20, v21);
  sub_100051B00((uint64_t)v8, a2);
  v22 = (_OWORD *)(a2 + *(int *)(sub_100004EAC(&qword_1000CA8E0) + 36));
  v23 = v29;
  *v22 = v28;
  v22[1] = v23;
  v22[2] = v30;
  return sub_100051B48((uint64_t)v8);
}

uint64_t sub_1000515FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v5 = *a1;
  v6 = *((_BYTE *)a1 + 8);
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5 & 1;
  v9 = v5;
  v10 = v6;
  v7 = sub_100004EAC(&qword_1000CA090);
  return Binding.wrappedValue.setter(&v9, v7);
}

uint64_t sub_100051658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t *);

  v5 = *v2;
  v6 = v2[1];
  v7 = v2[2];
  v8 = *((_BYTE *)v2 + 24);
  v9 = swift_allocObject(&unk_1000C06E8, 41, 7);
  *(_QWORD *)(v9 + 16) = v5;
  *(_QWORD *)(v9 + 24) = v6;
  *(_QWORD *)(v9 + 32) = v7;
  *(_BYTE *)(v9 + 40) = v8;
  v10 = sub_100004EAC(&qword_1000CA898);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a2, a1, v10);
  v11 = (uint64_t (**)(uint64_t *))(a2 + *(int *)(sub_100004EAC(&qword_1000CA8A0) + 36));
  *v11 = sub_10005173C;
  v11[1] = (uint64_t (*)(uint64_t *))v9;
  swift_retain(v5);
  return swift_retain(v6);
}

uint64_t sub_100051710(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v2 + 16), a2);
  swift_release(*(_QWORD *)(v2 + 24), v3);
  return swift_deallocObject(v2, 41, 7);
}

uint64_t sub_10005173C(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000515FC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

unint64_t sub_10005174C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA8A8;
  if (!qword_1000CA8A8)
  {
    v1 = type metadata accessor for DynamicTypeSize(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DynamicTypeSize, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA8A8);
  }
  return result;
}

uint64_t sub_100051794@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_100051328(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000517B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

ValueMetadata *type metadata accessor for IconWidthPreferenceKey()
{
  return &type metadata for IconWidthPreferenceKey;
}

uint64_t destroy for IconWidthModifier(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  swift_release(*a1, a2);
  return swift_release(a1[1], v3);
}

uint64_t _s21WritingToolsUIService25IconWidthUpdatingModifierVwcp_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *_s21WritingToolsUIService25IconWidthUpdatingModifierVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4, v6);
  v7 = a2[1];
  v8 = a1[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v8, v9);
  v10 = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  a1[2] = v10;
  return a1;
}

uint64_t _s21WritingToolsUIService25IconWidthUpdatingModifierVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)a1, a2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4, v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t _s21WritingToolsUIService25IconWidthUpdatingModifierVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_100051958(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IconWidthModifier()
{
  return &type metadata for IconWidthModifier;
}

unint64_t sub_1000519B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA8B0;
  if (!qword_1000CA8B0)
  {
    v1 = sub_10000ABD0(&qword_1000CA8A0);
    sub_10000B254(&qword_1000CA8B8, &qword_1000CA898, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000B254(&qword_1000CA8C0, &qword_1000CA8C8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA8B0);
  }
  return result;
}

uint64_t sub_100051A4C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for VStack(255, *a1, v2);
  v4 = type metadata accessor for HStack(255, v1, v2);
  v5 = type metadata accessor for _ConditionalContent(255, v3, v4);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v3);
  swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v4);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v5);
}

uint64_t sub_100051AF0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B0B98, 1);
}

uint64_t sub_100051B00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CA8D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100051B48(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004EAC(&qword_1000CA8D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100051B8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA8E8;
  if (!qword_1000CA8E8)
  {
    v1 = sub_10000ABD0(&qword_1000CA8E0);
    sub_100051BF8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA8E8);
  }
  return result;
}

unint64_t sub_100051BF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CA8F0;
  if (!qword_1000CA8F0)
  {
    v1 = sub_10000ABD0(&qword_1000CA8D0);
    sub_10000B254(&qword_1000CA8F8, &qword_1000CA8D8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000B254(&qword_1000CA900, &qword_1000CA908, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CA8F0);
  }
  return result;
}

uint64_t sub_100051CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_100094A90);
  v7 = v0;
  v3 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v3);
  swift_release(KeyPath, v4);
  v5 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 24));
  return v5;
}

uint64_t sub_100051D34@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094A90);
  v9 = v3;
  v5 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_100051DC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[7];
  uint64_t v10;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094A90);
  v9[2] = v4;
  v9[3] = v3;
  v9[4] = v2;
  v10 = v4;
  v6 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100055984, v9, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath, v7);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100051E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_100094A18);
  v7 = v0;
  v3 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v3);
  swift_release(KeyPath, v4);
  v5 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 40));
  return v5;
}

uint64_t sub_100051F14@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094A18);
  v9 = v3;
  v5 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + 40);
  *a2 = *(_QWORD *)(v3 + 32);
  a2[1] = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_100051FA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[7];
  uint64_t v10;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094A18);
  v9[2] = v4;
  v9[3] = v3;
  v9[4] = v2;
  v10 = v4;
  v6 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_1000558FC, v9, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath, v7);
  return swift_bridgeObjectRelease(v2);
}

id sub_100052060()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100094AB8);
  v5 = v0;
  v2 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return *(id *)(v0 + 48);
}

id sub_1000520E4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094AB8);
  v9 = v3;
  v5 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(void **)(v3 + 48);
  *a2 = v7;
  return v7;
}

void sub_100052170(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094AB8);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000559A0, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v7);

}

uint64_t sub_100052224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_100094AE0);
  v7 = v0;
  v3 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v3);
  swift_release(KeyPath, v4);
  v5 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 64));
  return v5;
}

uint64_t sub_1000522B8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094AE0);
  v9 = v3;
  v5 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + 64);
  *a2 = *(_QWORD *)(v3 + 56);
  a2[1] = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_100052348(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[7];
  uint64_t v10;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094AE0);
  v9[2] = v4;
  v9[3] = v3;
  v9[4] = v2;
  v10 = v4;
  v6 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100055A34, v9, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath, v7);
  return swift_bridgeObjectRelease(v2);
}

void *sub_100052404()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_100094A40);
  v7 = v0;
  v2 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath, v3);
  v4 = *(void **)(v0 + 72);
  v5 = v4;
  return v4;
}

id sub_100052490@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094A40);
  v9 = v3;
  v5 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(void **)(v3 + 72);
  *a2 = v7;
  return v7;
}

void sub_10005251C(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094A40);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100055AC0, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v7);

}

uint64_t sub_1000525D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_100094B08);
  v7 = v0;
  v3 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v3);
  swift_release(KeyPath, v4);
  v5 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 88));
  return v5;
}

uint64_t sub_100052664@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094B08);
  v9 = v3;
  v5 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + 88);
  *a2 = *(_QWORD *)(v3 + 80);
  a2[1] = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_1000526F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[7];
  uint64_t v10;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094B08);
  v9[2] = v4;
  v9[3] = v3;
  v9[4] = v2;
  v10 = v4;
  v6 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100055A20, v9, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath, v7);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1000527B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  v3 = v2;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_QWORD *)(v3 + 88) = 0;
  ObservationRegistrar.init()(a1);
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 40));
  *(_QWORD *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 40) = a2;
  *(_QWORD *)(v3 + 48) = objc_msgSend(objc_allocWithZone((Class)NSMutableOrderedSet), "initWithCapacity:", 5);
  if (qword_1000C73D0 != -1)
    swift_once(&qword_1000C73D0, sub_100006314);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_1000063D4(v6, (uint64_t)qword_1000D1C00);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "SmartReplyAnalytics init", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  return v3;
}

void sub_1000528DC(void *a1)
{
  sub_10005550C(a1, "reportResponseRequested: %{private}s", &IAChannelSmartReplies);
}

void sub_1000528F0(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t inited;
  uint64_t v37;
  uint64_t v38;
  NSString v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  NSString v44;
  unint64_t v45;
  NSDictionary v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  NSString v51;
  void *v52;
  id v53;
  NSString v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  id v59;
  NSString v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  NSString v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  _BYTE v81[16];
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE v93[104];
  char v94[88];
  uint64_t v95;

  v5 = v4;
  v91 = a3;
  if (qword_1000C73D0 != -1)
    swift_once(&qword_1000C73D0, sub_100006314);
  v88 = a4;
  v9 = type metadata accessor for Logger(0);
  v10 = sub_1000063D4(v9, (uint64_t)qword_1000D1C00);
  v11 = a1;
  swift_bridgeObjectRetain_n(a2, 2);
  v12 = v11;
  v87 = v10;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  v86 = v12;
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v95 = v16;
    *(_DWORD *)v15 = 136380931;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v19 = v18;
    v92 = sub_10006DCA8(v17, v18, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v15 + 4, v15 + 12);

    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2085;
    v20 = Dictionary.description.getter(a2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v22 = v21;
    v92 = sub_10006DCA8(v20, v21, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "reportResponseCompleted: %{private}s resultOptions: %{sensitive}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v90 = sub_10002346C(a2);
  v24 = v23;
  v25 = sub_10002383C(a2);
  v27 = v26;
  KeyPath = swift_getKeyPath(&unk_100094A90);
  __chkstk_darwin(KeyPath);
  v82 = v5;
  v83 = v25;
  v84 = v27;
  v95 = v5;
  v29 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v95, KeyPath, sub_100055984, v81, (char *)&type metadata for () + 8, v29);
  v89 = 0;
  swift_release(KeyPath, v30);
  v31 = swift_getKeyPath(&unk_100094A18);
  v95 = v5;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v95, v31, v29);
  swift_release(v31, v32);
  v33 = *(_QWORD *)(v5 + 40);
  if (v33)
  {
    v85 = IAChannelSmartReplies;
    swift_bridgeObjectRetain(v33);
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    v35 = sub_100004EAC(&qword_1000CAB98);
    inited = swift_initStackObject(v35, v93);
    *(_OWORD *)(inited + 16) = xmmword_100094970;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IAPayloadKeySmartRepliesFeatureModel);
    *(_QWORD *)(inited + 40) = v37;
    *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(IAPayloadKeyFeedbackServiceOriginalContent);
    *(_QWORD *)(inited + 64) = v38;
    v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
    *(_QWORD *)(inited + 72) = v39;
    *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(IAPayloadKeyFeedbackServiceGeneratedContent);
    *(_QWORD *)(inited + 88) = v40;
    v41 = v88;
    if (v88)
      v42 = v88;
    else
      v42 = 0xE400000000000000;
    v43 = (void *)objc_opt_self(IASignalAnalytics);
    swift_bridgeObjectRetain(v41);
    v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v42);
    *(_QWORD *)(inited + 96) = v44;
    v45 = sub_100062358(inited);
    sub_100021548(0, &qword_1000CAB90, NSObject_ptr);
    v46.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v45);
    objc_msgSend(v43, "sendSignal:toChannel:withUniqueStringID:withPayload:", v86, v85, v34, v46.super.isa);

  }
  else
  {
    v85 = IAChannelSmartReplies;
    v47 = sub_100004EAC(&qword_1000CAB88);
    v48 = swift_initStackObject(v47, v94);
    *(_OWORD *)(v48 + 16) = xmmword_100094970;
    v49 = (void *)IAPayloadKeySmartRepliesFeatureModel;
    *(_QWORD *)(v48 + 32) = IAPayloadKeySmartRepliesFeatureModel;
    v50 = v49;
    v51 = String._bridgeToObjectiveC()();
    v52 = (void *)IAPayloadKeyFeedbackServiceOriginalContent;
    *(_QWORD *)(v48 + 40) = v51;
    *(_QWORD *)(v48 + 48) = v52;
    v53 = v52;
    v54 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
    v55 = (void *)IAPayloadKeyFeedbackServiceGeneratedContent;
    *(_QWORD *)(v48 + 56) = v54;
    *(_QWORD *)(v48 + 64) = v55;
    v56 = v88;
    if (v88)
      v57 = v88;
    else
      v57 = 0xE400000000000000;
    v58 = (void *)objc_opt_self(IASignalAnalytics);
    swift_bridgeObjectRetain(v56);
    v59 = v55;
    v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v57);
    *(_QWORD *)(v48 + 72) = v60;
    v61 = sub_100062470(v48);
    type metadata accessor for IAPayloadKey(0);
    sub_100021548(0, &qword_1000CAB90, NSObject_ptr);
    sub_100005900(&qword_1000C7630, (uint64_t (*)(uint64_t))type metadata accessor for IAPayloadKey, (uint64_t)&unk_100091E28);
    v41 = v56;
    v46.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v61);
    objc_msgSend(v58, "sendSignal:toChannel:withPayload:", v86, v85, v46.super.isa);
  }

  v62 = swift_getKeyPath(&unk_100094AB8);
  v95 = v5;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v95, v62, v29);
  swift_release(v62, v63);
  v64 = *(id *)(v5 + 48);
  v65 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  objc_msgSend(v64, "addObject:", v65);

  v66 = swift_getKeyPath(&unk_100094AE0);
  v95 = v5;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v95, v66, v29);
  swift_release(v66, v67);
  if (!*(_QWORD *)(v5 + 64))
  {
    v68 = swift_getKeyPath(&unk_100094AE0);
    __chkstk_darwin(v68);
    v82 = v5;
    v83 = v91;
    v84 = v41;
    v95 = v5;
    swift_bridgeObjectRetain(v41);
    v69 = v89;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v95, v68, sub_100055A34, v81, (char *)&type metadata for () + 8, v29);
    v89 = v69;
    swift_release(v68, v70);
    v71 = swift_bridgeObjectRelease(v41);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "reportResponseCompleted: cached base response", v74, 2u);
      swift_slowDealloc(v74, -1, -1);
    }

  }
  v75 = swift_getKeyPath(&unk_100094B08);
  __chkstk_darwin(v75);
  v82 = v5;
  v83 = v91;
  v84 = v41;
  v95 = v5;
  swift_bridgeObjectRetain(v41);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v95, v75, sub_100055A20, v81, (char *)&type metadata for () + 8, v29);
  swift_release(v75, v76);
  v77 = swift_bridgeObjectRelease(v41);
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v78, v79))
  {
    v80 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v80 = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "reportResponseCompleted: cached generated content", v80, 2u);
    swift_slowDealloc(v80, -1, -1);
  }

}

void sub_100053248(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t inited;
  uint64_t v37;
  uint64_t v38;
  NSString v39;
  uint64_t v40;
  unint64_t v41;
  NSDictionary v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  NSString v47;
  void *v48;
  id v49;
  NSString v50;
  void *v51;
  id v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  NSString v57;
  _QWORD v58[9];
  id v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[104];
  _BYTE v63[88];
  uint64_t v64[2];

  v5 = v4;
  v58[8] = a4;
  v58[7] = a3;
  if (qword_1000C73D0 != -1)
    swift_once(&qword_1000C73D0, sub_100006314);
  v8 = type metadata accessor for Logger(0);
  sub_1000063D4(v8, (uint64_t)qword_1000D1C00);
  v9 = a1;
  swift_bridgeObjectRetain_n(a2, 2);
  v10 = v9;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  v59 = v10;
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    v64[0] = v14;
    *(_DWORD *)v13 = 136380931;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v17 = v16;
    v61 = sub_10006DCA8(v15, v16, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v13 + 4, v13 + 12);

    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v13 + 12) = 2085;
    v18 = Dictionary.description.getter(a2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v20 = v19;
    v61 = sub_10006DCA8(v18, v19, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "reportResponseFailed: %{private}s resultOptions: %{sensitive}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v60 = sub_10002346C(a2);
  v22 = v21;
  v23 = sub_10002383C(a2);
  v25 = v24;
  KeyPath = swift_getKeyPath(&unk_100094A90);
  __chkstk_darwin(KeyPath);
  v58[2] = v5;
  v58[3] = v23;
  v58[4] = v25;
  v64[0] = v5;
  v27 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v64, KeyPath, sub_100055984, v58, (char *)&type metadata for () + 8, v27);
  swift_release(KeyPath, v28);
  v29 = swift_getKeyPath(&unk_100094A18);
  v64[0] = v5;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v64, v29, v27);
  swift_release(v29, v30);
  v31 = *(_QWORD *)(v5 + 40);
  v32 = (void *)objc_opt_self(IASignalAnalytics);
  v33 = IAChannelSmartReplies;
  if (v31)
  {
    swift_bridgeObjectRetain(v31);
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31);
    v35 = sub_100004EAC(&qword_1000CAB98);
    inited = swift_initStackObject(v35, v62);
    *(_OWORD *)(inited + 16) = xmmword_100094970;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IAPayloadKeySmartRepliesFeatureModel);
    *(_QWORD *)(inited + 40) = v37;
    *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(IAPayloadKeyFeedbackServiceOriginalContent);
    *(_QWORD *)(inited + 64) = v38;
    v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
    *(_QWORD *)(inited + 72) = v39;
    *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(IAPayloadKeySmartRepliesReasonForFailure);
    *(_QWORD *)(inited + 88) = v40;
    *(_QWORD *)(inited + 96) = String._bridgeToObjectiveC()();
    v41 = sub_100062358(inited);
    sub_100021548(0, &qword_1000CAB90, NSObject_ptr);
    v42.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v41);
    objc_msgSend(v32, "sendSignal:toChannel:withUniqueStringID:withPayload:", v59, v33, v34, v42.super.isa);

  }
  else
  {
    v43 = sub_100004EAC(&qword_1000CAB88);
    v44 = swift_initStackObject(v43, v63);
    *(_OWORD *)(v44 + 16) = xmmword_100094970;
    v45 = (void *)IAPayloadKeySmartRepliesFeatureModel;
    *(_QWORD *)(v44 + 32) = IAPayloadKeySmartRepliesFeatureModel;
    v46 = v45;
    v47 = String._bridgeToObjectiveC()();
    v48 = (void *)IAPayloadKeyFeedbackServiceOriginalContent;
    *(_QWORD *)(v44 + 40) = v47;
    *(_QWORD *)(v44 + 48) = v48;
    v49 = v48;
    v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
    v51 = (void *)IAPayloadKeySmartRepliesReasonForFailure;
    *(_QWORD *)(v44 + 56) = v50;
    *(_QWORD *)(v44 + 64) = v51;
    v52 = v51;
    *(_QWORD *)(v44 + 72) = String._bridgeToObjectiveC()();
    v53 = sub_100062470(v44);
    type metadata accessor for IAPayloadKey(0);
    sub_100021548(0, &qword_1000CAB90, NSObject_ptr);
    sub_100005900(&qword_1000C7630, (uint64_t (*)(uint64_t))type metadata accessor for IAPayloadKey, (uint64_t)&unk_100091E28);
    v42.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v53);
    objc_msgSend(v32, "sendSignal:toChannel:withPayload:", v59, v33, v42.super.isa);
  }

  v54 = swift_getKeyPath(&unk_100094AB8);
  v64[0] = v5;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v64, v54, v27);
  swift_release(v54, v55);
  v56 = *(id *)(v5 + 48);
  v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  objc_msgSend(v56, "addObject:", v57);

}

uint64_t sub_1000538A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t KeyPath;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSString v66;
  uint64_t v67;
  uint64_t inited;
  NSString v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  Class isa;
  unint64_t v75;
  NSDictionary v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  Class v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  NSString v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char v104;
  unint64_t *v105;
  unint64_t v106;
  id v107;
  NSObject *v108;
  int v109;
  uint64_t v110;
  NSString v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  NSString v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  unint64_t v126;
  uint64_t v127;
  os_log_t v128;
  uint64_t v129;
  NSString v130;
  NSString v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  uint64_t result;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  os_log_t v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  char *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char v153[56];
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  char v163[16];

  v2 = v1;
  v142 = type metadata accessor for NSFastEnumerationIterator(0);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v5 = (char *)&v140 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C73D0 != -1)
    goto LABEL_35;
  while (1)
  {
    v6 = type metadata accessor for Logger(0);
    v7 = sub_1000063D4(v6, (uint64_t)qword_1000D1C00);
    v8 = swift_bridgeObjectRetain_n(a1, 2);
    v147 = v7;
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.info.getter();
    v11 = os_log_type_enabled(v9, v10);
    v144 = v5;
    v143 = v2;
    if (v11)
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v161 = v13;
      *(_DWORD *)v12 = 136642819;
      v14 = type metadata accessor for QuestionnaireEntry(0);
      v15 = Array.description.getter(a1, v14);
      v17 = v16;
      *(_QWORD *)&v159 = sub_10006DCA8(v15, v16, (uint64_t *)&v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, (char *)&v159 + 8, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "reportQuestionnaireAnswers: userFilledEntries: %{sensitive}s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
    }
    v152 = sub_100062238((uint64_t)_swiftEmptyArrayStorage);
    if (!((unint64_t)a1 >> 62))
    {
      v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (!v2)
        goto LABEL_40;
      goto LABEL_7;
    }
    if (a1 < 0)
      v59 = a1;
    else
      v59 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v59);
    if (!v2)
    {
LABEL_40:
      swift_bridgeObjectRelease(a1);
      KeyPath = swift_getKeyPath(&unk_100094A18);
      v61 = v143;
      *(_QWORD *)&v161 = v143;
      v62 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v161, KeyPath, v62);
      swift_release(KeyPath, v63);
      v64 = *(_QWORD *)(v61 + 40);
      if (v64)
      {
        v151 = objc_opt_self(IASignalAnalytics);
        v150 = IASignalSmartRepliesQuestionnaireAnswerModified;
        v65 = IAChannelSmartReplies;
        swift_bridgeObjectRetain(v64);
        v66 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v64);
        v67 = sub_100004EAC(&qword_1000CAB98);
        inited = swift_initStackObject(v67, v153);
        *(_OWORD *)(inited + 16) = xmmword_100092910;
        v69 = String._bridgeToObjectiveC()();
        v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v72 = v71;

        *(_QWORD *)(inited + 32) = v70;
        *(_QWORD *)(inited + 40) = v72;
        v73 = v152;
        swift_bridgeObjectRetain(v152);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v73);
        *(_QWORD *)(inited + 48) = isa;
        v75 = sub_100062358(inited);
        sub_100021548(0, &qword_1000CAB90, NSObject_ptr);
        v76.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v75);
        objc_msgSend((id)v151, "sendSignal:toChannel:withUniqueStringID:withPayload:", v150, v65, v66, v76.super.isa);

      }
      else
      {
        v77 = (void *)objc_opt_self(IASignalAnalytics);
        v151 = IASignalSmartRepliesQuestionnaireAnswerModified;
        v78 = IAChannelSmartReplies;
        v79 = sub_100004EAC(&qword_1000CAB88);
        v80 = swift_initStackObject(v79, v163);
        *(_OWORD *)(v80 + 16) = xmmword_100092910;
        *(_QWORD *)(v80 + 32) = String._bridgeToObjectiveC()();
        v81 = v152;
        swift_bridgeObjectRetain(v152);
        v82 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v81);
        *(_QWORD *)(v80 + 40) = v82;
        v83 = sub_100062470(v80);
        type metadata accessor for IAPayloadKey(0);
        sub_100021548(0, &qword_1000CAB90, NSObject_ptr);
        sub_100005900(&qword_1000C7630, (uint64_t (*)(uint64_t))type metadata accessor for IAPayloadKey, (uint64_t)&unk_100091E28);
        v76.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v83);
        objc_msgSend(v77, "sendSignal:toChannel:withPayload:", v151, v78, v76.super.isa);
      }

      v84 = swift_getKeyPath(&unk_100094A40);
      *(_QWORD *)&v161 = v61;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v161, v84, v62);
      v86 = swift_release(v84, v85);
      v87 = *(void **)(v61 + 72);
      v88 = v144;
      if (v87)
      {
        v151 = v87;
        v89 = NSArray.makeIterator()();
        NSFastEnumerationIterator.next()(&v161, v89);
        if (v162)
        {
          v149 = (char *)&v159 + 8;
          *(_QWORD *)&v90 = 136643331;
          v148 = v90;
          do
          {
            sub_100021008(&v161, &v159);
            v92 = sub_100021548(0, &qword_1000CAB78, NSMutableDictionary_ptr);
            v91 = swift_dynamicCast(&v157, &v159, (char *)&type metadata for Any + 8, v92, 6);
            if ((v91 & 1) != 0)
            {
              v93 = (void *)v157;
              v94 = String._bridgeToObjectiveC()();
              v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
              v97 = v96;

              *(_QWORD *)&v157 = v95;
              *((_QWORD *)&v157 + 1) = v97;
              swift_bridgeObjectRetain(v97);
              v98 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v157, &type metadata for String);
              v99 = objc_msgSend(v93, "__swift_objectForKeyedSubscript:", v98);
              swift_unknownObjectRelease(v98);
              if (v99)
              {
                _bridgeAnyObjectToAny(_:)(&v157, v99);
                swift_unknownObjectRelease(v99);
              }
              else
              {
                v157 = 0u;
                v158 = 0u;
              }
              sub_1000233AC((uint64_t)&v157, (uint64_t)&v159);
              if (v160)
              {
                if ((swift_dynamicCast(&v155, &v159, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
                {
                  v101 = v155;
                  v100 = v156;
                  swift_bridgeObjectRelease(v97);
                  v102 = v152;
                  if (*(_QWORD *)(v152 + 16))
                  {
                    v103 = sub_10001CD50(v101, v100);
                    if ((v104 & 1) != 0)
                    {
                      v105 = (unint64_t *)(*(_QWORD *)(v102 + 56) + 16 * v103);
                      v106 = v105[1];
                      v150 = *v105;
                      swift_bridgeObjectRetain_n(v106, 3);
                      swift_bridgeObjectRelease(v100);
                      v107 = v93;
                      v108 = Logger.logObject.getter(v107);
                      v109 = static os_log_type_t.info.getter();
                      if (os_log_type_enabled(v108, (os_log_type_t)v109))
                      {
                        LODWORD(v143) = v109;
                        v145 = v108;
                        *(_QWORD *)&v146 = v106;
                        v110 = swift_slowAlloc(32, -1);
                        v140 = swift_slowAlloc(96, -1);
                        v154 = v140;
                        *(_DWORD *)v110 = v148;
                        v111 = String._bridgeToObjectiveC()();
                        v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
                        v114 = v113;

                        *(_QWORD *)&v157 = v112;
                        *((_QWORD *)&v157 + 1) = v114;
                        swift_bridgeObjectRetain(v114);
                        v115 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v157, &type metadata for String);
                        v116 = objc_msgSend(v107, "__swift_objectForKeyedSubscript:", v115);
                        swift_unknownObjectRelease(v115);
                        if (v116)
                        {
                          _bridgeAnyObjectToAny(_:)(&v157, v116);
                          swift_unknownObjectRelease(v116);
                        }
                        else
                        {
                          v157 = 0u;
                          v158 = 0u;
                        }
                        v117 = v149;
                        sub_1000233AC((uint64_t)&v157, (uint64_t)&v159);
                        if (v160)
                        {
                          if ((swift_dynamicCast(&v155, &v159, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
                          {
                            v119 = v155;
                            v118 = v156;
                            swift_bridgeObjectRelease(v114);
                            goto LABEL_69;
                          }
                          swift_bridgeObjectRelease(v114);
                        }
                        else
                        {
                          swift_bridgeObjectRelease(v114);
                          sub_100007110((uint64_t)&v159);
                        }
                        v119 = 0;
                        v118 = 0xE000000000000000;
LABEL_69:
                        *(_QWORD *)&v159 = sub_10006DCA8(v119, v118, &v154);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, v117, v110 + 4, v110 + 12);

                        swift_bridgeObjectRelease(v118);
                        *(_WORD *)(v110 + 12) = 2085;
                        v120 = String._bridgeToObjectiveC()();
                        v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
                        v123 = v122;

                        *(_QWORD *)&v157 = v121;
                        *((_QWORD *)&v157 + 1) = v123;
                        swift_bridgeObjectRetain(v123);
                        v124 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v157, &type metadata for String);
                        v125 = objc_msgSend(v107, "__swift_objectForKeyedSubscript:", v124);
                        swift_unknownObjectRelease(v124);
                        if (v125)
                        {
                          _bridgeAnyObjectToAny(_:)(&v157, v125);
                          swift_unknownObjectRelease(v125);
                        }
                        else
                        {
                          v157 = 0u;
                          v158 = 0u;
                        }
                        sub_1000233AC((uint64_t)&v157, (uint64_t)&v159);
                        if (v160)
                        {
                          if ((swift_dynamicCast(&v155, &v159, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
                          {
                            v127 = v155;
                            v126 = v156;
                            swift_bridgeObjectRelease(v123);
                            goto LABEL_78;
                          }
                          swift_bridgeObjectRelease(v123);
                        }
                        else
                        {
                          swift_bridgeObjectRelease(v123);
                          sub_100007110((uint64_t)&v159);
                        }
                        v127 = 0;
                        v126 = 0xE000000000000000;
LABEL_78:
                        *(_QWORD *)&v159 = sub_10006DCA8(v127, v126, &v154);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, v117, v110 + 14, v110 + 22);

                        swift_bridgeObjectRelease(v126);
                        *(_WORD *)(v110 + 22) = 2085;
                        v106 = v146;
                        swift_bridgeObjectRetain(v146);
                        *(_QWORD *)&v159 = sub_10006DCA8(v150, v106, &v154);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v159, v117, v110 + 24, v110 + 32);
                        swift_bridgeObjectRelease_n(v106, 3);
                        v128 = v145;
                        _os_log_impl((void *)&_mh_execute_header, v145, (os_log_type_t)v143, "reportQuestionnaireAnswers: Updating answer for question %{sensitive}s: '%{sensitive}s' -> '%{sensitive}s'", (uint8_t *)v110, 0x20u);
                        v129 = v140;
                        swift_arrayDestroy(v140, 3, (char *)&type metadata for Any + 8);
                        swift_slowDealloc(v129, -1, -1);
                        swift_slowDealloc(v110, -1, -1);

                      }
                      else
                      {

                        swift_bridgeObjectRelease_n(v106, 2);
                      }
                      v130 = String._bridgeToObjectiveC()();
                      v131 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease(v106);
                      *(_QWORD *)&v159 = v130;
                      type metadata accessor for IAPayloadKey(0);
                      v133 = v132;
                      v134 = v130;
                      v135 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v159, v133);
                      objc_msgSend(v107, "__swift_setObject:forKeyedSubscript:", v131, v135);

                      swift_unknownObjectRelease(v135);
                      v88 = v144;
                      goto LABEL_47;
                    }
                  }

                  v91 = swift_bridgeObjectRelease(v100);
                }
                else
                {
                  swift_bridgeObjectRelease(v97);

                }
              }
              else
              {
                swift_bridgeObjectRelease(v97);

                v91 = sub_100007110((uint64_t)&v159);
              }
            }
LABEL_47:
            NSFastEnumerationIterator.next()(&v161, v91);
          }
          while (v162);
        }
        (*(void (**)(char *, uint64_t))(v141 + 8))(v88, v142);

      }
      else
      {
        v136 = Logger.logObject.getter(v86);
        v137 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v136, v137))
        {
          v138 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v138 = 0;
          _os_log_impl((void *)&_mh_execute_header, v136, v137, "reportQuestionnaireAnswers: nil cachedQuestionsOptionsAnswers - cannot update", v138, 2u);
          swift_slowDealloc(v138, -1, -1);
        }

      }
      return swift_bridgeObjectRelease(v152);
    }
LABEL_7:
    v150 = a1 & 0xC000000000000001;
    v19 = 4;
    *(_QWORD *)&v18 = 136642819;
    v146 = v18;
    v145 = (os_log_t)((char *)&type metadata for Any + 8);
    v149 = (char *)a1;
    *(_QWORD *)&v148 = v2;
LABEL_11:
    v22 = v19 - 4;
    if (v150)
      break;
    v5 = *(char **)(a1 + 8 * v19);
    swift_retain(v5);
    v23 = v19 - 3;
    if (!__OFADD__(v22, 1))
      goto LABEL_16;
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    swift_once(&qword_1000C73D0, sub_100006314);
  }
  v5 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, a1);
  v23 = v19 - 3;
  if (__OFADD__(v22, 1))
    goto LABEL_32;
LABEL_16:
  v24 = objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_entry], "question");
  if (!v24)
  {
    v33 = swift_bridgeObjectRetain_n(a1, 2);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v161 = v37;
      *(_DWORD *)v36 = v146;
      v38 = type metadata accessor for QuestionnaireEntry(0);
      v39 = Array.description.getter(a1, v38);
      v41 = v40;
      *(_QWORD *)(v36 + 4) = sub_10006DCA8(v39, v40, (uint64_t *)&v161);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "reportQuestionnaireAnswers: Received nil question for filled entries: %{sensitive}s", (uint8_t *)v36, 0xCu);
      swift_arrayDestroy(v37, 1, v145);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
      swift_release(v5, v42);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
      swift_release(v5, v58);
    }
    goto LABEL_10;
  }
  v25 = v24;
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v28 = v27;

  v29 = swift_getKeyPath(&unk_100094A68);
  *(_QWORD *)&v161 = v5;
  v30 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v161, v29, v30);
  swift_release(v29, v31);
  v32 = *(_QWORD *)&v5[OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer + 8];
  if (v32)
  {
    v151 = *(_QWORD *)&v5[OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer];
    v2 = v32;
  }
  else
  {
    v2 = 0xE400000000000000;
    v151 = 1701736270;
  }
  swift_bridgeObjectRetain(v32);
  v43 = v152;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v152);
  *(_QWORD *)&v161 = v43;
  v46 = sub_10001CD50(v26, v28);
  v47 = *(_QWORD *)(v43 + 16);
  v48 = (v45 & 1) == 0;
  v49 = v47 + v48;
  if (__OFADD__(v47, v48))
    goto LABEL_33;
  a1 = v45;
  if (*(_QWORD *)(v43 + 24) >= v49)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_10001FD38();
    goto LABEL_28;
  }
  sub_10001DB90(v49, isUniquelyReferenced_nonNull_native);
  v50 = sub_10001CD50(v26, v28);
  if ((a1 & 1) == (v51 & 1))
  {
    v46 = v50;
LABEL_28:
    v52 = (_QWORD *)v161;
    v152 = v161;
    if ((a1 & 1) != 0)
    {
      v20 = (uint64_t *)(*(_QWORD *)(v161 + 56) + 16 * v46);
      swift_bridgeObjectRelease(v20[1]);
      *v20 = v151;
      v20[1] = v2;
    }
    else
    {
      *(_QWORD *)(v161 + 8 * (v46 >> 6) + 64) |= 1 << v46;
      v53 = (uint64_t *)(v52[6] + 16 * v46);
      *v53 = v26;
      v53[1] = v28;
      v54 = (uint64_t *)(v52[7] + 16 * v46);
      *v54 = v151;
      v54[1] = v2;
      v55 = v52[2];
      v56 = __OFADD__(v55, 1);
      v57 = v55 + 1;
      if (v56)
        goto LABEL_34;
      v52[2] = v57;
      swift_bridgeObjectRetain(v28);
    }
    swift_release(v5, v21);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(0x8000000000000000);
    a1 = (uint64_t)v149;
    v2 = v148;
LABEL_10:
    ++v19;
    if (v23 == v2)
      goto LABEL_40;
    goto LABEL_11;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000549A0(id a1, char *a2)
{
  objc_class *v2;
  Class isa;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id *v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  unint64_t v38;
  id v39;
  NSString v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  id v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  NSString v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t KeyPath;
  Class v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSString v64;
  uint64_t v65;
  uint64_t inited;
  uint64_t v67;
  uint64_t v68;
  NSString v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  NSString v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  Class v81;
  objc_class *v82;
  unint64_t v83;
  NSDictionary v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  uint64_t v90;
  NSString v91;
  void *v92;
  id v93;
  id v94;
  Class v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  objc_class *v100;
  unint64_t v101;
  uint64_t v102;
  objc_class *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  Class v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  Class v123;
  id v124;
  id v125;
  uint64_t v126;
  _OWORD v127[2];
  uint64_t v128;
  char v129[80];
  __int128 v130;
  uint64_t v131;
  unint64_t v132;

  isa = v2;
  v6 = type metadata accessor for NSFastEnumerationIterator(0);
  v121 = *(_QWORD *)(v6 - 8);
  v122 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C73D0 != -1)
LABEL_42:
    swift_once(&qword_1000C73D0, sub_100006314);
  v9 = type metadata accessor for Logger(0);
  sub_1000063D4(v9, (uint64_t)qword_1000D1C00);
  v10 = swift_bridgeObjectRetain_n(a1, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v113 = a2;
  v114 = isa;
  if (v13)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v130 = v15;
    *(_DWORD *)v14 = 136642819;
    v125 = (char *)&type metadata for Any + 8;
    v16 = Dictionary.description.getter(a1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v18 = v17;
    *(_QWORD *)&v127[0] = sub_10006DCA8(v16, v17, (uint64_t *)&v130);
    a2 = v113;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v127, (char *)v127 + 8, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "reportGeneratedQuestions: resultOptions: %{sensitive}s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, v125);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v19 = sub_10002346C((uint64_t)a1);
  v21 = v20;
  v22 = objc_msgSend(a2, "entries");
  if (!v22)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v23 = v22;
  v24 = sub_100021548(0, &qword_1000C87E8, TCSmartReplyUserQuestionnaireEntry_ptr);
  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v24);

  if ((unint64_t)v25 >> 62)
  {
    if (v25 < 0)
      v105 = v25;
    else
      v105 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v25);
    v26 = _CocoaArrayWrapper.endIndex.getter(v105);
    swift_bridgeObjectRelease(v25);
  }
  else
  {
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v25);
  v27 = (id *)&IASignalSmartRepliesQuestionnaireShown;
  if (v26 <= 0)
    v27 = (id *)&IASignalSmartRepliesQuestionnaireNotShown;
  v28 = *v27;
  sub_100021548(0, &qword_1000CAB70, NSMutableArray_ptr);
  isa = (Class)NSArray.init(arrayLiteral:)(_swiftEmptyArrayStorage);
  v29 = objc_msgSend(a2, "entries");
  if (!v29)
    goto LABEL_61;
  v30 = v29;
  v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v24);

  v109 = v24;
  v110 = v28;
  v123 = isa;
  v111 = v19;
  v112 = v21;
  if ((unint64_t)v31 >> 62)
  {
    if (v31 < 0)
      v106 = v31;
    else
      v106 = v31 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v31);
    v32 = _CocoaArrayWrapper.endIndex.getter(v106);
    swift_bridgeObjectRelease(v31);
  }
  else
  {
    v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  a1 = &type metadata for Any;
  if (v32)
  {
    v118 = sub_100021548(0, &qword_1000CAB78, NSMutableDictionary_ptr);
    v119 = v31;
    v33 = 0;
    v120 = v31 & 0xC000000000000001;
    v115 = v31 + 32;
    v116 = v31 & 0xFFFFFFFFFFFFFF8;
    a2 = (char *)&type metadata for Any + 8;
    v117 = v32;
    while (1)
    {
      if (v120)
      {
        v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v31);
      }
      else
      {
        if (v33 >= *(_QWORD *)(v116 + 16))
          goto LABEL_41;
        v39 = *(id *)(v115 + 8 * v33);
      }
      v125 = v39;
      if (__OFADD__(v33++, 1))
      {
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      v124 = (id)NSDictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
      v41 = String._bridgeToObjectiveC()();
      static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v43 = v42;

      v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v43);
      v45 = objc_msgSend(v125, "question", v109);
      if (v45)
      {
        v46 = v45;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v48 = v47;

      }
      else
      {
        v48 = 0xE000000000000000;
      }
      v49 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v48);
      objc_msgSend(v124, "setObject:forKeyedSubscript:", v49, v44);

      v132 = (unint64_t)_swiftEmptyArrayStorage;
      v50 = objc_msgSend(v125, "answerOptions");
      v31 = v119;
      if (!v50)
        break;
      v51 = v50;
      NSOrderedSet.makeIterator()();

      while (1)
      {
        NSFastEnumerationIterator.next()(&v130, v52);
        if (!v131)
          break;
        sub_100021008(&v130, v127);
        v53 = sub_100021548(0, &qword_1000CAB80, NSString_ptr);
        v54 = swift_dynamicCast(&v126, v127, (char *)&type metadata for Any + 8, v53, 7);
        v55 = v126;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
        v57 = *(_QWORD *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v56 = *(_QWORD *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v57 >= v56 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
        v58 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v57, v55);
        v52 = specialized Array._endMutation()(v58);
      }
      (*(void (**)(char *, uint64_t))(v121 + 8))(v8, v122);
      v34 = String._bridgeToObjectiveC()();
      static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v36 = v35;

      v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
      v38 = v132;
      sub_100021548(0, &qword_1000CAB80, NSString_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v38);
      a1 = v124;
      objc_msgSend(v124, "setObject:forKeyedSubscript:", isa, v37);

      -[objc_class addObject:](v123, "addObject:", a1);
      if (v33 == v117)
        goto LABEL_30;
    }
    __break(1u);
    goto LABEL_60;
  }
LABEL_30:
  swift_bridgeObjectRelease(v31);
  KeyPath = swift_getKeyPath(&unk_100094A18);
  v60 = v114;
  *(_QWORD *)&v130 = v114;
  v61 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v130, KeyPath, v61);
  swift_release(KeyPath, v62);
  v63 = *((_QWORD *)v60 + 5);
  if (v63)
  {
    swift_bridgeObjectRetain(*((_QWORD *)v60 + 5));
    v64 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v63);
    v65 = sub_100004EAC(&qword_1000CAB98);
    inited = swift_initStackObject(v65, &v128);
    *(_OWORD *)(inited + 16) = xmmword_100094970;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IAPayloadKeySmartRepliesFeatureModel);
    *(_QWORD *)(inited + 40) = v67;
    v68 = v112;
    v69 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v68);
    *(_QWORD *)(inited + 48) = v69;
    *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(IAPayloadKeySmartRepliesNumOfQuestionsProvided);
    *(_QWORD *)(inited + 64) = v70;
    v71 = objc_msgSend(v113, "entries");
    if (!v71)
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    v72 = v71;
    v73 = IAChannelSmartReplies;
    v74 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v71, v109);

    if ((unint64_t)v74 >> 62)
    {
      if (v74 < 0)
        v107 = v74;
      else
        v107 = v74 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v74);
      v75 = _CocoaArrayWrapper.endIndex.getter(v107);
      swift_bridgeObjectRelease(v74);
    }
    else
    {
      v75 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v74);
    v76 = (void *)objc_opt_self(IASignalAnalytics);
    *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v75);
    v77 = String._bridgeToObjectiveC()();
    v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
    v80 = v79;

    *(_QWORD *)(inited + 80) = v78;
    *(_QWORD *)(inited + 88) = v80;
    v81 = v123;
    *(_QWORD *)(inited + 96) = v123;
    v82 = v81;
    v83 = sub_100062358(inited);
    sub_100021548(0, &qword_1000CAB90, NSObject_ptr);
    v84.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v83);
    v85 = v110;
    objc_msgSend(v76, "sendSignal:toChannel:withUniqueStringID:withPayload:", v110, v73, v64, v84.super.isa);

    v60 = v114;
LABEL_39:

    v102 = swift_getKeyPath(&unk_100094A40);
    __chkstk_darwin(v102);
    *(&v109 - 2) = (uint64_t)v60;
    *(&v109 - 1) = (uint64_t)v81;
    *(_QWORD *)&v130 = v60;
    v103 = v81;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v130, v102, sub_100055940, &v109 - 4, (char *)&type metadata for () + 8, v61);

    swift_release(v102, v104);
    return;
  }
  v86 = sub_100004EAC(&qword_1000CAB88);
  v87 = swift_initStackObject(v86, v129);
  *(_OWORD *)(v87 + 16) = xmmword_100094970;
  v88 = (void *)IAPayloadKeySmartRepliesFeatureModel;
  *(_QWORD *)(v87 + 32) = IAPayloadKeySmartRepliesFeatureModel;
  v89 = v88;
  v90 = v112;
  v91 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v90);
  v92 = (void *)IAPayloadKeySmartRepliesNumOfQuestionsProvided;
  *(_QWORD *)(v87 + 40) = v91;
  *(_QWORD *)(v87 + 48) = v92;
  v93 = v92;
  v94 = objc_msgSend(v113, "entries");
  v95 = v123;
  if (v94)
  {
    v96 = v94;
    v125 = (id)IAChannelSmartReplies;
    v97 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v94, v109);

    if ((unint64_t)v97 >> 62)
    {
      if (v97 < 0)
        v108 = v97;
      else
        v108 = v97 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v97);
      v98 = _CocoaArrayWrapper.endIndex.getter(v108);
      swift_bridgeObjectRelease(v97);
    }
    else
    {
      v98 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v97);
    v99 = (void *)objc_opt_self(IASignalAnalytics);
    *(_QWORD *)(v87 + 56) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v98);
    *(_QWORD *)(v87 + 64) = String._bridgeToObjectiveC()();
    *(_QWORD *)(v87 + 72) = v95;
    v100 = v95;
    v101 = sub_100062470(v87);
    type metadata accessor for IAPayloadKey(0);
    sub_100021548(0, &qword_1000CAB90, NSObject_ptr);
    sub_100005900(&qword_1000C7630, (uint64_t (*)(uint64_t))type metadata accessor for IAPayloadKey, (uint64_t)&unk_100091E28);
    v81 = v95;
    v84.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v101);
    v85 = v110;
    objc_msgSend(v99, "sendSignal:toChannel:withPayload:", v110, v125, v84.super.isa);
    goto LABEL_39;
  }
LABEL_63:
  __break(1u);
}

void sub_1000554F8(void *a1)
{
  sub_10005550C(a1, "sendFeedbackServiceSignal: %{private}s", &IAChannelFeedbackService);
}

void sub_10005550C(void *a1, const char *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSString v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = v3;
  if (qword_1000C73D0 != -1)
    swift_once(&qword_1000C73D0, sub_100006314);
  v8 = type metadata accessor for Logger(0);
  sub_1000063D4(v8, (uint64_t)qword_1000D1C00);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = a3;
    v13 = swift_slowAlloc(32, -1);
    v27 = v13;
    *(_DWORD *)v12 = 136380675;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v16 = v15;
    v26 = sub_10006DCA8(v14, v15, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v12 + 4, v12 + 12);

    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, a2, v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    v17 = v13;
    a3 = v25;
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  KeyPath = swift_getKeyPath(&unk_100094A18);
  v27 = v6;
  v19 = sub_100005900(&qword_1000CAB68, type metadata accessor for SmartReplyAnalytics, (uint64_t)&unk_1000949F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v27, KeyPath, v19);
  swift_release(KeyPath, v20);
  v21 = *(_QWORD *)(v6 + 40);
  if (v21)
  {
    v22 = (void *)objc_opt_self(IASignalAnalytics);
    v23 = *a3;
    swift_bridgeObjectRetain(v21);
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
    objc_msgSend(v22, "sendSignal:toChannel:withUniqueStringID:withPayload:", v9, v23, v24, 0);

  }
  else
  {
    objc_msgSend((id)objc_opt_self(IASignalAnalytics), "sendSignal:toChannel:withPayload:", v9, *a3, 0);
  }
}

uint64_t sub_10005579C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  v1 = v0 + OBJC_IVAR____TtC21WritingToolsUIService19SmartReplyAnalytics___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10005581C()
{
  return type metadata accessor for SmartReplyAnalytics(0);
}

uint64_t type metadata accessor for SmartReplyAnalytics(uint64_t a1)
{
  uint64_t result;

  result = qword_1000CA940;
  if (!qword_1000CA940)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SmartReplyAnalytics);
  return result;
}

uint64_t sub_100055860(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_1000949C8;
  v4[1] = &unk_1000949C8;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = &unk_1000949C8;
  v4[4] = &unk_1000949E0;
  v4[5] = &unk_1000949C8;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000558FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[2];
  v2 = v0[4];
  v3 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 32) = v0[3];
  *(_QWORD *)(v1 + 40) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

void sub_100055940()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = v2;
  v4 = v2;

}

uint64_t sub_100055984()
{
  return sub_1000559D4();
}

void sub_1000559A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = v2;
  v4 = v2;

}

uint64_t sub_1000559D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[2];
  v2 = v0[4];
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 16) = v0[3];
  *(_QWORD *)(v1 + 24) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100055A20()
{
  return sub_100055A48();
}

uint64_t sub_100055A34()
{
  return sub_100055A84();
}

uint64_t sub_100055A48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[2];
  v2 = v0[4];
  v3 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 80) = v0[3];
  *(_QWORD *)(v1 + 88) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100055A84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[2];
  v2 = v0[4];
  v3 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 56) = v0[3];
  *(_QWORD *)(v1 + 64) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

void sub_100055AC0()
{
  sub_100055940();
}

uint64_t sub_100055AD4()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100094D90);
  v5 = v0;
  v2 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_100055B40@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094D90);
  v8 = v3;
  v5 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  result = swift_release(KeyPath, v6);
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

uint64_t sub_100055BB4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094D90);
  v8[2] = v3;
  v9 = v2;
  v10 = v3;
  v5 = sub_100015B78();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100058A5C, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_100055C44(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t sub_100055C4C()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100094DB8);
  v5 = v0;
  v2 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_100055CB8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094DB8);
  v8 = v3;
  v5 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  result = swift_release(KeyPath, v6);
  *a2 = *(_BYTE *)(v3 + 17);
  return result;
}

uint64_t sub_100055D2C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094DB8);
  v8[2] = v3;
  v9 = v2;
  v10 = v3;
  v5 = sub_100015B78();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100058B48, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_100055DBC()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100094E08);
  v5 = v0;
  v2 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return *(_QWORD *)(v0 + 24);
}

uint64_t sub_100055E2C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094E08);
  v9 = v3;
  v5 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  result = swift_release(KeyPath, v6);
  v8 = *(_BYTE *)(v3 + 32);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 24);
  *(_BYTE *)(a2 + 8) = v8;
  return result;
}

uint64_t sub_100055EA8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  char v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094E08);
  v9[2] = v4;
  v9[3] = v2;
  v10 = v3;
  v11 = v4;
  v6 = sub_100015B78();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, KeyPath, sub_100058AA0, v9, (char *)&type metadata for () + 8, v6);
  return swift_release(KeyPath, v7);
}

uint64_t sub_100055F3C(uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = a3 & 1;
  return result;
}

uint64_t sub_100055F4C()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100094DE0);
  v5 = v0;
  v2 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t sub_100055FB8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094DE0);
  v8 = v3;
  v5 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  result = swift_release(KeyPath, v6);
  *a2 = *(_BYTE *)(v3 + 33);
  return result;
}

uint64_t sub_10005602C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094DE0);
  v8[2] = v3;
  v9 = v2;
  v10 = v3;
  v5 = sub_100015B78();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100058AB4, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_1000560BC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 33) = a2;
  return result;
}

uint64_t sub_1000560C4()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100094E30);
  v5 = v0;
  v2 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return swift_unknownObjectWeakLoadStrong(v0 + 40);
}

uint64_t sub_100056134@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094E30);
  v8 = v3;
  v5 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath, v6);
  result = swift_unknownObjectWeakLoadStrong(v3 + 40);
  *a2 = result;
  return result;
}

void sub_1000561AC(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094E30);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_100015B78();
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100058A84, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v7);

}

uint64_t sub_100056248(uint64_t a1)
{
  return swift_unknownObjectWeakAssign(a1 + 40);
}

uint64_t sub_100056260()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100094CC8);
  v5 = v0;
  v2 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return swift_unknownObjectWeakLoadStrong(v0 + 48);
}

uint64_t sub_1000562D0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094CC8);
  v8 = v3;
  v5 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath, v6);
  result = swift_unknownObjectWeakLoadStrong(v3 + 48);
  *a2 = result;
  return result;
}

void sub_100056348(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094CC8);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_100015B78();
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100058954, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v7);

}

uint64_t sub_1000563E4(uint64_t a1)
{
  return swift_unknownObjectWeakAssign(a1 + 48);
}

uint64_t sub_1000563FC()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100094D68);
  v5 = v0;
  v2 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return swift_unknownObjectWeakLoadStrong(v0 + 56);
}

uint64_t sub_10005646C(uint64_t a1)
{
  return swift_unknownObjectWeakAssign(a1 + 56);
}

void *sub_100056484()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_100094CF0);
  v7 = v0;
  v2 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath, v3);
  v4 = *(void **)(v0 + 64);
  v5 = v4;
  return v4;
}

id sub_1000564F8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094CF0);
  v9 = v3;
  v5 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(void **)(v3 + 64);
  *a2 = v7;
  return v7;
}

void sub_10005656C(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094CF0);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_100015B78();
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100058B70, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v7);

}

void *sub_100056608()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_100094D40);
  v7 = v0;
  v2 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath, v3);
  v4 = *(void **)(v0 + 72);
  v5 = v4;
  return v4;
}

id sub_10005667C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094D40);
  v9 = v3;
  v5 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(void **)(v3 + 72);
  *a2 = v7;
  return v7;
}

void sub_1000566F0(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094D40);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_100015B78();
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100055AC0, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v7);

}

uint64_t sub_10005678C()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_100094D18);
  v5 = v0;
  v2 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t sub_1000567F8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094D18);
  v8 = v3;
  v5 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  result = swift_release(KeyPath, v6);
  *a2 = *(_BYTE *)(v3 + 80);
  return result;
}

uint64_t sub_10005686C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094D18);
  v8[2] = v3;
  v9 = v2;
  v10 = v3;
  v5 = sub_100015B78();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100058B34, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_1000568FC()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  char v14;
  _BYTE v15[16];
  uint64_t v16;
  char v17;
  uint64_t v18;

  KeyPath = swift_getKeyPath(&unk_100094D90);
  v16 = v0;
  v17 = 0;
  v18 = v0;
  v2 = sub_100015B78();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v18, KeyPath, sub_100058B5C, v15, (char *)&type metadata for () + 8, v2);
  swift_release(KeyPath, v3);
  v4 = swift_getKeyPath(&unk_100094DB8);
  v13 = v0;
  v14 = 0;
  v18 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v18, v4, sub_100058B48, v12, (char *)&type metadata for () + 8, v2);
  swift_release(v4, v5);
  v6 = swift_getKeyPath(&unk_100094D68);
  v10 = v0;
  v11 = 0;
  v18 = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v18, v6, sub_100058AC4, &v9, (char *)&type metadata for () + 8, v2);
  return swift_release(v6, v7);
}

void sub_100056A1C()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  KeyPath = swift_getKeyPath(&unk_100094DE0);
  v34 = v0;
  v2 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, KeyPath, v2);
  swift_release(KeyPath, v3);
  v4 = *(unsigned __int8 *)(v0 + 33);
  if (v4 != 3)
  {
    v5 = swift_getKeyPath(&unk_100094E08);
    v34 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, v5, v2);
    swift_release(v5, v6);
    if ((*(_BYTE *)(v0 + 32) & 1) == 0)
    {
      v7 = *(_QWORD *)(v0 + 24);
      v8 = swift_getKeyPath(&unk_100094E30);
      v34 = v0;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, v8, v2);
      swift_release(v8, v9);
      Strong = swift_unknownObjectWeakLoadStrong(v0 + 40);
      if (Strong)
      {
        v11 = (void *)Strong;
        if (v4 == 2)
        {
          v33 = v7;
          v12 = swift_getKeyPath(&unk_100094CF0);
          v34 = v0;
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, v12, v2);
          swift_release(v12, v13);
          v14 = *(void **)(v0 + 64);
          if (v14)
          {
            v15 = v14;
            objc_msgSend(v15, "removeFromSuperview");
            v16 = swift_getKeyPath(&unk_100094CF0);
            __chkstk_darwin(v16);
            v31 = v0;
            v32 = 0;
            v34 = v0;
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v34, v16, sub_100058B70, v30, (char *)&type metadata for () + 8, v2);

            swift_release(v16, v17);
          }
          v18 = swift_getKeyPath(&unk_100094D40);
          v34 = v0;
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, v18, v2);
          swift_release(v18, v19);
          v20 = *(void **)(v0 + 72);
          if (v20)
          {
            v21 = v20;
            objc_msgSend(v21, "removeFromSuperview");
            v22 = swift_getKeyPath(&unk_100094D40);
            __chkstk_darwin(v22);
            v31 = v0;
            v32 = 0;
            v34 = v0;
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v34, v22, sub_100055AC0, v30, (char *)&type metadata for () + 8, v2);

            swift_release(v22, v23);
          }
          v24 = objc_msgSend(v11, "rootViewController");
          v25 = v33;
          if (v24)
          {
            v26 = v24;
            v27 = objc_msgSend(v24, "view");

            if (!v27)
            {
              __break(1u);
              return;
            }
            objc_msgSend(v27, "layoutSubviews");

          }
          v28 = swift_getKeyPath(&unk_100094D18);
          v34 = v0;
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, v28, v2);
          swift_release(v28, v29);
          if ((*(_BYTE *)(v0 + 80) & 1) == 0)
          {
            if (v25 == 7)
            {
              sub_100057EA8();
            }
            else if (v25 == 2)
            {
              sub_100056FF4();
            }
          }
        }

      }
    }
  }
}

void sub_100056D54(void *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  uint64_t v23;

  KeyPath = swift_getKeyPath(&unk_100094D68);
  v23 = v1;
  v4 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, KeyPath, v4);
  swift_release(KeyPath, v5);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 56);
  if (Strong)
  {
    v7 = (void *)Strong;
    if (a1)
    {
      v8 = swift_getKeyPath(&unk_100094DB8);
      __chkstk_darwin(v8);
      v21 = v1;
      v22 = 0;
      v23 = v1;
      v9 = a1;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v23, v8, sub_100058B48, v20, (char *)&type metadata for () + 8, v4);
      swift_release(v8, v10);
      objc_msgSend(v7, "replaceAnimatedTextPlaceholderWith:", v9);
      v11 = objc_msgSend(v7, "attributedText");
      if (!v11)
      {
        __break(1u);
        return;
      }
      v12 = v11;
      v13 = objc_msgSend(v11, "length");

      if (v13)
      {

        v7 = v9;
      }
      else
      {
        objc_msgSend(v7, "setAttributedText:", v9);

      }
    }
    else
    {
      v14 = swift_getKeyPath(&unk_100094D90);
      v23 = v1;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, v14, v4);
      swift_release(v14, v15);
      if (*(_BYTE *)(v1 + 16) == 1)
      {
        v16 = swift_getKeyPath(&unk_100094DB8);
        v23 = v1;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, v16, v4);
        swift_release(v16, v17);
        if ((*(_BYTE *)(v1 + 17) & 1) == 0)
        {
          objc_msgSend(v7, "setAttributedText:", 0);
          v18 = swift_getKeyPath(&unk_100094DB8);
          __chkstk_darwin(v18);
          v21 = v1;
          v22 = 1;
          v23 = v1;
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v23, v18, sub_100058A4C, v20, (char *)&type metadata for () + 8, v4);
          swift_release(v18, v19);
          objc_msgSend(v7, "removeAnimatedTextPlaceholders");
          objc_msgSend(v7, "insertAnimatedTextPlaceholder");
        }
      }
    }

  }
}

void sub_100056FF4()
{
  void **v0;
  void *v1;
  uint64_t KeyPath;
  unint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  double y;
  double width;
  double height;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  Class isa;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  _QWORD *v53;
  id v54;
  uint64_t v55;
  _QWORD *v56;
  void **v57;
  uint64_t v58;
  void *v59;
  _QWORD *v60;
  id v61;
  uint64_t v62;
  id v63;
  void *v64;
  id v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  Class v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  _QWORD *v78;
  id v79;
  uint64_t v80;
  _BYTE v81[16];
  void **v82;
  id v83;
  id v84;
  void **v85;
  id v86;
  uint64_t v87;
  unint64_t aBlock;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  _QWORD *v93;

  v1 = *v0;
  KeyPath = swift_getKeyPath(&unk_100094CC8);
  aBlock = (unint64_t)v0;
  v3 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&aBlock, KeyPath, v3);
  swift_release(KeyPath, v4);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 6);
  if (Strong)
  {
    v6 = (void *)Strong;
    y = CGRectZero.origin.y;
    width = CGRectZero.size.width;
    height = CGRectZero.size.height;
    v10 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithFrame:", CGRectZero.origin.x, y, width, height);
    objc_msgSend(v10, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v10, "setUserInteractionEnabled:", 0);
    v87 = (uint64_t)v1;
    v11 = swift_getKeyPath(&unk_100094CF0);
    __chkstk_darwin(v11);
    v82 = v0;
    v83 = v10;
    aBlock = (unint64_t)v0;
    v84 = v10;
    v85 = v0;
    v12 = v84;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&aBlock, v11, sub_100058B70, v81, (char *)&type metadata for () + 8, v3);
    swift_release(v11, v13);

    v14 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithFrame:", CGRectZero.origin.x, y, width, height);
    objc_msgSend(v14, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v14, "setUserInteractionEnabled:", 0);
    v15 = swift_getKeyPath(&unk_100094D40);
    __chkstk_darwin(v15);
    v82 = v0;
    v83 = v14;
    aBlock = (unint64_t)v0;
    v16 = v14;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&aBlock, v15, sub_100055940, v81, (char *)&type metadata for () + 8, v3);
    swift_release(v15, v17);

    objc_msgSend(v6, "addSubview:", v16);
    v18 = v84;
    objc_msgSend(v6, "addSubview:", v84);
    v86 = (id)objc_opt_self(NSLayoutConstraint);
    v19 = sub_100004EAC((uint64_t *)&unk_1000C7570);
    v20 = swift_allocObject(v19, 96, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100094B30;
    v21 = v6;
    v22 = objc_msgSend(v18, "widthAnchor");
    v23 = objc_msgSend(v6, "widthAnchor");
    v24 = objc_msgSend(v22, "constraintEqualToAnchor:", v23);

    *(_QWORD *)(v20 + 32) = v24;
    v25 = objc_msgSend(v18, "heightAnchor");
    v26 = objc_msgSend(v6, "heightAnchor");
    v27 = objc_msgSend(v25, "constraintEqualToAnchor:constant:", v26, 200.0);

    *(_QWORD *)(v20 + 40) = v27;
    v28 = objc_msgSend(v18, "centerXAnchor");
    v29 = objc_msgSend(v6, "centerXAnchor");
    v30 = objc_msgSend(v28, "constraintEqualToAnchor:", v29);

    *(_QWORD *)(v20 + 48) = v30;
    v31 = objc_msgSend(v18, "topAnchor");
    v32 = objc_msgSend(v6, "topAnchor");
    v33 = objc_msgSend(v31, "constraintEqualToAnchor:", v32);

    *(_QWORD *)(v20 + 56) = v33;
    v34 = objc_msgSend(v16, "widthAnchor");
    v35 = objc_msgSend(v6, "widthAnchor");
    v36 = objc_msgSend(v34, "constraintEqualToAnchor:", v35);

    *(_QWORD *)(v20 + 64) = v36;
    v37 = objc_msgSend(v16, "heightAnchor");
    v38 = objc_msgSend(v6, "heightAnchor");
    v39 = objc_msgSend(v37, "constraintEqualToAnchor:constant:", v38, 200.0);

    *(_QWORD *)(v20 + 72) = v39;
    v40 = objc_msgSend(v16, "centerXAnchor");
    v41 = objc_msgSend(v6, "centerXAnchor");
    v42 = objc_msgSend(v40, "constraintEqualToAnchor:", v41);

    *(_QWORD *)(v20 + 80) = v42;
    v43 = objc_msgSend(v16, "topAnchor");
    v44 = objc_msgSend(v6, "topAnchor");
    v45 = objc_msgSend(v43, "constraintEqualToAnchor:", v44);

    *(_QWORD *)(v20 + 88) = v45;
    aBlock = v20;
    specialized Array._endMutation()(v46);
    v47 = aBlock;
    sub_100021548(0, (unint64_t *)&qword_1000C9D00, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v47);
    objc_msgSend(v86, "activateConstraints:", isa);

    v49 = (void *)objc_opt_self(UIView);
    v50 = swift_allocObject(&unk_1000C0960, 32, 7);
    v51 = v87;
    *(_QWORD *)(v50 + 16) = v18;
    *(_QWORD *)(v50 + 24) = v51;
    v92 = sub_100058AE0;
    v93 = (_QWORD *)v50;
    aBlock = (unint64_t)_NSConcreteStackBlock;
    v89 = 1107296256;
    v90 = sub_1000181D8;
    v91 = &unk_1000C0978;
    v52 = _Block_copy(&aBlock);
    v53 = v93;
    v54 = v18;
    swift_release(v53, v55);
    v56 = (_QWORD *)swift_allocObject(&unk_1000C09B0, 40, 7);
    v57 = v85;
    v56[2] = v54;
    v56[3] = v57;
    v58 = v51;
    v56[4] = v51;
    v92 = sub_100058980;
    v93 = v56;
    aBlock = (unint64_t)_NSConcreteStackBlock;
    v89 = 1107296256;
    v90 = sub_100057D6C;
    v91 = &unk_1000C09C8;
    v59 = _Block_copy(&aBlock);
    v60 = v93;
    v61 = v54;
    swift_retain(v57);
    swift_release(v60, v62);
    objc_msgSend(v49, "animateWithDuration:animations:completion:", v52, v59, 0.0);
    _Block_release(v59);
    _Block_release(v52);
    aBlock = (unint64_t)_swiftEmptyArrayStorage;
    sub_100021548(0, &qword_1000CAEC8, UIVisualEffect_ptr);
    v63 = objc_msgSend((id)objc_opt_self(_UIIntelligenceLightSourceDescriptor), "sharedLight");
    v64 = (void *)static UIVisualEffect.intelligenceContentLight(source:activationDirection:deactivationDirection:)();

    v65 = v64;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v65);
    v67 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10);
    v66 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v67 >= v66 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
    v68 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v67, v65);
    specialized Array._endMutation()(v68);

    v69 = aBlock;
    v70 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v69);
    objc_msgSend(v16, "setBackgroundEffects:", v70);

    v71 = swift_allocObject(&unk_1000C0A00, 32, 7);
    *(_QWORD *)(v71 + 16) = v16;
    *(_QWORD *)(v71 + 24) = v58;
    v92 = sub_10005898C;
    v93 = (_QWORD *)v71;
    aBlock = (unint64_t)_NSConcreteStackBlock;
    v89 = 1107296256;
    v90 = sub_1000181D8;
    v91 = &unk_1000C0A18;
    v72 = _Block_copy(&aBlock);
    v73 = v93;
    v74 = v16;
    swift_release(v73, v75);
    v76 = swift_allocObject(&unk_1000C0A50, 32, 7);
    *(_QWORD *)(v76 + 16) = v74;
    *(_QWORD *)(v76 + 24) = v57;
    v92 = sub_1000589D4;
    v93 = (_QWORD *)v76;
    aBlock = (unint64_t)_NSConcreteStackBlock;
    v89 = 1107296256;
    v90 = sub_100057D6C;
    v91 = &unk_1000C0A68;
    v77 = _Block_copy(&aBlock);
    v78 = v93;
    v79 = v74;
    swift_retain(v57);
    swift_release(v78, v80);
    objc_msgSend(v49, "animateWithDuration:animations:completion:", v72, v77, 1.0);
    _Block_release(v77);
    _Block_release(v72);

  }
}

void sub_100057918(char a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD *v23;

  if ((a1 & 1) != 0)
  {
    v7 = (void *)objc_opt_self(UIView);
    v8 = swift_allocObject(&unk_1000C0AA0, 32, 7);
    *(_QWORD *)(v8 + 16) = a2;
    *(_QWORD *)(v8 + 24) = a4;
    v22 = sub_1000589DC;
    v23 = (_QWORD *)v8;
    v18 = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_1000181D8;
    v21 = &unk_1000C0AB8;
    v9 = _Block_copy(&v18);
    v10 = v23;
    v11 = a2;
    swift_release(v10, v12);
    v13 = (_QWORD *)swift_allocObject(&unk_1000C0AF0, 40, 7);
    v13[2] = a3;
    v13[3] = v11;
    v13[4] = a4;
    v22 = sub_100058A10;
    v23 = v13;
    v18 = _NSConcreteStackBlock;
    v19 = 1107296256;
    v20 = sub_100057D6C;
    v21 = &unk_1000C0B08;
    v14 = _Block_copy(&v18);
    v15 = v23;
    v16 = v11;
    swift_retain(a3);
    swift_release(v15, v17);
    objc_msgSend(v7, "animateWithDuration:animations:completion:", v9, v14, 0.7);
    _Block_release(v14);
    _Block_release(v9);
  }
}

void sub_100057A84(void *a1)
{
  _QWORD *v2;
  Class isa;

  v2 = sub_100058784(1, 2, 1);
  sub_100021548(0, &qword_1000CAEC8, UIVisualEffect_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  objc_msgSend(a1, "setBackgroundEffects:", isa);

}

void sub_100057B04(char a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t KeyPath;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD v16[3];
  char v17;
  _QWORD aBlock[5];
  uint64_t v19;

  if ((a1 & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_100094D18);
    __chkstk_darwin(KeyPath);
    v16[2] = a2;
    v17 = 1;
    aBlock[0] = a2;
    v8 = sub_100015B78();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(aBlock, KeyPath, sub_100058B34, v16, (char *)&type metadata for () + 8, v8);
    swift_release(KeyPath, v9);
    v10 = (void *)objc_opt_self(UIView);
    v11 = swift_allocObject(&unk_1000C0B40, 32, 7);
    *(_QWORD *)(v11 + 16) = a3;
    *(_QWORD *)(v11 + 24) = a4;
    aBlock[4] = sub_100058A1C;
    v19 = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000181D8;
    aBlock[3] = &unk_1000C0B58;
    v12 = _Block_copy(aBlock);
    v13 = v19;
    v14 = a3;
    swift_release(v13, v15);
    objc_msgSend(v10, "animateWithDuration:animations:", v12, 3.0);
    _Block_release(v12);
  }
}

void sub_100057C70(void *a1)
{
  id v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  Class isa;

  v2 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 10);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v2);
  v4 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  v3 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v4 >= v3 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1);
  v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v2);
  specialized Array._endMutation()(v5);
  sub_100021548(0, &qword_1000CAEC8, UIVisualEffect_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  objc_msgSend(a1, "setBackgroundEffects:", isa);

}

uint64_t sub_100057D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3, v5);
}

void sub_100057DA8(void *a1)
{
  Class isa;

  sub_100021548(0, &qword_1000CAEC8, UIVisualEffect_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setBackgroundEffects:", isa);

}

uint64_t sub_100057E10(int a1, id a2, uint64_t a3)
{
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  objc_msgSend(a2, "removeFromSuperview");
  KeyPath = swift_getKeyPath(&unk_100094D40);
  v8[2] = a3;
  v8[3] = 0;
  v9 = a3;
  v5 = sub_100015B78();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100055AC0, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

void sub_100057EA8()
{
  void **v0;
  void **v1;
  void *v2;
  uint64_t KeyPath;
  unint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void **v29;
  Class isa;
  _QWORD *v31;
  Class v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  void *v44;
  void **aBlock;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;

  v1 = v0;
  v2 = *v0;
  KeyPath = swift_getKeyPath(&unk_100094CC8);
  aBlock = v0;
  v4 = sub_100015B78();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&aBlock, KeyPath, v4);
  swift_release(KeyPath, v5);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 6);
  if (Strong)
  {
    v7 = (void *)Strong;
    v8 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithFrame:", CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
    v44 = v2;
    v9 = v8;
    objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v10 = swift_getKeyPath(&unk_100094CF0);
    __chkstk_darwin(v10);
    v43[2] = v0;
    v43[3] = v9;
    aBlock = v0;
    v11 = v9;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&aBlock, v10, sub_1000586E8, v43, (char *)&type metadata for () + 8, v4);
    swift_release(v10, v12);

    objc_msgSend(v7, "addSubview:", v11);
    v13 = (void *)objc_opt_self(NSLayoutConstraint);
    v14 = sub_100004EAC((uint64_t *)&unk_1000C7570);
    v15 = swift_allocObject(v14, 64, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100091440;
    v16 = objc_msgSend(v11, "leftAnchor");
    v17 = objc_msgSend(v7, "leftAnchor");
    v18 = objc_msgSend(v16, "constraintEqualToAnchor:constant:", v17, -15.0);

    *(_QWORD *)(v15 + 32) = v18;
    v19 = objc_msgSend(v11, "rightAnchor");
    v20 = objc_msgSend(v7, "rightAnchor");
    v21 = objc_msgSend(v19, "constraintEqualToAnchor:constant:", v20, 15.0);

    *(_QWORD *)(v15 + 40) = v21;
    v22 = objc_msgSend(v11, "topAnchor");
    v23 = objc_msgSend(v7, "topAnchor");
    v24 = objc_msgSend(v22, "constraintEqualToAnchor:constant:", v23, -15.0);

    *(_QWORD *)(v15 + 48) = v24;
    v25 = objc_msgSend(v11, "bottomAnchor");
    v26 = objc_msgSend(v7, "bottomAnchor");
    v27 = objc_msgSend(v25, "constraintEqualToAnchor:constant:", v26, 15.0);

    *(_QWORD *)(v15 + 56) = v27;
    aBlock = (void **)v15;
    specialized Array._endMutation()(v28);
    v29 = aBlock;
    sub_100021548(0, (unint64_t *)&qword_1000C9D00, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v29);
    objc_msgSend(v13, "activateConstraints:", isa);

    v31 = sub_100058784(1, 0, 1);
    sub_100021548(0, &qword_1000CAEC8, UIVisualEffect_ptr);
    v32 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v31);
    objc_msgSend(v11, "setBackgroundEffects:", v32);

    v33 = (void *)objc_opt_self(UIView);
    v34 = swift_allocObject(&unk_1000C08E8, 32, 7);
    v35 = v44;
    *(_QWORD *)(v34 + 16) = v11;
    *(_QWORD *)(v34 + 24) = v35;
    v49 = sub_100058AE0;
    v50 = v34;
    aBlock = _NSConcreteStackBlock;
    v46 = 1107296256;
    v47 = sub_1000181D8;
    v48 = &unk_1000C0900;
    v36 = _Block_copy(&aBlock);
    v37 = v50;
    v38 = v11;
    swift_release(v37, v39);
    v49 = sub_100058934;
    v50 = (uint64_t)v1;
    aBlock = _NSConcreteStackBlock;
    v46 = 1107296256;
    v47 = sub_100057D6C;
    v48 = &unk_1000C0928;
    v40 = _Block_copy(&aBlock);
    v41 = v50;
    swift_retain(v1);
    swift_release(v41, v42);
    objc_msgSend(v33, "animateWithDuration:animations:completion:", v36, v40, 3.0);
    _Block_release(v40);
    _Block_release(v36);

  }
}

uint64_t sub_1000583A0(uint64_t result, uint64_t a2)
{
  uint64_t KeyPath;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  char v7;
  uint64_t v8;

  if ((result & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_100094D18);
    __chkstk_darwin(KeyPath);
    v6[2] = a2;
    v7 = 1;
    v8 = a2;
    v4 = sub_100015B78();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100058944, v6, (char *)&type metadata for () + 8, v4);
    return swift_release(KeyPath, v5);
  }
  return result;
}

uint64_t sub_100058460()
{
  id *v0;
  char *v1;
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v0 + 5);
  swift_unknownObjectWeakDestroy(v0 + 6);
  swift_unknownObjectWeakDestroy(v0 + 7);

  v1 = (char *)v0 + OBJC_IVAR____TtC21WritingToolsUIService15CommonUIManager___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_1000584D8()
{
  return type metadata accessor for CommonUIManager(0);
}

uint64_t type metadata accessor for CommonUIManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1000CABD0;
  if (!qword_1000CABD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CommonUIManager);
  return result;
}

uint64_t sub_10005851C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = &unk_100094BB8;
  v4[1] = &unk_100094BB8;
  v4[2] = &unk_100094BD0;
  v4[3] = &unk_100094BE8;
  v4[4] = &unk_100094C00;
  v4[5] = &unk_100094C00;
  v4[6] = &unk_100094C00;
  v4[7] = &unk_100094C18;
  v4[8] = &unk_100094C18;
  v4[9] = &unk_100094BB8;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WTUIRootViewType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100058610 + 4 * byte_100094B45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100058644 + 4 * byte_100094B40[v4]))();
}

uint64_t sub_100058644(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005864C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100058654);
  return result;
}

uint64_t sub_100058660(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100058668);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10005866C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100058674(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WTUIRootViewType()
{
  return &type metadata for WTUIRootViewType;
}

unint64_t sub_100058694()
{
  unint64_t result;

  result = qword_1000CAEC0;
  if (!qword_1000CAEC0)
  {
    result = swift_getWitnessTable(&unk_100094C84, &type metadata for WTUIRootViewType);
    atomic_store(result, (unint64_t *)&qword_1000CAEC0);
  }
  return result;
}

void sub_1000586E8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 64);
  *(_QWORD *)(v1 + 64) = v2;
  v4 = v2;

}

uint64_t sub_10005871C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_WORD *)(v0 + 32) = 769;
  v1 = swift_unknownObjectWeakInit(v0 + 40, 0);
  swift_unknownObjectWeakInit(v1, 0);
  swift_unknownObjectWeakInit(v0 + 48, 0);
  v2 = swift_unknownObjectWeakInit(v0 + 56, 0);
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_BYTE *)(v0 + 80) = 0;
  ObservationRegistrar.init()(v2);
  return v0;
}

_QWORD *sub_100058784(char a1, uint64_t a2, char a3)
{
  id v4;
  void *v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if ((a1 & 1) != 0)
  {
    sub_100021548(0, &qword_1000CAEC8, UIVisualEffect_ptr);
    v4 = objc_msgSend((id)objc_opt_self(_UIIntelligenceLightSourceDescriptor), "sharedLight");
    v5 = (void *)static UIVisualEffect.intelligenceContentLight(source:activationDirection:deactivationDirection:)();

    v6 = v5;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
    v8 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v7 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v8 >= v7 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
    v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
    specialized Array._endMutation()(v9);

  }
  if ((a3 & 1) != 0)
  {
    v10 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 10);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
    v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v11 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v12 >= v11 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
    specialized Array._endMutation()(v13);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000588F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005891C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005892C(uint64_t a1, uint64_t a2)
{
  return swift_release(*(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_100058934(uint64_t a1)
{
  uint64_t v1;

  return sub_1000583A0(a1, v1);
}

void sub_100058944()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 80) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100058954()
{
  uint64_t v0;

  return swift_unknownObjectWeakAssign(*(_QWORD *)(v0 + 16) + 48);
}

uint64_t sub_100058978()
{
  return sub_10005899C(40);
}

void sub_100058980(char a1)
{
  uint64_t v1;

  sub_100057918(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_10005898C()
{
  uint64_t v0;

  sub_100057DA8(*(void **)(v0 + 16));
}

uint64_t sub_100058994()
{
  return sub_10005899C(32);
}

uint64_t sub_10005899C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  swift_release(*(_QWORD *)(v1 + 24), v3);
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000589D4(int a1)
{
  uint64_t v1;

  return sub_100057E10(a1, *(id *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1000589DC()
{
  uint64_t v0;

  sub_100057A84(*(void **)(v0 + 16));
}

uint64_t sub_1000589E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 16), a2);

  return swift_deallocObject(v2, 40, 7);
}

void sub_100058A10(char a1)
{
  uint64_t v1;

  sub_100057B04(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_100058A1C()
{
  uint64_t v0;

  sub_100057C70(*(void **)(v0 + 16));
}

void sub_100058A4C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 17) = *(_BYTE *)(v0 + 24);
}

void sub_100058A5C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 16) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100058A84()
{
  uint64_t v0;

  return swift_unknownObjectWeakAssign(*(_QWORD *)(v0 + 16) + 40);
}

void sub_100058AA0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 32);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)(v0 + 24);
  *(_BYTE *)(v1 + 32) = v2;
}

void sub_100058AB4()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 33) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100058AC4()
{
  uint64_t v0;

  return swift_unknownObjectWeakAssign(*(_QWORD *)(v0 + 16) + 56);
}

void sub_100058B34()
{
  sub_100058944();
}

void sub_100058B48()
{
  sub_100058A4C();
}

void sub_100058B5C()
{
  sub_100058A5C();
}

void sub_100058B70()
{
  sub_1000586E8();
}

uint64_t *sub_100058B84(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = (uint64_t)v7;
    v8 = a3[6];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v7;
    v12 = sub_100004EAC(&qword_1000C74C8);
    if (swift_getEnumCaseMultiPayload(v10, v12) == 1)
    {
      v13 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
      v14 = 1;
    }
    else
    {
      v16 = *v10;
      *v9 = *v10;
      swift_retain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v12, v14);
    v17 = a3[7];
    v18 = a3[8];
    v19 = (char *)v4 + v17;
    v20 = (char *)a2 + v17;
    v21 = *(_QWORD *)v20;
    LOBYTE(v20) = v20[8];
    *(_QWORD *)v19 = v21;
    v19[8] = (char)v20;
    v22 = (uint64_t *)((char *)v4 + v18);
    v23 = (char *)a2 + v18;
    v24 = *(uint64_t *)((char *)a2 + v18);
    v25 = *(uint64_t *)((char *)a2 + v18 + 8);
    *v22 = v24;
    v22[1] = v25;
    swift_retain(v21);
    swift_retain(v24);
    swift_retain(v25);
    v26 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
    v27 = (char *)v22 + v26;
    v28 = &v23[v26];
    v29 = type metadata accessor for NavigationPath(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
    v30 = a3[9];
    v31 = a3[10];
    v32 = (uint64_t *)((char *)v4 + v30);
    v33 = (uint64_t *)((char *)a2 + v30);
    v34 = *v33;
    v35 = v33[1];
    *v32 = *v33;
    v32[1] = v35;
    v36 = (char *)v4 + v31;
    v37 = (char *)a2 + v31;
    *v36 = *v37;
    v15 = *((_QWORD *)v37 + 1);
    *((_QWORD *)v36 + 1) = v15;
    swift_retain(v34);
    swift_retain(v35);
  }
  swift_retain(v15);
  return v4;
}

uint64_t sub_100058D24(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (_QWORD *)(a1 + a2[6]);
  v5 = sub_100004EAC(&qword_1000C74C8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v7 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
  }
  else
  {
    swift_release(*v4, v6);
  }
  swift_release(*(_QWORD *)(a1 + a2[7]), v8);
  v9 = (_QWORD *)(a1 + a2[8]);
  swift_release(*v9, v10);
  swift_release(v9[1], v11);
  v12 = (char *)v9 + *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v13 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = (_QWORD *)(a1 + a2[9]);
  swift_release(*v14, v15);
  swift_release(v14[1], v16);
  return swift_release(*(_QWORD *)(a1 + a2[10] + 8), v17);
}

_QWORD *sub_100058E1C(_QWORD *a1, _QWORD *a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v6 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = v6;
  v11 = sub_100004EAC(&qword_1000C74C8);
  if (swift_getEnumCaseMultiPayload(v9, v11) == 1)
  {
    v12 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v9, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v9;
    *v8 = *v9;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v11, v13);
  v15 = a3[7];
  v16 = a3[8];
  v17 = (char *)a1 + v15;
  v18 = (char *)a2 + v15;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = v18[8];
  *(_QWORD *)v17 = v19;
  v17[8] = (char)v18;
  v20 = (_QWORD *)((char *)a1 + v16);
  v21 = (char *)a2 + v16;
  v22 = *(_QWORD *)((char *)a2 + v16);
  v23 = *(_QWORD *)((char *)a2 + v16 + 8);
  *v20 = v22;
  v20[1] = v23;
  swift_retain(v19);
  swift_retain(v22);
  swift_retain(v23);
  v24 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v25 = (char *)v20 + v24;
  v26 = &v21[v24];
  v27 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  v28 = a3[9];
  v29 = a3[10];
  v30 = (_QWORD *)((char *)a1 + v28);
  v31 = (_QWORD *)((char *)a2 + v28);
  v32 = *v31;
  v33 = v31[1];
  *v30 = *v31;
  v30[1] = v33;
  v34 = (char *)a1 + v29;
  v35 = (char *)a2 + v29;
  *v34 = *v35;
  v36 = *((_QWORD *)v35 + 1);
  *((_QWORD *)v34 + 1) = v36;
  swift_retain(v32);
  swift_retain(v33);
  swift_retain(v36);
  return a1;
}

_QWORD *sub_100058F94(_QWORD *a1, _QWORD *a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *a1 = *a2;
  v6 = (void *)a1[1];
  v7 = (void *)a2[1];
  a1[1] = v7;
  v8 = v7;

  if (a1 != a2)
  {
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    sub_10000AE2C((uint64_t)a1 + v9, &qword_1000C74C8);
    v12 = sub_100004EAC(&qword_1000C74C8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v15 = *v11;
      *v10 = *v11;
      swift_retain(v15);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
  }
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = v18[8];
  v20 = *(_QWORD *)v17;
  *(_QWORD *)v17 = v19;
  v17[8] = (char)v18;
  swift_retain(v19);
  swift_release(v20, v21);
  v22 = a3[8];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)((char *)a1 + v22);
  v26 = *(_QWORD *)((char *)a2 + v22);
  *(_QWORD *)((char *)a1 + v22) = v26;
  swift_retain(v26);
  swift_release(v25, v27);
  v28 = *((_QWORD *)v24 + 1);
  v29 = *((_QWORD *)v23 + 1);
  *((_QWORD *)v23 + 1) = v28;
  swift_retain(v28);
  swift_release(v29, v30);
  v31 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v32 = &v23[v31];
  v33 = &v24[v31];
  v34 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[9];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = *(_QWORD *)((char *)a2 + v35);
  v39 = *(_QWORD *)((char *)a1 + v35);
  *(_QWORD *)((char *)a1 + v35) = v38;
  swift_retain(v38);
  swift_release(v39, v40);
  v41 = *((_QWORD *)v36 + 1);
  v42 = *((_QWORD *)v37 + 1);
  *((_QWORD *)v36 + 1) = v42;
  swift_retain(v42);
  swift_release(v41, v43);
  v44 = a3[10];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  *v45 = *v46;
  v47 = *((_QWORD *)v45 + 1);
  v48 = *((_QWORD *)v46 + 1);
  *((_QWORD *)v45 + 1) = v48;
  swift_retain(v48);
  swift_release(v47, v49);
  return a1;
}

_QWORD *sub_10005917C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100004EAC(&qword_1000C74C8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for DismissAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[7];
  v13 = a3[8];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = (_QWORD *)((char *)a1 + v13);
  v17 = (char *)a2 + v13;
  v18 = *(_QWORD *)((char *)a2 + v13);
  v19 = *(_QWORD *)((char *)a2 + v13 + 8);
  *v16 = v18;
  v16[1] = v19;
  v20 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v21 = (char *)v16 + v20;
  v22 = &v17[v20];
  v23 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  v24 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v24) = *(_OWORD *)((char *)a2 + v24);
  return a1;
}

_QWORD *sub_1000592AC(_QWORD *a1, _QWORD *a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  *a1 = *a2;
  v6 = (void *)a1[1];
  a1[1] = a2[1];

  if (a1 != a2)
  {
    v8 = a3[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_10000AE2C((uint64_t)a1 + v8, &qword_1000C74C8);
    v11 = sub_100004EAC(&qword_1000C74C8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for DismissAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  v17 = *(_QWORD *)v14;
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  swift_release(v17, v7);
  v18 = a3[8];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *(_QWORD *)((char *)a1 + v18);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  swift_release(v21, v22);
  v23 = *((_QWORD *)v19 + 1);
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  swift_release(v23, v24);
  v25 = *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v26 = &v19[v25];
  v27 = &v20[v25];
  v28 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v26, v27, v28);
  v29 = a3[9];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = *(_QWORD *)((char *)a1 + v29);
  *(_QWORD *)((char *)a1 + v29) = *(_QWORD *)((char *)a2 + v29);
  swift_release(v32, v33);
  v34 = *((_QWORD *)v30 + 1);
  *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
  swift_release(v34, v35);
  v36 = a3[10];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  *v37 = *v38;
  v39 = *((_QWORD *)v37 + 1);
  *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
  swift_release(v39, v40);
  return a1;
}

uint64_t sub_100059464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100059470);
}

uint64_t sub_100059470(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = sub_100004EAC(&qword_1000C9490);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_100004EAC(&qword_1000C9E90);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[9]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_10005951C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100059528);
}

uint64_t sub_100059528(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_100004EAC(&qword_1000C9490);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_100004EAC(&qword_1000C9E90);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[9]) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for QuestionnaireView(uint64_t a1)
{
  return sub_1000469DC(a1, qword_1000CAF28, (uint64_t)&nominal type descriptor for QuestionnaireView);
}

void sub_1000595E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = "\b";
  sub_100032690(319, (unint64_t *)&unk_1000C9500, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = &unk_100094EC0;
    sub_100032690(319, (unint64_t *)&qword_1000C9F00, (uint64_t (*)(uint64_t))&type metadata accessor for NavigationPath, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Binding);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = &unk_100094ED8;
      v6[6] = &unk_100094EF0;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t sub_1000596CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1044, 1);
}

uint64_t sub_1000596DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10000AE2C(a1, (uint64_t *)&unk_1000C87F0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9, v12);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v15 = v14;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_1000C0CC0, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, (char *)&type metadata for () + 8, &unk_1000C8850, v17);
}

uint64_t sub_100059828@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100094F58);
  v9 = v3;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries);
  *a2 = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_1000598C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094F58);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10005DFD8, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v6);
  return swift_bridgeObjectRelease(v2);
}

id sub_100059978@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100059A54(a1, (uint64_t)&unk_100094FF8, &OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__inputContextHistory, a2);
}

void sub_10005998C(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100094FF8);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10005E58C, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v7);

}

id sub_100059A40@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100059A54(a1, (uint64_t)&unk_100095050, &OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration, a2);
}

id sub_100059A54@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v12 = v6;
  v8 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, KeyPath, v8);
  swift_release(KeyPath, v9);
  v10 = *(void **)(v6 + *a3);
  *a4 = v10;
  return v10;
}

void sub_100059AEC(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100095050);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10005E5E4, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v7);

}

uint64_t sub_100059BA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  NSObject *v18;
  uint8_t *v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *a3 = 0x4024000000000000;
  v6 = (int *)type metadata accessor for QuestionnaireView(0);
  v7 = (_QWORD *)((char *)a3 + v6[6]);
  *v7 = swift_getKeyPath(&unk_100095020);
  v8 = sub_100004EAC(&qword_1000C74C8);
  swift_storeEnumTagMultiPayload(v7, v8, 0);
  v9 = (char *)a3 + v6[7];
  v10 = type metadata accessor for CommonUIManager(0);
  v11 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  *(_QWORD *)v9 = Environment.init<A>(_:)(v10, v10, v11);
  v9[8] = v12 & 1;
  v13 = (char *)a3 + v6[10];
  LOBYTE(v29) = 0;
  State.init(wrappedValue:)(&v30, &v29, &type metadata for Bool);
  v14 = v31;
  *v13 = v30;
  *((_QWORD *)v13 + 1) = v14;
  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v15 = type metadata accessor for Logger(0);
  sub_1000063D4(v15, (uint64_t)qword_1000D1BE8);
  v16 = static os_log_type_t.debug.getter();
  v17 = v16;
  v18 = Logger.logObject.getter(v16);
  if (os_log_type_enabled(v18, v17))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v17, "Initialize QuestionnaireOnlyView", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  KeyPath = swift_getKeyPath(&unk_100095050);
  v30 = a1;
  v21 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v30, KeyPath, v21);
  swift_release(KeyPath, v22);
  v23 = *(void **)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration);
  a3[1] = v23;
  v24 = (_QWORD *)((char *)a3 + v6[9]);
  v29 = a1;
  v25 = type metadata accessor for QuestionnaireModel(0);
  v26 = v23;
  State.init(wrappedValue:)(&v30, &v29, v25);
  v27 = v31;
  *v24 = v30;
  v24[1] = v27;
  return sub_10000AC80(a2, (uint64_t)a3 + v6[8], &qword_1000C9E90);
}

uint64_t sub_100059E04()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0x6552207472616D53, 0xEB00000000796C70);
  qword_1000D1D20 = result;
  *(_QWORD *)algn_1000D1D28 = v1;
  byte_1000D1D30 = v2 & 1;
  qword_1000D1D38 = v3;
  return result;
}

uint64_t sub_100059E4C()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0x7473657551206F4ELL, 0xEC000000736E6F69);
  qword_1000D1D40 = result;
  *(_QWORD *)algn_1000D1D48 = v1;
  byte_1000D1D50 = v2 & 1;
  qword_1000D1D58 = v3;
  return result;
}

uint64_t sub_100059E94()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(1701736260, 0xE400000000000000);
  qword_1000D1D60 = result;
  *(_QWORD *)algn_1000D1D68 = v1;
  byte_1000D1D70 = v2 & 1;
  qword_1000D1D78 = v3;
  return result;
}

uint64_t sub_100059ECC()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0x747265766552, 0xE600000000000000);
  qword_1000D1D80 = result;
  *(_QWORD *)algn_1000D1D88 = v1;
  byte_1000D1D90 = v2 & 1;
  qword_1000D1D98 = v3;
  return result;
}

uint64_t sub_100059F08()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0x6C65636E6143, 0xE600000000000000);
  qword_1000D1DA0 = result;
  *(_QWORD *)algn_1000D1DA8 = v1;
  byte_1000D1DB0 = v2 & 1;
  qword_1000D1DB8 = v3;
  return result;
}

uint64_t sub_100059F44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45[2];

  v42 = a1;
  v43 = type metadata accessor for CustomRow(0);
  __chkstk_darwin(v43);
  v2 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for PickerRow(0);
  __chkstk_darwin(v38);
  v37 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100004EAC(&qword_1000CB1C0);
  __chkstk_darwin(v39);
  v41 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004EAC(&qword_1000CB1C8);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100004EAC(&qword_1000CB1D0);
  __chkstk_darwin(v40);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MultichoiceRow(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for QuestionRow(0);
  sub_100004EAC(&qword_1000CB0F8);
  Bindable.wrappedValue.getter(v45);
  v13 = v45[0];
  v14 = sub_10007D3F0();
  swift_release(v13, v15);
  if (v14)
  {
    if (v14 != 1)
    {
      Bindable.wrappedValue.getter(v45);
      v27 = v45[0];
      v28 = type metadata accessor for QuestionnaireEntry(0);
      v29 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
      Bindable<A>.init(wrappedValue:)(v27, v28, v29);
      v30 = v43;
      v31 = &v2[*(int *)(v43 + 20)];
      v44 = 0;
      State.init(wrappedValue:)(v45, &v44, &type metadata for Bool);
      v32 = v45[1];
      *v31 = v45[0];
      *((_QWORD *)v31 + 1) = v32;
      v33 = v41;
      sub_100015184((uint64_t)v2, v41, type metadata accessor for CustomRow);
      swift_storeEnumTagMultiPayload(v33, v39, 1);
      v34 = sub_10005EBF0();
      v35 = sub_100005900(&qword_1000CB1F0, type metadata accessor for CustomRow, (uint64_t)&unk_100096744);
      _ConditionalContent<>.init(storage:)(v33, v40, v30, v34, v35);
      v25 = (uint64_t)v2;
      v26 = type metadata accessor for CustomRow;
      return sub_1000151C8(v25, v26);
    }
    Bindable.wrappedValue.getter(v45);
    v16 = v45[0];
    v17 = type metadata accessor for QuestionnaireEntry(0);
    v18 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
    v12 = v37;
    Bindable<A>.init(wrappedValue:)(v16, v17, v18);
    v19 = type metadata accessor for PickerRow;
    sub_100015184((uint64_t)v12, (uint64_t)v7, type metadata accessor for PickerRow);
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    v20 = sub_100005900(&qword_1000CB1E0, type metadata accessor for MultichoiceRow, (uint64_t)&unk_1000967E4);
  }
  else
  {
    Bindable.wrappedValue.getter(v45);
    sub_100083DE0(v45[0], (uint64_t)v12);
    v19 = type metadata accessor for MultichoiceRow;
    sub_100015184((uint64_t)v12, (uint64_t)v7, type metadata accessor for MultichoiceRow);
    swift_storeEnumTagMultiPayload(v7, v5, 0);
    v20 = sub_100005900(&qword_1000CB1E0, type metadata accessor for MultichoiceRow, (uint64_t)&unk_1000967E4);
  }
  v21 = sub_100005900(&qword_1000CB1E8, type metadata accessor for PickerRow, (uint64_t)&unk_100096794);
  _ConditionalContent<>.init(storage:)(v7, v10, v38, v20, v21);
  v22 = v41;
  sub_10000AD78((uint64_t)v9, v41, &qword_1000CB1D0);
  swift_storeEnumTagMultiPayload(v22, v39, 0);
  v23 = sub_10005EBF0();
  v24 = sub_100005900(&qword_1000CB1F0, type metadata accessor for CustomRow, (uint64_t)&unk_100096744);
  _ConditionalContent<>.init(storage:)(v22, v40, v43, v23, v24);
  sub_10000AE2C((uint64_t)v9, &qword_1000CB1D0);
  v25 = (uint64_t)v12;
  v26 = v19;
  return sub_1000151C8(v25, v26);
}

uint64_t sub_10005A404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v3 = sub_100004EAC(&qword_1000CB1B8);
  return sub_100059F44(a2 + *(int *)(v3 + 44));
}

uint64_t sub_10005A44C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  NSObject *v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *a5 = 0x4024000000000000;
  v10 = (int *)type metadata accessor for QuestionnaireView(0);
  v11 = (_QWORD *)((char *)a5 + v10[6]);
  *v11 = swift_getKeyPath(&unk_100095020);
  v12 = sub_100004EAC(&qword_1000C74C8);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  v13 = (char *)a5 + v10[7];
  v14 = type metadata accessor for CommonUIManager(0);
  v15 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  *(_QWORD *)v13 = Environment.init<A>(_:)(v14, v14, v15);
  v13[8] = v16 & 1;
  v17 = (char *)a5 + v10[10];
  LOBYTE(v40) = 0;
  State.init(wrappedValue:)(&v41, &v40, &type metadata for Bool);
  v18 = v42;
  *v17 = v41;
  *((_QWORD *)v17 + 1) = v18;
  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_1000063D4(v19, (uint64_t)qword_1000D1BE8);
  v21 = static os_log_type_t.debug.getter(v20);
  v22 = swift_unknownObjectRetain_n(a1, 2);
  v23 = Logger.logObject.getter(v22);
  if (os_log_type_enabled(v23, v21))
  {
    v39 = a2;
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    *(_DWORD *)v24 = 136315138;
    v41 = v38;
    if (a1)
      v25 = 7562617;
    else
      v25 = 28526;
    if (a1)
      v26 = 0xE300000000000000;
    else
      v26 = 0xE200000000000000;
    v40 = sub_10006DCA8(v25, v26, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v24 + 4, v24 + 12);
    swift_unknownObjectRelease_n(a1, 2);
    v27 = v26;
    a2 = v39;
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v23, v21, "Initialize QuestionnaireView with delegate: %s", v24, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n(a1, 2);
  }
  a5[1] = a2;
  v28 = type metadata accessor for QuestionnaireModel(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = a2;
  swift_unknownObjectRetain(a1, v30);
  v31 = v29;
  v32 = a3;
  sub_100016AA4(v31, a1, v32);
  v33 = (_QWORD *)((char *)a5 + v10[9]);
  v40 = v34;
  State.init(wrappedValue:)(&v41, &v40, v28);

  v35 = v41;
  v36 = v42;
  swift_unknownObjectRelease(a1);

  *v33 = v35;
  v33[1] = v36;
  return sub_10000AC80(a4, (uint64_t)a5 + v10[8], &qword_1000C9E90);
}

uint64_t sub_10005A7A4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_1000063D4(v0, (uint64_t)qword_1000D1BE8);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Questionnaire done", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  type metadata accessor for QuestionnaireView(0);
  v5 = sub_100004EAC(&qword_1000CAFE8);
  State.wrappedValue.getter(&v9, v5);
  v6 = v9;
  sub_100020B5C();
  return swift_release(v6, v7);
}

uint64_t sub_10005A8BC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_1000063D4(v0, (uint64_t)qword_1000D1BE8);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Questionnaire cancelled, requesting revert and dismissal...", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  type metadata accessor for QuestionnaireView(0);
  v5 = sub_100004EAC(&qword_1000CAFE8);
  State.wrappedValue.getter(&v11, v5);
  v6 = v11;
  sub_100018A90();
  swift_release(v6, v7);
  State.wrappedValue.getter(&v11, v5);
  v8 = v11;
  sub_100020B5C();
  return swift_release(v8, v9);
}

void sub_10005A9FC()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  unint64_t v27;
  int64x2_t v28;
  int8x16_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t *v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;

  v1 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v2 = objc_msgSend(v1, "userInterfaceIdiom");

  if (v2 != (id)1)
    return;
  v36[1] = *(_QWORD *)(v0 + *(int *)(type metadata accessor for QuestionnaireView(0) + 36) + 8);
  v3 = sub_100004EAC(&qword_1000CAFE8);
  State.wrappedValue.getter(&v37, v3);
  v4 = v37;
  KeyPath = swift_getKeyPath(&unk_100094F58);
  v36[0] = v4;
  v6 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v36, KeyPath, v6);
  swift_release(KeyPath, v7);
  v8 = *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries);
  swift_bridgeObjectRetain(v8);
  swift_release(v4, v9);
  if (!v8)
  {
    v22 = 0;
    goto LABEL_28;
  }
  v10 = v8 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)v8 >> 62)
    goto LABEL_32;
  v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
    goto LABEL_36;
LABEL_5:
  v36[0] = _swiftEmptyArrayStorage;
  sub_10005DB70(0, v11 & ~(v11 >> 63), 0);
  if (v11 < 0)
    goto LABEL_38;
  v12 = 0;
  v13 = (_QWORD *)v36[0];
  do
  {
    if (v11 == v12)
    {
      __break(1u);
      while (1)
      {
        __break(1u);
LABEL_32:
        if (v8 >= 0)
          v35 = v10;
        else
          v35 = v8;
        swift_bridgeObjectRetain(v8);
        v11 = _CocoaArrayWrapper.endIndex.getter(v35);
        swift_bridgeObjectRelease(v8);
        if (v11)
          goto LABEL_5;
LABEL_36:
        swift_bridgeObjectRelease(v8);
        v13 = _swiftEmptyArrayStorage;
        v21 = _swiftEmptyArrayStorage[2];
        if (!v21)
          goto LABEL_37;
LABEL_16:
        v22 = v13[4];
        v23 = v21 - 1;
        if (v21 != 1)
        {
          if (v21 >= 5)
          {
            v24 = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
            v25 = vdupq_n_s64(v22);
            v26 = (int64x2_t *)(v13 + 7);
            v27 = v23 & 0xFFFFFFFFFFFFFFFCLL;
            v28 = v25;
            do
            {
              v25 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v25, v26[-1]), (int8x16_t)v25, (int8x16_t)v26[-1]);
              v28 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v28, *v26), (int8x16_t)v28, *(int8x16_t *)v26);
              v26 += 2;
              v27 -= 4;
            }
            while (v27);
            v29 = vbslq_s8((int8x16_t)vcgtq_s64(v25, v28), (int8x16_t)v25, (int8x16_t)v28);
            v30 = vextq_s8(v29, v29, 8uLL).u64[0];
            v22 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v29.i64[0], v30), *(int8x8_t *)v29.i8, (int8x8_t)v30);
            if (v23 == (v23 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_27;
          }
          else
          {
            v24 = 1;
          }
          v31 = v21 - v24;
          v32 = &v13[v24 + 4];
          do
          {
            v34 = *v32++;
            v33 = v34;
            if (v22 <= v34)
              v22 = v33;
            --v31;
          }
          while (v31);
        }
LABEL_27:
        swift_bridgeObjectRelease(v13);
LABEL_28:
        v10 = v22 + 2;
        if (!__OFADD__(v22, 2))
          return;
      }
    }
    if ((v8 & 0xC000000000000001) != 0)
    {
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v8);
    }
    else
    {
      v14 = *(_QWORD *)(v8 + 8 * v12 + 32);
      swift_retain(v14);
    }
    v15 = objc_msgSend(*(id *)(v14 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_entry), "answerOptions");
    if (!v15)
      goto LABEL_39;
    v16 = v15;
    v17 = objc_msgSend(v15, "count");
    swift_release(v14, v18);

    v36[0] = v13;
    v20 = v13[2];
    v19 = v13[3];
    if (v20 >= v19 >> 1)
    {
      sub_10005DB70(v19 > 1, v20 + 1, 1);
      v13 = (_QWORD *)v36[0];
    }
    ++v12;
    v13[2] = v20 + 1;
    v10 = (uint64_t)&v13[v20];
    *(_QWORD *)(v10 + 32) = v17;
  }
  while (v11 != v12);
  swift_bridgeObjectRelease(v8);
  v21 = v13[2];
  if (v21)
    goto LABEL_16;
LABEL_37:
  swift_bridgeObjectRelease(v13);
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t sub_10005AD64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (**v28)();
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t OpaqueTypeConformance2;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t Strong;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char v86[16];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;

  v85 = a1;
  v82 = sub_100004EAC(&qword_1000C9E90);
  __chkstk_darwin(v82);
  v83 = (char *)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v79 = *(_QWORD *)(v3 - 8);
  v80 = v3;
  __chkstk_darwin(v3);
  v78 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for QuestionnaireView(0);
  v66 = *(_QWORD *)(v81 - 8);
  v5 = *(_QWORD *)(v66 + 64);
  __chkstk_darwin(v81);
  v6 = sub_100004EAC(&qword_1000CAF78);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100004EAC(&qword_1000CAF80);
  __chkstk_darwin(v9);
  v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100004EAC(&qword_1000CAF88);
  v68 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100004EAC(&qword_1000CAF90);
  v74 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v72 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100004EAC(&qword_1000CAF98);
  v71 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v69 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004EAC(&qword_1000CAFA0);
  __chkstk_darwin(v16);
  v77 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100004EAC(&qword_1000CAFA8);
  v18 = __chkstk_darwin(v75);
  v67 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v8 = static Alignment.center.getter(v18);
  v8[1] = v20;
  v21 = sub_100004EAC(&qword_1000CAFB0);
  v87 = v1;
  v22 = static Axis.Set.vertical.getter(v21);
  v23 = sub_100004EAC(&qword_1000C9548);
  v24 = sub_10005D70C();
  ScrollView.init(_:showsIndicators:content:)(v22, 0, sub_10005D704, v86, v23, v24);
  v84 = v1;
  sub_100015184(v1, (uint64_t)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for QuestionnaireView);
  v25 = *(unsigned __int8 *)(v66 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = swift_allocObject(&unk_1000C0BD0, v26 + v5, v25 | 7);
  sub_10005D794((uint64_t)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + v26);
  sub_10000AD78((uint64_t)v8, (uint64_t)v11, &qword_1000CAF78);
  v28 = (uint64_t (**)())&v11[*(int *)(v9 + 36)];
  *v28 = sub_10005D7D8;
  v28[1] = (uint64_t (*)())v27;
  v28[2] = 0;
  v28[3] = 0;
  sub_10000AE2C((uint64_t)v8, &qword_1000CAF78);
  if (qword_1000C7468 != -1)
    swift_once(&qword_1000C7468, sub_100059E04);
  v29 = qword_1000D1D20;
  v30 = *(_QWORD *)algn_1000D1D28;
  v31 = byte_1000D1D30;
  v32 = qword_1000D1D38;
  v33 = sub_10005D804();
  View.navigationTitle(_:)(v29, v30, v31, v32, v9, v33);
  sub_10000AE2C((uint64_t)v11, &qword_1000CAF80);
  v35 = v78;
  v34 = v79;
  v36 = v80;
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v78, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v80);
  v89 = v9;
  v90 = v33;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v89, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v38 = v72;
  v39 = v70;
  View.navigationBarTitleDisplayMode(_:)(v35, v70, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
  v40 = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v13, v39);
  __chkstk_darwin(v40);
  v41 = v84;
  *(&v66 - 2) = v84;
  v42 = sub_100004EAC(&qword_1000CAFD8);
  v89 = v39;
  v90 = OpaqueTypeConformance2;
  v43 = swift_getOpaqueTypeConformance2(&v89, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v44 = sub_10000B254(&qword_1000CAFE0, &qword_1000CAFD8, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v45 = v69;
  v46 = v76;
  View.toolbar<A>(content:)(sub_10005D888, &v66 - 4, v76, v42, v43, v44);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v38, v46);
  v47 = v71;
  v48 = (uint64_t)v77;
  v49 = v73;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v77, v45, v73);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v45, v49);
  v50 = (uint64_t *)(v41 + *(int *)(v81 + 36));
  v52 = *v50;
  v51 = v50[1];
  v89 = v52;
  v90 = v51;
  v53 = sub_100004EAC(&qword_1000CAFE8);
  State.wrappedValue.getter(&v88, v53);
  v54 = v88;
  Strong = swift_unknownObjectWeakLoadStrong(v88 + 16);
  swift_release(v54, v56);
  v57 = (uint64_t)v83;
  Binding.projectedValue.getter(v82);
  v58 = (uint64_t)v67;
  sub_10003FA74(Strong, 1, 0, v57, (uint64_t)&v67[*(int *)(v75 + 36)]);
  v59 = sub_10000AC80(v48, v58, &qword_1000CAFA0);
  v60 = static Alignment.center.getter(v59);
  v62 = v61;
  v63 = v85;
  sub_10000AD78(v58, v85, &qword_1000CAFA8);
  v64 = v63 + *(int *)(sub_100004EAC(&qword_1000CAFF0) + 36);
  *(_WORD *)v64 = 1;
  *(_QWORD *)(v64 + 8) = v60;
  *(_QWORD *)(v64 + 16) = v62;
  return sub_10000AE2C(v58, &qword_1000CAFA8);
}

uint64_t sub_10005B3F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = sub_100004EAC(&qword_1000C9540);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = static HorizontalAlignment.center.getter(v5);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  v8 = sub_100004EAC(&qword_1000CB038);
  sub_10005B4EC(a1, (uint64_t)&v7[*(int *)(v8 + 44)]);
  v10 = static Alignment.center.getter(v9);
  sub_10002D92C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a2, 0.0, 1, 0.0, 1, v10, v11);
  return sub_10000AE2C((uint64_t)v7, &qword_1000C9540);
}

void sub_10005B4EC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  _BYTE v161[175];
  uint64_t v162;

  v149 = a2;
  v139 = sub_100004EAC(&qword_1000CB040);
  __chkstk_darwin(v139);
  v135 = (uint64_t)&v125 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004EAC(&qword_1000CB048);
  v132 = *(_QWORD *)(v4 - 8);
  v133 = v4;
  __chkstk_darwin(v4);
  v131 = (char *)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100004EAC(&qword_1000CB050);
  v6 = __chkstk_darwin(v129);
  v134 = (uint64_t)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v130 = (char *)&v125 - v9;
  __chkstk_darwin(v8);
  v145 = (uint64_t)&v125 - v10;
  v137 = sub_100004EAC(&qword_1000CB058);
  __chkstk_darwin(v137);
  v138 = (uint64_t *)((char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100004EAC(&qword_1000CB060);
  v141 = *(_QWORD *)(v12 - 8);
  v142 = v12;
  __chkstk_darwin(v12);
  v140 = (char *)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100004EAC(&qword_1000CB068);
  __chkstk_darwin(v148);
  v143 = (char *)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100004EAC(&qword_1000CB070);
  __chkstk_darwin(v146);
  v147 = (char *)&v125 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for QuestionnaireView(0);
  v127 = *(_QWORD *)(v16 - 8);
  v17 = *(_QWORD *)(v127 + 64);
  v18 = __chkstk_darwin(v16);
  v128 = (uint64_t)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v125 - v20;
  v144 = (uint64_t *)((char *)a1 + *(int *)(v19 + 36));
  v22 = v144[1];
  *(_QWORD *)v161 = *v144;
  *(_QWORD *)&v161[8] = v22;
  v23 = sub_100004EAC(&qword_1000CAFE8);
  State.wrappedValue.getter(&v150, v23);
  v24 = v150;
  KeyPath = swift_getKeyPath(&unk_100094F80);
  *(_QWORD *)v161 = v24;
  v26 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v161, KeyPath, v26);
  swift_release(KeyPath, v27);
  v28 = *(unsigned __int8 *)(v24 + 72);
  swift_release(v24, v29);
  v136 = a1;
  sub_100015184((uint64_t)a1, (uint64_t)v21, type metadata accessor for QuestionnaireView);
  if (v28 == 1)
  {
    v30 = &v21[*(int *)(v16 + 36)];
    v32 = *(_QWORD *)v30;
    v31 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v161 = v32;
    *(_QWORD *)&v161[8] = v31;
    State.wrappedValue.getter(&v150, v23);
    v33 = v150;
    v34 = swift_getKeyPath(&unk_100094F58);
    *(_QWORD *)v161 = v33;
    v35 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v161, v34, v35);
    swift_release(v34, v36);
    v37 = *(_QWORD *)(v33 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries);
    swift_bridgeObjectRetain(v37);
    swift_release(v33, v38);
    sub_1000151C8((uint64_t)v21, type metadata accessor for QuestionnaireView);
    v39 = swift_bridgeObjectRelease(v37);
    if (!v37)
    {
      v40 = static HorizontalAlignment.center.getter(v39);
      sub_10005C36C(v136, (uint64_t)&v150);
      *(_OWORD *)&v161[71] = v154;
      *(_OWORD *)&v161[55] = v153;
      *(_OWORD *)&v161[119] = v157;
      *(_OWORD *)&v161[135] = v158;
      *(_OWORD *)&v161[151] = v159;
      *(_QWORD *)&v161[167] = v160;
      *(_OWORD *)&v161[87] = v155;
      *(_OWORD *)&v161[103] = v156;
      *(_OWORD *)&v161[7] = v150;
      *(_OWORD *)&v161[23] = v151;
      *(_OWORD *)&v161[39] = v152;
      v41 = *(_OWORD *)&v161[96];
      v42 = v147;
      *(_OWORD *)(v147 + 129) = *(_OWORD *)&v161[112];
      v43 = *(_OWORD *)&v161[144];
      *(_OWORD *)(v42 + 145) = *(_OWORD *)&v161[128];
      *(_OWORD *)(v42 + 161) = v43;
      *((_OWORD *)v42 + 11) = *(_OWORD *)&v161[159];
      v44 = *(_OWORD *)&v161[32];
      *(_OWORD *)(v42 + 65) = *(_OWORD *)&v161[48];
      v45 = *(_OWORD *)&v161[80];
      *(_OWORD *)(v42 + 81) = *(_OWORD *)&v161[64];
      *(_OWORD *)(v42 + 97) = v45;
      *(_OWORD *)(v42 + 113) = v41;
      v46 = *(_OWORD *)&v161[16];
      *(_OWORD *)(v42 + 17) = *(_OWORD *)v161;
      *(_OWORD *)(v42 + 33) = v46;
      LOBYTE(v162) = 1;
      *(_QWORD *)v42 = v40;
      *((_QWORD *)v42 + 1) = 0;
      v42[16] = 1;
      *(_OWORD *)(v42 + 49) = v44;
      swift_storeEnumTagMultiPayload(v42, v146, 0);
      v47 = sub_100004EAC(&qword_1000CB078);
      v48 = sub_10000B254(&qword_1000CB080, &qword_1000CB078, (uint64_t)&protocol conformance descriptor for VStack<A>);
      v49 = sub_10005E238(&qword_1000CB088, &qword_1000CB068, (void (*)(void))sub_10005E29C);
      _ConditionalContent<>.init(storage:)(v42, v47, v148, v48, v49);
      return;
    }
  }
  else
  {
    sub_1000151C8((uint64_t)v21, type metadata accessor for QuestionnaireView);
  }
  v50 = v144[1];
  *(_QWORD *)v161 = *v144;
  *(_QWORD *)&v161[8] = v50;
  State.wrappedValue.getter(&v150, v23);
  v51 = v150;
  v52 = swift_getKeyPath(&unk_100094F58);
  *(_QWORD *)v161 = v51;
  v53 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v161, v52, v53);
  swift_release(v52, v54);
  v55 = *(_QWORD *)(v51 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries);
  swift_bridgeObjectRetain(v55);
  swift_release(v51, v56);
  if (!v55)
  {
    v89 = 1;
    v90 = v148;
    v91 = v146;
    v92 = (uint64_t)v147;
    v83 = (uint64_t)v143;
LABEL_29:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v141 + 56))(v83, v89, 1, v142);
    sub_10000AD78(v83, v92, &qword_1000CB068);
    swift_storeEnumTagMultiPayload(v92, v91, 1);
    v121 = sub_100004EAC(&qword_1000CB078);
    v122 = sub_10000B254(&qword_1000CB080, &qword_1000CB078, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v123 = sub_10005E238(&qword_1000CB088, &qword_1000CB068, (void (*)(void))sub_10005E29C);
    _ConditionalContent<>.init(storage:)(v92, v121, v90, v122, v123);
    sub_10000AE2C(v83, &qword_1000CB068);
    return;
  }
  v125 = v53;
  v126 = v23;
  if (!((unint64_t)v55 >> 62))
  {
    v57 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v58 = (uint64_t)v140;
    if (v57)
      goto LABEL_8;
LABEL_25:
    swift_bridgeObjectRelease(v55);
    if (qword_1000C7470 != -1)
      swift_once(&qword_1000C7470, sub_100059E4C);
    v113 = qword_1000D1D40;
    v114 = qword_1000D1D58;
    swift_bridgeObjectRetain(*(_QWORD *)algn_1000D1D48);
    swift_bridgeObjectRetain(v114);
    v115 = Text.init(_:tableName:bundle:comment:)(v113);
    v116 = v138;
    *v138 = v115;
    v116[1] = v117;
    *((_BYTE *)v116 + 16) = v118 & 1;
    v116[3] = v119;
    swift_storeEnumTagMultiPayload(v116, v137, 0);
    v120 = sub_10000B254(&qword_1000CB098, &qword_1000CB040, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v116, &type metadata for Text, v139, &protocol witness table for Text, v120);
    v92 = (uint64_t)v147;
    v83 = (uint64_t)v143;
    goto LABEL_28;
  }
  if (v55 >= 0)
    v111 = v55 & 0xFFFFFFFFFFFFFF8;
  else
    v111 = v55;
  swift_bridgeObjectRetain(v55);
  v112 = _CocoaArrayWrapper.endIndex.getter(v111);
  swift_bridgeObjectRelease(v55);
  v58 = (uint64_t)v140;
  if (!v112)
    goto LABEL_25;
  swift_bridgeObjectRetain(v55);
  v57 = _CocoaArrayWrapper.endIndex.getter(v111);
  swift_bridgeObjectRelease(v55);
  if (v57 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
LABEL_8:
  *(_QWORD *)v161 = 0;
  *(_QWORD *)&v161[8] = v57;
  v59 = swift_getKeyPath(&unk_100094FE0);
  v60 = v128;
  sub_100015184((uint64_t)v136, v128, type metadata accessor for QuestionnaireView);
  v61 = *(unsigned __int8 *)(v127 + 80);
  v62 = (v61 + 24) & ~v61;
  v63 = swift_allocObject(&unk_1000C0CE8, v62 + v17, v61 | 7);
  *(_QWORD *)(v63 + 16) = v55;
  sub_10005D794(v60, v63 + v62);
  v64 = sub_100004EAC(&qword_1000CB0A0);
  v65 = sub_100004EAC(&qword_1000CB0A8);
  v66 = sub_10005E4B4();
  v67 = sub_10000B254(&qword_1000CB0C0, &qword_1000CB0A8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v68 = v131;
  ForEach<>.init(_:id:content:)(v161, v59, sub_10005E464, v63, v64, v65, v66, &protocol witness table for Int, v67);
  sub_10005A9FC();
  v70 = v69;
  v124 = static Alignment.center.getter(v71);
  v72 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v161, 0, 1, 0, 1, 0, 1, v70, 0, 0, 1, 0, 1, v124, v73);
  v75 = v132;
  v74 = v133;
  v76 = (uint64_t)v130;
  (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v130, v68, v133);
  v77 = (_OWORD *)(v76 + *(int *)(v129 + 36));
  v78 = *(_OWORD *)&v161[80];
  v77[4] = *(_OWORD *)&v161[64];
  v77[5] = v78;
  v77[6] = *(_OWORD *)&v161[96];
  v79 = *(_OWORD *)&v161[16];
  *v77 = *(_OWORD *)v161;
  v77[1] = v79;
  v80 = *(_OWORD *)&v161[48];
  v77[2] = *(_OWORD *)&v161[32];
  v77[3] = v80;
  (*(void (**)(char *, uint64_t))(v75 + 8))(v68, v74);
  sub_10000AC80(v76, v145, &qword_1000CB050);
  v81 = type metadata accessor for FeedbackFeatureFlags(0);
  *((_QWORD *)&v151 + 1) = v81;
  *(_QWORD *)&v152 = sub_100005900(&qword_1000C7870, (uint64_t (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags, (uint64_t)&protocol conformance descriptor for FeedbackFeatureFlags);
  v82 = sub_10000AF68(&v150);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v81 - 8) + 104))(v82, enum case for FeedbackFeatureFlags.CentralizedFeedback(_:), v81);
  LOBYTE(v81) = isFeatureEnabled(_:)(&v150);
  sub_10000AFA4(&v150);
  v83 = (uint64_t)v143;
  if ((v81 & 1) == 0)
  {
    v86 = 0;
    v87 = 0;
    v88 = 0;
    goto LABEL_18;
  }
  v84 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v85 = objc_msgSend(v84, "userInterfaceIdiom");

  if (v85)
  {
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v72 = 1;
LABEL_18:
    v106 = v134;
    sub_10000AD78(v145, v134, &qword_1000CB050);
    v107 = v135;
    sub_10000AD78(v106, v135, &qword_1000CB050);
    v108 = v107 + *(int *)(sub_100004EAC(&qword_1000CB0C8) + 48);
    *(_QWORD *)v108 = 0;
    *(_QWORD *)(v108 + 8) = v86;
    *(_QWORD *)(v108 + 16) = v72;
    *(_OWORD *)(v108 + 24) = 0u;
    *(_OWORD *)(v108 + 40) = 0u;
    *(_OWORD *)(v108 + 56) = 0u;
    *(_OWORD *)(v108 + 72) = 0u;
    *(_QWORD *)(v108 + 88) = 0;
    *(_QWORD *)(v108 + 96) = v87;
    *(_QWORD *)(v108 + 104) = v88;
    *(_QWORD *)(v108 + 112) = 0;
    sub_100015064(0, v86, (void *)v72, 0, 0, 0, 0, 0, 0, 0, 0, 0, v87, v88);
    sub_100015064(0, v86, (void *)v72, 0, 0, 0, 0, 0, 0, 0, 0, 0, v87, v88);
    sub_1000150E8(0, v86, (void *)v72, 0, 0, 0, 0, 0, 0, 0, 0, 0, v87, v88);
    sub_10000AE2C(v106, &qword_1000CB050);
    v109 = v138;
    sub_10000AD78(v107, (uint64_t)v138, &qword_1000CB040);
    swift_storeEnumTagMultiPayload(v109, v137, 1);
    v110 = sub_10000B254(&qword_1000CB098, &qword_1000CB040, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v109, &type metadata for Text, v139, &protocol witness table for Text, v110);
    sub_1000150E8(0, v86, (void *)v72, 0, 0, 0, 0, 0, 0, 0, 0, 0, v87, v88);
    sub_10000AE2C(v107, &qword_1000CB040);
    sub_10000AE2C(v145, &qword_1000CB050);
    v92 = (uint64_t)v147;
LABEL_28:
    sub_10000AC80(v58, v83, &qword_1000CB060);
    v89 = 0;
    v90 = v148;
    v91 = v146;
    goto LABEL_29;
  }
  v93 = v144[1];
  *(_QWORD *)&v150 = *v144;
  *((_QWORD *)&v150 + 1) = v93;
  State.wrappedValue.getter(&v162, v126);
  v94 = v162;
  v95 = swift_getKeyPath(&unk_100094FF8);
  *(_QWORD *)&v150 = v94;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v150, v95, v125);
  swift_release(v95, v96);
  v97 = *(id *)(v94 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__inputContextHistory);
  swift_release(v94, v98);
  v99 = objc_msgSend(v97, "tiInputContextHistory");

  if (v99)
  {
    v100 = objc_msgSend(v99, "threadIdentifier");

    if (v100)
    {
      v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
      v103 = v102;

    }
    else
    {
      v101 = 0;
      v103 = 0;
    }
    v104 = type metadata accessor for SmartReplyAnalytics(0);
    swift_allocObject(v104, *(unsigned int *)(v104 + 48), *(unsigned __int16 *)(v104 + 52));
    v88 = sub_1000527B0(v101, v103);
    sub_10000B04C(0, 0, 0, 255);
    swift_retain(v88);
    swift_bridgeObjectRelease_n(0, 3);
    sub_10000B11C(0, 0, 0, 255);
    swift_release(v88, v105);
    v72 = 0;
    v87 = 65791;
    v86 = 1;
    goto LABEL_18;
  }
  __break(1u);
}

double sub_10005C36C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  double result;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  double v47[3];

  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = static Alignment.center.getter(v8);
  _FrameLayout.init(width:height:alignment:)(&v37, 0, 1, v11, 0, v12, v13);
  v14 = v37;
  v15 = v38;
  v16 = v39;
  v17 = v40;
  v18 = v41;
  v36 = v42;
  v19 = (void *)a1[1];
  if (v19 && (v20 = objc_msgSend(v19, "entryPoint")) != 0)
  {
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

  }
  else
  {
    v26 = String.LocalizationValue.init(stringLiteral:)(0x1000000000000010, 0x80000001000ACAC0);
    static Locale.current.getter(v26);
    v25 = String.init(localized:table:bundle:locale:comment:)(v10, 0, 0, 0, v6, 0, 0, 256);
    v22 = v25;
    v24 = v27;
  }
  v28 = static Alignment.center.getter(v25);
  _FrameLayout.init(width:height:alignment:)(&v43, 0, 1, v11, 0, v28, v29);
  v30 = v43;
  v31 = v44;
  v32 = v45;
  v33 = v46;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v14;
  *(_BYTE *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v16;
  *(_BYTE *)(a2 + 40) = v17;
  v34 = v36;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v34;
  *(_OWORD *)(a2 + 64) = xmmword_100094E60;
  *(_QWORD *)(a2 + 80) = 0x4024000000000000;
  *(_QWORD *)(a2 + 88) = v22;
  *(_QWORD *)(a2 + 96) = v24;
  *(_QWORD *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 112) = 1;
  *(_QWORD *)(a2 + 120) = v30;
  *(_BYTE *)(a2 + 128) = v31;
  *(_QWORD *)(a2 + 136) = v32;
  *(_BYTE *)(a2 + 144) = v33;
  result = v47[0];
  *(_OWORD *)(a2 + 152) = *(_OWORD *)v47;
  return result;
}

uint64_t sub_10005C58C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;

  v7 = *a1;
  *(_QWORD *)a4 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  v8 = sub_100004EAC(&qword_1000CB0D8);
  return sub_10005C5F0(a2, v7, a3, a4 + *(int *)(v8 + 44));
}

uint64_t sub_10005C5F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  unsigned __int8 v76;
  __int128 v77;

  v8 = sub_100004EAC(&qword_1000CB9E0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v49 - v12;
  v14 = type metadata accessor for QuestionnaireView(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for QuestionRow(0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v49 - v21;
  v58 = v11;
  v57 = a4;
  if ((a1 & 0xC000000000000001) == 0)
  {
    if ((a2 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
    {
      a2 = *(_QWORD *)(a1 + 8 * a2 + 32);
      swift_retain(a2);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_16;
  }
  a2 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a1);
LABEL_5:
  *(_OWORD *)v22 = xmmword_100094E70;
  *((_QWORD *)v22 + 2) = 0x403E000000000000;
  v23 = type metadata accessor for QuestionnaireEntry(0);
  v24 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
  v25 = swift_retain(a2);
  Bindable<A>.init(wrappedValue:)(v25, v23, v24);
  if (!((unint64_t)a1 >> 62))
  {
    v26 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_7;
  }
LABEL_16:
  if (a1 < 0)
    v48 = a1;
  else
    v48 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v26 = _CocoaArrayWrapper.endIndex.getter(v48);
  swift_bridgeObjectRelease(a1);
LABEL_7:
  sub_100015184((uint64_t)a3, (uint64_t)v16, type metadata accessor for QuestionnaireView);
  v56 = a2;
  if (v26 != 1)
  {
    v29 = sub_1000151C8((uint64_t)v16, type metadata accessor for QuestionnaireView);
    goto LABEL_11;
  }
  sub_10005A9FC();
  v28 = v27;
  v29 = sub_1000151C8((uint64_t)v16, type metadata accessor for QuestionnaireView);
  if (v28 <= 0.0)
  {
LABEL_11:
    v30 = *a3;
    v31 = static Alignment.center.getter(v29);
    _FrameLayout.init(width:height:alignment:)(&v73, 0, 1, v30, 0, v31, v32);
    v59 = xmmword_100094E80;
    *(_QWORD *)&v60 = v73;
    *((_QWORD *)&v60 + 1) = v74;
    *(_QWORD *)&v61 = v75;
    *((_QWORD *)&v61 + 1) = v76;
    v62 = v77;
    v63 = 1;
    goto LABEL_12;
  }
  v59 = xmmword_100094E80;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0;
LABEL_12:
  v33 = sub_100004EAC(&qword_1000C9958);
  v34 = sub_10003B008();
  _ConditionalContent<>.init(storage:)(&v59, &type metadata for Spacer, v33, &protocol witness table for Spacer, v34);
  v55 = v64;
  v54 = v65;
  v53 = v66;
  v52 = v67;
  v51 = v68;
  v35 = v70;
  v50 = v69;
  v36 = v71;
  v37 = v72;
  v38 = type metadata accessor for Divider(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v13, 1, 1, v38);
  sub_100015184((uint64_t)v22, (uint64_t)v20, type metadata accessor for QuestionRow);
  v39 = (uint64_t)v58;
  sub_10000AD78((uint64_t)v13, (uint64_t)v58, &qword_1000CB9E0);
  v40 = v57;
  sub_100015184((uint64_t)v20, v57, type metadata accessor for QuestionRow);
  v41 = sub_100004EAC(&qword_1000CB0E0);
  v42 = v40 + *(int *)(v41 + 48);
  v43 = v54;
  *(_QWORD *)v42 = v55;
  *(_QWORD *)(v42 + 8) = v43;
  v44 = v52;
  *(_QWORD *)(v42 + 16) = v53;
  *(_QWORD *)(v42 + 24) = v44;
  v45 = v50;
  *(_QWORD *)(v42 + 32) = v51;
  *(_QWORD *)(v42 + 40) = v45;
  *(_QWORD *)(v42 + 48) = v35;
  *(_QWORD *)(v42 + 56) = v36;
  *(_BYTE *)(v42 + 64) = v37;
  sub_10000AD78(v39, v40 + *(int *)(v41 + 64), &qword_1000CB9E0);
  swift_release(v56, v46);
  sub_10000AE2C((uint64_t)v13, &qword_1000CB9E0);
  sub_1000151C8((uint64_t)v22, type metadata accessor for QuestionRow);
  sub_10000AE2C(v39, &qword_1000CB9E0);
  return sub_1000151C8((uint64_t)v20, type metadata accessor for QuestionRow);
}

uint64_t sub_10005CABC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = type metadata accessor for QuestionnaireView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004EAC((uint64_t *)&unk_1000C87F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_100015184(a1, (uint64_t)v5, type metadata accessor for QuestionnaireView);
  v10 = type metadata accessor for MainActor(0);
  v11 = static MainActor.shared.getter(v10);
  v12 = *(unsigned __int8 *)(v3 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(&unk_1000C0C98, v13 + v4, v12 | 7);
  *(_QWORD *)(v14 + 16) = v11;
  *(_QWORD *)(v14 + 24) = &protocol witness table for MainActor;
  sub_10005D794((uint64_t)v5, v14 + v13);
  v15 = sub_1000596DC((uint64_t)v8, (uint64_t)&unk_1000CB028, v14);
  return swift_release(v15, v16);
}

uint64_t sub_10005CBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[7] = v6;
  v4[8] = v7;
  return swift_task_switch(sub_10005CC68, v6, v7);
}

uint64_t sub_10005CC68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000063D4(v1, (uint64_t)qword_1000D1BE8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Questionnaire presented!", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[5];

  v7 = (uint64_t *)(v6 + *(int *)(type metadata accessor for QuestionnaireView(0) + 36));
  v9 = *v7;
  v8 = v7[1];
  v0[2] = v9;
  v0[3] = v8;
  v10 = sub_100004EAC(&qword_1000CAFE8);
  State.wrappedValue.getter(v0 + 4, v10);
  v0[9] = v0[4];
  v11 = (_QWORD *)swift_task_alloc(dword_1000C81DC);
  v0[10] = v11;
  *v11 = v0;
  v11[1] = sub_10004C548;
  return sub_100017468();
}

uint64_t sub_10005CDA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[16];
  uint64_t v31;
  char v32[16];
  uint64_t v33;

  v29 = a2;
  v28 = sub_100004EAC(&qword_1000CAFF8);
  __chkstk_darwin(v28);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100004EAC(&qword_1000CB000);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004EAC(&qword_1000CB008);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.confirmationAction.getter(v13);
  v33 = a1;
  v16 = sub_100004EAC(&qword_1000CB010);
  v17 = sub_10005E238(&qword_1000CB018, &qword_1000CB010, (void (*)(void))sub_100014A20);
  v18 = ToolbarItem<>.init(placement:content:)(v10, sub_10005D890, v32, v16, v17);
  static ToolbarItemPlacement.cancellationAction.getter(v18);
  v31 = a1;
  v19 = sub_100004EAC(&qword_1000C7F38);
  v20 = sub_100014A20();
  ToolbarItem<>.init(placement:content:)(v10, sub_10005D898, v30, v19, v20);
  v21 = v28;
  v22 = &v4[*(int *)(v28 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v4, v15, v11);
  v23 = v22;
  v24 = v27;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v23, v7, v27);
  TupleToolbarContent.init(_:)(v4, v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_10005CFD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = type metadata accessor for QuestionnaireView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_100004EAC(&qword_1000C77B0);
  v48 = *(_QWORD *)(v7 - 8);
  v49 = v7;
  __chkstk_darwin(v7);
  v47 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004EAC(&qword_1000C7F38);
  v50 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v45 = a1;
  v46 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t *)(a1 + *(int *)(v4 + 36));
  v12 = v11[1];
  v51 = *v11;
  v52 = v12;
  v13 = sub_100004EAC(&qword_1000CAFE8);
  State.wrappedValue.getter(&v53, v13);
  v14 = v53;
  KeyPath = swift_getKeyPath(&unk_100094F58);
  v51 = v14;
  v16 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v51, KeyPath, v16);
  swift_release(KeyPath, v17);
  v18 = *(_QWORD *)(v14 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries);
  swift_bridgeObjectRetain(v18);
  swift_release(v14, v19);
  if (v18)
  {
    v43 = v9;
    v44 = a2;
    swift_bridgeObjectRelease(v18);
    if (qword_1000C7478 != -1)
      swift_once(&qword_1000C7478, sub_100059E94);
    v20 = qword_1000D1D60;
    v21 = *(_QWORD *)algn_1000D1D68;
    v22 = byte_1000D1D70;
    v23 = qword_1000D1D78;
    sub_100015184(v45, (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for QuestionnaireView);
    v24 = *(unsigned __int8 *)(v5 + 80);
    v25 = (v24 + 16) & ~v24;
    v26 = swift_allocObject(&unk_1000C0C48, v25 + v6, v24 | 7);
    sub_10005D794((uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v26 + v25);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v23);
    v27 = v47;
    Button<>.init(_:action:)(v20, v21, v22, v23, sub_10005DFF4, v26);
    v28 = v11[1];
    v51 = *v11;
    v52 = v28;
    State.wrappedValue.getter(&v53, v13);
    v29 = v53;
    v30 = swift_getKeyPath(&unk_100094F80);
    v51 = v29;
    v31 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v51, v30, v31);
    swift_release(v30, v32);
    LOBYTE(v30) = *(_BYTE *)(v29 + 72);
    swift_release(v29, v33);
    v34 = swift_getKeyPath(&unk_100094FA8);
    v35 = swift_allocObject(&unk_1000C0C70, 17, 7);
    *(_BYTE *)(v35 + 16) = v30;
    v37 = v48;
    v36 = v49;
    v38 = (uint64_t)v46;
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v46, v27, v49);
    v9 = v43;
    v39 = (uint64_t *)(v38 + *(int *)(v43 + 36));
    *v39 = v34;
    v39[1] = (uint64_t)sub_10005ECB8;
    v39[2] = v35;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v36);
    a2 = v44;
    sub_10000AC80(v38, v44, &qword_1000C7F38);
    v40 = 0;
  }
  else
  {
    v40 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(a2, v40, 1, v9);
}

uint64_t sub_10005D36C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v45 = a2;
  v3 = type metadata accessor for QuestionnaireView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = sub_100004EAC(&qword_1000C77B0);
  v43 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  __chkstk_darwin(v6);
  v42 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100004EAC(&qword_1000C7F38);
  __chkstk_darwin(v41);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t *)(a1 + *(int *)(v3 + 36));
  v11 = v10[1];
  v46 = *v10;
  v47 = v11;
  v40 = sub_100004EAC(&qword_1000CAFE8);
  State.wrappedValue.getter(&v48, v40);
  v12 = v48;
  KeyPath = swift_getKeyPath(&unk_100094F58);
  v46 = v12;
  v14 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v46, KeyPath, v14);
  swift_release(KeyPath, v15);
  v16 = *(_QWORD *)(v12 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__entries);
  swift_bridgeObjectRetain(v16);
  swift_release(v12, v17);
  if (v16)
  {
    swift_bridgeObjectRelease(v16);
    if (qword_1000C7480 != -1)
      swift_once(&qword_1000C7480, sub_100059ECC);
    v18 = &qword_1000D1D80;
  }
  else
  {
    if (qword_1000C7488 != -1)
      swift_once(&qword_1000C7488, sub_100059F08);
    v18 = &qword_1000D1DA0;
  }
  v19 = v18[3];
  v20 = *((unsigned __int8 *)v18 + 16);
  v21 = *v18;
  v22 = v18[1];
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v19);
  sub_100015184(a1, (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for QuestionnaireView);
  v23 = *(unsigned __int8 *)(v4 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = swift_allocObject(&unk_1000C0BF8, v24 + v5, v23 | 7);
  sub_10005D794((uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v24);
  v26 = v42;
  Button<>.init(_:action:)(v21, v22, v20, v19, sub_10005D9E8, v25);
  v27 = v10[1];
  v46 = *v10;
  v47 = v27;
  State.wrappedValue.getter(&v48, v40);
  v28 = v48;
  v29 = swift_getKeyPath(&unk_100094F80);
  v46 = v28;
  v30 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v46, v29, v30);
  swift_release(v29, v31);
  LOBYTE(v29) = *(_BYTE *)(v28 + 72);
  swift_release(v28, v32);
  v33 = swift_getKeyPath(&unk_100094FA8);
  v34 = swift_allocObject(&unk_1000C0C20, 17, 7);
  *(_BYTE *)(v34 + 16) = v29;
  v36 = v43;
  v35 = v44;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v9, v26, v44);
  v37 = (uint64_t *)&v9[*(int *)(v41 + 36)];
  *v37 = v33;
  v37[1] = (uint64_t)sub_10005DB20;
  v37[2] = v34;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v35);
  return sub_10000AC80((uint64_t)v9, v45, &qword_1000C7F38);
}

uint64_t sub_10005D704@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005B3F8(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_10005D70C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CAFB8;
  if (!qword_1000CAFB8)
  {
    v1 = sub_10000ABD0(&qword_1000C9548);
    sub_10000B254(&qword_1000CAFC0, &qword_1000C9540, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CAFB8);
  }
  return result;
}

uint64_t sub_10005D794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for QuestionnaireView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005D7D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for QuestionnaireView(0) - 8) + 80);
  return sub_10005CABC(v0 + ((v1 + 16) & ~v1));
}

unint64_t sub_10005D804()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CAFC8;
  if (!qword_1000CAFC8)
  {
    v1 = sub_10000ABD0(&qword_1000CAF80);
    sub_10000B254(&qword_1000CAFD0, &qword_1000CAF78, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CAFC8);
  }
  return result;
}

uint64_t sub_10005D888@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005CDA4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10005D890@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005CFD4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10005D898@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005D36C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10005D8AC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for QuestionnaireView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;

  v7 = (_QWORD *)(v0 + v4 + v1[6]);
  v8 = sub_100004EAC(&qword_1000C74C8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v10 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
  }
  else
  {
    swift_release(*v7, v9);
  }
  v12 = v3 | 7;
  v13 = v4 + v5;
  swift_release(*(_QWORD *)(v6 + v1[7]), v11);
  v14 = (_QWORD *)(v6 + v1[8]);
  swift_release(*v14, v15);
  swift_release(v14[1], v16);
  v17 = (char *)v14 + *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v18 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = (_QWORD *)(v6 + v1[9]);
  swift_release(*v19, v20);
  swift_release(v19[1], v21);
  swift_release(*(_QWORD *)(v6 + v1[10] + 8), v22);
  return swift_deallocObject(v0, v13, v12);
}

uint64_t sub_10005D9E8()
{
  return sub_10005E000(sub_10005A8BC);
}

uint64_t sub_10005D9FC(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10005DA60;
  return v6(a1);
}

uint64_t sub_10005DA60()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10005DAAC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10005DAD8(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

_BYTE *sub_10005DAFC(_BYTE *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_10005DB10()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_10005DB20(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

uint64_t sub_10005DB38(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10005DB8C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10005DB54(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10005DCF4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10005DB70(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10005DE7C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10005DB8C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004EAC(&qword_1000C80A8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4, v15);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005DCF4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004EAC(&qword_1000CB0E8);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100004EAC(&qword_1000CB0F0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4, a2);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005DE7C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004EAC(&qword_1000CB0D0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4, v15);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005DFD8()
{
  uint64_t v0;

  return sub_100015CBC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10005DFF4()
{
  return sub_10005E000(sub_10005A7A4);
}

uint64_t sub_10005E000(uint64_t (*a1)(void))
{
  type metadata accessor for QuestionnaireView(0);
  return a1();
}

uint64_t sub_10005E03C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005E04C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for QuestionnaireView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;

  v7 = (_QWORD *)(v0 + v4 + v1[6]);
  v8 = sub_100004EAC(&qword_1000C74C8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v10 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
  }
  else
  {
    swift_release(*v7, v9);
  }
  v12 = v3 | 7;
  v13 = v4 + v5;
  swift_release(*(_QWORD *)(v6 + v1[7]), v11);
  v14 = (_QWORD *)(v6 + v1[8]);
  swift_release(*v14, v15);
  swift_release(v14[1], v16);
  v17 = (char *)v14 + *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v18 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = (_QWORD *)(v6 + v1[9]);
  swift_release(*v19, v20);
  swift_release(v19[1], v21);
  swift_release(*(_QWORD *)(v6 + v1[10] + 8), v22);
  return swift_deallocObject(v0, v13, v12);
}

uint64_t sub_10005E190(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for QuestionnaireView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1000CB024);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000070C8;
  return sub_10005CBFC(a1, v5, v6, v7);
}

uint64_t sub_10005E214(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 24), a2);
  return swift_deallocObject(v2, 32, 7);
}

uint64_t sub_10005E238(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000ABD0(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005E29C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB090;
  if (!qword_1000CB090)
  {
    v1 = sub_10000ABD0(&qword_1000CB060);
    sub_10000B254(&qword_1000CB098, &qword_1000CB040, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB090);
  }
  return result;
}

uint64_t sub_10005E320()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for QuestionnaireView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;

  v7 = (_QWORD *)(v0 + v4 + v1[6]);
  v8 = sub_100004EAC(&qword_1000C74C8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v10 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
  }
  else
  {
    swift_release(*v7, v9);
  }
  v12 = v3 | 7;
  v13 = v4 + v5;
  swift_release(*(_QWORD *)(v6 + v1[7]), v11);
  v14 = (_QWORD *)(v6 + v1[8]);
  swift_release(*v14, v15);
  swift_release(v14[1], v16);
  v17 = (char *)v14 + *(int *)(sub_100004EAC(&qword_1000C9E90) + 32);
  v18 = type metadata accessor for NavigationPath(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = (_QWORD *)(v6 + v1[9]);
  swift_release(*v19, v20);
  swift_release(v19[1], v21);
  swift_release(*(_QWORD *)(v6 + v1[10] + 8), v22);
  return swift_deallocObject(v0, v13, v12);
}

uint64_t sub_10005E464@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for QuestionnaireView(0) - 8) + 80);
  return sub_10005C58C(a1, *(_QWORD *)(v2 + 16), (uint64_t *)(v2 + ((v5 + 24) & ~v5)), a2);
}

unint64_t sub_10005E4B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB0B0;
  if (!qword_1000CB0B0)
  {
    v1 = sub_10000ABD0(&qword_1000CB0A0);
    sub_10005E520();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB0B0);
  }
  return result;
}

unint64_t sub_10005E520()
{
  unint64_t result;

  result = qword_1000CB0B8;
  if (!qword_1000CB0B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1000CB0B8);
  }
  return result;
}

id sub_10005E564@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100059A54(a1, (uint64_t)&unk_100094FF8, &OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__inputContextHistory, a2);
}

void sub_10005E58C()
{
  uint64_t v0;

  sub_100015DE0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t type metadata accessor for QuestionRow(uint64_t a1)
{
  return sub_1000469DC(a1, (uint64_t *)&unk_1000CB158, (uint64_t)&nominal type descriptor for QuestionRow);
}

id sub_10005E5BC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100059A54(a1, (uint64_t)&unk_100095050, &OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration, a2);
}

void sub_10005E5E4()
{
  uint64_t v0;

  sub_100015EB0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t *sub_10005E5FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v5 = *(int *)(a3 + 28);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_100004EAC(&qword_1000CB0F8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_10005E690(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 28);
  v3 = sub_100004EAC(&qword_1000CB0F8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_10005E6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *sub_10005E734(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(int *)(a3 + 28);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t sub_10005E7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10005E80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_10005E874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005E880);
}

uint64_t sub_10005E880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 28);
  v5 = sub_100004EAC(&qword_1000CB0F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_10005E8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005E8D0);
}

uint64_t sub_10005E8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 28);
  v6 = sub_100004EAC(&qword_1000CB0F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

void sub_10005E918(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_100032690(319, (unint64_t *)&qword_1000CB168, type metadata accessor for QuestionnaireEntry, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Bindable);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

unint64_t sub_10005E9B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB1A0;
  if (!qword_1000CB1A0)
  {
    v1 = sub_10000ABD0(&qword_1000CAFF0);
    sub_10005EA34();
    sub_10000B254((unint64_t *)&unk_1000CB530, &qword_1000C7EA0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB1A0);
  }
  return result;
}

unint64_t sub_10005EA34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB1A8;
  if (!qword_1000CB1A8)
  {
    v1 = sub_10000ABD0(&qword_1000CAFA8);
    sub_10005EAB8();
    sub_100005900(&qword_1000C7E98, type metadata accessor for PreferredContentSizeModifier, (uint64_t)&unk_100093F08);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB1A8);
  }
  return result;
}

unint64_t sub_10005EAB8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = qword_1000CB1B0;
  if (!qword_1000CB1B0)
  {
    v1 = sub_10000ABD0(&qword_1000CAFA0);
    v2 = sub_10000ABD0(&qword_1000CAF90);
    v3 = sub_10000ABD0(&qword_1000CAFD8);
    v4 = sub_10000ABD0(&qword_1000CAF88);
    v8 = sub_10000ABD0(&qword_1000CAF80);
    v9 = sub_10005D804();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    v8 = v4;
    v9 = OpaqueTypeConformance2;
    v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v7 = sub_10000B254(&qword_1000CAFE0, &qword_1000CAFD8, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v8 = v2;
    v9 = v3;
    v10 = v6;
    v11 = v7;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    sub_1000314C4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB1B0);
  }
  return result;
}

uint64_t sub_10005EBE0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B106C, 1);
}

unint64_t sub_10005EBF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB1D8;
  if (!qword_1000CB1D8)
  {
    v1 = sub_10000ABD0(&qword_1000CB1D0);
    sub_100005900(&qword_1000CB1E0, type metadata accessor for MultichoiceRow, (uint64_t)&unk_1000967E4);
    sub_100005900(&qword_1000CB1E8, type metadata accessor for PickerRow, (uint64_t)&unk_100096794);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB1D8);
  }
  return result;
}

uint64_t sub_10005EC8C()
{
  return sub_10000B254(&qword_1000CB1F8, &qword_1000CB200, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_10005ECBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t KeyPath;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  void (*v97)(uint64_t, char *, uint64_t);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  void (*v108)(char *, char *, uint64_t);
  uint64_t (*v109)(char *, uint64_t);
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[90];
  uint64_t v128;
  uint64_t v129;
  _BYTE v130[704];
  _OWORD v131[3];
  _OWORD v132[3];
  _OWORD v133[3];
  _OWORD v134[3];
  _BYTE v135[704];
  _BYTE v136[704];

  v117 = a4;
  v118 = a2;
  v113 = type metadata accessor for Divider(0);
  v110 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v98 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100004EAC(&qword_1000CBB10);
  v7 = __chkstk_darwin(v106);
  v116 = (uint64_t)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v124 = (uint64_t)&v96 - v10;
  v11 = __chkstk_darwin(v9);
  v120 = (uint64_t)&v96 - v12;
  __chkstk_darwin(v11);
  v126 = (uint64_t)&v96 - v13;
  v121 = sub_100004EAC(&qword_1000C77E0);
  v14 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v16 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004EAC(&qword_1000C77E8);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = v17;
  __chkstk_darwin(v17);
  v119 = (char *)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100004EAC(&qword_1000CB230);
  v21 = __chkstk_darwin(v123);
  v115 = (uint64_t)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v114 = (char *)&v96 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v96 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v96 - v28;
  v125 = (uint64_t)&v96 - v28;
  v30 = (_QWORD *)swift_allocObject(&unk_1000C0E00, 40, 7);
  v99 = a1;
  v100 = a3;
  v30[2] = a1;
  v31 = v118;
  v30[3] = v118;
  v30[4] = a3;
  swift_retain(v31);
  swift_retain(a3);
  swift_retain(a1);
  v32 = sub_100004EAC(&qword_1000C77F8);
  v103 = v32;
  v33 = sub_10000AB6C();
  v101 = v16;
  v102 = v33;
  Button.init(action:label:)(sub_10006195C, v30, sub_100008700, 0, v32, v33);
  LOWORD(v128) = 256;
  v34 = sub_10000B254(&qword_1000C7808, &qword_1000C77E0, (uint64_t)&protocol conformance descriptor for Button<A>);
  v112 = v34;
  v111 = sub_10000AC14();
  v35 = v119;
  v36 = v121;
  View.buttonStyle<A>(_:)(&v128, v121, &type metadata for InputDashboardButtonStyle, v34, v111);
  v109 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  v37 = v109(v16, v36);
  v38 = static Alignment.leading.getter(v37);
  _FrameLayout.init(width:height:alignment:)(v131, 0, 1, 0, 1, v38, v39);
  v108 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v104 = v19;
  v108(v27, v35, v19);
  v40 = &v27[*(int *)(v123 + 36)];
  v122 = v27;
  v41 = v131[1];
  *(_OWORD *)v40 = v131[0];
  *((_OWORD *)v40 + 1) = v41;
  *((_OWORD *)v40 + 2) = v131[2];
  v107 = *(void (**)(char *, uint64_t))(v18 + 8);
  v107(v35, v19);
  v42 = sub_10000AC80((uint64_t)v27, (uint64_t)v29, &qword_1000CB230);
  v43 = v98;
  v44 = Divider.init()(v42);
  v45 = static Alignment.center.getter(v44);
  _FrameLayout.init(width:height:alignment:)(v132, 0, 1, 0x4034000000000000, 0, v45, v46);
  v47 = v110;
  v97 = *(void (**)(uint64_t, char *, uint64_t))(v110 + 16);
  v48 = v120;
  v49 = v113;
  v97(v120, v43, v113);
  v50 = v106;
  v51 = (_OWORD *)(v48 + *(int *)(v106 + 36));
  v52 = v132[1];
  *v51 = v132[0];
  v51[1] = v52;
  v51[2] = v132[2];
  v53 = *(void (**)(char *, uint64_t))(v47 + 8);
  v53(v43, v49);
  v54 = sub_10000AC80(v48, v126, &qword_1000CBB10);
  v110 = static Alignment.center.getter(v54);
  v105 = v55;
  v57 = v99;
  v56 = v100;
  v58 = v118;
  sub_10005F554(v99, v118, v100, v135);
  v59 = memcpy(v136, v135, sizeof(v136));
  v60 = Divider.init()(v59);
  v61 = static Alignment.center.getter(v60);
  _FrameLayout.init(width:height:alignment:)(v133, 0, 1, 0x4034000000000000, 0, v61, v62);
  v63 = v124;
  v97(v124, v43, v49);
  v64 = (_OWORD *)(v63 + *(int *)(v50 + 36));
  v65 = v133[1];
  *v64 = v133[0];
  v64[1] = v65;
  v64[2] = v133[2];
  v53(v43, v49);
  v66 = v63;
  v67 = v63;
  v68 = v48;
  sub_10000AC80(v66, v48, &qword_1000CBB10);
  v69 = (_QWORD *)swift_allocObject(&unk_1000C0E28, 40, 7);
  v69[2] = v57;
  v69[3] = v58;
  v69[4] = v56;
  swift_retain(v57);
  v70 = v58;
  swift_retain(v58);
  swift_retain(v56);
  v71 = v101;
  Button.init(action:label:)(sub_100061204, v69, sub_100060940, 0, v103, v102);
  v128 = v57;
  v129 = v70;
  v72 = sub_100004EAC(&qword_1000CAFE8);
  State.wrappedValue.getter(v127, v72);
  v73 = v127[0];
  KeyPath = swift_getKeyPath(&unk_100095150);
  v128 = v73;
  v75 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v128, KeyPath, v75);
  swift_release(KeyPath, v76);
  LOBYTE(v69) = *(_BYTE *)(v73 + 72);
  swift_release(v73, v77);
  LOBYTE(v128) = (_BYTE)v69;
  BYTE1(v128) = 1;
  v78 = v119;
  v79 = v121;
  View.buttonStyle<A>(_:)(&v128, v121, &type metadata for InputDashboardButtonStyle, v112, v111);
  v80 = v109(v71, v79);
  v81 = static Alignment.trailing.getter(v80);
  _FrameLayout.init(width:height:alignment:)(v134, 0, 1, 0, 1, v81, v82);
  v83 = (uint64_t)v114;
  v84 = v104;
  v108(v114, v78, v104);
  v85 = (_OWORD *)(v83 + *(int *)(v123 + 36));
  v86 = v134[1];
  *v85 = v134[0];
  v85[1] = v86;
  v85[2] = v134[2];
  v107(v78, v84);
  v87 = (uint64_t)v122;
  sub_10000AC80(v83, (uint64_t)v122, &qword_1000CB230);
  sub_10000AD78(v125, v83, &qword_1000CB230);
  sub_10000AD78(v126, v67, &qword_1000CBB10);
  v88 = v116;
  sub_10000AD78(v68, v116, &qword_1000CBB10);
  v89 = v115;
  sub_10000AD78(v87, v115, &qword_1000CB230);
  v90 = v117;
  sub_10000AD78(v83, v117, &qword_1000CB230);
  v91 = (int *)sub_100004EAC(&qword_1000CB238);
  sub_10000AD78(v67, v90 + v91[12], &qword_1000CBB10);
  v92 = (void *)(v90 + v91[16]);
  v93 = v110;
  v94 = v105;
  v127[0] = v110;
  v127[1] = v105;
  memcpy(&v127[2], v136, 0x2C0uLL);
  memcpy(v92, v127, 0x2D0uLL);
  sub_10000AD78(v88, v90 + v91[20], &qword_1000CBB10);
  sub_10000AD78(v89, v90 + v91[24], &qword_1000CB230);
  sub_100061228((uint64_t)v127);
  sub_1000612BC((uint64_t)v135);
  sub_10000AE2C((uint64_t)v122, &qword_1000CB230);
  sub_10000AE2C(v120, &qword_1000CBB10);
  sub_100061350((uint64_t)v135);
  sub_10000AE2C(v126, &qword_1000CBB10);
  sub_10000AE2C(v125, &qword_1000CB230);
  sub_10000AE2C(v89, &qword_1000CB230);
  sub_10000AE2C(v88, &qword_1000CBB10);
  v128 = v93;
  v129 = v94;
  memcpy(v130, v136, sizeof(v130));
  sub_1000613E4((uint64_t)&v128);
  sub_10000AE2C(v124, &qword_1000CBB10);
  return sub_10000AE2C(v83, &qword_1000CB230);
}

_QWORD *sub_10005F554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  _BYTE v85[296];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char v105;
  _BYTE v106[7];
  uint64_t (*v107)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  _QWORD *v108;
  uint64_t v109;
  char v110;
  _BYTE v111[7];
  uint64_t v112;
  char v113;
  _BYTE v114[7];
  uint64_t v115;
  uint64_t v116;
  char v117;
  _BYTE v118[7];
  double v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  _BYTE v124[7];
  char v125;
  _BYTE v126[7];
  double v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  void *v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char *v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  char v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  char v165;
  _BYTE v166[7];
  _BYTE v167[7];
  char v168;
  _BYTE v169[7];
  _BYTE v170[7];
  char v171;
  _BYTE v172[7];
  char v173;
  _BYTE v174[7];
  char v175;
  _OWORD v176[15];
  _OWORD v177[10];
  uint64_t v178;
  _BYTE v179[296];
  _OWORD v180[44];
  _BYTE v181[296];
  _OWORD v182[10];
  uint64_t v183;
  _OWORD v184[16];

  v82 = a2;
  v83 = a3;
  v5 = a1;
  v81 = a1;
  v84 = a4;
  v6 = sub_100004EAC(&qword_1000CA140);
  v7 = __chkstk_darwin(v6);
  v80 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static VerticalAlignment.center.getter(v7);
  sub_10005FE50(v5, a2, (uint64_t)v180);
  v10 = *((_QWORD *)&v180[0] + 1);
  v78 = *(_QWORD *)&v180[1];
  v79 = *(void **)&v180[0];
  v76 = *(_QWORD *)&v180[2];
  v77 = *((_QWORD *)&v180[1] + 1);
  v74 = *(_QWORD *)&v180[3];
  v75 = *((_QWORD *)&v180[2] + 1);
  v11 = *((_QWORD *)&v180[3] + 1);
  v12 = v180[4];
  LOBYTE(v5) = v180[5];
  v13 = *((_QWORD *)&v180[5] + 1);
  v149 = 1;
  v139 = v9;
  v140 = 0;
  v141 = 1;
  v142 = v180[0];
  v143 = v180[1];
  v144 = v180[2];
  v145 = v180[3];
  v146 = v180[4];
  v147 = v180[5];
  v148 = *(_QWORD *)&v180[6];
  v14 = static Alignment.leading.getter();
  sub_10002D984(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v150, 0.0, 1, 0.0, 1, v14, v15);
  v16 = sub_10000B094(v79, v10, v78, v77, v76, v75, v74, v11, v12, *((uint64_t *)&v12 + 1), v5, v13);
  v79 = (void *)static VerticalAlignment.center.getter(v16);
  v17 = LocalizedStringKey.init(stringLiteral:)(0x6552207472616D53, 0xEB00000000796C70);
  v18 = Text.init(_:tableName:bundle:comment:)(v17);
  v20 = v19;
  v22 = v21;
  v24 = v23 & 1;
  v25 = Text.bold()(v18, v19);
  v27 = v26;
  v78 = v28;
  v30 = v29 & 1;
  sub_10000ADF4(v18, v20, v24);
  swift_bridgeObjectRelease(v22);
  v31 = type metadata accessor for Font.Design(0);
  v32 = (uint64_t)v80;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v80, 1, 1, v31);
  v33 = static Font.system(size:weight:design:)(0, 1, v32, 15.0);
  sub_10000AE2C(v32, &qword_1000CA140);
  LOBYTE(v18) = v30;
  v34 = v30;
  v35 = v78;
  v36 = Text.font(_:)(v33, v25, v27, v34, v78);
  v80 = v37;
  LOBYTE(v32) = v38;
  v40 = v39;
  swift_release(v33, v37);
  sub_10000ADF4(v25, v27, v18);
  v41 = swift_bridgeObjectRelease(v35);
  v42 = (uint64_t)v80;
  v132 = v79;
  v133 = 0;
  v134 = 1;
  v135 = v36;
  v136 = v80;
  v137 = v32 & 1;
  v138 = v40;
  v43 = static Alignment.center.getter(v41);
  sub_10002DB38(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v180, 0.0, 1, 0.0, 1, v43, v44);
  sub_10000ADF4(v36, v42, v32 & 1);
  v45 = swift_bridgeObjectRelease(v40);
  v94 = v180[8];
  v95 = v180[9];
  v96 = *(_QWORD *)&v180[10];
  v90 = v180[4];
  v91 = v180[5];
  v92 = v180[6];
  v93 = v180[7];
  v86 = v180[0];
  v87 = v180[1];
  v88 = v180[2];
  v89 = v180[3];
  v80 = (char *)static VerticalAlignment.center.getter(v45);
  v46 = (_QWORD *)swift_allocObject(&unk_1000C0E50, 48, 7);
  v47 = v81;
  v46[2] = v81;
  v48 = v82;
  v49 = v83;
  v46[3] = v82;
  v46[4] = v49;
  v46[5] = 0x4042000000000000;
  swift_retain(v48);
  swift_retain(v49);
  v50 = swift_retain(v47);
  v51 = static Alignment.trailing.getter(v50);
  v53 = _FrameLayout.init(width:height:alignment:)(&v97, 0x4042000000000000, 0, 0, 1, v51, v52);
  LOBYTE(v36) = v98;
  v54 = v99;
  LOBYTE(v25) = v100;
  v55 = v101;
  v82 = v102;
  v83 = v97;
  LOBYTE(v49) = static Edge.Set.trailing.getter(v53);
  v56 = EdgeInsets.init(_all:)(5.0);
  v58 = v57;
  v60 = v59;
  v62 = v61;
  LOBYTE(v35) = static Edge.Set.top.getter(v63);
  v64 = EdgeInsets.init(_all:)(4.0);
  v173 = v36;
  v171 = v25;
  v168 = 0;
  v165 = 0;
  v175 = 1;
  *(_DWORD *)v111 = *(_DWORD *)v172;
  *(_DWORD *)&v111[3] = *(_DWORD *)&v172[3];
  *(_DWORD *)v114 = *(_DWORD *)v170;
  *(_DWORD *)&v114[3] = *(_DWORD *)&v170[3];
  *(_DWORD *)&v118[3] = *(_DWORD *)&v169[3];
  *(_DWORD *)v118 = *(_DWORD *)v169;
  *(_DWORD *)&v124[3] = *(_DWORD *)&v167[3];
  *(_DWORD *)v124 = *(_DWORD *)v167;
  *(_DWORD *)&v126[3] = *(_DWORD *)&v166[3];
  *(_DWORD *)v126 = *(_DWORD *)v166;
  *(_DWORD *)&v106[3] = *(_DWORD *)&v174[3];
  *(_DWORD *)v106 = *(_DWORD *)v174;
  v103 = v80;
  v104 = 0;
  v105 = 1;
  v107 = sub_1000614C0;
  v108 = v46;
  v109 = v83;
  v110 = v36;
  v112 = v54;
  v113 = v25;
  v115 = v55;
  v116 = v82;
  v117 = v49;
  v119 = v56;
  v120 = v58;
  v121 = v60;
  v122 = v62;
  v123 = 0;
  v125 = v35;
  v127 = v64;
  v128 = v65;
  v129 = v66;
  v130 = v67;
  v131 = 0;
  v69 = static Alignment.trailing.getter(v68);
  sub_10002DD30(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v85, 0.0, 1, 0.0, 1, v69, v70);
  swift_release(v46, v71);
  v176[11] = v161;
  v176[12] = v162;
  v176[13] = v163;
  v176[14] = v164;
  v176[8] = v158;
  v176[9] = v159;
  v176[10] = v160;
  v176[4] = v154;
  v176[5] = v155;
  v176[6] = v156;
  v176[7] = v157;
  v176[0] = v150;
  v176[1] = v151;
  v176[2] = v152;
  v176[3] = v153;
  v177[8] = v94;
  v177[9] = v95;
  v178 = v96;
  v177[4] = v90;
  v177[5] = v91;
  v177[6] = v92;
  v177[7] = v93;
  v177[0] = v86;
  v177[1] = v87;
  v177[2] = v88;
  v177[3] = v89;
  memcpy(v179, v85, sizeof(v179));
  v180[12] = v162;
  v180[13] = v163;
  v180[8] = v158;
  v180[9] = v159;
  v180[10] = v160;
  v180[11] = v161;
  v180[4] = v154;
  v180[5] = v155;
  v180[6] = v156;
  v180[7] = v157;
  v180[0] = v150;
  v180[1] = v151;
  v180[2] = v152;
  v180[3] = v153;
  v180[22] = v93;
  v180[23] = v94;
  v180[24] = v95;
  v180[18] = v89;
  v180[19] = v90;
  v180[20] = v91;
  v180[21] = v92;
  v180[14] = v164;
  v180[15] = v86;
  *(_QWORD *)&v180[25] = v96;
  v180[16] = v87;
  v180[17] = v88;
  memcpy((char *)&v180[25] + 8, v85, 0x128uLL);
  memcpy(v84, v180, 0x2C0uLL);
  memcpy(v181, v85, sizeof(v181));
  sub_100061570(v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000AFC4);
  sub_1000614D0((uint64_t)v177);
  sub_100034A7C((uint64_t)v179);
  sub_10006150C((uint64_t)v181, v72);
  v182[7] = v93;
  v182[8] = v94;
  v182[9] = v95;
  v182[3] = v89;
  v182[4] = v90;
  v182[5] = v91;
  v182[6] = v92;
  v182[0] = v86;
  v182[1] = v87;
  v183 = v96;
  v182[2] = v88;
  sub_100061534((uint64_t)v182);
  v184[11] = v161;
  v184[12] = v162;
  v184[13] = v163;
  v184[14] = v164;
  v184[7] = v157;
  v184[8] = v158;
  v184[9] = v159;
  v184[10] = v160;
  v184[3] = v153;
  v184[4] = v154;
  v184[5] = v155;
  v184[6] = v156;
  v184[0] = v150;
  v184[1] = v151;
  v184[2] = v152;
  return sub_100061570(v184, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10000B094);
}

void sub_10005FE50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for FeedbackFeatureFlags(0);
  v33 = v6;
  v34 = sub_100005900(&qword_1000C7870, (uint64_t (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags, (uint64_t)&protocol conformance descriptor for FeedbackFeatureFlags);
  v7 = sub_10000AF68(&v31);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v7, enum case for FeedbackFeatureFlags.CentralizedFeedback(_:), v6);
  LOBYTE(v6) = isFeatureEnabled(_:)(&v31);
  sub_10000AFA4(&v31);
  if ((v6 & 1) == 0)
  {
    v26 = 0;
    v27 = 0;
    v28 = 1;
LABEL_11:
    *(_QWORD *)a3 = v28;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 80) = v26;
    *(_QWORD *)(a3 + 88) = v27;
    *(_QWORD *)(a3 + 96) = 0;
    return;
  }
  v31 = a1;
  v32 = a2;
  v8 = sub_100004EAC(&qword_1000CAFE8);
  State.wrappedValue.getter(&v30, v8);
  v9 = v30;
  KeyPath = swift_getKeyPath(&unk_1000951F8);
  v31 = v9;
  v11 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v31, KeyPath, v11);
  swift_release(KeyPath, v12);
  v13 = *(id *)(v9 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__smartReplyConfiguration);
  swift_release(v9, v14);
  v15 = objc_msgSend(v13, "baseResponse");

  if (v15)
  v31 = a1;
  v32 = a2;
  State.wrappedValue.getter(&v30, v8);
  v16 = v30;
  v17 = swift_getKeyPath(&unk_100095220);
  v31 = v16;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v31, v17, v11);
  swift_release(v17, v18);
  v19 = *(id *)(v16 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__inputContextHistory);
  swift_release(v16, v20);
  v21 = objc_msgSend(v19, "tiInputContextHistory");

  if (v21)
  {
    v22 = objc_msgSend(v21, "threadIdentifier");

    if (v22)
    {
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v25 = v24;

    }
    else
    {
      v23 = 0;
      v25 = 0;
    }
    v29 = type metadata accessor for SmartReplyAnalytics(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    v27 = sub_1000527B0(v23, v25);
    v28 = 0;
    v26 = 255;
    if (!v15)
      v26 = 511;
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t sub_100060108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t OpaqueTypeConformance2;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65[16];
  uint64_t v66;
  ValueMetadata *v67;
  uint64_t v68;
  uint64_t v69;
  ValueMetadata *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _OWORD v74[3];

  v57 = a4;
  v61 = a1;
  v64 = a5;
  v59 = type metadata accessor for GeometryProxy(0);
  v58 = *(_QWORD *)(v59 - 8);
  v60 = *(_QWORD *)(v58 + 64);
  __chkstk_darwin(v59);
  v56 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004EAC(&qword_1000CB240);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004EAC(&qword_1000CB248);
  __chkstk_darwin(v15);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100004EAC(&qword_1000CB250);
  v63 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v55 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = a2;
  v67 = a3;
  v68 = a4;
  v19 = sub_100004EAC(&qword_1000CB258);
  v20 = sub_1000615D4();
  v21 = Button.init(action:label:)(nullsub_1, 0, sub_1000615C8, v65, v19, v20);
  v22 = static Alignment.center.getter(v21);
  _FrameLayout.init(width:height:alignment:)(v74, *(_QWORD *)&a6, 0, 0, 1, v22, v23);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v14, v11);
  v24 = *(int *)(v15 + 36);
  v54 = v15;
  v25 = &v17[v24];
  v26 = v74[1];
  *(_OWORD *)v25 = v74[0];
  *((_OWORD *)v25 + 1) = v26;
  *((_OWORD *)v25 + 2) = v74[2];
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v69 = a2;
  v70 = a3;
  v27 = sub_100004EAC(&qword_1000CAFE8);
  State.wrappedValue.getter(&v73, v27);
  v28 = v73;
  KeyPath = swift_getKeyPath(&unk_100095178);
  v69 = v28;
  v30 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v69, KeyPath, v30);
  swift_release(KeyPath, v31);
  LOBYTE(v11) = *(_BYTE *)(v28 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__hasEntries);
  swift_release(v28, v32);
  LOBYTE(v69) = (v11 & 1) == 0;
  v33 = sub_1000616CC();
  v34 = sub_100061750();
  View.buttonStyle<A>(_:)(&v69, v15, &type metadata for InputDashboardQuestionnaireButtonStyle, v33, v34);
  sub_10000AE2C((uint64_t)v17, &qword_1000CB248);
  v69 = a2;
  v70 = a3;
  State.wrappedValue.getter(&v73, v27);
  v35 = v73;
  v36 = swift_getKeyPath(&unk_100095178);
  v69 = v35;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v69, v36, v30);
  swift_release(v36, v37);
  LOBYTE(v30) = *(_BYTE *)(v35 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireModel__hasEntries);
  swift_release(v35, v38);
  LOBYTE(v73) = v30;
  v39 = v58;
  v40 = v56;
  v41 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v56, v61, v59);
  v42 = *(unsigned __int8 *)(v39 + 80);
  v43 = (v42 + 16) & ~v42;
  v44 = (v60 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v45 = swift_allocObject(&unk_1000C0E78, v44 + 24, v42 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v45 + v43, v40, v41);
  v46 = (uint64_t *)(v45 + v44);
  *v46 = a2;
  v46[1] = (uint64_t)a3;
  v47 = v57;
  v46[2] = v57;
  swift_retain(a3);
  swift_retain(v47);
  swift_retain(a2);
  v69 = v54;
  v70 = &type metadata for InputDashboardQuestionnaireButtonStyle;
  v71 = v33;
  v72 = v34;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v69, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v49 = v62;
  v50 = v55;
  View.onChange<A>(of:initial:_:)(&v73, 0, sub_10006181C, v45, v62, &type metadata for Bool, OpaqueTypeConformance2, &protocol witness table for Bool);
  swift_release(v45, v51);
  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v50, v49);
}

double sub_1000605C4@<D0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  double result;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  __int128 v21;

  v4 = sub_100004EAC(&qword_1000CA140);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  swift_retain(a1);
  v8 = static Font.system(size:weight:design:)(0, 1, v6, 20.0);
  sub_10000AE2C((uint64_t)v6, &qword_1000CA140);
  KeyPath = swift_getKeyPath(&unk_1000951C8);
  v10 = static Alignment.center.getter(KeyPath);
  _FrameLayout.init(width:height:alignment:)(&v17, 0, 1, 0, 1, v10, v11);
  v12 = v17;
  v13 = v18;
  v14 = v19;
  v15 = v20;
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = KeyPath;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = v14;
  *(_BYTE *)(a2 + 48) = v15;
  result = *(double *)&v21;
  *(_OWORD *)(a2 + 56) = v21;
  return result;
}

uint64_t sub_1000606E8(_BYTE *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _BYTE *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v9 = type metadata accessor for GlobalCoordinateSpace(0);
  v10 = *(_QWORD *)(v9 - 8);
  result = __chkstk_darwin(v9);
  v13 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((*a1 & 1) == 0)
  {
    if (*a2)
    {
      static CoordinateSpaceProtocol<>.global.getter(result);
      v14 = GeometryProxy.frame<A>(in:)(v13, v9, &protocol witness table for GlobalCoordinateSpace);
      v16 = v15;
      v18 = v17;
      v20 = v19;
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
      v29 = *(double *)&a4;
      v30 = a5;
      v21 = sub_100004EAC(&qword_1000CAFE8);
      State.wrappedValue.getter(&v28, v21);
      v22 = v28;
      v29 = v14;
      v30 = v16;
      v31 = v18;
      v32 = v20;
      v33 = 0;
      KeyPath = swift_getKeyPath(&unk_1000951A0);
      __chkstk_darwin(KeyPath);
      *(_QWORD *)&v27[-16] = v22;
      *(_QWORD *)&v27[-8] = &v29;
      v28 = v22;
      v24 = sub_100005900(&qword_1000C8748, type metadata accessor for QuestionnaireModel, (uint64_t)&unk_1000921D8);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v28, KeyPath, sub_10006188C, &v27[-32], (char *)&type metadata for () + 8, v24);
      swift_release(v22, v25);
      return swift_release(KeyPath, v26);
    }
  }
  return result;
}

uint64_t sub_100060898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *Strong;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = sub_100004EAC(&qword_1000CAFE8);
  State.wrappedValue.getter(&v7, v0);
  v1 = v7;
  sub_100020B5C();
  swift_release(v1, v2);
  State.wrappedValue.getter(&v7, v0);
  v3 = v7;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v7 + 16);
  result = swift_release(v3, v5);
  if (Strong)
  {
    objc_msgSend(Strong, "endWritingTools");
    return swift_unknownObjectRelease(Strong);
  }
  return result;
}

void sub_100060940(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = LocalizedStringKey.init(stringLiteral:)(1701736260, 0xE400000000000000);
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = Text.bold()(v3, v4);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  sub_10000ADF4(v3, v5, v9);
  v17 = swift_bridgeObjectRelease(v7);
  LOBYTE(v3) = static Edge.Set.trailing.getter(v17);
  v18 = EdgeInsets.init(_all:)(10.0);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v14 & 1;
  *(_QWORD *)(a1 + 24) = v16;
  *(_BYTE *)(a1 + 32) = v3;
  *(double *)(a1 + 40) = v18;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v20;
  *(_QWORD *)(a1 + 64) = v21;
  *(_BYTE *)(a1 + 72) = 0;
}

uint64_t sub_100060A28(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[5] = a1;
  v2[6] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[7] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[8] = v4;
  v2[9] = v5;
  return swift_task_switch(sub_100060A94, v4, v5);
}

uint64_t sub_100060A94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[6];
  v0[2] = v0[5];
  v0[3] = v1;
  v2 = sub_100004EAC(&qword_1000CAFE8);
  State.wrappedValue.getter(v0 + 4, v2);
  v0[10] = v0[4];
  v3 = (_QWORD *)swift_task_alloc(dword_1000C81DC);
  v0[11] = v3;
  *v3 = v0;
  v3[1] = sub_100060B08;
  return sub_100017468();
}

uint64_t sub_100060B08()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  swift_release(v2, v3);
  return swift_task_switch(sub_100060B5C, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_100060B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 56), a2);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100060B8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v3 = type metadata accessor for TaskPriority(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004EAC(&qword_1000CB208);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v1;
  v12 = v1[1];
  v13 = v1[2];
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v8);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v14 = sub_100004EAC(&qword_1000CB210);
  sub_10005ECBC(v11, v12, v13, (uint64_t)&v10[*(int *)(v14 + 44)]);
  v15 = (_QWORD *)swift_allocObject(&unk_1000C0DD8, 40, 7);
  v15[2] = v11;
  v15[3] = v12;
  v15[4] = v13;
  swift_retain(v12);
  swift_retain(v13);
  v16 = swift_retain(v11);
  static TaskPriority.userInitiated.getter(v16);
  v17 = (char *)(a1 + *(int *)(sub_100004EAC(&qword_1000CB228) + 36));
  v18 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(&v17[*(int *)(v18 + 20)], v6, v3);
  *(_QWORD *)v17 = &unk_1000CB220;
  *((_QWORD *)v17 + 1) = v15;
  sub_10000AD78((uint64_t)v10, a1, &qword_1000CB208);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return sub_10000AE2C((uint64_t)v10, &qword_1000CB208);
}

uint64_t sub_100060D28(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v16 = sub_100004EAC(&qword_1000C7770);
  __chkstk_darwin(v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A880(a1, a2, a3, a4);
  Image.init(systemName:)(0xD000000000000013, 0x80000001000ACAE0);
  v19 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v21(a6, 1, v19) == 1)
    goto LABEL_9;
  if (qword_1000C73F8 != -1)
    swift_once(&qword_1000C73F8, sub_100015C08);
  sub_10000AD78(a6, (uint64_t)v18, &qword_1000C7770);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v21)(v18, 1, v19);
  if ((_DWORD)result != 1)
  {
    swift_beginAccess(&qword_1000D1C80, &v35, 32, 0);
    v23 = qword_1000D1C80;
    if (*(_QWORD *)(qword_1000D1C80 + 16))
    {
      v24 = sub_10001CCB8((uint64_t)v18);
      if ((v25 & 1) != 0)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
        swift_endAccess(&v35);
        v27 = *(void (**)(char *, uint64_t))(v20 + 8);
        swift_retain(v26);
        v27(v18, v19);
        swift_retain(v26);
        v28 = v26;
LABEL_10:
        v36 = v26;
        v32 = type metadata accessor for QuestionnaireModel(0);
        State.init(wrappedValue:)(&v35, &v36, v32);
        swift_release(v28, v33);
        swift_unknownObjectRelease(a5);

        v34 = v35;
        sub_10000AE2C(a6, &qword_1000C7770);
        return v34;
      }
    }
    swift_endAccess(&v35);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
LABEL_9:
    v29 = type metadata accessor for QuestionnaireModel(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    swift_unknownObjectRetain(a5, v30);
    sub_100016AA4(a8, a5, a7);
    v26 = v31;
    v28 = 0;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t destroy for SmartReplyInputDashboardView(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  swift_release(*a1, a2);
  swift_release(a1[1], v3);
  return swift_release(a1[2], v4);
}

uint64_t *_s21WritingToolsUIService28SmartReplyInputDashboardViewVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for SmartReplyInputDashboardView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5, v6);
  v7 = a1[1];
  v8 = a2[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v7, v9);
  v10 = a2[2];
  v11 = a1[2];
  a1[2] = v10;
  swift_retain(v10);
  swift_release(v11, v12);
  return a1;
}

__n128 initializeWithTake for SmartReplyInputDashboardView(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for SmartReplyInputDashboardView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*a1, a2);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4, v5);
  v6 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_release(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SmartReplyInputDashboardView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SmartReplyInputDashboardView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SmartReplyInputDashboardView()
{
  return &type metadata for SmartReplyInputDashboardView;
}

uint64_t sub_10006117C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B10B0, 1);
}

uint64_t sub_10006118C(uint64_t a1, uint64_t a2)
{
  return sub_100061480(40, a2);
}

uint64_t sub_100061194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1000CB21C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000070C8;
  return sub_100060A28(v2, v3);
}

uint64_t sub_1000611F4(uint64_t a1, uint64_t a2)
{
  return sub_100061480(40, a2);
}

uint64_t sub_1000611FC(uint64_t a1, uint64_t a2)
{
  return sub_100061480(40, a2);
}

uint64_t sub_100061204()
{
  return sub_100060898();
}

uint64_t sub_100061228(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 280);
  v3 = *(_QWORD *)(a1 + 288);
  v4 = *(_BYTE *)(a1 + 296);
  v5 = *(_QWORD *)(a1 + 304);
  v6 = *(_QWORD *)(a1 + 456);
  sub_10000AFC4(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_OWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
  sub_10000ADBC(v2, v3, v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t sub_1000612BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 264);
  v3 = *(_QWORD *)(a1 + 272);
  v4 = *(_BYTE *)(a1 + 280);
  v5 = *(_QWORD *)(a1 + 288);
  v6 = *(_QWORD *)(a1 + 440);
  sub_10000AFC4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_OWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
  sub_10000ADBC(v2, v3, v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t sub_100061350(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 264);
  v3 = *(_QWORD *)(a1 + 272);
  v4 = *(_BYTE *)(a1 + 280);
  v5 = *(_QWORD *)(a1 + 288);
  v6 = *(_QWORD *)(a1 + 440);
  sub_10000B094(*(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_OWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
  sub_10000ADF4(v2, v3, v4);
  swift_release(v6, v7);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_1000613E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 280);
  v3 = *(_QWORD *)(a1 + 288);
  v4 = *(_BYTE *)(a1 + 296);
  v5 = *(_QWORD *)(a1 + 304);
  v6 = *(_QWORD *)(a1 + 456);
  sub_10000B094(*(void **)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_OWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
  sub_10000ADF4(v2, v3, v4);
  swift_release(v6, v7);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_100061478(uint64_t a1, uint64_t a2)
{
  return sub_100061480(48, a2);
}

uint64_t sub_100061480(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  swift_release(v2[2], a2);
  swift_release(v2[3], v4);
  swift_release(v2[4], v5);
  return swift_deallocObject(v2, a1, 7);
}

uint64_t sub_1000614C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100060108(a1, *(_QWORD *)(v2 + 16), *(ValueMetadata **)(v2 + 24), *(_QWORD *)(v2 + 32), a2, *(double *)(v2 + 40));
}

uint64_t sub_1000614D0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  sub_10000ADBC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_10006150C(uint64_t a1, uint64_t a2)
{
  swift_release(*(_QWORD *)(a1 + 32), a2);
  return a1;
}

uint64_t sub_100061534(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  sub_10000ADF4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  return a1;
}

_QWORD *sub_100061570(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return a1;
}

double sub_1000615C8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000605C4(*(_QWORD *)(v1 + 32), a1);
}

unint64_t sub_1000615D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB260;
  if (!qword_1000CB260)
  {
    v1 = sub_10000ABD0(&qword_1000CB258);
    sub_100061640();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB260);
  }
  return result;
}

unint64_t sub_100061640()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB268;
  if (!qword_1000CB268)
  {
    v1 = sub_10000ABD0(&qword_1000CB270);
    sub_10000B254(&qword_1000C7E40, &qword_1000CA0D0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB268);
  }
  return result;
}

unint64_t sub_1000616CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB278;
  if (!qword_1000CB278)
  {
    v1 = sub_10000ABD0(&qword_1000CB248);
    sub_10000B254(&qword_1000CB280, &qword_1000CB240, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB278);
  }
  return result;
}

unint64_t sub_100061750()
{
  unint64_t result;

  result = qword_1000CB288;
  if (!qword_1000CB288)
  {
    result = swift_getWitnessTable(&unk_1000941BC, &type metadata for InputDashboardQuestionnaireButtonStyle);
    atomic_store(result, (unint64_t *)&qword_1000CB288);
  }
  return result;
}

uint64_t sub_100061794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for GeometryProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 + 24;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v8 = (_QWORD *)(v0 + v6);
  swift_release(*v8, v9);
  swift_release(v8[1], v10);
  swift_release(v8[2], v11);
  return swift_deallocObject(v0, v7, v5);
}

uint64_t sub_10006181C(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;

  v5 = *(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (uint64_t *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1000606E8(a1, a2, v2 + v6, *v7, v7[1]);
}

void *sub_10006188C()
{
  uint64_t v0;

  return sub_100016304(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1000618C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB290;
  if (!qword_1000CB290)
  {
    v1 = sub_10000ABD0(&qword_1000CB228);
    sub_10000B254(&qword_1000CB298, &qword_1000CB208, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100005900(&qword_1000C78B8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB290);
  }
  return result;
}

uint64_t sub_100061960(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (!a4)
    return ((uint64_t (*)(void))((char *)&loc_1000619AC + 4 * byte_100095250[a1]))();
  if (a4 == 1)
    return LocalizedStringResource.init(stringLiteral:)(0x7469736F706D6F43, 0xEB000000006E6F69);
  if (!(a3 | a2 | a1))
    return LocalizedStringResource.init(stringLiteral:)(0x20676E6974697257, 0xED0000736C6F6F54);
  if (a1 != 1 || a3 | a2)
    return LocalizedStringResource.init(stringLiteral:)(0x6552207472616D53, 0xEB00000000796C70);
  return LocalizedStringResource.init(stringLiteral:)(0x616572666F6F7250, 0xE900000000000064);
}

uint64_t sub_100061A4C()
{
  return LocalizedStringResource.init(stringLiteral:)(0x796C646E65697246, 0xE800000000000000);
}

uint64_t sub_100061A64()
{
  return LocalizedStringResource.init(stringLiteral:)(0x69737365666F7250, 0xEC0000006C616E6FLL);
}

uint64_t sub_100061A84()
{
  return LocalizedStringResource.init(stringLiteral:)(0x7972616D6D7553, 0xE700000000000000);
}

uint64_t sub_100061A9C()
{
  return LocalizedStringResource.init(stringLiteral:)(0x6E696F502079654BLL, 0xEA00000000007374);
}

uint64_t sub_100061AB8()
{
  return LocalizedStringResource.init(stringLiteral:)(1953720652, 0xE400000000000000);
}

uint64_t sub_100061AC8()
{
  return LocalizedStringResource.init(stringLiteral:)(0x656C626154, 0xE500000000000000);
}

id sub_100061ADC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100095368);
  v9 = v3;
  v5 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(void **)(v3 + 24);
  *a2 = v7;
  return v7;
}

void sub_100061B68(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100095368);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000740F4, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v7);

}

uint64_t sub_100061C1C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100095340);
  v12 = v3;
  v5 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 40);
  v9 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  v10 = *(_BYTE *)(v3 + 56);
  *(_BYTE *)(a2 + 24) = v10;
  return sub_10000B04C(v7, v8, v9, v10);
}

uint64_t sub_100061CBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];
  char v12;
  uint64_t v13;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *a2;
  v6 = *(_BYTE *)(a1 + 24);
  KeyPath = swift_getKeyPath(&unk_100095340);
  v11[2] = v5;
  v11[3] = v2;
  v11[4] = v3;
  v11[5] = v4;
  v12 = v6;
  v13 = v5;
  sub_10000B04C(v2, v3, v4, v6);
  v8 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, sub_10006E504, v11, (char *)&type metadata for () + 8, v8);
  sub_10000B11C(v2, v3, v4, v6);
  return swift_release(KeyPath, v9);
}

unint64_t sub_100061DA8(uint64_t a1)
{
  return sub_100061DD0(a1, &qword_1000CB788, &qword_1000CB790);
}

unint64_t sub_100061DBC(uint64_t a1)
{
  return sub_100061DD0(a1, (uint64_t *)&unk_1000CBBF0, &qword_1000C8788);
}

unint64_t sub_100061DD0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t result;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_100004EAC(a2);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v12 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v28 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v28);
    return (unint64_t)v12;
  }
  sub_100004EAC(a3);
  v11 = static _DictionaryStorage.allocate(capacity:)(v10);
  v12 = (_QWORD *)v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    goto LABEL_9;
  v14 = *(int *)(v6 + 48);
  v15 = v11 + 64;
  v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v30 = a1;
  v17 = a1 + v16;
  v18 = *(_QWORD *)(v7 + 72);
  swift_retain(v11);
  while (1)
  {
    sub_10000AD78(v17, (uint64_t)v9, a2);
    result = sub_10001CCB8((uint64_t)v9);
    if ((v20 & 1) != 0)
      break;
    v21 = result;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v22 = v12[6];
    v23 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v21, v9, v23);
    *(_QWORD *)(v12[7] + 8 * v21) = *(_QWORD *)&v9[v14];
    v25 = v12[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_12;
    v12[2] = v27;
    v17 += v18;
    if (!--v13)
    {
      swift_release(v12, v24);
      v28 = v30;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100061F5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_100004EAC((uint64_t *)&unk_1000CBBE0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }
  sub_100004EAC(&qword_1000C8780);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10000AD78(v13, (uint64_t)v5, (uint64_t *)&unk_1000CBBE0);
    result = sub_10001CCB8((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8, v20);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000620F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004EAC(&qword_1000C87B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000AD78(v7, (uint64_t)&v17, &qword_1000CB688);
    v8 = v17;
    v9 = v18;
    result = sub_10001CD50(v17, v18);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100021008(&v19, (_OWORD *)(v4[7] + 32 * result));
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4, v13);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100062224(uint64_t a1)
{
  return sub_100061DD0(a1, (uint64_t *)&unk_1000CB690, &qword_1000C8750);
}

unint64_t sub_100062238(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004EAC((uint64_t *)&unk_1000C8790);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_10001CD50(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4, v12);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100062358(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004EAC(&qword_1000CB798);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_10001CD50(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4, v12);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100062470(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004EAC((uint64_t *)&unk_1000CB7A0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = *(v6 - 1);
    v9 = v7;
    result = sub_10001CDB4(v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v4[6] + v12) = v8;
    *(_QWORD *)(v4[7] + v12) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4, v11);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100062578(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004EAC(&qword_1000CB778);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000AD78(v7, (uint64_t)&v15, &qword_1000CB780);
    v8 = v15;
    result = sub_10001CDB4(v15);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_100021008(&v16, (_OWORD *)(v4[7] + 32 * result));
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4, v11);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000626A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_100004EAC((uint64_t *)&unk_1000CB7D0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }
  sub_100004EAC(&qword_1000C87A8);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10000AD78(v13, (uint64_t)v5, (uint64_t *)&unk_1000CB7D0);
    result = sub_10001CCB8((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_BYTE *)(v8[7] + v17) = v5[v10];
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8, v20);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100062838(uint64_t a1)
{
  return sub_100061DD0(a1, (uint64_t *)&unk_1000CB7C0, (uint64_t *)&unk_1000C87B8);
}

unint64_t sub_10006284C(uint64_t a1)
{
  return sub_100061DD0(a1, (uint64_t *)&unk_1000CB7B0, &qword_1000C87A0);
}

unint64_t sub_100062860(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_100004EAC(&qword_1000C9890);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }
  sub_100004EAC(&qword_1000CB770);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10000AD78(v13, (uint64_t)v5, &qword_1000C9890);
    result = sub_10001CE44((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for FBKSForm.Question(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8, v20);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1000629F4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100062AC4(a1, (uint64_t)&unk_100095390, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__isForEditableContent, a2);
}

uint64_t sub_100062A08(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100095390);
  v8[2] = v3;
  v9 = v2;
  v10 = v3;
  v5 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100074130, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_100062AB0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100062AC4(a1, (uint64_t)&unk_1000953E0, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__wantsInlineEditing, a2);
}

uint64_t sub_100062AC4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v11 = v6;
  v8 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v8);
  result = swift_release(KeyPath, v9);
  *a4 = *(_BYTE *)(v6 + *a3);
  return result;
}

uint64_t sub_100062B5C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000953E0);
  v8[2] = v3;
  v9 = v2;
  v10 = v3;
  v5 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100074108, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_100062C04@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000953B8);
  v8 = v3;
  v5 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  result = swift_release(KeyPath, v6);
  *a2 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__allowedResultOptions);
  return result;
}

uint64_t sub_100062C98(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000953B8);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10007411C, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_100062D3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (!a4)
    return qword_100095A40[(char)a1];
  if (a4 == 1)
    return 10;
  if (a4 == 2 && a1 == 2 && !(a3 | a2))
    return 11;
  return 0;
}

void sub_100062D90(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100062DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = enum case for TextCompositionClient.RewritingType.magic(_:);
  v2 = ((uint64_t (*)(_QWORD))type metadata accessor for TextCompositionClient.RewritingType)(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

#error "100062EB8: call analysis failed (funcsize=22)"

void WritingToolsView.init(writingToolsDelegate:requestedMode:hostAppAuditToken:prompt:smartReplyConfiguration:isForEditableContent:wantsInlineEditing:allowedResultOptions:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, void *a10, char a11, unsigned __int8 a12, char *a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  int *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  void *v55;
  uint64_t v56;
  os_log_type_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  uint64_t KeyPath;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  int v124;
  void *v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  __int128 v140;
  uint64_t v141;

  v133 = a7;
  v134 = a8;
  v135 = a6;
  LODWORD(v130) = a5;
  v128 = a3;
  v129 = a4;
  v127 = a2;
  v15 = type metadata accessor for NavigationPath(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v123 - v20;
  v22 = type metadata accessor for CommonUIManager(0);
  v23 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
  *(_QWORD *)a9 = Environment.init<A>(_:)(v22, v22, v23);
  *(_BYTE *)(a9 + 8) = v24 & 1;
  v25 = (id)(a9 + 16);
  swift_unknownObjectWeakInit(a9 + 16, 0);
  v26 = (int *)type metadata accessor for WritingToolsView(0);
  v27 = (_QWORD *)(a9 + v26[13]);
  NavigationPath.init()(v26);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
  State.init(wrappedValue:)(v27, v19, v15);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  v28 = a9 + v26[14];
  v138 = 0;
  v139 = 0xE000000000000000;
  State.init(wrappedValue:)(&v140, &v138, &type metadata for String);
  v29 = v141;
  *(_OWORD *)v28 = v140;
  *(_QWORD *)(v28 + 16) = v29;
  v30 = a9 + v26[15];
  LOBYTE(v138) = 0;
  State.init(wrappedValue:)(&v140, &v138, &type metadata for Bool);
  v31 = *((_QWORD *)&v140 + 1);
  *(_BYTE *)v30 = v140;
  *(_QWORD *)(v30 + 8) = v31;
  v32 = (_QWORD *)(a9 + v26[16]);
  v33 = type metadata accessor for RewritingModel(0);
  swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  v138 = sub_10002C5F4();
  State.init(wrappedValue:)(&v140, &v138, v33);
  v34 = *((_QWORD *)&v140 + 1);
  *v32 = v140;
  v32[1] = v34;
  v131 = v32;
  v35 = (_QWORD *)(a9 + v26[17]);
  v36 = type metadata accessor for ProofreadingModel(0);
  v37 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  *(_QWORD *)(v37 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session) = 0;
  *(_QWORD *)(v37 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__task) = 0;
  *(_QWORD *)(v37 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v37 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping) = sub_100061DD0((uint64_t)_swiftEmptyArrayStorage, (uint64_t *)&unk_1000CBBF0, &qword_1000C8788);
  *(_QWORD *)(v37 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__expandedSuggestion) = 0;
  v38 = sub_100061F5C((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v37 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates) = v38;
  v39 = (_QWORD *)(v37 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__modelInfoString);
  *v39 = 0;
  v39[1] = 0xE000000000000000;
  *(_BYTE *)(v37 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__showingOriginal) = 0;
  ObservationRegistrar.init()(v38);
  v40 = swift_unknownObjectWeakInit(v37 + 16, 0);
  *(_OWORD *)(v37 + 40) = 0u;
  *(_OWORD *)(v37 + 24) = 0u;
  *(_BYTE *)(v37 + 56) = -1;
  *(_QWORD *)(v37 + 64) = 0;
  *(_BYTE *)(v37 + 72) = 0;
  *(_QWORD *)(v37 + 80) = 0;
  *(_BYTE *)(v37 + 88) = 0;
  *(_QWORD *)(v37 + 96) = 0;
  *(_BYTE *)(v37 + 104) = 0;
  ObservationRegistrar.init()(v40);
  v138 = v37;
  State.init(wrappedValue:)(&v140, &v138, v36);
  v41 = *((_QWORD *)&v140 + 1);
  *v35 = v140;
  v35[1] = v41;
  v132 = v35;
  v42 = a9 + v26[18];
  v138 = 0;
  LOBYTE(v139) = 1;
  v43 = sub_100004EAC(&qword_1000C96F8);
  State.init(wrappedValue:)(&v140, &v138, v43);
  v44 = BYTE8(v140);
  v45 = v141;
  *(_QWORD *)v42 = v140;
  *(_BYTE *)(v42 + 8) = v44;
  *(_QWORD *)(v42 + 16) = v45;
  v46 = a9 + v26[19];
  LOBYTE(v138) = 0;
  State.init(wrappedValue:)(&v140, &v138, &type metadata for Bool);
  v47 = *((_QWORD *)&v140 + 1);
  *(_BYTE *)v46 = v140;
  *(_QWORD *)(v46 + 8) = v47;
  v48 = (_QWORD *)(a9 + v26[20]);
  *v48 = swift_getKeyPath(&unk_1000952E0);
  v49 = sub_100004EAC(&qword_1000C74D0);
  swift_storeEnumTagMultiPayload(v48, v49, 0);
  v50 = (_QWORD *)(a9 + v26[21]);
  *v50 = swift_getKeyPath(&unk_100095310);
  v51 = sub_100004EAC(&qword_1000C74D8);
  swift_storeEnumTagMultiPayload(v50, v51, 0);
  v137 = a1;
  if (a1)
    v52 = 7562617;
  else
    v52 = 28526;
  if (a1)
    v53 = 0xE300000000000000;
  else
    v53 = 0xE200000000000000;
  if (qword_1000C73C8 != -1)
    swift_once(&qword_1000C73C8, sub_10000629C);
  v136 = a13;
  v54 = a12;
  v55 = a10;
  v56 = type metadata accessor for Logger(0);
  sub_1000063D4(v56, (uint64_t)qword_1000D1BE8);
  v57 = static os_log_type_t.debug.getter();
  v58 = swift_bridgeObjectRetain(v53);
  v59 = Logger.logObject.getter(v58);
  if (os_log_type_enabled(v59, v57))
  {
    v124 = a12;
    v60 = swift_slowAlloc(12, -1);
    v126 = (id)(a9 + 16);
    v61 = (uint8_t *)v60;
    v62 = swift_slowAlloc(32, -1);
    v125 = a10;
    v63 = v62;
    *(_QWORD *)&v140 = v62;
    *(_DWORD *)v61 = 136315138;
    swift_bridgeObjectRetain(v53);
    v138 = sub_10006DCA8(v52, v53, (uint64_t *)&v140);
    v54 = v124;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v61 + 4, v61 + 12);
    swift_bridgeObjectRelease_n(v53, 3);
    _os_log_impl((void *)&_mh_execute_header, v59, v57, "Initializing WritingToolsView initializing QuestionnaireView with delegate: %s", v61, 0xCu);
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    v64 = v63;
    v55 = v125;
    swift_slowDealloc(v64, -1, -1);
    v65 = v61;
    v25 = v126;
    swift_slowDealloc(v65, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v53, 2);
  }
  swift_unknownObjectWeakAssign(v25);
  v67 = v127;
  v66 = v128;
  *(_QWORD *)(a9 + 24) = v127;
  *(_QWORD *)(a9 + 32) = v66;
  v68 = v129;
  *(_QWORD *)(a9 + 40) = v129;
  v69 = (char)v130;
  *(_BYTE *)(a9 + 48) = (_BYTE)v130;
  v70 = (void *)v135;
  v71 = v133;
  *(_QWORD *)(a9 + 56) = v135;
  *(_QWORD *)(a9 + 64) = v71;
  *(_QWORD *)(a9 + 72) = v134;
  *(_QWORD *)(a9 + 80) = v55;
  v124 = a11 & 1;
  *(_BYTE *)(a9 + 88) = a11 & 1;
  *(_QWORD *)(a9 + 96) = v136;
  LODWORD(v125) = v54 & 1;
  *(_BYTE *)(a9 + 89) = v54 & 1;
  v72 = v131;
  v73 = v131[1];
  *(_QWORD *)&v140 = *v131;
  *((_QWORD *)&v140 + 1) = v73;
  sub_10000B060(v67, v66, v68, v69);
  v126 = v55;
  v134 = v70;
  v133 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v138, v133);
  v74 = (char *)v138;
  KeyPath = swift_getKeyPath(&unk_100095340);
  __chkstk_darwin(KeyPath);
  *(&v123 - 6) = v74;
  *(&v123 - 5) = (char *)v67;
  *(&v123 - 4) = (char *)v66;
  *(&v123 - 3) = (char *)v68;
  *((_BYTE *)&v123 - 16) = v69;
  *(_QWORD *)&v140 = v74;
  v135 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  v123 = (char *)&type metadata for () + 8;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v140, KeyPath, sub_10006E504, &v123 - 8, (char *)&type metadata for () + 8, v135);
  sub_10000A880(v67, v66, v68, v69);
  swift_release(v74, v76);
  swift_release(KeyPath, v77);
  v78 = v72[1];
  *(_QWORD *)&v140 = *v72;
  *((_QWORD *)&v140 + 1) = v78;
  v79 = v133;
  State.wrappedValue.getter(&v138, v133);
  v80 = v138;
  swift_unknownObjectWeakAssign(v138 + 16);
  swift_release(v80, v81);
  v82 = v72[1];
  *(_QWORD *)&v140 = *v72;
  *((_QWORD *)&v140 + 1) = v82;
  State.wrappedValue.getter(&v138, v79);
  v83 = (char *)v138;
  v84 = swift_getKeyPath(&unk_100095368);
  __chkstk_darwin(v84);
  v85 = v134;
  *(&v123 - 2) = v83;
  *(&v123 - 1) = v85;
  *(_QWORD *)&v140 = v83;
  v86 = v85;
  v130 = v86;
  v87 = v123;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v140, v84, sub_10000A8BC, &v123 - 4, v123, v135);
  swift_release(v83, v88);
  swift_release(v84, v89);

  v90 = v72[1];
  *(_QWORD *)&v140 = *v72;
  *((_QWORD *)&v140 + 1) = v90;
  State.wrappedValue.getter(&v138, v79);
  v91 = (char *)v138;
  v92 = swift_getKeyPath(&unk_100095390);
  __chkstk_darwin(v92);
  *(&v123 - 2) = v91;
  *((_BYTE *)&v123 - 8) = v124;
  *(_QWORD *)&v140 = v91;
  v93 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
  v94 = v87;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v140, v92, sub_10006E548, &v123 - 4, v87, v93);
  swift_release(v91, v95);
  swift_release(v92, v96);
  v97 = v72[1];
  *(_QWORD *)&v140 = *v72;
  *((_QWORD *)&v140 + 1) = v97;
  v98 = v133;
  State.wrappedValue.getter(&v138, v133);
  v99 = (char *)v138;
  v100 = swift_getKeyPath(&unk_1000953B8);
  __chkstk_darwin(v100);
  v101 = v136;
  *(&v123 - 2) = v99;
  *(&v123 - 1) = v101;
  *(_QWORD *)&v140 = v99;
  v102 = v94;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v140, v100, sub_10006E56C, &v123 - 4, v94, v93);
  swift_release(v99, v103);
  swift_release(v100, v104);
  v105 = v72[1];
  *(_QWORD *)&v140 = *v72;
  *((_QWORD *)&v140 + 1) = v105;
  State.wrappedValue.getter(&v138, v98);
  v106 = (char *)v138;
  v107 = swift_getKeyPath(&unk_1000953E0);
  __chkstk_darwin(v107);
  *(&v123 - 2) = v106;
  *((_BYTE *)&v123 - 8) = (_BYTE)v125;
  *(_QWORD *)&v140 = v106;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v140, v107, sub_10006E5AC, &v123 - 4, v102, v93);
  swift_release(v106, v108);
  swift_release(v107, v109);
  v110 = v132;
  v111 = v132[1];
  *(_QWORD *)&v140 = *v132;
  *((_QWORD *)&v140 + 1) = v111;
  v112 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v138, v112);
  v113 = v138;
  v114 = v137;
  swift_unknownObjectWeakAssign(v138 + 16);
  swift_release(v113, v115);
  v116 = v110[1];
  *(_QWORD *)&v140 = *v110;
  *((_QWORD *)&v140 + 1) = v116;
  State.wrappedValue.getter(&v138, v112);
  v117 = (char *)v138;
  v118 = swift_getKeyPath(&unk_100095368);
  __chkstk_darwin(v118);
  v119 = v134;
  *(&v123 - 2) = v117;
  *(&v123 - 1) = v119;
  *(_QWORD *)&v140 = v117;
  v120 = v130;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v140, v118, sub_1000740F4, &v123 - 4, v102, v135);
  swift_release(v117, v121);
  swift_unknownObjectRelease(v114);

  swift_release(v118, v122);
}

uint64_t sub_1000639C4()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_1000639E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for DynamicTypeSize(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.dynamicTypeSize.setter(v4);
}

void CompositionMode.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    if (a3)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(a3);
      String.hash(into:)(a1, a2, a3);
      sub_10000A8A0(a2, a3);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
}

Swift::Int CompositionMode.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if (a2 == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    if (a2)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(a2);
      String.hash(into:)(v5, a1, a2);
      sub_10000A8A0(a1, a2);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
  return Hasher._finalize()();
}

Swift::Int sub_100063B94()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v0;
  v1 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  if (v1 == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v1)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v1);
      String.hash(into:)(v4, v2, v1);
      sub_10000A8A0(v2, v1);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
  return Hasher._finalize()();
}

void sub_100063C34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = v1;
  v4 = v2[1];
  if (v4 == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    v5 = *v2;
    Hasher._combine(_:)(0);
    if (v4)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v4);
      String.hash(into:)(a1, v5, v4);
      sub_10000A8A0(v5, v4);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
}

Swift::Int sub_100063CC4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v3 = *v1;
  v2 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  if (v2 == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v2);
      String.hash(into:)(v5, v3, v2);
      sub_10000A8A0(v3, v2);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
  return Hasher._finalize()();
}

uint64_t sub_100063D60(uint64_t *a1, uint64_t *a2)
{
  return _s21WritingToolsUIService15CompositionModeO21__derived_enum_equalsySbAC_ACtFZ_0(*a1, a1[1], *a2, a2[1]);
}

void Mode.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  Swift::UInt v13;

  if (!a5)
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(a2);
    if (a4)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(a4);
      String.hash(into:)(a1, a3, a4);
      v9 = a2;
      v10 = a3;
      v11 = a4;
      v12 = 0;
      goto LABEL_8;
    }
    goto LABEL_13;
  }
  if (a5 == 1)
  {
    Hasher._combine(_:)(3uLL);
    if (a3 != 1)
    {
      Hasher._combine(_:)(0);
      if (a3)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(a3);
        String.hash(into:)(a1, a2, a3);
        v9 = a2;
        v10 = a3;
        v11 = a4;
        v12 = 1;
LABEL_8:
        sub_10000A880(v9, v10, v11, v12);
        return;
      }
LABEL_13:
      Hasher._combine(_:)(0);
      return;
    }
  }
  else
  {
    if (!(a4 | a3 | a2))
    {
      v13 = 0;
      goto LABEL_16;
    }
    if (a2 != 1 || a4 | a3)
    {
      v13 = 4;
      goto LABEL_16;
    }
  }
  v13 = 1;
LABEL_16:
  Hasher._combine(_:)(v13);
}

Swift::Int Mode.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  Swift::UInt v8;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10, 0);
  if (!a4)
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(a1);
    if (a3)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(a3);
      String.hash(into:)(v10, a2, a3);
      sub_10000A880(a1, a2, a3, 0);
      return Hasher._finalize()();
    }
LABEL_12:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  if (a4 != 1)
  {
    if (!(a3 | a2 | a1))
    {
      v8 = 0;
      goto LABEL_15;
    }
    if (a1 != 1 || a3 | a2)
    {
      v8 = 4;
      goto LABEL_15;
    }
LABEL_11:
    v8 = 1;
LABEL_15:
    Hasher._combine(_:)(v8);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(3uLL);
  if (a2 == 1)
    goto LABEL_11;
  Hasher._combine(_:)(0);
  if (!a2)
    goto LABEL_12;
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v10, a1, a2);
  sub_10000A880(a1, a2, a3, 1);
  return Hasher._finalize()();
}

Swift::Int sub_100063FF4()
{
  uint64_t v0;

  return Mode.hashValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_100064004(uint64_t a1)
{
  uint64_t v1;

  Mode.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

Swift::Int sub_100064014(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  Swift::UInt v6;
  _QWORD v8[9];

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  Hasher.init(_seed:)(v8, a1);
  if (!v5)
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v2);
    if (v4)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v4);
      String.hash(into:)(v8, v3, v4);
      sub_10000A880(v2, v3, v4, 0);
      return Hasher._finalize()();
    }
LABEL_12:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  if (v5 != 1)
  {
    if (!(v4 | v3 | v2))
    {
      v6 = 0;
      goto LABEL_15;
    }
    if (v2 != 1 || v4 | v3)
    {
      v6 = 4;
      goto LABEL_15;
    }
LABEL_11:
    v6 = 1;
LABEL_15:
    Hasher._combine(_:)(v6);
    return Hasher._finalize()();
  }
  Hasher._combine(_:)(3uLL);
  if (v3 == 1)
    goto LABEL_11;
  Hasher._combine(_:)(0);
  if (!v3)
    goto LABEL_12;
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v8, v2, v3);
  sub_10000A880(v2, v3, v4, 1);
  return Hasher._finalize()();
}

BOOL sub_100064168(uint64_t a1, uint64_t a2)
{
  return _s21WritingToolsUIService4ModeO21__derived_enum_equalsySbAC_ACtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t property wrapper backing initializer of WritingToolsView.navigationPath@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = type metadata accessor for NavigationPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  State.init(wrappedValue:)(a2, v7, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

uint64_t property wrapper backing initializer of WritingToolsView.openEndedInstructions(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];
  uint64_t v4;

  v3[0] = a1;
  v3[1] = a2;
  State.init(wrappedValue:)(&v4, v3, &type metadata for String);
  return v4;
}

uint64_t property wrapper backing initializer of WritingToolsView.unifiedIconWidth(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = a1;
  v5 = a2 & 1;
  v2 = sub_100004EAC(&qword_1000C96F8);
  State.init(wrappedValue:)(&v6, &v4, v2);
  return v6;
}

uint64_t sub_1000642B4()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_1000642D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100004EAC((uint64_t *)&unk_1000CB408);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AD78(a1, (uint64_t)v4, (uint64_t *)&unk_1000CB408);
  return EnvironmentValues.horizontalSizeClass.setter(v4);
}

uint64_t WritingToolsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t (**v38)();
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[16];
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  v2 = v1;
  v47 = a1;
  v3 = type metadata accessor for WritingToolsView(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v4;
  __chkstk_darwin(v3);
  v44 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004EAC(&qword_1000C9E90);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100004EAC(&qword_1000CB2B8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100004EAC(&qword_1000CB2C0);
  __chkstk_darwin(v41);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100004EAC(&qword_1000CB2C8);
  __chkstk_darwin(v43);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100004EAC(&qword_1000CB2D0);
  __chkstk_darwin(v42);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004EAC(&qword_1000CB2D8);
  State.projectedValue.getter(v8);
  v49 = v1;
  v19 = sub_100004EAC(&qword_1000CB2E0);
  v20 = sub_10006E5D0();
  NavigationStack.init<>(path:root:)(v8, sub_10006E5C8, v48, v19, v20);
  v21 = v2 + *(int *)(v3 + 76);
  v22 = *(_BYTE *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v50 = v22;
  v51 = v23;
  v24 = sub_100004EAC(&qword_1000C9FA0);
  v25 = State.wrappedValue.getter(&v52, v24);
  LOBYTE(v3) = v52;
  v26 = static Alignment.center.getter(v25);
  v28 = v27;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v12, v9);
  v29 = &v14[*(int *)(v41 + 36)];
  *v29 = 0;
  v29[1] = v3;
  *((_QWORD *)v29 + 1) = v26;
  *((_QWORD *)v29 + 2) = v28;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  KeyPath = swift_getKeyPath(&unk_100095408);
  v31 = v44;
  sub_100015184(v2, v44, type metadata accessor for WritingToolsView);
  v32 = *(unsigned __int8 *)(v45 + 80);
  v33 = (v32 + 16) & ~v32;
  v34 = swift_allocObject(&unk_1000C0EE0, v33 + v46, v32 | 7);
  sub_100046A54(v31, v34 + v33, type metadata accessor for WritingToolsView);
  sub_10000AD78((uint64_t)v14, (uint64_t)v16, &qword_1000CB2C0);
  v35 = (uint64_t *)&v16[*(int *)(v43 + 36)];
  *v35 = KeyPath;
  v35[1] = (uint64_t)sub_10006EC38;
  v35[2] = v34;
  sub_10000AE2C((uint64_t)v14, &qword_1000CB2C0);
  sub_10000AD78((uint64_t)v16, (uint64_t)v18, &qword_1000CB2C8);
  v36 = &v18[*(int *)(v42 + 36)];
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0;
  *((_QWORD *)v36 + 2) = nullsub_1;
  *((_QWORD *)v36 + 3) = 0;
  sub_10000AE2C((uint64_t)v16, &qword_1000CB2C8);
  v37 = v47;
  sub_10000AD78((uint64_t)v18, v47, &qword_1000CB2D0);
  v38 = (uint64_t (**)())(v37 + *(int *)(sub_100004EAC(&qword_1000CB3E8) + 36));
  *v38 = sub_10006B7A8;
  v38[1] = 0;
  v38[2] = 0;
  v38[3] = 0;
  return sub_10000AE2C((uint64_t)v18, &qword_1000CB2D0);
}

uint64_t sub_100064708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t (**v59)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  objc_class *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t (**v106)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (**v114)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t Strong;
  void *v121;
  uint64_t v122;
  void *v123;
  id v124;
  id v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t (**v136)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t (**v207)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;

  v208 = a1;
  v204 = a2;
  v185 = sub_100004EAC(&qword_1000CB7F0);
  __chkstk_darwin(v185);
  v186 = (char *)&v169 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_100004EAC(&qword_1000CB3B0);
  __chkstk_darwin(v203);
  v187 = (uint64_t)&v169 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for QuestionnaireView(0);
  __chkstk_darwin(v4);
  v172 = (uint64_t *)((char *)&v169 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v184 = sub_100004EAC((uint64_t *)&unk_1000CB3C0);
  v6 = __chkstk_darwin(v184);
  v171 = (uint64_t)&v169 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v173 = (char *)&v169 - v8;
  v9 = type metadata accessor for ModelResponseView(0);
  __chkstk_darwin(v9);
  v182 = (char *)&v169 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_100004EAC(&qword_1000CB398);
  __chkstk_darwin(v181);
  v179 = (char *)&v169 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_100004EAC(&qword_1000CB388);
  v12 = __chkstk_darwin(v180);
  v175 = (uint64_t)&v169 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v176 = (uint64_t)&v169 - v14;
  v183 = sub_100004EAC(&qword_1000CB7F8);
  __chkstk_darwin(v183);
  v178 = (char *)&v169 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for RewritingView(0);
  __chkstk_darwin(v16);
  v177 = (char *)&v169 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100004EAC(&qword_1000CB370);
  __chkstk_darwin(v170);
  v18 = sub_100004EAC(&qword_1000CB360);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v169 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v169 - v22;
  v194 = sub_100004EAC(&qword_1000CB350);
  __chkstk_darwin(v194);
  v25 = (char *)&v169 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = sub_100004EAC(&qword_1000CB800);
  __chkstk_darwin(v205);
  v207 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)&v169 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v199 = sub_100004EAC(&qword_1000CB808);
  __chkstk_darwin(v199);
  v201 = (uint64_t)&v169 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = sub_100004EAC((uint64_t *)&unk_1000CB810);
  __chkstk_darwin(v191);
  v192 = (uint64_t)&v169 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_100004EAC(&qword_1000CB308);
  __chkstk_darwin(v200);
  v193 = (char *)&v169 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_100004EAC(&qword_1000CB2F8);
  __chkstk_darwin(v206);
  v202 = (char *)&v169 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = type metadata accessor for TaskPriority(0);
  v189 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v188 = (char *)&v169 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for WritingToolsView(0);
  v196 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v197 = v33;
  v198 = (uint64_t)&v169 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100004EAC(&qword_1000C74C0);
  __chkstk_darwin(v34);
  v36 = (char *)&v169 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100004EAC(&qword_1000C9E90);
  __chkstk_darwin(v37);
  v195 = (uint64_t *)((char *)&v169 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = type metadata accessor for ProofreadingView(0);
  __chkstk_darwin(v39);
  v41 = (char *)&v169 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_100004EAC(&qword_1000CB328);
  __chkstk_darwin(v174);
  v43 = (char *)&v169 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100004EAC(&qword_1000CB318);
  v45 = __chkstk_darwin(v44);
  v46 = __chkstk_darwin(v45);
  v50 = *(_QWORD *)(v49 + 24);
  if (!*(_BYTE *)(v49 + 48))
  {
    v185 = (uint64_t)v21;
    v186 = v23;
    v64 = v181;
    v65 = (uint64_t)v179;
    v187 = v18;
    v66 = *(_BYTE *)(v49 + 89);
    v67 = (uint64_t)v178;
    v68 = v182;
    v169 = v46;
    if ((v66 & 1) != 0)
      __asm { BR              X12 }
    v140 = (uint64_t *)(v49 + *(int *)(v32 + 64));
    v142 = *v140;
    v141 = v140[1];
    v209 = v142;
    v210 = v141;
    v143 = v49;
    v144 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
    State.wrappedValue.getter(&v211, v144);
    v145 = v211;
    sub_100004EAC(&qword_1000CB2D8);
    v146 = v195;
    State.projectedValue.getter(v195);
    sub_10002E620(v145, (uint64_t)v146, v68);
    v147 = v198;
    sub_100015184(v143, v198, type metadata accessor for WritingToolsView);
    v148 = *(unsigned __int8 *)(v196 + 80);
    v149 = (v148 + 16) & ~v148;
    v150 = (uint64_t)v68;
    v151 = swift_allocObject(&unk_1000C1188, v149 + v197, v148 | 7);
    v152 = sub_100046A54(v147, v151 + v149, type metadata accessor for WritingToolsView);
    v153 = v188;
    static TaskPriority.userInitiated.getter(v152);
    v154 = (char *)(v65 + *(int *)(v64 + 36));
    v155 = type metadata accessor for _TaskModifier(0);
    v156 = v189;
    v157 = v190;
    (*(void (**)(char *, char *, uint64_t))(v189 + 16))(&v154[*(int *)(v155 + 20)], v153, v190);
    *(_QWORD *)v154 = &unk_1000CB828;
    *((_QWORD *)v154 + 1) = v151;
    sub_100015184(v150, v65, type metadata accessor for ModelResponseView);
    (*(void (**)(char *, uint64_t))(v156 + 8))(v153, v157);
    sub_1000151C8(v150, type metadata accessor for ModelResponseView);
    v158 = v175;
    sub_10000AD78(v65, v175, &qword_1000CB398);
    sub_10000AE2C(v65, &qword_1000CB398);
    v159 = v176;
    sub_10000AC80(v158, v176, &qword_1000CB388);
    sub_10000AD78(v159, v67, &qword_1000CB388);
    swift_storeEnumTagMultiPayload(v67, v183, 1);
    v160 = sub_10006E8E4();
    v161 = sub_10006E9EC();
    _ConditionalContent<>.init(storage:)(v67, v187, v180, v160, v161);
    sub_10000AE2C(v159, &qword_1000CB388);
    v58 = &qword_1000CB350;
    v162 = v192;
    sub_10000AD78((uint64_t)v25, v192, &qword_1000CB350);
    swift_storeEnumTagMultiPayload(v162, v191, 1);
    v163 = sub_10006E72C();
    v164 = sub_10006E878();
    v165 = (uint64_t)v193;
    _ConditionalContent<>.init(storage:)(v162, v169, v194, v163, v164);
    v166 = v201;
    sub_10000AD78(v165, v201, &qword_1000CB308);
    swift_storeEnumTagMultiPayload(v166, v199, 0);
    v167 = sub_10006E6C0();
    v168 = sub_10006EAF4();
    v135 = (uint64_t)v202;
    _ConditionalContent<>.init(storage:)(v166, v200, v203, v167, v168);
    sub_10000AE2C(v165, &qword_1000CB308);
    v136 = v207;
    sub_10000AD78(v135, (uint64_t)v207, &qword_1000CB2F8);
    swift_storeEnumTagMultiPayload(v136, v205, 0);
    v137 = sub_100004EAC((uint64_t *)&unk_1000CB3D8);
    v138 = sub_10006E654();
    v139 = sub_10000B254(&qword_1000CB3D0, (uint64_t *)&unk_1000CB3D8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    goto LABEL_14;
  }
  if (*(_BYTE *)(v49 + 48) != 1)
  {
    if (!(*(_QWORD *)(v49 + 32) | *(_QWORD *)(v49 + 40) | v50))
    {
      v110 = v198;
      sub_100015184(v49, v198, type metadata accessor for WritingToolsView);
      v111 = *(unsigned __int8 *)(v196 + 80);
      v112 = (v111 + 16) & ~v111;
      v113 = swift_allocObject(&unk_1000C1160, v112 + v197, v111 | 7);
      sub_100046A54(v110, v113 + v112, type metadata accessor for WritingToolsView);
      v114 = v207;
      *v207 = sub_100071EA0;
      v114[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v113;
      swift_storeEnumTagMultiPayload(v114, v205, 1);
      v115 = sub_100004EAC((uint64_t *)&unk_1000CB3D8);
      v116 = sub_10006E654();
      v117 = sub_10000B254(&qword_1000CB3D0, (uint64_t *)&unk_1000CB3D8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
      return _ConditionalContent<>.init(storage:)(v114, v206, v115, v116, v117);
    }
    if (v50 == 1 && *(_OWORD *)(v49 + 32) == 0)
    {
      v69 = (uint64_t *)(v49 + *(int *)(v32 + 68));
      v71 = *v69;
      v70 = v69[1];
      v209 = v71;
      v210 = v70;
      v169 = v46;
      v72 = v49;
      v187 = (uint64_t)&v169 - v47;
      v73 = v48;
      v74 = sub_100004EAC(&qword_1000C9CC0);
      State.wrappedValue.getter(&v211, v74);
      v75 = v211;
      sub_100004EAC(&qword_1000CB2D8);
      v76 = v195;
      State.projectedValue.getter(v195);
      v77 = type metadata accessor for CommonUIManager(0);
      v78 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
      *(_QWORD *)v41 = Environment.init<A>(_:)(v77, v77, v78);
      v41[8] = v79 & 1;
      v80 = type metadata accessor for FBKSEvaluation.Subject(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v36, 1, 1, v80);
      v81 = (objc_class *)type metadata accessor for FBKEvaluationController(0);
      v82 = objc_allocWithZone(v81);
      v211 = FBKEvaluationController.init(subject:)(v36);
      State.init(wrappedValue:)(&v209, &v211, v81);
      v83 = v210;
      *((_QWORD *)v41 + 4) = v209;
      *((_QWORD *)v41 + 5) = v83;
      sub_10000AD78((uint64_t)v76, (uint64_t)&v41[*(int *)(v39 + 28)], &qword_1000C9E90);
      v211 = v75;
      v84 = type metadata accessor for ProofreadingModel(0);
      State.init(wrappedValue:)(&v209, &v211, v84);
      v85 = v209;
      v86 = v210;
      sub_10000AE2C((uint64_t)v76, &qword_1000C9E90);
      *((_QWORD *)v41 + 2) = v85;
      *((_QWORD *)v41 + 3) = v86;
      v87 = v198;
      sub_100015184(v72, v198, type metadata accessor for WritingToolsView);
      v88 = *(unsigned __int8 *)(v196 + 80);
      v89 = (v88 + 16) & ~v88;
      v90 = swift_allocObject(&unk_1000C11D8, v89 + v197, v88 | 7);
      v91 = sub_100046A54(v87, v90 + v89, type metadata accessor for WritingToolsView);
      v92 = v188;
      static TaskPriority.userInitiated.getter(v91);
      v93 = &v43[*(int *)(v174 + 36)];
      v94 = type metadata accessor for _TaskModifier(0);
      v95 = v189;
      v96 = v190;
      (*(void (**)(char *, char *, uint64_t))(v189 + 16))(&v93[*(int *)(v94 + 20)], v92, v190);
      *(_QWORD *)v93 = &unk_1000CB848;
      *((_QWORD *)v93 + 1) = v90;
      sub_100015184((uint64_t)v41, (uint64_t)v43, type metadata accessor for ProofreadingView);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v92, v96);
      sub_1000151C8((uint64_t)v41, type metadata accessor for ProofreadingView);
      sub_10000AD78((uint64_t)v43, v73, &qword_1000CB328);
      sub_10000AE2C((uint64_t)v43, &qword_1000CB328);
      v58 = &qword_1000CB318;
      v97 = v187;
      sub_10000AC80(v73, v187, &qword_1000CB318);
      v98 = v192;
      sub_10000AD78(v97, v192, &qword_1000CB318);
      swift_storeEnumTagMultiPayload(v98, v191, 0);
      v99 = sub_10006E72C();
      v100 = sub_10006E878();
      v101 = (uint64_t)v193;
      _ConditionalContent<>.init(storage:)(v98, v169, v194, v99, v100);
      v102 = v201;
      sub_10000AD78(v101, v201, &qword_1000CB308);
      swift_storeEnumTagMultiPayload(v102, v199, 0);
      v103 = sub_10006E6C0();
      v104 = sub_10006EAF4();
      v105 = (uint64_t)v202;
      _ConditionalContent<>.init(storage:)(v102, v200, v203, v103, v104);
      sub_10000AE2C(v101, &qword_1000CB308);
      v106 = v207;
      sub_10000AD78(v105, (uint64_t)v207, &qword_1000CB2F8);
      swift_storeEnumTagMultiPayload(v106, v205, 0);
      v107 = sub_100004EAC((uint64_t *)&unk_1000CB3D8);
      v108 = sub_10006E654();
      v109 = sub_10000B254(&qword_1000CB3D0, (uint64_t *)&unk_1000CB3D8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
      _ConditionalContent<>.init(storage:)(v106, v206, v107, v108, v109);
      sub_10000AE2C(v105, &qword_1000CB2F8);
      v63 = v97;
      return sub_10000AE2C(v63, v58);
    }
    v119 = v49;
    Strong = swift_unknownObjectWeakLoadStrong(v49 + 16);
    v121 = *(void **)(v119 + 80);
    if (!v121)
    {
      __break(1u);
      JUMPOUT(0x100065B3CLL);
    }
    v122 = Strong;
    v123 = *(void **)(v119 + 56);
    v124 = v121;
    v125 = v123;
    sub_100004EAC(&qword_1000CB2D8);
    v126 = v195;
    State.projectedValue.getter(v195);
    v127 = v172;
    sub_10005A44C(v122, v124, v125, (uint64_t)v126, v172);
    v128 = v171;
    sub_100015184((uint64_t)v127, v171, type metadata accessor for QuestionnaireView);
    sub_1000151C8((uint64_t)v127, type metadata accessor for QuestionnaireView);
    v58 = (uint64_t *)&unk_1000CB3C0;
    v25 = v173;
    sub_10000AC80(v128, (uint64_t)v173, (uint64_t *)&unk_1000CB3C0);
    v129 = (uint64_t)v186;
    sub_10000AD78((uint64_t)v25, (uint64_t)v186, (uint64_t *)&unk_1000CB3C0);
    swift_storeEnumTagMultiPayload(v129, v185, 0);
    v130 = sub_10006EB60();
    v131 = v187;
    _ConditionalContent<>.init(storage:)(v129, v184, &type metadata for EmptyView, v130, &protocol witness table for EmptyView);
    v132 = v201;
    sub_10000AD78(v131, v201, &qword_1000CB3B0);
    swift_storeEnumTagMultiPayload(v132, v199, 1);
    v133 = sub_10006E6C0();
    v134 = sub_10006EAF4();
    v135 = (uint64_t)v202;
    _ConditionalContent<>.init(storage:)(v132, v200, v203, v133, v134);
    sub_10000AE2C(v131, &qword_1000CB3B0);
    v136 = v207;
    sub_10000AD78(v135, (uint64_t)v207, &qword_1000CB2F8);
    swift_storeEnumTagMultiPayload(v136, v205, 0);
    v137 = sub_100004EAC((uint64_t *)&unk_1000CB3D8);
    v138 = sub_10006E654();
    v139 = sub_10000B254(&qword_1000CB3D0, (uint64_t *)&unk_1000CB3D8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
LABEL_14:
    _ConditionalContent<>.init(storage:)(v136, v206, v137, v138, v139);
    sub_10000AE2C(v135, &qword_1000CB2F8);
    v63 = (uint64_t)v25;
    return sub_10000AE2C(v63, v58);
  }
  v51 = (uint64_t)v186;
  swift_storeEnumTagMultiPayload(v186, v185, 1);
  v52 = sub_10006EB60();
  v53 = v187;
  _ConditionalContent<>.init(storage:)(v51, v184, &type metadata for EmptyView, v52, &protocol witness table for EmptyView);
  v54 = v201;
  sub_10000AD78(v53, v201, &qword_1000CB3B0);
  swift_storeEnumTagMultiPayload(v54, v199, 1);
  v55 = sub_10006E6C0();
  v56 = sub_10006EAF4();
  v57 = (uint64_t)v202;
  _ConditionalContent<>.init(storage:)(v54, v200, v203, v55, v56);
  sub_10000AE2C(v53, &qword_1000CB3B0);
  v58 = &qword_1000CB2F8;
  v59 = v207;
  sub_10000AD78(v57, (uint64_t)v207, &qword_1000CB2F8);
  swift_storeEnumTagMultiPayload(v59, v205, 0);
  v60 = sub_100004EAC((uint64_t *)&unk_1000CB3D8);
  v61 = sub_10006E654();
  v62 = sub_10000B254(&qword_1000CB3D0, (uint64_t *)&unk_1000CB3D8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
  _ConditionalContent<>.init(storage:)(v59, v206, v60, v61, v62);
  v63 = v57;
  return sub_10000AE2C(v63, v58);
}

uint64_t sub_100065B64(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[6] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[7] = v3;
  v1[8] = v4;
  return swift_task_switch(sub_100065BD0, v3, v4);
}

uint64_t sub_100065BD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[5];
  v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for WritingToolsView(0) + 68));
  v4 = *v2;
  v3 = v2[1];
  v0[2] = v4;
  v0[3] = v3;
  v5 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(v0 + 4, v5);
  v0[9] = v0[4];
  v6 = (_QWORD *)swift_task_alloc(dword_1000CC3D4);
  v0[10] = v6;
  *v6 = v0;
  v6[1] = sub_10004C8AC;
  return sub_10007F7DC();
}

uint64_t sub_100065C58(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[6] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[7] = v3;
  v1[8] = v4;
  return swift_task_switch(sub_100065CC4, v3, v4);
}

uint64_t sub_100065CC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[5];
  v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for WritingToolsView(0) + 64));
  v4 = *v2;
  v3 = v2[1];
  v0[2] = v4;
  v0[3] = v3;
  v5 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(v0 + 4, v5);
  v0[9] = v0[4];
  v6 = (_QWORD *)swift_task_alloc(dword_1000C8D5C);
  v0[10] = v6;
  *v6 = v0;
  v6[1] = sub_10004C8AC;
  return sub_100026928(1);
}

uint64_t sub_100065D50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64[16];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;

  v63 = a3;
  v5 = type metadata accessor for WritingToolsView(0);
  v59 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v60 = v6;
  v62 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContainerBackgroundPlacement(0);
  v54 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for ScrollBounceBehavior(0);
  v49 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004EAC(&qword_1000CB850);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004EAC(&qword_1000CB858);
  v51 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004EAC(&qword_1000CB860);
  v57 = *(_QWORD *)(v19 - 8);
  v58 = v19;
  __chkstk_darwin(v19);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100004EAC(&qword_1000CB868);
  v53 = *(_QWORD *)(v56 - 8);
  v22 = __chkstk_darwin(v56);
  v52 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = a2;
  v65 = a2;
  v66 = a1;
  v24 = static Axis.Set.vertical.getter(v22);
  v25 = sub_100004EAC(&qword_1000CB870);
  v26 = sub_10007202C();
  v27 = ScrollView.init(_:showsIndicators:content:)(v24, 0, sub_100072024, v64, v25, v26);
  v28 = static ScrollBounceBehavior.basedOnSize.getter(v27);
  v29 = static Axis.Set.vertical.getter(v28);
  v30 = Axis.Set.init(rawValue:)(0);
  v31 = Axis.Set.init(rawValue:)(v30);
  if (Axis.Set.init(rawValue:)(v31 & v29) != v29)
    v30 = Axis.Set.init(rawValue:)(v30 | v29);
  v32 = sub_10000B254(&qword_1000CB8D8, &qword_1000CB850, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  View.scrollBounceBehavior(_:axes:)(v11, v30, v12, v32);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v11, v50);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v71 = static Color.clear.getter(v33);
  static ContainerBackgroundPlacement.navigation.getter();
  v67 = v12;
  v68 = (void *)v32;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.scrollBounceBehavior(_:axes:)>>, 1);
  View.containerBackground<A>(_:for:)(&v71, v9, v16, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v9, v55);
  swift_release(v71, v35);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v18, v16);
  v36 = v62;
  sub_100015184(v61, v62, type metadata accessor for WritingToolsView);
  v37 = *(unsigned __int8 *)(v59 + 80);
  v38 = (v37 + 16) & ~v37;
  v39 = swift_allocObject(&unk_1000C1200, v38 + v60, v37 | 7);
  sub_100046A54(v36, v39 + v38, type metadata accessor for WritingToolsView);
  v40 = sub_100004EAC(&qword_1000CB8E0);
  v67 = v16;
  v68 = &type metadata for Color;
  v69 = OpaqueTypeConformance2;
  v70 = &protocol witness table for Color;
  v41 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(_:for:)>>, 1);
  v42 = sub_100071C0C();
  v43 = sub_1000722CC();
  v44 = v52;
  v45 = v58;
  View.navigationDestination<A, B>(for:destination:)(&type metadata for Mode, sub_100072280, v39, v58, &type metadata for Mode, v40, v41, v42, v43);
  swift_release(v39, v46);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v21, v45);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v53 + 32))(v63, v44, v56);
}

uint64_t sub_1000661DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t Strong;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  char v78;

  v72 = a3;
  v5 = sub_100004EAC(&qword_1000C9E90);
  __chkstk_darwin(v5);
  *(_QWORD *)&v71 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ScrollDismissesKeyboardMode(0);
  v67 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)&v68 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004EAC(&qword_1000CB8B8);
  __chkstk_darwin(v10);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004EAC(&qword_1000CB8B0);
  v62 = *(_QWORD *)(v13 - 8);
  v63 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004EAC(&qword_1000CB9B8);
  v65 = *(_QWORD *)(v16 - 8);
  v66 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100004EAC(&qword_1000CB8A8);
  __chkstk_darwin(v61);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100004EAC(&qword_1000CB898);
  __chkstk_darwin(v64);
  v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100004EAC(&qword_1000CB888);
  v23 = __chkstk_darwin(v69);
  v70 = (uint64_t)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C7430 != -1)
    v23 = swift_once(&qword_1000C7430, sub_100042084);
  v25 = *((_QWORD *)&xmmword_1000D1CE0 + 1);
  *(_QWORD *)v12 = static HorizontalAlignment.center.getter(v23);
  *((_QWORD *)v12 + 1) = v25;
  v12[16] = 0;
  v26 = sub_100004EAC((uint64_t *)&unk_1000CB9C0);
  sub_100066724(a1, a2, (uint64_t)&v12[*(int *)(v26 + 44)]);
  v27 = a1;
  v28 = sub_10000B254((unint64_t *)&unk_1000CB8C0, &qword_1000CB8B8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.scrollContentBackground(_:)(2, v10, v28);
  v29 = sub_10000AE2C((uint64_t)v12, &qword_1000CB8B8);
  static ScrollDismissesKeyboardMode.interactively.getter(v29);
  *(_QWORD *)&v76 = v10;
  *((_QWORD *)&v76 + 1) = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of View.scrollContentBackground(_:)>>, 1);
  v31 = v63;
  View.scrollDismissesKeyboard(_:)(v9, v63, OpaqueTypeConformance2);
  (*(void (**)(char *, _QWORD))(v67 + 8))(v9, v68);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v15, v31);
  if (qword_1000C7428 != -1)
    v32 = swift_once(&qword_1000C7428, sub_100042068);
  v68 = xmmword_1000D1CC0;
  v33 = qword_1000D1CD0;
  v34 = unk_1000D1CD8;
  v35 = static Edge.Set.all.getter(v32);
  v37 = v65;
  v36 = v66;
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v20, v18, v66);
  v38 = &v20[*(int *)(v61 + 36)];
  *v38 = v35;
  *(_OWORD *)(v38 + 8) = v68;
  *((_QWORD *)v38 + 3) = v33;
  *((_QWORD *)v38 + 4) = v34;
  v38[40] = 0;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v36);
  Strong = swift_unknownObjectWeakLoadStrong(v27 + 16);
  v40 = type metadata accessor for WritingToolsView(0);
  sub_100004EAC(&qword_1000CB2D8);
  v41 = v71;
  State.projectedValue.getter((_QWORD *)v71);
  sub_10003FA74(Strong, 0, 1, v41, (uint64_t)&v22[*(int *)(v64 + 36)]);
  sub_10000AC80((uint64_t)v20, (uint64_t)v22, &qword_1000CB8A8);
  v42 = v27 + *(int *)(v40 + 72);
  v43 = *(_QWORD *)v42;
  v44 = *(_BYTE *)(v42 + 8);
  v45 = *(_QWORD *)(v42 + 16);
  v73 = v43;
  v74 = v44;
  v75 = v45;
  sub_100004EAC(&qword_1000C95E0);
  State.projectedValue.getter(&v76);
  v71 = v76;
  v46 = v77;
  LOBYTE(v41) = v78;
  v47 = v70;
  sub_10000AD78((uint64_t)v22, v70, &qword_1000CB898);
  v48 = v47 + *(int *)(v69 + 36);
  *(_OWORD *)v48 = v71;
  *(_QWORD *)(v48 + 16) = v46;
  *(_BYTE *)(v48 + 24) = v41;
  sub_10000AE2C((uint64_t)v22, &qword_1000CB898);
  v49 = v27 + *(int *)(v40 + 76);
  v50 = *(_BYTE *)v49;
  v51 = *(_QWORD *)(v49 + 8);
  LOBYTE(v76) = v50;
  *((_QWORD *)&v76 + 1) = v51;
  v52 = sub_100004EAC(&qword_1000C9FA0);
  v53 = State.wrappedValue.getter(&v73, v52);
  LOBYTE(v41) = v73;
  v54 = static Alignment.center.getter(v53);
  v56 = v55;
  v57 = v72;
  sub_10000AD78(v47, v72, &qword_1000CB888);
  v58 = v57 + *(int *)(sub_100004EAC(&qword_1000CB870) + 36);
  *(_BYTE *)v58 = 1;
  *(_BYTE *)(v58 + 1) = v41;
  *(_QWORD *)(v58 + 8) = v54;
  *(_QWORD *)(v58 + 16) = v56;
  return sub_10000AE2C(v47, &qword_1000CB888);
}

uint64_t sub_100066724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(void);
  uint64_t v90;
  char *v91;
  void (*v92)(char *, char *, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  void (*v102)(char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  _QWORD v134[3];
  ValueMetadata *v135;
  unint64_t v136;

  v107 = a2;
  v129 = a1;
  v117 = a3;
  v3 = sub_100004EAC(&qword_1000CB9D0);
  v4 = __chkstk_darwin(v3);
  v119 = (uint64_t)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v127 = (uint64_t)&v104 - v6;
  v128 = sub_100004EAC(&qword_1000CB9D8);
  v133 = *(_QWORD *)(v128 - 8);
  v7 = __chkstk_darwin(v128);
  v118 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v116 = (char *)&v104 - v10;
  __chkstk_darwin(v9);
  v132 = (char *)&v104 - v11;
  v115 = type metadata accessor for DynamicTypeSize(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v113 = (uint64_t *)((char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_100004EAC(&qword_1000CB9E0);
  v14 = __chkstk_darwin(v13);
  v126 = (uint64_t)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v123 = (uint64_t)&v104 - v16;
  v125 = sub_100004EAC(&qword_1000CB9E8);
  v131 = *(_QWORD *)(v125 - 8);
  v17 = __chkstk_darwin(v125);
  v124 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v111 = (char *)&v104 - v20;
  __chkstk_darwin(v19);
  v130 = (char *)&v104 - v21;
  v109 = type metadata accessor for Divider(0);
  v22 = *(_QWORD *)(v109 - 8);
  v23 = __chkstk_darwin(v109);
  v106 = (char *)&v104 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (char *)&v104 - v25;
  v27 = sub_100004EAC(&qword_1000CB9F0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v104 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v33 = (char *)&v104 - v32;
  v34 = sub_100004EAC(&qword_1000CB9F8);
  v35 = __chkstk_darwin(v34);
  v37 = (char *)&v104 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v120 = (uint64_t)&v104 - v38;
  v39 = sub_100004EAC(&qword_1000CBA00);
  v40 = __chkstk_darwin(v39);
  v122 = (uint64_t)&v104 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v44 = (uint64_t)&v104 - v43;
  v45 = __chkstk_darwin(v42);
  v47 = (char *)&v104 - v46;
  *(_QWORD *)v44 = static VerticalAlignment.center.getter(v45);
  *(_QWORD *)(v44 + 8) = 0;
  *(_BYTE *)(v44 + 16) = 1;
  v48 = sub_100004EAC(&qword_1000CBA08);
  sub_10006719C(v129, v44 + *(int *)(v48 + 44));
  v121 = v47;
  sub_10000AC80(v44, (uint64_t)v47, &qword_1000CBA00);
  v135 = &type metadata for WritingTools;
  v110 = sub_10003AF6C();
  v136 = v110;
  LOBYTE(v134[0]) = 5;
  LOBYTE(v44) = isFeatureEnabled(_:)(v134);
  v49 = sub_10000AFA4(v134);
  v112 = v22;
  if ((v44 & 1) != 0)
  {
    __chkstk_darwin(v49);
    *(&v104 - 2) = v129;
    v50 = sub_100004EAC(&qword_1000CBAA8);
    v51 = sub_100072A34();
    v52 = Section<>.init(content:)(sub_100072A2C, &v104 - 4, v50, v51);
    Divider.init()(v52);
    v53 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
    v105 = v28;
    v54 = v31;
    v53(v31, v33, v27);
    v55 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    v56 = v106;
    v57 = v109;
    v55(v106, v26, v109);
    v53(v37, v54, v27);
    v58 = sub_100004EAC(&qword_1000CBAD8);
    v55(&v37[*(int *)(v58 + 48)], v56, v57);
    v59 = *(void (**)(char *, uint64_t))(v22 + 8);
    v59(v26, v57);
    v60 = *(void (**)(char *, uint64_t))(v105 + 8);
    v60(v33, v27);
    v59(v56, v57);
    v60(v54, v27);
    v61 = sub_100004EAC(&qword_1000CBA18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v37, 0, 1, v61);
    v62 = v120;
    v63 = sub_10000AC80((uint64_t)v37, v120, &qword_1000CB9F8);
  }
  else
  {
    v64 = sub_100004EAC(&qword_1000CBA18);
    v62 = v120;
    v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v120, 1, 1, v64);
    v57 = v109;
  }
  __chkstk_darwin(v63);
  v65 = v129;
  *(&v104 - 2) = v129;
  v66 = sub_100004EAC(&qword_1000CBA20);
  v67 = sub_1000727C4();
  v68 = v111;
  Section<>.init(content:)(sub_1000727BC, &v104 - 4, v66, v67);
  (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v130, v68, v125);
  type metadata accessor for WritingToolsView(0);
  v69 = v113;
  v70 = sub_100046574(v113);
  v71 = DynamicTypeSize.isAccessibilitySize.getter(v70);
  v72 = (*(uint64_t (**)(_QWORD *, uint64_t))(v114 + 8))(v69, v115);
  v73 = v127;
  v74 = v128;
  v75 = v123;
  if ((v71 & 1) != 0)
  {
    Divider.init()(v72);
    v76 = 0;
  }
  else
  {
    v76 = 1;
  }
  v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v112 + 56))(v75, v76, 1, v57);
  __chkstk_darwin(v77);
  *(&v104 - 2) = v65;
  v78 = sub_100004EAC(&qword_1000CBA58);
  v79 = sub_1000728F8();
  v80 = v116;
  Section<>.init(content:)(sub_1000728F0, &v104 - 4, v78, v79);
  (*(void (**)(char *, char *, uint64_t))(v133 + 32))(v132, v80, v74);
  v135 = &type metadata for WritingTools;
  v136 = v110;
  LOBYTE(v134[0]) = 4;
  v81 = isFeatureEnabled(_:)(v134);
  v82 = sub_10000AFA4(v134);
  if ((v81 & 1) != 0)
  {
    __chkstk_darwin(v82);
    v83 = v107;
    *(&v104 - 2) = v65;
    *(&v104 - 1) = v83;
    v84 = sub_100004EAC(&qword_1000CBA98);
    v85 = sub_10000B254(&qword_1000CBAA0, &qword_1000CBA98, (uint64_t)&unk_1000947E8);
    Section<>.init(content:)(sub_100072A24, &v104 - 4, v84, v85);
    v86 = sub_100004EAC(&qword_1000CBA88);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v73, 0, 1, v86);
  }
  else
  {
    v87 = sub_100004EAC(&qword_1000CBA88);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v73, 1, 1, v87);
  }
  v88 = v122;
  sub_10000AD78((uint64_t)v121, v122, &qword_1000CBA00);
  sub_10000AD78(v62, (uint64_t)v37, &qword_1000CB9F8);
  v108 = v37;
  v89 = *(void (**)(void))(v131 + 16);
  v90 = v125;
  v91 = v124;
  v89();
  sub_10000AD78(v75, v126, &qword_1000CB9E0);
  v92 = *(void (**)(char *, char *, uint64_t))(v133 + 16);
  v93 = v118;
  v94 = v128;
  v92(v118, v132, v128);
  v95 = v119;
  sub_10000AD78(v73, v119, &qword_1000CB9D0);
  v96 = v88;
  v97 = v117;
  sub_10000AD78(v96, v117, &qword_1000CBA00);
  v98 = (int *)sub_100004EAC(&qword_1000CBA90);
  sub_10000AD78((uint64_t)v37, v97 + v98[12], &qword_1000CB9F8);
  ((void (*)(uint64_t, char *, uint64_t))v89)(v97 + v98[16], v91, v90);
  v99 = v126;
  sub_10000AD78(v126, v97 + v98[20], &qword_1000CB9E0);
  v92((char *)(v97 + v98[24]), v93, v94);
  sub_10000AD78(v95, v97 + v98[28], &qword_1000CB9D0);
  v100 = v97 + v98[32];
  *(_QWORD *)v100 = 0;
  *(_BYTE *)(v100 + 8) = 1;
  sub_10000AE2C(v127, &qword_1000CB9D0);
  v101 = *(void (**)(char *, uint64_t))(v133 + 8);
  v101(v132, v94);
  sub_10000AE2C(v123, &qword_1000CB9E0);
  v102 = *(void (**)(char *, uint64_t))(v131 + 8);
  v102(v130, v90);
  sub_10000AE2C(v120, &qword_1000CB9F8);
  sub_10000AE2C((uint64_t)v121, &qword_1000CBA00);
  sub_10000AE2C(v95, &qword_1000CB9D0);
  v101(v93, v94);
  sub_10000AE2C(v99, &qword_1000CB9E0);
  v102(v124, v90);
  sub_10000AE2C((uint64_t)v108, &qword_1000CB9F8);
  return sub_10000AE2C(v122, &qword_1000CBA00);
}

uint64_t sub_10006719C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t);
  _BYTE v37[4];
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = a1;
  v3 = type metadata accessor for WritingToolsView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = &v37[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100004EAC(&qword_1000CBBB0);
  v8 = *(_QWORD *)(v7 - 8);
  v43 = v7;
  v44 = v8;
  __chkstk_darwin(v7);
  v10 = &v37[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100004EAC(&qword_1000CBBB8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = &v37[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v17 = &v37[-v16];
  v18 = LocalizedStringKey.init(stringLiteral:)(0x20676E6974697257, 0xED0000736C6F6F54);
  v19 = Text.init(_:tableName:bundle:comment:)(v18);
  v39 = v20;
  v40 = v19;
  v41 = v21;
  v38 = v22 & 1;
  sub_100015184(v42, (uint64_t)v6, type metadata accessor for WritingToolsView);
  v23 = *(unsigned __int8 *)(v4 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = swift_allocObject(&unk_1000C1458, v24 + v5, v23 | 7);
  sub_100046A54((uint64_t)v6, v25 + v24, type metadata accessor for WritingToolsView);
  Button.init(action:label:)(sub_100073088, v25, sub_1000674D8, 0, &type metadata for Image, &protocol witness table for Image);
  v26 = sub_10000B254(&qword_1000CBBC0, &qword_1000CBBB0, (uint64_t)&protocol conformance descriptor for Button<A>);
  v27 = sub_100073094();
  v28 = v43;
  View.buttonStyle<A>(_:)(v27, v43, &type metadata for HeaderButtonWithIconStyle, v26, v27);
  (*(void (**)(_BYTE *, uint64_t))(v44 + 8))(v10, v28);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v17, v15, v11);
  v29 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16);
  v29(v15, v17, v11);
  v31 = v39;
  v30 = v40;
  *(_QWORD *)a2 = v40;
  *(_QWORD *)(a2 + 8) = v31;
  v32 = v38;
  *(_BYTE *)(a2 + 16) = v38;
  v33 = v41;
  *(_QWORD *)(a2 + 24) = v41;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  v34 = sub_100004EAC(&qword_1000CBBD0);
  v29((_BYTE *)(a2 + *(int *)(v34 + 64)), v15, v11);
  sub_10000ADBC(v30, v31, v32);
  v35 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
  swift_bridgeObjectRetain(v33);
  v35(v17, v11);
  v35(v15, v11);
  sub_10000ADF4(v30, v31, v32);
  return swift_bridgeObjectRelease(v33);
}

void *sub_100067494(uint64_t a1)
{
  void *result;
  void *v2;

  result = (void *)swift_unknownObjectWeakLoadStrong(a1 + 16);
  if (result)
  {
    v2 = result;
    objc_msgSend(result, "endWritingTools");
    return (void *)swift_unknownObjectRelease(v2);
  }
  return result;
}

uint64_t sub_1000674D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0x6B72616D78, 0xE500000000000000);
  *a1 = result;
  return result;
}

uint64_t sub_10006750C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  v3 = type metadata accessor for WritingToolsView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = sub_100004EAC(&qword_1000CBAB8);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004EAC((uint64_t *)&unk_1000CBAE0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015184(a1, (uint64_t)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WritingToolsView);
  v13 = *(unsigned __int8 *)(v4 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_1000C1278, v14 + v5, v13 | 7);
  sub_100046A54((uint64_t)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for WritingToolsView);
  v16 = sub_100004EAC(&qword_1000C9600);
  v17 = sub_100072BD0();
  Button.init(action:label:)(sub_100072B88, v15, sub_100067778, 0, v16, v17);
  v18 = sub_10000B254(&qword_1000CBAC0, &qword_1000CBAB8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v19 = sub_100072AFC();
  View.labelStyle<A>(_:)(v19, v6, &type metadata for MagicButtonLabelStyle, v18, v19);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v22, v12, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

void sub_100067704(uint64_t a1)
{
  void *Strong;
  void *v2;
  id v3;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1 + 16);
  if (Strong)
  {
    v2 = Strong;
    objc_msgSend(Strong, "endWritingTools");
    swift_unknownObjectRelease(v2);
  }
  v3 = objc_msgSend(objc_allocWithZone((Class)SiriSimpleActivationSource), "init");
  objc_msgSend(v3, "activateFromSource:", 49);

}

uint64_t sub_100067778@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v11;

  v2 = sub_100004EAC(&qword_1000CBB00);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = Label.init(title:icon:)(sub_10006787C, 0, sub_100067898, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
  v7 = static Alignment.leading.getter(v6);
  v9 = sub_10002DF08(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a1, 0.0, 1, 0.0, 1, v7, v8);
  return (*(uint64_t (**)(char *, uint64_t, double))(v3 + 8))(v5, v2, v9);
}

uint64_t sub_10006787C@<X0>(uint64_t a1@<X8>)
{
  return sub_100013330(0x1000000000000017, 0x80000001000ACB50, a1);
}

uint64_t sub_100067898@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(_internalSystemName:)(7169887, 0xE300000000000000);
  *a1 = result;
  return result;
}

uint64_t sub_1000678C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t KeyPath;
  uint64_t OpaqueTypeConformance2;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v41 = a1;
  v49 = a2;
  v48 = type metadata accessor for IconTitleLabelStyle(0);
  __chkstk_darwin(v48);
  v3 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004EAC(&qword_1000CBA38);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v41 - v8;
  v46 = sub_100004EAC(&qword_1000CBA30);
  v44 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v42 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100004EAC(&qword_1000CBB90);
  v45 = *(_QWORD *)(v47 - 8);
  v11 = __chkstk_darwin(v47);
  v43 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C7430 != -1)
    v11 = swift_once(&qword_1000C7430, sub_100042084);
  v13 = xmmword_1000D1CE0;
  v14 = static Alignment.center.getter(v11);
  v16 = v15;
  *((_QWORD *)v7 + 3) = 0;
  *((_QWORD *)v7 + 4) = 0;
  v7[40] = 1;
  v17 = &v7[*(int *)(v4 + 48)];
  *(_QWORD *)v17 = swift_getKeyPath(&unk_1000952E0);
  v18 = sub_100004EAC(&qword_1000C74D0);
  swift_storeEnumTagMultiPayload(v17, v18, 0);
  *v7 = 0;
  *((_QWORD *)v7 + 1) = v14;
  *((_QWORD *)v7 + 2) = v16;
  *(_OWORD *)(v7 + 24) = v13;
  v7[40] = 0;
  v19 = v41;
  sub_100067CB8(v41, &v7[*(int *)(v4 + 44)]);
  sub_10000AC80((uint64_t)v7, (uint64_t)v9, &qword_1000CBA38);
  v20 = v19 + *(int *)(type metadata accessor for WritingToolsView(0) + 72);
  v21 = *(_QWORD *)v20;
  v22 = *(_BYTE *)(v20 + 8);
  v23 = *(_QWORD *)(v20 + 16);
  v53 = v21;
  LOBYTE(v54) = v22;
  v55 = v23;
  sub_100004EAC(&qword_1000C95E0);
  State.projectedValue.getter(&v50);
  v24 = v51;
  v25 = v52;
  *(_OWORD *)v3 = v50;
  *((_QWORD *)v3 + 2) = v24;
  v3[24] = v25;
  v26 = v48;
  v27 = &v3[*(int *)(v48 + 20)];
  *(_QWORD *)v27 = swift_getKeyPath(&unk_1000952E0);
  swift_storeEnumTagMultiPayload(v27, v18, 0);
  v28 = sub_10000B254(&qword_1000CBA40, &qword_1000CBA38, (uint64_t)&unk_1000947E8);
  v29 = sub_100005900(&qword_1000CBA48, type metadata accessor for IconTitleLabelStyle, (uint64_t)&unk_100095790);
  v30 = v42;
  View.labelStyle<A>(_:)(v3, v4, v26, v28, v29);
  sub_1000151C8((uint64_t)v3, type metadata accessor for IconTitleLabelStyle);
  sub_10000AE2C((uint64_t)v9, &qword_1000CBA38);
  KeyPath = swift_getKeyPath(&unk_100095878);
  LOWORD(v53) = 0;
  v54 = KeyPath;
  LOBYTE(v55) = 0;
  *(_QWORD *)&v50 = v4;
  *((_QWORD *)&v50 + 1) = v26;
  v51 = v28;
  v52 = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v50, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
  v33 = sub_100015448();
  v34 = v43;
  v35 = v46;
  View.buttonStyle<A>(_:)(&v53, v46, &type metadata for PrimaryButtonStyle, OpaqueTypeConformance2, v33);
  swift_release(KeyPath, v36);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v35);
  v37 = v45;
  v38 = v49;
  v39 = v47;
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v49, v34, v47);
  *(_WORD *)(v38 + *(int *)(sub_100004EAC(&qword_1000CBA20) + 36)) = 256;
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v34, v39);
}

uint64_t sub_100067CB8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;

  v34 = a1;
  v38 = a2;
  v3 = type metadata accessor for WritingToolsView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004EAC(&qword_1000CBB80);
  v36 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v37 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v35 = (char *)&v33 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v33 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v33 - v15;
  sub_100015184(a1, (uint64_t)v6, type metadata accessor for WritingToolsView);
  v17 = *(unsigned __int8 *)(v4 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = v18 + v5;
  v20 = v17 | 7;
  v21 = swift_allocObject(&unk_1000C13E0, v19, v17 | 7);
  sub_100046A54((uint64_t)v6, v21 + v18, type metadata accessor for WritingToolsView);
  v22 = sub_100004EAC(&qword_1000CBB00);
  v23 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_100072DD4, v21, sub_10006870C, 0, v22, v23);
  sub_100015184(v34, (uint64_t)v6, type metadata accessor for WritingToolsView);
  v24 = swift_allocObject(&unk_1000C1408, v19, v20);
  sub_100046A54((uint64_t)v6, v24 + v18, type metadata accessor for WritingToolsView);
  Button.init(action:label:)(sub_100072DE4, v24, sub_100068740, 0, v22, v23);
  v25 = v35;
  v26 = v36;
  v27 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
  v27(v35, v16, v7);
  v28 = v37;
  v27(v37, v14, v7);
  v29 = v38;
  v27(v38, v25, v7);
  v30 = sub_100004EAC(&qword_1000CBB98);
  v27(&v29[*(int *)(v30 + 48)], v28, v7);
  v31 = *(void (**)(char *, uint64_t))(v26 + 8);
  v31(v14, v7);
  v31(v16, v7);
  v31(v28, v7);
  return ((uint64_t (*)(char *, uint64_t))v31)(v25, v7);
}

uint64_t sub_100067F80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t (*v16)(_QWORD);
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v31[3];
  char v32;

  v2 = type metadata accessor for NavigationPath(0);
  __chkstk_darwin(v2);
  v4 = (_QWORD *)((char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100004EAC((uint64_t *)&unk_1000C87F0);
  __chkstk_darwin(v5);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WritingToolsView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)v31 - v13;
  v15 = *(unsigned __int8 *)(a1 + 88);
  sub_100015184(a1, (uint64_t)v31 - v13, v16);
  if (v15 != 1)
  {
    sub_1000151C8((uint64_t)v14, type metadata accessor for WritingToolsView);
    return sub_1000682B0(1, 0, 0, 0);
  }
  v17 = v14[89];
  sub_1000151C8((uint64_t)v14, type metadata accessor for WritingToolsView);
  if ((v17 & 1) == 0)
    return sub_1000682B0(1, 0, 0, 0);
  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v7, 1, 1, v18);
  sub_100015184(a1, (uint64_t)v12, type metadata accessor for WritingToolsView);
  v19 = type metadata accessor for MainActor(0);
  v20 = static MainActor.shared.getter(v19);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(&unk_1000C1430, v22 + v10, v21 | 7);
  *(_QWORD *)(v23 + 16) = v20;
  *(_QWORD *)(v23 + 24) = &protocol witness table for MainActor;
  sub_100046A54((uint64_t)v12, v23 + v22, type metadata accessor for WritingToolsView);
  v24 = sub_1000596DC((uint64_t)v7, (uint64_t)&unk_1000CBBA8, v23);
  swift_release(v24, v25);
  v26 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v27 = objc_msgSend(v26, "userInterfaceIdiom");

  if (!v27)
  {
    v31[1] = 0;
    v31[2] = 0;
    v31[0] = 1;
    v32 = 2;
    v28 = sub_100004EAC(&qword_1000CB2D8);
    State.wrappedValue.getter(v4, v28);
    v29 = sub_100071C0C();
    NavigationPath.append<A>(_:)(v31, &type metadata for Mode, v29);
    State.wrappedValue.setter(v4, v28);
  }
  return sub_100021E58((uint64_t)"ProofreadGeneration", 19, 2);
}

uint64_t sub_100068244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[7] = v6;
  v4[8] = v7;
  return swift_task_switch(sub_100065BD0, v6, v7);
}

uint64_t sub_1000682B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52[16];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;

  v9 = type metadata accessor for NavigationPath(0);
  __chkstk_darwin(v9);
  v45 = (uint64_t *)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for WritingToolsView(0);
  v48 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v48 + 64);
  __chkstk_darwin(v11);
  v47 = (uint64_t)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004EAC((uint64_t *)&unk_1000C87F0);
  __chkstk_darwin(v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v11;
  v16 = (uint64_t *)(v4 + *(int *)(v11 + 64));
  v18 = *v16;
  v17 = v16[1];
  v58 = v18;
  v59 = v17;
  v19 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v62, v19);
  v20 = v62;
  KeyPath = swift_getKeyPath(&unk_100095340);
  v53 = v20;
  v54 = a1;
  v55 = a2;
  v56 = a3;
  v57 = a4;
  v58 = v20;
  sub_10000B060(a1, a2, a3, a4);
  v22 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v58, KeyPath, sub_10006E504, v52, (char *)&type metadata for () + 8, v22);
  v49 = a1;
  v50 = a2;
  v51 = a3;
  sub_10000A880(a1, a2, a3, a4);
  v23 = v20;
  v24 = v46;
  swift_release(v23, v25);
  swift_release(KeyPath, v26);
  v27 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v15, 1, 1, v27);
  v28 = v47;
  sub_100015184(v24, v47, type metadata accessor for WritingToolsView);
  v29 = type metadata accessor for MainActor(0);
  v30 = static MainActor.shared.getter(v29);
  v31 = *(unsigned __int8 *)(v48 + 80);
  v32 = (v31 + 32) & ~v31;
  v33 = swift_allocObject(&unk_1000C12F0, v32 + v12, v31 | 7);
  *(_QWORD *)(v33 + 16) = v30;
  *(_QWORD *)(v33 + 24) = &protocol witness table for MainActor;
  sub_100046A54(v28, v33 + v32, type metadata accessor for WritingToolsView);
  v34 = sub_1000596DC((uint64_t)v15, (uint64_t)&unk_1000CBB68, v33);
  swift_release(v34, v35);
  if (*(_BYTE *)(v24 + 89) == 1)
  {
    if (!a4)
      __asm { BR              X11 }
    v58 = 0;
    v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease(v59);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000069, 0x80000001000AC0C0, "WritingToolsUIService/RewritingModel.swift", 42, 2, 346, 0);
    __break(1u);
    JUMPOUT(0x1000686E4);
  }
  v37 = v50;
  v36 = v51;
  v38 = v49;
  v39 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  objc_msgSend(v39, "userInterfaceIdiom");

  v58 = v38;
  v59 = v37;
  v60 = v36;
  v61 = a4;
  v40 = sub_100004EAC(&qword_1000CB2D8);
  v41 = v45;
  State.wrappedValue.getter(v45, v40);
  v42 = sub_100071C0C();
  NavigationPath.append<A>(_:)(&v58, &type metadata for Mode, v42);
  State.wrappedValue.setter(v41, v40);
  return sub_1000220A8(v38, v37, v36, a4);
}

uint64_t sub_10006870C()
{
  return sub_100033D60(0x616572666F6F7250, 0xE900000000000064);
}

uint64_t sub_100068740()
{
  return Label.init(title:icon:)(sub_10006877C, 0, sub_10004C61C, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_10006877C@<X0>(uint64_t a1@<X8>)
{
  return sub_100013330(0x65746972776552, 0xE700000000000000, a1);
}

uint64_t sub_100068794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t KeyPath;
  uint64_t OpaqueTypeConformance2;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v41 = a1;
  v49 = a2;
  v48 = type metadata accessor for SmallIconTitleLabelStyle(0);
  __chkstk_darwin(v48);
  v3 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004EAC(&qword_1000CBA70);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v41 - v8;
  v46 = sub_100004EAC(&qword_1000CBA68);
  v44 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v42 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100004EAC(&qword_1000CBB78);
  v45 = *(_QWORD *)(v47 - 8);
  v11 = __chkstk_darwin(v47);
  v43 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C7430 != -1)
    v11 = swift_once(&qword_1000C7430, sub_100042084);
  v13 = xmmword_1000D1CE0;
  v14 = static Alignment.center.getter(v11);
  v16 = v15;
  *((_QWORD *)v7 + 3) = 0;
  *((_QWORD *)v7 + 4) = 0;
  v7[40] = 1;
  v17 = &v7[*(int *)(v4 + 48)];
  *(_QWORD *)v17 = swift_getKeyPath(&unk_1000952E0);
  v18 = sub_100004EAC(&qword_1000C74D0);
  swift_storeEnumTagMultiPayload(v17, v18, 0);
  *v7 = 0;
  *((_QWORD *)v7 + 1) = v14;
  *((_QWORD *)v7 + 2) = v16;
  *(_OWORD *)(v7 + 24) = v13;
  v7[40] = 0;
  v19 = v41;
  sub_100068B84(v41, &v7[*(int *)(v4 + 44)]);
  sub_10000AC80((uint64_t)v7, (uint64_t)v9, &qword_1000CBA70);
  v20 = v19 + *(int *)(type metadata accessor for WritingToolsView(0) + 72);
  v21 = *(_QWORD *)v20;
  v22 = *(_BYTE *)(v20 + 8);
  v23 = *(_QWORD *)(v20 + 16);
  v53 = v21;
  LOBYTE(v54) = v22;
  v55 = v23;
  sub_100004EAC(&qword_1000C95E0);
  State.projectedValue.getter(&v50);
  v24 = v51;
  v25 = v52;
  *(_OWORD *)v3 = v50;
  *((_QWORD *)v3 + 2) = v24;
  v3[24] = v25;
  v26 = v48;
  v27 = &v3[*(int *)(v48 + 20)];
  *(_QWORD *)v27 = swift_getKeyPath(&unk_1000952E0);
  swift_storeEnumTagMultiPayload(v27, v18, 0);
  v28 = sub_10000B254(&qword_1000CBA78, &qword_1000CBA70, (uint64_t)&unk_1000947E8);
  v29 = sub_100005900(&qword_1000CBA80, type metadata accessor for SmallIconTitleLabelStyle, (uint64_t)&unk_100093E10);
  v30 = v42;
  View.labelStyle<A>(_:)(v3, v4, v26, v28, v29);
  sub_1000151C8((uint64_t)v3, type metadata accessor for SmallIconTitleLabelStyle);
  sub_10000AE2C((uint64_t)v9, &qword_1000CBA70);
  KeyPath = swift_getKeyPath(&unk_100095878);
  LOWORD(v53) = 0;
  v54 = KeyPath;
  LOBYTE(v55) = 0;
  *(_QWORD *)&v50 = v4;
  *((_QWORD *)&v50 + 1) = v26;
  v51 = v28;
  v52 = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v50, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
  v33 = sub_100015448();
  v34 = v43;
  v35 = v46;
  View.buttonStyle<A>(_:)(&v53, v46, &type metadata for PrimaryButtonStyle, OpaqueTypeConformance2, v33);
  swift_release(KeyPath, v36);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v35);
  v37 = v45;
  v38 = v49;
  v39 = v47;
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v49, v34, v47);
  *(_WORD *)(v38 + *(int *)(sub_100004EAC(&qword_1000CBA58) + 36)) = 256;
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v34, v39);
}

uint64_t sub_100068B84@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;

  v47 = a2;
  v3 = type metadata accessor for WritingToolsView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004EAC(&qword_1000CBB80);
  v45 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v46 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v44 = (char *)&v41 - v11;
  v12 = __chkstk_darwin(v10);
  v48 = (char *)&v41 - v13;
  v14 = __chkstk_darwin(v12);
  v43 = (char *)&v41 - v15;
  v16 = __chkstk_darwin(v14);
  v42 = (char *)&v41 - v17;
  __chkstk_darwin(v16);
  v41 = (char *)&v41 - v18;
  sub_100015184(a1, (uint64_t)v6, type metadata accessor for WritingToolsView);
  v19 = *(unsigned __int8 *)(v4 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = v20 + v5;
  v22 = v19 | 7;
  v23 = swift_allocObject(&unk_1000C1368, v21, v19 | 7);
  sub_100046A54((uint64_t)v6, v23 + v20, type metadata accessor for WritingToolsView);
  v24 = sub_100004EAC(&qword_1000CBB00);
  v25 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_100072D64, v23, sub_100068F4C, 0, v24, v25);
  v26 = a1;
  sub_100015184(a1, (uint64_t)v6, type metadata accessor for WritingToolsView);
  v27 = swift_allocObject(&unk_1000C1390, v21, v22);
  sub_100046A54((uint64_t)v6, v27 + v20, type metadata accessor for WritingToolsView);
  v28 = v42;
  Button.init(action:label:)(sub_100072D70, v27, sub_100068F7C, 0, v24, v25);
  sub_100015184(v26, (uint64_t)v6, type metadata accessor for WritingToolsView);
  v29 = swift_allocObject(&unk_1000C13B8, v21, v22);
  sub_100046A54((uint64_t)v6, v29 + v20, type metadata accessor for WritingToolsView);
  v30 = v43;
  Button.init(action:label:)(sub_100072DC8, v29, sub_100068FB4, 0, v24, v25);
  v31 = v45;
  v32 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  v33 = v48;
  v34 = v41;
  v32(v48, v41, v7);
  v35 = v44;
  v32(v44, v28, v7);
  v36 = v46;
  v32(v46, v30, v7);
  v37 = v47;
  v32(v47, v33, v7);
  v38 = sub_100004EAC(&qword_1000CBB88);
  v32(&v37[*(int *)(v38 + 48)], v35, v7);
  v32(&v37[*(int *)(v38 + 64)], v36, v7);
  v39 = *(void (**)(char *, uint64_t))(v31 + 8);
  v39(v30, v7);
  v39(v28, v7);
  v39(v34, v7);
  v39(v36, v7);
  v39(v35, v7);
  return ((uint64_t (*)(char *, uint64_t))v39)(v48, v7);
}

uint64_t sub_100068F4C()
{
  return sub_100033D60(0x796C646E65697246, 0xE800000000000000);
}

uint64_t sub_100068F7C()
{
  return sub_100033D60(0x69737365666F7250, 0xEC0000006C616E6FLL);
}

uint64_t sub_100068FB4()
{
  return Label.init(title:icon:)(sub_100068FF0, 0, sub_100069008, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_100068FF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100013330(0x657369636E6F43, 0xE700000000000000, a1);
}

uint64_t sub_100069008@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(_:bundle:)(0x636E6F632E6D675FLL, 0xEB00000000657369, 0);
  *a1 = result;
  return result;
}

uint64_t sub_10006904C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = static Alignment.top.getter();
  v8 = v7;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 1;
  v9 = sub_100004EAC(&qword_1000CBA98);
  v10 = (_QWORD *)(a3 + *(int *)(v9 + 48));
  *v10 = swift_getKeyPath(&unk_1000952E0);
  v11 = sub_100004EAC(&qword_1000C74D0);
  swift_storeEnumTagMultiPayload(v10, v11, 0);
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 1;
  return sub_100069108(a1, a2, a3 + *(int *)(v9 + 44));
}

uint64_t sub_100069108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t (*v35)(_QWORD *, uint64_t);
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD v82[3];

  v81 = a2;
  v79 = a3;
  v4 = sub_100004EAC(&qword_1000CBB08);
  v5 = __chkstk_darwin(v4);
  v80 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v74 = (uint64_t *)((char *)&v69 - v7);
  v8 = type metadata accessor for DynamicTypeSize(0);
  v72 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v70 = type metadata accessor for Divider(0);
  v11 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100004EAC(&qword_1000CBB10);
  __chkstk_darwin(v69);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100004EAC(&qword_1000CBB18);
  v16 = __chkstk_darwin(v71);
  v77 = (uint64_t)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v69 - v19;
  __chkstk_darwin(v18);
  v75 = (uint64_t)&v69 - v21;
  v22 = sub_100004EAC(&qword_1000CBB20);
  v23 = __chkstk_darwin(v22);
  v76 = (uint64_t)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v69 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v69 - v29;
  *(_QWORD *)v27 = static VerticalAlignment.top.getter(v28);
  *((_QWORD *)v27 + 1) = 0;
  v27[16] = 1;
  v31 = sub_100004EAC(&qword_1000CBB28);
  sub_10006967C(a1, v81, (uint64_t)&v27[*(int *)(v31 + 44)]);
  v73 = v30;
  v32 = sub_10000AC80((uint64_t)v27, (uint64_t)v30, &qword_1000CBB20);
  Divider.init()(v32);
  type metadata accessor for WritingToolsView(0);
  v78 = a1;
  v33 = sub_100046574(v10);
  v34 = DynamicTypeSize.isAccessibilitySize.getter(v33);
  v35 = *(uint64_t (**)(_QWORD *, uint64_t))(v72 + 8);
  v72 = v8;
  v36 = v35(v10, v8);
  v37 = 0.0;
  if ((v34 & 1) == 0)
    v37 = GeometryProxy.size.getter(v36) * 0.1;
  v38 = static Alignment.center.getter(v36);
  _FrameLayout.init(width:height:alignment:)(v82, 0, 1, *(_QWORD *)&v37, v34 & 1, v38, v39);
  v40 = v70;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v13, v70);
  v41 = &v15[*(int *)(v69 + 36)];
  v42 = v82[1];
  *(_OWORD *)v41 = v82[0];
  *((_OWORD *)v41 + 1) = v42;
  *((_OWORD *)v41 + 2) = v82[2];
  v43 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v40);
  v44 = static Edge.Set.top.getter(v43);
  v45 = sub_100046574(v10);
  v46 = DynamicTypeSize.isAccessibilitySize.getter(v45);
  v47 = v35(v10, v72);
  v48 = 0.0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  if ((v46 & 1) == 0)
  {
    v52 = GeometryProxy.size.getter(v47);
    v48 = EdgeInsets.init(_all:)(v52 * 0.05);
    v49 = v53;
    v50 = v54;
    v51 = v55;
  }
  sub_10000AD78((uint64_t)v15, (uint64_t)v20, &qword_1000CBB10);
  v56 = &v20[*(int *)(v71 + 36)];
  *v56 = v44;
  *((double *)v56 + 1) = v48;
  *((_QWORD *)v56 + 2) = v49;
  *((_QWORD *)v56 + 3) = v50;
  *((_QWORD *)v56 + 4) = v51;
  v56[40] = v46 & 1;
  sub_10000AE2C((uint64_t)v15, &qword_1000CBB10);
  v57 = v75;
  v58 = sub_10000AC80((uint64_t)v20, v75, &qword_1000CBB18);
  v59 = static VerticalAlignment.top.getter(v58);
  v60 = (uint64_t)v74;
  *v74 = v59;
  *(_QWORD *)(v60 + 8) = 0;
  *(_BYTE *)(v60 + 16) = 1;
  v61 = sub_100004EAC(&qword_1000CBB30);
  sub_100069D24(v78, v81, (_QWORD *)(v60 + *(int *)(v61 + 44)));
  v62 = (uint64_t)v73;
  v63 = v76;
  sub_10000AD78((uint64_t)v73, v76, &qword_1000CBB20);
  v64 = v77;
  sub_10000AD78(v57, v77, &qword_1000CBB18);
  v65 = v80;
  sub_10000AD78(v60, v80, &qword_1000CBB08);
  v66 = v79;
  sub_10000AD78(v63, v79, &qword_1000CBB20);
  v67 = sub_100004EAC(&qword_1000CBB38);
  sub_10000AD78(v64, v66 + *(int *)(v67 + 48), &qword_1000CBB18);
  sub_10000AD78(v65, v66 + *(int *)(v67 + 64), &qword_1000CBB08);
  sub_10000AE2C(v60, &qword_1000CBB08);
  sub_10000AE2C(v57, &qword_1000CBB18);
  sub_10000AE2C(v62, &qword_1000CBB20);
  sub_10000AE2C(v65, &qword_1000CBB08);
  sub_10000AE2C(v64, &qword_1000CBB18);
  return sub_10000AE2C(v63, &qword_1000CBB20);
}

uint64_t sub_10006967C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD v73[3];
  _OWORD v74[3];

  v71 = a2;
  v59 = a1;
  v67 = a3;
  v72 = type metadata accessor for DynamicTypeSize(0);
  v64 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v5 = (_QWORD *)((char *)v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v63 = type metadata accessor for WritingToolsView(0);
  v6 = *(_QWORD *)(v63 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v63);
  v8 = (char *)v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TransformItemView(0);
  __chkstk_darwin(v9);
  v11 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100004EAC(&qword_1000CBB40);
  __chkstk_darwin(v69);
  v13 = (char *)v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100004EAC(&qword_1000CBB48);
  v14 = __chkstk_darwin(v70);
  v66 = (uint64_t)v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v65 = (uint64_t)v57 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)v57 - v19;
  __chkstk_darwin(v18);
  v68 = (uint64_t)v57 - v21;
  sub_100015184(a1, (uint64_t)v8, type metadata accessor for WritingToolsView);
  v22 = *(unsigned __int8 *)(v6 + 80);
  v23 = (v22 + 16) & ~v22;
  v62 = v23 + v7;
  v61 = v22 | 7;
  v24 = swift_allocObject(&unk_1000C1318, v23 + v7, v22 | 7);
  sub_100046A54((uint64_t)v8, v24 + v23, type metadata accessor for WritingToolsView);
  v11[24] = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = 6;
  *((_QWORD *)v11 + 4) = sub_100072C58;
  *((_QWORD *)v11 + 5) = v24;
  v25 = &v11[*(int *)(v9 + 24)];
  *(_QWORD *)v25 = swift_getKeyPath(&unk_100095818);
  v60 = sub_100004EAC(&qword_1000CA000);
  swift_storeEnumTagMultiPayload(v25, v60, 0);
  v26 = &v11[*(int *)(v9 + 28)];
  *(_QWORD *)v26 = swift_getKeyPath(&unk_1000952E0);
  v58 = sub_100004EAC(&qword_1000C74D0);
  v27 = swift_storeEnumTagMultiPayload(v26, v58, 0);
  v28 = GeometryProxy.size.getter(v27) * 0.18;
  v30 = static Alignment.center.getter(v29);
  _FrameLayout.init(width:height:alignment:)(v73, *(_QWORD *)&v28, 0, 0, 1, v30, v31);
  sub_100015184((uint64_t)v11, (uint64_t)v13, type metadata accessor for TransformItemView);
  v32 = &v13[*(int *)(v69 + 36)];
  v33 = v73[1];
  *(_OWORD *)v32 = v73[0];
  *((_OWORD *)v32 + 1) = v33;
  *((_OWORD *)v32 + 2) = v73[2];
  sub_1000151C8((uint64_t)v11, type metadata accessor for TransformItemView);
  sub_10000AD78((uint64_t)v13, (uint64_t)v20, &qword_1000CBB40);
  *(_WORD *)&v20[*(int *)(v70 + 36)] = 257;
  sub_10000AE2C((uint64_t)v13, &qword_1000CBB40);
  sub_10000AC80((uint64_t)v20, v68, &qword_1000CBB48);
  v34 = v59;
  v57[1] = v59 + *(int *)(v63 + 80);
  v35 = sub_100046574(v5);
  v36 = DynamicTypeSize.isAccessibilitySize.getter(v35);
  LOBYTE(v28) = v36;
  LODWORD(v63) = v36;
  v57[0] = *(_QWORD *)(v64 + 8);
  ((void (*)(_QWORD *, uint64_t))v57[0])(v5, v72);
  LODWORD(v64) = (LOBYTE(v28) & 1) == 0;
  sub_100015184(v34, (uint64_t)v8, type metadata accessor for WritingToolsView);
  v37 = swift_allocObject(&unk_1000C1340, v62, v61);
  sub_100046A54((uint64_t)v8, v37 + v23, type metadata accessor for WritingToolsView);
  v11[24] = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = 7;
  *((_QWORD *)v11 + 4) = sub_100072C58;
  *((_QWORD *)v11 + 5) = v37;
  v38 = &v11[*(int *)(v9 + 24)];
  *(_QWORD *)v38 = swift_getKeyPath(&unk_100095818);
  swift_storeEnumTagMultiPayload(v38, v60, 0);
  v39 = &v11[*(int *)(v9 + 28)];
  *(_QWORD *)v39 = swift_getKeyPath(&unk_1000952E0);
  v40 = swift_storeEnumTagMultiPayload(v39, v58, 0);
  v41 = GeometryProxy.size.getter(v40) * 0.18;
  v43 = static Alignment.center.getter(v42);
  _FrameLayout.init(width:height:alignment:)(v74, *(_QWORD *)&v41, 0, 0, 1, v43, v44);
  sub_100015184((uint64_t)v11, (uint64_t)v13, type metadata accessor for TransformItemView);
  v45 = &v13[*(int *)(v69 + 36)];
  v46 = v74[1];
  *(_OWORD *)v45 = v74[0];
  *((_OWORD *)v45 + 1) = v46;
  *((_OWORD *)v45 + 2) = v74[2];
  sub_1000151C8((uint64_t)v11, type metadata accessor for TransformItemView);
  sub_10000AD78((uint64_t)v13, (uint64_t)v20, &qword_1000CBB40);
  *(_WORD *)&v20[*(int *)(v70 + 36)] = 257;
  sub_10000AE2C((uint64_t)v13, &qword_1000CBB40);
  v47 = v65;
  sub_10000AC80((uint64_t)v20, v65, &qword_1000CBB48);
  v48 = sub_100046574(v5);
  LOBYTE(v41) = DynamicTypeSize.isAccessibilitySize.getter(v48);
  ((void (*)(_QWORD *, uint64_t))v57[0])(v5, v72);
  v49 = v68;
  sub_10000AD78(v68, (uint64_t)v20, &qword_1000CBB48);
  v50 = v47;
  v51 = v66;
  sub_10000AD78(v47, v66, &qword_1000CBB48);
  v52 = v67;
  sub_10000AD78((uint64_t)v20, v67, &qword_1000CBB48);
  v53 = (int *)sub_100004EAC(&qword_1000CBB70);
  v54 = v52 + v53[12];
  *(_QWORD *)v54 = 0;
  *(_BYTE *)(v54 + 8) = v64;
  *(_BYTE *)(v54 + 9) = v63 & 1;
  sub_10000AD78(v51, v52 + v53[16], &qword_1000CBB48);
  v55 = v52 + v53[20];
  *(_QWORD *)v55 = 0;
  *(_BYTE *)(v55 + 8) = (LOBYTE(v41) & 1) == 0;
  *(_BYTE *)(v55 + 9) = LOBYTE(v41) & 1;
  sub_10000AE2C(v50, &qword_1000CBB48);
  sub_10000AE2C(v49, &qword_1000CBB48);
  sub_10000AE2C(v51, &qword_1000CBB48);
  return sub_10000AE2C((uint64_t)v20, &qword_1000CBB48);
}

uint64_t sub_100069D24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  int *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  void (*v69)(_QWORD *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL4 v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD v82[3];
  _OWORD v83[3];

  v81 = a2;
  v78 = a3;
  v4 = type metadata accessor for WritingToolsView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v63 = (uint64_t)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for TransformItemView(0);
  __chkstk_darwin(v64);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100004EAC(&qword_1000CBB40);
  __chkstk_darwin(v79);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100004EAC(&qword_1000CBB48);
  v11 = __chkstk_darwin(v80);
  v77 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v74 = (uint64_t)&v62 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v62 - v16;
  __chkstk_darwin(v15);
  v73 = (uint64_t)&v62 - v18;
  v19 = type metadata accessor for DynamicTypeSize(0);
  v20 = *(_QWORD *)(v19 - 8);
  v71 = v19;
  __chkstk_darwin(v19);
  v22 = (uint64_t *)((char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = *(int *)(v4 + 80);
  v70 = a1;
  v72 = a1 + v23;
  v24 = sub_100046574(v22);
  v25 = DynamicTypeSize.isAccessibilitySize.getter(v24);
  LOBYTE(v4) = v25;
  v76 = v25;
  v69 = *(void (**)(_QWORD *, uint64_t))(v20 + 8);
  v69(v22, v19);
  v75 = (v4 & 1) == 0;
  v26 = a1;
  v27 = v63;
  sub_100015184(v26, v63, type metadata accessor for WritingToolsView);
  v28 = *(unsigned __int8 *)(v5 + 80);
  v29 = (v28 + 16) & ~v28;
  v66 = v29 + v6;
  v67 = v28 | 7;
  v30 = swift_allocObject(&unk_1000C12A0, v29 + v6, v28 | 7);
  sub_100046A54(v27, v30 + v29, type metadata accessor for WritingToolsView);
  v8[24] = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = 8;
  *((_QWORD *)v8 + 4) = sub_100072C58;
  *((_QWORD *)v8 + 5) = v30;
  v31 = v64;
  v32 = &v8[*(int *)(v64 + 24)];
  *(_QWORD *)v32 = swift_getKeyPath(&unk_100095818);
  v65 = sub_100004EAC(&qword_1000CA000);
  swift_storeEnumTagMultiPayload(v32, v65, 0);
  v33 = &v8[*(int *)(v31 + 28)];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_1000952E0);
  v34 = sub_100004EAC(&qword_1000C74D0);
  v35 = swift_storeEnumTagMultiPayload(v33, v34, 0);
  v36 = GeometryProxy.size.getter(v35) * 0.18;
  v38 = static Alignment.center.getter(v37);
  _FrameLayout.init(width:height:alignment:)(v82, *(_QWORD *)&v36, 0, 0, 1, v38, v39);
  sub_100015184((uint64_t)v8, (uint64_t)v10, type metadata accessor for TransformItemView);
  v40 = &v10[*(int *)(v79 + 36)];
  v41 = v82[1];
  *(_OWORD *)v40 = v82[0];
  *((_OWORD *)v40 + 1) = v41;
  *((_OWORD *)v40 + 2) = v82[2];
  sub_1000151C8((uint64_t)v8, type metadata accessor for TransformItemView);
  sub_10000AD78((uint64_t)v10, (uint64_t)v17, &qword_1000CBB40);
  *(_WORD *)&v17[*(int *)(v80 + 36)] = 257;
  sub_10000AE2C((uint64_t)v10, &qword_1000CBB40);
  v42 = v73;
  sub_10000AC80((uint64_t)v17, v73, &qword_1000CBB48);
  v43 = sub_100046574(v22);
  v44 = DynamicTypeSize.isAccessibilitySize.getter(v43);
  LOBYTE(v36) = v44;
  v68 = v44;
  v69(v22, v71);
  LODWORD(v72) = (LOBYTE(v36) & 1) == 0;
  sub_100015184(v70, v27, type metadata accessor for WritingToolsView);
  v45 = swift_allocObject(&unk_1000C12C8, v66, v67);
  sub_100046A54(v27, v45 + v29, type metadata accessor for WritingToolsView);
  v8[24] = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = 9;
  *((_QWORD *)v8 + 4) = sub_100072C58;
  *((_QWORD *)v8 + 5) = v45;
  v46 = &v8[*(int *)(v31 + 24)];
  *(_QWORD *)v46 = swift_getKeyPath(&unk_100095818);
  swift_storeEnumTagMultiPayload(v46, v65, 0);
  v47 = &v8[*(int *)(v31 + 28)];
  *(_QWORD *)v47 = swift_getKeyPath(&unk_1000952E0);
  v48 = swift_storeEnumTagMultiPayload(v47, v34, 0);
  v49 = GeometryProxy.size.getter(v48) * 0.18;
  v51 = static Alignment.center.getter(v50);
  _FrameLayout.init(width:height:alignment:)(v83, *(_QWORD *)&v49, 0, 0, 1, v51, v52);
  sub_100015184((uint64_t)v8, (uint64_t)v10, type metadata accessor for TransformItemView);
  v53 = &v10[*(int *)(v79 + 36)];
  v54 = v83[1];
  *(_OWORD *)v53 = v83[0];
  *((_OWORD *)v53 + 1) = v54;
  *((_OWORD *)v53 + 2) = v83[2];
  sub_1000151C8((uint64_t)v8, type metadata accessor for TransformItemView);
  v55 = v74;
  sub_10000AD78((uint64_t)v10, v74, &qword_1000CBB40);
  *(_WORD *)(v55 + *(int *)(v80 + 36)) = 257;
  sub_10000AE2C((uint64_t)v10, &qword_1000CBB40);
  sub_10000AC80(v55, (uint64_t)v17, &qword_1000CBB48);
  sub_10000AD78(v42, v55, &qword_1000CBB48);
  v56 = v77;
  sub_10000AD78((uint64_t)v17, v77, &qword_1000CBB48);
  v57 = v78;
  *v78 = 0;
  *((_BYTE *)v57 + 8) = v75;
  *((_BYTE *)v57 + 9) = v76 & 1;
  v58 = v57;
  v59 = (int *)sub_100004EAC((uint64_t *)&unk_1000CBB50);
  sub_10000AD78(v55, (uint64_t)v58 + v59[12], &qword_1000CBB48);
  v60 = (uint64_t)v58 + v59[16];
  *(_QWORD *)v60 = 0;
  *(_BYTE *)(v60 + 8) = v72;
  *(_BYTE *)(v60 + 9) = v68 & 1;
  sub_10000AD78(v56, (uint64_t)v58 + v59[20], &qword_1000CBB48);
  sub_10000AE2C((uint64_t)v17, &qword_1000CBB48);
  sub_10000AE2C(v42, &qword_1000CBB48);
  sub_10000AE2C(v56, &qword_1000CBB48);
  return sub_10000AE2C(v55, &qword_1000CBB48);
}

uint64_t sub_10006A3DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v31 = a3;
  v5 = type metadata accessor for WritingToolsView(0);
  v30 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v30 + 64);
  __chkstk_darwin(v5);
  v7 = sub_100004EAC(&qword_1000CB908);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004EAC(&qword_1000CB8F8);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006A600(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), a2, (uint64_t)v9);
  v13 = a2 + *(int *)(v5 + 76);
  v14 = *(_BYTE *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v32 = v14;
  v33 = v15;
  v16 = sub_100004EAC(&qword_1000C9FA0);
  v17 = State.wrappedValue.getter(&v34, v16);
  v18 = v34;
  v19 = static Alignment.center.getter(v17);
  v21 = v20;
  sub_10000AD78((uint64_t)v9, (uint64_t)v12, &qword_1000CB908);
  v22 = &v12[*(int *)(v10 + 36)];
  *v22 = 0;
  v22[1] = v18;
  *((_QWORD *)v22 + 1) = v19;
  *((_QWORD *)v22 + 2) = v21;
  sub_10000AE2C((uint64_t)v9, &qword_1000CB908);
  sub_100015184(a2, (uint64_t)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WritingToolsView);
  v23 = *(unsigned __int8 *)(v30 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = swift_allocObject(&unk_1000C1228, v24 + v6, v23 | 7);
  sub_100046A54((uint64_t)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v24, type metadata accessor for WritingToolsView);
  v26 = v31;
  sub_10000AD78((uint64_t)v12, v31, &qword_1000CB8F8);
  v27 = (_QWORD *)(v26 + *(int *)(sub_100004EAC(&qword_1000CB8E0) + 36));
  *v27 = 0;
  v27[1] = 0;
  v27[2] = sub_100072748;
  v27[3] = v25;
  return sub_10000AE2C((uint64_t)v12, &qword_1000CB8F8);
}

uint64_t sub_10006A600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  objc_class *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t Strong;
  void *v102;
  uint64_t v103;
  void *v104;
  id v105;
  id v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;

  v164 = a5;
  LODWORD(v174) = a4;
  *((_QWORD *)&v154 + 1) = a3;
  *(_QWORD *)&v154 = a2;
  v159 = a1;
  v173 = a6;
  v6 = type metadata accessor for QuestionnaireView(0);
  __chkstk_darwin(v6);
  v138 = (uint64_t *)((char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v157 = sub_100004EAC((uint64_t *)&unk_1000CB3C0);
  v8 = __chkstk_darwin(v157);
  v137 = (uint64_t)&v136 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v139 = (uint64_t)&v136 - v10;
  v155 = sub_100004EAC(&qword_1000CB980);
  __chkstk_darwin(v155);
  v156 = (uint64_t)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_100004EAC(&qword_1000CB978);
  __chkstk_darwin(v172);
  v158 = (char *)&v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ModelResponseView(0);
  __chkstk_darwin(v13);
  v153 = (char *)&v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_100004EAC(&qword_1000CB968);
  v15 = __chkstk_darwin(v147);
  v152 = (char *)&v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v151 = (char *)&v136 - v17;
  v146 = sub_100004EAC(&qword_1000CB988);
  __chkstk_darwin(v146);
  v150 = (char *)&v136 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for RewritingView(0);
  __chkstk_darwin(v19);
  v149 = (char *)&v136 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100004EAC(&qword_1000CB958);
  v21 = __chkstk_darwin(v148);
  v23 = (char *)&v136 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v136 - v24;
  v163 = sub_100004EAC(&qword_1000CB948);
  __chkstk_darwin(v163);
  v27 = (char *)&v136 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_100004EAC(&qword_1000CB990);
  __chkstk_darwin(v170);
  v171 = (uint64_t)&v136 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100004EAC(&qword_1000CB998);
  __chkstk_darwin(v165);
  v167 = (uint64_t)&v136 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_100004EAC(&qword_1000CB9A0);
  __chkstk_darwin(v160);
  v161 = (uint64_t)&v136 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_100004EAC(&qword_1000CB938);
  __chkstk_darwin(v166);
  v162 = (char *)&v136 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_100004EAC(&qword_1000CB928);
  __chkstk_darwin(v168);
  v169 = (char *)&v136 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for TaskPriority(0);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v143 = (char *)&v136 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for WritingToolsView(0);
  v141 = *(_QWORD *)(v34 - 8);
  v35 = *(_QWORD *)(v141 + 64);
  __chkstk_darwin(v34);
  v142 = (uint64_t)&v136 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100004EAC(&qword_1000C74C0);
  __chkstk_darwin(v36);
  v38 = (char *)&v136 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100004EAC(&qword_1000C9E90);
  __chkstk_darwin(v39);
  v41 = (uint64_t *)((char *)&v136 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = type metadata accessor for ProofreadingView(0);
  __chkstk_darwin(v42);
  v44 = (char *)&v136 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100004EAC(&qword_1000CB328);
  __chkstk_darwin(v140);
  v46 = (char *)&v136 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100004EAC(&qword_1000CB318);
  v48 = __chkstk_darwin(v47);
  v49 = __chkstk_darwin(v48);
  if (!(_BYTE)v174)
  {
    v158 = v23;
    v174 = v25;
    v63 = (uint64_t)v152;
    v64 = v153;
    v65 = (uint64_t)v151;
    v66 = *(_BYTE *)(v164 + 89);
    v67 = (uint64_t)v150;
    v136 = v49;
    if ((v66 & 1) != 0)
      __asm { BR              X12 }
    v119 = (uint64_t *)(v164 + *(int *)(v34 + 64));
    v121 = *v119;
    v120 = v119[1];
    v175 = v121;
    v176 = v120;
    v122 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
    State.wrappedValue.getter(&v177, v122);
    v123 = v177;
    sub_100004EAC(&qword_1000CB2D8);
    State.projectedValue.getter(v41);
    sub_10002E620(v123, (uint64_t)v41, v64);
    sub_100015184((uint64_t)v64, v63, type metadata accessor for ModelResponseView);
    sub_1000151C8((uint64_t)v64, type metadata accessor for ModelResponseView);
    sub_10000AC80(v63, v65, &qword_1000CB968);
    sub_10000AD78(v65, v67, &qword_1000CB968);
    swift_storeEnumTagMultiPayload(v67, v146, 1);
    v124 = sub_1000725D0();
    v125 = sub_100072654();
    _ConditionalContent<>.init(storage:)(v67, v148, v147, v124, v125);
    sub_10000AE2C(v65, &qword_1000CB968);
    v59 = &qword_1000CB948;
    v96 = v161;
    sub_10000AD78((uint64_t)v27, v161, &qword_1000CB948);
    v97 = v96;
    v98 = v160;
    v99 = 1;
    goto LABEL_13;
  }
  if (v174 != 1)
  {
    if (*((_QWORD *)&v154 + 1) | (unint64_t)v154 | v159)
    {
      if (v159 == 1 && v154 == 0)
      {
        v68 = v164;
        v69 = (uint64_t *)(v164 + *(int *)(v34 + 68));
        v71 = *v69;
        v70 = v69[1];
        v175 = v71;
        v176 = v70;
        v136 = v49;
        v174 = (char *)&v136 - v50;
        v72 = v51;
        v73 = sub_100004EAC(&qword_1000C9CC0);
        State.wrappedValue.getter(&v177, v73);
        v159 = v177;
        sub_100004EAC(&qword_1000CB2D8);
        State.projectedValue.getter(v41);
        v74 = type metadata accessor for CommonUIManager(0);
        v75 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
        *(_QWORD *)v44 = Environment.init<A>(_:)(v74, v74, v75);
        v44[8] = v76 & 1;
        v77 = type metadata accessor for FBKSEvaluation.Subject(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v38, 1, 1, v77);
        v78 = (objc_class *)type metadata accessor for FBKEvaluationController(0);
        v79 = objc_allocWithZone(v78);
        v177 = FBKEvaluationController.init(subject:)(v38);
        State.init(wrappedValue:)(&v175, &v177, v78);
        v80 = v176;
        *((_QWORD *)v44 + 4) = v175;
        *((_QWORD *)v44 + 5) = v80;
        sub_10000AD78((uint64_t)v41, (uint64_t)&v44[*(int *)(v42 + 28)], &qword_1000C9E90);
        v177 = v159;
        v81 = type metadata accessor for ProofreadingModel(0);
        State.init(wrappedValue:)(&v175, &v177, v81);
        v82 = v175;
        v83 = v176;
        sub_10000AE2C((uint64_t)v41, &qword_1000C9E90);
        *((_QWORD *)v44 + 2) = v82;
        *((_QWORD *)v44 + 3) = v83;
        v84 = v68;
        v85 = v142;
        sub_100015184(v84, v142, type metadata accessor for WritingToolsView);
        v86 = *(unsigned __int8 *)(v141 + 80);
        v87 = (v86 + 16) & ~v86;
        v88 = swift_allocObject(&unk_1000C1250, v87 + v35, v86 | 7);
        v89 = sub_100046A54(v85, v88 + v87, type metadata accessor for WritingToolsView);
        v90 = v143;
        static TaskPriority.userInitiated.getter(v89);
        v91 = &v46[*(int *)(v140 + 36)];
        v92 = type metadata accessor for _TaskModifier(0);
        v93 = v144;
        v94 = v145;
        (*(void (**)(char *, char *, uint64_t))(v144 + 16))(&v91[*(int *)(v92 + 20)], v90, v145);
        *(_QWORD *)v91 = &unk_1000CB9B0;
        *((_QWORD *)v91 + 1) = v88;
        sub_100015184((uint64_t)v44, (uint64_t)v46, type metadata accessor for ProofreadingView);
        (*(void (**)(char *, uint64_t))(v93 + 8))(v90, v94);
        sub_1000151C8((uint64_t)v44, type metadata accessor for ProofreadingView);
        sub_10000AD78((uint64_t)v46, v72, &qword_1000CB328);
        sub_10000AE2C((uint64_t)v46, &qword_1000CB328);
        v59 = &qword_1000CB318;
        v95 = v72;
        v27 = v174;
        sub_10000AC80(v95, (uint64_t)v174, &qword_1000CB318);
        v96 = v161;
        sub_10000AD78((uint64_t)v27, v161, &qword_1000CB318);
        v97 = v96;
        v98 = v160;
        v99 = 0;
LABEL_13:
        swift_storeEnumTagMultiPayload(v97, v98, v99);
        v126 = sub_10006E72C();
        v127 = sub_100072564();
        v128 = (uint64_t)v162;
        _ConditionalContent<>.init(storage:)(v96, v136, v163, v126, v127);
        v129 = v167;
        sub_10000AD78(v128, v167, &qword_1000CB938);
        swift_storeEnumTagMultiPayload(v129, v165, 0);
        v130 = sub_1000724F8();
        v131 = sub_1000726D8();
        v132 = (uint64_t)v169;
        _ConditionalContent<>.init(storage:)(v129, v166, v172, v130, v131);
        sub_10000AE2C(v128, &qword_1000CB938);
        v133 = v171;
        sub_10000AD78(v132, v171, &qword_1000CB928);
        swift_storeEnumTagMultiPayload(v133, v170, 0);
        v134 = sub_10007248C();
        _ConditionalContent<>.init(storage:)(v133, v168, &type metadata for Never, v134, &protocol witness table for Never);
        sub_10000AE2C(v132, &qword_1000CB928);
        v62 = (uint64_t)v27;
        return sub_10000AE2C(v62, v59);
      }
      v100 = v164;
      Strong = swift_unknownObjectWeakLoadStrong(v164 + 16);
      v102 = *(void **)(v100 + 80);
      if (v102)
      {
        v103 = Strong;
        v104 = *(void **)(v100 + 56);
        v105 = v102;
        v106 = v104;
        sub_100004EAC(&qword_1000CB2D8);
        State.projectedValue.getter(v41);
        v107 = v138;
        sub_10005A44C(v103, v105, v106, (uint64_t)v41, v138);
        v108 = v137;
        sub_100015184((uint64_t)v107, v137, type metadata accessor for QuestionnaireView);
        sub_1000151C8((uint64_t)v107, type metadata accessor for QuestionnaireView);
        v59 = (uint64_t *)&unk_1000CB3C0;
        v109 = v139;
        sub_10000AC80(v108, v139, (uint64_t *)&unk_1000CB3C0);
        v110 = v156;
        sub_10000AD78(v109, v156, (uint64_t *)&unk_1000CB3C0);
        swift_storeEnumTagMultiPayload(v110, v155, 1);
        v111 = sub_10006EB60();
        v112 = (uint64_t)v158;
        _ConditionalContent<>.init(storage:)(v110, &type metadata for EmptyView, v157, &protocol witness table for EmptyView, v111);
        v113 = v167;
        sub_10000AD78(v112, v167, &qword_1000CB978);
        swift_storeEnumTagMultiPayload(v113, v165, 1);
        v114 = sub_1000724F8();
        v115 = sub_1000726D8();
        v116 = (uint64_t)v169;
        _ConditionalContent<>.init(storage:)(v113, v166, v172, v114, v115);
        sub_10000AE2C(v112, &qword_1000CB978);
        v117 = v171;
        sub_10000AD78(v116, v171, &qword_1000CB928);
        swift_storeEnumTagMultiPayload(v117, v170, 0);
        v118 = sub_10007248C();
        _ConditionalContent<>.init(storage:)(v117, v168, &type metadata for Never, v118, &protocol witness table for Never);
        sub_10000AE2C(v116, &qword_1000CB928);
        v62 = v109;
        return sub_10000AE2C(v62, v59);
      }
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002CLL, 0x80000001000ACB20, "WritingToolsUIService/WritingToolsView.swift", 44, 2, 444, 0);
    __break(1u);
    JUMPOUT(0x10006B60CLL);
  }
  v52 = v156;
  swift_storeEnumTagMultiPayload(v156, v155, 0);
  v53 = sub_10006EB60();
  v54 = (uint64_t)v158;
  _ConditionalContent<>.init(storage:)(v52, &type metadata for EmptyView, v157, &protocol witness table for EmptyView, v53);
  v55 = v167;
  sub_10000AD78(v54, v167, &qword_1000CB978);
  swift_storeEnumTagMultiPayload(v55, v165, 1);
  v56 = sub_1000724F8();
  v57 = sub_1000726D8();
  v58 = (uint64_t)v169;
  _ConditionalContent<>.init(storage:)(v55, v166, v172, v56, v57);
  sub_10000AE2C(v54, &qword_1000CB978);
  v59 = &qword_1000CB928;
  v60 = v171;
  sub_10000AD78(v58, v171, &qword_1000CB928);
  swift_storeEnumTagMultiPayload(v60, v170, 0);
  v61 = sub_10007248C();
  _ConditionalContent<>.init(storage:)(v60, v168, &type metadata for Never, v61, &protocol witness table for Never);
  v62 = v58;
  return sub_10000AE2C(v62, v59);
}

uint64_t sub_10006B634(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = *((_BYTE *)a1 + 8);
  v3 = swift_retain(*a1);
  v4 = sub_100046370(v3, v2);
  swift_release(v1, v5);
  sub_1000568FC();
  return swift_release(v4, v6);
}

uint64_t sub_10006B678(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[2];

  v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  v2 = sub_100071C50();
  swift_retain(v1);
  return EnvironmentValues.subscript.setter(v4, &type metadata for NavigationDestinationEnvironmentKey, &type metadata for NavigationDestinationEnvironmentKey, v2);
}

uint64_t sub_10006B6D4(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v10;
  uint64_t v11;
  char v12;

  v2 = type metadata accessor for NavigationPath(0);
  __chkstk_darwin(v2);
  v4 = (_QWORD *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *((_QWORD *)a1 + 2);
  v6 = *((_BYTE *)a1 + 24);
  v10 = *a1;
  v11 = v5;
  v12 = v6;
  type metadata accessor for WritingToolsView(0);
  v7 = sub_100004EAC(&qword_1000CB2D8);
  State.wrappedValue.getter(v4, v7);
  v8 = sub_100071C0C();
  NavigationPath.append<A>(_:)(&v10, &type metadata for Mode, v8);
  return State.wrappedValue.setter(v4, v7);
}

uint64_t sub_10006B7A8()
{
  return sub_100021A6C((uint64_t)"WTPanelBringup", 14, 2, 0x726165707041, 0xE600000000000000);
}

uint64_t sub_10006B7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[7] = v6;
  v4[8] = v7;
  return swift_task_switch(sub_10006B838, v6, v7);
}

uint64_t sub_10006B838()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[5];
  v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for WritingToolsView(0) + 64));
  v4 = *v2;
  v3 = v2[1];
  v0[2] = v4;
  v0[3] = v3;
  v5 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(v0 + 4, v5);
  v0[9] = v0[4];
  v6 = (_QWORD *)swift_task_alloc(dword_1000C8D5C);
  v0[10] = v6;
  *v6 = v0;
  v6[1] = sub_10004C548;
  return sub_100026928(1);
}

uint64_t sub_10006B8C8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if ((result & 0x100) != 0)
  {
    v4 = 0;
    v5 = 0;
    LOBYTE(v6) = 0;
  }
  else
  {
    v3 = result;
    if (qword_1000C7438 != -1)
      swift_once(&qword_1000C7438, sub_10004215C);
    v4 = qword_1000D1CF0;
    if ((v3 & 1) != 0)
    {
      v7 = type metadata accessor for CommonUIManager(0);
      v8 = sub_100005900((unint64_t *)&qword_1000C9C90, type metadata accessor for CommonUIManager, (uint64_t)&unk_100094CAC);
      swift_retain(v4);
      v5 = Environment.init<A>(_:)(v7, v7, v8);
      v6 = v9 & 1;
    }
    else
    {
      swift_retain(qword_1000D1CF0);
      v5 = 0;
      v6 = 255;
    }
    swift_retain(v4);
    sub_100071AA8(v5, v6);
    sub_100071ABC(v5, v6);
    result = swift_release(v4, v10);
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_10006B9C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t result;
  _QWORD v16[2];
  char v17;

  v4 = *v2;
  v5 = v2[1];
  v6 = static Alignment.center.getter(a1);
  v8 = v7;
  if (v5)
    v9 = 256;
  else
    v9 = 0;
  v10 = sub_10006B8C8(v9 | v4, (uint64_t)v16);
  v11 = v16[0];
  v12 = v16[1];
  v13 = v17;
  v14 = static Edge.Set.vertical.getter(v10);
  result = static SafeAreaRegions.all.getter();
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = result;
  *(_BYTE *)(a2 + 48) = v14;
  return result;
}

uint64_t sub_10006BA58@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char v69[16];
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;

  v68 = a2;
  v3 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for TransformItemButton(0);
  v6 = __chkstk_darwin(v64);
  v8 = (uint64_t *)((char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (char *)&v57 - v9;
  v11 = type metadata accessor for TransformItemView(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004EAC(&qword_1000CB6B8);
  v67 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004EAC(&qword_1000CB6C0);
  v65 = *(_QWORD *)(v18 - 8);
  v66 = v18;
  v19 = __chkstk_darwin(v18);
  v62 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v63 = (char *)&v57 - v21;
  sub_100015184(a1, (uint64_t)v14, type metadata accessor for TransformItemView);
  v22 = *(unsigned __int8 *)(v12 + 80);
  v23 = (v22 + 16) & ~v22;
  v24 = swift_allocObject(&unk_1000C1138, v23 + v13, v22 | 7);
  sub_100046A54((uint64_t)v14, v24 + v23, type metadata accessor for TransformItemView);
  v70 = a1;
  v25 = sub_100004EAC(&qword_1000CB6C8);
  v26 = sub_10000B254(&qword_1000CB6D0, &qword_1000CB6C8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_100071958, v24, sub_1000719A0, v69, v25, v26);
  *v8 = swift_getKeyPath(&unk_100095818);
  v27 = sub_100004EAC(&qword_1000CA000);
  swift_storeEnumTagMultiPayload(v8, v27, 0);
  v28 = v64;
  v29 = (_QWORD *)((char *)v8 + *(int *)(v64 + 20));
  *v29 = swift_getKeyPath(&unk_1000952E0);
  v30 = sub_100004EAC(&qword_1000C74D0);
  swift_storeEnumTagMultiPayload(v29, v30, 0);
  sub_100046A54((uint64_t)v8, (uint64_t)v10, type metadata accessor for TransformItemButton);
  v31 = sub_10000B254(&qword_1000CB6D8, &qword_1000CB6B8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v32 = sub_100005900(&qword_1000CB6E0, type metadata accessor for TransformItemButton, (uint64_t)&unk_100095934);
  v33 = v62;
  View.buttonStyle<A>(_:)(v10, v15, v28, v31, v32);
  sub_1000151C8((uint64_t)v10, type metadata accessor for TransformItemButton);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v17, v15);
  v34 = v65;
  v35 = v63;
  v36 = v33;
  v37 = v33;
  v38 = v66;
  v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v65 + 32))(v63, v36, v66);
  v40 = static Alignment.center.getter(v39);
  _FrameLayout.init(width:height:alignment:)(&v71, 0, 1, 0x401C000000000000, 0, v40, v41);
  v67 = v71;
  LODWORD(v64) = v72;
  v61 = v73;
  v60 = v74;
  v58 = v76;
  v59 = v75;
  sub_100061960(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  v42 = Text.init(_:)(v5);
  v44 = v43;
  v46 = v45;
  LOBYTE(v14) = v47 & 1;
  v48 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
  v49 = v38;
  v48(v37, v35, v38);
  v50 = v68;
  v48(v68, v37, v49);
  v51 = sub_100004EAC(&qword_1000CB6E8);
  v52 = &v50[*(int *)(v51 + 48)];
  *(_QWORD *)v52 = 0;
  v52[8] = 1;
  *((_QWORD *)v52 + 2) = v67;
  v52[24] = v64;
  *((_QWORD *)v52 + 4) = v61;
  v52[40] = v60;
  v53 = v58;
  *((_QWORD *)v52 + 6) = v59;
  *((_QWORD *)v52 + 7) = v53;
  v54 = &v50[*(int *)(v51 + 64)];
  *(_QWORD *)v54 = v42;
  *((_QWORD *)v54 + 1) = v44;
  v54[16] = (char)v14;
  *((_QWORD *)v54 + 3) = v46;
  sub_10000ADBC(v42, v44, (char)v14);
  v55 = *(void (**)(char *, uint64_t))(v34 + 8);
  swift_bridgeObjectRetain(v46);
  v55(v35, v49);
  sub_10000ADF4(v42, v44, (char)v14);
  swift_bridgeObjectRelease(v46);
  return ((uint64_t (*)(char *, uint64_t))v55)(v37, v49);
}

uint64_t sub_10006BF0C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[4];

  v4[2] = a1;
  v1 = sub_100004EAC(&qword_1000CB6F0);
  v2 = sub_1000719B8();
  return Label.init(title:icon:)(nullsub_1, 0, sub_1000719B0, v4, &type metadata for EmptyView, v1, &protocol witness table for EmptyView, v2);
}

uint64_t sub_10006BF80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t result;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;

  v52 = a2;
  v3 = type metadata accessor for ColorScheme(0);
  v50 = *(_QWORD *)(v3 - 8);
  v51 = v3;
  v4 = __chkstk_darwin(v3);
  v49 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v48 = (uint64_t *)((char *)&v43 - v6);
  v7 = sub_100004EAC(&qword_1000CB720);
  __chkstk_darwin(v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Image.ResizingMode(0);
  v44 = *(_QWORD *)(v10 - 8);
  v45 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DynamicTypeSize(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(_QWORD *)a1;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *(_BYTE *)(a1 + 24);
  v47 = a1;
  v46 = type metadata accessor for TransformItemView(0);
  v21 = sub_100046574(v16);
  LOBYTE(a1) = DynamicTypeSize.isAccessibilitySize.getter(v21);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  v22 = sub_10002CA84(v17, v18, v19, v20, a1 & 1);
  v24 = Image.init(_:bundle:)(v22, v23, 0);
  v26 = v44;
  v25 = v45;
  (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v12, enum case for Image.ResizingMode.stretch(_:), v45);
  v27 = Image.resizable(capInsets:resizingMode:)(v12, v24, 0.0, 0.0, 0.0, 0.0);
  swift_release(v24, v28);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v25);
  v29 = enum case for Image.TemplateRenderingMode.template(_:);
  v30 = type metadata accessor for Image.TemplateRenderingMode(0);
  v31 = *(_QWORD *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 104))(v9, v29, v30);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v9, 0, 1, v30);
  v32 = Image.renderingMode(_:)(v9, v27);
  swift_release(v27, v33);
  sub_10000AE2C((uint64_t)v9, &qword_1000CB720);
  v34 = v48;
  sub_100046760(v48);
  v35 = v49;
  v36 = v50;
  v37 = v51;
  (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v49, enum case for ColorScheme.dark(_:), v51);
  v38 = v35;
  LOBYTE(v35) = static ColorScheme.== infix(_:_:)(v34, v35);
  v39 = *(void (**)(char *, uint64_t))(v36 + 8);
  v39(v38, v37);
  v40 = ((uint64_t (*)(_QWORD *, uint64_t))v39)(v34, v37);
  if ((v35 & 1) != 0)
    result = static Color.white.getter(v40);
  else
    result = static Color.black.getter(v40);
  v42 = v52;
  *v52 = v32;
  v42[1] = 0;
  *((_WORD *)v42 + 8) = 1;
  v42[3] = result;
  return result;
}

uint64_t sub_10006C290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004EAC(&qword_1000CB6A0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v6);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v9 = sub_100004EAC(&qword_1000CB6A8);
  v10 = sub_10006BA58(v0, &v8[*(int *)(v9 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v10);
  v11 = sub_10000B254(&qword_1000CB6B0, &qword_1000CB6A0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibilityElement(children:)(v4, v5, v11);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_10000AE2C((uint64_t)v8, &qword_1000CB6A0);
}

void sub_10006C3C4()
{
  qword_1000D1DC0 = 0x4024000000000000;
}

uint64_t sub_10006C3D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD *, uint64_t);
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v59 = a1;
  v66 = a2;
  v2 = type metadata accessor for DynamicTypeSize(0);
  v61 = *(_QWORD *)(v2 - 8);
  v62 = v2;
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100004EAC(&qword_1000CB728);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v58 - v9;
  v60 = sub_100004EAC(&qword_1000CB730);
  __chkstk_darwin(v60);
  v12 = (char *)v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100004EAC(&qword_1000CB738);
  __chkstk_darwin(v63);
  v14 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100004EAC((uint64_t *)&unk_1000CB740);
  v15 = __chkstk_darwin(v64);
  v65 = (uint64_t)v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = static Alignment.center.getter(v15);
  v19 = v18;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  v8[40] = 1;
  v20 = &v8[*(int *)(v5 + 48)];
  *(_QWORD *)v20 = swift_getKeyPath(&unk_1000952E0);
  v21 = sub_100004EAC(&qword_1000C74D0);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  *v8 = 1;
  *((_QWORD *)v8 + 1) = v17;
  *((_QWORD *)v8 + 2) = v19;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  v8[40] = 1;
  sub_10006C7C8(v58[1], v59, &v8[*(int *)(v5 + 44)]);
  v22 = sub_10000AC80((uint64_t)v8, (uint64_t)v10, &qword_1000CB728);
  LOBYTE(v8) = static Edge.Set.bottom.getter(v22);
  type metadata accessor for IconTitleLabelStyle(0);
  v23 = sub_100046574(v4);
  DynamicTypeSize.isAccessibilitySize.getter(v23);
  v24 = v62;
  v25 = *(void (**)(_QWORD *, uint64_t))(v61 + 8);
  v25(v4, v62);
  v26 = EdgeInsets.init(_all:)(10.0);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_10000AD78((uint64_t)v10, (uint64_t)v12, &qword_1000CB728);
  v33 = &v12[*(int *)(v60 + 36)];
  *v33 = (char)v8;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  v34 = sub_10000AE2C((uint64_t)v10, &qword_1000CB728);
  v35 = static Edge.Set.top.getter(v34);
  v36 = sub_100046574(v4);
  LOBYTE(v17) = DynamicTypeSize.isAccessibilitySize.getter(v36);
  v25(v4, v24);
  v37 = 5.0;
  if ((v17 & 1) != 0)
    v37 = 10.0;
  v38 = EdgeInsets.init(_all:)(v37);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  sub_10000AD78((uint64_t)v12, (uint64_t)v14, &qword_1000CB730);
  v45 = &v14[*(int *)(v63 + 36)];
  *v45 = v35;
  *((double *)v45 + 1) = v38;
  *((_QWORD *)v45 + 2) = v40;
  *((_QWORD *)v45 + 3) = v42;
  *((_QWORD *)v45 + 4) = v44;
  v45[40] = 0;
  v46 = sub_10000AE2C((uint64_t)v12, &qword_1000CB730);
  v47 = static Edge.Set.horizontal.getter(v46);
  if (qword_1000C7490 != -1)
    swift_once(&qword_1000C7490, sub_10006C3C4);
  v48 = EdgeInsets.init(_all:)(*(double *)&qword_1000D1DC0);
  v50 = v49;
  v52 = v51;
  v54 = v53;
  v55 = v65;
  sub_10000AD78((uint64_t)v14, v65, &qword_1000CB738);
  v56 = v55 + *(int *)(v64 + 36);
  *(_BYTE *)v56 = v47;
  *(double *)(v56 + 8) = v48;
  *(_QWORD *)(v56 + 16) = v50;
  *(_QWORD *)(v56 + 24) = v52;
  *(_QWORD *)(v56 + 32) = v54;
  *(_BYTE *)(v56 + 40) = 0;
  sub_10000AE2C((uint64_t)v14, &qword_1000CB738);
  return sub_10000AC80(v55, v66, (uint64_t *)&unk_1000CB740);
}

uint64_t sub_10006C7C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t KeyPath;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  int *v73;
  char *v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  __int128 v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  _QWORD *v95;
  uint64_t v96;
  void (*v97)(_QWORD *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  char v102;
  __int128 v103;
  uint64_t v104;
  char v105;

  v95 = a3;
  v96 = a2;
  v4 = type metadata accessor for LabelStyleConfiguration.Title(0);
  v91 = *(_QWORD *)(v4 - 8);
  v92 = v4;
  __chkstk_darwin(v4);
  v89 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100004EAC(&qword_1000CA018);
  v6 = __chkstk_darwin(v90);
  v94 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v93 = (uint64_t)&v76 - v8;
  v86 = type metadata accessor for Image.Scale(0);
  v85 = *(_QWORD *)(v86 - 8);
  v9 = __chkstk_darwin(v86);
  v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v79 = (uint64_t)&v76 - v12;
  v78 = type metadata accessor for LabelStyleConfiguration.Icon(0);
  v13 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100004EAC(&qword_1000CA020);
  __chkstk_darwin(v77);
  v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100004EAC(&qword_1000CA028);
  __chkstk_darwin(v80);
  v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100004EAC((uint64_t *)&unk_1000CA030);
  __chkstk_darwin(v81);
  v84 = (uint64_t)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100004EAC(&qword_1000CA088);
  v21 = __chkstk_darwin(v82);
  v23 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v83 = (uint64_t)&v76 - v24;
  v25 = type metadata accessor for DynamicTypeSize(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (uint64_t *)((char *)&v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = *(int *)(type metadata accessor for IconTitleLabelStyle(0) + 20);
  *(_QWORD *)&v88 = a1;
  v98 = a1 + v29;
  v30 = sub_100046574(v28);
  v87 = DynamicTypeSize.isAccessibilitySize.getter(v30);
  v31 = *(void (**)(_QWORD *, uint64_t))(v26 + 8);
  v99 = v25;
  v97 = v31;
  v32 = ((uint64_t (*)(_QWORD *, uint64_t))v31)(v28, v25);
  LabelStyleConfiguration.icon.getter(v32);
  if (qword_1000C7448 != -1)
    swift_once(&qword_1000C7448, sub_1000421A8);
  v33 = qword_1000D1D00;
  v34 = v78;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v15, v78);
  *(_QWORD *)&v17[*(int *)(v77 + 36)] = v33;
  v35 = *(void (**)(char *, uint64_t))(v13 + 8);
  swift_retain(v33);
  v35(v15, v34);
  sub_100046574(v28);
  v36 = v85;
  v37 = v86;
  (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v11, enum case for Image.Scale.large(_:), v86);
  v38 = v79;
  sub_100050CA4((uint64_t)v11, v79);
  v39 = *(void (**)(char *, uint64_t))(v36 + 8);
  v39(v11, v37);
  v97(v28, v99);
  KeyPath = swift_getKeyPath(&unk_100095848);
  v41 = (uint64_t *)&v19[*(int *)(v80 + 36)];
  v42 = sub_100004EAC((uint64_t *)&unk_1000CB750);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))((char *)v41 + *(int *)(v42 + 28), v38, v37);
  *v41 = KeyPath;
  sub_10000AD78((uint64_t)v17, (uint64_t)v19, &qword_1000CA020);
  v39((char *)v38, v37);
  v43 = sub_10000AE2C((uint64_t)v17, &qword_1000CA020);
  LOBYTE(KeyPath) = static Edge.Set.vertical.getter(v43);
  v44 = EdgeInsets.init(_all:)(2.0);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  v51 = v84;
  sub_10000AD78((uint64_t)v19, v84, &qword_1000CA028);
  v52 = v51 + *(int *)(v81 + 36);
  *(_BYTE *)v52 = KeyPath;
  *(double *)(v52 + 8) = v44;
  *(_QWORD *)(v52 + 16) = v46;
  *(_QWORD *)(v52 + 24) = v48;
  *(_QWORD *)(v52 + 32) = v50;
  *(_BYTE *)(v52 + 40) = 0;
  sub_10000AE2C((uint64_t)v19, &qword_1000CA028);
  v53 = *(_QWORD *)(v88 + 16);
  v54 = *(_BYTE *)(v88 + 24);
  v100 = *(_OWORD *)v88;
  v101 = v53;
  v102 = v54;
  v55 = sub_100004EAC(&qword_1000CA090);
  Binding.projectedValue.getter(v55);
  v88 = v103;
  v56 = v104;
  v57 = v105;
  sub_10000AD78(v51, (uint64_t)v23, (uint64_t *)&unk_1000CA030);
  v58 = &v23[*(int *)(v82 + 36)];
  *(_OWORD *)v58 = v88;
  *((_QWORD *)v58 + 2) = v56;
  v58[24] = v57;
  sub_10000AE2C(v51, (uint64_t *)&unk_1000CA030);
  v59 = v83;
  v60 = sub_10000AC80((uint64_t)v23, v83, &qword_1000CA088);
  v61 = v89;
  LabelStyleConfiguration.title.getter(v60);
  v62 = (uint64_t)v23;
  if (qword_1000C7440 != -1)
    swift_once(&qword_1000C7440, sub_100042194);
  v63 = v87;
  v64 = (v87 & 1) == 0;
  v65 = qword_1000D1CF8;
  v66 = v91;
  v67 = v92;
  v68 = (uint64_t)v94;
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v94, v61, v92);
  *(_QWORD *)(v68 + *(int *)(v90 + 36)) = v65;
  v69 = *(void (**)(char *, uint64_t))(v66 + 8);
  swift_retain(v65);
  v69(v61, v67);
  v70 = v93;
  sub_10000AC80(v68, v93, &qword_1000CA018);
  v71 = sub_100046574(v28);
  LOBYTE(v67) = DynamicTypeSize.isAccessibilitySize.getter(v71);
  v97(v28, v99);
  sub_10000AD78(v59, v62, &qword_1000CA088);
  sub_10000AD78(v70, v68, &qword_1000CA018);
  v72 = v95;
  *v95 = 0;
  *((_BYTE *)v72 + 8) = v64;
  *((_BYTE *)v72 + 9) = v63 & 1;
  v73 = (int *)sub_100004EAC((uint64_t *)&unk_1000CB760);
  sub_10000AD78(v62, (uint64_t)v72 + v73[12], &qword_1000CA088);
  sub_10000AD78(v68, (uint64_t)v72 + v73[16], &qword_1000CA018);
  v74 = (char *)v72 + v73[20];
  *(_QWORD *)v74 = 0;
  v74[8] = 0;
  v74[9] = (v67 & 1) == 0;
  sub_10000AE2C(v70, &qword_1000CA018);
  sub_10000AE2C(v59, &qword_1000CA088);
  sub_10000AE2C(v68, &qword_1000CA018);
  return sub_10000AE2C(v62, &qword_1000CA088);
}

uint64_t sub_10006CF40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  double v42;
  double *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t KeyPath;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  double *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;

  v100 = a1;
  v1 = type metadata accessor for TransformBlendModifier(0);
  __chkstk_darwin(v1);
  v99 = (uint64_t *)((char *)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for ColorScheme(0);
  v97 = *(_QWORD *)(v3 - 8);
  v98 = v3;
  v4 = __chkstk_darwin(v3);
  v96 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v93 = (char *)&v77 - v6;
  v87 = type metadata accessor for DynamicTypeSize(0);
  v85 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v80 = (uint64_t *)((char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v84 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v84);
  v81 = (double *)((char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v88 = sub_100004EAC(&qword_1000CBCD0);
  __chkstk_darwin(v88);
  v82 = (uint64_t)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100004EAC(&qword_1000CBCD8);
  __chkstk_darwin(v91);
  v89 = (uint64_t)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100004EAC(&qword_1000CBCE0);
  __chkstk_darwin(v92);
  v90 = (uint64_t)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100004EAC(&qword_1000CBCE8);
  __chkstk_darwin(v95);
  v94 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for IconOnlyLabelStyle(0);
  v79 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v78 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004EAC(&qword_1000CBCF0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100004EAC(&qword_1000CBCF8);
  __chkstk_darwin(v23);
  v25 = (char *)&v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100004EAC((uint64_t *)&unk_1000CBD00);
  v26 = __chkstk_darwin(v86);
  v83 = (char *)&v77 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = ButtonStyleConfiguration.label.getter(v26);
  IconOnlyLabelStyle.init()(v28);
  v29 = sub_100005900(&qword_1000CA188, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
  v30 = sub_100005900(&qword_1000CBD10, (uint64_t (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for IconOnlyLabelStyle);
  View.labelStyle<A>(_:)(v15, v16, v13, v29, v30);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v15, v13);
  v31 = (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v18, v16);
  LOBYTE(v13) = static Edge.Set.all.getter(v31);
  v32 = EdgeInsets.init(_all:)(2.0);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v25, v22, v19);
  v39 = &v25[*(int *)(v23 + 36)];
  *v39 = v13;
  *((double *)v39 + 1) = v32;
  *((_QWORD *)v39 + 2) = v34;
  *((_QWORD *)v39 + 3) = v36;
  *((_QWORD *)v39 + 4) = v38;
  v39[40] = 0;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  type metadata accessor for TransformItemButton(0);
  v40 = v80;
  v41 = sub_100046574(v80);
  LOBYTE(v13) = DynamicTypeSize.isAccessibilitySize.getter(v41);
  (*(void (**)(_QWORD *, uint64_t))(v85 + 8))(v40, v87);
  if ((v13 & 1) != 0)
    v42 = 9.0;
  else
    v42 = 6.0;
  v43 = v81;
  v44 = (char *)v81 + *(int *)(v84 + 20);
  v45 = enum case for RoundedCornerStyle.continuous(_:);
  v46 = type metadata accessor for RoundedCornerStyle(0);
  v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v44, v45, v46);
  *v43 = v42;
  v43[1] = v42;
  v48 = static Color.white.getter(v47);
  v49 = v82;
  sub_100015184((uint64_t)v43, v82, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v50 = v88;
  *(_QWORD *)(v49 + *(int *)(v88 + 52)) = v48;
  *(_WORD *)(v49 + *(int *)(v50 + 56)) = 256;
  sub_1000151C8((uint64_t)v43, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v51 = v93;
  sub_100046760(v93);
  v52 = v96;
  v53 = v97;
  v54 = v98;
  (*(void (**)(char *, _QWORD, uint64_t))(v97 + 104))(v96, enum case for ColorScheme.light(_:), v98);
  v55 = v52;
  LOBYTE(v52) = static ColorScheme.== infix(_:_:)(v51, v52);
  v56 = *(void (**)(char *, uint64_t))(v53 + 8);
  v56(v55, v54);
  v56(v51, v54);
  if ((v52 & 1) != 0)
    v57 = 0.5;
  else
    v57 = 0.07;
  v58 = v89;
  sub_10000AD78(v49, v89, &qword_1000CBCD0);
  *(double *)(v58 + *(int *)(v91 + 36)) = v57;
  v59 = sub_10000AE2C(v49, &qword_1000CBCD0);
  v60 = static Color.black.getter(v59);
  v61 = Color.opacity(_:)(v60, 0.2);
  swift_release(v60, v62);
  v63 = v90;
  sub_10000AD78(v58, v90, &qword_1000CBCD8);
  v64 = v63 + *(int *)(v92 + 36);
  *(_QWORD *)v64 = v61;
  *(_OWORD *)(v64 + 8) = xmmword_100095AB0;
  *(_QWORD *)(v64 + 24) = 0x4000000000000000;
  sub_10000AE2C(v58, &qword_1000CBCD8);
  KeyPath = swift_getKeyPath(&unk_100095818);
  v66 = (uint64_t)v99;
  *v99 = KeyPath;
  v67 = sub_100004EAC(&qword_1000CA000);
  swift_storeEnumTagMultiPayload(v66, v67, 0);
  v68 = (uint64_t)v94;
  sub_100046A54(v66, (uint64_t)&v94[*(int *)(v95 + 36)], type metadata accessor for TransformBlendModifier);
  v69 = sub_10000AC80(v63, v68, &qword_1000CBCE0);
  v70 = static Alignment.center.getter(v69);
  v72 = v71;
  v73 = (uint64_t)v83;
  v74 = (uint64_t)&v83[*(int *)(v86 + 36)];
  sub_10000AD78(v68, v74, &qword_1000CBCE8);
  v75 = (uint64_t *)(v74 + *(int *)(sub_100004EAC(&qword_1000CBD18) + 36));
  *v75 = v70;
  v75[1] = v72;
  sub_10000AD78((uint64_t)v25, v73, &qword_1000CBCF8);
  sub_10000AE2C(v68, &qword_1000CBCE8);
  sub_10000AE2C((uint64_t)v25, &qword_1000CBCF8);
  return sub_10000AC80(v73, v100, (uint64_t *)&unk_1000CBD00);
}

uint64_t sub_10006D6E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v36 = a1;
  v41 = a2;
  v42 = sub_100004EAC(&qword_1000CBE20);
  v39 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v35 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100004EAC(&qword_1000CBE28);
  __chkstk_darwin(v37);
  v40 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for BlendMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100004EAC(&qword_1000CBE30);
  v8 = __chkstk_darwin(v38);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v35 - v11;
  v13 = type metadata accessor for ColorScheme(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v35 - v18;
  sub_100046760((char **)((char *)&v35 - v18));
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for ColorScheme.dark(_:), v13);
  v20 = static ColorScheme.== infix(_:_:)(v19, v17);
  v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v17, v13);
  v21(v19, v13);
  if ((v20 & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for BlendMode.plusLighter(_:), v4);
    v22 = v38;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(&v10[*(int *)(v38 + 36)], v7, v4);
    v23 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v10, v36, v42);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_10000AC80((uint64_t)v10, (uint64_t)v12, &qword_1000CBE30);
    v24 = (uint64_t)v40;
    sub_10000AD78((uint64_t)v12, (uint64_t)v40, &qword_1000CBE30);
    swift_storeEnumTagMultiPayload(v24, v37, 0);
    v25 = sub_100073FE8();
    v26 = sub_10000B254(&qword_1000CBE40, &qword_1000CBE20, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v24, v22, v23, v25, v26);
    return sub_10000AE2C((uint64_t)v12, &qword_1000CBE30);
  }
  else
  {
    v28 = v39;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
    v30 = v35;
    v31 = v42;
    v29(v35, v36, v42);
    v32 = (uint64_t)v40;
    v29(v40, (uint64_t)v30, v31);
    swift_storeEnumTagMultiPayload(v32, v37, 1);
    v33 = sub_100073FE8();
    v34 = sub_10000B254(&qword_1000CBE40, &qword_1000CBE20, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v32, v38, v31, v33, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v30, v31);
  }
}

uint64_t sub_10006DA70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;

  v28 = a2;
  v3 = sub_100004EAC(&qword_1000CBD20);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004EAC(&qword_1000CBD28);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004EAC(&qword_1000CBD30);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100095970);
  v14 = sub_100004EAC(&qword_1000CBD38);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v5, a1, v14);
  v16 = &v5[*(int *)(v3 + 36)];
  *(_QWORD *)v16 = KeyPath;
  v16[8] = 1;
  v17 = static Font.caption.getter(v15);
  v18 = swift_getKeyPath(&unk_1000959A0);
  sub_10000AD78((uint64_t)v5, (uint64_t)v8, &qword_1000CBD20);
  v19 = (uint64_t *)&v8[*(int *)(v6 + 36)];
  *v19 = v18;
  v19[1] = v17;
  v20 = sub_10000AE2C((uint64_t)v5, &qword_1000CBD20);
  v21 = static Font.Weight.medium.getter(v20);
  v22 = sub_100073BF4();
  View.fontWeight(_:)(*(_QWORD *)&v21, 0, v6, v22);
  sub_10000AE2C((uint64_t)v8, &qword_1000CBD28);
  if (qword_1000C7440 != -1)
    swift_once(&qword_1000C7440, sub_100042194);
  v23 = qword_1000D1CF8;
  v24 = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v28, v12, v9);
  *(_QWORD *)(v24 + *(int *)(sub_100004EAC(&qword_1000CBD68) + 36)) = v23;
  v25 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  swift_retain(v23);
  return v25(v12, v9);
}

uint64_t sub_10006DCA8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10006DD78(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000071D0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000071D0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10000AFA4(v12);
  return v7;
}

uint64_t sub_10006DD78(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10006DF30(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

uint64_t sub_10006DF30(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10006DFC4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10006E19C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10006E19C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10006DFC4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10006E138(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10006E138(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100004EAC(&qword_1000CBBD8);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10006E19C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004EAC(&qword_1000CBBD8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t _s21WritingToolsUIService15CompositionModeO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 1)
  {
    if (a4 == 1)
      return 1;
  }
  else if (a4 != 1)
  {
    if (a2)
    {
      if (a4 && (a1 == a3 && a2 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0) & 1) != 0))
        return 1;
    }
    else
    {
      if (!a4)
        return 1;
      sub_10000A8A0(a1, 0);
    }
  }
  return 0;
}

BOOL _s21WritingToolsUIService4ModeO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 == 1)
    {
      if (a8 == 1)
      {
        if (a2 == 1)
          return a6 == 1;
        if (a6 != 1)
        {
          if (a2)
          {
            if (a6)
            {
              if (a1 == a5 && a2 == a6)
                return 1;
              v8 = a5;
              v9 = a6;
              return (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v8, v9, 0) & 1) != 0;
            }
          }
          else
          {
            if (!a6)
              return 1;
            sub_10000A880(a1, 0, a3, 1);
          }
        }
      }
    }
    else
    {
      if (!(a3 | a2 | a1))
        return a8 == 2 && !(a7 | a6 | a5);
      if (a1 != 1 || a3 | a2)
      {
        if (a8 != 2 || a5 != 2)
          return 0;
      }
      else if (a8 != 2 || a5 != 1)
      {
        return 0;
      }
      if (!(a7 | a6))
        return 1;
    }
  }
  else
  {
    if (a8 || a5 != a1)
      return 0;
    if (a3)
    {
      if (a7)
      {
        if (a2 == a6 && a3 == a7)
          return 1;
        a1 = a2;
        a2 = a3;
        v8 = a6;
        v9 = a7;
        return (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v8, v9, 0) & 1) != 0;
      }
    }
    else if (!a7)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t type metadata accessor for WritingToolsView(uint64_t a1)
{
  return sub_1000469DC(a1, (uint64_t *)&unk_1000CB478, (uint64_t)&nominal type descriptor for WritingToolsView);
}

uint64_t sub_10006E4B4()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_10006E4D8()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_10006E504()
{
  return sub_100020FE0();
}

uint64_t sub_10006E520@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100062AC4(a1, (uint64_t)&unk_100095390, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__isForEditableContent, a2);
}

uint64_t sub_10006E548()
{
  uint64_t v0;

  return sub_1000244D8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10006E56C()
{
  uint64_t v0;

  return sub_100024828(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10006E584@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100062AC4(a1, (uint64_t)&unk_1000953E0, &OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__wantsInlineEditing, a2);
}

uint64_t sub_10006E5AC()
{
  uint64_t v0;

  return sub_100024578(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10006E5C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100064708(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10006E5D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB2E8;
  if (!qword_1000CB2E8)
  {
    v1 = sub_10000ABD0(&qword_1000CB2E0);
    sub_10006E654();
    sub_10000B254(&qword_1000CB3D0, (uint64_t *)&unk_1000CB3D8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB2E8);
  }
  return result;
}

unint64_t sub_10006E654()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB2F0;
  if (!qword_1000CB2F0)
  {
    v1 = sub_10000ABD0(&qword_1000CB2F8);
    sub_10006E6C0();
    sub_10006EAF4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB2F0);
  }
  return result;
}

unint64_t sub_10006E6C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB300;
  if (!qword_1000CB300)
  {
    v1 = sub_10000ABD0(&qword_1000CB308);
    sub_10006E72C();
    sub_10006E878();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB300);
  }
  return result;
}

unint64_t sub_10006E72C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB310;
  if (!qword_1000CB310)
  {
    v1 = sub_10000ABD0(&qword_1000CB318);
    sub_10006E798();
    sub_10006E834();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB310);
  }
  return result;
}

unint64_t sub_10006E798()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB320;
  if (!qword_1000CB320)
  {
    v1 = sub_10000ABD0(&qword_1000CB328);
    sub_100005900((unint64_t *)&unk_1000CB330, type metadata accessor for ProofreadingView, (uint64_t)&protocol conformance descriptor for ProofreadingView);
    sub_100005900(&qword_1000C78B8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB320);
  }
  return result;
}

unint64_t sub_10006E834()
{
  unint64_t result;

  result = qword_1000CB340;
  if (!qword_1000CB340)
  {
    result = swift_getWitnessTable(&unk_100093EB8, &type metadata for AlignToTopModifier);
    atomic_store(result, (unint64_t *)&qword_1000CB340);
  }
  return result;
}

unint64_t sub_10006E878()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB348;
  if (!qword_1000CB348)
  {
    v1 = sub_10000ABD0(&qword_1000CB350);
    sub_10006E8E4();
    sub_10006E9EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB348);
  }
  return result;
}

unint64_t sub_10006E8E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB358;
  if (!qword_1000CB358)
  {
    v1 = sub_10000ABD0(&qword_1000CB360);
    sub_10006E950();
    sub_10006E834();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB358);
  }
  return result;
}

unint64_t sub_10006E950()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB368;
  if (!qword_1000CB368)
  {
    v1 = sub_10000ABD0(&qword_1000CB370);
    sub_100005900(&qword_1000CB378, type metadata accessor for RewritingView, (uint64_t)&protocol conformance descriptor for RewritingView);
    sub_100005900(&qword_1000C78B8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB368);
  }
  return result;
}

unint64_t sub_10006E9EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB380;
  if (!qword_1000CB380)
  {
    v1 = sub_10000ABD0(&qword_1000CB388);
    sub_10006EA58();
    sub_10006E834();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB380);
  }
  return result;
}

unint64_t sub_10006EA58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB390;
  if (!qword_1000CB390)
  {
    v1 = sub_10000ABD0(&qword_1000CB398);
    sub_100005900(&qword_1000CB3A0, type metadata accessor for ModelResponseView, (uint64_t)&protocol conformance descriptor for ModelResponseView);
    sub_100005900(&qword_1000C78B8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB390);
  }
  return result;
}

unint64_t sub_10006EAF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB3A8;
  if (!qword_1000CB3A8)
  {
    v1 = sub_10000ABD0(&qword_1000CB3B0);
    sub_10006EB60();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB3A8);
  }
  return result;
}

unint64_t sub_10006EB60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB3B8;
  if (!qword_1000CB3B8)
  {
    v1 = sub_10000ABD0((uint64_t *)&unk_1000CB3C0);
    sub_100005900(&qword_1000C97B8, type metadata accessor for QuestionnaireView, (uint64_t)&unk_100094F08);
    sub_10006E834();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB3B8);
  }
  return result;
}

double sub_10006EBE4@<D0>(_OWORD *a1@<X8>)
{
  unint64_t v2;
  double result;
  __int128 v4;

  v2 = sub_100071C50();
  EnvironmentValues.subscript.getter(&v4, &type metadata for NavigationDestinationEnvironmentKey, &type metadata for NavigationDestinationEnvironmentKey, v2);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t sub_10006EC38(__int128 *a1)
{
  type metadata accessor for WritingToolsView(0);
  return sub_10006B6D4(a1);
}

unint64_t sub_10006EC88()
{
  unint64_t result;

  result = qword_1000CB3F0;
  if (!qword_1000CB3F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CompositionMode, &type metadata for CompositionMode);
    atomic_store(result, (unint64_t *)&qword_1000CB3F0);
  }
  return result;
}

unint64_t sub_10006ECD0()
{
  unint64_t result;

  result = qword_1000CB3F8;
  if (!qword_1000CB3F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RewriteType, &type metadata for RewriteType);
    atomic_store(result, (unint64_t *)&qword_1000CB3F8);
  }
  return result;
}

unint64_t sub_10006ED18()
{
  unint64_t result;

  result = qword_1000CB400;
  if (!qword_1000CB400)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Mode, &type metadata for Mode);
    atomic_store(result, (unint64_t *)&qword_1000CB400);
  }
  return result;
}

uint64_t sub_10006ED5C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of WritingToolsView.body>>, 1);
}

unint64_t destroy for CompositionMode(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

_QWORD *_s21WritingToolsUIService15CompositionModeOwCP_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = a2[1];
  if ((int)v4 - 1 < 0)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_bridgeObjectRetain(v3);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

_QWORD *assignWithCopy for CompositionMode(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;

  v4 = a1[1];
  LODWORD(v5) = -1;
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = a1[1];
  v7 = v6 - 1;
  if (a2[1] < 0xFFFFFFFFuLL)
    v5 = a2[1];
  v8 = v5 - 1;
  if (v7 < 0)
  {
    if (v8 < 0)
    {
      *a1 = *a2;
      v11 = a2[1];
      a1[1] = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v4);
      return a1;
    }
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_11;
  }
  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  v9 = a2[1];
  a1[1] = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

_QWORD *assignWithTake for CompositionMode(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 1 < 0)
  {
    v6 = a2[1];
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF)
      v7 = a2[1];
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRelease(v4);
      return a1;
    }
    swift_bridgeObjectRelease(v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for CompositionMode(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CompositionMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_10006EFAC(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_10006EFD0(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = a2 - 0x7FFFFFFF;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompositionMode()
{
  return &type metadata for CompositionMode;
}

uint64_t storeEnumTagSinglePayload for RewriteType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10006F058 + 4 * byte_100095269[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10006F08C + 4 * byte_100095264[v4]))();
}

uint64_t sub_10006F08C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006F094(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006F09CLL);
  return result;
}

uint64_t sub_10006F0A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006F0B0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10006F0B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006F0BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RewriteType()
{
  return &type metadata for RewriteType;
}

uint64_t destroy for Mode(uint64_t a1)
{
  return sub_10000A880(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for Mode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_10000B060(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for Mode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_10000B060(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_10000A880(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for Mode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_10000A880(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Mode(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Mode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_10006F290(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 1u)
    return *(unsigned __int8 *)(a1 + 24);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_10006F2A8(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    LOBYTE(a2) = 2;
    *(_QWORD *)result = v2;
  }
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Mode()
{
  return &type metadata for Mode;
}

uint64_t initializeBufferWithCopyOfBuffer for WritingToolsView(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v56 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v56 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v56);
  }
  else
  {
    v7 = *a2;
    v8 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v8;
    swift_retain(v7);
    swift_unknownObjectWeakCopyInit(a1 + 16, a2 + 2);
    v9 = a2[3];
    v10 = a2[4];
    v11 = a2[5];
    v12 = *((_BYTE *)a2 + 48);
    sub_10000B060(v9, v10, v11, v12);
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v11;
    *(_BYTE *)(a1 + 48) = v12;
    v14 = (void *)a2[7];
    v13 = a2[8];
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v13;
    v15 = a2[9];
    v16 = (void *)a2[10];
    *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
    *(_QWORD *)(a1 + 96) = a2[12];
    v17 = a3[13];
    v18 = a1 + v17;
    v19 = (uint64_t)a2 + v17;
    *(_QWORD *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 80) = v16;
    v20 = type metadata accessor for NavigationPath(0);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v22 = v14;
    swift_bridgeObjectRetain(v15);
    v23 = v16;
    v21(v18, v19, v20);
    v24 = *(int *)(sub_100004EAC(&qword_1000CB2D8) + 28);
    v25 = *(_QWORD *)(v19 + v24);
    *(_QWORD *)(v18 + v24) = v25;
    v26 = a3[14];
    v27 = a3[15];
    v28 = (_QWORD *)(a1 + v26);
    v29 = (uint64_t *)((char *)a2 + v26);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = v29[2];
    v28[2] = v31;
    v32 = a1 + v27;
    v33 = (uint64_t)a2 + v27;
    *(_BYTE *)v32 = *(_BYTE *)v33;
    v34 = *(_QWORD *)(v33 + 8);
    *(_QWORD *)(v32 + 8) = v34;
    v35 = a3[16];
    v36 = a3[17];
    v37 = (uint64_t *)(a1 + v35);
    v38 = (uint64_t *)((char *)a2 + v35);
    v39 = *v38;
    v40 = v38[1];
    *v37 = *v38;
    v37[1] = v40;
    v41 = (uint64_t *)(a1 + v36);
    v42 = (uint64_t *)((char *)a2 + v36);
    v71 = *v42;
    v72 = v42[1];
    *v41 = *v42;
    v41[1] = v72;
    v43 = a3[18];
    v44 = a3[19];
    v45 = a1 + v43;
    v46 = (uint64_t)a2 + v43;
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
    v47 = *(_QWORD *)(v46 + 16);
    *(_QWORD *)(v45 + 16) = v47;
    v48 = a1 + v44;
    v49 = (uint64_t)a2 + v44;
    *(_BYTE *)v48 = *(_BYTE *)v49;
    v50 = *(_QWORD *)(v49 + 8);
    *(_QWORD *)(v48 + 8) = v50;
    v51 = a3[20];
    v73 = (uint64_t *)(a1 + v51);
    v70 = (uint64_t *)((char *)a2 + v51);
    swift_retain(v25);
    swift_bridgeObjectRetain(v30);
    swift_retain(v31);
    swift_retain(v34);
    swift_retain(v39);
    swift_retain(v40);
    swift_retain(v71);
    swift_retain(v72);
    swift_retain(v47);
    swift_retain(v50);
    v52 = sub_100004EAC(&qword_1000C74D0);
    if (swift_getEnumCaseMultiPayload(v70, v52) == 1)
    {
      v53 = type metadata accessor for DynamicTypeSize(0);
      v54 = v73;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v73, v70, v53);
      v55 = 1;
    }
    else
    {
      v57 = *v70;
      v54 = v73;
      *v73 = *v70;
      swift_retain(v57);
      v55 = 0;
    }
    swift_storeEnumTagMultiPayload(v54, v52, v55);
    v58 = a3[21];
    v59 = (uint64_t *)(a1 + v58);
    v60 = (uint64_t *)((char *)a2 + v58);
    v61 = sub_100004EAC(&qword_1000C74D8);
    if (swift_getEnumCaseMultiPayload(v60, v61) == 1)
    {
      v62 = type metadata accessor for UserInterfaceSizeClass(0);
      v63 = *(_QWORD *)(v62 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v63 + 48))(v60, 1, v62))
      {
        v64 = sub_100004EAC((uint64_t *)&unk_1000CB408);
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v63 + 16))(v59, v60, v62);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v59, 0, 1, v62);
      }
      v66 = v59;
      v67 = v61;
      v68 = 1;
    }
    else
    {
      v65 = *v60;
      *v59 = *v60;
      swift_retain(v65);
      v66 = v59;
      v67 = v61;
      v68 = 0;
    }
    swift_storeEnumTagMultiPayload(v66, v67, v68);
  }
  return a1;
}

uint64_t destroy for WritingToolsView(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;

  swift_release(*(_QWORD *)a1, a2);
  swift_unknownObjectWeakDestroy(a1 + 16);
  sub_10000A880(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v4 = a1 + a2[13];
  v5 = type metadata accessor for NavigationPath(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = sub_100004EAC(&qword_1000CB2D8);
  swift_release(*(_QWORD *)(v4 + *(int *)(v6 + 28)), v7);
  v8 = a1 + a2[14];
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
  swift_release(*(_QWORD *)(v8 + 16), v9);
  swift_release(*(_QWORD *)(a1 + a2[15] + 8), v10);
  v11 = (_QWORD *)(a1 + a2[16]);
  swift_release(*v11, v12);
  swift_release(v11[1], v13);
  v14 = (_QWORD *)(a1 + a2[17]);
  swift_release(*v14, v15);
  swift_release(v14[1], v16);
  swift_release(*(_QWORD *)(a1 + a2[18] + 16), v17);
  swift_release(*(_QWORD *)(a1 + a2[19] + 8), v18);
  v19 = (_QWORD *)(a1 + a2[20]);
  v20 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v22 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v19, v22);
  }
  else
  {
    swift_release(*v19, v21);
  }
  v23 = (_QWORD *)(a1 + a2[21]);
  v24 = sub_100004EAC(&qword_1000C74D8);
  if (swift_getEnumCaseMultiPayload(v23, v24) != 1)
    return swift_release(*v23, v25);
  v26 = type metadata accessor for UserInterfaceSizeClass(0);
  v27 = *(_QWORD *)(v26 - 8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v23, 1, v26);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v27 + 8))(v23, v26);
  return result;
}

uint64_t initializeWithCopy for WritingToolsView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  int *v71;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a2 + 2;
  swift_retain(v6);
  swift_unknownObjectWeakCopyInit(a1 + 16, v8);
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v12 = *((_BYTE *)a2 + 48);
  sub_10000B060(v9, v10, v11, v12);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = v12;
  v14 = (void *)a2[7];
  v13 = a2[8];
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = v13;
  v15 = a2[9];
  v16 = (void *)a2[10];
  *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
  *(_QWORD *)(a1 + 96) = a2[12];
  v17 = a3[13];
  v18 = a1 + v17;
  v19 = (uint64_t)a2 + v17;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v16;
  v20 = type metadata accessor for NavigationPath(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  v22 = v14;
  swift_bridgeObjectRetain(v15);
  v23 = v16;
  v21(v18, v19, v20);
  v24 = *(int *)(sub_100004EAC(&qword_1000CB2D8) + 28);
  v25 = *(_QWORD *)(v19 + v24);
  *(_QWORD *)(v18 + v24) = v25;
  v26 = a3[14];
  v27 = a3[15];
  v28 = (_QWORD *)(a1 + v26);
  v29 = (uint64_t *)((char *)a2 + v26);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = v29[2];
  v28[2] = v31;
  v32 = a1 + v27;
  v33 = (uint64_t)a2 + v27;
  *(_BYTE *)v32 = *(_BYTE *)v33;
  v34 = *(_QWORD *)(v33 + 8);
  *(_QWORD *)(v32 + 8) = v34;
  v35 = a3[16];
  v36 = a3[17];
  v37 = (uint64_t *)(a1 + v35);
  v38 = (uint64_t *)((char *)a2 + v35);
  v40 = *v38;
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v41 = (uint64_t *)(a1 + v36);
  v42 = (uint64_t *)((char *)a2 + v36);
  v68 = *v42;
  v69 = v42[1];
  *v41 = *v42;
  v41[1] = v69;
  v43 = a3[18];
  v44 = a3[19];
  v45 = a1 + v43;
  v46 = (uint64_t)a2 + v43;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  v47 = *(_QWORD *)(v46 + 16);
  *(_QWORD *)(v45 + 16) = v47;
  v48 = a1 + v44;
  v49 = (uint64_t)a2 + v44;
  *(_BYTE *)v48 = *(_BYTE *)v49;
  v50 = *(_QWORD *)(v49 + 8);
  *(_QWORD *)(v48 + 8) = v50;
  v51 = a3[20];
  v70 = (uint64_t *)(a1 + v51);
  v71 = a3;
  v52 = (uint64_t *)((char *)a2 + v51);
  swift_retain(v25);
  swift_bridgeObjectRetain(v30);
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v40);
  swift_retain(v39);
  swift_retain(v68);
  swift_retain(v69);
  swift_retain(v47);
  swift_retain(v50);
  v53 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v52, v53) == 1)
  {
    v54 = type metadata accessor for DynamicTypeSize(0);
    v55 = v70;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v70, v52, v54);
    v56 = 1;
  }
  else
  {
    v57 = *v52;
    v55 = v70;
    *v70 = *v52;
    swift_retain(v57);
    v56 = 0;
  }
  swift_storeEnumTagMultiPayload(v55, v53, v56);
  v58 = v71[21];
  v59 = (uint64_t *)(a1 + v58);
  v60 = (uint64_t *)((char *)a2 + v58);
  v61 = sub_100004EAC(&qword_1000C74D8);
  if (swift_getEnumCaseMultiPayload(v60, v61) == 1)
  {
    v62 = type metadata accessor for UserInterfaceSizeClass(0);
    v63 = *(_QWORD *)(v62 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v63 + 48))(v60, 1, v62))
    {
      v64 = sub_100004EAC((uint64_t *)&unk_1000CB408);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      v65 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v63 + 16))(v59, v60, v62);
      v65 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v59, 0, 1, v62);
    }
  }
  else
  {
    v66 = *v60;
    *v59 = *v60;
    swift_retain(v66);
    v65 = 0;
  }
  swift_storeEnumTagMultiPayload(v59, v61, v65);
  return a1;
}

uint64_t *assignWithCopy for WritingToolsView(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8, v9);
  swift_unknownObjectWeakCopyAssign(a1 + 2, a2 + 2);
  v10 = a2[3];
  v11 = a2[4];
  v12 = a2[5];
  v13 = *((_BYTE *)a2 + 48);
  sub_10000B060(v10, v11, v12, v13);
  v14 = a1[3];
  v15 = a1[4];
  v16 = a1[5];
  a1[3] = v10;
  a1[4] = v11;
  a1[5] = v12;
  v17 = *((_BYTE *)a1 + 48);
  *((_BYTE *)a1 + 48) = v13;
  sub_10000A880(v14, v15, v16, v17);
  v18 = (void *)a2[7];
  v19 = (void *)a1[7];
  a1[7] = (uint64_t)v18;
  v20 = v18;

  a1[8] = a2[8];
  v21 = a2[9];
  v22 = a1[9];
  a1[9] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = (void *)a1[10];
  v24 = (void *)a2[10];
  a1[10] = (uint64_t)v24;
  v25 = v24;

  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a1 + 89) = *((_BYTE *)a2 + 89);
  a1[12] = a2[12];
  v26 = a3[13];
  v27 = (uint64_t)a1 + v26;
  v28 = (uint64_t)a2 + v26;
  v29 = type metadata accessor for NavigationPath(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  v30 = *(int *)(sub_100004EAC(&qword_1000CB2D8) + 28);
  v31 = *(_QWORD *)(v27 + v30);
  v32 = *(_QWORD *)(v28 + v30);
  *(_QWORD *)(v27 + v30) = v32;
  swift_retain(v32);
  swift_release(v31, v33);
  v34 = a3[14];
  v35 = (uint64_t *)((char *)a1 + v34);
  v36 = (uint64_t)a2 + v34;
  *v35 = *(uint64_t *)((char *)a2 + v34);
  v37 = *(uint64_t *)((char *)a2 + v34 + 8);
  v38 = *(uint64_t *)((char *)a1 + v34 + 8);
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v39 = v35[2];
  v40 = *(_QWORD *)(v36 + 16);
  v35[2] = v40;
  swift_retain(v40);
  swift_release(v39, v41);
  v42 = a3[15];
  v43 = (uint64_t)a1 + v42;
  v44 = (uint64_t)a2 + v42;
  *(_BYTE *)v43 = *(_BYTE *)v44;
  v45 = *(_QWORD *)(v43 + 8);
  v46 = *(_QWORD *)(v44 + 8);
  *(_QWORD *)(v43 + 8) = v46;
  swift_retain(v46);
  swift_release(v45, v47);
  v48 = a3[16];
  v49 = (uint64_t)a1 + v48;
  v50 = (uint64_t)a2 + v48;
  v51 = *(uint64_t *)((char *)a2 + v48);
  v52 = *(uint64_t *)((char *)a1 + v48);
  *(uint64_t *)((char *)a1 + v48) = v51;
  swift_retain(v51);
  swift_release(v52, v53);
  v54 = *(_QWORD *)(v49 + 8);
  v55 = *(_QWORD *)(v50 + 8);
  *(_QWORD *)(v49 + 8) = v55;
  swift_retain(v55);
  swift_release(v54, v56);
  v57 = a3[17];
  v58 = (uint64_t)a1 + v57;
  v59 = (uint64_t)a2 + v57;
  v60 = *(uint64_t *)((char *)a2 + v57);
  v61 = *(uint64_t *)((char *)a1 + v57);
  *(uint64_t *)((char *)a1 + v57) = v60;
  swift_retain(v60);
  swift_release(v61, v62);
  v63 = *(_QWORD *)(v58 + 8);
  v64 = *(_QWORD *)(v59 + 8);
  *(_QWORD *)(v58 + 8) = v64;
  swift_retain(v64);
  swift_release(v63, v65);
  v66 = a3[18];
  v67 = (uint64_t)a1 + v66;
  v68 = (uint64_t *)((char *)a2 + v66);
  v69 = *v68;
  *(_BYTE *)(v67 + 8) = *((_BYTE *)v68 + 8);
  *(_QWORD *)v67 = v69;
  v70 = *(_QWORD *)(v67 + 16);
  v71 = v68[2];
  *(_QWORD *)(v67 + 16) = v71;
  swift_retain(v71);
  swift_release(v70, v72);
  v73 = a3[19];
  v74 = (uint64_t)a1 + v73;
  v75 = (uint64_t)a2 + v73;
  *(_BYTE *)v74 = *(_BYTE *)v75;
  v76 = *(_QWORD *)(v74 + 8);
  v77 = *(_QWORD *)(v75 + 8);
  *(_QWORD *)(v74 + 8) = v77;
  swift_retain(v77);
  swift_release(v76, v78);
  if (a1 != a2)
  {
    v79 = a3[20];
    v80 = (uint64_t *)((char *)a1 + v79);
    v81 = (uint64_t *)((char *)a2 + v79);
    sub_10000AE2C((uint64_t)a1 + v79, &qword_1000C74D0);
    v82 = sub_100004EAC(&qword_1000C74D0);
    if (swift_getEnumCaseMultiPayload(v81, v82) == 1)
    {
      v83 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v80, v81, v83);
      v84 = 1;
    }
    else
    {
      v85 = *v81;
      *v80 = *v81;
      swift_retain(v85);
      v84 = 0;
    }
    swift_storeEnumTagMultiPayload(v80, v82, v84);
    v86 = a3[21];
    v87 = (uint64_t *)((char *)a1 + v86);
    v88 = (uint64_t *)((char *)a2 + v86);
    sub_10000AE2C((uint64_t)a1 + v86, &qword_1000C74D8);
    v89 = sub_100004EAC(&qword_1000C74D8);
    if (swift_getEnumCaseMultiPayload(v88, v89) == 1)
    {
      v90 = type metadata accessor for UserInterfaceSizeClass(0);
      v91 = *(_QWORD *)(v90 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v91 + 48))(v88, 1, v90))
      {
        v92 = sub_100004EAC((uint64_t *)&unk_1000CB408);
        memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
        v93 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v91 + 16))(v87, v88, v90);
        v93 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v87, 0, 1, v90);
      }
    }
    else
    {
      v94 = *v88;
      *v87 = *v88;
      swift_retain(v94);
      v93 = 0;
    }
    swift_storeEnumTagMultiPayload(v87, v89, v93);
  }
  return a1;
}

uint64_t initializeWithTake for WritingToolsView(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_unknownObjectWeakTakeInit(a1 + 16, a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v7 = a3[13];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 64) = v6;
  v10 = type metadata accessor for NavigationPath(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = sub_100004EAC(&qword_1000CB2D8);
  *(_QWORD *)(v8 + *(int *)(v11 + 28)) = *(_QWORD *)(v9 + *(int *)(v11 + 28));
  v12 = a3[14];
  v13 = a3[15];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  v16 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  v17 = a3[18];
  v18 = a3[19];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  v21 = a3[20];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  v24 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
    swift_storeEnumTagMultiPayload(v22, v24, 1);
  }
  else
  {
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  v26 = a3[21];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  v29 = sub_100004EAC(&qword_1000C74D8);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for UserInterfaceSizeClass(0);
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v28, 1, v30))
    {
      v32 = sub_100004EAC((uint64_t *)&unk_1000CB408);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v27, v28, v30);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v30);
    }
    swift_storeEnumTagMultiPayload(v27, v29, 1);
  }
  else
  {
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  return a1;
}

uint64_t *assignWithTake for WritingToolsView(uint64_t *a1, uint64_t *a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7, a2);
  swift_unknownObjectWeakTakeAssign(a1 + 2, a2 + 2);
  v8 = a2[5];
  v9 = *((_BYTE *)a2 + 48);
  v10 = a1[3];
  v11 = a1[4];
  v12 = a1[5];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = v8;
  v13 = *((_BYTE *)a1 + 48);
  *((_BYTE *)a1 + 48) = v9;
  sub_10000A880(v10, v11, v12, v13);
  v14 = (void *)a1[7];
  a1[7] = a2[7];

  v15 = a2[9];
  v16 = a1[9];
  a1[8] = a2[8];
  a1[9] = v15;
  swift_bridgeObjectRelease(v16);
  v17 = (void *)a1[10];
  a1[10] = a2[10];

  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a1 + 89) = *((_BYTE *)a2 + 89);
  a1[12] = a2[12];
  v18 = a3[13];
  v19 = (uint64_t)a1 + v18;
  v20 = (uint64_t)a2 + v18;
  v21 = type metadata accessor for NavigationPath(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  v22 = *(int *)(sub_100004EAC(&qword_1000CB2D8) + 28);
  v23 = *(_QWORD *)(v19 + v22);
  *(_QWORD *)(v19 + v22) = *(_QWORD *)(v20 + v22);
  swift_release(v23, v24);
  v25 = a3[14];
  v26 = (uint64_t *)((char *)a1 + v25);
  v27 = (uint64_t)a2 + v25;
  v28 = *(uint64_t *)((char *)a2 + v25 + 8);
  v29 = *(uint64_t *)((char *)a1 + v25 + 8);
  *v26 = *(uint64_t *)((char *)a2 + v25);
  v26[1] = v28;
  swift_bridgeObjectRelease(v29);
  v30 = v26[2];
  v26[2] = *(_QWORD *)(v27 + 16);
  swift_release(v30, v31);
  v32 = a3[15];
  v33 = (uint64_t)a1 + v32;
  v34 = (uint64_t)a2 + v32;
  *(_BYTE *)v33 = *(_BYTE *)v34;
  v35 = *(_QWORD *)(v33 + 8);
  *(_QWORD *)(v33 + 8) = *(_QWORD *)(v34 + 8);
  swift_release(v35, v36);
  v37 = a3[16];
  v38 = (uint64_t)a1 + v37;
  v39 = (uint64_t)a2 + v37;
  v40 = *(uint64_t *)((char *)a1 + v37);
  *(uint64_t *)((char *)a1 + v37) = *(uint64_t *)((char *)a2 + v37);
  swift_release(v40, v41);
  v42 = *(_QWORD *)(v38 + 8);
  *(_QWORD *)(v38 + 8) = *(_QWORD *)(v39 + 8);
  swift_release(v42, v43);
  v44 = a3[17];
  v45 = (uint64_t)a1 + v44;
  v46 = (uint64_t)a2 + v44;
  v47 = *(uint64_t *)((char *)a1 + v44);
  *(uint64_t *)((char *)a1 + v44) = *(uint64_t *)((char *)a2 + v44);
  swift_release(v47, v48);
  v49 = *(_QWORD *)(v45 + 8);
  *(_QWORD *)(v45 + 8) = *(_QWORD *)(v46 + 8);
  swift_release(v49, v50);
  v51 = a3[18];
  v52 = (uint64_t)a1 + v51;
  v53 = (uint64_t)a2 + v51;
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *(_BYTE *)(v52 + 8) = *(_BYTE *)(v53 + 8);
  v54 = *(_QWORD *)(v52 + 16);
  *(_QWORD *)(v52 + 16) = *(_QWORD *)(v53 + 16);
  swift_release(v54, v55);
  v56 = a3[19];
  v57 = (uint64_t)a1 + v56;
  v58 = (uint64_t)a2 + v56;
  *(_BYTE *)v57 = *(_BYTE *)v58;
  v59 = *(_QWORD *)(v57 + 8);
  *(_QWORD *)(v57 + 8) = *(_QWORD *)(v58 + 8);
  swift_release(v59, v60);
  if (a1 != a2)
  {
    v61 = a3[20];
    v62 = (char *)a1 + v61;
    v63 = (char *)a2 + v61;
    sub_10000AE2C((uint64_t)a1 + v61, &qword_1000C74D0);
    v64 = sub_100004EAC(&qword_1000C74D0);
    if (swift_getEnumCaseMultiPayload(v63, v64) == 1)
    {
      v65 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v62, v63, v65);
      swift_storeEnumTagMultiPayload(v62, v64, 1);
    }
    else
    {
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    v66 = a3[21];
    v67 = (char *)a1 + v66;
    v68 = (char *)a2 + v66;
    sub_10000AE2C((uint64_t)a1 + v66, &qword_1000C74D8);
    v69 = sub_100004EAC(&qword_1000C74D8);
    if (swift_getEnumCaseMultiPayload(v68, v69) == 1)
    {
      v70 = type metadata accessor for UserInterfaceSizeClass(0);
      v71 = *(_QWORD *)(v70 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v68, 1, v70))
      {
        v72 = sub_100004EAC((uint64_t *)&unk_1000CB408);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v67, v68, v70);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v67, 0, 1, v70);
      }
      swift_storeEnumTagMultiPayload(v67, v69, 1);
    }
    else
    {
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for WritingToolsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000705AC);
}

uint64_t sub_1000705AC(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004EAC(&qword_1000CB2D8);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[13];
    }
    else
    {
      v12 = sub_100004EAC(&qword_1000C9DF0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[20];
      }
      else
      {
        v10 = sub_100004EAC(&qword_1000CB418);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[21];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for WritingToolsView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100070688);
}

uint64_t sub_100070688(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 56) = (a2 - 1);
  }
  else
  {
    v8 = sub_100004EAC(&qword_1000CB2D8);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[13];
    }
    else
    {
      v12 = sub_100004EAC(&qword_1000C9DF0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[20];
      }
      else
      {
        v10 = sub_100004EAC(&qword_1000CB418);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[21];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_100070754(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[18];

  v8[0] = "\t";
  v8[1] = &unk_100095620;
  v8[2] = &unk_100095638;
  v8[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[4] = &unk_100095650;
  v8[5] = &unk_100095668;
  v8[6] = &unk_100095680;
  v8[7] = &unk_100095680;
  v8[8] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_100032690(319, (unint64_t *)&unk_1000CB488, (uint64_t (*)(uint64_t))&type metadata accessor for NavigationPath, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  if (v3 <= 0x3F)
  {
    v8[9] = *(_QWORD *)(v2 - 8) + 64;
    v8[10] = &unk_100095698;
    v8[11] = &unk_100095650;
    v8[12] = &unk_1000956B0;
    v8[13] = &unk_1000956B0;
    v8[14] = &unk_1000956C8;
    v8[15] = &unk_100095650;
    sub_100032690(319, (unint64_t *)&qword_1000C9E60, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v8[16] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000708A4(319);
      if (v7 <= 0x3F)
      {
        v8[17] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 18, v8, a1 + 16);
      }
    }
  }
}

void sub_1000708A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000CB498)
  {
    v2 = sub_10000ABD0((uint64_t *)&unk_1000CB408);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000CB498);
  }
}

unint64_t sub_100070900()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB508;
  if (!qword_1000CB508)
  {
    v1 = sub_10000ABD0(&qword_1000CB3E8);
    sub_10007096C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB508);
  }
  return result;
}

unint64_t sub_10007096C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB510;
  if (!qword_1000CB510)
  {
    v1 = sub_10000ABD0(&qword_1000CB2D0);
    sub_1000709D8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB510);
  }
  return result;
}

unint64_t sub_1000709D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB518;
  if (!qword_1000CB518)
  {
    v1 = sub_10000ABD0(&qword_1000CB2C8);
    sub_100070A5C();
    sub_10000B254(&qword_1000CB540, &qword_1000CB548, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB518);
  }
  return result;
}

unint64_t sub_100070A5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB520;
  if (!qword_1000CB520)
  {
    v1 = sub_10000ABD0(&qword_1000CB2C0);
    sub_10000B254(&qword_1000CB528, &qword_1000CB2B8, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
    sub_10000B254((unint64_t *)&unk_1000CB530, &qword_1000C7EA0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB520);
  }
  return result;
}

unint64_t sub_100070AF8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v18);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_BYTE *)(a2 + 24);
    sub_10000B060(*(_QWORD *)a2, v8, v9, v10);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v10;
    v11 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v11;
    v12 = *(int *)(a3 + 24);
    v13 = (uint64_t *)(a1 + v12);
    v14 = (uint64_t *)(a2 + v12);
    swift_retain(v11);
    v15 = sub_100004EAC(&qword_1000CA000);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v19 = *v14;
      *v13 = *v14;
      swift_retain(v19);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
    v20 = *(int *)(a3 + 28);
    v21 = (uint64_t *)(a1 + v20);
    v22 = (uint64_t *)(a2 + v20);
    v23 = sub_100004EAC(&qword_1000C74D0);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = v21;
      v26 = v23;
      v27 = 1;
    }
    else
    {
      v28 = *v22;
      *v21 = *v22;
      swift_retain(v28);
      v25 = v21;
      v26 = v23;
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v26, v27);
  }
  return a1;
}

uint64_t sub_100070C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_10000A880(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 40), v4);
  v5 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v6 = sub_100004EAC(&qword_1000CA000);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5, v8);
  }
  else
  {
    swift_release(*v5, v7);
  }
  v9 = (_QWORD *)(a1 + *(int *)(a2 + 28));
  v10 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v9, v10) != 1)
    return swift_release(*v9, v11);
  v12 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v9, v12);
}

uint64_t sub_100070D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  sub_10000B060(*(_QWORD *)a2, v7, v8, v9);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  swift_retain(v10);
  v14 = sub_100004EAC(&qword_1000CA000);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    v16 = 1;
  }
  else
  {
    v17 = *v13;
    *v12 = *v13;
    swift_retain(v17);
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v16);
  v18 = *(int *)(a3 + 28);
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
    v23 = 1;
  }
  else
  {
    v24 = *v20;
    *v19 = *v20;
    swift_retain(v24);
    v23 = 0;
  }
  swift_storeEnumTagMultiPayload(v19, v21, v23);
  return a1;
}

uint64_t sub_100070ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  sub_10000B060(*(_QWORD *)a2, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  v13 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v9;
  sub_10000A880(v10, v11, v12, v13);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v14;
  swift_retain(v14);
  swift_release(v15, v16);
  if (a1 != a2)
  {
    v17 = *(int *)(a3 + 24);
    v18 = (uint64_t *)(a1 + v17);
    v19 = (uint64_t *)(a2 + v17);
    sub_10000AE2C(a1 + v17, &qword_1000CA000);
    v20 = sub_100004EAC(&qword_1000CA000);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      v22 = 1;
    }
    else
    {
      v23 = *v19;
      *v18 = *v19;
      swift_retain(v23);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v20, v22);
    v24 = *(int *)(a3 + 28);
    v25 = (uint64_t *)(a1 + v24);
    v26 = (uint64_t *)(a2 + v24);
    sub_10000AE2C(a1 + v24, &qword_1000C74D0);
    v27 = sub_100004EAC(&qword_1000C74D0);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = 1;
    }
    else
    {
      v30 = *v26;
      *v25 = *v26;
      swift_retain(v30);
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v27, v29);
  }
  return a1;
}

_OWORD *sub_100071074(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  *(_OWORD *)((char *)a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  a1[2] = a2[2];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_100004EAC(&qword_1000CA000);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = *(int *)(a3 + 28);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000711B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  v11 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7;
  sub_10000A880(v8, v9, v10, v11);
  v12 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release(v12, v13);
  if (a1 != a2)
  {
    v14 = *(int *)(a3 + 24);
    v15 = (void *)(a1 + v14);
    v16 = (const void *)(a2 + v14);
    sub_10000AE2C(a1 + v14, &qword_1000CA000);
    v17 = sub_100004EAC(&qword_1000CA000);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload(v15, v17, 1);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    v19 = *(int *)(a3 + 28);
    v20 = (void *)(a1 + v19);
    v21 = (const void *)(a2 + v19);
    sub_10000AE2C(a1 + v19, &qword_1000C74D0);
    v22 = sub_100004EAC(&qword_1000C74D0);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      swift_storeEnumTagMultiPayload(v20, v22, 1);
    }
    else
    {
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10007133C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100071348);
}

uint64_t sub_100071348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004EAC(&qword_1000CA230);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_100004EAC(&qword_1000C9DF0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000713F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000713FC);
}

uint64_t sub_1000713FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v8 = sub_100004EAC(&qword_1000CA230);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_100004EAC(&qword_1000C9DF0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for TransformItemView(uint64_t a1)
{
  return sub_1000469DC(a1, qword_1000CB5A8, (uint64_t)&nominal type descriptor for TransformItemView);
}

void sub_1000714B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_100095638;
  v6[1] = (char *)&value witness table for () + 64;
  sub_100032690(319, (unint64_t *)&unk_1000CA2A0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_100032690(319, (unint64_t *)&qword_1000C9E60, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_100071580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007158C);
}

uint64_t sub_10007158C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004EAC(&qword_1000C9DF0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10007160C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100071618);
}

uint64_t sub_100071618(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004EAC(&qword_1000C9DF0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for IconTitleLabelStyle(uint64_t a1)
{
  return sub_1000469DC(a1, qword_1000CB648, (uint64_t)&nominal type descriptor for IconTitleLabelStyle);
}

void sub_1000716A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100095718;
  sub_100032690(319, (unint64_t *)&qword_1000C9E60, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t storeEnumTagSinglePayload for PanelBackground(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10007177C + 4 * byte_100095273[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1000717B0 + 4 * byte_10009526E[v4]))();
}

uint64_t sub_1000717B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000717B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1000717C0);
  return result;
}

uint64_t sub_1000717CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1000717D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000717D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000717E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PanelBackground()
{
  return &type metadata for PanelBackground;
}

uint64_t sub_1000717FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1294, 1);
}

uint64_t sub_10007180C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B126C, 1);
}

uint64_t sub_10007181C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1244, 1);
}

uint64_t type metadata accessor for TransformItemButton(uint64_t a1)
{
  return sub_1000469DC(a1, qword_1000CBC58, (uint64_t)&nominal type descriptor for TransformItemButton);
}

uint64_t sub_100071840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for TransformItemView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10000A880(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(_QWORD *)(v0 + v4 + 16), *(_BYTE *)(v0 + v4 + 24));
  swift_release(*(_QWORD *)(v0 + v4 + 40), v6);
  v7 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v8 = sub_100004EAC(&qword_1000CA000);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
  }
  else
  {
    swift_release(*v7, v9);
  }
  v11 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 28));
  v12 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v11, v14);
  }
  else
  {
    swift_release(*v11, v13);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100071958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TransformItemView(0) - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v2 + 32))(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_1000719A0()
{
  uint64_t v0;

  return sub_10006BF0C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000719B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10006BF80(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000719B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB6F8;
  if (!qword_1000CB6F8)
  {
    v1 = sub_10000ABD0(&qword_1000CB6F0);
    sub_100071A3C();
    sub_10000B254((unint64_t *)&unk_1000CB710, (uint64_t *)&unk_1000CA0C0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB6F8);
  }
  return result;
}

unint64_t sub_100071A3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB700;
  if (!qword_1000CB700)
  {
    v1 = sub_10000ABD0(&qword_1000CB708);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB700);
  }
  return result;
}

uint64_t sub_100071AA8(uint64_t result, char a2)
{
  if (a2 != -1)
    return swift_retain(result);
  return result;
}

uint64_t sub_100071ABC(uint64_t result, uint64_t a2)
{
  if ((_BYTE)a2 != 0xFF)
    return swift_release(result, a2);
  return result;
}

uint64_t sub_100071AD0(uint64_t result, uint64_t a2, uint64_t a3)
{
  switch(result)
  {
    case 1:
      return result;
    case 2:
      result = 0;
      break;
    case 3:
      result = 1;
      break;
    case 11:
      result = 3;
      break;
    case 12:
      result = 4;
      break;
    case 13:
    case 101:
      result = 2;
      break;
    case 19:
      swift_bridgeObjectRetain(a3);
      result = 5;
      break;
    case 21:
      result = 6;
      break;
    case 22:
      result = 7;
      break;
    case 23:
      result = 8;
      break;
    case 24:
      result = 9;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

unint64_t sub_100071C0C()
{
  unint64_t result;

  result = qword_1000CB7E0;
  if (!qword_1000CB7E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Mode, &type metadata for Mode);
    atomic_store(result, (unint64_t *)&qword_1000CB7E0);
  }
  return result;
}

unint64_t sub_100071C50()
{
  unint64_t result;

  result = qword_1000CB7E8;
  if (!qword_1000CB7E8)
  {
    result = swift_getWitnessTable(&unk_100095EC4, &type metadata for NavigationDestinationEnvironmentKey);
    atomic_store(result, (unint64_t *)&qword_1000CB7E8);
  }
  return result;
}

uint64_t sub_100071C98()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (int *)type metadata accessor for WritingToolsView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4), v7);
  swift_unknownObjectWeakDestroy(v0 + v4 + 16);
  sub_10000A880(*(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(_BYTE *)(v6 + 48));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 72));
  v8 = v0 + v4 + v1[13];
  v9 = type metadata accessor for NavigationPath(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = sub_100004EAC(&qword_1000CB2D8);
  swift_release(*(_QWORD *)(v8 + *(int *)(v10 + 28)), v11);
  v12 = v0 + v4 + v1[14];
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 8));
  swift_release(*(_QWORD *)(v12 + 16), v13);
  swift_release(*(_QWORD *)(v0 + v4 + v1[15] + 8), v14);
  v15 = (_QWORD *)(v0 + v4 + v1[16]);
  swift_release(*v15, v16);
  swift_release(v15[1], v17);
  v18 = (_QWORD *)(v0 + v4 + v1[17]);
  swift_release(*v18, v19);
  swift_release(v18[1], v20);
  swift_release(*(_QWORD *)(v0 + v4 + v1[18] + 16), v21);
  swift_release(*(_QWORD *)(v0 + v4 + v1[19] + 8), v22);
  v23 = (_QWORD *)(v0 + v4 + v1[20]);
  v24 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v26 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v23, v26);
  }
  else
  {
    swift_release(*v23, v25);
  }
  v27 = (_QWORD *)(v6 + v1[21]);
  v28 = sub_100004EAC(&qword_1000C74D8);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    v30 = type metadata accessor for UserInterfaceSizeClass(0);
    v31 = *(_QWORD *)(v30 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v31 + 48))(v27, 1, v30))
      (*(void (**)(_QWORD *, uint64_t))(v31 + 8))(v27, v30);
  }
  else
  {
    swift_release(*v27, v29);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100071EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WritingToolsView(0) - 8) + 80);
  return sub_100065D50(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_100071EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WritingToolsView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1000CB824);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10002199C;
  return sub_100065C58(v3);
}

uint64_t sub_100071F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WritingToolsView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1000CB834);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10002199C;
  return sub_100065C58(v3);
}

uint64_t sub_100071FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WritingToolsView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1000CB844);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10002199C;
  return sub_100065B64(v3);
}

uint64_t sub_100072024@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000661DC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_10007202C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB878;
  if (!qword_1000CB878)
  {
    v1 = sub_10000ABD0(&qword_1000CB870);
    sub_1000720B0();
    sub_10000B254((unint64_t *)&unk_1000CB530, &qword_1000C7EA0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB878);
  }
  return result;
}

unint64_t sub_1000720B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB880;
  if (!qword_1000CB880)
  {
    v1 = sub_10000ABD0(&qword_1000CB888);
    sub_10007211C();
    sub_100034268();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB880);
  }
  return result;
}

unint64_t sub_10007211C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB890;
  if (!qword_1000CB890)
  {
    v1 = sub_10000ABD0(&qword_1000CB898);
    sub_1000721A0();
    sub_100005900(&qword_1000C7E98, type metadata accessor for PreferredContentSizeModifier, (uint64_t)&unk_100093F08);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB890);
  }
  return result;
}

unint64_t sub_1000721A0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;

  result = qword_1000CB8A0;
  if (!qword_1000CB8A0)
  {
    v1 = sub_10000ABD0(&qword_1000CB8A8);
    v2 = sub_10000ABD0(&qword_1000CB8B0);
    v4 = sub_10000ABD0(&qword_1000CB8B8);
    v5 = sub_10000B254((unint64_t *)&unk_1000CB8C0, &qword_1000CB8B8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.scrollContentBackground(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.scrollDismissesKeyboard(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB8A0);
  }
  return result;
}

uint64_t sub_100072280@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WritingToolsView(0) - 8) + 80);
  return sub_10006A3DC(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_1000722CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB8E8;
  if (!qword_1000CB8E8)
  {
    v1 = sub_10000ABD0(&qword_1000CB8E0);
    sub_100072338();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB8E8);
  }
  return result;
}

unint64_t sub_100072338()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB8F0;
  if (!qword_1000CB8F0)
  {
    v1 = sub_10000ABD0(&qword_1000CB8F8);
    sub_1000723BC();
    sub_10000B254((unint64_t *)&unk_1000CB530, &qword_1000C7EA0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB8F0);
  }
  return result;
}

unint64_t sub_1000723BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB900;
  if (!qword_1000CB900)
  {
    v1 = sub_10000ABD0(&qword_1000CB908);
    sub_100072420();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB900);
  }
  return result;
}

unint64_t sub_100072420()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB910;
  if (!qword_1000CB910)
  {
    v1 = sub_10000ABD0(&qword_1000CB918);
    sub_10007248C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB910);
  }
  return result;
}

unint64_t sub_10007248C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB920;
  if (!qword_1000CB920)
  {
    v1 = sub_10000ABD0(&qword_1000CB928);
    sub_1000724F8();
    sub_1000726D8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB920);
  }
  return result;
}

unint64_t sub_1000724F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB930;
  if (!qword_1000CB930)
  {
    v1 = sub_10000ABD0(&qword_1000CB938);
    sub_10006E72C();
    sub_100072564();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB930);
  }
  return result;
}

unint64_t sub_100072564()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB940;
  if (!qword_1000CB940)
  {
    v1 = sub_10000ABD0(&qword_1000CB948);
    sub_1000725D0();
    sub_100072654();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB940);
  }
  return result;
}

unint64_t sub_1000725D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB950;
  if (!qword_1000CB950)
  {
    v1 = sub_10000ABD0(&qword_1000CB958);
    sub_100005900(&qword_1000CB378, type metadata accessor for RewritingView, (uint64_t)&protocol conformance descriptor for RewritingView);
    sub_10006E834();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB950);
  }
  return result;
}

unint64_t sub_100072654()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB960;
  if (!qword_1000CB960)
  {
    v1 = sub_10000ABD0(&qword_1000CB968);
    sub_100005900(&qword_1000CB3A0, type metadata accessor for ModelResponseView, (uint64_t)&protocol conformance descriptor for ModelResponseView);
    sub_10006E834();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB960);
  }
  return result;
}

unint64_t sub_1000726D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB970;
  if (!qword_1000CB970)
  {
    v1 = sub_10000ABD0(&qword_1000CB978);
    sub_10006EB60();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB970);
  }
  return result;
}

uint64_t sub_100072748()
{
  return sub_100072B94((uint64_t (*)(uint64_t))sub_10006B634);
}

uint64_t sub_100072758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WritingToolsView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1000CB9AC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10002199C;
  return sub_100065B64(v3);
}

uint64_t sub_1000727BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000678C8(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000727C4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  unint64_t v4;
  uint64_t v5;
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;

  result = qword_1000CBA28;
  if (!qword_1000CBA28)
  {
    v1 = sub_10000ABD0(&qword_1000CBA20);
    v2 = sub_10000ABD0(&qword_1000CBA30);
    v5 = sub_10000ABD0(&qword_1000CBA38);
    v6 = (ValueMetadata *)type metadata accessor for IconTitleLabelStyle(255);
    v7 = sub_10000B254(&qword_1000CBA40, &qword_1000CBA38, (uint64_t)&unk_1000947E8);
    v8 = sub_100005900(&qword_1000CBA48, type metadata accessor for IconTitleLabelStyle, (uint64_t)&unk_100095790);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
    v4 = sub_100015448();
    v5 = v2;
    v6 = &type metadata for PrimaryButtonStyle;
    v7 = OpaqueTypeConformance2;
    v8 = v4;
    swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBA28);
  }
  return result;
}

uint64_t sub_1000728F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100068794(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000728F8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  unint64_t v4;
  uint64_t v5;
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;

  result = qword_1000CBA60;
  if (!qword_1000CBA60)
  {
    v1 = sub_10000ABD0(&qword_1000CBA58);
    v2 = sub_10000ABD0(&qword_1000CBA68);
    v5 = sub_10000ABD0(&qword_1000CBA70);
    v6 = (ValueMetadata *)type metadata accessor for SmallIconTitleLabelStyle(255);
    v7 = sub_10000B254(&qword_1000CBA78, &qword_1000CBA70, (uint64_t)&unk_1000947E8);
    v8 = sub_100005900(&qword_1000CBA80, type metadata accessor for SmallIconTitleLabelStyle, (uint64_t)&unk_100093E10);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
    v4 = sub_100015448();
    v5 = v2;
    v6 = &type metadata for PrimaryButtonStyle;
    v7 = OpaqueTypeConformance2;
    v8 = v4;
    swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBA60);
  }
  return result;
}

uint64_t sub_100072A24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10006904C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100072A2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10006750C(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100072A34()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000CBAB0;
  if (!qword_1000CBAB0)
  {
    v1 = sub_10000ABD0(&qword_1000CBAA8);
    v2[0] = sub_10000ABD0(&qword_1000CBAB8);
    v2[1] = &type metadata for MagicButtonLabelStyle;
    v2[2] = sub_10000B254(&qword_1000CBAC0, &qword_1000CBAB8, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_100072AFC();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
    sub_100072B40();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBAB0);
  }
  return result;
}

unint64_t sub_100072AFC()
{
  unint64_t result;

  result = qword_1000CBAC8;
  if (!qword_1000CBAC8)
  {
    result = swift_getWitnessTable(&unk_100093D88, &type metadata for MagicButtonLabelStyle);
    atomic_store(result, (unint64_t *)&qword_1000CBAC8);
  }
  return result;
}

unint64_t sub_100072B40()
{
  unint64_t result;

  result = qword_1000CBAD0;
  if (!qword_1000CBAD0)
  {
    result = swift_getWitnessTable(&unk_100093DC0, &type metadata for MagicButtonModifier);
    atomic_store(result, (unint64_t *)&qword_1000CBAD0);
  }
  return result;
}

uint64_t sub_100072B88()
{
  return sub_100072B94((uint64_t (*)(uint64_t))sub_100067704);
}

uint64_t sub_100072B94(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WritingToolsView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

unint64_t sub_100072BD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CBAF0;
  if (!qword_1000CBAF0)
  {
    v1 = sub_10000ABD0(&qword_1000C9600);
    sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBAF0);
  }
  return result;
}

uint64_t sub_100072C60(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  type metadata accessor for WritingToolsView(0);
  return sub_1000682B0(a1, a2, a3, a4);
}

uint64_t sub_100072CCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WritingToolsView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1000CBB64);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000070C8;
  return sub_10006B7CC(a1, v5, v6, v7);
}

uint64_t sub_100072D64()
{
  return sub_100072D78(3);
}

uint64_t sub_100072D70()
{
  return sub_100072D78(4);
}

uint64_t sub_100072D78(uint64_t a1)
{
  type metadata accessor for WritingToolsView(0);
  return sub_1000682B0(a1, 0, 0, 0);
}

uint64_t sub_100072DC8()
{
  return sub_100072D78(2);
}

uint64_t sub_100072DD4()
{
  return sub_100072B94(sub_100067F80);
}

uint64_t sub_100072DE4()
{
  return sub_100072D78(0);
}

uint64_t sub_100072DF0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (int *)type metadata accessor for WritingToolsView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4), v7);
  swift_unknownObjectWeakDestroy(v0 + v4 + 16);
  sub_10000A880(*(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(_BYTE *)(v6 + 48));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 72));
  v8 = v0 + v4 + v1[13];
  v9 = type metadata accessor for NavigationPath(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = sub_100004EAC(&qword_1000CB2D8);
  swift_release(*(_QWORD *)(v8 + *(int *)(v10 + 28)), v11);
  v12 = v0 + v4 + v1[14];
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 8));
  swift_release(*(_QWORD *)(v12 + 16), v13);
  swift_release(*(_QWORD *)(v0 + v4 + v1[15] + 8), v14);
  v15 = (_QWORD *)(v0 + v4 + v1[16]);
  swift_release(*v15, v16);
  swift_release(v15[1], v17);
  v18 = (_QWORD *)(v0 + v4 + v1[17]);
  swift_release(*v18, v19);
  swift_release(v18[1], v20);
  swift_release(*(_QWORD *)(v0 + v4 + v1[18] + 16), v21);
  swift_release(*(_QWORD *)(v0 + v4 + v1[19] + 8), v22);
  v23 = (_QWORD *)(v0 + v4 + v1[20]);
  v24 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v26 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v23, v26);
  }
  else
  {
    swift_release(*v23, v25);
  }
  v27 = (_QWORD *)(v6 + v1[21]);
  v28 = sub_100004EAC(&qword_1000C74D8);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    v30 = type metadata accessor for UserInterfaceSizeClass(0);
    v31 = *(_QWORD *)(v30 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v31 + 48))(v27, 1, v30))
      (*(void (**)(_QWORD *, uint64_t))(v31 + 8))(v27, v30);
  }
  else
  {
    swift_release(*v27, v29);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100073000(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WritingToolsView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1000CBBA4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10002199C;
  return sub_100068244(a1, v5, v6, v7);
}

uint64_t sub_100073088()
{
  return sub_100072B94((uint64_t (*)(uint64_t))sub_100067494);
}

unint64_t sub_100073094()
{
  unint64_t result;

  result = qword_1000CBBC8;
  if (!qword_1000CBBC8)
  {
    result = swift_getWitnessTable(&unk_100093D50, &type metadata for HeaderButtonWithIconStyle);
    atomic_store(result, (unint64_t *)&qword_1000CBBC8);
  }
  return result;
}

ValueMetadata *type metadata accessor for TransformItemFooter()
{
  return &type metadata for TransformItemFooter;
}

uint64_t *sub_1000730E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100004EAC(&qword_1000CA000);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_100004EAC(&qword_1000C74D0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
  }
  return a1;
}

uint64_t sub_100073230(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_100004EAC(&qword_1000CA000);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  else
  {
    swift_release(*a1, v5);
  }
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v8 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v7, v8) != 1)
    return swift_release(*v7, v9);
  v10 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
}

uint64_t *sub_1000732E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = sub_100004EAC(&qword_1000CA000);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  return a1;
}

uint64_t *sub_100073404(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_10000AE2C((uint64_t)a1, &qword_1000CA000);
    v6 = sub_100004EAC(&qword_1000CA000);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = *(int *)(a3 + 20);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_10000AE2C((uint64_t)a1 + v12, &qword_1000C74D0);
    v15 = sub_100004EAC(&qword_1000C74D0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  return a1;
}

char *sub_100073548(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_100004EAC(&qword_1000CA000);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_100004EAC(&qword_1000C74D0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  return a1;
}

char *sub_10007365C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_10000AE2C((uint64_t)a1, &qword_1000CA000);
    v6 = sub_100004EAC(&qword_1000CA000);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_10000AE2C((uint64_t)&a1[v8], &qword_1000C74D0);
    v11 = sub_100004EAC(&qword_1000C74D0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100073798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000737A4);
}

uint64_t sub_1000737A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_100004EAC(&qword_1000CA230);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_100004EAC(&qword_1000C9DF0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100073820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007382C);
}

uint64_t sub_10007382C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_100004EAC(&qword_1000CA230);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_100004EAC(&qword_1000C9DF0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000738B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_100032690(319, (unint64_t *)&unk_1000CA2A0, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100032690(319, (unint64_t *)&qword_1000C9E60, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t sub_100073964()
{
  _QWORD v1[2];

  v1[0] = sub_10000ABD0(&qword_1000CB6A0);
  v1[1] = sub_10000B254(&qword_1000CB6B0, &qword_1000CB6A0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

unint64_t sub_1000739CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CBC90;
  if (!qword_1000CBC90)
  {
    v1 = sub_10000ABD0((uint64_t *)&unk_1000CB740);
    sub_100073A38();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBC90);
  }
  return result;
}

unint64_t sub_100073A38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CBC98;
  if (!qword_1000CBC98)
  {
    v1 = sub_10000ABD0(&qword_1000CB738);
    sub_100073AA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBC98);
  }
  return result;
}

unint64_t sub_100073AA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CBCA0;
  if (!qword_1000CBCA0)
  {
    v1 = sub_10000ABD0(&qword_1000CB730);
    sub_10000B254(&qword_1000CBCA8, &qword_1000CB728, (uint64_t)&unk_1000947E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBCA0);
  }
  return result;
}

unint64_t sub_100073B2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CBCB0;
  if (!qword_1000CBCB0)
  {
    v1 = sub_10000ABD0(&qword_1000CBCB8);
    sub_10000B254(&qword_1000CBCC0, &qword_1000CBCC8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBCB0);
  }
  return result;
}

uint64_t sub_100073BB0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B130C, 1);
}

uint64_t sub_100073BC0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B12E4, 1);
}

uint64_t type metadata accessor for TransformBlendModifier(uint64_t a1)
{
  return sub_1000469DC(a1, qword_1000CBDC8, (uint64_t)&nominal type descriptor for TransformBlendModifier);
}

unint64_t sub_100073BF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CBD40;
  if (!qword_1000CBD40)
  {
    v1 = sub_10000ABD0(&qword_1000CBD28);
    sub_100073C78();
    sub_10000B254(&qword_1000C7E40, &qword_1000CA0D0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBD40);
  }
  return result;
}

unint64_t sub_100073C78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CBD48;
  if (!qword_1000CBD48)
  {
    v1 = sub_10000ABD0(&qword_1000CBD20);
    sub_10000B254((unint64_t *)&unk_1000CBD50, &qword_1000CBD38, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000B254((unint64_t *)&unk_1000CA1E0, &qword_1000CBD60, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBD48);
  }
  return result;
}

uint64_t sub_100073D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100073D20);
}

uint64_t sub_100073D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CA230);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100073D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100073D6C);
}

uint64_t sub_100073D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CA230);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

unint64_t sub_100073DB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CBE00;
  if (!qword_1000CBE00)
  {
    v1 = sub_10000ABD0((uint64_t *)&unk_1000CBD00);
    sub_100073E38();
    sub_10000B254(&qword_1000CBE10, &qword_1000CBD18, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBE00);
  }
  return result;
}

unint64_t sub_100073E38()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000CBE08;
  if (!qword_1000CBE08)
  {
    v1 = sub_10000ABD0(&qword_1000CBCF8);
    v2[0] = type metadata accessor for ButtonStyleConfiguration.Label(255);
    v2[1] = type metadata accessor for IconOnlyLabelStyle(255);
    v2[2] = sub_100005900(&qword_1000CA188, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    v2[3] = sub_100005900(&qword_1000CBD10, (uint64_t (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for IconOnlyLabelStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBE08);
  }
  return result;
}

unint64_t sub_100073F2C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000CBE18;
  if (!qword_1000CBE18)
  {
    v1 = sub_10000ABD0(&qword_1000CBD68);
    v2[0] = sub_10000ABD0(&qword_1000CBD28);
    v2[1] = sub_100073BF4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_10000B254((unint64_t *)&unk_1000CB710, (uint64_t *)&unk_1000CA0C0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBE18);
  }
  return result;
}

uint64_t sub_100073FD8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1334, 1);
}

unint64_t sub_100073FE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CBE38;
  if (!qword_1000CBE38)
  {
    v1 = sub_10000ABD0(&qword_1000CBE30);
    sub_10000B254(&qword_1000CBE40, &qword_1000CBE20, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBE38);
  }
  return result;
}

unint64_t sub_100074070()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CBE48;
  if (!qword_1000CBE48)
  {
    v1 = sub_10000ABD0((uint64_t *)&unk_1000CBE50);
    sub_100073FE8();
    sub_10000B254(&qword_1000CBE40, &qword_1000CBE20, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBE48);
  }
  return result;
}

void sub_1000740F4()
{
  sub_10000A8BC();
}

uint64_t sub_100074108()
{
  return sub_10006E5AC();
}

uint64_t sub_10007411C()
{
  return sub_10006E56C();
}

uint64_t sub_100074130()
{
  return sub_10006E548();
}

void destroy for ProofreadingSuggestionView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  swift_release(*(_QWORD *)a1, a2);
  swift_release(*(_QWORD *)(a1 + 8), v3);

}

uint64_t *initializeWithCopy for ProofreadingSuggestionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (void *)a2[2];
  v6 = (void *)a2[3];
  a1[2] = (uint64_t)v5;
  a1[3] = (uint64_t)v6;
  swift_retain(v3);
  swift_retain(v4);
  v7 = v5;
  v8 = v6;
  return a1;
}

uint64_t *assignWithCopy for ProofreadingSuggestionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5, v6);
  v7 = a1[1];
  v8 = a2[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v7, v9);
  v10 = (void *)a2[2];
  v11 = (void *)a1[2];
  a1[2] = (uint64_t)v10;
  v12 = v10;

  v13 = (void *)a2[3];
  v14 = (void *)a1[3];
  a1[3] = (uint64_t)v13;
  v15 = v13;

  return a1;
}

uint64_t assignWithTake for ProofreadingSuggestionView(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  swift_release(*(_QWORD *)a1, a2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4, v5);

  v6 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  return a1;
}

ValueMetadata *type metadata accessor for ProofreadingSuggestionView()
{
  return &type metadata for ProofreadingSuggestionView;
}

uint64_t sub_1000742B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1378, 1);
}

uint64_t sub_1000742C0(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v10;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(*a1, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v8);

  LOBYTE(a2) = static UUID.== infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

void *sub_100074380(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  id v15;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v8 = 4;
    while (1)
    {
      v9 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3)
         : *(id *)(a3 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v15 = v9;
      v12 = a1(&v15);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return v10;
      }
      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        return v10;
      }

      ++v8;
      if (v11 == v7)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    if (a3 < 0)
      v14 = a3;
    else
      v14 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_11:
  swift_bridgeObjectRelease(a3);
  return 0;
}

uint64_t sub_1000744A0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;

  v10 = sub_100004EAC(&qword_1000CBE60);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004EAC(&qword_1000CBE68);
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004EAC(&qword_1000CBE70);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v12 = static HorizontalAlignment.leading.getter(v17);
  *((_QWORD *)v12 + 1) = 0x4020000000000000;
  v12[16] = 0;
  v20 = sub_100004EAC(&qword_1000CBE78);
  v21 = sub_100074708(a1, a2, a3, a4, (uint64_t)&v12[*(int *)(v20 + 44)]);
  LOBYTE(a2) = static Edge.Set.horizontal.getter(v21);
  v22 = EdgeInsets.init(_all:)(16.0);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  sub_10000AD78((uint64_t)v12, (uint64_t)v15, &qword_1000CBE60);
  v29 = &v15[*(int *)(v13 + 36)];
  *v29 = (char)a2;
  *((double *)v29 + 1) = v22;
  *((_QWORD *)v29 + 2) = v24;
  *((_QWORD *)v29 + 3) = v26;
  *((_QWORD *)v29 + 4) = v28;
  v29[40] = 0;
  v30 = sub_10000AE2C((uint64_t)v12, &qword_1000CBE60);
  LOBYTE(a2) = static Edge.Set.top.getter(v30);
  v31 = EdgeInsets.init(_all:)(16.0);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_10000AD78((uint64_t)v15, (uint64_t)v19, &qword_1000CBE68);
  v38 = &v19[*(int *)(v16 + 36)];
  *v38 = (char)a2;
  *((double *)v38 + 1) = v31;
  *((_QWORD *)v38 + 2) = v33;
  *((_QWORD *)v38 + 3) = v35;
  *((_QWORD *)v38 + 4) = v37;
  v38[40] = 0;
  v39 = sub_10000AE2C((uint64_t)v15, &qword_1000CBE68);
  LOBYTE(a2) = static Edge.Set.bottom.getter(v39);
  v40 = EdgeInsets.init(_all:)(26.0);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  sub_10000AD78((uint64_t)v19, a5, &qword_1000CBE70);
  v47 = a5 + *(int *)(sub_100004EAC(&qword_1000CBE80) + 36);
  *(_BYTE *)v47 = (_BYTE)a2;
  *(double *)(v47 + 8) = v40;
  *(_QWORD *)(v47 + 16) = v42;
  *(_QWORD *)(v47 + 24) = v44;
  *(_QWORD *)(v47 + 32) = v46;
  *(_BYTE *)(v47 + 40) = 0;
  return sub_10000AE2C((uint64_t)v19, &qword_1000CBE70);
}

uint64_t sub_100074708@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  id v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  char v72;
  char v73;
  uint64_t KeyPath;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE v102[4];
  int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  void *v111;
  uint64_t v112;
  _BYTE *v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  unint64_t v117;

  v110 = a2;
  v111 = a4;
  v112 = a5;
  v7 = sub_100004EAC(&qword_1000CA140);
  __chkstk_darwin(v7);
  v9 = &v102[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for Divider(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v102[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_100004EAC(&qword_1000C96E8);
  v15 = __chkstk_darwin(v14);
  v17 = &v102[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v19 = &v102[-v18];
  v20 = sub_100004EAC(&qword_1000CBE88);
  v21 = __chkstk_darwin(v20);
  v114 = &v102[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = __chkstk_darwin(v21);
  v25 = &v102[-v24];
  *(_QWORD *)v25 = static VerticalAlignment.center.getter(v23);
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 1;
  v26 = *(int *)(sub_100004EAC(&qword_1000CBE90) + 44);
  v113 = v25;
  v27 = sub_100074D08(a1, (uint64_t)v110, a3, v111, (uint64_t *)&v25[v26]);
  v28 = Divider.init()(v27);
  LOBYTE(v25) = static Edge.Set.horizontal.getter(v28);
  v29 = EdgeInsets.init(_all:)(-20.0);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v17, v13, v10);
  v36 = (double *)&v17[*(int *)(v14 + 36)];
  *(_BYTE *)v36 = (_BYTE)v25;
  v36[1] = v29;
  *((_QWORD *)v36 + 2) = v31;
  *((_QWORD *)v36 + 3) = v33;
  *((_QWORD *)v36 + 4) = v35;
  *((_BYTE *)v36 + 40) = 0;
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  v115 = v17;
  v111 = v19;
  sub_10000AC80((uint64_t)v17, (uint64_t)v19, &qword_1000C96E8);
  v110 = a3;
  v37 = objc_msgSend(a3, "suggestionCategory");
  if (v37)
  {
    v38 = v37;
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v41 = v40;

  }
  else
  {
    v39 = 0;
    v41 = 0xE000000000000000;
  }
  v116 = v39;
  v117 = v41;
  v106 = sub_100015204();
  v42 = Text.init<A>(_:)(&v116, &type metadata for String, v106);
  v44 = v43;
  v46 = v45;
  v48 = v47 & 1;
  v49 = Text.bold()(v42, v43);
  v51 = v50;
  v53 = v52;
  v55 = v54 & 1;
  sub_10000ADF4(v42, v44, v48);
  swift_bridgeObjectRelease(v46);
  v56 = type metadata accessor for Font.Design(0);
  v57 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56);
  v57(v9, 1, 1, v56);
  v58 = static Font.system(size:weight:design:)(0, 1, v9, 15.0);
  sub_10000AE2C((uint64_t)v9, &qword_1000CA140);
  v59 = Text.font(_:)(v58, v49, v51, v55, v53);
  v107 = v60;
  v108 = v59;
  v62 = v61;
  v109 = v63;
  swift_release(v58, v60);
  sub_10000ADF4(v49, v51, v55);
  swift_bridgeObjectRelease(v53);
  v64 = v110;
  v65 = objc_msgSend(v110, "suggestionDescription");
  if (v65 || (v65 = objc_msgSend(v64, "suggestionShortDescription")) != 0)
  {
    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v68 = v67;

  }
  else
  {
    v66 = 0;
    v68 = 0xE000000000000000;
  }
  v116 = v66;
  v117 = v68;
  v69 = Text.init<A>(_:)(&v116, &type metadata for String, v106);
  v105 = v70;
  v106 = v69;
  v110 = v71;
  v73 = v72 & 1;
  v57(v9, 1, 1, v56);
  v104 = static Font.system(size:weight:design:)(0, 1, v9, 15.0);
  sub_10000AE2C((uint64_t)v9, &qword_1000CA140);
  KeyPath = swift_getKeyPath(&unk_100095B30);
  v103 = static Edge.Set.top.getter(KeyPath);
  v75 = EdgeInsets.init(_all:)(-2.0);
  v77 = v76;
  v79 = v78;
  v81 = v80;
  v82 = v114;
  sub_10000AD78((uint64_t)v113, (uint64_t)v114, &qword_1000CBE88);
  v83 = (uint64_t)v111;
  v84 = (uint64_t)v115;
  sub_10000AD78((uint64_t)v111, (uint64_t)v115, &qword_1000C96E8);
  v85 = v62 & 1;
  LOBYTE(v116) = v62 & 1;
  v86 = v112;
  sub_10000AD78((uint64_t)v82, v112, &qword_1000CBE88);
  v87 = (int *)sub_100004EAC(&qword_1000CBE98);
  sub_10000AD78(v84, v86 + v87[12], &qword_1000C96E8);
  v88 = v86 + v87[16];
  v90 = v107;
  v89 = v108;
  *(_QWORD *)v88 = v108;
  *(_QWORD *)(v88 + 8) = v90;
  *(_BYTE *)(v88 + 16) = v85;
  v91 = v85;
  v92 = v109;
  *(_QWORD *)(v88 + 24) = v109;
  v93 = v86 + v87[20];
  v94 = v105;
  v95 = v106;
  *(_QWORD *)v93 = v106;
  *(_QWORD *)(v93 + 8) = v94;
  *(_BYTE *)(v93 + 16) = v73;
  v96 = v110;
  *(_QWORD *)(v93 + 24) = v110;
  *(_WORD *)(v93 + 32) = 256;
  *(_QWORD *)(v93 + 40) = KeyPath;
  v97 = KeyPath;
  v98 = v104;
  *(_QWORD *)(v93 + 48) = v104;
  *(_BYTE *)(v93 + 56) = v103;
  *(double *)(v93 + 64) = v75;
  *(_QWORD *)(v93 + 72) = v77;
  *(_QWORD *)(v93 + 80) = v79;
  *(_QWORD *)(v93 + 88) = v81;
  *(_BYTE *)(v93 + 96) = 0;
  sub_10000ADBC(v89, v90, v91);
  swift_bridgeObjectRetain(v92);
  sub_10000ADBC(v95, v94, v73);
  swift_bridgeObjectRetain(v96);
  swift_retain(v97);
  swift_retain(v98);
  sub_10000AE2C(v83, &qword_1000C96E8);
  sub_10000AE2C((uint64_t)v113, &qword_1000CBE88);
  sub_10000ADF4(v95, v94, v73);
  swift_release(v98, v99);
  swift_release(v97, v100);
  swift_bridgeObjectRelease(v96);
  sub_10000ADF4(v89, v90, v116);
  swift_bridgeObjectRelease(v92);
  sub_10000AE2C((uint64_t)v115, &qword_1000C96E8);
  return sub_10000AE2C((uint64_t)v114, &qword_1000CBE88);
}

uint64_t sub_100074D08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t KeyPath;
  _BYTE *v110;
  uint64_t *v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  double *v121;
  _BYTE *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE v128[4];
  int v129;
  void *v130;
  void *v131;
  _BYTE *v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  _BYTE *v151;
  _BYTE *v152;
  _BYTE *v153;
  _BYTE *v154;
  uint64_t *v155;
  _QWORD v156[3];

  v5 = a4;
  v131 = a4;
  v130 = a3;
  v138 = a2;
  v137 = a1;
  v155 = a5;
  v145 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v145);
  v144 = &v128[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v150 = sub_100004EAC(&qword_1000CBCD0);
  __chkstk_darwin(v150);
  v154 = &v128[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v141 = sub_100004EAC(&qword_1000C8060);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v133 = &v128[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v139 = sub_100004EAC(&qword_1000C8068);
  __chkstk_darwin(v139);
  v136 = &v128[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v142 = sub_100004EAC(&qword_1000C8070);
  __chkstk_darwin(v142);
  v132 = &v128[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v143 = sub_100004EAC(&qword_1000C8078);
  __chkstk_darwin(v143);
  v149 = &v128[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v146 = sub_100004EAC(&qword_1000C8080);
  __chkstk_darwin(v146);
  v152 = &v128[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v147 = sub_100004EAC(&qword_1000C8088);
  __chkstk_darwin(v147);
  v151 = &v128[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v148 = sub_100004EAC(&qword_1000CBEA0);
  v15 = __chkstk_darwin(v148);
  v17 = &v128[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v153 = &v128[-v18];
  v19 = sub_100004EAC(&qword_1000CA140);
  __chkstk_darwin(v19);
  v21 = &v128[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = objc_msgSend(v5, "attributedText");
  v23 = objc_msgSend(a3, "originalRange");
  v25 = objc_msgSend(v22, "attributedSubstringFromRange:", v23, v24);

  v26 = objc_msgSend(v25, "string");
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  v156[0] = v27;
  v156[1] = v29;
  v30 = sub_100015204();
  v31 = Text.init<A>(_:)(v156, &type metadata for String, v30);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v38 = type metadata accessor for Font.Design(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v21, 1, 1, v38);
  v39 = static Font.system(size:weight:design:)(0, 1, v21, 15.0);
  sub_10000AE2C((uint64_t)v21, &qword_1000CA140);
  v40 = Text.font(_:)(v39, v31, v33, v37, v35);
  v42 = v41;
  LOBYTE(v5) = v43;
  v45 = v44;
  swift_release(v39, v41);
  v46 = v5 & 1;
  sub_10000ADF4(v31, v33, v37);
  v47 = v35;
  v48 = (uint64_t)v132;
  v49 = swift_bridgeObjectRelease(v47);
  LODWORD(v156[0]) = static HierarchicalShapeStyle.secondary.getter(v49);
  v50 = Text.foregroundStyle<A>(_:)(v156, v40, v42, v46, v45, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v134 = v51;
  v129 = v52;
  v135 = v53;
  sub_10000ADF4(v40, v42, v46);
  swift_bridgeObjectRelease(v45);
  v54 = (_QWORD *)swift_allocObject(&unk_1000C1648, 48, 7);
  v55 = v137;
  v54[2] = v137;
  v56 = v138;
  v57 = v130;
  v54[3] = v138;
  v54[4] = v57;
  v58 = v131;
  v54[5] = v131;
  swift_retain(v56);
  v59 = v57;
  v60 = v58;
  swift_retain(v55);
  v61 = sub_100004EAC(&qword_1000C8090);
  v62 = sub_10000B254(&qword_1000C8098, &qword_1000C8090, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v63 = v133;
  v64 = Button.init(action:label:)(sub_10007587C, v54, sub_100011218, 0, v61, v62);
  LOBYTE(v54) = static Edge.Set.horizontal.getter(v64);
  v65 = EdgeInsets.init(_all:)(10.0);
  v67 = v66;
  v69 = v68;
  v71 = v70;
  v72 = v140;
  v73 = (uint64_t)v136;
  v74 = v141;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v140 + 16))(v136, v63, v141);
  v75 = v73 + *(int *)(v139 + 36);
  *(_BYTE *)v75 = (_BYTE)v54;
  *(double *)(v75 + 8) = v65;
  *(_QWORD *)(v75 + 16) = v67;
  *(_QWORD *)(v75 + 24) = v69;
  *(_QWORD *)(v75 + 32) = v71;
  *(_BYTE *)(v75 + 40) = 0;
  v76 = (*(uint64_t (**)(_BYTE *, uint64_t))(v72 + 8))(v63, v74);
  LOBYTE(v54) = static Edge.Set.vertical.getter(v76);
  v77 = EdgeInsets.init(_all:)(6.0);
  v79 = v78;
  v81 = v80;
  v83 = v82;
  sub_10000AD78(v73, v48, &qword_1000C8068);
  v84 = v48 + *(int *)(v142 + 36);
  *(_BYTE *)v84 = (_BYTE)v54;
  *(double *)(v84 + 8) = v77;
  *(_QWORD *)(v84 + 16) = v79;
  *(_QWORD *)(v84 + 24) = v81;
  *(_QWORD *)(v84 + 32) = v83;
  *(_BYTE *)(v84 + 40) = 0;
  sub_10000AE2C(v73, &qword_1000C8068);
  v85 = v144;
  v86 = &v144[*(int *)(v145 + 20)];
  v87 = enum case for RoundedCornerStyle.continuous(_:);
  v88 = type metadata accessor for RoundedCornerStyle(0);
  v89 = v87;
  v90 = (uint64_t)v85;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 104))(v86, v89, v88);
  __asm { FMOV            V0.2D, #14.0 }
  *v85 = _Q0;
  if (qword_1000C7460 != -1)
    swift_once(&qword_1000C7460, sub_100042244);
  v96 = v129 & 1;
  v97 = qword_1000D1D18;
  v98 = v154;
  sub_100075888(v90, (uint64_t)v154);
  v99 = v150;
  *(_QWORD *)&v98[*(int *)(v150 + 52)] = v97;
  *(_WORD *)&v98[*(int *)(v99 + 56)] = 256;
  swift_retain(v97);
  v100 = sub_1000758CC(v90);
  v101 = static Alignment.center.getter(v100);
  v103 = v102;
  v104 = (uint64_t)v149;
  v105 = (uint64_t)&v149[*(int *)(v143 + 36)];
  sub_10000AD78((uint64_t)v98, v105, &qword_1000CBCD0);
  v106 = (uint64_t *)(v105 + *(int *)(sub_100004EAC(&qword_1000C8030) + 36));
  *v106 = v101;
  v106[1] = v103;
  sub_10000AD78(v48, v104, &qword_1000C8070);
  sub_10000AE2C((uint64_t)v98, &qword_1000CBCD0);
  v107 = sub_10000AE2C(v48, &qword_1000C8070);
  v108 = static Color.accentColor.getter(v107);
  KeyPath = swift_getKeyPath(&unk_100095B60);
  v110 = v152;
  sub_10000AD78(v104, (uint64_t)v152, &qword_1000C8078);
  v111 = (uint64_t *)&v110[*(int *)(v146 + 36)];
  *v111 = KeyPath;
  v111[1] = v108;
  v112 = sub_10000AE2C(v104, &qword_1000C8078);
  LOBYTE(v108) = static Edge.Set.vertical.getter(v112);
  v113 = EdgeInsets.init(_all:)(8.0);
  v115 = v114;
  v117 = v116;
  v119 = v118;
  v120 = v151;
  sub_10000AD78((uint64_t)v110, (uint64_t)v151, &qword_1000C8080);
  v121 = (double *)&v120[*(int *)(v147 + 36)];
  *(_BYTE *)v121 = v108;
  v121[1] = v113;
  *((_QWORD *)v121 + 2) = v115;
  *((_QWORD *)v121 + 3) = v117;
  *((_QWORD *)v121 + 4) = v119;
  *((_BYTE *)v121 + 40) = 0;
  sub_10000AE2C((uint64_t)v110, &qword_1000C8080);
  sub_10000AD78((uint64_t)v120, (uint64_t)v17, &qword_1000C8088);
  *(_QWORD *)&v17[*(int *)(v148 + 36)] = 0x3FE3333333333333;
  sub_10000AE2C((uint64_t)v120, &qword_1000C8088);
  v122 = v153;
  sub_10000AC80((uint64_t)v17, (uint64_t)v153, &qword_1000CBEA0);
  sub_10000AD78((uint64_t)v122, (uint64_t)v17, &qword_1000CBEA0);
  v123 = v155;
  v124 = v134;
  *v155 = v50;
  v123[1] = v124;
  *((_BYTE *)v123 + 16) = v96;
  v125 = v135;
  v123[3] = v135;
  v123[4] = 0x3FE0000000000000;
  v123[5] = 0;
  *((_BYTE *)v123 + 48) = 1;
  v126 = sub_100004EAC(&qword_1000CBEA8);
  sub_10000AD78((uint64_t)v17, (uint64_t)v123 + *(int *)(v126 + 64), &qword_1000CBEA0);
  sub_10000ADBC(v50, v124, v96);
  swift_bridgeObjectRetain(v125);
  sub_10000AE2C((uint64_t)v122, &qword_1000CBEA0);
  sub_10000AE2C((uint64_t)v17, &qword_1000CBEA0);
  sub_10000ADF4(v50, v124, v96);
  return swift_bridgeObjectRelease(v125);
}

uint64_t sub_100075664(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = a1;
  v15[2] = a2;
  v10 = sub_100004EAC(&qword_1000C9CC0);
  State.wrappedValue.getter(&v16, v10);
  v11 = v16;
  v12 = objc_msgSend(a3, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

  sub_100081FB0(3, (uint64_t)v9);
  swift_release(v11, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100075744@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000744A0(*(_QWORD *)v1, *(void **)(v1 + 8), *(void **)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_100075750@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100075778(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1000757A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000757C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000757F0(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_100075818(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_100075840(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v2 + 16), a2);
  swift_release(*(_QWORD *)(v2 + 24), v3);

  return swift_deallocObject(v2, 48, 7);
}

uint64_t sub_10007587C()
{
  uint64_t v0;

  return sub_100075664(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100075888(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000758CC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100075908@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100075930(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_100075958(uint64_t a1, void *a2, char *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t KeyPath;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  char v25;
  id v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  id v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];
  _QWORD v40[3];

  v35 = a4;
  v36 = a3;
  v34 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C74A0 != -1)
    swift_once(&qword_1000C74A0, sub_10007DF64);
  swift_beginAccess(&qword_1000D1DF8, v40, 32, 0);
  v9 = qword_1000D1DF8;
  if (!*(_QWORD *)(qword_1000D1DF8 + 16))
    goto LABEL_10;
  v10 = sub_10001CCB8(a1);
  if ((v11 & 1) == 0)
    goto LABEL_10;
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
  swift_endAccess(v40);
  KeyPath = swift_getKeyPath(&unk_100095B90);
  v9 = v12 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel___observationRegistrar;
  v40[0] = v12;
  v14 = sub_100075C6C();
  swift_retain(v12);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v40, KeyPath, v14);
  swift_release(KeyPath, v15);
  v16 = (uint64_t *)(v12 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
  v17 = swift_beginAccess(v12 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v40, 0, 0);
  v18 = *v16;
  __chkstk_darwin(v17);
  *(&v33 - 2) = (uint64_t)v36;
  swift_bridgeObjectRetain(v18);
  v19 = sub_100074380(sub_100075CB4, (uint64_t)(&v33 - 4), v18);
  swift_bridgeObjectRelease(v18);
  if (!v19)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v20 = objc_msgSend(v19, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

  v21 = swift_getKeyPath(&unk_100095BB8);
  v39[0] = v12;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v39, v21, v14);
  swift_release(v21, v22);
  v23 = (uint64_t *)(v12 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping);
  swift_beginAccess(v12 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping, v39, 0, 0);
  v9 = *v23;
  if (!*(_QWORD *)(v9 + 16))
  {
    __break(1u);
LABEL_10:
    swift_endAccess(v40);
    __break(1u);
    goto LABEL_11;
  }
  swift_bridgeObjectRetain(v9);
  v24 = sub_10001CCB8((uint64_t)v8);
  if ((v25 & 1) != 0)
  {
    v26 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v24);
    swift_bridgeObjectRelease(v9);
    v27 = *(void (**)(char *, uint64_t))(v6 + 8);
    v27(v8, v5);
    v37 = v12;
    v28 = type metadata accessor for ProofreadingModel(0);
    v29 = v26;
    v30 = v19;
    State.init(wrappedValue:)(&v38, &v37, v28);

    v31 = v38;
    v27(v35, v5);
    v27((char *)a1, v5);
    v27(v36, v5);
    return v31;
  }
LABEL_12:
  result = swift_bridgeObjectRelease(v9);
  __break(1u);
  return result;
}

unint64_t sub_100075C6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C77A8;
  if (!qword_1000C77A8)
  {
    v1 = type metadata accessor for ProofreadingModel(255);
    result = swift_getWitnessTable(&unk_1000921D8, v1);
    atomic_store(result, (unint64_t *)&qword_1000C77A8);
  }
  return result;
}

uint64_t sub_100075CB4(id *a1)
{
  uint64_t v1;

  return sub_1000742C0(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_100075CD8()
{
  return sub_100075D20(&qword_1000CBEB0, &qword_1000CBE80, (void (*)(void))sub_100075D04);
}

uint64_t sub_100075D04()
{
  return sub_100075D20(&qword_1000CBEB8, &qword_1000CBE70, (void (*)(void))sub_100075D8C);
}

uint64_t sub_100075D20(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000ABD0(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100075D8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CBEC0;
  if (!qword_1000CBEC0)
  {
    v1 = sub_10000ABD0(&qword_1000CBE68);
    sub_10000B254(&qword_1000CBEC8, &qword_1000CBE60, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBEC0);
  }
  return result;
}

Swift::Int sub_100075E10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v13[9];

  v1 = v0;
  v2 = type metadata accessor for DocumentResourceIdentifier(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Attachment.UploadState(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v13, 0);
  sub_10007984C(v1, (uint64_t)v8);
  v9 = sub_100004EAC(&qword_1000CBF98);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1uLL);
    v10 = sub_100005900(&qword_1000CC130, (uint64_t (*)(uint64_t))&type metadata accessor for DocumentResourceIdentifier, (uint64_t)&protocol conformance descriptor for DocumentResourceIdentifier);
    dispatch thunk of Hashable.hash(into:)(v13, v2, v10);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return Hasher._finalize()();
}

void sub_100075F74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  v4 = type metadata accessor for DocumentResourceIdentifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007984C(v2, (uint64_t)v10);
  v11 = sub_100004EAC(&qword_1000CBF98);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
    Hasher._combine(_:)(1uLL);
    v12 = sub_100005900(&qword_1000CC130, (uint64_t (*)(uint64_t))&type metadata accessor for DocumentResourceIdentifier, (uint64_t)&protocol conformance descriptor for DocumentResourceIdentifier);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

Swift::Int sub_1000760B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[9];

  v2 = v1;
  v4 = type metadata accessor for DocumentResourceIdentifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v15[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v15, a1);
  sub_10007984C(v2, (uint64_t)v10);
  v11 = sub_100004EAC(&qword_1000CBF98);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
    Hasher._combine(_:)(1uLL);
    v12 = sub_100005900(&qword_1000CC130, (uint64_t (*)(uint64_t))&type metadata accessor for DocumentResourceIdentifier, (uint64_t)&protocol conformance descriptor for DocumentResourceIdentifier);
    dispatch thunk of Hashable.hash(into:)(v15, v4, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return Hasher._finalize()();
}

uint64_t sub_100076214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSURL *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t inited;
  NSString *v32;
  NSString *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  uint64_t v40;
  uint64_t result;
  _QWORD *v42;
  uint64_t v43;
  _BYTE v44[16];
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  void (*v49)(_QWORD, _QWORD, _QWORD);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[56];

  v51 = a4;
  v52 = a5;
  v55 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v48 = &v44[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_100004EAC(&qword_1000CBF90);
  __chkstk_darwin(v12);
  v47 = &v44[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for URLResourceValues(0);
  v45 = *(_QWORD *)(v14 - 8);
  v46 = v14;
  __chkstk_darwin(v14);
  v16 = &v44[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = (int *)type metadata accessor for Attachment(0);
  v18 = a6 + v17[6];
  v19 = type metadata accessor for UTType(0);
  v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v19 - 8) + 56);
  v54 = v18;
  v49 = v20;
  v50 = v19;
  v20(v18, 1, 1);
  v21 = a6 + v17[7];
  *(_QWORD *)v21 = 0;
  v53 = (uint64_t *)v21;
  *(_BYTE *)(v21 + 8) = 1;
  *(_QWORD *)(a6 + v17[9]) = 0;
  v22 = a6 + v17[10];
  v23 = sub_100004EAC(&qword_1000CBF98);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  URL._bridgeToObjectiveC()(v24);
  v26 = v25;
  v27 = (void *)_CFURLCopySecurityScopeFromFileURL();

  if (v27)
  {

    URL.startAccessingSecurityScopedResource()();
  }
  v28 = v55;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a6, a1, v55);
  v29 = (_QWORD *)(a6 + v17[5]);
  *v29 = a2;
  v29[1] = a3;
  v30 = sub_100004EAC(&qword_1000CC0F0);
  inited = swift_initStackObject(v30, v56);
  *(_OWORD *)(inited + 16) = xmmword_100092100;
  *(_QWORD *)(inited + 32) = NSURLFileSizeKey;
  *(_QWORD *)(inited + 40) = NSURLContentTypeKey;
  v32 = NSURLFileSizeKey;
  v33 = NSURLContentTypeKey;
  v34 = sub_100079590(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy(inited + 32, 2, v35);
  URL.resourceValues(forKeys:)(v34);
  v36 = swift_bridgeObjectRelease(v34);
  v37 = URLResourceValues.fileSize.getter(v36);
  v38 = v53;
  *v53 = v37;
  *((_BYTE *)v38 + 8) = v39 & 1;
  v40 = (uint64_t)v47;
  URLResourceValues.contentType.getter();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v28);
  (*(void (**)(_BYTE *, uint64_t))(v45 + 8))(v16, v46);
  result = sub_1000797BC(v40, v54);
  v42 = (_QWORD *)(a6 + v17[8]);
  v43 = v52;
  *v42 = v51;
  v42[1] = v43;
  return result;
}

void sub_1000767A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;

  v2 = v1;
  v4 = type metadata accessor for DocumentResourceIdentifier(0);
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  __chkstk_darwin(v4);
  v38 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Attachment.UploadState(0);
  __chkstk_darwin(v6);
  v41 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UTType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004EAC(&qword_1000CBF90);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = sub_100005900(&qword_1000CC0E0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v15, v16);
  v17 = (int *)type metadata accessor for Attachment(0);
  v18 = (uint64_t *)(v1 + v17[5]);
  v19 = v18[1];
  if (v19)
  {
    v20 = *v18;
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(a1, v20, v19);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  sub_100079804(v1 + v17[6], (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    Hasher._combine(_:)(1u);
    v21 = sub_100005900(&qword_1000CC128, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, (uint64_t)&protocol conformance descriptor for UTType);
    dispatch thunk of Hashable.hash(into:)(a1, v8, v21);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v22 = (uint64_t)v41;
  v23 = v1 + v17[7];
  if (*(_BYTE *)(v23 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v24 = *(_QWORD *)v23;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }
  v25 = (uint64_t *)(v1 + v17[8]);
  v26 = *v25;
  v27 = v25[1];
  swift_bridgeObjectRetain(v27);
  String.hash(into:)(a1, v26, v27);
  swift_bridgeObjectRelease(v27);
  v28 = *(void **)(v2 + v17[9]);
  if (v28)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CGImage(0);
    v30 = v29;
    v31 = sub_100005900(&qword_1000CC110, (uint64_t (*)(uint64_t))type metadata accessor for CGImage, (uint64_t)&unk_100091EAC);
    v32 = v28;
    _CFObject.hash(into:)(a1, v30, v31);

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  sub_10007984C(v2 + v17[10], v22);
  v33 = sub_100004EAC(&qword_1000CBF98);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v22, 1, v33) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v35 = v38;
    v34 = v39;
    v36 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v38, v22, v40);
    Hasher._combine(_:)(1uLL);
    v37 = sub_100005900(&qword_1000CC130, (uint64_t (*)(uint64_t))&type metadata accessor for DocumentResourceIdentifier, (uint64_t)&protocol conformance descriptor for DocumentResourceIdentifier);
    dispatch thunk of Hashable.hash(into:)(a1, v36, v37);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
  }
}

uint64_t sub_100076B94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

Swift::Int sub_100076BD0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_1000767A4((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100076C10(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_1000767A4((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_100076C48(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return v4 == 0;
  if (!v4)
    return 0;
  v5 = *a1;
  if (v5 == *a2 && v3 == v4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v5, v3, *a2, v4, 0);
}

Swift::Int sub_100076C94()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v4, v1, v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_100076D00(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  if (v3)
  {
    v4 = *v1;
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(a1, v4, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_100076D64(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  if (v3)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v5, v2, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_100076DCC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[5] = a1;
  v2[6] = a2;
  v3 = type metadata accessor for URL.DirectoryHint(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v2[13] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[14] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v9);
  v2[16] = swift_task_alloc(v9);
  v2[17] = swift_task_alloc(v9);
  return swift_task_switch(sub_100076EC4, 0, 0);
}

uint64_t sub_100076EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  NSURL *v28;
  void *v29;
  void *v30;
  NSURL *v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = ((uint64_t (*)(void))ReceivedTransferredFile.file.getter)();
  URL.deletingPathExtension()(v5);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v7 = v6(v1, v3);
  v45 = URL.lastPathComponent.getter(v7);
  v51 = v8;
  v9 = v6(v2, v3);
  v10 = ReceivedTransferredFile.file.getter(v9);
  v48 = URL.pathExtension.getter(v10);
  v49 = v11;
  v50 = (void (*)(uint64_t, uint64_t))v6;
  v6(v2, v3);
  if (qword_1000C7498 != -1)
    swift_once(&qword_1000C7498, sub_100077568);
  v12 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 104);
  v17 = *(_QWORD *)(v0 + 88);
  v46 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v0 + 64);
  v19 = *(_QWORD *)(v0 + 72);
  v47 = *(_QWORD *)(v0 + 56);
  v20 = sub_1000063D4(v16, (uint64_t)qword_1000D1DC8);
  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v21 = v44(v12, v20, v16);
  v22 = UUID.init()(v21);
  v23 = UUID.uuidString.getter(v22);
  v25 = v24;
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v46);
  *(_QWORD *)(v0 + 16) = v23;
  *(_QWORD *)(v0 + 24) = v25;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v19, enum case for URL.DirectoryHint.inferFromPath(_:), v47);
  v26 = sub_100015204();
  URL.appending<A>(path:directoryHint:)(v0 + 16, v19, &type metadata for String, v26);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v47);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v50(v12, v16);
  URL.appendingPathExtension(_:)(v48, v49);
  swift_bridgeObjectRelease(v49);
  v50(v13, v16);
  v27 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  ReceivedTransferredFile.file.getter(v27);
  URL._bridgeToObjectiveC()(v28);
  v30 = v29;
  v50(v13, v16);
  URL._bridgeToObjectiveC()(v31);
  v33 = v32;
  *(_QWORD *)(v0 + 32) = 0;
  LODWORD(v16) = objc_msgSend(v27, "moveItemAtURL:toURL:error:", v30, v32, v0 + 32);

  v34 = *(id *)(v0 + 32);
  v35 = *(_QWORD *)(v0 + 128);
  v36 = *(_QWORD *)(v0 + 136);
  v37 = *(_QWORD *)(v0 + 120);
  v38 = *(_QWORD *)(v0 + 96);
  v39 = *(_QWORD *)(v0 + 104);
  v40 = *(_QWORD *)(v0 + 72);
  if ((_DWORD)v16)
  {
    v41 = *(_QWORD *)(v0 + 40);
    v44(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    sub_100076214(v36, 0, 0xE000000000000000, v45, v51, v41);
  }
  else
  {
    v42 = v34;
    swift_bridgeObjectRelease(v51);
    _convertNSErrorToError(_:)(v42);

    swift_willThrow();
  }
  v50(v37, v39);
  swift_task_dealloc(v36);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100077280(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = type metadata accessor for UTType(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UTType.data.getter(v5);
  return FileRepresentation.init(importedContentType:shouldAttemptToOpenInPlace:importing:)(v7, 0, &unk_1000CC0E8, 0, a1, a2);
}

uint64_t sub_100077310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  int *v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  __int128 v24;
  _QWORD v25[2];

  v1 = sub_100004EAC(&qword_1000CBF90);
  __chkstk_darwin(v1);
  v3 = (char *)&v25[-2] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = 0;
  v25[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(58);
  v4._object = (void *)0x80000001000ACE00;
  v4._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v4);
  v5 = (int *)type metadata accessor for Attachment(0);
  v24 = *(_OWORD *)(v0 + v5[5]);
  _print_unlocked<A, B>(_:_:)(&v24, v25, &type metadata for AttachmentType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v6._countAndFlagsBits = 0x657079547475202CLL;
  v6._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v6);
  sub_100079804(v0 + v5[6], (uint64_t)v3);
  v7 = type metadata accessor for UTType(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v3, 1, v7) == 1)
  {
    sub_10000AE2C((uint64_t)v3, &qword_1000CBF90);
    v9 = (void *)0xE300000000000000;
    v10 = 7104878;
  }
  else
  {
    v10 = UTType.identifier.getter();
    v9 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v3, v7);
  }
  v12._countAndFlagsBits = v10;
  v12._object = v9;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v9);
  v13._countAndFlagsBits = 0x203A657A6973202CLL;
  v13._object = (void *)0xE800000000000000;
  String.append(_:)(v13);
  v14 = (uint64_t *)(v0 + v5[7]);
  v15 = *v14;
  LOBYTE(v14) = *((_BYTE *)v14 + 8);
  *(_QWORD *)&v24 = v15;
  BYTE8(v24) = (_BYTE)v14;
  v16 = sub_100004EAC(&qword_1000CA228);
  v17._countAndFlagsBits = String.init<A>(describing:)(&v24, v16);
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(object);
  v19._countAndFlagsBits = 0x6F6C70557369202CLL;
  v19._object = (void *)0xEE00203A64656461;
  String.append(_:)(v19);
  v20 = v0 + v5[10];
  v21 = type metadata accessor for Attachment.UploadState(0);
  _print_unlocked<A, B>(_:_:)(v20, v25, v21, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v22._countAndFlagsBits = 41;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return v25[0];
}

id sub_100077568()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for URL(0);
  sub_100006394(v0, qword_1000D1DC8);
  v1 = sub_1000063D4(v0, (uint64_t)qword_1000D1DC8);
  return sub_1000775B0(v1);
}

id sub_1000775B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  id v14;
  unint64_t v15;
  void (*v16)(char *, uint64_t);
  id v17;
  NSURL *v18;
  void *v19;
  void *v20;
  id result;
  id v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;

  v28 = a1;
  v1 = type metadata accessor for URL.DirectoryHint(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v26 - v10;
  v12 = (void *)objc_opt_self(NSFileManager);
  v13 = objc_msgSend(v12, "defaultManager");
  v14 = objc_msgSend(v13, "temporaryDirectory");

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v30 = (void *)0xD000000000000016;
  v31 = 0x80000001000AB450;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for URL.DirectoryHint.inferFromPath(_:), v1);
  v15 = sub_100015204();
  URL.appending<A>(path:directoryHint:)(&v30, v4, &type metadata for String, v15);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRelease(v31);
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v9, v5);
  v17 = objc_msgSend(v12, "defaultManager");
  URL._bridgeToObjectiveC()(v18);
  v20 = v19;
  v30 = 0;
  LODWORD(v4) = objc_msgSend(v17, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v19, 1, 0, &v30);

  v27 = v30;
  if ((_DWORD)v4)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v28, v11, v5);
    return v27;
  }
  else
  {
    v22 = v27;
    v23 = _convertNSErrorToError(_:)(v27);

    swift_willThrow();
    v16(v11, v5);
    v30 = 0;
    v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v24._countAndFlagsBits = 0xD00000000000001DLL;
    v24._object = (void *)0x80000001000ACDE0;
    String.append(_:)(v24);
    v29 = v23;
    v25 = sub_100004EAC(&qword_1000CC100);
    _print_unlocked<A, B>(_:_:)(&v29, &v30, v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v30, v31, "WritingToolsUIService/AttachmentManager.swift", 45, 2, 162, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000778D0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC21WritingToolsUIService17AttachmentManager___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100077928()
{
  return type metadata accessor for AttachmentManager(0);
}

uint64_t type metadata accessor for AttachmentManager(uint64_t a1)
{
  return sub_1000469DC(a1, qword_1000CBF00, (uint64_t)&nominal type descriptor for AttachmentManager);
}

uint64_t sub_100077944(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t *sub_1000779C0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  char *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (char *)a1 + v9;
    v14 = (char *)a2 + v9;
    v15 = type metadata accessor for UTType(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain(v12);
    if (v17(v14, 1, v15))
    {
      v18 = sub_100004EAC(&qword_1000CBF90);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v20 = a3[7];
    v21 = a3[8];
    v22 = (char *)a1 + v20;
    v23 = (char *)a2 + v20;
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = (uint64_t *)((char *)a1 + v21);
    v25 = (uint64_t *)((char *)a2 + v21);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = a3[9];
    v28 = a3[10];
    v29 = *(void **)((char *)a2 + v27);
    *(uint64_t *)((char *)a1 + v27) = (uint64_t)v29;
    v30 = (char *)a1 + v28;
    v31 = (char *)a2 + v28;
    swift_bridgeObjectRetain(v26);
    v32 = v29;
    v33 = sub_100004EAC(&qword_1000CBF98);
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v31, 1, v33))
    {
      v35 = type metadata accessor for Attachment.UploadState(0);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v36 = type metadata accessor for DocumentResourceIdentifier(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v30, v31, v36);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
    }
  }
  return a1;
}

uint64_t type metadata accessor for Attachment.UploadState(uint64_t a1)
{
  return sub_1000469DC(a1, (uint64_t *)&unk_1000CC0C0, (uint64_t)&nominal type descriptor for Attachment.UploadState);
}

uint64_t sub_100077BD0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  v5 = a1 + a2[6];
  v6 = type metadata accessor for UTType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));

  v8 = a1 + a2[10];
  v9 = sub_100004EAC(&qword_1000CBF98);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v11 = type metadata accessor for DocumentResourceIdentifier(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
  }
  return result;
}

uint64_t sub_100077CE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  const void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (void *)(a1 + v8);
  v13 = (const void *)(a2 + v8);
  v14 = type metadata accessor for UTType(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain(v11);
  if (v16(v13, 1, v14))
  {
    v17 = sub_100004EAC(&qword_1000CBF90);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = (_QWORD *)(a1 + v19);
  v23 = (_QWORD *)(a2 + v19);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = a3[9];
  v26 = a3[10];
  v27 = *(void **)(a2 + v25);
  *(_QWORD *)(a1 + v25) = v27;
  v28 = (void *)(a1 + v26);
  v29 = (const void *)(a2 + v26);
  swift_bridgeObjectRetain(v24);
  v30 = v27;
  v31 = sub_100004EAC(&qword_1000CBF98);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48))(v29, 1, v31))
  {
    v33 = type metadata accessor for Attachment.UploadState(0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v34 = type metadata accessor for DocumentResourceIdentifier(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v28, v29, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v28, 0, 1, v31);
  }
  return a1;
}

uint64_t sub_100077EB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(void *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for UTType(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_100004EAC(&qword_1000CBF90);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  v21 = a3[7];
  v22 = a1 + v21;
  v23 = (uint64_t *)(a2 + v21);
  v24 = *v23;
  *(_BYTE *)(v22 + 8) = *((_BYTE *)v23 + 8);
  *(_QWORD *)v22 = v24;
  v25 = a3[8];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v28 = v27[1];
  v29 = v26[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = a3[9];
  v31 = *(void **)(a1 + v30);
  v32 = *(void **)(a2 + v30);
  *(_QWORD *)(a1 + v30) = v32;
  v33 = v32;

  v34 = a3[10];
  v35 = (void *)(a1 + v34);
  v36 = (void *)(a2 + v34);
  v37 = sub_100004EAC(&qword_1000CBF98);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      v45 = type metadata accessor for DocumentResourceIdentifier(0);
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v35, v36, v45);
      return a1;
    }
    sub_10000AE2C((uint64_t)v35, &qword_1000CBF98);
    goto LABEL_12;
  }
  if (v41)
  {
LABEL_12:
    v43 = type metadata accessor for Attachment.UploadState(0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    return a1;
  }
  v42 = type metadata accessor for DocumentResourceIdentifier(0);
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v35, v36, v42);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  return a1;
}

uint64_t sub_100078150(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for UTType(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100004EAC(&qword_1000CBF90);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  v17 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = sub_100004EAC(&qword_1000CBF98);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = type metadata accessor for Attachment.UploadState(0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = type metadata accessor for DocumentResourceIdentifier(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v18, v19, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_1000782F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = type metadata accessor for UTType(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
LABEL_6:
    v21 = sub_100004EAC(&qword_1000CBF90);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
LABEL_7:
  v22 = a3[7];
  v23 = a3[8];
  v24 = a1 + v22;
  v25 = a2 + v22;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  v26 = (_QWORD *)(a1 + v23);
  v27 = (uint64_t *)(a2 + v23);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  v31 = a3[9];
  v32 = *(void **)(a1 + v31);
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);

  v33 = a3[10];
  v34 = (void *)(a1 + v33);
  v35 = (void *)(a2 + v33);
  v36 = sub_100004EAC(&qword_1000CBF98);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38(v35, 1, v36);
  if (!v39)
  {
    if (!v40)
    {
      v44 = type metadata accessor for DocumentResourceIdentifier(0);
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v44 - 8) + 40))(v34, v35, v44);
      return a1;
    }
    sub_10000AE2C((uint64_t)v34, &qword_1000CBF98);
    goto LABEL_12;
  }
  if (v40)
  {
LABEL_12:
    v42 = type metadata accessor for Attachment.UploadState(0);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    return a1;
  }
  v41 = type metadata accessor for DocumentResourceIdentifier(0);
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v34, v35, v41);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  return a1;
}

uint64_t sub_10007856C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100078578);
}

uint64_t sub_100078578(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_100004EAC(&qword_1000CBF90);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Attachment.UploadState(0);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[10];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10007864C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100078658);
}

uint64_t sub_100078658(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_100004EAC(&qword_1000CBF90);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[6];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[8] + 8) = (a2 - 1);
        return result;
      }
      v10 = type metadata accessor for Attachment.UploadState(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[10];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for Attachment(uint64_t a1)
{
  return sub_1000469DC(a1, (uint64_t *)&unk_1000CBFF8, (uint64_t)&nominal type descriptor for Attachment);
}

void sub_10007873C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = &unk_100095C30;
    sub_100078800(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v8[3] = &unk_100095C48;
      v8[4] = &unk_100095C60;
      v8[5] = &unk_100095C78;
      v6 = type metadata accessor for Attachment.UploadState(319);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 7, v8, a1 + 16);
      }
    }
  }
}

void sub_100078800(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000CC008)
  {
    v2 = type metadata accessor for UTType(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000CC008);
  }
}

uint64_t *sub_100078854(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = sub_100004EAC(&qword_1000CBF98);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = type metadata accessor for DocumentResourceIdentifier(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10007892C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = sub_100004EAC(&qword_1000CBF98);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for DocumentResourceIdentifier(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *sub_100078994(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100004EAC(&qword_1000CBF98);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for DocumentResourceIdentifier(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100078A48(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_100004EAC(&qword_1000CBF98);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = type metadata accessor for DocumentResourceIdentifier(0);
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    sub_10000AE2C((uint64_t)a1, &qword_1000CBF98);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for DocumentResourceIdentifier(0);
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_100078B54(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_100004EAC(&qword_1000CBF98);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for DocumentResourceIdentifier(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100078C08(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_100004EAC(&qword_1000CBF98);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = type metadata accessor for DocumentResourceIdentifier(0);
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    sub_10000AE2C((uint64_t)a1, &qword_1000CBF98);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for DocumentResourceIdentifier(0);
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_100078D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100078D20);
}

uint64_t sub_100078D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_100004EAC(&qword_1000CBF98);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_100078D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100078D7C);
}

uint64_t sub_100078D7C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_100004EAC(&qword_1000CBF98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_100078DD0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004EAC(&qword_1000CBF98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_100078E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CBF98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t sub_100078E50(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for DocumentResourceIdentifier(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t sub_100078EA4()
{
  return sub_100005900(&qword_1000CC0D0, type metadata accessor for Attachment.UploadState, (uint64_t)&unk_100095CDC);
}

uint64_t sub_100078ED0()
{
  return sub_100005900(&qword_1000CC0D8, type metadata accessor for Attachment, (uint64_t)&unk_100095D44);
}

uint64_t sub_100078EFC()
{
  return sub_100005900(&qword_1000CC0E0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
}

uint64_t sub_100078F28(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B147C, 1);
}

uint64_t sub_100078F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for DocumentResourceIdentifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Attachment.UploadState(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004EAC(&qword_1000CC120);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_10007984C(a1, (uint64_t)v14);
  sub_10007984C(a2, v15);
  v16 = sub_100004EAC(&qword_1000CBF98);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48);
  if (v17((uint64_t)v14, 1, v16) != 1)
  {
    sub_10007984C((uint64_t)v14, (uint64_t)v10);
    if (v17(v15, 1, v16) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      v18 = static DocumentResourceIdentifier.== infix(_:_:)(v10, v7);
      v19 = *(void (**)(char *, uint64_t))(v5 + 8);
      v19(v7, v4);
      v19(v10, v4);
      sub_100079890((uint64_t)v14);
      return v18 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_6;
  }
  if (v17(v15, 1, v16) != 1)
  {
LABEL_6:
    sub_10000AE2C((uint64_t)v14, &qword_1000CC120);
    v18 = 0;
    return v18 & 1;
  }
  sub_100079890((uint64_t)v14);
  v18 = 1;
  return v18 & 1;
}

uint64_t sub_100079128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v4 = type metadata accessor for UTType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004EAC(&qword_1000CC108);
  __chkstk_darwin(v8);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004EAC(&qword_1000CBF90);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v66 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v66 - v18;
  if ((static URL.== infix(_:_:)(a1, a2) & 1) == 0)
    goto LABEL_17;
  v20 = type metadata accessor for Attachment(0);
  v21 = *(int *)(v20 + 20);
  v22 = (uint64_t *)(a1 + v21);
  v23 = *(_QWORD *)(a1 + v21 + 8);
  v24 = (uint64_t *)(a2 + v21);
  v25 = v24[1];
  if (v23)
  {
    if (!v25)
      goto LABEL_17;
    v26 = *v22;
    v27 = *v24;
    if (*v22 != *v24 || v23 != v25)
    {
      v69 = a1;
      v29 = v20;
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v23, v27, v25, 0);
      v20 = v29;
      a1 = v69;
      v31 = v30;
      v32 = 0;
      if ((v31 & 1) == 0)
        return v32 & 1;
    }
  }
  else if (v25)
  {
    goto LABEL_17;
  }
  v33 = *(int *)(v20 + 24);
  v69 = a1;
  v34 = a1 + v33;
  v35 = v20;
  sub_100079804(v34, (uint64_t)v19);
  v67 = a2;
  v68 = v35;
  sub_100079804(a2 + *(int *)(v35 + 24), (uint64_t)v17);
  v36 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_100079804((uint64_t)v19, (uint64_t)v10);
  sub_100079804((uint64_t)v17, v36);
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v37((uint64_t)v10, 1, v4) == 1)
  {
    sub_10000AE2C((uint64_t)v17, &qword_1000CBF90);
    sub_10000AE2C((uint64_t)v19, &qword_1000CBF90);
    if (v37(v36, 1, v4) == 1)
    {
      sub_10000AE2C((uint64_t)v10, &qword_1000CBF90);
      goto LABEL_20;
    }
LABEL_16:
    sub_10000AE2C((uint64_t)v10, &qword_1000CC108);
    goto LABEL_17;
  }
  sub_100079804((uint64_t)v10, (uint64_t)v14);
  if (v37(v36, 1, v4) == 1)
  {
    sub_10000AE2C((uint64_t)v17, &qword_1000CBF90);
    sub_10000AE2C((uint64_t)v19, &qword_1000CBF90);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    goto LABEL_16;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v36, v4);
  v39 = sub_100005900(&qword_1000CC118, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, (uint64_t)&protocol conformance descriptor for UTType);
  v40 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v4, v39);
  v41 = *(void (**)(char *, uint64_t))(v5 + 8);
  v41(v7, v4);
  sub_10000AE2C((uint64_t)v17, &qword_1000CBF90);
  sub_10000AE2C((uint64_t)v19, &qword_1000CBF90);
  v41(v14, v4);
  sub_10000AE2C((uint64_t)v10, &qword_1000CBF90);
  if ((v40 & 1) == 0)
    goto LABEL_17;
LABEL_20:
  v42 = v68;
  v43 = v69;
  v44 = *(int *)(v68 + 28);
  v45 = (_QWORD *)(v69 + v44);
  v46 = *(_BYTE *)(v69 + v44 + 8);
  v47 = v67;
  v48 = (_QWORD *)(v67 + v44);
  v49 = *(unsigned __int8 *)(v67 + v44 + 8);
  if ((v46 & 1) != 0)
  {
    if (v49)
      goto LABEL_26;
LABEL_17:
    v32 = 0;
    return v32 & 1;
  }
  if (*v45 != *v48)
    LOBYTE(v49) = 1;
  if ((v49 & 1) != 0)
    goto LABEL_17;
LABEL_26:
  v50 = *(int *)(v68 + 32);
  v51 = *(_QWORD *)(v69 + v50);
  v52 = *(_QWORD *)(v69 + v50 + 8);
  v53 = (_QWORD *)(v67 + v50);
  v54 = v53[1];
  if (v51 == *v53 && v52 == v54
    || (v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v52, *v53, v54, 0),
        v42 = v68,
        v56 = v55,
        v32 = 0,
        (v56 & 1) != 0))
  {
    v57 = *(int *)(v42 + 36);
    v58 = v47;
    v59 = *(void **)(v43 + v57);
    v60 = *(void **)(v58 + v57);
    if (v59)
    {
      if (v60)
      {
        type metadata accessor for CGImage(0);
        v62 = v61;
        v63 = sub_100005900(&qword_1000CC110, (uint64_t (*)(uint64_t))type metadata accessor for CGImage, (uint64_t)&unk_100091EAC);
        v64 = v60;
        v65 = v59;
        LOBYTE(v62) = static _CFObject.== infix(_:_:)(v65, v64, v62, v63);

        v42 = v68;
        if ((v62 & 1) != 0)
          goto LABEL_34;
      }
    }
    else if (!v60)
    {
LABEL_34:
      v32 = sub_100078F38(v43 + *(int *)(v42 + 40), v67 + *(int *)(v42 + 40));
      return v32 & 1;
    }
    goto LABEL_17;
  }
  return v32 & 1;
}

void *sub_100079590(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  Swift::Int v12;
  void *result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100004EAC(&qword_1000CC0F8);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v38 = v1;
    v39 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v39 + 8 * v4);
      v7 = *(_QWORD *)(v3 + 40);
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v10 = v9;
      Hasher.init(_seed:)(v40, v7);
      v11 = v6;
      String.hash(into:)(v40, v8, v10);
      v12 = Hasher._finalize()();
      result = (void *)swift_bridgeObjectRelease(v10);
      v14 = -1 << *(_BYTE *)(v3 + 32);
      v15 = v12 & ~v14;
      v16 = v15 >> 6;
      v17 = *(_QWORD *)(v5 + 8 * (v15 >> 6));
      v18 = 1 << v15;
      if (((1 << v15) & v17) != 0)
      {
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15));
        v21 = v20;
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
        if (v19 == v22 && v21 == v23)
        {
LABEL_3:
          swift_bridgeObjectRelease_n(v21, 2);
LABEL_4:

          goto LABEL_5;
        }
        v25 = v23;
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0);
        swift_bridgeObjectRelease(v21);
        result = (void *)swift_bridgeObjectRelease(v25);
        if ((v26 & 1) != 0)
          goto LABEL_4;
        v27 = ~v14;
        while (1)
        {
          v15 = (v15 + 1) & v27;
          v16 = v15 >> 6;
          v17 = *(_QWORD *)(v5 + 8 * (v15 >> 6));
          v18 = 1 << v15;
          if ((v17 & (1 << v15)) == 0)
            break;
          v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15));
          v21 = v29;
          v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
          if (v28 == v30 && v21 == v31)
            goto LABEL_3;
          v33 = v31;
          v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v21, v30, v31, 0);
          swift_bridgeObjectRelease(v21);
          result = (void *)swift_bridgeObjectRelease(v33);
          if ((v34 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v16) = v18 | v17;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15) = v11;
      v35 = *(_QWORD *)(v3 + 16);
      v36 = __OFADD__(v35, 1);
      v37 = v35 + 1;
      if (v36)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v37;
LABEL_5:
      if (++v4 == v38)
        return (void *)v3;
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_1000797BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CBF90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100079804(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CBF90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007984C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Attachment.UploadState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100079890(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Attachment.UploadState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for AttachmentType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for AttachmentType(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for AttachmentType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for AttachmentType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentType(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AttachmentType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_100079A14(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100079A2C(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentType()
{
  return &type metadata for AttachmentType;
}

unint64_t sub_100079A60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CC138;
  if (!qword_1000CC138)
  {
    v1 = sub_10000ABD0(&qword_1000CC140);
    result = swift_getWitnessTable(&protocol conformance descriptor for FileRepresentation<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CC138);
  }
  return result;
}

unint64_t sub_100079AB0()
{
  unint64_t result;

  result = qword_1000CC148;
  if (!qword_1000CC148)
  {
    result = swift_getWitnessTable(&unk_100095E70, &type metadata for AttachmentType);
    atomic_store(result, (unint64_t *)&qword_1000CC148);
  }
  return result;
}

uint64_t (*sub_100079AF8())(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v0;
  uint64_t v1;
  __int128 v3;

  v0 = sub_100071C50();
  EnvironmentValues.subscript.getter(&v3, &type metadata for NavigationDestinationEnvironmentKey, &type metadata for NavigationDestinationEnvironmentKey, v0);
  v1 = swift_allocObject(&unk_1000C1820, 32, 7);
  *(_OWORD *)(v1 + 16) = v3;
  return sub_100079B78;
}

uint64_t sub_100079B54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 24), a2);
  return swift_deallocObject(v2, 32, 7);
}

uint64_t sub_100079B78(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  _QWORD v7[3];
  char v8;

  v5 = *(uint64_t (**)(_QWORD *))(v4 + 16);
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v8 = a4;
  return v5(v7);
}

ValueMetadata *type metadata accessor for NavigationDestinationEnvironmentKey()
{
  return &type metadata for NavigationDestinationEnvironmentKey;
}

void sub_100079BC0(_QWORD *a1@<X8>)
{
  *a1 = nullsub_1;
  a1[1] = 0;
}

uint64_t sub_100079BD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v30 = a5;
  v29 = type metadata accessor for TaskPriority(0);
  v9 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004EAC(&qword_1000CC150);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004EAC(&qword_1000C9768);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v14 = static VerticalAlignment.center.getter(v16);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 1;
  v19 = sub_100004EAC(&qword_1000CC158);
  sub_100079E20(a1, a2, a3, a4, &v14[*(int *)(v19 + 44)]);
  v20 = swift_allocObject(&unk_1000C1908, 48, 7);
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  *(_BYTE *)(v20 + 32) = a3;
  *(_QWORD *)(v20 + 40) = a4;
  swift_retain(a4);
  swift_retain(a1);
  v21 = swift_retain(a2);
  static TaskPriority.userInitiated.getter(v21);
  v22 = &v18[*(int *)(v15 + 36)];
  v23 = type metadata accessor for _TaskModifier(0);
  v24 = v29;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(&v22[*(int *)(v23 + 20)], v11, v29);
  *(_QWORD *)v22 = &unk_1000CC168;
  *((_QWORD *)v22 + 1) = v20;
  sub_10000AD78((uint64_t)v14, (uint64_t)v18, &qword_1000CC150);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v24);
  v25 = sub_10000AE2C((uint64_t)v14, &qword_1000CC150);
  v26 = static Alignment.center.getter(v25);
  sub_10002E13C(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v30, 0.0, 1, INFINITY, 0, v26, v27);
  return sub_10000AE2C((uint64_t)v18, &qword_1000C9768);
}

uint64_t sub_100079E20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t KeyPath;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t result;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _OWORD *v182;
  __int128 v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  void (*v196)(char *, char *, uint64_t);
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  void (*v201)(char *, char *, uint64_t);
  uint64_t v202;
  char *v203;
  int *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  void (*v213)(char *, uint64_t);
  void (*v214)(char *, uint64_t);
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  void (*v228)(char *, uint64_t);
  void (*v229)(char *, char *, uint64_t);
  unint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  char v266[8];
  uint64_t v267;
  uint64_t v268;
  char v269;
  uint64_t v270;
  _QWORD v271[2];
  uint64_t v272;
  _OWORD v273[3];
  _OWORD v274[3];

  v264 = a4;
  v263 = a3;
  v235 = a5;
  v234 = sub_100004EAC(&qword_1000C77B0);
  v233 = *(_QWORD *)(v234 - 8);
  __chkstk_darwin(v234);
  v232 = (char *)&v216 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v251 = sub_100004EAC(&qword_1000C77B8);
  v249 = *(_QWORD *)(v251 - 8);
  v8 = __chkstk_darwin(v251);
  v250 = (char *)&v216 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v248 = (char *)&v216 - v10;
  v223 = type metadata accessor for IconOnlyLabelStyle(0);
  v221 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v220 = (char *)&v216 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = sub_100004EAC(&qword_1000CC170);
  __chkstk_darwin(v217);
  v218 = (uint64_t *)((char *)&v216 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v226 = sub_100004EAC(&qword_1000CC178);
  v225 = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v222 = (char *)&v216 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = sub_100004EAC(&qword_1000CC180);
  __chkstk_darwin(v219);
  v227 = (char *)&v216 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v242 = sub_100004EAC(&qword_1000CC188);
  v231 = *(_QWORD *)(v242 - 8);
  __chkstk_darwin(v242);
  v224 = (uint64_t)&v216 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004EAC(&qword_1000CC190);
  v17 = __chkstk_darwin(v16);
  v259 = (uint64_t)&v216 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v258 = (uint64_t)&v216 - v19;
  v20 = sub_100004EAC(&qword_1000CA140);
  __chkstk_darwin(v20);
  v237 = (char *)&v216 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v22);
  v236 = (char *)&v216 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v241 = sub_100004EAC(&qword_1000CC198);
  v240 = *(_QWORD *)(v241 - 8);
  __chkstk_darwin(v241);
  v238 = (char *)&v216 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = sub_100004EAC(&qword_1000CC1A0);
  v25 = __chkstk_darwin(v239);
  v265 = (uint64_t)&v216 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v260 = (uint64_t)&v216 - v27;
  v254 = type metadata accessor for Divider(0);
  v256 = *(char **)(v254 - 8);
  __chkstk_darwin(v254);
  v253 = (char *)&v216 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = sub_100004EAC(&qword_1000CBB10);
  v29 = __chkstk_darwin(v252);
  v247 = (uint64_t)&v216 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v257 = (char *)&v216 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v216 - v34;
  __chkstk_darwin(v33);
  v261 = (uint64_t)&v216 - v36;
  v37 = sub_100004EAC(&qword_1000C77E0);
  v244 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = (char *)&v216 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100004EAC(&qword_1000C77E8);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v216 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v46 = (char *)&v216 - v45;
  v47 = swift_allocObject(&unk_1000C1930, 48, 7);
  v255 = a1;
  *(_QWORD *)(v47 + 16) = a1;
  *(_QWORD *)(v47 + 24) = a2;
  v262 = a2;
  *(_BYTE *)(v47 + 32) = v263;
  v48 = v264;
  *(_QWORD *)(v47 + 40) = v264;
  swift_retain(v48);
  swift_retain(a1);
  swift_retain(a2);
  v49 = sub_100004EAC(&qword_1000C77F8);
  v50 = sub_10000AB6C();
  Button.init(action:label:)(sub_10007CD74, v47, sub_100008700, 0, v49, v50);
  LOWORD(v274[0]) = 0;
  v51 = sub_10000B254(&qword_1000C7808, &qword_1000C77E0, (uint64_t)&protocol conformance descriptor for Button<A>);
  v230 = sub_10000AC14();
  View.buttonStyle<A>(_:)(v274, v37, &type metadata for InputDashboardButtonStyle, v51, v230);
  (*(void (**)(char *, uint64_t))(v244 + 8))(v39, v37);
  v244 = v41;
  v52 = *(uint64_t (**)(char *, char *, uint64_t))(v41 + 32);
  v243 = v46;
  v245 = v44;
  v246 = v40;
  v53 = v52(v46, v44, v40);
  v54 = v253;
  v55 = Divider.init()(v53);
  v56 = static Alignment.center.getter(v55);
  _FrameLayout.init(width:height:alignment:)(v273, 0, 1, 0x4034000000000000, 0, v56, v57);
  v58 = (uint64_t)v256;
  v59 = v54;
  v60 = v54;
  v61 = v254;
  v229 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v256 + 2);
  v229(v35, v59, v254);
  v62 = &v35[*(int *)(v252 + 36)];
  v63 = v273[1];
  *(_OWORD *)v62 = v273[0];
  *((_OWORD *)v62 + 1) = v63;
  *((_OWORD *)v62 + 2) = v273[2];
  v228 = *(void (**)(char *, uint64_t))(v58 + 8);
  v228(v60, v61);
  v256 = v35;
  sub_10000AC80((uint64_t)v35, v261, &qword_1000CBB10);
  v64 = v255;
  v267 = v255;
  v65 = v262;
  v268 = v262;
  v269 = v263;
  v270 = v264;
  v66 = sub_100004EAC(&qword_1000CC1A8);
  v67 = sub_10000B254(&qword_1000CC1B0, &qword_1000CC1A8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v68 = v238;
  Section<>.init(content:)(sub_10007CD98, v266, v66, v67);
  *(_QWORD *)&v274[0] = v64;
  *((_QWORD *)&v274[0] + 1) = v65;
  v69 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(v271, v69);
  v70 = v271[0];
  KeyPath = swift_getKeyPath(&unk_100095FA0);
  *(_QWORD *)&v274[0] = v70;
  v72 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v274, KeyPath, v72);
  swift_release(KeyPath, v73);
  LOBYTE(KeyPath) = *(_BYTE *)(v70 + 72);
  swift_release(v70, v74);
  v75 = swift_getKeyPath(&unk_100095FC8);
  v76 = swift_allocObject(&unk_1000C1958, 17, 7);
  *(_BYTE *)(v76 + 16) = KeyPath;
  v77 = v240;
  v78 = v265;
  v79 = v68;
  v80 = v68;
  v81 = v241;
  (*(void (**)(uint64_t, char *, uint64_t))(v240 + 16))(v265, v80, v241);
  v82 = (uint64_t *)(v78 + *(int *)(v239 + 36));
  *v82 = v75;
  v82[1] = (uint64_t)sub_10000AC78;
  v82[2] = v76;
  (*(void (**)(char *, uint64_t))(v77 + 8))(v79, v81);
  sub_10000AC80(v78, v260, &qword_1000CC1A0);
  *(_QWORD *)&v274[0] = v64;
  *((_QWORD *)&v274[0] + 1) = v262;
  State.wrappedValue.getter(v271, v69);
  v83 = v271[0];
  v84 = swift_getKeyPath(&unk_100095FF8);
  *(_QWORD *)&v274[0] = v83;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v274, v84, v72);
  swift_release(v84, v85);
  v86 = *(_QWORD *)(v83 + 32);
  v87 = *(_QWORD *)(v83 + 40);
  v88 = *(_QWORD *)(v83 + 48);
  v89 = *(unsigned __int8 *)(v83 + 56);
  sub_10000B04C(v86, v87, v88, *(_BYTE *)(v83 + 56));
  result = swift_release(v83, v90);
  if (v89 == 255)
  {
    __break(1u);
  }
  else
  {
    v92 = v236;
    sub_100061960(v86, v87, v88, v89);
    sub_10000B11C(v86, v87, v88, v89);
    v93 = Text.init(_:)(v92);
    v95 = v94;
    v97 = v96;
    LOBYTE(v92) = v98 & 1;
    v99 = Text.bold()(v93, v94);
    v101 = v100;
    v103 = v102;
    v105 = v104 & 1;
    sub_10000ADF4(v93, v95, (char)v92);
    swift_bridgeObjectRelease(v97);
    v106 = type metadata accessor for Font.Design(0);
    v107 = (uint64_t)v237;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 56))(v237, 1, 1, v106);
    v108 = static Font.system(size:weight:design:)(0, 1, v107, 15.0);
    sub_10000AE2C(v107, &qword_1000CA140);
    v109 = Text.font(_:)(v108, v99, v101, v105, v103);
    v238 = v110;
    LODWORD(v237) = v111;
    v113 = v112;
    swift_release(v108, v110);
    sub_10000ADF4(v99, v101, v105);
    swift_bridgeObjectRelease(v103);
    v114 = v255;
    v115 = v262;
    *(_QWORD *)&v274[0] = v255;
    *((_QWORD *)&v274[0] + 1) = v262;
    State.wrappedValue.getter(v271, v69);
    v116 = v271[0];
    v117 = swift_getKeyPath(&unk_100095FF8);
    *(_QWORD *)&v274[0] = v116;
    v241 = v72;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v274, v117, v72);
    result = swift_release(v117, v118);
    v120 = *(unsigned __int8 *)(v116 + 56);
    v121 = v115;
    v122 = v69;
    v240 = v113;
    v239 = v109;
    if (!v120)
    {
      v123 = v264;
      v124 = v242;
      if (*(unsigned __int8 *)(v116 + 32) - 2 < 4 || !*(_BYTE *)(v116 + 32))
      {
        v132 = v264;
        swift_release(v116, v119);
        *(_QWORD *)&v274[0] = v114;
        *((_QWORD *)&v274[0] + 1) = v121;
        State.wrappedValue.getter(v271, v122);
        v133 = v271[0];
        v134 = swift_getKeyPath(&unk_100095FA0);
        *(_QWORD *)&v274[0] = v133;
        ObservationRegistrar.access<A, B>(_:keyPath:)(v274, v134, v241);
        swift_release(v134, v135);
        v136 = *(_BYTE *)(v133 + 72);
        v138 = swift_release(v133, v137);
        v139 = v263;
        v216 = v122;
        if ((v136 & 1) != 0)
        {
          v140 = 1;
        }
        else
        {
          *(_QWORD *)&v274[0] = v114;
          *((_QWORD *)&v274[0] + 1) = v121;
          State.wrappedValue.getter(v271, v122);
          v141 = v271[0];
          v142 = swift_getKeyPath(&unk_100096020);
          *(_QWORD *)&v274[0] = v141;
          v143 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
          ObservationRegistrar.access<A, B>(_:keyPath:)(v274, v142, v143);
          swift_release(v142, v144);
          v140 = *(unsigned __int8 *)(v141 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__showingOriginal);
          v138 = swift_release(v141, v145);
        }
        v146 = (uint64_t)v227;
        v147 = v217;
        v148 = static VerticalAlignment.center.getter(v138);
        v149 = (uint64_t)v218;
        *v218 = v148;
        *(_QWORD *)(v149 + 8) = 0x4030000000000000;
        *(_BYTE *)(v149 + 16) = 0;
        v150 = sub_100004EAC(&qword_1000CC1C0);
        v151 = sub_10007BCF4(v114, v121, v139 & 1, v132, v140, v149 + *(int *)(v150 + 44));
        v152 = v220;
        IconOnlyLabelStyle.init()(v151);
        v129 = v114;
        v130 = v121;
        v153 = sub_10000B254(&qword_1000CC1C8, &qword_1000CC170, (uint64_t)&protocol conformance descriptor for HStack<A>);
        v154 = sub_100005900(&qword_1000CBD10, (uint64_t (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for IconOnlyLabelStyle);
        v155 = v222;
        v156 = v147;
        v157 = v223;
        View.labelStyle<A>(_:)(v152, v156, v223, v153, v154);
        (*(void (**)(char *, uint64_t))(v221 + 8))(v152, v157);
        sub_10000AE2C(v149, &qword_1000CC170);
        v158 = swift_getKeyPath(&unk_100095FC8);
        v159 = swift_allocObject(&unk_1000C19A8, 17, 7);
        *(_BYTE *)(v159 + 16) = v140;
        v160 = v225;
        v161 = v226;
        (*(void (**)(uint64_t, char *, uint64_t))(v225 + 16))(v146, v155, v226);
        v162 = (uint64_t *)(v146 + *(int *)(v219 + 36));
        *v162 = v158;
        v162[1] = (uint64_t)sub_100015794;
        v162[2] = v159;
        v127 = v263;
        v163 = (*(uint64_t (**)(char *, uint64_t))(v160 + 8))(v155, v161);
        LOBYTE(v158) = static Edge.Set.trailing.getter(v163);
        v164 = EdgeInsets.init(_all:)(10.0);
        v166 = v165;
        v168 = v167;
        v170 = v169;
        v171 = v224;
        sub_10000AD78(v146, v224, &qword_1000CC180);
        v172 = v242;
        v173 = v171 + *(int *)(v242 + 36);
        *(_BYTE *)v173 = v158;
        v124 = v172;
        *(double *)(v173 + 8) = v164;
        *(_QWORD *)(v173 + 16) = v166;
        *(_QWORD *)(v173 + 24) = v168;
        *(_QWORD *)(v173 + 32) = v170;
        *(_BYTE *)(v173 + 40) = 0;
        sub_10000AE2C(v146, &qword_1000CC180);
        v174 = v171;
        v123 = v264;
        v126 = v258;
        sub_10000AC80(v174, v258, &qword_1000CC188);
        v125 = 0;
        v131 = v216;
        goto LABEL_11;
      }
LABEL_4:
      swift_release(v116, v119);
      v125 = 1;
      v126 = v258;
      v127 = v263;
      v128 = v122;
      v129 = v114;
      v130 = v121;
      v131 = v128;
LABEL_11:
      v175 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v231 + 56))(v126, v125, 1, v124);
      v263 = v237 & 1;
      v176 = v253;
      v177 = Divider.init()(v175);
      v178 = static Alignment.center.getter(v177);
      _FrameLayout.init(width:height:alignment:)(v274, 0, 1, 0x4034000000000000, 0, v178, v179);
      v180 = (uint64_t)v257;
      v181 = v254;
      v229(v257, v176, v254);
      v182 = (_OWORD *)(v180 + *(int *)(v252 + 36));
      v183 = v274[1];
      *v182 = v274[0];
      v182[1] = v183;
      v182[2] = v274[2];
      v228(v176, v181);
      sub_10000AC80(v180, (uint64_t)v256, &qword_1000CBB10);
      v184 = swift_allocObject(&unk_1000C1980, 48, 7);
      *(_QWORD *)(v184 + 16) = v129;
      *(_QWORD *)(v184 + 24) = v130;
      *(_BYTE *)(v184 + 32) = v127 & 1;
      *(_QWORD *)(v184 + 40) = v123;
      swift_retain(v129);
      swift_retain(v130);
      swift_retain(v123);
      v185 = v232;
      Button.init(action:label:)(sub_10007CDD4, v184, sub_10000A0DC, 0, &type metadata for Text, &protocol witness table for Text);
      v271[0] = v129;
      v271[1] = v130;
      State.wrappedValue.getter(&v272, v131);
      v186 = v272;
      v187 = swift_getKeyPath(&unk_100095FA0);
      v271[0] = v186;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v271, v187, v241);
      swift_release(v187, v188);
      LOBYTE(v184) = *(_BYTE *)(v186 + 72);
      swift_release(v186, v189);
      LOWORD(v271[0]) = v184;
      v190 = sub_10000B254(&qword_1000C7820, &qword_1000C77B0, (uint64_t)&protocol conformance descriptor for Button<A>);
      v191 = v250;
      v192 = v234;
      View.buttonStyle<A>(_:)(v271, v234, &type metadata for InputDashboardButtonStyle, v190, v230);
      (*(void (**)(char *, uint64_t))(v233 + 8))(v185, v192);
      v193 = v249;
      v194 = v248;
      v195 = v191;
      (*(void (**)(char *, char *, uint64_t))(v249 + 32))(v248, v191, v251);
      v196 = *(void (**)(char *, char *, uint64_t))(v244 + 16);
      v197 = v245;
      v198 = v246;
      v196(v245, v243, v246);
      v199 = (uint64_t)v257;
      sub_10000AD78(v261, (uint64_t)v257, &qword_1000CBB10);
      sub_10000AD78(v260, v265, &qword_1000CC1A0);
      v200 = v263;
      LOBYTE(v271[0]) = v263;
      sub_10000AD78(v258, v259, &qword_1000CC190);
      sub_10000AD78((uint64_t)v256, v247, &qword_1000CBB10);
      v201 = *(void (**)(char *, char *, uint64_t))(v193 + 16);
      v202 = v251;
      v201(v195, v194, v251);
      v203 = v235;
      v196(v235, v197, v198);
      v204 = (int *)sub_100004EAC(&qword_1000CC1B8);
      sub_10000AD78(v199, (uint64_t)&v203[v204[12]], &qword_1000CBB10);
      sub_10000AD78(v265, (uint64_t)&v203[v204[16]], &qword_1000CC1A0);
      v205 = &v203[v204[20]];
      *(_QWORD *)v205 = 0;
      v205[8] = 1;
      v206 = &v203[v204[24]];
      v207 = v239;
      v208 = (uint64_t)v238;
      *(_QWORD *)v206 = v239;
      *((_QWORD *)v206 + 1) = v208;
      v206[16] = v200;
      v209 = v240;
      *((_QWORD *)v206 + 3) = v240;
      v210 = &v203[v204[28]];
      *(_QWORD *)v210 = 0;
      v210[8] = 1;
      sub_10000AD78(v259, (uint64_t)&v203[v204[32]], &qword_1000CC190);
      v211 = v247;
      sub_10000AD78(v247, (uint64_t)&v203[v204[36]], &qword_1000CBB10);
      v212 = v250;
      v201(&v203[v204[40]], v250, v202);
      sub_10000ADBC(v207, v208, v200);
      swift_bridgeObjectRetain(v209);
      sub_10000ADBC(v207, v208, v200);
      v213 = *(void (**)(char *, uint64_t))(v249 + 8);
      swift_bridgeObjectRetain(v209);
      v213(v248, v202);
      sub_10000AE2C((uint64_t)v256, &qword_1000CBB10);
      sub_10000AE2C(v258, &qword_1000CC190);
      sub_10000ADF4(v207, v208, v200);
      swift_bridgeObjectRelease(v209);
      sub_10000AE2C(v260, &qword_1000CC1A0);
      sub_10000AE2C(v261, &qword_1000CBB10);
      v214 = *(void (**)(char *, uint64_t))(v244 + 8);
      v215 = v246;
      v214(v243, v246);
      v213(v212, v202);
      sub_10000AE2C(v211, &qword_1000CBB10);
      sub_10000AE2C(v259, &qword_1000CC190);
      sub_10000ADF4(v207, v208, v271[0]);
      swift_bridgeObjectRelease(v209);
      sub_10000AE2C(v265, &qword_1000CC1A0);
      sub_10000AE2C((uint64_t)v257, &qword_1000CBB10);
      return ((uint64_t (*)(char *, uint64_t))v214)(v245, v215);
    }
    v123 = v264;
    v124 = v242;
    if (v120 != 255)
      goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t sub_10007B2EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  void (*v102)(char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 v130;

  v116 = a3;
  v5 = type metadata accessor for ButtonToggleStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v120 = (char *)v5;
  v121 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100004EAC(&qword_1000C7830);
  v119 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v10 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100004EAC(&qword_1000C7838);
  v11 = *(_QWORD *)(v122 - 8);
  v12 = __chkstk_darwin(v122);
  v14 = (char *)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v104 - v15;
  v111 = a1;
  v112 = a2;
  v128 = a1;
  v129 = a2;
  v110 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.projectedValue.getter(&v123);
  v17 = v123;
  v18 = v124;
  v19 = v125;
  KeyPath = swift_getKeyPath(&unk_100096020);
  v123 = v17;
  v124 = v18;
  v125 = v19;
  v21 = sub_100004EAC(&qword_1000CC1F0);
  Binding.subscript.getter(&v128, KeyPath, v21);
  swift_release(v19, v22);
  swift_release(v18, v23);
  swift_release(KeyPath, v24);
  swift_release(v17, v25);
  v26 = v128;
  v27 = v129;
  v28 = v130;
  v29 = sub_100004EAC(&qword_1000C7848);
  v30 = sub_10000AE78();
  v31 = Toggle.init(isOn:label:)(v26, v27, v28, sub_10007BA90, 0, v29, v30);
  ButtonToggleStyle.init()(v31);
  v32 = sub_10000B254(&qword_1000C7860, &qword_1000C7830, (uint64_t)&protocol conformance descriptor for Toggle<A>);
  v33 = sub_100005900(&qword_1000C7868, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonToggleStyle, (uint64_t)&protocol conformance descriptor for ButtonToggleStyle);
  v34 = v117;
  v35 = v120;
  View.toggleStyle<A>(_:)(v8, v117, v120, v32, v33);
  (*(void (**)(char *, char *))(v121 + 8))(v8, v35);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v10, v34);
  v120 = v16;
  v121 = v11;
  v36 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v118 = v14;
  v36(v16, v14, v122);
  v37 = type metadata accessor for FeedbackFeatureFlags(0);
  v126 = v37;
  v127 = sub_100005900(&qword_1000C7870, (uint64_t (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags, (uint64_t)&protocol conformance descriptor for FeedbackFeatureFlags);
  v38 = sub_10000AF68(&v123);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v38, enum case for FeedbackFeatureFlags.CentralizedFeedback(_:), v37);
  LOBYTE(v37) = isFeatureEnabled(_:)(&v123);
  sub_10000AFA4(&v123);
  if ((v37 & 1) != 0)
  {
    v40 = v111;
    v39 = v112;
    v123 = v111;
    v124 = v112;
    v41 = v110;
    State.wrappedValue.getter(&v128, v110);
    v42 = v128;
    v43 = swift_getKeyPath(&unk_100095FF8);
    v123 = v42;
    v104 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v123, v43, v104);
    swift_release(v43, v44);
    v45 = *(_QWORD *)(v42 + 32);
    v46 = *(_QWORD *)(v42 + 40);
    v47 = *(_QWORD *)(v42 + 48);
    v117 = *(unsigned __int8 *)(v42 + 56);
    sub_10000B04C(v45, v46, v47, v117);
    swift_release(v42, v48);
    v123 = v40;
    v124 = v39;
    State.wrappedValue.getter(&v128, v41);
    v49 = v128;
    v109 = sub_100025E90();
    v108 = v50;
    swift_release(v49, v50);
    v123 = v40;
    v124 = v39;
    State.wrappedValue.getter(&v128, v41);
    v51 = v128;
    v52 = swift_getKeyPath(&unk_100096098);
    v123 = v51;
    v106 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v123, v52, v106);
    swift_release(v52, v53);
    v55 = *(void **)(v51 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__resultAttributedString);
    v56 = v39;
    v57 = v40;
    v119 = v45;
    v114 = v47;
    v115 = v46;
    if (v55)
    {
      v58 = v55;
      v59 = objc_msgSend(v58, "string");
      v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
      v107 = v60;
      swift_release(v51, v60);

    }
    else
    {
      swift_release(v51, v54);
      v113 = 0;
      v107 = 0xE000000000000000;
    }
    v105 = v117;
    v123 = v40;
    v124 = v39;
    State.wrappedValue.getter(&v128, v41);
    v67 = v128;
    v68 = swift_getKeyPath(&unk_1000960C0);
    v123 = v67;
    v69 = v106;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v123, v68, v106);
    swift_release(v68, v70);
    v71 = *(_QWORD *)(v67 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString);
    v72 = *(_QWORD *)(v67 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__modelInfoString + 8);
    swift_bridgeObjectRetain(v72);
    swift_release(v67, v73);
    v123 = v57;
    v124 = v39;
    State.wrappedValue.getter(&v128, v41);
    v74 = v128;
    v75 = v41;
    v76 = swift_getKeyPath(&unk_1000960E8);
    v123 = v74;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v123, v76, v69);
    swift_release(v76, v77);
    v78 = *(_QWORD *)(v74 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__session);
    swift_release(v74, v79);
    v117 = v72;
    v64 = v71;
    if (v78)
    {
      v123 = v57;
      v124 = v56;
      State.wrappedValue.getter(&v128, v75);
      v80 = v128;
      v81 = swift_getKeyPath(&unk_100095FA0);
      v123 = v80;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v123, v81, v104);
      swift_release(v81, v82);
      v83 = *(unsigned __int8 *)(v80 + 72);
      swift_release(v80, v84);
      v85 = 256;
      if (!v83)
        v85 = 0;
    }
    else
    {
      v85 = 256;
    }
    v112 = 0;
    v111 = v85 | v105;
    v66 = v119;
    v61 = v109;
    v62 = v108;
    v63 = v107;
    v65 = v117;
  }
  else
  {
    v61 = 0;
    v62 = 0;
    v113 = 0;
    v114 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v115 = 0;
    v111 = 0;
    v112 = 1;
  }
  v86 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
  v87 = v118;
  v88 = v122;
  v86(v118, v120, v122);
  v89 = v116;
  v86(v116, v87, v88);
  v90 = (uint64_t *)&v89[*(int *)(sub_100004EAC(&qword_1000C7878) + 48)];
  v92 = (void *)v112;
  v91 = v113;
  *v90 = v112;
  v90[1] = v61;
  v93 = v62;
  v90[2] = v62;
  v90[3] = v91;
  v90[4] = v63;
  v90[5] = v64;
  v90[6] = v65;
  v90[7] = v66;
  v95 = v114;
  v94 = v115;
  v90[8] = v115;
  v90[9] = v95;
  v90[11] = 0;
  v90[12] = 0;
  v96 = v66;
  v119 = v66;
  v97 = v65;
  v117 = v65;
  v98 = v64;
  v110 = v64;
  v99 = v91;
  v100 = v93;
  v101 = v111;
  v90[10] = v111;
  sub_10000AFC4((uint64_t)v92, v61, v93, v91, v63, v98, v97, v96, v94, v95, v101, 0);
  v102 = *(void (**)(char *, uint64_t))(v121 + 8);
  v102(v120, v88);
  sub_10000B094(v92, v61, v100, v99, v63, v110, v117, v119, v94, v95, v101, 0);
  return ((uint64_t (*)(char *, uint64_t))v102)(v118, v88);
}

uint64_t sub_10007BA90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v28 = a1;
  v1 = type metadata accessor for IconOnlyLabelStyle(0);
  v27 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004EAC(&qword_1000CBB00);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004EAC(&qword_1000C7890);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = Label.init(title:icon:)(sub_10007BCD0, 0, sub_100009358, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
  IconOnlyLabelStyle.init()(v12);
  v13 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v14 = sub_100005900(&qword_1000CBD10, (uint64_t (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for IconOnlyLabelStyle);
  View.labelStyle<A>(_:)(v3, v4, v1, v13, v14);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v3, v1);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = static Edge.Set.horizontal.getter(v15);
  v17 = EdgeInsets.init(_all:)(-4.0);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v24 = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v28, v11, v8);
  v25 = v24 + *(int *)(sub_100004EAC(&qword_1000C7848) + 36);
  *(_BYTE *)v25 = v16;
  *(double *)(v25 + 8) = v17;
  *(_QWORD *)(v25 + 16) = v19;
  *(_QWORD *)(v25 + 24) = v21;
  *(_QWORD *)(v25 + 32) = v23;
  *(_BYTE *)(v25 + 40) = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10007BCD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100013330(0x69724F20776F6853, 0xED00006C616E6967, a1);
}

uint64_t sub_10007BCF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t);
  _BYTE v37[4];
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;

  v38 = a5;
  v40 = a6;
  v10 = sub_100004EAC(&qword_1000CBB80);
  v39 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = &v37[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v37[-v14];
  v16 = sub_100004EAC(&qword_1000CC1D0);
  v17 = __chkstk_darwin(v16);
  v19 = &v37[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v21 = &v37[-v20];
  v22 = a3 & 1;
  v41 = a3;
  v42 = a4;
  v23 = sub_100004EAC(&qword_1000C9FA0);
  v24 = State.wrappedValue.getter(&v43, v23);
  if (v43 == 1)
  {
    *(_QWORD *)v21 = static VerticalAlignment.center.getter(v24);
    *((_QWORD *)v21 + 1) = 0x4020000000000000;
    v21[16] = 0;
    v25 = sub_100004EAC(&qword_1000CA7B0);
    sub_10007BFE0(v38 & 1, a1, a2, v22, a4, (uint64_t)&v21[*(int *)(v25 + 44)]);
    v26 = sub_100004EAC(&qword_1000CA7A8);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v21, 0, 1, v26);
  }
  else
  {
    v27 = sub_100004EAC(&qword_1000CA7A8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v21, 1, 1, v27);
  }
  v28 = swift_allocObject(&unk_1000C19D0, 48, 7);
  *(_QWORD *)(v28 + 16) = a1;
  *(_QWORD *)(v28 + 24) = a2;
  *(_BYTE *)(v28 + 32) = v22;
  *(_QWORD *)(v28 + 40) = a4;
  swift_retain(a4);
  swift_retain(a1);
  swift_retain(a2);
  v29 = sub_100004EAC(&qword_1000CBB00);
  v30 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_10007CE14, v28, sub_10004C5CC, 0, v29, v30);
  sub_10000AD78((uint64_t)v21, (uint64_t)v19, &qword_1000CC1D0);
  v31 = v39;
  v32 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v39 + 16);
  v32(v13, v15, v10);
  v33 = v40;
  sub_10000AD78((uint64_t)v19, v40, &qword_1000CC1D0);
  v34 = sub_100004EAC(&qword_1000CC1D8);
  v32((_BYTE *)(v33 + *(int *)(v34 + 48)), v13, v10);
  v35 = *(void (**)(_BYTE *, uint64_t))(v31 + 8);
  v35(v15, v10);
  sub_10000AE2C((uint64_t)v21, &qword_1000CC1D0);
  v35(v13, v10);
  return sub_10000AE2C((uint64_t)v19, &qword_1000CC1D0);
}

uint64_t sub_10007BFE0@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  int v61;
  _BOOL4 v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v63 = a5;
  LODWORD(v6) = a4;
  v69 = a6;
  v65 = sub_100004EAC(&qword_1000CBB80);
  v10 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100004EAC(&qword_1000CA7D0);
  v13 = __chkstk_darwin(v66);
  v68 = (uint64_t)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v67 = (char *)&v57 - v16;
  v17 = __chkstk_darwin(v15);
  v64 = (char *)&v57 - v18;
  __chkstk_darwin(v17);
  v70 = (uint64_t)&v57 - v19;
  if ((a1 & 1) != 0)
  {
    v62 = 1;
    v20 = 1;
  }
  else
  {
    v71 = a2;
    v72 = a3;
    v21 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
    v61 = v6;
    v22 = v21;
    State.wrappedValue.getter(&v73, v21);
    v23 = v73;
    v24 = a2;
    KeyPath = swift_getKeyPath(&unk_100096048);
    v71 = v23;
    v26 = sub_100005900(&qword_1000CB2B0, type metadata accessor for RewritingModel, (uint64_t)&unk_1000921D8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v71, KeyPath, v26);
    v27 = KeyPath;
    a2 = v24;
    swift_release(v27, v28);
    v29 = *(_QWORD *)(v23 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__undoCount);
    swift_release(v23, v30);
    v20 = v29 == 0;
    v71 = a2;
    v72 = a3;
    State.wrappedValue.getter(&v73, v22);
    v6 = v73;
    v31 = swift_getKeyPath(&unk_100096070);
    v71 = v6;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v71, v31, v26);
    swift_release(v31, v32);
    v33 = *(_QWORD *)(v6 + OBJC_IVAR____TtC21WritingToolsUIService14RewritingModel__redoCount);
    v34 = v6;
    LOBYTE(v6) = v61;
    swift_release(v34, v35);
    v62 = v33 == 0;
  }
  v36 = swift_allocObject(&unk_1000C19F8, 48, 7);
  *(_QWORD *)(v36 + 16) = a2;
  *(_QWORD *)(v36 + 24) = a3;
  v61 = v6 & 1;
  *(_BYTE *)(v36 + 32) = v6 & 1;
  v37 = a3;
  v38 = v63;
  *(_QWORD *)(v36 + 40) = v63;
  swift_retain(v38);
  swift_retain(a2);
  swift_retain(v37);
  v39 = sub_100004EAC(&qword_1000CBB00);
  v60 = v39;
  v59 = sub_10000B254(&qword_1000C7858, &qword_1000CBB00, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_10007CE38, v36, sub_10004C270, 0, v39, v59);
  v40 = swift_getKeyPath(&unk_100095FC8);
  v41 = swift_allocObject(&unk_1000C1A20, 17, 7);
  *(_BYTE *)(v41 + 16) = v20;
  v58 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v43 = (uint64_t)v64;
  v42 = v65;
  v58(v64, v12, v65);
  v44 = v66;
  v45 = (uint64_t *)(v43 + *(int *)(v66 + 36));
  *v45 = v40;
  v45[1] = (uint64_t)sub_100015794;
  v45[2] = v41;
  v46 = *(void (**)(char *, uint64_t))(v10 + 8);
  v46(v12, v42);
  sub_10000AC80(v43, v70, &qword_1000CA7D0);
  v47 = swift_allocObject(&unk_1000C1A48, 48, 7);
  *(_QWORD *)(v47 + 16) = a2;
  *(_QWORD *)(v47 + 24) = v37;
  *(_BYTE *)(v47 + 32) = v61;
  *(_QWORD *)(v47 + 40) = v38;
  swift_retain(a2);
  swift_retain(v37);
  swift_retain(v38);
  Button.init(action:label:)(sub_10007CE74, v47, sub_10004C304, 0, v60, v59);
  v48 = swift_getKeyPath(&unk_100095FC8);
  v49 = swift_allocObject(&unk_1000C1A70, 17, 7);
  *(_BYTE *)(v49 + 16) = v62;
  v50 = (uint64_t)v67;
  v58(v67, v12, v42);
  v51 = (uint64_t *)(v50 + *(int *)(v44 + 36));
  *v51 = v48;
  v51[1] = (uint64_t)sub_100015794;
  v51[2] = v49;
  v46(v12, v42);
  sub_10000AC80(v50, v43, &qword_1000CA7D0);
  v52 = v70;
  sub_10000AD78(v70, v50, &qword_1000CA7D0);
  v53 = v68;
  sub_10000AD78(v43, v68, &qword_1000CA7D0);
  v54 = v69;
  sub_10000AD78(v50, v69, &qword_1000CA7D0);
  v55 = sub_100004EAC(&qword_1000CA7D8);
  sub_10000AD78(v53, v54 + *(int *)(v55 + 48), &qword_1000CA7D0);
  sub_10000AE2C(v43, &qword_1000CA7D0);
  sub_10000AE2C(v52, &qword_1000CA7D0);
  sub_10000AE2C(v53, &qword_1000CA7D0);
  return sub_10000AE2C(v50, &qword_1000CA7D0);
}

uint64_t sub_10007C4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *))
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v6 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  v7 = State.wrappedValue.getter(&v11, v6);
  v8 = v11;
  a5(v7);
  return swift_release(v8, v9);
}

uint64_t sub_10007C52C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v20[9];
  uint64_t v21;

  v8 = sub_100004EAC((uint64_t *)&unk_1000C87F0);
  __chkstk_darwin(v8);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 1];
  v20[1] = a3;
  v21 = a4;
  v20[0] = 1;
  v11 = sub_100004EAC(&qword_1000C9FA0);
  State.wrappedValue.setter(v20, v11);
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
  type metadata accessor for MainActor(0);
  swift_retain(a4);
  swift_retain(a1);
  v13 = swift_retain(a2);
  v14 = static MainActor.shared.getter(v13);
  v15 = swift_allocObject(&unk_1000C1A98, 64, 7);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = &protocol witness table for MainActor;
  *(_QWORD *)(v15 + 32) = a1;
  *(_QWORD *)(v15 + 40) = a2;
  *(_BYTE *)(v15 + 48) = a3;
  *(_QWORD *)(v15 + 56) = a4;
  v16 = sub_1000596DC((uint64_t)v10, (uint64_t)&unk_1000CC1E8, v15);
  return swift_release(v16, v17);
}

uint64_t sub_10007C664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[5] = a4;
  v5[6] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[7] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[8] = v7;
  v5[9] = v8;
  return swift_task_switch(sub_10007C6D0, v7, v8);
}

uint64_t sub_10007C6D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[6];
  v0[2] = v0[5];
  v0[3] = v1;
  v2 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(v0 + 4, v2);
  v0[10] = v0[4];
  v3 = (_QWORD *)swift_task_alloc(dword_1000C8D5C);
  v0[11] = v3;
  *v3 = v0;
  v3[1] = sub_100060B08;
  return sub_100026928(0);
}

uint64_t sub_10007C748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *Strong;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v6 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(&v13, v6);
  v7 = v13;
  sub_10002BF64(a5, 0);
  swift_release(v7, v8);
  State.wrappedValue.getter(&v13, v6);
  v9 = v13;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v13 + 16);
  result = swift_release(v9, v11);
  if (Strong)
  {
    objc_msgSend(Strong, "endWritingTools");
    return swift_unknownObjectRelease(Strong);
  }
  return result;
}

uint64_t sub_10007C804(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[5] = a1;
  v2[6] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[7] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[8] = v4;
  v2[9] = v5;
  return swift_task_switch(sub_10007C870, v4, v5);
}

uint64_t sub_10007C870()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[6];
  v0[2] = v0[5];
  v0[3] = v1;
  v2 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
  State.wrappedValue.getter(v0 + 4, v2);
  v0[10] = v0[4];
  v3 = (_QWORD *)swift_task_alloc(dword_1000C8D5C);
  v0[11] = v3;
  *v3 = v0;
  v3[1] = sub_10007C8E8;
  return sub_100026928(1);
}

uint64_t sub_10007C8E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  swift_release(v2, v3);
  return swift_task_switch(sub_10007D09C, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_10007C93C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100079BD4(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10007C94C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  void *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v48 = a7;
  v52 = a4;
  v12 = sub_100004EAC(&qword_1000C7770);
  __chkstk_darwin(v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v55) = 0;
  State.init(wrappedValue:)(&v53, &v55, &type metadata for Bool);
  v49 = v53;
  v15 = v54;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(a6, 1, v16);
  v50 = v15;
  v51 = a6;
  v47 = a5;
  if (v19 == 1)
  {
    swift_retain(v15);
    goto LABEL_10;
  }
  v20 = v15;
  v21 = qword_1000C7410;
  swift_retain(v20);
  if (v21 != -1)
    swift_once(&qword_1000C7410, sub_1000244A0);
  sub_10000AD78(a6, (uint64_t)v14, &qword_1000C7770);
  result = v18((uint64_t)v14, 1, v16);
  if ((_DWORD)result != 1)
  {
    swift_beginAccess(&qword_1000D1C90, &v53, 32, 0);
    v23 = qword_1000D1C90;
    if (*(_QWORD *)(qword_1000D1C90 + 16))
    {
      v24 = sub_10001CCB8((uint64_t)v14);
      if ((v25 & 1) != 0)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
        swift_endAccess(&v53);
        v27 = *(void (**)(char *, uint64_t))(v17 + 8);
        swift_retain(v26);
        v27(v14, v16);
        swift_retain(v26);
        sub_10000A880(a1, a2, a3, v52);
        v28 = v26;
LABEL_11:
        v55 = v26;
        v31 = type metadata accessor for RewritingModel(0);
        State.init(wrappedValue:)(&v53, &v55, v31);
        v32 = v53;
        v33 = v54;
        swift_retain(v54);
        swift_retain(v32);
        v34 = sub_100004EAC((uint64_t *)&unk_1000CB2A0);
        State.wrappedValue.getter(&v55, v34);
        v35 = v55;
        KeyPath = swift_getKeyPath(&unk_100095F00);
        __chkstk_darwin(KeyPath);
        v37 = v48;
        *(&v46 - 2) = v35;
        *(&v46 - 1) = (uint64_t)v37;
        v53 = v35;
        v38 = sub_100005900((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel, (uint64_t)&unk_1000921D8);
        v39 = v37;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v53, KeyPath, sub_10000A8BC, &v46 - 4, (char *)&type metadata for () + 8, v38);
        swift_release(v35, v40);
        swift_release(v28, v41);
        swift_release(v50, v42);
        swift_release(v33, v43);
        swift_release(v32, v44);
        swift_unknownObjectRelease(v47);
        swift_release(KeyPath, v45);

        sub_10000AE2C(v51, &qword_1000C7770);
        return v32;
      }
    }
    swift_endAccess(&v53);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
LABEL_10:
    v29 = type metadata accessor for RewritingModel(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    swift_unknownObjectRetain(a5, v30);
    v26 = sub_10002CC44(a1, a2, a3, v52);
    swift_unknownObjectRelease(a5);
    v28 = 0;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for RewritingInputDashboardView()
{
  return &type metadata for RewritingInputDashboardView;
}

uint64_t sub_10007CCF4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B14E4, 1);
}

uint64_t sub_10007CD08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1000CC164);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10002199C;
  return sub_10007C804(v2, v3);
}

uint64_t sub_10007CD74()
{
  uint64_t v0;

  return sub_10007C748(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40), 0);
}

uint64_t sub_10007CD98@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_10007B2EC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10007CDB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10007CDD4()
{
  uint64_t v0;

  return sub_10007C748(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40), 2);
}

uint64_t sub_10007CE00()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10007CE14()
{
  uint64_t v0;

  return sub_10007C52C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10007CE38()
{
  uint64_t v0;

  return sub_10007C4DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40), (void (*)(_QWORD *))sub_10002C1E4);
}

uint64_t sub_10007CE60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10007CE74()
{
  uint64_t v0;

  return sub_10007C4DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40), (void (*)(_QWORD *))sub_10002C3EC);
}

uint64_t sub_10007CE9C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10007CEAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4], v1);
  swift_release(v0[5], v2);
  swift_release(v0[7], v3);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10007CEE8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1000CC1E4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000070C8;
  return sub_10007C664(a1, v4, v5, v6, v7);
}

unint64_t sub_10007CF94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CC1F8;
  if (!qword_1000CC1F8)
  {
    v1 = sub_10000ABD0(&qword_1000C9770);
    sub_10007D000();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CC1F8);
  }
  return result;
}

unint64_t sub_10007D000()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CC200;
  if (!qword_1000CC200)
  {
    v1 = sub_10000ABD0(&qword_1000C9768);
    sub_10000B254(&qword_1000CC208, &qword_1000CC150, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100005900(&qword_1000C78B8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CC200);
  }
  return result;
}

unint64_t sub_10007D0A4()
{
  unint64_t result;

  result = qword_1000CC210;
  if (!qword_1000CC210)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for QuestionnaireAnswerFormat, &type metadata for QuestionnaireAnswerFormat);
    atomic_store(result, (unint64_t *)&qword_1000CC210);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for QuestionnaireAnswerFormat(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10007D134 + 4 * byte_100096115[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10007D168 + 4 * byte_100096110[v4]))();
}

uint64_t sub_10007D168(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007D170(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007D178);
  return result;
}

uint64_t sub_10007D184(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007D18CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10007D190(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007D198(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireAnswerFormat()
{
  return &type metadata for QuestionnaireAnswerFormat;
}

uint64_t sub_10007D1B4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_100096238);
  v6 = v0;
  v2 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath, v3);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer);
  swift_bridgeObjectRetain(*(_QWORD *)(v0
                                     + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer
                                     + 8));
  return v4;
}

uint64_t sub_10007D254@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100096238);
  v9 = v3;
  v5 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer + 8);
  *a2 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer);
  a2[1] = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_10007D2F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[7];
  uint64_t v10;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100096238);
  v9[2] = v4;
  v9[3] = v3;
  v9[4] = v2;
  v10 = v4;
  v6 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_10007D868, v9, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath, v7);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10007D3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer + 8);
  *v3 = a2;
  v3[1] = a3;
  swift_bridgeObjectRetain(a3);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10007D3F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t result;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  __int128 v23;
  uint64_t v24;

  v1 = type metadata accessor for NSFastEnumerationIterator(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)(v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_entry);
  result = (uint64_t)objc_msgSend(v5, "answerOptions");
  if (!result)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = (void *)result;
  v8 = objc_msgSend((id)result, "count");

  if (!v8)
    return 2;
  result = (uint64_t)objc_msgSend(v5, "answerOptions");
  if (!result)
    goto LABEL_21;
  v9 = (void *)result;
  v10 = (uint64_t)objc_msgSend((id)result, "count");

  if (v10 > 3)
    return 1;
  result = (uint64_t)objc_msgSend(v5, "answerOptions");
  if (result)
  {
    v11 = (void *)result;
    NSOrderedSet.makeIterator()();

    while (1)
    {
      NSFastEnumerationIterator.next()(&v23, v12);
      if (!v24)
      {
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        return 0;
      }
      sub_100021008(&v23, v22);
      if (!swift_dynamicCast(&v20, v22, (char *)&type metadata for Any + 8, &type metadata for String, 6))break;
      v13 = v21;
      v14 = String.count.getter(v20, v21);
      v12 = swift_bridgeObjectRelease(v13);
      if (v14 >= 11)
        goto LABEL_18;
    }
    if (qword_1000C73C8 != -1)
      swift_once(&qword_1000C73C8, sub_10000629C);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_1000063D4(v15, (uint64_t)qword_1000D1BE8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unexpected answer format", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

LABEL_18:
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return 1;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_10007D660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_id;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer
                                      + 8));
  v3 = v0 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry___observationRegistrar;
  v4 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10007D6FC()
{
  return type metadata accessor for QuestionnaireEntry(0);
}

uint64_t type metadata accessor for QuestionnaireEntry(uint64_t a1)
{
  uint64_t result;

  result = qword_1000CC250;
  if (!qword_1000CC250)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for QuestionnaireEntry);
  return result;
}

uint64_t sub_10007D740(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[2] = &unk_1000961C8;
    v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for ObservationRegistrar(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 5, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_10007D7EC()
{
  return sub_100005900(&qword_1000C8758, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_10007D818@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_id;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10007D868()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[4];
  v2 = (_QWORD *)(v0[2] + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer);
  v3 = v2[1];
  *v2 = v0[3];
  v2[1] = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10007D8B0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000964C8);
  v8 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  result = swift_release(KeyPath, v6);
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__showingOriginal);
  return result;
}

uint64_t sub_10007D93C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000964C8);
  v8[2] = v3;
  v9 = v2;
  v10 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100015744, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_10007D9DC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000964A0);
  v9 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + 64);
  *a2 = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_10007DA64(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000964A0);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002D378, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath, v6);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10007DB14@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000963B0);
  v8 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  result = swift_release(KeyPath, v6);
  *a2 = *(_QWORD *)(v3 + 96);
  return result;
}

uint64_t sub_10007DB98(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000963B0);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100083D7C, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_10007DC34@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000963D8);
  v8 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  result = swift_release(KeyPath, v6);
  *a2 = *(_BYTE *)(v3 + 104);
  return result;
}

uint64_t sub_10007DCB8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000963D8);
  v8[2] = v3;
  v9 = v2;
  v10 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100083D68, v8, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath, v6);
}

uint64_t sub_10007DD58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = sub_100021548(0, (unint64_t *)&qword_1000C9CB0, WTContext_ptr);
  **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v4);
  return swift_continuation_resume(v3);
}

uint64_t sub_10007DDAC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_100083244(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

unint64_t sub_10007DF64()
{
  unint64_t result;

  result = sub_100061DA8((uint64_t)_swiftEmptyArrayStorage);
  qword_1000D1DF8 = result;
  return result;
}

void *sub_10007DF88(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000962C0);
  v43[0] = v1;
  v8 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v43, KeyPath, v8);
  result = (void *)swift_release(KeyPath, v9);
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session))
  {
    v38 = OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session;
    v39 = v6;
    v40 = v4;
    v41 = v3;
    v11 = swift_getKeyPath(&unk_100096310);
    __chkstk_darwin(v11);
    *(&v37 - 2) = v1;
    *(&v37 - 1) = (uint64_t)_swiftEmptyArrayStorage;
    v43[0] = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v43, v11, sub_100083158, &v37 - 4, (char *)&type metadata for () + 8, v8);
    swift_release(v11, v12);
    v13 = sub_100061DBC((uint64_t)_swiftEmptyArrayStorage);
    v14 = swift_getKeyPath(&unk_100096338);
    __chkstk_darwin(v14);
    *(&v37 - 2) = v1;
    *(&v37 - 1) = v13;
    v43[0] = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v43, v14, sub_1000831A0, &v37 - 4, (char *)&type metadata for () + 8, v8);
    swift_bridgeObjectRelease(v13);
    swift_release(v14, v15);
    v16 = swift_getKeyPath(&unk_100096360);
    __chkstk_darwin(v16);
    *(&v37 - 2) = v1;
    *(&v37 - 1) = 0;
    v43[0] = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v43, v16, sub_1000831E8, &v37 - 4, (char *)&type metadata for () + 8, v8);
    swift_release(v16, v17);
    v18 = sub_100061F5C((uint64_t)_swiftEmptyArrayStorage);
    v19 = swift_getKeyPath(&unk_100096388);
    __chkstk_darwin(v19);
    *(&v37 - 2) = v1;
    *(&v37 - 1) = v18;
    v43[0] = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v43, v19, sub_100083224, &v37 - 4, (char *)&type metadata for () + 8, v8);
    swift_bridgeObjectRelease(v18);
    swift_release(v19, v20);
    sub_10000C1D4(0);
    v21 = swift_getKeyPath(&unk_1000963B0);
    __chkstk_darwin(v21);
    *(&v37 - 2) = v1;
    *(&v37 - 1) = 0;
    v43[0] = v1;
    v22 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v43, v21, sub_10002CF3C, &v37 - 4, (char *)&type metadata for () + 8, v22);
    swift_release(v21, v23);
    v24 = swift_getKeyPath(&unk_1000963D8);
    __chkstk_darwin(v24);
    *(&v37 - 2) = v1;
    *((_BYTE *)&v37 - 8) = 0;
    v43[0] = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v43, v24, sub_10002CF5C, &v37 - 4, (char *)&type metadata for () + 8, v22);
    swift_release(v24, v25);
    if (qword_1000C74A0 != -1)
      swift_once(&qword_1000C74A0, sub_10007DF64);
    v26 = swift_getKeyPath(&unk_1000962C0);
    v43[0] = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v43, v26, v8);
    swift_release(v26, v27);
    v28 = (uint64_t)v39;
    result = *(void **)(v1 + v38);
    v30 = v40;
    v29 = v41;
    if (result)
    {
      v31 = objc_msgSend(result, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

      swift_beginAccess(&qword_1000D1DF8, v43, 33, 0);
      swift_retain(v1);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(qword_1000D1DF8);
      v42 = qword_1000D1DF8;
      qword_1000D1DF8 = 0x8000000000000000;
      sub_10001F740(v1, v28, isUniquelyReferenced_nonNull_native);
      v33 = qword_1000D1DF8;
      qword_1000D1DF8 = v42;
      swift_bridgeObjectRelease(v33);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
      return (void *)swift_endAccess(v43);
    }
    else
    {
      __break(1u);
    }
  }
  else if (a1)
  {
    if (qword_1000C74A0 != -1)
      swift_once(&qword_1000C74A0, sub_10007DF64);
    v34 = objc_msgSend(a1, "uuid");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

    swift_beginAccess(&qword_1000D1DF8, v43, 33, 0);
    v35 = sub_10001D44C((uint64_t)v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_endAccess(v43);
    return (void *)swift_release(v35, v36);
  }
  return result;
}

void *sub_10007E4D8()
{
  return sub_10007EAD4((uint64_t)&unk_1000962C0, &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session);
}

id sub_10007E4EC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10007EB58(a1, (uint64_t)&unk_1000962C0, &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session, a2);
}

uint64_t sub_10007E500(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v9[5];
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000962C0);
  v9[2] = v3;
  v9[3] = v2;
  v10 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100083DCC, v9, (char *)&type metadata for () + 8, v5);

  return swift_release(KeyPath, v7);
}

void sub_10007E5AC(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session) = a2;
  v3 = a2;
  sub_10007DF88(v2);

}

uint64_t sub_10007E604()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_1000962E8);
  v5 = v0;
  v2 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__task));
}

uint64_t sub_10007E68C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000962E8);
  v9 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__task);
  *a2 = v7;
  return swift_retain(v7);
}

uint64_t sub_10007E71C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000962E8);
  v9[2] = v3;
  v9[3] = v2;
  v10 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100083B5C, v9, (char *)&type metadata for () + 8, v5);
  swift_release(v2, v6);
  return swift_release(KeyPath, v7);
}

uint64_t sub_10007E7CC()
{
  return sub_10007E8B8((uint64_t)&unk_100096310, &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
}

uint64_t sub_10007E7E0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10007E964(a1, (uint64_t)&unk_100096310, &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, a2);
}

uint64_t sub_10007E7F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100096310);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100083DB8, v8, (char *)&type metadata for () + 8, v5);
  swift_bridgeObjectRelease(v2);
  return swift_release(KeyPath, v6);
}

uint64_t sub_10007E8A4()
{
  return sub_10007E8B8((uint64_t)&unk_100096338, &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping);
}

uint64_t sub_10007E8B8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[3];

  KeyPath = swift_getKeyPath(a1);
  v9[0] = v2;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = (_QWORD *)(v2 + *a2);
  swift_beginAccess(v7, v9, 0, 0);
  return swift_bridgeObjectRetain(*v7);
}

uint64_t sub_10007E950@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10007E964(a1, (uint64_t)&unk_100096338, &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping, a2);
}

uint64_t sub_10007E964@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD v13[3];

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v13[0] = v6;
  v8 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v13, KeyPath, v8);
  swift_release(KeyPath, v9);
  v10 = (uint64_t *)(v6 + *a3);
  swift_beginAccess(v10, v13, 0, 0);
  v11 = *v10;
  *a4 = *v10;
  return swift_bridgeObjectRetain(v11);
}

uint64_t sub_10007EA10(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100096338);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100083DA4, v8, (char *)&type metadata for () + 8, v5);
  swift_bridgeObjectRelease(v2);
  return swift_release(KeyPath, v6);
}

void *sub_10007EAC0()
{
  return sub_10007EAD4((uint64_t)&unk_100096360, &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__expandedSuggestion);
}

void *sub_10007EAD4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v10;

  KeyPath = swift_getKeyPath(a1);
  v10 = v2;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(void **)(v2 + *a2);
  v8 = v7;
  return v7;
}

id sub_10007EB58@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v12 = v6;
  v8 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, KeyPath, v8);
  swift_release(KeyPath, v9);
  v10 = *(void **)(v6 + *a3);
  *a4 = v10;
  return v10;
}

uint64_t sub_10007EBE8(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v9[5];
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100096360);
  v9[2] = v3;
  v9[3] = v2;
  v10 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_1000831E8, v9, (char *)&type metadata for () + 8, v5);

  return swift_release(KeyPath, v7);
}

uint64_t sub_10007EC94()
{
  return sub_10007E8B8((uint64_t)&unk_100096388, &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates);
}

uint64_t sub_10007ECA8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10007E964(a1, (uint64_t)&unk_100096388, &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates, a2);
}

uint64_t sub_10007ECBC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100096388);
  v8[2] = v3;
  v8[3] = v2;
  v9 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100083D90, v8, (char *)&type metadata for () + 8, v5);
  swift_bridgeObjectRelease(v2);
  return swift_release(KeyPath, v6);
}

uint64_t sub_10007ED6C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_100096478);
  v6 = v0;
  v2 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath, v3);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__modelInfoString);
  swift_bridgeObjectRetain(*(_QWORD *)(v0
                                     + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__modelInfoString
                                     + 8));
  return v4;
}

uint64_t sub_10007EE04@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100096478);
  v9 = v3;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v5);
  swift_release(KeyPath, v6);
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__modelInfoString + 8);
  *a2 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__modelInfoString);
  a2[1] = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_10007EE98(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[7];
  uint64_t v10;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100096478);
  v9[2] = v4;
  v9[3] = v3;
  v9[4] = v2;
  v10 = v4;
  v6 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100083BD8, v9, (char *)&type metadata for () + 8, v6);
  swift_bridgeObjectRelease(v2);
  return swift_release(KeyPath, v7);
}

uint64_t sub_10007EF4C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_1000964C8);
  v5 = v0;
  v2 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, KeyPath, v2);
  swift_release(KeyPath, v3);
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__showingOriginal);
}

void sub_10007EFD0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__showingOriginal;
  *(_BYTE *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__showingOriginal) = a2;
  Strong = swift_unknownObjectWeakLoadStrong(a1 + 16);
  if (Strong)
  {
    v5 = (void *)Strong;
    KeyPath = swift_getKeyPath(&unk_1000962C0);
    v14 = a1;
    v7 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v14, KeyPath, v7);
    swift_release(KeyPath, v8);
    v9 = *(void **)(a1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session);
    if (v9)
    {
      v10 = swift_getKeyPath(&unk_1000964C8);
      v14 = a1;
      v11 = v9;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v14, v10, v7);
      swift_release(v10, v12);
      if (*(_BYTE *)(a1 + v3))
        v13 = 1;
      else
        v13 = 2;
      objc_msgSend(v5, "writingToolsSession:didReceiveAction:", v11, v13);
      swift_unknownObjectRelease(v5);

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_10007F0F8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];

  KeyPath = swift_getKeyPath(&unk_100096400);
  v28[0] = v0;
  v2 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v28, KeyPath, v2);
  swift_release(KeyPath, v3);
  if ((*(_BYTE *)(v0 + 72) & 1) != 0)
    return 1;
  v4 = swift_getKeyPath(&unk_1000964C8);
  v28[0] = v0;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v28, v4, v5);
  swift_release(v4, v6);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__showingOriginal) & 1) != 0)
    return 1;
  v7 = swift_getKeyPath(&unk_100096310);
  v28[0] = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v28, v7, v5);
  swift_release(v7, v8);
  v9 = (uint64_t *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
  swift_beginAccess(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v28, 0, 0);
  v10 = *v9;
  if (!((unint64_t)*v9 >> 62))
  {
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
    return 1;
  }
  if (v10 < 0)
    v22 = *v9;
  else
    v22 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v9);
  v23 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v10);
  if (!v23)
    return 1;
LABEL_5:
  v11 = swift_getKeyPath(&unk_100096310);
  v27 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v27, v11, v5);
  swift_release(v11, v12);
  v13 = *v9;
  if (!((unint64_t)*v9 >> 62))
  {
    if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10) == 1)
      goto LABEL_7;
    return 0;
  }
  if (v13 < 0)
    v24 = *v9;
  else
    v24 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v9);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v13);
  if (v25 != 1)
    return 0;
LABEL_7:
  v14 = swift_getKeyPath(&unk_100096310);
  v27 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v27, v14, v5);
  swift_release(v14, v15);
  v16 = *v9;
  if (!((unint64_t)*v9 >> 62))
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(*v9);
    if (v17)
      goto LABEL_9;
LABEL_28:
    swift_bridgeObjectRelease(v16);
    __break(1u);
    goto LABEL_29;
  }
  if (v16 < 0)
    v26 = *v9;
  else
    v26 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v9);
  result = _CocoaArrayWrapper.endIndex.getter(v26);
  if (!result)
    goto LABEL_28;
LABEL_9:
  if ((v16 & 0xC000000000000001) != 0)
  {
LABEL_29:
    v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
    goto LABEL_12;
  }
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v19 = *(id *)(v16 + 32);
LABEL_12:
    v20 = v19;
    swift_bridgeObjectRelease(v16);
    v21 = sub_100081E58(v20);

    return v21 == 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_10007F3CC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  char v7;
  unint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  char v12;
  uint64_t v13;

  v3 = result;
  if ((unint64_t)a2 >> 62)
    goto LABEL_21;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      v5 = *(id *)(a2 + 32);
    }
    v6 = v5;
    sub_100021548(0, &qword_1000C9CC8, WTTextSuggestion_ptr);
    v7 = static NSObject.== infix(_:_:)(v6, v3);

    if ((v7 & 1) != 0)
      return 0;
    for (i = 0; ; ++i)
    {
      v8 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if (v8 == v4)
        return 0;
      if ((a2 & 0xC000000000000001) != 0)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i + 1, a2);
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_19;
        if (v8 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_20;
        v10 = *(id *)(a2 + 32 + 8 * v8);
      }
      v11 = v10;
      v12 = static NSObject.== infix(_:_:)(v10, v3);

      if ((v12 & 1) != 0)
        return v8;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    if (a2 < 0)
      v13 = a2;
    else
      v13 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v4 = _CocoaArrayWrapper.endIndex.getter(v13);
    result = swift_bridgeObjectRelease(a2);
  }
  return 0;
}

uint64_t sub_10007F564(char a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  void *object;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[3];
  char v25[8];
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_100096400);
  v27 = v1;
  v5 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v27, KeyPath, v5);
  result = swift_release(KeyPath, v6);
  if ((*(_BYTE *)(v1 + 72) & 1) == 0 && (a1 & 1) != 0)
  {
    v27 = 0;
    v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease(v28);
    v29 = 0xD000000000000024;
    v30 = 0x80000001000ACF20;
    v8 = swift_getKeyPath(&unk_100096310);
    v27 = v1;
    v9 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v27, v8, v9);
    swift_release(v8, v10);
    v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
    swift_beginAccess(v2 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, &v27, 0, 0);
    v12 = *v11;
    if ((unint64_t)v12 >> 62)
    {
      if (v12 < 0)
        v23 = v12;
      else
        v23 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      v13 = _CocoaArrayWrapper.endIndex.getter(v23);
      swift_bridgeObjectRelease(v12);
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v26 = v13;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    v17 = v29;
    v16 = v30;
    v18 = swift_getKeyPath(&unk_100096428);
    v29 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v29, v18, v5);
    swift_release(v18, v19);
    v20 = *(_QWORD *)(v2 + 80);
    if (v20)
    {
      swift_errorRetain(v20);
      swift_bridgeObjectRelease(v16);
      swift_getErrorValue(v20, v25, v24);
      v21._countAndFlagsBits = Error.localizedDescription.getter(v24[1], v24[2]);
      v22 = v21._object;
      v29 = 0xD000000000000011;
      v30 = 0x80000001000ABFD0;
      String.append(_:)(v21);
      swift_errorRelease(v20);
      swift_bridgeObjectRelease(v22);
      v17 = v29;
      v16 = v30;
    }
    sub_100021A6C((uint64_t)"ProofreadGeneration", 19, 2, v17, v16);
    return swift_bridgeObjectRelease(v16);
  }
  return result;
}

uint64_t sub_10007F7DC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[35] = v0;
  v2 = sub_100004EAC((uint64_t *)&unk_1000C87F0);
  v1[36] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100004EAC(&qword_1000C93E8);
  v1[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MainActor(0);
  v1[38] = v4;
  v1[39] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v1[40] = v5;
  v1[41] = v6;
  return swift_task_switch(sub_10007F894, v5, v6);
}

uint64_t sub_10007F894()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 280) + 16);
  *(_QWORD *)(v0 + 336) = Strong;
  if (!Strong)
  {
    v10 = *(_QWORD *)(v0 + 312);
    goto LABEL_5;
  }
  v3 = (void *)Strong;
  v4 = *(_QWORD *)(v0 + 280);
  KeyPath = swift_getKeyPath(&unk_1000962C0);
  v6 = OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel___observationRegistrar;
  *(_QWORD *)(v0 + 224) = v4;
  *(_QWORD *)(v0 + 344) = v6;
  v7 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  *(_QWORD *)(v0 + 352) = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 224, KeyPath, v7);
  swift_release(KeyPath, v8);
  v9 = OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session;
  *(_QWORD *)(v0 + 360) = OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session;
  if (*(_QWORD *)(v4 + v9))
  {
    v10 = *(_QWORD *)(v0 + 312);
    swift_unknownObjectRelease(v3);
LABEL_5:
    swift_release(v10, v2);
    v11 = *(_QWORD *)(v0 + 288);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v13 = *(_QWORD *)(v0 + 280);
  v14 = objc_msgSend(objc_allocWithZone((Class)WTSession), "initWithType:textViewDelegate:", 1, 0);
  v15 = swift_getKeyPath(&unk_1000962C0);
  v16 = swift_task_alloc(32);
  v24 = v13;
  *(_QWORD *)(v16 + 16) = v13;
  *(_QWORD *)(v16 + 24) = v14;
  *(_QWORD *)(v0 + 216) = v13;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 216, v15, sub_100083DCC, v16, (char *)&type metadata for () + 8, v7);
  *(_QWORD *)(v0 + 368) = 0;
  swift_release(v15, v17);

  swift_task_dealloc(v16);
  v18 = swift_getKeyPath(&unk_1000962C0);
  *(_QWORD *)(v0 + 200) = v24;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 200, v18, v7);
  result = swift_release(v18, v19);
  v20 = *(void **)(v4 + v9);
  *(_QWORD *)(v0 + 376) = v20;
  if (v20)
  {
    v21 = v0 + 16;
    *(_QWORD *)(v0 + 56) = v0 + 208;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10007FB08;
    v22 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 160) = _NSConcreteStackBlock;
    v23 = (_QWORD *)(v0 + 160);
    v23[1] = 0x40000000;
    v23[2] = sub_10007DD58;
    v23[3] = &unk_1000C1BE0;
    v23[4] = v22;
    objc_msgSend(v3, "willBeginWritingToolsSession:requestContexts:", v20, v23);
    return swift_continuation_await(v21);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007FB08()
{
  uint64_t v0;

  return swift_task_switch(sub_10007FB4C, *(_QWORD *)(*(_QWORD *)v0 + 320), *(_QWORD *)(*(_QWORD *)v0 + 328));
}

uint64_t sub_10007FB4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  unint64_t v23;
  id v24;
  NSString v25;
  Class isa;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  Class v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v3 = *(_QWORD *)(v2 + 368);
  v4 = *(void **)(v2 + 376);
  v5 = *(_QWORD *)(v2 + 280);
  swift_release(*(_QWORD *)(v2 + 312), a2);
  v6 = *(_QWORD *)(v2 + 208);
  KeyPath = swift_getKeyPath(&unk_1000964A0);
  v8 = swift_task_alloc(32);
  *(_QWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v6;
  *(_QWORD *)(v2 + 272) = v5;
  v9 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v2 + 272, KeyPath, sub_100021414, v8, (char *)&type metadata for () + 8, v9);
  swift_release(KeyPath, v10);
  swift_bridgeObjectRelease(v6);
  swift_task_dealloc(v8);

  v11 = swift_getKeyPath(&unk_1000964A0);
  *(_QWORD *)(v2 + 232) = v5;
  v84 = v9;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 232, v11, v9);
  result = swift_release(v11, v12);
  v14 = *(_QWORD *)(v5 + 64);
  if (v14)
  {
    if ((unint64_t)v14 >> 62)
    {
      if (v14 >= 0)
        v54 = v14 & 0xFFFFFFFFFFFFFF8;
      else
        v54 = *(_QWORD *)(v5 + 64);
      swift_bridgeObjectRetain(*(_QWORD *)(v5 + 64));
      v55 = _CocoaArrayWrapper.endIndex.getter(v54);
      swift_bridgeObjectRelease(v14);
      if (v55)
        goto LABEL_8;
    }
    else if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_8;
    }
    v15 = v2 + 80;
    if (qword_1000C73C0 != -1)
      goto LABEL_38;
    while (1)
    {
      v16 = type metadata accessor for Logger(0);
      sub_1000063D4(v16, (uint64_t)qword_1000D1BD0);
      v17 = ((uint64_t (*)(void))Logger.logObject.getter)();
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error in proofreading: Unable to retrieve text from selection", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      v20 = sub_100004EAC((uint64_t *)&unk_1000C7BD0);
      inited = swift_initStackObject(v20, v15);
      *(_OWORD *)(inited + 16) = xmmword_100092910;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(inited + 40) = v22;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      *(_QWORD *)(inited + 48) = 0xD000000000000026;
      *(_QWORD *)(inited + 56) = 0x80000001000AC090;
      v23 = sub_1000620F0(inited);
      v24 = objc_allocWithZone((Class)NSError);
      v25 = String._bridgeToObjectiveC()();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v23);
      v27 = objc_msgSend(v24, "initWithDomain:code:userInfo:", v25, 1, isa);

      sub_10000C1D4((uint64_t)v27);
LABEL_8:
      v28 = *(_QWORD *)(v2 + 280);
      v15 = swift_getKeyPath(&unk_1000964A0);
      *(_QWORD *)(v2 + 240) = v28;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 240, v15, v9);
      result = swift_release(v15, v29);
      v30 = *(_QWORD *)(v5 + 64);
      if (!v30)
        break;
      if ((unint64_t)v30 >> 62)
      {
        if (v30 >= 0)
          v56 = v30 & 0xFFFFFFFFFFFFFF8;
        else
          v56 = *(_QWORD *)(v5 + 64);
        swift_bridgeObjectRetain(v30);
        v31 = _CocoaArrayWrapper.endIndex.getter(v56);
        v83 = v5;
        if (!v31)
          goto LABEL_33;
      }
      else
      {
        v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v30);
        v83 = v5;
        if (!v31)
          goto LABEL_33;
      }
      if (v31 >= 1)
      {
        v32 = 0;
        v86 = v30 & 0xC000000000000001;
        v85 = v30;
        v87 = v31;
        do
        {
          if (v86)
            v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v30);
          else
            v34 = *(id *)(v30 + 8 * v32 + 32);
          v35 = v34;
          v36 = *(_QWORD *)(v2 + 296);
          v37 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TextCompositionClient(0)), "init");
          v38 = objc_msgSend(v35, "attributedText");
          v39 = objc_msgSend(v35, "range");
          v41 = v40;
          v42 = type metadata accessor for TextCompositionClient.RewritingType(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v36, 1, 1, v42);
          v44 = dispatch thunk of TextCompositionClient.actualRangeForRewritingOrReview(of:range:rewritingType:options:)(v38, v39, v41, v36, 0);
          v45 = *(_QWORD *)(v2 + 296);
          if (v3)
          {
            sub_10000AE2C(v45, &qword_1000C93E8);

            swift_errorRetain(v3);
            sub_10000C1D4(v3);
            swift_errorRelease(v3);
            if (qword_1000C73C0 != -1)
              swift_once(&qword_1000C73C0, sub_100006228);
            v46 = type metadata accessor for Logger(0);
            sub_1000063D4(v46, (uint64_t)qword_1000D1BD0);
            swift_errorRetain(v3);
            v47 = swift_errorRetain(v3);
            v48 = Logger.logObject.getter(v47);
            v49 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v48, v49))
            {
              v50 = swift_slowAlloc(12, -1);
              v51 = (uint64_t *)swift_slowAlloc(8, -1);
              *(_DWORD *)v50 = 138412290;
              swift_errorRetain(v3);
              v52 = _swift_stdlib_bridgeErrorToNSError(v3);
              *(_QWORD *)(v50 + 4) = v52;
              *v51 = v52;
              swift_errorRelease(v3);
              swift_errorRelease(v3);
              _os_log_impl((void *)&_mh_execute_header, v48, v49, "Error occurred when getting actual range: %@", (uint8_t *)v50, 0xCu);
              v53 = sub_100004EAC(&qword_1000C87C8);
              swift_arrayDestroy(v51, 1, v53);
              swift_slowDealloc(v51, -1, -1);
              swift_slowDealloc(v50, -1, -1);

              swift_errorRelease(v3);
            }
            else
            {

              swift_errorRelease(v3);
              swift_errorRelease(v3);
              swift_errorRelease(v3);

            }
          }
          else
          {
            v33 = v43;
            sub_10000AE2C(v45, &qword_1000C93E8);

            objc_msgSend(v35, "setRange:", v44, v33);
          }
          v30 = v85;
          v3 = 0;
          ++v32;
        }
        while (v87 != v32);
LABEL_33:
        v57 = *(_QWORD *)(v2 + 352);
        v58 = *(_QWORD *)(v2 + 360);
        v59 = *(_QWORD *)(v2 + 280);
        swift_bridgeObjectRelease(v30);
        v60 = swift_getKeyPath(&unk_1000962C0);
        *(_QWORD *)(v2 + 248) = v59;
        ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 248, v60, v57);
        swift_release(v60, v61);
        v62 = *(void **)(v59 + v58);
        if (v62)
        {
          v63 = *(_QWORD *)(v2 + 280);
          v64 = swift_getKeyPath(&unk_1000964A0);
          *(_QWORD *)(v2 + 264) = v63;
          v65 = v62;
          ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 264, v64, v84);
          result = swift_release(v64, v66);
          v67 = *(_QWORD *)(v83 + 64);
          if (!v67)
            goto LABEL_41;
          v68 = *(void **)(v2 + 336);
          sub_100021548(0, (unint64_t *)&qword_1000C9CB0, WTContext_ptr);
          swift_bridgeObjectRetain(v67);
          v69 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v67);
          objc_msgSend(v68, "didBeginWritingToolsSession:contexts:", v65, v69);

        }
        v70 = *(_QWORD *)(v2 + 352);
        v88 = *(_QWORD *)(v2 + 336);
        v71 = *(_QWORD *)(v2 + 280);
        v72 = *(_QWORD *)(v2 + 288);
        v73 = type metadata accessor for TaskPriority(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v72, 1, 1, v73);
        v74 = swift_retain(v71);
        v75 = static MainActor.shared.getter(v74);
        v76 = (_QWORD *)swift_allocObject(&unk_1000C1C08, 40, 7);
        v76[2] = v75;
        v76[3] = &protocol witness table for MainActor;
        v76[4] = v71;
        v77 = sub_1000596DC(v72, (uint64_t)&unk_1000CC968, (uint64_t)v76);
        v78 = swift_getKeyPath(&unk_1000962E8);
        v79 = swift_task_alloc(32);
        *(_QWORD *)(v79 + 16) = v71;
        *(_QWORD *)(v79 + 24) = v77;
        *(_QWORD *)(v2 + 256) = v71;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v2 + 256, v78, sub_100083B5C, v79, (char *)&type metadata for () + 8, v70);
        swift_unknownObjectRelease(v88);
        swift_release(v78, v80);
        swift_release(v77, v81);
        swift_task_dealloc(v79);
        v82 = *(_QWORD *)(v2 + 288);
        swift_task_dealloc(*(_QWORD *)(v2 + 296));
        swift_task_dealloc(v82);
        return (*(uint64_t (**)(void))(v2 + 8))();
      }
      __break(1u);
LABEL_38:
      swift_once(&qword_1000C73C0, sub_100006228);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000803DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[6] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[7] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[8] = v6;
  v4[9] = v7;
  return swift_task_switch(sub_100080448, v6, v7);
}

uint64_t sub_100080448()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 48);
  KeyPath = swift_getKeyPath(&unk_100096400);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = 1;
  *(_QWORD *)(v0 + 80) = OBJC_IVAR____TtC21WritingToolsUIService9ToolModel___observationRegistrar;
  *(_QWORD *)(v0 + 16) = v1;
  v4 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
  *(_QWORD *)(v0 + 88) = v4;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_100021078, v3, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)(v0 + 96) = 0;
  swift_release(KeyPath, v5);
  swift_task_dealloc(v3);
  v6 = swift_getKeyPath(&unk_1000964A0);
  *(_QWORD *)(v0 + 24) = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 24, v6, v4);
  swift_release(v6, v7);
  result = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v0 + 104) = result;
  if (result)
  {
    if ((unint64_t)result >> 62)
    {
      if (result >= 0)
        v20 = result & 0xFFFFFFFFFFFFFF8;
      else
        v20 = result;
      swift_bridgeObjectRetain(result);
      v21 = _CocoaArrayWrapper.endIndex.getter(v20);
      *(_QWORD *)(v0 + 112) = v21;
      if (v21)
        goto LABEL_4;
    }
    else
    {
      v9 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(result);
      *(_QWORD *)(v0 + 112) = v9;
      if (v9)
      {
LABEL_4:
        v11 = OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session;
        *(_QWORD *)(v0 + 120) = OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel___observationRegistrar;
        *(_QWORD *)(v0 + 128) = v11;
        v12 = *(_QWORD *)(v0 + 104);
        if ((v12 & 0xC000000000000001) != 0)
        {
          v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
          v11 = *(_QWORD *)(v0 + 128);
        }
        else
        {
          v13 = *(id *)(v12 + 32);
        }
        *(_QWORD *)(v0 + 136) = v13;
        *(_QWORD *)(v0 + 144) = 1;
        v14 = *(_QWORD *)(v0 + 48);
        v15 = swift_getKeyPath(&unk_1000962C0);
        *(_QWORD *)(v0 + 32) = v14;
        v16 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
        ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 32, v15, v16);
        swift_release(v15, v17);
        if (*(_QWORD *)(v14 + v11))
        {
          v18 = (_QWORD *)swift_task_alloc(dword_1000CC3DC);
          *(_QWORD *)(v0 + 152) = v18;
          *v18 = v0;
          v18[1] = sub_100080708;
          return sub_10008090C((uint64_t)v13);
        }
        v19 = *(_QWORD *)(v0 + 56);

        goto LABEL_15;
      }
    }
    v19 = *(_QWORD *)(v0 + 56);
LABEL_15:
    swift_release(v19, v10);
    v22 = *(_QWORD *)(v0 + 88);
    v23 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
    v24 = swift_getKeyPath(&unk_100096400);
    v25 = swift_task_alloc(32);
    *(_QWORD *)(v25 + 16) = v23;
    *(_BYTE *)(v25 + 24) = 0;
    *(_QWORD *)(v0 + 40) = v23;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 40, v24, sub_10002D38C, v25, (char *)&type metadata for () + 8, v22);
    swift_release(v24, v26);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

uint64_t sub_100080708()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 152));
  return swift_task_switch(sub_100080754, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

id sub_100080754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 112);

  if (v1 == v2)
  {
    v4 = *(_QWORD *)(v0 + 56);
LABEL_10:
    swift_release(v4, v3);
    v15 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
    KeyPath = swift_getKeyPath(&unk_100096400);
    v18 = swift_task_alloc(32);
    *(_QWORD *)(v18 + 16) = v16;
    *(_BYTE *)(v18 + 24) = 0;
    *(_QWORD *)(v0 + 40) = v16;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 40, KeyPath, sub_10002D38C, v18, (char *)&type metadata for () + 8, v15);
    swift_release(KeyPath, v19);
    swift_task_dealloc(v18);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 104);
  if ((v6 & 0xC000000000000001) != 0)
    result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(*(_QWORD *)(v0 + 144), v6);
  else
    result = *(id *)(v6 + 8 * v5 + 32);
  v8 = result;
  *(_QWORD *)(v0 + 136) = result;
  *(_QWORD *)(v0 + 144) = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(_QWORD *)(v0 + 48);
    v11 = swift_getKeyPath(&unk_1000962C0);
    *(_QWORD *)(v0 + 32) = v10;
    v12 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 32, v11, v12);
    swift_release(v11, v13);
    if (*(_QWORD *)(v10 + v9))
    {
      v14 = (_QWORD *)swift_task_alloc(dword_1000CC3DC);
      *(_QWORD *)(v0 + 152) = v14;
      *v14 = v0;
      v14[1] = sub_100080708;
      return (id)sub_10008090C((uint64_t)v8);
    }
    v4 = *(_QWORD *)(v0 + 56);

    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10008090C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[75] = v1;
  v2[74] = a1;
  v3 = type metadata accessor for UUID(0);
  v2[76] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[77] = v4;
  v2[78] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004EAC(&qword_1000CC928);
  v2[79] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[80] = v6;
  v2[81] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004EAC(&qword_1000CC930);
  v2[82] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[83] = v8;
  v2[84] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v2[85] = v9;
  v2[86] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v2[87] = v10;
  v2[88] = v11;
  return swift_task_switch(sub_100080A04, v10, v11);
}

void *sub_100080A04()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  objc_class *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  void *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 600) + 16);
  *(_QWORD *)(v0 + 712) = Strong;
  if (Strong)
  {
    v3 = *(_QWORD *)(v0 + 600);
    v4 = *(void **)(v0 + 592);
    v5 = (objc_class *)type metadata accessor for TextCompositionClient(0);
    *(_QWORD *)(v0 + 720) = v5;
    v6 = objc_msgSend(objc_allocWithZone(v5), "init");
    v7 = objc_msgSend(v4, "attributedText");
    v8 = objc_msgSend(v4, "range");
    v27 = v9;
    v28 = v8;
    v10 = sub_100004EAC((uint64_t *)&unk_1000C7BD0);
    inited = swift_initStackObject(v10, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100092910;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(TCTextCompositionAssistantOptionKeyAppProcessIdentifier);
    *(_QWORD *)(inited + 40) = v12;
    KeyPath = swift_getKeyPath(&unk_100096450);
    *(_QWORD *)(v0 + 576) = v3;
    v14 = sub_10002CE70((unint64_t *)&qword_1000C7778, type metadata accessor for ToolModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 576, KeyPath, v14);
    swift_release(KeyPath, v15);
    result = *(void **)(v3 + 24);
    if (result)
    {
      v17 = *(_QWORD *)(v0 + 648);
      v18 = *(_QWORD *)(v0 + 640);
      v19 = *(_QWORD *)(v0 + 632);
      v20 = objc_msgSend(result, "pid");
      *(_QWORD *)(inited + 72) = &type metadata for Int32;
      *(_DWORD *)(inited + 48) = v20;
      v21 = sub_1000620F0(inited);
      dispatch thunk of TextCompositionClient.streamForReview(of:range:options:)(v7, v28, v27, v21);

      swift_bridgeObjectRelease(v21);
      AsyncThrowingStream.makeAsyncIterator()(v19);
      v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      *(_QWORD *)(v0 + 728) = OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel___observationRegistrar;
      *(_QWORD *)(v0 + 736) = OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session;
      *(_QWORD *)(v0 + 744) = OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping;
      *(_QWORD *)(v0 + 752) = OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions;
      v23 = static MainActor.shared.getter(v22);
      *(_QWORD *)(v0 + 760) = v23;
      v24 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
      *(_QWORD *)(v0 + 768) = v24;
      *v24 = v0;
      v24[1] = sub_100080CA8;
      return (void *)_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 128, v23, &protocol witness table for MainActor, *(_QWORD *)(v0 + 656), v0 + 568);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 688), v2);
    v25 = *(_QWORD *)(v0 + 648);
    v26 = *(_QWORD *)(v0 + 624);
    swift_task_dealloc(*(_QWORD *)(v0 + 672));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (void *)(*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_100080CA8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 768);
  *(_QWORD *)(*(_QWORD *)v1 + 776) = v0;
  swift_task_dealloc(v3);
  swift_release(v2[95], v4);
  if (v0)
    v5 = sub_100081C18;
  else
    v5 = sub_100080D24;
  return swift_task_switch(v5, v2[87], v2[88]);
}

uint64_t sub_100080D24()
{
  _QWORD *v0;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v2;
  unint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char **p_name;
  void *v26;
  id v27;
  BOOL v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  NSString v61;
  NSString v62;
  NSString v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  _QWORD *v92;
  void *v93;
  _QWORD *v94;
  id v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  _BOOL8 v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  Class isa;
  uint64_t v132;
  uint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  id v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  id v150;
  NSString v151;
  uint64_t *v152;
  _QWORD *v153;
  uint64_t *v154;
  void **v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  void *v165;
  _OWORD *v166;
  _QWORD *v167;
  uint64_t v168;

  isUniquelyReferenced_nonNull_native = (uint64_t)v0;
  v2 = v0 + 16;
  v3 = v0[16];
  if (!v3)
  {
    v116 = v0[89];
    v117 = v0[86];
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 664) + 8))(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 672), *(_QWORD *)(isUniquelyReferenced_nonNull_native + 656));
    swift_unknownObjectRelease(v116);
    swift_release(v117, v118);
    v119 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 648);
    v120 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 624);
    swift_task_dealloc(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 672));
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    return (*(uint64_t (**)(void))(isUniquelyReferenced_nonNull_native + 8))();
  }
  v4 = v0 + 32;
  v5 = v0[17];
  v6 = v0[19];
  v138 = v2[2];
  v139 = v5;
  v140 = v2;
  v7 = static TextCompositionClient.textCompositionClientFinishedKey.getter();
  v9 = v8;
  if (*(_QWORD *)(v6 + 16) && (v10 = sub_10001CD50(v7, v8), (v11 & 1) != 0))
  {
    sub_1000071D0(*(_QWORD *)(v6 + 56) + 32 * v10, (uint64_t)v4);
  }
  else
  {
    *v4 = 0u;
    v4[1] = 0u;
  }
  v145 = v3;
  result = swift_bridgeObjectRelease(v9);
  if (!*(_QWORD *)(isUniquelyReferenced_nonNull_native + 280))
  {
    __break(1u);
    return result;
  }
  v13 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 600);
  sub_100021008(v4, (_OWORD *)v140 + 6);
  swift_dynamicCast(v140 + 82, v140 + 12, (char *)&type metadata for Any + 8, &type metadata for Bool, 7);
  v137 = *((unsigned __int8 *)v140 + 656);
  *(_QWORD *)(isUniquelyReferenced_nonNull_native + 536) = _swiftEmptyArrayStorage;
  v14 = sub_10002346C(v6);
  v16 = v15;
  swift_bridgeObjectRelease(v6);
  KeyPath = swift_getKeyPath(&unk_100096478);
  v18 = (_QWORD *)swift_task_alloc(48);
  v18[2] = v13;
  v18[3] = v14;
  v18[4] = v16;
  *(_QWORD *)(isUniquelyReferenced_nonNull_native + 528) = v13;
  v149 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v140 + 50, KeyPath, sub_100083BD8, v18, (char *)&type metadata for () + 8, v149);
  swift_release(KeyPath, v19);
  swift_bridgeObjectRelease(v16);
  swift_task_dealloc(v18);
  v20 = v3;
  v21 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 >> 62)
    goto LABEL_126;
  v22 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v148 = v140 + 51;
    v153 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    if (v22)
    {
      v23 = 0;
      v158 = (uint64_t)(v140 + 4);
      v159 = (uint64_t)(v140 - 4);
      v156 = (uint64_t)(v140 + 20);
      v157 = (uint64_t)(v140 + 8);
      v166 = v140 + 24;
      v152 = v140 + 52;
      v154 = v140 + 57;
      v155 = (void **)(v140 + 53);
      v24 = v20 & 0xC000000000000001;
      v144 = v20 + 32;
      p_name = (char **)(&stru_1000C5FF8 + 8);
      v142 = v22;
      v143 = v21;
      v141 = v20 & 0xC000000000000001;
      do
      {
        if (v24)
        {
          v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v20);
          v28 = __OFADD__(v23++, 1);
          if (v28)
            goto LABEL_120;
        }
        else
        {
          if (v23 >= *(_QWORD *)(v21 + 16))
            goto LABEL_124;
          v27 = *(id *)(v144 + 8 * v23);
          v28 = __OFADD__(v23++, 1);
          if (v28)
          {
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
            goto LABEL_123;
          }
        }
        v26 = v27;
        if (objc_msgSend(v27, p_name[336]) == (id)4)
        {
          v29 = objc_msgSend(v26, "grammarDetails");
          if (v29)
          {
            v30 = v29;
            v150 = v26;
            v146 = v23;
            v31 = sub_100004EAC(&qword_1000CC938);
            v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);

            v147 = v32;
            v33 = *(_QWORD *)(v32 + 16);
            if (v33)
            {
              v34 = (_QWORD *)(v32 + 32);
              do
              {
                v35 = *v34;
                v36 = *(_QWORD *)(*v34 + 16);
                swift_bridgeObjectRetain(*v34);
                if (v36 && (v37 = sub_10001CD50(0x616D6D617247534ELL, 0xEE0065676E615272), (v38 & 1) != 0))
                {
                  sub_1000071D0(*(_QWORD *)(v35 + 56) + 32 * v37, v159);
                  v39 = sub_100021548(0, &qword_1000CC948, NSValue_ptr);
                  if (swift_dynamicCast(v155, v159, (char *)&type metadata for Any + 8, v39, 6))
                    v40 = *v155;
                  else
                    v40 = 0;
                  if (!*(_QWORD *)(v35 + 16))
                  {
LABEL_40:
                    v44 = 0;
                    if (!*(_QWORD *)(v35 + 16))
                      goto LABEL_47;
                    goto LABEL_41;
                  }
                }
                else
                {
                  v40 = 0;
                  if (!*(_QWORD *)(v35 + 16))
                    goto LABEL_40;
                }
                v41 = sub_10001CD50(0xD000000000000014, 0x80000001000ACF50);
                if ((v42 & 1) == 0)
                  goto LABEL_40;
                sub_1000071D0(*(_QWORD *)(v35 + 56) + 32 * v41, v158);
                v43 = sub_100004EAC(&qword_1000CC940);
                if (swift_dynamicCast(v154, v158, (char *)&type metadata for Any + 8, v43, 6))
                  v44 = *v154;
                else
                  v44 = 0;
                if (!*(_QWORD *)(v35 + 16))
                {
LABEL_47:
                  v47 = 0;
                  if (!*(_QWORD *)(v35 + 16))
                    goto LABEL_54;
                  goto LABEL_48;
                }
LABEL_41:
                v45 = sub_10001CD50(0xD000000000000015, 0x80000001000ACF70);
                if ((v46 & 1) == 0)
                  goto LABEL_47;
                sub_1000071D0(*(_QWORD *)(v35 + 56) + 32 * v45, v157);
                if (swift_dynamicCast(v140 + 38, v157, (char *)&type metadata for Any + 8, &type metadata for String, 6))v47 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 440);
                else
                  v47 = 0;
                if (!*(_QWORD *)(v35 + 16))
                {
LABEL_54:
                  v50 = 0;
                  if (!*(_QWORD *)(v35 + 16))
                    goto LABEL_57;
                  goto LABEL_55;
                }
LABEL_48:
                v48 = sub_10001CD50(0xD00000000000001DLL, 0x80000001000ACF90);
                if ((v49 & 1) == 0)
                  goto LABEL_54;
                sub_1000071D0(*(_QWORD *)(v35 + 56) + 32 * v48, v156);
                if (swift_dynamicCast(v140 + 36, v156, (char *)&type metadata for Any + 8, &type metadata for String, 6))v50 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 424);
                else
                  v50 = 0;
                if (!*(_QWORD *)(v35 + 16))
                  goto LABEL_57;
LABEL_55:
                v51 = sub_10001CD50(0xD000000000000018, 0x80000001000ACFB0);
                if ((v52 & 1) != 0)
                {
                  sub_1000071D0(*(_QWORD *)(v35 + 56) + 32 * v51, (uint64_t)v166);
                  goto LABEL_58;
                }
LABEL_57:
                *v166 = 0u;
                *((_OWORD *)v140 + 13) = 0u;
LABEL_58:
                swift_bridgeObjectRelease(v35);
                if (*(_QWORD *)(isUniquelyReferenced_nonNull_native + 344))
                {
                  if (swift_dynamicCast(v140 + 34, v166, (char *)&type metadata for Any + 8, &type metadata for String, 6))v53 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 408);
                  else
                    v53 = 0;
                  if (!v40)
                  {
LABEL_23:
                    swift_bridgeObjectRelease(v44);
                    goto LABEL_24;
                  }
                }
                else
                {
                  sub_10000AE2C((uint64_t)v166, &qword_1000C7750);
                  v53 = 0;
                  if (!v40)
                    goto LABEL_23;
                }
                if (v44)
                {
                  v20 = v44 & 0xFFFFFFFFFFFFFF8;
                  if ((unint64_t)v44 >> 62)
                  {
                    if (v44 >= 0)
                      v69 = v44 & 0xFFFFFFFFFFFFFF8;
                    else
                      v69 = v44;
                    v70 = v40;
                    swift_bridgeObjectRetain(v44);
                    v21 = _CocoaArrayWrapper.endIndex.getter(v69);
                    swift_bridgeObjectRelease(v44);
                    if (!v21)
                    {
LABEL_89:

                      swift_bridgeObjectRelease(v44);
                      goto LABEL_24;
                    }
                  }
                  else
                  {
                    v21 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    v54 = v40;
                    if (!v21)
                      goto LABEL_89;
                  }
                  if ((v44 & 0xC000000000000001) != 0)
                  {
                    v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v44);
                  }
                  else
                  {
                    if (!*(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
                    {
                      __break(1u);
                      goto LABEL_120;
                    }
                    v56 = *(_QWORD *)(v44 + 32);
                    swift_unknownObjectRetain(v56, v55);
                  }
                  swift_bridgeObjectRelease(v44);
                  *v152 = v56;
                  if ((swift_dynamicCast(v140 + 40, v152, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0)
                  {
                    v20 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 448);
                    v21 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 456);
                    v57 = objc_msgSend(v40, "rangeValue");
                    v59 = v58;
                    v60 = objc_msgSend(v150, "range");
                    v28 = __OFADD__(v57, v60);
                    isUniquelyReferenced_nonNull_native = (uint64_t)v60 + (_QWORD)v57;
                    if (v28)
                      goto LABEL_121;
                    v151 = String._bridgeToObjectiveC()();
                    swift_bridgeObjectRelease(v21);
                    if (v47)
                    {
                      v61 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease(v47);
                      if (v50)
                        goto LABEL_75;
LABEL_80:
                      v62 = 0;
                      if (!v53)
                        goto LABEL_81;
LABEL_76:
                      v63 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease(v53);
                    }
                    else
                    {
                      v61 = 0;
                      if (!v50)
                        goto LABEL_80;
LABEL_75:
                      v62 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease(v50);
                      if (v53)
                        goto LABEL_76;
LABEL_81:
                      v63 = 0;
                    }
                    v64 = objc_msgSend(objc_allocWithZone((Class)WTTextSuggestion), "initWithOriginalRange:replacement:suggestionCategory:suggestionShortDescription:suggestionDescription:", isUniquelyReferenced_nonNull_native, v59, v151, v61, v62, v63);

                    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v65);
                    v67 = *(_QWORD *)((*v148 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    v66 = *(_QWORD *)((*v148 & 0xFFFFFFFFFFFFFF8) + 0x18);
                    if (v67 >= v66 >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
                    v68 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v67, v64);
                    specialized Array._endMutation()(v68);

                    isUniquelyReferenced_nonNull_native = (uint64_t)v153;
                    goto LABEL_25;
                  }

                }
                else
                {

                }
LABEL_24:
                swift_bridgeObjectRelease(v47);
                swift_bridgeObjectRelease(v50);
                swift_bridgeObjectRelease(v53);
LABEL_25:
                ++v34;
                --v33;
              }
              while (v33);
            }
            swift_bridgeObjectRelease(v147);
            v20 = v145;
            v23 = v146;
            v22 = v142;
            v21 = v143;
            v24 = v141;
            p_name = &stru_1000C5FF8.name;
            v26 = v150;
          }
        }

      }
      while (v23 != v22);
    }
    v71 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 736);
    v72 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 600);
    swift_bridgeObjectRelease(v20);
    v20 = swift_getKeyPath(&unk_1000962C0);
    *(_QWORD *)(isUniquelyReferenced_nonNull_native + 520) = v72;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v140 + 49, v20, v149);
    swift_release(v20, v73);
    v21 = *(_QWORD *)(v72 + v71);
    if (!v21)
    {
      v121 = swift_bridgeObjectRelease(*v148);
      v122 = v140;
      goto LABEL_117;
    }
    v74 = *v148;
    if ((unint64_t)*v148 >> 62)
    {
      v135 = v74 < 0 ? *v148 : v74 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(*v148, 2);
      v136 = (id)v21;
      v75 = _CocoaArrayWrapper.endIndex.getter(v135);
      swift_bridgeObjectRelease(v74);
    }
    else
    {
      v75 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*v148);
      v76 = (id)v21;
    }
    v160 = (void *)v21;
    if (!v75)
      break;
    v77 = 0;
    v167 = v140 + 31;
    v163 = v74 & 0xC000000000000001;
    v161 = v75;
    v162 = v74;
    while (1)
    {
      if (v163)
      {
        v88 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v77, v74);
        v89 = v77 + 1;
        if (__OFADD__(v77, 1))
          goto LABEL_122;
      }
      else
      {
        v88 = *(id *)(v74 + 8 * v77 + 32);
        v89 = v77 + 1;
        if (__OFADD__(v77, 1))
          goto LABEL_122;
      }
      v164 = v89;
      v90 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 624);
      v20 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 600);
      v91 = *(void **)(isUniquelyReferenced_nonNull_native + 592);
      v92 = (_QWORD *)(v20 + *(_QWORD *)(isUniquelyReferenced_nonNull_native + 744));
      v93 = v88;
      v94 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      v95 = objc_msgSend(v88, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v95);

      v96 = swift_getKeyPath(&unk_100096338);
      v94[64] = v20;
      v97 = v91;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v140 + 48, v96, v149);
      swift_release(v96, v98);
      v94[63] = v20;
      v99 = swift_getKeyPath(&unk_100096338);
      ObservationRegistrar.willSet<A, B>(_:keyPath:)(v140 + 47, v99, v149);
      swift_release(v99, v100);
      swift_beginAccess(v92, v167, 33, 0);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v92);
      v101 = *v92;
      v94[61] = *v92;
      *v92 = 0x8000000000000000;
      v21 = sub_10001CCB8(v90);
      v103 = *(_QWORD *)(v101 + 16);
      v104 = (v102 & 1) == 0;
      v105 = v103 + v104;
      if (__OFADD__(v103, v104))
        break;
      v106 = v102;
      if (*(_QWORD *)(v101 + 24) >= v105)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100020524();
      }
      else
      {
        v20 = (uint64_t)v153;
        v107 = v153[78];
        sub_10001E8E4(v105, isUniquelyReferenced_nonNull_native);
        v108 = sub_10001CCB8(v107);
        if ((v106 & 1) != (v109 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v153[76]);
        v21 = v108;
      }
      isUniquelyReferenced_nonNull_native = v140[45];
      if ((v106 & 1) != 0)
      {
        v78 = v153;
        v79 = v153[74];
        v80 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 56);
        v81 = 8 * v21;

        *(_QWORD *)(v80 + v81) = v79;
      }
      else
      {
        v110 = v153[78];
        v111 = v153[77];
        v112 = v153[76];
        v113 = v153[74];
        *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * (v21 >> 6) + 64) |= 1 << v21;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v111 + 16))(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 48) + *(_QWORD *)(v111 + 72) * v21, v110, v112);
        *(_QWORD *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 8 * v21) = v113;
        v114 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
        v28 = __OFADD__(v114, 1);
        v115 = v114 + 1;
        if (v28)
          goto LABEL_125;
        *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v115;
        v78 = v153;
      }
      v82 = v78[93];
      v83 = v78[78];
      v20 = v78[77];
      v84 = v78[76];
      v85 = v78[75];
      v86 = *(_QWORD *)(v85 + v82);
      *(_QWORD *)(v85 + v82) = isUniquelyReferenced_nonNull_native;
      swift_bridgeObjectRelease(v86);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v83, v84);
      swift_endAccess(v167);
      v78[58] = v85;
      v21 = swift_getKeyPath(&unk_100096338);
      ObservationRegistrar.didSet<A, B>(_:keyPath:)(v140 + 42, v21, v149);

      swift_release(v21, v87);
      ++v77;
      v74 = v162;
      isUniquelyReferenced_nonNull_native = (uint64_t)v78;
      if (v164 == v161)
      {
        swift_bridgeObjectRelease(v162);
        v74 = *v148;
        goto LABEL_116;
      }
    }
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    if (v20 >= 0)
      v134 = v21;
    else
      v134 = v20;
    swift_bridgeObjectRetain(v20);
    v22 = _CocoaArrayWrapper.endIndex.getter(v134);
    swift_bridgeObjectRelease(v20);
  }
  swift_bridgeObjectRelease(v74);
LABEL_116:
  v122 = v140;
  v123 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 600);
  v165 = *(void **)(isUniquelyReferenced_nonNull_native + 712);
  v168 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 592);
  v124 = v123 + *(_QWORD *)(isUniquelyReferenced_nonNull_native + 752);
  v125 = swift_getKeyPath(&unk_100096310);
  v153[59] = v123;
  swift_bridgeObjectRetain(v74);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v140 + 43, v125, v149);
  swift_release(v125, v126);
  v153[60] = v123;
  v127 = swift_getKeyPath(&unk_100096310);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v140 + 44, v127, v149);
  swift_release(v127, v128);
  swift_beginAccess(v124, v140 + 28, 33, 0);
  isUniquelyReferenced_nonNull_native = (uint64_t)v153;
  sub_10007DDAC(v74);
  swift_endAccess(v140 + 28);
  v153[62] = v123;
  v129 = swift_getKeyPath(&unk_100096310);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v140 + 46, v129, v149);
  swift_release(v129, v130);
  sub_100021548(0, &qword_1000C9CC8, WTTextSuggestion_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v74);
  objc_msgSend(v165, "proofreadingSession:didReceiveSuggestions:processedRange:inContext:finished:", v160, isa, v139, v138, v168, v137);

LABEL_117:
  v132 = static MainActor.shared.getter(v121);
  *(_QWORD *)(isUniquelyReferenced_nonNull_native + 760) = v132;
  v133 = (uint64_t *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  *(_QWORD *)(isUniquelyReferenced_nonNull_native + 768) = v133;
  *v133 = isUniquelyReferenced_nonNull_native;
  v133[1] = (uint64_t)sub_100080CA8;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v122, v132, &protocol witness table for MainActor, *(_QWORD *)(isUniquelyReferenced_nonNull_native + 656), isUniquelyReferenced_nonNull_native + 568);
}

uint64_t sub_100081C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = *(_QWORD *)(v2 + 672);
  v4 = *(_QWORD *)(v2 + 664);
  v5 = *(_QWORD *)(v2 + 656);
  swift_release(*(_QWORD *)(v2 + 688), a2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v2 + 568);
  swift_errorRetain(v6);
  sub_10000C1D4(v6);
  swift_errorRelease(v6);
  if (qword_1000C73C0 != -1)
    swift_once(&qword_1000C73C0, sub_100006228);
  v7 = type metadata accessor for Logger(0);
  sub_1000063D4(v7, (uint64_t)qword_1000D1BD0);
  swift_errorRetain(v6);
  v8 = swift_errorRetain(v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v18 = *(_QWORD *)(v2 + 712);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(v6);
    v13 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v2 + 560) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 560, v2 + 568, v11 + 4, v11 + 12);
    *v12 = v13;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error occurred in proofreading: %@", v11, 0xCu);
    v14 = sub_100004EAC(&qword_1000C87C8);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_unknownObjectRelease(v18);
    swift_errorRelease(v6);
  }
  else
  {
    swift_unknownObjectRelease(*(_QWORD *)(v2 + 712));
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    swift_errorRelease(v6);

  }
  v15 = *(_QWORD *)(v2 + 648);
  v16 = *(_QWORD *)(v2 + 624);
  swift_task_dealloc(*(_QWORD *)(v2 + 672));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100081E58(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD v19[3];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v8);

  KeyPath = swift_getKeyPath(&unk_100096388);
  v19[0] = v2;
  v10 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v19, KeyPath, v10);
  swift_release(KeyPath, v11);
  v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates);
  swift_beginAccess(v2 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates, v19, 0, 0);
  v13 = *v12;
  if (*(_QWORD *)(v13 + 16))
  {
    swift_bridgeObjectRetain(v13);
    v14 = sub_10001CCB8((uint64_t)v7);
    if ((v15 & 1) != 0)
      v16 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14);
    else
      v16 = 0;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v16 = 0;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

void sub_100081FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t Strong;
  void *v64;
  id v65;
  NSUUID v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  char v72;
  id v73;
  int64_t v74;
  uint64_t v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[3];
  _QWORD v87[3];

  v3 = v2;
  v84 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v84 - 8);
  v7 = __chkstk_darwin(v84);
  v76 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v74 - v9;
  v11 = sub_100004EAC(&qword_1000CC918);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v74 - v15;
  KeyPath = swift_getKeyPath(&unk_100096388);
  v18 = v2 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel___observationRegistrar;
  v87[0] = v3;
  v79 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  v80 = v18;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v87, KeyPath, v79);
  swift_release(KeyPath, v19);
  v83 = v3;
  v20 = (_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates);
  swift_beginAccess(v3 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates, v87, 0, 0);
  v77 = v20;
  v21 = *v20;
  if (*(_QWORD *)(v21 + 16))
  {
    swift_bridgeObjectRetain(v21);
    v22 = sub_10001CCB8(a2);
    if ((v23 & 1) != 0)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v22);
      swift_bridgeObjectRelease(v21);
      if (v24 == a1)
        return;
    }
    else
    {
      swift_bridgeObjectRelease(v21);
    }
  }
  v78 = a2;
  if (a1 == 1)
  {
    v75 = 1;
    v25 = swift_getKeyPath(&unk_100096388);
    v86[0] = v83;
    v26 = v80;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v86, v25, v79);
    swift_release(v25, v27);
    v28 = *v77;
    v29 = *(_QWORD *)(*v77 + 64);
    v81 = *v77 + 64;
    v30 = 1 << *(_BYTE *)(v28 + 32);
    v31 = -1;
    if (v30 < 64)
      v31 = ~(-1 << v30);
    v32 = v31 & v29;
    v82 = (unint64_t)(v30 + 63) >> 6;
    v74 = v82 - 1;
    swift_bridgeObjectRetain(v28);
    v33 = 0;
    v34 = v84;
    while (!v32)
    {
      v39 = v33 + 1;
      if (__OFADD__(v33, 1))
      {
        __break(1u);
        goto LABEL_43;
      }
      if (v39 < v82)
      {
        v40 = *(_QWORD *)(v81 + 8 * v39);
        if (v40)
          goto LABEL_17;
        v41 = v33 + 2;
        ++v33;
        if (v39 + 1 < v82)
        {
          v40 = *(_QWORD *)(v81 + 8 * v41);
          if (v40)
            goto LABEL_20;
          v33 = v39 + 1;
          if (v39 + 2 < v82)
          {
            v40 = *(_QWORD *)(v81 + 8 * (v39 + 2));
            if (v40)
            {
              v39 += 2;
              goto LABEL_17;
            }
            v41 = v39 + 3;
            v33 = v39 + 2;
            if (v39 + 3 < v82)
            {
              v40 = *(_QWORD *)(v81 + 8 * v41);
              if (!v40)
              {
                while (1)
                {
                  v39 = v41 + 1;
                  if (__OFADD__(v41, 1))
                    break;
                  if (v39 >= v82)
                  {
                    v33 = v74;
                    goto LABEL_31;
                  }
                  v40 = *(_QWORD *)(v81 + 8 * v39);
                  ++v41;
                  if (v40)
                    goto LABEL_17;
                }
LABEL_44:
                __break(1u);
                goto LABEL_45;
              }
LABEL_20:
              v39 = v41;
LABEL_17:
              v32 = (v40 - 1) & v40;
              v36 = __clz(__rbit64(v40)) + (v39 << 6);
              v33 = v39;
LABEL_13:
              (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v14, *(_QWORD *)(v28 + 48) + *(_QWORD *)(v6 + 72) * v36, v34);
              v37 = *(_QWORD *)(v28 + 56);
              v38 = sub_100004EAC(&qword_1000CC920);
              *(_QWORD *)&v14[*(int *)(v38 + 48)] = *(_QWORD *)(v37 + 8 * v36);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v14, 0, 1, v38);
              goto LABEL_32;
            }
          }
        }
      }
LABEL_31:
      v42 = sub_100004EAC(&qword_1000CC920);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v14, 1, 1, v42);
      v32 = 0;
LABEL_32:
      sub_100083B80((uint64_t)v14, (uint64_t)v16);
      v43 = sub_100004EAC(&qword_1000CC920);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v16, 1, v43) == 1)
      {
        swift_release(v28, v44);
        a1 = v75;
        goto LABEL_36;
      }
      v26 = *(_QWORD *)&v16[*(int *)(v43 + 48)];
      v34 = v84;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v16, v84);
      if (v26 == 1)
      {
        v26 = v83;
        sub_100081FB0(0, v10);
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v34);
    }
    v35 = __clz(__rbit64(v32));
    v32 &= v32 - 1;
    v36 = v35 | (v33 << 6);
    goto LABEL_13;
  }
LABEL_36:
  v45 = (uint64_t)v76;
  v46 = v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v76, v78, v84);
  v47 = swift_getKeyPath(&unk_100096388);
  v48 = v83;
  v86[0] = v83;
  v49 = v79;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v86, v47, v79);
  swift_release(v47, v50);
  v86[0] = v48;
  v51 = swift_getKeyPath(&unk_100096388);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v86, v51, v49);
  swift_release(v51, v52);
  v53 = v77;
  swift_beginAccess(v77, v86, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v53);
  v85 = *v53;
  *v53 = 0x8000000000000000;
  sub_10001EF28(a1, v45, isUniquelyReferenced_nonNull_native);
  v55 = *v53;
  *v53 = v85;
  swift_bridgeObjectRelease(v55);
  v56 = v45;
  v57 = v78;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v56, v46);
  swift_endAccess(v86);
  v86[0] = v48;
  v58 = swift_getKeyPath(&unk_100096388);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v86, v58, v49);
  swift_release(v58, v59);
  v60 = swift_getKeyPath(&unk_1000962C0);
  v86[0] = v48;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v86, v60, v49);
  swift_release(v60, v61);
  v62 = *(void **)(v48 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session);
  if (v62)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v83 + 16);
    if (Strong)
    {
      v64 = (void *)Strong;
      v65 = v62;
      v66.super.isa = UUID._bridgeToObjectiveC()().super.isa;
      v67 = swift_getKeyPath(&unk_100096338);
      v68 = v83;
      v86[0] = v83;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v86, v67, v79);
      swift_release(v67, v69);
      v70 = (uint64_t *)(v68 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping);
      swift_beginAccess(v68 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping, v86, 0, 0);
      v26 = *v70;
      if (!*(_QWORD *)(v26 + 16))
      {
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      swift_bridgeObjectRetain(v26);
      v71 = sub_10001CCB8(v57);
      if ((v72 & 1) != 0)
      {
        v73 = *(id *)(*(_QWORD *)(v26 + 56) + 8 * v71);
        swift_bridgeObjectRelease(v26);
        objc_msgSend(v64, "proofreadingSession:didUpdateState:forSuggestionWithUUID:inContext:", v65, a1, v66.super.isa, v73);

        swift_unknownObjectRelease(v64);
      }
      else
      {
LABEL_45:
        swift_bridgeObjectRelease(v26);
        __break(1u);
      }
    }
  }
}

void sub_100082660(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t Strong;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  uint64_t v22;

  KeyPath = swift_getKeyPath(&unk_1000962C0);
  v22 = v2;
  v6 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v22, KeyPath, v6);
  swift_release(KeyPath, v7);
  v8 = *(void **)(v2 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session);
  if (v8)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
    if (Strong)
    {
      v10 = (void *)Strong;
      v11 = swift_getKeyPath(&unk_1000962E8);
      v22 = v2;
      v12 = v8;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v22, v11, v6);
      swift_release(v11, v13);
      v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__task);
      if (v14)
      {
        swift_retain(*(_QWORD *)(v2 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__task));
        Task.cancel()();
        swift_release(v14, v15);
      }
      if (a2)
      {
        v16 = swift_unknownObjectWeakLoadStrong(v2 + 16);
        if (v16)
        {
          v17 = (void *)v16;
          swift_errorRetain(a2);
          v18 = (void *)_convertErrorToNSError(_:)(a2);
          objc_msgSend(v17, "endWritingToolsWithError:", v18);
          swift_errorRelease(a2);
          swift_unknownObjectRelease(v17);

        }
      }
      else
      {
        objc_msgSend(v10, "didEndWritingToolsSession:accepted:", v12, (a1 == 2) | (a1 & 1));
      }
      v19 = swift_getKeyPath(&unk_1000962C0);
      __chkstk_darwin(v19);
      v21[2] = v2;
      v21[3] = 0;
      v22 = v2;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v22, v19, sub_100083118, v21, (char *)&type metadata for () + 8, v6);
      swift_release(v19, v20);
      swift_unknownObjectRelease(v10);

    }
  }
}

void sub_100082880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char v19;
  char v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[3];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v33[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_10007F0F8() & 1) == 0)
  {
    KeyPath = swift_getKeyPath(&unk_100096310);
    v33[0] = v0;
    v7 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v33, KeyPath, v7);
    swift_release(KeyPath, v8);
    v9 = (uint64_t *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
    swift_beginAccess(v1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v33, 0, 0);
    v10 = *v9;
    swift_retain(v1);
    v11 = swift_bridgeObjectRetain(v10);
    v12 = (uint64_t)sub_100083540(v11, v1);
    swift_release(v1, v13);
    swift_bridgeObjectRelease(v10);
    swift_retain(v1);
    v14 = sub_1000838B4(v12, v1);
    v16 = swift_release(v1, v15);
    NSNotFound.getter(v16);
    if (!v14)
      goto LABEL_10;
    v17 = v14;
    v18 = sub_10007F3CC((uint64_t)v17, v12);
    v20 = v19;

    if ((v20 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v21 = objc_msgSend(v17, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

      sub_100081FB0(0, (uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v22 = v18 - 1;
      if (__OFSUB__(v18, 1))
        goto LABEL_21;
      if ((v22 & 0x8000000000000000) != 0)
      {
        if ((unint64_t)v12 >> 62)
          goto LABEL_28;
        v23 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
        v22 = v23 - 1;
        if (__OFSUB__(v23, 1))
          goto LABEL_9;
      }
LABEL_12:
      while ((v12 & 0xC000000000000001) == 0)
      {
        if ((v22 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v22 < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v25 = *(id *)(v12 + 8 * v22 + 32);
          goto LABEL_16;
        }
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        if (v12 < 0)
          v28 = v12;
        else
          v28 = v12 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v12);
        v29 = _CocoaArrayWrapper.endIndex.getter(v28);
        swift_bridgeObjectRelease(v12);
        v22 = v29 - 1;
        if (__OFSUB__(v29, 1))
        {
          while (1)
          {
            __break(1u);
LABEL_28:
            v30 = v12 < 0 ? v12 : v12 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v12);
            v31 = _CocoaArrayWrapper.endIndex.getter(v30);
            swift_bridgeObjectRelease(v12);
            v22 = v31 - 1;
            if (!__OFSUB__(v31, 1))
              break;
LABEL_9:
            __break(1u);
LABEL_10:
            if ((unint64_t)v12 >> 62)
              goto LABEL_22;
            v24 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
            v22 = v24 - 1;
            if (!__OFSUB__(v24, 1))
              goto LABEL_12;
          }
        }
      }
      v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v12);
LABEL_16:
      v26 = v25;
      swift_bridgeObjectRelease(v12);
      v27 = objc_msgSend(v26, "uuid");

      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);
      sub_100081FB0(1, (uint64_t)v5);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
  }
}

void sub_100082B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  char v20;
  char v21;
  id v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  _QWORD v31[3];

  v2 = v0;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v31[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_10007F0F8() & 1) == 0)
  {
    KeyPath = swift_getKeyPath(&unk_100096310);
    v31[0] = v0;
    v8 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v31, KeyPath, v8);
    swift_release(KeyPath, v9);
    v10 = (uint64_t *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
    swift_beginAccess(v2 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, v31, 0, 0);
    v11 = *v10;
    swift_retain(v2);
    v12 = swift_bridgeObjectRetain(v11);
    v13 = (uint64_t)sub_100083540(v12, v2);
    swift_release(v2, v14);
    swift_bridgeObjectRelease(v11);
    swift_retain(v2);
    v15 = sub_1000838B4(v13, v2);
    v17 = swift_release(v2, v16);
    NSNotFound.getter(v17);
    if (!v15)
      goto LABEL_13;
    v18 = v15;
    v19 = sub_10007F3CC((uint64_t)v18, v13);
    v21 = v20;

    if ((v21 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v22 = objc_msgSend(v18, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

      sub_100081FB0(0, (uint64_t)v6);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v23 = __OFADD__(v19, 1);
      v1 = v19 + 1;
      if (v23)
        goto LABEL_20;
      if ((unint64_t)v13 >> 62)
        goto LABEL_21;
      v24 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      while (1)
      {
        v25 = v1 >= v24 ? 0 : v1;
        if ((v13 & 0xC000000000000001) != 0)
          break;
        if ((v25 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_13:
          v25 = 0;
          if ((v13 & 0xC000000000000001) != 0)
            break;
        }
        if (v25 < *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v26 = *(id *)(v13 + 8 * v25 + 32);
          goto LABEL_16;
        }
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        if (v13 < 0)
          v29 = v13;
        else
          v29 = v13 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v13);
        v24 = _CocoaArrayWrapper.endIndex.getter(v29);
        swift_bridgeObjectRelease(v13);
      }
      v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v13);
LABEL_16:
      v27 = v26;
      swift_bridgeObjectRelease(v13);
      v28 = objc_msgSend(v27, "uuid");

      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);
      sub_100081FB0(1, (uint64_t)v6);

      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
  }
}

uint64_t sub_100082E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__task), v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__modelInfoString
                                      + 8));
  v2 = v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel___observationRegistrar;
  v3 = type metadata accessor for ObservationRegistrar(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_100082ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  sub_10000C714(v0 + 16);

  sub_10000B11C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_errorRelease(*(_QWORD *)(v0 + 80));
  v1 = v0 + OBJC_IVAR____TtC21WritingToolsUIService9ToolModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__task), v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__modelInfoString
                                      + 8));
  v3(v0 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel___observationRegistrar, v2);
  return v0;
}

uint64_t sub_100082FE0()
{
  uint64_t v0;

  sub_100082ED8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100083004()
{
  return type metadata accessor for ProofreadingModel(0);
}

uint64_t type metadata accessor for ProofreadingModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000CC3C0;
  if (!qword_1000CC3C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ProofreadingModel);
  return result;
}

uint64_t sub_100083048(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = "\b";
  v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[6] = &unk_100096290;
  v4[7] = &unk_1000962A8;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 688);
    if (!result)
      return 0;
  }
  return result;
}

id sub_1000830E8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10007EB58(a1, (uint64_t)&unk_1000962C0, &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__session, a2);
}

void sub_100083118()
{
  uint64_t v0;

  sub_10007E5AC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100083130@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10007E964(a1, (uint64_t)&unk_100096310, &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions, a2);
}

uint64_t sub_100083158()
{
  uint64_t v0;

  return sub_1000258BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestions);
}

uint64_t sub_100083178@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10007E964(a1, (uint64_t)&unk_100096338, &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping, a2);
}

uint64_t sub_1000831A0()
{
  uint64_t v0;

  return sub_1000258BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionContextMapping);
}

id sub_1000831C0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10007EB58(a1, (uint64_t)&unk_100096360, &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__expandedSuggestion, a2);
}

void sub_1000831E8()
{
  sub_100083B20();
}

uint64_t sub_1000831FC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10007E964(a1, (uint64_t)&unk_100096388, &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates, a2);
}

uint64_t sub_100083224()
{
  uint64_t v0;

  return sub_1000258BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates);
}

uint64_t sub_100083244(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100083BEC();
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100004EAC(&qword_1000CC950);
          v13 = sub_10008344C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100021548(0, &qword_1000C9CC8, WTTextSuggestion_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void (*sub_10008344C(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1000834CC(v6, a2, a3);
  return sub_1000834A0;
}

void sub_1000834A0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1000834CC(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_100083538;
  }
  __break(1u);
  return result;
}

void sub_100083538(id *a1)
{

}

_QWORD *sub_100083540(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  unint64_t v16;
  id v17;
  char *v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v37;
  _QWORD v38[2];
  char *v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _BYTE v50[24];
  _QWORD *v51;

  v3 = v2;
  v47 = type metadata accessor for UUID(0);
  v43 = *(_QWORD *)(v47 - 8);
  v6 = __chkstk_darwin(v47);
  v39 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v44 = (char *)v38 - v8;
  v51 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_28;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v10 = OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel___observationRegistrar;
  v48 = (_QWORD *)(a2 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates);
  swift_beginAccess(a2 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates, v50, 0, 0);
  if (v9)
  {
    v38[1] = v3;
    v3 = 0;
    v45 = a2 + v10;
    v46 = a2;
    v41 = a1 & 0xFFFFFFFFFFFFFF8;
    v42 = a1 & 0xC000000000000001;
    while (1)
    {
      if (v42)
      {
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
      }
      else
      {
        if (v3 >= *(_QWORD *)(v41 + 16))
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          if (a1 < 0)
            v37 = a1;
          else
            v37 = a1 & 0xFFFFFFFFFFFFFF8;
          v9 = _CocoaArrayWrapper.endIndex.getter(v37);
          goto LABEL_3;
        }
        v14 = *(id *)(a1 + 8 * v3 + 32);
      }
      v15 = v14;
      v16 = v3 + 1;
      if (__OFADD__(v3, 1))
        goto LABEL_27;
      v17 = objc_msgSend(v14, "uuid");
      v18 = v44;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

      KeyPath = swift_getKeyPath(&unk_100096388);
      v49 = a2;
      v20 = (uint64_t)v18;
      v21 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v49, KeyPath, v21);
      swift_release(KeyPath, v22);
      v23 = *v48;
      if (!*(_QWORD *)(*v48 + 16))
        goto LABEL_6;
      swift_bridgeObjectRetain(*v48);
      v24 = sub_10001CCB8(v20);
      if ((v25 & 1) == 0)
        break;
      v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
      swift_bridgeObjectRelease(v23);
      v27 = *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8);
      v11 = v27(v20, v47);
      if (v26)
      {
        v40 = (void (*)(uint64_t, uint64_t))v27;
        v28 = objc_msgSend(v15, "uuid");
        v29 = (uint64_t)v39;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

        v30 = swift_getKeyPath(&unk_100096388);
        v49 = v46;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v49, v30, v21);
        swift_release(v30, v31);
        v32 = *v48;
        if (!*(_QWORD *)(*v48 + 16))
          goto LABEL_21;
        swift_bridgeObjectRetain(*v48);
        v33 = sub_10001CCB8(v29);
        if ((v34 & 1) == 0)
        {
          swift_bridgeObjectRelease(v32);
LABEL_21:
          v40(v29, v47);
LABEL_22:

          goto LABEL_8;
        }
        v35 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v33);
        swift_bridgeObjectRelease(v32);
        v11 = ((uint64_t (*)(uint64_t, uint64_t))v40)(v29, v47);
        if (v35 != 1)
          goto LABEL_22;
      }
LABEL_7:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v12 = v51[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v15);
      specialized ContiguousArray._endMutation()(v13);
LABEL_8:
      ++v3;
      a2 = v46;
      if (v16 == v9)
        return v51;
    }
    swift_bridgeObjectRelease(v23);
LABEL_6:
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v20, v47);
    goto LABEL_7;
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1000838B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[3];
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[24];
  uint64_t v31;

  v3 = v2;
  v29 = a2;
  v5 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_17;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v8)
  {
    v26 = a1 & 0xC000000000000001;
    v25[1] = v3;
    v25[2] = v29 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel___observationRegistrar;
    v9 = (_QWORD *)(v29 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates);
    swift_beginAccess(v29 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__suggestionStates, v30, 0, 0);
    v10 = 4;
    v11 = a1;
    while (1)
    {
      v3 = v10 - 4;
      v12 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, a1) : *(id *)(a1 + 8 * v10);
      v13 = v12;
      v14 = v10 - 3;
      if (__OFADD__(v3, 1))
        break;
      v15 = objc_msgSend(v12, "uuid");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

      KeyPath = swift_getKeyPath(&unk_100096388);
      v31 = v29;
      v17 = sub_10002CE70((unint64_t *)&qword_1000C77A8, type metadata accessor for ProofreadingModel);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v31, KeyPath, v17);
      swift_release(KeyPath, v18);
      v19 = *v9;
      if (*(_QWORD *)(*v9 + 16))
      {
        swift_bridgeObjectRetain(*v9);
        v20 = sub_10001CCB8((uint64_t)v7);
        if ((v21 & 1) != 0)
        {
          v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
          swift_bridgeObjectRelease(v19);
          (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
          if (v22 == 1)
          {
            swift_bridgeObjectRelease(v11);
            return v13;
          }
          goto LABEL_6;
        }
        swift_bridgeObjectRelease(v19);
      }
      (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
LABEL_6:

      ++v10;
      a1 = v11;
      if (v14 == v8)
      {
        swift_bridgeObjectRelease(v11);
        return 0;
      }
    }
    __break(1u);
LABEL_17:
    if (a1 < 0)
      v23 = a1;
    else
      v23 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v23);
  }
  swift_bridgeObjectRelease(a1);
  return 0;
}

void sub_100083B20()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__expandedSuggestion);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__expandedSuggestion) = v2;
  v4 = v2;

}

uint64_t sub_100083B5C()
{
  return sub_100083D20();
}

uint64_t sub_100083B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CC918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100083BD8()
{
  return sub_100083C38();
}

unint64_t sub_100083BEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CC958;
  if (!qword_1000CC958)
  {
    v1 = sub_10000ABD0(&qword_1000CC950);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, &qword_1000CC958);
  }
  return result;
}

uint64_t sub_100083C38()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[4];
  v2 = (_QWORD *)(v0[2] + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__modelInfoString);
  v3 = v2[1];
  *v2 = v0[3];
  v2[1] = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100083C88()
{
  uint64_t v0;
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32), v1);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100083CB4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1000CC964);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000070C8;
  return sub_1000803DC(a1, v4, v5, v6);
}

uint64_t sub_100083D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__task);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC21WritingToolsUIService17ProofreadingModel__task) = v1;
  swift_retain(v1);
  return swift_release(v3, v4);
}

uint64_t sub_100083D68()
{
  return sub_10002CF5C();
}

void sub_100083D7C()
{
  sub_10002CF3C();
}

uint64_t sub_100083D90()
{
  return sub_100083224();
}

uint64_t sub_100083DA4()
{
  return sub_1000831A0();
}

uint64_t sub_100083DB8()
{
  return sub_100083158();
}

void sub_100083DCC()
{
  sub_100083118();
}

void sub_100083DE0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  NSString v15;
  unsigned __int8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for MultichoiceRow(0);
  *(_QWORD *)(a2 + *(int *)(v4 + 24)) = 0x401C000000000000;
  v5 = type metadata accessor for QuestionnaireEntry(0);
  v6 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
  v7 = swift_retain(a1);
  Bindable<A>.init(wrappedValue:)(v7, v5, v6);
  KeyPath = swift_getKeyPath(&unk_1000965C8);
  v20 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, KeyPath, v6);
  swift_release(KeyPath, v9);
  v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer + 8);
  if (!v11)
  {
    swift_release(a1, v10);
    goto LABEL_6;
  }
  v12 = *(void **)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_entry);
  swift_bridgeObjectRetain(*(_QWORD *)(a1
                                     + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer
                                     + 8));
  v13 = objc_msgSend(v12, "answerOptions");
  if (v13)
  {
    v14 = v13;
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    v16 = objc_msgSend(v14, "containsObject:", v15);
    swift_release(a1, v17);

    if ((v16 & 1) == 0)
    {
      v18 = 1;
LABEL_7:
      v19 = a2 + *(int *)(v4 + 20);
      *(_BYTE *)v19 = v18;
      *(_QWORD *)(v19 + 8) = 0;
      return;
    }
LABEL_6:
    v18 = 0;
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t sub_100083F68()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0x80E26D6F74737543, 0xA9000000000000A6);
  qword_1000D1E00 = result;
  *(_QWORD *)algn_1000D1E08 = v1;
  byte_1000D1E10 = v2 & 1;
  qword_1000D1E18 = v3;
  return result;
}

uint64_t sub_100083FAC()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0x20749980E26E6F44, 0xAE00726577736E41);
  qword_1000D1E20 = result;
  *(_QWORD *)algn_1000D1E28 = v1;
  byte_1000D1E30 = v2 & 1;
  qword_1000D1E38 = v3;
  return result;
}

uint64_t sub_100083FF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v15;

  v2 = sub_100004EAC(&qword_1000CD078);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004EAC(&qword_1000CD080);
  __chkstk_darwin(v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100096BD0);
  v9 = sub_100004EAC(&qword_1000CD088);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v4, a1, v9);
  v10 = &v4[*(int *)(v2 + 36)];
  *(_QWORD *)v10 = KeyPath;
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  sub_10000AD78((uint64_t)v4, (uint64_t)v7, &qword_1000CD078);
  *(_WORD *)&v7[*(int *)(v5 + 36)] = 256;
  v11 = sub_10000AE2C((uint64_t)v4, &qword_1000CD078);
  v12 = static Font.Weight.medium.getter(v11);
  v13 = sub_100034050(&qword_1000CD090, &qword_1000CD080, (void (*)(void))sub_10008EA78);
  View.fontWeight(_:)(*(_QWORD *)&v12, 0, v5, v13);
  return sub_10000AE2C((uint64_t)v7, &qword_1000CD080);
}

uint64_t sub_10008417C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v6 = type metadata accessor for CommonUIBlendModifier(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v9);
  v11 = (double *)((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100004EAC(&qword_1000CBCD0);
  __chkstk_darwin(v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004EAC(&qword_1000CD060);
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (char *)v11 + *(int *)(v9 + 20);
  v19 = enum case for RoundedCornerStyle.continuous(_:);
  v20 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v18, v19, v20);
  *v11 = a3;
  v11[1] = a3;
  if (qword_1000C7458 != -1)
    swift_once(&qword_1000C7458, sub_100042230);
  v21 = qword_1000D1D10;
  sub_100015184((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_QWORD *)&v14[*(int *)(v12 + 52)] = v21;
  *(_WORD *)&v14[*(int *)(v12 + 56)] = 256;
  swift_retain(v21);
  v22 = sub_1000758CC((uint64_t)v11);
  v23 = static Alignment.center.getter(v22);
  v25 = v24;
  v26 = (uint64_t)&v17[*(int *)(v15 + 36)];
  sub_10000AD78((uint64_t)v14, v26, &qword_1000CBCD0);
  v27 = (uint64_t *)(v26 + *(int *)(sub_100004EAC(&qword_1000C8030) + 36));
  *v27 = v23;
  v27[1] = v25;
  v28 = sub_100004EAC(&qword_1000CD068);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v17, a1, v28);
  sub_10000AE2C((uint64_t)v14, &qword_1000CBCD0);
  *v8 = swift_getKeyPath(&unk_1000965F0);
  v29 = sub_100004EAC(&qword_1000CA000);
  swift_storeEnumTagMultiPayload(v8, v29, 0);
  v30 = sub_100004EAC(&qword_1000CD070);
  sub_100046A54((uint64_t)v8, a2 + *(int *)(v30 + 36), type metadata accessor for CommonUIBlendModifier);
  return sub_10000AC80((uint64_t)v17, a2, &qword_1000CD060);
}

uint64_t sub_100084428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;

  return sub_10008417C(a1, a2, *v2);
}

uint64_t sub_100084430@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  _OWORD *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  char v114;
  uint64_t v115;

  v2 = v1;
  v100 = a1;
  v89 = type metadata accessor for GlobalCoordinateSpace(0);
  __chkstk_darwin(v89);
  v87 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for DragGesture(0);
  v95 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v86 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100004EAC(&qword_1000CCEF8);
  v97 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v90 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100004EAC(&qword_1000CCF00);
  v99 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v94 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100004EAC(&qword_1000C8030);
  __chkstk_darwin(v85);
  v84 = (uint64_t)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v82 = sub_100004EAC(&qword_1000CBCD0);
  __chkstk_darwin(v82);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100004EAC(&qword_1000CCF08);
  __chkstk_darwin(v83);
  v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100004EAC(&qword_1000CCF10);
  v91 = *(_QWORD *)(v92 - 8);
  v15 = __chkstk_darwin(v92);
  v88 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = static VerticalAlignment.center.getter(v15);
  v80 = static HorizontalAlignment.center.getter(v79);
  sub_100084C04((__int128 *)v2, (uint64_t)&v106);
  v76 = v106;
  v17 = BYTE8(v106);
  v18 = v107;
  v81 = v107;
  v19 = v108;
  v77 = *((_QWORD *)&v107 + 1);
  v78 = *((_QWORD *)&v108 + 1);
  v20 = v109;
  v21 = *(_QWORD *)(v2 + 56);
  v22 = (char *)v10 + *(int *)(v8 + 20);
  v23 = enum case for RoundedCornerStyle.continuous(_:);
  v24 = type metadata accessor for RoundedCornerStyle(0);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v22, v23, v24);
  *v10 = v21;
  v10[1] = v21;
  v26 = static Color.gray.getter(v25);
  v106 = *(_OWORD *)(v2 + 80);
  v27 = sub_100004EAC(&qword_1000C9FA0);
  State.wrappedValue.getter(&v115, v27);
  v28 = v115 == 0;
  v29 = 0.01;
  LOBYTE(v115) = 1;
  if (!v28)
    v29 = 0.15;
  v105 = 1;
  v104 = 1;
  v103 = v17;
  v102 = v20;
  v101 = 1;
  v106 = (unint64_t)v79;
  LOBYTE(v107) = 1;
  *((_QWORD *)&v107 + 1) = 0;
  LOBYTE(v108) = 1;
  *((_QWORD *)&v108 + 1) = v80;
  *(_QWORD *)&v109 = 0;
  BYTE8(v109) = 1;
  *(_QWORD *)&v110 = v76;
  BYTE8(v110) = v17;
  *(_QWORD *)&v111 = v18;
  v30 = v77;
  *((_QWORD *)&v111 + 1) = v77;
  *(_QWORD *)&v112 = v19;
  *((_QWORD *)&v112 + 1) = v78;
  LOBYTE(v113) = v20;
  *((_QWORD *)&v113 + 1) = 0;
  v114 = 1;
  v31 = Color.opacity(_:)(v26, v29);
  swift_release(v26, v32);
  sub_100015184((uint64_t)v10, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v33 = v82;
  *(_QWORD *)&v12[*(int *)(v82 + 52)] = v31;
  *(_WORD *)&v12[*(int *)(v33 + 56)] = 256;
  v34 = sub_1000758CC((uint64_t)v10);
  v35 = static Alignment.center.getter(v34);
  v37 = v36;
  v38 = v84;
  sub_10000AD78((uint64_t)v12, v84, &qword_1000CBCD0);
  v39 = (uint64_t *)(v38 + *(int *)(v85 + 36));
  *v39 = v35;
  v39[1] = v37;
  v40 = v83;
  sub_10000AD78(v38, (uint64_t)&v14[*(int *)(v83 + 36)], &qword_1000C8030);
  v41 = v113;
  *((_OWORD *)v14 + 6) = v112;
  *((_OWORD *)v14 + 7) = v41;
  v14[128] = v114;
  v42 = v109;
  *((_OWORD *)v14 + 2) = v108;
  *((_OWORD *)v14 + 3) = v42;
  v43 = v111;
  *((_OWORD *)v14 + 4) = v110;
  *((_OWORD *)v14 + 5) = v43;
  v44 = v107;
  *(_OWORD *)v14 = v106;
  *((_OWORD *)v14 + 1) = v44;
  sub_10008E27C(&v106);
  sub_10000AE2C(v38, &qword_1000C8030);
  sub_10000AE2C((uint64_t)v12, &qword_1000CBCD0);
  swift_release(v30, v45);
  swift_release(v81, v46);
  v48 = swift_release(v19, v47);
  v49 = v87;
  static CoordinateSpaceProtocol<>.global.getter(v48);
  v50 = v86;
  DragGesture.init<A>(minimumDistance:coordinateSpace:)(v49, v89, &protocol witness table for GlobalCoordinateSpace, 0.0);
  v51 = (_OWORD *)swift_allocObject(&unk_1000C21E8, 112, 7);
  v52 = *(_OWORD *)(v2 + 48);
  v51[3] = *(_OWORD *)(v2 + 32);
  v51[4] = v52;
  v53 = *(_OWORD *)(v2 + 80);
  v51[5] = *(_OWORD *)(v2 + 64);
  v51[6] = v53;
  v54 = *(_OWORD *)(v2 + 16);
  v51[1] = *(_OWORD *)v2;
  v51[2] = v54;
  sub_10008F314((uint64_t *)v2);
  v55 = sub_100005900(&qword_1000CCF18, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture, (uint64_t)&protocol conformance descriptor for DragGesture);
  v56 = sub_100005900(&qword_1000CCF20, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture.Value, (uint64_t)&protocol conformance descriptor for DragGesture.Value);
  v57 = v90;
  v58 = v93;
  Gesture<>.onChanged(_:)(sub_10008F2C8, v51, v93, v55, v56);
  swift_release(v51, v59);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v50, v58);
  v60 = (_OWORD *)swift_allocObject(&unk_1000C2210, 112, 7);
  v61 = *(_OWORD *)(v2 + 48);
  v60[3] = *(_OWORD *)(v2 + 32);
  v60[4] = v61;
  v62 = *(_OWORD *)(v2 + 80);
  v60[5] = *(_OWORD *)(v2 + 64);
  v60[6] = v62;
  v63 = *(_OWORD *)(v2 + 16);
  v60[1] = *(_OWORD *)v2;
  v60[2] = v63;
  sub_10008F314((uint64_t *)v2);
  v64 = sub_10000B254(&qword_1000CCF28, &qword_1000CCEF8, (uint64_t)&protocol conformance descriptor for _ChangedGesture<A>);
  v65 = v94;
  v66 = v96;
  Gesture.onEnded(_:)(sub_10008F3FC, v60, v96, v64);
  swift_release(v60, v67);
  v68 = (*(uint64_t (**)(char *, uint64_t))(v97 + 8))(v57, v66);
  v69 = static GestureMask.all.getter(v68);
  v70 = sub_10008E3A8();
  v71 = sub_10000B254(&qword_1000CCF48, &qword_1000CCF00, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  v72 = v88;
  v73 = v69;
  v74 = v98;
  View.gesture<A>(_:including:)(v65, v73, v40, v98, v70, v71);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v65, v74);
  sub_10000AE2C((uint64_t)v14, &qword_1000CCF08);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v91 + 32))(v100, v72, v92);
}

uint64_t sub_100084C04@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v4 = sub_100004EAC(&qword_1000CB720);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[1];
  v18 = *a1;
  v19 = v7;
  v8 = sub_100004EAC(&qword_1000CD110);
  Binding.wrappedValue.getter(v8);
  v9 = Image.init(systemName:)(v20, v21);
  v10 = enum case for Image.TemplateRenderingMode.template(_:);
  v11 = type metadata accessor for Image.TemplateRenderingMode(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 104))(v6, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v11);
  v13 = Image.renderingMode(_:)(v6, v9);
  swift_release(v9, v14);
  sub_10000AE2C((uint64_t)v6, &qword_1000CB720);
  v18 = a1[2];
  *(_QWORD *)&v19 = *((_QWORD *)a1 + 6);
  v15 = sub_100004EAC(&qword_1000CD118);
  Binding.wrappedValue.getter(v15);
  v16 = v20;
  result = swift_getKeyPath(&unk_100096B40);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 1;
  return result;
}

uint64_t sub_100084D68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  __int128 v7;

  v7 = *(_OWORD *)(a2 + 80);
  v6 = 0;
  v3 = sub_100004EAC(&qword_1000C9FA0);
  v4 = State.wrappedValue.setter(&v6, v3);
  return (*(uint64_t (**)(uint64_t))(a2 + 64))(v4);
}

uint64_t sub_100084DBC@<X0>(uint64_t a1@<X8>)
{
  return sub_100084430(a1);
}

uint64_t sub_100084DFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  char v111;
  uint64_t v112;

  v2 = v1;
  v96 = a1;
  v85 = type metadata accessor for GlobalCoordinateSpace(0);
  __chkstk_darwin(v85);
  v83 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for DragGesture(0);
  v91 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v82 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100004EAC(&qword_1000CCEF8);
  v93 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v86 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100004EAC(&qword_1000CCF00);
  v95 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v90 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100004EAC(&qword_1000C8030);
  __chkstk_darwin(v81);
  v80 = (uint64_t)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v79 = sub_100004EAC(&qword_1000CBCD0);
  __chkstk_darwin(v79);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100004EAC(&qword_1000CCF08);
  __chkstk_darwin(v97);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100004EAC(&qword_1000CCF10);
  v87 = *(_QWORD *)(v88 - 8);
  v15 = __chkstk_darwin(v88);
  v84 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = static VerticalAlignment.center.getter(v15);
  v78 = static HorizontalAlignment.center.getter(v77);
  sub_1000855B0((uint64_t *)v2, (uint64_t)&v103);
  v74 = v103;
  v17 = BYTE8(v103);
  v75 = *((_QWORD *)&v104 + 1);
  v18 = v104;
  v76 = *((_QWORD *)&v105 + 1);
  v19 = v105;
  v20 = v106;
  v21 = *(_QWORD *)(v2 + 24);
  v22 = (char *)v10 + *(int *)(v8 + 20);
  v23 = enum case for RoundedCornerStyle.continuous(_:);
  v24 = type metadata accessor for RoundedCornerStyle(0);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v22, v23, v24);
  *v10 = v21;
  v10[1] = v21;
  v26 = static Color.gray.getter(v25);
  v103 = *(_OWORD *)(v2 + 48);
  v27 = sub_100004EAC(&qword_1000C9FA0);
  State.wrappedValue.getter(&v112, v27);
  v28 = v112 == 0;
  v29 = 0.01;
  LOBYTE(v112) = 1;
  if (!v28)
    v29 = 0.15;
  v102 = 1;
  v101 = 1;
  v100 = v17;
  v99 = v20;
  v98 = 1;
  v103 = (unint64_t)v77;
  LOBYTE(v104) = 1;
  *((_QWORD *)&v104 + 1) = 0;
  LOBYTE(v105) = 1;
  *((_QWORD *)&v105 + 1) = v78;
  *(_QWORD *)&v106 = 0;
  BYTE8(v106) = 1;
  *(_QWORD *)&v107 = v74;
  BYTE8(v107) = v17;
  v30 = v75;
  *(_QWORD *)&v108 = v18;
  *((_QWORD *)&v108 + 1) = v75;
  *(_QWORD *)&v109 = v19;
  *((_QWORD *)&v109 + 1) = v76;
  LOBYTE(v110) = v99;
  *((_QWORD *)&v110 + 1) = 0;
  v111 = 1;
  v31 = Color.opacity(_:)(v26, v29);
  swift_release(v26, v32);
  sub_100015184((uint64_t)v10, (uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v33 = v79;
  *(_QWORD *)&v12[*(int *)(v79 + 52)] = v31;
  *(_WORD *)&v12[*(int *)(v33 + 56)] = 256;
  v34 = sub_1000758CC((uint64_t)v10);
  v35 = static Alignment.center.getter(v34);
  v37 = v36;
  v38 = v80;
  sub_10000AD78((uint64_t)v12, v80, &qword_1000CBCD0);
  v39 = (uint64_t *)(v38 + *(int *)(v81 + 36));
  *v39 = v35;
  v39[1] = v37;
  sub_10000AD78(v38, (uint64_t)&v14[*(int *)(v97 + 36)], &qword_1000C8030);
  v40 = v110;
  *((_OWORD *)v14 + 6) = v109;
  *((_OWORD *)v14 + 7) = v40;
  v14[128] = v111;
  v41 = v106;
  *((_OWORD *)v14 + 2) = v105;
  *((_OWORD *)v14 + 3) = v41;
  v42 = v108;
  *((_OWORD *)v14 + 4) = v107;
  *((_OWORD *)v14 + 5) = v42;
  v43 = v104;
  *(_OWORD *)v14 = v103;
  *((_OWORD *)v14 + 1) = v43;
  sub_10008E27C(&v103);
  sub_10000AE2C(v38, &qword_1000C8030);
  sub_10000AE2C((uint64_t)v12, &qword_1000CBCD0);
  swift_release(v30, v44);
  swift_release(v18, v45);
  v47 = swift_release(v19, v46);
  v48 = v83;
  static CoordinateSpaceProtocol<>.global.getter(v47);
  v49 = v82;
  DragGesture.init<A>(minimumDistance:coordinateSpace:)(v48, v85, &protocol witness table for GlobalCoordinateSpace, 0.0);
  v50 = (_OWORD *)swift_allocObject(&unk_1000C20B8, 80, 7);
  v51 = *(_OWORD *)(v2 + 16);
  v50[1] = *(_OWORD *)v2;
  v50[2] = v51;
  v52 = *(_OWORD *)(v2 + 48);
  v50[3] = *(_OWORD *)(v2 + 32);
  v50[4] = v52;
  sub_10008E310((_QWORD *)v2);
  v53 = sub_100005900(&qword_1000CCF18, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture, (uint64_t)&protocol conformance descriptor for DragGesture);
  v54 = sub_100005900(&qword_1000CCF20, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture.Value, (uint64_t)&protocol conformance descriptor for DragGesture.Value);
  v55 = v86;
  v56 = v89;
  Gesture<>.onChanged(_:)(sub_10008E2C4, v50, v89, v53, v54);
  swift_release(v50, v57);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v49, v56);
  v58 = (_OWORD *)swift_allocObject(&unk_1000C20E0, 80, 7);
  v59 = *(_OWORD *)(v2 + 16);
  v58[1] = *(_OWORD *)v2;
  v58[2] = v59;
  v60 = *(_OWORD *)(v2 + 48);
  v58[3] = *(_OWORD *)(v2 + 32);
  v58[4] = v60;
  sub_10008E310((_QWORD *)v2);
  v61 = sub_10000B254(&qword_1000CCF28, &qword_1000CCEF8, (uint64_t)&protocol conformance descriptor for _ChangedGesture<A>);
  v62 = v90;
  v63 = v92;
  Gesture.onEnded(_:)(sub_10008E3A0, v58, v92, v61);
  swift_release(v58, v64);
  v65 = (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v55, v63);
  v66 = static GestureMask.all.getter(v65);
  v67 = sub_10008E3A8();
  v68 = sub_10000B254(&qword_1000CCF48, &qword_1000CCF00, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  v69 = v84;
  v70 = v66;
  v71 = v94;
  View.gesture<A>(_:including:)(v62, v70, v97, v94, v67, v68);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v62, v71);
  sub_10000AE2C((uint64_t)v14, &qword_1000CCF08);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v87 + 32))(v96, v69, v88);
}

uint64_t sub_1000855B0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v18;

  v4 = sub_100004EAC(&qword_1000CB720);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = a1[1];
  swift_bridgeObjectRetain(v8);
  v9 = Image.init(systemName:)(v7, v8);
  v10 = enum case for Image.TemplateRenderingMode.template(_:);
  v11 = type metadata accessor for Image.TemplateRenderingMode(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 104))(v6, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v11);
  v13 = Image.renderingMode(_:)(v6, v9);
  swift_release(v9, v14);
  sub_10000AE2C((uint64_t)v6, &qword_1000CB720);
  v15 = a1[2];
  KeyPath = swift_getKeyPath(&unk_100096B40);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 24) = KeyPath;
  *(_QWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 1;
  return swift_retain(v15);
}

uint64_t sub_1000856E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  __int128 v7;

  v7 = *(_OWORD *)(a2 + 48);
  v6 = 0;
  v3 = sub_100004EAC(&qword_1000C9FA0);
  v4 = State.wrappedValue.setter(&v6, v3);
  return (*(uint64_t (**)(uint64_t))(a2 + 32))(v4);
}

uint64_t sub_100085734@<X0>(uint64_t a1@<X8>)
{
  return sub_100084DFC(a1);
}

uint64_t sub_10008576C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;

  v0 = sub_100004EAC(&qword_1000CCEB0);
  FocusState.wrappedValue.getter(&v14, v0);
  if (v14 == 1)
  {
    LOBYTE(v14) = 0;
    FocusState.wrappedValue.setter(&v14, v0);
    FocusState.wrappedValue.getter(&v14, v0);
    sub_100085A30(v14);
    v1 = sub_100004EAC(&qword_1000CCE98);
    State.wrappedValue.getter(&v14, v1);
    v2 = v14;
    v3 = v15;
    if (v14 || v15 != 0xE000000000000000)
    {
      v4 = 0;
      v5 = 0;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, 0, 0xE000000000000000, 0) & 1) == 0)
      {
        swift_bridgeObjectRetain(v3);
        v4 = v2;
        v5 = v3;
      }
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    v10 = sub_100004EAC(&qword_1000CCCD0);
    Binding.wrappedValue.getter(v10);
    v11 = v15;
    if (v15)
    {
      if (v5)
      {
        if (v14 == v4 && v15 == v5)
        {
          swift_bridgeObjectRelease(v3);
          swift_bridgeObjectRelease(v5);
          v12 = v11;
          return swift_bridgeObjectRelease(v12);
        }
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v4, v5, 0);
        swift_bridgeObjectRelease(v11);
        if ((v13 & 1) != 0)
        {
          swift_bridgeObjectRelease(v3);
          v12 = v5;
          return swift_bridgeObjectRelease(v12);
        }
      }
      else
      {
        swift_bridgeObjectRelease(v15);
      }
    }
    else if (!v5)
    {
      goto LABEL_20;
    }
    v14 = v4;
    v15 = v5;
    Binding.wrappedValue.setter(&v14, v10);
LABEL_20:
    v12 = v3;
    return swift_bridgeObjectRelease(v12);
  }
  v14 = 0;
  v15 = 0xE000000000000000;
  v6 = sub_100004EAC(&qword_1000CCE98);
  State.wrappedValue.setter(&v14, v6);
  LOBYTE(v14) = 0;
  v7 = sub_100004EAC(&qword_1000CCED8);
  Binding.wrappedValue.setter(&v14, v7);
  v8 = sub_100004EAC(&qword_1000CCCD0);
  Binding.wrappedValue.getter(v8);
  result = v15;
  if (v15)
  {
    swift_bridgeObjectRelease(v15);
    v14 = 0;
    v15 = 0;
    return Binding.wrappedValue.setter(&v14, v8);
  }
  return result;
}

uint64_t sub_100085A30(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  if ((a1 & 1) != 0)
  {
    v3 = *v1;
    v2 = v1[1];
    v13 = *((_OWORD *)v1 + 4);
    v14 = v1[10];
    v11 = v3;
    v12 = v2;
    swift_bridgeObjectRetain(v2);
    v4 = sub_100004EAC(&qword_1000CCE98);
    State.wrappedValue.setter(&v11, v4);
    v5 = v1[4];
  }
  else
  {
    v7 = v1[2];
    v6 = v1[3];
    v13 = *((_OWORD *)v1 + 4);
    v14 = v1[10];
    v11 = v7;
    v12 = v6;
    swift_bridgeObjectRetain(v6);
    v8 = sub_100004EAC(&qword_1000CCE98);
    State.wrappedValue.setter(&v11, v8);
    v5 = v1[5];
  }
  v13 = *(_OWORD *)(v1 + 11);
  v11 = v5;
  swift_retain(v5);
  v9 = sub_100004EAC(&qword_1000CCEC8);
  return State.wrappedValue.setter(&v11, v9);
}

uint64_t sub_100085B00@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _OWORD *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  char *v93;
  void (*v94)(char *, char *, uint64_t);
  char *v95;
  uint64_t v96;
  unsigned __int8 v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  _DWORD v142[2];
  _DWORD v143[2];
  _DWORD v144[2];
  _BYTE v145[7];
  unsigned __int8 v146;
  _BYTE v147[7];
  unsigned __int8 v148;
  _BYTE v149[7];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t (*v166)();
  _OWORD *v167;
  char v168;
  _BYTE v169[7];
  uint64_t v170;
  uint64_t v171;
  char v172;
  _BYTE v173[7];
  char *v174;
  char v175;
  _BYTE v176[7];
  uint64_t v177;
  char *v178;
  _OWORD v179[3];
  uint64_t v180;
  unsigned __int8 v181;
  char *v182;
  unsigned __int8 v183;
  uint64_t v184;
  char *v185;
  __int128 v186;
  char v187;

  v123 = a2;
  v124 = type metadata accessor for Divider(0);
  v140 = *(_QWORD *)(v124 - 8);
  v3 = __chkstk_darwin(v124);
  v141 = (char *)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v139 = (char *)&v118 - v5;
  v126 = type metadata accessor for RoundedBorderTextFieldStyle(0);
  v120 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v7 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004EAC(&qword_1000CCE68);
  v118 = *(_QWORD *)(v8 - 8);
  v119 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100004EAC(&qword_1000CCE70);
  v122 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v12 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004EAC(&qword_1000CCE78);
  v128 = *(_QWORD *)(v13 - 8);
  v129 = v13;
  __chkstk_darwin(v13);
  v127 = (char *)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_100004EAC(&qword_1000CCE80);
  __chkstk_darwin(v121);
  v130 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_100004EAC(&qword_1000CCE88);
  __chkstk_darwin(v133);
  v134 = (uint64_t)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100004EAC(&qword_1000CCE90);
  v136 = *(_QWORD *)(v138 - 8);
  v17 = __chkstk_darwin(v138);
  v137 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v132 = (char *)&v118 - v20;
  __chkstk_darwin(v19);
  v135 = (char *)&v118 - v21;
  if (qword_1000C74A8 != -1)
    swift_once(&qword_1000C74A8, sub_100083F68);
  v22 = qword_1000D1E00;
  v23 = *(_QWORD *)algn_1000D1E08;
  v24 = byte_1000D1E10;
  v25 = qword_1000D1E18;
  v150 = *(_OWORD *)(a1 + 160);
  *(_QWORD *)&v151 = *(_QWORD *)(a1 + 176);
  swift_bridgeObjectRetain(*(_QWORD *)algn_1000D1E08);
  swift_bridgeObjectRetain(v25);
  v131 = sub_100004EAC(&qword_1000CCE98);
  State.projectedValue.getter(&v159);
  v26 = TextField<>.init(_:text:onEditingChanged:onCommit:)(v22, v23, v24, v25, v159, *((_QWORD *)&v159 + 1), v160, v161, nullsub_1, 0, nullsub_1, 0);
  v27 = v7;
  RoundedBorderTextFieldStyle.init()(v26);
  v28 = sub_10000B254(&qword_1000CCEA0, &qword_1000CCE68, (uint64_t)&protocol conformance descriptor for TextField<A>);
  v29 = sub_100005900(&qword_1000CCEA8, (uint64_t (*)(uint64_t))&type metadata accessor for RoundedBorderTextFieldStyle, (uint64_t)&protocol conformance descriptor for RoundedBorderTextFieldStyle);
  v30 = v7;
  v31 = v119;
  v32 = v126;
  View.textFieldStyle<A>(_:)(v30, v119, v126, v28, v29);
  (*(void (**)(char *, uint64_t))(v120 + 8))(v27, v32);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v10, v31);
  v186 = *(_OWORD *)(a1 + 184);
  v187 = *(_BYTE *)(a1 + 200);
  v150 = *(_OWORD *)(a1 + 184);
  LOBYTE(v151) = *(_BYTE *)(a1 + 200);
  v120 = sub_100004EAC(&qword_1000CCEB0);
  FocusState.projectedValue.getter(&v159);
  v33 = v159;
  v34 = v160;
  *(_QWORD *)&v159 = v31;
  *((_QWORD *)&v159 + 1) = v32;
  v160 = v28;
  v161 = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v159, &opaque type descriptor for <<opaque return type of View.textFieldStyle<A>(_:)>>, 1);
  v36 = v127;
  v37 = v125;
  View.focused(_:)(v33, *((_QWORD *)&v33 + 1), v34, v125, OpaqueTypeConformance2);
  swift_release(*((_QWORD *)&v33 + 1), v38);
  swift_release(v33, v39);
  v40 = (*(uint64_t (**)(char *, uint64_t))(v122 + 8))(v12, v37);
  v41 = *(_QWORD *)(a1 + 56);
  v42 = static Alignment.center.getter(v40);
  _FrameLayout.init(width:height:alignment:)(v179, 0x7FF0000000000000, 0, v41, 0, v42, v43);
  v45 = v128;
  v44 = v129;
  v46 = (uint64_t)v130;
  (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v130, v36, v129);
  v47 = (_OWORD *)(v46 + *(int *)(v121 + 36));
  v48 = v179[1];
  *v47 = v179[0];
  v47[1] = v48;
  v47[2] = v179[2];
  v49 = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v36, v44);
  v50 = static Edge.Set.leading.getter(v49);
  v51 = v50;
  v52 = static Edge.Set.trailing.getter(v50);
  v53 = Edge.Set.init(rawValue:)(0);
  v54 = Edge.Set.init(rawValue:)(v53);
  if (Edge.Set.init(rawValue:)(v54 & v51) != v51)
    v53 = Edge.Set.init(rawValue:)(v53 | v51);
  v55 = Edge.Set.init(rawValue:)(v53);
  if (Edge.Set.init(rawValue:)(v55 & v52) != v52)
    LOBYTE(v53) = Edge.Set.init(rawValue:)(v53 | v52);
  v56 = EdgeInsets.init(_all:)(*(double *)(a1 + 48));
  v58 = v57;
  v60 = v59;
  v62 = v61;
  v63 = v134;
  sub_10000AD78(v46, v134, &qword_1000CCE80);
  v64 = v133;
  v65 = v63 + *(int *)(v133 + 36);
  *(_BYTE *)v65 = v53;
  *(double *)(v65 + 8) = v56;
  *(_QWORD *)(v65 + 16) = v58;
  *(_QWORD *)(v65 + 24) = v60;
  *(_QWORD *)(v65 + 32) = v62;
  *(_BYTE *)(v65 + 40) = 0;
  sub_10000AE2C(v46, &qword_1000CCE80);
  v159 = v186;
  LOBYTE(v160) = v187;
  FocusState.wrappedValue.getter(&v150, v120);
  LOBYTE(v159) = v150;
  v66 = (_OWORD *)swift_allocObject(&unk_1000C2068, 217, 7);
  v67 = *(_OWORD *)(a1 + 176);
  v66[11] = *(_OWORD *)(a1 + 160);
  v66[12] = v67;
  *(_OWORD *)((char *)v66 + 201) = *(_OWORD *)(a1 + 185);
  v68 = *(_OWORD *)(a1 + 112);
  v66[7] = *(_OWORD *)(a1 + 96);
  v66[8] = v68;
  v69 = *(_OWORD *)(a1 + 144);
  v66[9] = *(_OWORD *)(a1 + 128);
  v66[10] = v69;
  v70 = *(_OWORD *)(a1 + 48);
  v66[3] = *(_OWORD *)(a1 + 32);
  v66[4] = v70;
  v71 = *(_OWORD *)(a1 + 80);
  v66[5] = *(_OWORD *)(a1 + 64);
  v66[6] = v71;
  v72 = *(_OWORD *)(a1 + 16);
  v66[1] = *(_OWORD *)a1;
  v66[2] = v72;
  sub_10008C7C8((_QWORD *)a1);
  v73 = sub_100034050(&qword_1000CCEB8, &qword_1000CCE88, (void (*)(void))sub_10008DFEC);
  v74 = v132;
  View.onChange<A>(of:initial:_:)(&v159, 0, sub_10008DFE4, v66, v64, &type metadata for Bool, v73, &protocol witness table for Bool);
  swift_release(v66, v75);
  sub_10000AE2C(v63, &qword_1000CCE88);
  v76 = v135;
  v77 = v136;
  v78 = v138;
  v79 = (*(uint64_t (**)(char *, char *, uint64_t))(v136 + 32))(v135, v74, v138);
  v80 = v139;
  Divider.init()(v79);
  v150 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)&v151 = *(_QWORD *)(a1 + 80);
  State.projectedValue.getter(&v159);
  v128 = v160;
  v129 = v159;
  v121 = v161;
  v122 = *((_QWORD *)&v159 + 1);
  v150 = *(_OWORD *)(a1 + 88);
  sub_100004EAC(&qword_1000CCEC8);
  State.projectedValue.getter(&v159);
  v119 = *((_QWORD *)&v159 + 1);
  v120 = v159;
  v134 = v160;
  v81 = (_OWORD *)swift_allocObject(&unk_1000C2090, 217, 7);
  v82 = *(_OWORD *)(a1 + 176);
  v81[11] = *(_OWORD *)(a1 + 160);
  v81[12] = v82;
  *(_OWORD *)((char *)v81 + 201) = *(_OWORD *)(a1 + 185);
  v83 = *(_OWORD *)(a1 + 112);
  v81[7] = *(_OWORD *)(a1 + 96);
  v81[8] = v83;
  v84 = *(_OWORD *)(a1 + 144);
  v81[9] = *(_OWORD *)(a1 + 128);
  v81[10] = v84;
  v85 = *(_OWORD *)(a1 + 48);
  v81[3] = *(_OWORD *)(a1 + 32);
  v81[4] = v85;
  v86 = *(_OWORD *)(a1 + 80);
  v81[5] = *(_OWORD *)(a1 + 64);
  v81[6] = v86;
  v87 = *(_OWORD *)(a1 + 16);
  v81[1] = *(_OWORD *)a1;
  v81[2] = v87;
  LOBYTE(v150) = 0;
  sub_10008C7C8((_QWORD *)a1);
  v88 = State.init(wrappedValue:)(&v159, &v150, &type metadata for Bool);
  LODWORD(v132) = v159;
  v133 = *((_QWORD *)&v159 + 1);
  v89 = static Alignment.center.getter(v88);
  _FrameLayout.init(width:height:alignment:)(&v180, v41, 0, v41, 0, v89, v90);
  v126 = v180;
  v127 = v182;
  v130 = v185;
  v131 = v184;
  v148 = v181;
  v146 = v183;
  v91 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
  v92 = v137;
  v91(v137, v76, v78);
  v93 = v141;
  v94 = *(void (**)(char *, char *, uint64_t))(v140 + 16);
  v95 = v80;
  v96 = v124;
  v94(v141, v95, v124);
  v144[0] = *(_DWORD *)v149;
  *(_DWORD *)((char *)v144 + 3) = *(_DWORD *)&v149[3];
  LODWORD(v125) = v148;
  v143[0] = *(_DWORD *)v147;
  *(_DWORD *)((char *)v143 + 3) = *(_DWORD *)&v147[3];
  v97 = v146;
  LODWORD(v118) = v146;
  v142[0] = *(_DWORD *)v145;
  *(_DWORD *)((char *)v142 + 3) = *(_DWORD *)&v145[3];
  v98 = v123;
  v91(v123, v92, v78);
  v99 = sub_100004EAC(&qword_1000CCED0);
  v100 = v96;
  v94(&v98[*(int *)(v99 + 48)], v93, v96);
  v101 = &v98[*(int *)(v99 + 64)];
  v103 = v121;
  v102 = v122;
  *(_QWORD *)&v150 = v129;
  *((_QWORD *)&v150 + 1) = v122;
  *(_QWORD *)&v151 = v128;
  *((_QWORD *)&v151 + 1) = v121;
  v104 = v119;
  v105 = v120;
  *(_QWORD *)&v152 = v120;
  *((_QWORD *)&v152 + 1) = v119;
  *(_QWORD *)&v153 = v134;
  *((_QWORD *)&v153 + 1) = 0x4024000000000000;
  *(_QWORD *)&v154 = sub_10008E1A4;
  *((_QWORD *)&v154 + 1) = v81;
  LOBYTE(v155) = (_BYTE)v132;
  *(_DWORD *)((char *)&v155 + 1) = v144[0];
  DWORD1(v155) = *(_DWORD *)((char *)v144 + 3);
  *((_QWORD *)&v155 + 1) = v133;
  *(_QWORD *)&v156 = v126;
  BYTE8(v156) = v125;
  *(_DWORD *)((char *)&v156 + 9) = v143[0];
  HIDWORD(v156) = *(_DWORD *)((char *)v143 + 3);
  *(_QWORD *)&v157 = v127;
  BYTE8(v157) = v97;
  *(_DWORD *)((char *)&v157 + 9) = v142[0];
  HIDWORD(v157) = *(_DWORD *)((char *)v142 + 3);
  *(_QWORD *)&v158 = v131;
  *((_QWORD *)&v158 + 1) = v130;
  v106 = v153;
  *((_OWORD *)v101 + 2) = v152;
  *((_OWORD *)v101 + 3) = v106;
  v107 = v151;
  *(_OWORD *)v101 = v150;
  *((_OWORD *)v101 + 1) = v107;
  v108 = v154;
  v109 = v155;
  v110 = v158;
  *((_OWORD *)v101 + 7) = v157;
  *((_OWORD *)v101 + 8) = v110;
  v111 = v156;
  *((_OWORD *)v101 + 5) = v109;
  *((_OWORD *)v101 + 6) = v111;
  *((_OWORD *)v101 + 4) = v108;
  sub_10008F314((uint64_t *)&v150);
  v112 = *(void (**)(char *, uint64_t))(v140 + 8);
  v113 = v100;
  v112(v139, v100);
  v114 = *(void (**)(char *, uint64_t))(v136 + 8);
  v115 = v138;
  v114(v135, v138);
  *(_QWORD *)&v159 = v129;
  *((_QWORD *)&v159 + 1) = v102;
  v160 = v128;
  v161 = v103;
  v162 = v105;
  v163 = v104;
  v164 = v134;
  v165 = 0x4024000000000000;
  v166 = sub_10008E1A4;
  v167 = v81;
  v168 = (char)v132;
  *(_DWORD *)v169 = v144[0];
  *(_DWORD *)&v169[3] = *(_DWORD *)((char *)v144 + 3);
  v170 = v133;
  v171 = v126;
  v172 = v125;
  *(_DWORD *)&v173[3] = *(_DWORD *)((char *)v143 + 3);
  *(_DWORD *)v173 = v143[0];
  v174 = v127;
  v175 = v118;
  *(_DWORD *)&v176[3] = *(_DWORD *)((char *)v142 + 3);
  *(_DWORD *)v176 = v142[0];
  v177 = v131;
  v178 = v130;
  sub_10008E1C4((uint64_t *)&v159, v116);
  v112(v141, v113);
  return ((uint64_t (*)(char *, uint64_t))v114)(v137, v115);
}

uint64_t sub_1000865BC()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100004EAC(&qword_1000CCEB0);
  FocusState.wrappedValue.getter(&v2, v0);
  return sub_100085A30(v2);
}

uint64_t sub_100086614@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v12[11];
  _OWORD v13[2];

  v4 = v2[11];
  v12[10] = v2[10];
  v13[0] = v4;
  *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)((char *)v2 + 185);
  v5 = v2[7];
  v12[6] = v2[6];
  v12[7] = v5;
  v6 = v2[9];
  v12[8] = v2[8];
  v12[9] = v6;
  v7 = v2[3];
  v12[2] = v2[2];
  v12[3] = v7;
  v8 = v2[5];
  v12[4] = v2[4];
  v12[5] = v8;
  v9 = v2[1];
  v12[0] = *v2;
  v12[1] = v9;
  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v10 = sub_100004EAC(&qword_1000CCE60);
  return sub_100085B00((uint64_t)v12, (char *)(a2 + *(int *)(v10 + 44)));
}

uint64_t sub_100086698(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_100004EAC(&qword_1000CB0F8);
  Bindable.wrappedValue.getter(&v26);
  v4 = v26;
  KeyPath = swift_getKeyPath(&unk_1000965C8);
  v26 = v4;
  v6 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v26, KeyPath, v6);
  swift_release(KeyPath, v7);
  v9 = *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer);
  v8 = *(_QWORD *)(v4 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer + 8);
  swift_bridgeObjectRetain(v8);
  swift_release(v4, v10);
  if (!v8)
    goto LABEL_7;
  if (v9 == a1 && v8 == a2)
  {
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v8, a1, a2, 0);
    swift_bridgeObjectRelease(v8);
    if ((v12 & 1) == 0)
    {
LABEL_7:
      Bindable.wrappedValue.getter(&v26);
      v13 = v26;
      v14 = swift_getKeyPath(&unk_1000965C8);
      __chkstk_darwin(v14);
      v23 = v13;
      v24 = a1;
      v25 = a2;
      v26 = v13;
      swift_bridgeObjectRetain(a2);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v26, v14, sub_1000213F8, v22, (char *)&type metadata for () + 8, v6);
      swift_release(v13, v15);
      swift_release(v14, v16);
      return swift_bridgeObjectRelease(a2);
    }
  }
  Bindable.wrappedValue.getter(&v26);
  v18 = v26;
  v19 = swift_getKeyPath(&unk_1000965C8);
  __chkstk_darwin(v19);
  v24 = 0;
  v25 = 0;
  v23 = v18;
  v26 = v18;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v26, v19, sub_10008F404, v22, (char *)&type metadata for () + 8, v6);
  swift_release(v18, v20);
  return swift_release(v19, v21);
}

uint64_t sub_1000868E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[12];
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;

  v4 = sub_100004EAC(&qword_1000CCC40);
  __chkstk_darwin(v4);
  v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100004EAC(&qword_1000CCC48);
  v8 = __chkstk_darwin(v7);
  v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v8);
  v13 = &v23[-v12];
  v26 = static VerticalAlignment.center.getter(v11);
  sub_100089FE4((uint64_t)v27);
  v14 = v27[0];
  v15 = v27[1];
  v16 = v28;
  v17 = v29;
  v25 = v30;
  v24 = v31;
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v18);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v19 = sub_100004EAC(&qword_1000CCC50);
  sub_100086AFC(a1, (uint64_t)&v6[*(int *)(v19 + 44)]);
  sub_10000AD78((uint64_t)v6, (uint64_t)v10, &qword_1000CCC40);
  *(_QWORD *)&v10[*(int *)(v7 + 36)] = 0x4024000000000000;
  sub_10000AE2C((uint64_t)v6, &qword_1000CCC40);
  sub_10000AC80((uint64_t)v10, (uint64_t)v13, &qword_1000CCC48);
  sub_10000AD78((uint64_t)v13, (uint64_t)v10, &qword_1000CCC48);
  *(_QWORD *)a2 = v26;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = v15;
  *(_BYTE *)(a2 + 40) = v16;
  v20 = v25;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v20;
  *(_BYTE *)(a2 + 64) = v24;
  v21 = sub_100004EAC(&qword_1000CCC58);
  sub_10000AD78((uint64_t)v10, a2 + *(int *)(v21 + 48), &qword_1000CCC48);
  sub_10000ADBC(v14, v15, v16);
  swift_bridgeObjectRetain(v17);
  sub_10000AE2C((uint64_t)v13, &qword_1000CCC48);
  sub_10000AE2C((uint64_t)v10, &qword_1000CCC48);
  sub_10000ADF4(v14, v15, v16);
  return swift_bridgeObjectRelease(v17);
}

void sub_100086AFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t KeyPath;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t OpaqueTypeConformance2;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  double v85;
  char v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, char *, uint64_t);
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  char v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char v163;
  __int128 v164;

  v142 = a2;
  v143 = sub_100004EAC(&qword_1000CCC60);
  __chkstk_darwin(v143);
  v138 = (char *)&v121 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Divider(0);
  v129 = *(_QWORD *)(v4 - 8);
  v130 = v4;
  __chkstk_darwin(v4);
  v128 = (char *)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100004EAC(&qword_1000CCC68);
  v6 = __chkstk_darwin(v127);
  v131 = (uint64_t)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v126 = (char *)&v121 - v9;
  __chkstk_darwin(v8);
  v132 = (uint64_t)&v121 - v10;
  v11 = sub_100004EAC(&qword_1000CCC70);
  v12 = __chkstk_darwin(v11);
  v135 = (uint64_t)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v137 = (uint64_t)&v121 - v14;
  v15 = type metadata accessor for MultichoiceRow(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v139 = (uint64_t)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100004EAC(&qword_1000CCC78);
  v134 = *(_QWORD *)(v136 - 8);
  v18 = __chkstk_darwin(v136);
  v133 = (char *)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v140 = (char *)&v121 - v20;
  v141 = sub_100004EAC(&qword_1000CCC80);
  __chkstk_darwin(v141);
  v22 = (char *)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100004EAC(&qword_1000CB0F8);
  __chkstk_darwin(v23);
  v25 = (char *)&v121 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(int *)(v15 + 20);
  v144 = a1;
  v27 = (char *)(a1 + v26);
  v28 = *v27;
  v29 = *((_QWORD *)v27 + 1);
  LOBYTE(v147) = *v27;
  *((_QWORD *)&v147 + 1) = v29;
  v30 = sub_100004EAC(&qword_1000C9FA0);
  State.wrappedValue.getter(&v160, v30);
  if (v160 == 1)
  {
    LOBYTE(v160) = v28;
    v161 = v29;
    State.projectedValue.getter(&v147);
    v31 = v147;
    v32 = v148;
    Bindable.projectedValue.getter(v23);
    v33 = sub_10008C0A4(v31, *((uint64_t *)&v31 + 1), v32, (uint64_t)v25, &v147);
    v34 = static Alignment.center.getter(v33);
    _FrameLayout.init(width:height:alignment:)(&v160, 0x7FF0000000000000, 0, 0x4049000000000000, 0, v34, v35);
    v36 = v160;
    v37 = v162;
    v146 = v161;
    v145 = v163;
    v38 = v158;
    *((_OWORD *)v22 + 10) = v157;
    *((_OWORD *)v22 + 11) = v38;
    *((_OWORD *)v22 + 12) = v159;
    v39 = v154;
    *((_OWORD *)v22 + 6) = v153;
    *((_OWORD *)v22 + 7) = v39;
    v40 = v156;
    *((_OWORD *)v22 + 8) = v155;
    *((_OWORD *)v22 + 9) = v40;
    v41 = v150;
    *((_OWORD *)v22 + 2) = v149;
    *((_OWORD *)v22 + 3) = v41;
    v42 = v152;
    *((_OWORD *)v22 + 4) = v151;
    *((_OWORD *)v22 + 5) = v42;
    v43 = v148;
    *(_OWORD *)v22 = v147;
    *((_OWORD *)v22 + 1) = v43;
    *((_QWORD *)v22 + 26) = v36;
    v22[216] = v146;
    *((_QWORD *)v22 + 28) = v37;
    v22[232] = v145;
    *((_OWORD *)v22 + 15) = v164;
    swift_storeEnumTagMultiPayload(v22, v141, 0);
    v44 = sub_100004EAC(&qword_1000CCCA8);
    v45 = sub_100034050(&qword_1000CCCB0, &qword_1000CCCA8, (void (*)(void))sub_10008BFB8);
    v46 = sub_10000B254(&qword_1000CCCC0, &qword_1000CCC60, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v22, v44, v143, v45, v46);
    return;
  }
  v124 = v23;
  v125 = v22;
  v47 = v144;
  Bindable.wrappedValue.getter(&v147);
  v48 = v147;
  v49 = *(id *)(v147 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_entry);
  swift_release(v48, v50);
  v51 = objc_msgSend(v49, "answerOptions");

  if (v51)
  {
    v52 = objc_msgSend(v51, "array");

    v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, (char *)&type metadata for Any + 8);
    v54 = *(_QWORD *)(v53 + 16);
    v160 = 0;
    v161 = v54;
    KeyPath = swift_getKeyPath(&unk_100096840);
    v56 = v47;
    v57 = v139;
    sub_100015184(v56, v139, type metadata accessor for MultichoiceRow);
    v58 = *(unsigned __int8 *)(v16 + 80);
    v59 = (v58 + 16) & ~v58;
    v121 = v58 | 7;
    v122 = v59 + v17;
    v60 = swift_allocObject(&unk_1000C1D60, v59 + v17, v58 | 7);
    v123 = v59;
    sub_100046A54(v57, v60 + v59, type metadata accessor for MultichoiceRow);
    v61 = sub_100004EAC(&qword_1000CB0A0);
    v62 = sub_100004EAC(&qword_1000CCC88);
    v63 = sub_10005E4B4();
    v64 = sub_10000ABD0(&qword_1000C77B0);
    v65 = sub_10000B254(&qword_1000C7820, &qword_1000C77B0, (uint64_t)&protocol conformance descriptor for Button<A>);
    v66 = sub_10008BF74();
    *(_QWORD *)&v147 = v64;
    *((_QWORD *)&v147 + 1) = &type metadata for MultipleChoiceButtonStyle;
    *(_QWORD *)&v148 = v65;
    *((_QWORD *)&v148 + 1) = v66;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v147, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    ForEach<>.init(_:id:content:)(&v160, KeyPath, sub_10008BF28, v60, v61, v62, v63, &protocol witness table for Int, OpaqueTypeConformance2);
    *((_QWORD *)&v148 + 1) = &type metadata for WritingTools;
    *(_QWORD *)&v149 = sub_10003AF6C();
    LOBYTE(v147) = 6;
    LOBYTE(v60) = isFeatureEnabled(_:)(&v147);
    sub_10000AFA4(&v147);
    v68 = (uint64_t)v125;
    if ((v60 & 1) == 0)
    {
      swift_bridgeObjectRelease(v53);
      v70 = sub_100004EAC(&qword_1000CCC98);
      v71 = v137;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v137, 1, 1, v70);
      v73 = v134;
      v72 = v135;
LABEL_29:
      v110 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
      v111 = v133;
      v112 = v140;
      v113 = v136;
      v110(v133, v140, v136);
      sub_10000AD78(v71, v72, &qword_1000CCC70);
      v114 = (uint64_t)v138;
      v110(v138, v111, v113);
      v115 = sub_100004EAC(&qword_1000CCCA0);
      sub_10000AD78(v72, v114 + *(int *)(v115 + 48), &qword_1000CCC70);
      sub_10000AE2C(v72, &qword_1000CCC70);
      v116 = *(void (**)(char *, uint64_t))(v73 + 8);
      v116(v111, v113);
      sub_10000AD78(v114, v68, &qword_1000CCC60);
      swift_storeEnumTagMultiPayload(v68, v141, 1);
      v117 = v71;
      v118 = sub_100004EAC(&qword_1000CCCA8);
      v119 = sub_100034050(&qword_1000CCCB0, &qword_1000CCCA8, (void (*)(void))sub_10008BFB8);
      v120 = sub_10000B254(&qword_1000CCCC0, &qword_1000CCC60, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      _ConditionalContent<>.init(storage:)(v68, v118, v143, v119, v120);
      sub_10000AE2C(v114, &qword_1000CCC60);
      sub_10000AE2C(v117, &qword_1000CCC70);
      v116(v112, v113);
      return;
    }
    if (!v54)
    {
      v147 = 0u;
      v148 = 0u;
      v69 = v144;
LABEL_10:
      swift_bridgeObjectRelease(v53);
      if (*((_QWORD *)&v148 + 1))
      {
        if (swift_dynamicCast(&v160, &v147, (char *)&type metadata for Any + 8, &type metadata for String, 6))
        {
          v75 = v160;
          v74 = v161;
          goto LABEL_15;
        }
      }
      else
      {
        sub_10000AE2C((uint64_t)&v147, &qword_1000C7750);
      }
      v75 = 0;
      v74 = 0;
LABEL_15:
      Bindable.wrappedValue.getter(&v147);
      v76 = v147;
      v77 = swift_getKeyPath(&unk_1000965C8);
      *(_QWORD *)&v147 = v76;
      v78 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v147, v77, v78);
      swift_release(v77, v79);
      v81 = *(_QWORD *)(v76 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer);
      v80 = *(_QWORD *)(v76 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer + 8);
      swift_bridgeObjectRetain(v80);
      v83 = swift_release(v76, v82);
      if (v74)
      {
        if (v80)
        {
          if (v75 != v81 || v74 != v80)
          {
            v86 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v74, v81, v80, 0);
            swift_bridgeObjectRelease(v74);
            v83 = swift_bridgeObjectRelease(v80);
            if ((v86 & 1) != 0)
              v85 = 0.0;
            else
              v85 = 1.0;
            goto LABEL_28;
          }
          swift_bridgeObjectRelease(v74);
          v83 = swift_bridgeObjectRelease(v80);
          goto LABEL_22;
        }
        v84 = v74;
      }
      else
      {
        if (!v80)
        {
LABEL_22:
          v85 = 0.0;
LABEL_28:
          v87 = v128;
          Divider.init()(v83);
          v89 = v129;
          v88 = v130;
          v90 = (uint64_t)v126;
          (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v126, v87, v130);
          *(double *)(v90 + *(int *)(v127 + 36)) = v85;
          (*(void (**)(char *, uint64_t))(v89 + 8))(v87, v88);
          v91 = v132;
          sub_10000AC80(v90, v132, &qword_1000CCC68);
          v92 = v139;
          sub_100015184(v69, v139, type metadata accessor for MultichoiceRow);
          v93 = swift_allocObject(&unk_1000C1D88, v122, v121);
          v94 = sub_100046A54(v92, v93 + v123, type metadata accessor for MultichoiceRow);
          v144 = static Color.gray.getter(v94);
          LOBYTE(v160) = 0;
          v95 = State.init(wrappedValue:)(&v147, &v160, &type metadata for Bool);
          LODWORD(v139) = v147;
          v96 = *((_QWORD *)&v147 + 1);
          v97 = static Alignment.center.getter(v95);
          _FrameLayout.init(width:height:alignment:)(&v147, 0x4049000000000000, 0, 0x4049000000000000, 0, v97, v98);
          v99 = v147;
          v100 = BYTE8(v147);
          v101 = v148;
          LODWORD(v130) = BYTE8(v148);
          v102 = *((_QWORD *)&v149 + 1);
          v129 = v149;
          v103 = v131;
          sub_10000AD78(v91, v131, &qword_1000CCC68);
          v72 = v135;
          sub_10000AD78(v103, v135, &qword_1000CCC68);
          v104 = v72 + *(int *)(sub_100004EAC(&qword_1000CCCC8) + 48);
          *(_QWORD *)v104 = 0x73697370696C6C65;
          *(_QWORD *)(v104 + 8) = 0xEF656C637269632ELL;
          v105 = v144;
          *(_QWORD *)(v104 + 16) = v144;
          *(_QWORD *)(v104 + 24) = 0x4014000000000000;
          *(_QWORD *)(v104 + 32) = sub_10008C090;
          *(_QWORD *)(v104 + 40) = v93;
          *(_BYTE *)(v104 + 48) = v139;
          *(_QWORD *)(v104 + 56) = v96;
          *(_QWORD *)(v104 + 64) = v99;
          *(_BYTE *)(v104 + 72) = v100;
          *(_QWORD *)(v104 + 80) = v101;
          *(_BYTE *)(v104 + 88) = v130;
          *(_QWORD *)(v104 + 96) = v129;
          *(_QWORD *)(v104 + 104) = v102;
          swift_retain(v96);
          swift_bridgeObjectRetain(0xEF656C637269632ELL);
          swift_retain(v105);
          swift_retain(v93);
          sub_10000AE2C(v132, &qword_1000CCC68);
          swift_release(v96, v106);
          swift_release(v93, v107);
          swift_release(v105, v108);
          swift_bridgeObjectRelease(0xEF656C637269632ELL);
          sub_10000AE2C(v103, &qword_1000CCC68);
          v109 = sub_100004EAC(&qword_1000CCC98);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56))(v72, 0, 1, v109);
          v71 = v137;
          sub_10000AC80(v72, v137, &qword_1000CCC70);
          v73 = v134;
          v68 = (uint64_t)v125;
          goto LABEL_29;
        }
        v84 = v80;
      }
      v83 = swift_bridgeObjectRelease(v84);
      v85 = 1.0;
      goto LABEL_28;
    }
    v69 = v144;
    if (v54 <= *(_QWORD *)(v53 + 16))
    {
      sub_1000071D0(v53 + 32 * v54, (uint64_t)&v147);
      goto LABEL_10;
    }
    __break(1u);
  }
  __break(1u);
}

void sub_1000876F4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  char v51;

  v47 = a3;
  v5 = type metadata accessor for MultichoiceRow(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004EAC(&qword_1000C77B0);
  v45 = *(_QWORD *)(v9 - 8);
  v46 = v9;
  __chkstk_darwin(v9);
  v48 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004EAC(&qword_1000CCC88);
  v43 = *(_QWORD *)(v11 - 8);
  v44 = v11;
  __chkstk_darwin(v11);
  v42 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  sub_100004EAC(&qword_1000CB0F8);
  Bindable.wrappedValue.getter(&v50);
  v14 = v50;
  v15 = *(id *)(v50 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_entry);
  swift_release(v14, v16);
  v17 = objc_msgSend(v15, "answerOptions");

  if (v17)
  {
    v18 = objc_msgSend(v17, "objectAtIndexedSubscript:", v13);

    _bridgeAnyObjectToAny(_:)(&v50, v18);
    swift_unknownObjectRelease(v18);
    swift_dynamicCast(&v49, &v50, (char *)&type metadata for Any + 8, &type metadata for String, 7);
    v19 = v49;
    v50 = v49;
    sub_100015184(a2, (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MultichoiceRow);
    v20 = *(unsigned __int8 *)(v6 + 80);
    v21 = (v20 + 16) & ~v20;
    v22 = (v7 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = swift_allocObject(&unk_1000C1DB0, v22 + 16, v20 | 7);
    sub_100046A54((uint64_t)v8, v23 + v21, type metadata accessor for MultichoiceRow);
    *(_OWORD *)(v23 + v22) = v19;
    v24 = sub_100015204();
    swift_bridgeObjectRetain_n(*((_QWORD *)&v19 + 1), 2);
    v25 = v48;
    Button<>.init<A>(_:action:)(&v50, sub_10008CA6C, v23, &type metadata for String, v24);
    Bindable.wrappedValue.getter(&v50);
    v26 = v50;
    KeyPath = swift_getKeyPath(&unk_1000965C8);
    *(_QWORD *)&v50 = v26;
    v28 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v50, KeyPath, v28);
    swift_release(KeyPath, v29);
    v31 = *(_QWORD *)(v26 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer);
    v30 = *(_QWORD *)(v26 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer + 8);
    swift_bridgeObjectRetain(v30);
    swift_release(v26, v32);
    if (v30)
    {
      v34 = v43;
      v33 = v44;
      v35 = v42;
      if (__PAIR128__(v30, v31) != v19)
        _stringCompareWithSmolCheck(_:_:expecting:)(v31, v30, v19, *((_QWORD *)&v19 + 1), 0);
      v37 = v46;
      v36 = v47;
      v38 = v45;
      swift_bridgeObjectRelease(v30);
    }
    else
    {
      v37 = v46;
      v36 = v47;
      v33 = v44;
      v38 = v45;
      v35 = v42;
      v34 = v43;
    }
    swift_bridgeObjectRelease(*((_QWORD *)&v19 + 1));
    v50 = xmmword_100096500;
    v51 = v19 & 1;
    v39 = sub_10000B254(&qword_1000C7820, &qword_1000C77B0, (uint64_t)&protocol conformance descriptor for Button<A>);
    v40 = sub_10008BF74();
    View.buttonStyle<A>(_:)(&v50, v37, &type metadata for MultipleChoiceButtonStyle, v39, v40);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v25, v37);
    (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v36, v35, v33);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100087ACC(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for MultichoiceRow(0) + 20));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_100004EAC(&qword_1000C9FA0);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_100087B34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v4 = sub_100004EAC(&qword_1000CCC38);
  return sub_1000868E8(v2, a2 + *(int *)(v4 + 44));
}

uint64_t sub_100087B7C@<X0>(int a1@<W1>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v6;
  double *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  __int128 v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD v104[3];

  v94 = a1;
  v103 = a2;
  v101 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v101);
  v7 = (double *)((char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v102 = sub_100004EAC(&qword_1000CBCD0);
  __chkstk_darwin(v102);
  v9 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004EAC(&qword_1000C9FE0);
  __chkstk_darwin(v14);
  v16 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004EAC(&qword_1000C9FE8);
  __chkstk_darwin(v17);
  v19 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100004EAC(&qword_1000CCE38);
  __chkstk_darwin(v92);
  v21 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100004EAC(&qword_1000CCE40);
  v97 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v95 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100004EAC(&qword_1000CCE48);
  __chkstk_darwin(v93);
  v100 = (char *)&v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100004EAC(&qword_1000CCE50);
  v24 = __chkstk_darwin(v96);
  v98 = (uint64_t)&v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = ButtonStyleConfiguration.label.getter(v24);
  v27 = static Alignment.center.getter(v26);
  v29 = sub_10002D70C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, INFINITY, 0, v27, v28);
  v30 = (*(uint64_t (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v10, v29);
  v31 = static Edge.Set.leading.getter(v30);
  v32 = v31;
  v33 = static Edge.Set.trailing.getter(v31);
  v34 = Edge.Set.init(rawValue:)(0);
  v35 = Edge.Set.init(rawValue:)(v34);
  if (Edge.Set.init(rawValue:)(v35 & v32) != v32)
    v34 = Edge.Set.init(rawValue:)(v34 | v32);
  v36 = Edge.Set.init(rawValue:)(v34);
  if (Edge.Set.init(rawValue:)(v36 & v33) != v33)
    LOBYTE(v34) = Edge.Set.init(rawValue:)(v34 | v33);
  v37 = EdgeInsets.init(_all:)(a3);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  sub_10000AD78((uint64_t)v16, (uint64_t)v19, &qword_1000C9FE0);
  v44 = &v19[*(int *)(v17 + 36)];
  *v44 = v34;
  *((double *)v44 + 1) = v37;
  *((_QWORD *)v44 + 2) = v39;
  *((_QWORD *)v44 + 3) = v41;
  *((_QWORD *)v44 + 4) = v43;
  v44[40] = 0;
  v45 = sub_10000AE2C((uint64_t)v16, &qword_1000C9FE0);
  v46 = static Edge.Set.top.getter(v45);
  v47 = v46;
  v48 = static Edge.Set.bottom.getter(v46);
  v49 = Edge.Set.init(rawValue:)(0);
  v50 = Edge.Set.init(rawValue:)(v49);
  if (Edge.Set.init(rawValue:)(v50 & v47) != v47)
    v49 = Edge.Set.init(rawValue:)(v49 | v47);
  v51 = Edge.Set.init(rawValue:)(v49);
  if (Edge.Set.init(rawValue:)(v51 & v48) != v48)
    LOBYTE(v49) = Edge.Set.init(rawValue:)(v49 | v48);
  v52 = v92;
  v53 = EdgeInsets.init(_all:)(a3);
  v55 = v54;
  v57 = v56;
  v59 = v58;
  sub_10000AD78((uint64_t)v19, (uint64_t)v21, &qword_1000C9FE8);
  v60 = &v21[*(int *)(v52 + 36)];
  *v60 = v49;
  *((double *)v60 + 1) = v53;
  *((_QWORD *)v60 + 2) = v55;
  *((_QWORD *)v60 + 3) = v57;
  *((_QWORD *)v60 + 4) = v59;
  v60[40] = 0;
  v61 = sub_10000AE2C((uint64_t)v19, &qword_1000C9FE8);
  if ((v94 & 1) != 0)
  {
    v62 = 0.15;
    v63 = static Font.Weight.medium.getter(v61);
  }
  else
  {
    v62 = 0.01;
    v63 = static Font.Weight.regular.getter(v61);
  }
  v64 = v63;
  v65 = sub_100034050(&qword_1000CCE58, &qword_1000CCE38, (void (*)(void))sub_10008DFBC);
  v66 = v95;
  View.fontWeight(_:)(*(_QWORD *)&v64, 0, v52, v65);
  sub_10000AE2C((uint64_t)v21, &qword_1000CCE38);
  v67 = (char *)v7 + *(int *)(v101 + 20);
  v68 = enum case for RoundedCornerStyle.continuous(_:);
  v69 = type metadata accessor for RoundedCornerStyle(0);
  v70 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 104))(v67, v68, v69);
  *v7 = a4;
  v7[1] = a4;
  v71 = static Color.gray.getter(v70);
  v72 = Color.opacity(_:)(v71, v62);
  swift_release(v71, v73);
  sub_100015184((uint64_t)v7, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v74 = v102;
  *(_QWORD *)&v9[*(int *)(v102 + 52)] = v72;
  *(_WORD *)&v9[*(int *)(v74 + 56)] = 256;
  v75 = sub_1000758CC((uint64_t)v7);
  v76 = static Alignment.center.getter(v75);
  v78 = v77;
  v79 = (uint64_t)v100;
  v80 = (uint64_t)&v100[*(int *)(v93 + 36)];
  sub_10000AD78((uint64_t)v9, v80, &qword_1000CBCD0);
  v81 = (uint64_t *)(v80 + *(int *)(sub_100004EAC(&qword_1000C8030) + 36));
  *v81 = v76;
  v81[1] = v78;
  v82 = v97;
  v83 = v99;
  (*(void (**)(uint64_t, char *, uint64_t))(v97 + 16))(v79, v66, v99);
  sub_10000AE2C((uint64_t)v9, &qword_1000CBCD0);
  v84 = (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v66, v83);
  v85 = static Alignment.center.getter(v84);
  _FrameLayout.init(width:height:alignment:)(v104, 0x7FF0000000000000, 0, 0x4049000000000000, 0, v85, v86);
  v87 = v98;
  sub_10000AD78(v79, v98, &qword_1000CCE48);
  v88 = (_OWORD *)(v87 + *(int *)(v96 + 36));
  v89 = v104[1];
  *v88 = v104[0];
  v88[1] = v89;
  v88[2] = v104[2];
  sub_10000AE2C(v79, &qword_1000CCE48);
  return sub_10000AC80(v87, v103, &qword_1000CCE50);
}

uint64_t sub_10008821C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100087B7C(*(unsigned __int8 *)(v1 + 16), a1, *(double *)v1, *(double *)(v1 + 8));
}

void sub_100088228(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  NSString v15;
  unsigned __int8 v16;
  uint64_t v17;
  char v18;
  char *v19;
  uint64_t v20;

  *a2 = 0x6472616F6279656BLL;
  a2[1] = 0xE800000000000000;
  a2[2] = static Color.gray.getter(a1);
  a2[3] = 0x402E000000000000;
  v4 = type metadata accessor for PickerRowCore(0);
  v5 = type metadata accessor for QuestionnaireEntry(0);
  v6 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
  v7 = swift_retain(a1);
  Bindable<A>.init(wrappedValue:)(v7, v5, v6);
  KeyPath = swift_getKeyPath(&unk_1000965C8);
  v20 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, KeyPath, v6);
  swift_release(KeyPath, v9);
  v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer + 8);
  if (!v11)
  {
    swift_release(a1, v10);
    v18 = 0;
    goto LABEL_5;
  }
  v12 = *(void **)(a1 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_entry);
  swift_bridgeObjectRetain(*(_QWORD *)(a1
                                     + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer
                                     + 8));
  v13 = objc_msgSend(v12, "answerOptions");
  if (v13)
  {
    v14 = v13;
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    v16 = objc_msgSend(v14, "containsObject:", v15);
    swift_release(a1, v17);

    v18 = v16 ^ 1;
LABEL_5:
    v19 = (char *)a2 + *(int *)(v4 + 32);
    *v19 = v18;
    *((_QWORD *)v19 + 1) = 0;
    return;
  }
  __break(1u);
}

uint64_t sub_1000883CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v2 = sub_100004EAC(&qword_1000CCD08);
  __chkstk_darwin(v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004EAC(&qword_1000CCD10);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100004EAC(&qword_1000CCD18);
  v8 = __chkstk_darwin(v28);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v28 - v12;
  v33 = static VerticalAlignment.center.getter(v11);
  sub_100089FE4((uint64_t)&v34);
  v14 = *((_QWORD *)&v34 + 1);
  v15 = v35;
  v29 = v34;
  v30 = *((_QWORD *)&v35 + 1);
  v32 = v36;
  v31 = BYTE8(v36);
  *(_QWORD *)v4 = static VerticalAlignment.center.getter(v16);
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  v17 = &v4[*(int *)(sub_100004EAC(&qword_1000CCD20) + 44)];
  sub_100004EAC(&qword_1000CB0F8);
  Bindable.wrappedValue.getter(&v34);
  sub_100088228(v34, v17);
  sub_10000AD78((uint64_t)v4, (uint64_t)v7, &qword_1000CCD08);
  *(_QWORD *)&v7[*(int *)(v5 + 36)] = 0x4024000000000000;
  v18 = sub_10000AE2C((uint64_t)v4, &qword_1000CCD08);
  v19 = static Alignment.center.getter(v18);
  _FrameLayout.init(width:height:alignment:)(&v34, 0x7FF0000000000000, 0, 0x4049000000000000, 0, v19, v20);
  sub_10000AD78((uint64_t)v7, (uint64_t)v10, &qword_1000CCD10);
  v21 = &v10[*(int *)(v28 + 36)];
  v22 = v35;
  *(_OWORD *)v21 = v34;
  *((_OWORD *)v21 + 1) = v22;
  *((_OWORD *)v21 + 2) = v36;
  sub_10000AE2C((uint64_t)v7, &qword_1000CCD10);
  sub_10000AC80((uint64_t)v10, (uint64_t)v13, &qword_1000CCD18);
  sub_10000AD78((uint64_t)v13, (uint64_t)v10, &qword_1000CCD18);
  *(_QWORD *)a1 = v33;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  v24 = v29;
  v23 = v30;
  *(_QWORD *)(a1 + 24) = v29;
  *(_QWORD *)(a1 + 32) = v14;
  *(_BYTE *)(a1 + 40) = v15;
  v25 = v32;
  *(_QWORD *)(a1 + 48) = v23;
  *(_QWORD *)(a1 + 56) = v25;
  *(_BYTE *)(a1 + 64) = v31;
  v26 = sub_100004EAC(&qword_1000CCD28);
  sub_10000AD78((uint64_t)v10, a1 + *(int *)(v26 + 48), &qword_1000CCD18);
  sub_10000ADBC(v24, v14, v15);
  swift_bridgeObjectRetain(v23);
  sub_10000AE2C((uint64_t)v13, &qword_1000CCD18);
  sub_10000AE2C((uint64_t)v10, &qword_1000CCD18);
  sub_10000ADF4(v24, v14, v15);
  return swift_bridgeObjectRelease(v23);
}

uint64_t sub_1000886A8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = sub_100004EAC(&qword_1000CCCD8);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100004EAC(&qword_1000CCCE0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v4);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v7 = sub_100004EAC(&qword_1000CCCE8);
  sub_1000883CC((uint64_t)&v6[*(int *)(v7 + 44)]);
  sub_10000AD78((uint64_t)v6, (uint64_t)v2, &qword_1000CCCE0);
  swift_storeEnumTagMultiPayload(v2, v0, 1);
  v8 = sub_100004EAC(&qword_1000CCCF0);
  v9 = sub_10000B254(&qword_1000CCCF8, &qword_1000CCCF0, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v10 = sub_10000B254(&qword_1000CCD00, &qword_1000CCCE0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  _ConditionalContent<>.init(storage:)(v2, v8, v3, v9, v10);
  return sub_10000AE2C((uint64_t)v6, &qword_1000CCCE0);
}

uint64_t sub_10008881C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[25];

  v39 = a1;
  v40 = sub_100004EAC(&qword_1000CCF50);
  __chkstk_darwin(v40);
  v36 = (_QWORD **)((char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_100004EAC(&qword_1000CCF58);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v36 - v7;
  v38 = sub_100004EAC(&qword_1000CCF60);
  __chkstk_darwin(v38);
  v10 = (_OWORD *)((char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_100004EAC(&qword_1000CB0F8);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(int *)(type metadata accessor for PickerRowCore(0) + 32);
  v37 = v1;
  v15 = (char *)(v1 + v14);
  v16 = *v15;
  v17 = *((_QWORD *)v15 + 1);
  LOBYTE(v42) = *v15;
  *((_QWORD *)&v42 + 1) = v17;
  v18 = sub_100004EAC(&qword_1000C9FA0);
  v19 = State.wrappedValue.getter(v41, v18);
  if (LOBYTE(v41[0]) == 1)
  {
    LOBYTE(v41[0]) = v16;
    v41[1] = v17;
    State.projectedValue.getter(&v42);
    v20 = v42;
    v21 = v43;
    Bindable.projectedValue.getter(v11);
    sub_10008C0A4(v20, *((uint64_t *)&v20 + 1), v21, (uint64_t)v13, &v42);
    v22 = *(_OWORD *)v53;
    v10[10] = v52;
    v10[11] = v22;
    *(_OWORD *)((char *)v10 + 185) = *(_OWORD *)&v53[9];
    v23 = v49;
    v10[6] = v48;
    v10[7] = v23;
    v24 = v51;
    v10[8] = v50;
    v10[9] = v24;
    v25 = v45;
    v10[2] = v44;
    v10[3] = v25;
    v26 = v47;
    v10[4] = v46;
    v10[5] = v26;
    v27 = v43;
    *v10 = v42;
    v10[1] = v27;
    swift_storeEnumTagMultiPayload(v10, v38, 0);
    v28 = sub_10008BFB8();
    v29 = sub_10000B254(&qword_1000CCF78, &qword_1000CCF50, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    return _ConditionalContent<>.init(storage:)(v10, &type metadata for CustomEntryView, v40, v28, v29);
  }
  else
  {
    *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v19);
    *((_QWORD *)v8 + 1) = 0;
    v8[16] = 1;
    v31 = sub_100004EAC(&qword_1000CCF68);
    sub_100088C18(v37, &v8[*(int *)(v31 + 44)]);
    sub_10000AD78((uint64_t)v8, (uint64_t)v6, &qword_1000CCF58);
    v32 = (uint64_t)v36;
    *v36 = 0;
    *(_BYTE *)(v32 + 8) = 1;
    v33 = sub_100004EAC(&qword_1000CCF70);
    sub_10000AD78((uint64_t)v6, v32 + *(int *)(v33 + 48), &qword_1000CCF58);
    sub_10000AE2C((uint64_t)v6, &qword_1000CCF58);
    sub_10000AD78(v32, (uint64_t)v10, &qword_1000CCF50);
    swift_storeEnumTagMultiPayload(v10, v38, 1);
    v34 = sub_10008BFB8();
    v35 = sub_10000B254(&qword_1000CCF78, &qword_1000CCF50, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v10, &type metadata for CustomEntryView, v40, v34, v35);
    sub_10000AE2C(v32, &qword_1000CCF50);
    return sub_10000AE2C((uint64_t)v8, &qword_1000CCF58);
  }
}

uint64_t sub_100088C18@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char v77[16];
  uint64_t v78;
  _QWORD v79[2];
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;

  v76 = a2;
  v3 = type metadata accessor for PickerRowCore(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v74 = *(_QWORD *)(v3 - 8);
  v75 = v4;
  __chkstk_darwin(v3);
  v72 = (uint64_t)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004EAC(&qword_1000CB0F8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100004EAC(&qword_1000CCF80);
  v10 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100004EAC(&qword_1000CCF88);
  __chkstk_darwin(v68);
  v67 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100004EAC(&qword_1000CCF90);
  v73 = *(_QWORD *)(v70 - 8);
  v14 = __chkstk_darwin(v70);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v71 = (char *)&v61 - v17;
  v63 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
  v62 = v18;
  v20 = v19;
  v61 = v21;
  v65 = a1 + *(int *)(v3 + 28);
  Bindable.projectedValue.getter(v6);
  KeyPath = swift_getKeyPath(&unk_1000965C8);
  Bindable<A>.subscript.getter(&v81, KeyPath);
  swift_release(KeyPath, v23);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v79[0] = v81;
  v79[1] = v82;
  v80 = v83;
  v78 = a1;
  v64 = a1;
  v24 = sub_100004EAC(&qword_1000CB0F0);
  v66 = v24;
  v25 = sub_100004EAC(&qword_1000CCF98);
  v26 = sub_10008E598(&qword_1000CCFA0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  v27 = sub_10000B254(&qword_1000CCFA8, &qword_1000CCF98, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Picker<>.init(_:selection:content:)(v63, v62, v20 & 1, v61, v79, sub_10008E44C, v77, v24, v25, v26, v27);
  v28 = *(_QWORD *)(a1 + 16);
  v29 = swift_getKeyPath(&unk_100096B70);
  v81 = v28;
  swift_retain_n(v28, 2);
  v30 = AnyShapeStyle.init<A>(_:)(&v81, &type metadata for Color, &protocol witness table for Color);
  v31 = (uint64_t)v67;
  v32 = v69;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v67, v12, v69);
  swift_release(v28, v33);
  v34 = v68;
  v35 = (uint64_t *)(v31 + *(int *)(v68 + 36));
  *v35 = v29;
  v35[1] = v30;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v32);
  Bindable.wrappedValue.getter(&v81);
  v36 = v81;
  v37 = swift_getKeyPath(&unk_1000965C8);
  v81 = v36;
  v38 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v81, v37, v38);
  swift_release(v37, v39);
  v41 = *(_QWORD *)(v36 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer);
  v40 = *(_QWORD *)(v36 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer + 8);
  swift_bridgeObjectRetain(v40);
  swift_release(v36, v42);
  v81 = v41;
  v82 = v40;
  v43 = v72;
  sub_100015184(v64, v72, type metadata accessor for PickerRowCore);
  v44 = *(unsigned __int8 *)(v74 + 80);
  v45 = (v44 + 16) & ~v44;
  v46 = swift_allocObject(&unk_1000C2108, v45 + v75, v44 | 7);
  sub_100046A54(v43, v46 + v45, type metadata accessor for PickerRowCore);
  v47 = sub_10008E4FC();
  v48 = sub_10008E598(&qword_1000CCFD0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  View.onChange<A>(of:initial:_:)(&v81, 0, sub_10008E4A8, v46, v34, v66, v47, v48);
  swift_release(v46, v49);
  swift_bridgeObjectRelease(v82);
  sub_10000AE2C(v31, &qword_1000CCF88);
  v50 = v73;
  v51 = v70;
  v52 = v71;
  (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v71, v16, v70);
  v53 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v54 = v50;
  v53(v16, v52, v51);
  v55 = v76;
  *v76 = 0;
  *((_BYTE *)v55 + 8) = 1;
  v56 = (char *)v55;
  v57 = sub_100004EAC(&qword_1000CCFD8);
  v53(&v56[*(int *)(v57 + 48)], v16, v51);
  v58 = &v56[*(int *)(v57 + 64)];
  *(_QWORD *)v58 = 0;
  v58[8] = 1;
  v59 = *(void (**)(char *, uint64_t))(v54 + 8);
  v59(v52, v51);
  return ((uint64_t (*)(char *, uint64_t))v59)(v16, v51);
}

uint64_t sub_10008917C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  _BYTE v31[16];
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;

  v30 = a2;
  v3 = sub_100004EAC(&qword_1000CCFE0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v29 - v8;
  v10 = sub_100004EAC(&qword_1000CCFE8);
  v29 = *(_QWORD *)(v10 - 8);
  v11 = v29;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v29 - v15;
  v34 = a1;
  v17 = sub_100004EAC(&qword_1000CCFF0);
  v18 = sub_10008E600();
  Section<>.init(content:)(sub_10008E5F8, v33, v17, v18);
  v32 = a1;
  v19 = sub_100004EAC(&qword_1000CD040);
  v20 = sub_10000B254(&qword_1000CD048, &qword_1000CD040, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Section<>.init(content:)(sub_10008E76C, v31, v19, v20);
  v21 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v21(v14, v16, v10);
  v22 = v4;
  v23 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v23(v7, v9, v3);
  v24 = v30;
  v21(v30, v14, v10);
  v25 = sub_100004EAC(&qword_1000CD050);
  v23(&v24[*(int *)(v25 + 48)], v7, v3);
  v26 = *(void (**)(char *, uint64_t))(v22 + 8);
  v26(v9, v3);
  v27 = *(void (**)(char *, uint64_t))(v29 + 8);
  v27(v16, v10);
  v26(v7, v3);
  return ((uint64_t (*)(char *, uint64_t))v27)(v14, v10);
}

void sub_10008939C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];

  v2 = type metadata accessor for PickerRowCore(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  sub_100004EAC(&qword_1000CB0F8);
  Bindable.wrappedValue.getter(v20);
  v5 = v20[0];
  v6 = *(id *)(v20[0] + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_entry);
  swift_release(v5, v7);
  v8 = objc_msgSend(v6, "answerOptions");

  if (v8)
  {
    v9 = objc_msgSend(v8, "array");

    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, (char *)&type metadata for Any + 8);
    v11 = *(_QWORD *)(v10 + 16);
    swift_bridgeObjectRelease(v10);
    v20[0] = 0;
    v20[1] = v11;
    KeyPath = swift_getKeyPath(&unk_100096840);
    sub_100015184(a1, (uint64_t)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PickerRowCore);
    v13 = *(unsigned __int8 *)(v3 + 80);
    v14 = (v13 + 16) & ~v13;
    v15 = swift_allocObject(&unk_1000C2130, v14 + v4, v13 | 7);
    sub_100046A54((uint64_t)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for PickerRowCore);
    v16 = sub_100004EAC(&qword_1000CB0A0);
    v17 = sub_100004EAC(&qword_1000CD008);
    v18 = sub_10005E4B4();
    v19 = sub_10008E664();
    ForEach<>.init(_:id:content:)(v20, KeyPath, sub_10008EA24, v15, v16, v17, v18, &protocol witness table for Int, v19);
  }
  else
  {
    __break(1u);
  }
}

void sub_100089584(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];

  v3 = *a1;
  type metadata accessor for PickerRowCore(0);
  sub_100004EAC(&qword_1000CB0F8);
  Bindable.wrappedValue.getter(v17);
  v4 = v17[0];
  v5 = *(id *)(v17[0] + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_entry);
  swift_release(v4, v6);
  v7 = objc_msgSend(v5, "answerOptions");

  if (v7)
  {
    v8 = objc_msgSend(v7, "objectAtIndexedSubscript:", v3);

    _bridgeAnyObjectToAny(_:)(v17, v8);
    swift_unknownObjectRelease(v8);
    if ((swift_dynamicCast(&v15, v17, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v10 = v15;
      v9 = v16;
      v17[0] = v15;
      v17[1] = v16;
      v11 = sub_100015204();
      swift_bridgeObjectRetain(v9);
      *(_QWORD *)a2 = Text.init<A>(_:)(v17, &type metadata for String, v11);
      *(_QWORD *)(a2 + 8) = v12;
      *(_BYTE *)(a2 + 16) = v13 & 1;
      *(_QWORD *)(a2 + 24) = v14;
      *(_QWORD *)(a2 + 32) = v10;
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 48) = v10;
      *(_QWORD *)(a2 + 56) = v9;
      swift_bridgeObjectRetain(v9);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1000896D8@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v31[128];
  _QWORD v32[16];
  __int128 v33;
  _BYTE v34[32];
  __int128 v35;
  _BYTE v36[32];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD v43[17];
  _BYTE v44[128];

  if (qword_1000C74B0 != -1)
    swift_once(&qword_1000C74B0, sub_100083FAC);
  v4 = qword_1000D1E20;
  v5 = qword_1000D1E38;
  swift_bridgeObjectRetain(*(_QWORD *)algn_1000D1E28);
  swift_bridgeObjectRetain(v5);
  v6 = Text.init(_:tableName:bundle:comment:)(v4);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  *(_QWORD *)&v34[8] = &type metadata for WritingTools;
  *(_QWORD *)&v34[16] = sub_10003AF6C();
  LOBYTE(v33) = 6;
  v13 = isFeatureEnabled(_:)(&v33);
  v14 = sub_10000AFA4(&v33);
  if ((v13 & 1) != 0)
  {
    v15 = static VerticalAlignment.center.getter(v14);
    sub_100089988(a1, (uint64_t)&v33);
    v16 = v34[0];
    v17 = *(_QWORD *)&v34[8];
    v18 = *(_QWORD *)&v34[16];
    v19 = v34[24];
    v20 = *(_QWORD *)v36;
    v21 = v35;
    v22 = v33;
    LOBYTE(v43[0]) = 1;
    LOBYTE(v32[0]) = v34[0];
    v31[0] = v34[24];
    v33 = (unint64_t)v15;
    v34[0] = 1;
    *(_OWORD *)&v34[8] = v22;
    v34[24] = v16;
    *(_QWORD *)&v35 = v17;
    *((_QWORD *)&v35 + 1) = v18;
    v36[0] = v19;
    *(_OWORD *)&v36[8] = v21;
    *(_QWORD *)&v36[24] = v20;
    v37 = xmmword_100096510;
    v38 = xmmword_100096510;
    nullsub_1(COERCE_DOUBLE(0x6D6F74737543));
  }
  else
  {
    sub_10008E774(&v33);
  }
  sub_10000AC80((uint64_t)&v33, (uint64_t)v44, &qword_1000CD058);
  v23 = v10 & 1;
  sub_10000AC80((uint64_t)v44, (uint64_t)v31, &qword_1000CD058);
  sub_10000AC80((uint64_t)v31, (uint64_t)v32, &qword_1000CD058);
  *(_QWORD *)&v33 = v6;
  *((_QWORD *)&v33 + 1) = v8;
  v34[0] = v23;
  *(_QWORD *)&v34[8] = v12;
  *(_OWORD *)&v34[16] = 0u;
  v35 = 0u;
  sub_10000AC80((uint64_t)v32, (uint64_t)v36, &qword_1000CD058);
  v24 = v40;
  a2[8] = v39;
  a2[9] = v24;
  v25 = v42;
  a2[10] = v41;
  a2[11] = v25;
  v26 = *(_OWORD *)&v36[16];
  a2[4] = *(_OWORD *)v36;
  a2[5] = v26;
  v27 = v38;
  a2[6] = v37;
  a2[7] = v27;
  v28 = *(_OWORD *)v34;
  *a2 = v33;
  a2[1] = v28;
  v29 = v35;
  a2[2] = *(_OWORD *)&v34[16];
  a2[3] = v29;
  sub_10000AC80((uint64_t)v31, (uint64_t)v43, &qword_1000CD058);
  sub_10000ADBC(v6, v8, v23);
  swift_bridgeObjectRetain(v12);
  sub_10000B080(0, 0);
  sub_10008E78C(0, 0);
  sub_10008E82C(v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10008E79C);
  sub_10008E82C(v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10008E888);
  sub_10000ADF4(v6, v8, v23);
  swift_bridgeObjectRelease(v12);
  sub_10000A8A0(0, 0);
  return sub_10008E918(0, 0);
}

uint64_t sub_100089988@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;

  if (qword_1000C74A8 != -1)
    swift_once(&qword_1000C74A8, sub_100083F68);
  v4 = qword_1000D1E00;
  v5 = qword_1000D1E18;
  swift_bridgeObjectRetain(*(_QWORD *)algn_1000D1E08);
  swift_bridgeObjectRetain(v5);
  v6 = Text.init(_:tableName:bundle:comment:)(v4);
  v8 = v7;
  v10 = v9;
  LOBYTE(v5) = v11 & 1;
  v13 = *a1;
  v12 = a1[1];
  swift_bridgeObjectRetain(v12);
  v14 = Image.init(systemName:)(v13, v12);
  v15 = static Color.gray.getter(v14);
  KeyPath = swift_getKeyPath(&unk_100096BA0);
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 56) = KeyPath;
  *(_QWORD *)(a2 + 64) = v15;
  sub_10000ADBC(v6, v8, v5);
  swift_bridgeObjectRetain(v10);
  sub_10000ADF4(v6, v8, v5);
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_100089ACC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[2];

  v2 = type metadata accessor for PickerRowCore(0);
  sub_100004EAC(&qword_1000CB0F8);
  Bindable.wrappedValue.getter(v18);
  v3 = v18[0];
  KeyPath = swift_getKeyPath(&unk_1000965C8);
  v18[0] = v3;
  v5 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v18, KeyPath, v5);
  swift_release(KeyPath, v6);
  v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer);
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer + 8);
  swift_bridgeObjectRetain(v7);
  result = swift_release(v3, v9);
  if (v7)
  {
    if (v8 == 0x6D6F74737543 && v7 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease(v7);
    }
    else
    {
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, 0x6D6F74737543, 0xE600000000000000, 0);
      result = swift_bridgeObjectRelease(v7);
      if ((v12 & 1) == 0)
        return result;
    }
    v13 = (char *)(a1 + *(int *)(v2 + 32));
    v14 = *v13;
    v15 = *((_QWORD *)v13 + 1);
    LOBYTE(v18[0]) = v14;
    v18[1] = v15;
    v17 = 1;
    v16 = sub_100004EAC(&qword_1000C9FA0);
    return State.wrappedValue.setter(&v17, v16);
  }
  return result;
}

uint64_t sub_100089C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[11];
  _OWORD v49[2];
  _OWORD v50[13];
  char v51;
  char v52;
  char v53;
  _QWORD v54[36];
  _QWORD v55[37];
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;

  v4 = sub_100004EAC(&qword_1000CB0F8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = static VerticalAlignment.center.getter(v5);
  sub_100089FE4((uint64_t)v55);
  v37 = v55[1];
  v38 = v55[0];
  v39 = v55[3];
  v40 = v55[4];
  v35 = LOBYTE(v55[5]);
  v36 = LOBYTE(v55[2]);
  v34 = static VerticalAlignment.center.getter(v8);
  v9 = (char *)(a1 + *(int *)(type metadata accessor for CustomRow(0) + 20));
  v10 = *v9;
  v11 = *((_QWORD *)v9 + 1);
  LOBYTE(v59) = v10;
  v60 = v11;
  sub_100004EAC(&qword_1000C9FA0);
  State.projectedValue.getter(v55);
  v12 = v55[0];
  v13 = v55[1];
  v14 = v55[2];
  Bindable.projectedValue.getter(v4);
  v15 = sub_10008C0A4(v12, v13, v14, (uint64_t)v7, v48);
  *(_OWORD *)((char *)&v50[9] + 7) = v48[9];
  *(_OWORD *)((char *)&v50[10] + 7) = v48[10];
  *(_OWORD *)((char *)&v50[11] + 7) = v49[0];
  v50[12] = *(_OWORD *)((char *)v49 + 9);
  *(_OWORD *)((char *)&v50[5] + 7) = v48[5];
  *(_OWORD *)((char *)&v50[6] + 7) = v48[6];
  *(_OWORD *)((char *)&v50[7] + 7) = v48[7];
  *(_OWORD *)((char *)&v50[8] + 7) = v48[8];
  *(_OWORD *)((char *)&v50[1] + 7) = v48[1];
  *(_OWORD *)((char *)&v50[2] + 7) = v48[2];
  *(_OWORD *)((char *)&v50[3] + 7) = v48[3];
  *(_OWORD *)((char *)&v50[4] + 7) = v48[4];
  v51 = 1;
  *(_OWORD *)((char *)v50 + 7) = v48[0];
  v33 = 1;
  v16 = static Alignment.center.getter(v15);
  _FrameLayout.init(width:height:alignment:)(&v42, 0x7FF0000000000000, 0, 0x4049000000000000, 0, v16, v17);
  *(_OWORD *)((char *)&v54[20] + 1) = v50[9];
  *(_OWORD *)((char *)&v54[22] + 1) = v50[10];
  *(_OWORD *)((char *)&v54[24] + 1) = v50[11];
  *(_OWORD *)((char *)&v54[26] + 1) = v50[12];
  *(_OWORD *)((char *)&v54[12] + 1) = v50[5];
  *(_OWORD *)((char *)&v54[14] + 1) = v50[6];
  *(_OWORD *)((char *)&v54[16] + 1) = v50[7];
  *(_OWORD *)((char *)&v54[18] + 1) = v50[8];
  *(_OWORD *)((char *)&v54[4] + 1) = v50[1];
  *(_OWORD *)((char *)&v54[6] + 1) = v50[2];
  *(_OWORD *)((char *)&v54[8] + 1) = v50[3];
  *(_OWORD *)((char *)&v54[10] + 1) = v50[4];
  LOBYTE(v13) = v43;
  v31 = v44;
  v32 = v42;
  v18 = v45;
  v19 = v47;
  v30 = v46;
  v53 = v43;
  v52 = v45;
  v20 = v34;
  v54[0] = v34;
  v54[1] = 0;
  LOBYTE(v54[2]) = 1;
  *(_OWORD *)((char *)&v54[2] + 1) = v50[0];
  v54[29] = 0x4024000000000000;
  v54[30] = v42;
  LOBYTE(v54[31]) = v43;
  v54[32] = v44;
  LOBYTE(v54[33]) = v45;
  v54[34] = v46;
  v54[35] = v47;
  v58 = 1;
  v21 = v36;
  v57 = v36;
  v56 = v35;
  memcpy((char *)v55 + 7, v54, 0x120uLL);
  v22 = v36;
  v23 = v35;
  *(_QWORD *)a2 = v41;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v24 = v37;
  v25 = v38;
  *(_QWORD *)(a2 + 24) = v38;
  *(_QWORD *)(a2 + 32) = v24;
  *(_BYTE *)(a2 + 40) = v22;
  v27 = v39;
  v26 = v40;
  *(_QWORD *)(a2 + 48) = v39;
  *(_QWORD *)(a2 + 56) = v26;
  *(_BYTE *)(a2 + 64) = v23;
  memcpy((void *)(a2 + 65), v55, 0x127uLL);
  v71 = v50[9];
  v72 = v50[10];
  v73 = v50[11];
  v74 = v50[12];
  v67 = v50[5];
  v68 = v50[6];
  v69 = v50[7];
  v70 = v50[8];
  v63 = v50[1];
  v64 = v50[2];
  v65 = v50[3];
  v66 = v50[4];
  v59 = v20;
  v60 = 0;
  v61 = v33;
  v62 = v50[0];
  v75 = 0x4024000000000000;
  v76 = v32;
  v77 = v13;
  v78 = v31;
  v79 = v18;
  v80 = v30;
  v81 = v19;
  sub_10000ADBC(v25, v24, v21);
  swift_bridgeObjectRetain(v27);
  sub_10008CAE0(v54);
  sub_10008CBE0(&v59);
  sub_10000ADF4(v25, v24, v21);
  return swift_bridgeObjectRelease(v27);
}

void sub_100089FE4(uint64_t a1@<X8>)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  _QWORD v17[2];

  sub_100004EAC(&qword_1000CB0F8);
  Bindable.wrappedValue.getter(v17);
  v2 = v17[0];
  v3 = *(id *)(v17[0] + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_entry);
  swift_release(v2, v4);
  v5 = objc_msgSend(v3, "question");

  if (v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

    v17[0] = v6;
    v17[1] = v8;
    v9 = sub_100015204();
    v10 = Text.init<A>(_:)(v17, &type metadata for String, v9);
    v12 = v11;
    v14 = v13;
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v11;
    v16 = v15 & 1;
    *(_BYTE *)(a1 + 16) = v15 & 1;
    *(_QWORD *)(a1 + 24) = v13;
    *(_QWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 40) = 1;
    sub_10000ADBC(v10, v11, v15 & 1);
    swift_bridgeObjectRetain(v14);
    sub_10000ADF4(v10, v12, v16);
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    __break(1u);
  }
}

void *sub_10008A0F8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[392];
  _BYTE __src[360];
  _BYTE v12[376];
  _QWORD v13[2];
  char v14;
  _BYTE v15[367];
  _BYTE v16[385];

  v4 = static HorizontalAlignment.center.getter(a1);
  sub_100089C3C(v2, (uint64_t)__src);
  v12[368] = 1;
  memcpy(&v12[7], __src, 0x168uLL);
  v13[0] = v4;
  v13[1] = 0;
  v14 = 1;
  memcpy(v15, v12, sizeof(v15));
  sub_10008CAD4((uint64_t)v13);
  sub_10000AC80((uint64_t)v13, (uint64_t)v10, &qword_1000CCD30);
  v5 = sub_100004EAC(&qword_1000CCD38);
  v6 = sub_100004EAC(&qword_1000CCD40);
  v7 = sub_10000B254(&qword_1000CCD48, &qword_1000CCD38, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v8 = sub_10000B254(&qword_1000CCD50, &qword_1000CCD40, (uint64_t)&protocol conformance descriptor for VStack<A>);
  _ConditionalContent<>.init(storage:)(v10, v5, v6, v7, v8);
  return memcpy(a2, v16, 0x181uLL);
}

uint64_t sub_10008A224@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  void *v59;
  uint64_t KeyPath;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  char v73;
  _OWORD v74[17];
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  _OWORD v82[10];
  uint64_t v83;

  v2 = v1;
  v72 = a1;
  v3 = type metadata accessor for CommonUIBlendModifier(0);
  __chkstk_darwin(v3);
  v71 = (uint64_t *)((char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = sub_100004EAC(&qword_1000C8030);
  __chkstk_darwin(v69);
  v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v65);
  v8 = (uint64_t *)((char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v66 = sub_100004EAC(&qword_1000CBCD0);
  __chkstk_darwin(v66);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100004EAC(&qword_1000CCA08);
  __chkstk_darwin(v67);
  v70 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100004EAC(&qword_1000CCA10);
  v12 = __chkstk_darwin(v68);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static VerticalAlignment.center.getter(v12);
  v17 = *(_QWORD *)(v2 + 24);
  v16 = *(_QWORD *)(v2 + 32);
  swift_bridgeObjectRetain(v16);
  sub_10008B1A0(v2);
  v18 = swift_bridgeObjectRelease(v16);
  v75 = v15;
  v76 = 0;
  v77 = 1;
  v78 = v17;
  v79 = v16;
  v80 = 0;
  v81 = 1;
  v19 = *(double *)(v2 + 8);
  v20 = v19 + *(double *)v2 + v19;
  v21 = static Alignment.center.getter(v18);
  sub_10002E194(0.0, 1, 0.0, 1, INFINITY, 0, v20, 0, (uint64_t)v82, 0.0, 1, INFINITY, 0, v21, v22);
  v23 = swift_bridgeObjectRelease(v16);
  v24 = static Edge.Set.leading.getter(v23);
  v25 = v24;
  v26 = static Edge.Set.trailing.getter(v24);
  v27 = Edge.Set.init(rawValue:)(0);
  v28 = Edge.Set.init(rawValue:)(v27);
  if (Edge.Set.init(rawValue:)(v28 & v25) != v25)
    v27 = Edge.Set.init(rawValue:)(v27 | v25);
  v29 = Edge.Set.init(rawValue:)(v27);
  if (Edge.Set.init(rawValue:)(v29 & v26) != v26)
    LOBYTE(v27) = Edge.Set.init(rawValue:)(v27 | v26);
  v30 = EdgeInsets.init(_all:)(v19);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v38 = static Edge.Set.top.getter(v37);
  v39 = v38;
  v40 = static Edge.Set.bottom.getter(v38);
  v41 = Edge.Set.init(rawValue:)(0);
  v42 = Edge.Set.init(rawValue:)(v41);
  if (Edge.Set.init(rawValue:)(v42 & v39) != v39)
    v41 = Edge.Set.init(rawValue:)(v41 | v39);
  v43 = Edge.Set.init(rawValue:)(v41);
  if (Edge.Set.init(rawValue:)(v43 & v40) != v40)
    LOBYTE(v41) = Edge.Set.init(rawValue:)(v41 | v40);
  v74[8] = v82[8];
  v74[9] = v82[9];
  *(_QWORD *)&v74[10] = v83;
  v74[4] = v82[4];
  v74[5] = v82[5];
  v74[6] = v82[6];
  v74[7] = v82[7];
  v74[0] = v82[0];
  v74[1] = v82[1];
  v74[2] = v82[2];
  v74[3] = v82[3];
  v73 = 0;
  v44 = EdgeInsets.init(_all:)(v19);
  BYTE8(v74[10]) = v27;
  *(double *)&v74[11] = v30;
  *((_QWORD *)&v74[11] + 1) = v32;
  *(_QWORD *)&v74[12] = v34;
  *((_QWORD *)&v74[12] + 1) = v36;
  LOBYTE(v74[13]) = v73;
  BYTE8(v74[13]) = v41;
  *(double *)&v74[14] = v44;
  *((_QWORD *)&v74[14] + 1) = v45;
  *(_QWORD *)&v74[15] = v46;
  *((_QWORD *)&v74[15] + 1) = v47;
  LOBYTE(v74[16]) = 0;
  v48 = *(_QWORD *)(v2 + 16);
  v49 = (char *)v8 + *(int *)(v65 + 20);
  v50 = enum case for RoundedCornerStyle.continuous(_:);
  v51 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v49, v50, v51);
  *v8 = v48;
  v8[1] = v48;
  if (qword_1000C7458 != -1)
    swift_once(&qword_1000C7458, sub_100042230);
  v52 = qword_1000D1D10;
  sub_100015184((uint64_t)v8, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v53 = v66;
  *(_QWORD *)&v10[*(int *)(v66 + 52)] = v52;
  *(_WORD *)&v10[*(int *)(v53 + 56)] = 256;
  swift_retain(v52);
  v54 = sub_1000758CC((uint64_t)v8);
  v55 = static Alignment.center.getter(v54);
  v57 = v56;
  sub_10000AD78((uint64_t)v10, (uint64_t)v6, &qword_1000CBCD0);
  v58 = (uint64_t *)&v6[*(int *)(v69 + 36)];
  *v58 = v55;
  v58[1] = v57;
  v59 = v70;
  sub_10000AD78((uint64_t)v6, (uint64_t)&v70[*(int *)(v67 + 36)], &qword_1000C8030);
  memcpy(v59, v74, 0x101uLL);
  sub_10008B1A0((uint64_t)v74);
  sub_10000AE2C((uint64_t)v6, &qword_1000C8030);
  sub_10000AE2C((uint64_t)v10, &qword_1000CBCD0);
  sub_10008B1C8((uint64_t)v82);
  KeyPath = swift_getKeyPath(&unk_1000965F0);
  v61 = (uint64_t)v71;
  *v71 = KeyPath;
  v62 = sub_100004EAC(&qword_1000CA000);
  swift_storeEnumTagMultiPayload(v61, v62, 0);
  sub_100046A54(v61, (uint64_t)&v14[*(int *)(v68 + 36)], type metadata accessor for CommonUIBlendModifier);
  sub_10000AC80((uint64_t)v59, (uint64_t)v14, &qword_1000CCA08);
  return sub_10000AC80((uint64_t)v14, v72, &qword_1000CCA10);
}

uint64_t sub_10008A7C8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v27 = a2;
  v3 = sub_100004EAC(&qword_1000CA140);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004EAC(&qword_1000CBB00);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100004EAC(&qword_1000CCEE8);
  v10 = __chkstk_darwin(v26);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v26 - v13;
  v28 = *(_OWORD *)(a1 + 3);
  v29 = v28;
  v16 = *(double *)a1;
  v15 = a1[1];
  sub_10008E24C((uint64_t)&v29);
  v17 = sub_100015204();
  swift_bridgeObjectRetain(v15);
  Label<>.init<A>(_:systemImage:)(&v28, *(_QWORD *)&v16, v15, &type metadata for String, v17);
  v18 = *((double *)a1 + 2);
  v19 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v5, 1, 1, v19);
  v20 = static Font.system(size:weight:design:)(0, 1, v5, v18);
  sub_10000AE2C((uint64_t)v5, &qword_1000CA140);
  KeyPath = swift_getKeyPath(&unk_100096B10);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, v9, v6);
  v22 = (uint64_t *)&v12[*(int *)(v26 + 36)];
  *v22 = KeyPath;
  v22[1] = v20;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_10000AC80((uint64_t)v12, (uint64_t)v14, &qword_1000CCEE8);
  sub_10000AD78((uint64_t)v14, (uint64_t)v12, &qword_1000CCEE8);
  v23 = v27;
  sub_10000AD78((uint64_t)v12, v27, &qword_1000CCEE8);
  v24 = v23 + *(int *)(sub_100004EAC(&qword_1000CCEF0) + 48);
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 1;
  sub_10000AE2C((uint64_t)v14, &qword_1000CCEE8);
  return sub_10000AE2C((uint64_t)v12, &qword_1000CCEE8);
}

uint64_t sub_10008AA34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;

  v4 = *(_OWORD *)(v2 + 16);
  v7[0] = *(_OWORD *)v2;
  v7[1] = v4;
  v8 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v5 = sub_100004EAC(&qword_1000CCEE0);
  return sub_10008A7C8((uint64_t *)v7, a2 + *(int *)(v5 + 44));
}

id sub_10008AA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  Class isa;
  id v34;
  id v35;
  _QWORD v36[5];

  v5 = objc_msgSend((id)objc_opt_self(_UIDirectionalLightPalette), "pondering");
  v35 = objc_msgSend(objc_allocWithZone((Class)_UIDirectionalLightConfiguration), "initWithPalette:", v5);

  v6 = objc_msgSend((id)objc_opt_self(_UIIntelligenceLightSourceDescriptor), "directionalLightWithConfiguration:", v35);
  v7 = objc_msgSend(objc_allocWithZone((Class)_UIIntelligenceContentLightEffect), "initWithLightSource:", v6);
  v8 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v7);
  strcpy((char *)v36, "wand.and.stars");
  HIBYTE(v36[1]) = -18;
  v36[2] = 0x4034000000000000;
  v36[3] = a2;
  v36[4] = a3;
  v9 = objc_allocWithZone((Class)sub_100004EAC(&qword_1000CCD58));
  swift_bridgeObjectRetain(a3);
  v10 = (void *)_UIHostingView.init(rootView:)(v36);
  v11 = objc_msgSend(v8, "contentView");
  objc_msgSend(v11, "addSubview:", v10);

  objc_msgSend(v10, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v34 = (id)objc_opt_self(NSLayoutConstraint);
  v12 = sub_100004EAC((uint64_t *)&unk_1000C7570);
  v13 = swift_allocObject(v12, 64, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100091440;
  v14 = objc_msgSend(v8, "contentView");
  v15 = objc_msgSend(v14, "topAnchor");

  v16 = objc_msgSend(v10, "topAnchor");
  v17 = objc_msgSend(v15, "constraintEqualToAnchor:", v16);

  *(_QWORD *)(v13 + 32) = v17;
  v18 = objc_msgSend(v8, "contentView");
  v19 = objc_msgSend(v18, "leadingAnchor");

  v20 = objc_msgSend(v10, "leadingAnchor");
  v21 = objc_msgSend(v19, "constraintEqualToAnchor:", v20);

  *(_QWORD *)(v13 + 40) = v21;
  v22 = objc_msgSend(v8, "contentView");
  v23 = objc_msgSend(v22, "trailingAnchor");

  v24 = objc_msgSend(v10, "trailingAnchor");
  v25 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

  *(_QWORD *)(v13 + 48) = v25;
  v26 = objc_msgSend(v8, "contentView");
  v27 = objc_msgSend(v26, "bottomAnchor");

  v28 = objc_msgSend(v10, "bottomAnchor");
  v29 = objc_msgSend(v27, "constraintEqualToAnchor:", v28);

  *(_QWORD *)(v13 + 56) = v29;
  v36[0] = v13;
  specialized Array._endMutation()(v30);
  v31 = v36[0];
  sub_100005EA8();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  objc_msgSend(v34, "activateConstraints:", isa);

  return v8;
}

uint64_t sub_10008AE9C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for LoadingBar.IntelligentLoadingLabel.Coordinator()
{
  return objc_opt_self(_TtCVV21WritingToolsUIService10LoadingBar23IntelligentLoadingLabel11Coordinator);
}

uint64_t destroy for LoadingBar(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for LoadingBar(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for LoadingBar(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v3 = a2[4];
  v4 = a1[4];
  a1[4] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for LoadingBar(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoadingBar(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LoadingBar(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LoadingBar()
{
  return &type metadata for LoadingBar;
}

uint64_t sub_10008B040(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1950, 1);
}

id sub_10008B050(uint64_t a1)
{
  uint64_t *v1;

  return sub_10008AA94(a1, *v1, v1[1]);
}

uint64_t sub_10008B058@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for LoadingBar.IntelligentLoadingLabel.Coordinator();
  result = swift_allocObject(v2, 16, 7);
  *a1 = result;
  return result;
}

uint64_t sub_10008B088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10008CCDC();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10008B0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10008CCDC();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10008B128(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008CCDC();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_10008B14C@<X0>(uint64_t a1@<X8>)
{
  return sub_10008A224(a1);
}

uint64_t type metadata accessor for MultichoiceRow(uint64_t a1)
{
  return sub_1000469DC(a1, qword_1000CCB90, (uint64_t)&nominal type descriptor for MultichoiceRow);
}

uint64_t sub_10008B1A0(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_10008B1C8(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t *sub_10008B1F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100004EAC(&qword_1000CB0F8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *v9 = *v10;
    v11 = *((_QWORD *)v10 + 1);
    *((_QWORD *)v9 + 1) = v11;
  }
  swift_retain(v11);
  return a1;
}

uint64_t sub_10008B298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v10 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v8 + 8) = v10;
  swift_retain(v10);
  return a1;
}

uint64_t sub_10008B30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v8 + 8) = v11;
  swift_retain(v11);
  swift_release(v10, v12);
  return a1;
}

uint64_t sub_10008B38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10008B3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v10 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_release(v10, v11);
  return a1;
}

uint64_t sub_10008B464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008B470);
}

uint64_t sub_10008B474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008B480);
}

uint64_t type metadata accessor for CustomRow(uint64_t a1)
{
  return sub_1000469DC(a1, qword_1000CCA70, (uint64_t)&nominal type descriptor for CustomRow);
}

void sub_10008B498(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10008B508(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100096630;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_10008B508(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000CB168)
  {
    v2 = type metadata accessor for QuestionnaireEntry(255);
    v3 = type metadata accessor for Bindable(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000CB168);
  }
}

uint64_t sub_10008B55C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CB0F8);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10008B59C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004EAC(&qword_1000CB0F8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10008B5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10008B61C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10008B664(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10008B6AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10008B6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008B700);
}

uint64_t sub_10008B700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CB0F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10008B740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008B74C);
}

uint64_t sub_10008B74C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004EAC(&qword_1000CB0F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PickerRow(uint64_t a1)
{
  return sub_1000469DC(a1, qword_1000CCB00, (uint64_t)&nominal type descriptor for PickerRow);
}

void sub_10008B7A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_10008B508(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

uint64_t *sub_10008B80C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100004EAC(&qword_1000CB0F8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *v10 = *v11;
    v12 = *((_QWORD *)v11 + 1);
    *((_QWORD *)v10 + 1) = v12;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
  }
  swift_retain(v12);
  return a1;
}

uint64_t sub_10008B8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8), v5);
}

uint64_t sub_10008B8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_BYTE *)v9 = *(_BYTE *)v10;
  v11 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v9 + 8) = v11;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_retain(v11);
  return a1;
}

uint64_t sub_10008B978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v8 + 8) = v11;
  swift_retain(v11);
  swift_release(v10, v12);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10008BA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_10008BA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v10 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_release(v10, v11);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10008BAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008BAFC);
}

uint64_t sub_10008BB00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_100004EAC(&qword_1000CB0F8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10008BB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008BB9C);
}

uint64_t sub_10008BBA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100004EAC(&qword_1000CB0F8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

void sub_10008BC20(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10008B508(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100096630;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t getEnumTagSinglePayload for LoadingBar.IntelligentLoadingLabel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LoadingBar.IntelligentLoadingLabel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LoadingBar.IntelligentLoadingLabel()
{
  return &type metadata for LoadingBar.IntelligentLoadingLabel;
}

uint64_t sub_10008BD34()
{
  return sub_10008F128(&qword_1000CCBD0, &qword_1000CCA10, (void (*)(void))sub_10008BD60);
}

unint64_t sub_10008BD60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CCBD8;
  if (!qword_1000CCBD8)
  {
    v1 = sub_10000ABD0(&qword_1000CCA08);
    sub_100034050(&qword_1000CCBE0, &qword_1000CCBE8, (void (*)(void))sub_10008BE04);
    sub_10000B254(&qword_1000CCC20, &qword_1000C8030, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CCBD8);
  }
  return result;
}

uint64_t sub_10008BE04()
{
  return sub_100034050(&qword_1000CCBF0, &qword_1000CCBF8, (void (*)(void))sub_10008BE28);
}

unint64_t sub_10008BE28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CCC00;
  if (!qword_1000CCC00)
  {
    v1 = sub_10000ABD0(&qword_1000CCC08);
    sub_10000B254(&qword_1000CCC10, &qword_1000CCC18, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CCC00);
  }
  return result;
}

unint64_t sub_10008BEB0()
{
  unint64_t result;

  result = qword_1000CCC30;
  if (!qword_1000CCC30)
  {
    result = swift_getWitnessTable(&unk_100096664, &type metadata for LoadingBar.IntelligentLoadingLabel);
    atomic_store(result, (unint64_t *)&qword_1000CCC30);
  }
  return result;
}

uint64_t sub_10008BEF4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1A98, 1);
}

uint64_t sub_10008BF04(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1A70, 1);
}

uint64_t sub_10008BF14(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1A48, 1);
}

void sub_10008BF28(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MultichoiceRow(0) - 8) + 80);
  sub_1000876F4(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_10008BF74()
{
  unint64_t result;

  result = qword_1000CCC90;
  if (!qword_1000CCC90)
  {
    result = swift_getWitnessTable(&unk_100096AD8, &type metadata for MultipleChoiceButtonStyle);
    atomic_store(result, (unint64_t *)&qword_1000CCC90);
  }
  return result;
}

unint64_t sub_10008BFB8()
{
  unint64_t result;

  result = qword_1000CCCB8;
  if (!qword_1000CCCB8)
  {
    result = swift_getWitnessTable(&unk_100096A88, &type metadata for CustomEntryView);
    atomic_store(result, (unint64_t *)&qword_1000CCCB8);
  }
  return result;
}

uint64_t sub_10008C000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for MultichoiceRow(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 20) + 8), v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10008C090()
{
  return sub_10008E4BC(type metadata accessor for MultichoiceRow, sub_100087ACC);
}

_QWORD *sub_10008C0A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD *result;
  void *v41;
  NSString v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  char v64;
  unint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[25];
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  char v121;
  char v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  char v147;

  v82 = static Color.blue.getter(a1);
  v8 = swift_retain(v82);
  v81 = static Color.gray.getter(v8);
  v96 = 0x6B72616D78;
  v97 = 0xE500000000000000;
  swift_retain(v81);
  State.init(wrappedValue:)(&v123, &v96, &type metadata for String);
  v9 = v124;
  v75 = v124;
  v79 = v125;
  v80 = v123;
  swift_retain(v125);
  v10 = swift_bridgeObjectRetain(v9);
  v96 = static Color.gray.getter(v10);
  State.init(wrappedValue:)(&v123, &v96, &type metadata for Color);
  v11 = v123;
  v77 = v124;
  v78 = v123;
  v96 = 0;
  v97 = 0xE000000000000000;
  swift_retain(v124);
  swift_retain(v11);
  State.init(wrappedValue:)(&v123, &v96, &type metadata for String);
  v76 = v123;
  v12 = v124;
  v13 = v125;
  swift_retain(v125);
  v14 = swift_bridgeObjectRetain(v12);
  v15 = FocusState.init<>()(v14);
  v17 = v16;
  v18 = v15 & 1;
  v122 = v15 & 1;
  v20 = v19 & 1;
  v121 = v19 & 1;
  KeyPath = swift_getKeyPath(&unk_1000965C8);
  swift_retain(a1);
  swift_retain(a2);
  swift_retain(v17);
  v68 = sub_100004EAC(&qword_1000CB0F8);
  v69 = a4;
  Bindable<A>.subscript.getter(&v123, KeyPath);
  swift_release(KeyPath, v22);
  v23 = v123;
  v24 = v124;
  v25 = v125;
  v26 = v126;
  v123 = 0x72616D6B63656863;
  v124 = 0xE90000000000006BLL;
  v125 = 0x6B72616D78;
  v126 = 0xE500000000000000;
  v127 = v82;
  v128 = v81;
  v129 = xmmword_100096520;
  v130 = v80;
  v131 = v75;
  v132 = v79;
  v133 = v78;
  v134 = v77;
  v67 = a1;
  v135 = a1;
  v136 = a2;
  v137 = a3;
  v138 = v23;
  v139 = v24;
  v140 = v25;
  v141 = v26;
  v27 = v76;
  v142 = v76;
  v143 = v12;
  v144 = v13;
  v63 = v20;
  v64 = v18;
  v145 = v18;
  v146 = v17;
  v147 = v20;
  swift_bridgeObjectRetain(v26);
  swift_retain(v24);
  swift_retain(v23);
  sub_10008C7C8(&v123);
  v70 = v13;
  swift_release(v13, v28);
  v71 = v12;
  swift_bridgeObjectRelease(v12);
  v29 = v23;
  v96 = v23;
  v97 = v24;
  v65 = v24;
  v72 = v25;
  v98 = v25;
  v99 = v26;
  v30 = sub_100004EAC(&qword_1000CCCD0);
  Binding.wrappedValue.getter(v30);
  sub_10008C8C8(&v123);
  v31 = *((_QWORD *)&v84 + 1);
  if (!*((_QWORD *)&v84 + 1))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v69);
    goto LABEL_11;
  }
  v32 = v84;
  if (v84 == __PAIR128__(0xE600000000000000, 0x6D6F74737543)
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v84, *((_QWORD *)&v84 + 1), 0x6D6F74737543, 0xE600000000000000, 0) & 1) != 0)
  {
LABEL_10:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v69, v68);
    swift_bridgeObjectRelease(v31);
    goto LABEL_11;
  }
  Bindable.wrappedValue.getter(&v96);
  v33 = v96;
  v34 = swift_getKeyPath(&unk_1000965C8);
  *(_QWORD *)&v84 = v33;
  v35 = sub_100005900(&qword_1000C87E0, type metadata accessor for QuestionnaireEntry, (uint64_t)&unk_1000961E0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v84, v34, v35);
  swift_release(v34, v36);
  v38 = *(_QWORD *)(v33 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer + 8);
  if (!v38)
  {
    swift_release(v33, v37);
    goto LABEL_10;
  }
  v39 = *(void **)(v33 + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry_entry);
  swift_bridgeObjectRetain(*(_QWORD *)(v33
                                     + OBJC_IVAR____TtC21WritingToolsUIService18QuestionnaireEntry__selectedAnswer
                                     + 8));
  result = objc_msgSend(v39, "answerOptions");
  if (result)
  {
    v41 = result;
    v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v38);
    v43 = objc_msgSend(v41, "containsObject:", v42);
    swift_release(v33, v44);

    if ((v43 & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v69, v68);
      swift_release(v70, v45);
      swift_bridgeObjectRelease(v71);
      v70 = 0;
      v71 = v31;
      v27 = v32;
LABEL_11:
      v74 = a3 & 1;
      *(_QWORD *)&v84 = 0x72616D6B63656863;
      *((_QWORD *)&v84 + 1) = 0xE90000000000006BLL;
      *(_QWORD *)&v85 = 0x6B72616D78;
      *((_QWORD *)&v85 + 1) = 0xE500000000000000;
      *(_QWORD *)&v86 = v82;
      *((_QWORD *)&v86 + 1) = v81;
      v87 = xmmword_100096520;
      *(_QWORD *)&v88 = v80;
      *((_QWORD *)&v88 + 1) = v75;
      *(_QWORD *)&v89 = v79;
      *((_QWORD *)&v89 + 1) = v78;
      *(_QWORD *)&v90 = v77;
      *((_QWORD *)&v90 + 1) = v67;
      *(_QWORD *)&v91 = a2;
      BYTE8(v91) = v74;
      *(_QWORD *)&v92 = v29;
      *((_QWORD *)&v92 + 1) = v65;
      *(_QWORD *)&v93 = v72;
      *((_QWORD *)&v93 + 1) = v26;
      *(_QWORD *)&v94 = v27;
      *((_QWORD *)&v94 + 1) = v71;
      *(_QWORD *)v95 = v70;
      v95[8] = v64;
      *(_QWORD *)&v95[16] = v17;
      v95[24] = v63;
      swift_retain(v70);
      swift_bridgeObjectRetain(v71);
      sub_10008C7C8(&v84);
      swift_release(v82, v46);
      swift_release(v81, v47);
      swift_release(v79, v48);
      swift_bridgeObjectRelease(v75);
      swift_release(v77, v49);
      swift_release(v78, v50);
      swift_bridgeObjectRelease(v26);
      swift_release(v65, v51);
      swift_release(v29, v52);
      swift_bridgeObjectRelease(v71);
      swift_release(v70, v53);
      swift_release(v17, v54);
      swift_release(a2, v55);
      swift_release(v67, v56);
      v96 = 0x72616D6B63656863;
      v97 = 0xE90000000000006BLL;
      v98 = 0x6B72616D78;
      v99 = 0xE500000000000000;
      v100 = v82;
      v101 = v81;
      v102 = xmmword_100096520;
      v103 = v80;
      v104 = v75;
      v105 = v79;
      v106 = v78;
      v107 = v77;
      v108 = v67;
      v109 = a2;
      v110 = v74;
      v111 = v29;
      v112 = v65;
      v113 = v72;
      v114 = v26;
      v115 = v27;
      v116 = v71;
      v117 = v70;
      v118 = v122;
      v119 = v17;
      v120 = v121;
      result = sub_10008C8C8(&v96);
      v57 = *(_OWORD *)v95;
      a5[10] = v94;
      a5[11] = v57;
      *(_OWORD *)((char *)a5 + 185) = *(_OWORD *)&v95[9];
      v58 = v91;
      a5[6] = v90;
      a5[7] = v58;
      v59 = v93;
      a5[8] = v92;
      a5[9] = v59;
      v60 = v87;
      a5[2] = v86;
      a5[3] = v60;
      v61 = v89;
      a5[4] = v88;
      a5[5] = v61;
      v62 = v85;
      *a5 = v84;
      a5[1] = v62;
      return result;
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10008C7C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[9];
  v7 = a1[10];
  v9 = a1[11];
  v8 = a1[12];
  v10 = a1[13];
  v12 = a1[14];
  v13 = a1[16];
  v14 = a1[17];
  v15 = a1[19];
  v16 = a1[21];
  v17 = a1[22];
  swift_retain(a1[24]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  swift_retain(v9);
  swift_retain(v8);
  swift_retain(v10);
  swift_retain(v12);
  swift_retain(v13);
  swift_retain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_retain(v17);
  return a1;
}

_QWORD *sub_10008C8C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[11];
  v9 = a1[14];
  v23 = a1[12];
  v24 = a1[13];
  v10 = a1[17];
  v25 = a1[16];
  v26 = a1[19];
  v27 = a1[22];
  v28 = a1[24];
  swift_bridgeObjectRelease(a1[21]);
  swift_release(v10, v11);
  swift_release(v9, v12);
  swift_release(v8, v13);
  swift_bridgeObjectRelease(v6);
  swift_release(v5, v14);
  swift_release(v4, v15);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v7, v16);
  swift_release(v23, v17);
  swift_release(v24, v18);
  swift_release(v25, v19);
  swift_bridgeObjectRelease(v26);
  swift_release(v27, v20);
  swift_release(v28, v21);
  return a1;
}

uint64_t sub_10008C9C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for MultichoiceRow(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 20) + 8), v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10008CA6C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = type metadata accessor for MultichoiceRow(0);
  v2 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100086698(*(_QWORD *)(v0 + v2), *(_QWORD *)(v0 + v2 + 8));
}

uint64_t type metadata accessor for PickerRowCore(uint64_t a1)
{
  return sub_1000469DC(a1, qword_1000CCDC0, (uint64_t)&nominal type descriptor for PickerRowCore);
}

uint64_t sub_10008CAD4(uint64_t result)
{
  *(_BYTE *)(result + 384) = 1;
  return result;
}

_QWORD *sub_10008CAE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[12];
  v7 = a1[13];
  v9 = a1[14];
  v8 = a1[15];
  v10 = a1[16];
  v12 = a1[17];
  v13 = a1[19];
  v14 = a1[20];
  v15 = a1[22];
  v16 = a1[24];
  v17 = a1[25];
  swift_retain(a1[27]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  swift_retain(v9);
  swift_retain(v8);
  swift_retain(v10);
  swift_retain(v12);
  swift_retain(v13);
  swift_retain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_retain(v17);
  return a1;
}

_QWORD *sub_10008CBE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[12];
  v7 = a1[13];
  v8 = a1[14];
  v9 = a1[17];
  v23 = a1[15];
  v24 = a1[16];
  v10 = a1[20];
  v25 = a1[19];
  v26 = a1[22];
  v27 = a1[25];
  v28 = a1[27];
  swift_bridgeObjectRelease(a1[24]);
  swift_release(v10, v11);
  swift_release(v9, v12);
  swift_release(v8, v13);
  swift_bridgeObjectRelease(v6);
  swift_release(v5, v14);
  swift_release(v4, v15);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v7, v16);
  swift_release(v23, v17);
  swift_release(v24, v18);
  swift_release(v25, v19);
  swift_bridgeObjectRelease(v26);
  swift_release(v27, v20);
  swift_release(v28, v21);
  return a1;
}

unint64_t sub_10008CCDC()
{
  unint64_t result;

  result = qword_1000CCD60;
  if (!qword_1000CCD60)
  {
    result = swift_getWitnessTable(&unk_1000966B4, &type metadata for LoadingBar.IntelligentLoadingLabel);
    atomic_store(result, (unint64_t *)&qword_1000CCD60);
  }
  return result;
}

uint64_t destroy for LoadingBar.IntelligentLoadingLabel.LoadingLabel(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for LoadingBar.IntelligentLoadingLabel.LoadingLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for LoadingBar.IntelligentLoadingLabel.LoadingLabel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for LoadingBar.IntelligentLoadingLabel.LoadingLabel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[4];
  v7 = a1[4];
  a1[3] = a2[3];
  a1[4] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoadingBar.IntelligentLoadingLabel.LoadingLabel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LoadingBar.IntelligentLoadingLabel.LoadingLabel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LoadingBar.IntelligentLoadingLabel.LoadingLabel()
{
  return &type metadata for LoadingBar.IntelligentLoadingLabel.LoadingLabel;
}

uint64_t destroy for MoreWidget(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease(a1[1]);
  swift_release(a1[2], v2);
  swift_release(a1[5], v3);
  return swift_release(a1[7], v4);
}

uint64_t initializeWithCopy for MoreWidget(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRetain(v3);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t assignWithCopy for MoreWidget(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7, v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  swift_retain(v9);
  swift_release(v10, v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v13;
  swift_retain(v13);
  swift_release(v12, v14);
  return a1;
}

__n128 initializeWithTake for MoreWidget(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MoreWidget(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4, v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release(v6, v7);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MoreWidget(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MoreWidget(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MoreWidget()
{
  return &type metadata for MoreWidget;
}

uint64_t getEnumTagSinglePayload for MultipleChoiceButtonStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MultipleChoiceButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MultipleChoiceButtonStyle()
{
  return &type metadata for MultipleChoiceButtonStyle;
}

uint64_t *sub_10008D20C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v9 = a2[2];
    v8 = a2[3];
    a1[2] = v9;
    a1[3] = v8;
    v10 = *(int *)(a3 + 28);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    swift_bridgeObjectRetain(v7);
    swift_retain(v9);
    v13 = sub_100004EAC(&qword_1000CB0F8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = *(int *)(a3 + 32);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *v15 = *v16;
    v17 = *((_QWORD *)v16 + 1);
    *((_QWORD *)v15 + 1) = v17;
  }
  swift_retain(v17);
  return a1;
}

uint64_t sub_10008D2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16), v4);
  v5 = a1 + *(int *)(a2 + 28);
  v6 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 32) + 8), v7);
}

_QWORD *sub_10008D344(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v8 = a2[2];
  v7 = a2[3];
  a1[2] = v8;
  a1[3] = v7;
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  swift_bridgeObjectRetain(v6);
  swift_retain(v8);
  v12 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = *(int *)(a3 + 32);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *v14 = *v15;
  v16 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v14 + 1) = v16;
  swift_retain(v16);
  return a1;
}

_QWORD *sub_10008D3E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9, v10);
  a1[3] = a2[3];
  v11 = *(int *)(a3 + 28);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = *(int *)(a3 + 32);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *v16 = *v17;
  v18 = *((_QWORD *)v16 + 1);
  v19 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v16 + 1) = v19;
  swift_retain(v19);
  swift_release(v18, v20);
  return a1;
}

_OWORD *sub_10008D4BC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

_QWORD *sub_10008D538(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_release(v8, v9);
  a1[3] = a2[3];
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = *(int *)(a3 + 32);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  *v15 = *v16;
  v17 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_release(v17, v18);
  return a1;
}

uint64_t sub_10008D5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008D5F8);
}

uint64_t sub_10008D5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004EAC(&qword_1000CB0F8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_10008D678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008D684);
}

uint64_t sub_10008D684(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004EAC(&qword_1000CB0F8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_10008D6FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100096898;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10008B508(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_100096630;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

ValueMetadata *type metadata accessor for SelectorBackgroundModifier()
{
  return &type metadata for SelectorBackgroundModifier;
}

uint64_t destroy for CustomEntryView(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_release(a1[4], v2);
  swift_release(a1[5], v3);
  swift_bridgeObjectRelease(a1[9]);
  swift_release(a1[10], v4);
  swift_release(a1[11], v5);
  swift_release(a1[12], v6);
  swift_release(a1[13], v7);
  swift_release(a1[14], v8);
  swift_release(a1[16], v9);
  swift_release(a1[17], v10);
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(a1[21]);
  swift_release(a1[22], v11);
  return swift_release(a1[24], v12);
}

uint64_t initializeWithCopy for CustomEntryView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = v11;
  v14 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v14;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v12 = *(_QWORD *)(a2 + 128);
  v17 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v12;
  *(_QWORD *)(a1 + 136) = v17;
  v16 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v16;
  v15 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v15;
  v19 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v19;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v18 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v18;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v14);
  swift_retain(v12);
  swift_retain(v17);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v15);
  swift_retain(v19);
  swift_retain(v18);
  return a1;
}

uint64_t assignWithCopy for CustomEntryView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_retain(v8);
  swift_release(v9, v10);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  swift_retain(v11);
  swift_release(v12, v13);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v17;
  swift_retain(v17);
  swift_release(v16, v18);
  v19 = *(_QWORD *)(a2 + 88);
  v20 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v19;
  swift_retain(v19);
  swift_release(v20, v21);
  v22 = *(_QWORD *)(a1 + 96);
  v23 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v23;
  swift_retain(v23);
  swift_release(v22, v24);
  v25 = *(_QWORD *)(a1 + 104);
  v26 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v26;
  swift_retain(v26);
  swift_release(v25, v27);
  v28 = *(_QWORD *)(a2 + 112);
  v29 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v28;
  swift_retain(v28);
  swift_release(v29, v30);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v31 = *(_QWORD *)(a1 + 128);
  v32 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v32;
  swift_retain(v32);
  swift_release(v31, v33);
  v34 = *(_QWORD *)(a2 + 136);
  v35 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v34;
  swift_retain(v34);
  swift_release(v35, v36);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v37 = *(_QWORD *)(a2 + 152);
  v38 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v39 = *(_QWORD *)(a2 + 168);
  v40 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v41 = *(_QWORD *)(a1 + 176);
  v42 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v42;
  swift_retain(v42);
  swift_release(v41, v43);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v44 = *(_QWORD *)(a1 + 192);
  v45 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v45;
  swift_retain(v45);
  swift_release(v44, v46);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  return a1;
}

__n128 initializeWithTake for CustomEntryView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for CustomEntryView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v6, v7);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v8, v9);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v10 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release(v10, v11);
  swift_release(*(_QWORD *)(a1 + 88), v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release(v13, v14);
  swift_release(*(_QWORD *)(a1 + 104), v15);
  v16 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release(v16, v17);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  swift_release(*(_QWORD *)(a1 + 128), v18);
  v19 = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_release(v19, v20);
  v21 = *(_QWORD *)(a2 + 152);
  v22 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v21;
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 168));
  v23 = *(_QWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  swift_release(v23, v24);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v25 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_release(v25, v26);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomEntryView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 201))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomEntryView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 200) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 201) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 201) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomEntryView()
{
  return &type metadata for CustomEntryView;
}

ValueMetadata *type metadata accessor for QuestionTitleModifier()
{
  return &type metadata for QuestionTitleModifier;
}

uint64_t sub_10008DDE0()
{
  return sub_10000B254(&qword_1000CCE08, &qword_1000CCE10, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

unint64_t sub_10008DE10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CCE18;
  if (!qword_1000CCE18)
  {
    v1 = sub_10000ABD0(&qword_1000CCE20);
    sub_10000B254(&qword_1000CCCF8, &qword_1000CCCF0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10000B254(&qword_1000CCD00, &qword_1000CCCE0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CCE18);
  }
  return result;
}

unint64_t sub_10008DEB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CCE28;
  if (!qword_1000CCE28)
  {
    v1 = sub_10000ABD0(&qword_1000CCE30);
    sub_10000B254(&qword_1000CCD48, &qword_1000CCD38, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10000B254(&qword_1000CCD50, &qword_1000CCD40, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CCE28);
  }
  return result;
}

uint64_t sub_10008DF4C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1BCC, 1);
}

uint64_t sub_10008DF5C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1BA4, 1);
}

uint64_t sub_10008DF6C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1B7C, 1);
}

uint64_t sub_10008DF7C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1B54, 1);
}

uint64_t sub_10008DF8C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1B2C, 1);
}

uint64_t sub_10008DF9C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1B04, 1);
}

uint64_t sub_10008DFAC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1ADC, 1);
}

uint64_t sub_10008DFBC()
{
  return sub_100034050(&qword_1000CA328, &qword_1000C9FE8, (void (*)(void))sub_1000477A4);
}

uint64_t sub_10008DFE4()
{
  return sub_1000865BC();
}

unint64_t sub_10008DFEC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = qword_1000CCEC0;
  if (!qword_1000CCEC0)
  {
    v1 = sub_10000ABD0(&qword_1000CCE80);
    v2 = sub_10000ABD0(&qword_1000CCE70);
    v4 = sub_10000ABD0(&qword_1000CCE68);
    v5 = type metadata accessor for RoundedBorderTextFieldStyle(255);
    v6 = sub_10000B254(&qword_1000CCEA0, &qword_1000CCE68, (uint64_t)&protocol conformance descriptor for TextField<A>);
    v7 = sub_100005900(&qword_1000CCEA8, (uint64_t (*)(uint64_t))&type metadata accessor for RoundedBorderTextFieldStyle, (uint64_t)&protocol conformance descriptor for RoundedBorderTextFieldStyle);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.textFieldStyle<A>(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.focused(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CCEC0);
  }
  return result;
}

uint64_t sub_10008E108()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6], v1);
  swift_release(v0[7], v2);
  swift_bridgeObjectRelease(v0[11]);
  swift_release(v0[12], v3);
  swift_release(v0[13], v4);
  swift_release(v0[14], v5);
  swift_release(v0[15], v6);
  swift_release(v0[16], v7);
  swift_release(v0[18], v8);
  swift_release(v0[19], v9);
  swift_bridgeObjectRelease(v0[21]);
  swift_bridgeObjectRelease(v0[23]);
  swift_release(v0[24], v10);
  swift_release(v0[26], v11);
  return swift_deallocObject(v0, 217, 7);
}

uint64_t sub_10008E1A4()
{
  return sub_10008576C();
}

uint64_t *sub_10008E1C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[11];
  swift_release(a1[9], a2);
  swift_release(v8, v10);
  swift_release(v7, v11);
  swift_bridgeObjectRelease(v5);
  swift_release(v4, v12);
  swift_release(v3, v13);
  swift_release(v6, v14);
  swift_release(v9, v15);
  return a1;
}

uint64_t sub_10008E24C(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_10008E27C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[10];
  v3 = a1[11];
  swift_retain(a1[12]);
  swift_retain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_10008E2C4()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 64);
  v3 = 1;
  v1 = sub_100004EAC(&qword_1000C9FA0);
  return State.wrappedValue.setter(&v3, v1);
}

_QWORD *sub_10008E310(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[5];
  swift_retain(a1[7]);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_10008E364()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4], v1);
  swift_release(v0[7], v2);
  swift_release(v0[9], v3);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10008E3A0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000856E0(a1, v1 + 16);
}

unint64_t sub_10008E3A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CCF30;
  if (!qword_1000CCF30)
  {
    v1 = sub_10000ABD0(&qword_1000CCF08);
    sub_10000B254(&qword_1000CCF38, &qword_1000CCF40, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10000B254(&qword_1000CCC20, &qword_1000C8030, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CCF30);
  }
  return result;
}

uint64_t sub_10008E44C@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_10008917C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10008E454@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10008E47C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

uint64_t sub_10008E4A8()
{
  return sub_10008E4BC(type metadata accessor for PickerRowCore, sub_100089ACC);
}

uint64_t sub_10008E4BC(uint64_t (*a1)(_QWORD), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(v2 + ((v3 + 16) & ~v3));
}

unint64_t sub_10008E4FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CCFB0;
  if (!qword_1000CCFB0)
  {
    v1 = sub_10000ABD0(&qword_1000CCF88);
    sub_10000B254(&qword_1000CCFB8, &qword_1000CCF80, (uint64_t)&protocol conformance descriptor for Picker<A, B, C>);
    sub_10000B254(&qword_1000CCFC0, &qword_1000CCFC8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CCFB0);
  }
  return result;
}

uint64_t sub_10008E598(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000ABD0(&qword_1000CB0F0);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10008E5F8()
{
  uint64_t v0;

  sub_10008939C(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10008E600()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CCFF8;
  if (!qword_1000CCFF8)
  {
    v1 = sub_10000ABD0(&qword_1000CCFF0);
    sub_10008E664();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CCFF8);
  }
  return result;
}

unint64_t sub_10008E664()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CD000;
  if (!qword_1000CD000)
  {
    v1 = sub_10000ABD0(&qword_1000CD008);
    sub_10008E6E8();
    sub_10000B254(&qword_1000CD030, &qword_1000CD038, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CD000);
  }
  return result;
}

unint64_t sub_10008E6E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CD010;
  if (!qword_1000CD010)
  {
    v1 = sub_10000ABD0(&qword_1000CD018);
    sub_10000B254(&qword_1000CD020, &qword_1000CD028, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CD010);
  }
  return result;
}

uint64_t sub_10008E76C@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1000896D8(*(uint64_t **)(v1 + 16), a1);
}

double sub_10008E774(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_10008E78C(uint64_t a1, uint64_t a2)
{
  if (a2 != 2)
    return sub_10000B080(a1, a2);
  return a1;
}

uint64_t sub_10008E79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t result;

  if (a7)
  {
    sub_10000ADBC(a4, a5, a6 & 1);
    swift_retain(a12);
    swift_bridgeObjectRetain(a7);
    swift_retain(a10);
    swift_retain(a11);
    sub_10000B080(a13, a14);
    return sub_10008E78C(a15, a16);
  }
  return result;
}

_QWORD *sub_10008E82C(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return a1;
}

uint64_t sub_10008E888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  if (a7)
  {
    sub_10000ADF4(a4, a5, a6 & 1);
    swift_release(a11, v17);
    swift_release(a10, v18);
    swift_bridgeObjectRelease(a7);
    swift_release(a12, v19);
    sub_10000A8A0(a13, a14);
    return sub_10008E918(a15, a16);
  }
  return result;
}

uint64_t sub_10008E918(uint64_t a1, uint64_t a2)
{
  if (a2 != 2)
    return sub_10000A8A0(a1, a2);
  return a1;
}

uint64_t sub_10008E928@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10008E950(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_10008E97C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for PickerRowCore(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_release(*(_QWORD *)(v7 + 16), v8);
  v9 = v7 + *(int *)(v1 + 28);
  v10 = sub_100004EAC(&qword_1000CB0F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 32) + 8), v11);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10008EA24(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for PickerRowCore(0);
  sub_100089584(a1, a2);
}

unint64_t sub_10008EA78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CD098;
  if (!qword_1000CD098)
  {
    v1 = sub_10000ABD0(&qword_1000CD078);
    sub_10000B254(&qword_1000CD0A0, &qword_1000CD088, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000B254(&qword_1000CD0A8, &qword_1000CD0B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CD098);
  }
  return result;
}

uint64_t destroy for TappableWidget(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*a1, a2);
  swift_release(a1[1], v3);
  swift_bridgeObjectRelease(a1[3]);
  swift_release(a1[4], v4);
  swift_release(a1[5], v5);
  swift_release(a1[6], v6);
  swift_release(a1[9], v7);
  return swift_release(a1[11], v8);
}

uint64_t initializeWithCopy for TappableWidget(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v9 = a2[6];
  v8 = a2[7];
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v8;
  v10 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v11 = a2[11];
  *(_QWORD *)(a1 + 88) = v11;
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v11);
  return a1;
}

uint64_t *assignWithCopy for TappableWidget(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4, v6);
  v7 = a2[1];
  v8 = a1[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v8, v9);
  a1[2] = a2[2];
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a1[4];
  v13 = a2[4];
  a1[4] = v13;
  swift_retain(v13);
  swift_release(v12, v14);
  v15 = a2[5];
  v16 = a1[5];
  a1[5] = v15;
  swift_retain(v15);
  swift_release(v16, v17);
  v18 = a2[6];
  v19 = a1[6];
  a1[6] = v18;
  swift_retain(v18);
  swift_release(v19, v20);
  a1[7] = a2[7];
  v21 = a2[9];
  v22 = a1[9];
  a1[8] = a2[8];
  a1[9] = v21;
  swift_retain(v21);
  swift_release(v22, v23);
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  v24 = a1[11];
  v25 = a2[11];
  a1[11] = v25;
  swift_retain(v25);
  swift_release(v24, v26);
  return a1;
}

__n128 initializeWithTake for TappableWidget(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for TappableWidget(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_release(*(_QWORD *)a1, a2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4, v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v6, v7);
  swift_release(*(_QWORD *)(a1 + 40), v8);
  v9 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v9, v10);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release(v11, v12);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release(v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for TappableWidget(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TappableWidget(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TappableWidget()
{
  return &type metadata for TappableWidget;
}

uint64_t sub_10008EE8C()
{
  return sub_100034050(&qword_1000CD0B8, &qword_1000CCE50, (void (*)(void))sub_10008EEC0);
}

unint64_t sub_10008EEC0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000CD0C0;
  if (!qword_1000CD0C0)
  {
    v1 = sub_10000ABD0(&qword_1000CCE48);
    v2[0] = sub_10000ABD0(&qword_1000CCE38);
    v2[1] = sub_100034050(&qword_1000CCE58, &qword_1000CCE38, (void (*)(void))sub_10008DFBC);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_10000B254(&qword_1000CCC20, &qword_1000C8030, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CD0C0);
  }
  return result;
}

uint64_t sub_10008EF94()
{
  return sub_10000B254(&qword_1000CD0C8, &qword_1000CD0D0, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_10008EFC0()
{
  return sub_10000B254(&qword_1000CD0D8, &qword_1000CD0E0, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_10008EFEC()
{
  _QWORD v1[4];

  v1[0] = sub_10000ABD0(&qword_1000CCF08);
  v1[1] = sub_10000ABD0(&qword_1000CCF00);
  v1[2] = sub_10008E3A8();
  v1[3] = sub_10000B254(&qword_1000CCF48, &qword_1000CCF00, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:including:)>>, 1);
}

unint64_t sub_10008F078()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CD0E8;
  if (!qword_1000CD0E8)
  {
    v1 = sub_10000ABD0(&qword_1000CD0F0);
    sub_10008BFB8();
    sub_10000B254(&qword_1000CCF78, &qword_1000CCF50, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CD0E8);
  }
  return result;
}

uint64_t sub_10008F0FC()
{
  return sub_10008F128(&qword_1000CD0F8, &qword_1000CD070, (void (*)(void))sub_10008F1AC);
}

uint64_t sub_10008F128(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000ABD0(a2);
    a3();
    sub_100005900(&qword_1000CCC28, type metadata accessor for CommonUIBlendModifier, (uint64_t)&unk_100094118);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10008F1AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CD100;
  if (!qword_1000CD100)
  {
    v1 = sub_10000ABD0(&qword_1000CD060);
    sub_10000B254(&qword_1000CD108, &qword_1000CD068, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10000B254(&qword_1000CCC20, &qword_1000C8030, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CD100);
  }
  return result;
}

uint64_t sub_10008F248()
{
  _QWORD v1[2];

  v1[0] = sub_10000ABD0(&qword_1000CD080);
  v1[1] = sub_100034050(&qword_1000CD090, &qword_1000CD080, (void (*)(void))sub_10008EA78);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
}

uint64_t sub_10008F2B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000B1BF4, 1);
}

uint64_t sub_10008F2C8()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 96);
  v3 = 1;
  v1 = sub_100004EAC(&qword_1000C9FA0);
  return State.wrappedValue.setter(&v3, v1);
}

uint64_t *sub_10008F314(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[9];
  swift_retain(a1[11]);
  swift_retain(v2);
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t sub_10008F3A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(v2[2], a2);
  swift_release(v2[3], v3);
  swift_bridgeObjectRelease(v2[5]);
  swift_release(v2[6], v4);
  swift_release(v2[7], v5);
  swift_release(v2[8], v6);
  swift_release(v2[11], v7);
  swift_release(v2[13], v8);
  return swift_deallocObject(v2, 112, 7);
}

uint64_t sub_10008F3FC(uint64_t a1)
{
  uint64_t v1;

  return sub_100084D68(a1, v1 + 16);
}

uint64_t sub_10008F404()
{
  return sub_1000213F8();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC21WritingToolsUIServiceP33_AF71D079DD38C8FBA375A0DA6ADD060C19ResourceBundleClass);
}

